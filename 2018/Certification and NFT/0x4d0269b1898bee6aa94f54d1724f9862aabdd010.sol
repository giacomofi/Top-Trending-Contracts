['pragma solidity 0.4.23;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/REBToken.sol\n', '\n', '/**\n', ' * @title REB Token contract - ERC20 compatible token contract.\n', ' */\n', 'contract REBToken is PausableToken, MintableToken {\n', '    string public name = "REBGLO Token";\n', '    string public symbol = "REB";\n', '    uint8 public decimals = 18;\n', '\n', '    /**\n', '     * @dev Contract constructor function to start token paused for transfer\n', '     */\n', '    function REBToken() public {\n', '        pause();\n', '    }\n', '\n', '    /**\n', '     * @dev check user&#39;s REB balance tier\n', '     * @param holderAddress Token holder address\n', '     * @return string representing the milestone tier\n', '     */\n', '    function checkBalanceTier(address holderAddress) public view returns(string) {\n', '        uint256 holderBalance = balanceOf(holderAddress);\n', '\n', '        if (holderBalance >= 1000000e18) {\n', '            return "Platinum tier";\n', '        } else if (holderBalance >= 700000e18) {\n', '            return "Gold tier";\n', '        } else if (holderBalance >= 300000e18) {\n', '            return "Titanium tier";\n', '        } else if (holderBalance == 0) {\n', '            return "Possess no REB";\n', '        }\n', '\n', '        return "Free tier";\n', '    }\n', '}\n', '\n', '// File: contracts/LockTokenAllocation.sol\n', '\n', '/**\n', ' * @title LockTokenAllocation contract\n', ' */\n', 'contract LockTokenAllocation is Ownable {\n', '    using SafeMath for uint;\n', '    uint256 public unlockedAt;\n', '    uint256 public canSelfDestruct;\n', '    uint256 public tokensCreated;\n', '    uint256 public allocatedTokens;\n', '    uint256 public totalLockTokenAllocation;\n', '\n', '    mapping (address => uint256) public lockedAllocations;\n', '\n', '    REBToken public REB;\n', '\n', '    /**\n', '     * @dev constructor function that sets token, totalTokenSupply, unlock time, and selfdestruct timestamp\n', '     * for the LockTokenAllocation contract\n', '     */\n', '    function LockTokenAllocation\n', '        (\n', '            REBToken _token,\n', '            uint256 _unlockedAt,\n', '            uint256 _canSelfDestruct,\n', '            uint256 _totalLockTokenAllocation\n', '        )\n', '        public\n', '    {\n', '        require(_token != address(0));\n', '\n', '        REB = REBToken(_token);\n', '        unlockedAt = _unlockedAt;\n', '        canSelfDestruct = _canSelfDestruct;\n', '        totalLockTokenAllocation = _totalLockTokenAllocation;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds founders&#39; token allocation\n', '     * @param beneficiary Ethereum address of a person\n', '     * @param allocationValue Number of tokens allocated to person\n', '     * @return true if address is correctly added\n', '     */\n', '    function addLockTokenAllocation(address beneficiary, uint256 allocationValue)\n', '        external\n', '        onlyOwner\n', '        returns(bool)\n', '    {\n', '        require(lockedAllocations[beneficiary] == 0 && beneficiary != address(0)); // can only add once.\n', '\n', '        allocatedTokens = allocatedTokens.add(allocationValue);\n', '        require(allocatedTokens <= totalLockTokenAllocation);\n', '\n', '        lockedAllocations[beneficiary] = allocationValue;\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allow unlocking of allocated tokens by transferring them to whitelisted addresses.\n', '     * Need to be called by each address\n', '     */\n', '    function unlock() external {\n', '        require(REB != address(0));\n', '        assert(now >= unlockedAt);\n', '\n', '        // During first unlock attempt fetch total number of locked tokens.\n', '        if (tokensCreated == 0) {\n', '            tokensCreated = REB.balanceOf(this);\n', '        }\n', '\n', '        uint256 transferAllocation = lockedAllocations[msg.sender];\n', '        lockedAllocations[msg.sender] = 0;\n', '\n', '        // Will fail if allocation (and therefore toTransfer) is 0.\n', '        require(REB.transfer(msg.sender, transferAllocation));\n', '    }\n', '\n', '    /**\n', '     * @dev allow for selfdestruct possibility and sending funds to owner\n', '     */\n', '    function kill() public onlyOwner {\n', '        require(now >= canSelfDestruct);\n', '        uint256 balance = REB.balanceOf(this);\n', '\n', '        if (balance > 0) {\n', '            REB.transfer(msg.sender, balance);\n', '        }\n', '\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', ' * the methods to add functionality. Consider using &#39;super&#39; where appropiate to concatenate\n', ' * behavior.\n', ' */\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statemens to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    require(now >= openingTime && now <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  function TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\n', '    require(_openingTime >= now);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    return now > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/validation/WhitelistedCrowdsale.sol\n', '\n', '/**\n', ' * @title WhitelistedCrowdsale\n', ' * @dev Crowdsale in which only whitelisted users can contribute.\n', ' */\n', 'contract WhitelistedCrowdsale is Crowdsale, Ownable {\n', '\n', '  mapping(address => bool) public whitelist;\n', '\n', '  /**\n', '   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '   */\n', '  modifier isWhitelisted(address _beneficiary) {\n', '    require(whitelist[_beneficiary]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '  function addToWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelist[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Removes single address from whitelist.\n', '   * @param _beneficiary Address to be removed to the whitelist\n', '   */\n', '  function removeFromWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n', '   * @param _beneficiary Token beneficiary\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/REBCrowdsale.sol\n', '\n', '/**\n', ' * @title REB Crowdsale contract - crowdsale contract for the REB tokens.\n', ' */\n', 'contract REBCrowdsale is FinalizableCrowdsale, WhitelistedCrowdsale, Pausable {\n', '    uint256 constant public BOUNTY_SHARE =               125000000e18;   // 125 M\n', '    uint256 constant public TEAM_SHARE =                 2800000000e18;  // 2.8 B\n', '    uint256 constant public ADVISOR_SHARE =              1750000000e18;  // 1.75 B\n', '\n', '    uint256 constant public AIRDROP_SHARE =              200000000e18;   // 200 M\n', '    uint256 constant public TOTAL_TOKENS_FOR_CROWDSALE = 5125000000e18;  // 5.125 B\n', '\n', '    uint256 constant public PUBLIC_CROWDSALE_SOFT_CAP =  800000000e18;  // 800 M\n', '\n', '    address public bountyWallet;\n', '    address public teamReserve;\n', '    address public advisorReserve;\n', '    address public airdrop;\n', '\n', '    // remainderPurchaser and remainderTokens info saved in the contract\n', '    // used for reference for contract owner to send refund if any to last purchaser after end of crowdsale\n', '    address public remainderPurchaser;\n', '    uint256 public remainderAmount;\n', '\n', '    // external contracts\n', '\n', '    event MintedTokensFor(address indexed investor, uint256 tokensPurchased);\n', '    event TokenRateChanged(uint256 previousRate, uint256 newRate);\n', '\n', '    /**\n', '     * @dev Contract constructor function\n', '     * @param _openingTime The timestamp of the beginning of the crowdsale\n', '     * @param _closingTime Timestamp when the crowdsale will finish\n', '     * @param _token REB token address\n', '     * @param _rate The token rate per ETH\n', '     * @param _wallet Multisig wallet that will hold the crowdsale funds.\n', '     * @param _bountyWallet Ethereum address where bounty tokens will be minted to\n', '     */\n', '    function REBCrowdsale\n', '        (\n', '            uint256 _openingTime,\n', '            uint256 _closingTime,\n', '            REBToken _token,\n', '            uint256 _rate,\n', '            address _wallet,\n', '            address _bountyWallet\n', '        )\n', '        public\n', '        FinalizableCrowdsale()\n', '        Crowdsale(_rate, _wallet, _token)\n', '        TimedCrowdsale(_openingTime, _closingTime)\n', '    {\n', '        require(_bountyWallet != address(0));\n', '        bountyWallet = _bountyWallet;\n', '\n', '        require(REBToken(token).paused());\n', '        // NOTE: Ensure token ownership is transferred to crowdsale so it able to mint tokens\n', '    }\n', '\n', '    /**\n', '     * @dev change crowdsale rate\n', '     * @param newRate Figure that corresponds to the new rate per token\n', '     */\n', '    function setRate(uint256 newRate) external onlyOwner {\n', '        require(newRate != 0);\n', '\n', '        TokenRateChanged(rate, newRate);\n', '        rate = newRate;\n', '    }\n', '\n', '    /**\n', '     * @dev Mint tokens investors that send fiat for token purchases.\n', '     * The send of fiat will be off chain and custom minting happens in this function and it performed by the owner\n', '     * @param beneficiaryAddress Address of beneficiary\n', '     * @param amountOfTokens Number of tokens to be created\n', '     */\n', '    function mintTokensFor(address beneficiaryAddress, uint256 amountOfTokens)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(beneficiaryAddress != address(0));\n', '        require(token.totalSupply().add(amountOfTokens) <= TOTAL_TOKENS_FOR_CROWDSALE);\n', '\n', '        _deliverTokens(beneficiaryAddress, amountOfTokens);\n', '        MintedTokensFor(beneficiaryAddress, amountOfTokens);\n', '    }\n', '\n', '    /**\n', '     * @dev Set the address which should receive the vested team and advisors tokens plus airdrop shares on finalization\n', '     * @param _teamReserve address of team and advisor allocation contract\n', '     * @param _advisorReserve address of team and advisor allocation contract\n', '     * @param _airdrop address of airdrop contract\n', '     */\n', '    function setTeamAndAdvisorAndAirdropAddresses\n', '        (\n', '            address _teamReserve,\n', '            address _advisorReserve,\n', '            address _airdrop\n', '        )\n', '        public\n', '        onlyOwner\n', '    {\n', '        // only able to be set once\n', '        require(teamReserve == address(0x0) && advisorReserve == address(0x0) && airdrop == address(0x0));\n', '        // ensure that the addresses as params to the func are not empty\n', '        require(_teamReserve != address(0x0) && _advisorReserve != address(0x0) && _airdrop != address(0x0));\n', '\n', '        teamReserve = _teamReserve;\n', '        advisorReserve = _advisorReserve;\n', '        airdrop = _airdrop;\n', '    }\n', '\n', '    // overriding TimeCrowdsale#hasClosed to add cap logic\n', '    // @return true if crowdsale event has ended\n', '    function hasClosed() public view returns (bool) {\n', '        if (token.totalSupply() > PUBLIC_CROWDSALE_SOFT_CAP) {\n', '            return true;\n', '        }\n', '\n', '        return super.hasClosed();\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides delivery by minting tokens upon purchase.\n', '     * @param _beneficiary Token purchaser\n', '     * @param _tokenAmount Number of tokens to be minted\n', '     */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        require(MintableToken(token).mint(_beneficiary, _tokenAmount));\n', '    }\n', '\n', '    /**\n', '     * @dev Override validation of an incoming purchase.\n', '     * Use require statemens to revert state when conditions are not met. Use super to concatenate validations.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount)\n', '        internal\n', '        isWhitelisted(_beneficiary)\n', '        whenNotPaused\n', '    {\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '        require(token.totalSupply() < TOTAL_TOKENS_FOR_CROWDSALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Override to extend the way in which ether is converted to tokens.\n', '     * @param _weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint256 tokensAmount = _weiAmount.mul(rate);\n', '\n', '        // remainder logic\n', '        if (token.totalSupply().add(tokensAmount) > TOTAL_TOKENS_FOR_CROWDSALE) {\n', '            tokensAmount = TOTAL_TOKENS_FOR_CROWDSALE.sub(token.totalSupply());\n', '            uint256 _weiAmountLocalScope = tokensAmount.div(rate);\n', '\n', '            // save info so as to refund purchaser after crowdsale&#39;s end\n', '            remainderPurchaser = msg.sender;\n', '            remainderAmount = _weiAmount.sub(_weiAmountLocalScope);\n', '\n', '            // update state here so when it is updated again in buyTokens the weiAmount reflects the remainder logic\n', '            if (weiRaised > _weiAmount.add(_weiAmountLocalScope))\n', '                weiRaised = weiRaised.sub(_weiAmount.add(_weiAmountLocalScope));\n', '        }\n', '\n', '        return tokensAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev finalizes crowdsale\n', '     */\n', '    function finalization() internal {\n', '        // This must have been set manually prior to finalize().\n', '        require(teamReserve != address(0x0) && advisorReserve != address(0x0) && airdrop != address(0x0));\n', '\n', '        if (TOTAL_TOKENS_FOR_CROWDSALE > token.totalSupply()) {\n', '            uint256 remainingTokens = TOTAL_TOKENS_FOR_CROWDSALE.sub(token.totalSupply());\n', '            _deliverTokens(wallet, remainingTokens);\n', '        }\n', '\n', '        // final minting\n', '        _deliverTokens(bountyWallet, BOUNTY_SHARE);\n', '        _deliverTokens(teamReserve, TEAM_SHARE);\n', '        _deliverTokens(advisorReserve, ADVISOR_SHARE);\n', '        _deliverTokens(airdrop, AIRDROP_SHARE);\n', '\n', '        REBToken(token).finishMinting();\n', '        REBToken(token).unpause();\n', '        super.finalization();\n', '    }\n', '}']
['pragma solidity 0.4.23;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/REBToken.sol\n', '\n', '/**\n', ' * @title REB Token contract - ERC20 compatible token contract.\n', ' */\n', 'contract REBToken is PausableToken, MintableToken {\n', '    string public name = "REBGLO Token";\n', '    string public symbol = "REB";\n', '    uint8 public decimals = 18;\n', '\n', '    /**\n', '     * @dev Contract constructor function to start token paused for transfer\n', '     */\n', '    function REBToken() public {\n', '        pause();\n', '    }\n', '\n', '    /**\n', "     * @dev check user's REB balance tier\n", '     * @param holderAddress Token holder address\n', '     * @return string representing the milestone tier\n', '     */\n', '    function checkBalanceTier(address holderAddress) public view returns(string) {\n', '        uint256 holderBalance = balanceOf(holderAddress);\n', '\n', '        if (holderBalance >= 1000000e18) {\n', '            return "Platinum tier";\n', '        } else if (holderBalance >= 700000e18) {\n', '            return "Gold tier";\n', '        } else if (holderBalance >= 300000e18) {\n', '            return "Titanium tier";\n', '        } else if (holderBalance == 0) {\n', '            return "Possess no REB";\n', '        }\n', '\n', '        return "Free tier";\n', '    }\n', '}\n', '\n', '// File: contracts/LockTokenAllocation.sol\n', '\n', '/**\n', ' * @title LockTokenAllocation contract\n', ' */\n', 'contract LockTokenAllocation is Ownable {\n', '    using SafeMath for uint;\n', '    uint256 public unlockedAt;\n', '    uint256 public canSelfDestruct;\n', '    uint256 public tokensCreated;\n', '    uint256 public allocatedTokens;\n', '    uint256 public totalLockTokenAllocation;\n', '\n', '    mapping (address => uint256) public lockedAllocations;\n', '\n', '    REBToken public REB;\n', '\n', '    /**\n', '     * @dev constructor function that sets token, totalTokenSupply, unlock time, and selfdestruct timestamp\n', '     * for the LockTokenAllocation contract\n', '     */\n', '    function LockTokenAllocation\n', '        (\n', '            REBToken _token,\n', '            uint256 _unlockedAt,\n', '            uint256 _canSelfDestruct,\n', '            uint256 _totalLockTokenAllocation\n', '        )\n', '        public\n', '    {\n', '        require(_token != address(0));\n', '\n', '        REB = REBToken(_token);\n', '        unlockedAt = _unlockedAt;\n', '        canSelfDestruct = _canSelfDestruct;\n', '        totalLockTokenAllocation = _totalLockTokenAllocation;\n', '    }\n', '\n', '    /**\n', "     * @dev Adds founders' token allocation\n", '     * @param beneficiary Ethereum address of a person\n', '     * @param allocationValue Number of tokens allocated to person\n', '     * @return true if address is correctly added\n', '     */\n', '    function addLockTokenAllocation(address beneficiary, uint256 allocationValue)\n', '        external\n', '        onlyOwner\n', '        returns(bool)\n', '    {\n', '        require(lockedAllocations[beneficiary] == 0 && beneficiary != address(0)); // can only add once.\n', '\n', '        allocatedTokens = allocatedTokens.add(allocationValue);\n', '        require(allocatedTokens <= totalLockTokenAllocation);\n', '\n', '        lockedAllocations[beneficiary] = allocationValue;\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allow unlocking of allocated tokens by transferring them to whitelisted addresses.\n', '     * Need to be called by each address\n', '     */\n', '    function unlock() external {\n', '        require(REB != address(0));\n', '        assert(now >= unlockedAt);\n', '\n', '        // During first unlock attempt fetch total number of locked tokens.\n', '        if (tokensCreated == 0) {\n', '            tokensCreated = REB.balanceOf(this);\n', '        }\n', '\n', '        uint256 transferAllocation = lockedAllocations[msg.sender];\n', '        lockedAllocations[msg.sender] = 0;\n', '\n', '        // Will fail if allocation (and therefore toTransfer) is 0.\n', '        require(REB.transfer(msg.sender, transferAllocation));\n', '    }\n', '\n', '    /**\n', '     * @dev allow for selfdestruct possibility and sending funds to owner\n', '     */\n', '    function kill() public onlyOwner {\n', '        require(now >= canSelfDestruct);\n', '        uint256 balance = REB.balanceOf(this);\n', '\n', '        if (balance > 0) {\n', '            REB.transfer(msg.sender, balance);\n', '        }\n', '\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n", ' * behavior.\n', ' */\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statemens to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    require(now >= openingTime && now <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  function TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\n', '    require(_openingTime >= now);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    return now > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/validation/WhitelistedCrowdsale.sol\n', '\n', '/**\n', ' * @title WhitelistedCrowdsale\n', ' * @dev Crowdsale in which only whitelisted users can contribute.\n', ' */\n', 'contract WhitelistedCrowdsale is Crowdsale, Ownable {\n', '\n', '  mapping(address => bool) public whitelist;\n', '\n', '  /**\n', '   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '   */\n', '  modifier isWhitelisted(address _beneficiary) {\n', '    require(whitelist[_beneficiary]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '  function addToWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelist[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Removes single address from whitelist.\n', '   * @param _beneficiary Address to be removed to the whitelist\n', '   */\n', '  function removeFromWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n', '   * @param _beneficiary Token beneficiary\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/REBCrowdsale.sol\n', '\n', '/**\n', ' * @title REB Crowdsale contract - crowdsale contract for the REB tokens.\n', ' */\n', 'contract REBCrowdsale is FinalizableCrowdsale, WhitelistedCrowdsale, Pausable {\n', '    uint256 constant public BOUNTY_SHARE =               125000000e18;   // 125 M\n', '    uint256 constant public TEAM_SHARE =                 2800000000e18;  // 2.8 B\n', '    uint256 constant public ADVISOR_SHARE =              1750000000e18;  // 1.75 B\n', '\n', '    uint256 constant public AIRDROP_SHARE =              200000000e18;   // 200 M\n', '    uint256 constant public TOTAL_TOKENS_FOR_CROWDSALE = 5125000000e18;  // 5.125 B\n', '\n', '    uint256 constant public PUBLIC_CROWDSALE_SOFT_CAP =  800000000e18;  // 800 M\n', '\n', '    address public bountyWallet;\n', '    address public teamReserve;\n', '    address public advisorReserve;\n', '    address public airdrop;\n', '\n', '    // remainderPurchaser and remainderTokens info saved in the contract\n', '    // used for reference for contract owner to send refund if any to last purchaser after end of crowdsale\n', '    address public remainderPurchaser;\n', '    uint256 public remainderAmount;\n', '\n', '    // external contracts\n', '\n', '    event MintedTokensFor(address indexed investor, uint256 tokensPurchased);\n', '    event TokenRateChanged(uint256 previousRate, uint256 newRate);\n', '\n', '    /**\n', '     * @dev Contract constructor function\n', '     * @param _openingTime The timestamp of the beginning of the crowdsale\n', '     * @param _closingTime Timestamp when the crowdsale will finish\n', '     * @param _token REB token address\n', '     * @param _rate The token rate per ETH\n', '     * @param _wallet Multisig wallet that will hold the crowdsale funds.\n', '     * @param _bountyWallet Ethereum address where bounty tokens will be minted to\n', '     */\n', '    function REBCrowdsale\n', '        (\n', '            uint256 _openingTime,\n', '            uint256 _closingTime,\n', '            REBToken _token,\n', '            uint256 _rate,\n', '            address _wallet,\n', '            address _bountyWallet\n', '        )\n', '        public\n', '        FinalizableCrowdsale()\n', '        Crowdsale(_rate, _wallet, _token)\n', '        TimedCrowdsale(_openingTime, _closingTime)\n', '    {\n', '        require(_bountyWallet != address(0));\n', '        bountyWallet = _bountyWallet;\n', '\n', '        require(REBToken(token).paused());\n', '        // NOTE: Ensure token ownership is transferred to crowdsale so it able to mint tokens\n', '    }\n', '\n', '    /**\n', '     * @dev change crowdsale rate\n', '     * @param newRate Figure that corresponds to the new rate per token\n', '     */\n', '    function setRate(uint256 newRate) external onlyOwner {\n', '        require(newRate != 0);\n', '\n', '        TokenRateChanged(rate, newRate);\n', '        rate = newRate;\n', '    }\n', '\n', '    /**\n', '     * @dev Mint tokens investors that send fiat for token purchases.\n', '     * The send of fiat will be off chain and custom minting happens in this function and it performed by the owner\n', '     * @param beneficiaryAddress Address of beneficiary\n', '     * @param amountOfTokens Number of tokens to be created\n', '     */\n', '    function mintTokensFor(address beneficiaryAddress, uint256 amountOfTokens)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(beneficiaryAddress != address(0));\n', '        require(token.totalSupply().add(amountOfTokens) <= TOTAL_TOKENS_FOR_CROWDSALE);\n', '\n', '        _deliverTokens(beneficiaryAddress, amountOfTokens);\n', '        MintedTokensFor(beneficiaryAddress, amountOfTokens);\n', '    }\n', '\n', '    /**\n', '     * @dev Set the address which should receive the vested team and advisors tokens plus airdrop shares on finalization\n', '     * @param _teamReserve address of team and advisor allocation contract\n', '     * @param _advisorReserve address of team and advisor allocation contract\n', '     * @param _airdrop address of airdrop contract\n', '     */\n', '    function setTeamAndAdvisorAndAirdropAddresses\n', '        (\n', '            address _teamReserve,\n', '            address _advisorReserve,\n', '            address _airdrop\n', '        )\n', '        public\n', '        onlyOwner\n', '    {\n', '        // only able to be set once\n', '        require(teamReserve == address(0x0) && advisorReserve == address(0x0) && airdrop == address(0x0));\n', '        // ensure that the addresses as params to the func are not empty\n', '        require(_teamReserve != address(0x0) && _advisorReserve != address(0x0) && _airdrop != address(0x0));\n', '\n', '        teamReserve = _teamReserve;\n', '        advisorReserve = _advisorReserve;\n', '        airdrop = _airdrop;\n', '    }\n', '\n', '    // overriding TimeCrowdsale#hasClosed to add cap logic\n', '    // @return true if crowdsale event has ended\n', '    function hasClosed() public view returns (bool) {\n', '        if (token.totalSupply() > PUBLIC_CROWDSALE_SOFT_CAP) {\n', '            return true;\n', '        }\n', '\n', '        return super.hasClosed();\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides delivery by minting tokens upon purchase.\n', '     * @param _beneficiary Token purchaser\n', '     * @param _tokenAmount Number of tokens to be minted\n', '     */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        require(MintableToken(token).mint(_beneficiary, _tokenAmount));\n', '    }\n', '\n', '    /**\n', '     * @dev Override validation of an incoming purchase.\n', '     * Use require statemens to revert state when conditions are not met. Use super to concatenate validations.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount)\n', '        internal\n', '        isWhitelisted(_beneficiary)\n', '        whenNotPaused\n', '    {\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '        require(token.totalSupply() < TOTAL_TOKENS_FOR_CROWDSALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Override to extend the way in which ether is converted to tokens.\n', '     * @param _weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint256 tokensAmount = _weiAmount.mul(rate);\n', '\n', '        // remainder logic\n', '        if (token.totalSupply().add(tokensAmount) > TOTAL_TOKENS_FOR_CROWDSALE) {\n', '            tokensAmount = TOTAL_TOKENS_FOR_CROWDSALE.sub(token.totalSupply());\n', '            uint256 _weiAmountLocalScope = tokensAmount.div(rate);\n', '\n', "            // save info so as to refund purchaser after crowdsale's end\n", '            remainderPurchaser = msg.sender;\n', '            remainderAmount = _weiAmount.sub(_weiAmountLocalScope);\n', '\n', '            // update state here so when it is updated again in buyTokens the weiAmount reflects the remainder logic\n', '            if (weiRaised > _weiAmount.add(_weiAmountLocalScope))\n', '                weiRaised = weiRaised.sub(_weiAmount.add(_weiAmountLocalScope));\n', '        }\n', '\n', '        return tokensAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev finalizes crowdsale\n', '     */\n', '    function finalization() internal {\n', '        // This must have been set manually prior to finalize().\n', '        require(teamReserve != address(0x0) && advisorReserve != address(0x0) && airdrop != address(0x0));\n', '\n', '        if (TOTAL_TOKENS_FOR_CROWDSALE > token.totalSupply()) {\n', '            uint256 remainingTokens = TOTAL_TOKENS_FOR_CROWDSALE.sub(token.totalSupply());\n', '            _deliverTokens(wallet, remainingTokens);\n', '        }\n', '\n', '        // final minting\n', '        _deliverTokens(bountyWallet, BOUNTY_SHARE);\n', '        _deliverTokens(teamReserve, TEAM_SHARE);\n', '        _deliverTokens(advisorReserve, ADVISOR_SHARE);\n', '        _deliverTokens(airdrop, AIRDROP_SHARE);\n', '\n', '        REBToken(token).finishMinting();\n', '        REBToken(token).unpause();\n', '        super.finalization();\n', '    }\n', '}']
