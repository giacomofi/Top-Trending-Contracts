['pragma solidity ^0.4.19;\n', '\n', 'contract Ownable{\n', '    address public owner;\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract CryptoChamps is Ownable{\n', '    \n', '    struct Person {\n', '        uint32 id;\n', '        string name;\n', '        uint16 txCount;\n', '        bool discounted;\n', '    }\n', '    \n', '    event Birth(uint32 _id, uint _startingPrice);\n', '    event Discount(uint32 _id, uint _newPrice);\n', '    event Purchase(uint32 indexed _id, address indexed _by, address indexed _from, uint _price, uint _nextPrice);\n', '    event Transfer(address indexed _from, address indexed _to, uint32 _id);\n', '    \n', '    uint public totalSupply = 0;\n', '    string public name = "CryptoChamps";\n', '    string public symbol = "CCH";\n', '    address store;\n', '    mapping (uint32 => Person) private people;\n', '    mapping (uint32 => address) private personToOwner;\n', '    mapping (uint32 => uint256) public personToPrice;\n', '    mapping (uint32 => uint256) public personToOldPrice;\n', '    mapping (address => uint) private noOfPersonsOwned;\n', '    mapping (address => bool) private isUserAdded;\n', '    \n', '    address[] private users;\n', '    \n', '    uint8 BELOW_FIVE = 200;\n', '    uint8 BELOW_TEN = 150;\n', '    uint8 BELOW_FIFTEEN = 130;\n', '    uint8 BELOW_TWENTY = 120;\n', '    uint8 TWENTY_ABOVE = 110;\n', '    \n', '    function CryptoChamps() public{\n', '        store = msg.sender;\n', '    }\n', '    \n', '    function createPerson (uint32 _id, string _name, uint256 _startingPrice) external onlyOwner {\n', '        require(people[_id].id == 0);\n', '        Person memory person = Person(_id, _name, 0, false);\n', '        people[_id] = person;\n', '        personToOwner[_id] = owner;\n', '        personToPrice[_id] = _startingPrice;\n', '        totalSupply++;\n', '        Birth(_id, _startingPrice);\n', '    }\n', '    \n', '    function getPerson(uint32 _id) external view returns (string, uint256, uint256) {\n', '       Person memory person = people[_id];\n', '       require(person.id != 0);\n', '       return (person.name, personToPrice[_id], person.txCount);\n', '    }\n', '    \n', '    function purchase(uint32 _id) payable public{\n', '        uint price = personToPrice[_id] ;\n', '        address personOwner = personToOwner[_id];\n', '        \n', '        require(msg.sender != 0x0);\n', '        require(msg.sender != personOwner);\n', '        require(price <= msg.value);\n', '        \n', '        \n', '        Person storage person = people[_id];\n', '        \n', '        if(price < msg.value){\n', '            msg.sender.transfer(msg.value - price);\n', '        }\n', '        \n', '        _handlePurchase(person, personOwner, price);\n', '        uint newPrice = _onPersonSale(person);\n', '        \n', '        if(!isUserAdded[msg.sender]){\n', '            users.push(msg.sender);\n', '            isUserAdded[msg.sender] = true;\n', '        }\n', '        \n', '        Purchase(_id, msg.sender, personOwner, price, newPrice);\n', '    }\n', '    \n', '    function discount(uint32 _id, uint _newPrice) external ownsPerson(_id) returns (bool){\n', '        uint price = personToPrice[_id];\n', '        require(price > _newPrice);\n', '        \n', '        Person storage person = people[_id];\n', '        person.discounted = true;\n', '        \n', '        personToPrice[_id] = _newPrice;\n', '        \n', '        Discount(_id, _newPrice);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function _handlePurchase(Person storage _person, address _owner, uint _price) internal {\n', '        uint oldPrice = personToOldPrice[_person.id];\n', '        \n', '        if(_person.discounted){\n', '            _shareDiscountPrice(_price, _owner);\n', '        }else{\n', '            _shareProfit(_price, oldPrice, _owner);\n', '        }\n', '        \n', '        personToOwner[_person.id] = msg.sender;\n', '        \n', '        noOfPersonsOwned[_owner]--;\n', '        noOfPersonsOwned[msg.sender]++;\n', '    }\n', '    \n', '    function _shareDiscountPrice(uint _price, address _target) internal {\n', '        uint commision = _price * 10 / 100;\n', '        \n', '        _target.transfer(_price - commision);\n', '        \n', '        owner.transfer(commision);\n', '    }\n', '    \n', '    function _shareProfit(uint _price, uint _oldPrice, address _target) internal {\n', '        uint profit = _price - _oldPrice;\n', '        \n', '        uint commision = profit * 30 / 100;\n', '        \n', '        _target.transfer(_price - commision);\n', '        \n', '        owner.transfer(commision);\n', '    }\n', '    \n', '    function _onPersonSale(Person storage _person) internal returns (uint) {\n', '        uint currentPrice = personToPrice[_person.id];\n', '        uint percent = 0;\n', '        \n', '        if(currentPrice >= 6.25 ether){\n', '            percent = TWENTY_ABOVE;\n', '        }else if(currentPrice >= 2.5 ether){\n', '            percent = BELOW_TWENTY;\n', '        }else if(currentPrice >=  1 ether){\n', '            percent = BELOW_FIFTEEN;\n', '        }else if(currentPrice >= 0.1 ether){\n', '            percent = BELOW_TEN;\n', '        }else{\n', '            percent = BELOW_FIVE;\n', '        }\n', '        \n', '        personToOldPrice[_person.id] = currentPrice;\n', '        uint newPrice = _approx((currentPrice * percent) / 100);\n', '        personToPrice[_person.id] = newPrice;\n', '        \n', '        _person.txCount++;\n', '        if(_person.discounted){\n', '            _person.discounted = false;\n', '        }\n', '        \n', '        return newPrice;\n', '    }\n', '    \n', '    function _approx(uint _price) internal pure returns (uint){\n', '        uint product = _price / 10 ** 14;\n', '        return product * 10 ** 14;\n', '    }\n', '    \n', '    function transfer(address _to, uint32 _id) external ownsPerson(_id){\n', '        personToOwner[_id] = _to;\n', '        noOfPersonsOwned[_to]++;\n', '        noOfPersonsOwned[msg.sender]--;\n', '        Transfer(msg.sender, _to, _id);\n', '    }\n', '    \n', '    function ownerOf(uint32 _id) external view returns (address) {\n', '        return personToOwner[_id];\n', '    }\n', '    \n', '    function priceOf(uint32 _id) external view returns (uint256) {\n', '        return personToPrice[_id];\n', '    }\n', '    \n', '    function balanceOf(address _owner) external view returns (uint){\n', '        return noOfPersonsOwned[_owner];\n', '    }\n', '    \n', '    function getStore() external view onlyOwner returns (address){\n', '        return store;\n', '    }\n', '    \n', '    function setStore(address _store) external onlyOwner returns (bool) {\n', '        require(_store != 0);\n', '        store = _store;\n', '        return true;\n', '    }\n', '    \n', '    function getUsers() external view returns (address[]) {\n', '        return users;\n', '    }\n', '    \n', '    function withdraw() external onlyOwner returns (bool){\n', '        owner.transfer(this.balance);\n', '        return true;\n', '    }\n', '    \n', '    modifier ownsPerson(uint32 _id){\n', '        require(personToOwner[_id] == msg.sender);\n', '        _;\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'contract Ownable{\n', '    address public owner;\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract CryptoChamps is Ownable{\n', '    \n', '    struct Person {\n', '        uint32 id;\n', '        string name;\n', '        uint16 txCount;\n', '        bool discounted;\n', '    }\n', '    \n', '    event Birth(uint32 _id, uint _startingPrice);\n', '    event Discount(uint32 _id, uint _newPrice);\n', '    event Purchase(uint32 indexed _id, address indexed _by, address indexed _from, uint _price, uint _nextPrice);\n', '    event Transfer(address indexed _from, address indexed _to, uint32 _id);\n', '    \n', '    uint public totalSupply = 0;\n', '    string public name = "CryptoChamps";\n', '    string public symbol = "CCH";\n', '    address store;\n', '    mapping (uint32 => Person) private people;\n', '    mapping (uint32 => address) private personToOwner;\n', '    mapping (uint32 => uint256) public personToPrice;\n', '    mapping (uint32 => uint256) public personToOldPrice;\n', '    mapping (address => uint) private noOfPersonsOwned;\n', '    mapping (address => bool) private isUserAdded;\n', '    \n', '    address[] private users;\n', '    \n', '    uint8 BELOW_FIVE = 200;\n', '    uint8 BELOW_TEN = 150;\n', '    uint8 BELOW_FIFTEEN = 130;\n', '    uint8 BELOW_TWENTY = 120;\n', '    uint8 TWENTY_ABOVE = 110;\n', '    \n', '    function CryptoChamps() public{\n', '        store = msg.sender;\n', '    }\n', '    \n', '    function createPerson (uint32 _id, string _name, uint256 _startingPrice) external onlyOwner {\n', '        require(people[_id].id == 0);\n', '        Person memory person = Person(_id, _name, 0, false);\n', '        people[_id] = person;\n', '        personToOwner[_id] = owner;\n', '        personToPrice[_id] = _startingPrice;\n', '        totalSupply++;\n', '        Birth(_id, _startingPrice);\n', '    }\n', '    \n', '    function getPerson(uint32 _id) external view returns (string, uint256, uint256) {\n', '       Person memory person = people[_id];\n', '       require(person.id != 0);\n', '       return (person.name, personToPrice[_id], person.txCount);\n', '    }\n', '    \n', '    function purchase(uint32 _id) payable public{\n', '        uint price = personToPrice[_id] ;\n', '        address personOwner = personToOwner[_id];\n', '        \n', '        require(msg.sender != 0x0);\n', '        require(msg.sender != personOwner);\n', '        require(price <= msg.value);\n', '        \n', '        \n', '        Person storage person = people[_id];\n', '        \n', '        if(price < msg.value){\n', '            msg.sender.transfer(msg.value - price);\n', '        }\n', '        \n', '        _handlePurchase(person, personOwner, price);\n', '        uint newPrice = _onPersonSale(person);\n', '        \n', '        if(!isUserAdded[msg.sender]){\n', '            users.push(msg.sender);\n', '            isUserAdded[msg.sender] = true;\n', '        }\n', '        \n', '        Purchase(_id, msg.sender, personOwner, price, newPrice);\n', '    }\n', '    \n', '    function discount(uint32 _id, uint _newPrice) external ownsPerson(_id) returns (bool){\n', '        uint price = personToPrice[_id];\n', '        require(price > _newPrice);\n', '        \n', '        Person storage person = people[_id];\n', '        person.discounted = true;\n', '        \n', '        personToPrice[_id] = _newPrice;\n', '        \n', '        Discount(_id, _newPrice);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function _handlePurchase(Person storage _person, address _owner, uint _price) internal {\n', '        uint oldPrice = personToOldPrice[_person.id];\n', '        \n', '        if(_person.discounted){\n', '            _shareDiscountPrice(_price, _owner);\n', '        }else{\n', '            _shareProfit(_price, oldPrice, _owner);\n', '        }\n', '        \n', '        personToOwner[_person.id] = msg.sender;\n', '        \n', '        noOfPersonsOwned[_owner]--;\n', '        noOfPersonsOwned[msg.sender]++;\n', '    }\n', '    \n', '    function _shareDiscountPrice(uint _price, address _target) internal {\n', '        uint commision = _price * 10 / 100;\n', '        \n', '        _target.transfer(_price - commision);\n', '        \n', '        owner.transfer(commision);\n', '    }\n', '    \n', '    function _shareProfit(uint _price, uint _oldPrice, address _target) internal {\n', '        uint profit = _price - _oldPrice;\n', '        \n', '        uint commision = profit * 30 / 100;\n', '        \n', '        _target.transfer(_price - commision);\n', '        \n', '        owner.transfer(commision);\n', '    }\n', '    \n', '    function _onPersonSale(Person storage _person) internal returns (uint) {\n', '        uint currentPrice = personToPrice[_person.id];\n', '        uint percent = 0;\n', '        \n', '        if(currentPrice >= 6.25 ether){\n', '            percent = TWENTY_ABOVE;\n', '        }else if(currentPrice >= 2.5 ether){\n', '            percent = BELOW_TWENTY;\n', '        }else if(currentPrice >=  1 ether){\n', '            percent = BELOW_FIFTEEN;\n', '        }else if(currentPrice >= 0.1 ether){\n', '            percent = BELOW_TEN;\n', '        }else{\n', '            percent = BELOW_FIVE;\n', '        }\n', '        \n', '        personToOldPrice[_person.id] = currentPrice;\n', '        uint newPrice = _approx((currentPrice * percent) / 100);\n', '        personToPrice[_person.id] = newPrice;\n', '        \n', '        _person.txCount++;\n', '        if(_person.discounted){\n', '            _person.discounted = false;\n', '        }\n', '        \n', '        return newPrice;\n', '    }\n', '    \n', '    function _approx(uint _price) internal pure returns (uint){\n', '        uint product = _price / 10 ** 14;\n', '        return product * 10 ** 14;\n', '    }\n', '    \n', '    function transfer(address _to, uint32 _id) external ownsPerson(_id){\n', '        personToOwner[_id] = _to;\n', '        noOfPersonsOwned[_to]++;\n', '        noOfPersonsOwned[msg.sender]--;\n', '        Transfer(msg.sender, _to, _id);\n', '    }\n', '    \n', '    function ownerOf(uint32 _id) external view returns (address) {\n', '        return personToOwner[_id];\n', '    }\n', '    \n', '    function priceOf(uint32 _id) external view returns (uint256) {\n', '        return personToPrice[_id];\n', '    }\n', '    \n', '    function balanceOf(address _owner) external view returns (uint){\n', '        return noOfPersonsOwned[_owner];\n', '    }\n', '    \n', '    function getStore() external view onlyOwner returns (address){\n', '        return store;\n', '    }\n', '    \n', '    function setStore(address _store) external onlyOwner returns (bool) {\n', '        require(_store != 0);\n', '        store = _store;\n', '        return true;\n', '    }\n', '    \n', '    function getUsers() external view returns (address[]) {\n', '        return users;\n', '    }\n', '    \n', '    function withdraw() external onlyOwner returns (bool){\n', '        owner.transfer(this.balance);\n', '        return true;\n', '    }\n', '    \n', '    modifier ownsPerson(uint32 _id){\n', '        require(personToOwner[_id] == msg.sender);\n', '        _;\n', '    }\n', '    \n', '}']
