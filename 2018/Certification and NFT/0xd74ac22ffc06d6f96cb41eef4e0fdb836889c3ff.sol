['pragma solidity ^0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Dividends implementation interface\n', '// ----------------------------------------------------------------------------\n', 'contract AHF_PreSale is Owned {\n', '    ERC20Interface public tokenContract;\n', '    address public vaultAddress;\n', '    bool public fundingEnabled;\n', '    uint public totalCollected;         // In wei\n', '    uint public tokenPrice;         // In wei\n', '\n', '    function setTokenAddress(address _tokenAddress) public onlyOwner {\n', '        tokenContract = ERC20Interface(_tokenAddress);\n', '        return;\n', '    }\n', '\n', '    function setVaultAddress(address _vaultAddress) public onlyOwner {\n', '        vaultAddress = _vaultAddress;\n', '        return;\n', '    }\n', '\n', '    function setFundingEnabled(bool _fundingEnabled) public onlyOwner {\n', '        fundingEnabled = _fundingEnabled;\n', '        return;\n', '    }\n', '\n', '    function updateTokenPrice(uint _newTokenPrice) public onlyOwner {\n', '        tokenPrice = _newTokenPrice;\n', '        return;\n', '    }\n', '\n', '    function () public payable {\n', '        require (fundingEnabled && (tokenPrice > 0) && (msg.value >= tokenPrice));\n', '        \n', '        totalCollected += msg.value;\n', '\n', '        //Send the ether to the vault\n', '        vaultAddress.transfer(msg.value);\n', '\n', '        uint tokens = (msg.value * 10**18) / tokenPrice;\n', '        require (tokenContract.transfer(msg.sender, tokens));\n', '\n', '        return;\n', '    }\n', '\n', '    /// @notice This method can be used by the owner to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address _token) public onlyOwner {\n', '        if (_token == 0x0) {\n', '            owner.transfer(address(this).balance);\n', '            return;\n', '        }\n', '\n', '        ERC20Interface token = ERC20Interface(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(owner, balance);\n', '        emit ClaimedTokens(_token, owner, balance);\n', '    }\n', '    \n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Dividends implementation interface\n', '// ----------------------------------------------------------------------------\n', 'contract AHF_PreSale is Owned {\n', '    ERC20Interface public tokenContract;\n', '    address public vaultAddress;\n', '    bool public fundingEnabled;\n', '    uint public totalCollected;         // In wei\n', '    uint public tokenPrice;         // In wei\n', '\n', '    function setTokenAddress(address _tokenAddress) public onlyOwner {\n', '        tokenContract = ERC20Interface(_tokenAddress);\n', '        return;\n', '    }\n', '\n', '    function setVaultAddress(address _vaultAddress) public onlyOwner {\n', '        vaultAddress = _vaultAddress;\n', '        return;\n', '    }\n', '\n', '    function setFundingEnabled(bool _fundingEnabled) public onlyOwner {\n', '        fundingEnabled = _fundingEnabled;\n', '        return;\n', '    }\n', '\n', '    function updateTokenPrice(uint _newTokenPrice) public onlyOwner {\n', '        tokenPrice = _newTokenPrice;\n', '        return;\n', '    }\n', '\n', '    function () public payable {\n', '        require (fundingEnabled && (tokenPrice > 0) && (msg.value >= tokenPrice));\n', '        \n', '        totalCollected += msg.value;\n', '\n', '        //Send the ether to the vault\n', '        vaultAddress.transfer(msg.value);\n', '\n', '        uint tokens = (msg.value * 10**18) / tokenPrice;\n', '        require (tokenContract.transfer(msg.sender, tokens));\n', '\n', '        return;\n', '    }\n', '\n', '    /// @notice This method can be used by the owner to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address _token) public onlyOwner {\n', '        if (_token == 0x0) {\n', '            owner.transfer(address(this).balance);\n', '            return;\n', '        }\n', '\n', '        ERC20Interface token = ERC20Interface(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(owner, balance);\n', '        emit ClaimedTokens(_token, owner, balance);\n', '    }\n', '    \n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '}']
