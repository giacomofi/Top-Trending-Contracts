['contract RGX {\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '}\n', '\n', 'contract RGE {\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '}\n', '\n', 'contract RougeTGE {\n', '    \n', '    string public version = &#39;v1.1&#39;;\n', '    \n', '    address owner; \n', '\n', '    modifier onlyBy(address _account) {\n', '        require(msg.sender == _account);\n', '        _;\n', '    }\n', '\n', '    bool public fundingActive = true;\n', '\n', '    function toggleFunding(bool _flag) onlyBy(owner) public {\n', '        fundingActive = _flag;\n', '    }\n', '\n', '    uint public fundingStart;\n', '    uint public fundingEnd;\n', '\n', '    modifier beforeTGE() {\n', '        require(fundingStart > now);\n', '        _;\n', '    }\n', '\n', '    modifier TGEOpen() {\n', '        require(fundingStart <= now && now < fundingEnd);\n', '        require(fundingActive);\n', '        _;\n', '    }\n', '    \n', '    modifier afterTGE() {\n', '        require(now >= fundingEnd);\n', '        _;\n', '    }\n', '\n', '    function isFundingOpen() constant public returns (bool yes) {\n', '        return(fundingStart <= now && now < fundingEnd && fundingActive);\n', '    }\n', '\n', '    mapping (address => bool) public kyc;\n', '    mapping (address => uint256) public tokens;\n', '    mapping (address => mapping (address => uint256)) public used;\n', '\n', '    function tokensOf(address _who) public view returns (uint256 balance) {\n', '        return tokens[_who];\n', '    }\n', '\n', '    uint8 public minFunding = 1; /* in finney */\n', '    uint8 public decimals = 6;\n', '    uint256 public total_distribution = 500000000 * 10**uint(decimals); /* Total RGE tokens to distribute during TGE (500m with 6 decimals) */\n', '\n', '    struct Sale {\n', '        uint256 funding; // original contribution in finney\n', '        uint256 used;    // already used with bonus contribution in finney\n', '        uint256 tokens;  // RGE tokens distribution\n', '        bool presale;\n', '    }\n', '\n', '    uint256 public tokenPrice; /* in wei */\n', '\n', '    constructor(\n', '                uint _fundingStart,\n', '                uint _fundingEnd,\n', '                uint _tokenPrice\n', '                ) public {\n', '        owner = msg.sender;\n', '        fundingStart = _fundingStart;\n', '        fundingEnd = _fundingEnd;\n', '        tokenPrice = _tokenPrice;\n', '    }\n', '    \n', '    address rge; \n', '\n', '    address rgxa; \n', '    address rgxb; \n', '    address rgxd; \n', '\n', '    address rgx20; \n', '    address rgx15; \n', '    address rgx12; \n', '    address rgx9; \n', '    address rgx8; \n', '    address rgx7; \n', '    address rgx6; \n', '    address rgx5; \n', '    address rgx4; \n', '    address rgx3; \n', '\n', '    function init (\n', '                   address _rge,\n', '                   address _rgxa, address _rgxb, address _rgxd,\n', '                   address _rgx20, address _rgx15, address _rgx12,\n', '                   address _rgx9, address _rgx8, address _rgx7, address _rgx6, address _rgx5, address _rgx4, address _rgx3\n', '                   ) onlyBy(owner) public {\n', '        rge = _rge;\n', '        rgxa = _rgxa; rgxb = _rgxb; rgxd = _rgxd; \n', '        rgx20 = _rgx20; rgx15 = _rgx15; rgx12 = _rgx12;\n', '        rgx9 = _rgx9; rgx8 = _rgx8; rgx7 = _rgx7; rgx6 = _rgx6; rgx5 = _rgx5; rgx4 = _rgx4; rgx3 = _rgx3;\n', '    }\n', '    \n', '    event Distribute(address indexed buyer, uint256 value);\n', '\n', '    function () payable TGEOpen() public { \n', '\n', '        require(msg.sender != owner);\n', '\n', '        Sale memory _sale = Sale({\n', '            funding: msg.value / 1 finney, used: 0, tokens: 0, presale: false\n', '        });\n', '\n', '        require(_sale.funding >= minFunding);\n', '\n', '        /* distribution with RGX discounts */\n', '        \n', '        _sale = _with_RGXBonus(_sale, rgxa, 20, 1);\n', '        _sale = _with_RGXBonus(_sale, rgxb, 11, 1);\n', '        _sale = _with_RGXBonus(_sale, rgxd, 5, 4);\n', '\n', '        _sale = _with_RGXToken(_sale, rgx20, 20, 1);\n', '        _sale = _with_RGXToken(_sale, rgx15, 15, 1);\n', '        _sale = _with_RGXToken(_sale, rgx12, 12, 1);\n', '        _sale = _with_RGXToken(_sale, rgx9, 9, 1);\n', '        _sale = _with_RGXToken(_sale, rgx8, 8, 1);\n', '        _sale = _with_RGXToken(_sale, rgx7, 7, 1);\n', '        _sale = _with_RGXToken(_sale, rgx6, 6, 1);\n', '        _sale = _with_RGXToken(_sale, rgx5, 5, 1);\n', '        _sale = _with_RGXToken(_sale, rgx4, 4, 1);\n', '        _sale = _with_RGXToken(_sale, rgx3, 3, 1);\n', '\n', '        /* standard tokens distribution */\n', '        \n', '        if ( _sale.funding > _sale.used ) {\n', '\n', '            uint256 _available = _sale.funding - _sale.used;\n', '            _sale.used += _available;\n', '            _sale.tokens += _available * 1 finney * 10**uint(decimals) / tokenPrice;\n', '            \n', '        }\n', '        \n', '        /* check if enough tokens and distribute tokens to buyer */\n', '        \n', '        require(total_distribution >= _sale.tokens); \n', '\n', '        total_distribution -= _sale.tokens;\n', '        tokens[msg.sender] += _sale.tokens;\n', '        emit Distribute(msg.sender, _sale.tokens);\n', '\n', '    }\n', '    \n', '    function _with_RGXBonus(Sale _sale, address _a, uint8 _multiplier, uint8 _divisor) internal returns (Sale _result) {\n', '\n', '        RGX _rgx = RGX(_a);\n', '\n', '        uint256 rgxBalance = _rgx.balanceOf(msg.sender);\n', '\n', '        if ( used[_a][msg.sender] < rgxBalance && _sale.funding > _sale.used ) {\n', '\n', '            uint256 _available = rgxBalance - used[_a][msg.sender];\n', '\n', '            if ( _available > _sale.funding - _sale.used ) {\n', '                _available = _sale.funding - _sale.used;\n', '            }\n', '\n', '            _sale.used += _available;\n', '            _sale.tokens += _available * 1 finney * 10**uint(decimals) / tokenPrice * _multiplier / _divisor;\n', '            used[_a][msg.sender] += _available;\n', '        }\n', '\n', '        return _sale;\n', '    }\n', '\n', '    function _with_RGXToken(Sale _sale, address _a, uint8 _multiplier, uint8 _divisor) internal returns (Sale _result) {\n', '\n', '        if ( _sale.presale ) {\n', '            return _sale;\n', '        }\n', '        \n', '        RGX _rgx = RGX(_a);\n', '\n', '        uint256 rgxBalance = _rgx.balanceOf(msg.sender);\n', '\n', '        if ( used[_a][msg.sender] < rgxBalance ) {\n', '\n', '            uint256 _available = rgxBalance - used[_a][msg.sender];\n', '\n', '            _sale.tokens += _available * 1 finney * 10**uint(decimals) / tokenPrice * (_multiplier - 1) / _divisor;\n', '            used[_a][msg.sender] += _available;\n', '            _sale.presale = true;\n', '        }\n', '\n', '        return _sale;\n', '    }\n', '\n', '    function toggleKYC(address _who, bool _flag) onlyBy(owner) public {\n', '        kyc[_who]= _flag;\n', '    }\n', '    \n', '    function revertAML(address _who) onlyBy(owner) public {\n', '        total_distribution += tokens[_who];\n', '        tokens[_who] = 0;\n', '    }\n', '\n', '    function withdraw() public returns (bool success) {\n', '\n', '        require(msg.sender != owner); \n', '        \n', '        // no verification if enough tokens => done in payable already\n', '        \n', '        require(tokens[msg.sender] > 0);\n', '        require(kyc[msg.sender]); \n', '        \n', '        RGE _rge = RGE(rge);\n', '        \n', '        if ( _rge.transfer(msg.sender, tokens[msg.sender]) ) {\n', '            tokens[msg.sender] = 0;\n', '            return true;\n', '        } \n', '        \n', '        return false;\n', '        \n', '    }\n', '    \n', '    function withdrawFunding() onlyBy(owner) public {\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '    \n', '    function kill() onlyBy(owner) public {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '}']
['contract RGX {\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '}\n', '\n', 'contract RGE {\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '}\n', '\n', 'contract RougeTGE {\n', '    \n', "    string public version = 'v1.1';\n", '    \n', '    address owner; \n', '\n', '    modifier onlyBy(address _account) {\n', '        require(msg.sender == _account);\n', '        _;\n', '    }\n', '\n', '    bool public fundingActive = true;\n', '\n', '    function toggleFunding(bool _flag) onlyBy(owner) public {\n', '        fundingActive = _flag;\n', '    }\n', '\n', '    uint public fundingStart;\n', '    uint public fundingEnd;\n', '\n', '    modifier beforeTGE() {\n', '        require(fundingStart > now);\n', '        _;\n', '    }\n', '\n', '    modifier TGEOpen() {\n', '        require(fundingStart <= now && now < fundingEnd);\n', '        require(fundingActive);\n', '        _;\n', '    }\n', '    \n', '    modifier afterTGE() {\n', '        require(now >= fundingEnd);\n', '        _;\n', '    }\n', '\n', '    function isFundingOpen() constant public returns (bool yes) {\n', '        return(fundingStart <= now && now < fundingEnd && fundingActive);\n', '    }\n', '\n', '    mapping (address => bool) public kyc;\n', '    mapping (address => uint256) public tokens;\n', '    mapping (address => mapping (address => uint256)) public used;\n', '\n', '    function tokensOf(address _who) public view returns (uint256 balance) {\n', '        return tokens[_who];\n', '    }\n', '\n', '    uint8 public minFunding = 1; /* in finney */\n', '    uint8 public decimals = 6;\n', '    uint256 public total_distribution = 500000000 * 10**uint(decimals); /* Total RGE tokens to distribute during TGE (500m with 6 decimals) */\n', '\n', '    struct Sale {\n', '        uint256 funding; // original contribution in finney\n', '        uint256 used;    // already used with bonus contribution in finney\n', '        uint256 tokens;  // RGE tokens distribution\n', '        bool presale;\n', '    }\n', '\n', '    uint256 public tokenPrice; /* in wei */\n', '\n', '    constructor(\n', '                uint _fundingStart,\n', '                uint _fundingEnd,\n', '                uint _tokenPrice\n', '                ) public {\n', '        owner = msg.sender;\n', '        fundingStart = _fundingStart;\n', '        fundingEnd = _fundingEnd;\n', '        tokenPrice = _tokenPrice;\n', '    }\n', '    \n', '    address rge; \n', '\n', '    address rgxa; \n', '    address rgxb; \n', '    address rgxd; \n', '\n', '    address rgx20; \n', '    address rgx15; \n', '    address rgx12; \n', '    address rgx9; \n', '    address rgx8; \n', '    address rgx7; \n', '    address rgx6; \n', '    address rgx5; \n', '    address rgx4; \n', '    address rgx3; \n', '\n', '    function init (\n', '                   address _rge,\n', '                   address _rgxa, address _rgxb, address _rgxd,\n', '                   address _rgx20, address _rgx15, address _rgx12,\n', '                   address _rgx9, address _rgx8, address _rgx7, address _rgx6, address _rgx5, address _rgx4, address _rgx3\n', '                   ) onlyBy(owner) public {\n', '        rge = _rge;\n', '        rgxa = _rgxa; rgxb = _rgxb; rgxd = _rgxd; \n', '        rgx20 = _rgx20; rgx15 = _rgx15; rgx12 = _rgx12;\n', '        rgx9 = _rgx9; rgx8 = _rgx8; rgx7 = _rgx7; rgx6 = _rgx6; rgx5 = _rgx5; rgx4 = _rgx4; rgx3 = _rgx3;\n', '    }\n', '    \n', '    event Distribute(address indexed buyer, uint256 value);\n', '\n', '    function () payable TGEOpen() public { \n', '\n', '        require(msg.sender != owner);\n', '\n', '        Sale memory _sale = Sale({\n', '            funding: msg.value / 1 finney, used: 0, tokens: 0, presale: false\n', '        });\n', '\n', '        require(_sale.funding >= minFunding);\n', '\n', '        /* distribution with RGX discounts */\n', '        \n', '        _sale = _with_RGXBonus(_sale, rgxa, 20, 1);\n', '        _sale = _with_RGXBonus(_sale, rgxb, 11, 1);\n', '        _sale = _with_RGXBonus(_sale, rgxd, 5, 4);\n', '\n', '        _sale = _with_RGXToken(_sale, rgx20, 20, 1);\n', '        _sale = _with_RGXToken(_sale, rgx15, 15, 1);\n', '        _sale = _with_RGXToken(_sale, rgx12, 12, 1);\n', '        _sale = _with_RGXToken(_sale, rgx9, 9, 1);\n', '        _sale = _with_RGXToken(_sale, rgx8, 8, 1);\n', '        _sale = _with_RGXToken(_sale, rgx7, 7, 1);\n', '        _sale = _with_RGXToken(_sale, rgx6, 6, 1);\n', '        _sale = _with_RGXToken(_sale, rgx5, 5, 1);\n', '        _sale = _with_RGXToken(_sale, rgx4, 4, 1);\n', '        _sale = _with_RGXToken(_sale, rgx3, 3, 1);\n', '\n', '        /* standard tokens distribution */\n', '        \n', '        if ( _sale.funding > _sale.used ) {\n', '\n', '            uint256 _available = _sale.funding - _sale.used;\n', '            _sale.used += _available;\n', '            _sale.tokens += _available * 1 finney * 10**uint(decimals) / tokenPrice;\n', '            \n', '        }\n', '        \n', '        /* check if enough tokens and distribute tokens to buyer */\n', '        \n', '        require(total_distribution >= _sale.tokens); \n', '\n', '        total_distribution -= _sale.tokens;\n', '        tokens[msg.sender] += _sale.tokens;\n', '        emit Distribute(msg.sender, _sale.tokens);\n', '\n', '    }\n', '    \n', '    function _with_RGXBonus(Sale _sale, address _a, uint8 _multiplier, uint8 _divisor) internal returns (Sale _result) {\n', '\n', '        RGX _rgx = RGX(_a);\n', '\n', '        uint256 rgxBalance = _rgx.balanceOf(msg.sender);\n', '\n', '        if ( used[_a][msg.sender] < rgxBalance && _sale.funding > _sale.used ) {\n', '\n', '            uint256 _available = rgxBalance - used[_a][msg.sender];\n', '\n', '            if ( _available > _sale.funding - _sale.used ) {\n', '                _available = _sale.funding - _sale.used;\n', '            }\n', '\n', '            _sale.used += _available;\n', '            _sale.tokens += _available * 1 finney * 10**uint(decimals) / tokenPrice * _multiplier / _divisor;\n', '            used[_a][msg.sender] += _available;\n', '        }\n', '\n', '        return _sale;\n', '    }\n', '\n', '    function _with_RGXToken(Sale _sale, address _a, uint8 _multiplier, uint8 _divisor) internal returns (Sale _result) {\n', '\n', '        if ( _sale.presale ) {\n', '            return _sale;\n', '        }\n', '        \n', '        RGX _rgx = RGX(_a);\n', '\n', '        uint256 rgxBalance = _rgx.balanceOf(msg.sender);\n', '\n', '        if ( used[_a][msg.sender] < rgxBalance ) {\n', '\n', '            uint256 _available = rgxBalance - used[_a][msg.sender];\n', '\n', '            _sale.tokens += _available * 1 finney * 10**uint(decimals) / tokenPrice * (_multiplier - 1) / _divisor;\n', '            used[_a][msg.sender] += _available;\n', '            _sale.presale = true;\n', '        }\n', '\n', '        return _sale;\n', '    }\n', '\n', '    function toggleKYC(address _who, bool _flag) onlyBy(owner) public {\n', '        kyc[_who]= _flag;\n', '    }\n', '    \n', '    function revertAML(address _who) onlyBy(owner) public {\n', '        total_distribution += tokens[_who];\n', '        tokens[_who] = 0;\n', '    }\n', '\n', '    function withdraw() public returns (bool success) {\n', '\n', '        require(msg.sender != owner); \n', '        \n', '        // no verification if enough tokens => done in payable already\n', '        \n', '        require(tokens[msg.sender] > 0);\n', '        require(kyc[msg.sender]); \n', '        \n', '        RGE _rge = RGE(rge);\n', '        \n', '        if ( _rge.transfer(msg.sender, tokens[msg.sender]) ) {\n', '            tokens[msg.sender] = 0;\n', '            return true;\n', '        } \n', '        \n', '        return false;\n', '        \n', '    }\n', '    \n', '    function withdrawFunding() onlyBy(owner) public {\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '    \n', '    function kill() onlyBy(owner) public {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '}']
