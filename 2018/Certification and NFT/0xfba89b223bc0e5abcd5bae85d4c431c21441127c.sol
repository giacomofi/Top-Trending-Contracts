['pragma solidity ^0.5.1;\n', '\n', 'contract Owned {\n', '    modifier onlyOwner() {\n', '        require(msg.sender==owner);\n', '        _;\n', '    }\n', '    address payable owner;\n', '    address payable newOwner;\n', '    function changeOwner(address payable _newOwner) public onlyOwner {\n', '        newOwner=_newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        if (msg.sender==newOwner) {\n', '            owner=newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    function balanceOf(address _owner) view public returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '}\n', '\n', 'contract SmartWebLock is Owned{\n', '    string public domain;\n', '    uint8 public fee;\n', '    uint256 public unlock;\n', '    uint8 public bonus;\n', '    address public token;\n', '    uint8 public tokens;\n', '    address payable payee;\n', '    mapping (address=>uint) unlocks;\n', '    mapping (address=>address payable) refs;\n', '    mapping (address=>uint256) balances;\n', '    event Bonus(address indexed _user, uint256 _amount);\n', '        \n', '    constructor() public{\n', "        domain = 'videoblog.io';\n", '        fee = 2;\n', '        unlock = 100000000000000000;\n', '        bonus = 49;\n', '        token = 0xCD8aAC9972dc4Ddc48d700bc0710C0f5223fBCfa;\n', '        tokens = 100;\n', '        payee = 0x574c4DB1E399859753A09D65b6C5586429663701;\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function changeTokens (uint8 _tokens) public returns (bool success){\n', '        require(_tokens>0 && msg.sender==payee);\n', '        tokens=_tokens;\n', '        return true;\n', '    }\n', '    \n', '    function changeBonus (uint8 _bonus) public returns (bool success){\n', '        require (_bonus>0 && _bonus<100-fee && msg.sender==payee);\n', '        bonus=_bonus;\n', '        return true;\n', '    }\n', '    \n', '    function changeUnlock(uint256 _unlock) public returns (bool success){\n', '        require(_unlock>0 && msg.sender==payee);\n', '        unlock = _unlock;\n', '        return true;\n', '    }\n', '    \n', '    function changeRef(address _user, address payable _ref) public returns (bool success){\n', '        require(_ref!=address(0x0) && refs[_user]!=_ref && msg.sender==payee);\n', '        refs[_user] = _ref;\n', '        return true;\n', '    }\n', '    \n', '    function changeFee (uint8 _fee) onlyOwner public returns (bool success){\n', '        require (_fee>0 && _fee<10);\n', '        fee=_fee;\n', '        return true;\n', '    }\n', '    \n', '    function setRef(address payable _ref) public returns (bool success){\n', '        require (_ref!=address(0x0) && refs[msg.sender]==address(0x0) && _ref!=msg.sender);\n', '        refs[msg.sender] = _ref;\n', '        return true;\n', '    }\n', '    \n', '    function getBalance(address _user) view public returns (uint256 balance){\n', '        return balances[_user];\n', '    }\n', '    \n', '    function getUnlock(address _user) view public returns (uint timestamp){\n', '        return unlocks[_user];\n', '    }\n', '    \n', '    function getRef(address _user) view public returns (address ref){\n', '        return refs[_user];\n', '    }\n', '    \n', '    function unLock(uint256 _amount) private{\n', '        balances[msg.sender]+=_amount;\n', '        if (balances[msg.sender]>=unlock) {\n', '            unlocks[msg.sender] = block.timestamp;\n', '            uint256 payout = 0;\n', '            if (refs[msg.sender]!=address(0x0) && bonus>0) {\n', '                payout = bonus*_amount/100;\n', '                refs[msg.sender].transfer(payout);\n', '                emit Bonus(refs[msg.sender],payout);\n', '            }\n', '            uint256 deduct = _amount*fee/100;\n', '            owner.transfer(deduct);\n', '            payee.transfer(_amount-payout-deduct);\n', '            if (ERC20(token).balanceOf(address(this))>=tokens) ERC20(token).transfer(msg.sender, tokens);\n', '        }\n', '    }\n', '    \n', '    function () payable external {\n', '        require(msg.value>0);\n', '        unLock(msg.value);\n', '    }\n', '}']