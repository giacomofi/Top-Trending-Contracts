['pragma solidity 0.4.24;\n', '\n', '// File: @tokenfoundry/sale-contracts/contracts/interfaces/DisbursementHandlerI.sol\n', '\n', 'interface DisbursementHandlerI {\n', '    function withdraw(address _beneficiary, uint256 _index) external;\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: @tokenfoundry/sale-contracts/contracts/DisbursementHandler.sol\n', '\n', '/// @title Disbursement handler - Manages time locked disbursements of ERC20 tokens\n', 'contract DisbursementHandler is DisbursementHandlerI, Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20;\n', '\n', '    struct Disbursement {\n', '        // Tokens cannot be withdrawn before this timestamp\n', '        uint256 timestamp;\n', '\n', '        // Amount of tokens to be disbursed\n', '        uint256 value;\n', '    }\n', '\n', '    event Setup(address indexed _beneficiary, uint256 _timestamp, uint256 _value);\n', '    event TokensWithdrawn(address indexed _to, uint256 _value);\n', '\n', '    ERC20 public token;\n', '    uint256 public totalAmount;\n', '    mapping(address => Disbursement[]) public disbursements;\n', '\n', '    bool public closed;\n', '\n', '    modifier isOpen {\n', '        require(!closed, "Disbursement Handler is closed");\n', '        _;\n', '    }\n', '\n', '    modifier isClosed {\n', '        require(closed, "Disbursement Handler is open");\n', '        _;\n', '    }\n', '\n', '\n', '    constructor(ERC20 _token) public {\n', '        require(_token != address(0), "Token cannot have address 0");\n', '        token = _token;\n', '    }\n', '\n', '    /// @dev Called to create disbursements.\n', '    /// @param _beneficiaries The addresses of the beneficiaries.\n', '    /// @param _values The number of tokens to be locked for each disbursement.\n', '    /// @param _timestamps Funds will be locked until this timestamp for each disbursement.\n', '    function setupDisbursements(\n', '        address[] _beneficiaries,\n', '        uint256[] _values,\n', '        uint256[] _timestamps\n', '    )\n', '        external\n', '        onlyOwner\n', '        isOpen\n', '    {\n', '        require((_beneficiaries.length == _values.length) && (_beneficiaries.length == _timestamps.length), "Arrays not of equal length");\n', '        require(_beneficiaries.length > 0, "Arrays must have length > 0");\n', '\n', '        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '            setupDisbursement(_beneficiaries[i], _values[i], _timestamps[i]);\n', '        }\n', '    }\n', '\n', '    function close() external onlyOwner isOpen {\n', '        closed = true;\n', '    }\n', '\n', '    /// @dev Called by the sale contract to create a disbursement.\n', '    /// @param _beneficiary The address of the beneficiary.\n', '    /// @param _value Amount of tokens to be locked.\n', '    /// @param _timestamp Funds will be locked until this timestamp.\n', '    function setupDisbursement(\n', '        address _beneficiary,\n', '        uint256 _value,\n', '        uint256 _timestamp\n', '    )\n', '        internal\n', '    {\n', '        require(block.timestamp < _timestamp, "Disbursement timestamp in the past");\n', '        disbursements[_beneficiary].push(Disbursement(_timestamp, _value));\n', '        totalAmount = totalAmount.add(_value);\n', '        emit Setup(_beneficiary, _timestamp, _value);\n', '    }\n', '\n', '    /// @dev Transfers tokens to a beneficiary\n', '    /// @param _beneficiary The address to transfer tokens to\n', '    /// @param _index The index of the disbursement\n', '    function withdraw(address _beneficiary, uint256 _index)\n', '        external\n', '        isClosed\n', '    {\n', '        Disbursement[] storage beneficiaryDisbursements = disbursements[_beneficiary];\n', '        require(_index < beneficiaryDisbursements.length, "Supplied index out of disbursement range");\n', '\n', '        Disbursement memory disbursement = beneficiaryDisbursements[_index];\n', '        require(disbursement.timestamp < now && disbursement.value > 0, "Disbursement timestamp not reached, or disbursement value of 0");\n', '\n', '        // Remove the withdrawn disbursement\n', '        delete beneficiaryDisbursements[_index];\n', '\n', '        token.safeTransfer(_beneficiary, disbursement.value);\n', '        emit TokensWithdrawn(_beneficiary, disbursement.value);\n', '    }\n', '}']