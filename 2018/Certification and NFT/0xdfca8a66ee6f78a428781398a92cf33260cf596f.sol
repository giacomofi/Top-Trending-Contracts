['pragma solidity 0.4.24;\n', '\n', '/// @title Interface for all exchange handler contracts\n', 'interface ExchangeHandler {\n', '\n', '    /// @dev Get the available amount left to fill for an order\n', '    /// @param orderAddresses Array of address values needed for this DEX order\n', '    /// @param orderValues Array of uint values needed for this DEX order\n', '    /// @param exchangeFee Value indicating the fee for this DEX order\n', '    /// @param v ECDSA signature parameter v\n', '    /// @param r ECDSA signature parameter r\n', '    /// @param s ECDSA signature parameter s\n', '    /// @return Available amount left to fill for this order\n', '    function getAvailableAmount(\n', '        address[8] orderAddresses,\n', '        uint256[6] orderValues,\n', '        uint256 exchangeFee,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256);\n', '\n', '    /// @dev Perform a buy order at the exchange\n', '    /// @param orderAddresses Array of address values needed for each DEX order\n', '    /// @param orderValues Array of uint values needed for each DEX order\n', '    /// @param exchangeFee Value indicating the fee for this DEX order\n', '    /// @param amountToFill Amount to fill in this order\n', '    /// @param v ECDSA signature parameter v\n', '    /// @param r ECDSA signature parameter r\n', '    /// @param s ECDSA signature parameter s\n', '    /// @return Amount filled in this order\n', '    function performBuy(\n', '        address[8] orderAddresses,\n', '        uint256[6] orderValues,\n', '        uint256 exchangeFee,\n', '        uint256 amountToFill,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external payable returns (uint256);\n', '\n', '    /// @dev Perform a sell order at the exchange\n', '    /// @param orderAddresses Array of address values needed for each DEX order\n', '    /// @param orderValues Array of uint values needed for each DEX order\n', '    /// @param exchangeFee Value indicating the fee for this DEX order\n', '    /// @param amountToFill Amount to fill in this order\n', '    /// @param v ECDSA signature parameter v\n', '    /// @param r ECDSA signature parameter r\n', '    /// @param s ECDSA signature parameter s\n', '    /// @return Amount filled in this order\n', '    function performSell(\n', '        address[8] orderAddresses,\n', '        uint256[6] orderValues,\n', '        uint256 exchangeFee,\n', '        uint256 amountToFill,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract Token is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/Kyber.sol\n', '\n', 'interface Kyber {\n', '    function trade(Token src, uint srcAmount, Token dest, address destAddress, uint maxDestAmount, uint minConversionRate, address walletId) public payable returns (uint);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'interface ENSResolver {\n', '    function resolve(bytes32 node) public view returns (address);\n', '}\n', '\n', 'contract KyberHandler is ExchangeHandler, Ownable {\n', '    // State variables\n', '    address public totlePrimary;\n', '    ENSResolver public ensResolver;\n', '    Token constant public ETH_TOKEN_ADDRESS = Token(0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n', '    bytes32 constant public kyberHash = 0xff4ab868fec98e1be4e10e14add037a8056132cf492bec627457a78c21f7531f;\n', '\n', '    modifier onlyTotle() {\n', '        require(msg.sender == totlePrimary, "KyberHandler - Only TotlePrimary allowed to call this function");\n', '        _;\n', '    }\n', '\n', '    // Constructor\n', '    constructor(\n', '        address _totlePrimary,\n', '        address _ensResolver\n', '    ) public {\n', '        require(_totlePrimary != address(0x0));\n', '        require(_ensResolver != address(0x0));\n', '        totlePrimary = _totlePrimary;\n', '        ensResolver = ENSResolver(_ensResolver);\n', '    }\n', '\n', '    // Public functions\n', '    function getAvailableAmount(\n', '        address[8] orderAddresses,\n', '        uint256[6] orderValues,\n', '        uint256 exchangeFee,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256) {\n', '        // return amountToGive\n', '        return orderValues[0];\n', '    }\n', '\n', '    function performBuy(\n', '        address[8] orderAddresses, // 0: tokenToGet (dest), 1: destAddress (primary), 2: walletId\n', '        uint256[6] orderValues, // 0: srcAmount (amountToGive), 1: dstAmount (amountToGet), 2: maxDestAmount, 3: minConversionRate\n', '        uint256 exchangeFee, // ignore\n', '        uint256 amountToFill, // ignore\n', '        uint8 v, // ignore\n', '        bytes32 r, // ignore\n', '        bytes32 s // ignore\n', '    ) external payable onlyTotle returns (uint256) {\n', '        require(msg.value == orderValues[0], "KyberHandler - msg.value != ordVal[0] for buy");\n', '\n', '        uint256 tokenAmountObtained = trade(\n', '            ETH_TOKEN_ADDRESS, // ERC20 src\n', '            orderValues[0],    // uint srcAmount\n', '            Token(orderAddresses[0]), // ERC20 dest\n', '            orderAddresses[1], // address destAddress (where tokens are sent to after trade)\n', '            orderValues[2],    // uint maxDestAmount\n', '            orderValues[3],    // uint minConversionRate\n', '            orderAddresses[2]  // address walletId\n', '        );\n', '\n', '        // If Kyber has sent us back some excess ether\n', '        if(this.balance > 0) {\n', '            msg.sender.transfer(this.balance);\n', '        }\n', '\n', '        return tokenAmountObtained;\n', '    }\n', '\n', '    function performSell(\n', '        address[8] orderAddresses, // 0: tokenToGive (src), 1: destAddress (primary), 2: walletId\n', '        uint256[6] orderValues, // 0: srcAmount (amountToGive), 1: dstAmount (amountToGet), 2: maxDestAmount, 3: minConversionRate\n', '        uint256 exchangeFee, // ignore\n', '        uint256 amountToFill, // ignore\n', '        uint8 v, // ignore\n', '        bytes32 r, // ignore\n', '        bytes32 s // ignore\n', '    ) external onlyTotle returns (uint256) {\n', '\n', '        require(\n', '            Token(orderAddresses[0]).approve(resolveExchangeAddress(), orderValues[0]),\n', '            "KyberHandler - unable to approve token for sell"\n', '        );\n', '\n', '        uint256 etherAmountObtained = trade(\n', '            Token(orderAddresses[0]), // ERC20 src\n', '            orderValues[0],    // uint srcAmount\n', '            ETH_TOKEN_ADDRESS, // ERC20 dest\n', '            orderAddresses[1], // address destAddress (where tokens are sent to after trade)\n', '            orderValues[2],    // uint maxDestAmount\n', '            orderValues[3],    // uint minConversionRate\n', '            orderAddresses[2]  // address walletId\n', '        );\n', '\n', '        return etherAmountObtained;\n', '    }\n', '\n', '    function trade(\n', '        Token src,\n', '        uint srcAmount,\n', '        Token dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId\n', '    ) internal returns (uint256) {\n', '        uint256 valToSend = 0;\n', '        if(src == ETH_TOKEN_ADDRESS) {\n', '            valToSend = srcAmount;\n', '        }\n', '\n', '        Kyber exchange = Kyber(resolveExchangeAddress());\n', '\n', '        return exchange.trade.value(valToSend)(\n', '            src,\n', '            srcAmount,\n', '            dest,\n', '            destAddress,\n', '            maxDestAmount,\n', '            minConversionRate,\n', '            walletId\n', '        );\n', '    }\n', '\n', '    function resolveExchangeAddress() internal view returns (address) {\n', '        return ensResolver.resolve(kyberHash);\n', '    }\n', '\n', '    function withdrawToken(address _token, uint _amount) external onlyOwner returns (bool) {\n', '        return Token(_token).transfer(owner, _amount);\n', '    }\n', '\n', '    function withdrawETH(uint _amount) external onlyOwner returns (bool) {\n', '        owner.transfer(_amount);\n', '    }\n', '\n', '    function setTotle(address _totlePrimary) external onlyOwner {\n', '        require(_totlePrimary != address(0x0), "Invalid address for totlePrimary");\n', '        totlePrimary = _totlePrimary;\n', '    }\n', '\n', '    function() public payable {\n', '        // Check in here that the sender is a contract! (to stop accidents)\n', '        uint256 size;\n', '        address sender = msg.sender;\n', '        assembly {\n', '            size := extcodesize(sender)\n', '        }\n', '        require(size > 0, "KyberHandler - can only send ether from another contract");\n', '    }\n', '}']