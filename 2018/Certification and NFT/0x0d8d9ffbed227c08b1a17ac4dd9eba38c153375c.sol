['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract BlockchainId is Ownable {\n', '\n', '    event NewCompany(bytes32 companyId, bytes32 merkleRoot);\n', '    event ChangeCompany(bytes32 companyId, bytes32 merkleRoot);\n', '    event DeleteCompany(bytes32 companyId);\n', '\n', '    mapping (bytes32 => bytes32) companyMap;\n', '\n', '    function _createCompany(bytes32 companyId, bytes32 merkleRoot) public onlyOwner() {\n', '        companyMap[companyId] = merkleRoot;\n', '        emit NewCompany(companyId, merkleRoot);\n', '    }\n', '\n', '    function _createCompanies(bytes32[] companyIds, bytes32[] merkleRoots) public onlyOwner() {\n', '        require(companyIds.length == merkleRoots.length);\n', '        for (uint i = 0; i < companyIds.length; i++) {\n', '            _createCompany(companyIds[i], merkleRoots[i]);\n', '        }\n', '    }\n', '\n', '    function getCompany(bytes32 companyId) public view returns (bytes32) {\n', '        return companyMap[companyId];\n', '    }\n', '\n', '    function _updateCompany(bytes32 companyId, bytes32 merkleRoot) public onlyOwner() {\n', '        companyMap[companyId] = merkleRoot;\n', '        emit ChangeCompany(companyId, merkleRoot);\n', '    }\n', '\n', '    function _updateCompanies(bytes32[] companyIds, bytes32[] merkleRoots) public onlyOwner() {\n', '        require(companyIds.length == merkleRoots.length);\n', '        for (uint i = 0; i < companyIds.length; i++) {\n', '            _updateCompany(companyIds[i], merkleRoots[i]);\n', '        }\n', '    }\n', '\n', '    function _deleteCompany(bytes32 companyId) public onlyOwner() {\n', '        delete companyMap[companyId];\n', '        emit DeleteCompany(companyId);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract BlockchainId is Ownable {\n', '\n', '    event NewCompany(bytes32 companyId, bytes32 merkleRoot);\n', '    event ChangeCompany(bytes32 companyId, bytes32 merkleRoot);\n', '    event DeleteCompany(bytes32 companyId);\n', '\n', '    mapping (bytes32 => bytes32) companyMap;\n', '\n', '    function _createCompany(bytes32 companyId, bytes32 merkleRoot) public onlyOwner() {\n', '        companyMap[companyId] = merkleRoot;\n', '        emit NewCompany(companyId, merkleRoot);\n', '    }\n', '\n', '    function _createCompanies(bytes32[] companyIds, bytes32[] merkleRoots) public onlyOwner() {\n', '        require(companyIds.length == merkleRoots.length);\n', '        for (uint i = 0; i < companyIds.length; i++) {\n', '            _createCompany(companyIds[i], merkleRoots[i]);\n', '        }\n', '    }\n', '\n', '    function getCompany(bytes32 companyId) public view returns (bytes32) {\n', '        return companyMap[companyId];\n', '    }\n', '\n', '    function _updateCompany(bytes32 companyId, bytes32 merkleRoot) public onlyOwner() {\n', '        companyMap[companyId] = merkleRoot;\n', '        emit ChangeCompany(companyId, merkleRoot);\n', '    }\n', '\n', '    function _updateCompanies(bytes32[] companyIds, bytes32[] merkleRoots) public onlyOwner() {\n', '        require(companyIds.length == merkleRoots.length);\n', '        for (uint i = 0; i < companyIds.length; i++) {\n', '            _updateCompany(companyIds[i], merkleRoots[i]);\n', '        }\n', '    }\n', '\n', '    function _deleteCompany(bytes32 companyId) public onlyOwner() {\n', '        delete companyMap[companyId];\n', '        emit DeleteCompany(companyId);\n', '    }\n', '}']
