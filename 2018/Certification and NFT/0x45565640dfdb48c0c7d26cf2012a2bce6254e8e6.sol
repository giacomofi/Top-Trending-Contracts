['pragma solidity ^0.4.23;\n', '\n', '/*\n', '    ERC20 Standard Token interface\n', '*/\n', 'contract IERC20Token {\n', '    // these functions aren&#39;t abstract since the compiler emits automatically generated getter functions as external\n', '    function name() public view returns (string) {}\n', '    function symbol() public view returns (string) {}\n', '    function decimals() public view returns (uint8) {}\n', '    function totalSupply() public view returns (uint256) {}\n', '    function balanceOf(address _owner) public view returns (uint256) { _owner; }\n', '    function allowance(address _owner, address _spender) public view returns (uint256) { _owner; _spender; }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', 'contract BancorConverter {\n', '\n', '    function getReturn(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount) public view returns (uint256);\n', '\n', '    function quickConvert(IERC20Token[] _path, uint256 _amount, uint256 _minReturn)\n', '        public\n', '        payable\n', '        returns (uint256);\n', '\n', '    function quickConvertPrioritized(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, uint256 _block, uint256 _nonce, uint8 _v, bytes32 _r, bytes32 _s)\n', '        public\n', '        payable\n', '        returns (uint256);\n', '\n', '    function change(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\n', '\n', '}\n', '\n', 'contract SwapContract {\n', '\n', '\n', '\tBancorConverter Bancor = BancorConverter(0xc6725aE749677f21E4d8f85F41cFB6DE49b9Db29);\n', '\tIERC20Token ETHToken = IERC20Token(0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315);\n', '\tIERC20Token BNTToken = IERC20Token(0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C);\n', '\n', '    IERC20Token[] path;\n', '\t\n', '\n', '\tconstructor() public {\n', '\t   }\n', '\t\n', '\tfunction test() public payable {\n', '\t   path = [ETHToken,BNTToken,BNTToken];\n', '\t   Bancor.quickConvert.value(address(this).balance)(path,address(this).balance,1);\n', '\t}\n', '\n', '    function testWithNewPath(IERC20Token[] _path) public payable {\n', '\t   Bancor.quickConvert.value(address(this).balance)(_path,address(this).balance,1);\n', '    }\n', '\t\n', '\t/**\n', '    * @notice Function to claim ANY token stuck on contract accidentally\n', '    * In case of claim of stuck tokens please contact contract owners\n', '    */\n', '    function claimTokens(IERC20Token _address, address _to) public {\n', '        require(_to != address(0));\n', '        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\n', '        _address.transfer(_to,remainder); //Transfer tokens to creator\n', '    }\n', '\t\n', '}']