['/*************************************************************************\n', ' * This contract has been merged with solidify\n', ' * https://github.com/tiesnetwork/solidify\n', ' *************************************************************************/\n', ' \n', ' pragma solidity ^0.4.18;\n', '\n', '\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/token/TokenTimelock.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./ERC20Basic.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/*************************************************************************\n', ' * import "./ERC20Basic.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "../token/SafeERC20.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./ERC20.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/*************************************************************************\n', ' * import "./ERC20.sol" : end\n', ' *************************************************************************/\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "../token/SafeERC20.sol" : end\n', ' *************************************************************************/\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '    require(_releaseTime > now);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() public {\n', '    require(now >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/token/TokenTimelock.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "./FNTRefundableCrowdsale.sol" : start\n', ' *************************************************************************/\n', '\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/crowdsale/RefundableCrowdsale.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "../math/SafeMath.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "../math/SafeMath.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "./FinalizableCrowdsale.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "../ownership/Ownable.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "../ownership/Ownable.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "./Crowdsale.sol" : start\n', ' *************************************************************************/\n', '\n', '/*************************************************************************\n', ' * import "../token/MintableToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./StandardToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./BasicToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "./BasicToken.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "./StandardToken.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "../token/MintableToken.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '/*************************************************************************\n', ' * import "./Crowdsale.sol" : end\n', ' *************************************************************************/\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "./FinalizableCrowdsale.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "./RefundVault.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "./RefundVault.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title RefundableCrowdsale\n', ' * @dev Extension of Crowdsale contract that adds a funding goal, and\n', ' * the possibility of users getting a refund if goal is not met.\n', ' * Uses a RefundVault as the crowdsale&#39;s vault.\n', ' */\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault public vault;\n', '\n', '  function RefundableCrowdsale(uint256 _goal) public {\n', '    require(_goal > 0);\n', '    vault = new RefundVault(wallet);\n', '    goal = _goal;\n', '  }\n', '\n', '  // We&#39;re overriding the fund forwarding from Crowdsale.\n', '  // In addition to sending the funds, we want to call\n', '  // the RefundVault deposit function\n', '  function forwardFunds() internal {\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '\n', '  // if crowdsale is unsuccessful, investors can claim refunds here\n', '  function claimRefund() public {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  // vault finalization task, called when owner calls finalize()\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '\n', '    super.finalization();\n', '  }\n', '\n', '  function goalReached() public view returns (bool) {\n', '    return weiRaised >= goal;\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/crowdsale/RefundableCrowdsale.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title FNTRefundableCrowdsale\n', ' * @dev Extension of teh RefundableCrowdsale form zeppelin to allow vault to be\n', ' * closed once soft cap is reached\n', ' */\n', 'contract FNTRefundableCrowdsale is RefundableCrowdsale {\n', '\n', '  // if the vault was closed before finalization\n', '  bool public vaultClosed = false;\n', '\n', '  // close vault call\n', '  function closeVault() public onlyOwner {\n', '    require(!vaultClosed);\n', '    require(goalReached());\n', '    vault.close();\n', '    vaultClosed = true;\n', '  }\n', '\n', '  // We&#39;re overriding the fund forwarding from Crowdsale.\n', '  // In addition to sending the funds, we want to call\n', '  // the RefundVault deposit function if the vault is not closed,\n', '  // if it is closed we forward teh funds to the wallet\n', '  function forwardFunds() internal {\n', '    if (!vaultClosed) {\n', '      vault.deposit.value(msg.value)(msg.sender);\n', '    } else {\n', '      wallet.transfer(msg.value);\n', '    }\n', '  }\n', '\n', '  // vault finalization task, called when owner calls finalize()\n', '  function finalization() internal {\n', '    if (!vaultClosed && goalReached()) {\n', '      vault.close();\n', '      vaultClosed = true;\n', '    } else if (!goalReached()) {\n', '      vault.enableRefunds();\n', '    }\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "./FNTRefundableCrowdsale.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "./FNTToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/token/BurnableToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/token/BurnableToken.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/token/PausableToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "../lifecycle/Pausable.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "../lifecycle/Pausable.sol" : end\n', ' *************************************************************************/\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/token/PausableToken.sol" : end\n', ' *************************************************************************/\n', '\n', '/**\n', '   @title FNTToken, the Friend token\n', '\n', '   Implementation of FRND, the ERC20 token for Friend, with extra methods\n', '   to transfer value and data to execute a call on transfer.\n', '   Uses OpenZeppelin BurnableToken, MintableToken and PausableToken.\n', ' */\n', 'contract FNTToken is BurnableToken, MintableToken, PausableToken {\n', '  // Token Name\n', '  string public constant NAME = "Friend Network Token";\n', '\n', '  // Token Symbol\n', '  string public constant SYMBOL = "FRND";\n', '\n', '  // Token decimals\n', '  uint8 public constant DECIMALS = 18;\n', '\n', '}\n', '/*************************************************************************\n', ' * import "./FNTToken.sol" : end\n', ' *************************************************************************/\n', '\n', '/**\n', ' * @title FNTCrowdsale\n', ' * @dev The crowdsale of the Firend Token network\n', ' * The Friend token network will have a max total supply of 2000000000\n', ' * The minimun cap for the sale is 25000 ETH\n', ' * The crowdsale is capped in tokens total supply\n', ' * If the minimun cap is not reached the ETH raised is returned\n', ' */\n', 'contract FNTCrowdsale is FNTRefundableCrowdsale {\n', '\n', '  uint256 public maxICOSupply;\n', '\n', '  uint256 public maxTotalSupply;\n', '\n', '  uint256 public minFunding;\n', '\n', '  uint256 public mediumFunding;\n', '\n', '  uint256 public highFunding;\n', '\n', '  uint256 public presaleWei;\n', '\n', '  address public teamAddress;\n', '\n', '  address public FSNASAddress;\n', '\n', '  mapping(address => bool) public whitelist;\n', '\n', '  event WhitelistedAddressAdded(address addr);\n', '  event WhitelistedAddressRemoved(address addr);\n', '  event VestedTeamTokens(address first, address second, address thrid, address fourth);\n', '\n', '  /**\n', '   * @dev Throws if called by any account that&#39;s not whitelisted.\n', '   */\n', '  modifier onlyWhitelisted() {\n', '    require(whitelist[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor\n', '   * Creates a Refundable Crowdsale and set the funding, max supply and addresses\n', '   * to distribute tokens at the end of the crowdsale.\n', '   * @param _startTime address, when the crowdsale starts\n', '   * @param _endTime address, when the crowdsale ends\n', '   * @param _rate address, crowdsale rate without bonus\n', '   * @param _minFunding address, soft cap\n', '   * @param _mediumFunding address, medium funding stage\n', '   * @param _highFunding address, high funding stage\n', '   * @param _wallet address, wallet to receive ETH raised\n', '   * @param _maxTotalSupply address, maximun token supply\n', '   * @param _teamAddress address, team&#39;s address\n', '   * @param _FSNASAddress address, fsnas address\n', '   */\n', '  function FNTCrowdsale(\n', '    uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _minFunding,\n', '    uint256 _mediumFunding, uint256 _highFunding, address _wallet,\n', '    uint256 _maxTotalSupply, address _teamAddress, address _FSNASAddress\n', '  ) public\n', '    RefundableCrowdsale(_minFunding)\n', '    Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '  {\n', '    require(_maxTotalSupply > 0);\n', '    require(_minFunding > 0);\n', '    require(_mediumFunding > _minFunding);\n', '    require(_highFunding > _mediumFunding);\n', '    require(_teamAddress != address(0));\n', '    require(_FSNASAddress != address(0));\n', '    minFunding = _minFunding;\n', '    mediumFunding = _mediumFunding;\n', '    highFunding = _highFunding;\n', '    maxTotalSupply = _maxTotalSupply;\n', '    maxICOSupply = maxTotalSupply.mul(82).div(100);\n', '    teamAddress = _teamAddress;\n', '    FSNASAddress = _FSNASAddress;\n', '    FNTToken(token).pause();\n', '  }\n', '\n', '  // Internal function that returns a MintableToken, FNTToken is mintable\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new FNTToken();\n', '  }\n', '\n', '  /**\n', '   * @dev Buy tokens fallback function, overrides zeppelin buyTokens function\n', '   * @param beneficiary address, the address that will receive the tokens\n', '   *\n', '   * ONLY send from a ERC20 compatible wallet like myetherwallet.com\n', '   *\n', '   */\n', '  function buyTokens(address beneficiary) public onlyWhitelisted payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = 0;\n', '    if (weiRaised < minFunding) {\n', '\n', '      // If the weiRaised go from less than min funding to more than high funding\n', '      if (weiRaised.add(weiAmount) > highFunding) {\n', '        tokens = minFunding.sub(weiRaised)\n', '          .mul(rate).mul(115).div(100);\n', '        tokens = tokens.add(\n', '          mediumFunding.sub(minFunding).mul(rate).mul(110).div(100)\n', '        );\n', '        tokens = tokens.add(\n', '          highFunding.sub(mediumFunding).mul(rate).mul(105).div(100)\n', '        );\n', '        tokens = tokens.add(\n', '          weiRaised.add(weiAmount).sub(highFunding).mul(rate)\n', '        );\n', '\n', '      // If the weiRaised go from less than min funding to more than medium funding\n', '      } else if (weiRaised.add(weiAmount) > mediumFunding) {\n', '        tokens = minFunding.sub(weiRaised)\n', '          .mul(rate).mul(115).div(100);\n', '        tokens = tokens.add(\n', '          mediumFunding.sub(minFunding).mul(rate).mul(110).div(100)\n', '        );\n', '        tokens = tokens.add(\n', '          weiRaised.add(weiAmount).sub(mediumFunding).mul(rate).mul(105).div(100)\n', '        );\n', '\n', '      // If the weiRaised go from less than min funding to more than min funding\n', '      // but less than medium\n', '      } else if (weiRaised.add(weiAmount) > minFunding) {\n', '        tokens = minFunding.sub(weiRaised)\n', '          .mul(rate).mul(115).div(100);\n', '        tokens = tokens.add(\n', '          weiRaised.add(weiAmount).sub(minFunding).mul(rate).mul(110).div(100)\n', '        );\n', '\n', '      // If the weiRaised still continues being less than min funding\n', '      } else {\n', '        tokens = weiAmount.mul(rate).mul(115).div(100);\n', '      }\n', '\n', '    } else if ((weiRaised >= minFunding) && (weiRaised < mediumFunding)) {\n', '\n', '      // If the weiRaised go from more than min funding and less than min funding\n', '      // to more than high funding\n', '      if (weiRaised.add(weiAmount) > highFunding) {\n', '        tokens = mediumFunding.sub(weiRaised)\n', '          .mul(rate).mul(110).div(100);\n', '        tokens = tokens.add(\n', '          highFunding.sub(mediumFunding).mul(rate).mul(105).div(100)\n', '        );\n', '        tokens = tokens.add(\n', '          weiRaised.add(weiAmount).sub(highFunding).mul(rate)\n', '        );\n', '\n', '      // If the weiRaised go from more than min funding and less than min funding\n', '      // to more than medium funding\n', '      } else if (weiRaised.add(weiAmount) > mediumFunding) {\n', '        tokens = mediumFunding.sub(weiRaised)\n', '          .mul(rate).mul(110).div(100);\n', '        tokens = tokens.add(\n', '          weiRaised.add(weiAmount).sub(mediumFunding).mul(rate).mul(105).div(100)\n', '        );\n', '\n', '      // If the weiRaised still continues being less than medium funding\n', '      } else {\n', '        tokens = weiAmount.mul(rate).mul(110).div(100);\n', '      }\n', '\n', '    } else if ((weiRaised >= mediumFunding) && (weiRaised < highFunding)) {\n', '\n', '      // If the weiRaised go from more than medium funding and less than high funding\n', '      // to more than high funding\n', '      if (weiRaised.add(weiAmount) > highFunding) {\n', '        tokens = highFunding.sub(weiRaised)\n', '          .mul(rate).mul(105).div(100);\n', '        tokens = tokens.add(\n', '          weiRaised.add(weiAmount).sub(highFunding).mul(rate)\n', '        );\n', '\n', '      // If the weiRaised still continues being less than high funding\n', '      } else {\n', '        tokens = weiAmount.mul(rate).mul(105).div(100);\n', '      }\n', '\n', '    // If the weiRaised still continues being more than high funding\n', '    } else {\n', '      tokens = weiAmount.mul(rate);\n', '    }\n', '\n', '    // Check not to sold more than maxICOSupply\n', '    require(token.totalSupply().add(tokens) <= maxICOSupply);\n', '\n', '    // Take in count wei received\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    // Mint the token to the buyer\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    // Forward funds to vault\n', '    forwardFunds();\n', '  }\n', '\n', '  /**\n', '   * @dev Distribute tokens to a batch of addresses, called only by owner\n', '   * @param addrs address[], the addresses where tokens will be issued\n', '   * @param values uint256[], the value in wei to be added\n', '   * @param rate uint256, the rate of tokens per ETH used\n', '   */\n', '  function addPresaleTokens(\n', '    address[] addrs, uint256[] values, uint256 rate\n', '  ) onlyOwner external {\n', '    require(now < endTime);\n', '    require(addrs.length == values.length);\n', '    require(rate > 0);\n', '\n', '    uint256 totalTokens = 0;\n', '\n', '    for(uint256 i = 0; i < addrs.length; i ++) {\n', '      token.mint(addrs[i], values[i].mul(rate));\n', '      totalTokens = totalTokens.add(values[i].mul(rate));\n', '\n', '      // Take in count wei received\n', '      weiRaised = weiRaised.add(values[i]);\n', '      presaleWei = presaleWei.add(values[i]);\n', '    }\n', '\n', '    // Check not to issue more than maxICOSupply\n', '    require(token.totalSupply() <= maxICOSupply);\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param addrs address[] addresses to be added in whitelist\n', '   */\n', '  function addToWhitelist(address[] addrs) onlyOwner external {\n', '    for(uint256 i = 0; i < addrs.length; i ++) {\n', '      require(!whitelist[addrs[i]]);\n', '      whitelist[addrs[i]] = true;\n', '      WhitelistedAddressAdded(addrs[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param addrs address[] addresses to be removed from whitelist\n', '   */\n', '  function removeFromWhitelist(address[] addrs) onlyOwner public {\n', '    for(uint256 i = 0; i < addrs.length; i ++) {\n', '      require(whitelist[addrs[i]]);\n', '      whitelist[addrs[i]] = false;\n', '      WhitelistedAddressRemoved(addrs[i]);\n', '    }\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    \n', '    if( goalReached() )\n', '    {\n', '\t    finalization();\n', '\t    Finalized();\n', '\t\n', '\t    isFinalized = true;\n', '    }\n', '\telse\n', '\t{\n', '\t\tif( hasEnded() )\n', '\t\t{\n', '\t\t    vault.enableRefunds();\n', '\t\t    \n', '\t\t    Finalized();\n', '\t\t    isFinalized = true;\n', '\t\t}\n', '\t}    \n', '  }\n', '\n', '  /**\n', '   * @dev Finalize the crowdsale and token minting, and transfer ownership of\n', '   * the token, can be called only by owner\n', '   */\n', '  function finalization() internal {\n', '    super.finalization();\n', '\n', '    // Multiplying tokens sold by 0,219512195122\n', '    // 18 / 82 = 0,219512195122 , which means that for every token sold in ICO\n', '    // 0,219512195122 extra tokens will be issued.\n', '    uint256 extraTokens = token.totalSupply().mul(219512195122).div(1000000000000);\n', '    uint256 teamTokens = extraTokens.div(3);\n', '    uint256 FSNASTokens = extraTokens.div(3).mul(2);\n', '\n', '    // Mint toke time locks to team\n', '    TokenTimelock firstBatch = new TokenTimelock(token, teamAddress, now.add(30 days));\n', '    token.mint(firstBatch, teamTokens.div(2));\n', '\n', '    TokenTimelock secondBatch = new TokenTimelock(token, teamAddress, now.add(1 years));\n', '    token.mint(secondBatch, teamTokens.div(2).div(3));\n', '\n', '    TokenTimelock thirdBatch = new TokenTimelock(token, teamAddress, now.add(2 years));\n', '    token.mint(thirdBatch, teamTokens.div(2).div(3));\n', '\n', '    TokenTimelock fourthBatch = new TokenTimelock(token, teamAddress, now.add(3 years));\n', '    token.mint(fourthBatch, teamTokens.div(2).div(3));\n', '\n', '    VestedTeamTokens(firstBatch, secondBatch, thirdBatch, fourthBatch);\n', '\n', '    // Mint FSNAS tokens\n', '    token.mint(FSNASAddress, FSNASTokens);\n', '\n', '    // Finsih the minting\n', '    token.finishMinting();\n', '\n', '    // Transfer ownership of token to company wallet\n', '    token.transferOwnership(wallet);\n', '\n', '  }\n', '\n', '}']
['/*************************************************************************\n', ' * This contract has been merged with solidify\n', ' * https://github.com/tiesnetwork/solidify\n', ' *************************************************************************/\n', ' \n', ' pragma solidity ^0.4.18;\n', '\n', '\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/token/TokenTimelock.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./ERC20Basic.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/*************************************************************************\n', ' * import "./ERC20Basic.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "../token/SafeERC20.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./ERC20.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/*************************************************************************\n', ' * import "./ERC20.sol" : end\n', ' *************************************************************************/\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "../token/SafeERC20.sol" : end\n', ' *************************************************************************/\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '    require(_releaseTime > now);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() public {\n', '    require(now >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/token/TokenTimelock.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "./FNTRefundableCrowdsale.sol" : start\n', ' *************************************************************************/\n', '\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/crowdsale/RefundableCrowdsale.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "../math/SafeMath.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "../math/SafeMath.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "./FinalizableCrowdsale.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "../ownership/Ownable.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "../ownership/Ownable.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "./Crowdsale.sol" : start\n', ' *************************************************************************/\n', '\n', '/*************************************************************************\n', ' * import "../token/MintableToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./StandardToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./BasicToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "./BasicToken.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "./StandardToken.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "../token/MintableToken.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '/*************************************************************************\n', ' * import "./Crowdsale.sol" : end\n', ' *************************************************************************/\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "./FinalizableCrowdsale.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "./RefundVault.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "./RefundVault.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title RefundableCrowdsale\n', ' * @dev Extension of Crowdsale contract that adds a funding goal, and\n', ' * the possibility of users getting a refund if goal is not met.\n', " * Uses a RefundVault as the crowdsale's vault.\n", ' */\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault public vault;\n', '\n', '  function RefundableCrowdsale(uint256 _goal) public {\n', '    require(_goal > 0);\n', '    vault = new RefundVault(wallet);\n', '    goal = _goal;\n', '  }\n', '\n', "  // We're overriding the fund forwarding from Crowdsale.\n", '  // In addition to sending the funds, we want to call\n', '  // the RefundVault deposit function\n', '  function forwardFunds() internal {\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '\n', '  // if crowdsale is unsuccessful, investors can claim refunds here\n', '  function claimRefund() public {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  // vault finalization task, called when owner calls finalize()\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '\n', '    super.finalization();\n', '  }\n', '\n', '  function goalReached() public view returns (bool) {\n', '    return weiRaised >= goal;\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/crowdsale/RefundableCrowdsale.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title FNTRefundableCrowdsale\n', ' * @dev Extension of teh RefundableCrowdsale form zeppelin to allow vault to be\n', ' * closed once soft cap is reached\n', ' */\n', 'contract FNTRefundableCrowdsale is RefundableCrowdsale {\n', '\n', '  // if the vault was closed before finalization\n', '  bool public vaultClosed = false;\n', '\n', '  // close vault call\n', '  function closeVault() public onlyOwner {\n', '    require(!vaultClosed);\n', '    require(goalReached());\n', '    vault.close();\n', '    vaultClosed = true;\n', '  }\n', '\n', "  // We're overriding the fund forwarding from Crowdsale.\n", '  // In addition to sending the funds, we want to call\n', '  // the RefundVault deposit function if the vault is not closed,\n', '  // if it is closed we forward teh funds to the wallet\n', '  function forwardFunds() internal {\n', '    if (!vaultClosed) {\n', '      vault.deposit.value(msg.value)(msg.sender);\n', '    } else {\n', '      wallet.transfer(msg.value);\n', '    }\n', '  }\n', '\n', '  // vault finalization task, called when owner calls finalize()\n', '  function finalization() internal {\n', '    if (!vaultClosed && goalReached()) {\n', '      vault.close();\n', '      vaultClosed = true;\n', '    } else if (!goalReached()) {\n', '      vault.enableRefunds();\n', '    }\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "./FNTRefundableCrowdsale.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "./FNTToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/token/BurnableToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/token/BurnableToken.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/token/PausableToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "../lifecycle/Pausable.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "../lifecycle/Pausable.sol" : end\n', ' *************************************************************************/\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/token/PausableToken.sol" : end\n', ' *************************************************************************/\n', '\n', '/**\n', '   @title FNTToken, the Friend token\n', '\n', '   Implementation of FRND, the ERC20 token for Friend, with extra methods\n', '   to transfer value and data to execute a call on transfer.\n', '   Uses OpenZeppelin BurnableToken, MintableToken and PausableToken.\n', ' */\n', 'contract FNTToken is BurnableToken, MintableToken, PausableToken {\n', '  // Token Name\n', '  string public constant NAME = "Friend Network Token";\n', '\n', '  // Token Symbol\n', '  string public constant SYMBOL = "FRND";\n', '\n', '  // Token decimals\n', '  uint8 public constant DECIMALS = 18;\n', '\n', '}\n', '/*************************************************************************\n', ' * import "./FNTToken.sol" : end\n', ' *************************************************************************/\n', '\n', '/**\n', ' * @title FNTCrowdsale\n', ' * @dev The crowdsale of the Firend Token network\n', ' * The Friend token network will have a max total supply of 2000000000\n', ' * The minimun cap for the sale is 25000 ETH\n', ' * The crowdsale is capped in tokens total supply\n', ' * If the minimun cap is not reached the ETH raised is returned\n', ' */\n', 'contract FNTCrowdsale is FNTRefundableCrowdsale {\n', '\n', '  uint256 public maxICOSupply;\n', '\n', '  uint256 public maxTotalSupply;\n', '\n', '  uint256 public minFunding;\n', '\n', '  uint256 public mediumFunding;\n', '\n', '  uint256 public highFunding;\n', '\n', '  uint256 public presaleWei;\n', '\n', '  address public teamAddress;\n', '\n', '  address public FSNASAddress;\n', '\n', '  mapping(address => bool) public whitelist;\n', '\n', '  event WhitelistedAddressAdded(address addr);\n', '  event WhitelistedAddressRemoved(address addr);\n', '  event VestedTeamTokens(address first, address second, address thrid, address fourth);\n', '\n', '  /**\n', "   * @dev Throws if called by any account that's not whitelisted.\n", '   */\n', '  modifier onlyWhitelisted() {\n', '    require(whitelist[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor\n', '   * Creates a Refundable Crowdsale and set the funding, max supply and addresses\n', '   * to distribute tokens at the end of the crowdsale.\n', '   * @param _startTime address, when the crowdsale starts\n', '   * @param _endTime address, when the crowdsale ends\n', '   * @param _rate address, crowdsale rate without bonus\n', '   * @param _minFunding address, soft cap\n', '   * @param _mediumFunding address, medium funding stage\n', '   * @param _highFunding address, high funding stage\n', '   * @param _wallet address, wallet to receive ETH raised\n', '   * @param _maxTotalSupply address, maximun token supply\n', "   * @param _teamAddress address, team's address\n", '   * @param _FSNASAddress address, fsnas address\n', '   */\n', '  function FNTCrowdsale(\n', '    uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _minFunding,\n', '    uint256 _mediumFunding, uint256 _highFunding, address _wallet,\n', '    uint256 _maxTotalSupply, address _teamAddress, address _FSNASAddress\n', '  ) public\n', '    RefundableCrowdsale(_minFunding)\n', '    Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '  {\n', '    require(_maxTotalSupply > 0);\n', '    require(_minFunding > 0);\n', '    require(_mediumFunding > _minFunding);\n', '    require(_highFunding > _mediumFunding);\n', '    require(_teamAddress != address(0));\n', '    require(_FSNASAddress != address(0));\n', '    minFunding = _minFunding;\n', '    mediumFunding = _mediumFunding;\n', '    highFunding = _highFunding;\n', '    maxTotalSupply = _maxTotalSupply;\n', '    maxICOSupply = maxTotalSupply.mul(82).div(100);\n', '    teamAddress = _teamAddress;\n', '    FSNASAddress = _FSNASAddress;\n', '    FNTToken(token).pause();\n', '  }\n', '\n', '  // Internal function that returns a MintableToken, FNTToken is mintable\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new FNTToken();\n', '  }\n', '\n', '  /**\n', '   * @dev Buy tokens fallback function, overrides zeppelin buyTokens function\n', '   * @param beneficiary address, the address that will receive the tokens\n', '   *\n', '   * ONLY send from a ERC20 compatible wallet like myetherwallet.com\n', '   *\n', '   */\n', '  function buyTokens(address beneficiary) public onlyWhitelisted payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = 0;\n', '    if (weiRaised < minFunding) {\n', '\n', '      // If the weiRaised go from less than min funding to more than high funding\n', '      if (weiRaised.add(weiAmount) > highFunding) {\n', '        tokens = minFunding.sub(weiRaised)\n', '          .mul(rate).mul(115).div(100);\n', '        tokens = tokens.add(\n', '          mediumFunding.sub(minFunding).mul(rate).mul(110).div(100)\n', '        );\n', '        tokens = tokens.add(\n', '          highFunding.sub(mediumFunding).mul(rate).mul(105).div(100)\n', '        );\n', '        tokens = tokens.add(\n', '          weiRaised.add(weiAmount).sub(highFunding).mul(rate)\n', '        );\n', '\n', '      // If the weiRaised go from less than min funding to more than medium funding\n', '      } else if (weiRaised.add(weiAmount) > mediumFunding) {\n', '        tokens = minFunding.sub(weiRaised)\n', '          .mul(rate).mul(115).div(100);\n', '        tokens = tokens.add(\n', '          mediumFunding.sub(minFunding).mul(rate).mul(110).div(100)\n', '        );\n', '        tokens = tokens.add(\n', '          weiRaised.add(weiAmount).sub(mediumFunding).mul(rate).mul(105).div(100)\n', '        );\n', '\n', '      // If the weiRaised go from less than min funding to more than min funding\n', '      // but less than medium\n', '      } else if (weiRaised.add(weiAmount) > minFunding) {\n', '        tokens = minFunding.sub(weiRaised)\n', '          .mul(rate).mul(115).div(100);\n', '        tokens = tokens.add(\n', '          weiRaised.add(weiAmount).sub(minFunding).mul(rate).mul(110).div(100)\n', '        );\n', '\n', '      // If the weiRaised still continues being less than min funding\n', '      } else {\n', '        tokens = weiAmount.mul(rate).mul(115).div(100);\n', '      }\n', '\n', '    } else if ((weiRaised >= minFunding) && (weiRaised < mediumFunding)) {\n', '\n', '      // If the weiRaised go from more than min funding and less than min funding\n', '      // to more than high funding\n', '      if (weiRaised.add(weiAmount) > highFunding) {\n', '        tokens = mediumFunding.sub(weiRaised)\n', '          .mul(rate).mul(110).div(100);\n', '        tokens = tokens.add(\n', '          highFunding.sub(mediumFunding).mul(rate).mul(105).div(100)\n', '        );\n', '        tokens = tokens.add(\n', '          weiRaised.add(weiAmount).sub(highFunding).mul(rate)\n', '        );\n', '\n', '      // If the weiRaised go from more than min funding and less than min funding\n', '      // to more than medium funding\n', '      } else if (weiRaised.add(weiAmount) > mediumFunding) {\n', '        tokens = mediumFunding.sub(weiRaised)\n', '          .mul(rate).mul(110).div(100);\n', '        tokens = tokens.add(\n', '          weiRaised.add(weiAmount).sub(mediumFunding).mul(rate).mul(105).div(100)\n', '        );\n', '\n', '      // If the weiRaised still continues being less than medium funding\n', '      } else {\n', '        tokens = weiAmount.mul(rate).mul(110).div(100);\n', '      }\n', '\n', '    } else if ((weiRaised >= mediumFunding) && (weiRaised < highFunding)) {\n', '\n', '      // If the weiRaised go from more than medium funding and less than high funding\n', '      // to more than high funding\n', '      if (weiRaised.add(weiAmount) > highFunding) {\n', '        tokens = highFunding.sub(weiRaised)\n', '          .mul(rate).mul(105).div(100);\n', '        tokens = tokens.add(\n', '          weiRaised.add(weiAmount).sub(highFunding).mul(rate)\n', '        );\n', '\n', '      // If the weiRaised still continues being less than high funding\n', '      } else {\n', '        tokens = weiAmount.mul(rate).mul(105).div(100);\n', '      }\n', '\n', '    // If the weiRaised still continues being more than high funding\n', '    } else {\n', '      tokens = weiAmount.mul(rate);\n', '    }\n', '\n', '    // Check not to sold more than maxICOSupply\n', '    require(token.totalSupply().add(tokens) <= maxICOSupply);\n', '\n', '    // Take in count wei received\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    // Mint the token to the buyer\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    // Forward funds to vault\n', '    forwardFunds();\n', '  }\n', '\n', '  /**\n', '   * @dev Distribute tokens to a batch of addresses, called only by owner\n', '   * @param addrs address[], the addresses where tokens will be issued\n', '   * @param values uint256[], the value in wei to be added\n', '   * @param rate uint256, the rate of tokens per ETH used\n', '   */\n', '  function addPresaleTokens(\n', '    address[] addrs, uint256[] values, uint256 rate\n', '  ) onlyOwner external {\n', '    require(now < endTime);\n', '    require(addrs.length == values.length);\n', '    require(rate > 0);\n', '\n', '    uint256 totalTokens = 0;\n', '\n', '    for(uint256 i = 0; i < addrs.length; i ++) {\n', '      token.mint(addrs[i], values[i].mul(rate));\n', '      totalTokens = totalTokens.add(values[i].mul(rate));\n', '\n', '      // Take in count wei received\n', '      weiRaised = weiRaised.add(values[i]);\n', '      presaleWei = presaleWei.add(values[i]);\n', '    }\n', '\n', '    // Check not to issue more than maxICOSupply\n', '    require(token.totalSupply() <= maxICOSupply);\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param addrs address[] addresses to be added in whitelist\n', '   */\n', '  function addToWhitelist(address[] addrs) onlyOwner external {\n', '    for(uint256 i = 0; i < addrs.length; i ++) {\n', '      require(!whitelist[addrs[i]]);\n', '      whitelist[addrs[i]] = true;\n', '      WhitelistedAddressAdded(addrs[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param addrs address[] addresses to be removed from whitelist\n', '   */\n', '  function removeFromWhitelist(address[] addrs) onlyOwner public {\n', '    for(uint256 i = 0; i < addrs.length; i ++) {\n', '      require(whitelist[addrs[i]]);\n', '      whitelist[addrs[i]] = false;\n', '      WhitelistedAddressRemoved(addrs[i]);\n', '    }\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    \n', '    if( goalReached() )\n', '    {\n', '\t    finalization();\n', '\t    Finalized();\n', '\t\n', '\t    isFinalized = true;\n', '    }\n', '\telse\n', '\t{\n', '\t\tif( hasEnded() )\n', '\t\t{\n', '\t\t    vault.enableRefunds();\n', '\t\t    \n', '\t\t    Finalized();\n', '\t\t    isFinalized = true;\n', '\t\t}\n', '\t}    \n', '  }\n', '\n', '  /**\n', '   * @dev Finalize the crowdsale and token minting, and transfer ownership of\n', '   * the token, can be called only by owner\n', '   */\n', '  function finalization() internal {\n', '    super.finalization();\n', '\n', '    // Multiplying tokens sold by 0,219512195122\n', '    // 18 / 82 = 0,219512195122 , which means that for every token sold in ICO\n', '    // 0,219512195122 extra tokens will be issued.\n', '    uint256 extraTokens = token.totalSupply().mul(219512195122).div(1000000000000);\n', '    uint256 teamTokens = extraTokens.div(3);\n', '    uint256 FSNASTokens = extraTokens.div(3).mul(2);\n', '\n', '    // Mint toke time locks to team\n', '    TokenTimelock firstBatch = new TokenTimelock(token, teamAddress, now.add(30 days));\n', '    token.mint(firstBatch, teamTokens.div(2));\n', '\n', '    TokenTimelock secondBatch = new TokenTimelock(token, teamAddress, now.add(1 years));\n', '    token.mint(secondBatch, teamTokens.div(2).div(3));\n', '\n', '    TokenTimelock thirdBatch = new TokenTimelock(token, teamAddress, now.add(2 years));\n', '    token.mint(thirdBatch, teamTokens.div(2).div(3));\n', '\n', '    TokenTimelock fourthBatch = new TokenTimelock(token, teamAddress, now.add(3 years));\n', '    token.mint(fourthBatch, teamTokens.div(2).div(3));\n', '\n', '    VestedTeamTokens(firstBatch, secondBatch, thirdBatch, fourthBatch);\n', '\n', '    // Mint FSNAS tokens\n', '    token.mint(FSNASAddress, FSNASTokens);\n', '\n', '    // Finsih the minting\n', '    token.finishMinting();\n', '\n', '    // Transfer ownership of token to company wallet\n', '    token.transferOwnership(wallet);\n', '\n', '  }\n', '\n', '}']
