['pragma solidity ^0.4.18;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract SAGAcrowdSale is Ownable {\n', '\taddress  public SAGA;\n', '\tmapping (address => bool) public whiteList;\n', '\tuint256 public price = 80000;\n', '\t\n', '\tfunction SAGAcrowdSale (address _SAGA) {\n', '\t\tSAGA = _SAGA;\n', '\t}\n', '\t\n', '\n', '\tfunction addWhiteList (address[] _client) onlyOwner {\n', '\t\tfor (uint i = 0; i < _client.length; i++) {\n', '\t\t\twhiteList[_client[i]] = true;\n', '\t\t}\n', '\t}\n', '\t\n', '\tfunction () public payable {\n', '\t\tbuyTokens();\n', '\t}\n', '\n', '\tfunction buyTokens () public payable {\n', '\t\trequire (whiteList[msg.sender]);\n', '    require (msg.value >= 0.1 ether);\n', '\t\tuint256 tokenAmount = msg.value * price;\n', '\t\trequire(ERC20Basic(SAGA).transfer(msg.sender, tokenAmount));\n', '\t}\n', '\n', '\tfunction endOfPreSale() onlyOwner {\n', '\t\tprice = 60000;\n', '\t}\n', '\n', '  function finalize (address _realOwner) public onlyOwner {\n', '    ERC20Basic(SAGA).transfer(_realOwner, ERC20Basic(SAGA).balanceOf(this));\n', '    _realOwner.transfer(this.balance);\n', '  }\n', '}']