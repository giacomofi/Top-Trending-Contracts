['pragma solidity ^0.4.21;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/InstantListing.sol\n', '\n', 'contract InstantListing is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    struct Proposal {\n', '        uint256 totalContributions;\n', '        mapping(address => uint256) contributions;\n', '\n', '        address tokenAddress;\n', '        string projectName;\n', '        string websiteUrl;\n', '        string whitepaperUrl;\n', '        string legalDocumentUrl;\n', '        uint256 icoStartDate;\n', '        uint256 icoEndDate;\n', '        uint256 icoRate; // If 4000 COB = 1 ETH, then icoRate = 4000.\n', '        uint256 totalRaised;\n', '    }\n', '\n', '    // Round number\n', '    uint256 public round;\n', '\n', '    // Flag to mark if "listing-by-rank" is already executed\n', '    bool public ranked;\n', '\n', '    // The address of beneficiary.\n', '    address public beneficiary;\n', '\n', '    // The address of token used for payment (e.g. COB)\n', '    address public paymentTokenAddress;\n', '\n', '    // Required amount of paymentToken to able to propose a listing.\n', '    uint256 public requiredDownPayment;\n', '\n', '    // Proposals proposed by community.\n', '    mapping(uint256 => mapping(address => Proposal)) public proposals;\n', '\n', '    // Contribution of each round.\n', '    mapping(uint256 => uint256) public roundContribution;\n', '\n', '    // A mapping of the token listing status.\n', '    mapping(address => bool) public listed;\n', '\n', '    // A mapping from token contract address to the last refundable unix\n', '    // timestamp, 0 means not refundable.\n', '    mapping(address => uint256) public refundable;\n', '\n', '    // Candidates\n', '    address[] public candidates;\n', '\n', '    // Configs.\n', '    uint256 public startTime;\n', '    uint256 public prevEndTime;\n', '    uint256 public softCap;\n', '    uint256 public hardCap;\n', '    uint256 public duration;\n', '    uint256 public numListed;\n', '\n', '    // Events.\n', '    event SoftCapReached(uint256 indexed _round, address _tokenAddress);\n', '    event TokenProposed(uint256 indexed _round, address _tokenAddress, uint256 _refundEndTime);\n', '    event TokenListed(uint256 indexed _round, address _tokenAddress, uint256 _refundEndTime);\n', '    event Vote(uint256 indexed _round, address indexed _tokenAddress, address indexed voter, uint256 amount);\n', '    event RoundFinalized(uint256 _round);\n', '\n', '    constructor() public {\n', '    }\n', '\n', '    function getCurrentTimestamp() internal view returns (uint256) {\n', '        return now;\n', '    }\n', '\n', '    function initialize(\n', '        address _beneficiary,\n', '        address _paymentTokenAddress)\n', '        onlyOwner public {\n', '\n', '        beneficiary = _beneficiary;\n', '        paymentTokenAddress = _paymentTokenAddress;\n', '    }\n', '\n', '    function reset(\n', '        uint256 _requiredDownPayment,\n', '        uint256 _startTime,\n', '        uint256 _duration,\n', '        uint256 _softCap,\n', '        uint256 _hardCap,\n', '        uint256 _numListed)\n', '        onlyOwner public {\n', '        require(getCurrentTimestamp() >= startTime + duration);\n', '\n', '\n', '        // List tokens in the leaderboard\n', '        if (!ranked) {\n', '            listTokenByRank();\n', '        }\n', '\n', '        // Transfer all balance except for latest round,\n', '        // which is reserved for refund.\n', '        StandardToken paymentToken = StandardToken(paymentTokenAddress);\n', '        if (round != 0) {\n', '            prevEndTime = startTime + duration;\n', '            paymentToken.transfer(beneficiary,\n', '                paymentToken.balanceOf(this) - roundContribution[round]);\n', '        }\n', '\n', '        requiredDownPayment = _requiredDownPayment;\n', '        startTime = _startTime;\n', '        duration = _duration;\n', '        hardCap = _hardCap;\n', '        softCap = _softCap;\n', '        numListed = _numListed;\n', '        ranked = false;\n', '\n', '        emit RoundFinalized(round);\n', '\n', '        delete candidates;\n', '\n', '        round += 1;\n', '    }\n', '\n', '    function propose(\n', '        address _tokenAddress,\n', '        string _projectName,\n', '        string _websiteUrl,\n', '        string _whitepaperUrl,\n', '        string _legalDocumentUrl,\n', '        uint256 _icoStartDate,\n', '        uint256 _icoEndDate,\n', '        uint256 _icoRate,\n', '        uint256 _totalRaised) public {\n', '        require(proposals[round][_tokenAddress].totalContributions == 0);\n', '        require(getCurrentTimestamp() < startTime + duration);\n', '\n', '        StandardToken paymentToken = StandardToken(paymentTokenAddress);\n', '        uint256 downPayment = paymentToken.allowance(msg.sender, this);\n', '\n', '        if (downPayment < requiredDownPayment) {\n', '            revert();\n', '        }\n', '\n', '        paymentToken.transferFrom(msg.sender, this, downPayment);\n', '\n', '        proposals[round][_tokenAddress] = Proposal({\n', '            tokenAddress: _tokenAddress,\n', '            projectName: _projectName,\n', '            websiteUrl: _websiteUrl,\n', '            whitepaperUrl: _whitepaperUrl,\n', '            legalDocumentUrl: _legalDocumentUrl,\n', '            icoStartDate: _icoStartDate,\n', '            icoEndDate: _icoEndDate,\n', '            icoRate: _icoRate,\n', '            totalRaised: _totalRaised,\n', '            totalContributions: 0\n', '        });\n', '\n', '        // Only allow refunding amount exceeding down payment.\n', '        proposals[round][_tokenAddress].contributions[msg.sender] =\n', '            downPayment - requiredDownPayment;\n', '        proposals[round][_tokenAddress].totalContributions = downPayment;\n', '        roundContribution[round] = roundContribution[round].add(\n', '            downPayment - requiredDownPayment);\n', '        listed[_tokenAddress] = false;\n', '\n', '        if (downPayment >= softCap && downPayment < hardCap) {\n', '            candidates.push(_tokenAddress);\n', '            emit SoftCapReached(round, _tokenAddress);\n', '        }\n', '\n', '        if (downPayment >= hardCap) {\n', '            listed[_tokenAddress] = true;\n', '            emit TokenListed(round, _tokenAddress, refundable[_tokenAddress]);\n', '        }\n', '\n', '        refundable[_tokenAddress] = startTime + duration + 7 * 1 days;\n', '        emit TokenProposed(round, _tokenAddress, refundable[_tokenAddress]);\n', '    }\n', '\n', '    function vote(address _tokenAddress) public {\n', '        require(getCurrentTimestamp() >= startTime &&\n', '                getCurrentTimestamp() < startTime + duration);\n', '        require(proposals[round][_tokenAddress].totalContributions > 0);\n', '\n', '        StandardToken paymentToken = StandardToken(paymentTokenAddress);\n', '        bool prevSoftCapReached =\n', '            proposals[round][_tokenAddress].totalContributions >= softCap;\n', '        uint256 allowedPayment = paymentToken.allowance(msg.sender, this);\n', '\n', '        paymentToken.transferFrom(msg.sender, this, allowedPayment);\n', '        proposals[round][_tokenAddress].contributions[msg.sender] =\n', '            proposals[round][_tokenAddress].contributions[msg.sender].add(\n', '                allowedPayment);\n', '        proposals[round][_tokenAddress].totalContributions =\n', '            proposals[round][_tokenAddress].totalContributions.add(\n', '                allowedPayment);\n', '        roundContribution[round] = roundContribution[round].add(allowedPayment);\n', '\n', '        if (!prevSoftCapReached &&\n', '            proposals[round][_tokenAddress].totalContributions >= softCap &&\n', '            proposals[round][_tokenAddress].totalContributions < hardCap) {\n', '            candidates.push(_tokenAddress);\n', '            emit SoftCapReached(round, _tokenAddress);\n', '        }\n', '\n', '        if (proposals[round][_tokenAddress].totalContributions >= hardCap) {\n', '            listed[_tokenAddress] = true;\n', '            refundable[_tokenAddress] = 0;\n', '            emit TokenListed(round, _tokenAddress, refundable[_tokenAddress]);\n', '        }\n', '\n', '        emit Vote(round, _tokenAddress, msg.sender, allowedPayment);\n', '    }\n', '\n', '    function setRefundable(address _tokenAddress, uint256 endTime)\n', '        onlyOwner public {\n', '        refundable[_tokenAddress] = endTime;\n', '    }\n', '\n', '    // For those claimed but not refund payment\n', '    function withdrawBalance() onlyOwner public {\n', '        require(getCurrentTimestamp() >= (prevEndTime + 7 * 1 days));\n', '\n', '        StandardToken paymentToken = StandardToken(paymentTokenAddress);\n', '        paymentToken.transfer(beneficiary, paymentToken.balanceOf(this));\n', '    }\n', '\n', '    function refund(address _tokenAddress) public {\n', '        require(refundable[_tokenAddress] > 0 &&\n', '                prevEndTime > 0 &&\n', '                getCurrentTimestamp() >= prevEndTime &&\n', '                getCurrentTimestamp() < refundable[_tokenAddress]);\n', '\n', '        StandardToken paymentToken = StandardToken(paymentTokenAddress);\n', '\n', '        uint256 amount = proposals[round][_tokenAddress].contributions[msg.sender];\n', '        if (amount > 0) {\n', '            proposals[round][_tokenAddress].contributions[msg.sender] = 0;\n', '            proposals[round][_tokenAddress].totalContributions =\n', '                proposals[round][_tokenAddress].totalContributions.sub(amount);\n', '            paymentToken.transfer(msg.sender, amount);\n', '        }\n', '    }\n', '\n', '    function listTokenByRank() onlyOwner public {\n', '        require(getCurrentTimestamp() >= startTime + duration &&\n', '                !ranked);\n', '\n', '        quickSort(0, candidates.length);\n', '\n', '        uint collected = 0;\n', '        for (uint i = 0; i < candidates.length && collected < numListed; i++) {\n', '            if (!listed[candidates[i]]) {\n', '                listed[candidates[i]] = true;\n', '                refundable[candidates[i]] = 0;\n', '                emit TokenListed(round, candidates[i], refundable[candidates[i]]);\n', '                collected++;\n', '            }\n', '        }\n', '\n', '        ranked = true;\n', '    }\n', '\n', '    function quickSort(uint beg, uint end) internal {\n', '        if (beg + 1 >= end)\n', '            return;\n', '\n', '        uint pv = proposals[round][candidates[end - 1]].totalContributions;\n', '        uint partition = beg;\n', '\n', '        for (uint i = beg; i < end; i++) {\n', '            if (proposals[round][candidates[i]].totalContributions > pv) {\n', '                (candidates[partition], candidates[i]) =\n', '                    (candidates[i], candidates[partition]);\n', '                partition++;\n', '            }\n', '        }\n', '        (candidates[partition], candidates[end - 1]) =\n', '           (candidates[end - 1], candidates[partition]);\n', '\n', '        quickSort(beg, partition);\n', '        quickSort(partition + 1, end);\n', '    }\n', '\n', '    function getContributions(\n', '        uint256 _round,\n', '        address _tokenAddress,\n', '        address contributor) view public returns (uint256) {\n', '        return proposals[_round][_tokenAddress].contributions[contributor];\n', '    }\n', '\n', '    function numCandidates() view public returns (uint256) {\n', '        return candidates.length;\n', '    }\n', '\n', '    function kill() public onlyOwner {\n', '        StandardToken paymentToken = StandardToken(paymentTokenAddress);\n', '        paymentToken.transfer(beneficiary, paymentToken.balanceOf(this));\n', '\n', '        selfdestruct(beneficiary);\n', '    }\n', '\n', '    // Default method, we do not accept ether atm.\n', '    function () public payable {\n', '        revert();\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/InstantListing.sol\n', '\n', 'contract InstantListing is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    struct Proposal {\n', '        uint256 totalContributions;\n', '        mapping(address => uint256) contributions;\n', '\n', '        address tokenAddress;\n', '        string projectName;\n', '        string websiteUrl;\n', '        string whitepaperUrl;\n', '        string legalDocumentUrl;\n', '        uint256 icoStartDate;\n', '        uint256 icoEndDate;\n', '        uint256 icoRate; // If 4000 COB = 1 ETH, then icoRate = 4000.\n', '        uint256 totalRaised;\n', '    }\n', '\n', '    // Round number\n', '    uint256 public round;\n', '\n', '    // Flag to mark if "listing-by-rank" is already executed\n', '    bool public ranked;\n', '\n', '    // The address of beneficiary.\n', '    address public beneficiary;\n', '\n', '    // The address of token used for payment (e.g. COB)\n', '    address public paymentTokenAddress;\n', '\n', '    // Required amount of paymentToken to able to propose a listing.\n', '    uint256 public requiredDownPayment;\n', '\n', '    // Proposals proposed by community.\n', '    mapping(uint256 => mapping(address => Proposal)) public proposals;\n', '\n', '    // Contribution of each round.\n', '    mapping(uint256 => uint256) public roundContribution;\n', '\n', '    // A mapping of the token listing status.\n', '    mapping(address => bool) public listed;\n', '\n', '    // A mapping from token contract address to the last refundable unix\n', '    // timestamp, 0 means not refundable.\n', '    mapping(address => uint256) public refundable;\n', '\n', '    // Candidates\n', '    address[] public candidates;\n', '\n', '    // Configs.\n', '    uint256 public startTime;\n', '    uint256 public prevEndTime;\n', '    uint256 public softCap;\n', '    uint256 public hardCap;\n', '    uint256 public duration;\n', '    uint256 public numListed;\n', '\n', '    // Events.\n', '    event SoftCapReached(uint256 indexed _round, address _tokenAddress);\n', '    event TokenProposed(uint256 indexed _round, address _tokenAddress, uint256 _refundEndTime);\n', '    event TokenListed(uint256 indexed _round, address _tokenAddress, uint256 _refundEndTime);\n', '    event Vote(uint256 indexed _round, address indexed _tokenAddress, address indexed voter, uint256 amount);\n', '    event RoundFinalized(uint256 _round);\n', '\n', '    constructor() public {\n', '    }\n', '\n', '    function getCurrentTimestamp() internal view returns (uint256) {\n', '        return now;\n', '    }\n', '\n', '    function initialize(\n', '        address _beneficiary,\n', '        address _paymentTokenAddress)\n', '        onlyOwner public {\n', '\n', '        beneficiary = _beneficiary;\n', '        paymentTokenAddress = _paymentTokenAddress;\n', '    }\n', '\n', '    function reset(\n', '        uint256 _requiredDownPayment,\n', '        uint256 _startTime,\n', '        uint256 _duration,\n', '        uint256 _softCap,\n', '        uint256 _hardCap,\n', '        uint256 _numListed)\n', '        onlyOwner public {\n', '        require(getCurrentTimestamp() >= startTime + duration);\n', '\n', '\n', '        // List tokens in the leaderboard\n', '        if (!ranked) {\n', '            listTokenByRank();\n', '        }\n', '\n', '        // Transfer all balance except for latest round,\n', '        // which is reserved for refund.\n', '        StandardToken paymentToken = StandardToken(paymentTokenAddress);\n', '        if (round != 0) {\n', '            prevEndTime = startTime + duration;\n', '            paymentToken.transfer(beneficiary,\n', '                paymentToken.balanceOf(this) - roundContribution[round]);\n', '        }\n', '\n', '        requiredDownPayment = _requiredDownPayment;\n', '        startTime = _startTime;\n', '        duration = _duration;\n', '        hardCap = _hardCap;\n', '        softCap = _softCap;\n', '        numListed = _numListed;\n', '        ranked = false;\n', '\n', '        emit RoundFinalized(round);\n', '\n', '        delete candidates;\n', '\n', '        round += 1;\n', '    }\n', '\n', '    function propose(\n', '        address _tokenAddress,\n', '        string _projectName,\n', '        string _websiteUrl,\n', '        string _whitepaperUrl,\n', '        string _legalDocumentUrl,\n', '        uint256 _icoStartDate,\n', '        uint256 _icoEndDate,\n', '        uint256 _icoRate,\n', '        uint256 _totalRaised) public {\n', '        require(proposals[round][_tokenAddress].totalContributions == 0);\n', '        require(getCurrentTimestamp() < startTime + duration);\n', '\n', '        StandardToken paymentToken = StandardToken(paymentTokenAddress);\n', '        uint256 downPayment = paymentToken.allowance(msg.sender, this);\n', '\n', '        if (downPayment < requiredDownPayment) {\n', '            revert();\n', '        }\n', '\n', '        paymentToken.transferFrom(msg.sender, this, downPayment);\n', '\n', '        proposals[round][_tokenAddress] = Proposal({\n', '            tokenAddress: _tokenAddress,\n', '            projectName: _projectName,\n', '            websiteUrl: _websiteUrl,\n', '            whitepaperUrl: _whitepaperUrl,\n', '            legalDocumentUrl: _legalDocumentUrl,\n', '            icoStartDate: _icoStartDate,\n', '            icoEndDate: _icoEndDate,\n', '            icoRate: _icoRate,\n', '            totalRaised: _totalRaised,\n', '            totalContributions: 0\n', '        });\n', '\n', '        // Only allow refunding amount exceeding down payment.\n', '        proposals[round][_tokenAddress].contributions[msg.sender] =\n', '            downPayment - requiredDownPayment;\n', '        proposals[round][_tokenAddress].totalContributions = downPayment;\n', '        roundContribution[round] = roundContribution[round].add(\n', '            downPayment - requiredDownPayment);\n', '        listed[_tokenAddress] = false;\n', '\n', '        if (downPayment >= softCap && downPayment < hardCap) {\n', '            candidates.push(_tokenAddress);\n', '            emit SoftCapReached(round, _tokenAddress);\n', '        }\n', '\n', '        if (downPayment >= hardCap) {\n', '            listed[_tokenAddress] = true;\n', '            emit TokenListed(round, _tokenAddress, refundable[_tokenAddress]);\n', '        }\n', '\n', '        refundable[_tokenAddress] = startTime + duration + 7 * 1 days;\n', '        emit TokenProposed(round, _tokenAddress, refundable[_tokenAddress]);\n', '    }\n', '\n', '    function vote(address _tokenAddress) public {\n', '        require(getCurrentTimestamp() >= startTime &&\n', '                getCurrentTimestamp() < startTime + duration);\n', '        require(proposals[round][_tokenAddress].totalContributions > 0);\n', '\n', '        StandardToken paymentToken = StandardToken(paymentTokenAddress);\n', '        bool prevSoftCapReached =\n', '            proposals[round][_tokenAddress].totalContributions >= softCap;\n', '        uint256 allowedPayment = paymentToken.allowance(msg.sender, this);\n', '\n', '        paymentToken.transferFrom(msg.sender, this, allowedPayment);\n', '        proposals[round][_tokenAddress].contributions[msg.sender] =\n', '            proposals[round][_tokenAddress].contributions[msg.sender].add(\n', '                allowedPayment);\n', '        proposals[round][_tokenAddress].totalContributions =\n', '            proposals[round][_tokenAddress].totalContributions.add(\n', '                allowedPayment);\n', '        roundContribution[round] = roundContribution[round].add(allowedPayment);\n', '\n', '        if (!prevSoftCapReached &&\n', '            proposals[round][_tokenAddress].totalContributions >= softCap &&\n', '            proposals[round][_tokenAddress].totalContributions < hardCap) {\n', '            candidates.push(_tokenAddress);\n', '            emit SoftCapReached(round, _tokenAddress);\n', '        }\n', '\n', '        if (proposals[round][_tokenAddress].totalContributions >= hardCap) {\n', '            listed[_tokenAddress] = true;\n', '            refundable[_tokenAddress] = 0;\n', '            emit TokenListed(round, _tokenAddress, refundable[_tokenAddress]);\n', '        }\n', '\n', '        emit Vote(round, _tokenAddress, msg.sender, allowedPayment);\n', '    }\n', '\n', '    function setRefundable(address _tokenAddress, uint256 endTime)\n', '        onlyOwner public {\n', '        refundable[_tokenAddress] = endTime;\n', '    }\n', '\n', '    // For those claimed but not refund payment\n', '    function withdrawBalance() onlyOwner public {\n', '        require(getCurrentTimestamp() >= (prevEndTime + 7 * 1 days));\n', '\n', '        StandardToken paymentToken = StandardToken(paymentTokenAddress);\n', '        paymentToken.transfer(beneficiary, paymentToken.balanceOf(this));\n', '    }\n', '\n', '    function refund(address _tokenAddress) public {\n', '        require(refundable[_tokenAddress] > 0 &&\n', '                prevEndTime > 0 &&\n', '                getCurrentTimestamp() >= prevEndTime &&\n', '                getCurrentTimestamp() < refundable[_tokenAddress]);\n', '\n', '        StandardToken paymentToken = StandardToken(paymentTokenAddress);\n', '\n', '        uint256 amount = proposals[round][_tokenAddress].contributions[msg.sender];\n', '        if (amount > 0) {\n', '            proposals[round][_tokenAddress].contributions[msg.sender] = 0;\n', '            proposals[round][_tokenAddress].totalContributions =\n', '                proposals[round][_tokenAddress].totalContributions.sub(amount);\n', '            paymentToken.transfer(msg.sender, amount);\n', '        }\n', '    }\n', '\n', '    function listTokenByRank() onlyOwner public {\n', '        require(getCurrentTimestamp() >= startTime + duration &&\n', '                !ranked);\n', '\n', '        quickSort(0, candidates.length);\n', '\n', '        uint collected = 0;\n', '        for (uint i = 0; i < candidates.length && collected < numListed; i++) {\n', '            if (!listed[candidates[i]]) {\n', '                listed[candidates[i]] = true;\n', '                refundable[candidates[i]] = 0;\n', '                emit TokenListed(round, candidates[i], refundable[candidates[i]]);\n', '                collected++;\n', '            }\n', '        }\n', '\n', '        ranked = true;\n', '    }\n', '\n', '    function quickSort(uint beg, uint end) internal {\n', '        if (beg + 1 >= end)\n', '            return;\n', '\n', '        uint pv = proposals[round][candidates[end - 1]].totalContributions;\n', '        uint partition = beg;\n', '\n', '        for (uint i = beg; i < end; i++) {\n', '            if (proposals[round][candidates[i]].totalContributions > pv) {\n', '                (candidates[partition], candidates[i]) =\n', '                    (candidates[i], candidates[partition]);\n', '                partition++;\n', '            }\n', '        }\n', '        (candidates[partition], candidates[end - 1]) =\n', '           (candidates[end - 1], candidates[partition]);\n', '\n', '        quickSort(beg, partition);\n', '        quickSort(partition + 1, end);\n', '    }\n', '\n', '    function getContributions(\n', '        uint256 _round,\n', '        address _tokenAddress,\n', '        address contributor) view public returns (uint256) {\n', '        return proposals[_round][_tokenAddress].contributions[contributor];\n', '    }\n', '\n', '    function numCandidates() view public returns (uint256) {\n', '        return candidates.length;\n', '    }\n', '\n', '    function kill() public onlyOwner {\n', '        StandardToken paymentToken = StandardToken(paymentTokenAddress);\n', '        paymentToken.transfer(beneficiary, paymentToken.balanceOf(this));\n', '\n', '        selfdestruct(beneficiary);\n', '    }\n', '\n', '    // Default method, we do not accept ether atm.\n', '    function () public payable {\n', '        revert();\n', '    }\n', '}']
