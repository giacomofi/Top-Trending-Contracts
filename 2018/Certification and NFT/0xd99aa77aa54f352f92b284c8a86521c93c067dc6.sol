['pragma solidity ^0.4.19;\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    /**\n', '     * The address whcih deploys this contrcat is automatically assgined ownership.\n', '     * */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Functions with this modifier can only be executed by the owner of the contract. \n', '     * */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    event OwnershipTransferred(address indexed from, address indexed to);\n', '\n', '    /**\n', '    * Transfers ownership to new Ethereum address. This function can only be called by the \n', '    * owner.\n', '    * @param _newOwner the address to be granted ownership.\n', '    **/\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != 0x0);\n', '        OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract TokenInterface {\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', '\n', 'contract ICO is Ownable {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    string public website = "www.propvesta.com";\n', '    uint256 public rate;\n', '    uint256 public tokensSold;\n', '    address public fundsWallet = 0x304f970BaA307238A6a4F47caa9e0d82F082e3AD;\n', '    \n', '    TokenInterface public constant PROV = TokenInterface(0x409Ec1FCd524480b3CaDf4331aF21A2cB3Db68c9);\n', '    \n', '    function ICO() public {\n', '        rate = 20000000;\n', '    }\n', '    \n', '    function changeRate(uint256 _newRate) public onlyOwner {\n', '        require(_newRate > 0 && rate != _newRate);\n', '        rate = _newRate;\n', '    }\n', '    \n', '    function changeFundsWallet(address _fundsWallet) public onlyOwner returns(bool) {\n', '        fundsWallet = _fundsWallet;\n', '        return true;\n', '    }\n', '    \n', '    event TokenPurchase(address indexed investor, uint256 tokensPurchased);\n', '    \n', '    function buyTokens(address _investor) public payable {\n', '        require(msg.value >= 1e16);\n', '        uint256 exchangeRate = rate;\n', '        uint256 bonus = 0;\n', '        uint256 investment = msg.value;\n', '        uint256 remainder = 0;\n', '        if(investment >= 1e18 && investment < 2e18) {\n', '            bonus = 30;\n', '        } else if(investment >= 2e18 && investment < 3e18) {\n', '            bonus = 35;\n', '        } else if(investment >= 3e18 && investment < 4e18) {\n', '            bonus = 40;\n', '        } else if(investment >= 4e18 && investment < 5e18) {\n', '            bonus = 45;\n', '        } else if(investment >= 5e18) {\n', '            bonus = 50;\n', '        }\n', '        exchangeRate = rate.mul(bonus).div(100).add(rate);\n', '        uint256 toTransfer = 0;\n', '        if(investment > 10e18) {\n', '            uint256 bonusCap = 10e18;\n', '            toTransfer = bonusCap.mul(exchangeRate);\n', '            remainder = investment.sub(bonusCap);\n', '            toTransfer = toTransfer.add(remainder.mul(rate));\n', '        } else {\n', '            toTransfer = investment.mul(exchangeRate);\n', '        }\n', '        PROV.transfer(_investor, toTransfer);\n', '        TokenPurchase(_investor, toTransfer);\n', '        tokensSold = tokensSold.add(toTransfer);\n', '        fundsWallet.transfer(investment);\n', '    }\n', '    \n', '    function() public payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '    \n', '    function getTokensSold() public view returns(uint256) {\n', '        return tokensSold;\n', '    }\n', '    \n', '    event TokensWithdrawn(uint256 totalPROV);\n', '    \n', '    function withdrawPROV(uint256 _value) public onlyOwner {\n', '        PROV.transfer(fundsWallet, _value);\n', '        TokensWithdrawn(_value);\n', '    }\n', '}']