['pragma solidity ^0.4.19;\n', '\n', 'contract Pixereum {\n', '\n', '\n', '    struct Pixel {\n', '        address owner;\n', '        string message;\n', '        uint256 price;\n', '        bool isSale;\n', '    }\n', '\n', '\n', '\n', '    /**************************************************************************\n', '    * public variables\n', '    ***************************************************************************/\n', '    uint24[10000] public colors;\n', '    bool public isMessageEnabled;\n', '\n', '\n', '\n', '    /**************************************************************************\n', '    * private variables\n', '    ***************************************************************************/\n', '    mapping (uint16 => Pixel) private pixels;\n', '\n', '\n', '\n', '    /**************************************************************************\n', '    * public constants\n', '    ***************************************************************************/\n', '    uint16 public constant numberOfPixels = 10000;\n', '    uint16 public constant width = 100;\n', '    uint256 public constant feeRate = 100;\n', '\n', '\n', '\n', '    /**************************************************************************\n', '    * private constants\n', '    ***************************************************************************/\n', '    address private constant owner = 0xF1fA618D4661A8E20f665BE3BD46CAad828B5837;\n', '    address private constant fundWallet = 0x4F6896AF8C26D1a3C464a4A03705FB78fA2aDB86;\n', '    uint256 private constant defaultWeiPrice = 10000000000000000;   // 0.01 eth\n', '\n', '\n', '\n', '    /**************************************************************************\n', '    * modifiers\n', '    ***************************************************************************/\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyPixelOwner(uint16 pixelNumber) {\n', '        require(msg.sender == pixels[pixelNumber].owner);\n', '        _;\n', '    }\n', '\n', '    modifier messageEnabled {\n', '        require(isMessageEnabled == true);\n', '        _;\n', '    }\n', '\n', '\n', '\n', '    /**************************************************************************\n', '    * public methods\n', '    ***************************************************************************/\n', '\n', '    // constructor\n', '    function Pixereum() public {\n', '        isMessageEnabled = true;\n', '    }\n', '\n', '\n', '\n', '    /**************************************************************************\n', '    * public methods\n', '    ***************************************************************************/\n', '\n', '    function getPixel(uint16 _pixelNumber)\n', '        constant\n', '        public\n', '        returns(address, string, uint256, bool) \n', '    {\n', '        Pixel memory pixel;\n', '        if (pixels[_pixelNumber].owner == 0) {\n', '            pixel = Pixel(fundWallet, "", defaultWeiPrice, true); \n', '        } else {\n', '            pixel = pixels[_pixelNumber];\n', '        }\n', '        return (pixel.owner, pixel.message, pixel.price, pixel.isSale);\n', '    }\n', '    \n', '    \n', '    function getColors() constant public returns(uint24[10000])  {\n', '        return colors;\n', '    }\n', '\n', '\n', '    // called when ether is sent to this contract\n', '    function ()\n', '        payable\n', '        public \n', '    {\n', '        // check if data format is valid\n', '        // bytes[0]=x, bytes[1]=y, bytes[2-4]=color\n', '        require(msg.data.length == 5);\n', '\n', '        uint16 pixelNumber = getPixelNumber(msg.data[0], msg.data[1]);\n', '        uint24 color = getColor(msg.data[2], msg.data[3], msg.data[4]);\n', '        buyPixel(msg.sender, pixelNumber, color, "");\n', '    }\n', '\n', '\n', '    function buyPixel(address beneficiary, uint16 _pixelNumber, uint24 _color, string _message)\n', '        payable\n', '        public \n', '    {\n', '        require(_pixelNumber < numberOfPixels);\n', '        require(beneficiary != address(0));\n', '        require(msg.value != 0);\n', '        \n', '        // get current pixel info\n', '        address currentOwner;\n', '        uint256 currentPrice;\n', '        bool currentSaleState;\n', '        (currentOwner, , currentPrice, currentSaleState) = getPixel(_pixelNumber);\n', '        \n', '        // check if a pixel is for sale\n', '        require(currentSaleState == true);\n', '\n', '        // check if a received Ether is higher than current price\n', '        require(currentPrice <= msg.value);\n', '\n', '        // calculate fee\n', '        uint fee = msg.value / feeRate;\n', '\n', '        // transfer received amount to current owner\n', '        currentOwner.transfer(msg.value - fee);\n', '\n', '        // transfer fee to fundWallet\n', '        fundWallet.transfer(fee);\n', '\n', '        // update pixel\n', '        pixels[_pixelNumber] = Pixel(beneficiary, _message, currentPrice, false);\n', '        \n', '        // update color\n', '        colors[_pixelNumber] = _color;\n', '    }\n', '\n', '\n', '    function setOwner(uint16 _pixelNumber, address _owner) \n', '        public\n', '        onlyPixelOwner(_pixelNumber)\n', '    {\n', '        require(_owner != address(0));\n', '        pixels[_pixelNumber].owner = _owner;\n', '    }\n', '\n', '\n', '    function setColor(uint16 _pixelNumber, uint24 _color) \n', '        public\n', '        onlyPixelOwner(_pixelNumber)\n', '    {\n', '        colors[_pixelNumber] = _color;\n', '    }\n', '\n', '\n', '    function setMessage(uint16 _pixelNumber, string _message)\n', '        public\n', '        messageEnabled\n', '        onlyPixelOwner(_pixelNumber)\n', '    {\n', '        pixels[_pixelNumber].message = _message;\n', '    }\n', '\n', '\n', '    function setPrice(uint16 _pixelNumber, uint256 _weiAmount) \n', '        public\n', '        onlyPixelOwner(_pixelNumber)\n', '    {\n', '        pixels[_pixelNumber].price = _weiAmount;\n', '    }\n', '\n', '\n', '    function setSaleState(uint16 _pixelNumber, bool _isSale)\n', '        public\n', '        onlyPixelOwner(_pixelNumber)\n', '    {\n', '        pixels[_pixelNumber].isSale = _isSale;\n', '    }\n', '\n', '\n', '\n', '    /**************************************************************************\n', '    * internal methods\n', '    ***************************************************************************/\n', '\n', '    function getPixelNumber(byte _x, byte _y)\n', '        internal pure\n', '        returns(uint16) \n', '    {\n', '        return uint16(_x) + uint16(_y) * width;\n', '    }\n', '\n', '\n', '    function getColor(byte _red, byte _green, byte _blue)\n', '        internal pure\n', '        returns(uint24) \n', '    {\n', '        return uint24(_red)*65536 + uint24(_green)*256 + uint24(_blue);\n', '    }\n', '\n', '\n', '\n', '    /**************************************************************************\n', '    * methods for contract owner\n', '    ***************************************************************************/\n', '\n', '    // for emergency purpose\n', '    function deleteMessage(uint16 _pixelNumber)\n', '        onlyOwner\n', '        public\n', '    {\n', '        pixels[_pixelNumber].message = "";\n', '    }\n', '\n', '\n', '    // for emergency purpose\n', '    function setMessageStatus(bool _isMesssageEnabled)\n', '        onlyOwner\n', '        public\n', '    {\n', '        isMessageEnabled = _isMesssageEnabled;\n', '    }\n', '\n', '}']