['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'pragma solidity 0.4.24;\n', '\n', 'contract Transfer {\n', '\n', '    address constant public ETH = 0x0;\n', '\n', '    /**\n', '    * @dev Transfer tokens from this contract to an account.\n', '    * @param token Address of token to transfer. 0x0 for ETH\n', '    * @param to Address to send tokens to.\n', '    * @param amount Amount of token to send.\n', '    */\n', '    function transfer(address token, address to, uint256 amount) internal returns (bool) {\n', '        if (token == ETH) {\n', '            to.transfer(amount);\n', '        } else {\n', '            require(ERC20(token).transfer(to, amount));\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from an account to this contract.\n', '    * @param token Address of token to transfer. 0x0 for ETH\n', '    * @param from Address to send tokens from.\n', '    * @param to Address to send tokens to.\n', '    * @param amount Amount of token to send.\n', '    */\n', '    function transferFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) \n', '        internal\n', '        returns (bool)\n', '    {\n', '        require(token == ETH && msg.value == amount || msg.value == 0);\n', '\n', '        if (token != ETH) {\n', '            // Remember to approve first\n', '            require(ERC20(token).transferFrom(from, to, amount));\n', '        }\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', 'interface IERC20 {\n', '    function balanceOf(address _owner) public view returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '}\n', '\n', '\n', 'contract Withdrawable is Ownable {\n', '    function () public payable {}\n', '\n', '    // Allow the owner to withdraw Ether\n', '    function withdraw() public onlyOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '    \n', '    // Allow the owner to withdraw tokens\n', '    function withdrawToken(address token) public onlyOwner returns (bool) {\n', '        IERC20 foreignToken = IERC20(token);\n', '        uint256 amount = foreignToken.balanceOf(address(this));\n', '        return foreignToken.transfer(owner, amount);\n', '    }\n', '}\n', '\n', 'pragma solidity 0.4.24;\n', '\n', 'contract ExternalCall {\n', '    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol\n', '    // call has been separated into its own function in order to take advantage\n', '    // of the Solidity&#39;s code generator to produce a loop that copies tx.data into memory.\n', '    function external_call(address destination, uint value, uint dataLength, bytes data) internal returns (bool) {\n', '        bool result;\n', '        assembly {\n', '            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)\n', '            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\n', '            result := call(\n', '                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting\n', '                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n', '                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n', '                destination,\n', '                value,\n', '                d,\n', '                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\n', '                x,\n', '                0                  // Output is ignored, therefore the output size is zero\n', '            )\n', '        }\n', '        return result;\n', '    }\n', '}\n', '\n', '/*\n', '\n', '  Copyright 2018 Contra Labs Inc.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '// @title TradeExecutor: Atomically execute two trades using decentralized exchange wrapper contracts.\n', '// @author Rich McAteer <rich@marble.org>, Max Wolff <max@marble.org>\n', 'contract TradeExecutor is Transfer, Withdrawable, ExternalCall {\n', '\n', '    // Allow exchange wrappers to send Ether\n', '    function () public payable {}\n', '\n', '    /**\n', '     * @dev Execute multiple trades in a single transaction.\n', '     * @param wrappers Addresses of exchange wrappers.\n', '     * @param token Address of ERC20 token to receive in first trade.\n', '     * @param trade1 Calldata of Ether => ERC20 trade.\n', '     * @param trade2 Calldata of ERC20 => Ether trade.\n', '    */\n', '    function trade(\n', '        address[2] wrappers,\n', '        address token,\n', '        bytes trade1,\n', '        bytes trade2\n', '    )\n', '        external\n', '        payable\n', '    {\n', '        // Execute the first trade to get tokens\n', '        require(execute(wrappers[0], msg.value, trade1));\n', '\n', '        uint256 tokenBalance = IERC20(token).balanceOf(this);\n', '\n', '        // Transfer tokens to the next exchange wrapper\n', '        transfer(token, wrappers[1], tokenBalance);\n', '\n', '        // Execute the second trade to get Ether\n', '        require(execute(wrappers[1], 0, trade2));\n', '        \n', '        // Send the arbitrageur Ether\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '\n', '    function tradeForTokens(\n', '        address[2] wrappers,\n', '        address token,\n', '        bytes trade1,\n', '        bytes trade2\n', '    )\n', '        external\n', '    {\n', '        // Transfer tokens to the first exchange wrapper\n', '        uint256 tokenBalance = IERC20(token).balanceOf(this);\n', '        transfer(token, wrappers[0], tokenBalance);\n', '\n', '        // Execute the first trade to get Ether\n', '        require(execute(wrappers[0], 0, trade1));\n', '\n', '        uint256 balance = address(this).balance;\n', '\n', '        // Execute the second trade to get tokens\n', '        require(execute(wrappers[1], balance, trade2));\n', '\n', '        tokenBalance = IERC20(token).balanceOf(this);\n', '        require(IERC20(token).transfer(msg.sender, tokenBalance));\n', '    }\n', '\n', '    function execute(address wrapper, uint256 value, bytes data) private returns (bool) {\n', '        return external_call(wrapper, value, data.length, data);\n', '    }\n', '\n', '}']
['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'pragma solidity 0.4.24;\n', '\n', 'contract Transfer {\n', '\n', '    address constant public ETH = 0x0;\n', '\n', '    /**\n', '    * @dev Transfer tokens from this contract to an account.\n', '    * @param token Address of token to transfer. 0x0 for ETH\n', '    * @param to Address to send tokens to.\n', '    * @param amount Amount of token to send.\n', '    */\n', '    function transfer(address token, address to, uint256 amount) internal returns (bool) {\n', '        if (token == ETH) {\n', '            to.transfer(amount);\n', '        } else {\n', '            require(ERC20(token).transfer(to, amount));\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from an account to this contract.\n', '    * @param token Address of token to transfer. 0x0 for ETH\n', '    * @param from Address to send tokens from.\n', '    * @param to Address to send tokens to.\n', '    * @param amount Amount of token to send.\n', '    */\n', '    function transferFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) \n', '        internal\n', '        returns (bool)\n', '    {\n', '        require(token == ETH && msg.value == amount || msg.value == 0);\n', '\n', '        if (token != ETH) {\n', '            // Remember to approve first\n', '            require(ERC20(token).transferFrom(from, to, amount));\n', '        }\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', 'interface IERC20 {\n', '    function balanceOf(address _owner) public view returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '}\n', '\n', '\n', 'contract Withdrawable is Ownable {\n', '    function () public payable {}\n', '\n', '    // Allow the owner to withdraw Ether\n', '    function withdraw() public onlyOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '    \n', '    // Allow the owner to withdraw tokens\n', '    function withdrawToken(address token) public onlyOwner returns (bool) {\n', '        IERC20 foreignToken = IERC20(token);\n', '        uint256 amount = foreignToken.balanceOf(address(this));\n', '        return foreignToken.transfer(owner, amount);\n', '    }\n', '}\n', '\n', 'pragma solidity 0.4.24;\n', '\n', 'contract ExternalCall {\n', '    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol\n', '    // call has been separated into its own function in order to take advantage\n', "    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\n", '    function external_call(address destination, uint value, uint dataLength, bytes data) internal returns (bool) {\n', '        bool result;\n', '        assembly {\n', '            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)\n', '            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\n', '            result := call(\n', '                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting\n', '                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n', '                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n', '                destination,\n', '                value,\n', '                d,\n', '                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\n', '                x,\n', '                0                  // Output is ignored, therefore the output size is zero\n', '            )\n', '        }\n', '        return result;\n', '    }\n', '}\n', '\n', '/*\n', '\n', '  Copyright 2018 Contra Labs Inc.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '// @title TradeExecutor: Atomically execute two trades using decentralized exchange wrapper contracts.\n', '// @author Rich McAteer <rich@marble.org>, Max Wolff <max@marble.org>\n', 'contract TradeExecutor is Transfer, Withdrawable, ExternalCall {\n', '\n', '    // Allow exchange wrappers to send Ether\n', '    function () public payable {}\n', '\n', '    /**\n', '     * @dev Execute multiple trades in a single transaction.\n', '     * @param wrappers Addresses of exchange wrappers.\n', '     * @param token Address of ERC20 token to receive in first trade.\n', '     * @param trade1 Calldata of Ether => ERC20 trade.\n', '     * @param trade2 Calldata of ERC20 => Ether trade.\n', '    */\n', '    function trade(\n', '        address[2] wrappers,\n', '        address token,\n', '        bytes trade1,\n', '        bytes trade2\n', '    )\n', '        external\n', '        payable\n', '    {\n', '        // Execute the first trade to get tokens\n', '        require(execute(wrappers[0], msg.value, trade1));\n', '\n', '        uint256 tokenBalance = IERC20(token).balanceOf(this);\n', '\n', '        // Transfer tokens to the next exchange wrapper\n', '        transfer(token, wrappers[1], tokenBalance);\n', '\n', '        // Execute the second trade to get Ether\n', '        require(execute(wrappers[1], 0, trade2));\n', '        \n', '        // Send the arbitrageur Ether\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '\n', '    function tradeForTokens(\n', '        address[2] wrappers,\n', '        address token,\n', '        bytes trade1,\n', '        bytes trade2\n', '    )\n', '        external\n', '    {\n', '        // Transfer tokens to the first exchange wrapper\n', '        uint256 tokenBalance = IERC20(token).balanceOf(this);\n', '        transfer(token, wrappers[0], tokenBalance);\n', '\n', '        // Execute the first trade to get Ether\n', '        require(execute(wrappers[0], 0, trade1));\n', '\n', '        uint256 balance = address(this).balance;\n', '\n', '        // Execute the second trade to get tokens\n', '        require(execute(wrappers[1], balance, trade2));\n', '\n', '        tokenBalance = IERC20(token).balanceOf(this);\n', '        require(IERC20(token).transfer(msg.sender, tokenBalance));\n', '    }\n', '\n', '    function execute(address wrapper, uint256 value, bytes data) private returns (bool) {\n', '        return external_call(wrapper, value, data.length, data);\n', '    }\n', '\n', '}']
