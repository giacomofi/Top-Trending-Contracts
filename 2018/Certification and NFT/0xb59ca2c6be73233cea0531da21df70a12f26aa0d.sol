['pragma solidity ^0.4.25;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Abstract contract where privileged minting managed by governance\n', ' */\n', 'contract MintableTokenStub {\n', '  address public minter;\n', '\n', '  event Mint(address indexed to, uint256 amount);\n', '\n', '  /**\n', '   * Constructor function\n', '   */\n', '  constructor (\n', '    address _minter\n', '  ) public {\n', '    minter = _minter;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the minter.\n', '   */\n', '  modifier onlyMinter() {\n', '    require(msg.sender == minter);\n', '    _;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount)\n', '  public\n', '  onlyMinter\n', '  returns (bool)\n', '  {\n', '    emit Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Congress contract\n', ' * @dev The Congress contract allows to execute certain actions (token minting in this case) via majority of votes.\n', ' * In contrast to traditional Ownable pattern, Congress protects the managed contract (token) against unfair behaviour\n', ' * of minority (for example, a single founder having one of the project keys has no power to mint the token until\n', ' * other(s) vote for the operation). Majority formula is voters/2+1. The voters list is formed dynamically through the\n', ' * voting. Voters can be added if current majority trusts new party. The party can be removed from the voters if it has\n', ' * been compromised (majority executes untrust operation on it to do this).\n', ' */\n', 'contract Congress {\n', '  using SafeMath for uint256;\n', '  // the number of active voters\n', '  uint public voters;\n', '\n', '  // given address is the voter or not\n', '  mapping(address => bool) public voter;\n', '\n', '  // Each proposal is stored in mapping by its hash (hash of mint arguments)\n', '  mapping(bytes32 => MintProposal) public mintProposal;\n', '\n', "  // Defines the level of other voters' trust for given address. If majority of current voters\n", '  // trusts the new member - it becomes the voter\n', '  mapping(address => TrustRecord) public trustRegistry;\n', '\n', "  // The governed token under Congress's control. Congress has the minter privileges on it.\n", '  MintableTokenStub public token;\n', '\n', '  // Event on initial token configuration\n', '  event TokenSet(address voter, address token);\n', '\n', '  // Proposal lifecycle events\n', '  event MintProposalAdded(\n', '    bytes32 proposalHash,\n', '    address to,\n', '    uint amount,\n', '    string batchCode\n', '  );\n', '\n', '  event MintProposalVoted(\n', '    bytes32 proposalHash,\n', '    address voter,\n', '    uint numberOfVotes\n', '  );\n', '\n', '  event MintProposalExecuted(\n', '    bytes32 proposalHash,\n', '    address to,\n', '    uint amount,\n', '    string batchCode\n', '  );\n', '\n', '  // Events emitted on trust claims\n', '  event TrustSet(address issuer, address subject);\n', '  event TrustUnset(address issuer, address subject);\n', '\n', '  // Events on adding-deleting voters\n', '  event VoteGranted(address voter);\n', '  event VoteRevoked(address voter);\n', '\n', '  // Stores the state of the proposal: executed or not (able to execute only once), number of Votes and\n', '  // the mapping of voters and their boolean vote. true if voted.\n', '  struct MintProposal {\n', '    bool executed;\n', '    uint numberOfVotes;\n', '    mapping(address => bool) voted;\n', '  }\n', '\n', '  // Stores the trust counter and the addresses who trusted the given voter(candidate)\n', '  struct TrustRecord {\n', '    uint256 totalTrust;\n', '    mapping(address => bool) trustedBy;\n', '  }\n', '\n', '\n', '  // Modifier that allows only Voters to vote\n', '  modifier onlyVoters {\n', '    require(voter[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Constructor function\n', '   */\n', '  constructor () public {\n', '    voter[msg.sender] = true;\n', '    voters = 1;\n', '  }\n', '\n', '  /**\n', '   * @dev Determine does the given number of votes make majority of voters.\n', '   * @return true if given number is majority\n', '   */\n', '  function isMajority(uint256 votes) public view returns (bool) {\n', '    return (votes >= voters.div(2).add(1));\n', '  }\n', '\n', '  /**\n', '   * @dev Determine how many voters trust given address\n', '   * @param subject The address of trustee\n', '   * @return the number of trusted votes\n', '   */\n', '  function getTotalTrust(address subject) public view returns (uint256) {\n', '    return (trustRegistry[subject].totalTrust);\n', '  }\n', '\n', '  /**\n', '   * @dev Set the trust claim (msg.sender trusts subject)\n', '   * @param _subject The trusted address\n', '   */\n', '  function trust(address _subject) public onlyVoters {\n', '    require(msg.sender != _subject);\n', '    require(token != MintableTokenStub(0));\n', '    if (!trustRegistry[_subject].trustedBy[msg.sender]) {\n', '      trustRegistry[_subject].trustedBy[msg.sender] = true;\n', '      trustRegistry[_subject].totalTrust = trustRegistry[_subject].totalTrust.add(1);\n', '      emit TrustSet(msg.sender, _subject);\n', '      if (!voter[_subject] && isMajority(trustRegistry[_subject].totalTrust)) {\n', '        voter[_subject] = true;\n', '        voters = voters.add(1);\n', '        emit VoteGranted(_subject);\n', '      }\n', '      return;\n', '    }\n', '    revert();\n', '  }\n', '\n', '  /**\n', '   * @dev Unset the trust claim (msg.sender now reclaims trust from subject)\n', '   * @param _subject The address of trustee to revoke trust\n', '   */\n', '  function untrust(address _subject) public onlyVoters {\n', '    require(token != MintableTokenStub(0));\n', '    if (trustRegistry[_subject].trustedBy[msg.sender]) {\n', '      trustRegistry[_subject].trustedBy[msg.sender] = false;\n', '      trustRegistry[_subject].totalTrust = trustRegistry[_subject].totalTrust.sub(1);\n', '      emit TrustUnset(msg.sender, _subject);\n', '      if (voter[_subject] && !isMajority(trustRegistry[_subject].totalTrust)) {\n', '        voter[_subject] = false;\n', '        // ToDo SafeMath\n', '        voters = voters.sub(1);\n', '        emit VoteRevoked(_subject);\n', '      }\n', '      return;\n', '    }\n', '    revert();\n', '  }\n', '\n', '  /**\n', '   * @dev Token and its governance should be locked to each other. Congress should be set as minter in token\n', '   * @param _token The address of governed token\n', '   */\n', '  function setToken(\n', '    MintableTokenStub _token\n', '  )\n', '  public\n', '  onlyVoters\n', '  {\n', '    require(_token != MintableTokenStub(0));\n', '    require(token == MintableTokenStub(0));\n', '    token = _token;\n', '    emit TokenSet(msg.sender, token);\n', '  }\n', '\n', '  /**\n', '  * @dev Proxy function to vote and mint tokens\n', '  * @param to The address that will receive the minted tokens.\n', '  * @param amount The amount of tokens to mint.\n', '  * @param batchCode The detailed information on a batch.\n', '  * @return A boolean that indicates if the operation was successful.\n', '  */\n', '  function mint(\n', '    address to,\n', '    uint256 amount,\n', '    string batchCode\n', '  )\n', '  public\n', '  onlyVoters\n', '  returns (bool)\n', '  {\n', '    bytes32 proposalHash = keccak256(abi.encodePacked(to, amount, batchCode));\n', '    assert(!mintProposal[proposalHash].executed);\n', '    if (!mintProposal[proposalHash].voted[msg.sender]) {\n', '      if (mintProposal[proposalHash].numberOfVotes == 0) {\n', '        emit MintProposalAdded(proposalHash, to, amount, batchCode);\n', '      }\n', '      mintProposal[proposalHash].numberOfVotes = mintProposal[proposalHash].numberOfVotes.add(1);\n', '      mintProposal[proposalHash].voted[msg.sender] = true;\n', '      emit MintProposalVoted(proposalHash, msg.sender, mintProposal[proposalHash].numberOfVotes);\n', '    }\n', '    if (isMajority(mintProposal[proposalHash].numberOfVotes)) {\n', '      mintProposal[proposalHash].executed = true;\n', '      token.mint(to, amount);\n', '      emit MintProposalExecuted(proposalHash, to, amount, batchCode);\n', '    }\n', '    return (true);\n', '  }\n', '}']