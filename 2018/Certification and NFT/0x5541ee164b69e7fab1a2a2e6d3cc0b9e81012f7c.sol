['pragma solidity 0.4.15;\n', '\n', 'contract Ambi2 {\n', '    function claimFor(address _address, address _owner) returns(bool);\n', '    function hasRole(address _from, bytes32 _role, address _to) constant returns(bool);\n', '    function isOwner(address _node, address _owner) constant returns(bool);\n', '}\n', '\n', 'contract Ambi2Enabled {\n', '    Ambi2 ambi2;\n', '\n', '    modifier onlyRole(bytes32 _role) {\n', '        if (address(ambi2) != 0x0 && ambi2.hasRole(this, _role, msg.sender)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    // Perform only after claiming the node, or claim in the same tx.\n', '    function setupAmbi2(Ambi2 _ambi2) returns(bool) {\n', '        if (address(ambi2) != 0x0) {\n', '            return false;\n', '        }\n', '\n', '        ambi2 = _ambi2;\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract Ambi2EnabledFull is Ambi2Enabled {\n', '    // Setup and claim atomically.\n', '    function setupAmbi2(Ambi2 _ambi2) returns(bool) {\n', '        if (address(ambi2) != 0x0) {\n', '            return false;\n', '        }\n', '        if (!_ambi2.claimFor(this, msg.sender) && !_ambi2.isOwner(this, msg.sender)) {\n', '            return false;\n', '        }\n', '\n', '        ambi2 = _ambi2;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract AssetProxyInterface {\n', '    function transferFromWithReference(address _from, address _to, uint _value, string _reference) returns(bool);\n', '}\n', '\n', 'contract DeviceActivationInterface {\n', '    function isActivated(address _device) public constant returns (bool);\n', '}\n', '\n', 'contract DeviceReputationInterface {\n', '    function getReputationProblems(address _device, string _description) public constant returns(bool);\n', '}\n', '\n', 'contract Statuses is Ambi2EnabledFull {\n', '\n', '    DeviceActivationInterface public activation;\n', '    DeviceReputationInterface public reputation;\n', '\n', '    function _isValidStatus(address _sender, string _reference) internal returns(bool) {\n', '        if (!activation.isActivated(_sender)) {\n', '            return false;\n', '        }\n', '        if (reputation.getReputationProblems(_sender, _reference)) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '\n', "    function setActivation(DeviceActivationInterface _activation) onlyRole('admin') returns(bool) {\n", '        activation = DeviceActivationInterface(_activation);\n', '        return true;\n', '    }\n', '\n', "    function setReputation(DeviceReputationInterface _reputation) onlyRole('admin') returns(bool) {\n", '        reputation = DeviceReputationInterface(_reputation);\n', '        return true;\n', '    }\n', '\n', '    function checkStatus(address _to, uint _value, string _reference, address _sender) returns(bool) {\n', '        return _isValidStatus(_sender, _reference);\n', '    }\n', '\n', '    function checkStatusICAP(bytes32 _icap, uint _value, string _reference, address _sender) returns(bool) {\n', '        return _isValidStatus(_sender, _reference);\n', '    }\n', '}']