['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Utility contract to allow pausing and unpausing of certain functions\n', ' */\n', 'contract Pausable {\n', '\n', '    event Pause(uint256 _timestammp);\n', '    event Unpause(uint256 _timestamp);\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '    * @notice Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused, "Contract is paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused, "Contract is not paused");\n', '        _;\n', '    }\n', '\n', '   /**\n', '    * @notice Called by the owner to pause, triggers stopped state\n', '    */\n', '    function _pause() internal whenNotPaused {\n', '        paused = true;\n', '        /*solium-disable-next-line security/no-block-members*/\n', '        emit Pause(now);\n', '    }\n', '\n', '    /**\n', '    * @notice Called by the owner to unpause, returns to normal state\n', '    */\n', '    function _unpause() internal whenPaused {\n', '        paused = false;\n', '        /*solium-disable-next-line security/no-block-members*/\n', '        emit Unpause(now);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Interface that every module contract should implement\n', ' */\n', 'interface IModule {\n', '\n', '    /**\n', '     * @notice This function returns the signature of configure function\n', '     */\n', '    function getInitFunction() external pure returns (bytes4);\n', '\n', '    /**\n', '     * @notice Return the permission flags that are associated with a module\n', '     */\n', '    function getPermissions() external view returns(bytes32[]);\n', '\n', '    /**\n', '     * @notice Used to withdraw the fee by the factory owner\n', '     */\n', '    function takeFee(uint256 _amount) external returns(bool);\n', '\n', '}\n', '\n', '/**\n', ' * @title Interface for all security tokens\n', ' */\n', 'interface ISecurityToken {\n', '\n', '    // Standard ERC20 interface\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '    function allowance(address _owner, address _spender) external view returns (uint256);\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '    function approve(address _spender, uint256 _value) external returns (bool);\n', '    function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool);\n', '    function increaseApproval(address _spender, uint _addedValue) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    //transfer, transferFrom must respect the result of verifyTransfer\n', '    function verifyTransfer(address _from, address _to, uint256 _value) external returns (bool success);\n', '\n', '    /**\n', '     * @notice Mints new tokens and assigns them to the target _investor.\n', "     * Can only be called by the STO attached to the token (Or by the ST owner if there's no STO attached yet)\n", '     * @param _investor Address the tokens will be minted to\n', '     * @param _value is the amount of tokens that will be minted to the investor\n', '     */\n', '    function mint(address _investor, uint256 _value) external returns (bool success);\n', '\n', '    /**\n', '     * @notice Mints new tokens and assigns them to the target _investor.\n', "     * Can only be called by the STO attached to the token (Or by the ST owner if there's no STO attached yet)\n", '     * @param _investor Address the tokens will be minted to\n', '     * @param _value is The amount of tokens that will be minted to the investor\n', '     * @param _data Data to indicate validation\n', '     */\n', '    function mintWithData(address _investor, uint256 _value, bytes _data) external returns (bool success);\n', '\n', '    /**\n', '     * @notice Used to burn the securityToken on behalf of someone else\n', '     * @param _from Address for whom to burn tokens\n', '     * @param _value No. of tokens to be burned\n', '     * @param _data Data to indicate validation\n', '     */\n', '    function burnFromWithData(address _from, uint256 _value, bytes _data) external;\n', '\n', '    /**\n', '     * @notice Used to burn the securityToken\n', '     * @param _value No. of tokens to be burned\n', '     * @param _data Data to indicate validation\n', '     */\n', '    function burnWithData(uint256 _value, bytes _data) external;\n', '\n', '    event Minted(address indexed _to, uint256 _value);\n', '    event Burnt(address indexed _burner, uint256 _value);\n', '\n', '    // Permissions this to a Permission module, which has a key of 1\n', '    // If no Permission return false - note that IModule withPerm will allow ST owner all permissions anyway\n', '    // this allows individual modules to override this logic if needed (to not allow ST owner all permissions)\n', '    function checkPermission(address _delegate, address _module, bytes32 _perm) external view returns (bool);\n', '\n', '    /**\n', '     * @notice Returns module list for a module type\n', '     * @param _module Address of the module\n', '     * @return bytes32 Name\n', '     * @return address Module address\n', '     * @return address Module factory address\n', '     * @return bool Module archived\n', '     * @return uint8 Module type\n', '     * @return uint256 Module index\n', '     * @return uint256 Name index\n', '\n', '     */\n', '    function getModule(address _module) external view returns(bytes32, address, address, bool, uint8, uint256, uint256);\n', '\n', '    /**\n', '     * @notice Returns module list for a module name\n', '     * @param _name Name of the module\n', '     * @return address[] List of modules with this name\n', '     */\n', '    function getModulesByName(bytes32 _name) external view returns (address[]);\n', '\n', '    /**\n', '     * @notice Returns module list for a module type\n', '     * @param _type Type of the module\n', '     * @return address[] List of modules with this type\n', '     */\n', '    function getModulesByType(uint8 _type) external view returns (address[]);\n', '\n', '    /**\n', '     * @notice Queries totalSupply at a specified checkpoint\n', '     * @param _checkpointId Checkpoint ID to query as of\n', '     */\n', '    function totalSupplyAt(uint256 _checkpointId) external view returns (uint256);\n', '\n', '    /**\n', '     * @notice Queries balance at a specified checkpoint\n', '     * @param _investor Investor to query balance for\n', '     * @param _checkpointId Checkpoint ID to query as of\n', '     */\n', '    function balanceOfAt(address _investor, uint256 _checkpointId) external view returns (uint256);\n', '\n', '    /**\n', '     * @notice Creates a checkpoint that can be used to query historical balances / totalSuppy\n', '     */\n', '    function createCheckpoint() external returns (uint256);\n', '\n', '    /**\n', '     * @notice Gets length of investors array\n', '     * NB - this length may differ from investorCount if the list has not been pruned of zero-balance investors\n', '     * @return Length\n', '     */\n', '    function getInvestors() external view returns (address[]);\n', '\n', '    /**\n', '     * @notice returns an array of investors at a given checkpoint\n', '     * NB - this length may differ from investorCount as it contains all investors that ever held tokens\n', '     * @param _checkpointId Checkpoint id at which investor list is to be populated\n', '     * @return list of investors\n', '     */\n', '    function getInvestorsAt(uint256 _checkpointId) external view returns(address[]);\n', '\n', '    /**\n', '     * @notice generates subset of investors\n', '     * NB - can be used in batches if investor list is large\n', '     * @param _start Position of investor to start iteration from\n', '     * @param _end Position of investor to stop iteration at\n', '     * @return list of investors\n', '     */\n', '    function iterateInvestors(uint256 _start, uint256 _end) external view returns(address[]);\n', '    \n', '    /**\n', '     * @notice Gets current checkpoint ID\n', '     * @return Id\n', '     */\n', '    function currentCheckpointId() external view returns (uint256);\n', '\n', '    /**\n', '    * @notice Gets an investor at a particular index\n', '    * @param _index Index to return address from\n', '    * @return Investor address\n', '    */\n', '    function investors(uint256 _index) external view returns (address);\n', '\n', '   /**\n', '    * @notice Allows the owner to withdraw unspent POLY stored by them on the ST or any ERC20 token.\n', '    * @dev Owner can transfer POLY to the ST which will be used to pay for modules that require a POLY fee.\n', '    * @param _tokenContract Address of the ERC20Basic compliance token\n', '    * @param _value Amount of POLY to withdraw\n', '    */\n', '    function withdrawERC20(address _tokenContract, uint256 _value) external;\n', '\n', '    /**\n', '    * @notice Allows owner to approve more POLY to one of the modules\n', '    * @param _module Module address\n', '    * @param _budget New budget\n', '    */\n', '    function changeModuleBudget(address _module, uint256 _budget) external;\n', '\n', '    /**\n', '     * @notice Changes the tokenDetails\n', '     * @param _newTokenDetails New token details\n', '     */\n', '    function updateTokenDetails(string _newTokenDetails) external;\n', '\n', '    /**\n', '    * @notice Allows the owner to change token granularity\n', '    * @param _granularity Granularity level of the token\n', '    */\n', '    function changeGranularity(uint256 _granularity) external;\n', '\n', '    /**\n', '    * @notice Removes addresses with zero balances from the investors list\n', '    * @param _start Index in investors list at which to start removing zero balances\n', '    * @param _iters Max number of iterations of the for loop\n', '    * NB - pruning this list will mean you may not be able to iterate over investors on-chain as of a historical checkpoint\n', '    */\n', '    function pruneInvestors(uint256 _start, uint256 _iters) external;\n', '\n', '    /**\n', '     * @notice Freezes all the transfers\n', '     */\n', '    function freezeTransfers() external;\n', '\n', '    /**\n', '     * @notice Un-freezes all the transfers\n', '     */\n', '    function unfreezeTransfers() external;\n', '\n', '    /**\n', '     * @notice Ends token minting period permanently\n', '     */\n', '    function freezeMinting() external;\n', '\n', '    /**\n', '     * @notice Mints new tokens and assigns them to the target investors.\n', '     * Can only be called by the STO attached to the token or by the Issuer (Security Token contract owner)\n', '     * @param _investors A list of addresses to whom the minted tokens will be delivered\n', '     * @param _values A list of the amount of tokens to mint to corresponding addresses from _investor[] list\n', '     * @return Success\n', '     */\n', '    function mintMulti(address[] _investors, uint256[] _values) external returns (bool success);\n', '\n', '    /**\n', '     * @notice Function used to attach a module to the security token\n', '     * @dev  E.G.: On deployment (through the STR) ST gets a TransferManager module attached to it\n', '     * @dev to control restrictions on transfers.\n', '     * @dev You are allowed to add a new moduleType if:\n', '     * @dev - there is no existing module of that type yet added\n', '     * @dev - the last member of the module list is replacable\n', '     * @param _moduleFactory is the address of the module factory to be added\n', '     * @param _data is data packed into bytes used to further configure the module (See STO usage)\n', '     * @param _maxCost max amount of POLY willing to pay to module. (WIP)\n', '     */\n', '    function addModule(\n', '        address _moduleFactory,\n', '        bytes _data,\n', '        uint256 _maxCost,\n', '        uint256 _budget\n', '    ) external;\n', '\n', '    /**\n', '    * @notice Archives a module attached to the SecurityToken\n', '    * @param _module address of module to archive\n', '    */\n', '    function archiveModule(address _module) external;\n', '\n', '    /**\n', '    * @notice Unarchives a module attached to the SecurityToken\n', '    * @param _module address of module to unarchive\n', '    */\n', '    function unarchiveModule(address _module) external;\n', '\n', '    /**\n', '    * @notice Removes a module attached to the SecurityToken\n', '    * @param _module address of module to archive\n', '    */\n', '    function removeModule(address _module) external;\n', '\n', '    /**\n', '     * @notice Used by the issuer to set the controller addresses\n', '     * @param _controller address of the controller\n', '     */\n', '    function setController(address _controller) external;\n', '\n', '    /**\n', '     * @notice Used by a controller to execute a forced transfer\n', '     * @param _from address from which to take tokens\n', '     * @param _to address where to send tokens\n', '     * @param _value amount of tokens to transfer\n', '     * @param _data data to indicate validation\n', '     * @param _log data attached to the transfer by controller to emit in event\n', '     */\n', '    function forceTransfer(address _from, address _to, uint256 _value, bytes _data, bytes _log) external;\n', '\n', '    /**\n', '     * @notice Used by a controller to execute a foced burn\n', '     * @param _from address from which to take tokens\n', '     * @param _value amount of tokens to transfer\n', '     * @param _data data to indicate validation\n', '     * @param _log data attached to the transfer by controller to emit in event\n', '     */\n', '    function forceBurn(address _from, uint256 _value, bytes _data, bytes _log) external;\n', '\n', '    /**\n', '     * @notice Used by the issuer to permanently disable controller functionality\n', '     * @dev enabled via feature switch "disableControllerAllowed"\n', '     */\n', '     function disableController() external;\n', '\n', '     /**\n', '     * @notice Used to get the version of the securityToken\n', '     */\n', '     function getVersion() external view returns(uint8[]);\n', '\n', '     /**\n', '     * @notice Gets the investor count\n', '     */\n', '     function getInvestorCount() external view returns(uint256);\n', '\n', '     /**\n', '      * @notice Overloaded version of the transfer function\n', '      * @param _to receiver of transfer\n', '      * @param _value value of transfer\n', '      * @param _data data to indicate validation\n', '      * @return bool success\n', '      */\n', '     function transferWithData(address _to, uint256 _value, bytes _data) external returns (bool success);\n', '\n', '     /**\n', '      * @notice Overloaded version of the transferFrom function\n', '      * @param _from sender of transfer\n', '      * @param _to receiver of transfer\n', '      * @param _value value of transfer\n', '      * @param _data data to indicate validation\n', '      * @return bool success\n', '      */\n', '     function transferFromWithData(address _from, address _to, uint256 _value, bytes _data) external returns(bool);\n', '\n', '     /**\n', '      * @notice Provides the granularity of the token\n', '      * @return uint256\n', '      */\n', '     function granularity() external view returns(uint256);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '    function allowance(address _owner, address _spender) external view returns (uint256);\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '    function approve(address _spender, uint256 _value) external returns (bool);\n', '    function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool);\n', '    function increaseApproval(address _spender, uint _addedValue) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Interface that any module contract should implement\n', ' * @notice Contract is abstract\n', ' */\n', 'contract Module is IModule {\n', '\n', '    address public factory;\n', '\n', '    address public securityToken;\n', '\n', '    bytes32 public constant FEE_ADMIN = "FEE_ADMIN";\n', '\n', '    IERC20 public polyToken;\n', '\n', '    /**\n', '     * @notice Constructor\n', '     * @param _securityToken Address of the security token\n', '     * @param _polyAddress Address of the polytoken\n', '     */\n', '    constructor (address _securityToken, address _polyAddress) public {\n', '        securityToken = _securityToken;\n', '        factory = msg.sender;\n', '        polyToken = IERC20(_polyAddress);\n', '    }\n', '\n', '    //Allows owner, factory or permissioned delegate\n', '    modifier withPerm(bytes32 _perm) {\n', '        bool isOwner = msg.sender == Ownable(securityToken).owner();\n', '        bool isFactory = msg.sender == factory;\n', '        require(isOwner||isFactory||ISecurityToken(securityToken).checkPermission(msg.sender, address(this), _perm), "Permission check failed");\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == Ownable(securityToken).owner(), "Sender is not owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyFactory {\n', '        require(msg.sender == factory, "Sender is not factory");\n', '        _;\n', '    }\n', '\n', '    modifier onlyFactoryOwner {\n', '        require(msg.sender == Ownable(factory).owner(), "Sender is not factory owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyFactoryOrOwner {\n', '        require((msg.sender == Ownable(securityToken).owner()) || (msg.sender == factory), "Sender is not factory or owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice used to withdraw the fee by the factory owner\n', '     */\n', '    function takeFee(uint256 _amount) public withPerm(FEE_ADMIN) returns(bool) {\n', '        require(polyToken.transferFrom(securityToken, Ownable(factory).owner(), _amount), "Unable to take fee");\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Interface to be implemented by all STO modules\n', ' */\n', 'contract ISTO is Module, Pausable  {\n', '    using SafeMath for uint256;\n', '\n', '    enum FundRaiseType { ETH, POLY, DAI }\n', '    mapping (uint8 => bool) public fundRaiseTypes;\n', '    mapping (uint8 => uint256) public fundsRaised;\n', '\n', '    // Start time of the STO\n', '    uint256 public startTime;\n', '    // End time of the STO\n', '    uint256 public endTime;\n', '    // Time STO was paused\n', '    uint256 public pausedTime;\n', '    // Number of individual investors\n', '    uint256 public investorCount;\n', '    // Address where ETH & POLY funds are delivered\n', '    address public wallet;\n', '     // Final amount of tokens sold\n', '    uint256 public totalTokensSold;\n', '\n', '    // Event\n', '    event SetFundRaiseTypes(FundRaiseType[] _fundRaiseTypes);\n', '\n', '    /**\n', '    * @notice Reclaims ERC20Basic compatible tokens\n', '    * @dev We duplicate here due to the overriden owner & onlyOwner\n', '    * @param _tokenContract The address of the token contract\n', '    */\n', '    function reclaimERC20(address _tokenContract) external onlyOwner {\n', '        require(_tokenContract != address(0), "Invalid address");\n', '        IERC20 token = IERC20(_tokenContract);\n', '        uint256 balance = token.balanceOf(address(this));\n', '        require(token.transfer(msg.sender, balance), "Transfer failed");\n', '    }\n', '\n', '    /**\n', '     * @notice Returns funds raised by the STO\n', '     */\n', '    function getRaised(FundRaiseType _fundRaiseType) public view returns (uint256) {\n', '        return fundsRaised[uint8(_fundRaiseType)];\n', '    }\n', '\n', '    /**\n', '     * @notice Returns the total no. of tokens sold\n', '     */\n', '    function getTokensSold() public view returns (uint256);\n', '\n', '    /**\n', '     * @notice Pause (overridden function)\n', '     */\n', '    function pause() public onlyOwner {\n', '        /*solium-disable-next-line security/no-block-members*/\n', '        require(now < endTime, "STO has been finalized");\n', '        super._pause();\n', '    }\n', '\n', '    /**\n', '     * @notice Unpause (overridden function)\n', '     */\n', '    function unpause() public onlyOwner {\n', '        super._unpause();\n', '    }\n', '\n', '    function _setFundRaiseType(FundRaiseType[] _fundRaiseTypes) internal {\n', '        // FundRaiseType[] parameter type ensures only valid values for _fundRaiseTypes\n', '        require(_fundRaiseTypes.length > 0, "Raise type is not specified");\n', '        fundRaiseTypes[uint8(FundRaiseType.ETH)] = false;\n', '        fundRaiseTypes[uint8(FundRaiseType.POLY)] = false;\n', '        fundRaiseTypes[uint8(FundRaiseType.DAI)] = false;\n', '        for (uint8 j = 0; j < _fundRaiseTypes.length; j++) {\n', '            fundRaiseTypes[uint8(_fundRaiseTypes[j])] = true;\n', '        }\n', '        emit SetFundRaiseTypes(_fundRaiseTypes);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Helps contracts guard agains reentrancy attacks.\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @notice If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private reentrancyLock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!reentrancyLock);\n', '    reentrancyLock = true;\n', '    _;\n', '    reentrancyLock = false;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title STO module for standard capped crowdsale\n', ' */\n', 'contract CappedSTO is ISTO, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    // Determine whether users can invest on behalf of a beneficiary\n', '    bool public allowBeneficialInvestments = false;\n', '    // How many token units a buyer gets per wei / base unit of POLY\n', '    uint256 public rate;\n', '    //How many tokens this STO will be allowed to sell to investors\n', '    uint256 public cap;\n', '\n', '    mapping (address => uint256) public investors;\n', '\n', '    /**\n', '    * Event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    event SetAllowBeneficialInvestments(bool _allowed);\n', '\n', '    constructor (address _securityToken, address _polyAddress) public\n', '    Module(_securityToken, _polyAddress)\n', '    {\n', '    }\n', '\n', '    //////////////////////////////////\n', '    /**\n', '    * @notice fallback function ***DO NOT OVERRIDE***\n', '    */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice Function used to intialize the contract variables\n', '     * @param _startTime Unix timestamp at which offering get started\n', '     * @param _endTime Unix timestamp at which offering get ended\n', '     * @param _cap Maximum No. of tokens for sale\n', '     * @param _rate Token units a buyer gets per wei / base unit of POLY\n', '     * @param _fundRaiseTypes Type of currency used to collect the funds\n', '     * @param _fundsReceiver Ethereum account address to hold the funds\n', '     */\n', '    function configure(\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _cap,\n', '        uint256 _rate,\n', '        FundRaiseType[] _fundRaiseTypes,\n', '        address _fundsReceiver\n', '    )\n', '    public\n', '    onlyFactory\n', '    {\n', '        require(_rate > 0, "Rate of token should be greater than 0");\n', '        require(_fundsReceiver != address(0), "Zero address is not permitted");\n', '        /*solium-disable-next-line security/no-block-members*/\n', '        require(_startTime >= now && _endTime > _startTime, "Date parameters are not valid");\n', '        require(_cap > 0, "Cap should be greater than 0");\n', '        require(_fundRaiseTypes.length == 1, "It only selects single fund raise type");\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        cap = _cap;\n', '        rate = _rate;\n', '        wallet = _fundsReceiver;\n', '        _setFundRaiseType(_fundRaiseTypes);\n', '    }\n', '\n', '    /**\n', '     * @notice This function returns the signature of configure function\n', '     */\n', '    function getInitFunction() public pure returns (bytes4) {\n', '        return bytes4(keccak256("configure(uint256,uint256,uint256,uint256,uint8[],address)"));\n', '    }\n', '\n', '    /**\n', '     * @notice Function to set allowBeneficialInvestments (allow beneficiary to be different to funder)\n', '     * @param _allowBeneficialInvestments Boolean to allow or disallow beneficial investments\n', '     */\n', '    function changeAllowBeneficialInvestments(bool _allowBeneficialInvestments) public onlyOwner {\n', '        require(_allowBeneficialInvestments != allowBeneficialInvestments, "Does not change value");\n', '        allowBeneficialInvestments = _allowBeneficialInvestments;\n', '        emit SetAllowBeneficialInvestments(allowBeneficialInvestments);\n', '    }\n', '\n', '    /**\n', '      * @notice Low level token purchase ***DO NOT OVERRIDE***\n', '      * @param _beneficiary Address performing the token purchase\n', '      */\n', '    function buyTokens(address _beneficiary) public payable nonReentrant {\n', '        if (!allowBeneficialInvestments) {\n', '            require(_beneficiary == msg.sender, "Beneficiary address does not match msg.sender");\n', '        }\n', '\n', '        require(!paused, "Should not be paused");\n', '        require(fundRaiseTypes[uint8(FundRaiseType.ETH)], "Mode of investment is not ETH");\n', '\n', '        uint256 weiAmount = msg.value;\n', '        _processTx(_beneficiary, weiAmount);\n', '\n', '        _forwardFunds();\n', '        _postValidatePurchase(_beneficiary, weiAmount);\n', '    }\n', '\n', '    /**\n', '      * @notice low level token purchase\n', '      * @param _investedPOLY Amount of POLY invested\n', '      */\n', '    function buyTokensWithPoly(uint256 _investedPOLY) public nonReentrant{\n', '        require(!paused, "Should not be paused");\n', '        require(fundRaiseTypes[uint8(FundRaiseType.POLY)], "Mode of investment is not POLY");\n', '        _processTx(msg.sender, _investedPOLY);\n', '        _forwardPoly(msg.sender, wallet, _investedPOLY);\n', '        _postValidatePurchase(msg.sender, _investedPOLY);\n', '    }\n', '\n', '    /**\n', '    * @notice Checks whether the cap has been reached.\n', '    * @return bool Whether the cap was reached\n', '    */\n', '    function capReached() public view returns (bool) {\n', '        return totalTokensSold >= cap;\n', '    }\n', '\n', '    /**\n', '     * @notice Return the total no. of tokens sold\n', '     */\n', '    function getTokensSold() public view returns (uint256) {\n', '        return totalTokensSold;\n', '    }\n', '\n', '    /**\n', '     * @notice Return the permissions flag that are associated with STO\n', '     */\n', '    function getPermissions() public view returns(bytes32[]) {\n', '        bytes32[] memory allPermissions = new bytes32[](0);\n', '        return allPermissions;\n', '    }\n', '\n', '    /**\n', '     * @notice Return the STO details\n', '     * @return Unixtimestamp at which offering gets start.\n', '     * @return Unixtimestamp at which offering ends.\n', '     * @return Number of tokens this STO will be allowed to sell to investors.\n', '     * @return Amount of funds raised\n', '     * @return Number of individual investors this STO have.\n', '     * @return Amount of tokens get sold. \n', '     * @return Boolean value to justify whether the fund raise type is POLY or not, i.e true for POLY.\n', '     */\n', '    function getSTODetails() public view returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256, bool) {\n', '        return (\n', '            startTime,\n', '            endTime,\n', '            cap,\n', '            rate,\n', '            (fundRaiseTypes[uint8(FundRaiseType.POLY)]) ? fundsRaised[uint8(FundRaiseType.POLY)]: fundsRaised[uint8(FundRaiseType.ETH)],\n', '            investorCount,\n', '            totalTokensSold,\n', '            (fundRaiseTypes[uint8(FundRaiseType.POLY)])\n', '        );\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Internal interface (extensible)\n', '    // -----------------------------------------\n', '    /**\n', '      * Processing the purchase as well as verify the required validations\n', '      * @param _beneficiary Address performing the token purchase\n', '      * @param _investedAmount Value in wei involved in the purchase\n', '    */\n', '    function _processTx(address _beneficiary, uint256 _investedAmount) internal {\n', '\n', '        _preValidatePurchase(_beneficiary, _investedAmount);\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(_investedAmount);\n', '\n', '        // update state\n', '        if (fundRaiseTypes[uint8(FundRaiseType.POLY)]) {\n', '            fundsRaised[uint8(FundRaiseType.POLY)] = fundsRaised[uint8(FundRaiseType.POLY)].add(_investedAmount);\n', '        } else {\n', '            fundsRaised[uint8(FundRaiseType.ETH)] = fundsRaised[uint8(FundRaiseType.ETH)].add(_investedAmount);\n', '        }\n', '        totalTokensSold = totalTokensSold.add(tokens);\n', '\n', '        _processPurchase(_beneficiary, tokens);\n', '        emit TokenPurchase(msg.sender, _beneficiary, _investedAmount, tokens);\n', '\n', '        _updatePurchasingState(_beneficiary, _investedAmount);\n', '    }\n', '\n', '    /**\n', '    * @notice Validation of an incoming purchase.\n', '      Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _investedAmount Value in wei involved in the purchase\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _investedAmount) internal view {\n', '        require(_beneficiary != address(0), "Beneficiary address should not be 0x");\n', '        require(_investedAmount != 0, "Amount invested should not be equal to 0");\n', '        require(totalTokensSold.add(_getTokenAmount(_investedAmount)) <= cap, "Investment more than cap is not allowed");\n', '        /*solium-disable-next-line security/no-block-members*/\n', '        require(now >= startTime && now <= endTime, "Offering is closed/Not yet started");\n', '    }\n', '\n', '    /**\n', '    * @notice Validation of an executed purchase.\n', '      Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '    */\n', '    function _postValidatePurchase(address /*_beneficiary*/, uint256 /*_investedAmount*/) internal pure {\n', '      // optional override\n', '    }\n', '\n', '    /**\n', '    * @notice Source of tokens.\n', '      Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _tokenAmount Number of tokens to be emitted\n', '    */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        require(ISecurityToken(securityToken).mint(_beneficiary, _tokenAmount), "Error in minting the tokens");\n', '    }\n', '\n', '    /**\n', '    * @notice Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '    * @param _beneficiary Address receiving the tokens\n', '    * @param _tokenAmount Number of tokens to be purchased\n', '    */\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        if (investors[_beneficiary] == 0) {\n', '            investorCount = investorCount + 1;\n', '        }\n', '        investors[_beneficiary] = investors[_beneficiary].add(_tokenAmount);\n', '\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '    * @notice Overrides for extensions that require an internal state to check for validity\n', '      (current user contributions, etc.)\n', '    */\n', '    function _updatePurchasingState(address /*_beneficiary*/, uint256 /*_investedAmount*/) internal pure {\n', '      // optional override\n', '    }\n', '\n', '    /**\n', '    * @notice Overrides to extend the way in which ether is converted to tokens.\n', '    * @param _investedAmount Value in wei to be converted into tokens\n', '    * @return Number of tokens that can be purchased with the specified _investedAmount\n', '    */\n', '    function _getTokenAmount(uint256 _investedAmount) internal view returns (uint256) {\n', '        return _investedAmount.mul(rate);\n', '    }\n', '\n', '    /**\n', '    * @notice Determines how ETH is stored/forwarded on purchases.\n', '    */\n', '    function _forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    /**\n', '     * @notice Internal function used to forward the POLY raised to beneficiary address\n', '     * @param _beneficiary Address of the funds reciever\n', '     * @param _to Address who wants to ST-20 tokens\n', '     * @param _fundsAmount Amount invested by _to\n', '     */\n', '    function _forwardPoly(address _beneficiary, address _to, uint256 _fundsAmount) internal {\n', '        polyToken.transferFrom(_beneficiary, _to, _fundsAmount);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Interface that every module factory contract should implement\n', ' */\n', 'interface IModuleFactory {\n', '\n', '    event ChangeFactorySetupFee(uint256 _oldSetupCost, uint256 _newSetupCost, address _moduleFactory);\n', '    event ChangeFactoryUsageFee(uint256 _oldUsageCost, uint256 _newUsageCost, address _moduleFactory);\n', '    event ChangeFactorySubscriptionFee(uint256 _oldSubscriptionCost, uint256 _newMonthlySubscriptionCost, address _moduleFactory);\n', '    event GenerateModuleFromFactory(\n', '        address _module,\n', '        bytes32 indexed _moduleName,\n', '        address indexed _moduleFactory,\n', '        address _creator,\n', '        uint256 _setupCost,\n', '        uint256 _timestamp\n', '    );\n', '    event ChangeSTVersionBound(string _boundType, uint8 _major, uint8 _minor, uint8 _patch);\n', '\n', '    //Should create an instance of the Module, or throw\n', '    function deploy(bytes _data) external returns(address);\n', '\n', '    /**\n', '     * @notice Type of the Module factory\n', '     */\n', '    function getTypes() external view returns(uint8[]);\n', '\n', '    /**\n', '     * @notice Get the name of the Module\n', '     */\n', '    function getName() external view returns(bytes32);\n', '\n', '    /**\n', '     * @notice Returns the instructions associated with the module\n', '     */\n', '    function getInstructions() external view returns (string);\n', '\n', '    /**\n', '     * @notice Get the tags related to the module factory\n', '     */\n', '    function getTags() external view returns (bytes32[]);\n', '\n', '    /**\n', '     * @notice Used to change the setup fee\n', '     * @param _newSetupCost New setup fee\n', '     */\n', '    function changeFactorySetupFee(uint256 _newSetupCost) external;\n', '\n', '    /**\n', '     * @notice Used to change the usage fee\n', '     * @param _newUsageCost New usage fee\n', '     */\n', '    function changeFactoryUsageFee(uint256 _newUsageCost) external;\n', '\n', '    /**\n', '     * @notice Used to change the subscription fee\n', '     * @param _newSubscriptionCost New subscription fee\n', '     */\n', '    function changeFactorySubscriptionFee(uint256 _newSubscriptionCost) external;\n', '\n', '    /**\n', '     * @notice Function use to change the lower and upper bound of the compatible version st\n', '     * @param _boundType Type of bound\n', '     * @param _newVersion New version array\n', '     */\n', '    function changeSTVersionBounds(string _boundType, uint8[] _newVersion) external;\n', '\n', '   /**\n', '     * @notice Get the setup cost of the module\n', '     */\n', '    function getSetupCost() external view returns (uint256);\n', '\n', '    /**\n', '     * @notice Used to get the lower bound\n', '     * @return Lower bound\n', '     */\n', '    function getLowerSTVersionBounds() external view returns(uint8[]);\n', '\n', '     /**\n', '     * @notice Used to get the upper bound\n', '     * @return Upper bound\n', '     */\n', '    function getUpperSTVersionBounds() external view returns(uint8[]);\n', '\n', '}\n', '\n', '/**\n', ' * @title Helper library use to compare or validate the semantic versions\n', ' */\n', '\n', 'library VersionUtils {\n', '\n', '    /**\n', '     * @notice This function is used to validate the version submitted\n', '     * @param _current Array holds the present version of ST\n', '     * @param _new Array holds the latest version of the ST\n', '     * @return bool\n', '     */\n', '    function isValidVersion(uint8[] _current, uint8[] _new) internal pure returns(bool) {\n', '        bool[] memory _temp = new bool[](_current.length);\n', '        uint8 counter = 0;\n', '        for (uint8 i = 0; i < _current.length; i++) {\n', '            if (_current[i] < _new[i])\n', '                _temp[i] = true;\n', '            else\n', '                _temp[i] = false;\n', '        }\n', '\n', '        for (i = 0; i < _current.length; i++) {\n', '            if (i == 0) {\n', '                if (_current[i] <= _new[i])\n', '                    if(_temp[0]) {\n', '                        counter = counter + 3;\n', '                        break;\n', '                    } else\n', '                        counter++;\n', '                else\n', '                    return false;\n', '            } else {\n', '                if (_temp[i-1])\n', '                    counter++;\n', '                else if (_current[i] <= _new[i])\n', '                    counter++;\n', '                else\n', '                    return false;\n', '            }\n', '        }\n', '        if (counter == _current.length)\n', '            return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Used to compare the lower bound with the latest version\n', '     * @param _version1 Array holds the lower bound of the version\n', '     * @param _version2 Array holds the latest version of the ST\n', '     * @return bool\n', '     */\n', '    function compareLowerBound(uint8[] _version1, uint8[] _version2) internal pure returns(bool) {\n', '        require(_version1.length == _version2.length, "Input length mismatch");\n', '        uint counter = 0;\n', '        for (uint8 j = 0; j < _version1.length; j++) {\n', '            if (_version1[j] == 0)\n', '                counter ++;\n', '        }\n', '        if (counter != _version1.length) {\n', '            counter = 0;\n', '            for (uint8 i = 0; i < _version1.length; i++) {\n', '                if (_version2[i] > _version1[i])\n', '                    return true;\n', '                else if (_version2[i] < _version1[i])\n', '                    return false;\n', '                else\n', '                    counter++;\n', '            }\n', '            if (counter == _version1.length - 1)\n', '                return true;\n', '            else\n', '                return false;\n', '        } else\n', '            return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Used to compare the upper bound with the latest version\n', '     * @param _version1 Array holds the upper bound of the version\n', '     * @param _version2 Array holds the latest version of the ST\n', '     * @return bool\n', '     */\n', '    function compareUpperBound(uint8[] _version1, uint8[] _version2) internal pure returns(bool) {\n', '        require(_version1.length == _version2.length, "Input length mismatch");\n', '        uint counter = 0;\n', '        for (uint8 j = 0; j < _version1.length; j++) {\n', '            if (_version1[j] == 0)\n', '                counter ++;\n', '        }\n', '        if (counter != _version1.length) {\n', '            counter = 0;\n', '            for (uint8 i = 0; i < _version1.length; i++) {\n', '                if (_version1[i] > _version2[i])\n', '                    return true;\n', '                else if (_version1[i] < _version2[i])\n', '                    return false;\n', '                else\n', '                    counter++;\n', '            }\n', '            if (counter == _version1.length - 1)\n', '                return true;\n', '            else\n', '                return false;\n', '        } else\n', '            return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Used to pack the uint8[] array data into uint24 value\n', '     * @param _major Major version\n', '     * @param _minor Minor version\n', '     * @param _patch Patch version\n', '     */\n', '    function pack(uint8 _major, uint8 _minor, uint8 _patch) internal pure returns(uint24) {\n', '        return (uint24(_major) << 16) | (uint24(_minor) << 8) | uint24(_patch);\n', '    }\n', '\n', '    /**\n', '     * @notice Used to convert packed data into uint8 array\n', '     * @param _packedVersion Packed data\n', '     */\n', '    function unpack(uint24 _packedVersion) internal pure returns (uint8[]) {\n', '        uint8[] memory _unpackVersion = new uint8[](3);\n', '        _unpackVersion[0] = uint8(_packedVersion >> 16);\n', '        _unpackVersion[1] = uint8(_packedVersion >> 8);\n', '        _unpackVersion[2] = uint8(_packedVersion);\n', '        return _unpackVersion;\n', '    }\n', '\n', '\n', '}\n', '\n', '/**\n', ' * @title Interface that any module factory contract should implement\n', ' * @notice Contract is abstract\n', ' */\n', 'contract ModuleFactory is IModuleFactory, Ownable {\n', '\n', '    IERC20 public polyToken;\n', '    uint256 public usageCost;\n', '    uint256 public monthlySubscriptionCost;\n', '\n', '    uint256 public setupCost;\n', '    string public description;\n', '    string public version;\n', '    bytes32 public name;\n', '    string public title;\n', '\n', '    // @notice Allow only two variables to be stored\n', '    // 1. lowerBound \n', '    // 2. upperBound\n', '    // @dev (0.0.0 will act as the wildcard) \n', '    // @dev uint24 consists packed value of uint8 _major, uint8 _minor, uint8 _patch\n', '    mapping(string => uint24) compatibleSTVersionRange;\n', '\n', '    event ChangeFactorySetupFee(uint256 _oldSetupCost, uint256 _newSetupCost, address _moduleFactory);\n', '    event ChangeFactoryUsageFee(uint256 _oldUsageCost, uint256 _newUsageCost, address _moduleFactory);\n', '    event ChangeFactorySubscriptionFee(uint256 _oldSubscriptionCost, uint256 _newMonthlySubscriptionCost, address _moduleFactory);\n', '    event GenerateModuleFromFactory(\n', '        address _module,\n', '        bytes32 indexed _moduleName,\n', '        address indexed _moduleFactory,\n', '        address _creator,\n', '        uint256 _timestamp\n', '    );\n', '    event ChangeSTVersionBound(string _boundType, uint8 _major, uint8 _minor, uint8 _patch);\n', '\n', '    /**\n', '     * @notice Constructor\n', '     * @param _polyAddress Address of the polytoken\n', '     */\n', '    constructor (address _polyAddress, uint256 _setupCost, uint256 _usageCost, uint256 _subscriptionCost) public {\n', '        polyToken = IERC20(_polyAddress);\n', '        setupCost = _setupCost;\n', '        usageCost = _usageCost;\n', '        monthlySubscriptionCost = _subscriptionCost;\n', '    }\n', '\n', '    /**\n', '     * @notice Used to change the fee of the setup cost\n', '     * @param _newSetupCost new setup cost\n', '     */\n', '    function changeFactorySetupFee(uint256 _newSetupCost) public onlyOwner {\n', '        emit ChangeFactorySetupFee(setupCost, _newSetupCost, address(this));\n', '        setupCost = _newSetupCost;\n', '    }\n', '\n', '    /**\n', '     * @notice Used to change the fee of the usage cost\n', '     * @param _newUsageCost new usage cost\n', '     */\n', '    function changeFactoryUsageFee(uint256 _newUsageCost) public onlyOwner {\n', '        emit ChangeFactoryUsageFee(usageCost, _newUsageCost, address(this));\n', '        usageCost = _newUsageCost;\n', '    }\n', '\n', '    /**\n', '     * @notice Used to change the fee of the subscription cost\n', '     * @param _newSubscriptionCost new subscription cost\n', '     */\n', '    function changeFactorySubscriptionFee(uint256 _newSubscriptionCost) public onlyOwner {\n', '        emit ChangeFactorySubscriptionFee(monthlySubscriptionCost, _newSubscriptionCost, address(this));\n', '        monthlySubscriptionCost = _newSubscriptionCost;\n', '\n', '    }\n', '\n', '    /**\n', '     * @notice Updates the title of the ModuleFactory\n', '     * @param _newTitle New Title that will replace the old one.\n', '     */\n', '    function changeTitle(string _newTitle) public onlyOwner {\n', '        require(bytes(_newTitle).length > 0, "Invalid title");\n', '        title = _newTitle;\n', '    }\n', '\n', '    /**\n', '     * @notice Updates the description of the ModuleFactory\n', '     * @param _newDesc New description that will replace the old one.\n', '     */\n', '    function changeDescription(string _newDesc) public onlyOwner {\n', '        require(bytes(_newDesc).length > 0, "Invalid description");\n', '        description = _newDesc;\n', '    }\n', '\n', '    /**\n', '     * @notice Updates the name of the ModuleFactory\n', '     * @param _newName New name that will replace the old one.\n', '     */\n', '    function changeName(bytes32 _newName) public onlyOwner {\n', '        require(_newName != bytes32(0),"Invalid name");\n', '        name = _newName;\n', '    }\n', '\n', '    /**\n', '     * @notice Updates the version of the ModuleFactory\n', '     * @param _newVersion New name that will replace the old one.\n', '     */\n', '    function changeVersion(string _newVersion) public onlyOwner {\n', '        require(bytes(_newVersion).length > 0, "Invalid version");\n', '        version = _newVersion;\n', '    }\n', '\n', '    /**\n', '     * @notice Function use to change the lower and upper bound of the compatible version st\n', '     * @param _boundType Type of bound\n', '     * @param _newVersion new version array\n', '     */\n', '    function changeSTVersionBounds(string _boundType, uint8[] _newVersion) external onlyOwner {\n', '        require(\n', '            keccak256(abi.encodePacked(_boundType)) == keccak256(abi.encodePacked("lowerBound")) ||\n', '            keccak256(abi.encodePacked(_boundType)) == keccak256(abi.encodePacked("upperBound")),\n', '            "Must be a valid bound type"\n', '        );\n', '        require(_newVersion.length == 3);\n', '        if (compatibleSTVersionRange[_boundType] != uint24(0)) { \n', '            uint8[] memory _currentVersion = VersionUtils.unpack(compatibleSTVersionRange[_boundType]);\n', '            require(VersionUtils.isValidVersion(_currentVersion, _newVersion), "Failed because of in-valid version");\n', '        }\n', '        compatibleSTVersionRange[_boundType] = VersionUtils.pack(_newVersion[0], _newVersion[1], _newVersion[2]);\n', '        emit ChangeSTVersionBound(_boundType, _newVersion[0], _newVersion[1], _newVersion[2]);\n', '    }\n', '\n', '    /**\n', '     * @notice Used to get the lower bound\n', '     * @return lower bound\n', '     */\n', '    function getLowerSTVersionBounds() external view returns(uint8[]) {\n', '        return VersionUtils.unpack(compatibleSTVersionRange["lowerBound"]);\n', '    }\n', '\n', '    /**\n', '     * @notice Used to get the upper bound\n', '     * @return upper bound\n', '     */\n', '    function getUpperSTVersionBounds() external view returns(uint8[]) {\n', '        return VersionUtils.unpack(compatibleSTVersionRange["upperBound"]);\n', '    }\n', '\n', '    /**\n', '     * @notice Get the setup cost of the module\n', '     */\n', '    function getSetupCost() external view returns (uint256) {\n', '        return setupCost;\n', '    }\n', '\n', '   /**\n', '    * @notice Get the name of the Module\n', '    */\n', '    function getName() public view returns(bytes32) {\n', '        return name;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Utility contract for reusable code\n', ' */\n', 'library Util {\n', '\n', '   /**\n', '    * @notice Changes a string to upper case\n', '    * @param _base String to change\n', '    */\n', '    function upper(string _base) internal pure returns (string) {\n', '        bytes memory _baseBytes = bytes(_base);\n', '        for (uint i = 0; i < _baseBytes.length; i++) {\n', '            bytes1 b1 = _baseBytes[i];\n', '            if (b1 >= 0x61 && b1 <= 0x7A) {\n', '                b1 = bytes1(uint8(b1)-32);\n', '            }\n', '            _baseBytes[i] = b1;\n', '        }\n', '        return string(_baseBytes);\n', '    }\n', '\n', '    /**\n', '     * @notice Changes the string into bytes32\n', '     * @param _source String that need to convert into bytes32\n', '     */\n', '    /// Notice - Maximum Length for _source will be 32 chars otherwise returned bytes32 value will have lossy value.\n', '    function stringToBytes32(string memory _source) internal pure returns (bytes32) {\n', '        return bytesToBytes32(bytes(_source), 0);\n', '    }\n', '\n', '    /**\n', '     * @notice Changes bytes into bytes32\n', '     * @param _b Bytes that need to convert into bytes32\n', '     * @param _offset Offset from which to begin conversion\n', '     */\n', '    /// Notice - Maximum length for _source will be 32 chars otherwise returned bytes32 value will have lossy value.\n', '    function bytesToBytes32(bytes _b, uint _offset) internal pure returns (bytes32) {\n', '        bytes32 result;\n', '\n', '        for (uint i = 0; i < _b.length; i++) {\n', '            result |= bytes32(_b[_offset + i] & 0xFF) >> (i * 8);\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @notice Changes the bytes32 into string\n', '     * @param _source that need to convert into string\n', '     */\n', '    function bytes32ToString(bytes32 _source) internal pure returns (string result) {\n', '        bytes memory bytesString = new bytes(32);\n', '        uint charCount = 0;\n', '        for (uint j = 0; j < 32; j++) {\n', '            byte char = byte(bytes32(uint(_source) * 2 ** (8 * j)));\n', '            if (char != 0) {\n', '                bytesString[charCount] = char;\n', '                charCount++;\n', '            }\n', '        }\n', '        bytes memory bytesStringTrimmed = new bytes(charCount);\n', '        for (j = 0; j < charCount; j++) {\n', '            bytesStringTrimmed[j] = bytesString[j];\n', '        }\n', '        return string(bytesStringTrimmed);\n', '    }\n', '\n', '    /**\n', '     * @notice Gets function signature from _data\n', '     * @param _data Passed data\n', '     * @return bytes4 sig\n', '     */\n', '    function getSig(bytes _data) internal pure returns (bytes4 sig) {\n', '        uint len = _data.length < 4 ? _data.length : 4;\n', '        for (uint i = 0; i < len; i++) {\n', '            sig = bytes4(uint(sig) + uint(_data[i]) * (2 ** (8 * (len - 1 - i))));\n', '        }\n', '    }\n', '\n', '\n', '}\n', '\n', '/**\n', ' * @title Factory for deploying CappedSTO module\n', ' */\n', 'contract CappedSTOFactory is ModuleFactory {\n', '\n', '    /**\n', '     * @notice Constructor\n', '     * @param _polyAddress Address of the polytoken\n', '     */\n', '    constructor (address _polyAddress, uint256 _setupCost, uint256 _usageCost, uint256 _subscriptionCost) public\n', '    ModuleFactory(_polyAddress, _setupCost, _usageCost, _subscriptionCost)\n', '    {\n', '        version = "1.0.0";\n', '        name = "CappedSTO";\n', '        title = "Capped STO";\n', '        description = "Use to collects the funds and once the cap is reached then investment will be no longer entertained";\n', '        compatibleSTVersionRange["lowerBound"] = VersionUtils.pack(uint8(0), uint8(0), uint8(0));\n', '        compatibleSTVersionRange["upperBound"] = VersionUtils.pack(uint8(0), uint8(0), uint8(0));\n', '    }\n', '\n', '     /**\n', '     * @notice Used to launch the Module with the help of factory\n', '     * @return address Contract address of the Module\n', '     */\n', '    function deploy(bytes _data) external returns(address) {\n', '        if(setupCost > 0)\n', '            require(polyToken.transferFrom(msg.sender, owner, setupCost), "Sufficent Allowance is not provided");\n', '        //Check valid bytes - can only call module init function\n', '        CappedSTO cappedSTO = new CappedSTO(msg.sender, address(polyToken));\n', "        //Checks that _data is valid (not calling anything it shouldn't)\n", '        require(Util.getSig(_data) == cappedSTO.getInitFunction(), "Invalid data");\n', '        /*solium-disable-next-line security/no-low-level-calls*/\n', '        require(address(cappedSTO).call(_data), "Unsuccessfull call");\n', '        /*solium-disable-next-line security/no-block-members*/\n', '        emit GenerateModuleFromFactory(address(cappedSTO), getName(), address(this), msg.sender, setupCost, now);\n', '        return address(cappedSTO);\n', '    }\n', '\n', '    /**\n', '     * @notice Type of the Module factory\n', '     */\n', '    function getTypes() external view returns(uint8[]) {\n', '        uint8[] memory res = new uint8[](1);\n', '        res[0] = 3;\n', '        return res;\n', '    }\n', '\n', '    /**\n', '     * @notice Returns the instructions associated with the module\n', '     */\n', '    function getInstructions() external view returns(string) {\n', '        /*solium-disable-next-line max-len*/\n', '        return "Initialises a capped STO. Init parameters are _startTime (time STO starts), _endTime (time STO ends), _cap (cap in tokens for STO), _rate (POLY/ETH to token rate), _fundRaiseType (whether you are raising in POLY or ETH), _polyToken (address of POLY token), _fundsReceiver (address which will receive funds)";\n', '    }\n', '\n', '    /**\n', '     * @notice Get the tags related to the module factory\n', '     */\n', '    function getTags() external view returns(bytes32[]) {\n', '        bytes32[] memory availableTags = new bytes32[](4);\n', '        availableTags[0] = "Capped";\n', '        availableTags[1] = "Non-refundable";\n', '        availableTags[2] = "POLY";\n', '        availableTags[3] = "ETH";\n', '        return availableTags;\n', '    }\n', '\n', '}']