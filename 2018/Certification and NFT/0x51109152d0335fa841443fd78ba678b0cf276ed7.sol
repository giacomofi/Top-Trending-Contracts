['pragma solidity ^0.4.18;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount);\n', '}\n', '\n', 'contract Crowdsale {\n', '\n', '    address public beneficiary; \n', '    uint public fundingGoal; \n', '    uint public amountRaised; \n', '    uint public deadline; \n', '    \n', '    uint public price;\n', '    token public tokenReward; \n', '    mapping(address => uint256) public balanceOf;\n', '    \n', '    bool crowdsaleClosed = false; \n', '    \n', '   \n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function Crowdsale(\n', '        address ifSuccessfulSendTo,\n', '       \n', '        uint durationInMinutes,\n', '        uint etherCostOfEachToken,\n', '        address addressOfTokenUsedAsReward\n', '    ) {\n', '        beneficiary = ifSuccessfulSendTo;\n', '       \n', '        deadline = now + durationInMinutes * 1 minutes;\n', '        price = etherCostOfEachToken * 1 ether;\n', '        tokenReward = token(addressOfTokenUsedAsReward); \n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * payable \n', '     */   \n', '\t \n', '\tfunction () payable {\n', '        require(!crowdsaleClosed);\n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender] += amount;\n', '        amountRaised += amount;\n', '        tokenReward.transfer(msg.sender, amount / price);        \n', '        beneficiary.send(amountRaised);\n', '        amountRaised = 0;\n', '        FundTransfer(msg.sender, amount, true);\n', '    }\t\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount);\n', '}\n', '\n', 'contract Crowdsale {\n', '\n', '    address public beneficiary; \n', '    uint public fundingGoal; \n', '    uint public amountRaised; \n', '    uint public deadline; \n', '    \n', '    uint public price;\n', '    token public tokenReward; \n', '    mapping(address => uint256) public balanceOf;\n', '    \n', '    bool crowdsaleClosed = false; \n', '    \n', '   \n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function Crowdsale(\n', '        address ifSuccessfulSendTo,\n', '       \n', '        uint durationInMinutes,\n', '        uint etherCostOfEachToken,\n', '        address addressOfTokenUsedAsReward\n', '    ) {\n', '        beneficiary = ifSuccessfulSendTo;\n', '       \n', '        deadline = now + durationInMinutes * 1 minutes;\n', '        price = etherCostOfEachToken * 1 ether;\n', '        tokenReward = token(addressOfTokenUsedAsReward); \n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * payable \n', '     */   \n', '\t \n', '\tfunction () payable {\n', '        require(!crowdsaleClosed);\n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender] += amount;\n', '        amountRaised += amount;\n', '        tokenReward.transfer(msg.sender, amount / price);        \n', '        beneficiary.send(amountRaised);\n', '        amountRaised = 0;\n', '        FundTransfer(msg.sender, amount, true);\n', '    }\t\n', '}']
