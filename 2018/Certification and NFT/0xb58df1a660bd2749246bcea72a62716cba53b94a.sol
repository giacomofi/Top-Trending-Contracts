['pragma solidity ^0.4.21;\n', '\n', 'contract HODL {\n', '    struct HODL {\n', '        uint256 stake;\n', '        // moving ANY funds invalidates hodling of the address\n', '        bool invalid;\n', '        bool claimed3M;\n', '        bool claimed6M;\n', '        bool claimed9M;\n', '    }\n', '    mapping (address => HODL) public hodlerStakes;\n', '}\n', '\n', '/**\n', ' * @title EthealHodlHelper\n', ' * @author thesved, viktor.tabori at etheal.com\n', ' * @notice Helper with HodlReward\n', ' */\n', 'contract EthealHodlHelper {\n', '    HODL private hodl = HODL(0x9ab055FD8189A4128F5940F0e1B3F690AFaCd80c);\n', '    \n', '    function getAddress(address[] keys, bool valid, bool invalid) view external returns (address[] hodlers) {\n', '        uint256 i;\n', '        uint256 result = 0;\n', '        uint256 _s = 0;\n', '        bool _v = false;\n', '        bool _a = false;\n', '        bool _b = false;\n', '        bool _c = false;\n', '        address[] memory _hodlers = new address[](keys.length);\n', '\n', '        // search in contributors\n', '        for (i = 0; i < keys.length; i++) {\n', '            (_s, _v, _a, _b, _c) = hodl.hodlerStakes(keys[i]);\n', '            if ((_v && valid) || (!_v && invalid)) {\n', '                _hodlers[result] = keys[i];\n', '                result++;\n', '            }\n', '        }\n', '\n', '        hodlers = new address[](result);\n', '        for (i = 0; i < result; i++) {\n', '            hodlers[i] = _hodlers[i];\n', '        }\n', '\n', '        return hodlers;\n', '    }\n', '}']