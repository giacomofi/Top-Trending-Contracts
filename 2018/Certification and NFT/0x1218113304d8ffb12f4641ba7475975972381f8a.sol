['pragma solidity ^0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Claimable.sol\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '// File: contracts/HodlSale.sol\n', '\n', 'contract HodlSale is Claimable {\n', '    using SafeMath for uint256;\n', '\n', '    struct Sale {\n', '        uint startTime;\n', '        uint endTime;\n', '        uint minPurchase;\n', '        uint weiRaised;\n', '    }\n', '\n', '    struct Fees {\n', '        uint fund;\n', '        uint reward;\n', '        uint divisor;\n', '    }\n', '\n', '    struct Wallets {\n', '        address fund;\n', '        address fees;\n', '    }\n', '\n', '    uint public era;\n', '    Fees public fees;\n', '    Wallets public wallets;\n', '    mapping(uint => Sale) public sales;\n', '    mapping(address => uint) public balances;\n', '\n', '    event NewSale(uint era, uint startTime, uint endTime, uint minPurchase);\n', '    event NewFees(uint fund, uint reward, uint divisor);\n', '    event NewWallets(address fund, address fees);\n', '    event Purchase(uint indexed era, address indexed wallet, uint amount);\n', '    event Reward(address indexed affiliate, uint amount);\n', '    event Withdraw(address indexed wallet, uint amount);\n', '\n', '    function () public payable {\n', '        if (msg.value > 0) {\n', '            buy();\n', '        } else {\n', '            claim();\n', '        }\n', '    }\n', '\n', '    function buy() public payable {\n', '        buyWithReward(wallets.fees);\n', '    }\n', '\n', '    function buyWithReward(address affiliate) whenFunding public payable {\n', '        Sale storage sale = sales[era];\n', '        require(msg.value >= sale.minPurchase);\n', '\n', '        require(affiliate != msg.sender);\n', '        require(affiliate != address(this));\n', '\n', '        uint fee = msg.value.mul(fees.fund).div(fees.divisor);\n', '        uint reward = msg.value.mul(fees.reward).div(fees.divisor);\n', '        uint amount = msg.value.sub(fee).sub(reward);\n', '\n', '        balances[wallets.fees] = balances[wallets.fees].add(fee);\n', '        balances[affiliate] = balances[affiliate].add(reward);\n', '        balances[wallets.fund] = balances[wallets.fund].add(amount);\n', '\n', '        sale.weiRaised = sale.weiRaised.add(amount);\n', '\n', '        Purchase(era, msg.sender, amount);\n', '        Reward(affiliate, reward);\n', '    }\n', '\n', '    function claim() public {\n', '        if (msg.sender == wallets.fees || msg.sender == wallets.fund) require(!funding());\n', '        uint payment = balances[msg.sender];\n', '        require(payment > 0);\n', '        balances[msg.sender] = 0;\n', '        msg.sender.transfer(payment);\n', '        Withdraw(msg.sender, payment);\n', '    }\n', '\n', '    function funding() public view returns (bool) {\n', '        Sale storage sale = sales[era];\n', '        return now >= sale.startTime && now <= sale.endTime;\n', '    }\n', '\n', '    modifier whenFunding() {\n', '        require(funding());\n', '        _;\n', '    }\n', '\n', '    modifier whenNotFunding() {\n', '        require(!funding());\n', '        _;\n', '    }\n', '\n', '    function updateWallets(address _fund, address _fees) whenNotFunding onlyOwner public {\n', '        wallets = Wallets(_fund, _fees);\n', '        NewWallets(_fund, _fees);\n', '    }\n', '\n', '    function updateFees(uint _fund, uint _reward, uint _divisor) whenNotFunding onlyOwner public {\n', '        require(_divisor > _fund && _divisor > _reward);\n', '        fees = Fees(_fund, _reward, _divisor);\n', '        NewFees(_fund, _reward, _divisor);\n', '    }\n', '\n', '    function updateSale(uint _startTime, uint _endTime, uint _minPurchase) whenNotFunding onlyOwner public {\n', '        require(_startTime >= now && _endTime >= _startTime);\n', '        era = era.add(1);\n', '        sales[era] = Sale(_startTime, _endTime, _minPurchase, 0);\n', '        NewSale(era, _startTime, _endTime, _minPurchase);\n', '    }\n', '}']