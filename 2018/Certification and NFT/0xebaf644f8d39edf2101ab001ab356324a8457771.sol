['pragma solidity ^0.4.24;\n', '\n', '// File: contracts/ReceivingContractCallback.sol\n', '\n', 'contract ReceivingContractCallback {\n', '\n', '  function tokenFallback(address _from, uint _value) public;\n', '\n', '}\n', '\n', '// File: contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/IntermediateWallet.sol\n', '\n', 'contract IntermediateWallet is ReceivingContractCallback, Ownable {\n', '    \n', '  address public token = 0xB36F13C4e2df1b5201e3D64cd79b1897e0E80D39;  \n', '\n', '  address public wallet =0xf45aaB548368edfD37997bD6a8Ab74c413dfa48B;\n', '\n', '  struct TokenTx {\n', '    address from;\n', '    uint amount;\n', '    uint date;\n', '  }\n', '\n', '  TokenTx[] public txs;\n', '  \n', '  constructor() public {\n', '\n', '  }\n', '\n', '  function setToken(address newTokenAddr) public onlyOwner {\n', '    token = newTokenAddr;\n', '  }\n', '  \n', '  function setWallet(address newWallet) public onlyOwner {\n', '    wallet = newWallet;\n', '  }\n', '\n', '  function retrieveTokens(address to, address anotherToken) public onlyOwner {\n', '    ERC20Basic alienToken = ERC20Basic(anotherToken);\n', '    alienToken.transfer(to, alienToken.balanceOf(this));\n', '  }\n', '\n', '  function () payable public {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  function tokenFallback(address _from, uint _value) public {\n', '    require(msg.sender == token);\n', '    txs.push(TokenTx(_from, _value, now));\n', '    ERC20Basic(token).transfer(wallet, _value);\n', '  }\n', '\n', '}']