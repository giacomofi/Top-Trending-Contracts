['pragma solidity ^0.4.24;\n', '\n', '\n', '/** ----------------------MonetaryCoin V1.0.0 ------------------------*/\n', '\n', '/**\n', ' * Homepage: https://MonetaryCoin.org  Distribution: https://MonetaryCoin.io\n', ' *\n', ' * Full source code: https://github.com/Monetary-Foundation/MonetaryCoin\n', ' * \n', ' * Licenced MIT - The Monetary Foundation 2018\n', ' *\n', ' */\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title MineableToken\n', ' * @dev ERC20 Token with Pos mining.\n', ' * The blockReward_ is controlled by a GDP oracle tied to the national identity or currency union identity of the subject MonetaryCoin.\n', ' * This type of mining will be used during both the initial distribution period and when GDP growth is positive.\n', ' * For mining during negative growth period please refer to MineableM5Token.sol. \n', ' * Unlike standard erc20 token, the totalSupply is sum(all user balances) + totalStake instead of sum(all user balances).\n', '*/\n', 'contract MineableToken is MintableToken { \n', '  event Commit(address indexed from, uint value,uint atStake, int onBlockReward);\n', '  event Withdraw(address indexed from, uint reward, uint commitment);\n', '\n', '  uint256 totalStake_ = 0;\n', '  int256 blockReward_;         //could be positive or negative according to GDP\n', '\n', '  struct Commitment {\n', '    uint256 value;             // value commited to mining\n', '    uint256 onBlockNumber;     // commitment done on block\n', '    uint256 atStake;           // stake during commitment\n', '    int256 onBlockReward;\n', '  }\n', '\n', '  mapping( address => Commitment ) miners;\n', '\n', '  /**\n', '  * @dev commit _value for minning\n', '  * @notice the _value will be substructed from user balance and added to the stake.\n', '  * if user previously commited, add to an existing commitment. \n', '  * this is done by calling withdraw() then commit back previous commit + reward + new commit \n', '  * @param _value The amount to be commited.\n', '  * @return the commit value: _value OR prevCommit + reward + _value\n', '  */\n', '  function commit(uint256 _value) public returns (uint256 commitmentValue) {\n', '    require(0 < _value);\n', '    require(_value <= balances[msg.sender]);\n', '    \n', '    commitmentValue = _value;\n', '    uint256 prevCommit = miners[msg.sender].value;\n', '    //In case user already commited, withdraw and recommit \n', '    // new commitment value: prevCommit + reward + _value\n', '    if (0 < prevCommit) {\n', '      // withdraw Will revert if reward is negative\n', '      uint256 prevReward;\n', '      (prevReward, prevCommit) = withdraw();\n', '      commitmentValue = prevReward.add(prevCommit).add(_value);\n', '    }\n', '\n', '    // sub will revert if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(commitmentValue);\n', '    emit Transfer(msg.sender, address(0), commitmentValue);\n', '\n', '    totalStake_ = totalStake_.add(commitmentValue);\n', '\n', '    miners[msg.sender] = Commitment(\n', '      commitmentValue, // Commitment.value\n', '      block.number, // onBlockNumber\n', '      totalStake_, // atStake = current stake + commitments value\n', '      blockReward_ // onBlockReward\n', '      );\n', '    \n', '    emit Commit(msg.sender, commitmentValue, totalStake_, blockReward_); // solium-disable-line\n', '\n', '    return commitmentValue;\n', '  }\n', '\n', '  /**\n', '  * @dev withdraw reward\n', '  * @return {\n', '    "uint256 reward": the new supply\n', '    "uint256 commitmentValue": the commitment to be returned\n', '    }\n', '  */\n', '  function withdraw() public returns (uint256 reward, uint256 commitmentValue) {\n', '    require(miners[msg.sender].value > 0); \n', '\n', '    //will revert if reward is negative:\n', '    reward = getReward(msg.sender);\n', '\n', '    Commitment storage commitment = miners[msg.sender];\n', '    commitmentValue = commitment.value;\n', '\n', '    uint256 withdrawnSum = commitmentValue.add(reward);\n', '    \n', '    totalStake_ = totalStake_.sub(commitmentValue);\n', '    totalSupply_ = totalSupply_.add(reward);\n', '    \n', '    balances[msg.sender] = balances[msg.sender].add(withdrawnSum);\n', '    emit Transfer(address(0), msg.sender, commitmentValue.add(reward));\n', '    \n', '    delete miners[msg.sender];\n', '    \n', '    emit Withdraw(msg.sender, reward, commitmentValue);  // solium-disable-line\n', '    return (reward, commitmentValue);\n', '  }\n', '\n', '  /**\n', '  * @dev Calculate the reward if withdraw() happans on this block\n', '  * @notice The reward is calculated by the formula:\n', '  * (numberOfBlocks) * (effectiveBlockReward) * (commitment.value) / (effectiveStake) \n', '  * effectiveBlockReward is the average between the block reward during commit and the block reward during the call\n', '  * effectiveStake is the average between the stake during the commit and the stake during call (liniar aproximation)\n', '  * @return An uint256 representing the reward amount\n', '  */ \n', '  function getReward(address _miner) public view returns (uint256) {\n', '    if (miners[_miner].value == 0) {\n', '      return 0;\n', '    }\n', '\n', '    Commitment storage commitment = miners[_miner];\n', '\n', '    int256 averageBlockReward = signedAverage(commitment.onBlockReward, blockReward_);\n', '    \n', '    require(0 <= averageBlockReward);\n', '    \n', '    uint256 effectiveBlockReward = uint256(averageBlockReward);\n', '    \n', '    uint256 effectiveStake = average(commitment.atStake, totalStake_);\n', '    \n', '    uint256 numberOfBlocks = block.number.sub(commitment.onBlockNumber);\n', '\n', '    uint256 miningReward = numberOfBlocks.mul(effectiveBlockReward).mul(commitment.value).div(effectiveStake);\n', '       \n', '    return miningReward;\n', '  }\n', '\n', '  /**\n', '  * @dev Calculate the average of two integer numbers \n', '  * @notice 1.5 will be rounded toward zero\n', '  * @return An uint256 representing integer average\n', '  */\n', '  function average(uint256 a, uint256 b) public pure returns (uint256) {\n', '    return a.add(b).div(2);\n', '  }\n', '\n', '  /**\n', '  * @dev Calculate the average of two signed integers numbers \n', '  * @notice 1.5 will be toward zero\n', '  * @return An int256 representing integer average\n', '  */\n', '  function signedAverage(int256 a, int256 b) public pure returns (int256) {\n', '    int256 ans = a + b;\n', '\n', '    if (a > 0 && b > 0 && ans <= 0) {\n', '      require(false);\n', '    }\n', '    if (a < 0 && b < 0 && ans >= 0) {\n', '      require(false);\n', '    }\n', '\n', '    return ans / 2;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the commitment of the specified address.\n', '  * @param _miner The address to query the the commitment Of\n', '  * @return the amount commited.\n', '  */\n', '  function commitmentOf(address _miner) public view returns (uint256) {\n', '    return miners[_miner].value;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the all fields for the commitment of the specified address.\n', '  * @param _miner The address to query the the commitment Of\n', '  * @return {\n', '    "uint256 value": the amount commited.\n', '    "uint256 onBlockNumber": block number of commitment.\n', '    "uint256 atStake": stake when commited.\n', '    "int256 onBlockReward": block reward when commited.\n', '    }\n', '  */\n', '  function getCommitment(address _miner) public view \n', '  returns (\n', '    uint256 value,             // value commited to mining\n', '    uint256 onBlockNumber,     // commited on block\n', '    uint256 atStake,           // stake during commit\n', '    int256 onBlockReward       // block reward during commit\n', '    ) \n', '  {\n', '    value = miners[_miner].value;\n', '    onBlockNumber = miners[_miner].onBlockNumber;\n', '    atStake = miners[_miner].atStake;\n', '    onBlockReward = miners[_miner].onBlockReward;\n', '  }\n', '\n', '  /**\n', '  * @dev the total stake\n', '  * @return the total stake\n', '  */\n', '  function totalStake() public view returns (uint256) {\n', '    return totalStake_;\n', '  }\n', '\n', '  /**\n', '  * @dev the block reward\n', '  * @return the current block reward\n', '  */\n', '  function blockReward() public view returns (int256) {\n', '    return blockReward_;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title GDPOraclizedToken\n', ' * @dev This is an interface for the GDP Oracle to control the mining rate.\n', ' * For security reasons, two distinct functions were created: \n', ' * setPositiveGrowth() and setNegativeGrowth()\n', ' */\n', 'contract GDPOraclizedToken is MineableToken {\n', '\n', '  event GDPOracleTransferred(address indexed previousOracle, address indexed newOracle);\n', '  event BlockRewardChanged(int oldBlockReward, int newBlockReward);\n', '\n', '  address GDPOracle_;\n', '  address pendingGDPOracle_;\n', '\n', '  /**\n', '   * @dev Modifier Throws if called by any account other than the GDPOracle.\n', '   */\n', '  modifier onlyGDPOracle() {\n', '    require(msg.sender == GDPOracle_);\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingGDPOracle.\n', '   */\n', '  modifier onlyPendingGDPOracle() {\n', '    require(msg.sender == pendingGDPOracle_);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current GDPOracle to transfer control to a newOracle.\n', '   * The new GDPOracle need to call claimOracle() to finalize\n', '   * @param newOracle The address to transfer ownership to.\n', '   */\n', '  function transferGDPOracle(address newOracle) public onlyGDPOracle {\n', '    pendingGDPOracle_ = newOracle;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingGDPOracle_ address to finalize the transfer.\n', '   */\n', '  function claimOracle() onlyPendingGDPOracle public {\n', '    emit GDPOracleTransferred(GDPOracle_, pendingGDPOracle_);\n', '    GDPOracle_ = pendingGDPOracle_;\n', '    pendingGDPOracle_ = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Chnage block reward according to GDP \n', '   * @param newBlockReward the new block reward in case of possible growth\n', '   */\n', '  function setPositiveGrowth(int256 newBlockReward) public onlyGDPOracle returns(bool) {\n', '    // protect against error / overflow\n', '    require(0 <= newBlockReward);\n', '    \n', '    emit BlockRewardChanged(blockReward_, newBlockReward);\n', '    blockReward_ = newBlockReward;\n', '  }\n', '\n', '  /**\n', '   * @dev Chnage block reward according to GDP \n', '   * @param newBlockReward the new block reward in case of negative growth\n', '   */\n', '  function setNegativeGrowth(int256 newBlockReward) public onlyGDPOracle returns(bool) {\n', '    require(newBlockReward < 0);\n', '\n', '    emit BlockRewardChanged(blockReward_, newBlockReward);\n', '    blockReward_ = newBlockReward;\n', '  }\n', '\n', '  /**\n', '  * @dev get GDPOracle\n', '  * @return the address of the GDPOracle\n', '  */\n', '  function GDPOracle() public view returns (address) { // solium-disable-line mixedcase\n', '    return GDPOracle_;\n', '  }\n', '\n', '  /**\n', '  * @dev get GDPOracle\n', '  * @return the address of the GDPOracle\n', '  */\n', '  function pendingGDPOracle() public view returns (address) { // solium-disable-line mixedcase\n', '    return pendingGDPOracle_;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title MineableM5Token\n', ' * @notice This contract adds the ability to mine for M5 tokens when growth is negative.\n', ' * The M5 token is a distinct ERC20 token that may be obtained only following a period of negative GDP growth.\n', ' * The logic for M5 mining will be finalized in advance of the close of the initial distribution period – see the White Paper for additional details.\n', ' * After upgrading this contract with the final M5 logic, finishUpgrade() will be called to permanently seal the upgradeability of the contract.\n', '*/\n', 'contract MineableM5Token is GDPOraclizedToken { \n', '  \n', '  event M5TokenUpgrade(address indexed oldM5Token, address indexed newM5Token);\n', '  event M5LogicUpgrade(address indexed oldM5Logic, address indexed newM5Logic);\n', '  event FinishUpgrade();\n', '\n', '  // The M5 token contract\n', '  address M5Token_;\n', '  // The contract to manage M5 mining logic.\n', '  address M5Logic_;\n', '  // The address which controls the upgrade process\n', '  address upgradeManager_;\n', '  // When isUpgradeFinished_ is true, no more upgrades is allowed\n', '  bool isUpgradeFinished_ = false;\n', '\n', '  /**\n', '  * @dev get the M5 token address\n', '  * @return M5 token address\n', '  */\n', '  function M5Token() public view returns (address) {\n', '    return M5Token_;\n', '  }\n', '\n', '  /**\n', '  * @dev get the M5 logic contract address\n', '  * @return M5 logic contract address\n', '  */\n', '  function M5Logic() public view returns (address) {\n', '    return M5Logic_;\n', '  }\n', '\n', '  /**\n', '  * @dev get the upgrade manager address\n', '  * @return the upgrade manager address\n', '  */\n', '  function upgradeManager() public view returns (address) {\n', '    return upgradeManager_;\n', '  }\n', '\n', '  /**\n', '  * @dev get the upgrade status\n', '  * @return the upgrade status. if true, no more upgrades are possible.\n', '  */\n', '  function isUpgradeFinished() public view returns (bool) {\n', '    return isUpgradeFinished_;\n', '  }\n', '\n', '  /**\n', '  * @dev Throws if called by any account other than the GDPOracle.\n', '  */\n', '  modifier onlyUpgradeManager() {\n', '    require(msg.sender == upgradeManager_);\n', '    require(!isUpgradeFinished_);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows to set the M5 token contract \n', '   * @param newM5Token The address of the new contract\n', '   */\n', '  function upgradeM5Token(address newM5Token) public onlyUpgradeManager { // solium-disable-line\n', '    require(newM5Token != address(0));\n', '    emit M5TokenUpgrade(M5Token_, newM5Token);\n', '    M5Token_ = newM5Token;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the upgrade the M5 logic contract \n', '   * @param newM5Logic The address of the new contract\n', '   */\n', '  function upgradeM5Logic(address newM5Logic) public onlyUpgradeManager { // solium-disable-line\n', '    require(newM5Logic != address(0));\n', '    emit M5LogicUpgrade(M5Logic_, newM5Logic);\n', '    M5Logic_ = newM5Logic;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the upgrade the M5 logic contract and token at the same transaction\n', '   * @param newM5Token The address of a new M5 token\n', '   * @param newM5Logic The address of the new contract\n', '   */\n', '  function upgradeM5(address newM5Token, address newM5Logic) public onlyUpgradeManager { // solium-disable-line\n', '    require(newM5Token != address(0));\n', '    require(newM5Logic != address(0));\n', '    emit M5TokenUpgrade(M5Token_, newM5Token);\n', '    emit M5LogicUpgrade(M5Logic_, newM5Logic);\n', '    M5Token_ = newM5Token;\n', '    M5Logic_ = newM5Logic;\n', '  }\n', '\n', '  /**\n', '  * @dev Function to dismiss the upgrade capability\n', '  * @return True if the operation was successful.\n', '  */\n', '  function finishUpgrade() onlyUpgradeManager public returns (bool) {\n', '    isUpgradeFinished_ = true;\n', '    emit FinishUpgrade();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Calculate the reward if withdrawM5() happans on this block\n', '  * @notice This is a wrapper, which calls and return result from M5Logic\n', '  * the actual logic is found in the M5Logic contract\n', '  * @param _miner The address of the _miner\n', '  * @return An uint256 representing the reward amount\n', '  */\n', '  function getM5Reward(address _miner) public view returns (uint256) {\n', '    require(M5Logic_ != address(0));\n', '    if (miners[_miner].value == 0) {\n', '      return 0;\n', '    }\n', '    // check that effective block reward is indeed negative\n', '    require(signedAverage(miners[_miner].onBlockReward, blockReward_) < 0);\n', '\n', '    // return length (bytes)\n', '    uint32 returnSize = 32;\n', '    // target contract\n', '    address target = M5Logic_;\n', '    // method signeture for target contract\n', '    bytes32 signature = keccak256("getM5Reward(address)");\n', '    // size of calldata for getM5Reward function: 4 for signeture and 32 for one variable (address)\n', '    uint32 inputSize = 4 + 32;\n', '    // variable to check delegatecall result (success or failure)\n', '    uint8 callResult;\n', '    // result from target.getM5Reward()\n', '    uint256 result;\n', '    \n', '    assembly { // solium-disable-line\n', '        // return _dest.delegatecall(msg.data)\n', '        mstore(0x0, signature) // 4 bytes of method signature\n', '        mstore(0x4, _miner)    // 20 bytes of address\n', '        // delegatecall(g, a, in, insize, out, outsize)\t- call contract at address a with input mem[in..(in+insize))\n', '        // providing g gas and v wei and output area mem[out..(out+outsize)) returning 0 on error (eg. out of gas) and 1 on success\n', '        // keep caller and callvalue\n', '        callResult := delegatecall(sub(gas, 10000), target, 0x0, inputSize, 0x0, returnSize)\n', '        switch callResult \n', '        case 0 \n', '          { revert(0,0) } \n', '        default \n', '          { result := mload(0x0) }\n', '    }\n', '    return result;\n', '  }\n', '\n', '  event WithdrawM5(address indexed from,uint commitment, uint M5Reward);\n', '\n', '  /**\n', '  * @dev withdraw M5 reward, only appied to mining when GDP is negative\n', '  * @return {\n', '    "uint256 reward": the new M5 supply\n', '    "uint256 commitmentValue": the commitment to be returned\n', '    }\n', '  */\n', '  function withdrawM5() public returns (uint256 reward, uint256 commitmentValue) {\n', '    require(M5Logic_ != address(0));\n', '    require(M5Token_ != address(0));\n', '    require(miners[msg.sender].value > 0); \n', '    \n', '    // will revert if reward is positive\n', '    reward = getM5Reward(msg.sender);\n', '    commitmentValue = miners[msg.sender].value;\n', '    \n', '    require(M5Logic_.delegatecall(bytes4(keccak256("withdrawM5()")))); // solium-disable-line\n', '    \n', '    return (reward,commitmentValue);\n', '  }\n', '\n', '  //triggered when user swaps m5Value of M5 tokens for value of regular tokens.\n', '  event Swap(address indexed from, uint256 M5Value, uint256 value);\n', '\n', '  /**\n', '  * @dev swap M5 tokens back to regular tokens when GDP is back to positive \n', '  * @param _value The amount of M5 tokens to swap for regular tokens\n', '  * @return true\n', '  */\n', '  function swap(uint256 _value) public returns (bool) {\n', '    require(M5Logic_ != address(0));\n', '    require(M5Token_ != address(0));\n', '\n', '    require(M5Logic_.delegatecall(bytes4(keccak256("swap(uint256)")),_value)); // solium-disable-line\n', '    \n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title MCoin\n', ' * @dev The MonetaryCoin contract\n', ' * The MonetaryCoin contract allows for the creation of a new monetary coin.\n', ' * The supply of a minable coin in a period is defined by an oracle that reports GDP data from the country related to that coin.\n', ' * Example: If the GDP of a given country grows by 3%, then 3% more coins will be available for forging (i.e. mining) in the next period.\n', ' * Coins will be distributed by the proof of stake forging mechanism both during and after the initial distribution period.\n', ' * The Proof of stake forging is defined by the MineableToken.sol contract. \n', ' */\n', 'contract MCoin is MineableM5Token {\n', '\n', '  string public name; // solium-disable-line uppercase\n', '  string public symbol; // solium-disable-line uppercase\n', '  uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '  constructor(\n', '    string tokenName,\n', '    string tokenSymbol,\n', '    uint256 blockReward, // will be transformed using toDecimals()\n', '    address GDPOracle,\n', '    address upgradeManager\n', '    ) public \n', '    {\n', '    require(GDPOracle != address(0));\n', '    require(upgradeManager != address(0));\n', '    \n', '    name = tokenName;\n', '    symbol = tokenSymbol;\n', '\n', '    blockReward_ = toDecimals(blockReward);\n', '    emit BlockRewardChanged(0, blockReward_);\n', '\n', '    GDPOracle_ = GDPOracle;\n', '    emit GDPOracleTransferred(0x0, GDPOracle_);\n', '\n', '    M5Token_ = address(0);\n', '    M5Logic_ = address(0);\n', '    upgradeManager_ = upgradeManager;\n', '  }\n', '\n', '  function toDecimals(uint256 _value) pure internal returns (int256 value) {\n', '    value = int256 (\n', '      _value.mul(10 ** uint256(decimals))\n', '    );\n', '    assert(0 < value);\n', '    return value;\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '\n', '/** ----------------------MonetaryCoin V1.0.0 ------------------------*/\n', '\n', '/**\n', ' * Homepage: https://MonetaryCoin.org  Distribution: https://MonetaryCoin.io\n', ' *\n', ' * Full source code: https://github.com/Monetary-Foundation/MonetaryCoin\n', ' * \n', ' * Licenced MIT - The Monetary Foundation 2018\n', ' *\n', ' */\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title MineableToken\n', ' * @dev ERC20 Token with Pos mining.\n', ' * The blockReward_ is controlled by a GDP oracle tied to the national identity or currency union identity of the subject MonetaryCoin.\n', ' * This type of mining will be used during both the initial distribution period and when GDP growth is positive.\n', ' * For mining during negative growth period please refer to MineableM5Token.sol. \n', ' * Unlike standard erc20 token, the totalSupply is sum(all user balances) + totalStake instead of sum(all user balances).\n', '*/\n', 'contract MineableToken is MintableToken { \n', '  event Commit(address indexed from, uint value,uint atStake, int onBlockReward);\n', '  event Withdraw(address indexed from, uint reward, uint commitment);\n', '\n', '  uint256 totalStake_ = 0;\n', '  int256 blockReward_;         //could be positive or negative according to GDP\n', '\n', '  struct Commitment {\n', '    uint256 value;             // value commited to mining\n', '    uint256 onBlockNumber;     // commitment done on block\n', '    uint256 atStake;           // stake during commitment\n', '    int256 onBlockReward;\n', '  }\n', '\n', '  mapping( address => Commitment ) miners;\n', '\n', '  /**\n', '  * @dev commit _value for minning\n', '  * @notice the _value will be substructed from user balance and added to the stake.\n', '  * if user previously commited, add to an existing commitment. \n', '  * this is done by calling withdraw() then commit back previous commit + reward + new commit \n', '  * @param _value The amount to be commited.\n', '  * @return the commit value: _value OR prevCommit + reward + _value\n', '  */\n', '  function commit(uint256 _value) public returns (uint256 commitmentValue) {\n', '    require(0 < _value);\n', '    require(_value <= balances[msg.sender]);\n', '    \n', '    commitmentValue = _value;\n', '    uint256 prevCommit = miners[msg.sender].value;\n', '    //In case user already commited, withdraw and recommit \n', '    // new commitment value: prevCommit + reward + _value\n', '    if (0 < prevCommit) {\n', '      // withdraw Will revert if reward is negative\n', '      uint256 prevReward;\n', '      (prevReward, prevCommit) = withdraw();\n', '      commitmentValue = prevReward.add(prevCommit).add(_value);\n', '    }\n', '\n', '    // sub will revert if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(commitmentValue);\n', '    emit Transfer(msg.sender, address(0), commitmentValue);\n', '\n', '    totalStake_ = totalStake_.add(commitmentValue);\n', '\n', '    miners[msg.sender] = Commitment(\n', '      commitmentValue, // Commitment.value\n', '      block.number, // onBlockNumber\n', '      totalStake_, // atStake = current stake + commitments value\n', '      blockReward_ // onBlockReward\n', '      );\n', '    \n', '    emit Commit(msg.sender, commitmentValue, totalStake_, blockReward_); // solium-disable-line\n', '\n', '    return commitmentValue;\n', '  }\n', '\n', '  /**\n', '  * @dev withdraw reward\n', '  * @return {\n', '    "uint256 reward": the new supply\n', '    "uint256 commitmentValue": the commitment to be returned\n', '    }\n', '  */\n', '  function withdraw() public returns (uint256 reward, uint256 commitmentValue) {\n', '    require(miners[msg.sender].value > 0); \n', '\n', '    //will revert if reward is negative:\n', '    reward = getReward(msg.sender);\n', '\n', '    Commitment storage commitment = miners[msg.sender];\n', '    commitmentValue = commitment.value;\n', '\n', '    uint256 withdrawnSum = commitmentValue.add(reward);\n', '    \n', '    totalStake_ = totalStake_.sub(commitmentValue);\n', '    totalSupply_ = totalSupply_.add(reward);\n', '    \n', '    balances[msg.sender] = balances[msg.sender].add(withdrawnSum);\n', '    emit Transfer(address(0), msg.sender, commitmentValue.add(reward));\n', '    \n', '    delete miners[msg.sender];\n', '    \n', '    emit Withdraw(msg.sender, reward, commitmentValue);  // solium-disable-line\n', '    return (reward, commitmentValue);\n', '  }\n', '\n', '  /**\n', '  * @dev Calculate the reward if withdraw() happans on this block\n', '  * @notice The reward is calculated by the formula:\n', '  * (numberOfBlocks) * (effectiveBlockReward) * (commitment.value) / (effectiveStake) \n', '  * effectiveBlockReward is the average between the block reward during commit and the block reward during the call\n', '  * effectiveStake is the average between the stake during the commit and the stake during call (liniar aproximation)\n', '  * @return An uint256 representing the reward amount\n', '  */ \n', '  function getReward(address _miner) public view returns (uint256) {\n', '    if (miners[_miner].value == 0) {\n', '      return 0;\n', '    }\n', '\n', '    Commitment storage commitment = miners[_miner];\n', '\n', '    int256 averageBlockReward = signedAverage(commitment.onBlockReward, blockReward_);\n', '    \n', '    require(0 <= averageBlockReward);\n', '    \n', '    uint256 effectiveBlockReward = uint256(averageBlockReward);\n', '    \n', '    uint256 effectiveStake = average(commitment.atStake, totalStake_);\n', '    \n', '    uint256 numberOfBlocks = block.number.sub(commitment.onBlockNumber);\n', '\n', '    uint256 miningReward = numberOfBlocks.mul(effectiveBlockReward).mul(commitment.value).div(effectiveStake);\n', '       \n', '    return miningReward;\n', '  }\n', '\n', '  /**\n', '  * @dev Calculate the average of two integer numbers \n', '  * @notice 1.5 will be rounded toward zero\n', '  * @return An uint256 representing integer average\n', '  */\n', '  function average(uint256 a, uint256 b) public pure returns (uint256) {\n', '    return a.add(b).div(2);\n', '  }\n', '\n', '  /**\n', '  * @dev Calculate the average of two signed integers numbers \n', '  * @notice 1.5 will be toward zero\n', '  * @return An int256 representing integer average\n', '  */\n', '  function signedAverage(int256 a, int256 b) public pure returns (int256) {\n', '    int256 ans = a + b;\n', '\n', '    if (a > 0 && b > 0 && ans <= 0) {\n', '      require(false);\n', '    }\n', '    if (a < 0 && b < 0 && ans >= 0) {\n', '      require(false);\n', '    }\n', '\n', '    return ans / 2;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the commitment of the specified address.\n', '  * @param _miner The address to query the the commitment Of\n', '  * @return the amount commited.\n', '  */\n', '  function commitmentOf(address _miner) public view returns (uint256) {\n', '    return miners[_miner].value;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the all fields for the commitment of the specified address.\n', '  * @param _miner The address to query the the commitment Of\n', '  * @return {\n', '    "uint256 value": the amount commited.\n', '    "uint256 onBlockNumber": block number of commitment.\n', '    "uint256 atStake": stake when commited.\n', '    "int256 onBlockReward": block reward when commited.\n', '    }\n', '  */\n', '  function getCommitment(address _miner) public view \n', '  returns (\n', '    uint256 value,             // value commited to mining\n', '    uint256 onBlockNumber,     // commited on block\n', '    uint256 atStake,           // stake during commit\n', '    int256 onBlockReward       // block reward during commit\n', '    ) \n', '  {\n', '    value = miners[_miner].value;\n', '    onBlockNumber = miners[_miner].onBlockNumber;\n', '    atStake = miners[_miner].atStake;\n', '    onBlockReward = miners[_miner].onBlockReward;\n', '  }\n', '\n', '  /**\n', '  * @dev the total stake\n', '  * @return the total stake\n', '  */\n', '  function totalStake() public view returns (uint256) {\n', '    return totalStake_;\n', '  }\n', '\n', '  /**\n', '  * @dev the block reward\n', '  * @return the current block reward\n', '  */\n', '  function blockReward() public view returns (int256) {\n', '    return blockReward_;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title GDPOraclizedToken\n', ' * @dev This is an interface for the GDP Oracle to control the mining rate.\n', ' * For security reasons, two distinct functions were created: \n', ' * setPositiveGrowth() and setNegativeGrowth()\n', ' */\n', 'contract GDPOraclizedToken is MineableToken {\n', '\n', '  event GDPOracleTransferred(address indexed previousOracle, address indexed newOracle);\n', '  event BlockRewardChanged(int oldBlockReward, int newBlockReward);\n', '\n', '  address GDPOracle_;\n', '  address pendingGDPOracle_;\n', '\n', '  /**\n', '   * @dev Modifier Throws if called by any account other than the GDPOracle.\n', '   */\n', '  modifier onlyGDPOracle() {\n', '    require(msg.sender == GDPOracle_);\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingGDPOracle.\n', '   */\n', '  modifier onlyPendingGDPOracle() {\n', '    require(msg.sender == pendingGDPOracle_);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current GDPOracle to transfer control to a newOracle.\n', '   * The new GDPOracle need to call claimOracle() to finalize\n', '   * @param newOracle The address to transfer ownership to.\n', '   */\n', '  function transferGDPOracle(address newOracle) public onlyGDPOracle {\n', '    pendingGDPOracle_ = newOracle;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingGDPOracle_ address to finalize the transfer.\n', '   */\n', '  function claimOracle() onlyPendingGDPOracle public {\n', '    emit GDPOracleTransferred(GDPOracle_, pendingGDPOracle_);\n', '    GDPOracle_ = pendingGDPOracle_;\n', '    pendingGDPOracle_ = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Chnage block reward according to GDP \n', '   * @param newBlockReward the new block reward in case of possible growth\n', '   */\n', '  function setPositiveGrowth(int256 newBlockReward) public onlyGDPOracle returns(bool) {\n', '    // protect against error / overflow\n', '    require(0 <= newBlockReward);\n', '    \n', '    emit BlockRewardChanged(blockReward_, newBlockReward);\n', '    blockReward_ = newBlockReward;\n', '  }\n', '\n', '  /**\n', '   * @dev Chnage block reward according to GDP \n', '   * @param newBlockReward the new block reward in case of negative growth\n', '   */\n', '  function setNegativeGrowth(int256 newBlockReward) public onlyGDPOracle returns(bool) {\n', '    require(newBlockReward < 0);\n', '\n', '    emit BlockRewardChanged(blockReward_, newBlockReward);\n', '    blockReward_ = newBlockReward;\n', '  }\n', '\n', '  /**\n', '  * @dev get GDPOracle\n', '  * @return the address of the GDPOracle\n', '  */\n', '  function GDPOracle() public view returns (address) { // solium-disable-line mixedcase\n', '    return GDPOracle_;\n', '  }\n', '\n', '  /**\n', '  * @dev get GDPOracle\n', '  * @return the address of the GDPOracle\n', '  */\n', '  function pendingGDPOracle() public view returns (address) { // solium-disable-line mixedcase\n', '    return pendingGDPOracle_;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title MineableM5Token\n', ' * @notice This contract adds the ability to mine for M5 tokens when growth is negative.\n', ' * The M5 token is a distinct ERC20 token that may be obtained only following a period of negative GDP growth.\n', ' * The logic for M5 mining will be finalized in advance of the close of the initial distribution period – see the White Paper for additional details.\n', ' * After upgrading this contract with the final M5 logic, finishUpgrade() will be called to permanently seal the upgradeability of the contract.\n', '*/\n', 'contract MineableM5Token is GDPOraclizedToken { \n', '  \n', '  event M5TokenUpgrade(address indexed oldM5Token, address indexed newM5Token);\n', '  event M5LogicUpgrade(address indexed oldM5Logic, address indexed newM5Logic);\n', '  event FinishUpgrade();\n', '\n', '  // The M5 token contract\n', '  address M5Token_;\n', '  // The contract to manage M5 mining logic.\n', '  address M5Logic_;\n', '  // The address which controls the upgrade process\n', '  address upgradeManager_;\n', '  // When isUpgradeFinished_ is true, no more upgrades is allowed\n', '  bool isUpgradeFinished_ = false;\n', '\n', '  /**\n', '  * @dev get the M5 token address\n', '  * @return M5 token address\n', '  */\n', '  function M5Token() public view returns (address) {\n', '    return M5Token_;\n', '  }\n', '\n', '  /**\n', '  * @dev get the M5 logic contract address\n', '  * @return M5 logic contract address\n', '  */\n', '  function M5Logic() public view returns (address) {\n', '    return M5Logic_;\n', '  }\n', '\n', '  /**\n', '  * @dev get the upgrade manager address\n', '  * @return the upgrade manager address\n', '  */\n', '  function upgradeManager() public view returns (address) {\n', '    return upgradeManager_;\n', '  }\n', '\n', '  /**\n', '  * @dev get the upgrade status\n', '  * @return the upgrade status. if true, no more upgrades are possible.\n', '  */\n', '  function isUpgradeFinished() public view returns (bool) {\n', '    return isUpgradeFinished_;\n', '  }\n', '\n', '  /**\n', '  * @dev Throws if called by any account other than the GDPOracle.\n', '  */\n', '  modifier onlyUpgradeManager() {\n', '    require(msg.sender == upgradeManager_);\n', '    require(!isUpgradeFinished_);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows to set the M5 token contract \n', '   * @param newM5Token The address of the new contract\n', '   */\n', '  function upgradeM5Token(address newM5Token) public onlyUpgradeManager { // solium-disable-line\n', '    require(newM5Token != address(0));\n', '    emit M5TokenUpgrade(M5Token_, newM5Token);\n', '    M5Token_ = newM5Token;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the upgrade the M5 logic contract \n', '   * @param newM5Logic The address of the new contract\n', '   */\n', '  function upgradeM5Logic(address newM5Logic) public onlyUpgradeManager { // solium-disable-line\n', '    require(newM5Logic != address(0));\n', '    emit M5LogicUpgrade(M5Logic_, newM5Logic);\n', '    M5Logic_ = newM5Logic;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the upgrade the M5 logic contract and token at the same transaction\n', '   * @param newM5Token The address of a new M5 token\n', '   * @param newM5Logic The address of the new contract\n', '   */\n', '  function upgradeM5(address newM5Token, address newM5Logic) public onlyUpgradeManager { // solium-disable-line\n', '    require(newM5Token != address(0));\n', '    require(newM5Logic != address(0));\n', '    emit M5TokenUpgrade(M5Token_, newM5Token);\n', '    emit M5LogicUpgrade(M5Logic_, newM5Logic);\n', '    M5Token_ = newM5Token;\n', '    M5Logic_ = newM5Logic;\n', '  }\n', '\n', '  /**\n', '  * @dev Function to dismiss the upgrade capability\n', '  * @return True if the operation was successful.\n', '  */\n', '  function finishUpgrade() onlyUpgradeManager public returns (bool) {\n', '    isUpgradeFinished_ = true;\n', '    emit FinishUpgrade();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Calculate the reward if withdrawM5() happans on this block\n', '  * @notice This is a wrapper, which calls and return result from M5Logic\n', '  * the actual logic is found in the M5Logic contract\n', '  * @param _miner The address of the _miner\n', '  * @return An uint256 representing the reward amount\n', '  */\n', '  function getM5Reward(address _miner) public view returns (uint256) {\n', '    require(M5Logic_ != address(0));\n', '    if (miners[_miner].value == 0) {\n', '      return 0;\n', '    }\n', '    // check that effective block reward is indeed negative\n', '    require(signedAverage(miners[_miner].onBlockReward, blockReward_) < 0);\n', '\n', '    // return length (bytes)\n', '    uint32 returnSize = 32;\n', '    // target contract\n', '    address target = M5Logic_;\n', '    // method signeture for target contract\n', '    bytes32 signature = keccak256("getM5Reward(address)");\n', '    // size of calldata for getM5Reward function: 4 for signeture and 32 for one variable (address)\n', '    uint32 inputSize = 4 + 32;\n', '    // variable to check delegatecall result (success or failure)\n', '    uint8 callResult;\n', '    // result from target.getM5Reward()\n', '    uint256 result;\n', '    \n', '    assembly { // solium-disable-line\n', '        // return _dest.delegatecall(msg.data)\n', '        mstore(0x0, signature) // 4 bytes of method signature\n', '        mstore(0x4, _miner)    // 20 bytes of address\n', '        // delegatecall(g, a, in, insize, out, outsize)\t- call contract at address a with input mem[in..(in+insize))\n', '        // providing g gas and v wei and output area mem[out..(out+outsize)) returning 0 on error (eg. out of gas) and 1 on success\n', '        // keep caller and callvalue\n', '        callResult := delegatecall(sub(gas, 10000), target, 0x0, inputSize, 0x0, returnSize)\n', '        switch callResult \n', '        case 0 \n', '          { revert(0,0) } \n', '        default \n', '          { result := mload(0x0) }\n', '    }\n', '    return result;\n', '  }\n', '\n', '  event WithdrawM5(address indexed from,uint commitment, uint M5Reward);\n', '\n', '  /**\n', '  * @dev withdraw M5 reward, only appied to mining when GDP is negative\n', '  * @return {\n', '    "uint256 reward": the new M5 supply\n', '    "uint256 commitmentValue": the commitment to be returned\n', '    }\n', '  */\n', '  function withdrawM5() public returns (uint256 reward, uint256 commitmentValue) {\n', '    require(M5Logic_ != address(0));\n', '    require(M5Token_ != address(0));\n', '    require(miners[msg.sender].value > 0); \n', '    \n', '    // will revert if reward is positive\n', '    reward = getM5Reward(msg.sender);\n', '    commitmentValue = miners[msg.sender].value;\n', '    \n', '    require(M5Logic_.delegatecall(bytes4(keccak256("withdrawM5()")))); // solium-disable-line\n', '    \n', '    return (reward,commitmentValue);\n', '  }\n', '\n', '  //triggered when user swaps m5Value of M5 tokens for value of regular tokens.\n', '  event Swap(address indexed from, uint256 M5Value, uint256 value);\n', '\n', '  /**\n', '  * @dev swap M5 tokens back to regular tokens when GDP is back to positive \n', '  * @param _value The amount of M5 tokens to swap for regular tokens\n', '  * @return true\n', '  */\n', '  function swap(uint256 _value) public returns (bool) {\n', '    require(M5Logic_ != address(0));\n', '    require(M5Token_ != address(0));\n', '\n', '    require(M5Logic_.delegatecall(bytes4(keccak256("swap(uint256)")),_value)); // solium-disable-line\n', '    \n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title MCoin\n', ' * @dev The MonetaryCoin contract\n', ' * The MonetaryCoin contract allows for the creation of a new monetary coin.\n', ' * The supply of a minable coin in a period is defined by an oracle that reports GDP data from the country related to that coin.\n', ' * Example: If the GDP of a given country grows by 3%, then 3% more coins will be available for forging (i.e. mining) in the next period.\n', ' * Coins will be distributed by the proof of stake forging mechanism both during and after the initial distribution period.\n', ' * The Proof of stake forging is defined by the MineableToken.sol contract. \n', ' */\n', 'contract MCoin is MineableM5Token {\n', '\n', '  string public name; // solium-disable-line uppercase\n', '  string public symbol; // solium-disable-line uppercase\n', '  uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '  constructor(\n', '    string tokenName,\n', '    string tokenSymbol,\n', '    uint256 blockReward, // will be transformed using toDecimals()\n', '    address GDPOracle,\n', '    address upgradeManager\n', '    ) public \n', '    {\n', '    require(GDPOracle != address(0));\n', '    require(upgradeManager != address(0));\n', '    \n', '    name = tokenName;\n', '    symbol = tokenSymbol;\n', '\n', '    blockReward_ = toDecimals(blockReward);\n', '    emit BlockRewardChanged(0, blockReward_);\n', '\n', '    GDPOracle_ = GDPOracle;\n', '    emit GDPOracleTransferred(0x0, GDPOracle_);\n', '\n', '    M5Token_ = address(0);\n', '    M5Logic_ = address(0);\n', '    upgradeManager_ = upgradeManager;\n', '  }\n', '\n', '  function toDecimals(uint256 _value) pure internal returns (int256 value) {\n', '    value = int256 (\n', '      _value.mul(10 ** uint256(decimals))\n', '    );\n', '    assert(0 < value);\n', '    return value;\n', '  }\n', '\n', '}']
