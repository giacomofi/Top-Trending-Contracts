['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract SelfllerySaleFoundation is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    // Amount of Ether paid from each address\n', '    mapping (address => uint) public paidEther;\n', '    // Pre-sale participant tokens for each address\n', '    mapping (address => uint) public preSaleParticipantTokens;\n', '    // Number of tokens was sent during the ICO for each address\n', '    mapping (address => uint) public sentTokens;\n', '\n', '    // SELFLLERY PTE LTD (manager wallet)\n', '    address public selflleryManagerWallet;\n', '    // The token contract used for this ICO\n', '    ERC20 public token;\n', '    // Number of cents for 1 YOU\n', '    uint public tokenCents;\n', '    // The token price from 1 wei\n', '    uint public tokenPriceWei;\n', '    // Number of tokens in cents for sale\n', '    uint public saleTokensCents;\n', '\n', '    // The amount purchased tokens at the moment\n', '    uint public currentCapTokens;\n', '    // The amount of Ether raised at the moment\n', '    uint public currentCapEther;\n', '    // Start date of the ICO\n', '    uint public startDate;\n', '    // End date of bonus time\n', '    uint public bonusEndDate;\n', '    // End date of the ICO\n', '    uint public endDate;\n', '    // Hard cap of tokens\n', '    uint public hardCapTokens;\n', '    // The minimum purchase for user\n', '    uint public minimumPurchaseAmount;\n', '    // The bonus percent for purchase first 48 hours\n', '    uint8 public bonusPercent;\n', '\n', '    event PreSalePurchase(address indexed purchasedBy, uint amountTokens);\n', '\n', '    event Purchase(address indexed purchasedBy, uint amountTokens, uint etherWei);\n', '\n', '    /**\n', '    * @dev Throws if date isn&#39;t between ICO dates.\n', '    */\n', '    modifier onlyDuringICODates() {\n', '        require(now >= startDate && now <= endDate);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Initialize the ICO contract\n', '    */\n', '    function SelfllerySaleFoundation(\n', '        address _token,\n', '        address _selflleryManagerWallet,\n', '        uint _tokenCents,\n', '        uint _tokenPriceWei,\n', '        uint _saleTokensCents,\n', '        uint _startDate,\n', '        uint _bonusEndDate,\n', '        uint _endDate,\n', '        uint _hardCapTokens,\n', '        uint _minimumPurchaseAmount,\n', '        uint8 _bonusPercent\n', '    )\n', '        public\n', '        Ownable()\n', '    {\n', '        token = ERC20(_token);\n', '        selflleryManagerWallet = _selflleryManagerWallet;\n', '        tokenCents = _tokenCents;\n', '        tokenPriceWei = _tokenPriceWei;\n', '        saleTokensCents = _saleTokensCents;\n', '        startDate = _startDate;\n', '        bonusEndDate = _bonusEndDate;\n', '        endDate = _endDate;\n', '        hardCapTokens = _hardCapTokens;\n', '        minimumPurchaseAmount = _minimumPurchaseAmount;\n', '        bonusPercent = _bonusPercent;\n', '    }\n', '\n', '    /**\n', '     * @dev Purchase tokens for the amount of ether sent to this contract\n', '     */\n', '    function () public payable {\n', '        purchase();\n', '    }\n', '\n', '    /**\n', '     * @dev Purchase tokens for the amount of ether sent to this contract\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function purchase() public payable returns(bool) {\n', '        return purchaseFor(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Purchase tokens for the amount of ether sent to this contract for custom address\n', '     * @param _participant The address of the participant\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function purchaseFor(address _participant) public payable onlyDuringICODates() returns(bool) {\n', '        require(_participant != 0x0);\n', '        require(paidEther[_participant].add(msg.value) >= minimumPurchaseAmount);\n', '\n', '        selflleryManagerWallet.transfer(msg.value);\n', '\n', '        uint currentBonusPercent = getCurrentBonusPercent();\n', '        uint totalTokens = calcTotalTokens(msg.value, currentBonusPercent);\n', '        require(currentCapTokens.add(totalTokens) <= saleTokensCents);\n', '        require(token.transferFrom(owner, _participant, totalTokens));\n', '        sentTokens[_participant] = sentTokens[_participant].add(totalTokens);\n', '        currentCapTokens = currentCapTokens.add(totalTokens);\n', '        currentCapEther = currentCapEther.add(msg.value);\n', '        paidEther[_participant] = paidEther[_participant].add(msg.value);\n', '        Purchase(_participant, totalTokens, msg.value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Change minimum purchase amount any time only owner\n', '     * @param _newMinimumPurchaseAmount New minimum puchase amount\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function changeMinimumPurchaseAmount(uint _newMinimumPurchaseAmount) public onlyOwner returns(bool) {\n', '        require(_newMinimumPurchaseAmount >= 0);\n', '        minimumPurchaseAmount = _newMinimumPurchaseAmount;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Add pre-sale purchased tokens only owner\n', '     * @param _participant The address of the participant\n', '     * @param _totalTokens Total tokens amount for pre-sale participant\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function addPreSalePurchaseTokens(address _participant, uint _totalTokens) public onlyOwner returns(bool) {\n', '        require(_participant != 0x0);\n', '        require(_totalTokens > 0);\n', '        require(currentCapTokens.add(_totalTokens) <= saleTokensCents);\n', '\n', '        require(token.transferFrom(owner, _participant, _totalTokens));\n', '        sentTokens[_participant] = sentTokens[_participant].add(_totalTokens);\n', '        preSaleParticipantTokens[_participant] = preSaleParticipantTokens[_participant].add(_totalTokens);\n', '        currentCapTokens = currentCapTokens.add(_totalTokens);\n', '        PreSalePurchase(_participant, _totalTokens);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Is finish date ICO reached?\n', '     * @return A boolean that indicates if finish date ICO reached.\n', '     */\n', '    function isFinishDateReached() public constant returns(bool) {\n', '        return endDate <= now;\n', '    }\n', '\n', '    /**\n', '     * @dev Is hard cap tokens reached?\n', '     * @return A boolean that indicates if hard cap tokens reached.\n', '     */\n', '    function isHardCapTokensReached() public constant returns(bool) {\n', '        return hardCapTokens <= currentCapTokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Is ICO Finished?\n', '     * @return A boolean that indicates if ICO finished.\n', '     */\n', '    function isIcoFinished() public constant returns(bool) {\n', '        return isFinishDateReached() || isHardCapTokensReached();\n', '    }\n', '\n', '    /**\n', '     * @dev Calc total tokens for fixed value and bonus percent\n', '     * @param _value Amount of ether\n', '     * @param _bonusPercent Bonus percent\n', '     * @return uint\n', '     */\n', '    function calcTotalTokens(uint _value, uint _bonusPercent) internal view returns(uint) {\n', '        uint tokensAmount = _value.mul(tokenCents).div(tokenPriceWei);\n', '        require(tokensAmount > 0);\n', '        uint bonusTokens = tokensAmount.mul(_bonusPercent).div(100);\n', '        uint totalTokens = tokensAmount.add(bonusTokens);\n', '        return totalTokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Get current bonus percent for this transaction\n', '     * @return uint\n', '     */\n', '    function getCurrentBonusPercent() internal constant returns (uint) {\n', '        uint currentBonusPercent;\n', '        if (now <= bonusEndDate) {\n', '            currentBonusPercent = bonusPercent;\n', '        } else {\n', '            currentBonusPercent = 0;\n', '        }\n', '        return currentBonusPercent;\n', '    }\n', '}\n', '\n', 'contract SelfllerySale is SelfllerySaleFoundation {\n', '    address constant TOKEN_ADDRESS = 0x7e921CA9b78d9A6cCC39891BA545836365525C06; // Token YOU\n', '    address constant SELFLLERY_MANAGER_WALLET = 0xdABb398298192192e5d4Ed2f120Ff7Af312B06eb;// SELFLLERY PTE LTD\n', '    uint constant TOKEN_CENTS = 1e18;\n', '    uint constant TOKEN_PRICE_WEI = 1e15;\n', '    uint constant SALE_TOKENS_CENTS = 55000000 * TOKEN_CENTS;\n', '    uint constant SALE_HARD_CAP_TOKENS = 55000000 * TOKEN_CENTS;\n', '\n', '    uint8 constant BONUS_PERCENT = 5;\n', '    uint constant MINIMUM_PURCHASE_AMOUNT = 0.1 ether;\n', '\n', '    uint constant SALE_START_DATE = 1520240400; // 05.03.2018 9:00 UTC\n', '    uint constant SALE_BONUS_END_DATE = 1520413200; // 07.03.2018 9:00 UTC\n', '    uint constant SALE_END_DATE = 1522144800; // 27.03.2018 10:00 UTC\n', '\n', '    /**\n', '     * @dev Initialize the ICO contract\n', '    */\n', '    function SelfllerySale()\n', '        public\n', '        SelfllerySaleFoundation(\n', '            TOKEN_ADDRESS,\n', '            SELFLLERY_MANAGER_WALLET,\n', '            TOKEN_CENTS,\n', '            TOKEN_PRICE_WEI,\n', '            SALE_TOKENS_CENTS,\n', '            SALE_START_DATE,\n', '            SALE_BONUS_END_DATE,\n', '            SALE_END_DATE,\n', '            SALE_HARD_CAP_TOKENS,\n', '            MINIMUM_PURCHASE_AMOUNT,\n', '            BONUS_PERCENT\n', '        ) {}\n', '}']