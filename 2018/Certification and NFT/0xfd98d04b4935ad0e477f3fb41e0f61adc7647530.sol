['pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/*\n', ' * Manager that stores permitted addresses \n', ' */\n', 'contract PermissionManager is Ownable {\n', '    mapping (address => bool) permittedAddresses;\n', '\n', '    function addAddress(address newAddress) public onlyOwner {\n', '        permittedAddresses[newAddress] = true;\n', '    }\n', '\n', '    function removeAddress(address remAddress) public onlyOwner {\n', '        permittedAddresses[remAddress] = false;\n', '    }\n', '\n', '    function isPermitted(address pAddress) public view returns(bool) {\n', '        if (permittedAddresses[pAddress]) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '}\n', '\n', 'contract Registry is Ownable {\n', '\n', '  struct ContributorData {\n', '    bool isActive;\n', '    uint contributionETH;\n', '    uint contributionUSD;\n', '    uint tokensIssued;\n', '    uint quoteUSD;\n', '    uint contributionRNTB;\n', '  }\n', '  mapping(address => ContributorData) public contributorList;\n', '  mapping(uint => address) private contributorIndexes;\n', '\n', '  uint private nextContributorIndex;\n', '\n', '  /* Permission manager contract */\n', '  PermissionManager public permissionManager;\n', '\n', '  bool public completed;\n', '\n', '  modifier onlyPermitted() {\n', '    require(permissionManager.isPermitted(msg.sender));\n', '    _;\n', '  }\n', '\n', '  event ContributionAdded(address _contributor, uint overallEth, uint overallUSD, uint overallToken, uint quote);\n', '  event ContributionEdited(address _contributor, uint overallEth, uint overallUSD,  uint overallToken, uint quote);\n', '  function Registry(address pManager) public {\n', '    permissionManager = PermissionManager(pManager); \n', '    completed = false;\n', '  }\n', '\n', '  function setPermissionManager(address _permadr) public onlyOwner {\n', '    require(_permadr != 0x0);\n', '    permissionManager = PermissionManager(_permadr);\n', '  }\n', '\n', '  function isActiveContributor(address contributor) public view returns(bool) {\n', '    return contributorList[contributor].isActive;\n', '  }\n', '\n', '  function removeContribution(address contributor) public onlyPermitted {\n', '    contributorList[contributor].isActive = false;\n', '  }\n', '\n', '  function setCompleted(bool compl) public onlyPermitted {\n', '    completed = compl;\n', '  }\n', '\n', '  function addContribution(address _contributor, uint _amount, uint _amusd, uint _tokens, uint _quote ) public onlyPermitted {\n', '    \n', '    if (contributorList[_contributor].isActive == false) {\n', '        contributorList[_contributor].isActive = true;\n', '        contributorList[_contributor].contributionETH = _amount;\n', '        contributorList[_contributor].contributionUSD = _amusd;\n', '        contributorList[_contributor].tokensIssued = _tokens;\n', '        contributorList[_contributor].quoteUSD = _quote;\n', '\n', '        contributorIndexes[nextContributorIndex] = _contributor;\n', '        nextContributorIndex++;\n', '    } else {\n', '      contributorList[_contributor].contributionETH += _amount;\n', '      contributorList[_contributor].contributionUSD += _amusd;\n', '      contributorList[_contributor].tokensIssued += _tokens;\n', '      contributorList[_contributor].quoteUSD = _quote;\n', '    }\n', '    ContributionAdded(_contributor, contributorList[_contributor].contributionETH, contributorList[_contributor].contributionUSD, contributorList[_contributor].tokensIssued, contributorList[_contributor].quoteUSD);\n', '  }\n', '\n', '  function editContribution(address _contributor, uint _amount, uint _amusd, uint _tokens, uint _quote) public onlyPermitted {\n', '    if (contributorList[_contributor].isActive == true) {\n', '        contributorList[_contributor].contributionETH = _amount;\n', '        contributorList[_contributor].contributionUSD = _amusd;\n', '        contributorList[_contributor].tokensIssued = _tokens;\n', '        contributorList[_contributor].quoteUSD = _quote;\n', '    }\n', '     ContributionEdited(_contributor, contributorList[_contributor].contributionETH, contributorList[_contributor].contributionUSD, contributorList[_contributor].tokensIssued, contributorList[_contributor].quoteUSD);\n', '  }\n', '\n', '  function addContributor(address _contributor, uint _amount, uint _amusd, uint _tokens, uint _quote) public onlyPermitted {\n', '    contributorList[_contributor].isActive = true;\n', '    contributorList[_contributor].contributionETH = _amount;\n', '    contributorList[_contributor].contributionUSD = _amusd;\n', '    contributorList[_contributor].tokensIssued = _tokens;\n', '    contributorList[_contributor].quoteUSD = _quote;\n', '    contributorIndexes[nextContributorIndex] = _contributor;\n', '    nextContributorIndex++;\n', '    ContributionAdded(_contributor, contributorList[_contributor].contributionETH, contributorList[_contributor].contributionUSD, contributorList[_contributor].tokensIssued, contributorList[_contributor].quoteUSD);\n', ' \n', '  }\n', '\n', '  function getContributionETH(address _contributor) public view returns (uint) {\n', '      return contributorList[_contributor].contributionETH;\n', '  }\n', '\n', '  function getContributionUSD(address _contributor) public view returns (uint) {\n', '      return contributorList[_contributor].contributionUSD;\n', '  }\n', '\n', '  function getContributionRNTB(address _contributor) public view returns (uint) {\n', '      return contributorList[_contributor].contributionRNTB;\n', '  }\n', '\n', '  function getContributionTokens(address _contributor) public view returns (uint) {\n', '      return contributorList[_contributor].tokensIssued;\n', '  }\n', '\n', '  function addRNTBContribution(address _contributor, uint _amount) public onlyPermitted {\n', '    if (contributorList[_contributor].isActive == false) {\n', '        contributorList[_contributor].isActive = true;\n', '        contributorList[_contributor].contributionRNTB = _amount;\n', '        contributorIndexes[nextContributorIndex] = _contributor;\n', '        nextContributorIndex++;\n', '    } else {\n', '      contributorList[_contributor].contributionETH += _amount;\n', '    }\n', '  }\n', '\n', '  function getContributorByIndex(uint index) public view  returns (address) {\n', '      return contributorIndexes[index];\n', '  }\n', '\n', '  function getContributorAmount() public view returns(uint) {\n', '      return nextContributorIndex;\n', '  }\n', '\n', '}']