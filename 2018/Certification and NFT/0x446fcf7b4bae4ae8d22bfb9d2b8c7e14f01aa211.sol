['pragma solidity ^0.4.13;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract TVCrowdsale {\n', '    uint256 public currentRate;\n', '    function buyTokens(address _beneficiary) public payable;\n', '}\n', '\n', 'contract TVToken {\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function balanceOf(address _owner) public view returns (uint256);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '}\n', '\n', 'contract TVRefCrowdsale is Ownable {\n', '    TVToken public TVContract;\n', '    TVCrowdsale public TVCrowdsaleContract;\n', '    uint256 public refPercentage;\n', '    uint256 public TVThreshold;\n', '    address public holder;\n', '    mapping(address => bool) public exceptAddresses;\n', '\n', '    event TransferRefTVs(address holder, address sender, address referer, uint256 amount, uint256 TVThreshold, uint256 balance);\n', '    event BuyTokens(address sender, uint256 amount);\n', '\n', '    constructor(\n', '        address _TVTokenContract,\n', '        address _TVCrowdsaleContract,\n', '        uint256 _refPercentage,\n', '        uint256 _TVThreshold,\n', '        address _holder\n', '    ) public {\n', '        TVContract = TVToken(_TVTokenContract);\n', '        TVCrowdsaleContract = TVCrowdsale(_TVCrowdsaleContract);\n', '        refPercentage = _refPercentage;\n', '        TVThreshold = _TVThreshold;\n', '        holder = _holder;\n', '    }\n', '\n', '    function buyTokens(address refAddress) public payable {\n', '        TVCrowdsaleContract.buyTokens.value(msg.value)(msg.sender);\n', '        emit BuyTokens(msg.sender, msg.value);\n', '        sendRefTVs(refAddress);\n', '    }\n', '\n', '    function sendRefTVs(address refAddress) internal returns(bool) {\n', '        uint256 balance = TVContract.balanceOf(refAddress);\n', '        uint256 allowance = TVContract.allowance(holder, this);\n', '        uint256 amount = (msg.value * TVCrowdsaleContract.currentRate()) * refPercentage / 100;\n', '        if ((exceptAddresses[refAddress] || balance >= TVThreshold) && allowance >= amount) {\n', '            bool successful = TVContract.transferFrom(holder, refAddress, amount);\n', '            if (!successful) revert("Transfer refTVs failed.");\n', '            emit TransferRefTVs(holder, msg.sender, refAddress, amount, TVThreshold, balance);\n', '            return true;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function changeRefPercentage(uint256 percentage) onlyOwner public {\n', '        require(percentage > 0);\n', '        refPercentage = percentage;\n', '    }\n', '\n', '    function addExceptAddress(address exceptAddress) onlyOwner public {\n', '        exceptAddresses[exceptAddress] = true;\n', '    }\n', '\n', '    function changeThreshold(uint256 threshold) onlyOwner public {\n', '        require(threshold > 0);\n', '        TVThreshold = threshold;\n', '    }\n', '}']