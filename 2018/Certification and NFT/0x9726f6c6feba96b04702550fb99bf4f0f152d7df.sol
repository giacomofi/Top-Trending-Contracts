['pragma solidity ^0.4.24;\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', 'contract Airdrop is Ownable {\n', '\n', '    ERC20Basic token;\n', '\n', '    constructor(address tokenAddress) public {\n', '        token = ERC20Basic(tokenAddress);\n', '    }\n', '\n', '    function sendWinnings(address[] winners, uint256[] amounts) public onlyOwner {\n', '        require(winners.length == amounts.length,"The number of winners must match the number of amounts");\n', '        require(winners.length <= 64);\n', '        for (uint i = 0; i < winners.length; i++) {\n', '            token.transfer(winners[i], amounts[i]);\n', '        }\n', '    }\n', '\n', '    function withdraw() public onlyOwner {\n', '        uint256 currentSupply = token.balanceOf(address(this));\n', '        token.transfer(owner, currentSupply);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', 'contract Airdrop is Ownable {\n', '\n', '    ERC20Basic token;\n', '\n', '    constructor(address tokenAddress) public {\n', '        token = ERC20Basic(tokenAddress);\n', '    }\n', '\n', '    function sendWinnings(address[] winners, uint256[] amounts) public onlyOwner {\n', '        require(winners.length == amounts.length,"The number of winners must match the number of amounts");\n', '        require(winners.length <= 64);\n', '        for (uint i = 0; i < winners.length; i++) {\n', '            token.transfer(winners[i], amounts[i]);\n', '        }\n', '    }\n', '\n', '    function withdraw() public onlyOwner {\n', '        uint256 currentSupply = token.balanceOf(address(this));\n', '        token.transfer(owner, currentSupply);\n', '    }\n', '\n', '}']
