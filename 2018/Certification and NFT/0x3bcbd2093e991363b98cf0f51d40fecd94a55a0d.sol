['pragma solidity ^0.4.19;\n', '\n', '// DopeRaider Narcos Contract\n', '// by gasmasters.io\n', '// contact: team@doperaider.com\n', '\n', 'contract DistrictsCoreInterface {\n', '  // callable by other contracts to control economy\n', '  function isDopeRaiderDistrictsCore() public pure returns (bool);\n', '  function increaseDistrictWeed(uint256 _district, uint256 _quantity) public;\n', '  function increaseDistrictCoke(uint256 _district, uint256 _quantity) public;\n', '  function distributeRevenue(uint256 _district , uint8 _splitW, uint8 _splitC) public payable;\n', '  function getNarcoLocation(uint256 _narcoId) public view returns (uint8 location);\n', '}\n', '\n', '/// @title sale clock auction interface\n', 'contract SaleClockAuction {\n', '  function isSaleClockAuction() public pure returns (bool);\n', '  function createAuction(uint256 _tokenId,  uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)public;\n', '  function withdrawBalance() public;\n', '  function averageGen0SalePrice() public view returns (uint256);\n', '\n', '}\n', '\n', '\n', '//// @title A facet of NarcoCore that manages special access privileges.\n', 'contract NarcoAccessControl {\n', '    /// @dev Emited when contract is upgraded\n', '    event ContractUpgrade(address newContract);\n', '\n', '    address public ceoAddress;\n', '    address public cooAddress;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '\n', '    modifier onlyCEO() {\n', '        require(msg.sender == ceoAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCLevel() {\n', '        require(\n', '            msg.sender == cooAddress ||\n', '            msg.sender == ceoAddress\n', '        );\n', '        _;\n', '    }\n', '\n', '    function setCEO(address _newCEO) public onlyCEO {\n', '        require(_newCEO != address(0));\n', '\n', '        ceoAddress = _newCEO;\n', '    }\n', '\n', '    function setCOO(address _newCOO) public onlyCEO {\n', '        require(_newCOO != address(0));\n', '\n', '        cooAddress = _newCOO;\n', '    }\n', '\n', '    function withdrawBalance() external onlyCLevel {\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '\n', '\n', '    /*** Pausable functionality adapted from OpenZeppelin ***/\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function pause() public onlyCLevel whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    function unpause() public onlyCLevel whenPaused {\n', '        // can&#39;t unpause if contract was upgraded\n', '        paused = false;\n', '    }\n', '\n', '    /// @dev The address of the calling contract\n', '    address public districtContractAddress;\n', '\n', '    DistrictsCoreInterface public districtsCore;\n', '\n', '    function setDistrictAddress(address _address) public onlyCLevel {\n', '        _setDistrictAddresss(_address);\n', '    }\n', '\n', '    function _setDistrictAddresss(address _address) internal {\n', '      DistrictsCoreInterface candidateContract = DistrictsCoreInterface(_address);\n', '      require(candidateContract.isDopeRaiderDistrictsCore());\n', '      districtsCore = candidateContract;\n', '      districtContractAddress = _address;\n', '    }\n', '\n', '\n', '    modifier onlyDopeRaiderContract() {\n', '        require(msg.sender == districtContractAddress);\n', '        _;\n', '    }\n', '\n', '\n', '\n', '\n', '}\n', '\n', '/// @title Base contract for DopeRaider. Holds all common structs, events and base variables.\n', 'contract NarcoBase is NarcoAccessControl {\n', '    /*** EVENTS ***/\n', '\n', '    event NarcoCreated(address indexed owner, uint256 narcoId, string genes);\n', '\n', '    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a narcos\n', '    ///  ownership is assigned, including newly created narcos.\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '\n', ' /*** DATA TYPES ***/\n', '\n', '    // consumable indexes\n', '    /*\n', '    uint constant gasIndex = 0;\n', '    uint constant seedsIndex = 1;\n', '    uint constant chemicalsIndex = 2;\n', '    uint constant ammoIndex = 3;\n', '\n', '    // skills indexes  - each skill can range from 1 - 10 in level\n', '    uint constant speedIndex = 0; // speed of travel\n', '    uint constant growIndex = 1; // speed/yield of grow\n', '    uint constant refineIndex = 2; // refine coke\n', '    uint constant attackIndex = 3; // attack\n', '    uint constant defenseIndex = 4; // defense\n', '    uint constant capacityIndex = 5; // how many items can be carried.\n', '\n', '    // stat indexes\n', '    uint constant dealsCompleted = 0; // dealsCompleted\n', '    uint constant weedGrowCompleted = 1; // weedGrowCompleted\n', '    uint constant cokeRefineCompleted = 2; // refineCompleted\n', '    uint constant attacksSucceeded = 3; // attacksSucceeded\n', '    uint constant defendedSuccessfully = 4; defendedSuccessfully\n', '    uint constant raidsCompleted = 5; // raidsCompleted\n', '    uint constant escapeHijack = 6; // escapeHijack\n', '    uint constant travelling = 7; // traveller\n', '    uint constant recruited = 8; // recruitment\n', '*/\n', '\n', '\n', '    /// @dev The main Narco struct. Every narco in DopeRaider is represented by a copy\n', '    ///  of this structure.\n', '    struct Narco {\n', '        // The Narco&#39;s genetic code is packed into these 256-bits.\n', '        string genes; // represents his avatar\n', '        string narcoName;\n', '        // items making level\n', '        uint16 [9] stats;\n', '        // inventory totals\n', '        uint16 weedTotal;\n', '        uint16 cokeTotal;\n', '        uint8 [4] consumables; // gas, seeds, chemicals, ammo\n', '        uint16 [6] skills;   // travel time, grow, refine, attack, defend carry\n', '        uint256 [6] cooldowns; // skill cooldown periods speed, grow, refine, attack, others if needed\n', '        uint8 homeLocation;\n', '    }\n', '\n', '    /*** STORAGE ***/\n', '\n', '    /// @dev An array containing the Narco struct for all Narcos in existence. The ID\n', '    ///  of each narco is actually an index into this array.\n', '    Narco[] narcos;\n', '\n', '    /// @dev A mapping from  narco IDs to the address that owns them. All  narcos have\n', '    ///  some valid owner address, even gen0  narcos are created with a non-zero owner.\n', '    mapping (uint256 => address) public narcoIndexToOwner;\n', '\n', '    // @dev A mapping from owner address to count of tokens that address owns.\n', '    //  Used internally inside balanceOf() to resolve ownership count.\n', '    mapping (address => uint256) ownershipTokenCount;\n', '\n', '    /// @dev A mapping from NarcoIDs to an address that has been approved to call\n', '    ///  transferFrom(). A zero value means no approval is outstanding.\n', '    mapping (uint256 => address) public  narcoIndexToApproved;\n', '\n', '    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n', '        // since the number of  narcos is capped to 2^32\n', '        // there is no way to overflow this\n', '        ownershipTokenCount[_to]++;\n', '        narcoIndexToOwner[_tokenId] = _to;\n', '\n', '        if (_from != address(0)) {\n', '            ownershipTokenCount[_from]--;\n', '            delete narcoIndexToApproved[_tokenId];\n', '        }\n', '\n', '        Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    // Will generate a new Narco and generate the event\n', '    function _createNarco(\n', '        string _genes,\n', '        string _name,\n', '        address _owner\n', '    )\n', '        internal\n', '        returns (uint)\n', '    {\n', '\n', '        uint16[6] memory randomskills= [\n', '            uint16(random(9)+1),\n', '            uint16(random(9)+1),\n', '            uint16(random(9)+1),\n', '            uint16(random(9)+1),\n', '            uint16(random(9)+1),\n', '            uint16(random(9)+31)\n', '        ];\n', '\n', '        uint256[6] memory cools;\n', '        uint16[9] memory nostats;\n', '\n', '        Narco memory _narco = Narco({\n', '            genes: _genes,\n', '            narcoName: _name,\n', '            cooldowns: cools,\n', '            stats: nostats,\n', '            weedTotal: 0,\n', '            cokeTotal: 0,\n', '            consumables: [4,6,2,1],\n', '            skills: randomskills,\n', '            homeLocation: uint8(random(6)+1)\n', '        });\n', '\n', '        uint256 newNarcoId = narcos.push(_narco) - 1;\n', '        require(newNarcoId <= 4294967295);\n', '\n', '        // raid character (token 0) live in 7 and have random special skills\n', '        if (newNarcoId==0){\n', '            narcos[0].homeLocation=7; // in vice island\n', '            narcos[0].skills[4]=800; // defense\n', '            narcos[0].skills[5]=65535; // carry\n', '        }\n', '\n', '        NarcoCreated(_owner, newNarcoId, _narco.genes);\n', '        _transfer(0, _owner, newNarcoId);\n', '\n', '\n', '        return newNarcoId;\n', '    }\n', '\n', '    function subToZero(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (b <= a){\n', '          return a - b;\n', '        }else{\n', '          return 0;\n', '        }\n', '      }\n', '\n', '    function getRemainingCapacity(uint256 _narcoId) public view returns (uint16 capacity){\n', '        uint256 usedCapacity = narcos[_narcoId].weedTotal + narcos[_narcoId].cokeTotal + narcos[_narcoId].consumables[0]+narcos[_narcoId].consumables[1]+narcos[_narcoId].consumables[2]+narcos[_narcoId].consumables[3];\n', '        capacity = uint16(subToZero(uint256(narcos[_narcoId].skills[5]), usedCapacity));\n', '    }\n', '\n', '    // respect it&#39;s called now\n', '    function getLevel(uint256 _narcoId) public view returns (uint16 rank){\n', '\n', '    /*\n', '      dealsCompleted = 0; // dealsCompleted\n', '      weedGrowCompleted = 1; // weedGrowCompleted\n', '      cokeRefineCompleted = 2; // refineCompleted\n', '      attacksSucceeded = 3; // attacksSucceeded\n', '      defendedSuccessfully = 4; defendedSuccessfully\n', '      raidsCompleted = 5; // raidsCompleted\n', '      escapeHijack = 6; // escapeHijack\n', '      travel = 7; // travelling\n', '    */\n', '\n', '        rank =  (narcos[_narcoId].stats[0]/12)+\n', '                 (narcos[_narcoId].stats[1]/4)+\n', '                 (narcos[_narcoId].stats[2]/4)+\n', '                 (narcos[_narcoId].stats[3]/6)+\n', '                 (narcos[_narcoId].stats[4]/6)+\n', '                 (narcos[_narcoId].stats[5]/1)+\n', '                 (narcos[_narcoId].stats[7]/12)\n', '                 ;\n', '    }\n', '\n', '    // pseudo random - but does that matter?\n', '    uint64 _seed = 0;\n', '    function random(uint64 upper) private returns (uint64 randomNumber) {\n', '       _seed = uint64(keccak256(keccak256(block.blockhash(block.number-1), _seed), now));\n', '       return _seed % upper;\n', '     }\n', '\n', '\n', '    // never call this from a contract\n', '    /// @param _owner The owner whose tokens we are interested in.\n', '    function narcosByOwner(address _owner) public view returns(uint256[] ownedNarcos) {\n', '       uint256 tokenCount = ownershipTokenCount[_owner];\n', '        uint256 totalNarcos = narcos.length - 1;\n', '        uint256[] memory result = new uint256[](tokenCount);\n', '        uint256 narcoId;\n', '        uint256 resultIndex=0;\n', '        for (narcoId = 0; narcoId <= totalNarcos; narcoId++) {\n', '          if (narcoIndexToOwner[narcoId] == _owner) {\n', '            result[resultIndex] = narcoId;\n', '            resultIndex++;\n', '          }\n', '        }\n', '        return result;\n', '    }\n', '\n', '\n', '}\n', '\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', 'contract ERC721 {\n', '    function implementsERC721() public pure returns (bool);\n', '    function totalSupply() public view returns (uint256 total);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function ownerOf(uint256 _tokenId) public view returns (address owner);\n', '    function approve(address _to, uint256 _tokenId) public;\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '    function transfer(address _to, uint256 _tokenId) public;\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '\n', '    // Optional\n', '    // function name() public view returns (string name);\n', '    // function symbol() public view returns (string symbol);\n', '    // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n', '    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n', '}\n', '\n', '/// @title The facet of the DopeRaider core contract that manages ownership, ERC-721 (draft) compliant.\n', 'contract NarcoOwnership is NarcoBase, ERC721 {\n', '    string public name = "DopeRaider";\n', '    string public symbol = "DOPR";\n', '\n', '    function implementsERC721() public pure returns (bool)\n', '    {\n', '        return true;\n', '    }\n', '\n', '    /// @dev Checks if a given address is the current owner of a particular narco.\n', '    /// @param _claimant the address we are validating against.\n', '    /// @param _tokenId narco id, only valid when > 0\n', '    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n', '        return narcoIndexToOwner[_tokenId] == _claimant;\n', '    }\n', '\n', '    /// @dev Checks if a given address currently has transferApproval for a particular narco.\n', '    /// @param _claimant the address we are confirming narco is approved for.\n', '    /// @param _tokenId narco id, only valid when > 0\n', '    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n', '        return narcoIndexToApproved[_tokenId] == _claimant;\n', '    }\n', '\n', '    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\n', '    ///  approval. Setting _approved to address(0) clears all transfer approval.\n', '    ///  NOTE: _approve() does NOT send the Approval event.\n', '    function _approve(uint256 _tokenId, address _approved) internal {\n', '        narcoIndexToApproved[_tokenId] = _approved;\n', '    }\n', '\n', '\n', '    /// @notice Returns the number of narcos owned by a specific address.\n', '    /// @param _owner The owner address to check.\n', '    function balanceOf(address _owner) public view returns (uint256 count) {\n', '        return ownershipTokenCount[_owner];\n', '    }\n', '\n', '    /// @notice Transfers a narco to another address. If transferring to a smart\n', '    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\n', '    ///  DopeRaider specifically) or your narco may be lost forever. Seriously.\n', '    /// @param _to The address of the recipient, can be a user or contract.\n', '    /// @param _tokenId The ID of the narco to transfer.\n', '    function transfer(\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '\n', '    {\n', '        require(_to != address(0));\n', '        require(_owns(msg.sender, _tokenId));\n', '\n', '        _transfer(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    /// @notice Grant another address the right to transfer a specific narco via\n', '    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\n', '    /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '    ///  clear all approvals.\n', '    /// @param _tokenId The ID of the narco that can be transferred if this call succeeds.\n', '    function approve(\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '\n', '    {\n', '        require(_owns(msg.sender, _tokenId));\n', '\n', '        _approve(_tokenId, _to);\n', '\n', '        Approval(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    /// @notice Transfer a narco owned by another address, for which the calling address\n', '    ///  has previously been granted transfer approval by the owner.\n', '    /// @param _from The address that owns the narco to be transfered.\n', '    /// @param _to The address that should take ownership of the narco. Can be any address,\n', '    ///  including the caller.\n', '    /// @param _tokenId The ID of the narco to be transferred.\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '\n', '    {\n', '        require(_approvedFor(msg.sender, _tokenId));\n', '        require(_owns(_from, _tokenId));\n', '        require(_to != address(0));\n', '\n', '        _transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return narcos.length - 1;\n', '    }\n', '\n', '    function ownerOf(uint256 _tokenId)\n', '        public\n', '        view\n', '        returns (address owner)\n', '    {\n', '        owner = narcoIndexToOwner[_tokenId];\n', '\n', '        require(owner != address(0));\n', '    }\n', '\n', '\n', '\n', '}\n', '\n', '\n', '// this helps with district functionality\n', '// it gives the ability to an external contract to do the following:\n', '// * update narcos stats\n', 'contract NarcoUpdates is NarcoOwnership {\n', '\n', '    function updateWeedTotal(uint256 _narcoId, bool _add, uint16 _total) public onlyDopeRaiderContract {\n', '      if(_add==true){\n', '        narcos[_narcoId].weedTotal+= _total;\n', '      }else{\n', '        narcos[_narcoId].weedTotal-= _total;\n', '      }\n', '    }\n', '\n', '    function updateCokeTotal(uint256 _narcoId, bool _add, uint16 _total) public onlyDopeRaiderContract {\n', '       if(_add==true){\n', '        narcos[_narcoId].cokeTotal+= _total;\n', '      }else{\n', '        narcos[_narcoId].cokeTotal-= _total;\n', '      }\n', '    }\n', '\n', '    function updateConsumable(uint256 _narcoId, uint256 _index, uint8 _new) public onlyDopeRaiderContract  {\n', '      narcos[_narcoId].consumables[_index] = _new;\n', '    }\n', '\n', '    function updateSkill(uint256 _narcoId, uint256 _index, uint16 _new) public onlyDopeRaiderContract  {\n', '      narcos[_narcoId].skills[_index] = _new;\n', '    }\n', '\n', '    function incrementStat(uint256 _narcoId , uint256 _index) public onlyDopeRaiderContract  {\n', '      narcos[_narcoId].stats[_index]++;\n', '    }\n', '\n', '    function setCooldown(uint256 _narcoId , uint256 _index , uint256 _new) public onlyDopeRaiderContract  {\n', '      narcos[_narcoId].cooldowns[_index]=_new;\n', '    }\n', '\n', '}\n', '\n', '/// @title Handles creating auctions for sale of narcos.\n', '///  This wrapper of ReverseAuction exists only so that users can create\n', '///  auctions with only one transaction.\n', 'contract NarcoAuction is NarcoUpdates {\n', '    SaleClockAuction public saleAuction;\n', '\n', '    function setSaleAuctionAddress(address _address) public onlyCLevel {\n', '        SaleClockAuction candidateContract = SaleClockAuction(_address);\n', '        require(candidateContract.isSaleClockAuction());\n', '        saleAuction = candidateContract;\n', '    }\n', '\n', '    function createSaleAuction(\n', '        uint256 _narcoId,\n', '        uint256 _startingPrice,\n', '        uint256 _endingPrice,\n', '        uint256 _duration\n', '    )\n', '        public\n', '        whenNotPaused\n', '    {\n', '        // Auction contract checks input sizes\n', '        // If narco is already on any auction, this will throw\n', '        // because it will be owned by the auction contract\n', '        require(_owns(msg.sender, _narcoId));\n', '        _approve(_narcoId, saleAuction);\n', '        // Sale auction throws if inputs are invalid and clears\n', '        // transfer approval after escrowing the narco.\n', '        saleAuction.createAuction(\n', '            _narcoId,\n', '            _startingPrice,\n', '            _endingPrice,\n', '            _duration,\n', '            msg.sender\n', '        );\n', '    }\n', '\n', '    /// @dev Transfers the balance of the sale auction contract\n', '    /// to the DopeRaiderCore contract. We use two-step withdrawal to\n', '    /// prevent two transfer calls in the auction bid function.\n', '    function withdrawAuctionBalances() external onlyCLevel {\n', '        saleAuction.withdrawBalance();\n', '    }\n', '}\n', '\n', '\n', '/// @title all functions related to creating narcos\n', 'contract NarcoMinting is NarcoAuction {\n', '\n', '    // Limits the number of narcos the contract owner can ever create.\n', '    uint256 public promoCreationLimit = 200;\n', '    uint256 public gen0CreationLimit = 5000;\n', '\n', '    // Constants for gen0 auctions.\n', '    uint256 public gen0StartingPrice = 1 ether;\n', '    uint256 public gen0EndingPrice = 20 finney;\n', '    uint256 public gen0AuctionDuration = 1 days;\n', '\n', '    // Counts the number of narcos the contract owner has created.\n', '    uint256 public promoCreatedCount;\n', '    uint256 public gen0CreatedCount;\n', '\n', '    /// @dev we can create promo narco, up to a limit\n', '    function createPromoNarco(\n', '        string _genes,\n', '        string _name,\n', '        address _owner\n', '    ) public onlyCLevel {\n', '        if (_owner == address(0)) {\n', '             _owner = cooAddress;\n', '        }\n', '        require(promoCreatedCount < promoCreationLimit);\n', '        require(gen0CreatedCount < gen0CreationLimit);\n', '\n', '        promoCreatedCount++;\n', '        gen0CreatedCount++;\n', '\n', '        _createNarco(_genes, _name, _owner);\n', '    }\n', '\n', '    /// @dev Creates a new gen0 narco with the given genes and\n', '    ///  creates an auction for it.\n', '    function createGen0Auction(\n', '       string _genes,\n', '        string _name\n', '    ) public onlyCLevel {\n', '        require(gen0CreatedCount < gen0CreationLimit);\n', '\n', '        uint256 narcoId = _createNarco(_genes,_name,address(this));\n', '\n', '        _approve(narcoId, saleAuction);\n', '\n', '        saleAuction.createAuction(\n', '            narcoId,\n', '            _computeNextGen0Price(),\n', '            gen0EndingPrice,\n', '            gen0AuctionDuration,\n', '            address(this)\n', '        );\n', '\n', '        gen0CreatedCount++;\n', '    }\n', '\n', '    /// @dev Computes the next gen0 auction starting price, given\n', '    ///  the average of the past 4 prices + 50%.\n', '    function _computeNextGen0Price() internal view returns (uint256) {\n', '        uint256 avePrice = saleAuction.averageGen0SalePrice();\n', '\n', '        // sanity check to ensure we don&#39;t overflow arithmetic (this big number is 2^128-1).\n', '        require(avePrice < 340282366920938463463374607431768211455);\n', '\n', '        uint256 nextPrice = avePrice + (avePrice / 2);\n', '\n', '        // We never auction for less than starting price\n', '        if (nextPrice < gen0StartingPrice) {\n', '            nextPrice = gen0StartingPrice;\n', '        }\n', '\n', '        return nextPrice;\n', '    }\n', '}\n', '\n', '\n', '/// @title DopeRaider: Collectible, narcos on the Ethereum blockchain.\n', '/// @dev The main DopeRaider contract\n', 'contract DopeRaiderCore is NarcoMinting {\n', '\n', '    // This is the main DopeRaider contract. We have several seperately-instantiated  contracts\n', '    // that handle auctions, districts and the creation of new narcos. By keeping\n', '    // them in their own contracts, we can upgrade them without disrupting the main contract that tracks\n', '    // narco ownership.\n', '    //\n', '    //      - NarcoBase: This is where we define the most fundamental code shared throughout the core\n', '    //             functionality. This includes our main data storage, constants and data types, plus\n', '    //             internal functions for managing these items.\n', '    //\n', '    //      - NarcoAccessControl: This contract manages the various addresses and constraints for operations\n', '    //             that can be executed only by specific roles. Namely CEO, CFO and COO.\n', '    //\n', '    //      - NarcoOwnership: This provides the methods required for basic non-fungible token\n', '    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).\n', '    //\n', '    //      - NarcoUpdates: This file contains the methods necessary to allow a separate contract to update narco stats\n', '    //\n', '    //      - NarcoAuction: Here we have the public methods for auctioning or bidding on narcos.\n', '    //             The actual auction functionality is handled in a sibling sales contract,\n', '    //             while auction creation and bidding is mostly mediated through this facet of the core contract.\n', '    //\n', '    //      - NarcoMinting: This final facet contains the functionality we use for creating new gen0 narcos.\n', '    //             We can make up to 4096 "promo" narcos\n', '\n', '    // Set in case the core contract is broken and an upgrade is required\n', '    address public newContractAddress;\n', '\n', '    bool public gamePaused = true;\n', '\n', '    modifier whenGameNotPaused() {\n', '        require(!gamePaused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenGamePaused {\n', '        require(gamePaused);\n', '        _;\n', '    }\n', '\n', '    function pause() public onlyCLevel whenGameNotPaused {\n', '        gamePaused = true;\n', '    }\n', '\n', '    function unpause() public onlyCLevel whenGamePaused {\n', '        // can&#39;t unpause if contract was upgraded\n', '        gamePaused = false;\n', '    }\n', '\n', '\n', '    // EVENTS\n', '    event GrowWeedCompleted(uint256 indexed narcoId, uint yield);\n', '    event RefineCokeCompleted(uint256 indexed narcoId, uint yield);\n', '\n', '    function DopeRaiderCore() public {\n', '        ceoAddress = msg.sender;\n', '        cooAddress = msg.sender;\n', '    }\n', '\n', '    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\n', '    ///  breaking bug. This method does nothing but keep track of the new contract and\n', '    ///  emit a message indicating that the new address is set. It&#39;s up to clients of this\n', '    ///  contract to update to the new contract address in that case. (This contract will\n', '    ///  be paused indefinitely if such an upgrade takes place.)\n', '    /// @param _v2Address new address\n', '    function setNewAddress(address _v2Address) public onlyCLevel whenPaused {\n', '        newContractAddress = _v2Address;\n', '        ContractUpgrade(_v2Address);\n', '    }\n', '\n', '    /// @notice No tipping!\n', '    /// @dev Reject all Ether from being sent here, unless it&#39;s from one of the\n', '    ///  two auction contracts. (Hopefully, we can prevent user accidents.)\n', '    function() external payable {\n', '        require(msg.sender == address(saleAuction));\n', '    }\n', '\n', '    /// @param _id The ID of the narco of interest.\n', '\n', '   function getNarco(uint256 _id)\n', '        public\n', '        view\n', '        returns (\n', '        string  narcoName,\n', '        uint256 weedTotal,\n', '        uint256 cokeTotal,\n', '        uint16[6] skills,\n', '        uint8[4] consumables,\n', '        string genes,\n', '        uint8 homeLocation,\n', '        uint16 level,\n', '        uint256[6] cooldowns,\n', '        uint256 id,\n', '        uint16 [9] stats\n', '    ) {\n', '        Narco storage narco = narcos[_id];\n', '        narcoName = narco.narcoName;\n', '        weedTotal = narco.weedTotal;\n', '        cokeTotal = narco.cokeTotal;\n', '        skills = narco.skills;\n', '        consumables = narco.consumables;\n', '        genes = narco.genes;\n', '        homeLocation = narco.homeLocation;\n', '        level = getLevel(_id);\n', '        cooldowns = narco.cooldowns;\n', '        id = _id;\n', '        stats = narco.stats;\n', '    }\n', '\n', '    uint256 public changeIdentityNarcoRespect = 30;\n', '    function setChangeIdentityNarcoRespect(uint256 _respect) public onlyCLevel {\n', '      changeIdentityNarcoRespect=_respect;\n', '    }\n', '\n', '    uint256 public personalisationCost = 0.01 ether; // pimp my narco\n', '    function setPersonalisationCost(uint256 _cost) public onlyCLevel {\n', '      personalisationCost=_cost;\n', '    }\n', '    function updateNarco(uint256 _narcoId, string _genes, string _name) public payable whenGameNotPaused {\n', '       require(getLevel(_narcoId)>=changeIdentityNarcoRespect); // minimum level to recruit a narco\n', '       require(msg.sender==narcoIndexToOwner[_narcoId]); // can&#39;t be moving other peoples narcos about\n', '       require(msg.value>=personalisationCost);\n', '       narcos[_narcoId].genes = _genes;\n', '       narcos[_narcoId].narcoName = _name;\n', '    }\n', '\n', '    uint256 public respectRequiredToRecruit = 150;\n', '\n', '    function setRespectRequiredToRecruit(uint256 _respect) public onlyCLevel {\n', '      respectRequiredToRecruit=_respect;\n', '    }\n', '\n', '    function recruitNarco(uint256 _narcoId, string _genes, string _name) public whenGameNotPaused {\n', '       require(msg.sender==narcoIndexToOwner[_narcoId]); // can&#39;t be moving other peoples narcos about\n', '       require(getLevel(_narcoId)>=respectRequiredToRecruit); // minimum level to recruit a narco\n', '       require(narcos[_narcoId].stats[8]<getLevel(_narcoId)/respectRequiredToRecruit); // must have recruited < respect / required reqpect (times)\n', '      _createNarco(_genes,_name, msg.sender);\n', '      narcos[_narcoId].stats[8]+=1; // increase number recruited\n', '    }\n', '\n', '   // crafting section\n', '    uint256 public growCost = 0.003 ether;\n', '    function setGrowCost(uint256 _cost) public onlyCLevel{\n', '      growCost=_cost;\n', '    }\n', '\n', '    function growWeed(uint256 _narcoId) public payable whenGameNotPaused{\n', '         require(msg.sender==narcoIndexToOwner[_narcoId]); // can&#39;t be moving other peoples narcos about\n', '         require(msg.value>=growCost);\n', '         require(now>narcos[_narcoId].cooldowns[1]); //cooldown must have expired\n', '         uint16 growSkillLevel = narcos[_narcoId].skills[1]; // grow\n', '         uint16 maxYield = 9 + growSkillLevel; // max amount can be grown based on skill\n', '         uint yield = min(narcos[_narcoId].consumables[1],maxYield);\n', '         require(yield>0); // gotta produce something\n', '\n', '         // must be home location\n', '         uint8 district = districtsCore.getNarcoLocation(_narcoId);\n', '         require(district==narcos[_narcoId].homeLocation);\n', '\n', '         // do the crafting\n', '         uint256 cooldown = now + ((910-(10*growSkillLevel))* 1 seconds); //calculate cooldown switch to minutes later\n', '\n', '         narcos[_narcoId].cooldowns[1]=cooldown;\n', '         // use all available  - for now , maybe later make optional\n', '         narcos[_narcoId].consumables[1]=uint8(subToZero(uint256(narcos[_narcoId].consumables[1]),yield));\n', '         narcos[_narcoId].weedTotal+=uint8(yield);\n', '\n', '         narcos[_narcoId].stats[1]+=1; // update the statistic for grow\n', '         districtsCore.increaseDistrictWeed(district , yield);\n', '         districtsCore.distributeRevenue.value(growCost)(uint256(district),50,50); // distribute the revenue to districts pots\n', '         GrowWeedCompleted(_narcoId, yield); // notification event\n', '    }\n', '\n', '\n', '    uint256 public refineCost = 0.003 ether;\n', '    function setRefineCost(uint256 _cost) public onlyCLevel{\n', '      refineCost=_cost;\n', '    }\n', '\n', '    function refineCoke(uint256 _narcoId) public payable whenGameNotPaused{\n', '         require(msg.sender==narcoIndexToOwner[_narcoId]); // can&#39;t be moving other peoples narcos about\n', '         require(msg.value>=refineCost);\n', '         require(now>narcos[_narcoId].cooldowns[2]); //cooldown must have expired\n', '         uint16 refineSkillLevel = narcos[_narcoId].skills[2]; // refine\n', '         uint16 maxYield = 3+(refineSkillLevel/3); // max amount can be grown based on skill\n', '         uint yield = min(narcos[_narcoId].consumables[2],maxYield);\n', '         require(yield>0); // gotta produce something\n', '\n', '         // must be home location\n', '         uint8 district = districtsCore.getNarcoLocation(_narcoId);\n', '         require(district==narcos[_narcoId].homeLocation);\n', '\n', '         // do the crafting\n', '        // uint256 cooldown = now + min(3 minutes,((168-(2*refineSkillLevel))* 1 seconds)); // calculate cooldown\n', '         uint256 cooldown = now + ((910-(10*refineSkillLevel))* 1 seconds); // calculate cooldown\n', '\n', '         narcos[_narcoId].cooldowns[2]=cooldown;\n', '         // use all available  - for now , maybe later make optional\n', '         narcos[_narcoId].consumables[2]=uint8(subToZero(uint256(narcos[_narcoId].consumables[2]),yield));\n', '         narcos[_narcoId].cokeTotal+=uint8(yield);\n', '\n', '         narcos[_narcoId].stats[2]+=1;\n', '         districtsCore.increaseDistrictCoke(district, yield);\n', '         districtsCore.distributeRevenue.value(refineCost)(uint256(district),50,50); // distribute the revenue to districts pots\n', '         RefineCokeCompleted(_narcoId, yield); // notification event\n', '\n', '    }\n', '\n', '\n', '    function min(uint a, uint b) private pure returns (uint) {\n', '             return a < b ? a : b;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '// DopeRaider Narcos Contract\n', '// by gasmasters.io\n', '// contact: team@doperaider.com\n', '\n', 'contract DistrictsCoreInterface {\n', '  // callable by other contracts to control economy\n', '  function isDopeRaiderDistrictsCore() public pure returns (bool);\n', '  function increaseDistrictWeed(uint256 _district, uint256 _quantity) public;\n', '  function increaseDistrictCoke(uint256 _district, uint256 _quantity) public;\n', '  function distributeRevenue(uint256 _district , uint8 _splitW, uint8 _splitC) public payable;\n', '  function getNarcoLocation(uint256 _narcoId) public view returns (uint8 location);\n', '}\n', '\n', '/// @title sale clock auction interface\n', 'contract SaleClockAuction {\n', '  function isSaleClockAuction() public pure returns (bool);\n', '  function createAuction(uint256 _tokenId,  uint256 _startingPrice,uint256 _endingPrice,uint256 _duration,address _seller)public;\n', '  function withdrawBalance() public;\n', '  function averageGen0SalePrice() public view returns (uint256);\n', '\n', '}\n', '\n', '\n', '//// @title A facet of NarcoCore that manages special access privileges.\n', 'contract NarcoAccessControl {\n', '    /// @dev Emited when contract is upgraded\n', '    event ContractUpgrade(address newContract);\n', '\n', '    address public ceoAddress;\n', '    address public cooAddress;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '\n', '    modifier onlyCEO() {\n', '        require(msg.sender == ceoAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCLevel() {\n', '        require(\n', '            msg.sender == cooAddress ||\n', '            msg.sender == ceoAddress\n', '        );\n', '        _;\n', '    }\n', '\n', '    function setCEO(address _newCEO) public onlyCEO {\n', '        require(_newCEO != address(0));\n', '\n', '        ceoAddress = _newCEO;\n', '    }\n', '\n', '    function setCOO(address _newCOO) public onlyCEO {\n', '        require(_newCOO != address(0));\n', '\n', '        cooAddress = _newCOO;\n', '    }\n', '\n', '    function withdrawBalance() external onlyCLevel {\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '\n', '\n', '    /*** Pausable functionality adapted from OpenZeppelin ***/\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function pause() public onlyCLevel whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    function unpause() public onlyCLevel whenPaused {\n', "        // can't unpause if contract was upgraded\n", '        paused = false;\n', '    }\n', '\n', '    /// @dev The address of the calling contract\n', '    address public districtContractAddress;\n', '\n', '    DistrictsCoreInterface public districtsCore;\n', '\n', '    function setDistrictAddress(address _address) public onlyCLevel {\n', '        _setDistrictAddresss(_address);\n', '    }\n', '\n', '    function _setDistrictAddresss(address _address) internal {\n', '      DistrictsCoreInterface candidateContract = DistrictsCoreInterface(_address);\n', '      require(candidateContract.isDopeRaiderDistrictsCore());\n', '      districtsCore = candidateContract;\n', '      districtContractAddress = _address;\n', '    }\n', '\n', '\n', '    modifier onlyDopeRaiderContract() {\n', '        require(msg.sender == districtContractAddress);\n', '        _;\n', '    }\n', '\n', '\n', '\n', '\n', '}\n', '\n', '/// @title Base contract for DopeRaider. Holds all common structs, events and base variables.\n', 'contract NarcoBase is NarcoAccessControl {\n', '    /*** EVENTS ***/\n', '\n', '    event NarcoCreated(address indexed owner, uint256 narcoId, string genes);\n', '\n', '    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a narcos\n', '    ///  ownership is assigned, including newly created narcos.\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '\n', ' /*** DATA TYPES ***/\n', '\n', '    // consumable indexes\n', '    /*\n', '    uint constant gasIndex = 0;\n', '    uint constant seedsIndex = 1;\n', '    uint constant chemicalsIndex = 2;\n', '    uint constant ammoIndex = 3;\n', '\n', '    // skills indexes  - each skill can range from 1 - 10 in level\n', '    uint constant speedIndex = 0; // speed of travel\n', '    uint constant growIndex = 1; // speed/yield of grow\n', '    uint constant refineIndex = 2; // refine coke\n', '    uint constant attackIndex = 3; // attack\n', '    uint constant defenseIndex = 4; // defense\n', '    uint constant capacityIndex = 5; // how many items can be carried.\n', '\n', '    // stat indexes\n', '    uint constant dealsCompleted = 0; // dealsCompleted\n', '    uint constant weedGrowCompleted = 1; // weedGrowCompleted\n', '    uint constant cokeRefineCompleted = 2; // refineCompleted\n', '    uint constant attacksSucceeded = 3; // attacksSucceeded\n', '    uint constant defendedSuccessfully = 4; defendedSuccessfully\n', '    uint constant raidsCompleted = 5; // raidsCompleted\n', '    uint constant escapeHijack = 6; // escapeHijack\n', '    uint constant travelling = 7; // traveller\n', '    uint constant recruited = 8; // recruitment\n', '*/\n', '\n', '\n', '    /// @dev The main Narco struct. Every narco in DopeRaider is represented by a copy\n', '    ///  of this structure.\n', '    struct Narco {\n', "        // The Narco's genetic code is packed into these 256-bits.\n", '        string genes; // represents his avatar\n', '        string narcoName;\n', '        // items making level\n', '        uint16 [9] stats;\n', '        // inventory totals\n', '        uint16 weedTotal;\n', '        uint16 cokeTotal;\n', '        uint8 [4] consumables; // gas, seeds, chemicals, ammo\n', '        uint16 [6] skills;   // travel time, grow, refine, attack, defend carry\n', '        uint256 [6] cooldowns; // skill cooldown periods speed, grow, refine, attack, others if needed\n', '        uint8 homeLocation;\n', '    }\n', '\n', '    /*** STORAGE ***/\n', '\n', '    /// @dev An array containing the Narco struct for all Narcos in existence. The ID\n', '    ///  of each narco is actually an index into this array.\n', '    Narco[] narcos;\n', '\n', '    /// @dev A mapping from  narco IDs to the address that owns them. All  narcos have\n', '    ///  some valid owner address, even gen0  narcos are created with a non-zero owner.\n', '    mapping (uint256 => address) public narcoIndexToOwner;\n', '\n', '    // @dev A mapping from owner address to count of tokens that address owns.\n', '    //  Used internally inside balanceOf() to resolve ownership count.\n', '    mapping (address => uint256) ownershipTokenCount;\n', '\n', '    /// @dev A mapping from NarcoIDs to an address that has been approved to call\n', '    ///  transferFrom(). A zero value means no approval is outstanding.\n', '    mapping (uint256 => address) public  narcoIndexToApproved;\n', '\n', '    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n', '        // since the number of  narcos is capped to 2^32\n', '        // there is no way to overflow this\n', '        ownershipTokenCount[_to]++;\n', '        narcoIndexToOwner[_tokenId] = _to;\n', '\n', '        if (_from != address(0)) {\n', '            ownershipTokenCount[_from]--;\n', '            delete narcoIndexToApproved[_tokenId];\n', '        }\n', '\n', '        Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    // Will generate a new Narco and generate the event\n', '    function _createNarco(\n', '        string _genes,\n', '        string _name,\n', '        address _owner\n', '    )\n', '        internal\n', '        returns (uint)\n', '    {\n', '\n', '        uint16[6] memory randomskills= [\n', '            uint16(random(9)+1),\n', '            uint16(random(9)+1),\n', '            uint16(random(9)+1),\n', '            uint16(random(9)+1),\n', '            uint16(random(9)+1),\n', '            uint16(random(9)+31)\n', '        ];\n', '\n', '        uint256[6] memory cools;\n', '        uint16[9] memory nostats;\n', '\n', '        Narco memory _narco = Narco({\n', '            genes: _genes,\n', '            narcoName: _name,\n', '            cooldowns: cools,\n', '            stats: nostats,\n', '            weedTotal: 0,\n', '            cokeTotal: 0,\n', '            consumables: [4,6,2,1],\n', '            skills: randomskills,\n', '            homeLocation: uint8(random(6)+1)\n', '        });\n', '\n', '        uint256 newNarcoId = narcos.push(_narco) - 1;\n', '        require(newNarcoId <= 4294967295);\n', '\n', '        // raid character (token 0) live in 7 and have random special skills\n', '        if (newNarcoId==0){\n', '            narcos[0].homeLocation=7; // in vice island\n', '            narcos[0].skills[4]=800; // defense\n', '            narcos[0].skills[5]=65535; // carry\n', '        }\n', '\n', '        NarcoCreated(_owner, newNarcoId, _narco.genes);\n', '        _transfer(0, _owner, newNarcoId);\n', '\n', '\n', '        return newNarcoId;\n', '    }\n', '\n', '    function subToZero(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (b <= a){\n', '          return a - b;\n', '        }else{\n', '          return 0;\n', '        }\n', '      }\n', '\n', '    function getRemainingCapacity(uint256 _narcoId) public view returns (uint16 capacity){\n', '        uint256 usedCapacity = narcos[_narcoId].weedTotal + narcos[_narcoId].cokeTotal + narcos[_narcoId].consumables[0]+narcos[_narcoId].consumables[1]+narcos[_narcoId].consumables[2]+narcos[_narcoId].consumables[3];\n', '        capacity = uint16(subToZero(uint256(narcos[_narcoId].skills[5]), usedCapacity));\n', '    }\n', '\n', "    // respect it's called now\n", '    function getLevel(uint256 _narcoId) public view returns (uint16 rank){\n', '\n', '    /*\n', '      dealsCompleted = 0; // dealsCompleted\n', '      weedGrowCompleted = 1; // weedGrowCompleted\n', '      cokeRefineCompleted = 2; // refineCompleted\n', '      attacksSucceeded = 3; // attacksSucceeded\n', '      defendedSuccessfully = 4; defendedSuccessfully\n', '      raidsCompleted = 5; // raidsCompleted\n', '      escapeHijack = 6; // escapeHijack\n', '      travel = 7; // travelling\n', '    */\n', '\n', '        rank =  (narcos[_narcoId].stats[0]/12)+\n', '                 (narcos[_narcoId].stats[1]/4)+\n', '                 (narcos[_narcoId].stats[2]/4)+\n', '                 (narcos[_narcoId].stats[3]/6)+\n', '                 (narcos[_narcoId].stats[4]/6)+\n', '                 (narcos[_narcoId].stats[5]/1)+\n', '                 (narcos[_narcoId].stats[7]/12)\n', '                 ;\n', '    }\n', '\n', '    // pseudo random - but does that matter?\n', '    uint64 _seed = 0;\n', '    function random(uint64 upper) private returns (uint64 randomNumber) {\n', '       _seed = uint64(keccak256(keccak256(block.blockhash(block.number-1), _seed), now));\n', '       return _seed % upper;\n', '     }\n', '\n', '\n', '    // never call this from a contract\n', '    /// @param _owner The owner whose tokens we are interested in.\n', '    function narcosByOwner(address _owner) public view returns(uint256[] ownedNarcos) {\n', '       uint256 tokenCount = ownershipTokenCount[_owner];\n', '        uint256 totalNarcos = narcos.length - 1;\n', '        uint256[] memory result = new uint256[](tokenCount);\n', '        uint256 narcoId;\n', '        uint256 resultIndex=0;\n', '        for (narcoId = 0; narcoId <= totalNarcos; narcoId++) {\n', '          if (narcoIndexToOwner[narcoId] == _owner) {\n', '            result[resultIndex] = narcoId;\n', '            resultIndex++;\n', '          }\n', '        }\n', '        return result;\n', '    }\n', '\n', '\n', '}\n', '\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', 'contract ERC721 {\n', '    function implementsERC721() public pure returns (bool);\n', '    function totalSupply() public view returns (uint256 total);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function ownerOf(uint256 _tokenId) public view returns (address owner);\n', '    function approve(address _to, uint256 _tokenId) public;\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '    function transfer(address _to, uint256 _tokenId) public;\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '\n', '    // Optional\n', '    // function name() public view returns (string name);\n', '    // function symbol() public view returns (string symbol);\n', '    // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n', '    // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n', '}\n', '\n', '/// @title The facet of the DopeRaider core contract that manages ownership, ERC-721 (draft) compliant.\n', 'contract NarcoOwnership is NarcoBase, ERC721 {\n', '    string public name = "DopeRaider";\n', '    string public symbol = "DOPR";\n', '\n', '    function implementsERC721() public pure returns (bool)\n', '    {\n', '        return true;\n', '    }\n', '\n', '    /// @dev Checks if a given address is the current owner of a particular narco.\n', '    /// @param _claimant the address we are validating against.\n', '    /// @param _tokenId narco id, only valid when > 0\n', '    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n', '        return narcoIndexToOwner[_tokenId] == _claimant;\n', '    }\n', '\n', '    /// @dev Checks if a given address currently has transferApproval for a particular narco.\n', '    /// @param _claimant the address we are confirming narco is approved for.\n', '    /// @param _tokenId narco id, only valid when > 0\n', '    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n', '        return narcoIndexToApproved[_tokenId] == _claimant;\n', '    }\n', '\n', '    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\n', '    ///  approval. Setting _approved to address(0) clears all transfer approval.\n', '    ///  NOTE: _approve() does NOT send the Approval event.\n', '    function _approve(uint256 _tokenId, address _approved) internal {\n', '        narcoIndexToApproved[_tokenId] = _approved;\n', '    }\n', '\n', '\n', '    /// @notice Returns the number of narcos owned by a specific address.\n', '    /// @param _owner The owner address to check.\n', '    function balanceOf(address _owner) public view returns (uint256 count) {\n', '        return ownershipTokenCount[_owner];\n', '    }\n', '\n', '    /// @notice Transfers a narco to another address. If transferring to a smart\n', '    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\n', '    ///  DopeRaider specifically) or your narco may be lost forever. Seriously.\n', '    /// @param _to The address of the recipient, can be a user or contract.\n', '    /// @param _tokenId The ID of the narco to transfer.\n', '    function transfer(\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '\n', '    {\n', '        require(_to != address(0));\n', '        require(_owns(msg.sender, _tokenId));\n', '\n', '        _transfer(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    /// @notice Grant another address the right to transfer a specific narco via\n', '    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\n', '    /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '    ///  clear all approvals.\n', '    /// @param _tokenId The ID of the narco that can be transferred if this call succeeds.\n', '    function approve(\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '\n', '    {\n', '        require(_owns(msg.sender, _tokenId));\n', '\n', '        _approve(_tokenId, _to);\n', '\n', '        Approval(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    /// @notice Transfer a narco owned by another address, for which the calling address\n', '    ///  has previously been granted transfer approval by the owner.\n', '    /// @param _from The address that owns the narco to be transfered.\n', '    /// @param _to The address that should take ownership of the narco. Can be any address,\n', '    ///  including the caller.\n', '    /// @param _tokenId The ID of the narco to be transferred.\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '\n', '    {\n', '        require(_approvedFor(msg.sender, _tokenId));\n', '        require(_owns(_from, _tokenId));\n', '        require(_to != address(0));\n', '\n', '        _transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return narcos.length - 1;\n', '    }\n', '\n', '    function ownerOf(uint256 _tokenId)\n', '        public\n', '        view\n', '        returns (address owner)\n', '    {\n', '        owner = narcoIndexToOwner[_tokenId];\n', '\n', '        require(owner != address(0));\n', '    }\n', '\n', '\n', '\n', '}\n', '\n', '\n', '// this helps with district functionality\n', '// it gives the ability to an external contract to do the following:\n', '// * update narcos stats\n', 'contract NarcoUpdates is NarcoOwnership {\n', '\n', '    function updateWeedTotal(uint256 _narcoId, bool _add, uint16 _total) public onlyDopeRaiderContract {\n', '      if(_add==true){\n', '        narcos[_narcoId].weedTotal+= _total;\n', '      }else{\n', '        narcos[_narcoId].weedTotal-= _total;\n', '      }\n', '    }\n', '\n', '    function updateCokeTotal(uint256 _narcoId, bool _add, uint16 _total) public onlyDopeRaiderContract {\n', '       if(_add==true){\n', '        narcos[_narcoId].cokeTotal+= _total;\n', '      }else{\n', '        narcos[_narcoId].cokeTotal-= _total;\n', '      }\n', '    }\n', '\n', '    function updateConsumable(uint256 _narcoId, uint256 _index, uint8 _new) public onlyDopeRaiderContract  {\n', '      narcos[_narcoId].consumables[_index] = _new;\n', '    }\n', '\n', '    function updateSkill(uint256 _narcoId, uint256 _index, uint16 _new) public onlyDopeRaiderContract  {\n', '      narcos[_narcoId].skills[_index] = _new;\n', '    }\n', '\n', '    function incrementStat(uint256 _narcoId , uint256 _index) public onlyDopeRaiderContract  {\n', '      narcos[_narcoId].stats[_index]++;\n', '    }\n', '\n', '    function setCooldown(uint256 _narcoId , uint256 _index , uint256 _new) public onlyDopeRaiderContract  {\n', '      narcos[_narcoId].cooldowns[_index]=_new;\n', '    }\n', '\n', '}\n', '\n', '/// @title Handles creating auctions for sale of narcos.\n', '///  This wrapper of ReverseAuction exists only so that users can create\n', '///  auctions with only one transaction.\n', 'contract NarcoAuction is NarcoUpdates {\n', '    SaleClockAuction public saleAuction;\n', '\n', '    function setSaleAuctionAddress(address _address) public onlyCLevel {\n', '        SaleClockAuction candidateContract = SaleClockAuction(_address);\n', '        require(candidateContract.isSaleClockAuction());\n', '        saleAuction = candidateContract;\n', '    }\n', '\n', '    function createSaleAuction(\n', '        uint256 _narcoId,\n', '        uint256 _startingPrice,\n', '        uint256 _endingPrice,\n', '        uint256 _duration\n', '    )\n', '        public\n', '        whenNotPaused\n', '    {\n', '        // Auction contract checks input sizes\n', '        // If narco is already on any auction, this will throw\n', '        // because it will be owned by the auction contract\n', '        require(_owns(msg.sender, _narcoId));\n', '        _approve(_narcoId, saleAuction);\n', '        // Sale auction throws if inputs are invalid and clears\n', '        // transfer approval after escrowing the narco.\n', '        saleAuction.createAuction(\n', '            _narcoId,\n', '            _startingPrice,\n', '            _endingPrice,\n', '            _duration,\n', '            msg.sender\n', '        );\n', '    }\n', '\n', '    /// @dev Transfers the balance of the sale auction contract\n', '    /// to the DopeRaiderCore contract. We use two-step withdrawal to\n', '    /// prevent two transfer calls in the auction bid function.\n', '    function withdrawAuctionBalances() external onlyCLevel {\n', '        saleAuction.withdrawBalance();\n', '    }\n', '}\n', '\n', '\n', '/// @title all functions related to creating narcos\n', 'contract NarcoMinting is NarcoAuction {\n', '\n', '    // Limits the number of narcos the contract owner can ever create.\n', '    uint256 public promoCreationLimit = 200;\n', '    uint256 public gen0CreationLimit = 5000;\n', '\n', '    // Constants for gen0 auctions.\n', '    uint256 public gen0StartingPrice = 1 ether;\n', '    uint256 public gen0EndingPrice = 20 finney;\n', '    uint256 public gen0AuctionDuration = 1 days;\n', '\n', '    // Counts the number of narcos the contract owner has created.\n', '    uint256 public promoCreatedCount;\n', '    uint256 public gen0CreatedCount;\n', '\n', '    /// @dev we can create promo narco, up to a limit\n', '    function createPromoNarco(\n', '        string _genes,\n', '        string _name,\n', '        address _owner\n', '    ) public onlyCLevel {\n', '        if (_owner == address(0)) {\n', '             _owner = cooAddress;\n', '        }\n', '        require(promoCreatedCount < promoCreationLimit);\n', '        require(gen0CreatedCount < gen0CreationLimit);\n', '\n', '        promoCreatedCount++;\n', '        gen0CreatedCount++;\n', '\n', '        _createNarco(_genes, _name, _owner);\n', '    }\n', '\n', '    /// @dev Creates a new gen0 narco with the given genes and\n', '    ///  creates an auction for it.\n', '    function createGen0Auction(\n', '       string _genes,\n', '        string _name\n', '    ) public onlyCLevel {\n', '        require(gen0CreatedCount < gen0CreationLimit);\n', '\n', '        uint256 narcoId = _createNarco(_genes,_name,address(this));\n', '\n', '        _approve(narcoId, saleAuction);\n', '\n', '        saleAuction.createAuction(\n', '            narcoId,\n', '            _computeNextGen0Price(),\n', '            gen0EndingPrice,\n', '            gen0AuctionDuration,\n', '            address(this)\n', '        );\n', '\n', '        gen0CreatedCount++;\n', '    }\n', '\n', '    /// @dev Computes the next gen0 auction starting price, given\n', '    ///  the average of the past 4 prices + 50%.\n', '    function _computeNextGen0Price() internal view returns (uint256) {\n', '        uint256 avePrice = saleAuction.averageGen0SalePrice();\n', '\n', "        // sanity check to ensure we don't overflow arithmetic (this big number is 2^128-1).\n", '        require(avePrice < 340282366920938463463374607431768211455);\n', '\n', '        uint256 nextPrice = avePrice + (avePrice / 2);\n', '\n', '        // We never auction for less than starting price\n', '        if (nextPrice < gen0StartingPrice) {\n', '            nextPrice = gen0StartingPrice;\n', '        }\n', '\n', '        return nextPrice;\n', '    }\n', '}\n', '\n', '\n', '/// @title DopeRaider: Collectible, narcos on the Ethereum blockchain.\n', '/// @dev The main DopeRaider contract\n', 'contract DopeRaiderCore is NarcoMinting {\n', '\n', '    // This is the main DopeRaider contract. We have several seperately-instantiated  contracts\n', '    // that handle auctions, districts and the creation of new narcos. By keeping\n', '    // them in their own contracts, we can upgrade them without disrupting the main contract that tracks\n', '    // narco ownership.\n', '    //\n', '    //      - NarcoBase: This is where we define the most fundamental code shared throughout the core\n', '    //             functionality. This includes our main data storage, constants and data types, plus\n', '    //             internal functions for managing these items.\n', '    //\n', '    //      - NarcoAccessControl: This contract manages the various addresses and constraints for operations\n', '    //             that can be executed only by specific roles. Namely CEO, CFO and COO.\n', '    //\n', '    //      - NarcoOwnership: This provides the methods required for basic non-fungible token\n', '    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).\n', '    //\n', '    //      - NarcoUpdates: This file contains the methods necessary to allow a separate contract to update narco stats\n', '    //\n', '    //      - NarcoAuction: Here we have the public methods for auctioning or bidding on narcos.\n', '    //             The actual auction functionality is handled in a sibling sales contract,\n', '    //             while auction creation and bidding is mostly mediated through this facet of the core contract.\n', '    //\n', '    //      - NarcoMinting: This final facet contains the functionality we use for creating new gen0 narcos.\n', '    //             We can make up to 4096 "promo" narcos\n', '\n', '    // Set in case the core contract is broken and an upgrade is required\n', '    address public newContractAddress;\n', '\n', '    bool public gamePaused = true;\n', '\n', '    modifier whenGameNotPaused() {\n', '        require(!gamePaused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenGamePaused {\n', '        require(gamePaused);\n', '        _;\n', '    }\n', '\n', '    function pause() public onlyCLevel whenGameNotPaused {\n', '        gamePaused = true;\n', '    }\n', '\n', '    function unpause() public onlyCLevel whenGamePaused {\n', "        // can't unpause if contract was upgraded\n", '        gamePaused = false;\n', '    }\n', '\n', '\n', '    // EVENTS\n', '    event GrowWeedCompleted(uint256 indexed narcoId, uint yield);\n', '    event RefineCokeCompleted(uint256 indexed narcoId, uint yield);\n', '\n', '    function DopeRaiderCore() public {\n', '        ceoAddress = msg.sender;\n', '        cooAddress = msg.sender;\n', '    }\n', '\n', '    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\n', '    ///  breaking bug. This method does nothing but keep track of the new contract and\n', "    ///  emit a message indicating that the new address is set. It's up to clients of this\n", '    ///  contract to update to the new contract address in that case. (This contract will\n', '    ///  be paused indefinitely if such an upgrade takes place.)\n', '    /// @param _v2Address new address\n', '    function setNewAddress(address _v2Address) public onlyCLevel whenPaused {\n', '        newContractAddress = _v2Address;\n', '        ContractUpgrade(_v2Address);\n', '    }\n', '\n', '    /// @notice No tipping!\n', "    /// @dev Reject all Ether from being sent here, unless it's from one of the\n", '    ///  two auction contracts. (Hopefully, we can prevent user accidents.)\n', '    function() external payable {\n', '        require(msg.sender == address(saleAuction));\n', '    }\n', '\n', '    /// @param _id The ID of the narco of interest.\n', '\n', '   function getNarco(uint256 _id)\n', '        public\n', '        view\n', '        returns (\n', '        string  narcoName,\n', '        uint256 weedTotal,\n', '        uint256 cokeTotal,\n', '        uint16[6] skills,\n', '        uint8[4] consumables,\n', '        string genes,\n', '        uint8 homeLocation,\n', '        uint16 level,\n', '        uint256[6] cooldowns,\n', '        uint256 id,\n', '        uint16 [9] stats\n', '    ) {\n', '        Narco storage narco = narcos[_id];\n', '        narcoName = narco.narcoName;\n', '        weedTotal = narco.weedTotal;\n', '        cokeTotal = narco.cokeTotal;\n', '        skills = narco.skills;\n', '        consumables = narco.consumables;\n', '        genes = narco.genes;\n', '        homeLocation = narco.homeLocation;\n', '        level = getLevel(_id);\n', '        cooldowns = narco.cooldowns;\n', '        id = _id;\n', '        stats = narco.stats;\n', '    }\n', '\n', '    uint256 public changeIdentityNarcoRespect = 30;\n', '    function setChangeIdentityNarcoRespect(uint256 _respect) public onlyCLevel {\n', '      changeIdentityNarcoRespect=_respect;\n', '    }\n', '\n', '    uint256 public personalisationCost = 0.01 ether; // pimp my narco\n', '    function setPersonalisationCost(uint256 _cost) public onlyCLevel {\n', '      personalisationCost=_cost;\n', '    }\n', '    function updateNarco(uint256 _narcoId, string _genes, string _name) public payable whenGameNotPaused {\n', '       require(getLevel(_narcoId)>=changeIdentityNarcoRespect); // minimum level to recruit a narco\n', "       require(msg.sender==narcoIndexToOwner[_narcoId]); // can't be moving other peoples narcos about\n", '       require(msg.value>=personalisationCost);\n', '       narcos[_narcoId].genes = _genes;\n', '       narcos[_narcoId].narcoName = _name;\n', '    }\n', '\n', '    uint256 public respectRequiredToRecruit = 150;\n', '\n', '    function setRespectRequiredToRecruit(uint256 _respect) public onlyCLevel {\n', '      respectRequiredToRecruit=_respect;\n', '    }\n', '\n', '    function recruitNarco(uint256 _narcoId, string _genes, string _name) public whenGameNotPaused {\n', "       require(msg.sender==narcoIndexToOwner[_narcoId]); // can't be moving other peoples narcos about\n", '       require(getLevel(_narcoId)>=respectRequiredToRecruit); // minimum level to recruit a narco\n', '       require(narcos[_narcoId].stats[8]<getLevel(_narcoId)/respectRequiredToRecruit); // must have recruited < respect / required reqpect (times)\n', '      _createNarco(_genes,_name, msg.sender);\n', '      narcos[_narcoId].stats[8]+=1; // increase number recruited\n', '    }\n', '\n', '   // crafting section\n', '    uint256 public growCost = 0.003 ether;\n', '    function setGrowCost(uint256 _cost) public onlyCLevel{\n', '      growCost=_cost;\n', '    }\n', '\n', '    function growWeed(uint256 _narcoId) public payable whenGameNotPaused{\n', "         require(msg.sender==narcoIndexToOwner[_narcoId]); // can't be moving other peoples narcos about\n", '         require(msg.value>=growCost);\n', '         require(now>narcos[_narcoId].cooldowns[1]); //cooldown must have expired\n', '         uint16 growSkillLevel = narcos[_narcoId].skills[1]; // grow\n', '         uint16 maxYield = 9 + growSkillLevel; // max amount can be grown based on skill\n', '         uint yield = min(narcos[_narcoId].consumables[1],maxYield);\n', '         require(yield>0); // gotta produce something\n', '\n', '         // must be home location\n', '         uint8 district = districtsCore.getNarcoLocation(_narcoId);\n', '         require(district==narcos[_narcoId].homeLocation);\n', '\n', '         // do the crafting\n', '         uint256 cooldown = now + ((910-(10*growSkillLevel))* 1 seconds); //calculate cooldown switch to minutes later\n', '\n', '         narcos[_narcoId].cooldowns[1]=cooldown;\n', '         // use all available  - for now , maybe later make optional\n', '         narcos[_narcoId].consumables[1]=uint8(subToZero(uint256(narcos[_narcoId].consumables[1]),yield));\n', '         narcos[_narcoId].weedTotal+=uint8(yield);\n', '\n', '         narcos[_narcoId].stats[1]+=1; // update the statistic for grow\n', '         districtsCore.increaseDistrictWeed(district , yield);\n', '         districtsCore.distributeRevenue.value(growCost)(uint256(district),50,50); // distribute the revenue to districts pots\n', '         GrowWeedCompleted(_narcoId, yield); // notification event\n', '    }\n', '\n', '\n', '    uint256 public refineCost = 0.003 ether;\n', '    function setRefineCost(uint256 _cost) public onlyCLevel{\n', '      refineCost=_cost;\n', '    }\n', '\n', '    function refineCoke(uint256 _narcoId) public payable whenGameNotPaused{\n', "         require(msg.sender==narcoIndexToOwner[_narcoId]); // can't be moving other peoples narcos about\n", '         require(msg.value>=refineCost);\n', '         require(now>narcos[_narcoId].cooldowns[2]); //cooldown must have expired\n', '         uint16 refineSkillLevel = narcos[_narcoId].skills[2]; // refine\n', '         uint16 maxYield = 3+(refineSkillLevel/3); // max amount can be grown based on skill\n', '         uint yield = min(narcos[_narcoId].consumables[2],maxYield);\n', '         require(yield>0); // gotta produce something\n', '\n', '         // must be home location\n', '         uint8 district = districtsCore.getNarcoLocation(_narcoId);\n', '         require(district==narcos[_narcoId].homeLocation);\n', '\n', '         // do the crafting\n', '        // uint256 cooldown = now + min(3 minutes,((168-(2*refineSkillLevel))* 1 seconds)); // calculate cooldown\n', '         uint256 cooldown = now + ((910-(10*refineSkillLevel))* 1 seconds); // calculate cooldown\n', '\n', '         narcos[_narcoId].cooldowns[2]=cooldown;\n', '         // use all available  - for now , maybe later make optional\n', '         narcos[_narcoId].consumables[2]=uint8(subToZero(uint256(narcos[_narcoId].consumables[2]),yield));\n', '         narcos[_narcoId].cokeTotal+=uint8(yield);\n', '\n', '         narcos[_narcoId].stats[2]+=1;\n', '         districtsCore.increaseDistrictCoke(district, yield);\n', '         districtsCore.distributeRevenue.value(refineCost)(uint256(district),50,50); // distribute the revenue to districts pots\n', '         RefineCokeCompleted(_narcoId, yield); // notification event\n', '\n', '    }\n', '\n', '\n', '    function min(uint a, uint b) private pure returns (uint) {\n', '             return a < b ? a : b;\n', '    }\n', '\n', '}']
