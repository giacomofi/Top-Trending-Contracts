['pragma solidity ^0.4.14;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '//***********Pausible\n', '\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract Crowdsaleable is Pausable {\n', '  event PauseCrowdsale();\n', '  event UnpauseCrowdsale();\n', '\n', '  bool public crowdsalePaused = true;\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenCrowdsaleNotPaused() {\n', '    require(!crowdsalePaused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenCrowdsalePaused {\n', '    require(crowdsalePaused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pauseCrowdsale() public onlyOwner whenCrowdsaleNotPaused returns (bool) {\n', '    crowdsalePaused = true;\n', '    PauseCrowdsale();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpauseCrowdsale() public onlyOwner whenCrowdsalePaused returns (bool) {\n', '    crowdsalePaused = false;\n', '    UnpauseCrowdsale();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract Nihilum is Crowdsaleable {\n', '\n', '\n', '\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    // address where funds are collected\n', '    address public wallet;\n', '    \n', '    \n', '    uint256 public _tokenPrice;\n', '    uint256 public _minimumTokens;\n', '    bool public _allowManualTokensGeneration;\n', '    uint256 public totalSupply;\n', '    uint public totalShareholders;\n', '\n', '    uint256 private lastUnpaidIteration;\n', '\n', '    mapping (address => bool) registeredShareholders;\n', '    mapping (uint => address) shareholders;\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '\n', '    uint256 public totalNihilum;\n', '    struct Account {\n', '        uint256 balance;\n', '        uint256 lastNihilum;\n', '        bool isClaiming;\n', '        bool blacklisted;\n', '        bool whitelisted;\n', '    }\n', '    mapping (address => Account) accounts;\n', '\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function Nihilum() public {\n', '        balanceOf[msg.sender] = 0;\n', '        name = "Nihilum";\n', '        symbol = "NH";\n', '        decimals = 0;\n', '        _tokenPrice = 0.0024 ether;\n', '        _minimumTokens = 50;\n', '        _allowManualTokensGeneration = true;\n', '        wallet = owner;\n', '        owner = msg.sender;\n', '        totalShareholders = 0;\n', '        lastUnpaidIteration = 1;\n', '    }\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        if (balanceOf[msg.sender] < _value) return false;              // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) return false;    // Check for overflows\n', '        if (_to == owner || _to == address(this)) return false;         // makes it illegal to send tokens to owner or this contract\n', '        _transfer(msg.sender, _to, _value);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);                        // Subtract from the sender\n', '        balanceOf[_to] = balanceOf[_to].add(_value);                               // Add the same to the recipient\n', '\n', '        /* Adding to shareholders count if tokens spent from owner to others */\n', '        if (msg.sender == owner && _to != owner) {\n', '            totalSupply += _value;\n', '        }\n', '        /* Remove from shareholders count if tokens spent from holder to owner */\n', '        if (msg.sender != owner && _to == owner) {\n', '            totalSupply = totalSupply.sub(_value);\n', '        }\n', '\n', '        if (owner == _to) {\n', '            // sender is owner\n', '        } else {\n', '            insertShareholder(_to);\n', '        }\n', '\n', '        /* Notify anyone listening that this transfer took place */\n', '        Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        require(!accounts[_from].blacklisted);\n', '        require(!accounts[_to].blacklisted);\n', '        require(_to != address(0));\n', '        require(_value <= accounts[_from].balance);\n', '        require(accounts[_to].balance + _value > accounts[_to].balance);\n', ' \n', '        var fromOwing = nihilumBalanceOf(_from);\n', '        var toOwing = nihilumBalanceOf(_to);\n', '        require(fromOwing <= 0 && toOwing <= 0);\n', ' \n', '        accounts[_from].balance = accounts[_from].balance.sub(_value);\n', '        \n', '        accounts[_to].balance = accounts[_to].balance.add(_value);\n', ' \n', '        accounts[_to].lastNihilum = totalNihilum;//accounts[_from].lastNihilum;\n', ' \n', '        //Transfer(_from, _to, _value);\n', '    }\n', '\n', '\n', '\n', '\n', '\n', '    function addTokens(uint256 numTokens) public onlyOwner {\n', '        if (_allowManualTokensGeneration) {\n', '            balanceOf[msg.sender] += numTokens;\n', '            accounts[msg.sender].balance = accounts[msg.sender].balance.add(numTokens);\n', '            Transfer(0, msg.sender, numTokens);\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function blacklist(address person) public onlyOwner {\n', '        require(person != owner);\n', '        balanceOf[person] = 0;\n', '        accounts[person].balance = 0;\n', '        accounts[person].lastNihilum = totalNihilum;\n', '        accounts[person].blacklisted = true;\n', '    }\n', '\n', '    function () external payable {\n', '      if (!crowdsalePaused) {\n', '          buyTokens();\n', '          } else {\n', '              PayNihilumToContract();\n', '              }\n', '    }\n', '\n', '\n', '        function whitelist(address userAddress) onlyOwner {\n', '            accounts[userAddress].whitelisted = true;            \n', '    }\n', '\n', '    /* Buy Token 1 token for x ether */\n', '    function buyTokens() public whenCrowdsaleNotPaused payable {\n', '        require(!accounts[msg.sender].blacklisted);\n', '        require(msg.value > 0);\n', '        require(msg.value >= _tokenPrice);\n', '        require(msg.value % _tokenPrice == 0);\n', '        var numTokens = msg.value / _tokenPrice;\n', '        require(numTokens >= _minimumTokens);\n', '        balanceOf[msg.sender] += numTokens;\n', '        Transfer(0, msg.sender, numTokens);\n', '        wallet.transfer(msg.value);\n', '        accounts[msg.sender].balance = accounts[msg.sender].balance.add(numTokens);\n', '        insertShareholder(msg.sender);\n', '        if (msg.sender != owner) {\n', '            totalSupply += numTokens;\n', '        }\n', '    }\n', '\n', '    function payNihilum() public onlyOwner {\n', '        if (this.balance > 0 && totalShareholders > 0) {\n', '            for (uint i = lastUnpaidIteration; i <= totalShareholders; i++) {\n', '                uint256 currentBalance = balanceOf[shareholders[i]];\n', '                lastUnpaidIteration = i;\n', '                if (currentBalance > 0 && nihilumBalanceOf(shareholders[i]) > 0 && !accounts[shareholders[i]].isClaiming && msg.gas > 2000) {\n', '                    accounts[shareholders[i]].isClaiming = true;\n', '                    shareholders[i].transfer(nihilumBalanceOf(shareholders[i]));\n', '                    accounts[shareholders[i]].lastNihilum = totalNihilum;\n', '                    accounts[shareholders[i]].isClaiming = false;\n', '                }\n', '            }\n', '            lastUnpaidIteration = 1;\n', '        }\n', '    }\n', '\n', '    function nihilumBalanceOf(address account) public constant returns (uint256) {\n', '        var newNihilum = totalNihilum.sub(accounts[account].lastNihilum);\n', '        var product = accounts[account].balance.mul(newNihilum);\n', '        if (totalSupply <= 0) return 0;\n', '        if (account == owner) return 0;\n', '        return product.div(totalSupply);\n', '    }\n', '\n', '    function claimNihilum() public {\n', '        require(!accounts[msg.sender].blacklisted);\n', '        var owing = nihilumBalanceOf(msg.sender);\n', '        if (owing > 0 && !accounts[msg.sender].isClaiming) {\n', '            accounts[msg.sender].isClaiming = true;\n', '            accounts[msg.sender].lastNihilum = totalNihilum;\n', '            msg.sender.transfer(owing);\n', '            accounts[msg.sender].isClaiming = false;\n', '        }\n', '    }\n', '\n', '    function PayNihilumToContract() public onlyOwner payable {\n', '        totalNihilum = totalNihilum.add(msg.value);\n', '    }\n', '\n', '        function PayToContract() public onlyOwner payable {\n', '        \n', '    }\n', '\n', '    function ChangeTokenPrice(uint256 newPrice) public onlyOwner {\n', '        _tokenPrice = newPrice;\n', '    }\n', '\n', '    function insertShareholder(address _shareholder) internal returns (bool) {\n', '        if (registeredShareholders[_shareholder] == true) {\n', '\n', '        } else {\n', '            totalShareholders += 1;\n', '            shareholders[totalShareholders] = _shareholder;\n', '            registeredShareholders[_shareholder] = true;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '}']
['pragma solidity ^0.4.14;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '//***********Pausible\n', '\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract Crowdsaleable is Pausable {\n', '  event PauseCrowdsale();\n', '  event UnpauseCrowdsale();\n', '\n', '  bool public crowdsalePaused = true;\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenCrowdsaleNotPaused() {\n', '    require(!crowdsalePaused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenCrowdsalePaused {\n', '    require(crowdsalePaused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pauseCrowdsale() public onlyOwner whenCrowdsaleNotPaused returns (bool) {\n', '    crowdsalePaused = true;\n', '    PauseCrowdsale();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpauseCrowdsale() public onlyOwner whenCrowdsalePaused returns (bool) {\n', '    crowdsalePaused = false;\n', '    UnpauseCrowdsale();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract Nihilum is Crowdsaleable {\n', '\n', '\n', '\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    // address where funds are collected\n', '    address public wallet;\n', '    \n', '    \n', '    uint256 public _tokenPrice;\n', '    uint256 public _minimumTokens;\n', '    bool public _allowManualTokensGeneration;\n', '    uint256 public totalSupply;\n', '    uint public totalShareholders;\n', '\n', '    uint256 private lastUnpaidIteration;\n', '\n', '    mapping (address => bool) registeredShareholders;\n', '    mapping (uint => address) shareholders;\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '\n', '    uint256 public totalNihilum;\n', '    struct Account {\n', '        uint256 balance;\n', '        uint256 lastNihilum;\n', '        bool isClaiming;\n', '        bool blacklisted;\n', '        bool whitelisted;\n', '    }\n', '    mapping (address => Account) accounts;\n', '\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function Nihilum() public {\n', '        balanceOf[msg.sender] = 0;\n', '        name = "Nihilum";\n', '        symbol = "NH";\n', '        decimals = 0;\n', '        _tokenPrice = 0.0024 ether;\n', '        _minimumTokens = 50;\n', '        _allowManualTokensGeneration = true;\n', '        wallet = owner;\n', '        owner = msg.sender;\n', '        totalShareholders = 0;\n', '        lastUnpaidIteration = 1;\n', '    }\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        if (balanceOf[msg.sender] < _value) return false;              // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) return false;    // Check for overflows\n', '        if (_to == owner || _to == address(this)) return false;         // makes it illegal to send tokens to owner or this contract\n', '        _transfer(msg.sender, _to, _value);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);                        // Subtract from the sender\n', '        balanceOf[_to] = balanceOf[_to].add(_value);                               // Add the same to the recipient\n', '\n', '        /* Adding to shareholders count if tokens spent from owner to others */\n', '        if (msg.sender == owner && _to != owner) {\n', '            totalSupply += _value;\n', '        }\n', '        /* Remove from shareholders count if tokens spent from holder to owner */\n', '        if (msg.sender != owner && _to == owner) {\n', '            totalSupply = totalSupply.sub(_value);\n', '        }\n', '\n', '        if (owner == _to) {\n', '            // sender is owner\n', '        } else {\n', '            insertShareholder(_to);\n', '        }\n', '\n', '        /* Notify anyone listening that this transfer took place */\n', '        Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        require(!accounts[_from].blacklisted);\n', '        require(!accounts[_to].blacklisted);\n', '        require(_to != address(0));\n', '        require(_value <= accounts[_from].balance);\n', '        require(accounts[_to].balance + _value > accounts[_to].balance);\n', ' \n', '        var fromOwing = nihilumBalanceOf(_from);\n', '        var toOwing = nihilumBalanceOf(_to);\n', '        require(fromOwing <= 0 && toOwing <= 0);\n', ' \n', '        accounts[_from].balance = accounts[_from].balance.sub(_value);\n', '        \n', '        accounts[_to].balance = accounts[_to].balance.add(_value);\n', ' \n', '        accounts[_to].lastNihilum = totalNihilum;//accounts[_from].lastNihilum;\n', ' \n', '        //Transfer(_from, _to, _value);\n', '    }\n', '\n', '\n', '\n', '\n', '\n', '    function addTokens(uint256 numTokens) public onlyOwner {\n', '        if (_allowManualTokensGeneration) {\n', '            balanceOf[msg.sender] += numTokens;\n', '            accounts[msg.sender].balance = accounts[msg.sender].balance.add(numTokens);\n', '            Transfer(0, msg.sender, numTokens);\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function blacklist(address person) public onlyOwner {\n', '        require(person != owner);\n', '        balanceOf[person] = 0;\n', '        accounts[person].balance = 0;\n', '        accounts[person].lastNihilum = totalNihilum;\n', '        accounts[person].blacklisted = true;\n', '    }\n', '\n', '    function () external payable {\n', '      if (!crowdsalePaused) {\n', '          buyTokens();\n', '          } else {\n', '              PayNihilumToContract();\n', '              }\n', '    }\n', '\n', '\n', '        function whitelist(address userAddress) onlyOwner {\n', '            accounts[userAddress].whitelisted = true;            \n', '    }\n', '\n', '    /* Buy Token 1 token for x ether */\n', '    function buyTokens() public whenCrowdsaleNotPaused payable {\n', '        require(!accounts[msg.sender].blacklisted);\n', '        require(msg.value > 0);\n', '        require(msg.value >= _tokenPrice);\n', '        require(msg.value % _tokenPrice == 0);\n', '        var numTokens = msg.value / _tokenPrice;\n', '        require(numTokens >= _minimumTokens);\n', '        balanceOf[msg.sender] += numTokens;\n', '        Transfer(0, msg.sender, numTokens);\n', '        wallet.transfer(msg.value);\n', '        accounts[msg.sender].balance = accounts[msg.sender].balance.add(numTokens);\n', '        insertShareholder(msg.sender);\n', '        if (msg.sender != owner) {\n', '            totalSupply += numTokens;\n', '        }\n', '    }\n', '\n', '    function payNihilum() public onlyOwner {\n', '        if (this.balance > 0 && totalShareholders > 0) {\n', '            for (uint i = lastUnpaidIteration; i <= totalShareholders; i++) {\n', '                uint256 currentBalance = balanceOf[shareholders[i]];\n', '                lastUnpaidIteration = i;\n', '                if (currentBalance > 0 && nihilumBalanceOf(shareholders[i]) > 0 && !accounts[shareholders[i]].isClaiming && msg.gas > 2000) {\n', '                    accounts[shareholders[i]].isClaiming = true;\n', '                    shareholders[i].transfer(nihilumBalanceOf(shareholders[i]));\n', '                    accounts[shareholders[i]].lastNihilum = totalNihilum;\n', '                    accounts[shareholders[i]].isClaiming = false;\n', '                }\n', '            }\n', '            lastUnpaidIteration = 1;\n', '        }\n', '    }\n', '\n', '    function nihilumBalanceOf(address account) public constant returns (uint256) {\n', '        var newNihilum = totalNihilum.sub(accounts[account].lastNihilum);\n', '        var product = accounts[account].balance.mul(newNihilum);\n', '        if (totalSupply <= 0) return 0;\n', '        if (account == owner) return 0;\n', '        return product.div(totalSupply);\n', '    }\n', '\n', '    function claimNihilum() public {\n', '        require(!accounts[msg.sender].blacklisted);\n', '        var owing = nihilumBalanceOf(msg.sender);\n', '        if (owing > 0 && !accounts[msg.sender].isClaiming) {\n', '            accounts[msg.sender].isClaiming = true;\n', '            accounts[msg.sender].lastNihilum = totalNihilum;\n', '            msg.sender.transfer(owing);\n', '            accounts[msg.sender].isClaiming = false;\n', '        }\n', '    }\n', '\n', '    function PayNihilumToContract() public onlyOwner payable {\n', '        totalNihilum = totalNihilum.add(msg.value);\n', '    }\n', '\n', '        function PayToContract() public onlyOwner payable {\n', '        \n', '    }\n', '\n', '    function ChangeTokenPrice(uint256 newPrice) public onlyOwner {\n', '        _tokenPrice = newPrice;\n', '    }\n', '\n', '    function insertShareholder(address _shareholder) internal returns (bool) {\n', '        if (registeredShareholders[_shareholder] == true) {\n', '\n', '        } else {\n', '            totalShareholders += 1;\n', '            shareholders[totalShareholders] = _shareholder;\n', '            registeredShareholders[_shareholder] = true;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '}']
