['/*\n', 'The ChefICO Smart Contract has the following features implemented:\n', '- ETH can only be deposited before the 1st of July, 2018., and only in amounts greater to or equal to 0.2 ETH.\n', '- A address(person) can not deposit ETH to the smart contract after they have already deposited 250 ETH.\n', '- It is not possible to deposit ETH to the smart contract once the hard cap has been reached.\n', '- If a address(person) deposits an ETH amount which makes the total funds deposited to the smart contract exceed the hard cap, \n', '  exceeded amount is returned to the address.\n', '- If a address(person) deposits an amount which is greater than 250 ETH, or which makes their total deposits through the ICO \n', '  exceed 250 ETH, exceeded amount is returned to the address.\n', '\n', '- If a address(person) deposits an amount that is less than 10 ETH, they achieve certain bonuses based on the time of the transaction.\n', '  The time-based bonuses for deposits that are less than 10 ETH are defined as follows:\n', '    1. Deposits made within the first ten days of the ICO achieve a 20% bonus in CHEF tokens.\n', '    2. Deposits made within the second ten days of the ICO achieve a 15% bonus in CHEF tokens.\n', '    3. Deposits made within the third ten days of the ICO achieve a 10% bonus in CHEF tokens.\n', '    4. Deposits made within the fourth ten days of the ICO achieve a 5% bonus in CHEF tokens.\n', '\n', '- If a address(person) deposits an amount that is equal to or greater than 10 ETH, they achieve certain bonuses based on the \n', '  amount transfered. The volume-based bonuses for deposits that are greater than or equal to 10 ETH are defined as follows:\n', '    1. Deposits greater than or equal to 150 ETH achieve a 35% bonus in CHEF tokens.\n', '    2. Deposits smaller than 150 ETH, but greater than or equal to 70 ETH achieve a 30% bonus in CHEF tokens.\n', '    3. Deposits smaller than 70 ETH, but greater than or equal to 25 ETH achieve a 25% bonus in CHEF tokens.\n', '    4. Deposits smaller than 25 ETH, but greater than or equal to 10 ETH achieve a 20% bonus in CHEF tokens.\n', '\n', 'Short overview of significant functions:\n', '- safeWithdrawal:\n', '    This function enables users to withdraw the funds they have deposited to the ICO in case the ICO does not reach the soft cap. \n', '    It will be possible to withdraw the deposited ETH only after the 1st of July, 2018.\n', '- chefOwnerWithdrawal: \n', '    This function enables the ICO smart contract owner to withdraw the funds in case the ICO reaches the soft or hard cap \n', '    (ie. the ICO is successful). The CHEF tokens will be released to investors manually, after we check the KYC status of each \n', '    person that has contributed 10 or more ETH, as well as we confirm that each person has not contributed more than 10 ETH \n', '    from several addresses.\n', '*/\n', '  \n', '  pragma solidity 0.4.23;\n', '  library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ChefICO {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    uint256 public softCap;\n', '    uint256 public hardCap;\n', '    uint256 public totalAmount;\n', '    uint256 public chefPrice;\n', '    uint256 public minimumInvestment;\n', '    uint256 public maximumInvestment;\n', '    uint256 public finalBonus;\n', '    \n', '    uint256 public icoStart;\n', '    uint256 public icoEnd;\n', '    address public chefOwner;\n', '\n', '    bool public softCapReached = false;\n', '    bool public hardCapReached = false;\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => uint256) public chefBalanceOf;\n', '\n', '    event ChefICOSucceed(address indexed recipient, uint totalAmount);\n', '    event ChefICOTransfer(address indexed tokenHolder, uint value, bool isContribution);\n', '\n', '\n', '    function ChefICO() public {\n', '        softCap = 7000 * 1 ether;\n', '        hardCap = 22500 * 1 ether;\n', '        totalAmount = 1100 * 1 ether; //Private presale funds with 35% bonus\n', '        chefPrice = 0.0001 * 1 ether;\n', '        minimumInvestment = 1 ether / 5;\n', '        maximumInvestment = 250 * 1 ether;\n', '       \n', '        icoStart = 1525471200;\n', '        icoEnd = 1530396000;\n', '        chefOwner = msg.sender;\n', '    }\n', '    \n', '    \n', '    function balanceOf(address _contributor) public view returns (uint256 balance) {\n', '        return balanceOf[_contributor];\n', '    }\n', '    \n', '    \n', '    function chefBalanceOf(address _contributor) public view returns (uint256 balance) {\n', '        return chefBalanceOf[_contributor];\n', '    }\n', '\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == chefOwner);\n', '        _;\n', '    }\n', '    \n', '    \n', '    modifier afterICOdeadline() { \n', '        require(now >= icoEnd );\n', '            _; \n', '        }\n', '        \n', '        \n', '    modifier beforeICOdeadline() { \n', '        require(now <= icoEnd );\n', '            _; \n', '        }\n', '    \n', '   \n', '    function () public payable beforeICOdeadline {\n', '        uint256 amount = msg.value;\n', '        require(!hardCapReached);\n', '        require(amount >= minimumInvestment && balanceOf[msg.sender] < maximumInvestment);\n', '        \n', '        if(hardCap <= totalAmount.add(amount)) {\n', '            hardCapReached = true;\n', '            emit ChefICOSucceed(chefOwner, hardCap);\n', '            \n', '             if(hardCap < totalAmount.add(amount)) {\n', '                uint256 returnAmount = totalAmount.add(amount).sub(hardCap);\n', '                msg.sender.transfer(returnAmount);\n', '                emit ChefICOTransfer(msg.sender, returnAmount, false);\n', '                amount = amount.sub(returnAmount);    \n', '             }\n', '        }\n', '        \n', '        if(maximumInvestment < balanceOf[msg.sender].add(amount)) {\n', '          uint overMaxAmount = balanceOf[msg.sender].add(amount).sub(maximumInvestment);\n', '          msg.sender.transfer(overMaxAmount);\n', '          emit ChefICOTransfer(msg.sender, overMaxAmount, false);\n', '          amount = amount.sub(overMaxAmount);\n', '        }\n', '\n', '        totalAmount = totalAmount.add(amount);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\n', '               \n', '        if (amount >= 10 ether) {\n', '            if (amount >= 150 ether) {\n', '                chefBalanceOf[msg.sender] = chefBalanceOf[msg.sender].add(amount.div(chefPrice).mul(135).div(100));\n', '            }\n', '            else if (amount >= 70 ether) {\n', '                chefBalanceOf[msg.sender] = chefBalanceOf[msg.sender].add(amount.div(chefPrice).mul(130).div(100));\n', '            }\n', '            else if (amount >= 25 ether) {\n', '                chefBalanceOf[msg.sender] = chefBalanceOf[msg.sender].add(amount.div(chefPrice).mul(125).div(100));\n', '            }\n', '            else {\n', '                chefBalanceOf[msg.sender] = chefBalanceOf[msg.sender].add(amount.div(chefPrice).mul(120).div(100));\n', '            }\n', '        }\n', '        else if (now <= icoStart.add(10 days)) {\n', '            chefBalanceOf[msg.sender] = chefBalanceOf[msg.sender].add(amount.div(chefPrice).mul(120).div(100));\n', '        }\n', '        else if (now <= icoStart.add(20 days)) {\n', '            chefBalanceOf[msg.sender] = chefBalanceOf[msg.sender].add(amount.div(chefPrice).mul(115).div(100));\n', '        }\n', '        else if (now <= icoStart.add(30 days)) {\n', '            chefBalanceOf[msg.sender] = chefBalanceOf[msg.sender].add(amount.div(chefPrice).mul(110).div(100));\n', '        }\n', '        else if (now <= icoStart.add(40 days)) {\n', '            chefBalanceOf[msg.sender] = chefBalanceOf[msg.sender].add(amount.div(chefPrice).mul(105).div(100));\n', '        }\n', '        else {\n', '            chefBalanceOf[msg.sender] = chefBalanceOf[msg.sender].add(amount.div(chefPrice));\n', '        }\n', '        \n', '        emit ChefICOTransfer(msg.sender, amount, true);\n', '        \n', '        if (totalAmount >= softCap && softCapReached == false ){\n', '        softCapReached = true;\n', '        emit ChefICOSucceed(chefOwner, totalAmount);\n', '        }\n', '    }\n', '\n', '    \n', '   function safeWithdrawal() public afterICOdeadline {\n', '        if (!softCapReached) {\n', '\t    uint256 amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                msg.sender.transfer(amount);\n', '                emit ChefICOTransfer(msg.sender, amount, false);\n', '            }\n', '        }\n', '    }\n', '        \n', '    \n', '    function chefOwnerWithdrawal() public onlyOwner {    \n', '        if ((now >= icoEnd && softCapReached) || hardCapReached) {\n', '            chefOwner.transfer(totalAmount);\n', '            emit ChefICOTransfer(chefOwner, totalAmount, false);\n', '        }\n', '    }\n', '}']
['/*\n', 'The ChefICO Smart Contract has the following features implemented:\n', '- ETH can only be deposited before the 1st of July, 2018., and only in amounts greater to or equal to 0.2 ETH.\n', '- A address(person) can not deposit ETH to the smart contract after they have already deposited 250 ETH.\n', '- It is not possible to deposit ETH to the smart contract once the hard cap has been reached.\n', '- If a address(person) deposits an ETH amount which makes the total funds deposited to the smart contract exceed the hard cap, \n', '  exceeded amount is returned to the address.\n', '- If a address(person) deposits an amount which is greater than 250 ETH, or which makes their total deposits through the ICO \n', '  exceed 250 ETH, exceeded amount is returned to the address.\n', '\n', '- If a address(person) deposits an amount that is less than 10 ETH, they achieve certain bonuses based on the time of the transaction.\n', '  The time-based bonuses for deposits that are less than 10 ETH are defined as follows:\n', '    1. Deposits made within the first ten days of the ICO achieve a 20% bonus in CHEF tokens.\n', '    2. Deposits made within the second ten days of the ICO achieve a 15% bonus in CHEF tokens.\n', '    3. Deposits made within the third ten days of the ICO achieve a 10% bonus in CHEF tokens.\n', '    4. Deposits made within the fourth ten days of the ICO achieve a 5% bonus in CHEF tokens.\n', '\n', '- If a address(person) deposits an amount that is equal to or greater than 10 ETH, they achieve certain bonuses based on the \n', '  amount transfered. The volume-based bonuses for deposits that are greater than or equal to 10 ETH are defined as follows:\n', '    1. Deposits greater than or equal to 150 ETH achieve a 35% bonus in CHEF tokens.\n', '    2. Deposits smaller than 150 ETH, but greater than or equal to 70 ETH achieve a 30% bonus in CHEF tokens.\n', '    3. Deposits smaller than 70 ETH, but greater than or equal to 25 ETH achieve a 25% bonus in CHEF tokens.\n', '    4. Deposits smaller than 25 ETH, but greater than or equal to 10 ETH achieve a 20% bonus in CHEF tokens.\n', '\n', 'Short overview of significant functions:\n', '- safeWithdrawal:\n', '    This function enables users to withdraw the funds they have deposited to the ICO in case the ICO does not reach the soft cap. \n', '    It will be possible to withdraw the deposited ETH only after the 1st of July, 2018.\n', '- chefOwnerWithdrawal: \n', '    This function enables the ICO smart contract owner to withdraw the funds in case the ICO reaches the soft or hard cap \n', '    (ie. the ICO is successful). The CHEF tokens will be released to investors manually, after we check the KYC status of each \n', '    person that has contributed 10 or more ETH, as well as we confirm that each person has not contributed more than 10 ETH \n', '    from several addresses.\n', '*/\n', '  \n', '  pragma solidity 0.4.23;\n', '  library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ChefICO {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    uint256 public softCap;\n', '    uint256 public hardCap;\n', '    uint256 public totalAmount;\n', '    uint256 public chefPrice;\n', '    uint256 public minimumInvestment;\n', '    uint256 public maximumInvestment;\n', '    uint256 public finalBonus;\n', '    \n', '    uint256 public icoStart;\n', '    uint256 public icoEnd;\n', '    address public chefOwner;\n', '\n', '    bool public softCapReached = false;\n', '    bool public hardCapReached = false;\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => uint256) public chefBalanceOf;\n', '\n', '    event ChefICOSucceed(address indexed recipient, uint totalAmount);\n', '    event ChefICOTransfer(address indexed tokenHolder, uint value, bool isContribution);\n', '\n', '\n', '    function ChefICO() public {\n', '        softCap = 7000 * 1 ether;\n', '        hardCap = 22500 * 1 ether;\n', '        totalAmount = 1100 * 1 ether; //Private presale funds with 35% bonus\n', '        chefPrice = 0.0001 * 1 ether;\n', '        minimumInvestment = 1 ether / 5;\n', '        maximumInvestment = 250 * 1 ether;\n', '       \n', '        icoStart = 1525471200;\n', '        icoEnd = 1530396000;\n', '        chefOwner = msg.sender;\n', '    }\n', '    \n', '    \n', '    function balanceOf(address _contributor) public view returns (uint256 balance) {\n', '        return balanceOf[_contributor];\n', '    }\n', '    \n', '    \n', '    function chefBalanceOf(address _contributor) public view returns (uint256 balance) {\n', '        return chefBalanceOf[_contributor];\n', '    }\n', '\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == chefOwner);\n', '        _;\n', '    }\n', '    \n', '    \n', '    modifier afterICOdeadline() { \n', '        require(now >= icoEnd );\n', '            _; \n', '        }\n', '        \n', '        \n', '    modifier beforeICOdeadline() { \n', '        require(now <= icoEnd );\n', '            _; \n', '        }\n', '    \n', '   \n', '    function () public payable beforeICOdeadline {\n', '        uint256 amount = msg.value;\n', '        require(!hardCapReached);\n', '        require(amount >= minimumInvestment && balanceOf[msg.sender] < maximumInvestment);\n', '        \n', '        if(hardCap <= totalAmount.add(amount)) {\n', '            hardCapReached = true;\n', '            emit ChefICOSucceed(chefOwner, hardCap);\n', '            \n', '             if(hardCap < totalAmount.add(amount)) {\n', '                uint256 returnAmount = totalAmount.add(amount).sub(hardCap);\n', '                msg.sender.transfer(returnAmount);\n', '                emit ChefICOTransfer(msg.sender, returnAmount, false);\n', '                amount = amount.sub(returnAmount);    \n', '             }\n', '        }\n', '        \n', '        if(maximumInvestment < balanceOf[msg.sender].add(amount)) {\n', '          uint overMaxAmount = balanceOf[msg.sender].add(amount).sub(maximumInvestment);\n', '          msg.sender.transfer(overMaxAmount);\n', '          emit ChefICOTransfer(msg.sender, overMaxAmount, false);\n', '          amount = amount.sub(overMaxAmount);\n', '        }\n', '\n', '        totalAmount = totalAmount.add(amount);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\n', '               \n', '        if (amount >= 10 ether) {\n', '            if (amount >= 150 ether) {\n', '                chefBalanceOf[msg.sender] = chefBalanceOf[msg.sender].add(amount.div(chefPrice).mul(135).div(100));\n', '            }\n', '            else if (amount >= 70 ether) {\n', '                chefBalanceOf[msg.sender] = chefBalanceOf[msg.sender].add(amount.div(chefPrice).mul(130).div(100));\n', '            }\n', '            else if (amount >= 25 ether) {\n', '                chefBalanceOf[msg.sender] = chefBalanceOf[msg.sender].add(amount.div(chefPrice).mul(125).div(100));\n', '            }\n', '            else {\n', '                chefBalanceOf[msg.sender] = chefBalanceOf[msg.sender].add(amount.div(chefPrice).mul(120).div(100));\n', '            }\n', '        }\n', '        else if (now <= icoStart.add(10 days)) {\n', '            chefBalanceOf[msg.sender] = chefBalanceOf[msg.sender].add(amount.div(chefPrice).mul(120).div(100));\n', '        }\n', '        else if (now <= icoStart.add(20 days)) {\n', '            chefBalanceOf[msg.sender] = chefBalanceOf[msg.sender].add(amount.div(chefPrice).mul(115).div(100));\n', '        }\n', '        else if (now <= icoStart.add(30 days)) {\n', '            chefBalanceOf[msg.sender] = chefBalanceOf[msg.sender].add(amount.div(chefPrice).mul(110).div(100));\n', '        }\n', '        else if (now <= icoStart.add(40 days)) {\n', '            chefBalanceOf[msg.sender] = chefBalanceOf[msg.sender].add(amount.div(chefPrice).mul(105).div(100));\n', '        }\n', '        else {\n', '            chefBalanceOf[msg.sender] = chefBalanceOf[msg.sender].add(amount.div(chefPrice));\n', '        }\n', '        \n', '        emit ChefICOTransfer(msg.sender, amount, true);\n', '        \n', '        if (totalAmount >= softCap && softCapReached == false ){\n', '        softCapReached = true;\n', '        emit ChefICOSucceed(chefOwner, totalAmount);\n', '        }\n', '    }\n', '\n', '    \n', '   function safeWithdrawal() public afterICOdeadline {\n', '        if (!softCapReached) {\n', '\t    uint256 amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                msg.sender.transfer(amount);\n', '                emit ChefICOTransfer(msg.sender, amount, false);\n', '            }\n', '        }\n', '    }\n', '        \n', '    \n', '    function chefOwnerWithdrawal() public onlyOwner {    \n', '        if ((now >= icoEnd && softCapReached) || hardCapReached) {\n', '            chefOwner.transfer(totalAmount);\n', '            emit ChefICOTransfer(chefOwner, totalAmount, false);\n', '        }\n', '    }\n', '}']
