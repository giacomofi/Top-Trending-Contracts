['pragma solidity 0.4.24;\n', '\n', '\n', '// @title SafeMath\n', '// @dev Math operations with safety checks that throw on error\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '// @title Ownable\n', '// @dev The Ownable contract has an owner address, and provides basic authorization control\n', '// functions, this simplifies the implementation of "user permissions".\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    // @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // @dev Throws if called by any account other than the owner.\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    // @param newOwner The address to transfer ownership to.\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// @title ERC20Basic\n', '// @dev Simpler version of ERC20 interface\n', '// @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', 'contract ERC20Basic {\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function totalSupply() public view returns (uint256 supply);\n', '\n', '    function balanceOf(address who) public view returns (uint256 balance);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool success);\n', '}\n', '\n', '\n', '// @title ERC20 interface\n', '// @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', 'contract ERC20 is ERC20Basic {\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256 remaining);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool success);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool success);\n', '}\n', '\n', '\n', '// @title Basic token\n', '// @dev Basic version of StandardToken, with no allowances.\n', 'contract BasicToken is Ownable, ERC20Basic {\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) public balances;\n', '\n', '    // @dev Fix for the ERC20 short address attack.\n', '    modifier onlyPayloadSize(uint256 size) {\n', '        require(!(msg.data.length < size + 4));\n', '        _;\n', '    }\n', '\n', '    // @dev transfer token for a specified address\n', '    // @param _to The address to transfer to.\n', '    // @param _value The amount to be transferred.\n', '    function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // @dev Gets the balance of the specified address.\n', '    // @param _owner The address to query the the balance of.\n', '    // @return An uint256 representing the amount owned by the passed address.\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '\n', '// @title Standard ERC20 token\n', '// @dev Implementation of the basic standard token.\n', '// @dev https://github.com/ethereum/EIPs/issues/20\n', '// @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', 'contract StandardToken is BasicToken, ERC20 {\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '    uint256 public constant MAX_UINT256 = 2 ** 256 - 1;\n', '\n', '    // @dev Transfer tokens from one address to another\n', '    // @param _from address The address which you want to send tokens from\n', '    // @param _to address The address which you want to transfer to\n', '    // @param _value uint256 the amount of tokens to be transferred\n', '    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '        require(_value <= _allowance);\n', '\n', '        // @dev Treat 2^256-1 means unlimited allowance\n', '        if (_allowance < MAX_UINT256)\n', '            allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    // Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    // and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '    // race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '    // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    // @param _spender The address which will spend the funds.\n', '    // @param _value The amount of tokens to be spent.\n', '    function approve(address _spender, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // @dev approve should be called when allowed[_spender] == 0. To increment allowed value is better to use\n', '    // @dev this function to avoid 2 calls (and wait until the first transaction is mined)\n', '    // @param _spender The address which will spend the funds.\n', '    // @param _addedValue The amount of tokens to be added to the allowance.\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    // @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '    // @param _owner address The address which owns the funds.\n', '    // @param _spender address The address which will spend the funds.\n', '    // @return A uint256 specifying the amount of tokens still available for the spender.\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '\n', '// @title Upgraded standard token\n', '// @dev Contract interface that the upgraded contract has to implement\n', '// @dev Methods to be called by the legacy contract\n', '// @dev They have to ensure msg.sender to be the contract address\n', 'contract UpgradedStandardToken is StandardToken {\n', '    function transferByLegacy(address from, address to, uint256 value) public returns (bool success);\n', '\n', '    function transferFromByLegacy(address sender, address from, address spender, uint256 value) public returns (bool success);\n', '\n', '    function approveByLegacy(address from, address spender, uint256 value) public returns (bool success);\n', '\n', '    function increaseApprovalByLegacy(address from, address spender, uint256 value) public returns (bool success);\n', '\n', '    function decreaseApprovalByLegacy(address from, address spender, uint256 value) public returns (bool success);\n', '}\n', '\n', '\n', '// @title Upgradeable standard token\n', '// @dev The upgradeable contract interface\n', '// @dev\n', '// @dev They have to ensure msg.sender to be the contract address\n', 'contract UpgradeableStandardToken is StandardToken {\n', '    address public upgradeAddress;\n', '    uint256 public upgradeTimestamp;\n', '\n', '    //  The contract is initialized with an upgrade timestamp close to the heat death of the universe.\n', '    constructor() public {\n', '        upgradeAddress = address(0);\n', '        //  Set the timestamp of the upgrade to some time close to the heat death of the universe.\n', '        upgradeTimestamp = MAX_UINT256;\n', '    }\n', '\n', '    // Forward ERC20 methods to upgraded contract after the upgrade timestamp has been reached\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        if (now > upgradeTimestamp) {\n', '            return UpgradedStandardToken(upgradeAddress).transferByLegacy(msg.sender, _to, _value);\n', '        } else {\n', '            return super.transfer(_to, _value);\n', '        }\n', '    }\n', '\n', '    // Forward ERC20 methods to upgraded contract after the upgrade timestamp has been reached\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (now > upgradeTimestamp) {\n', '            return UpgradedStandardToken(upgradeAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\n', '        } else {\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '    }\n', '\n', '    // Forward ERC20 methods to upgraded contract after the upgrade timestamp has been reached\n', '    function balanceOf(address who) public view returns (uint256 balance) {\n', '        if (now > upgradeTimestamp) {\n', '            return UpgradedStandardToken(upgradeAddress).balanceOf(who);\n', '        } else {\n', '            return super.balanceOf(who);\n', '        }\n', '    }\n', '\n', '    // Forward ERC20 methods to upgraded contract after the upgrade timestamp has been reached\n', '    function approve(address _spender, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool success) {\n', '        if (now > upgradeTimestamp) {\n', '            return UpgradedStandardToken(upgradeAddress).approveByLegacy(msg.sender, _spender, _value);\n', '        } else {\n', '            return super.approve(_spender, _value);\n', '        }\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n', '        if (now > upgradeTimestamp) {\n', '            return UpgradedStandardToken(upgradeAddress).increaseApprovalByLegacy(msg.sender, _spender, _addedValue);\n', '        } else {\n', '            return super.increaseApproval(_spender, _addedValue);\n', '        }\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n', '        if (now > upgradeTimestamp) {\n', '            return UpgradedStandardToken(upgradeAddress).decreaseApprovalByLegacy(msg.sender, _spender, _subtractedValue);\n', '        } else {\n', '            return super.decreaseApproval(_spender, _subtractedValue);\n', '        }\n', '    }\n', '\n', '    // Forward ERC20 methods to upgraded contract after the upgrade timestamp has been reached\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        if (now > upgradeTimestamp) {\n', '            return StandardToken(upgradeAddress).allowance(_owner, _spender);\n', '        } else {\n', '            return super.allowance(_owner, _spender);\n', '        }\n', '    }\n', '\n', '    // Upgrade this contract with a new one, it will auto-activate 12 weeks later\n', '    function upgrade(address _upgradeAddress) public onlyOwner {\n', '        require(now < upgradeTimestamp);\n', '        require(_upgradeAddress != address(0));\n', '\n', '        upgradeAddress = _upgradeAddress;\n', '        upgradeTimestamp = now.add(12 weeks);\n', '        emit Upgrading(_upgradeAddress, upgradeTimestamp);\n', '    }\n', '\n', '    // Called when contract is upgrading\n', '    event Upgrading(address newAddress, uint256 timestamp);\n', '}\n', '\n', '\n', '// @title The AVINOC Token contract\n', 'contract AVINOCToken is UpgradeableStandardToken {\n', '    string public constant name = "AVINOC Token";\n', '    string public constant symbol = "AVINOC";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant decimalFactor = 10 ** uint256(decimals);\n', '    uint256 public constant TOTAL_SUPPLY = 1000000000 * decimalFactor;\n', '\n', '    constructor() public {\n', '        balances[owner] = TOTAL_SUPPLY;\n', '    }\n', '\n', '    // @dev Don&#39;t accept ETH\n', '    function() public payable {\n', '        revert();\n', '    }\n', '\n', '    // @dev return the fixed total supply\n', '    function totalSupply() public view returns (uint256) {\n', '        return TOTAL_SUPPLY;\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '\n', '// @title SafeMath\n', '// @dev Math operations with safety checks that throw on error\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '}\n', '\n', '\n', '// @title Ownable\n', '// @dev The Ownable contract has an owner address, and provides basic authorization control\n', '// functions, this simplifies the implementation of "user permissions".\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    // @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // @dev Throws if called by any account other than the owner.\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    // @param newOwner The address to transfer ownership to.\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// @title ERC20Basic\n', '// @dev Simpler version of ERC20 interface\n', '// @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', 'contract ERC20Basic {\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function totalSupply() public view returns (uint256 supply);\n', '\n', '    function balanceOf(address who) public view returns (uint256 balance);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool success);\n', '}\n', '\n', '\n', '// @title ERC20 interface\n', '// @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', 'contract ERC20 is ERC20Basic {\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256 remaining);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool success);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool success);\n', '}\n', '\n', '\n', '// @title Basic token\n', '// @dev Basic version of StandardToken, with no allowances.\n', 'contract BasicToken is Ownable, ERC20Basic {\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) public balances;\n', '\n', '    // @dev Fix for the ERC20 short address attack.\n', '    modifier onlyPayloadSize(uint256 size) {\n', '        require(!(msg.data.length < size + 4));\n', '        _;\n', '    }\n', '\n', '    // @dev transfer token for a specified address\n', '    // @param _to The address to transfer to.\n', '    // @param _value The amount to be transferred.\n', '    function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // @dev Gets the balance of the specified address.\n', '    // @param _owner The address to query the the balance of.\n', '    // @return An uint256 representing the amount owned by the passed address.\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '\n', '// @title Standard ERC20 token\n', '// @dev Implementation of the basic standard token.\n', '// @dev https://github.com/ethereum/EIPs/issues/20\n', '// @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', 'contract StandardToken is BasicToken, ERC20 {\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '    uint256 public constant MAX_UINT256 = 2 ** 256 - 1;\n', '\n', '    // @dev Transfer tokens from one address to another\n', '    // @param _from address The address which you want to send tokens from\n', '    // @param _to address The address which you want to transfer to\n', '    // @param _value uint256 the amount of tokens to be transferred\n', '    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '        require(_value <= _allowance);\n', '\n', '        // @dev Treat 2^256-1 means unlimited allowance\n', '        if (_allowance < MAX_UINT256)\n', '            allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    // Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    // and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    // race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    // @param _spender The address which will spend the funds.\n', '    // @param _value The amount of tokens to be spent.\n', '    function approve(address _spender, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // @dev approve should be called when allowed[_spender] == 0. To increment allowed value is better to use\n', '    // @dev this function to avoid 2 calls (and wait until the first transaction is mined)\n', '    // @param _spender The address which will spend the funds.\n', '    // @param _addedValue The amount of tokens to be added to the allowance.\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    // @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '    // @param _owner address The address which owns the funds.\n', '    // @param _spender address The address which will spend the funds.\n', '    // @return A uint256 specifying the amount of tokens still available for the spender.\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '\n', '// @title Upgraded standard token\n', '// @dev Contract interface that the upgraded contract has to implement\n', '// @dev Methods to be called by the legacy contract\n', '// @dev They have to ensure msg.sender to be the contract address\n', 'contract UpgradedStandardToken is StandardToken {\n', '    function transferByLegacy(address from, address to, uint256 value) public returns (bool success);\n', '\n', '    function transferFromByLegacy(address sender, address from, address spender, uint256 value) public returns (bool success);\n', '\n', '    function approveByLegacy(address from, address spender, uint256 value) public returns (bool success);\n', '\n', '    function increaseApprovalByLegacy(address from, address spender, uint256 value) public returns (bool success);\n', '\n', '    function decreaseApprovalByLegacy(address from, address spender, uint256 value) public returns (bool success);\n', '}\n', '\n', '\n', '// @title Upgradeable standard token\n', '// @dev The upgradeable contract interface\n', '// @dev\n', '// @dev They have to ensure msg.sender to be the contract address\n', 'contract UpgradeableStandardToken is StandardToken {\n', '    address public upgradeAddress;\n', '    uint256 public upgradeTimestamp;\n', '\n', '    //  The contract is initialized with an upgrade timestamp close to the heat death of the universe.\n', '    constructor() public {\n', '        upgradeAddress = address(0);\n', '        //  Set the timestamp of the upgrade to some time close to the heat death of the universe.\n', '        upgradeTimestamp = MAX_UINT256;\n', '    }\n', '\n', '    // Forward ERC20 methods to upgraded contract after the upgrade timestamp has been reached\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        if (now > upgradeTimestamp) {\n', '            return UpgradedStandardToken(upgradeAddress).transferByLegacy(msg.sender, _to, _value);\n', '        } else {\n', '            return super.transfer(_to, _value);\n', '        }\n', '    }\n', '\n', '    // Forward ERC20 methods to upgraded contract after the upgrade timestamp has been reached\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (now > upgradeTimestamp) {\n', '            return UpgradedStandardToken(upgradeAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\n', '        } else {\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '    }\n', '\n', '    // Forward ERC20 methods to upgraded contract after the upgrade timestamp has been reached\n', '    function balanceOf(address who) public view returns (uint256 balance) {\n', '        if (now > upgradeTimestamp) {\n', '            return UpgradedStandardToken(upgradeAddress).balanceOf(who);\n', '        } else {\n', '            return super.balanceOf(who);\n', '        }\n', '    }\n', '\n', '    // Forward ERC20 methods to upgraded contract after the upgrade timestamp has been reached\n', '    function approve(address _spender, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool success) {\n', '        if (now > upgradeTimestamp) {\n', '            return UpgradedStandardToken(upgradeAddress).approveByLegacy(msg.sender, _spender, _value);\n', '        } else {\n', '            return super.approve(_spender, _value);\n', '        }\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n', '        if (now > upgradeTimestamp) {\n', '            return UpgradedStandardToken(upgradeAddress).increaseApprovalByLegacy(msg.sender, _spender, _addedValue);\n', '        } else {\n', '            return super.increaseApproval(_spender, _addedValue);\n', '        }\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n', '        if (now > upgradeTimestamp) {\n', '            return UpgradedStandardToken(upgradeAddress).decreaseApprovalByLegacy(msg.sender, _spender, _subtractedValue);\n', '        } else {\n', '            return super.decreaseApproval(_spender, _subtractedValue);\n', '        }\n', '    }\n', '\n', '    // Forward ERC20 methods to upgraded contract after the upgrade timestamp has been reached\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        if (now > upgradeTimestamp) {\n', '            return StandardToken(upgradeAddress).allowance(_owner, _spender);\n', '        } else {\n', '            return super.allowance(_owner, _spender);\n', '        }\n', '    }\n', '\n', '    // Upgrade this contract with a new one, it will auto-activate 12 weeks later\n', '    function upgrade(address _upgradeAddress) public onlyOwner {\n', '        require(now < upgradeTimestamp);\n', '        require(_upgradeAddress != address(0));\n', '\n', '        upgradeAddress = _upgradeAddress;\n', '        upgradeTimestamp = now.add(12 weeks);\n', '        emit Upgrading(_upgradeAddress, upgradeTimestamp);\n', '    }\n', '\n', '    // Called when contract is upgrading\n', '    event Upgrading(address newAddress, uint256 timestamp);\n', '}\n', '\n', '\n', '// @title The AVINOC Token contract\n', 'contract AVINOCToken is UpgradeableStandardToken {\n', '    string public constant name = "AVINOC Token";\n', '    string public constant symbol = "AVINOC";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant decimalFactor = 10 ** uint256(decimals);\n', '    uint256 public constant TOTAL_SUPPLY = 1000000000 * decimalFactor;\n', '\n', '    constructor() public {\n', '        balances[owner] = TOTAL_SUPPLY;\n', '    }\n', '\n', "    // @dev Don't accept ETH\n", '    function() public payable {\n', '        revert();\n', '    }\n', '\n', '    // @dev return the fixed total supply\n', '    function totalSupply() public view returns (uint256) {\n', '        return TOTAL_SUPPLY;\n', '    }\n', '}']
