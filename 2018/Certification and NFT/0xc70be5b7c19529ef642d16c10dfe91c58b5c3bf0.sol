['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title Maths\n', ' * A library to make working with numbers in Solidity hurt your brain less.\n', ' */\n', 'library Maths {\n', '  /**\n', '   * @dev Adds two addends together, returns the sum\n', '   * @param addendA the first addend\n', '   * @param addendB the second addend\n', '   * @return sum the sum of the equation (e.g. addendA + addendB)\n', '   */\n', '  function plus(\n', '    uint256 addendA,\n', '    uint256 addendB\n', '  ) public pure returns (uint256 sum) {\n', '    sum = addendA + addendB;\n', '  }\n', '\n', '  /**\n', '   * @dev Subtracts the minuend from the subtrahend, returns the difference\n', '   * @param minuend the minuend\n', '   * @param subtrahend the subtrahend\n', '   * @return difference the difference (e.g. minuend - subtrahend)\n', '   */\n', '  function minus(\n', '    uint256 minuend,\n', '    uint256 subtrahend\n', '  ) public pure returns (uint256 difference) {\n', '    assert(minuend >= subtrahend);\n', '    difference = minuend - subtrahend;\n', '  }\n', '\n', '  /**\n', '   * @dev Multiplies two factors, returns the product\n', '   * @param factorA the first factor\n', '   * @param factorB the second factor\n', '   * @return product the product of the equation (e.g. factorA * factorB)\n', '   */\n', '  function mul(\n', '    uint256 factorA,\n', '    uint256 factorB\n', '  ) public pure returns (uint256 product) {\n', '    if (factorA == 0 || factorB == 0) return 0;\n', '    product = factorA * factorB;\n', '    assert(product / factorA == factorB);\n', '  }\n', '\n', '  /**\n', '   * @dev Multiplies two factors, returns the product\n', '   * @param factorA the first factor\n', '   * @param factorB the second factor\n', '   * @return product the product of the equation (e.g. factorA * factorB)\n', '   */\n', '  function times(\n', '    uint256 factorA,\n', '    uint256 factorB\n', '  ) public pure returns (uint256 product) {\n', '    return mul(factorA, factorB);\n', '  }\n', '\n', '  /**\n', '   * @dev Divides the dividend by divisor, returns the truncated quotient\n', '   * @param dividend the dividend\n', '   * @param divisor the divisor\n', '   * @return quotient the quotient of the equation (e.g. dividend / divisor)\n', '   */\n', '  function div(\n', '    uint256 dividend,\n', '    uint256 divisor\n', '  ) public pure returns (uint256 quotient) {\n', '    quotient = dividend / divisor;\n', '    assert(quotient * divisor == dividend);\n', '  }\n', '\n', '  /**\n', '   * @dev Divides the dividend by divisor, returns the truncated quotient\n', '   * @param dividend the dividend\n', '   * @param divisor the divisor\n', '   * @return quotient the quotient of the equation (e.g. dividend / divisor)\n', '   */\n', '  function dividedBy(\n', '    uint256 dividend,\n', '    uint256 divisor\n', '  ) public pure returns (uint256 quotient) {\n', '    return div(dividend, divisor);\n', '  }\n', '\n', '  /**\n', '   * @dev Divides the dividend by divisor, returns the quotient and remainder\n', '   * @param dividend the dividend\n', '   * @param divisor the divisor\n', '   * @return quotient the quotient of the equation (e.g. dividend / divisor)\n', '   * @return remainder the remainder of the equation (e.g. dividend % divisor)\n', '   */\n', '  function divideSafely(\n', '    uint256 dividend,\n', '    uint256 divisor\n', '  ) public pure returns (uint256 quotient, uint256 remainder) {\n', '    quotient = div(dividend, divisor);\n', '    remainder = dividend % divisor;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the lesser of two values.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return result the lesser of the two values\n', '   */\n', '  function min(\n', '    uint256 a,\n', '    uint256 b\n', '  ) public pure returns (uint256 result) {\n', '    result = a <= b ? a : b;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the greater of two values.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return result the greater of the two values\n', '   */\n', '  function max(\n', '    uint256 a,\n', '    uint256 b\n', '  ) public pure returns (uint256 result) {\n', '    result = a >= b ? a : b;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines whether a value is less than another.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return isTrue whether a is less than b\n', '   */\n', '  function isLessThan(uint256 a, uint256 b) public pure returns (bool isTrue) {\n', '    isTrue = a < b;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines whether a value is equal to or less than another.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return isTrue whether a is less than or equal to b\n', '   */\n', '  function isAtMost(uint256 a, uint256 b) public pure returns (bool isTrue) {\n', '    isTrue = a <= b;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines whether a value is greater than another.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return isTrue whether a is greater than b\n', '   */\n', '  function isGreaterThan(uint256 a, uint256 b) public pure returns (bool isTrue) {\n', '    isTrue = a > b;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines whether a value is equal to or greater than another.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return isTrue whether a is less than b\n', '   */\n', '  function isAtLeast(uint256 a, uint256 b) public pure returns (bool isTrue) {\n', '    isTrue = a >= b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Manageable\n', ' */\n', 'contract Manageable {\n', '  address public owner;\n', '  address public manager;\n', '\n', '  event OwnershipChanged(address indexed previousOwner, address indexed newOwner);\n', '  event ManagementChanged(address indexed previousManager, address indexed newManager);\n', '\n', '  /**\n', '   * @dev The Manageable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Manageable() public {\n', '    owner = msg.sender;\n', '    manager = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner or manager.\n', '   */\n', '  modifier onlyManagement() {\n', '    require(msg.sender == owner || msg.sender == manager);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipChanged(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the owner or manager to replace the current manager\n', '   * @param newManager The address to give contract management rights.\n', '   */\n', '  function replaceManager(address newManager) public onlyManagement {\n', '    require(newManager != address(0));\n', '    emit ManagementChanged(manager, newManager);\n', '    manager = newManager;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Basic {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function exists(uint256 _tokenId) public view returns (bool _exists);\n', '\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function getApproved(uint256 _tokenId) public view returns (address _operator);\n', '\n', '  function setApprovalForAll(address _operator, bool _approved) public;\n', '  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  ) public;\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Enumerable is ERC721Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\n', '  function tokenByIndex(uint256 _index) public view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Metadata is ERC721Basic {\n', '  function tokenURI(uint256 _tokenId) public view returns (string);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n', '}\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' *  from ERC721 asset contracts.\n', ' */\n', 'contract ERC721Receiver {\n', '  /**\n', '   * @dev Magic value to be returned upon successful reception of an NFT\n', '   *  Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`,\n', '   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '   */\n', '  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n', '\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient\n', '   *  after a `safetransfer`. This function MAY throw to revert and reject the\n', '   *  transfer. This function MUST use 50,000 gas or less. Return of other\n', '   *  than the magic value MUST result in the transaction being reverted.\n', '   *  Note: the contract address is always the message sender.\n', '   * @param _from The sending address\n', '   * @param _tokenId The NFT identifier which is being transfered\n', '   * @param _data Additional data with no specified format\n', '   * @return `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '   */\n', '  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\n', '}\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721BasicToken is ERC721Basic {\n', '  using Maths for uint256;\n', '\n', '  // Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) internal tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) internal tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping (address => uint256) internal ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping (address => mapping (address => bool)) internal operatorApprovals;\n', '\n', '  /**\n', '   * @dev Guarantees msg.sender is owner of the given token\n', '   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '   */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n', '   * @param _tokenId uint256 ID of the token to validate\n', '   */\n', '  modifier canTransfer(uint256 _tokenId) {\n', '    require(isApprovedOrOwner(msg.sender, _tokenId));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address\n', '   * @param _owner address to query the balance of\n', '   * @return uint256 representing the amount owned by the passed address\n', '   */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    require(_owner != address(0));\n', '    return ownedTokensCount[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the owner of the specified token ID\n', '   * @param _tokenId uint256 ID of the token to query the owner of\n', '   * @return owner address currently marked as the owner of the given token ID\n', '   */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address holder = tokenOwner[_tokenId];\n', '    require(holder != address(0));\n', '    return holder;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the specified token exists\n', '   * @param _tokenId uint256 ID of the token to query the existance of\n', '   * @return whether the token exists\n', '   */\n', '  function exists(uint256 _tokenId) public view returns (bool) {\n', '    address holder = tokenOwner[_tokenId];\n', '    return holder != address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Approves another address to transfer the given token ID\n', '   * @dev The zero address indicates there is no approved address.\n', '   * @dev There can only be one approved address per token at a given time.\n', '   * @dev Can only be called by the token owner or an approved operator.\n', '   * @param _to address to be approved for the given token ID\n', '   * @param _tokenId uint256 ID of the token to be approved\n', '   */\n', '  function approve(address _to, uint256 _tokenId) public {\n', '    address holder = ownerOf(_tokenId);\n', '    require(_to != holder);\n', '    require(msg.sender == holder || isApprovedForAll(holder, msg.sender));\n', '\n', '    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      emit Approval(holder, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for a the given token ID\n', '   */\n', '  function getApproved(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n', '   * @param _to operator address to set the approval\n', '   * @param _approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(address _to, bool _approved) public {\n', '    require(_to != msg.sender);\n', '    operatorApprovals[msg.sender][_to] = _approved;\n', '    emit ApprovalForAll(msg.sender, _to, _approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param _owner owner address which you want to query the approval of\n', '   * @param _operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n', '    return operatorApprovals[_owner][_operator];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers the ownership of a given token ID to another address\n', '   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\n', '    require(_from != address(0));\n', '    require(_to != address(0));\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeTokenFrom(_from, _tokenId);\n', '    addTokenTo(_to, _tokenId);\n', '\n', '    emit Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '   *  which is called upon a safe transfer, and return the magic value\n', '   *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '   *  the transfer is reverted.\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '    canTransfer(_tokenId)\n', '  {\n', '    // solium-disable-next-line arg-overflow\n', '    safeTransferFrom(_from, _to, _tokenId, "");\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '   *  which is called upon a safe transfer, and return the magic value\n', '   *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '   *  the transfer is reverted.\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '    canTransfer(_tokenId)\n', '  {\n', '    transferFrom(_from, _to, _tokenId);\n', '    // solium-disable-next-line arg-overflow\n', '    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the given spender can transfer a given token ID\n', '   * @param _spender address of the spender to query\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @return bool whether the msg.sender is approved for the given token ID,\n', '   *  is an operator of the owner, or is the owner of the token\n', '   */\n', '  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\n', '    address holder = ownerOf(_tokenId);\n', '    return _spender == holder || getApproved(_tokenId) == _spender || isApprovedForAll(holder, _spender);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * @dev Reverts if the given token ID already exists\n', '   * @param _to The address that will own the minted token\n', '   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    addTokenTo(_to, _tokenId);\n', '    emit Transfer(address(0), _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * @dev Reverts if the token does not exist\n', '   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    clearApproval(_owner, _tokenId);\n', '    removeTokenFrom(_owner, _tokenId);\n', '    emit Transfer(_owner, address(0), _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to clear current approval of a given token ID\n', '   * @dev Reverts if the given address is not indeed the owner of the token\n', '   * @param _owner owner of the token\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function clearApproval(address _owner, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    if (tokenApprovals[_tokenId] != address(0)) {\n', '      tokenApprovals[_tokenId] = address(0);\n', '      emit Approval(_owner, address(0), _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param _to address representing the new owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    ownedTokensCount[_to] = ownedTokensCount[_to].plus(1);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _from);\n', '    ownedTokensCount[_from] = ownedTokensCount[_from].minus(1);\n', '    tokenOwner[_tokenId] = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onERC721Received` on a target address\n', '   * @dev The call is not executed if the target address is not a contract\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _to target address that will receive the tokens\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function checkAndCallSafeTransfer(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    if (!isContract(_to)) {\n', '      return true;\n', '    }\n', '    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\n', '    return (retval == ERC721_RECEIVED);\n', '  }\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   *  as the code is not actually created until after the constructor finishes.\n', '   * @param addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\n', '    return size > 0;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Token is ERC721, ERC721BasicToken {\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) internal ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] internal allTokens;\n', '\n', '  // Mapping from token id to position in the allTokens array\n', '  mapping(uint256 => uint256) internal allTokensIndex;\n', '\n', '  // Optional mapping for token URIs\n', '  mapping(uint256 => string) internal tokenURIs;\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  function ERC721Token() public { }\n', '\n', '  /**\n', '   * @dev Returns an URI for a given token ID\n', '   * @dev Throws if the token ID does not exist. May return an empty string.\n', '   * @param _tokenId uint256 ID of the token to query\n', '   */\n', '  function tokenURI(uint256 _tokenId) public view returns (string) {\n', '    require(exists(_tokenId));\n', '    return tokenURIs[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets a list of token IDs owned by the requested address\n', '   * @param _owner address owning the tokens list to be accessed\n', '   * @return uint256[] list of token IDs owned by the requested address\n', '   */\n', '  function tokensOf(address _owner) public view returns (uint256[]) {\n', '    return ownedTokens[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '   * @param _owner address owning the tokens list to be accessed\n', '   * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '   */\n', '  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\n', '    require(_index < balanceOf(_owner));\n', '    return ownedTokens[_owner][_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the total amount of tokens stored by the contract\n', '   * @return uint256 representing the total amount of tokens\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return allTokens.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of all the tokens in this contract\n', '   * @dev Reverts if the index is greater or equal to the total number of tokens\n', '   * @param _index uint256 representing the index to be accessed of the tokens list\n', '   * @return uint256 token ID at the given index of the tokens list\n', '   */\n', '  function tokenByIndex(uint256 _index) public view returns (uint256) {\n', '    require(_index < totalSupply());\n', '    return allTokens[_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to set the token URI for a given token\n', '   * @dev Reverts if the token ID does not exist\n', '   * @param _tokenId uint256 ID of the token to set its URI\n', '   * @param _uri string URI to assign\n', '   */\n', '  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n', '    require(exists(_tokenId));\n', '    tokenURIs[_tokenId] = _uri;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param _to address representing the new owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    super.addTokenTo(_to, _tokenId);\n', '    uint256 length = ownedTokens[_to].length;\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    super.removeTokenFrom(_from, _tokenId);\n', '\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = ownedTokens[_from].length.minus(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    ownedTokens[_from][lastTokenIndex] = 0;\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * @dev Reverts if the given token ID already exists\n', '   * @param _to address the beneficiary that will own the minted token\n', '   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    super._mint(_to, _tokenId);\n', '\n', '    allTokensIndex[_tokenId] = allTokens.length;\n', '    allTokens.push(_tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * @dev Reverts if the token does not exist\n', '   * @param _owner owner of the token to burn\n', '   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    super._burn(_owner, _tokenId);\n', '\n', '    // Clear metadata (if any)\n', '    if (bytes(tokenURIs[_tokenId]).length != 0) {\n', '      delete tokenURIs[_tokenId];\n', '    }\n', '\n', '    // Reorg all tokens array\n', '    uint256 tokenIndex = allTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = allTokens.length.minus(1);\n', '    uint256 lastToken = allTokens[lastTokenIndex];\n', '\n', '    allTokens[tokenIndex] = lastToken;\n', '    allTokens[lastTokenIndex] = 0;\n', '\n', '    allTokens.length--;\n', '    allTokensIndex[_tokenId] = 0;\n', '    allTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '}\n', '\n', 'contract CardToken is ERC721Token, Manageable {\n', '  string public constant name = "Mythereum Card";\n', '  string public constant symbol = "CARD";\n', '\n', '  mapping (uint8 => string) public className;\n', '  mapping (uint8 => Card[]) public cardsInEdition;\n', '  uint8 public latestEditionReleased;\n', '\n', '  struct Card {\n', '    string    name;\n', '    uint8     class;\n', '    uint8     classVariant;\n', '    uint256   damagePoints;\n', '    uint256   shieldPoints;\n', '    uint256   abilityId;\n', '  }\n', '\n', '  struct Ability {\n', '    string  name;\n', '    bool    canBeBlocked;\n', '    uint8   blackMagicCost;\n', '    uint8   grayMagicCost;\n', '    uint8   whiteMagicCost;\n', '    uint256 addedDamage;\n', '    uint256 addedShield;\n', '  }\n', '\n', '  Card[] public cards;\n', '  Ability[] public abilities;\n', '\n', '  function isEditionAvailable(uint8 _editionNumber) public view returns (bool) {\n', '    return _editionNumber <= latestEditionReleased;\n', '  }\n', '\n', '  function mintRandomCards(\n', '    address _owner,\n', '    uint8 _editionNumber,\n', '    uint8 _numCards\n', '  ) public onlyManagement returns (bool) {\n', '    require(isEditionAvailable(_editionNumber));\n', '    for(uint8 i = 0; i < _numCards; i++) {\n', '      Card storage card = cardsInEdition[_editionNumber][\n', '        uint256(keccak256(now, _owner, _editionNumber, _numCards, i)) % cardsInEdition[_editionNumber].length\n', '      ];\n', '\n', '      _cloneCard(card, _owner);\n', '    }\n', '    return true;\n', '  }\n', '\n', '  function mintSpecificCard(\n', '    address _owner,\n', '    uint8   _editionNumber,\n', '    uint256 _cardIndex\n', '  ) public onlyManagement returns (bool) {\n', '    require(isEditionAvailable(_editionNumber));\n', '    require(_cardIndex < cardsInEdition[_editionNumber].length);\n', '    _cloneCard(cardsInEdition[_editionNumber][_cardIndex], _owner);\n', '  }\n', '\n', '  function mintSpecificCards(\n', '    address   _owner,\n', '    uint8     _editionNumber,\n', '    uint256[] _cardIndexes\n', '  ) public onlyManagement returns (bool) {\n', '    require(isEditionAvailable(_editionNumber));\n', '    require(_cardIndexes.length > 0 && _cardIndexes.length <= 10);\n', '\n', '    for(uint8 i = 0; i < _cardIndexes.length; i++) {\n', '      require(_cardIndexes[i] < cardsInEdition[_editionNumber].length);\n', '      _cloneCard(cardsInEdition[_editionNumber][_cardIndexes[i]], _owner);\n', '    }\n', '  }\n', '\n', '  function improveCard(\n', '    uint256 _tokenId,\n', '    uint256 _addedDamage,\n', '    uint256 _addedShield\n', '  ) public onlyManagement returns (bool) {\n', '    require(exists(_tokenId));\n', '    Card storage card = cards[_tokenId];\n', '    card.damagePoints = card.damagePoints.plus(_addedDamage);\n', '    card.shieldPoints = card.shieldPoints.plus(_addedShield);\n', '    return true;\n', '  }\n', '\n', '  function destroyCard(uint256 _tokenId) public onlyManagement returns (bool) {\n', '    require(exists(_tokenId));\n', '    _burn(ownerOf(_tokenId), _tokenId);\n', '    return true;\n', '  }\n', '\n', '  function setLatestEdition(uint8 _editionNumber) public onlyManagement {\n', '    require(cardsInEdition[_editionNumber].length.isAtLeast(1));\n', '    latestEditionReleased = _editionNumber;\n', '  }\n', '\n', '  function setTokenURI(uint256 _tokenId, string _uri) public onlyManagement {\n', '    require(exists(_tokenId));\n', '    tokenURIs[_tokenId] = _uri;\n', '  }\n', '\n', '  function addAbility(\n', '    string  _name,\n', '    bool    _canBeBlocked,\n', '    uint8   _blackMagicCost,\n', '    uint8   _grayMagicCost,\n', '    uint8   _whiteMagicCost,\n', '    uint256 _addedDamage,\n', '    uint256 _addedShield\n', '  ) public onlyManagement {\n', '    abilities.push(\n', '      Ability(\n', '        _name,\n', '        _canBeBlocked,\n', '        _blackMagicCost,\n', '        _grayMagicCost,\n', '        _whiteMagicCost,\n', '        _addedDamage,\n', '        _addedShield\n', '      )\n', '    );\n', '  }\n', '\n', '  function replaceAbility(\n', '    uint256 _abilityId,\n', '    string  _name,\n', '    bool    _canBeBlocked,\n', '    uint8   _blackMagicCost,\n', '    uint8   _grayMagicCost,\n', '    uint8   _whiteMagicCost,\n', '    uint256 _addedDamage,\n', '    uint256 _addedShield\n', '  ) public onlyManagement {\n', '    require(_abilityId.isLessThan(abilities.length));\n', '    abilities[_abilityId].name           = _name;\n', '    abilities[_abilityId].canBeBlocked   = _canBeBlocked;\n', '    abilities[_abilityId].blackMagicCost = _blackMagicCost;\n', '    abilities[_abilityId].grayMagicCost  = _grayMagicCost;\n', '    abilities[_abilityId].whiteMagicCost = _whiteMagicCost;\n', '    abilities[_abilityId].addedDamage    = _addedDamage;\n', '    abilities[_abilityId].addedShield    = _addedShield;\n', '  }\n', '\n', '  function addCardToEdition(\n', '    uint8   _editionNumber,\n', '    string  _name,\n', '    uint8   _classId,\n', '    uint8   _classVariant,\n', '    uint256 _damagePoints,\n', '    uint256 _shieldPoints,\n', '    uint256 _abilityId\n', '  ) public onlyManagement {\n', '    require(_abilityId.isLessThan(abilities.length));\n', '\n', '    cardsInEdition[_editionNumber].push(\n', '      Card({\n', '        name:         _name,\n', '        class:        _classId,\n', '        classVariant: _classVariant,\n', '        damagePoints: _damagePoints,\n', '        shieldPoints: _shieldPoints,\n', '        abilityId:    _abilityId\n', '      })\n', '    );\n', '  }\n', '\n', '  function setClassName(uint8 _classId, string _name) public onlyManagement {\n', '    className[_classId] = _name;\n', '  }\n', '\n', '  function _cloneCard(Card storage card, address owner) internal {\n', '    require(card.damagePoints > 0 || card.shieldPoints > 0);\n', '    uint256 tokenId = cards.length;\n', '    cards.push(card);\n', '    _mint(owner, tokenId);\n', '  }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title Maths\n', ' * A library to make working with numbers in Solidity hurt your brain less.\n', ' */\n', 'library Maths {\n', '  /**\n', '   * @dev Adds two addends together, returns the sum\n', '   * @param addendA the first addend\n', '   * @param addendB the second addend\n', '   * @return sum the sum of the equation (e.g. addendA + addendB)\n', '   */\n', '  function plus(\n', '    uint256 addendA,\n', '    uint256 addendB\n', '  ) public pure returns (uint256 sum) {\n', '    sum = addendA + addendB;\n', '  }\n', '\n', '  /**\n', '   * @dev Subtracts the minuend from the subtrahend, returns the difference\n', '   * @param minuend the minuend\n', '   * @param subtrahend the subtrahend\n', '   * @return difference the difference (e.g. minuend - subtrahend)\n', '   */\n', '  function minus(\n', '    uint256 minuend,\n', '    uint256 subtrahend\n', '  ) public pure returns (uint256 difference) {\n', '    assert(minuend >= subtrahend);\n', '    difference = minuend - subtrahend;\n', '  }\n', '\n', '  /**\n', '   * @dev Multiplies two factors, returns the product\n', '   * @param factorA the first factor\n', '   * @param factorB the second factor\n', '   * @return product the product of the equation (e.g. factorA * factorB)\n', '   */\n', '  function mul(\n', '    uint256 factorA,\n', '    uint256 factorB\n', '  ) public pure returns (uint256 product) {\n', '    if (factorA == 0 || factorB == 0) return 0;\n', '    product = factorA * factorB;\n', '    assert(product / factorA == factorB);\n', '  }\n', '\n', '  /**\n', '   * @dev Multiplies two factors, returns the product\n', '   * @param factorA the first factor\n', '   * @param factorB the second factor\n', '   * @return product the product of the equation (e.g. factorA * factorB)\n', '   */\n', '  function times(\n', '    uint256 factorA,\n', '    uint256 factorB\n', '  ) public pure returns (uint256 product) {\n', '    return mul(factorA, factorB);\n', '  }\n', '\n', '  /**\n', '   * @dev Divides the dividend by divisor, returns the truncated quotient\n', '   * @param dividend the dividend\n', '   * @param divisor the divisor\n', '   * @return quotient the quotient of the equation (e.g. dividend / divisor)\n', '   */\n', '  function div(\n', '    uint256 dividend,\n', '    uint256 divisor\n', '  ) public pure returns (uint256 quotient) {\n', '    quotient = dividend / divisor;\n', '    assert(quotient * divisor == dividend);\n', '  }\n', '\n', '  /**\n', '   * @dev Divides the dividend by divisor, returns the truncated quotient\n', '   * @param dividend the dividend\n', '   * @param divisor the divisor\n', '   * @return quotient the quotient of the equation (e.g. dividend / divisor)\n', '   */\n', '  function dividedBy(\n', '    uint256 dividend,\n', '    uint256 divisor\n', '  ) public pure returns (uint256 quotient) {\n', '    return div(dividend, divisor);\n', '  }\n', '\n', '  /**\n', '   * @dev Divides the dividend by divisor, returns the quotient and remainder\n', '   * @param dividend the dividend\n', '   * @param divisor the divisor\n', '   * @return quotient the quotient of the equation (e.g. dividend / divisor)\n', '   * @return remainder the remainder of the equation (e.g. dividend % divisor)\n', '   */\n', '  function divideSafely(\n', '    uint256 dividend,\n', '    uint256 divisor\n', '  ) public pure returns (uint256 quotient, uint256 remainder) {\n', '    quotient = div(dividend, divisor);\n', '    remainder = dividend % divisor;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the lesser of two values.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return result the lesser of the two values\n', '   */\n', '  function min(\n', '    uint256 a,\n', '    uint256 b\n', '  ) public pure returns (uint256 result) {\n', '    result = a <= b ? a : b;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the greater of two values.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return result the greater of the two values\n', '   */\n', '  function max(\n', '    uint256 a,\n', '    uint256 b\n', '  ) public pure returns (uint256 result) {\n', '    result = a >= b ? a : b;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines whether a value is less than another.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return isTrue whether a is less than b\n', '   */\n', '  function isLessThan(uint256 a, uint256 b) public pure returns (bool isTrue) {\n', '    isTrue = a < b;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines whether a value is equal to or less than another.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return isTrue whether a is less than or equal to b\n', '   */\n', '  function isAtMost(uint256 a, uint256 b) public pure returns (bool isTrue) {\n', '    isTrue = a <= b;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines whether a value is greater than another.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return isTrue whether a is greater than b\n', '   */\n', '  function isGreaterThan(uint256 a, uint256 b) public pure returns (bool isTrue) {\n', '    isTrue = a > b;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines whether a value is equal to or greater than another.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return isTrue whether a is less than b\n', '   */\n', '  function isAtLeast(uint256 a, uint256 b) public pure returns (bool isTrue) {\n', '    isTrue = a >= b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Manageable\n', ' */\n', 'contract Manageable {\n', '  address public owner;\n', '  address public manager;\n', '\n', '  event OwnershipChanged(address indexed previousOwner, address indexed newOwner);\n', '  event ManagementChanged(address indexed previousManager, address indexed newManager);\n', '\n', '  /**\n', '   * @dev The Manageable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Manageable() public {\n', '    owner = msg.sender;\n', '    manager = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner or manager.\n', '   */\n', '  modifier onlyManagement() {\n', '    require(msg.sender == owner || msg.sender == manager);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipChanged(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the owner or manager to replace the current manager\n', '   * @param newManager The address to give contract management rights.\n', '   */\n', '  function replaceManager(address newManager) public onlyManagement {\n', '    require(newManager != address(0));\n', '    emit ManagementChanged(manager, newManager);\n', '    manager = newManager;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Basic {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function exists(uint256 _tokenId) public view returns (bool _exists);\n', '\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function getApproved(uint256 _tokenId) public view returns (address _operator);\n', '\n', '  function setApprovalForAll(address _operator, bool _approved) public;\n', '  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  ) public;\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Enumerable is ERC721Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\n', '  function tokenByIndex(uint256 _index) public view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Metadata is ERC721Basic {\n', '  function tokenURI(uint256 _tokenId) public view returns (string);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n', '}\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' *  from ERC721 asset contracts.\n', ' */\n', 'contract ERC721Receiver {\n', '  /**\n', '   * @dev Magic value to be returned upon successful reception of an NFT\n', '   *  Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`,\n', '   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '   */\n', '  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n', '\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient\n', '   *  after a `safetransfer`. This function MAY throw to revert and reject the\n', '   *  transfer. This function MUST use 50,000 gas or less. Return of other\n', '   *  than the magic value MUST result in the transaction being reverted.\n', '   *  Note: the contract address is always the message sender.\n', '   * @param _from The sending address\n', '   * @param _tokenId The NFT identifier which is being transfered\n', '   * @param _data Additional data with no specified format\n', '   * @return `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '   */\n', '  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\n', '}\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721BasicToken is ERC721Basic {\n', '  using Maths for uint256;\n', '\n', '  // Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) internal tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) internal tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping (address => uint256) internal ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping (address => mapping (address => bool)) internal operatorApprovals;\n', '\n', '  /**\n', '   * @dev Guarantees msg.sender is owner of the given token\n', '   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '   */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n', '   * @param _tokenId uint256 ID of the token to validate\n', '   */\n', '  modifier canTransfer(uint256 _tokenId) {\n', '    require(isApprovedOrOwner(msg.sender, _tokenId));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address\n', '   * @param _owner address to query the balance of\n', '   * @return uint256 representing the amount owned by the passed address\n', '   */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    require(_owner != address(0));\n', '    return ownedTokensCount[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the owner of the specified token ID\n', '   * @param _tokenId uint256 ID of the token to query the owner of\n', '   * @return owner address currently marked as the owner of the given token ID\n', '   */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address holder = tokenOwner[_tokenId];\n', '    require(holder != address(0));\n', '    return holder;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the specified token exists\n', '   * @param _tokenId uint256 ID of the token to query the existance of\n', '   * @return whether the token exists\n', '   */\n', '  function exists(uint256 _tokenId) public view returns (bool) {\n', '    address holder = tokenOwner[_tokenId];\n', '    return holder != address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Approves another address to transfer the given token ID\n', '   * @dev The zero address indicates there is no approved address.\n', '   * @dev There can only be one approved address per token at a given time.\n', '   * @dev Can only be called by the token owner or an approved operator.\n', '   * @param _to address to be approved for the given token ID\n', '   * @param _tokenId uint256 ID of the token to be approved\n', '   */\n', '  function approve(address _to, uint256 _tokenId) public {\n', '    address holder = ownerOf(_tokenId);\n', '    require(_to != holder);\n', '    require(msg.sender == holder || isApprovedForAll(holder, msg.sender));\n', '\n', '    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      emit Approval(holder, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for a the given token ID\n', '   */\n', '  function getApproved(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n', '   * @param _to operator address to set the approval\n', '   * @param _approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(address _to, bool _approved) public {\n', '    require(_to != msg.sender);\n', '    operatorApprovals[msg.sender][_to] = _approved;\n', '    emit ApprovalForAll(msg.sender, _to, _approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param _owner owner address which you want to query the approval of\n', '   * @param _operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n', '    return operatorApprovals[_owner][_operator];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers the ownership of a given token ID to another address\n', '   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\n', '    require(_from != address(0));\n', '    require(_to != address(0));\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeTokenFrom(_from, _tokenId);\n', '    addTokenTo(_to, _tokenId);\n', '\n', '    emit Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '   *  which is called upon a safe transfer, and return the magic value\n', '   *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '   *  the transfer is reverted.\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '    canTransfer(_tokenId)\n', '  {\n', '    // solium-disable-next-line arg-overflow\n', '    safeTransferFrom(_from, _to, _tokenId, "");\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '   *  which is called upon a safe transfer, and return the magic value\n', '   *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '   *  the transfer is reverted.\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '    canTransfer(_tokenId)\n', '  {\n', '    transferFrom(_from, _to, _tokenId);\n', '    // solium-disable-next-line arg-overflow\n', '    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the given spender can transfer a given token ID\n', '   * @param _spender address of the spender to query\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @return bool whether the msg.sender is approved for the given token ID,\n', '   *  is an operator of the owner, or is the owner of the token\n', '   */\n', '  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\n', '    address holder = ownerOf(_tokenId);\n', '    return _spender == holder || getApproved(_tokenId) == _spender || isApprovedForAll(holder, _spender);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * @dev Reverts if the given token ID already exists\n', '   * @param _to The address that will own the minted token\n', '   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    addTokenTo(_to, _tokenId);\n', '    emit Transfer(address(0), _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * @dev Reverts if the token does not exist\n', '   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    clearApproval(_owner, _tokenId);\n', '    removeTokenFrom(_owner, _tokenId);\n', '    emit Transfer(_owner, address(0), _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to clear current approval of a given token ID\n', '   * @dev Reverts if the given address is not indeed the owner of the token\n', '   * @param _owner owner of the token\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function clearApproval(address _owner, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    if (tokenApprovals[_tokenId] != address(0)) {\n', '      tokenApprovals[_tokenId] = address(0);\n', '      emit Approval(_owner, address(0), _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param _to address representing the new owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    ownedTokensCount[_to] = ownedTokensCount[_to].plus(1);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _from);\n', '    ownedTokensCount[_from] = ownedTokensCount[_from].minus(1);\n', '    tokenOwner[_tokenId] = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onERC721Received` on a target address\n', '   * @dev The call is not executed if the target address is not a contract\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _to target address that will receive the tokens\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function checkAndCallSafeTransfer(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    if (!isContract(_to)) {\n', '      return true;\n', '    }\n', '    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\n', '    return (retval == ERC721_RECEIVED);\n', '  }\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   *  as the code is not actually created until after the constructor finishes.\n', '   * @param addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\n', '    return size > 0;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Token is ERC721, ERC721BasicToken {\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) internal ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] internal allTokens;\n', '\n', '  // Mapping from token id to position in the allTokens array\n', '  mapping(uint256 => uint256) internal allTokensIndex;\n', '\n', '  // Optional mapping for token URIs\n', '  mapping(uint256 => string) internal tokenURIs;\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  function ERC721Token() public { }\n', '\n', '  /**\n', '   * @dev Returns an URI for a given token ID\n', '   * @dev Throws if the token ID does not exist. May return an empty string.\n', '   * @param _tokenId uint256 ID of the token to query\n', '   */\n', '  function tokenURI(uint256 _tokenId) public view returns (string) {\n', '    require(exists(_tokenId));\n', '    return tokenURIs[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets a list of token IDs owned by the requested address\n', '   * @param _owner address owning the tokens list to be accessed\n', '   * @return uint256[] list of token IDs owned by the requested address\n', '   */\n', '  function tokensOf(address _owner) public view returns (uint256[]) {\n', '    return ownedTokens[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '   * @param _owner address owning the tokens list to be accessed\n', '   * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '   */\n', '  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\n', '    require(_index < balanceOf(_owner));\n', '    return ownedTokens[_owner][_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the total amount of tokens stored by the contract\n', '   * @return uint256 representing the total amount of tokens\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return allTokens.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of all the tokens in this contract\n', '   * @dev Reverts if the index is greater or equal to the total number of tokens\n', '   * @param _index uint256 representing the index to be accessed of the tokens list\n', '   * @return uint256 token ID at the given index of the tokens list\n', '   */\n', '  function tokenByIndex(uint256 _index) public view returns (uint256) {\n', '    require(_index < totalSupply());\n', '    return allTokens[_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to set the token URI for a given token\n', '   * @dev Reverts if the token ID does not exist\n', '   * @param _tokenId uint256 ID of the token to set its URI\n', '   * @param _uri string URI to assign\n', '   */\n', '  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n', '    require(exists(_tokenId));\n', '    tokenURIs[_tokenId] = _uri;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param _to address representing the new owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    super.addTokenTo(_to, _tokenId);\n', '    uint256 length = ownedTokens[_to].length;\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    super.removeTokenFrom(_from, _tokenId);\n', '\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = ownedTokens[_from].length.minus(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    ownedTokens[_from][lastTokenIndex] = 0;\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * @dev Reverts if the given token ID already exists\n', '   * @param _to address the beneficiary that will own the minted token\n', '   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    super._mint(_to, _tokenId);\n', '\n', '    allTokensIndex[_tokenId] = allTokens.length;\n', '    allTokens.push(_tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * @dev Reverts if the token does not exist\n', '   * @param _owner owner of the token to burn\n', '   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    super._burn(_owner, _tokenId);\n', '\n', '    // Clear metadata (if any)\n', '    if (bytes(tokenURIs[_tokenId]).length != 0) {\n', '      delete tokenURIs[_tokenId];\n', '    }\n', '\n', '    // Reorg all tokens array\n', '    uint256 tokenIndex = allTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = allTokens.length.minus(1);\n', '    uint256 lastToken = allTokens[lastTokenIndex];\n', '\n', '    allTokens[tokenIndex] = lastToken;\n', '    allTokens[lastTokenIndex] = 0;\n', '\n', '    allTokens.length--;\n', '    allTokensIndex[_tokenId] = 0;\n', '    allTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '}\n', '\n', 'contract CardToken is ERC721Token, Manageable {\n', '  string public constant name = "Mythereum Card";\n', '  string public constant symbol = "CARD";\n', '\n', '  mapping (uint8 => string) public className;\n', '  mapping (uint8 => Card[]) public cardsInEdition;\n', '  uint8 public latestEditionReleased;\n', '\n', '  struct Card {\n', '    string    name;\n', '    uint8     class;\n', '    uint8     classVariant;\n', '    uint256   damagePoints;\n', '    uint256   shieldPoints;\n', '    uint256   abilityId;\n', '  }\n', '\n', '  struct Ability {\n', '    string  name;\n', '    bool    canBeBlocked;\n', '    uint8   blackMagicCost;\n', '    uint8   grayMagicCost;\n', '    uint8   whiteMagicCost;\n', '    uint256 addedDamage;\n', '    uint256 addedShield;\n', '  }\n', '\n', '  Card[] public cards;\n', '  Ability[] public abilities;\n', '\n', '  function isEditionAvailable(uint8 _editionNumber) public view returns (bool) {\n', '    return _editionNumber <= latestEditionReleased;\n', '  }\n', '\n', '  function mintRandomCards(\n', '    address _owner,\n', '    uint8 _editionNumber,\n', '    uint8 _numCards\n', '  ) public onlyManagement returns (bool) {\n', '    require(isEditionAvailable(_editionNumber));\n', '    for(uint8 i = 0; i < _numCards; i++) {\n', '      Card storage card = cardsInEdition[_editionNumber][\n', '        uint256(keccak256(now, _owner, _editionNumber, _numCards, i)) % cardsInEdition[_editionNumber].length\n', '      ];\n', '\n', '      _cloneCard(card, _owner);\n', '    }\n', '    return true;\n', '  }\n', '\n', '  function mintSpecificCard(\n', '    address _owner,\n', '    uint8   _editionNumber,\n', '    uint256 _cardIndex\n', '  ) public onlyManagement returns (bool) {\n', '    require(isEditionAvailable(_editionNumber));\n', '    require(_cardIndex < cardsInEdition[_editionNumber].length);\n', '    _cloneCard(cardsInEdition[_editionNumber][_cardIndex], _owner);\n', '  }\n', '\n', '  function mintSpecificCards(\n', '    address   _owner,\n', '    uint8     _editionNumber,\n', '    uint256[] _cardIndexes\n', '  ) public onlyManagement returns (bool) {\n', '    require(isEditionAvailable(_editionNumber));\n', '    require(_cardIndexes.length > 0 && _cardIndexes.length <= 10);\n', '\n', '    for(uint8 i = 0; i < _cardIndexes.length; i++) {\n', '      require(_cardIndexes[i] < cardsInEdition[_editionNumber].length);\n', '      _cloneCard(cardsInEdition[_editionNumber][_cardIndexes[i]], _owner);\n', '    }\n', '  }\n', '\n', '  function improveCard(\n', '    uint256 _tokenId,\n', '    uint256 _addedDamage,\n', '    uint256 _addedShield\n', '  ) public onlyManagement returns (bool) {\n', '    require(exists(_tokenId));\n', '    Card storage card = cards[_tokenId];\n', '    card.damagePoints = card.damagePoints.plus(_addedDamage);\n', '    card.shieldPoints = card.shieldPoints.plus(_addedShield);\n', '    return true;\n', '  }\n', '\n', '  function destroyCard(uint256 _tokenId) public onlyManagement returns (bool) {\n', '    require(exists(_tokenId));\n', '    _burn(ownerOf(_tokenId), _tokenId);\n', '    return true;\n', '  }\n', '\n', '  function setLatestEdition(uint8 _editionNumber) public onlyManagement {\n', '    require(cardsInEdition[_editionNumber].length.isAtLeast(1));\n', '    latestEditionReleased = _editionNumber;\n', '  }\n', '\n', '  function setTokenURI(uint256 _tokenId, string _uri) public onlyManagement {\n', '    require(exists(_tokenId));\n', '    tokenURIs[_tokenId] = _uri;\n', '  }\n', '\n', '  function addAbility(\n', '    string  _name,\n', '    bool    _canBeBlocked,\n', '    uint8   _blackMagicCost,\n', '    uint8   _grayMagicCost,\n', '    uint8   _whiteMagicCost,\n', '    uint256 _addedDamage,\n', '    uint256 _addedShield\n', '  ) public onlyManagement {\n', '    abilities.push(\n', '      Ability(\n', '        _name,\n', '        _canBeBlocked,\n', '        _blackMagicCost,\n', '        _grayMagicCost,\n', '        _whiteMagicCost,\n', '        _addedDamage,\n', '        _addedShield\n', '      )\n', '    );\n', '  }\n', '\n', '  function replaceAbility(\n', '    uint256 _abilityId,\n', '    string  _name,\n', '    bool    _canBeBlocked,\n', '    uint8   _blackMagicCost,\n', '    uint8   _grayMagicCost,\n', '    uint8   _whiteMagicCost,\n', '    uint256 _addedDamage,\n', '    uint256 _addedShield\n', '  ) public onlyManagement {\n', '    require(_abilityId.isLessThan(abilities.length));\n', '    abilities[_abilityId].name           = _name;\n', '    abilities[_abilityId].canBeBlocked   = _canBeBlocked;\n', '    abilities[_abilityId].blackMagicCost = _blackMagicCost;\n', '    abilities[_abilityId].grayMagicCost  = _grayMagicCost;\n', '    abilities[_abilityId].whiteMagicCost = _whiteMagicCost;\n', '    abilities[_abilityId].addedDamage    = _addedDamage;\n', '    abilities[_abilityId].addedShield    = _addedShield;\n', '  }\n', '\n', '  function addCardToEdition(\n', '    uint8   _editionNumber,\n', '    string  _name,\n', '    uint8   _classId,\n', '    uint8   _classVariant,\n', '    uint256 _damagePoints,\n', '    uint256 _shieldPoints,\n', '    uint256 _abilityId\n', '  ) public onlyManagement {\n', '    require(_abilityId.isLessThan(abilities.length));\n', '\n', '    cardsInEdition[_editionNumber].push(\n', '      Card({\n', '        name:         _name,\n', '        class:        _classId,\n', '        classVariant: _classVariant,\n', '        damagePoints: _damagePoints,\n', '        shieldPoints: _shieldPoints,\n', '        abilityId:    _abilityId\n', '      })\n', '    );\n', '  }\n', '\n', '  function setClassName(uint8 _classId, string _name) public onlyManagement {\n', '    className[_classId] = _name;\n', '  }\n', '\n', '  function _cloneCard(Card storage card, address owner) internal {\n', '    require(card.damagePoints > 0 || card.shieldPoints > 0);\n', '    uint256 tokenId = cards.length;\n', '    cards.push(card);\n', '    _mint(owner, tokenId);\n', '  }\n', '}']
