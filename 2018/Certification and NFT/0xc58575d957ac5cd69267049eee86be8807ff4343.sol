['pragma solidity ^0.4.16;\n', '\n', '/**\n', ' * PornTokenV2 PT Upgrader on Ethereum Network: Ropsten Testnet\n', ' * Converts PT to PTWO on a 4:1 reverse split basis\n', ' *\n', ' * The PT user transferring to PTWO must call\n', ' * The approve(_address_of_this_contract, uint256 _value) function\n', ' * from original token contract: 0x66497A283E0a007bA3974e837784C6AE323447de\n', ' *\n', ' * NOTE: _value must be expressed in the number of PT you want to convert + 18 zeros\n', " * to represent it's 18 decimal places.\n", ' * So if you want to send 1 PT, do approve(_address_of_this_contract, 1000000000000000000)\n', ' *\n', ' * ...with the address of this Contract as the first argument\n', ' * and the amount of PT to convert to PTWO as the 2nd argument\n', ' *\n', ' * Then they must call the ptToPtwo() method in this contract\n', ' * and they will receive a 4:1 reverse split amount of PTWO\n', ' * meaning 4 times less PTWO than PT\n', ' */\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount);\n', '    function allowance(address _owner, address _spender) constant returns (uint remaining);\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool success);\n', '}\n', '\n', 'contract PornTokenV2Upgrader {\n', '    address public exchanger;\n', '    token public tokenExchange;\n', '    token public tokenPtx;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function PornTokenV2Upgrader(\n', '        address sendTo,\n', '        address addressOfPt,\n', '        address addressOfPtwo\n', '    ) {\n', '        exchanger = sendTo;\n', '        // address of PT Contract\n', '        tokenPtx = token(addressOfPt);\n', '        // address of PTWO Contract\n', '        tokenExchange = token(addressOfPtwo);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     * Effectively a 4:1 trade from PT to PTWO\n', '     */\n', '    function ptToPtwo() public returns (bool success) {\n', '        \n', '        uint tokenAmount = tokenPtx.allowance(msg.sender, this);\n', '        require(tokenAmount > 0); \n', '        uint tokenAmountReverseSplitAdjusted = tokenAmount / 4;\n', '        require(tokenAmountReverseSplitAdjusted > 0); \n', '        require(tokenPtx.transferFrom(msg.sender, this, tokenAmount));\n', '        tokenExchange.transfer(msg.sender, tokenAmountReverseSplitAdjusted);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * Fail if Ether is sent to prevent people from sending ETH by accident\n', '     */\n', '    function () payable {\n', '        require(exchanger == msg.sender);\n', '    }\n', '    \n', '    /* PTWO WITHDRAW FUNCTIONS */\n', '    \n', '    /**\n', '     * Withdraw untraded tokens 10K at a time\n', '     *\n', '     * Deposit untraded tokens to PornToken Account 100k Safe\n', '     */\n', '    function returnUnsoldSafeSmall() public {\n', '        if (exchanger == msg.sender) {\n', '            uint tokenAmount = 10000;\n', '            tokenExchange.transfer(exchanger, tokenAmount * 1 ether);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Withdraw untraded tokens 100K at a time\n', '     *\n', '     * Deposit untraded tokens to PornToken Account 100k Safe\n', '     */\n', '    function returnUnsoldSafeMedium() public {\n', '        if (exchanger == msg.sender) {\n', '            uint tokenAmount = 100000;\n', '            tokenExchange.transfer(exchanger, tokenAmount * 1 ether);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Withdraw untraded tokens 1M at a time\n', '     *\n', '     * Deposit untraded tokens to PornToken Account 100k Safe\n', '     */\n', '    function returnUnsoldSafeLarge() public {\n', '        if (exchanger == msg.sender) {\n', '            uint tokenAmount = 1000000;\n', '            tokenExchange.transfer(exchanger, tokenAmount * 1 ether);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Withdraw untraded tokens 10M at a time\n', '     *\n', '     * Deposit untraded tokens to PornToken Account 100k Safe\n', '     */\n', '    function returnUnsoldSafeXLarge() public {\n', '        if (exchanger == msg.sender) {\n', '            uint tokenAmount = 10000000;\n', '            tokenExchange.transfer(exchanger, tokenAmount * 1 ether);\n', '        }\n', '    }\n', '    \n', '    /* PT WITHDRAW FUNCTIONS */\n', '    \n', '    /**\n', '     * Withdraw traded tokens 10K at a time\n', '     *\n', '     * Deposit traded tokens to PornToken Account 100k Safe\n', '     */\n', '    function returnPtSafeSmall() public {\n', '        if (exchanger == msg.sender) {\n', '            uint tokenAmount = 10000;\n', '            tokenPtx.transfer(exchanger, tokenAmount * 1 ether);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Withdraw traded tokens 100K at a time\n', '     *\n', '     * Deposit traded tokens to PornToken Account 100k Safe\n', '     */\n', '    function returnPtSafeMedium() public {\n', '        if (exchanger == msg.sender) {\n', '            uint tokenAmount = 100000;\n', '            tokenPtx.transfer(exchanger, tokenAmount * 1 ether);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Withdraw traded tokens 1M at a time\n', '     *\n', '     * Deposit traded tokens to PornToken Account 100k Safe\n', '     */\n', '    function returnPtSafeLarge() public {\n', '        if (exchanger == msg.sender) {\n', '            uint tokenAmount = 1000000;\n', '            tokenPtx.transfer(exchanger, tokenAmount * 1 ether);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Withdraw traded tokens 10M at a time\n', '     *\n', '     * Deposit traded tokens to PornToken Account 100k Safe\n', '     */\n', '    function returnPtSafeXLarge() public {\n', '        if (exchanger == msg.sender) {\n', '            uint tokenAmount = 10000000;\n', '            tokenPtx.transfer(exchanger, tokenAmount * 1 ether);\n', '        }\n', '    }\n', '}']