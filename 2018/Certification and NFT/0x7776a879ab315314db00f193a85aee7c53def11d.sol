['pragma solidity ^0.4.17;\n', '\n', '/* ERC20 contract interface */\n', '/* With ERC23/ERC223 Extensions */\n', '/* Fully backward compatible with ERC20 */\n', '/* Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended */\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '\n', '    // ERC223 and ERC20 functions and events\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function totalSupply() constant public returns (uint256 _supply);\n', '    function transfer(address to, uint value) public returns (bool ok);\n', '    function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool ok);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '\n', '    // ERC223 functions\n', '    function name() constant public returns (string _name);\n', '    function symbol() constant public returns (string _symbol);\n', '    function decimals() constant public returns (uint8 _decimals);\n', '\n', '    // ERC20 functions and events\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '/**\n', ' * Include SafeMath Lib\n', ' */\n', 'contract SafeMath {\n', '    uint256 constant public MAX_UINT256 =\n', '    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '    function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        if (x > MAX_UINT256 - y)\n', '            revert();\n', '        return x + y;\n', '    }\n', '\n', '    function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        if (x < y) {\n', '            revert();\n', '        }\n', '        return x - y;\n', '    }\n', '\n', '    function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        if (y == 0) {\n', '            return 0;\n', '        }\n', '        if (x > MAX_UINT256 / y) {\n', '            revert();\n', '        }\n', '        return x * y;\n', '    }\n', '}\n', '\n', '/*\n', ' * Contract that is working with ERC223 tokens\n', ' */\n', ' contract ContractReceiver {\n', '\n', '    struct TKN {\n', '        address sender;\n', '        uint value;\n', '        bytes data;\n', '        bytes4 sig;\n', '    }\n', '\n', '    function tokenFallback(address _from, uint _value, bytes _data) public {\n', '      TKN memory tkn;\n', '      tkn.sender = _from;\n', '      tkn.value = _value;\n', '      tkn.data = _data;\n', '      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '      tkn.sig = bytes4(u);\n', '\n', '      /* tkn variable is analogue of msg variable of Ether transaction\n', '      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n', '      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n', '      *  tkn.data is data of token transaction   (analogue of msg.data)\n', '      *  tkn.sig is 4 bytes signature of function\n', '      *  if data of token transaction is a function execution\n', '      */\n', '    }\n', '}\n', '\n', '/*\n', ' * EDOGE is an ERC20 token with ERC223 Extensions\n', ' */\n', 'contract ETHERCREDIT is ERC20, SafeMath {\n', '\n', '    string public name = "EtherCREDIT";\n', '\n', '    string public symbol = "ERC";\n', '\n', '    uint8 public decimals = 8;\n', '\n', '    uint256 public totalSupply = 300000000 * 10**8;\n', '\n', '    address public owner;\n', '\n', '\n', '    bool public tokenCreated = false;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    function ETHERCREDIT() public {\n', '\n', '        // Security check in case EVM has future flaw or exploit to call constructor multiple times\n', '        // Ensure token gets created once only\n', '        require(tokenCreated == false);\n', '        tokenCreated = true;\n', '\n', '        owner = msg.sender;\n', '        balances[owner] = totalSupply;\n', '\n', '        // Final sanity check to ensure owner balance is greater than zero\n', '        require(balances[owner] > 0);\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    // Function to access name of token .sha\n', '    function name() constant public returns (string _name) {\n', '        return name;\n', '    }\n', '    // Function to access symbol of token .\n', '    function symbol() constant public returns (string _symbol) {\n', '        return symbol;\n', '    }\n', '    // Function to access decimals of token .\n', '    function decimals() constant public returns (uint8 _decimals) {\n', '        return decimals;\n', '    }\n', '    // Function to access total supply of tokens .\n', '    function totalSupply() constant public returns (uint256 _totalSupply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    // Function that is called when a user or another contract wants to transfer funds .\n', '    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\n', '\n', '        if (isContract(_to)) {\n', '            if (balanceOf(msg.sender) < _value) {\n', '                revert();\n', '            }\n', '            balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '            balances[_to] = safeAdd(balanceOf(_to), _value);\n', '            ContractReceiver receiver = ContractReceiver(_to);\n', '            receiver.call.value(0)(bytes4(sha3(_custom_fallback)), msg.sender, _value, _data);\n', '            Transfer(msg.sender, _to, _value, _data);\n', '            return true;\n', '        } else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    // Function that is called when a user or another contract wants to transfer funds .\n', '    function transfer(address _to, uint _value, bytes _data) public  returns (bool success) {\n', '\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, _data);\n', '        } else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    // Standard function transfer similar to ERC20 transfer with no _data .\n', '    // Added due to backwards compatibility reasons .\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        //standard function transfer similar to ERC20 transfer with no _data\n', '        //added due to backwards compatibility reasons\n', '        bytes memory empty;\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, empty);\n', '        } else {\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '    // assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '    function isContract(address _addr) private returns (bool is_contract) {\n', '        uint length;\n', '        assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        return (length > 0);\n', '    }\n', '\n', '    // function that is called when transaction target is an address\n', '    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '        if (balanceOf(msg.sender) < _value) {\n', '            revert();\n', '        }\n', '        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '        balances[_to] = safeAdd(balanceOf(_to), _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // function that is called when transaction target is a contract\n', '    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '        if (balanceOf(msg.sender) < _value) {\n', '            revert();\n', '        }\n', '        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '        balances[_to] = safeAdd(balanceOf(_to), _value);\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // Get balance of the address provided\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // Allow transfers if the owner provided an allowance\n', '    // Prevent from any transfers if token is not yet unlocked\n', '    // Use SafeMath for the main logic\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        // Protect against wrapping uints.\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] = safeAdd(balanceOf(_to), _value);\n', '        balances[_from] = safeSub(balanceOf(_from), _value);\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n', '        }\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '}']
['pragma solidity ^0.4.17;\n', '\n', '/* ERC20 contract interface */\n', '/* With ERC23/ERC223 Extensions */\n', '/* Fully backward compatible with ERC20 */\n', '/* Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended */\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '\n', '    // ERC223 and ERC20 functions and events\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function totalSupply() constant public returns (uint256 _supply);\n', '    function transfer(address to, uint value) public returns (bool ok);\n', '    function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool ok);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '\n', '    // ERC223 functions\n', '    function name() constant public returns (string _name);\n', '    function symbol() constant public returns (string _symbol);\n', '    function decimals() constant public returns (uint8 _decimals);\n', '\n', '    // ERC20 functions and events\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '/**\n', ' * Include SafeMath Lib\n', ' */\n', 'contract SafeMath {\n', '    uint256 constant public MAX_UINT256 =\n', '    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '    function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        if (x > MAX_UINT256 - y)\n', '            revert();\n', '        return x + y;\n', '    }\n', '\n', '    function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        if (x < y) {\n', '            revert();\n', '        }\n', '        return x - y;\n', '    }\n', '\n', '    function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        if (y == 0) {\n', '            return 0;\n', '        }\n', '        if (x > MAX_UINT256 / y) {\n', '            revert();\n', '        }\n', '        return x * y;\n', '    }\n', '}\n', '\n', '/*\n', ' * Contract that is working with ERC223 tokens\n', ' */\n', ' contract ContractReceiver {\n', '\n', '    struct TKN {\n', '        address sender;\n', '        uint value;\n', '        bytes data;\n', '        bytes4 sig;\n', '    }\n', '\n', '    function tokenFallback(address _from, uint _value, bytes _data) public {\n', '      TKN memory tkn;\n', '      tkn.sender = _from;\n', '      tkn.value = _value;\n', '      tkn.data = _data;\n', '      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '      tkn.sig = bytes4(u);\n', '\n', '      /* tkn variable is analogue of msg variable of Ether transaction\n', '      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n', '      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n', '      *  tkn.data is data of token transaction   (analogue of msg.data)\n', '      *  tkn.sig is 4 bytes signature of function\n', '      *  if data of token transaction is a function execution\n', '      */\n', '    }\n', '}\n', '\n', '/*\n', ' * EDOGE is an ERC20 token with ERC223 Extensions\n', ' */\n', 'contract ETHERCREDIT is ERC20, SafeMath {\n', '\n', '    string public name = "EtherCREDIT";\n', '\n', '    string public symbol = "ERC";\n', '\n', '    uint8 public decimals = 8;\n', '\n', '    uint256 public totalSupply = 300000000 * 10**8;\n', '\n', '    address public owner;\n', '\n', '\n', '    bool public tokenCreated = false;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    function ETHERCREDIT() public {\n', '\n', '        // Security check in case EVM has future flaw or exploit to call constructor multiple times\n', '        // Ensure token gets created once only\n', '        require(tokenCreated == false);\n', '        tokenCreated = true;\n', '\n', '        owner = msg.sender;\n', '        balances[owner] = totalSupply;\n', '\n', '        // Final sanity check to ensure owner balance is greater than zero\n', '        require(balances[owner] > 0);\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    // Function to access name of token .sha\n', '    function name() constant public returns (string _name) {\n', '        return name;\n', '    }\n', '    // Function to access symbol of token .\n', '    function symbol() constant public returns (string _symbol) {\n', '        return symbol;\n', '    }\n', '    // Function to access decimals of token .\n', '    function decimals() constant public returns (uint8 _decimals) {\n', '        return decimals;\n', '    }\n', '    // Function to access total supply of tokens .\n', '    function totalSupply() constant public returns (uint256 _totalSupply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    // Function that is called when a user or another contract wants to transfer funds .\n', '    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\n', '\n', '        if (isContract(_to)) {\n', '            if (balanceOf(msg.sender) < _value) {\n', '                revert();\n', '            }\n', '            balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '            balances[_to] = safeAdd(balanceOf(_to), _value);\n', '            ContractReceiver receiver = ContractReceiver(_to);\n', '            receiver.call.value(0)(bytes4(sha3(_custom_fallback)), msg.sender, _value, _data);\n', '            Transfer(msg.sender, _to, _value, _data);\n', '            return true;\n', '        } else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    // Function that is called when a user or another contract wants to transfer funds .\n', '    function transfer(address _to, uint _value, bytes _data) public  returns (bool success) {\n', '\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, _data);\n', '        } else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    // Standard function transfer similar to ERC20 transfer with no _data .\n', '    // Added due to backwards compatibility reasons .\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        //standard function transfer similar to ERC20 transfer with no _data\n', '        //added due to backwards compatibility reasons\n', '        bytes memory empty;\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, empty);\n', '        } else {\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '    // assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '    function isContract(address _addr) private returns (bool is_contract) {\n', '        uint length;\n', '        assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        return (length > 0);\n', '    }\n', '\n', '    // function that is called when transaction target is an address\n', '    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '        if (balanceOf(msg.sender) < _value) {\n', '            revert();\n', '        }\n', '        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '        balances[_to] = safeAdd(balanceOf(_to), _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // function that is called when transaction target is a contract\n', '    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '        if (balanceOf(msg.sender) < _value) {\n', '            revert();\n', '        }\n', '        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '        balances[_to] = safeAdd(balanceOf(_to), _value);\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // Get balance of the address provided\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // Allow transfers if the owner provided an allowance\n', '    // Prevent from any transfers if token is not yet unlocked\n', '    // Use SafeMath for the main logic\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        // Protect against wrapping uints.\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] = safeAdd(balanceOf(_to), _value);\n', '        balances[_from] = safeSub(balanceOf(_from), _value);\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n', '        }\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '}']
