['pragma solidity ^0.4.24;\n', '\n', ' \n', '\n', 'contract Potions{\n', '\n', '     /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '\n', '   // Only owner allowed.\n', '    modifier onlyOwner()\n', '    {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '   // The tokens can never be stolen.\n', '    modifier notBIT(address aContract)\n', '    {\n', '        require(aContract != address(BITcontract));\n', '        _;\n', '    } \n', '\n', '    modifier isOpenToPublic()\n', '    {\n', '        require(openToPublic);\n', '        _;\n', '    }\n', '\n', '    modifier onlyRealPeople()\n', '    {\n', '          require (msg.sender == tx.origin);\n', '        _;\n', '    }\n', '    \n', '    \n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '\n', '\n', '   event WinnerPaid(\n', '        uint256 amount,\n', '        address winner\n', '    );\n', '\n', '    event TransactionDetails(\n', '    uint256 chosenNumber,\n', '    uint256 winningNumber\n', '    );\n', '\n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '\n', '    BIT BITcontract;  //a reference to the 8thereum contract\n', '    address owner;\n', '    bool openToPublic = false; \n', '    uint256 winningNumber; //The randomly generated number(this changes with every transaction)\n', '    mapping(address => uint256) paidPlayers;\n', '\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '\n', '    constructor() public\n', '    {\n', '        BITcontract = BIT(0x79a92e3E07eB9Dad756214e7B6D8ba982c2141A5); //8thereum contract\n', '        openToPublic = false;\n', '        owner = msg.sender;\n', '    }\n', '\n', '     function start(uint256 choice)\n', '       isOpenToPublic()\n', '       onlyRealPeople()\n', '      public returns(bool)\n', '     {\n', '        bool didYouWin = false;\n', '        uint256 tokensTransferred = getTokensPaidToGame(msg.sender);\n', '\n', '        // When you transfer a token to the contract, there is a 1 coin difference until you enter the next if statement\n', '        if( tokensTransferred > paidPlayers[msg.sender]) //can&#39;t play if you don&#39;t pay\n', '        {\n', '            paidPlayers[msg.sender] = tokensTransferred;\n', '        }\n', '        else\n', '        {\n', '            revert();\n', '        }\n', '       \n', '        winningNumber = uint256(keccak256(blockhash(block.number-1), choice,  msg.sender))%5 +1;//choose random number\n', '       \n', '         //if when we have a winner...\n', '        if(choice == winningNumber)\n', '        {   \n', '            uint256 tokensToWinner = (BITBalanceOf(address(this)) / 2);\n', '           //payout winner\n', '           BITcontract.transfer(msg.sender, tokensToWinner);\n', '           emit WinnerPaid(tokensToWinner, msg.sender);\n', '           didYouWin = true;\n', '        }\n', '        \n', '        emit TransactionDetails(choice, winningNumber);\n', '        return didYouWin;\n', '        \n', '    }\n', '\n', '    function BITBalanceOf(address someAddress) public view returns(uint256)\n', '    {\n', '        return BITcontract.balanceOf(someAddress);\n', '    }\n', '    \n', '    function getTokensPaidToGame(address customerAddress) public view returns (uint256)\n', '    {\n', '       return BITcontract.gamePlayers(address(this), customerAddress);\n', '    }\n', '\n', '    function winnersPot() public view returns(uint256)\n', '    {\n', '       uint256 balance = BITBalanceOf(this);\n', '       return balance / 2;\n', '    }\n', '\n', '    function BITWhaleBalance() public view returns(uint256)\n', '    {\n', '       uint256 balance = BITBalanceOf(address(0x1570c19151305162e2391e956F74509D4f566d42));\n', '       return balance;\n', '    }\n', '\n', '     /*======================================\n', '     =          OWNER ONLY FUNCTIONS        =\n', '     ======================================*/\n', '\n', '   //give the people access to play\n', '    function openToThePublic()\n', '       onlyOwner()\n', '        public\n', '    {\n', '        openToPublic = true;\n', '    }\n', '\n', '\n', '     /* A trap door for when someone sends tokens other than the intended ones so the overseers\n', '      can decide where to send them. (credit: Doublr Contract) */\n', '    function returnAnyERC20Token(address tokenAddress, address tokenOwner, uint tokens)\n', '    public\n', '    onlyOwner()\n', '    notBIT(tokenAddress)\n', '    returns (bool success)\n', '    {\n', '        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract ERC20Interface\n', '{\n', '    function transfer(address to, uint256 tokens) public returns (bool success);\n', '}  \n', '\n', '//Need to ensure the Lottery contract knows what a test token is\n', 'contract BIT\n', '{\n', '    function transfer(address, uint256) public returns(bool);\n', '    mapping(address => mapping(address => uint256)) public gamePlayers;\n', '    function balanceOf(address customerAddress) public view returns(uint256);\n', '}']