['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        require(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        ERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        require(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        require(token.approve(spender, value));\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '     * @dev Total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _subtractedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '    address public own_contract;\n', '\n', '\n', '    function setCrowdsaleAddress(address _address) onlyOwner public{\n', '        own_contract = _address;\n', '    }\n', '    \n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    modifier hasMintPermission() {\n', '        require(msg.sender == own_contract);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(\n', '        address _to,\n', '        uint256 _amount\n', '    )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '    {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        emit Transfer(owner, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', ' * the methods to add functionality. Consider using &#39;super&#39; where appropiate to concatenate\n', ' * behavior.\n', ' */\n', 'contract Crowdsale is Pausable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IQBankToken;\n', '\n', '    // The token being sold\n', '    IQBankToken public token;\n', '\n', '    // Address where funds are collected\n', '    address public wallet;\n', '\n', '    // How many token units a buyer gets per wei.\n', '    // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '    // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n', '    // 1 wei will give you 1 unit, or 0.001 TOK.\n', '    uint256 public rate;\n', '\n', '    // &#207;&#240;&#238;&#246;&#229;&#237;&#242; &#225;&#238;&#237;&#243;&#241;&#224;\n', '    uint public bonusPercent = 0;\n', '\n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '\n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(\n', '        address indexed purchaser,\n', '        address indexed beneficiary,\n', '        uint256 value,\n', '        uint256 amount\n', '    );\n', '\n', '    /**\n', '     * @param _rate Number of token units a buyer gets per wei\n', '     * @param _wallet Address where collected funds will be forwarded to\n', '     * @param _token Address of the token being sold\n', '     */\n', '    constructor(uint256 _rate, address _wallet, IQBankToken _token) public {\n', '        require(_rate > 0);\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '        token = _token;\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Crowdsale external interface\n', '    // -----------------------------------------\n', '\n', '    /**\n', '     * @dev fallback function ***DO NOT OVERRIDE***\n', '     */\n', '    function () external whenNotPaused payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev low level token purchase ***DO NOT OVERRIDE***\n', '     * @param _beneficiary Address performing the token purchase\n', '     */\n', '    function buyTokens(address _beneficiary) public whenNotPaused payable {\n', '\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        _processPurchase(_beneficiary, tokens);\n', '        emit TokenPurchase(\n', '            msg.sender,\n', '            _beneficiary,\n', '            weiAmount,\n', '            tokens\n', '        );\n', '\n', '        _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '        _forwardFunds();\n', '        _postValidatePurchase(_beneficiary, weiAmount);\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Internal interface (extensible)\n', '    // -----------------------------------------\n', '\n', '    /**\n', '     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '    }\n', '\n', '    /**\n', '     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        // optional override\n', '    }\n', '\n', '    /**\n', '     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _tokenAmount Number of tokens to be emitted\n', '     */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        token.safeTransfer(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '     * @param _beneficiary Address receiving the tokens\n', '     * @param _tokenAmount Number of tokens to be purchased\n', '     */\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '     * @param _beneficiary Address receiving the tokens\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '        // optional override\n', '    }\n', '\n', '    /**\n', '     * @dev Override to extend the way in which ether is converted to tokens.\n', '     * @param _weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        return _weiAmount.mul(rate).mul(100 + bonusPercent).div(100);\n', '    }\n', '\n', '    /**\n', '     * @dev Determines how ETH is stored/forwarded on purchases.\n', '     */\n', '    function _forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '}\n', '\n', '// &#202;&#238;&#237;&#242;&#240;&#224;&#234;&#242; &#242;&#238;&#234;&#229;&#237;&#224; (&#237;&#224;&#241;&#235;&#229;&#228;&#243;&#229;&#242;&#241;&#255; &#238;&#242; &#241;&#242;&#224;&#237;&#228;&#224;&#240;&#242;&#237;&#238;&#227;&#238; StandardToken)\n', 'contract IQBankToken is MintableToken {\n', '    string public constant name = "IQ Bank token"; // solium-disable-line uppercase\n', '    string public constant symbol = "IQTK"; // solium-disable-line uppercase\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '    uint256 public constant LIMIT_SUPPLY = 30 * (10 ** (6 + uint256(decimals))); // max 30 mln IQTK\n', '}\n', '\n', '// &#202;&#238;&#237;&#242;&#240;&#224;&#234;&#242; ICO (&#237;&#224;&#241;&#235;&#229;&#228;&#243;&#229;&#242;&#241;&#255; &#238;&#242; &#241;&#242;&#224;&#237;&#228;&#224;&#240;&#242;&#237;&#238;&#227;&#238; Crowdlase &#232; Ownable)\n', 'contract IQTKCrowdsale is Crowdsale {\n', '\n', '    // &#204;&#232;&#237;&#232;&#236;&#224;&#235;&#252;&#237;&#224;&#255; &#232;&#237;&#226;&#229;&#241;&#242;&#232;&#246;&#232;&#255; 0.01 eth\n', '    uint public constant MIN_INVEST_ETHER = 10 finney;\n', '\n', '    // &#205;&#238;&#236;&#229;&#240; &#253;&#242;&#224;&#239;&#224; ICO\n', '    uint public stage = 0;\n', '\n', '    // ICO &#244;&#232;&#237;&#224;&#235;&#232;&#231;&#232;&#240;&#238;&#226;&#224;&#237;\n', '    bool isFinalized = false;\n', '\n', '    // &#192;&#228;&#240;&#229;&#241;&#224; &#232;&#237;&#226;&#229;&#241;&#242;&#238;&#240;&#238;&#226; &#232; &#232;&#245; &#225;&#224;&#235;&#224;&#237;&#241;&#238;&#226;\n', '    mapping(address => uint256) public balances;\n', '\n', '    mapping(address => uint) public parts;\n', '\n', '    // &#202;&#238;&#235;&#232;&#247;&#229;&#241;&#242;&#226;&#238; &#242;&#238;&#234;&#229;&#237;&#238;&#226;, &#234;&#238;&#242;&#238;&#240;&#251;&#229; &#239;&#240;&#229;&#228;&#241;&#242;&#238;&#232;&#242; &#226;&#251;&#239;&#243;&#241;&#242;&#232;&#242;&#252;\n', '    uint256 public tokensIssued;\n', '\n', '    /**\n', '     * Event for token withdrawal logging\n', '     * @param receiver who receive the tokens\n', '     * @param amount amount of tokens sent\n', '     */\n', '    event TokenDelivered(address indexed receiver, uint256 amount);\n', '\n', '    /**\n', '     * Event for token adding by referral program\n', '     * @param beneficiary who got the tokens\n', '     * @param amount amount of tokens added\n', '     */\n', '    event TokenAdded(address indexed beneficiary, uint256 amount);\n', '\n', '    // &#204;&#238;&#228;&#232;&#244;&#232;&#234;&#224;&#242;&#238;&#240;&#251; &#228;&#235;&#255; &#244;&#243;&#237;&#234;&#246;&#232;&#233;:\n', '    // &#212;&#243;&#237;&#234;&#246;&#232;&#255; &#226;&#251;&#239;&#238;&#235;&#237;&#232;&#242;&#241;&#255;, &#229;&#241;&#235;&#232; ICO &#237;&#229; &#231;&#224;&#226;&#229;&#240;&#248;&#229;&#237;&#238;\n', '    modifier NotFinalized() {\n', '        require(!isFinalized, "Can&#39;t process. Crowdsale is finalized");    // &#207;&#240;&#238;&#226;&#229;&#240;&#234;&#224;\n', '        _; // &#199;&#224;&#239;&#243;&#241;&#234; &#242;&#229;&#235;&#224; &#244;&#243;&#237;&#234;&#246;&#232;&#232;\n', '    }\n', '\n', '    // &#212;&#243;&#237;&#234;&#246;&#232;&#255; &#226;&#251;&#239;&#238;&#235;&#237;&#232;&#242;&#241;&#255;, &#229;&#241;&#235;&#232; ICO &#231;&#224;&#226;&#229;&#240;&#248;&#229;&#237;&#238;\n', '    modifier Finalized() {\n', '        require(isFinalized, "Can&#39;t process. Crowdsale is not finalized"); // &#207;&#240;&#238;&#226;&#229;&#240;&#234;&#224;\n', '        _; // &#199;&#224;&#239;&#243;&#241;&#234; &#242;&#229;&#235;&#224; &#244;&#243;&#237;&#234;&#246;&#232;&#232;\n', '    }\n', '\n', '    /**\n', '     * &#202;&#238;&#237;&#241;&#242;&#240;&#243;&#234;&#242;&#238;&#240; ICO\n', '     * @param _rate &#214;&#229;&#237;&#224; &#242;&#238;&#234;&#229;&#237;&#224; &#231;&#224; &#238;&#228;&#232;&#237; wei\n', '     * @param _wallet &#192;&#228;&#240;&#229;&#241; &#234;&#243;&#228;&#224; &#225;&#243;&#228;&#229;&#242; &#241;&#234;&#235;&#224;&#228;&#251;&#226;&#224;&#242;&#252;&#241;&#255; &#253;&#244;&#232;&#240;\n', '     * @param _token &#192;&#228;&#240;&#229;&#241; &#234;&#238;&#237;&#242;&#240;&#224;&#234;&#242;&#224; &#241; &#242;&#238;&#234;&#229;&#237;&#238;&#236;\n', '     */\n', '    constructor(uint256 _rate, address _wallet, IQBankToken _token) Crowdsale(_rate, _wallet, _token) public {\n', '        paused = true; // &#207;&#238; &#243;&#236;&#238;&#235;&#247;&#224;&#237;&#232;&#254; ICO &#237;&#224; &#239;&#224;&#243;&#231;&#229;\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // &#207;&#229;&#240;&#229;&#227;&#240;&#243;&#230;&#229;&#237;&#237;&#251;&#229; &#244;&#243;&#237;&#234;&#246;&#232;&#232; &#232;&#231; PausableCrowdsale\n', '    // -----------------------------------------\n', '\n', '    // &#209;&#242;&#224;&#240;&#242;&#243;&#229;&#236; &#238;&#247;&#229;&#240;&#229;&#228;&#237;&#238;&#233; &#253;&#242;&#224;&#239; ICO (&#228;&#235;&#255;: &#242;&#238;&#235;&#252;&#234;&#238; &#226;&#235;&#224;&#228;&#229;&#235;&#229;&#246;, ICO &#237;&#224; &#239;&#224;&#243;&#231;&#229;)\n', '    function unpause(uint _stage, uint _bonusPercent) onlyOwner whenPaused public {\n', '        super.unpause(); // &#228;&#229;&#240;&#227;&#224;&#229;&#236; &#240;&#238;&#228;&#232;&#242;&#229;&#235;&#252;&#241;&#234;&#243;&#254; &#244;&#243;&#237;&#234;&#246;&#232;&#254; &#234;&#238;&#242;&#238;&#240;&#224;&#255; &#241;&#242;&#224;&#226;&#232;&#242; &#241;&#224;&#236; &#244;&#235;&#224;&#227; &#239;&#224;&#243;&#231;&#251; &#226; &#203;&#238;&#230;&#252;\n', '        stage = _stage;\n', '        bonusPercent = _bonusPercent;\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw tokens only after crowdsale ends.\n', '     */\n', '    function withdrawTokens() Finalized public {\n', '        _withdrawTokensFor(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Add tokens for specified beneficiary (referral system tokens, for example).\n', '     * @param _beneficiary Token purchaser\n', '     * @param _tokenAmount Amount of tokens added\n', '     */\n', '    function addTokens(address _beneficiary, uint256 _tokenAmount) onlyOwner NotFinalized public {\n', '        balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\n', '        tokensIssued = tokensIssued.add(_tokenAmount);\n', '        emit TokenAdded(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '     * &#199;&#224;&#234;&#240;&#251;&#226;&#224;&#229;&#236; ICO, &#240;&#224;&#241;&#241;&#247;&#232;&#242;&#251;&#226;&#224;&#229;&#236; &#239;&#240;&#238;&#246;&#229;&#237;&#242;&#251; &#228;&#238;&#235;&#252;&#249;&#232;&#234;&#224;&#236;\n', '     * @dev Must be called after crowdsale ends, to do some extra finalization\n', '     * work. Calls the contract&#39;s finalization function.\n', '     */\n', '    function finalize() onlyOwner NotFinalized public {\n', '        isFinalized = true;\n', '    }\n', '\n', '    // Validation\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '        require(msg.value >= MIN_INVEST_ETHER, "Minimal invest 0.01 ETH"); // Don&#39;t accept funding under a predefined threshold\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw tokens for receiver_ after crowdsale ends.\n', '     */\n', '    function _withdrawTokensFor(address receiver_) internal {\n', '        uint256 amount = balances[receiver_];\n', '        require(amount > 0);\n', '        balances[receiver_] = 0;\n', '        emit TokenDelivered(receiver_, amount);\n', '        _deliverTokens(receiver_, amount);\n', '    }\n', '\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\n', '    }\n', '\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        token.mint(_beneficiary, _tokenAmount);\n', '    }\n', '}']