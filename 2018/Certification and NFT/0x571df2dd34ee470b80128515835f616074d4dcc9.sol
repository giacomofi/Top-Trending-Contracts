['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC223 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '\n', '  function name() constant returns (string _name);\n', '  function symbol() constant returns (string _symbol);\n', '  function decimals() constant returns (uint8 _decimals);\n', '  function totalSupply() constant returns (uint256 _supply);\n', '\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) returns (bool ok);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n', '}\n', '\n', 'contract ContractReceiver {\n', '  function tokenFallback(address _from, uint _value, bytes _data);\n', '}\n', '\n', 'contract ERC223Token is ERC223 {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  uint256 public totalSupply;\n', '\n', '\n', '  // Function to access name of token .\n', '  function name() constant returns (string _name) {\n', '      return name;\n', '  }\n', '  // Function to access symbol of token .\n', '  function symbol() constant returns (string _symbol) {\n', '      return symbol;\n', '  }\n', '  // Function to access decimals of token .\n', '  function decimals() constant returns (uint8 _decimals) {\n', '      return decimals;\n', '  }\n', '  // Function to access total supply of tokens .\n', '  function totalSupply() constant returns (uint256 _totalSupply) {\n', '      return totalSupply;\n', '  }\n', '\n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data) returns (bool success) {\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, _data);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, _data);\n', '    }\n', '}\n', '\n', '  // Standard function transfer similar to ERC20 transfer with no _data .\n', '  // Added due to backwards compatibility reasons .\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '\n', '    //standard function transfer similar to ERC20 transfer with no _data\n', '    //added due to backwards compatibility reasons\n', '    bytes memory empty;\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, empty);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, empty);\n', '    }\n', '}\n', '\n', '//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '  function isContract(address _addr) private returns (bool is_contract) {\n', '      uint length;\n', '      assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        if(length>0) {\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '  //function that is called when transaction target is an address\n', '  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    ERC223Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '  //function that is called when transaction target is a contract\n', '  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    ContractReceiver reciever = ContractReceiver(_to);\n', '    reciever.tokenFallback(msg.sender, _value, _data);\n', '    Transfer(msg.sender, _to, _value);\n', '    ERC223Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract CoVEXTokenERC223 is ERC223Token{\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "CoVEX Coin";\n', '    string public symbol = "CoVEX";\n', '    uint256 public decimals = 18;\n', '\n', '    // 250M\n', '    uint256 public totalSupply = 250*1000000 * (uint256(10) ** decimals);\n', '    uint256 public totalRaised; // total ether raised (in wei)\n', '\n', '    uint256 public startTimestamp; // timestamp after which ICO will start\n', '    uint256 public durationSeconds; // 1 month= 1 * 30 * 24 * 60 * 60\n', '\n', '    uint256 public maxCap;\n', '\n', '    uint256 coinsPerETH;\n', '\n', '    mapping(address => uint) etherBalance;\n', '\n', '    mapping(uint => uint) public weeklyRewards;\n', '\n', '    uint256 minPerUser = 0.1 ether;\n', '    uint256 maxPerUser = 100 ether;\n', '\n', '    /**\n', '     * Address which will receive raised funds \n', '     * and owns the total supply of tokens\n', '     */\n', '    address public fundsWallet;\n', '\n', '    function CoVEXTokenERC223() {\n', '        fundsWallet = msg.sender;\n', '        \n', '        startTimestamp = now;\n', '        durationSeconds = 0; //admin can set it later\n', '\n', '        //initially assign all tokens to the fundsWallet\n', '        balances[fundsWallet] = totalSupply;\n', '\n', '        Transfer(0x0, fundsWallet, totalSupply);\n', '    }\n', '\n', '    function() isIcoOpen checkMinMax payable{\n', '        totalRaised = totalRaised.add(msg.value);\n', '\n', '        uint256 tokenAmount = calculateTokenAmount(msg.value);\n', '        balances[fundsWallet] = balances[fundsWallet].sub(tokenAmount);\n', '        balances[msg.sender] = balances[msg.sender].add(tokenAmount);\n', '\n', '        etherBalance[msg.sender] = etherBalance[msg.sender].add(msg.value);\n', '\n', '        Transfer(fundsWallet, msg.sender, tokenAmount);\n', '\n', '        // immediately transfer ether to fundsWallet\n', '        fundsWallet.transfer(msg.value);\n', '    }\n', '\n', '    function calculateTokenAmount(uint256 weiAmount) constant returns(uint256) {\n', '        uint256 tokenAmount = weiAmount.mul(coinsPerETH);\n', '        // setting rewards is possible only for 4 weeks\n', '        for (uint i = 1; i <= 4; i++) {\n', '            if (now <= startTimestamp + (i * 7 days)) {\n', '                return tokenAmount.mul(100+weeklyRewards[i]).div(100);    \n', '            }\n', '        }\n', '        return tokenAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function adminBurn(uint256 _value) public {\n', '      require(_value <= balances[msg.sender]);\n', '      // no need to require value <= totalSupply, since that would imply the\n', '      // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '      address burner = msg.sender;\n', '      balances[burner] = balances[burner].sub(_value);\n', '      totalSupply = totalSupply.sub(_value);\n', '      Transfer(burner, address(0), _value);\n', '    }\n', '\n', '    function adminAddICO(uint256 _startTimestamp, uint256 _durationSeconds, \n', '        uint256 _coinsPerETH, uint256 _maxCap, uint _week1Rewards,\n', '        uint _week2Rewards, uint _week3Rewards, uint _week4Rewards) isOwner{\n', '\n', '        startTimestamp = _startTimestamp;\n', '        durationSeconds = _durationSeconds;\n', '        coinsPerETH = _coinsPerETH;\n', '        maxCap = _maxCap * 1 ether;\n', '\n', '        weeklyRewards[1] = _week1Rewards;\n', '        weeklyRewards[2] = _week2Rewards;\n', '        weeklyRewards[3] = _week3Rewards;\n', '        weeklyRewards[4] = _week4Rewards;\n', '\n', '        // reset totalRaised\n', '        totalRaised = 0;\n', '    }\n', '\n', '    modifier isIcoOpen() {\n', '        require(now >= startTimestamp);\n', '        require(now <= (startTimestamp + durationSeconds));\n', '        require(totalRaised <= maxCap);\n', '        _;\n', '    }\n', '\n', '    modifier checkMinMax(){\n', '      require(msg.value >= minPerUser);\n', '      require(msg.value <= maxPerUser);\n', '      _;\n', '    }\n', '\n', '    modifier isOwner(){\n', '        require(msg.sender == fundsWallet);\n', '        _;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC223 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '\n', '  function name() constant returns (string _name);\n', '  function symbol() constant returns (string _symbol);\n', '  function decimals() constant returns (uint8 _decimals);\n', '  function totalSupply() constant returns (uint256 _supply);\n', '\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) returns (bool ok);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n', '}\n', '\n', 'contract ContractReceiver {\n', '  function tokenFallback(address _from, uint _value, bytes _data);\n', '}\n', '\n', 'contract ERC223Token is ERC223 {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  uint256 public totalSupply;\n', '\n', '\n', '  // Function to access name of token .\n', '  function name() constant returns (string _name) {\n', '      return name;\n', '  }\n', '  // Function to access symbol of token .\n', '  function symbol() constant returns (string _symbol) {\n', '      return symbol;\n', '  }\n', '  // Function to access decimals of token .\n', '  function decimals() constant returns (uint8 _decimals) {\n', '      return decimals;\n', '  }\n', '  // Function to access total supply of tokens .\n', '  function totalSupply() constant returns (uint256 _totalSupply) {\n', '      return totalSupply;\n', '  }\n', '\n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data) returns (bool success) {\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, _data);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, _data);\n', '    }\n', '}\n', '\n', '  // Standard function transfer similar to ERC20 transfer with no _data .\n', '  // Added due to backwards compatibility reasons .\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '\n', '    //standard function transfer similar to ERC20 transfer with no _data\n', '    //added due to backwards compatibility reasons\n', '    bytes memory empty;\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, empty);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, empty);\n', '    }\n', '}\n', '\n', '//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '  function isContract(address _addr) private returns (bool is_contract) {\n', '      uint length;\n', '      assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        if(length>0) {\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '  //function that is called when transaction target is an address\n', '  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    ERC223Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '  //function that is called when transaction target is a contract\n', '  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    ContractReceiver reciever = ContractReceiver(_to);\n', '    reciever.tokenFallback(msg.sender, _value, _data);\n', '    Transfer(msg.sender, _to, _value);\n', '    ERC223Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract CoVEXTokenERC223 is ERC223Token{\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "CoVEX Coin";\n', '    string public symbol = "CoVEX";\n', '    uint256 public decimals = 18;\n', '\n', '    // 250M\n', '    uint256 public totalSupply = 250*1000000 * (uint256(10) ** decimals);\n', '    uint256 public totalRaised; // total ether raised (in wei)\n', '\n', '    uint256 public startTimestamp; // timestamp after which ICO will start\n', '    uint256 public durationSeconds; // 1 month= 1 * 30 * 24 * 60 * 60\n', '\n', '    uint256 public maxCap;\n', '\n', '    uint256 coinsPerETH;\n', '\n', '    mapping(address => uint) etherBalance;\n', '\n', '    mapping(uint => uint) public weeklyRewards;\n', '\n', '    uint256 minPerUser = 0.1 ether;\n', '    uint256 maxPerUser = 100 ether;\n', '\n', '    /**\n', '     * Address which will receive raised funds \n', '     * and owns the total supply of tokens\n', '     */\n', '    address public fundsWallet;\n', '\n', '    function CoVEXTokenERC223() {\n', '        fundsWallet = msg.sender;\n', '        \n', '        startTimestamp = now;\n', '        durationSeconds = 0; //admin can set it later\n', '\n', '        //initially assign all tokens to the fundsWallet\n', '        balances[fundsWallet] = totalSupply;\n', '\n', '        Transfer(0x0, fundsWallet, totalSupply);\n', '    }\n', '\n', '    function() isIcoOpen checkMinMax payable{\n', '        totalRaised = totalRaised.add(msg.value);\n', '\n', '        uint256 tokenAmount = calculateTokenAmount(msg.value);\n', '        balances[fundsWallet] = balances[fundsWallet].sub(tokenAmount);\n', '        balances[msg.sender] = balances[msg.sender].add(tokenAmount);\n', '\n', '        etherBalance[msg.sender] = etherBalance[msg.sender].add(msg.value);\n', '\n', '        Transfer(fundsWallet, msg.sender, tokenAmount);\n', '\n', '        // immediately transfer ether to fundsWallet\n', '        fundsWallet.transfer(msg.value);\n', '    }\n', '\n', '    function calculateTokenAmount(uint256 weiAmount) constant returns(uint256) {\n', '        uint256 tokenAmount = weiAmount.mul(coinsPerETH);\n', '        // setting rewards is possible only for 4 weeks\n', '        for (uint i = 1; i <= 4; i++) {\n', '            if (now <= startTimestamp + (i * 7 days)) {\n', '                return tokenAmount.mul(100+weeklyRewards[i]).div(100);    \n', '            }\n', '        }\n', '        return tokenAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function adminBurn(uint256 _value) public {\n', '      require(_value <= balances[msg.sender]);\n', '      // no need to require value <= totalSupply, since that would imply the\n', "      // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '      address burner = msg.sender;\n', '      balances[burner] = balances[burner].sub(_value);\n', '      totalSupply = totalSupply.sub(_value);\n', '      Transfer(burner, address(0), _value);\n', '    }\n', '\n', '    function adminAddICO(uint256 _startTimestamp, uint256 _durationSeconds, \n', '        uint256 _coinsPerETH, uint256 _maxCap, uint _week1Rewards,\n', '        uint _week2Rewards, uint _week3Rewards, uint _week4Rewards) isOwner{\n', '\n', '        startTimestamp = _startTimestamp;\n', '        durationSeconds = _durationSeconds;\n', '        coinsPerETH = _coinsPerETH;\n', '        maxCap = _maxCap * 1 ether;\n', '\n', '        weeklyRewards[1] = _week1Rewards;\n', '        weeklyRewards[2] = _week2Rewards;\n', '        weeklyRewards[3] = _week3Rewards;\n', '        weeklyRewards[4] = _week4Rewards;\n', '\n', '        // reset totalRaised\n', '        totalRaised = 0;\n', '    }\n', '\n', '    modifier isIcoOpen() {\n', '        require(now >= startTimestamp);\n', '        require(now <= (startTimestamp + durationSeconds));\n', '        require(totalRaised <= maxCap);\n', '        _;\n', '    }\n', '\n', '    modifier checkMinMax(){\n', '      require(msg.value >= minPerUser);\n', '      require(msg.value <= maxPerUser);\n', '      _;\n', '    }\n', '\n', '    modifier isOwner(){\n', '        require(msg.sender == fundsWallet);\n', '        _;\n', '    }\n', '}']
