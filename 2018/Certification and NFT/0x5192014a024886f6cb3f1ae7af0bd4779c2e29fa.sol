['pragma solidity ^0.4.21;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract MMaker is owned {\n', '    \n', '    mapping (uint8 => address) players;\n', '    \n', '    \n', '    \n', '    function MMaker() public {\n', '        state = LotteryState.Accepting;\n', '    }\n', '    \n', '    uint8 number;\n', '    \n', '    enum LotteryState { Accepting, Finished }\n', '    \n', '    LotteryState state; \n', '    uint8 public maxnumber  = 55;\n', '    uint public minAmount = 20000000000000000;\n', '    \n', '    \n', '    function enroll() public payable {\n', '        require(state == LotteryState.Accepting);\n', '        require(msg.value >= minAmount);\n', '        number += 1;\n', '        require(number<=maxnumber);\n', '        players[number] = (msg.sender);\n', '        if (number == maxnumber){\n', '            state = LotteryState.Finished;\n', '        }\n', '    }\n', '    \n', '    function setMaxNumber(uint8 newNumber) public onlyOwner {\n', '        maxnumber = newNumber;\n', '    }\n', '    \n', '    function setMinAmount(uint newAmount) public onlyOwner {\n', '        minAmount = newAmount;\n', '    }\n', '\n', '    function lastPlayer() public view returns (uint8 _number, address _Player){\n', '        _Player = players[number];\n', '        _number = number;\n', '    }\n', '    \n', '    function determineWinner() public onlyOwner {\n', '        \n', '        \n', '        uint8 winningNumber = randomtest();\n', '        \n', '        distributeFunds(winningNumber);\n', '    }\n', '    function startOver() public onlyOwner{\n', '      \n', '      for (uint8 i=1; i<number; i++){\n', '        delete (players[i]);\n', '        }\n', '        number = 0;\n', '        state = LotteryState.Accepting;\n', '        \n', '    }\n', '    \n', '    function distributeFunds(uint8 winningNumber) private {\n', '        owner.transfer(this.balance/10);\n', '        players[winningNumber].transfer(this.balance);\n', '    \n', '    }\n', '    \n', '    \n', '    function randomtest() internal returns(uint8){\n', '        uint8 inter =  uint8(uint256(keccak256(block.timestamp))%number);\n', '        //return inter;\n', '        return uint8(uint256(keccak256(players[inter]))%number);\n', '    }\n', '    \n', '    \n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract MMaker is owned {\n', '    \n', '    mapping (uint8 => address) players;\n', '    \n', '    \n', '    \n', '    function MMaker() public {\n', '        state = LotteryState.Accepting;\n', '    }\n', '    \n', '    uint8 number;\n', '    \n', '    enum LotteryState { Accepting, Finished }\n', '    \n', '    LotteryState state; \n', '    uint8 public maxnumber  = 55;\n', '    uint public minAmount = 20000000000000000;\n', '    \n', '    \n', '    function enroll() public payable {\n', '        require(state == LotteryState.Accepting);\n', '        require(msg.value >= minAmount);\n', '        number += 1;\n', '        require(number<=maxnumber);\n', '        players[number] = (msg.sender);\n', '        if (number == maxnumber){\n', '            state = LotteryState.Finished;\n', '        }\n', '    }\n', '    \n', '    function setMaxNumber(uint8 newNumber) public onlyOwner {\n', '        maxnumber = newNumber;\n', '    }\n', '    \n', '    function setMinAmount(uint newAmount) public onlyOwner {\n', '        minAmount = newAmount;\n', '    }\n', '\n', '    function lastPlayer() public view returns (uint8 _number, address _Player){\n', '        _Player = players[number];\n', '        _number = number;\n', '    }\n', '    \n', '    function determineWinner() public onlyOwner {\n', '        \n', '        \n', '        uint8 winningNumber = randomtest();\n', '        \n', '        distributeFunds(winningNumber);\n', '    }\n', '    function startOver() public onlyOwner{\n', '      \n', '      for (uint8 i=1; i<number; i++){\n', '        delete (players[i]);\n', '        }\n', '        number = 0;\n', '        state = LotteryState.Accepting;\n', '        \n', '    }\n', '    \n', '    function distributeFunds(uint8 winningNumber) private {\n', '        owner.transfer(this.balance/10);\n', '        players[winningNumber].transfer(this.balance);\n', '    \n', '    }\n', '    \n', '    \n', '    function randomtest() internal returns(uint8){\n', '        uint8 inter =  uint8(uint256(keccak256(block.timestamp))%number);\n', '        //return inter;\n', '        return uint8(uint256(keccak256(players[inter]))%number);\n', '    }\n', '    \n', '    \n', '}']
