['pragma solidity ^0.4.19;\n', '\n', 'interface tokenRecipient {function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public supporter;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event SupporterTransferred(address indexed previousSupporter, address indexed newSupporter);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '        supporter = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwnerOrSupporter {\n', '        require(msg.sender == owner || msg.sender == supporter);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    function transferSupporter(address newSupporter) public onlyOwner {\n', '        require(newSupporter != address(0));\n', '        SupporterTransferred(supporter, newSupporter);\n', '        supporter = newSupporter;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract CryptoMarketShortCoin is Owned {\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "CRYPTO MARKET SHORT COIN";\n', '    string public symbol = "CMSC";\n', '    string public version = "2.0";\n', '    uint8 public decimals = 18;\n', '    uint256 public decimalsFactor = 10 ** 18;\n', '\n', '    uint256 public totalSupply;\n', '    uint256 public marketCap;\n', '    uint256 public buyFactor = 12500;\n', '    uint256 public buyFactorPromotion = 15000;\n', '    uint8 public promotionsAvailable = 50;\n', '\n', '    bool public buyAllowed = true;\n', '\n', '    // This creates an array with all balances\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    // This notifies clients about the amount minted\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    // This generates a public event Approval\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function CryptoMarketShortCoin(uint256 initialMarketCap) {\n', '        totalSupply = 100000000000000000000000000; // 100.000.000 CMSC initialSupply\n', '        marketCap = initialMarketCap;\n', '        balanceOf[msg.sender] = 20000000000000000000000000; // 20.000.000 CMSC supply to owner (marketing, operation ...)\n', '        balanceOf[this] = 80000000000000000000000000; // 80.000.000 CMSC to contract (bets, marketcap changes ...)\n', '        allowance[this][owner] = totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 _balance) {\n', '        // Return the balance for the specific address\n', '        return balanceOf[_owner];\n', '    }\n', '\n', '    function allowanceOf(address _address) public constant returns (uint256 _allowance) {\n', '        return allowance[_address][msg.sender];\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint256 _totalSupply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function circulatingSupply() public constant returns (uint256 _circulatingSupply) {\n', '        return totalSupply.sub(balanceOf[owner]);\n', '    }\n', '\n', '    /* Internal transfer, can only be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(balanceOf[_from] >= _value);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_to].add(_value) > balanceOf[_to]);\n', '        // Check for overflows\n', '        balanceOf[_from] -= _value;\n', '        // Subtract from the sender\n', '        balanceOf[_to] += _value;\n', '        // Add the same to the recipient\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * Destroy tokens\n', '    *\n', '    * Remove `_value` tokens from the system irreversibly\n', '    *\n', '    * @param _value the amount of money to burn\n', '    */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;\n', '        // Subtract from the sender\n', '        totalSupply -= _value;\n', '        // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Destroy tokens from other account\n', '    *\n', '    * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '    *\n', '    * @param _from the address of the sender\n', '    * @param _value the amount of money to burn\n', '    */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        // Check allowance\n', '        balanceOf[_from] -= _value;\n', '        // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;\n', "        // Subtract from the sender's allowance\n", '        totalSupply -= _value;\n', '        // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Buy function to purchase tokens from ether\n', '     */\n', '    function () payable {\n', '        require(buyAllowed);\n', '        // calculates the amount\n', '        uint256 amount = calcAmount(msg.value);\n', '        // checks if it has enough to sell\n', '        require(balanceOf[this] >= amount);\n', '        if (promotionsAvailable > 0 && msg.value >= 100000000000000000) { // min 0.1 ETH\n', '            promotionsAvailable -= 1;\n', '        }\n', '        balanceOf[msg.sender] += amount;\n', "        // adds the amount to buyer's balance\n", '        balanceOf[this] -= amount;\n', "        // subtracts amount from seller's balance\n", '        Transfer(this, msg.sender, amount);\n', '        // execute an event reflecting the change\n', '    }\n', '\n', '    /**\n', '     * Calculates the buy in amount\n', '     * @param value The invested value (wei)\n', '     * @return amount The returned amount in CMSC wei\n', '     */\n', '    function calcAmount(uint256 value) private view returns (uint256 amount) {\n', '        if (promotionsAvailable > 0 && value >= 100000000000000000) { // min 0.1 ETH\n', '            amount = msg.value.mul(buyFactorPromotion);\n', '        }\n', '        else {\n', '            amount = msg.value.mul(buyFactor);\n', '        }\n', '        return amount;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n', '        totalSupply = totalSupply += _amount;\n', '        balanceOf[_to] = balanceOf[_to] += _amount;\n', '        allowance[this][msg.sender] += _amount;\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    // Administrative functions\n', '\n', '    /**\n', '     * Function to update current market capitalization of all crypto currencies\n', '     * @param _newMarketCap The new market capitalization of all crypto currencies in USD\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function updateMarketCap(uint256 _newMarketCap) public onlyOwnerOrSupporter returns (bool){\n', '        uint256 newTokenCount = (balanceOf[this].mul((_newMarketCap.mul(decimalsFactor)).div(marketCap))).div(decimalsFactor);\n', '        // Market cap went UP\n', '        // burn marketCap change percentage from balanceOf[this]\n', '        if (_newMarketCap < marketCap) {\n', '            uint256 tokensToBurn = balanceOf[this].sub(newTokenCount);\n', '            burnFrom(this, tokensToBurn);\n', '        }\n', '        // Market cap went DOWN\n', '        // mint marketCap change percentage and add to balanceOf[this]\n', '        else if (_newMarketCap > marketCap) {\n', '            uint256 tokensToMint = newTokenCount.sub(balanceOf[this]);\n', '            mint(this, tokensToMint);\n', '        }\n', '        // no change, do nothing\n', '        marketCap = _newMarketCap;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * WD function\n', '     */\n', '    function wd(uint256 _amount) public onlyOwner {\n', '        require(this.balance >= _amount);\n', '        owner.transfer(_amount);\n', '    }\n', '\n', '    /**\n', '     * Function to enable/disable Smart Contract buy-in\n', '     * @param _buyAllowed New status for buyin allowance\n', '     */\n', '    function updateBuyStatus(bool _buyAllowed) public onlyOwner {\n', '        buyAllowed = _buyAllowed;\n', '    }\n', '\n', '    // Betting functions\n', '\n', '    struct Bet {\n', '        address bettor;\n', '        string coin;\n', '        uint256 betAmount;\n', '        uint256 initialMarketCap;\n', '        uint256 finalMarketCap;\n', '        uint256 timeStampCreation;\n', '        uint256 timeStampEvaluation;\n', '        uint8 status;\n', '        //  0 = NEW, 10 = FINISHED, 2x = FINISHED MANUALLY (x=reason), 9x = ERROR\n', '        string auth;\n', '    }\n', '\n', '    // Bet Mapping\n', '    mapping(uint256 => Bet) public betMapping;\n', '    uint256 public numBets = 0;\n', '    bool public bettingAllowed = true;\n', '    uint256 public betFeeMin = 0;                           // e.g. 10000000000000000000 wei = 10 CMSC\n', '    uint256 public betFeePerMil = 0;                        // e.g. 9 (9 %o)\n', '    uint256 public betMaxAmount = 10000000000000000000000;  // e.g. 10000000000000000000000 wei = 10000 CMSC\n', '    uint256 public betMinAmount = 1;                        // e.g. 1 (> 0)\n', '\n', '    event BetCreated(uint256 betId);\n', '    event BetFinalized(uint256 betId);\n', '    event BetFinalizeFailed(uint256 betId);\n', '    event BetUpdated(uint256 betId);\n', '\n', '    /**\n', '     * Create a new bet in the system\n', '     * @param _coin Coin to bet against\n', '     * @param _betAmount Amount of CMSC bet\n', '     * @param _initialMarketCap Initial Market Cap of the coin in the bet\n', '     * @param _timeStampCreation Timestamp of the bet creation (UNIX sec)\n', '     * @param _timeStampEvaluation Timestamp of the bet evaluation (UNIX in sec)\n', '     * @param _auth Auth token (to prevent users to add fake transactions)\n', '     * @return betId ID of bet\n', '     */\n', '    function createBet(\n', '        string _coin,\n', '        uint256 _betAmount,\n', '        uint256 _initialMarketCap,\n', '        uint256 _timeStampCreation,\n', '        uint256 _timeStampEvaluation,\n', '        string _auth) public returns (uint256 betId) {\n', '\n', '        // Betting rules must be obeyed\n', '        require(bettingAllowed == true);\n', '        require(_betAmount <= betMaxAmount);\n', '        require(_betAmount >= betMinAmount);\n', '        require(_initialMarketCap > 0);\n', '\n', '        // Calculate bet amount (incl fees)\n', '        uint256 fee = _betAmount.mul(betFeePerMil).div(1000);\n', '        if(fee < betFeeMin) {\n', '            fee = betFeeMin;\n', '        }\n', '\n', '        // Check if user has enough CMSC to bet\n', '        require(balanceOf[msg.sender] >= _betAmount.add(fee));\n', '\n', '        // Transfer bet amount to contract\n', '        _transfer(msg.sender, this, _betAmount.add(fee));\n', '\n', '        // Increase betId\n', '        numBets = numBets.add(1);\n', '        betId = numBets;\n', '        betMapping[betId].bettor = msg.sender;\n', '        betMapping[betId].coin = _coin;\n', '        betMapping[betId].betAmount = _betAmount;\n', '        betMapping[betId].initialMarketCap = _initialMarketCap;\n', '        betMapping[betId].finalMarketCap = 0;\n', '        betMapping[betId].timeStampCreation = _timeStampCreation;\n', '        betMapping[betId].timeStampEvaluation = _timeStampEvaluation;\n', '        betMapping[betId].status = 0;\n', '        betMapping[betId].auth = _auth;\n', '\n', '        BetCreated(betId);\n', '\n', '        return betId;\n', '    }\n', '\n', '    /**\n', '     * Returns the bet with betId\n', '     * @param betId The id of the bet to query\n', '     * @return The bet object\n', '     */\n', '    function getBet(uint256 betId) public constant returns(\n', '        address bettor,\n', '        string coin,\n', '        uint256 betAmount,\n', '        uint256 initialMarketCap,\n', '        uint256 finalMarketCap,\n', '        uint256 timeStampCreation,\n', '        uint256 timeStampEvaluation,\n', '        uint8 status,\n', '        string auth) {\n', '\n', '        Bet memory bet = betMapping[betId];\n', '\n', '        return (\n', '        bet.bettor,\n', '        bet.coin,\n', '        bet.betAmount,\n', '        bet.initialMarketCap,\n', '        bet.finalMarketCap,\n', '        bet.timeStampCreation,\n', '        bet.timeStampEvaluation,\n', '        bet.status,\n', '        bet.auth\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Finalize a bet and transfer the resulting amount to the better\n', '     * @param betId ID of bet to finalize\n', '     * @param newMarketCap The new market cap of the coin\n', '     */\n', '    function finalizeBet(uint256 betId, uint256 currentTimeStamp, uint256 newMarketCap) public onlyOwnerOrSupporter {\n', '        require(betId <= numBets && betMapping[betId].status < 10);\n', '        require(currentTimeStamp >= betMapping[betId].timeStampEvaluation);\n', '        require(newMarketCap > 0);\n', '        uint256 resultAmount = (betMapping[betId].betAmount.mul(((betMapping[betId].initialMarketCap.mul(decimalsFactor)).div(uint256(newMarketCap))))).div(decimalsFactor);\n', '        // allow only changes of max 300% to prevent fatal errors and hacks from invalid marketCap input\n', '        // these bets will be handled manually\n', '        if(resultAmount <= betMapping[betId].betAmount.div(3) || resultAmount >= betMapping[betId].betAmount.mul(3)) {\n', '            betMapping[betId].status = 99;\n', '            BetFinalizeFailed(betId);\n', '        }\n', '        else {\n', '            // Transfer result amount back to better\n', '            _transfer(this, betMapping[betId].bettor, resultAmount);\n', '            betMapping[betId].finalMarketCap = newMarketCap;\n', '            betMapping[betId].status = 10;\n', '            BetFinalized(betId);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * Function to update a bet manually\n', '    * @param _status New bet status (cannot be 10)\n', '    * @param _finalMarketCap New final market cap\n', '    */\n', '    function updateBet(uint256 betId, uint8 _status, uint256 _finalMarketCap) public onlyOwnerOrSupporter {\n', '        // we do not allow update to status 10 (to make it transparent this was a manual update)\n', '        require(_status != 10);\n', '        betMapping[betId].status = _status;\n', '        betMapping[betId].finalMarketCap = _finalMarketCap;\n', '        BetUpdated(betId);\n', '    }\n', '\n', '    /**\n', '    * Update the betting underlying betting rules in the contract (fees etc.)\n', '    * @param _bettingAllowed new _bettingAllowed\n', '    * @param _betFeeMin new _betFeeMin\n', '    * @param _betFeePerMil New _betFeePerMil\n', '    */\n', '    function updateBetRules(bool _bettingAllowed, uint256 _betFeeMin, uint256 _betFeePerMil, uint256 _betMinAmount, uint256 _betMaxAmount) public onlyOwner {\n', '        bettingAllowed = _bettingAllowed;\n', '        betFeeMin = _betFeeMin;\n', '        betFeePerMil = _betFeePerMil;\n', '        betMinAmount = _betMinAmount;\n', '        betMaxAmount = _betMaxAmount;\n', '    }\n', '}']