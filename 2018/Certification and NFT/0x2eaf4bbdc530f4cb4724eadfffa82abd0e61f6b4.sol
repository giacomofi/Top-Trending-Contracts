['pragma solidity 0.4.24;\n', '\n', '\n', '//base on //import &#39;openzeppelin-solidity/contracts/ownership/Ownable.sol&#39;;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', '* @dev This is my personal contract\n', '*/\n', 'contract DZariusz is Ownable {\n', '\n', '\n', '    string public name;\n', '    string public contact;\n', '\n', '    event LogSetName(address indexed executor, string newName);\n', '    event LogSetContact(address indexed executor, string newContact);\n', '\n', '\n', '    constructor(string _name, string _contact) public {\n', '\n', '        setName(_name);\n', '        setContact(_contact);\n', '\n', '    }\n', '\n', '\n', '\n', '    function setName(string _name)\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '    {\n', '        name = _name;\n', '        emit LogSetName(msg.sender, _name);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '    function setContact(string _contact)\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '    {\n', '        contact = _contact;\n', '        emit LogSetContact(msg.sender, _contact);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '}']