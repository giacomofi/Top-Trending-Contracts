['pragma solidity 0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/interfaces/IRegistry.sol\n', '\n', '// limited ContractRegistry definition\n', 'interface IRegistry {\n', '  function owner()\n', '    external\n', '    returns(address);\n', '\n', '  function updateContractAddress(\n', '    string _name,\n', '    address _address\n', '  )\n', '    external\n', '    returns (address);\n', '\n', '  function getContractAddress(\n', '    string _name\n', '  )\n', '    external\n', '    view\n', '    returns (address);\n', '}\n', '\n', '// File: contracts/interfaces/IBrickblockToken.sol\n', '\n', '// limited BrickblockToken definition\n', 'interface IBrickblockToken {\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    external\n', '    returns (bool);\n', '\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    external\n', '    returns (bool);\n', '\n', '  function balanceOf(\n', '    address _address\n', '  )\n', '    external\n', '    view\n', '    returns (uint256);\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    external\n', '    returns (bool);\n', '}\n', '\n', '// File: contracts/interfaces/IFeeManager.sol\n', '\n', 'interface IFeeManager {\n', '  function claimFee(\n', '    uint256 _value\n', '  )\n', '    external\n', '    returns (bool);\n', '\n', '  function payFee()\n', '    external\n', '    payable\n', '    returns (bool);\n', '}\n', '\n', '// File: contracts/interfaces/IAccessToken.sol\n', '\n', 'interface IAccessToken {\n', '  function lockBBK(\n', '    uint256 _value\n', '  )\n', '    external\n', '    returns (bool);\n', '\n', '  function unlockBBK(\n', '    uint256 _value\n', '  )\n', '    external\n', '    returns (bool);\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    external\n', '    returns (bool);\n', '\n', '  function distribute(\n', '    uint256 _amount\n', '  )\n', '    external\n', '    returns (bool);\n', '\n', '  function burn(\n', '    address _address,\n', '    uint256 _value\n', '  )\n', '    external\n', '    returns (bool);\n', '}\n', '\n', '// File: contracts/BrickblockAccount.sol\n', '\n', '/* solium-disable security/no-block-members */\n', '\n', '\n', 'contract BrickblockAccount is Ownable {\n', '  uint8 public constant version = 1;\n', '  uint256 public releaseTimeOfCompanyBBKs;\n', '  IRegistry private registry;\n', '\n', '  constructor\n', '  (\n', '    address _registryAddress,\n', '    uint256 _releaseTimeOfCompanyBBKs\n', '  )\n', '    public\n', '  {\n', '    require(_releaseTimeOfCompanyBBKs > block.timestamp);\n', '    releaseTimeOfCompanyBBKs = _releaseTimeOfCompanyBBKs;\n', '    registry = IRegistry(_registryAddress);\n', '  }\n', '\n', '  function pullFunds()\n', '    external\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    IBrickblockToken bbk = IBrickblockToken(\n', '      registry.getContractAddress("BrickblockToken")\n', '    );\n', '    uint256 _companyFunds = bbk.balanceOf(address(bbk));\n', '    return bbk.transferFrom(address(bbk), address(this), _companyFunds);\n', '  }\n', '\n', '  function lockBBK\n', '  (\n', '    uint256 _value\n', '  )\n', '    external\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    IAccessToken act = IAccessToken(\n', '      registry.getContractAddress("AccessToken")\n', '    );\n', '    IBrickblockToken bbk = IBrickblockToken(\n', '      registry.getContractAddress("BrickblockToken")\n', '    );\n', '\n', '    require(bbk.approve(address(act), _value));\n', '\n', '    return act.lockBBK(_value);\n', '  }\n', '\n', '  function unlockBBK(\n', '    uint256 _value\n', '  )\n', '    external\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    IAccessToken act = IAccessToken(\n', '      registry.getContractAddress("AccessToken")\n', '    );\n', '    return act.unlockBBK(_value);\n', '  }\n', '\n', '  function claimFee(\n', '    uint256 _value\n', '  )\n', '    external\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    IFeeManager fmr = IFeeManager(\n', '      registry.getContractAddress("FeeManager")\n', '    );\n', '    return fmr.claimFee(_value);\n', '  }\n', '\n', '  function withdrawEthFunds(\n', '    address _address,\n', '    uint256 _value\n', '  )\n', '    external\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    require(address(this).balance >= _value);\n', '    _address.transfer(_value);\n', '    return true;\n', '  }\n', '\n', '  function withdrawActFunds(\n', '    address _address,\n', '    uint256 _value\n', '  )\n', '    external\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    IAccessToken act = IAccessToken(\n', '      registry.getContractAddress("AccessToken")\n', '    );\n', '    return act.transfer(_address, _value);\n', '  }\n', '\n', '  function withdrawBbkFunds(\n', '    address _address,\n', '    uint256 _value\n', '  )\n', '    external\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    require(block.timestamp >= releaseTimeOfCompanyBBKs);\n', '    IBrickblockToken bbk = IBrickblockToken(\n', '      registry.getContractAddress("BrickblockToken")\n', '    );\n', '    return bbk.transfer(_address, _value);\n', '  }\n', '\n', '  // ensure that we can be paid ether\n', '  function()\n', '    public\n', '    payable\n', '  {}\n', '}']