['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/HasNoEther.sol\n', '\n', '/**\n', ' * @title Contracts that should not own Ether\n', ' * @author Remco Bloemen <remco@2Ï€.com>\n', ' * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n', ' * in the contract, it will allow the owner to reclaim this Ether.\n', ' * @notice Ether can still be sent to this contract by:\n', ' * calling functions labeled `payable`\n', ' * `selfdestruct(contract_address)`\n', ' * mining directly to the contract address\n', ' */\n', 'contract HasNoEther is Ownable {\n', '\n', '  /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '  constructor() public payable {\n', '    require(msg.value == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Disallows direct send by setting a default function without the `payable` flag.\n', '   */\n', '  function() external {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    owner.transfer(address(this).balance);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Destructible.sol\n', '\n', '/**\n', ' * @title Destructible\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n', ' */\n', 'contract Destructible is Ownable {\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() public onlyOwner {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) public onlyOwner {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\n', '\n', '/**\n', ' * @title ERC165\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', ' */\n', 'interface ERC165 {\n', '\n', '  /**\n', '   * @notice Query if a contract implements an interface\n', '   * @param _interfaceId The interface identifier, as specified in ERC-165\n', '   * @dev Interface identification is specified in ERC-165. This function\n', '   * uses less than 30,000 gas.\n', '   */\n', '  function supportsInterface(bytes4 _interfaceId)\n', '    external\n', '    view\n', '    returns (bool);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Basic is ERC165 {\n', '\n', '  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\n', '  /*\n', '   * 0x80ac58cd ===\n', "   *   bytes4(keccak256('balanceOf(address)')) ^\n", "   *   bytes4(keccak256('ownerOf(uint256)')) ^\n", "   *   bytes4(keccak256('approve(address,uint256)')) ^\n", "   *   bytes4(keccak256('getApproved(uint256)')) ^\n", "   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n", "   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n", "   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n", "   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n", "   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n", '   */\n', '\n', '  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\n', '  /*\n', '   * 0x4f558e79 ===\n', "   *   bytes4(keccak256('exists(uint256)'))\n", '   */\n', '\n', '  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n', '  /**\n', '   * 0x780e9d63 ===\n', "   *   bytes4(keccak256('totalSupply()')) ^\n", "   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n", "   *   bytes4(keccak256('tokenByIndex(uint256)'))\n", '   */\n', '\n', '  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n', '  /**\n', '   * 0x5b5e139f ===\n', "   *   bytes4(keccak256('name()')) ^\n", "   *   bytes4(keccak256('symbol()')) ^\n", "   *   bytes4(keccak256('tokenURI(uint256)'))\n", '   */\n', '\n', '  event Transfer(\n', '    address indexed _from,\n', '    address indexed _to,\n', '    uint256 indexed _tokenId\n', '  );\n', '  event Approval(\n', '    address indexed _owner,\n', '    address indexed _approved,\n', '    uint256 indexed _tokenId\n', '  );\n', '  event ApprovalForAll(\n', '    address indexed _owner,\n', '    address indexed _operator,\n', '    bool _approved\n', '  );\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function exists(uint256 _tokenId) public view returns (bool _exists);\n', '\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function getApproved(uint256 _tokenId)\n', '    public view returns (address _operator);\n', '\n', '  function setApprovalForAll(address _operator, bool _approved) public;\n', '  function isApprovedForAll(address _owner, address _operator)\n', '    public view returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n', '    public;\n', '\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public;\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Enumerable is ERC721Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function tokenOfOwnerByIndex(\n', '    address _owner,\n', '    uint256 _index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256 _tokenId);\n', '\n', '  function tokenByIndex(uint256 _index) public view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Metadata is ERC721Basic {\n', '  function name() external view returns (string _name);\n', '  function symbol() external view returns (string _symbol);\n', '  function tokenURI(uint256 _tokenId) public view returns (string);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'contract ERC721Receiver {\n', '  /**\n', '   * @dev Magic value to be returned upon successful reception of an NFT\n', '   *  Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`,\n', '   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '   */\n', '  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient\n', '   * after a `safetransfer`. This function MAY throw to revert and reject the\n', '   * transfer. Return of other than the magic value MUST result in the\n', '   * transaction being reverted.\n', '   * Note: the contract address is always the message sender.\n', '   * @param _operator The address which called `safeTransferFrom` function\n', '   * @param _from The address which previously owned the token\n', '   * @param _tokenId The NFT identifier which is being transferred\n', '   * @param _data Additional data with no specified format\n', '   * @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '   */\n', '  function onERC721Received(\n', '    address _operator,\n', '    address _from,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '    returns(bytes4);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/AddressUtils.sol\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   * as the code is not actually created until after the constructor finishes.\n', '   * @param _addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address _addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(_addr) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\n', '\n', '/**\n', ' * @title SupportsInterfaceWithLookup\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Implements ERC165 using a lookup table.\n', ' */\n', 'contract SupportsInterfaceWithLookup is ERC165 {\n', '\n', '  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n', '  /**\n', '   * 0x01ffc9a7 ===\n', "   *   bytes4(keccak256('supportsInterface(bytes4)'))\n", '   */\n', '\n', '  /**\n', "   * @dev a mapping of interface id to whether or not it's supported\n", '   */\n', '  mapping(bytes4 => bool) internal supportedInterfaces;\n', '\n', '  /**\n', '   * @dev A contract implementing SupportsInterfaceWithLookup\n', '   * implement ERC165 itself\n', '   */\n', '  constructor()\n', '    public\n', '  {\n', '    _registerInterface(InterfaceId_ERC165);\n', '  }\n', '\n', '  /**\n', '   * @dev implement supportsInterface(bytes4) using a lookup table\n', '   */\n', '  function supportsInterface(bytes4 _interfaceId)\n', '    external\n', '    view\n', '    returns (bool)\n', '  {\n', '    return supportedInterfaces[_interfaceId];\n', '  }\n', '\n', '  /**\n', '   * @dev private method for registering an interface\n', '   */\n', '  function _registerInterface(bytes4 _interfaceId)\n', '    internal\n', '  {\n', '    require(_interfaceId != 0xffffffff);\n', '    supportedInterfaces[_interfaceId] = true;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n', '\n', '  using SafeMath for uint256;\n', '  using AddressUtils for address;\n', '\n', '  // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) internal tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) internal tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping (address => uint256) internal ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping (address => mapping (address => bool)) internal operatorApprovals;\n', '\n', '  constructor()\n', '    public\n', '  {\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(InterfaceId_ERC721);\n', '    _registerInterface(InterfaceId_ERC721Exists);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address\n', '   * @param _owner address to query the balance of\n', '   * @return uint256 representing the amount owned by the passed address\n', '   */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    require(_owner != address(0));\n', '    return ownedTokensCount[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the owner of the specified token ID\n', '   * @param _tokenId uint256 ID of the token to query the owner of\n', '   * @return owner address currently marked as the owner of the given token ID\n', '   */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the specified token exists\n', '   * @param _tokenId uint256 ID of the token to query the existence of\n', '   * @return whether the token exists\n', '   */\n', '  function exists(uint256 _tokenId) public view returns (bool) {\n', '    address owner = tokenOwner[_tokenId];\n', '    return owner != address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Approves another address to transfer the given token ID\n', '   * The zero address indicates there is no approved address.\n', '   * There can only be one approved address per token at a given time.\n', '   * Can only be called by the token owner or an approved operator.\n', '   * @param _to address to be approved for the given token ID\n', '   * @param _tokenId uint256 ID of the token to be approved\n', '   */\n', '  function approve(address _to, uint256 _tokenId) public {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '    tokenApprovals[_tokenId] = _to;\n', '    emit Approval(owner, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for the given token ID\n', '   */\n', '  function getApproved(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * An operator is allowed to transfer all tokens of the sender on their behalf\n', '   * @param _to operator address to set the approval\n', '   * @param _approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(address _to, bool _approved) public {\n', '    require(_to != msg.sender);\n', '    operatorApprovals[msg.sender][_to] = _approved;\n', '    emit ApprovalForAll(msg.sender, _to, _approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param _owner owner address which you want to query the approval of\n', '   * @param _operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(\n', '    address _owner,\n', '    address _operator\n', '  )\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return operatorApprovals[_owner][_operator];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers the ownership of a given token ID to another address\n', '   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '  {\n', '    require(isApprovedOrOwner(msg.sender, _tokenId));\n', '    require(_from != address(0));\n', '    require(_to != address(0));\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeTokenFrom(_from, _tokenId);\n', '    addTokenTo(_to, _tokenId);\n', '\n', '    emit Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   *\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '  {\n', '    // solium-disable-next-line arg-overflow\n', '    safeTransferFrom(_from, _to, _tokenId, "");\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '  {\n', '    transferFrom(_from, _to, _tokenId);\n', '    // solium-disable-next-line arg-overflow\n', '    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the given spender can transfer a given token ID\n', '   * @param _spender address of the spender to query\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @return bool whether the msg.sender is approved for the given token ID,\n', '   *  is an operator of the owner, or is the owner of the token\n', '   */\n', '  function isApprovedOrOwner(\n', '    address _spender,\n', '    uint256 _tokenId\n', '  )\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    address owner = ownerOf(_tokenId);\n', '    // Disable solium check because of\n', '    // https://github.com/duaraghav8/Solium/issues/175\n', '    // solium-disable-next-line operator-whitespace\n', '    return (\n', '      _spender == owner ||\n', '      getApproved(_tokenId) == _spender ||\n', '      isApprovedForAll(owner, _spender)\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param _to The address that will own the minted token\n', '   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    addTokenTo(_to, _tokenId);\n', '    emit Transfer(address(0), _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    clearApproval(_owner, _tokenId);\n', '    removeTokenFrom(_owner, _tokenId);\n', '    emit Transfer(_owner, address(0), _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to clear current approval of a given token ID\n', '   * Reverts if the given address is not indeed the owner of the token\n', '   * @param _owner owner of the token\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function clearApproval(address _owner, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    if (tokenApprovals[_tokenId] != address(0)) {\n', '      tokenApprovals[_tokenId] = address(0);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param _to address representing the new owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _from);\n', '    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n', '    tokenOwner[_tokenId] = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onERC721Received` on a target address\n', '   * The call is not executed if the target address is not a contract\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _to target address that will receive the tokens\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function checkAndCallSafeTransfer(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    if (!_to.isContract()) {\n', '      return true;\n', '    }\n', '    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n', '      msg.sender, _from, _tokenId, _data);\n', '    return (retval == ERC721_RECEIVED);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Token.sol\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n', '\n', '  // Token name\n', '  string internal name_;\n', '\n', '  // Token symbol\n', '  string internal symbol_;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping(address => uint256[]) internal ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] internal allTokens;\n', '\n', '  // Mapping from token id to position in the allTokens array\n', '  mapping(uint256 => uint256) internal allTokensIndex;\n', '\n', '  // Optional mapping for token URIs\n', '  mapping(uint256 => string) internal tokenURIs;\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  constructor(string _name, string _symbol) public {\n', '    name_ = _name;\n', '    symbol_ = _symbol;\n', '\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(InterfaceId_ERC721Enumerable);\n', '    _registerInterface(InterfaceId_ERC721Metadata);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token name\n', '   * @return string representing the token name\n', '   */\n', '  function name() external view returns (string) {\n', '    return name_;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token symbol\n', '   * @return string representing the token symbol\n', '   */\n', '  function symbol() external view returns (string) {\n', '    return symbol_;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns an URI for a given token ID\n', '   * Throws if the token ID does not exist. May return an empty string.\n', '   * @param _tokenId uint256 ID of the token to query\n', '   */\n', '  function tokenURI(uint256 _tokenId) public view returns (string) {\n', '    require(exists(_tokenId));\n', '    return tokenURIs[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '   * @param _owner address owning the tokens list to be accessed\n', '   * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '   */\n', '  function tokenOfOwnerByIndex(\n', '    address _owner,\n', '    uint256 _index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    require(_index < balanceOf(_owner));\n', '    return ownedTokens[_owner][_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the total amount of tokens stored by the contract\n', '   * @return uint256 representing the total amount of tokens\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return allTokens.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of all the tokens in this contract\n', '   * Reverts if the index is greater or equal to the total number of tokens\n', '   * @param _index uint256 representing the index to be accessed of the tokens list\n', '   * @return uint256 token ID at the given index of the tokens list\n', '   */\n', '  function tokenByIndex(uint256 _index) public view returns (uint256) {\n', '    require(_index < totalSupply());\n', '    return allTokens[_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to set the token URI for a given token\n', '   * Reverts if the token ID does not exist\n', '   * @param _tokenId uint256 ID of the token to set its URI\n', '   * @param _uri string URI to assign\n', '   */\n', '  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n', '    require(exists(_tokenId));\n', '    tokenURIs[_tokenId] = _uri;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param _to address representing the new owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    super.addTokenTo(_to, _tokenId);\n', '    uint256 length = ownedTokens[_to].length;\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    super.removeTokenFrom(_from, _tokenId);\n', '\n', '    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n', '    // then delete the last slot.\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    // This also deletes the contents at the last position of the array\n', '    ownedTokens[_from].length--;\n', '\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param _to address the beneficiary that will own the minted token\n', '   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    super._mint(_to, _tokenId);\n', '\n', '    allTokensIndex[_tokenId] = allTokens.length;\n', '    allTokens.push(_tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param _owner owner of the token to burn\n', '   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    super._burn(_owner, _tokenId);\n', '\n', '    // Clear metadata (if any)\n', '    if (bytes(tokenURIs[_tokenId]).length != 0) {\n', '      delete tokenURIs[_tokenId];\n', '    }\n', '\n', '    // Reorg all tokens array\n', '    uint256 tokenIndex = allTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = allTokens.length.sub(1);\n', '    uint256 lastToken = allTokens[lastTokenIndex];\n', '\n', '    allTokens[tokenIndex] = lastToken;\n', '    allTokens[lastTokenIndex] = 0;\n', '\n', '    allTokens.length--;\n', '    allTokensIndex[_tokenId] = 0;\n', '    allTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/MEHAccessControl.sol\n', '\n', 'contract MarketInerface {\n', '    function buyBlocks(address, uint16[]) external returns (uint) {}\n', '    function sellBlocks(address, uint, uint16[]) external returns (uint) {}\n', '    function isMarket() public view returns (bool) {}\n', '    function isOnSale(uint16) public view returns (bool) {}\n', '    function areaPrice(uint16[]) public view returns (uint) {}\n', '    function importOldMEBlock(uint8, uint8) external returns (uint, address) {}\n', '}\n', '\n', 'contract RentalsInterface {\n', '    function rentOutBlocks(address, uint, uint16[]) external returns (uint) {}\n', '    function rentBlocks(address, uint, uint16[]) external returns (uint) {}\n', '    function blocksRentPrice(uint, uint16[]) external view returns (uint) {}\n', '    function isRentals() public view returns (bool) {}\n', '    function isRented(uint16) public view returns (bool) {}\n', '    function renterOf(uint16) public view returns (address) {}\n', '}\n', '\n', 'contract AdsInterface {\n', '    function advertiseOnBlocks(address, uint16[], string, string, string) external returns (uint) {}\n', '    function canAdvertiseOnBlocks(address, uint16[]) public view returns (bool) {}\n', '    function isAds() public view returns (bool) {}\n', '}\n', '\n', '/// @title MEHAccessControl: Part of MEH contract responsible for communication with external modules:\n', '///  Market, Rentals, Ads contracts. Provides authorization and upgradability methods.\n', 'contract MEHAccessControl is Pausable {\n', '\n', '    // Allows a module being plugged in to verify it is MEH contract. \n', '    bool public isMEH = true;\n', '\n', '    // Modules\n', '    MarketInerface public market;\n', '    RentalsInterface public rentals;\n', '    AdsInterface public ads;\n', '\n', '    // Emitted when a module is plugged.\n', '    event LogModuleUpgrade(address newAddress, string moduleName);\n', '    \n', '// GUARDS\n', '    \n', '    /// @dev Functions allowed to market module only. \n', '    modifier onlyMarket() {\n', '        require(msg.sender == address(market));\n', '        _;\n', '    }\n', '\n', '    /// @dev Functions allowed to balance operators only (market and rentals contracts are the \n', '    ///  only balance operators)\n', '    modifier onlyBalanceOperators() {\n', '        require(msg.sender == address(market) || msg.sender == address(rentals));\n', '        _;\n', '    }\n', '\n', '// ** Admin set Access ** //\n', '    /// @dev Allows admin to plug a new Market contract in.\n', '    // credits to cryptokittes! - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n', '    // NOTE: verify that a contract is what we expect\n', '    function adminSetMarket(address _address) external onlyOwner {\n', '        MarketInerface candidateContract = MarketInerface(_address);\n', '        require(candidateContract.isMarket());\n', '        market = candidateContract;\n', '        emit LogModuleUpgrade(_address, "Market");\n', '    }\n', '\n', '    /// @dev Allows admin to plug a new Rentals contract in.\n', '    function adminSetRentals(address _address) external onlyOwner {\n', '        RentalsInterface candidateContract = RentalsInterface(_address);\n', '        require(candidateContract.isRentals());\n', '        rentals = candidateContract;\n', '        emit LogModuleUpgrade(_address, "Rentals");\n', '    }\n', '\n', '    /// @dev Allows admin to plug a new Ads contract in.\n', '    function adminSetAds(address _address) external onlyOwner {\n', '        AdsInterface candidateContract = AdsInterface(_address);\n', '        require(candidateContract.isAds());\n', '        ads = candidateContract;\n', '        emit LogModuleUpgrade(_address, "Ads");\n', '    }\n', '}\n', '\n', '// File: contracts/MehERC721.sol\n', '\n', '// ERC721 \n', '\n', '\n', '\n', "/// @title MehERC721: Part of MEH contract responsible for ERC721 token management. Openzeppelin's\n", '///  ERC721 implementation modified for the Million Ether Homepage. \n', 'contract MehERC721 is ERC721Token("MillionEtherHomePage","MEH"), MEHAccessControl {\n', '\n', '    /// @dev Checks rights to transfer block ownership. Locks tokens on sale.\n', "    ///  Overrides OpenZEppelin's isApprovedOrOwner function - so that tokens marked for sale can \n", '    ///  be transferred by Market contract only.\n', '    function isApprovedOrOwner(\n', '        address _spender,\n', '        uint256 _tokenId\n', '    )\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {   \n', '        bool onSale = market.isOnSale(uint16(_tokenId));\n', '\n', '        address owner = ownerOf(_tokenId);\n', '        bool spenderIsApprovedOrOwner =\n', '            _spender == owner ||\n', '            getApproved(_tokenId) == _spender ||\n', '            isApprovedForAll(owner, _spender);\n', '\n', '        return (\n', '            (onSale && _spender == address(market)) ||\n', '            (!(onSale) && spenderIsApprovedOrOwner)\n', '        );\n', '    }\n', '\n', '    /// @dev mints a new block.\n', '    ///  overrides _mint function to add pause/unpause functionality, onlyMarket access,\n', '    ///  restricts totalSupply of blocks to 10000 (as there is only a 100x100 blocks field).\n', '    function _mintCrowdsaleBlock(address _to, uint16 _blockId) external onlyMarket whenNotPaused {\n', '        if (totalSupply() <= 9999) {\n', '        _mint(_to, uint256(_blockId));\n', '        }\n', '    }\n', '\n', '    /// @dev overrides approve function to add pause/unpause functionality\n', '    function approve(address _to, uint256 _tokenId) public whenNotPaused {\n', '        super.approve(_to, _tokenId);\n', '    }\n', ' \n', '    /// @dev overrides setApprovalForAll function to add pause/unpause functionality\n', '    function setApprovalForAll(address _to, bool _approved) public whenNotPaused {\n', '        super.setApprovalForAll(_to, _approved);\n', '    }    \n', '\n', '    /// @dev overrides transferFrom function to add pause/unpause functionality\n', '    ///  affects safeTransferFrom functions as well\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '        whenNotPaused\n', '    {\n', '        super.transferFrom(_from, _to, _tokenId);\n', '    }\n', '}\n', '\n', '// File: contracts/Accounting.sol\n', '\n', '// import "../installed_contracts/math.sol";\n', '\n', '\n', '\n', '// @title Accounting: Part of MEH contract responsible for eth accounting.\n', 'contract Accounting is MEHAccessControl {\n', '    using SafeMath for uint256;\n', '\n', '    // Balances of users, admin, charity\n', '    mapping(address => uint256) public balances;\n', '\n', '    // Emitted when a user deposits or withdraws funds from the contract\n', '    event LogContractBalance(address payerOrPayee, int balanceChange);\n', '\n', '// ** PAYMENT PROCESSING ** //\n', '    \n', '    /// @dev Withdraws users available balance.\n', '    function withdraw() external whenNotPaused {\n', '        address payee = msg.sender;\n', '        uint256 payment = balances[payee];\n', '\n', '        require(payment != 0);\n', '        assert(address(this).balance >= payment);\n', '\n', '        balances[payee] = 0;\n', '\n', '        // reentrancy safe\n', '        payee.transfer(payment);\n', '        emit LogContractBalance(payee, int256(-payment));\n', '    }\n', '\n', '    /// @dev Lets external authorized contract (operators) to transfer balances within MEH contract.\n', "    ///  MEH contract doesn't transfer funds on its own. Instead Market and Rentals contracts\n", '    ///  are granted operator access.\n', '    function operatorTransferFunds(\n', '        address _payer, \n', '        address _recipient, \n', '        uint _amount) \n', '    external \n', '    onlyBalanceOperators\n', '    whenNotPaused\n', '    {\n', '        require(balances[_payer] >= _amount);\n', '        _deductFrom(_payer, _amount);\n', '        _depositTo(_recipient, _amount);\n', '    }\n', '\n', '    /// @dev Deposits eth to msg.sender balance.\n', '    function depositFunds() internal whenNotPaused {\n', '        _depositTo(msg.sender, msg.value);\n', '        emit LogContractBalance(msg.sender, int256(msg.value));\n', '    }\n', '\n', '    /// @dev Increases recipients internal balance.\n', '    function _depositTo(address _recipient, uint _amount) internal {\n', '        balances[_recipient] = balances[_recipient].add(_amount);\n', '    }\n', '\n', '    /// @dev Increases payers internal balance.\n', '    function _deductFrom(address _payer, uint _amount) internal {\n', '        balances[_payer] = balances[_payer].sub(_amount);\n', '    }\n', '\n', '// ** ADMIN ** //\n', '\n', '    /// @notice Allows admin to withdraw contract balance in emergency. And distribute manualy\n', '    ///  aftrewards.\n', '    /// @dev As the contract is not designed to keep users funds (users can withdraw\n', '    ///  at anytime) it should be relatively easy to manualy transfer unclaimed funds to \n', '    ///  their owners. This is an alternatinve to selfdestruct allowing blocks ledger (ERC721 tokens)\n', '    ///  to be immutable.\n', '    function adminRescueFunds() external onlyOwner whenPaused {\n', '        address payee = owner;\n', '        uint256 payment = address(this).balance;\n', '        payee.transfer(payment);\n', '    }\n', '\n', '    /// @dev Checks if a msg.sender has enough balance to pay the price _needed.\n', '    function canPay(uint _needed) internal view returns (bool) {\n', '        return (msg.value.add(balances[msg.sender]) >= _needed);\n', '    }\n', '}\n', '\n', '// File: contracts/MEH.sol\n', '\n', '/*\n', 'MillionEther smart contract - decentralized advertising platform.\n', '\n', 'This program is free software: you can redistribute it and/or modifromY\n', 'it under the terms of the GNU General Public License as published by\n', 'the Free Software Foundation, either version 3 of the License, or\n', '(at your option) any later version.\n', '\n', 'This program is distributed in the hope that it will be useful,\n', 'but WITHOUT ANY WARRANTY; without even the implied warranty of\n', 'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', 'GNU General Public License for more details.\n', '\n', 'You should have received a copy of the GNU General Public License\n', 'along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '*/\n', '\n', '/*\n', '* A 1000x1000 pixel field is displayed at TheMillionEtherHomepage.com. \n', '* This smart contract lets anyone buy 10x10 pixel blocks and place ads there.\n', '* It also allows to sell blocks and rent them out to other advertisers. \n', '*\n', '* 10x10 pixels blocks are addressed by xy coordinates. So 1000x1000 pixel field is 100 by 100 blocks.\n', '* Making up 10 000 blocks in total. Each block is an ERC721 (non fungible token) token. \n', '*\n', '* At the initial sale the price for each block is $1 (price is feeded by an oracle). After\n', '* every 1000 blocks sold (every 10%) the price doubles. Owners can sell and rent out blocks at any\n', '* price they want. Owners and renters can place and replace ads to their blocks as many times they \n', '* want.\n', '*\n', '* All heavy logic is delegated to external upgradable contracts. There are 4 main modules (contracts):\n', '*     - MEH: Million Ether Homepage (MEH) contract. Provides user interface and accounting \n', '*         functionality. It is immutable and it keeps Non fungible ERC721 tokens (10x10 pixel blocks) \n', '*         ledger and eth balances. \n', '*     - Market: Plugable. Provides methods for buy-sell functionality, keeps buy-sell ledger, \n', '*         querries oracle for a ETH-USD price, \n', '*     - Rentals: Plugable. Provides methods for rentout-rent functionality, keeps rentout-rent ledger.\n', '*     - Ads: Plugable. Provides methods for image placement functionality.\n', '* \n', '*/\n', '\n', '/// @title MEH: Million Ether Homepage. Buy, sell, rent out pixels and place ads.\n', '/// @author Peter Porobov (https://keybase.io/peterporobov)\n', '/// @notice The main contract, accounting and user interface. Immutable.\n', 'contract MEH is MehERC721, Accounting {\n', '\n', '    /// @notice emited when an area blocks is bought\n', '    event LogBuys(\n', '        uint ID,\n', '        uint8 fromX,\n', '        uint8 fromY,\n', '        uint8 toX,\n', '        uint8 toY,\n', '        address newLandlord\n', '    );\n', '\n', '    /// @notice emited when an area blocks is marked for sale\n', '    event LogSells(\n', '        uint ID,\n', '        uint8 fromX,\n', '        uint8 fromY,\n', '        uint8 toX,\n', '        uint8 toY,\n', '        uint sellPrice\n', '    );\n', '\n', '    /// @notice emited when an area blocks is marked for rent\n', '    event LogRentsOut(\n', '        uint ID,\n', '        uint8 fromX,\n', '        uint8 fromY,\n', '        uint8 toX,\n', '        uint8 toY,\n', '        uint rentPricePerPeriodWei\n', '    );\n', '\n', '    /// @notice emited when an area blocks is rented\n', '    event LogRents(\n', '        uint ID,\n', '        uint8 fromX,\n', '        uint8 fromY,\n', '        uint8 toX,\n', '        uint8 toY,\n', '        uint numberOfPeriods,\n', '        uint rentedFrom\n', '    );\n', '\n', '    /// @notice emited when an ad is placed to an area\n', '    event LogAds(\n', '        uint ID, \n', '        uint8 fromX,\n', '        uint8 fromY,\n', '        uint8 toX,\n', '        uint8 toY,\n', '        string imageSourceUrl,\n', '        string adUrl,\n', '        string adText,\n', '        address indexed advertiser);\n', '\n', '// ** BUY AND SELL BLOCKS ** //\n', '    \n', '    /// @notice lets a message sender to buy blocks within area\n', '    /// @dev if using a contract to buy an area make sure to implement ERC721 functionality \n', '    ///  as tokens are transfered using "transferFrom" function and not "safeTransferFrom"\n', '    ///  in order to avoid external calls.\n', '    function buyArea(uint8 fromX, uint8 fromY, uint8 toX, uint8 toY) \n', '        external\n', '        whenNotPaused\n', '        payable\n', '    {   \n', '        // check input parameters and eth deposited\n', '        require(isLegalCoordinates(fromX, fromY, toX, toY));\n', '        require(canPay(areaPrice(fromX, fromY, toX, toY)));\n', '        depositFunds();\n', '\n', '        // try to buy blocks through market contract\n', '        // will get an id of buy-sell operation if succeeds (if all blocks available)\n', '        uint id = market.buyBlocks(msg.sender, blocksList(fromX, fromY, toX, toY));\n', '        emit LogBuys(id, fromX, fromY, toX, toY, msg.sender);\n', '    }\n', '\n', '    /// @notice lets a message sender to mark blocks for sale at price set for each block in wei\n', '    /// @dev (priceForEachBlockCents = 0 - not for sale)\n', '    function sellArea(uint8 fromX, uint8 fromY, uint8 toX, uint8 toY, uint priceForEachBlockWei)\n', '        external \n', '        whenNotPaused\n', '    {   \n', '        // check input parameters\n', '        require(isLegalCoordinates(fromX, fromY, toX, toY));\n', '\n', '        // try to mark blocks for sale through market contract\n', '        // will get an id of buy-sell operation if succeeds (if owns all blocks)\n', '        uint id = market.sellBlocks(\n', '            msg.sender, \n', '            priceForEachBlockWei, \n', '            blocksList(fromX, fromY, toX, toY)\n', '        );\n', '        emit LogSells(id, fromX, fromY, toX, toY, priceForEachBlockWei);\n', '    }\n', '\n', '    /// @notice get area price in wei\n', '    function areaPrice(uint8 fromX, uint8 fromY, uint8 toX, uint8 toY) \n', '        public \n', '        view \n', '        returns (uint) \n', '    {   \n', '        // check input\n', '        require(isLegalCoordinates(fromX, fromY, toX, toY));\n', '\n', '        // querry areaPrice in wei at market contract\n', '        return market.areaPrice(blocksList(fromX, fromY, toX, toY));\n', '    }\n', '\n', '// ** RENT OUT AND RENT BLOCKS ** //\n', '        \n', '    /// @notice Rent out an area of blocks at coordinates [fromX, fromY, toX, toY] at a price for \n', '    ///  each block in wei\n', '    /// @dev if rentPricePerPeriodWei = 0 then makes area not available for rent\n', '    function rentOutArea(uint8 fromX, uint8 fromY, uint8 toX, uint8 toY, uint rentPricePerPeriodWei)\n', '        external\n', '        whenNotPaused\n', '    {   \n', '        // check input\n', '        require(isLegalCoordinates(fromX, fromY, toX, toY));\n', '\n', '        // try to mark blocks as rented out through rentals contract\n', '        // will get an id of rent-rentout operation if succeeds (if message sender owns blocks)\n', '        uint id = rentals.rentOutBlocks(\n', '            msg.sender, \n', '            rentPricePerPeriodWei, \n', '            blocksList(fromX, fromY, toX, toY)\n', '        );\n', '        emit LogRentsOut(id, fromX, fromY, toX, toY, rentPricePerPeriodWei);\n', '    }\n', '    \n', '    /// @notice Rent an area of blocks at coordinates [fromX, fromY, toX, toY] for a number of \n', '    ///  periods specified\n', '    ///  (period length is specified in rentals contract)\n', '    function rentArea(uint8 fromX, uint8 fromY, uint8 toX, uint8 toY, uint numberOfPeriods)\n', '        external\n', '        payable\n', '        whenNotPaused\n', '    {   \n', '        // check input parameters and eth deposited\n', '        // checks number of periods > 0 in rentals contract\n', '        require(isLegalCoordinates(fromX, fromY, toX, toY));\n', '        require(canPay(areaRentPrice(fromX, fromY, toX, toY, numberOfPeriods)));\n', '        depositFunds();\n', '\n', '        // try to rent blocks through rentals contract\n', '        // will get an id of rent-rentout operation if succeeds (if all blocks available for rent)\n', '        uint id = rentals.rentBlocks(\n', '            msg.sender, \n', '            numberOfPeriods, \n', '            blocksList(fromX, fromY, toX, toY)\n', '        );\n', '        emit LogRents(id, fromX, fromY, toX, toY, numberOfPeriods, 0);\n', '    }\n', '\n', '    /// @notice get area rent price in wei for number of periods specified \n', '    ///  (period length is specified in rentals contract) \n', '    function areaRentPrice(uint8 fromX, uint8 fromY, uint8 toX, uint8 toY, uint numberOfPeriods)\n', '        public \n', '        view \n', '        returns (uint) \n', '    {   \n', '        // check input \n', '        require(isLegalCoordinates(fromX, fromY, toX, toY));\n', '\n', '        // querry areaPrice in wei at rentals contract\n', '        return rentals.blocksRentPrice (numberOfPeriods, blocksList(fromX, fromY, toX, toY));\n', '    }\n', '\n', '// ** PLACE ADS ** //\n', '    \n', '    /// @notice places ads (image, caption and link to a website) into desired coordinates\n', '    /// @dev nothing is stored in any of the contracts except an image id. All other data is \n', '    ///  only emitted in event. Basicaly this function just verifies if an event is allowed \n', '    ///  to be emitted.\n', '    function placeAds( \n', '        uint8 fromX, \n', '        uint8 fromY, \n', '        uint8 toX, \n', '        uint8 toY, \n', '        string imageSource, \n', '        string link, \n', '        string text\n', '    ) \n', '        external\n', '        whenNotPaused\n', '    {   \n', '        // check input\n', '        require(isLegalCoordinates(fromX, fromY, toX, toY));\n', '\n', '        // try to place ads through ads contract\n', '        // will get an image id if succeeds (if advertiser owns or rents all blocks within area)\n', '        uint AdsId = ads.advertiseOnBlocks(\n', '            msg.sender, \n', '            blocksList(fromX, fromY, toX, toY), \n', '            imageSource, \n', '            link, \n', '            text\n', '        );\n', '        emit LogAds(AdsId, fromX, fromY, toX, toY, imageSource, link, text, msg.sender);\n', '    }\n', '\n', '    /// @notice check if an advertiser is allowed to put ads within area (i.e. owns or rents all \n', '    ///  blocks)\n', '    function canAdvertise(\n', '        address advertiser,\n', '        uint8 fromX, \n', '        uint8 fromY, \n', '        uint8 toX, \n', '        uint8 toY\n', '    ) \n', '        external\n', '        view\n', '        returns (bool)\n', '    {   \n', '        // check user input\n', '        require(isLegalCoordinates(fromX, fromY, toX, toY));\n', '\n', '        // querry permission at ads contract\n', '        return ads.canAdvertiseOnBlocks(advertiser, blocksList(fromX, fromY, toX, toY));\n', '    }\n', '\n', '// ** IMPORT BLOCKS ** //\n', '\n', '    /// @notice import blocks from previous version Million Ether Homepage\n', '    function adminImportOldMEBlock(uint8 x, uint8 y) external onlyOwner {\n', '        (uint id, address newLandlord) = market.importOldMEBlock(x, y);\n', '        emit LogBuys(id, x, y, x, y, newLandlord);\n', '    }\n', '\n', '// ** INFO GETTERS ** //\n', '    \n', '    /// @notice get an owner(address) of block at a specified coordinates\n', '    function getBlockOwner(uint8 x, uint8 y) external view returns (address) {\n', '        return ownerOf(blockID(x, y));\n', '    }\n', '\n', '// ** UTILS ** //\n', '    \n', '    /// @notice get ERC721 token id corresponding to xy coordinates\n', '    function blockID(uint8 x, uint8 y) public pure returns (uint16) {\n', '        return (uint16(y) - 1) * 100 + uint16(x);\n', '    }\n', '\n', '    /// @notice get a number of blocks within area\n', '    function countBlocks(\n', '        uint8 fromX, \n', '        uint8 fromY, \n', '        uint8 toX, \n', '        uint8 toY\n', '    ) \n', '        internal \n', '        pure \n', '        returns (uint16)\n', '    {\n', '        return (toX - fromX + 1) * (toY - fromY + 1);\n', '    }\n', '\n', '    /// @notice get an array of all block ids (i.e. ERC721 token ids) within area\n', '    function blocksList(\n', '        uint8 fromX, \n', '        uint8 fromY, \n', '        uint8 toX, \n', '        uint8 toY\n', '    ) \n', '        internal \n', '        pure \n', '        returns (uint16[] memory r) \n', '    {\n', '        uint i = 0;\n', '        r = new uint16[](countBlocks(fromX, fromY, toX, toY));\n', '        for (uint8 ix=fromX; ix<=toX; ix++) {\n', '            for (uint8 iy=fromY; iy<=toY; iy++) {\n', '                r[i] = blockID(ix, iy);\n', '                i++;\n', '            }\n', '        }\n', '    }\n', '    \n', '    /// @notice insures that area coordinates are within 100x100 field and \n', '    ///  from-coordinates >= to-coordinates\n', '    /// @dev function is used instead of modifier as modifier \n', '    ///  required too much stack for placeImage and rentBlocks\n', '    function isLegalCoordinates(\n', '        uint8 _fromX, \n', '        uint8 _fromY, \n', '        uint8 _toX, \n', '        uint8 _toY\n', '    )    \n', '        private \n', '        pure \n', '        returns (bool) \n', '    {\n', '        return ((_fromX >= 1) && (_fromY >=1)  && (_toX <= 100) && (_toY <= 100) \n', '            && (_fromX <= _toX) && (_fromY <= _toY));\n', '    }\n', '}\n', '\n', '// File: contracts/MehModule.sol\n', '\n', '/// @title MehModule: Base contract for MEH modules (Market, Rentals and Ads contracts). Provides\n', '///  communication with MEH contract. \n', 'contract MehModule is Ownable, Pausable, Destructible, HasNoEther {\n', '    using SafeMath for uint256;\n', '\n', '    // Main MEH contract\n', '    MEH public meh;\n', '\n', '    /// @dev Initializes a module, pairs with MEH contract.\n', '    /// @param _mehAddress address of the main Million Ether Homepage contract\n', '    constructor(address _mehAddress) public {\n', '        adminSetMeh(_mehAddress);\n', '    }\n', '    \n', '    /// @dev Throws if called by any address other than the MEH contract.\n', '    modifier onlyMeh() {\n', '        require(msg.sender == address(meh));\n', '        _;\n', '    }\n', '\n', '    /// @dev Pairs a module with MEH main contract.\n', '    function adminSetMeh(address _address) internal onlyOwner {\n', '        MEH candidateContract = MEH(_address);\n', '        require(candidateContract.isMEH());\n', '        meh = candidateContract;\n', '    }\n', '\n', '    /// @dev Makes an internal transaction in the MEH contract.\n', '    function transferFunds(address _payer, address _recipient, uint _amount) internal {\n', '        return meh.operatorTransferFunds(_payer, _recipient, _amount);\n', '    }\n', '\n', '    /// @dev Check if a token exists.\n', '    function exists(uint16 _blockId) internal view  returns (bool) {\n', '        return meh.exists(_blockId);\n', '    }\n', '\n', '    /// @dev Querries an owner of a block id (ERC721 token).\n', '    function ownerOf(uint16 _blockId) internal view returns (address) {\n', '        return meh.ownerOf(_blockId);\n', '    }\n', '}\n', '\n', '// File: contracts/Rentals.sol\n', '\n', '// @title Rentals: Pluggable module for MEH contract responsible for rentout-rent operations.\n', '// @dev this contract is unaware of xy block coordinates - ids only (ids are ERC721 tokens)\n', 'contract Rentals is MehModule {\n', '    \n', '    // For MEH contract to be sure it plugged the right module in\n', '    bool public isRentals = true;\n', '\n', '    // Minimum rent period and a unit to measure rent lenght\n', '    uint public rentPeriod = 1 days;\n', '    // Maximum rent period (can be adjusted by admin)\n', '    uint public maxRentPeriod = 90;  // can be changed in settings \n', '\n', '    // Rent deal struct. A 10x10 pixel block can have only one rent deal.\n', '    struct RentDeal {\n', '        address renter;  // block renter\n', '        uint rentedFrom;  // time when rent started\n', '        uint numberOfPeriods;  //periods available\n', '    }\n', '    mapping(uint16 => RentDeal) public blockIdToRentDeal;\n', '\n', '    // Rent is allowed if price is > 0\n', '    mapping(uint16 => uint) public blockIdToRentPrice;\n', '\n', '    // Keeps track of rentout-rent operations\n', '    uint public numRentStatuses = 0;\n', '\n', '// ** INITIALIZE ** //\n', '\n', '    /// @dev Initialize Rentals contract.\n', '    /// @param _mehAddress address of the main Million Ether Homepage contract\n', '    constructor(address _mehAddress) MehModule(_mehAddress) public {}\n', '\n', '// ** RENT AOUT BLOCKS ** //\n', '    \n', '    /// @dev Rent out a list of blocks referenced by block ids. Set rent price per period in wei.\n', '    function rentOutBlocks(address _landlord, uint _rentPricePerPeriodWei, uint16[] _blockList) \n', '        external\n', '        onlyMeh\n', '        whenNotPaused\n', '        returns (uint)\n', '    {   \n', '        for (uint i = 0; i < _blockList.length; i++) {\n', '            require(_landlord == ownerOf(_blockList[i]));\n', '            rentOutBlock(_blockList[i], _rentPricePerPeriodWei);\n', '        }\n', '        numRentStatuses++;\n', '        return numRentStatuses;\n', '    }\n', '\n', '    /// @dev Set rent price for a block. Independent on rent deal. Does not affect current \n', '    ///  rent deal.\n', '    function rentOutBlock(uint16 _blockId, uint _rentPricePerPeriodWei) \n', '        internal\n', '    {   \n', '        blockIdToRentPrice[_blockId] = _rentPricePerPeriodWei;\n', '    }\n', '\n', '// ** RENT BLOCKS ** //\n', '    \n', '    /// @dev Rent a list of blocks referenced by block ids for a number of periods.\n', '    function rentBlocks(address _renter, uint _numberOfPeriods, uint16[] _blockList) \n', '        external\n', '        onlyMeh\n', '        whenNotPaused\n', '        returns (uint)\n', '    {   \n', '        /// check user input (not in the MEH contract to add future flexibility)\n', '        require(_numberOfPeriods > 0);\n', '\n', '        for (uint i = 0; i < _blockList.length; i++) {\n', '            rentBlock(_renter, _blockList[i], _numberOfPeriods);\n', '        }\n', '        numRentStatuses++;\n', '        return numRentStatuses;\n', '    }\n', '\n', '    /// @dev Rent a block by id for a number of periods. \n', '    function rentBlock (address _renter, uint16 _blockId, uint _numberOfPeriods)\n', '        internal\n', '    {   \n', '        // check input\n', '        require(maxRentPeriod >= _numberOfPeriods);\n', '        address landlord = ownerOf(_blockId);\n', '        require(_renter != landlord);\n', '\n', '        // throws if not for rent (if rent price == 0)\n', '        require(isForRent(_blockId));\n', '        // get price\n', '        uint totalRent = getRentPrice(_blockId).mul(_numberOfPeriods);  // overflow safe\n', '        \n', '        transferFunds(_renter, landlord, totalRent);\n', '        createRentDeal(_blockId, _renter, now, _numberOfPeriods);\n', '    }\n', '\n', '    /// @dev Checks if block is for rent.\n', '    function isForRent(uint16 _blockId) public view returns (bool) {\n', '        return (blockIdToRentPrice[_blockId] > 0);\n', '    }\n', '\n', "    /// @dev Checks if block rented and the rent hasn't expired.\n", '    function isRented(uint16 _blockId) public view returns (bool) {\n', '        RentDeal memory deal = blockIdToRentDeal[_blockId];\n', '        // prevents overflow if unlimited num of periods is set \n', '        uint rentedTill = \n', '            deal.numberOfPeriods.mul(rentPeriod).add(deal.rentedFrom);\n', '        return (rentedTill > now);\n', '    }\n', '\n', '    /// @dev Gets rent price for block. Throws if not for rent or if \n', '    ///  current rent is active.\n', '    function getRentPrice(uint16 _blockId) internal view returns (uint) {\n', '        require(!(isRented(_blockId)));\n', '        return blockIdToRentPrice[_blockId];\n', '    }\n', '\n', '    /// @dev Gets renter of a block. Throws if not rented.\n', '    function renterOf(uint16 _blockId) public view returns (address) {\n', '        require(isRented(_blockId));\n', '        return blockIdToRentDeal[_blockId].renter;\n', '    }\n', '\n', '    /// @dev Creates new rent deal.\n', '    function createRentDeal(\n', '        uint16 _blockId, \n', '        address _renter, \n', '        uint _rentedFrom, \n', '        uint _numberOfPeriods\n', '    ) \n', '        private \n', '    {\n', '        blockIdToRentDeal[_blockId].renter = _renter;\n', '        blockIdToRentDeal[_blockId].rentedFrom = _rentedFrom;\n', '        blockIdToRentDeal[_blockId].numberOfPeriods = _numberOfPeriods;\n', '    }\n', '\n', '// ** RENT PRICE ** //\n', '    \n', '    /// @dev Calculates rent price for a list of blocks. Throws if at least one block\n', '    ///  is not available for rent.\n', '    function blocksRentPrice(uint _numberOfPeriods, uint16[] _blockList) \n', '        external\n', '        view\n', '        returns (uint)\n', '    {   \n', '        uint totalPrice = 0;\n', '        for (uint i = 0; i < _blockList.length; i++) {\n', '            // overflow safe (rentPrice is arbitary)\n', '            totalPrice = getRentPrice(_blockList[i]).mul(_numberOfPeriods).add(totalPrice);\n', '        }\n', '        return totalPrice;\n', '    }\n', '\n', '// ** ADMIN ** //\n', '    \n', '    /// @dev Adjusts max rent period (only contract owner)\n', '    function adminSetMaxRentPeriod(uint newMaxRentPeriod) external onlyOwner {\n', '        require (newMaxRentPeriod > 0);\n', '        maxRentPeriod = newMaxRentPeriod;\n', '    }\n', '}\n', '\n', '// File: contracts/Ads.sol\n', '\n', '// @title Ads: Pluggable module for MEH contract responsible publishing ads.\n', 'contract Ads is MehModule {\n', '    \n', '    // For MEH contract to be sure it plugged the right module in\n', '    bool public isAds = true;\n', '\n', '    // Keeps track of ads ids. Initial state represents the last image id of the previous \n', '    // version of the million ether homepage. See Market contract for more details. \n', '    uint public numImages = 69;\n', '\n', '    // Needs rentals contract to get block rent status\n', '    RentalsInterface public rentalsContract;\n', '   \n', '// ** INITIALIZE ** //\n', '    \n', '    /// @dev Initialize Ads contract.\n', '    /// @param _mehAddress address of the main Million Ether Homepage contract\n', '    constructor(address _mehAddress) MehModule(_mehAddress) public {}\n', '\n', '// ** PLACE IMAGES ** //\n', '\n', '    /// @dev Places new ad to user owned or rented list of blocks. Returns new image id on success,\n', '    ///  throws if user is not authorized to advertise (neither an owner nor renter). \n', '    function advertiseOnBlocks(\n', '        address _advertiser, \n', '        uint16[] _blockList,\n', '        string, \n', '        string,\n', '        string\n', '    ) \n', '        external\n', '        onlyMeh\n', '        whenNotPaused\n', '        returns (uint)\n', '    {   \n', '        require(canAdvertiseOnBlocks(_advertiser, _blockList));\n', '        numImages++;\n', '        return numImages;\n', '    }\n', '\n', '    /// @dev Checks if user is authorized to advertise on all blocks in list (is an owner or renter).\n', '    function canAdvertiseOnBlocks(\n', '        address _advertiser, \n', '        uint16[] _blockList\n', '    ) \n', '        public\n', '        view\n', '        returns (bool)\n', '    {   \n', '        for (uint i = 0; i < _blockList.length; i++) {\n', '            require(canAdvertiseOnBlock(_advertiser, _blockList[i]));\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /// @dev Checks if user is authorized to advertise on a block (rents or owns a block).\n', '    function canAdvertiseOnBlock(address _advertiser, uint16 blockId) \n', '        internal \n', '        view\n', '        returns (bool)\n', '    {\n', '        if (meh.rentals().isRented(blockId)) {\n', '            return(isRenter(_advertiser, blockId));\n', '        } else {\n', '            return(isBlockOwner(_advertiser, blockId));\n', '        }\n', '    }\n', '\n', '    /// @dev Checks if user owns a block (through main MEH contract)\n', '    function isBlockOwner(address _advertiser, uint16 _blockId)\n', '        private \n', '        view \n', '        returns (bool) \n', '    {\n', '        return (_advertiser == ownerOf(_blockId));\n', '    }\n', '\n', '    /// @dev Checks if user rents a block (through Rentals contract)\n', '    function isRenter(address _advertiser, uint16 _blockId)\n', '        private \n', '        view \n', '        returns (bool) \n', '    {\n', '        return (_advertiser == meh.rentals().renterOf(_blockId));\n', '    }\n', '}']