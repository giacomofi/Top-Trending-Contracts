['/*\n', '\n', '  Copyright 2018 Ethfinex Inc\n', '\n', '  This is a derivative work based on software developed by ZeroEx Intl\n', '  This and the original are licensed under Apache License, Version 2.0\n', '\n', '  Original attribution:\n', '\n', '  Copyright 2017 ZeroEx Intl.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.4.19;\n', '\n', 'interface Token {\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint _value) public returns (bool);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint _value) public returns (bool);\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public view returns (uint);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public view returns (uint);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value); // solhint-disable-line\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '\n', '//solhint-disable-next-line\n', '/// @title TokenTransferProxy - Transfers tokens on behalf of exchange\n', '/// @author Ahmed Ali <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="77361f1a121337151e03111e19120f5914181a">[email&#160;protected]</a>>\n', 'contract TokenTransferProxy {\n', '\n', '    modifier onlyExchange {\n', '        require(msg.sender == exchangeAddress);\n', '        _;\n', '    }\n', '\n', '    address public exchangeAddress;\n', '\n', '\n', '    event LogAuthorizedAddressAdded(address indexed target, address indexed caller);\n', '\n', '    function TokenTransferProxy() public {\n', '        setExchange(msg.sender);\n', '    }\n', '    /*\n', '     * Public functions\n', '     */\n', '\n', '    /// @dev Calls into ERC20 Token contract, invoking transferFrom.\n', '    /// @param token Address of token to transfer.\n', '    /// @param from Address to transfer token from.\n', '    /// @param to Address to transfer token to.\n', '    /// @param value Amount of token to transfer.\n', '    /// @return Success of transfer.\n', '    function transferFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint value)\n', '        public\n', '        onlyExchange\n', '        returns (bool)\n', '    {\n', '        return Token(token).transferFrom(from, to, value);\n', '    }\n', '\n', '    /// @dev Used to set exchange address\n', '    /// @param _exchange the address of the exchange\n', '    function setExchange(address _exchange) internal {\n', '        require(exchangeAddress == address(0));\n', '        exchangeAddress = _exchange;\n', '    }\n', '}']