['pragma solidity ^0.4.23;\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    function withdrawAll() public onlyOwner{\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '    function withdrawPart(address _to,uint256 _percent) public onlyOwner{\n', '        require(_percent>0&&_percent<=100);\n', '        require(_to != address(0));\n', '        uint256 _amount = address(this).balance - address(this).balance*(100 - _percent)/100;\n', '        if (_amount>0){\n', '            _to.transfer(_amount);\n', '        }\n', '    }\n', '}\n', 'contract Pausable is Ownable {\n', '\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function pause() public onlyOwner whenNotPaused returns(bool) {\n', '        paused = true;\n', '        return true;\n', '    }\n', '\n', '    function unpause() public onlyOwner whenPaused returns(bool) {\n', '        paused = false;\n', '        return true;\n', '    }\n', '\n', '}\n', 'contract WWC is Pausable {\n', '    string[33] public teams = [\n', '        "",\n', '        "Egypt",              // 1\n', '        "Morocco",            // 2\n', '        "Nigeria",            // 3\n', '        "Senegal",            // 4\n', '        "Tunisia",            // 5\n', '        "Australia",          // 6\n', '        "IR Iran",            // 7\n', '        "Japan",              // 8\n', '        "Korea Republic",     // 9\n', '        "Saudi Arabia",       // 10\n', '        "Belgium",            // 11\n', '        "Croatia",            // 12\n', '        "Denmark",            // 13\n', '        "England",            // 14\n', '        "France",             // 15\n', '        "Germany",            // 16\n', '        "Iceland",            // 17\n', '        "Poland",             // 18\n', '        "Portugal",           // 19\n', '        "Russia",             // 20\n', '        "Serbia",             // 21\n', '        "Spain",              // 22\n', '        "Sweden",             // 23\n', '        "Switzerland",        // 24\n', '        "Costa Rica",         // 25\n', '        "Mexico",             // 26\n', '        "Panama",             // 27\n', '        "Argentina",          // 28\n', '        "Brazil",             // 29\n', '        "Colombia",           // 30\n', '        "Peru",               // 31\n', '        "Uruguay"             // 32\n', '    ];\n', '}\n', '\n', 'contract Champion is WWC {\n', '    event VoteSuccessful(address user,uint256 team, uint256 amount);\n', '    \n', '    using SafeMath for uint256;\n', '    struct Vote {\n', '        mapping(address => uint256) amounts;\n', '        uint256 totalAmount;\n', '        address[] users;\n', '        mapping(address => uint256) weightedAmounts;\n', '        uint256 weightedTotalAmount;\n', '    }\n', '    uint256 public pool;\n', '    Vote[33] votes;\n', '    uint256 public voteCut = 5;\n', '    uint256 public poolCut = 30;\n', '    \n', '    uint256 public teamWon;\n', '    uint256 public voteStopped;\n', '    \n', '    uint256 public minVote = 0.05 ether;\n', '    uint256 public voteWeight = 4;\n', '    \n', '    mapping(address=>uint256) public alreadyWithdraw;\n', '\n', '    modifier validTeam(uint256 _teamno) {\n', '        require(_teamno > 0 && _teamno <= 32);\n', '        _;\n', '    }\n', '\n', '    function setVoteWeight(uint256 _w) public onlyOwner{\n', '        require(_w>0&& _w<voteWeight);\n', '        voteWeight = _w;\n', '    }\n', '    \n', '    function setMinVote(uint256 _min) public onlyOwner{\n', '        require(_min>=0.01 ether);\n', '        minVote = _min;\n', '    }\n', '    function setVoteCut(uint256 _cut) public onlyOwner{\n', '        require(_cut>=0&&_cut<=100);\n', '        voteCut = _cut;\n', '    }\n', '    \n', '    function setPoolCut(uint256 _cut) public onlyOwner{\n', '        require(_cut>=0&&_cut<=100);\n', '        poolCut = _cut;\n', '    }\n', '    function getVoteOf(uint256 _team) validTeam(_team) public view returns(\n', '        uint256 totalUsers,\n', '        uint256 totalAmount,\n', '        uint256 meAmount,\n', '        uint256 meWeightedAmount\n', '    ) {\n', '        Vote storage _v = votes[_team];\n', '        totalAmount = _v.totalAmount;\n', '        totalUsers = _v.users.length;\n', '        meAmount = _v.amounts[msg.sender];\n', '        meWeightedAmount = _v.weightedAmounts[msg.sender];\n', '    }\n', '\n', '    function voteFor(uint256 _team) validTeam(_team) public payable whenNotPaused {\n', '        require(msg.value >= minVote);\n', '        require(voteStopped == 0);\n', '        userVoteFor(msg.sender, _team, msg.value);\n', '    }\n', '\n', '    function userVoteFor(address _user, uint256 _team, uint256 _amount) internal{\n', '        Vote storage _v = votes[_team];\n', '        uint256 voteVal = _amount.sub(_amount.mul(voteCut).div(100));\n', '        if (voteVal<_amount){\n', '            owner.transfer(_amount.sub(voteVal));\n', '        }\n', '        if (_v.amounts[_user] == 0) {\n', '            _v.users.push(_user);\n', '        }\n', '        pool = pool.add(voteVal);\n', '        _v.totalAmount = _v.totalAmount.add(voteVal);\n', '        _v.amounts[_user] = _v.amounts[_user].add(voteVal);\n', '        _v.weightedTotalAmount = _v.weightedTotalAmount.add(voteVal.mul(voteWeight));\n', '        _v.weightedAmounts[_user] = _v.weightedAmounts[_user].add(voteVal.mul(voteWeight)); \n', '        emit VoteSuccessful(_user,_team,_amount);\n', '    }\n', '\n', '    function stopVote()  public onlyOwner {\n', '        require(voteStopped == 0);\n', '        voteStopped = 1;\n', '    }\n', '    \n', '    function setWonTeam(uint256 _team) validTeam(_team) public onlyOwner{\n', '        require(voteStopped == 1);\n', '        teamWon = _team;\n', '    }\n', '    \n', '    function myBonus() public view returns(uint256 _bonus,bool _isTaken){\n', '        if (teamWon==0){\n', '            return (0,false);\n', '        }\n', '        _bonus = bonusAmount(teamWon,msg.sender);\n', '        _isTaken = alreadyWithdraw[msg.sender] == 1;\n', '    }\n', '\n', '    function bonusAmount(uint256 _team, address _who) internal view returns(uint256) {\n', '        Vote storage _v = votes[_team];\n', '        if (_v.weightedTotalAmount == 0){\n', '            return 0;\n', '        }\n', '        uint256 _poolAmount = pool.mul(100-poolCut).div(100);\n', '        uint256 _amount = _v.weightedAmounts[_who].mul(_poolAmount).div(_v.weightedTotalAmount);\n', '        return _amount;\n', '    }\n', '    \n', '    function withdrawBonus() public whenNotPaused{\n', '        require(teamWon>0);\n', '        require(alreadyWithdraw[msg.sender]==0);\n', '        alreadyWithdraw[msg.sender] = 1;\n', '        uint256 _amount = bonusAmount(teamWon,msg.sender);\n', '        require(_amount<=address(this).balance);\n', '        if(_amount>0){\n', '            msg.sender.transfer(_amount);\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    function withdrawAll() public onlyOwner{\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '    function withdrawPart(address _to,uint256 _percent) public onlyOwner{\n', '        require(_percent>0&&_percent<=100);\n', '        require(_to != address(0));\n', '        uint256 _amount = address(this).balance - address(this).balance*(100 - _percent)/100;\n', '        if (_amount>0){\n', '            _to.transfer(_amount);\n', '        }\n', '    }\n', '}\n', 'contract Pausable is Ownable {\n', '\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function pause() public onlyOwner whenNotPaused returns(bool) {\n', '        paused = true;\n', '        return true;\n', '    }\n', '\n', '    function unpause() public onlyOwner whenPaused returns(bool) {\n', '        paused = false;\n', '        return true;\n', '    }\n', '\n', '}\n', 'contract WWC is Pausable {\n', '    string[33] public teams = [\n', '        "",\n', '        "Egypt",              // 1\n', '        "Morocco",            // 2\n', '        "Nigeria",            // 3\n', '        "Senegal",            // 4\n', '        "Tunisia",            // 5\n', '        "Australia",          // 6\n', '        "IR Iran",            // 7\n', '        "Japan",              // 8\n', '        "Korea Republic",     // 9\n', '        "Saudi Arabia",       // 10\n', '        "Belgium",            // 11\n', '        "Croatia",            // 12\n', '        "Denmark",            // 13\n', '        "England",            // 14\n', '        "France",             // 15\n', '        "Germany",            // 16\n', '        "Iceland",            // 17\n', '        "Poland",             // 18\n', '        "Portugal",           // 19\n', '        "Russia",             // 20\n', '        "Serbia",             // 21\n', '        "Spain",              // 22\n', '        "Sweden",             // 23\n', '        "Switzerland",        // 24\n', '        "Costa Rica",         // 25\n', '        "Mexico",             // 26\n', '        "Panama",             // 27\n', '        "Argentina",          // 28\n', '        "Brazil",             // 29\n', '        "Colombia",           // 30\n', '        "Peru",               // 31\n', '        "Uruguay"             // 32\n', '    ];\n', '}\n', '\n', 'contract Champion is WWC {\n', '    event VoteSuccessful(address user,uint256 team, uint256 amount);\n', '    \n', '    using SafeMath for uint256;\n', '    struct Vote {\n', '        mapping(address => uint256) amounts;\n', '        uint256 totalAmount;\n', '        address[] users;\n', '        mapping(address => uint256) weightedAmounts;\n', '        uint256 weightedTotalAmount;\n', '    }\n', '    uint256 public pool;\n', '    Vote[33] votes;\n', '    uint256 public voteCut = 5;\n', '    uint256 public poolCut = 30;\n', '    \n', '    uint256 public teamWon;\n', '    uint256 public voteStopped;\n', '    \n', '    uint256 public minVote = 0.05 ether;\n', '    uint256 public voteWeight = 4;\n', '    \n', '    mapping(address=>uint256) public alreadyWithdraw;\n', '\n', '    modifier validTeam(uint256 _teamno) {\n', '        require(_teamno > 0 && _teamno <= 32);\n', '        _;\n', '    }\n', '\n', '    function setVoteWeight(uint256 _w) public onlyOwner{\n', '        require(_w>0&& _w<voteWeight);\n', '        voteWeight = _w;\n', '    }\n', '    \n', '    function setMinVote(uint256 _min) public onlyOwner{\n', '        require(_min>=0.01 ether);\n', '        minVote = _min;\n', '    }\n', '    function setVoteCut(uint256 _cut) public onlyOwner{\n', '        require(_cut>=0&&_cut<=100);\n', '        voteCut = _cut;\n', '    }\n', '    \n', '    function setPoolCut(uint256 _cut) public onlyOwner{\n', '        require(_cut>=0&&_cut<=100);\n', '        poolCut = _cut;\n', '    }\n', '    function getVoteOf(uint256 _team) validTeam(_team) public view returns(\n', '        uint256 totalUsers,\n', '        uint256 totalAmount,\n', '        uint256 meAmount,\n', '        uint256 meWeightedAmount\n', '    ) {\n', '        Vote storage _v = votes[_team];\n', '        totalAmount = _v.totalAmount;\n', '        totalUsers = _v.users.length;\n', '        meAmount = _v.amounts[msg.sender];\n', '        meWeightedAmount = _v.weightedAmounts[msg.sender];\n', '    }\n', '\n', '    function voteFor(uint256 _team) validTeam(_team) public payable whenNotPaused {\n', '        require(msg.value >= minVote);\n', '        require(voteStopped == 0);\n', '        userVoteFor(msg.sender, _team, msg.value);\n', '    }\n', '\n', '    function userVoteFor(address _user, uint256 _team, uint256 _amount) internal{\n', '        Vote storage _v = votes[_team];\n', '        uint256 voteVal = _amount.sub(_amount.mul(voteCut).div(100));\n', '        if (voteVal<_amount){\n', '            owner.transfer(_amount.sub(voteVal));\n', '        }\n', '        if (_v.amounts[_user] == 0) {\n', '            _v.users.push(_user);\n', '        }\n', '        pool = pool.add(voteVal);\n', '        _v.totalAmount = _v.totalAmount.add(voteVal);\n', '        _v.amounts[_user] = _v.amounts[_user].add(voteVal);\n', '        _v.weightedTotalAmount = _v.weightedTotalAmount.add(voteVal.mul(voteWeight));\n', '        _v.weightedAmounts[_user] = _v.weightedAmounts[_user].add(voteVal.mul(voteWeight)); \n', '        emit VoteSuccessful(_user,_team,_amount);\n', '    }\n', '\n', '    function stopVote()  public onlyOwner {\n', '        require(voteStopped == 0);\n', '        voteStopped = 1;\n', '    }\n', '    \n', '    function setWonTeam(uint256 _team) validTeam(_team) public onlyOwner{\n', '        require(voteStopped == 1);\n', '        teamWon = _team;\n', '    }\n', '    \n', '    function myBonus() public view returns(uint256 _bonus,bool _isTaken){\n', '        if (teamWon==0){\n', '            return (0,false);\n', '        }\n', '        _bonus = bonusAmount(teamWon,msg.sender);\n', '        _isTaken = alreadyWithdraw[msg.sender] == 1;\n', '    }\n', '\n', '    function bonusAmount(uint256 _team, address _who) internal view returns(uint256) {\n', '        Vote storage _v = votes[_team];\n', '        if (_v.weightedTotalAmount == 0){\n', '            return 0;\n', '        }\n', '        uint256 _poolAmount = pool.mul(100-poolCut).div(100);\n', '        uint256 _amount = _v.weightedAmounts[_who].mul(_poolAmount).div(_v.weightedTotalAmount);\n', '        return _amount;\n', '    }\n', '    \n', '    function withdrawBonus() public whenNotPaused{\n', '        require(teamWon>0);\n', '        require(alreadyWithdraw[msg.sender]==0);\n', '        alreadyWithdraw[msg.sender] = 1;\n', '        uint256 _amount = bonusAmount(teamWon,msg.sender);\n', '        require(_amount<=address(this).balance);\n', '        if(_amount>0){\n', '            msg.sender.transfer(_amount);\n', '        }\n', '    }\n', '}']
