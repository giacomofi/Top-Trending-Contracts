['pragma solidity ^0.4.24;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract Distribute is Ownable {\n', '    using SafeERC20 for ERC20;\n', '\n', '    event TokenReleased(address indexed buyer, uint256 amount);\n', '\n', '    ERC20 public Token;\n', '    mapping (address => bool) released;\n', '\n', '    constructor(address token) public {\n', '        require(token != address(0));\n', '        Token = ERC20(token);\n', '    }\n', '\n', '    function release(address beneficiary, uint256 amount)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(!released[beneficiary]);\n', '        Token.safeTransfer(beneficiary, amount);\n', '        released[beneficiary] = true;\n', '        emit TokenReleased(beneficiary, amount);\n', '    }\n', '\n', '    function releaseMany(address[] beneficiaries, uint256[] amounts)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(beneficiaries.length == amounts.length);\n', '        for (uint256 i = 0; i < beneficiaries.length; i++) {\n', '            release(beneficiaries[i], amounts[i]);\n', '        }\n', '    }\n', '\n', '    function withdraw()\n', '        public\n', '        onlyOwner\n', '    {\n', '        Token.safeTransfer(owner, Token.balanceOf(address(this)));\n', '    }\n', '\n', '    function close()\n', '        external\n', '        onlyOwner\n', '    {\n', '        withdraw();\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}']