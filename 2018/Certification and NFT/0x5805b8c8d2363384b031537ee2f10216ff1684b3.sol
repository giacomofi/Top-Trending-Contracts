['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/common/Ownable.sol\n', '\n', '/**\n', ' * Ownable contract from Open zepplin\n', ' * https://github.com/OpenZeppelin/openzeppelin-solidity/\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/common/ReentrancyGuard.sol\n', '\n', '/**\n', ' * Reentrancy guard from open Zepplin :\n', ' * https://github.com/OpenZeppelin/openzeppelin-solidity/\n', ' *\n', ' * @title Helps contracts guard agains reentrancy attacks.\n', ' * @author Remco Bloemen <remco@2Ï€.com>\n', ' * @notice If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private reentrancyLock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!reentrancyLock);\n', '    reentrancyLock = true;\n', '    _;\n', '    reentrancyLock = false;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/interfaces/ERC20Interface.sol\n', '\n', 'interface ERC20 {\n', '    function totalSupply() public view returns (uint supply);\n', '    function balanceOf(address _owner) public view returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining);\n', '    function decimals() public view returns(uint digits);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '//TODO : Flattener does not like aliased imports. Not needed in actual codebase.\n', '\n', 'interface IERC20Token {\n', '    function totalSupply() public view returns (uint supply);\n', '    function balanceOf(address _owner) public view returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining);\n', '    function decimals() public view returns(uint digits);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '\n', '// File: contracts/interfaces/IBancorNetwork.sol\n', '\n', 'contract IBancorNetwork {\n', '    function convert(IERC20Token[] _path, uint256 _amount, uint256 _minReturn) public payable returns (uint256);\n', '    function convertFor(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, address _for) public payable returns (uint256);\n', '    function convertForPrioritized2(\n', '        IERC20Token[] _path,\n', '        uint256 _amount,\n', '        uint256 _minReturn,\n', '        address _for,\n', '        uint256 _block,\n', '        uint8 _v,\n', '        bytes32 _r,\n', '        bytes32 _s)\n', '        public payable returns (uint256);\n', '\n', '    // deprecated, backward compatibility\n', '    function convertForPrioritized(\n', '        IERC20Token[] _path,\n', '        uint256 _amount,\n', '        uint256 _minReturn,\n', '        address _for,\n', '        uint256 _block,\n', '        uint256 _nonce,\n', '        uint8 _v,\n', '        bytes32 _r,\n', '        bytes32 _s)\n', '        public payable returns (uint256);\n', '}\n', '\n', '/*\n', '   Bancor Contract Registry interface\n', '*/\n', 'contract IContractRegistry {\n', '    function getAddress(bytes32 _contractName) public view returns (address);\n', '}\n', '\n', '// File: contracts/TokenPaymentBancor.sol\n', '\n', '/*\n', ' * @title Token Payment using Bancor API v0.1\n', ' * @author Haresh G\n', ' * @dev This contract is used to convert ETH to an ERC20 token on the Bancor network.\n', ' * @notice It does not support ERC20 to ERC20 transfer.\n', ' */\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract IndTokenPayment is Ownable, ReentrancyGuard {  \n', '    IERC20Token[] public path;    \n', '    address public destinationWallet;       \n', '    uint256 public minConversionRate;\n', '    IContractRegistry public bancorRegistry;\n', '    bytes32 public constant BANCOR_NETWORK = "BancorNetwork";\n', '    \n', '    event conversionSucceded(address from,uint256 fromTokenVal,address dest,uint256 destTokenVal);    \n', '    \n', '    constructor(IERC20Token[] _path,\n', '                address destWalletAddr,\n', '                address bancorRegistryAddr,\n', '                uint256 minConvRate){\n', '        path = _path;\n', '        bancorRegistry = IContractRegistry(bancorRegistryAddr);\n', '        destinationWallet = destWalletAddr;         \n', '        minConversionRate = minConvRate;\n', '    }\n', '\n', '    function setConversionPath(IERC20Token[] _path) public onlyOwner {\n', '        path = _path;\n', '    }\n', '    \n', '    function setBancorRegistry(address bancorRegistryAddr) public onlyOwner {\n', '        bancorRegistry = IContractRegistry(bancorRegistryAddr);\n', '    }\n', '\n', '    function setMinConversionRate(uint256 minConvRate) public onlyOwner {\n', '        minConversionRate = minConvRate;\n', '    }    \n', '\n', '    function setDestinationWallet(address destWalletAddr) public onlyOwner {\n', '        destinationWallet = destWalletAddr;\n', '    }    \n', '    \n', '    function convertToInd() internal nonReentrant {\n', '        assert(bancorRegistry.getAddress(BANCOR_NETWORK) != address(0));\n', '        IBancorNetwork bancorNetwork = IBancorNetwork(bancorRegistry.getAddress(BANCOR_NETWORK));   \n', '        //TODO : Compute minReturn\n', '        uint256 minReturn =0;\n', '        uint256 convTokens =  bancorNetwork.convertFor.value(msg.value)(path,msg.value,minReturn,destinationWallet);        \n', '        assert(convTokens > 0);\n', '        emit conversionSucceded(msg.sender,msg.value,destinationWallet,convTokens);                                                                    \n', '    }\n', '\n', '    //If accidentally tokens are transferred to this\n', '    //contract. They can be withdrawn by the followin interface.\n', '    function withdrawToken(IERC20Token anyToken) public onlyOwner nonReentrant returns(bool){\n', '        if( anyToken != address(0x0) ) {\n', '            assert(anyToken.transfer(destinationWallet, anyToken.balanceOf(this)));\n', '        }\n', '        return true;\n', '    }\n', '\n', '    //ETH cannot get locked in this contract. If it does, this can be used to withdraw\n', '    //the locked ether.\n', '    function withdrawEther() public onlyOwner nonReentrant returns(bool){\n', '        if(address(this).balance > 0){\n', '            destinationWallet.transfer(address(this).balance);\n', '        }        \n', '        return true;\n', '    }\n', ' \n', '    function () public payable {\n', '        //Bancor contract can send the transfer back in case of error, which goes back into this\n', '        //function ,convertToInd is non-reentrant.\n', '        convertToInd();\n', '    }\n', '\n', '    /*\n', '    * Helper functions to debug contract. Not to be deployed\n', '    *\n', '    */\n', '\n', '    function getBancorContractAddress() public returns(address) {\n', '        return bancorRegistry.getAddress(BANCOR_NETWORK);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/common/Ownable.sol\n', '\n', '/**\n', ' * Ownable contract from Open zepplin\n', ' * https://github.com/OpenZeppelin/openzeppelin-solidity/\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/common/ReentrancyGuard.sol\n', '\n', '/**\n', ' * Reentrancy guard from open Zepplin :\n', ' * https://github.com/OpenZeppelin/openzeppelin-solidity/\n', ' *\n', ' * @title Helps contracts guard agains reentrancy attacks.\n', ' * @author Remco Bloemen <remco@2Ï€.com>\n', ' * @notice If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private reentrancyLock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!reentrancyLock);\n', '    reentrancyLock = true;\n', '    _;\n', '    reentrancyLock = false;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/interfaces/ERC20Interface.sol\n', '\n', 'interface ERC20 {\n', '    function totalSupply() public view returns (uint supply);\n', '    function balanceOf(address _owner) public view returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining);\n', '    function decimals() public view returns(uint digits);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '//TODO : Flattener does not like aliased imports. Not needed in actual codebase.\n', '\n', 'interface IERC20Token {\n', '    function totalSupply() public view returns (uint supply);\n', '    function balanceOf(address _owner) public view returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining);\n', '    function decimals() public view returns(uint digits);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '\n', '// File: contracts/interfaces/IBancorNetwork.sol\n', '\n', 'contract IBancorNetwork {\n', '    function convert(IERC20Token[] _path, uint256 _amount, uint256 _minReturn) public payable returns (uint256);\n', '    function convertFor(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, address _for) public payable returns (uint256);\n', '    function convertForPrioritized2(\n', '        IERC20Token[] _path,\n', '        uint256 _amount,\n', '        uint256 _minReturn,\n', '        address _for,\n', '        uint256 _block,\n', '        uint8 _v,\n', '        bytes32 _r,\n', '        bytes32 _s)\n', '        public payable returns (uint256);\n', '\n', '    // deprecated, backward compatibility\n', '    function convertForPrioritized(\n', '        IERC20Token[] _path,\n', '        uint256 _amount,\n', '        uint256 _minReturn,\n', '        address _for,\n', '        uint256 _block,\n', '        uint256 _nonce,\n', '        uint8 _v,\n', '        bytes32 _r,\n', '        bytes32 _s)\n', '        public payable returns (uint256);\n', '}\n', '\n', '/*\n', '   Bancor Contract Registry interface\n', '*/\n', 'contract IContractRegistry {\n', '    function getAddress(bytes32 _contractName) public view returns (address);\n', '}\n', '\n', '// File: contracts/TokenPaymentBancor.sol\n', '\n', '/*\n', ' * @title Token Payment using Bancor API v0.1\n', ' * @author Haresh G\n', ' * @dev This contract is used to convert ETH to an ERC20 token on the Bancor network.\n', ' * @notice It does not support ERC20 to ERC20 transfer.\n', ' */\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract IndTokenPayment is Ownable, ReentrancyGuard {  \n', '    IERC20Token[] public path;    \n', '    address public destinationWallet;       \n', '    uint256 public minConversionRate;\n', '    IContractRegistry public bancorRegistry;\n', '    bytes32 public constant BANCOR_NETWORK = "BancorNetwork";\n', '    \n', '    event conversionSucceded(address from,uint256 fromTokenVal,address dest,uint256 destTokenVal);    \n', '    \n', '    constructor(IERC20Token[] _path,\n', '                address destWalletAddr,\n', '                address bancorRegistryAddr,\n', '                uint256 minConvRate){\n', '        path = _path;\n', '        bancorRegistry = IContractRegistry(bancorRegistryAddr);\n', '        destinationWallet = destWalletAddr;         \n', '        minConversionRate = minConvRate;\n', '    }\n', '\n', '    function setConversionPath(IERC20Token[] _path) public onlyOwner {\n', '        path = _path;\n', '    }\n', '    \n', '    function setBancorRegistry(address bancorRegistryAddr) public onlyOwner {\n', '        bancorRegistry = IContractRegistry(bancorRegistryAddr);\n', '    }\n', '\n', '    function setMinConversionRate(uint256 minConvRate) public onlyOwner {\n', '        minConversionRate = minConvRate;\n', '    }    \n', '\n', '    function setDestinationWallet(address destWalletAddr) public onlyOwner {\n', '        destinationWallet = destWalletAddr;\n', '    }    \n', '    \n', '    function convertToInd() internal nonReentrant {\n', '        assert(bancorRegistry.getAddress(BANCOR_NETWORK) != address(0));\n', '        IBancorNetwork bancorNetwork = IBancorNetwork(bancorRegistry.getAddress(BANCOR_NETWORK));   \n', '        //TODO : Compute minReturn\n', '        uint256 minReturn =0;\n', '        uint256 convTokens =  bancorNetwork.convertFor.value(msg.value)(path,msg.value,minReturn,destinationWallet);        \n', '        assert(convTokens > 0);\n', '        emit conversionSucceded(msg.sender,msg.value,destinationWallet,convTokens);                                                                    \n', '    }\n', '\n', '    //If accidentally tokens are transferred to this\n', '    //contract. They can be withdrawn by the followin interface.\n', '    function withdrawToken(IERC20Token anyToken) public onlyOwner nonReentrant returns(bool){\n', '        if( anyToken != address(0x0) ) {\n', '            assert(anyToken.transfer(destinationWallet, anyToken.balanceOf(this)));\n', '        }\n', '        return true;\n', '    }\n', '\n', '    //ETH cannot get locked in this contract. If it does, this can be used to withdraw\n', '    //the locked ether.\n', '    function withdrawEther() public onlyOwner nonReentrant returns(bool){\n', '        if(address(this).balance > 0){\n', '            destinationWallet.transfer(address(this).balance);\n', '        }        \n', '        return true;\n', '    }\n', ' \n', '    function () public payable {\n', '        //Bancor contract can send the transfer back in case of error, which goes back into this\n', '        //function ,convertToInd is non-reentrant.\n', '        convertToInd();\n', '    }\n', '\n', '    /*\n', '    * Helper functions to debug contract. Not to be deployed\n', '    *\n', '    */\n', '\n', '    function getBancorContractAddress() public returns(address) {\n', '        return bancorRegistry.getAddress(BANCOR_NETWORK);\n', '    }\n', '\n', '}']
