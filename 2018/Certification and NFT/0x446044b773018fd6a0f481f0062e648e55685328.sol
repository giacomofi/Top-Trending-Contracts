['pragma solidity ^0.4.24;\n', '\n', '/*** @title SafeMath\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol */\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'interface ERC20 {\n', '  function transfer (address _beneficiary, uint256 _tokenAmount) external returns (bool);\n', '  function mintFromICO(address _to, uint256 _amount) external  returns(bool);\n', '  function isWhitelisted(address wlCandidate) external returns(bool);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title PreCrowdSale\n', ' * @dev https://github.com/elephant-marketing/*/\n', '\n', 'contract PreSale is Ownable {\n', '\n', '  ERC20 public token;\n', '\n', '  ERC20 public authorize;\n', '\n', '  using SafeMath for uint;\n', '\n', '  address public backEndOperator = msg.sender;\n', '\n', '  address team = 0xe56E60dE6d2649d9Cd0c82cb1f9d00365f07BA92; // 10 % - founders\n', '\n', '  address bounty = 0x5731340239D8105F9F4e436021Ad29D3098AB6f8; // 2 % - bounty\n', '\n', '\n', '  mapping(address => uint256) public investedEther;\n', '\n', '\n', '  uint256 public startPreSale = 1539561600; // Monday, 15 October 2018 г., 0:00:00\n', '\n', '  uint256 public endPreSale = 1542240000; // Thursday, 15 November 2018 г., 0:00:00\n', '\n', '\n', '  uint256 stage1Sale = startPreSale + 2 days; // 0- 2  days\n', '\n', '  uint256 stage2Sale = startPreSale + 10 days; // 3 - 10 days\n', '\n', '  uint256 stage3Sale = startPreSale + 18 days; // 11 - 18  days\n', '\n', '  uint256 stage4Sale = startPreSale + 26 days; // 19 - 26 days\n', '\n', '  uint256 stage5Sale = startPreSale + 31 days; // 27 - 31  days\n', '\n', '  uint256 public weisRaised;\n', '\n', '  uint256 public buyPrice; // 1 USD\n', '\n', '  uint256 public dollarPrice;\n', '\n', '  uint256 public soldTokensPreSale;\n', '\n', '  uint256 public softcapPreSale = 4200000*1e18; // 4,200,000 VIONcoin\n', '\n', '  uint256 public hardCapPreSale = 34200000*1e18; // 34,200,000 VIONcoin\n', '\n', '  event UpdateDollar(uint256 time, uint256 _rate);\n', '\n', '  event Refund(uint256 sum, address investor);\n', '\n', '\n', '\n', '  modifier backEnd() {\n', '    require(msg.sender == backEndOperator || msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  constructor(ERC20 _token,ERC20 _authorize, uint256 usdETH) public {\n', '    token = _token;\n', '    authorize = _authorize;\n', '    dollarPrice = usdETH;\n', '    buyPrice = (1e18/dollarPrice).div(10); // 0.1 usd\n', '  }\n', '\n', '\n', '  function setStartPreSale(uint256 newStartPreSale) public onlyOwner {\n', '    startPreSale = newStartPreSale;\n', '  }\n', '\n', '  function setEndPreSale(uint256 newEndPreSale) public onlyOwner {\n', '    endPreSale = newEndPreSale;\n', '  }\n', '\n', '  function setBackEndAddress(address newBackEndOperator) public onlyOwner {\n', '    backEndOperator = newBackEndOperator;\n', '  }\n', '\n', '  function setBuyPrice(uint256 _dollar) public backEnd {\n', '    dollarPrice = _dollar;\n', '    buyPrice = (1e18/dollarPrice).div(10); // 0.1 usd\n', '    emit UpdateDollar(now, dollarPrice);\n', '  }\n', '\n', '\n', '  /*******************************************************************************\n', '   * Payable&#39;s section */\n', '\n', '  function isPreSale() public constant returns(bool) {\n', '    return now >= startPreSale && now <= endPreSale;\n', '  }\n', '\n', '\n', '  function () public payable {\n', '    require(authorize.isWhitelisted(msg.sender));\n', '    require(isPreSale());\n', '    preSale(msg.sender, msg.value);\n', '    require(soldTokensPreSale<=hardCapPreSale);\n', '    investedEther[msg.sender] = investedEther[msg.sender].add(msg.value);\n', '  }\n', '\n', '\n', '  function preSale(address _investor, uint256 _value) internal {\n', '    uint256 tokens = _value.mul(1e18).div(buyPrice);\n', '    uint256 tokensByDate = tokens.mul(bonusDate()).div(100);\n', '    tokens = tokens.add(tokensByDate);\n', '    token.mintFromICO(_investor, tokens);\n', '    soldTokensPreSale = soldTokensPreSale.add(tokens); // only sold\n', '\n', '    uint256 tokensTeam = tokens.mul(10).div(44); // 20 %\n', '    token.mintFromICO(team, tokensTeam);\n', '\n', '    uint256 tokensBoynty = tokens.mul(3).div(200); // 1.5 %\n', '    token.mintFromICO(bounty, tokensBoynty);\n', '\n', '    weisRaised = weisRaised.add(_value);\n', '  }\n', '\n', '\n', '  function bonusDate() private view returns (uint256){\n', '    if (now > startPreSale && now < stage1Sale) {  // 0 - 2 days preSale\n', '      return 50;\n', '    }\n', '    else if (now > stage1Sale && now < stage2Sale) { // 3 - 10 days preSale\n', '      return 40;\n', '    }\n', '    else if (now > stage2Sale && now < stage3Sale) { // 11 - 18 days preSale\n', '      return 33;\n', '    }\n', '    else if (now > stage3Sale && now < stage4Sale) { // 19 - 26 days preSale\n', '      return 30;\n', '    }\n', '    else if (now > stage4Sale && now < stage5Sale) { // 27 - 31 days preSale\n', '      return 25;\n', '    }\n', '\n', '    else {\n', '      return 0;\n', '    }\n', '  }\n', '\n', '  function mintManual(address receiver, uint256 _tokens) public backEnd {\n', '    token.mintFromICO(receiver, _tokens);\n', '    soldTokensPreSale = soldTokensPreSale.add(_tokens);\n', '\n', '    uint256 tokensTeam = _tokens.mul(10).div(44); // 20 %\n', '    token.mintFromICO(team, tokensTeam);\n', '\n', '    uint256 tokensBoynty = _tokens.mul(3).div(200); // 1.5 %\n', '    token.mintFromICO(bounty, tokensBoynty);\n', '  }\n', '\n', '\n', '  function transferEthFromContract(address _to, uint256 amount) public onlyOwner {\n', '    _to.transfer(amount);\n', '  }\n', '\n', '\n', '  function refundPreSale() public {\n', '    require(soldTokensPreSale < softcapPreSale && now > endPreSale);\n', '    uint256 rate = investedEther[msg.sender];\n', '    require(investedEther[msg.sender] >= 0);\n', '    investedEther[msg.sender] = 0;\n', '    msg.sender.transfer(rate);\n', '    weisRaised = weisRaised.sub(rate);\n', '    emit Refund(rate, msg.sender);\n', '  }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/*** @title SafeMath\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol */\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'interface ERC20 {\n', '  function transfer (address _beneficiary, uint256 _tokenAmount) external returns (bool);\n', '  function mintFromICO(address _to, uint256 _amount) external  returns(bool);\n', '  function isWhitelisted(address wlCandidate) external returns(bool);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title PreCrowdSale\n', ' * @dev https://github.com/elephant-marketing/*/\n', '\n', 'contract PreSale is Ownable {\n', '\n', '  ERC20 public token;\n', '\n', '  ERC20 public authorize;\n', '\n', '  using SafeMath for uint;\n', '\n', '  address public backEndOperator = msg.sender;\n', '\n', '  address team = 0xe56E60dE6d2649d9Cd0c82cb1f9d00365f07BA92; // 10 % - founders\n', '\n', '  address bounty = 0x5731340239D8105F9F4e436021Ad29D3098AB6f8; // 2 % - bounty\n', '\n', '\n', '  mapping(address => uint256) public investedEther;\n', '\n', '\n', '  uint256 public startPreSale = 1539561600; // Monday, 15 October 2018 г., 0:00:00\n', '\n', '  uint256 public endPreSale = 1542240000; // Thursday, 15 November 2018 г., 0:00:00\n', '\n', '\n', '  uint256 stage1Sale = startPreSale + 2 days; // 0- 2  days\n', '\n', '  uint256 stage2Sale = startPreSale + 10 days; // 3 - 10 days\n', '\n', '  uint256 stage3Sale = startPreSale + 18 days; // 11 - 18  days\n', '\n', '  uint256 stage4Sale = startPreSale + 26 days; // 19 - 26 days\n', '\n', '  uint256 stage5Sale = startPreSale + 31 days; // 27 - 31  days\n', '\n', '  uint256 public weisRaised;\n', '\n', '  uint256 public buyPrice; // 1 USD\n', '\n', '  uint256 public dollarPrice;\n', '\n', '  uint256 public soldTokensPreSale;\n', '\n', '  uint256 public softcapPreSale = 4200000*1e18; // 4,200,000 VIONcoin\n', '\n', '  uint256 public hardCapPreSale = 34200000*1e18; // 34,200,000 VIONcoin\n', '\n', '  event UpdateDollar(uint256 time, uint256 _rate);\n', '\n', '  event Refund(uint256 sum, address investor);\n', '\n', '\n', '\n', '  modifier backEnd() {\n', '    require(msg.sender == backEndOperator || msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  constructor(ERC20 _token,ERC20 _authorize, uint256 usdETH) public {\n', '    token = _token;\n', '    authorize = _authorize;\n', '    dollarPrice = usdETH;\n', '    buyPrice = (1e18/dollarPrice).div(10); // 0.1 usd\n', '  }\n', '\n', '\n', '  function setStartPreSale(uint256 newStartPreSale) public onlyOwner {\n', '    startPreSale = newStartPreSale;\n', '  }\n', '\n', '  function setEndPreSale(uint256 newEndPreSale) public onlyOwner {\n', '    endPreSale = newEndPreSale;\n', '  }\n', '\n', '  function setBackEndAddress(address newBackEndOperator) public onlyOwner {\n', '    backEndOperator = newBackEndOperator;\n', '  }\n', '\n', '  function setBuyPrice(uint256 _dollar) public backEnd {\n', '    dollarPrice = _dollar;\n', '    buyPrice = (1e18/dollarPrice).div(10); // 0.1 usd\n', '    emit UpdateDollar(now, dollarPrice);\n', '  }\n', '\n', '\n', '  /*******************************************************************************\n', "   * Payable's section */\n", '\n', '  function isPreSale() public constant returns(bool) {\n', '    return now >= startPreSale && now <= endPreSale;\n', '  }\n', '\n', '\n', '  function () public payable {\n', '    require(authorize.isWhitelisted(msg.sender));\n', '    require(isPreSale());\n', '    preSale(msg.sender, msg.value);\n', '    require(soldTokensPreSale<=hardCapPreSale);\n', '    investedEther[msg.sender] = investedEther[msg.sender].add(msg.value);\n', '  }\n', '\n', '\n', '  function preSale(address _investor, uint256 _value) internal {\n', '    uint256 tokens = _value.mul(1e18).div(buyPrice);\n', '    uint256 tokensByDate = tokens.mul(bonusDate()).div(100);\n', '    tokens = tokens.add(tokensByDate);\n', '    token.mintFromICO(_investor, tokens);\n', '    soldTokensPreSale = soldTokensPreSale.add(tokens); // only sold\n', '\n', '    uint256 tokensTeam = tokens.mul(10).div(44); // 20 %\n', '    token.mintFromICO(team, tokensTeam);\n', '\n', '    uint256 tokensBoynty = tokens.mul(3).div(200); // 1.5 %\n', '    token.mintFromICO(bounty, tokensBoynty);\n', '\n', '    weisRaised = weisRaised.add(_value);\n', '  }\n', '\n', '\n', '  function bonusDate() private view returns (uint256){\n', '    if (now > startPreSale && now < stage1Sale) {  // 0 - 2 days preSale\n', '      return 50;\n', '    }\n', '    else if (now > stage1Sale && now < stage2Sale) { // 3 - 10 days preSale\n', '      return 40;\n', '    }\n', '    else if (now > stage2Sale && now < stage3Sale) { // 11 - 18 days preSale\n', '      return 33;\n', '    }\n', '    else if (now > stage3Sale && now < stage4Sale) { // 19 - 26 days preSale\n', '      return 30;\n', '    }\n', '    else if (now > stage4Sale && now < stage5Sale) { // 27 - 31 days preSale\n', '      return 25;\n', '    }\n', '\n', '    else {\n', '      return 0;\n', '    }\n', '  }\n', '\n', '  function mintManual(address receiver, uint256 _tokens) public backEnd {\n', '    token.mintFromICO(receiver, _tokens);\n', '    soldTokensPreSale = soldTokensPreSale.add(_tokens);\n', '\n', '    uint256 tokensTeam = _tokens.mul(10).div(44); // 20 %\n', '    token.mintFromICO(team, tokensTeam);\n', '\n', '    uint256 tokensBoynty = _tokens.mul(3).div(200); // 1.5 %\n', '    token.mintFromICO(bounty, tokensBoynty);\n', '  }\n', '\n', '\n', '  function transferEthFromContract(address _to, uint256 amount) public onlyOwner {\n', '    _to.transfer(amount);\n', '  }\n', '\n', '\n', '  function refundPreSale() public {\n', '    require(soldTokensPreSale < softcapPreSale && now > endPreSale);\n', '    uint256 rate = investedEther[msg.sender];\n', '    require(investedEther[msg.sender] >= 0);\n', '    investedEther[msg.sender] = 0;\n', '    msg.sender.transfer(rate);\n', '    weisRaised = weisRaised.sub(rate);\n', '    emit Refund(rate, msg.sender);\n', '  }\n', '}']
