['pragma solidity ^0.4.25;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Operated\n', ' * @dev The Operated contract has a list of ops addresses, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Operated {\n', '    mapping(address => bool) private _ops;\n', '\n', '    event OperatorChanged(\n', '        address indexed operator,\n', '        bool active\n', '    );\n', '\n', '    /**\n', '     * @dev The Operated constructor sets the original ops account of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() internal {\n', '        _ops[msg.sender] = true;\n', '        emit OperatorChanged(msg.sender, true);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the operations accounts.\n', '     */\n', '    modifier onlyOps() {\n', '        require(isOps(), "only operations accounts are allowed to call this function");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is an operator.\n', '     */\n', '    function isOps() public view returns(bool) {\n', '        return _ops[msg.sender];\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current operations accounts to give control of the contract to new accounts.\n', '     * @param _account The address of the new account\n', '     * @param _active Set active (true) or inactive (false)\n', '     */\n', '    function setOps(address _account, bool _active) public onlyOps {\n', '        _ops[_account] = _active;\n', '        emit OperatorChanged(_account, _active);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns(address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns(bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title WHISKY TOKEN\n', ' * @author WHYTOKEN GmbH\n', ' * @notice WHISKY TOKEN (WHY) stands for a disruptive new possibility in the crypto currency market\n', ' * due to the combination of High-End Whisky and Blockchain technology.\n', ' * WHY is a german based token, which lets everyone participate in the lucrative crypto market\n', ' * with minimal risk and effort through a high-end whisky portfolio as security.\n', ' */\n', 'contract WhiskyToken is IERC20, Ownable, Operated {\n', '    using SafeMath for uint256;\n', '    using SafeMath for uint64;\n', '\n', '    // ERC20 standard variables\n', '    string public name = "Whisky Token";\n', '    string public symbol = "WHY";\n', '    uint8 public decimals = 18;\n', '    uint256 public initialSupply = 28100000 * (10 ** uint256(decimals));\n', '    uint256 public totalSupply;\n', '\n', '    // Address of the ICO contract\n', '    address public crowdSaleContract;\n', '\n', '    // The asset value of the whisky in EUR cents\n', '    uint64 public assetValue;\n', '\n', '    // Fee to charge on every transfer (e.g. 15 is 1,5%)\n', '    uint64 public feeCharge;\n', '\n', '    // Global freeze of all transfers\n', '    bool public freezeTransfer;\n', '\n', '    // Flag to make all token available\n', '    bool private tokenAvailable;\n', '\n', '    // Maximum value for feeCharge\n', '    uint64 private constant feeChargeMax = 20;\n', '\n', '    // Address of the account/wallet which should receive the fees\n', '    address private feeReceiver;\n', '\n', '    // Mappings of addresses for balances, allowances and frozen accounts\n', '    mapping(address => uint256) internal balances;\n', '    mapping(address => mapping (address => uint256)) internal allowed;\n', '    mapping(address => bool) public frozenAccount;\n', '\n', '    // Event definitions\n', '    event Fee(address indexed payer, uint256 fee);\n', '    event FeeCharge(uint64 oldValue, uint64 newValue);\n', '    event AssetValue(uint64 oldValue, uint64 newValue);\n', '    event Burn(address indexed burner, uint256 value);\n', '    event FrozenFunds(address indexed target, bool frozen);\n', '    event FreezeTransfer(bool frozen);\n', '\n', '    // Constructor which gets called once on contract deployment\n', '    constructor(address _tokenOwner) public {\n', '        transferOwnership(_tokenOwner);\n', '        setOps(_tokenOwner, true);\n', '        crowdSaleContract = msg.sender;\n', '        feeReceiver = _tokenOwner;\n', '        totalSupply = initialSupply;\n', '        balances[msg.sender] = initialSupply;\n', '        assetValue = 0;\n', '        feeCharge = 15;\n', '        freezeTransfer = true;\n', '        tokenAvailable = true;\n', '    }\n', '\n', '    /**\n', '     * @notice Returns the total supply of tokens.\n', '     * @dev The total supply is the amount of tokens which are currently in circulation.\n', '     * @return Amount of tokens in Sip.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @notice Gets the balance of the specified address.\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount of tokens owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        if (!tokenAvailable) {\n', '            return 0;\n', '        }\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Internal transfer, can only be called by this contract.\n', '     * Will throw an exception to rollback the transaction if anything is wrong.\n', '     * @param _from The address from which the tokens should be transfered from.\n', '     * @param _to The address to which the tokens should be transfered to.\n', '     * @param _value The amount of tokens which should be transfered in Sip.\n', '     */\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        require(_to != address(0), "zero address is not allowed");\n', '        require(_value >= 1000, "must transfer more than 1000 sip");\n', '        require(!freezeTransfer || isOps(), "all transfers are currently frozen");\n', '        require(!frozenAccount[_from], "sender address is frozen");\n', '        require(!frozenAccount[_to], "receiver address is frozen");\n', '\n', '        uint256 transferValue = _value;\n', '        if (msg.sender != owner() && msg.sender != crowdSaleContract) {\n', '            uint256 fee = _value.div(1000).mul(feeCharge);\n', '            transferValue = _value.sub(fee);\n', '            balances[feeReceiver] = balances[feeReceiver].add(fee);\n', '            emit Fee(msg.sender, fee);\n', '            emit Transfer(_from, feeReceiver, fee);\n', '        }\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(transferValue);\n', '        if (tokenAvailable) {\n', '            emit Transfer(_from, _to, transferValue);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens to a specified address. The message sender has to pay the fee.\n', '     * @dev Calls _transfer with message sender address as _from parameter.\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred in Sip.\n', '     * @return Indicates if the transfer was successful.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens from one address to another. The message sender has to pay the fee.\n', '     * @dev Calls _transfer with the addresses provided by the transactor.\n', '     * @param _from The address which you want to send tokens from.\n', '     * @param _to The address which you want to transfer to.\n', '     * @param _value The amount of tokens to be transferred in Sip.\n', '     * @return Indicates if the transfer was successful.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= allowed[_from][msg.sender], "requesting more token than allowed");\n', '\n', '        _transfer(_from, _to, _value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Approve the passed address to spend the specified amount of tokens on behalf of the transactor.\n', '     * @dev Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which is allowed to retrieve the tokens.\n', '     * @param _value The amount of tokens to be spent in Sip.\n', '     * @return Indicates if the approval was successful.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(!freezeTransfer || isOps(), "all transfers are currently frozen");\n', '        require(_spender != address(0), "zero address is not allowed");\n', '        require(_value >= 1000, "must approve more than 1000 sip");\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Returns the amount of tokens that the owner allowed to the spender.\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner The address which owns the tokens.\n', '     * @param _spender The address which is allowed to retrieve the tokens.\n', '     * @return The amount of tokens still available for the spender in Sip.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @notice Increase the amount of tokens that an owner allowed to a spender.\n', '     * @dev Approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which is allowed to retrieve the tokens.\n', '     * @param _addedValue The amount of tokens to increase the allowance by in Sip.\n', '     * @return Indicates if the approval was successful.\n', '     */\n', '    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n', '        require(!freezeTransfer || isOps(), "all transfers are currently frozen");\n', '        require(_spender != address(0), "zero address is not allowed");\n', '        require(_addedValue >= 1000, "must approve more than 1000 sip");\n', '        \n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Decrease the amount of tokens that an owner allowed to a spender. \n', '     * @dev Approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which is allowed to retrieve the tokens.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by in Sip.\n', '     * @return Indicates if the approval was successful.\n', '     */\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n', '        require(!freezeTransfer || isOps(), "all transfers are currently frozen");\n', '        require(_spender != address(0), "zero address is not allowed");\n', '        require(_subtractedValue >= 1000, "must approve more than 1000 sip");\n', '\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    } \n', '\n', '    /**\n', '     * @notice Burns a specific amount of tokens.\n', '     * @dev Tokens get technically destroyed by this function and are therefore no longer in circulation afterwards.\n', '     * @param _value The amount of token to be burned in Sip.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(!freezeTransfer || isOps(), "all transfers are currently frozen");\n', '        require(_value <= balances[msg.sender], "address has not enough token to burn");\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value);\n', '        emit Transfer(burner, address(0), _value);\n', '    }\n', '\n', '    /**\n', '     * @notice Not for public use!\n', '     * @dev Modifies the assetValue which represents the monetized value (in EUR) of the whisky baking the token.\n', '     * @param _value The new value of the asset in EUR cents.\n', '     */\n', '    function setAssetValue(uint64 _value) public onlyOwner {\n', '        uint64 oldValue = assetValue;\n', '        assetValue = _value;\n', '        emit AssetValue(oldValue, _value);\n', '    }\n', '\n', '    /**\n', '     * @notice Not for public use!\n', '     * @dev Modifies the feeCharge which calculates the fee for each transaction.\n', '     * @param _value The new value of the feeCharge as fraction of 1000 (e.g. 15 is 1,5%).\n', '     */\n', '    function setFeeCharge(uint64 _value) public onlyOwner {\n', '        require(_value <= feeChargeMax, "can not increase fee charge over it\'s limit");\n', '        uint64 oldValue = feeCharge;\n', '        feeCharge = _value;\n', '        emit FeeCharge(oldValue, _value);\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Not for public use!\n', '     * @dev Prevents/Allows target from sending & receiving tokens.\n', '     * @param _target Address to be frozen.\n', '     * @param _freeze Either to freeze or unfreeze it.\n', '     */\n', '    function freezeAccount(address _target, bool _freeze) public onlyOwner {\n', '        require(_target != address(0), "zero address is not allowed");\n', '\n', '        frozenAccount[_target] = _freeze;\n', '        emit FrozenFunds(_target, _freeze);\n', '    }\n', '\n', '    /**\n', '     * @notice Not for public use!\n', '     * @dev Globally freeze all transfers for the token.\n', '     * @param _freeze Freeze or unfreeze every transfer.\n', '     */\n', '    function setFreezeTransfer(bool _freeze) public onlyOwner {\n', '        freezeTransfer = _freeze;\n', '        emit FreezeTransfer(_freeze);\n', '    }\n', '\n', '    /**\n', '     * @notice Not for public use!\n', '     * @dev Allows the owner to set the address which receives the fees.\n', '     * @param _feeReceiver the address which should receive fees.\n', '     */\n', '    function setFeeReceiver(address _feeReceiver) public onlyOwner {\n', '        require(_feeReceiver != address(0), "zero address is not allowed");\n', '        feeReceiver = _feeReceiver;\n', '    }\n', '\n', '    /**\n', '     * @notice Not for public use!\n', '     * @dev Make all tokens available for ERC20 wallets.\n', '     * @param _available Activate or deactivate all tokens\n', '     */\n', '    function setTokenAvailable(bool _available) public onlyOwner {\n', '        tokenAvailable = _available;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title WHISKY TOKEN ICO\n', ' * @author WHYTOKEN GmbH\n', ' * @notice WHISKY TOKEN (WHY) stands for a disruptive new possibility in the crypto currency market\n', ' * due to the combination of High-End Whisky and Blockchain technology.\n', ' * WHY is a german based token, which lets everyone participate in the lucrative crypto market\n', ' * with minimal risk and effort through a high-end whisky portfolio as security.\n', ' */\n', 'contract WhiskyTokenCrowdsale is Ownable, Operated {\n', '    using SafeMath for uint256;\n', '    using SafeMath for uint64;\n', '\n', '    // Address of the beneficiary which will receive the raised ETH \n', '    // Initialized during deployment\n', '    address public beneficiary;\n', '\n', '    // Deadline of the ICO as epoch time\n', '    // Initialized when entering the first phase\n', '    uint256 public deadline;\n', '\n', '    // Amount raised by the ICO in Ether\n', '    // Initialized during deployment\n', '    uint256 public amountRaisedETH;\n', '\n', '    // Amount raised by the ICO in Euro\n', '    // Initialized during deployment\n', '    uint256 public amountRaisedEUR;\n', '\n', '    // Amount of tokens sold in Sip\n', '    // Initialized during deployment\n', '    uint256 public tokenSold;\n', '\n', '    // Indicator if the funding goal has been reached\n', '    // Initialized during deployment\n', '    bool public fundingGoalReached;\n', '\n', '    // Indicator if the ICO already closed\n', '    // Initialized during deployment\n', '    bool public crowdsaleClosed;\n', '\n', '    // Internal indicator if we have checked our goals at the end of the ICO\n', '    // Initialized during deployment\n', '    bool private goalChecked;\n', '\n', '    // Instance of our deployed Whisky Token\n', '    // Initialized during deployment\n', '    WhiskyToken public tokenReward;\n', '\n', '    // Instance of the FIAT contract we use for ETH/EUR conversion\n', '    // Initialized during deployment\n', '    FiatContract public fiat;\n', '\n', '    // Amount of Euro cents we need to reach for the softcap\n', '    // 2.000.000 EUR\n', '    uint256 private minTokenSellInEuroCents = 200000000;\n', '\n', '    // Minimum amount of Euro cents you need to pay per transaction\n', '    // 30 EUR    \n', '    uint256 private minTokenBuyEuroCents = 3000;\n', '\n', '    // Minimum amount of tokens (in Sip) which are sold at the softcap\n', '    // 2.583.333 token\n', '    uint256 private minTokenSell = 2583333 * 1 ether;\n', '\n', '    // Maximum amount of tokens (in Sip) which are sold at the hardcap\n', '    // 25.250.000 tokens\n', '    uint256 private maxTokenSell = 25250000 * 1 ether;\n', '\n', '    // Minimum amount of tokens (in Sip) which the beneficiary will receive\n', '    // for the founders at the softcap\n', '    // 308.627 tokens\n', '    uint256 private minFounderToken = 308627 * 1 ether;\n', '\n', '    // Maximum amount of tokens (in Sip) which the beneficiary will receive\n', '    // for the founders at the hardcap\n', '    // 1.405.000 tokens\n', '    uint256 private maxFounderToken = 1405000 * 1 ether;\n', '\n', '    // Minimum amount of tokens (in Sip) which the beneficiary will receive\n', '    // for Research & Development and the Advisors after the ICO\n', '    // 154.313 tokens\n', '    uint256 private minRDAToken = 154313 * 1 ether;\n', '\n', '    // Maximum amount of tokens (in Sip) which the beneficiary will receive\n', '    // for Research & Development and the Advisors after the ICO\n', '    // 1.405.000 tokens\n', '    uint256 private maxRDAToken = 1405000 * 1 ether;\n', '\n', '    // Amount of tokens (in Sip) which a customer will receive as bounty\n', '    // 5 tokens\n', '    uint256 private bountyTokenPerPerson = 5 * 1 ether;\n', '\n', '    // Maximum amount of tokens (in Sip) which are available for bounty\n', '    // 40.000 tokens\n', '    uint256 private maxBountyToken = 40000 * 1 ether;\n', '\n', '    // Amount of tokens which are left for bounty\n', '    // Initialized during deployment\n', '    uint256 public tokenLeftForBounty;\n', '\n', '    // The pre-sale phase of the ICO\n', '    // 333.333 tokens for 60 cent/token\n', '    Phase private preSalePhase = Phase({\n', '        id: PhaseID.PreSale,\n', '        tokenPrice: 60,\n', '        tokenForSale: 333333 * 1 ether,\n', '        tokenLeft: 333333 * 1 ether\n', '    });\n', '\n', '    // The first public sale phase of the ICO\n', '    // 2.250.000 tokens for 80 cent/token\n', '    Phase private firstPhase = Phase({\n', '        id: PhaseID.First,\n', '        tokenPrice: 80,\n', '        tokenForSale: 2250000 * 1 ether,\n', '        tokenLeft: 2250000 * 1 ether\n', '    });\n', '\n', '    // The second public sale phase of the ICO\n', '    // 21.000.000 tokens for 100 cent/token\n', '    Phase private secondPhase = Phase({\n', '        id: PhaseID.Second,\n', '        tokenPrice: 100,\n', '        tokenForSale: 21000000 * 1 ether,\n', '        tokenLeft: 21000000 * 1 ether\n', '    });\n', '\n', '    // The third public sale phase of the ICO\n', '    // 1.666.667 tokens for 120 cent/token\n', '    Phase private thirdPhase = Phase({\n', '        id: PhaseID.Third,\n', '        tokenPrice: 120,\n', '        tokenForSale: 1666667 * 1 ether,\n', '        tokenLeft: 1666667 * 1 ether\n', '    });\n', '\n', '    // The closed phase of the ICO\n', '    // No token for sell\n', '    Phase private closedPhase = Phase({\n', '        id: PhaseID.Closed,\n', '        tokenPrice: ~uint64(0),\n', '        tokenForSale: 0,\n', '        tokenLeft: 0\n', '    });\n', '\n', '    // Points to the current phase\n', '    Phase public currentPhase;\n', '\n', '    // Structure for the phases\n', '    // Consists of an id, the tokenPrice and the amount\n', '    // of tokens available and left for sale\n', '    struct Phase {\n', '        PhaseID id;\n', '        uint64 tokenPrice;\n', '        uint256 tokenForSale;\n', '        uint256 tokenLeft;\n', '    }\n', '\n', '    // Enumeration for identification of the phases\n', '    enum PhaseID {\n', '        PreSale,        // 0 \n', '        First,          // 1\n', '        Second,         // 2\n', '        Third,          // 3\n', '        Closed          // 4\n', '    }    \n', '\n', '    // Mapping of an address to a customer\n', '    mapping(address => Customer) public customer;\n', '\n', '    // Structure representing a customer\n', '    // Consists of a rating, the amount of Ether and Euro the customer raised,\n', '    // and a boolean indicating if he/she has already received a bounty\n', '    struct Customer {\n', '        Rating rating;\n', '        uint256 amountRaisedEther;\n', '        uint256 amountRaisedEuro;\n', '        uint256 amountReceivedWhiskyToken;\n', '        bool hasReceivedBounty;\n', '    }\n', '\n', '    // Enumeration for identification of a rating for a customer\n', '    enum Rating {\n', "        Unlisted,       // 0: No known customer, can't buy any token\n", '        Whitelisted     // 1: Known customer by personal data, allowed to buy token\n', '    }\n', '\n', '    // Event definitions\n', '    event SaleClosed();\n', '    event GoalReached(address recipient, uint256 tokensSold, uint256 totalAmountRaised);\n', '    event WhitelistUpdated(address indexed _account, uint8 _phase);\n', '    event PhaseEntered(PhaseID phaseID);\n', '    event TokenSold(address indexed customer, uint256 amount);\n', '    event BountyTransfer(address indexed customer, uint256 amount);\n', '    event FounderTokenTransfer(address recipient, uint256 amount);\n', '    event RDATokenTransfer(address recipient, uint256 amount);\n', '    event FundsWithdrawal(address indexed recipient, uint256 amount);\n', '\n', '    // Constructor which gets called once on contract deployment\n', '    constructor() public {\n', '        setOps(msg.sender, true);\n', '        beneficiary = msg.sender;\n', '        tokenReward = new WhiskyToken(msg.sender);\n', '        fiat = FiatContract(0x8055d0504666e2B6942BeB8D6014c964658Ca591); // Main\n', '        currentPhase = preSalePhase;\n', '        fundingGoalReached = false;\n', '        crowdsaleClosed = false;\n', '        goalChecked = false;\n', '        tokenLeftForBounty = maxBountyToken;\n', '        tokenReward.transfer(msg.sender, currentPhase.tokenForSale);\n', '        currentPhase.tokenLeft = 0;\n', '        tokenSold += currentPhase.tokenForSale;\n', '        amountRaisedEUR = amountRaisedEUR.add((currentPhase.tokenForSale.div(1 ether)).mul(currentPhase.tokenPrice));\n', '    }\n', '\n', '    /**\n', '     * @notice Not for public use!\n', '     * @dev Advances the crowdsale to the next phase.\n', '     */\n', '    function nextPhase() public onlyOwner {\n', '        require(currentPhase.id != PhaseID.Closed, "already reached the closed phase");\n', '\n', '        uint8 nextPhaseNum = uint8(currentPhase.id) + 1;\n', '\n', '        if (PhaseID(nextPhaseNum) == PhaseID.First) {\n', '            currentPhase = firstPhase;\n', '            deadline = now + 365 * 1 days;\n', '        }\n', '        if (PhaseID(nextPhaseNum) == PhaseID.Second) {\n', '            currentPhase = secondPhase;\n', '        }\n', '        if (PhaseID(nextPhaseNum) == PhaseID.Third) {\n', '            currentPhase = thirdPhase;\n', '        }\n', '        if (PhaseID(nextPhaseNum) == PhaseID.Closed) {\n', '            currentPhase = closedPhase;\n', '        }\n', '\n', '        emit PhaseEntered(currentPhase.id);\n', '    }\n', '\n', '    /**\n', '     * @notice Not for public use!\n', '     * @dev Set the rating of a customer by address.\n', '     * @param _account The address of the customer you want to change the rating of.\n', '     * @param _phase The rating as an uint:\n', '     * 0 => Unlisted\n', '     * 1 => Whitelisted\n', '     */\n', '    function updateWhitelist(address _account, uint8 _phase) external onlyOps returns (bool) {\n', '        require(_account != address(0), "zero address is not allowed");\n', '        require(_phase == uint8(Rating.Unlisted) || _phase == uint8(Rating.Whitelisted), "invalid rating");\n', '\n', '        Rating rating = Rating(_phase);\n', '        customer[_account].rating = rating;\n', '        emit WhitelistUpdated(_account, _phase);\n', '\n', '        if (rating > Rating.Unlisted && !customer[_account].hasReceivedBounty && tokenLeftForBounty > 0) {\n', '            customer[_account].hasReceivedBounty = true;\n', '            customer[_account].amountReceivedWhiskyToken = customer[_account].amountReceivedWhiskyToken.add(bountyTokenPerPerson);\n', '            tokenLeftForBounty = tokenLeftForBounty.sub(bountyTokenPerPerson);\n', '            require(tokenReward.transfer(_account, bountyTokenPerPerson), "token transfer failed");\n', '            emit BountyTransfer(_account, bountyTokenPerPerson);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if the deadline is reached or the crowdsale has been closed.\n', '     */\n', '    modifier afterDeadline() {\n', '        if ((now >= deadline && currentPhase.id >= PhaseID.First) || currentPhase.id == PhaseID.Closed) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Check if the funding goal was reached.\n', '     * Can only be called after the deadline or if the crowdsale has been closed.\n', '     * @dev Checks if the goal or time limit has been reached and ends the campaign.\n', '     * Should be directly called after the ICO.\n', '     */\n', '    function checkGoalReached() public afterDeadline {\n', '        if (!goalChecked) {\n', '            if (_checkFundingGoalReached()) {\n', '                emit GoalReached(beneficiary, tokenSold, amountRaisedETH);\n', '            }\n', '            if (!crowdsaleClosed) {\n', '                crowdsaleClosed = true;\n', '                emit SaleClosed();\n', '            }\n', '            goalChecked = true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function for checking if we reached our funding goal.\n', '     * @return Indicates if the funding goal has been reached.\n', '     */\n', '    function _checkFundingGoalReached() internal returns (bool) {\n', '        if (!fundingGoalReached) {\n', '            if (amountRaisedEUR >= minTokenSellInEuroCents) {\n', '                fundingGoalReached = true;\n', '            }\n', '        }\n', '        return fundingGoalReached;\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () external payable {\n', '        _buyToken(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice Buy tokens for ether. You can also just send ether to the contract to buy tokens.\n', '     * Your address needs to be whitelisted first.\n', '     * @dev Allows the caller to buy token for his address.\n', '     * Implemented for the case that other contracts want to buy tokens.\n', '     */\n', '    function buyToken() external payable {\n', '        _buyToken(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice Buy tokens for another address. The address still needs to be whitelisted.\n', '     * @dev Allows the caller to buy token for a different address.\n', '     * @param _receiver Address of the person who should receive the tokens.\n', '     */\n', '    function buyTokenForAddress(address _receiver) external payable {\n', '        require(_receiver != address(0), "zero address is not allowed");\n', '        _buyToken(_receiver);\n', '    }\n', '\n', '    /**\n', '     * @notice Not for public use!\n', '     * @dev Send tokens to receiver who has payed with FIAT or other currencies.\n', '     * @param _receiver Address of the person who should receive the tokens.\n', '     * @param _cent The amount of euro cents which the person has payed.\n', '     */\n', '    function buyTokenForAddressWithEuroCent(address _receiver, uint64 _cent) external onlyOps {\n', '        require(!crowdsaleClosed, "crowdsale is closed");\n', '        require(_receiver != address(0), "zero address is not allowed");\n', '        require(currentPhase.id != PhaseID.PreSale, "not allowed to buy token in presale phase");\n', '        require(currentPhase.id != PhaseID.Closed, "not allowed to buy token in closed phase");\n', '        require(customer[_receiver].rating == Rating.Whitelisted, "address is not whitelisted");\n', '        _sendTokenReward(_receiver, _cent);        \n', '        _checkFundingGoalReached();\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function for buying token.\n', '     * @param _receiver Address of the person who should receive the tokens.\n', '     */\n', '    function _buyToken(address _receiver) internal {\n', '        require(!crowdsaleClosed, "crowdsale is closed");\n', '        require(currentPhase.id != PhaseID.PreSale, "not allowed to buy token in presale phase");\n', '        require(currentPhase.id != PhaseID.Closed, "not allowed to buy token in closed phase");\n', '        require(customer[_receiver].rating == Rating.Whitelisted, "address is not whitelisted");\n', '        _sendTokenReward(_receiver, 0);\n', '        _checkFundingGoalReached();\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function for sending token as reward for ether.\n', '     * @param _receiver Address of the person who should receive the tokens.\n', '     */\n', '    function _sendTokenReward(address _receiver, uint64 _cent) internal {\n', '        // Remember the ETH amount of the message sender, not the token receiver!\n', '        // We need this because if the softcap was not reached\n', '        // the message sender should be able to retrive his ETH\n', '        uint256 amountEuroCents;\n', '        uint256 tokenAmount;\n', '        if (msg.value > 0) {\n', '            uint256 amount = msg.value;\n', '            customer[msg.sender].amountRaisedEther = customer[msg.sender].amountRaisedEther.add(amount);\n', '            amountRaisedETH = amountRaisedETH.add(amount);\n', '            amountEuroCents = amount.div(fiat.EUR(0));\n', '            tokenAmount = (amount.div(getTokenPrice())) * 1 ether;\n', '        } else if (_cent > 0) {\n', '            amountEuroCents = _cent;\n', '            tokenAmount = (amountEuroCents.div(currentPhase.tokenPrice)) * 1 ether;\n', '        } else {\n', '            revert("this should never happen");\n', '        }\n', '        \n', '        uint256 sumAmountEuroCents = customer[_receiver].amountRaisedEuro.add(amountEuroCents);\n', '        customer[_receiver].amountRaisedEuro = sumAmountEuroCents;\n', '        amountRaisedEUR = amountRaisedEUR.add(amountEuroCents);\n', '\n', '        require(((tokenAmount / 1 ether) * currentPhase.tokenPrice) >= minTokenBuyEuroCents, "must buy token for at least 30 EUR");\n', '        require(tokenAmount <= currentPhase.tokenLeft, "not enough token left in current phase");\n', '        currentPhase.tokenLeft = currentPhase.tokenLeft.sub(tokenAmount);\n', '\n', '        customer[_receiver].amountReceivedWhiskyToken = customer[_receiver].amountReceivedWhiskyToken.add(tokenAmount);\n', '        tokenSold = tokenSold.add(tokenAmount);\n', '        require(tokenReward.transfer(_receiver, tokenAmount), "token transfer failed");\n', '        emit TokenSold(_receiver, tokenAmount);\n', '    }\n', '\n', '    /**\n', '     * @notice Withdraw your funds if the ICO softcap has not been reached.\n', '     * @dev Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\n', '     * sends the entire ether amount to the beneficiary.\n', '     * Also caluclates and sends the tokens for the founders, research & development and advisors.\n', '     * All tokens which were not sold or send will be burned at the end.\n', '     * If goal was not reached, each contributor can withdraw the amount they contributed.\n', '     */\n', '    function safeWithdrawal() public afterDeadline {\n', '        require(crowdsaleClosed, "crowdsale must be closed");\n', '        \n', '        if (!fundingGoalReached) {\n', '            // Let customers retrieve their ether\n', '            require(customer[msg.sender].amountRaisedEther > 0, "message sender has not raised any ether to this contract");\n', '            uint256 amount = customer[msg.sender].amountRaisedEther;\n', '            customer[msg.sender].amountRaisedEther = 0;\n', '            msg.sender.transfer(amount);\n', '            emit FundsWithdrawal(msg.sender, amount);\n', '        } else {\n', '            // Let owner retrive current ether amount and founder token\n', '            require(beneficiary == msg.sender, "message sender is not the beneficiary");\n', '            uint256 ethAmount = address(this).balance;\n', '            beneficiary.transfer(ethAmount);\n', '            emit FundsWithdrawal(beneficiary, ethAmount);\n', '\n', '            // Calculate and transfer founder token\n', '            uint256 founderToken = (tokenSold - minTokenSell) * (maxFounderToken - minFounderToken) / (maxTokenSell - minTokenSell) + minFounderToken - (maxBountyToken - tokenLeftForBounty);\n', '            require(tokenReward.transfer(beneficiary, founderToken), "founder token transfer failed");\n', '            emit FounderTokenTransfer(beneficiary, founderToken);\n', '\n', '            // Calculate and transfer research and advisor token\n', '            uint256 rdaToken = (tokenSold - minTokenSell) * (maxRDAToken - minRDAToken) / (maxTokenSell - minTokenSell) + minRDAToken;\n', '            require(tokenReward.transfer(beneficiary, rdaToken), "RDA token transfer failed");\n', '            emit RDATokenTransfer(beneficiary, rdaToken);\n', '\n', '            // Burn all leftovers\n', '            tokenReward.burn(tokenReward.balanceOf(this));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Not for public use!\n', '     * @dev Allows early withdrawal of ether from the contract if the funding goal is reached.\n', '     * Only the owner and beneficiary of the contract can call this function.\n', '     * @param _amount The amount of ETH (in wei) which should be retreived.\n', '     */\n', '    function earlySafeWithdrawal(uint256 _amount) public onlyOwner {\n', '        require(fundingGoalReached, "funding goal has not been reached");\n', '        require(beneficiary == msg.sender, "message sender is not the beneficiary");\n', '        require(address(this).balance >= _amount, "contract has less ether in balance than requested");\n', '\n', '        beneficiary.transfer(_amount);\n', '        emit FundsWithdrawal(beneficiary, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to calculate token price based on the ether price and current phase.\n', '     */\n', '    function getTokenPrice() internal view returns (uint256) {\n', '        return getEtherInEuroCents() * currentPhase.tokenPrice / 100;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to calculate 1 EUR in WEI.\n', '     */\n', '    function getEtherInEuroCents() internal view returns (uint256) {\n', '        return fiat.EUR(0) * 100;\n', '    }\n', '\n', '    /**\n', '     * @notice Not for public use!\n', '     * @dev Change the address of the fiat contract\n', '     * @param _fiat The new address of the fiat contract\n', '     */\n', '    function setFiatContractAddress(address _fiat) public onlyOwner {\n', '        require(_fiat != address(0), "zero address is not allowed");\n', '        fiat = FiatContract(_fiat);\n', '    }\n', '\n', '    /**\n', '     * @notice Not for public use!\n', '     * @dev Change the address of the beneficiary\n', '     * @param _beneficiary The new address of the beneficiary\n', '     */\n', '    function setBeneficiary(address _beneficiary) public onlyOwner {\n', '        require(_beneficiary != address(0), "zero address is not allowed");\n', '        beneficiary = _beneficiary;\n', '    }\n', '}\n', '\n', '/**\n', ' * @author https://github.com/hunterlong/fiatcontractd\n', ' */\n', 'contract FiatContract {\n', '    function ETH(uint _id) public view returns (uint256);\n', '    function USD(uint _id) public view returns (uint256);\n', '    function EUR(uint _id) public view returns (uint256);\n', '    function GBP(uint _id) public view returns (uint256);\n', '    function updatedAt(uint _id) public view returns (uint);\n', '}']