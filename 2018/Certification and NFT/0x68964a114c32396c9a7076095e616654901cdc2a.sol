['pragma solidity ^0.4.13;\n', '\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an account access to this role\n', '   */\n', '  function add(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    role.bearer[account] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an account's access to this role\n", '   */\n', '  function remove(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    role.bearer[account] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an account has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address account)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    require(account != address(0));\n', '    return role.bearer[account];\n', '  }\n', '}\n', '\n', 'contract CapperRole {\n', '  using Roles for Roles.Role;\n', '\n', '  event CapperAdded(address indexed account);\n', '  event CapperRemoved(address indexed account);\n', '\n', '  Roles.Role private cappers;\n', '\n', '  constructor() public {\n', '    cappers.add(msg.sender);\n', '  }\n', '\n', '  modifier onlyCapper() {\n', '    require(isCapper(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isCapper(address account) public view returns (bool) {\n', '    return cappers.has(account);\n', '  }\n', '\n', '  function addCapper(address account) public onlyCapper {\n', '    cappers.add(account);\n', '    emit CapperAdded(account);\n', '  }\n', '\n', '  function renounceCapper() public {\n', '    cappers.remove(msg.sender);\n', '  }\n', '\n', '  function _removeCapper(address account) internal {\n', '    cappers.remove(account);\n', '    emit CapperRemoved(account);\n', '  }\n', '}\n', '\n', 'contract MinterRole {\n', '  using Roles for Roles.Role;\n', '\n', '  event MinterAdded(address indexed account);\n', '  event MinterRemoved(address indexed account);\n', '\n', '  Roles.Role private minters;\n', '\n', '  constructor() public {\n', '    minters.add(msg.sender);\n', '  }\n', '\n', '  modifier onlyMinter() {\n', '    require(isMinter(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isMinter(address account) public view returns (bool) {\n', '    return minters.has(account);\n', '  }\n', '\n', '  function addMinter(address account) public onlyMinter {\n', '    minters.add(account);\n', '    emit MinterAdded(account);\n', '  }\n', '\n', '  function renounceMinter() public {\n', '    minters.remove(msg.sender);\n', '  }\n', '\n', '  function _removeMinter(address account) internal {\n', '    minters.remove(account);\n', '    emit MinterRemoved(account);\n', '  }\n', '}\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for IERC20;\n', '\n', '  // The token being sold\n', '  IERC20 private _token;\n', '\n', '  // Address where funds are collected\n', '  address private _wallet;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '  // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\n', '  // 1 wei will give you 1 unit, or 0.001 TOK.\n', '  uint256 private _rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 private _weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokensPurchased(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * @param rate Number of token units a buyer gets per wei\n', '   * @dev The rate is the conversion between wei and the smallest and indivisible\n', '   * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\n', '   * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\n', '   * @param wallet Address where collected funds will be forwarded to\n', '   * @param token Address of the token being sold\n', '   */\n', '  constructor(uint256 rate, address wallet, IERC20 token) public {\n', '    require(rate > 0);\n', '    require(wallet != address(0));\n', '    require(token != address(0));\n', '\n', '    _rate = rate;\n', '    _wallet = wallet;\n', '    _token = token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @return the token being sold.\n', '   */\n', '  function token() public view returns(IERC20) {\n', '    return _token;\n', '  }\n', '\n', '  /**\n', '   * @return the address where funds are collected.\n', '   */\n', '  function wallet() public view returns(address) {\n', '    return _wallet;\n', '  }\n', '\n', '  /**\n', '   * @return the number of token units a buyer gets per wei.\n', '   */\n', '  function rate() public view returns(uint256) {\n', '    return _rate;\n', '  }\n', '\n', '  /**\n', '   * @return the mount of wei raised.\n', '   */\n', '  function weiRaised() public view returns (uint256) {\n', '    return _weiRaised;\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    _weiRaised = _weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(beneficiary, tokens);\n', '    emit TokensPurchased(\n', '      msg.sender,\n', '      beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n', "   * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n", '   *   super._preValidatePurchase(beneficiary, weiAmount);\n', '   *   require(weiRaised().add(weiAmount) <= cap);\n', '   * @param beneficiary Address performing the token purchase\n', '   * @param weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(\n', '    address beneficiary,\n', '    uint256 weiAmount\n', '  )\n', '    internal\n', '  {\n', '    require(beneficiary != address(0));\n', '    require(weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param beneficiary Address performing the token purchase\n', '   * @param weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(\n', '    address beneficiary,\n', '    uint256 weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param beneficiary Address performing the token purchase\n', '   * @param tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address beneficiary,\n', '    uint256 tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _token.safeTransfer(beneficiary, tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param beneficiary Address receiving the tokens\n', '   * @param tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address beneficiary,\n', '    uint256 tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(beneficiary, tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param beneficiary Address receiving the tokens\n', '   * @param weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(\n', '    address beneficiary,\n', '    uint256 weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 weiAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    return weiAmount.mul(_rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    _wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', 'contract MintedCrowdsale is Crowdsale {\n', '\n', '  /**\n', '   * @dev Overrides delivery by minting tokens upon purchase.\n', '   * @param beneficiary Token purchaser\n', '   * @param tokenAmount Number of tokens to be minted\n', '   */\n', '  function _deliverTokens(\n', '    address beneficiary,\n', '    uint256 tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    // Potentially dangerous assumption about the type of the token.\n', '    require(\n', '      ERC20Mintable(address(token())).mint(beneficiary, tokenAmount));\n', '  }\n', '}\n', '\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 private _cap;\n', '\n', '  /**\n', '   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n', '   * @param cap Max amount of wei to be contributed\n', '   */\n', '  constructor(uint256 cap) public {\n', '    require(cap > 0);\n', '    _cap = cap;\n', '  }\n', '\n', '  /**\n', '   * @return the cap of the crowdsale.\n', '   */\n', '  function cap() public view returns(uint256) {\n', '    return _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the cap has been reached.\n', '   * @return Whether the cap was reached\n', '   */\n', '  function capReached() public view returns (bool) {\n', '    return weiRaised() >= _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring purchase to respect the funding cap.\n', '   * @param beneficiary Token purchaser\n', '   * @param weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address beneficiary,\n', '    uint256 weiAmount\n', '  )\n', '    internal\n', '  {\n', '    super._preValidatePurchase(beneficiary, weiAmount);\n', '    require(weiRaised().add(weiAmount) <= _cap);\n', '  }\n', '\n', '}\n', '\n', 'contract IndividuallyCappedCrowdsale is Crowdsale, CapperRole {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) private _contributions;\n', '  mapping(address => uint256) private _caps;\n', '\n', '  /**\n', "   * @dev Sets a specific beneficiary's maximum contribution.\n", '   * @param beneficiary Address to be capped\n', '   * @param cap Wei limit for individual contribution\n', '   */\n', '  function setCap(address beneficiary, uint256 cap) external onlyCapper {\n', '    _caps[beneficiary] = cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the cap of a specific beneficiary.\n', '   * @param beneficiary Address whose cap is to be checked\n', '   * @return Current cap for individual beneficiary\n', '   */\n', '  function getCap(address beneficiary) public view returns (uint256) {\n', '    return _caps[beneficiary];\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the amount contributed so far by a specific beneficiary.\n', '   * @param beneficiary Address of contributor\n', '   * @return Beneficiary contribution so far\n', '   */\n', '  function getContribution(address beneficiary)\n', '    public view returns (uint256)\n', '  {\n', '    return _contributions[beneficiary];\n', '  }\n', '\n', '  /**\n', "   * @dev Extend parent behavior requiring purchase to respect the beneficiary's funding cap.\n", '   * @param beneficiary Token purchaser\n', '   * @param weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address beneficiary,\n', '    uint256 weiAmount\n', '  )\n', '    internal\n', '  {\n', '    super._preValidatePurchase(beneficiary, weiAmount);\n', '    require(\n', '      _contributions[beneficiary].add(weiAmount) <= _caps[beneficiary]);\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior to update beneficiary contributions\n', '   * @param beneficiary Token purchaser\n', '   * @param weiAmount Amount of wei contributed\n', '   */\n', '  function _updatePurchasingState(\n', '    address beneficiary,\n', '    uint256 weiAmount\n', '  )\n', '    internal\n', '  {\n', '    super._updatePurchasingState(beneficiary, weiAmount);\n', '    _contributions[beneficiary] = _contributions[beneficiary].add(\n', '      weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 private _openingTime;\n', '  uint256 private _closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    require(isOpen());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param openingTime Crowdsale opening time\n', '   * @param closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 openingTime, uint256 closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(openingTime >= block.timestamp);\n', '    require(closingTime >= openingTime);\n', '\n', '    _openingTime = openingTime;\n', '    _closingTime = closingTime;\n', '  }\n', '\n', '  /**\n', '   * @return the crowdsale opening time.\n', '   */\n', '  function openingTime() public view returns(uint256) {\n', '    return _openingTime;\n', '  }\n', '\n', '  /**\n', '   * @return the crowdsale closing time.\n', '   */\n', '  function closingTime() public view returns(uint256) {\n', '    return _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @return true if the crowdsale is open, false otherwise.\n', '   */\n', '  function isOpen() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param beneficiary Token purchaser\n', '   * @param weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address beneficiary,\n', '    uint256 weiAmount\n', '  )\n', '    internal\n', '    onlyWhileOpen\n', '  {\n', '    super._preValidatePurchase(beneficiary, weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract ERC20 is IERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) private _balances;\n', '\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '  uint256 private _totalSupply;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param owner address The address which owns the funds.\n', '   * @param spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address owner,\n', '    address spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    require(value <= _balances[msg.sender]);\n', '    require(to != address(0));\n', '\n', '    _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    emit Transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param spender The address which will spend the funds.\n', '   * @param value The amount of tokens to be spent.\n', '   */\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(value <= _balances[from]);\n', '    require(value <= _allowed[from][msg.sender]);\n', '    require(to != address(0));\n', '\n', '    _balances[from] = _balances[from].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '    emit Transfer(from, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseAllowance(\n', '    address spender,\n', '    uint256 addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseAllowance(\n', '    address spender,\n', '    uint256 subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that mints an amount of the token and assigns it to\n', '   * an account. This encapsulates the modification of balances such that the\n', '   * proper events are emitted.\n', '   * @param account The account that will receive the created tokens.\n', '   * @param amount The amount that will be created.\n', '   */\n', '  function _mint(address account, uint256 amount) internal {\n', '    require(account != 0);\n', '    _totalSupply = _totalSupply.add(amount);\n', '    _balances[account] = _balances[account].add(amount);\n', '    emit Transfer(address(0), account, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param amount The amount that will be burnt.\n', '   */\n', '  function _burn(address account, uint256 amount) internal {\n', '    require(account != 0);\n', '    require(amount <= _balances[account]);\n', '\n', '    _totalSupply = _totalSupply.sub(amount);\n', '    _balances[account] = _balances[account].sub(amount);\n', '    emit Transfer(account, address(0), amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', "   * account, deducting from the sender's allowance for said account. Uses the\n", '   * internal burn function.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param amount The amount that will be burnt.\n', '   */\n', '  function _burnFrom(address account, uint256 amount) internal {\n', '    require(amount <= _allowed[account][msg.sender]);\n', '\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n', '      amount);\n', '    _burn(account, amount);\n', '  }\n', '}\n', '\n', 'contract ERC20Mintable is ERC20, MinterRole {\n', '  event MintingFinished();\n', '\n', '  bool private _mintingFinished = false;\n', '\n', '  modifier onlyBeforeMintingFinished() {\n', '    require(!_mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if the minting is finished.\n', '   */\n', '  function mintingFinished() public view returns(bool) {\n', '    return _mintingFinished;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param to The address that will receive the minted tokens.\n', '   * @param amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address to,\n', '    uint256 amount\n', '  )\n', '    public\n', '    onlyMinter\n', '    onlyBeforeMintingFinished\n', '    returns (bool)\n', '  {\n', '    _mint(to, amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting()\n', '    public\n', '    onlyMinter\n', '    onlyBeforeMintingFinished\n', '    returns (bool)\n', '  {\n', '    _mintingFinished = true;\n', '    emit MintingFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    IERC20 token,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    IERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(\n', '    IERC20 token,\n', '    address spender,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract BoltCrowdsale is Crowdsale, MintedCrowdsale, CappedCrowdsale,\n', '  TimedCrowdsale, IndividuallyCappedCrowdsale {\n', '    constructor(\n', '        uint256 rate,         // rate, in BOLTbits to wei\n', '        address wallet,       // wallet to send Ether to\n', '        ERC20 token,          // the token\n', '        uint256 cap,          // total cap, in wei\n', '        uint256 openingTime,  // opening time in unix epoch seconds\n', '        uint256 closingTime   // closing time in unix epoch seconds\n', '    )\n', '        MintedCrowdsale()\n', '        IndividuallyCappedCrowdsale()\n', '        TimedCrowdsale(openingTime, closingTime)\n', '        CappedCrowdsale(cap)\n', '        Crowdsale(rate, wallet, token)\n', '        public\n', '    {}\n', '}']