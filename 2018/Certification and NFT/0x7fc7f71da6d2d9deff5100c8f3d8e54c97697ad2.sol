['pragma solidity ^0.4.24;\n', '\n', '// Delegate voting power for stake based voting and governance.\n', '// Enables safe in-app voting participation, by letting users\n', '// delegate their cold wallet VP to a convenient hot wallet.\n', 'contract VotingPowerDelegator {\n', '    // delegator => beneficiary\n', '    mapping (address => address) public delegations;\n', '    mapping (address => uint)    public delegatedAt;\n', '    event Delegated(address delegator, address beneficiary);\n', '\n', '    constructor() public { }\n', '\n', '    function delegate(address beneficiary) public {\n', '        if (beneficiary == msg.sender) {\n', '            beneficiary = 0;\n', '        }\n', '        delegations[msg.sender] = beneficiary;\n', '        delegatedAt[msg.sender] = now;\n', '        emit Delegated(msg.sender, beneficiary);\n', '    }\n', '\n', '    function () public payable {\n', '        revert();\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// Delegate voting power for stake based voting and governance.\n', '// Enables safe in-app voting participation, by letting users\n', '// delegate their cold wallet VP to a convenient hot wallet.\n', 'contract VotingPowerDelegator {\n', '    // delegator => beneficiary\n', '    mapping (address => address) public delegations;\n', '    mapping (address => uint)    public delegatedAt;\n', '    event Delegated(address delegator, address beneficiary);\n', '\n', '    constructor() public { }\n', '\n', '    function delegate(address beneficiary) public {\n', '        if (beneficiary == msg.sender) {\n', '            beneficiary = 0;\n', '        }\n', '        delegations[msg.sender] = beneficiary;\n', '        delegatedAt[msg.sender] = now;\n', '        emit Delegated(msg.sender, beneficiary);\n', '    }\n', '\n', '    function () public payable {\n', '        revert();\n', '    }\n', '}']
