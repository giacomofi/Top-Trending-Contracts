['pragma solidity ^ 0.4.18;\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint a, uint b) internal pure  returns(uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure  returns(uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure  returns(uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    \n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', '// @notice  Whitelist interface which will hold whitelisted users\n', 'contract WhiteList is Ownable {\n', '\n', '    function isWhiteListed(address _user) external view returns (bool);        \n', '}\n', '\n', '// Crowdsale Smart Contract\n', '// This smart contract collects ETH and in return sends tokens to contributors\n', 'contract Crowdsale is Pausable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    struct Backer {\n', '        uint weiReceived; // amount of ETH contributed\n', '        uint tokensToSend; // amount of tokens  sent      \n', '        bool refunded;\n', '    }\n', '\n', '    Token public token; // Token contract reference   \n', '    address public multisig; // Multisig contract that will receive the ETH    \n', '    address public team; // Address at which the team tokens will be sent        \n', '    uint public ethReceivedPresale; // Number of ETH received in presale\n', '    uint public ethReceivedMain; // Number of ETH received in public sale\n', '    uint public tokensSentPresale; // Tokens sent during presale\n', '    uint public tokensSentMain; // Tokens sent during public ICO   \n', '    uint public totalTokensSent; // Total number of tokens sent to contributors\n', '    uint public startBlock; // Crowdsale start block\n', '    uint public endBlock; // Crowdsale end block\n', '    uint public maxCap; // Maximum number of tokens to sell    \n', '    uint public minInvestETH; // Minimum amount to invest   \n', '    bool public crowdsaleClosed; // Is crowdsale still in progress\n', '    Step public currentStep;  // To allow for controlled steps of the campaign \n', '    uint public refundCount;  // Number of refunds\n', '    uint public totalRefunded; // Total amount of Eth refunded          \n', '    uint public dollarToEtherRatio; // how many dollars are in one eth. Amount uses two decimal values. e.g. $333.44/ETH would be passed as 33344 \n', '    uint public numOfBlocksInMinute; // number of blocks in one minute * 100. eg. \n', '    WhiteList public whiteList;     // whitelist contract\n', '\n', '    mapping(address => Backer) public backers; // contributors list\n', '    address[] public backersIndex; // to be able to iterate through backers for verification.              \n', '    uint public priorTokensSent; \n', '    uint public presaleCap;\n', '   \n', '\n', '    // @notice to verify if action is not performed out of the campaign range\n', '    modifier respectTimeFrame() {\n', '        require(block.number >= startBlock && block.number <= endBlock);\n', '        _;\n', '    }\n', '\n', '    // @notice to set and determine steps of crowdsale\n', '    enum Step {      \n', '        FundingPreSale,     // presale mode\n', '        FundingPublicSale,  // public mode\n', '        Refunding  // in case campaign failed during this step contributors will be able to receive refunds\n', '    }\n', '\n', '    // Events\n', '    event ReceivedETH(address indexed backer, uint amount, uint tokenAmount);\n', '    event RefundETH(address indexed backer, uint amount);\n', '\n', '    // Crowdsale  {constructor}\n', '    // @notice fired when contract is crated. Initializes all constant and initial values.\n', '    // @param _dollarToEtherRatio {uint} how many dollars are in one eth.  $333.44/ETH would be passed as 33344\n', '    function Crowdsale(WhiteList _whiteList) public {               \n', '        multisig = 0x10f78f2a70B52e6c3b490113c72Ba9A90ff1b5CA; \n', '        team = 0x10f78f2a70B52e6c3b490113c72Ba9A90ff1b5CA; \n', '        maxCap = 1510000000e8;             \n', '        minInvestETH = 1 ether/2;    \n', '        currentStep = Step.FundingPreSale;\n', '        dollarToEtherRatio = 56413;       \n', '        numOfBlocksInMinute = 408;          // E.g. 4.38 block/per minute wold be entered as 438                  \n', '        priorTokensSent = 4365098999e7;     //tokens distributed in private sale and airdrops\n', '        whiteList = _whiteList;             // white list address\n', '        presaleCap = 107000000e8;           // max for sell in presale\n', '\n', '    }\n', '\n', '    // @notice to populate website with status of the sale and minimize amout of calls for each variable\n', '    function returnWebsiteData() external view returns(uint, uint, uint, uint, uint, uint, Step, bool, bool) {            \n', '    \n', '        return (startBlock, endBlock, backersIndex.length, ethReceivedPresale + ethReceivedMain, maxCap, totalTokensSent, currentStep, paused, crowdsaleClosed);\n', '    }\n', '\n', '    // @notice Specify address of token contract\n', '    // @param _tokenAddress {address} address of token contract\n', '    // @return res {bool}\n', '    function setTokenAddress(Token _tokenAddress) external onlyOwner() returns(bool res) {\n', '        require(token == address(0));\n', '        token = _tokenAddress;\n', '        return true;\n', '    }\n', '\n', '    // @notice set the step of the campaign from presale to public sale\n', '    // contract is deployed in presale mode\n', '    // WARNING: there is no way to go back\n', '    function advanceStep() public onlyOwner() {\n', '\n', '        currentStep = Step.FundingPublicSale;                                             \n', '        minInvestETH = 1 ether/4;                                     \n', '    }\n', '\n', '    // @notice in case refunds are needed, money can be returned to the contract\n', '    // and contract switched to mode refunding\n', '    function prepareRefund() public payable onlyOwner() {\n', '        \n', '        require(msg.value == ethReceivedPresale.add(ethReceivedMain)); // make sure that proper amount of ether is sent\n', '        currentStep = Step.Refunding;\n', '    }\n', '\n', '    // @notice return number of contributors\n', '    // @return  {uint} number of contributors   \n', '    function numberOfBackers() public view returns(uint) {\n', '        return backersIndex.length;\n', '    }\n', '\n', '    // {fallback function}\n', '    // @notice It will call internal function which handles allocation of Ether and calculates tokens.\n', '    // Contributor will be instructed to specify sufficient amount of gas. e.g. 250,000 \n', '    function () external payable {           \n', '        contribute(msg.sender);\n', '    }\n', '\n', '    // @notice It will be called by owner to start the sale    \n', '    function start(uint _block) external onlyOwner() {   \n', '\n', '        require(_block <= (numOfBlocksInMinute * 60 * 24 * 55)/100);  // allow max 55 days for campaign 323136\n', '        startBlock = block.number;\n', '        endBlock = startBlock.add(_block); \n', '    }\n', '\n', '    // @notice Due to changing average of block time\n', '    // this function will allow on adjusting duration of campaign closer to the end \n', '    function adjustDuration(uint _block) external onlyOwner() {\n', '\n', '        require(_block < (numOfBlocksInMinute * 60 * 24 * 60)/100); // allow for max of 60 days for campaign\n', '        require(_block > block.number.sub(startBlock)); // ensure that endBlock is not set in the past\n', '        endBlock = startBlock.add(_block); \n', '    }   \n', '\n', '    // @notice due to Ether to Dollar flacutation this value will be adjusted during the campaign\n', '    // @param _dollarToEtherRatio {uint} new value of dollar to ether ratio\n', '    function adjustDollarToEtherRatio(uint _dollarToEtherRatio) external onlyOwner() {\n', '        require(_dollarToEtherRatio > 0);\n', '        dollarToEtherRatio = _dollarToEtherRatio;\n', '    }\n', '\n', '    // @notice It will be called by fallback function whenever ether is sent to it\n', '    // @param  _backer {address} address of contributor\n', '    // @return res {bool} true if transaction was successful\n', '    function contribute(address _backer) internal whenNotPaused() respectTimeFrame() returns(bool res) {\n', '\n', '        require(whiteList.isWhiteListed(_backer));      // ensure that user is whitelisted\n', '\n', '        uint tokensToSend = determinePurchase();\n', '            \n', '        Backer storage backer = backers[_backer];\n', '\n', '        if (backer.weiReceived == 0)\n', '            backersIndex.push(_backer);\n', '       \n', '        backer.tokensToSend += tokensToSend; // save contributor&#39;s total tokens sent\n', '        backer.weiReceived = backer.weiReceived.add(msg.value);  // save contributor&#39;s total ether contributed\n', '\n', '        if (Step.FundingPublicSale == currentStep) { // Update the total Ether received and tokens sent during public sale\n', '            ethReceivedMain = ethReceivedMain.add(msg.value);\n', '            tokensSentMain += tokensToSend;\n', '        }else {                                                 // Update the total Ether recived and tokens sent during presale\n', '            ethReceivedPresale = ethReceivedPresale.add(msg.value); \n', '            tokensSentPresale += tokensToSend;\n', '        }\n', '                                                     \n', '        totalTokensSent += tokensToSend;     // update the total amount of tokens sent        \n', '        multisig.transfer(this.balance);   // transfer funds to multisignature wallet    \n', '\n', '        if (!token.transfer(_backer, tokensToSend)) \n', '            revert(); // Transfer tokens             \n', '\n', '        ReceivedETH(_backer, msg.value, tokensToSend); // Register event\n', '        return true;\n', '    }\n', '\n', '    // @notice determine if purchase is valid and return proper number of tokens\n', '    // @return tokensToSend {uint} proper number of tokens based on the timline\n', '    function determinePurchase() internal view  returns (uint) {\n', '\n', '        require(msg.value >= minInvestETH);   // ensure that min contributions amount is met  \n', '        uint tokenAmount = dollarToEtherRatio.mul(msg.value)/4e10;  // price of token is $0.01 and there are 8 decimals for the token\n', '        \n', '        uint tokensToSend;\n', '          \n', '        if (Step.FundingPublicSale == currentStep) {  // calculate price of token in public sale\n', '            tokensToSend = tokenAmount;\n', '            require(totalTokensSent + tokensToSend + priorTokensSent <= maxCap); // Ensure that max cap hasn&#39;t been reached  \n', '        }else {\n', '            tokensToSend = tokenAmount + (tokenAmount * 50) / 100; \n', '            require(totalTokensSent + tokensToSend <= presaleCap); // Ensure that max cap hasn&#39;t been reached for presale            \n', '        }                                                        \n', '       \n', '        return tokensToSend;\n', '    }\n', '\n', '    \n', '    // @notice This function will finalize the sale.\n', '    // It will only execute if predetermined sale time passed or all tokens are sold.\n', '    // it will fail if minimum cap is not reached\n', '    function finalize() external onlyOwner() {\n', '\n', '        require(!crowdsaleClosed);        \n', '        // purchasing precise number of tokens might be impractical, thus subtract 1000 \n', '        // tokens so finalization is possible near the end \n', '        require(block.number >= endBlock || totalTokensSent + priorTokensSent >= maxCap - 1000);                        \n', '        crowdsaleClosed = true; \n', '        \n', '        if (!token.transfer(team, token.balanceOf(this))) // transfer all remaining tokens to team address\n', '            revert();        \n', '        token.unlock();                      \n', '    }\n', '\n', '    // @notice Fail-safe drain\n', '    function drain() external onlyOwner() {\n', '        multisig.transfer(this.balance);               \n', '    }\n', '\n', '    // @notice Fail-safe token transfer\n', '    function tokenDrain() external onlyOwner() {\n', '        if (block.number > endBlock) {\n', '            if (!token.transfer(multisig, token.balanceOf(this))) \n', '                revert();\n', '        }\n', '    }\n', '    \n', '    // @notice it will allow contributors to get refund in case campaign failed\n', '    // @return {bool} true if successful\n', '    function refund() external whenNotPaused() returns (bool) {\n', '\n', '        require(currentStep == Step.Refunding);                        \n', '\n', '        Backer storage backer = backers[msg.sender];\n', '\n', '        require(backer.weiReceived > 0);  // ensure that user has sent contribution\n', '        require(!backer.refunded);        // ensure that user hasn&#39;t been refunded yet\n', '\n', '        backer.refunded = true;  // save refund status to true\n', '        refundCount++;\n', '        totalRefunded = totalRefunded + backer.weiReceived;\n', '\n', '        if (!token.transfer(msg.sender, backer.tokensToSend)) // return allocated tokens\n', '            revert();                            \n', '        msg.sender.transfer(backer.weiReceived);  // send back the contribution \n', '        RefundETH(msg.sender, backer.weiReceived);\n', '        return true;\n', '    }\n', '\n', '   \n', '\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '\n', '    function balanceOf(address who) public view returns(uint);\n', '\n', '    function allowance(address owner, address spender) public view returns(uint);\n', '\n', '    function transfer(address to, uint value) public returns(bool ok);\n', '\n', '    function transferFrom(address from, address to, uint value) public returns(bool ok);\n', '\n', '    function approve(address spender, uint value) public returns(bool ok);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '// The token\n', 'contract Token is ERC20, Ownable {\n', '   \n', '    function unlock() public;\n', '\n', '}']
['pragma solidity ^ 0.4.18;\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint a, uint b) internal pure  returns(uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure  returns(uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure  returns(uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    \n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', '// @notice  Whitelist interface which will hold whitelisted users\n', 'contract WhiteList is Ownable {\n', '\n', '    function isWhiteListed(address _user) external view returns (bool);        \n', '}\n', '\n', '// Crowdsale Smart Contract\n', '// This smart contract collects ETH and in return sends tokens to contributors\n', 'contract Crowdsale is Pausable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    struct Backer {\n', '        uint weiReceived; // amount of ETH contributed\n', '        uint tokensToSend; // amount of tokens  sent      \n', '        bool refunded;\n', '    }\n', '\n', '    Token public token; // Token contract reference   \n', '    address public multisig; // Multisig contract that will receive the ETH    \n', '    address public team; // Address at which the team tokens will be sent        \n', '    uint public ethReceivedPresale; // Number of ETH received in presale\n', '    uint public ethReceivedMain; // Number of ETH received in public sale\n', '    uint public tokensSentPresale; // Tokens sent during presale\n', '    uint public tokensSentMain; // Tokens sent during public ICO   \n', '    uint public totalTokensSent; // Total number of tokens sent to contributors\n', '    uint public startBlock; // Crowdsale start block\n', '    uint public endBlock; // Crowdsale end block\n', '    uint public maxCap; // Maximum number of tokens to sell    \n', '    uint public minInvestETH; // Minimum amount to invest   \n', '    bool public crowdsaleClosed; // Is crowdsale still in progress\n', '    Step public currentStep;  // To allow for controlled steps of the campaign \n', '    uint public refundCount;  // Number of refunds\n', '    uint public totalRefunded; // Total amount of Eth refunded          \n', '    uint public dollarToEtherRatio; // how many dollars are in one eth. Amount uses two decimal values. e.g. $333.44/ETH would be passed as 33344 \n', '    uint public numOfBlocksInMinute; // number of blocks in one minute * 100. eg. \n', '    WhiteList public whiteList;     // whitelist contract\n', '\n', '    mapping(address => Backer) public backers; // contributors list\n', '    address[] public backersIndex; // to be able to iterate through backers for verification.              \n', '    uint public priorTokensSent; \n', '    uint public presaleCap;\n', '   \n', '\n', '    // @notice to verify if action is not performed out of the campaign range\n', '    modifier respectTimeFrame() {\n', '        require(block.number >= startBlock && block.number <= endBlock);\n', '        _;\n', '    }\n', '\n', '    // @notice to set and determine steps of crowdsale\n', '    enum Step {      \n', '        FundingPreSale,     // presale mode\n', '        FundingPublicSale,  // public mode\n', '        Refunding  // in case campaign failed during this step contributors will be able to receive refunds\n', '    }\n', '\n', '    // Events\n', '    event ReceivedETH(address indexed backer, uint amount, uint tokenAmount);\n', '    event RefundETH(address indexed backer, uint amount);\n', '\n', '    // Crowdsale  {constructor}\n', '    // @notice fired when contract is crated. Initializes all constant and initial values.\n', '    // @param _dollarToEtherRatio {uint} how many dollars are in one eth.  $333.44/ETH would be passed as 33344\n', '    function Crowdsale(WhiteList _whiteList) public {               \n', '        multisig = 0x10f78f2a70B52e6c3b490113c72Ba9A90ff1b5CA; \n', '        team = 0x10f78f2a70B52e6c3b490113c72Ba9A90ff1b5CA; \n', '        maxCap = 1510000000e8;             \n', '        minInvestETH = 1 ether/2;    \n', '        currentStep = Step.FundingPreSale;\n', '        dollarToEtherRatio = 56413;       \n', '        numOfBlocksInMinute = 408;          // E.g. 4.38 block/per minute wold be entered as 438                  \n', '        priorTokensSent = 4365098999e7;     //tokens distributed in private sale and airdrops\n', '        whiteList = _whiteList;             // white list address\n', '        presaleCap = 107000000e8;           // max for sell in presale\n', '\n', '    }\n', '\n', '    // @notice to populate website with status of the sale and minimize amout of calls for each variable\n', '    function returnWebsiteData() external view returns(uint, uint, uint, uint, uint, uint, Step, bool, bool) {            \n', '    \n', '        return (startBlock, endBlock, backersIndex.length, ethReceivedPresale + ethReceivedMain, maxCap, totalTokensSent, currentStep, paused, crowdsaleClosed);\n', '    }\n', '\n', '    // @notice Specify address of token contract\n', '    // @param _tokenAddress {address} address of token contract\n', '    // @return res {bool}\n', '    function setTokenAddress(Token _tokenAddress) external onlyOwner() returns(bool res) {\n', '        require(token == address(0));\n', '        token = _tokenAddress;\n', '        return true;\n', '    }\n', '\n', '    // @notice set the step of the campaign from presale to public sale\n', '    // contract is deployed in presale mode\n', '    // WARNING: there is no way to go back\n', '    function advanceStep() public onlyOwner() {\n', '\n', '        currentStep = Step.FundingPublicSale;                                             \n', '        minInvestETH = 1 ether/4;                                     \n', '    }\n', '\n', '    // @notice in case refunds are needed, money can be returned to the contract\n', '    // and contract switched to mode refunding\n', '    function prepareRefund() public payable onlyOwner() {\n', '        \n', '        require(msg.value == ethReceivedPresale.add(ethReceivedMain)); // make sure that proper amount of ether is sent\n', '        currentStep = Step.Refunding;\n', '    }\n', '\n', '    // @notice return number of contributors\n', '    // @return  {uint} number of contributors   \n', '    function numberOfBackers() public view returns(uint) {\n', '        return backersIndex.length;\n', '    }\n', '\n', '    // {fallback function}\n', '    // @notice It will call internal function which handles allocation of Ether and calculates tokens.\n', '    // Contributor will be instructed to specify sufficient amount of gas. e.g. 250,000 \n', '    function () external payable {           \n', '        contribute(msg.sender);\n', '    }\n', '\n', '    // @notice It will be called by owner to start the sale    \n', '    function start(uint _block) external onlyOwner() {   \n', '\n', '        require(_block <= (numOfBlocksInMinute * 60 * 24 * 55)/100);  // allow max 55 days for campaign 323136\n', '        startBlock = block.number;\n', '        endBlock = startBlock.add(_block); \n', '    }\n', '\n', '    // @notice Due to changing average of block time\n', '    // this function will allow on adjusting duration of campaign closer to the end \n', '    function adjustDuration(uint _block) external onlyOwner() {\n', '\n', '        require(_block < (numOfBlocksInMinute * 60 * 24 * 60)/100); // allow for max of 60 days for campaign\n', '        require(_block > block.number.sub(startBlock)); // ensure that endBlock is not set in the past\n', '        endBlock = startBlock.add(_block); \n', '    }   \n', '\n', '    // @notice due to Ether to Dollar flacutation this value will be adjusted during the campaign\n', '    // @param _dollarToEtherRatio {uint} new value of dollar to ether ratio\n', '    function adjustDollarToEtherRatio(uint _dollarToEtherRatio) external onlyOwner() {\n', '        require(_dollarToEtherRatio > 0);\n', '        dollarToEtherRatio = _dollarToEtherRatio;\n', '    }\n', '\n', '    // @notice It will be called by fallback function whenever ether is sent to it\n', '    // @param  _backer {address} address of contributor\n', '    // @return res {bool} true if transaction was successful\n', '    function contribute(address _backer) internal whenNotPaused() respectTimeFrame() returns(bool res) {\n', '\n', '        require(whiteList.isWhiteListed(_backer));      // ensure that user is whitelisted\n', '\n', '        uint tokensToSend = determinePurchase();\n', '            \n', '        Backer storage backer = backers[_backer];\n', '\n', '        if (backer.weiReceived == 0)\n', '            backersIndex.push(_backer);\n', '       \n', "        backer.tokensToSend += tokensToSend; // save contributor's total tokens sent\n", "        backer.weiReceived = backer.weiReceived.add(msg.value);  // save contributor's total ether contributed\n", '\n', '        if (Step.FundingPublicSale == currentStep) { // Update the total Ether received and tokens sent during public sale\n', '            ethReceivedMain = ethReceivedMain.add(msg.value);\n', '            tokensSentMain += tokensToSend;\n', '        }else {                                                 // Update the total Ether recived and tokens sent during presale\n', '            ethReceivedPresale = ethReceivedPresale.add(msg.value); \n', '            tokensSentPresale += tokensToSend;\n', '        }\n', '                                                     \n', '        totalTokensSent += tokensToSend;     // update the total amount of tokens sent        \n', '        multisig.transfer(this.balance);   // transfer funds to multisignature wallet    \n', '\n', '        if (!token.transfer(_backer, tokensToSend)) \n', '            revert(); // Transfer tokens             \n', '\n', '        ReceivedETH(_backer, msg.value, tokensToSend); // Register event\n', '        return true;\n', '    }\n', '\n', '    // @notice determine if purchase is valid and return proper number of tokens\n', '    // @return tokensToSend {uint} proper number of tokens based on the timline\n', '    function determinePurchase() internal view  returns (uint) {\n', '\n', '        require(msg.value >= minInvestETH);   // ensure that min contributions amount is met  \n', '        uint tokenAmount = dollarToEtherRatio.mul(msg.value)/4e10;  // price of token is $0.01 and there are 8 decimals for the token\n', '        \n', '        uint tokensToSend;\n', '          \n', '        if (Step.FundingPublicSale == currentStep) {  // calculate price of token in public sale\n', '            tokensToSend = tokenAmount;\n', "            require(totalTokensSent + tokensToSend + priorTokensSent <= maxCap); // Ensure that max cap hasn't been reached  \n", '        }else {\n', '            tokensToSend = tokenAmount + (tokenAmount * 50) / 100; \n', "            require(totalTokensSent + tokensToSend <= presaleCap); // Ensure that max cap hasn't been reached for presale            \n", '        }                                                        \n', '       \n', '        return tokensToSend;\n', '    }\n', '\n', '    \n', '    // @notice This function will finalize the sale.\n', '    // It will only execute if predetermined sale time passed or all tokens are sold.\n', '    // it will fail if minimum cap is not reached\n', '    function finalize() external onlyOwner() {\n', '\n', '        require(!crowdsaleClosed);        \n', '        // purchasing precise number of tokens might be impractical, thus subtract 1000 \n', '        // tokens so finalization is possible near the end \n', '        require(block.number >= endBlock || totalTokensSent + priorTokensSent >= maxCap - 1000);                        \n', '        crowdsaleClosed = true; \n', '        \n', '        if (!token.transfer(team, token.balanceOf(this))) // transfer all remaining tokens to team address\n', '            revert();        \n', '        token.unlock();                      \n', '    }\n', '\n', '    // @notice Fail-safe drain\n', '    function drain() external onlyOwner() {\n', '        multisig.transfer(this.balance);               \n', '    }\n', '\n', '    // @notice Fail-safe token transfer\n', '    function tokenDrain() external onlyOwner() {\n', '        if (block.number > endBlock) {\n', '            if (!token.transfer(multisig, token.balanceOf(this))) \n', '                revert();\n', '        }\n', '    }\n', '    \n', '    // @notice it will allow contributors to get refund in case campaign failed\n', '    // @return {bool} true if successful\n', '    function refund() external whenNotPaused() returns (bool) {\n', '\n', '        require(currentStep == Step.Refunding);                        \n', '\n', '        Backer storage backer = backers[msg.sender];\n', '\n', '        require(backer.weiReceived > 0);  // ensure that user has sent contribution\n', "        require(!backer.refunded);        // ensure that user hasn't been refunded yet\n", '\n', '        backer.refunded = true;  // save refund status to true\n', '        refundCount++;\n', '        totalRefunded = totalRefunded + backer.weiReceived;\n', '\n', '        if (!token.transfer(msg.sender, backer.tokensToSend)) // return allocated tokens\n', '            revert();                            \n', '        msg.sender.transfer(backer.weiReceived);  // send back the contribution \n', '        RefundETH(msg.sender, backer.weiReceived);\n', '        return true;\n', '    }\n', '\n', '   \n', '\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '\n', '    function balanceOf(address who) public view returns(uint);\n', '\n', '    function allowance(address owner, address spender) public view returns(uint);\n', '\n', '    function transfer(address to, uint value) public returns(bool ok);\n', '\n', '    function transferFrom(address from, address to, uint value) public returns(bool ok);\n', '\n', '    function approve(address spender, uint value) public returns(bool ok);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '// The token\n', 'contract Token is ERC20, Ownable {\n', '   \n', '    function unlock() public;\n', '\n', '}']
