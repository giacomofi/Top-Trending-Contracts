['pragma solidity 0.4.24;\n', '\n', '// File: contracts/tokensale/DipTgeInterface.sol\n', '\n', 'contract DipTgeInterface {\n', '    function tokenIsLocked(address _contributor) public constant returns (bool);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/token/DipToken.sol\n', '\n', '/**\n', ' * @title DIP Token\n', ' * @dev The Decentralized Insurance Platform Token.\n', ' * @author Christoph Mussenbrock\n', ' * @copyright 2017 Etherisc GmbH\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', 'contract DipToken is PausableToken, MintableToken {\n', '\n', '  string public constant name = "Decentralized Insurance Protocol";\n', '  string public constant symbol = "DIP";\n', '  uint256 public constant decimals = 18;\n', '  uint256 public constant MAXIMUM_SUPPLY = 10**9 * 10**18; // 1 Billion 1&#39;000&#39;000&#39;000\n', '\n', '  DipTgeInterface public DipTokensale;\n', '\n', '  constructor() public {\n', '    DipTokensale = DipTgeInterface(owner);\n', '  }\n', '\n', '  modifier shouldNotBeLockedIn(address _contributor) {\n', '    // after LockIntTime2, we don&#39;t need to check anymore, and\n', '    // the DipTokensale contract is no longer required.\n', '    require(DipTokensale.tokenIsLocked(_contributor) == false);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) public returns (bool) {\n', '    if (totalSupply.add(_amount) > MAXIMUM_SUPPLY) {\n', '      return false;\n', '    }\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '  /**\n', '   * Owner can transfer back tokens which have been sent to this contract by mistake.\n', '   * @param  _token address of token contract of the respective tokens\n', '   * @param  _to where to send the tokens\n', '   */\n', '  function salvageTokens(ERC20Basic _token, address _to) onlyOwner public {\n', '    _token.transfer(_to, _token.balanceOf(this));\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) shouldNotBeLockedIn(_from) public returns (bool) {\n', '      return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function transfer(address to, uint256 value) shouldNotBeLockedIn(msg.sender) public returns (bool) {\n', '      return super.transfer(to, value);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', '// File: contracts/tokensale/DipWhitelistedCrowdsale.sol\n', '\n', '/**\n', ' * @title DIP Token Generating Event\n', ' * @dev The Decentralized Insurance Platform Token.\n', ' * @author Christoph Mussenbrock\n', ' * @copyright 2017 Etherisc GmbH\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', 'contract DipWhitelistedCrowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  struct ContributorData {\n', '    uint256 allowance;\n', '    uint256 contributionAmount;\n', '    uint256 tokensIssued;\n', '    bool airdrop;\n', '    uint256 bonus;        // 0 == 0%, 4 == 25%, 10 == 10%\n', '    uint256 lockupPeriod; // 0, 1 or 2 (years)\n', '  }\n', '\n', '  mapping (address => ContributorData) public contributorList;\n', '\n', '  event Whitelisted(address indexed _contributor, uint256 _allowance, bool _airdrop, uint256 _bonus, uint256 _lockupPeriod);\n', '\n', '  /**\n', '   * Push contributor data to the contract before the crowdsale\n', '   */\n', '  function editContributors (\n', '    address[] _contributorAddresses,\n', '    uint256[] _contributorAllowance,\n', '    bool[] _airdrop,\n', '    uint256[] _bonus,\n', '    uint256[] _lockupPeriod\n', '  ) onlyOwner public {\n', '    // Check if input data is consistent\n', '    require(\n', '      _contributorAddresses.length == _contributorAllowance.length &&\n', '      _contributorAddresses.length == _airdrop.length &&\n', '      _contributorAddresses.length == _bonus.length &&\n', '      _contributorAddresses.length == _lockupPeriod.length\n', '    );\n', '\n', '    for (uint256 cnt = 0; cnt < _contributorAddresses.length; cnt = cnt.add(1)) {\n', '      require(_bonus[cnt] == 0 || _bonus[cnt] == 4 || _bonus[cnt] == 10);\n', '      require(_lockupPeriod[cnt] <= 2);\n', '\n', '      address contributor = _contributorAddresses[cnt];\n', '      contributorList[contributor].allowance = _contributorAllowance[cnt];\n', '      contributorList[contributor].airdrop = _airdrop[cnt];\n', '      contributorList[contributor].bonus = _bonus[cnt];\n', '      contributorList[contributor].lockupPeriod = _lockupPeriod[cnt];\n', '\n', '      emit Whitelisted(\n', '        _contributorAddresses[cnt],\n', '        _contributorAllowance[cnt],\n', '        _airdrop[cnt],\n', '        _bonus[cnt],\n', '        _lockupPeriod[cnt]\n', '      );\n', '    }\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '// File: contracts/tokensale/DipTge.sol\n', '\n', '/**\n', ' * @title DIP Token Generating Event\n', ' * @notice The Decentralized Insurance Platform Token.\n', ' * @author Christoph Mussenbrock\n', ' *\n', ' * @copyright 2017 Etherisc GmbH\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DipTge is DipWhitelistedCrowdsale, FinalizableCrowdsale {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  enum state { pendingStart, priorityPass, crowdsale, crowdsaleEnded }\n', '\n', '  uint256 public startOpenPpTime;\n', '  uint256 public hardCap;\n', '  uint256 public lockInTime1; // token lock-in period for team, ECA, US accredited investors\n', '  uint256 public lockInTime2; // token lock-in period for founders\n', '  state public crowdsaleState = state.pendingStart;\n', '\n', '  event DipTgeStarted(uint256 _time);\n', '  event CrowdsaleStarted(uint256 _time);\n', '  event HardCapReached(uint256 _time);\n', '  event DipTgeEnded(uint256 _time);\n', '  event TokenAllocated(address _beneficiary, uint256 _amount);\n', '\n', '  constructor(\n', '    uint256 _startTime,\n', '    uint256 _startOpenPpTime,\n', '    uint256 _endTime,\n', '    uint256 _lockInTime1,\n', '    uint256 _lockInTime2,\n', '    uint256 _hardCap,\n', '    uint256 _rate,\n', '    address _wallet\n', '  )\n', '    Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '    public\n', '  {\n', '    // Check arguments\n', '    require(_startTime >= block.timestamp);\n', '    require(_startOpenPpTime >= _startTime);\n', '    require(_endTime >= _startOpenPpTime);\n', '    require(_lockInTime1 >= _endTime);\n', '    require(_lockInTime2 > _lockInTime1);\n', '    require(_hardCap > 0);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    // Set contract fields\n', '    startOpenPpTime = _startOpenPpTime;\n', '    hardCap = _hardCap;\n', '    lockInTime1 = _lockInTime1;\n', '    lockInTime2 = _lockInTime2;\n', '    DipToken(token).pause();\n', '  }\n', '\n', '  function setRate(uint256 _rate) onlyOwner public {\n', '    require(crowdsaleState == state.pendingStart);\n', '\n', '    rate = _rate;\n', '  }\n', '\n', '  function unpauseToken() onlyOwner external {\n', '    DipToken(token).unpause();\n', '  }\n', '\n', '  /**\n', '   * Calculate the maximum remaining contribution allowed for an address\n', '   * @param  _contributor the address of the contributor\n', '   * @return maxContribution maximum allowed amount in wei\n', '   */\n', '  function calculateMaxContribution(address _contributor) public constant returns (uint256 _maxContribution) {\n', '    uint256 maxContrib = 0;\n', '\n', '    if (crowdsaleState == state.priorityPass) {\n', '      maxContrib = contributorList[_contributor].allowance.sub(contributorList[_contributor].contributionAmount);\n', '\n', '      if (maxContrib > hardCap.sub(weiRaised)) {\n', '        maxContrib = hardCap.sub(weiRaised);\n', '      }\n', '    } else if (crowdsaleState == state.crowdsale) {\n', '      if (contributorList[_contributor].allowance > 0) {\n', '        maxContrib = hardCap.sub(weiRaised);\n', '      }\n', '    }\n', '\n', '    return maxContrib;\n', '  }\n', '\n', '  /**\n', '   * Calculate amount of tokens\n', '   * This is used twice:\n', '   * 1) For calculation of token amount plus optional bonus from wei amount contributed\n', '   * In this case, rate is the defined exchange rate of ETH against DIP.\n', '   * 2) For calculation of token amount plus optional bonus from DIP token amount\n', '   * In the second case, rate == 1 because we have already calculated DIP tokens from RSC amount\n', '   * by applying a factor of 10/32.\n', '   * @param _contributor the address of the contributor\n', '   * @param _amount contribution amount\n', '   * @return _tokens amount of tokens\n', '   */\n', '  function calculateTokens(address _contributor, uint256 _amount, uint256 _rate) public constant returns (uint256 _tokens) {\n', '    uint256 bonus = contributorList[_contributor].bonus;\n', '\n', '    assert(bonus == 0 || bonus == 4 || bonus == 10);\n', '\n', '    if (bonus > 0) {\n', '      _tokens = _amount.add(_amount.div(bonus)).mul(_rate);\n', '    } else {\n', '      _tokens = _amount.mul(_rate);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Set the current state of the crowdsale.\n', '   */\n', '  function setCrowdsaleState() public {\n', '    if (weiRaised >= hardCap && crowdsaleState != state.crowdsaleEnded) {\n', '\n', '      crowdsaleState = state.crowdsaleEnded;\n', '      emit HardCapReached(block.timestamp);\n', '      emit DipTgeEnded(block.timestamp);\n', '\n', '    } else if (\n', '      block.timestamp >= startTime &&\n', '      block.timestamp < startOpenPpTime &&\n', '      crowdsaleState != state.priorityPass\n', '    ) {\n', '\n', '      crowdsaleState = state.priorityPass;\n', '      emit DipTgeStarted(block.timestamp);\n', '\n', '    } else if (\n', '      block.timestamp >= startOpenPpTime &&\n', '      block.timestamp <= endTime &&\n', '      crowdsaleState != state.crowdsale\n', '    ) {\n', '\n', '      crowdsaleState = state.crowdsale;\n', '      emit CrowdsaleStarted(block.timestamp);\n', '\n', '    } else if (\n', '      crowdsaleState != state.crowdsaleEnded &&\n', '      block.timestamp > endTime\n', '    ) {\n', '\n', '      crowdsaleState = state.crowdsaleEnded;\n', '      emit DipTgeEnded(block.timestamp);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * The token buying function.\n', '   * @param  _beneficiary  receiver of tokens.\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '    require(_beneficiary != 0x0);\n', '    require(validPurchase());\n', '    require(contributorList[_beneficiary].airdrop == false);\n', '\n', '    setCrowdsaleState();\n', '\n', '    uint256 weiAmount = msg.value;\n', '    uint256 maxContrib = calculateMaxContribution(_beneficiary);\n', '    uint256 refund;\n', '\n', '    if (weiAmount > maxContrib) {\n', '      refund = weiAmount.sub(maxContrib);\n', '      weiAmount = maxContrib;\n', '    }\n', '\n', '    // stop here if transaction does not yield tokens\n', '    require(weiAmount > 0);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = calculateTokens(_beneficiary, weiAmount, rate);\n', '\n', '    assert(tokens > 0);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    require(token.mint(_beneficiary, tokens));\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '    contributorList[_beneficiary].contributionAmount = contributorList[_beneficiary].contributionAmount.add(weiAmount);\n', '    contributorList[_beneficiary].tokensIssued = contributorList[_beneficiary].tokensIssued.add(tokens);\n', '\n', '    wallet.transfer(weiAmount);\n', '\n', '    if (refund != 0) _beneficiary.transfer(refund);\n', '  }\n', '\n', '  /**\n', '   * Check if token is locked.\n', '   */\n', '  function tokenIsLocked(address _contributor) public constant returns (bool) {\n', '\n', '    if (block.timestamp < lockInTime1 && contributorList[_contributor].lockupPeriod == 1) {\n', '      return true;\n', '    } else if (block.timestamp < lockInTime2 && contributorList[_contributor].lockupPeriod == 2) {\n', '      return true;\n', '    }\n', '\n', '    return false;\n', '\n', '  }\n', '\n', '\n', '  /**\n', '   * Distribute tokens to selected team members & founders.\n', '   * Unit of Allowance is ETH and is converted in number of tokens by multiplying with Rate.\n', '   * This can be called by any whitelisted beneficiary.\n', '   */\n', '  function airdrop() public {\n', '    airdropFor(msg.sender);\n', '  }\n', '\n', '\n', '  /**\n', '   * Alternatively to airdrop(); tokens can be directly sent to beneficiaries by this function\n', '   * This can be called only once.\n', '   */\n', '  function airdropFor(address _beneficiary) public {\n', '    require(_beneficiary != 0x0);\n', '    require(contributorList[_beneficiary].airdrop == true);\n', '    require(contributorList[_beneficiary].tokensIssued == 0);\n', '    require(contributorList[_beneficiary].allowance > 0);\n', '\n', '    setCrowdsaleState();\n', '\n', '    require(crowdsaleState == state.crowdsaleEnded);\n', '\n', '    uint256 amount = contributorList[_beneficiary].allowance.mul(rate);\n', '    require(token.mint(_beneficiary, amount));\n', '    emit TokenAllocated(_beneficiary, amount);\n', '\n', '    contributorList[_beneficiary].tokensIssued = contributorList[_beneficiary].tokensIssued.add(amount);\n', '  }\n', '\n', '  /**\n', '   * Creates an new ERC20 Token contract for the DIP Token.\n', '   * Overrides Crowdsale function\n', '   * @return the created token\n', '   */\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new DipToken();\n', '  }\n', '\n', '  /**\n', '   * Finalize sale and perform cleanup actions.\n', '   */\n', '  function finalization() internal {\n', '    uint256 maxSupply = DipToken(token).MAXIMUM_SUPPLY();\n', '    token.mint(wallet, maxSupply.sub(token.totalSupply())); // Alternativly, hardcode remaining token distribution.\n', '    token.finishMinting();\n', '    token.transferOwnership(owner);\n', '  }\n', '\n', '  /**\n', '   * Owner can transfer back tokens which have been sent to this contract by mistake.\n', '   * @param  _token address of token contract of the respective tokens\n', '   * @param  _to where to send the tokens\n', '   */\n', '  function salvageTokens(ERC20Basic _token, address _to) onlyOwner external {\n', '    _token.transfer(_to, _token.balanceOf(this));\n', '  }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '// File: contracts/tokensale/DipTgeInterface.sol\n', '\n', 'contract DipTgeInterface {\n', '    function tokenIsLocked(address _contributor) public constant returns (bool);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/token/DipToken.sol\n', '\n', '/**\n', ' * @title DIP Token\n', ' * @dev The Decentralized Insurance Platform Token.\n', ' * @author Christoph Mussenbrock\n', ' * @copyright 2017 Etherisc GmbH\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', 'contract DipToken is PausableToken, MintableToken {\n', '\n', '  string public constant name = "Decentralized Insurance Protocol";\n', '  string public constant symbol = "DIP";\n', '  uint256 public constant decimals = 18;\n', "  uint256 public constant MAXIMUM_SUPPLY = 10**9 * 10**18; // 1 Billion 1'000'000'000\n", '\n', '  DipTgeInterface public DipTokensale;\n', '\n', '  constructor() public {\n', '    DipTokensale = DipTgeInterface(owner);\n', '  }\n', '\n', '  modifier shouldNotBeLockedIn(address _contributor) {\n', "    // after LockIntTime2, we don't need to check anymore, and\n", '    // the DipTokensale contract is no longer required.\n', '    require(DipTokensale.tokenIsLocked(_contributor) == false);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) public returns (bool) {\n', '    if (totalSupply.add(_amount) > MAXIMUM_SUPPLY) {\n', '      return false;\n', '    }\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '  /**\n', '   * Owner can transfer back tokens which have been sent to this contract by mistake.\n', '   * @param  _token address of token contract of the respective tokens\n', '   * @param  _to where to send the tokens\n', '   */\n', '  function salvageTokens(ERC20Basic _token, address _to) onlyOwner public {\n', '    _token.transfer(_to, _token.balanceOf(this));\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) shouldNotBeLockedIn(_from) public returns (bool) {\n', '      return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function transfer(address to, uint256 value) shouldNotBeLockedIn(msg.sender) public returns (bool) {\n', '      return super.transfer(to, value);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', '// File: contracts/tokensale/DipWhitelistedCrowdsale.sol\n', '\n', '/**\n', ' * @title DIP Token Generating Event\n', ' * @dev The Decentralized Insurance Platform Token.\n', ' * @author Christoph Mussenbrock\n', ' * @copyright 2017 Etherisc GmbH\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', 'contract DipWhitelistedCrowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  struct ContributorData {\n', '    uint256 allowance;\n', '    uint256 contributionAmount;\n', '    uint256 tokensIssued;\n', '    bool airdrop;\n', '    uint256 bonus;        // 0 == 0%, 4 == 25%, 10 == 10%\n', '    uint256 lockupPeriod; // 0, 1 or 2 (years)\n', '  }\n', '\n', '  mapping (address => ContributorData) public contributorList;\n', '\n', '  event Whitelisted(address indexed _contributor, uint256 _allowance, bool _airdrop, uint256 _bonus, uint256 _lockupPeriod);\n', '\n', '  /**\n', '   * Push contributor data to the contract before the crowdsale\n', '   */\n', '  function editContributors (\n', '    address[] _contributorAddresses,\n', '    uint256[] _contributorAllowance,\n', '    bool[] _airdrop,\n', '    uint256[] _bonus,\n', '    uint256[] _lockupPeriod\n', '  ) onlyOwner public {\n', '    // Check if input data is consistent\n', '    require(\n', '      _contributorAddresses.length == _contributorAllowance.length &&\n', '      _contributorAddresses.length == _airdrop.length &&\n', '      _contributorAddresses.length == _bonus.length &&\n', '      _contributorAddresses.length == _lockupPeriod.length\n', '    );\n', '\n', '    for (uint256 cnt = 0; cnt < _contributorAddresses.length; cnt = cnt.add(1)) {\n', '      require(_bonus[cnt] == 0 || _bonus[cnt] == 4 || _bonus[cnt] == 10);\n', '      require(_lockupPeriod[cnt] <= 2);\n', '\n', '      address contributor = _contributorAddresses[cnt];\n', '      contributorList[contributor].allowance = _contributorAllowance[cnt];\n', '      contributorList[contributor].airdrop = _airdrop[cnt];\n', '      contributorList[contributor].bonus = _bonus[cnt];\n', '      contributorList[contributor].lockupPeriod = _lockupPeriod[cnt];\n', '\n', '      emit Whitelisted(\n', '        _contributorAddresses[cnt],\n', '        _contributorAllowance[cnt],\n', '        _airdrop[cnt],\n', '        _bonus[cnt],\n', '        _lockupPeriod[cnt]\n', '      );\n', '    }\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '// File: contracts/tokensale/DipTge.sol\n', '\n', '/**\n', ' * @title DIP Token Generating Event\n', ' * @notice The Decentralized Insurance Platform Token.\n', ' * @author Christoph Mussenbrock\n', ' *\n', ' * @copyright 2017 Etherisc GmbH\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DipTge is DipWhitelistedCrowdsale, FinalizableCrowdsale {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  enum state { pendingStart, priorityPass, crowdsale, crowdsaleEnded }\n', '\n', '  uint256 public startOpenPpTime;\n', '  uint256 public hardCap;\n', '  uint256 public lockInTime1; // token lock-in period for team, ECA, US accredited investors\n', '  uint256 public lockInTime2; // token lock-in period for founders\n', '  state public crowdsaleState = state.pendingStart;\n', '\n', '  event DipTgeStarted(uint256 _time);\n', '  event CrowdsaleStarted(uint256 _time);\n', '  event HardCapReached(uint256 _time);\n', '  event DipTgeEnded(uint256 _time);\n', '  event TokenAllocated(address _beneficiary, uint256 _amount);\n', '\n', '  constructor(\n', '    uint256 _startTime,\n', '    uint256 _startOpenPpTime,\n', '    uint256 _endTime,\n', '    uint256 _lockInTime1,\n', '    uint256 _lockInTime2,\n', '    uint256 _hardCap,\n', '    uint256 _rate,\n', '    address _wallet\n', '  )\n', '    Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '    public\n', '  {\n', '    // Check arguments\n', '    require(_startTime >= block.timestamp);\n', '    require(_startOpenPpTime >= _startTime);\n', '    require(_endTime >= _startOpenPpTime);\n', '    require(_lockInTime1 >= _endTime);\n', '    require(_lockInTime2 > _lockInTime1);\n', '    require(_hardCap > 0);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    // Set contract fields\n', '    startOpenPpTime = _startOpenPpTime;\n', '    hardCap = _hardCap;\n', '    lockInTime1 = _lockInTime1;\n', '    lockInTime2 = _lockInTime2;\n', '    DipToken(token).pause();\n', '  }\n', '\n', '  function setRate(uint256 _rate) onlyOwner public {\n', '    require(crowdsaleState == state.pendingStart);\n', '\n', '    rate = _rate;\n', '  }\n', '\n', '  function unpauseToken() onlyOwner external {\n', '    DipToken(token).unpause();\n', '  }\n', '\n', '  /**\n', '   * Calculate the maximum remaining contribution allowed for an address\n', '   * @param  _contributor the address of the contributor\n', '   * @return maxContribution maximum allowed amount in wei\n', '   */\n', '  function calculateMaxContribution(address _contributor) public constant returns (uint256 _maxContribution) {\n', '    uint256 maxContrib = 0;\n', '\n', '    if (crowdsaleState == state.priorityPass) {\n', '      maxContrib = contributorList[_contributor].allowance.sub(contributorList[_contributor].contributionAmount);\n', '\n', '      if (maxContrib > hardCap.sub(weiRaised)) {\n', '        maxContrib = hardCap.sub(weiRaised);\n', '      }\n', '    } else if (crowdsaleState == state.crowdsale) {\n', '      if (contributorList[_contributor].allowance > 0) {\n', '        maxContrib = hardCap.sub(weiRaised);\n', '      }\n', '    }\n', '\n', '    return maxContrib;\n', '  }\n', '\n', '  /**\n', '   * Calculate amount of tokens\n', '   * This is used twice:\n', '   * 1) For calculation of token amount plus optional bonus from wei amount contributed\n', '   * In this case, rate is the defined exchange rate of ETH against DIP.\n', '   * 2) For calculation of token amount plus optional bonus from DIP token amount\n', '   * In the second case, rate == 1 because we have already calculated DIP tokens from RSC amount\n', '   * by applying a factor of 10/32.\n', '   * @param _contributor the address of the contributor\n', '   * @param _amount contribution amount\n', '   * @return _tokens amount of tokens\n', '   */\n', '  function calculateTokens(address _contributor, uint256 _amount, uint256 _rate) public constant returns (uint256 _tokens) {\n', '    uint256 bonus = contributorList[_contributor].bonus;\n', '\n', '    assert(bonus == 0 || bonus == 4 || bonus == 10);\n', '\n', '    if (bonus > 0) {\n', '      _tokens = _amount.add(_amount.div(bonus)).mul(_rate);\n', '    } else {\n', '      _tokens = _amount.mul(_rate);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Set the current state of the crowdsale.\n', '   */\n', '  function setCrowdsaleState() public {\n', '    if (weiRaised >= hardCap && crowdsaleState != state.crowdsaleEnded) {\n', '\n', '      crowdsaleState = state.crowdsaleEnded;\n', '      emit HardCapReached(block.timestamp);\n', '      emit DipTgeEnded(block.timestamp);\n', '\n', '    } else if (\n', '      block.timestamp >= startTime &&\n', '      block.timestamp < startOpenPpTime &&\n', '      crowdsaleState != state.priorityPass\n', '    ) {\n', '\n', '      crowdsaleState = state.priorityPass;\n', '      emit DipTgeStarted(block.timestamp);\n', '\n', '    } else if (\n', '      block.timestamp >= startOpenPpTime &&\n', '      block.timestamp <= endTime &&\n', '      crowdsaleState != state.crowdsale\n', '    ) {\n', '\n', '      crowdsaleState = state.crowdsale;\n', '      emit CrowdsaleStarted(block.timestamp);\n', '\n', '    } else if (\n', '      crowdsaleState != state.crowdsaleEnded &&\n', '      block.timestamp > endTime\n', '    ) {\n', '\n', '      crowdsaleState = state.crowdsaleEnded;\n', '      emit DipTgeEnded(block.timestamp);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * The token buying function.\n', '   * @param  _beneficiary  receiver of tokens.\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '    require(_beneficiary != 0x0);\n', '    require(validPurchase());\n', '    require(contributorList[_beneficiary].airdrop == false);\n', '\n', '    setCrowdsaleState();\n', '\n', '    uint256 weiAmount = msg.value;\n', '    uint256 maxContrib = calculateMaxContribution(_beneficiary);\n', '    uint256 refund;\n', '\n', '    if (weiAmount > maxContrib) {\n', '      refund = weiAmount.sub(maxContrib);\n', '      weiAmount = maxContrib;\n', '    }\n', '\n', '    // stop here if transaction does not yield tokens\n', '    require(weiAmount > 0);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = calculateTokens(_beneficiary, weiAmount, rate);\n', '\n', '    assert(tokens > 0);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    require(token.mint(_beneficiary, tokens));\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '    contributorList[_beneficiary].contributionAmount = contributorList[_beneficiary].contributionAmount.add(weiAmount);\n', '    contributorList[_beneficiary].tokensIssued = contributorList[_beneficiary].tokensIssued.add(tokens);\n', '\n', '    wallet.transfer(weiAmount);\n', '\n', '    if (refund != 0) _beneficiary.transfer(refund);\n', '  }\n', '\n', '  /**\n', '   * Check if token is locked.\n', '   */\n', '  function tokenIsLocked(address _contributor) public constant returns (bool) {\n', '\n', '    if (block.timestamp < lockInTime1 && contributorList[_contributor].lockupPeriod == 1) {\n', '      return true;\n', '    } else if (block.timestamp < lockInTime2 && contributorList[_contributor].lockupPeriod == 2) {\n', '      return true;\n', '    }\n', '\n', '    return false;\n', '\n', '  }\n', '\n', '\n', '  /**\n', '   * Distribute tokens to selected team members & founders.\n', '   * Unit of Allowance is ETH and is converted in number of tokens by multiplying with Rate.\n', '   * This can be called by any whitelisted beneficiary.\n', '   */\n', '  function airdrop() public {\n', '    airdropFor(msg.sender);\n', '  }\n', '\n', '\n', '  /**\n', '   * Alternatively to airdrop(); tokens can be directly sent to beneficiaries by this function\n', '   * This can be called only once.\n', '   */\n', '  function airdropFor(address _beneficiary) public {\n', '    require(_beneficiary != 0x0);\n', '    require(contributorList[_beneficiary].airdrop == true);\n', '    require(contributorList[_beneficiary].tokensIssued == 0);\n', '    require(contributorList[_beneficiary].allowance > 0);\n', '\n', '    setCrowdsaleState();\n', '\n', '    require(crowdsaleState == state.crowdsaleEnded);\n', '\n', '    uint256 amount = contributorList[_beneficiary].allowance.mul(rate);\n', '    require(token.mint(_beneficiary, amount));\n', '    emit TokenAllocated(_beneficiary, amount);\n', '\n', '    contributorList[_beneficiary].tokensIssued = contributorList[_beneficiary].tokensIssued.add(amount);\n', '  }\n', '\n', '  /**\n', '   * Creates an new ERC20 Token contract for the DIP Token.\n', '   * Overrides Crowdsale function\n', '   * @return the created token\n', '   */\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new DipToken();\n', '  }\n', '\n', '  /**\n', '   * Finalize sale and perform cleanup actions.\n', '   */\n', '  function finalization() internal {\n', '    uint256 maxSupply = DipToken(token).MAXIMUM_SUPPLY();\n', '    token.mint(wallet, maxSupply.sub(token.totalSupply())); // Alternativly, hardcode remaining token distribution.\n', '    token.finishMinting();\n', '    token.transferOwnership(owner);\n', '  }\n', '\n', '  /**\n', '   * Owner can transfer back tokens which have been sent to this contract by mistake.\n', '   * @param  _token address of token contract of the respective tokens\n', '   * @param  _to where to send the tokens\n', '   */\n', '  function salvageTokens(ERC20Basic _token, address _to) onlyOwner external {\n', '    _token.transfer(_to, _token.balanceOf(this));\n', '  }\n', '}']
