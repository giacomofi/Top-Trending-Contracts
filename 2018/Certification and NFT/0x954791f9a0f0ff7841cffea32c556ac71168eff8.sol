['pragma solidity 0.4.23;\n', '\n', '// Random lottery\n', '// Smart contracts can&#39;t bet\n', '\n', '// Pay 0.001 to get a random number\n', '// If your random number is the highest so far you&#39;re in the lead\n', '// If no one beats you in 1 day you can claim your winnnings - the entire balance.\n', '\n', 'contract RandoLotto {\n', '    \n', '    uint256 PrizePool;\n', '    uint256 highScore;\n', '    address currentWinner;\n', '    uint256 lastTimestamp;\n', '    \n', '    constructor () public {\n', '        highScore = 0;\n', '        currentWinner = msg.sender;\n', '        lastTimestamp = now;\n', '    }\n', '    \n', '    function () public payable {\n', '        require(msg.sender == tx.origin);\n', '        require(msg.value >= 0.001 ether);\n', '    \n', '        uint256 randomNumber = uint256(keccak256(blockhash(block.number - 1)));\n', '        \n', '        if (randomNumber > highScore) {\n', '            currentWinner = msg.sender;\n', '            lastTimestamp = now;\n', '        }\n', '    }\n', '    \n', '    function claimWinnings() public {\n', '        require(now > lastTimestamp + 1 days);\n', '        require(msg.sender == currentWinner);\n', '        \n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
['pragma solidity 0.4.23;\n', '\n', '// Random lottery\n', "// Smart contracts can't bet\n", '\n', '// Pay 0.001 to get a random number\n', "// If your random number is the highest so far you're in the lead\n", '// If no one beats you in 1 day you can claim your winnnings - the entire balance.\n', '\n', 'contract RandoLotto {\n', '    \n', '    uint256 PrizePool;\n', '    uint256 highScore;\n', '    address currentWinner;\n', '    uint256 lastTimestamp;\n', '    \n', '    constructor () public {\n', '        highScore = 0;\n', '        currentWinner = msg.sender;\n', '        lastTimestamp = now;\n', '    }\n', '    \n', '    function () public payable {\n', '        require(msg.sender == tx.origin);\n', '        require(msg.value >= 0.001 ether);\n', '    \n', '        uint256 randomNumber = uint256(keccak256(blockhash(block.number - 1)));\n', '        \n', '        if (randomNumber > highScore) {\n', '            currentWinner = msg.sender;\n', '            lastTimestamp = now;\n', '        }\n', '    }\n', '    \n', '    function claimWinnings() public {\n', '        require(now > lastTimestamp + 1 days);\n', '        require(msg.sender == currentWinner);\n', '        \n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
