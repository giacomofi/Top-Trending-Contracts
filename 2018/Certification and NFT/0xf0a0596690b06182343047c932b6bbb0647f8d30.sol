['pragma solidity ^0.4.18;\n', '\n', 'contract WineMarket{\n', '\n', '    bool public initialized=false;\n', '    address public ceoAddress;\n', '    address public ceoWallet;\n', '\n', '    uint256 public marketWine;\n', '\n', '    mapping (address => uint256) public totalWineTransferredFromVineyard;\n', '    mapping (address => uint256) public currentWineAmount;\n', '\n', '    address constant public VINEYARD_ADDRESS = 0x66593d57B26Ed56Fd7881a016fcd0AF66636A9F0;\n', '    VineyardInterface vineyardContract;\n', '\n', '    function WineMarket(address _wallet) public{\n', '        require(_wallet != address(0));\n', '        ceoAddress = msg.sender;\n', '        ceoWallet = _wallet;\n', '        vineyardContract = VineyardInterface(VINEYARD_ADDRESS);\n', '    }\n', '\n', '    function transferWalletOwnership(address newWalletAddress) public {\n', '      require(msg.sender == ceoAddress);\n', '      require(newWalletAddress != address(0));\n', '      ceoWallet = newWalletAddress;\n', '    }\n', '\n', '    modifier initializedMarket {\n', '        require(initialized);\n', '        _;\n', '    }\n', '\n', '    function transferWineFromVineyardCellar() initializedMarket public {\n', '        require(vineyardContract.wineInCellar(msg.sender) > totalWineTransferredFromVineyard[msg.sender]);\n', '        // More wine bottles have been produced from Vineyard. Transfer the difference here.\n', '        uint256 wineToTransfer = SafeMath.sub(vineyardContract.wineInCellar(msg.sender),totalWineTransferredFromVineyard[msg.sender]);\n', '        currentWineAmount[msg.sender] = SafeMath.add(currentWineAmount[msg.sender],wineToTransfer);\n', '        totalWineTransferredFromVineyard[msg.sender] = SafeMath.add(totalWineTransferredFromVineyard[msg.sender],wineToTransfer);\n', '    }\n', '\n', '    function consumeWine(uint256 numBottlesToConsume) initializedMarket public returns(uint256) {\n', '        require(currentWineAmount[msg.sender] > 0);\n', '        require(numBottlesToConsume >= currentWineAmount[msg.sender]);\n', '\n', '        // Once wine is consumed, it is gone forever\n', '        currentWineAmount[msg.sender] = SafeMath.sub(currentWineAmount[msg.sender],numBottlesToConsume);\n', '\n', '        // return amount consumed\n', '        return numBottlesToConsume;\n', '    }\n', '\n', '    function sellWine(uint256 numBottlesToSell) initializedMarket public {\n', '        require(numBottlesToSell > 0);\n', '\n', '        uint256 myAvailableWine = currentWineAmount[msg.sender];\n', '        uint256 adjustedNumBottlesToSell = numBottlesToSell;\n', '        if (numBottlesToSell > myAvailableWine) {\n', '          // don&#39;t allow sell larger than the owner actually has\n', '          adjustedNumBottlesToSell = myAvailableWine;\n', '        }\n', '        if (adjustedNumBottlesToSell > marketWine) {\n', '          // don&#39;t allow sell larger than the current market holdings\n', '          adjustedNumBottlesToSell = marketWine;\n', '        }\n', '\n', '        uint256 wineValue = calculateWineSellSimple(adjustedNumBottlesToSell);\n', '        uint256 fee = devFee(wineValue);\n', '        currentWineAmount[msg.sender] = SafeMath.sub(myAvailableWine, adjustedNumBottlesToSell);\n', '        marketWine = SafeMath.add(marketWine,adjustedNumBottlesToSell);\n', '        ceoWallet.transfer(fee);\n', '        msg.sender.transfer(SafeMath.sub(wineValue, fee));\n', '    }\n', '\n', '    function buyWine() initializedMarket public payable{\n', '        require(msg.value <= SafeMath.sub(this.balance,msg.value));\n', '\n', '        uint256 fee = devFee(msg.value);\n', '        uint256 buyValue = SafeMath.sub(msg.value, fee);\n', '        uint256 wineBought = calculateWineBuy(buyValue, SafeMath.sub(this.balance, buyValue));\n', '        marketWine = SafeMath.sub(marketWine, wineBought);\n', '        ceoWallet.transfer(fee);\n', '        currentWineAmount[msg.sender] = SafeMath.add(currentWineAmount[msg.sender],wineBought);\n', '    }\n', '\n', '    function calculateTrade(uint256 valueIn, uint256 marketInv, uint256 Balance) public pure returns(uint256) {\n', '        return SafeMath.div(SafeMath.mul(Balance, 10000), SafeMath.add(SafeMath.div(SafeMath.add(SafeMath.mul(marketInv,10000), SafeMath.mul(valueIn, 5000)), valueIn), 5000));\n', '    }\n', '\n', '    function calculateWineSell(uint256 wine, uint256 marketWineValue) public view returns(uint256) {\n', '        return calculateTrade(wine, marketWineValue, this.balance);\n', '    }\n', '\n', '    function calculateWineSellSimple(uint256 wine) public view returns(uint256) {\n', '        return calculateTrade(wine, marketWine, this.balance);\n', '    }\n', '\n', '    function calculateWineBuy(uint256 eth,uint256 contractBalance) public view returns(uint256) {\n', '        return calculateTrade(eth,contractBalance,marketWine);\n', '    }\n', '\n', '    function calculateWineBuySimple(uint256 eth) public view returns(uint256) {\n', '        return calculateWineBuy(eth,this.balance);\n', '    }\n', '\n', '    function devFee(uint256 amount) public pure returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(amount,3), 100);\n', '    }\n', '\n', '    function seedMarket(uint256 wineBottles) public payable{\n', '        require(marketWine == 0);\n', '        require(ceoAddress == msg.sender);\n', '        initialized = true;\n', '        marketWine = wineBottles;\n', '    }\n', '\n', '    function getBalance() public view returns(uint256) {\n', '        return this.balance;\n', '    }\n', '\n', '    function getMyWine() public view returns(uint256) {\n', '        return SafeMath.add(SafeMath.sub(vineyardContract.wineInCellar(msg.sender),totalWineTransferredFromVineyard[msg.sender]),currentWineAmount[msg.sender]);\n', '    }\n', '\n', '    function getMyTransferredWine() public view returns(uint256) {\n', '        return totalWineTransferredFromVineyard[msg.sender];\n', '    }\n', '\n', '    function getMyAvailableWine() public view returns(uint256) {\n', '        return currentWineAmount[msg.sender];\n', '    }\n', '}\n', '\n', 'contract VineyardInterface {\n', '    function wineInCellar(address) public returns (uint256);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']