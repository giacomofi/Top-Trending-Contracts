['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\n', '\n', '/**\n', ' * @title DetailedERC20 token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '// File: contracts/interface/IBasicMultiToken.sol\n', '\n', 'contract IBasicMultiToken is ERC20 {\n', '    event Bundle(address indexed who, address indexed beneficiary, uint256 value);\n', '    event Unbundle(address indexed who, address indexed beneficiary, uint256 value);\n', '\n', '    ERC20[] public tokens;\n', '\n', '    function tokensCount() public view returns(uint256);\n', '\n', '    function bundleFirstTokens(address _beneficiary, uint256 _amount, uint256[] _tokenAmounts) public;\n', '    function bundle(address _beneficiary, uint256 _amount) public;\n', '\n', '    function unbundle(address _beneficiary, uint256 _value) public;\n', '    function unbundleSome(address _beneficiary, uint256 _value, ERC20[] _tokens) public;\n', '\n', '    function disableBundling() public;\n', '    function enableBundling() public;\n', '}\n', '\n', '// File: contracts/interface/IMultiToken.sol\n', '\n', 'contract IMultiToken is IBasicMultiToken {\n', '    event Update();\n', '    event Change(address indexed _fromToken, address indexed _toToken, address indexed _changer, uint256 _amount, uint256 _return);\n', '\n', '    mapping(address => uint256) public weights;\n', '\n', '    function getReturn(address _fromToken, address _toToken, uint256 _amount) public view returns (uint256 returnAmount);\n', '    function change(address _fromToken, address _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256 returnAmount);\n', '\n', '    function disableChanges() public;\n', '}\n', '\n', '// File: contracts/interface/IMultiTokenInfo.sol\n', '\n', 'contract IMultiTokenInfo {\n', '    function allTokens(IBasicMultiToken _mtkn) public view returns(ERC20[] _tokens);\n', '\n', '    function allBalances(IBasicMultiToken _mtkn) public view returns(uint256[] _balances);\n', '\n', '    function allDecimals(IBasicMultiToken _mtkn) public view returns(uint8[] _decimals);\n', '\n', '    function allNames(IBasicMultiToken _mtkn) public view returns(bytes32[] _names);\n', '\n', '    function allSymbols(IBasicMultiToken _mtkn) public view returns(bytes32[] _symbols);\n', '\n', '    function allTokensBalancesDecimalsNamesSymbols(IBasicMultiToken _mtkn) public view returns(\n', '        ERC20[] _tokens,\n', '        uint256[] _balances,\n', '        uint8[] _decimals,\n', '        bytes32[] _names,\n', '        bytes32[] _symbols\n', '        );\n', '\n', '    // MultiToken\n', '\n', '    function allWeights(IMultiToken _mtkn) public view returns(uint256[] _weights);\n', '\n', '    function allTokensBalancesDecimalsNamesSymbolsWeights(IMultiToken _mtkn) public view returns(\n', '        ERC20[] _tokens,\n', '        uint256[] _balances,\n', '        uint8[] _decimals,\n', '        bytes32[] _names,\n', '        bytes32[] _symbols,\n', '        uint256[] _weights\n', '        );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/ext/CheckedERC20.sol\n', '\n', 'library CheckedERC20 {\n', '    using SafeMath for uint;\n', '\n', '    function isContract(address addr) internal view returns(bool result) {\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            result := gt(extcodesize(addr), 0)\n', '        }\n', '    }\n', '\n', '    function handleReturnBool() internal pure returns(bool result) {\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            switch returndatasize()\n', '            case 0 { // not a std erc20\n', '                result := 1\n', '            }\n', '            case 32 { // std erc20\n', '                returndatacopy(0, 0, 32)\n', '                result := mload(0)\n', '            }\n', '            default { // anything else, should revert for safety\n', '                revert(0, 0)\n', '            }\n', '        }\n', '    }\n', '\n', '    function handleReturnBytes32() internal pure returns(bytes32 result) {\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            if eq(returndatasize(), 32) { // not a std erc20\n', '                returndatacopy(0, 0, 32)\n', '                result := mload(0)\n', '            }\n', '            if gt(returndatasize(), 32) { // std erc20\n', '                returndatacopy(0, 64, 32)\n', '                result := mload(0)\n', '            }\n', '            if lt(returndatasize(), 32) { // anything else, should revert for safety\n', '                revert(0, 0)\n', '            }\n', '        }\n', '    }\n', '\n', '    function asmTransfer(address _token, address _to, uint256 _value) internal returns(bool) {\n', '        require(isContract(_token));\n', '        // solium-disable-next-line security/no-low-level-calls\n', '        require(_token.call(bytes4(keccak256("transfer(address,uint256)")), _to, _value));\n', '        return handleReturnBool();\n', '    }\n', '\n', '    function asmTransferFrom(address _token, address _from, address _to, uint256 _value) internal returns(bool) {\n', '        require(isContract(_token));\n', '        // solium-disable-next-line security/no-low-level-calls\n', '        require(_token.call(bytes4(keccak256("transferFrom(address,address,uint256)")), _from, _to, _value));\n', '        return handleReturnBool();\n', '    }\n', '\n', '    function asmApprove(address _token, address _spender, uint256 _value) internal returns(bool) {\n', '        require(isContract(_token));\n', '        // solium-disable-next-line security/no-low-level-calls\n', '        require(_token.call(bytes4(keccak256("approve(address,uint256)")), _spender, _value));\n', '        return handleReturnBool();\n', '    }\n', '\n', '    //\n', '\n', '    function checkedTransfer(ERC20 _token, address _to, uint256 _value) internal {\n', '        if (_value > 0) {\n', '            uint256 balance = _token.balanceOf(this);\n', '            asmTransfer(_token, _to, _value);\n', '            require(_token.balanceOf(this) == balance.sub(_value), "checkedTransfer: Final balance didn&#39;t match");\n', '        }\n', '    }\n', '\n', '    function checkedTransferFrom(ERC20 _token, address _from, address _to, uint256 _value) internal {\n', '        if (_value > 0) {\n', '            uint256 toBalance = _token.balanceOf(_to);\n', '            asmTransferFrom(_token, _from, _to, _value);\n', '            require(_token.balanceOf(_to) == toBalance.add(_value), "checkedTransfer: Final balance didn&#39;t match");\n', '        }\n', '    }\n', '\n', '    //\n', '\n', '    function asmName(address _token) public view returns(bytes32) {\n', '        require(isContract(_token));\n', '        // solium-disable-next-line security/no-low-level-calls\n', '        require(_token.call(bytes4(keccak256("name()"))));\n', '        return handleReturnBytes32();\n', '    }\n', '\n', '    function asmSymbol(address _token) public view returns(bytes32) {\n', '        require(isContract(_token));\n', '        // solium-disable-next-line security/no-low-level-calls\n', '        require(_token.call(bytes4(keccak256("symbol()"))));\n', '        return handleReturnBytes32();\n', '    }\n', '}\n', '\n', '// File: contracts/MultiTokenInfo.sol\n', '\n', 'contract MultiTokenInfo is IMultiTokenInfo {\n', '    using CheckedERC20 for DetailedERC20;\n', '\n', '    // BasicMultiToken\n', '\n', '    function allTokens(IBasicMultiToken _mtkn) public view returns(ERC20[] _tokens) {\n', '        _tokens = new ERC20[](_mtkn.tokensCount());\n', '        for (uint i = 0; i < _tokens.length; i++) {\n', '            _tokens[i] = _mtkn.tokens(i);\n', '        }\n', '    }\n', '\n', '    function allBalances(IBasicMultiToken _mtkn) public view returns(uint256[] _balances) {\n', '        _balances = new uint256[](_mtkn.tokensCount());\n', '        for (uint i = 0; i < _balances.length; i++) {\n', '            _balances[i] = _mtkn.tokens(i).balanceOf(_mtkn);\n', '        }\n', '    }\n', '\n', '    function allDecimals(IBasicMultiToken _mtkn) public view returns(uint8[] _decimals) {\n', '        _decimals = new uint8[](_mtkn.tokensCount());\n', '        for (uint i = 0; i < _decimals.length; i++) {\n', '            _decimals[i] = DetailedERC20(_mtkn.tokens(i)).decimals();\n', '        }\n', '    }\n', '\n', '    function allNames(IBasicMultiToken _mtkn) public view returns(bytes32[] _names) {\n', '        _names = new bytes32[](_mtkn.tokensCount());\n', '        for (uint i = 0; i < _names.length; i++) {\n', '            _names[i] = DetailedERC20(_mtkn.tokens(i)).asmName();\n', '        }\n', '    }\n', '\n', '    function allSymbols(IBasicMultiToken _mtkn) public view returns(bytes32[] _symbols) {\n', '        _symbols = new bytes32[](_mtkn.tokensCount());\n', '        for (uint i = 0; i < _symbols.length; i++) {\n', '            _symbols[i] = DetailedERC20(_mtkn.tokens(i)).asmSymbol();\n', '        }\n', '    }\n', '\n', '    function allTokensBalancesDecimalsNamesSymbols(IBasicMultiToken _mtkn) public view returns(\n', '        ERC20[] _tokens,\n', '        uint256[] _balances,\n', '        uint8[] _decimals,\n', '        bytes32[] _names,\n', '        bytes32[] _symbols\n', '    ) {\n', '        _tokens = allTokens(_mtkn);\n', '        _balances = allBalances(_mtkn);\n', '        _decimals = allDecimals(_mtkn);\n', '        _names = allNames(_mtkn);\n', '        _symbols = allSymbols(_mtkn);\n', '    }\n', '\n', '    // MultiToken\n', '\n', '    function allWeights(IMultiToken _mtkn) public view returns(uint256[] _weights) {\n', '        _weights = new uint256[](_mtkn.tokensCount());\n', '        for (uint i = 0; i < _weights.length; i++) {\n', '            _weights[i] = _mtkn.weights(_mtkn.tokens(i));\n', '        }\n', '    }\n', '\n', '    function allTokensBalancesDecimalsNamesSymbolsWeights(IMultiToken _mtkn) public view returns(\n', '        ERC20[] _tokens,\n', '        uint256[] _balances,\n', '        uint8[] _decimals,\n', '        bytes32[] _names,\n', '        bytes32[] _symbols,\n', '        uint256[] _weights\n', '    ) {\n', '        (_tokens, _balances, _decimals, _names, _symbols) = allTokensBalancesDecimalsNamesSymbols(_mtkn);\n', '        _weights = allWeights(_mtkn);\n', '    }\n', '}']