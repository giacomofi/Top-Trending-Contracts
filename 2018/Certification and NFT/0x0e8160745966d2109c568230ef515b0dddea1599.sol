['pragma solidity ^0.4.18;\n', '\n', 'interface token {\n', '    function transferFrom(address _from, address _to, uint256 _value) public;\n', '}\n', '\n', 'contract CrowdSale {\n', '    address public beneficiary;\n', '    uint public fundingGoal;\n', '    uint public amountRaised;\n', '    uint public startTime;\n', '    uint public deadline;\n', '    uint public endFirstBonus;\n', '    uint public endSecondBonus;\n', '    uint public endThirdBonus;\n', '    uint public hardCap;\n', '    uint public price;\n', '    uint public minPurchase;\n', '    token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '    bool fundingGoalReached = false;\n', '    bool public crowdsaleClosed = false;\n', '\n', '    event GoalReached(address recipient, uint totalAmountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    event CrowdsaleClose(uint totalAmountRaised, bool fundingGoalReached);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function CrowdSale(\n', '        address ifSuccessfulSendTo,\n', '        address addressOfTokenUsedAsReward,\n', '        uint tokensPerEth,\n', '        uint _minPurchase,\n', '        uint fundingGoalInWei,\n', '        uint hardCapInWei,\n', '        uint startTimeInSeconds,\n', '        uint durationInMinutes,\n', '        uint _endFirstBonus,\n', '        uint _endSecondBonus,\n', '        uint _endThirdBonus\n', '    ) public {\n', '        beneficiary = ifSuccessfulSendTo;\n', '        tokenReward = token(addressOfTokenUsedAsReward);\n', '        price = tokensPerEth;\n', '        minPurchase = _minPurchase;\n', '        fundingGoal = fundingGoalInWei;\n', '        hardCap = hardCapInWei;\n', '        startTime = startTimeInSeconds;\n', '        deadline = startTimeInSeconds + durationInMinutes * 1 minutes;\n', '        endFirstBonus = _endFirstBonus;\n', '        endSecondBonus = _endSecondBonus;\n', '        endThirdBonus = _endThirdBonus;\n', '    }\n', '\n', '    /**\n', '     * Do purchase process\n', '     *\n', '     */\n', '    function purchase() internal {\n', '        uint amount = msg.value;\n', '        uint vp = amount * price;\n', '        uint tokens = ((vp + ((vp * getBonus()) / 100))) / 1 ether;\n', '        balanceOf[msg.sender] += amount;\n', '        amountRaised += amount;\n', '        tokenReward.transferFrom(beneficiary, msg.sender, tokens);\n', '        checkGoalReached();\n', '        FundTransfer(msg.sender, amount, true);\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function()\n', '    payable\n', '    isOpen\n', '    afterStart\n', '    hardCapNotReached\n', '    aboveMinValue\n', '    public {\n', '        purchase();\n', '    }\n', '\n', '    /**\n', '     * The function called only from shiftsale\n', '     *\n', '     */\n', '    function shiftSalePurchase()\n', '    payable\n', '    isOpen\n', '    afterStart\n', '    hardCapNotReached\n', '    aboveMinValue\n', '    public returns (bool success) {\n', '        purchase();\n', '        return true;\n', '    }\n', '\n', '    modifier afterStart() {\n', '        require(now >= startTime);\n', '        _;\n', '    }\n', '\n', '    modifier afterDeadline() {\n', '        require(now >= deadline);\n', '        _;\n', '    }\n', '\n', '    modifier previousDeadline() {\n', '        require(now <= deadline);\n', '        _;\n', '    }\n', '\n', '    modifier isOwner() {\n', '        require(msg.sender == beneficiary);\n', '        _;\n', '    }\n', '\n', '    modifier isClosed() {\n', '        require(crowdsaleClosed);\n', '        _;\n', '    }\n', '\n', '    modifier isOpen() {\n', '        require(!crowdsaleClosed);\n', '        _;\n', '    }\n', '\n', '    modifier hardCapNotReached() {\n', '        require(amountRaised < hardCap);\n', '        _;\n', '    }\n', '\n', '    modifier aboveMinValue() {\n', '        require(msg.value >= minPurchase);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Check if goal was reached\n', '     *\n', '     */\n', '    function checkGoalReached() internal {\n', '        if (amountRaised >= fundingGoal && !fundingGoalReached) {\n', '            fundingGoalReached = true;\n', '            GoalReached(beneficiary, amountRaised);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Close the crowdsale\n', '     *\n', '     */\n', '    function closeCrowdsale()\n', '    isOwner\n', '    public {\n', '        crowdsaleClosed = true;\n', '        CrowdsaleClose(amountRaised, fundingGoalReached);\n', '    }\n', '\n', '    /**\n', '     * Change min purchase value\n', '     *\n', '     */\n', '    function setMinPurchaseValue(uint _minPurchase)\n', '    isOwner\n', '    public {\n', '        minPurchase = _minPurchase;\n', '    }\n', '\n', '    /**\n', '     * Withdraw the funds\n', '     *\n', '     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\n', '     * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw\n', '     * the amount they contributed.\n', '     */\n', '    function safeWithdrawal()\n', '    afterDeadline\n', '    isClosed\n', '    public {\n', '        if (!fundingGoalReached) {\n', '            uint amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                if (msg.sender.send(amount)) {\n', '                    FundTransfer(msg.sender, amount, false);\n', '                } else {\n', '                    balanceOf[msg.sender] = amount;\n', '                }\n', '            }\n', '        }\n', '\n', '        if (fundingGoalReached && beneficiary == msg.sender) {\n', '            if (beneficiary.send(amountRaised)) {\n', '                FundTransfer(beneficiary, amountRaised, false);\n', '            } else {\n', '                //If we fail to send the funds to beneficiary, unlock funders balance\n', '                fundingGoalReached = false;\n', '            }\n', '        }\n', '    }\n', '\n', '    function getBonus() view public returns (uint) {\n', '        if (startTime <= now) {\n', '            if (now <= endFirstBonus) {\n', '                return 50;\n', '            } else if (now <= endSecondBonus) {\n', '                return 40;\n', '            } else if (now <= endThirdBonus) {\n', '                return 30;\n', '            } else {\n', '                return 20;\n', '            }\n', '        }\n', '        return 0;\n', '    }\n', '}']