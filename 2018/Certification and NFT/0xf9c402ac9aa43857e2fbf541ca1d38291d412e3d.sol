['pragma solidity ^0.4.18; // solhint-disable-line\n', '\n', '\n', '\n', 'contract AnthillFarmer{\n', '    //uint256 ANTS_PER_ANTHILL_PER_SECOND=1;\n', '    uint256 public ANTS_TO_COLLECT_1ANTHILL=86400;//for final version should be seconds in a day\n', '    uint256 public STARTING_ANTHILL=300;\n', '    uint256 PSN=10000;\n', '    uint256 PSNH=5000;\n', '    bool public initialized=false;\n', '    address public ceoAddress;\n', '    mapping (address => uint256) public Anthills;\n', '    mapping (address => uint256) public claimedAnts;\n', '    mapping (address => uint256) public lastCollect;\n', '    mapping (address => address) public referrals;\n', '    uint256 public marketAnts;\n', '    function AnthillFarmer() public{\n', '        ceoAddress=msg.sender;\n', '    }\n', '    function collectAnts(address ref) public{\n', '        require(initialized);\n', '        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n', '            referrals[msg.sender]=ref;\n', '        }\n', '        uint256 antsUsed=getMyAnts();\n', '        uint256 newAnthill=SafeMath.div(antsUsed,ANTS_TO_COLLECT_1ANTHILL);\n', '        Anthills[msg.sender]=SafeMath.add(Anthills[msg.sender],newAnthill);\n', '        claimedAnts[msg.sender]=0;\n', '        lastCollect[msg.sender]=now;\n', '        \n', '        //send referral ants\n', '        claimedAnts[referrals[msg.sender]]=SafeMath.add(claimedAnts[referrals[msg.sender]],SafeMath.div(antsUsed,5));\n', '        \n', '        //boost market to nerf anthill hoarding\n', '        marketAnts=SafeMath.add(marketAnts,SafeMath.div(antsUsed,10));\n', '    }\n', '    function sellAnts() public{\n', '        require(initialized);\n', '        uint256 hasAnts=getMyAnts();\n', '        uint256 antValue=calculateAntSell(hasAnts);\n', '        uint256 fee=devFee(antValue);\n', '        claimedAnts[msg.sender]=0;\n', '        lastCollect[msg.sender]=now;\n', '        marketAnts=SafeMath.add(marketAnts,hasAnts);\n', '        ceoAddress.transfer(fee);\n', '        msg.sender.transfer(SafeMath.sub(antValue,fee));\n', '    }\n', '    function buyAnts() public payable{\n', '        require(initialized);\n', '        uint256 antsBought=calculateAntBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n', '        antsBought=SafeMath.sub(antsBought,devFee(antsBought));\n', '        ceoAddress.transfer(devFee(msg.value));\n', '        claimedAnts[msg.sender]=SafeMath.add(claimedAnts[msg.sender],antsBought);\n', '    }\n', '    //magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '    function calculateAntSell(uint256 ants) public view returns(uint256){\n', '        return calculateTrade(ants,marketAnts,this.balance);\n', '    }\n', '    function calculateAntBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n', '        return calculateTrade(eth,contractBalance,marketAnts);\n', '    }\n', '    function calculateAntBuySimple(uint256 eth) public view returns(uint256){\n', '        return calculateAntBuy(eth,this.balance);\n', '    }\n', '    function devFee(uint256 amount) public view returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(amount,4),100);\n', '    }\n', '    function seedMarket(uint256 ants) public payable{\n', '        require(marketAnts==0);\n', '        initialized=true;\n', '        marketAnts=ants;\n', '    }\n', '    function getFreeAnthill() public{\n', '        require(initialized);\n', '        require(Anthills[msg.sender]==0);\n', '        lastCollect[msg.sender]=now;\n', '        Anthills[msg.sender]=STARTING_ANTHILL;\n', '    }\n', '    function getBalance() public view returns(uint256){\n', '        return this.balance;\n', '    }\n', '    function getMyAnthill() public view returns(uint256){\n', '        return Anthills[msg.sender];\n', '    }\n', '    function getMyAnts() public view returns(uint256){\n', '        return SafeMath.add(claimedAnts[msg.sender],getAntsSinceLastCollect(msg.sender));\n', '    }\n', '    function getAntsSinceLastCollect(address adr) public view returns(uint256){\n', '        uint256 secondsPassed=min(ANTS_TO_COLLECT_1ANTHILL,SafeMath.sub(now,lastCollect[adr]));\n', '        return SafeMath.mul(secondsPassed,Anthills[adr]);\n', '    }\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.18; // solhint-disable-line\n', '\n', '\n', '\n', 'contract AnthillFarmer{\n', '    //uint256 ANTS_PER_ANTHILL_PER_SECOND=1;\n', '    uint256 public ANTS_TO_COLLECT_1ANTHILL=86400;//for final version should be seconds in a day\n', '    uint256 public STARTING_ANTHILL=300;\n', '    uint256 PSN=10000;\n', '    uint256 PSNH=5000;\n', '    bool public initialized=false;\n', '    address public ceoAddress;\n', '    mapping (address => uint256) public Anthills;\n', '    mapping (address => uint256) public claimedAnts;\n', '    mapping (address => uint256) public lastCollect;\n', '    mapping (address => address) public referrals;\n', '    uint256 public marketAnts;\n', '    function AnthillFarmer() public{\n', '        ceoAddress=msg.sender;\n', '    }\n', '    function collectAnts(address ref) public{\n', '        require(initialized);\n', '        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n', '            referrals[msg.sender]=ref;\n', '        }\n', '        uint256 antsUsed=getMyAnts();\n', '        uint256 newAnthill=SafeMath.div(antsUsed,ANTS_TO_COLLECT_1ANTHILL);\n', '        Anthills[msg.sender]=SafeMath.add(Anthills[msg.sender],newAnthill);\n', '        claimedAnts[msg.sender]=0;\n', '        lastCollect[msg.sender]=now;\n', '        \n', '        //send referral ants\n', '        claimedAnts[referrals[msg.sender]]=SafeMath.add(claimedAnts[referrals[msg.sender]],SafeMath.div(antsUsed,5));\n', '        \n', '        //boost market to nerf anthill hoarding\n', '        marketAnts=SafeMath.add(marketAnts,SafeMath.div(antsUsed,10));\n', '    }\n', '    function sellAnts() public{\n', '        require(initialized);\n', '        uint256 hasAnts=getMyAnts();\n', '        uint256 antValue=calculateAntSell(hasAnts);\n', '        uint256 fee=devFee(antValue);\n', '        claimedAnts[msg.sender]=0;\n', '        lastCollect[msg.sender]=now;\n', '        marketAnts=SafeMath.add(marketAnts,hasAnts);\n', '        ceoAddress.transfer(fee);\n', '        msg.sender.transfer(SafeMath.sub(antValue,fee));\n', '    }\n', '    function buyAnts() public payable{\n', '        require(initialized);\n', '        uint256 antsBought=calculateAntBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n', '        antsBought=SafeMath.sub(antsBought,devFee(antsBought));\n', '        ceoAddress.transfer(devFee(msg.value));\n', '        claimedAnts[msg.sender]=SafeMath.add(claimedAnts[msg.sender],antsBought);\n', '    }\n', '    //magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '    function calculateAntSell(uint256 ants) public view returns(uint256){\n', '        return calculateTrade(ants,marketAnts,this.balance);\n', '    }\n', '    function calculateAntBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n', '        return calculateTrade(eth,contractBalance,marketAnts);\n', '    }\n', '    function calculateAntBuySimple(uint256 eth) public view returns(uint256){\n', '        return calculateAntBuy(eth,this.balance);\n', '    }\n', '    function devFee(uint256 amount) public view returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(amount,4),100);\n', '    }\n', '    function seedMarket(uint256 ants) public payable{\n', '        require(marketAnts==0);\n', '        initialized=true;\n', '        marketAnts=ants;\n', '    }\n', '    function getFreeAnthill() public{\n', '        require(initialized);\n', '        require(Anthills[msg.sender]==0);\n', '        lastCollect[msg.sender]=now;\n', '        Anthills[msg.sender]=STARTING_ANTHILL;\n', '    }\n', '    function getBalance() public view returns(uint256){\n', '        return this.balance;\n', '    }\n', '    function getMyAnthill() public view returns(uint256){\n', '        return Anthills[msg.sender];\n', '    }\n', '    function getMyAnts() public view returns(uint256){\n', '        return SafeMath.add(claimedAnts[msg.sender],getAntsSinceLastCollect(msg.sender));\n', '    }\n', '    function getAntsSinceLastCollect(address adr) public view returns(uint256){\n', '        uint256 secondsPassed=min(ANTS_TO_COLLECT_1ANTHILL,SafeMath.sub(now,lastCollect[adr]));\n', '        return SafeMath.mul(secondsPassed,Anthills[adr]);\n', '    }\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
