['pragma solidity 0.4.24;\n', '\n', '// File: contracts/generic/Restricted.sol\n', '\n', '/*\n', '    Generic contract to authorise calls to certain functions only from a given address.\n', '    The address authorised must be a contract (multisig or not, depending on the permission), except for local test\n', '\n', '    deployment works as:\n', '           1. contract deployer account deploys contracts\n', '           2. constructor grants "PermissionGranter" permission to deployer account\n', '           3. deployer account executes initial setup (no multiSig)\n', '           4. deployer account grants PermissionGranter permission for the MultiSig contract\n', '                (e.g. StabilityBoardProxy or PreTokenProxy)\n', '           5. deployer account revokes its own PermissionGranter permission\n', '*/\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', 'contract Restricted {\n', '\n', "    // NB: using bytes32 rather than the string type because it's cheaper gas-wise:\n", '    mapping (address => mapping (bytes32 => bool)) public permissions;\n', '\n', '    event PermissionGranted(address indexed agent, bytes32 grantedPermission);\n', '    event PermissionRevoked(address indexed agent, bytes32 revokedPermission);\n', '\n', '    modifier restrict(bytes32 requiredPermission) {\n', '        require(permissions[msg.sender][requiredPermission], "msg.sender must have permission");\n', '        _;\n', '    }\n', '\n', '    constructor(address permissionGranterContract) public {\n', '        require(permissionGranterContract != address(0), "permissionGranterContract must be set");\n', '        permissions[permissionGranterContract]["PermissionGranter"] = true;\n', '        emit PermissionGranted(permissionGranterContract, "PermissionGranter");\n', '    }\n', '\n', '    function grantPermission(address agent, bytes32 requiredPermission) public {\n', '        require(permissions[msg.sender]["PermissionGranter"],\n', '            "msg.sender must have PermissionGranter permission");\n', '        permissions[agent][requiredPermission] = true;\n', '        emit PermissionGranted(agent, requiredPermission);\n', '    }\n', '\n', '    function grantMultiplePermissions(address agent, bytes32[] requiredPermissions) public {\n', '        require(permissions[msg.sender]["PermissionGranter"],\n', '            "msg.sender must have PermissionGranter permission");\n', '        uint256 length = requiredPermissions.length;\n', '        for (uint256 i = 0; i < length; i++) {\n', '            grantPermission(agent, requiredPermissions[i]);\n', '        }\n', '    }\n', '\n', '    function revokePermission(address agent, bytes32 requiredPermission) public {\n', '        require(permissions[msg.sender]["PermissionGranter"],\n', '            "msg.sender must have PermissionGranter permission");\n', '        permissions[agent][requiredPermission] = false;\n', '        emit PermissionRevoked(agent, requiredPermission);\n', '    }\n', '\n', '    function revokeMultiplePermissions(address agent, bytes32[] requiredPermissions) public {\n', '        uint256 length = requiredPermissions.length;\n', '        for (uint256 i = 0; i < length; i++) {\n', '            revokePermission(agent, requiredPermissions[i]);\n', '        }\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/generic/SafeMath.sol\n', '\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that throw on error\n', '\n', '    TODO: check against ds-math: https://blog.dapphub.com/ds-math/\n', '    TODO: move roundedDiv to a sep lib? (eg. Math.sol)\n', '    TODO: more unit tests!\n', '*/\n', 'pragma solidity 0.4.24;\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        require(a == 0 || c / a == b, "mul overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "div by 0"); // Solidity automatically throws for div by 0 but require to emit reason\n', '        uint256 c = a / b;\n', "        // require(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "sub underflow");\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "add overflow");\n', '        return c;\n', '    }\n', '\n', '    // Division, round to nearest integer, round half up\n', '    function roundedDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "div by 0"); // Solidity automatically throws for div by 0 but require to emit reason\n', '        uint256 halfB = (b % 2 == 0) ? (b / 2) : (b / 2 + 1);\n', '        return (a % b >= halfB) ? (a / b + 1) : (a / b);\n', '    }\n', '\n', '    // Division, always rounds up\n', '    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "div by 0"); // Solidity automatically throws for div by 0 but require to emit reason\n', '        return (a % b != 0) ? (a / b + 1) : (a / b);\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? b : a;\n', '    }    \n', '}\n', '\n', '// File: contracts/interfaces/TransferFeeInterface.sol\n', '\n', '/*\n', ' *  transfer fee calculation interface\n', ' *\n', ' */\n', 'pragma solidity 0.4.24;\n', '\n', '\n', 'interface TransferFeeInterface {\n', '    function calculateTransferFee(address from, address to, uint amount) external view returns (uint256 fee);\n', '}\n', '\n', '// File: contracts/interfaces/ERC20Interface.sol\n', '\n', '/*\n', ' * ERC20 interface\n', ' * see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'pragma solidity 0.4.24;\n', '\n', '\n', 'interface ERC20Interface {\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '    event Transfer(address indexed from, address indexed to, uint amount);\n', '\n', '    function transfer(address to, uint value) external returns (bool); // solhint-disable-line no-simple-event-func-name\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function balanceOf(address who) external view returns (uint);\n', '    function allowance(address _owner, address _spender) external view returns (uint remaining);\n', '\n', '}\n', '\n', '// File: contracts/interfaces/TokenReceiver.sol\n', '\n', '/*\n', ' *  receiver contract interface\n', ' * see https://github.com/ethereum/EIPs/issues/677\n', ' */\n', 'pragma solidity 0.4.24;\n', '\n', '\n', 'interface TokenReceiver {\n', '    function transferNotification(address from, uint256 amount, uint data) external;\n', '}\n', '\n', '// File: contracts/interfaces/AugmintTokenInterface.sol\n', '\n', '/* Augmint Token interface (abstract contract)\n', '\n', 'TODO: overload transfer() & transferFrom() instead of transferWithNarrative() & transferFromWithNarrative()\n', '      when this fix available in web3& truffle also uses that web3: https://github.com/ethereum/web3.js/pull/1185\n', 'TODO: shall we use bytes for narrative?\n', ' */\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract AugmintTokenInterface is Restricted, ERC20Interface {\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    bytes32 public peggedSymbol;\n', '    uint8 public decimals;\n', '\n', '    uint public totalSupply;\n', '    mapping(address => uint256) public balances; // Balances for each account\n', '    mapping(address => mapping (address => uint256)) public allowed; // allowances added with approve()\n', '\n', '    TransferFeeInterface public feeAccount;\n', '    mapping(bytes32 => bool) public delegatedTxHashesUsed; // record txHashes used by delegatedTransfer\n', '\n', '    event TransferFeesChanged(uint transferFeePt, uint transferFeeMin, uint transferFeeMax);\n', '    event Transfer(address indexed from, address indexed to, uint amount);\n', '    event AugmintTransfer(address indexed from, address indexed to, uint amount, string narrative, uint fee);\n', '    event TokenIssued(uint amount);\n', '    event TokenBurned(uint amount);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function transfer(address to, uint value) external returns (bool); // solhint-disable-line no-simple-event-func-name\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '    function approve(address spender, uint value) external returns (bool);\n', '\n', '    function delegatedTransfer(address from, address to, uint amount, string narrative,\n', '                                    uint maxExecutorFeeInToken, /* client provided max fee for executing the tx */\n', '                                    bytes32 nonce, /* random nonce generated by client */\n', '                                    /* ^^^^ end of signed data ^^^^ */\n', '                                    bytes signature,\n', '                                    uint requestedExecutorFeeInToken /* the executor can decide to request lower fee */\n', '                                ) external;\n', '\n', '    function delegatedTransferAndNotify(address from, TokenReceiver target, uint amount, uint data,\n', '                                    uint maxExecutorFeeInToken, /* client provided max fee for executing the tx */\n', '                                    bytes32 nonce, /* random nonce generated by client */\n', '                                    /* ^^^^ end of signed data ^^^^ */\n', '                                    bytes signature,\n', '                                    uint requestedExecutorFeeInToken /* the executor can decide to request lower fee */\n', '                                ) external;\n', '\n', '    function increaseApproval(address spender, uint addedValue) external;\n', '    function decreaseApproval(address spender, uint subtractedValue) external;\n', '\n', '    function issueTo(address to, uint amount) external; // restrict it to "MonetarySupervisor" in impl.;\n', '    function burn(uint amount) external;\n', '\n', '    function transferAndNotify(TokenReceiver target, uint amount, uint data) external;\n', '\n', '    function transferWithNarrative(address to, uint256 amount, string narrative) external;\n', '    function transferFromWithNarrative(address from, address to, uint256 amount, string narrative) external;\n', '\n', '    function setName(string _name) external;\n', '    function setSymbol(string _symbol) external;\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256 remaining);\n', '\n', '    function balanceOf(address who) external view returns (uint);\n', '\n', '\n', '}\n', '\n', '// File: contracts/generic/ECRecovery.sol\n', '\n', '/**\n', ' * @title Eliptic curve signature operations\n', ' *\n', ' * @dev Based on https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ECRecovery.sol\n', ' *\n', ' * TODO Remove this library once solidity supports passing a signature to ecrecover.\n', ' * See https://github.com/ethereum/solidity/issues/864\n', ' *\n', ' */\n', '\n', 'library ECRecovery {\n', '\n', '  /**\n', '   * @dev Recover signer address from a message by using their signature\n', '   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n', '   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n', '   */\n', '  function recover(bytes32 hash, bytes sig)\n', '    internal\n', '    pure\n', '    returns (address)\n', '  {\n', '    bytes32 r;\n', '    bytes32 s;\n', '    uint8 v;\n', '\n', '    // Check the signature length\n', '    if (sig.length != 65) {\n', '      return (address(0));\n', '    }\n', '\n', '    // Divide the signature in r, s and v variables\n', '    // ecrecover takes the signature parameters, and the only way to get them\n', '    // currently is to use assembly.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly {\n', '      r := mload(add(sig, 32))\n', '      s := mload(add(sig, 64))\n', '      v := byte(0, mload(add(sig, 96)))\n', '    }\n', '\n', '    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '    if (v < 27) {\n', '      v += 27;\n', '    }\n', '\n', '    // If the version is correct return the signer address\n', '    if (v != 27 && v != 28) {\n', '      return (address(0));\n', '    } else {\n', '      // solium-disable-next-line arg-overflow\n', '      return ecrecover(hash, v, r, s);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * toEthSignedMessageHash\n', '   * @dev prefix a bytes32 value with "\\x19Ethereum Signed Message:"\n', '   * @dev and hash the result\n', '   */\n', '  function toEthSignedMessageHash(bytes32 hash)\n', '    internal\n', '    pure\n', '    returns (bytes32)\n', '  {\n', '    // 32 is the length in bytes of hash,\n', '    // enforced by the type signature above\n', '    return keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash));\n', '  }\n', '}\n', '\n', '// File: contracts/generic/AugmintToken.sol\n', '\n', '/* Generic Augmint Token implementation (ERC20 token)\n', '    This contract manages:\n', '        * Balances of Augmint holders and transactions between them\n', '        * Issues/burns tokens\n', '\n', '    TODO:\n', '        - reconsider delegatedTransfer and how to structure it\n', '        - shall we allow change of txDelegator?\n', '        - consider generic bytes arg instead of uint for transferAndNotify\n', '        - consider separate transfer fee params and calculation to separate contract (to feeAccount?)\n', '*/\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract AugmintToken is AugmintTokenInterface {\n', '\n', '    event FeeAccountChanged(TransferFeeInterface newFeeAccount);\n', '\n', '    constructor(address permissionGranterContract, string _name, string _symbol, bytes32 _peggedSymbol, uint8 _decimals, TransferFeeInterface _feeAccount)\n', '    public Restricted(permissionGranterContract) {\n', '        require(_feeAccount != address(0), "feeAccount must be set");\n', '        require(bytes(_name).length > 0, "name must be set");\n', '        require(bytes(_symbol).length > 0, "symbol must be set");\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '        peggedSymbol = _peggedSymbol;\n', '        decimals = _decimals;\n', '\n', '        feeAccount = _feeAccount;\n', '\n', '    }\n', '\n', '    function transfer(address to, uint256 amount) external returns (bool) {\n', '        _transfer(msg.sender, to, amount, "");\n', '        return true;\n', '    }\n', '\n', '    /* Transfers based on an offline signed transfer instruction. */\n', '    function delegatedTransfer(address from, address to, uint amount, string narrative,\n', '                                     uint maxExecutorFeeInToken, /* client provided max fee for executing the tx */\n', '                                     bytes32 nonce, /* random nonce generated by client */\n', '                                     /* ^^^^ end of signed data ^^^^ */\n', '                                     bytes signature,\n', '                                     uint requestedExecutorFeeInToken /* the executor can decide to request lower fee */\n', '                                     )\n', '    external {\n', '        bytes32 txHash = keccak256(abi.encodePacked(this, from, to, amount, narrative, maxExecutorFeeInToken, nonce));\n', '\n', '        _checkHashAndTransferExecutorFee(txHash, signature, from, maxExecutorFeeInToken, requestedExecutorFeeInToken);\n', '\n', '        _transfer(from, to, amount, narrative);\n', '    }\n', '\n', '    function approve(address _spender, uint256 amount) external returns (bool) {\n', '        require(_spender != 0x0, "spender must be set");\n', '        allowed[msg.sender][_spender] = amount;\n', '        emit Approval(msg.sender, _spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     ERC20 transferFrom attack protection: https://github.com/DecentLabs/dcm-poc/issues/57\n', '     approve should be called when allowed[_spender] == 0. To increment allowed value is better\n', '     to use this function to avoid 2 calls (and wait until the first transaction is mined)\n', '     Based on MonolithDAO Token.sol */\n', '    function increaseApproval(address _spender, uint _addedValue) external {\n', '        require(_spender != 0x0, "spender must be set");\n', '        mapping (address => uint256) allowances = allowed[msg.sender];\n', '        uint newValue = allowances[_spender].add(_addedValue);\n', '        allowances[_spender] = newValue;\n', '        emit Approval(msg.sender, _spender, newValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) external {\n', '        require(_spender != 0x0, "spender must be set");\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 amount) external returns (bool) {\n', '        _transferFrom(from, to, amount, "");\n', '        return true;\n', '    }\n', '\n', '    // Issue tokens. See MonetarySupervisor but as a rule of thumb issueTo is only allowed:\n', '    //      - on new loan (by trusted Lender contracts)\n', '    //      - when converting old tokens using MonetarySupervisor\n', '    //      - strictly to reserve by Stability Board (via MonetarySupervisor)\n', '    function issueTo(address to, uint amount) external restrict("MonetarySupervisor") {\n', '        balances[to] = balances[to].add(amount);\n', '        totalSupply = totalSupply.add(amount);\n', '        emit Transfer(0x0, to, amount);\n', '        emit AugmintTransfer(0x0, to, amount, "", 0);\n', '    }\n', '\n', '    // Burn tokens. Anyone can burn from its own account. YOLO.\n', '    // Used by to burn from Augmint reserve or by Lender contract after loan repayment\n', '    function burn(uint amount) external {\n', '        require(balances[msg.sender] >= amount, "balance must be >= amount");\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '        totalSupply = totalSupply.sub(amount);\n', '        emit Transfer(msg.sender, 0x0, amount);\n', '        emit AugmintTransfer(msg.sender, 0x0, amount, "", 0);\n', '    }\n', '\n', '    /* to upgrade feeAccount (eg. for fee calculation changes) */\n', '    function setFeeAccount(TransferFeeInterface newFeeAccount) external restrict("StabilityBoard") {\n', '        feeAccount = newFeeAccount;\n', '        emit FeeAccountChanged(newFeeAccount);\n', '    }\n', '\n', '    /*  transferAndNotify can be used by contracts which require tokens to have only 1 tx (instead of approve + call)\n', '        Eg. repay loan, lock funds, token sell order on exchange\n', '        Reverts on failue:\n', '            - transfer fails\n', '            - if transferNotification fails (callee must revert on failure)\n', "            - if targetContract is an account or targetContract doesn't have neither transferNotification or fallback fx\n", '        TODO: make data param generic bytes (see receiver code attempt in Locker.transferNotification)\n', '    */\n', '    function transferAndNotify(TokenReceiver target, uint amount, uint data) external {\n', '        _transfer(msg.sender, target, amount, "");\n', '\n', '        target.transferNotification(msg.sender, amount, data);\n', '    }\n', '\n', '    /* transferAndNotify based on an  instruction signed offline  */\n', '    function delegatedTransferAndNotify(address from, TokenReceiver target, uint amount, uint data,\n', '                                     uint maxExecutorFeeInToken, /* client provided max fee for executing the tx */\n', '                                     bytes32 nonce, /* random nonce generated by client */\n', '                                     /* ^^^^ end of signed data ^^^^ */\n', '                                     bytes signature,\n', '                                     uint requestedExecutorFeeInToken /* the executor can decide to request lower fee */\n', '                                     )\n', '    external {\n', '        bytes32 txHash = keccak256(abi.encodePacked(this, from, target, amount, data, maxExecutorFeeInToken, nonce));\n', '\n', '        _checkHashAndTransferExecutorFee(txHash, signature, from, maxExecutorFeeInToken, requestedExecutorFeeInToken);\n', '\n', '        _transfer(from, target, amount, "");\n', '        target.transferNotification(from, amount, data);\n', '    }\n', '\n', '\n', '    function transferWithNarrative(address to, uint256 amount, string narrative) external {\n', '        _transfer(msg.sender, to, amount, narrative);\n', '    }\n', '\n', '    function transferFromWithNarrative(address from, address to, uint256 amount, string narrative) external {\n', '        _transferFrom(from, to, amount, narrative);\n', '    }\n', '\n', '    /* Allow Stability Board to change the name when a new token contract version\n', '       is deployed and ready for production use. So that older token contracts\n', '       are identifiable in 3rd party apps. */\n', '    function setName(string _name) external restrict("StabilityBoard") {\n', '        name = _name;\n', '    }\n', '\n', '    /* Allow Stability Board to change the symbol when a new token contract version\n', '       is deployed and ready for production use. So that older token contracts\n', '       are identifiable in 3rd party apps. */\n', '    function setSymbol(string _symbol) external restrict("StabilityBoard") {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function balanceOf(address _owner) external view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function _checkHashAndTransferExecutorFee(bytes32 txHash, bytes signature, address signer,\n', '                                                uint maxExecutorFeeInToken, uint requestedExecutorFeeInToken) private {\n', '        require(requestedExecutorFeeInToken <= maxExecutorFeeInToken, "requestedExecutorFee must be <= maxExecutorFee");\n', '        require(!delegatedTxHashesUsed[txHash], "txHash already used");\n', '        delegatedTxHashesUsed[txHash] = true;\n', '\n', '        address recovered = ECRecovery.recover(ECRecovery.toEthSignedMessageHash(txHash), signature);\n', '        require(recovered == signer, "invalid signature");\n', '\n', '        _transfer(signer, msg.sender, requestedExecutorFeeInToken, "Delegated transfer fee", 0);\n', '    }\n', '\n', '    function _transferFrom(address from, address to, uint256 amount, string narrative) private {\n', '        uint fee = feeAccount.calculateTransferFee(from, to, amount);\n', '        uint amountWithFee = amount.add(fee);\n', '\n', '        /* NB: fee is deducted from owner, so transferFrom could fail\n', '            if amount + fee is not available on owner balance, or allowance */\n', '        require(balances[from] >= amountWithFee, "balance must be >= amount + fee");\n', '        require(allowed[from][msg.sender] >= amountWithFee, "allowance must be >= amount + fee");\n', '\n', '        _transfer(from, to, amount, narrative, fee);\n', '\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(amountWithFee);\n', '    }\n', '\n', '    function _transfer(address from, address to, uint transferAmount, string narrative) private {\n', '        uint fee = feeAccount.calculateTransferFee(from, to, transferAmount);\n', '        _transfer(from, to, transferAmount, narrative, fee);\n', '    }\n', '\n', '    function _transfer(address from, address to, uint transferAmount, string narrative, uint fee) private {\n', '        require(to != 0x0, "to must be set");\n', '        uint amountWithFee = transferAmount.add(fee);\n', '        // to emit proper reason instead of failing on from.sub()\n', '        require(balances[from] >= amountWithFee, "balance must be >= amount + transfer fee");\n', '\n', '        balances[from] = balances[from].sub(amountWithFee);\n', '        balances[to] = balances[to].add(transferAmount);\n', '\n', '        emit Transfer(from, to, transferAmount);\n', '\n', '        if (fee > 0) {\n', '            balances[feeAccount] = balances[feeAccount].add(fee);\n', '            emit Transfer(from, feeAccount, fee);\n', '        }\n', '\n', '        emit AugmintTransfer(from, to, transferAmount, narrative, fee);\n', '    }\n', '}\n', '\n', '// File: contracts/generic/SystemAccount.sol\n', '\n', '/* Contract to collect fees from system */\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', 'contract SystemAccount is Restricted {\n', '    event WithdrawFromSystemAccount(address tokenAddress, address to, uint tokenAmount, uint weiAmount,\n', '                                    string narrative);\n', '\n', '    constructor(address permissionGranterContract)\n', '    public Restricted(permissionGranterContract) {} // solhint-disable-line no-empty-blocks\n', '\n', '    function withdraw(AugmintToken tokenAddress, address to, uint tokenAmount, uint weiAmount, string narrative)\n', '    external restrict("StabilityBoard") {\n', '        tokenAddress.transferWithNarrative(to, tokenAmount, narrative);\n', '        if (weiAmount > 0) {\n', '            to.transfer(weiAmount);\n', '        }\n', '        emit WithdrawFromSystemAccount(tokenAddress, to, tokenAmount, weiAmount, narrative);\n', '    }\n', '}\n', '\n', '// File: contracts/AugmintReserves.sol\n', '\n', '/* Contract to hold Augmint reserves (ETH & Token)\n', '    - ETH as regular ETH balance of the contract\n', '    - ERC20 token reserve (stored as regular Token balance under the contract address)\n', '\n', 'NB: reserves are held under the contract address, therefore any transaction on the reserve is limited to the\n', '    tx-s defined here (i.e. transfer is not allowed even by the contract owner or StabilityBoard or MonetarySupervisor)\n', '\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', 'contract AugmintReserves is Restricted {\n', '\n', '    event ReserveMigration(address to, uint weiAmount);\n', '\n', '    constructor(address permissionGranterContract)\n', '    public Restricted(permissionGranterContract) {} // solhint-disable-line no-empty-blocks\n', '\n', '    function () external payable { // solhint-disable-line no-empty-blocks\n', "        // to accept ETH sent into reserve (from defaulted loan's collateral )\n", '    }\n', '\n', '    function burn(AugmintTokenInterface augmintToken, uint amount)\n', '    external restrict("MonetarySupervisor") {\n', '        augmintToken.burn(amount);\n', '    }\n', '\n', '    function migrate(address to, uint weiAmount)\n', '    external restrict("StabilityBoard") {\n', '        if (weiAmount > 0) {\n', '            to.transfer(weiAmount);\n', '        }\n', '        emit ReserveMigration(to, weiAmount);\n', '    }\n', '}\n', '\n', '// File: contracts/InterestEarnedAccount.sol\n', '\n', '/* Contract to hold earned interest from loans repaid\n', '   premiums for locks are being accrued (i.e. transferred) to Locker */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', 'contract InterestEarnedAccount is SystemAccount {\n', '\n', '    constructor(address permissionGranterContract) public SystemAccount(permissionGranterContract) {} // solhint-disable-line no-empty-blocks\n', '\n', '    function transferInterest(AugmintTokenInterface augmintToken, address locker, uint interestAmount)\n', '    external restrict("MonetarySupervisor") {\n', '        augmintToken.transfer(locker, interestAmount);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/MonetarySupervisor.sol\n', '\n', '/* MonetarySupervisor\n', '    - maintains system wide KPIs (eg totalLockAmount, totalLoanAmount)\n', '    - holds system wide parameters/limits\n', '    - enforces system wide limits\n', '    - burns and issues to AugmintReserves\n', '    - Send funds from reserve to exchange when intervening (not implemented yet)\n', '    - Converts older versions of AugmintTokens in 1:1 to new\n', '*/\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract MonetarySupervisor is Restricted, TokenReceiver { // solhint-disable-line no-empty-blocks\n', '    using SafeMath for uint256;\n', '\n', '    uint public constant PERCENT_100 = 1000000;\n', '\n', '    AugmintTokenInterface public augmintToken;\n', '    InterestEarnedAccount public interestEarnedAccount;\n', '    AugmintReserves public augmintReserves;\n', '\n', '    uint public issuedByStabilityBoard; // token issued by Stability Board\n', '    uint public burnedByStabilityBoard; // token burned by Stability Board\n', '\n', '    uint public totalLoanAmount; // total amount of all loans without interest, in token\n', '    uint public totalLockedAmount; // total amount of all locks without premium, in token\n', '\n', '    /**********\n', '        Parameters to ensure totalLoanAmount or totalLockedAmount difference is within limits and system also works\n', '        when total loan or lock amounts are low.\n', '            for test calculations: https://docs.google.com/spreadsheets/d/1MeWYPYZRIm1n9lzpvbq8kLfQg1hhvk5oJY6NrR401S0\n', '    **********/\n', '    struct LtdParams {\n', '        uint  lockDifferenceLimit; /* only allow a new lock if Loan To Deposit ratio would stay above\n', '                                            (1 - lockDifferenceLimit) with new lock. Stored as parts per million */\n', '        uint  loanDifferenceLimit; /* only allow a new loan if Loan To Deposit ratio would stay above\n', '                                            (1 + loanDifferenceLimit) with new loan. Stored as parts per million */\n', '        /* allowedDifferenceAmount param is to ensure the system is not "freezing" when totalLoanAmount or\n', '            totalLockAmount is low.\n', '        It allows a new loan or lock (up to an amount to reach this difference) even if LTD will go below / above\n', '            lockDifferenceLimit / loanDifferenceLimit with the new lock/loan */\n', '        uint  allowedDifferenceAmount;\n', '    }\n', '\n', '    LtdParams public ltdParams;\n', '\n', '    /* Previously deployed AugmintTokens which are accepted for conversion (see transferNotification() )\n', "        NB: it's not iterable so old version addresses needs to be added for UI manually after each deploy */\n", '    mapping(address => bool) public acceptedLegacyAugmintTokens;\n', '\n', '    event LtdParamsChanged(uint lockDifferenceLimit, uint loanDifferenceLimit, uint allowedDifferenceAmount);\n', '\n', '    event AcceptedLegacyAugmintTokenChanged(address augmintTokenAddress, bool newAcceptedState);\n', '\n', '    event LegacyTokenConverted(address oldTokenAddress, address account, uint amount);\n', '\n', '    event KPIsAdjusted(uint totalLoanAmountAdjustment, uint totalLockedAmountAdjustment);\n', '\n', '    event SystemContractsChanged(InterestEarnedAccount newInterestEarnedAccount, AugmintReserves newAugmintReserves);\n', '\n', '    constructor(address permissionGranterContract, AugmintTokenInterface _augmintToken,\n', '        AugmintReserves _augmintReserves, InterestEarnedAccount _interestEarnedAccount,\n', '        uint lockDifferenceLimit, uint loanDifferenceLimit, uint allowedDifferenceAmount)\n', '    public Restricted(permissionGranterContract) {\n', '        augmintToken = _augmintToken;\n', '        augmintReserves = _augmintReserves;\n', '        interestEarnedAccount = _interestEarnedAccount;\n', '\n', '        ltdParams = LtdParams(lockDifferenceLimit, loanDifferenceLimit, allowedDifferenceAmount);\n', '    }\n', '\n', '    function issueToReserve(uint amount) external restrict("StabilityBoard") {\n', '        issuedByStabilityBoard = issuedByStabilityBoard.add(amount);\n', '        augmintToken.issueTo(augmintReserves, amount);\n', '    }\n', '\n', '    function burnFromReserve(uint amount) external restrict("StabilityBoard") {\n', '        burnedByStabilityBoard = burnedByStabilityBoard.add(amount);\n', '        augmintReserves.burn(augmintToken, amount);\n', '    }\n', '\n', '    /* Locker requesting interest when locking funds. Enforcing LTD to stay within range allowed by LTD params\n', "        NB: it does not know about min loan amount, it's the loan contract's responsibility to enforce it  */\n", '    function requestInterest(uint amountToLock, uint interestAmount) external {\n', '        // only whitelisted Locker\n', '        require(permissions[msg.sender]["Locker"], "msg.sender must have Locker permission");\n', '        require(amountToLock <= getMaxLockAmountAllowedByLtd(), "amountToLock must be <= maxLockAmountAllowedByLtd");\n', '\n', '        totalLockedAmount = totalLockedAmount.add(amountToLock);\n', '        // next line would revert but require to emit reason:\n', '        require(augmintToken.balanceOf(address(interestEarnedAccount)) >= interestAmount,\n', '            "interestEarnedAccount balance must be >= interestAmount");\n', '        interestEarnedAccount.transferInterest(augmintToken, msg.sender, interestAmount); // transfer interest to Locker\n', '    }\n', '\n', '    // Locker notifying when releasing funds to update KPIs\n', '    function releaseFundsNotification(uint lockedAmount) external {\n', '        // only whitelisted Locker\n', '        require(permissions[msg.sender]["Locker"], "msg.sender must have Locker permission");\n', '        totalLockedAmount = totalLockedAmount.sub(lockedAmount);\n', '    }\n', '\n', '    /* Issue loan if LTD stays within range allowed by LTD params\n', "        NB: it does not know about min loan amount, it's the loan contract's responsibility to enforce it */\n", '    function issueLoan(address borrower, uint loanAmount) external {\n', '         // only whitelisted LoanManager contracts\n', '        require(permissions[msg.sender]["LoanManager"],\n', '            "msg.sender must have LoanManager permission");\n', '        require(loanAmount <= getMaxLoanAmountAllowedByLtd(), "loanAmount must be <= maxLoanAmountAllowedByLtd");\n', '        totalLoanAmount = totalLoanAmount.add(loanAmount);\n', '        augmintToken.issueTo(borrower, loanAmount);\n', '    }\n', '\n', '    function loanRepaymentNotification(uint loanAmount) external {\n', '        // only whitelisted LoanManager contracts\n', '        require(permissions[msg.sender]["LoanManager"],\n', '            "msg.sender must have LoanManager permission");\n', '        totalLoanAmount = totalLoanAmount.sub(loanAmount);\n', '    }\n', '\n', '    // NB: this is called by Lender contract with the sum of all loans collected in batch\n', '    function loanCollectionNotification(uint totalLoanAmountCollected) external {\n', '        // only whitelisted LoanManager contracts\n', '        require(permissions[msg.sender]["LoanManager"],\n', '            "msg.sender must have LoanManager permission");\n', '        totalLoanAmount = totalLoanAmount.sub(totalLoanAmountCollected);\n', '    }\n', '\n', '    function setAcceptedLegacyAugmintToken(address legacyAugmintTokenAddress, bool newAcceptedState)\n', '    external restrict("StabilityBoard") {\n', '        acceptedLegacyAugmintTokens[legacyAugmintTokenAddress] = newAcceptedState;\n', '        emit AcceptedLegacyAugmintTokenChanged(legacyAugmintTokenAddress, newAcceptedState);\n', '    }\n', '\n', '    function setLtdParams(uint lockDifferenceLimit, uint loanDifferenceLimit, uint allowedDifferenceAmount)\n', '    external restrict("StabilityBoard") {\n', '        ltdParams = LtdParams(lockDifferenceLimit, loanDifferenceLimit, allowedDifferenceAmount);\n', '        emit LtdParamsChanged(lockDifferenceLimit, loanDifferenceLimit, allowedDifferenceAmount);\n', '    }\n', '\n', '    /* function to migrate old totalLoanAmount and totalLockedAmount from old monetarySupervisor contract\n', "        when it's upgraded.\n", '        Set new monetarySupervisor contract in all locker and loanManager contracts before executing this */\n', '    function adjustKPIs(uint totalLoanAmountAdjustment, uint totalLockedAmountAdjustment)\n', '    external restrict("StabilityBoard") {\n', '        totalLoanAmount = totalLoanAmount.add(totalLoanAmountAdjustment);\n', '        totalLockedAmount = totalLockedAmount.add(totalLockedAmountAdjustment);\n', '        emit KPIsAdjusted(totalLoanAmountAdjustment, totalLockedAmountAdjustment);\n', '    }\n', '\n', '    /* to allow upgrades of InterestEarnedAccount and AugmintReserves contracts. */\n', '    function setSystemContracts(InterestEarnedAccount newInterestEarnedAccount, AugmintReserves newAugmintReserves)\n', '    external restrict("StabilityBoard") {\n', '        interestEarnedAccount = newInterestEarnedAccount;\n', '        augmintReserves = newAugmintReserves;\n', '        emit SystemContractsChanged(newInterestEarnedAccount, newAugmintReserves);\n', '    }\n', '\n', '    /* User can request to convert their tokens from older AugmintToken versions in 1:1\n', "      transferNotification is called from AugmintToken's transferAndNotify\n", '     Flow for converting old tokens:\n', "        1) user calls old token contract's transferAndNotify with the amount to convert,\n", '                addressing the new MonetarySupervisor Contract\n', "        2) transferAndNotify transfers user's old tokens to the current MonetarySupervisor contract's address\n", '        3) transferAndNotify calls MonetarySupervisor.transferNotification\n', '        4) MonetarySupervisor checks if old AugmintToken is permitted\n', "        5) MonetarySupervisor issues new tokens to user's account in current AugmintToken\n", '        6) MonetarySupervisor burns old tokens from own balance\n', '    */\n', '    function transferNotification(address from, uint amount, uint /* data, not used */ ) external {\n', '        AugmintTokenInterface legacyToken = AugmintTokenInterface(msg.sender);\n', '        require(acceptedLegacyAugmintTokens[legacyToken], "msg.sender must be allowed in acceptedLegacyAugmintTokens");\n', '\n', '        legacyToken.burn(amount);\n', '        augmintToken.issueTo(from, amount);\n', '        emit LegacyTokenConverted(msg.sender, from, amount);\n', '    }\n', '\n', '    /* Helper function for UI.\n', '        Returns max lock amount based on minLockAmount, interestPt, using LTD params & interestEarnedAccount balance */\n', '    function getMaxLockAmount(uint minLockAmount, uint interestPt) external view returns (uint maxLock) {\n', '        uint allowedByEarning = augmintToken.balanceOf(address(interestEarnedAccount)).mul(PERCENT_100).div(interestPt);\n', '        uint allowedByLtd = getMaxLockAmountAllowedByLtd();\n', '        maxLock = allowedByEarning < allowedByLtd ? allowedByEarning : allowedByLtd;\n', '        maxLock = maxLock < minLockAmount ? 0 : maxLock;\n', '    }\n', '\n', '    /* Helper function for UI.\n', '        Returns max loan amount based on minLoanAmont using LTD params */\n', '    function getMaxLoanAmount(uint minLoanAmount) external view returns (uint maxLoan) {\n', '        uint allowedByLtd = getMaxLoanAmountAllowedByLtd();\n', '        maxLoan = allowedByLtd < minLoanAmount ? 0 : allowedByLtd;\n', '    }\n', '\n', '    /* returns maximum lockable token amount allowed by LTD params. */\n', '    function getMaxLockAmountAllowedByLtd() public view returns(uint maxLockByLtd) {\n', '        uint allowedByLtdDifferencePt = totalLoanAmount.mul(PERCENT_100).div(PERCENT_100\n', '                                            .sub(ltdParams.lockDifferenceLimit));\n', '        allowedByLtdDifferencePt = totalLockedAmount >= allowedByLtdDifferencePt ?\n', '                                        0 : allowedByLtdDifferencePt.sub(totalLockedAmount);\n', '\n', '        uint allowedByLtdDifferenceAmount =\n', '            totalLockedAmount >= totalLoanAmount.add(ltdParams.allowedDifferenceAmount) ?\n', '                0 : totalLoanAmount.add(ltdParams.allowedDifferenceAmount).sub(totalLockedAmount);\n', '\n', '        maxLockByLtd = allowedByLtdDifferencePt > allowedByLtdDifferenceAmount ?\n', '                                        allowedByLtdDifferencePt : allowedByLtdDifferenceAmount;\n', '    }\n', '\n', '    /* returns maximum borrowable token amount allowed by LTD params */\n', '    function getMaxLoanAmountAllowedByLtd() public view returns(uint maxLoanByLtd) {\n', '        uint allowedByLtdDifferencePt = totalLockedAmount.mul(ltdParams.loanDifferenceLimit.add(PERCENT_100))\n', '                                            .div(PERCENT_100);\n', '        allowedByLtdDifferencePt = totalLoanAmount >= allowedByLtdDifferencePt ?\n', '                                        0 : allowedByLtdDifferencePt.sub(totalLoanAmount);\n', '\n', '        uint allowedByLtdDifferenceAmount =\n', '            totalLoanAmount >= totalLockedAmount.add(ltdParams.allowedDifferenceAmount) ?\n', '                0 : totalLockedAmount.add(ltdParams.allowedDifferenceAmount).sub(totalLoanAmount);\n', '\n', '        maxLoanByLtd = allowedByLtdDifferencePt > allowedByLtdDifferenceAmount ?\n', '                                        allowedByLtdDifferencePt : allowedByLtdDifferenceAmount;\n', '    }\n', '}\n', '\n', '// File: contracts/Rates.sol\n', '\n', '/*\n', ' Generic symbol / WEI rates contract.\n', ' only callable by trusted price oracles.\n', ' Being regularly called by a price oracle\n', '    TODO: trustless/decentrilezed price Oracle\n', '    TODO: shall we use blockNumber instead of now for lastUpdated?\n', '    TODO: consider if we need storing rates with variable decimals instead of fixed 4\n', '    TODO: could we emit 1 RateChanged event from setMultipleRates (symbols and newrates arrays)?\n', '*/\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', 'contract Rates is Restricted {\n', '    using SafeMath for uint256;\n', '\n', '    struct RateInfo {\n', '        uint rate; // how much 1 WEI worth 1 unit , i.e. symbol/ETH rate\n', '                    // 0 rate means no rate info available\n', '        uint lastUpdated;\n', '    }\n', '\n', '    // mapping currency symbol => rate. all rates are stored with 2 decimals. i.e. EUR/ETH = 989.12 then rate = 98912\n', '    mapping(bytes32 => RateInfo) public rates;\n', '\n', '    event RateChanged(bytes32 symbol, uint newRate);\n', '\n', '    constructor(address permissionGranterContract) public Restricted(permissionGranterContract) {} // solhint-disable-line no-empty-blocks\n', '\n', '    function setRate(bytes32 symbol, uint newRate) external restrict("RatesFeeder") {\n', '        rates[symbol] = RateInfo(newRate, now);\n', '        emit RateChanged(symbol, newRate);\n', '    }\n', '\n', '    function setMultipleRates(bytes32[] symbols, uint[] newRates) external restrict("RatesFeeder") {\n', '        require(symbols.length == newRates.length, "symobls and newRates lengths must be equal");\n', '        for (uint256 i = 0; i < symbols.length; i++) {\n', '            rates[symbols[i]] = RateInfo(newRates[i], now);\n', '            emit RateChanged(symbols[i], newRates[i]);\n', '        }\n', '    }\n', '\n', '    function convertFromWei(bytes32 bSymbol, uint weiValue) external view returns(uint value) {\n', '        require(rates[bSymbol].rate > 0, "rates[bSymbol] must be > 0");\n', '        return weiValue.mul(rates[bSymbol].rate).roundedDiv(1000000000000000000);\n', '    }\n', '\n', '    function convertToWei(bytes32 bSymbol, uint value) external view returns(uint weiValue) {\n', '        // next line would revert with div by zero but require to emit reason\n', '        require(rates[bSymbol].rate > 0, "rates[bSymbol] must be > 0");\n', '        /* TODO: can we make this not loosing max scale? */\n', '        return value.mul(1000000000000000000).roundedDiv(rates[bSymbol].rate);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/LoanManager.sol\n', '\n', '/*\n', '    Contract to manage Augmint token loan contracts backed by ETH\n', '    For flows see: https://github.com/Augmint/augmint-contracts/blob/master/docs/loanFlow.png\n', '\n', '    TODO:\n', '        - create MonetarySupervisor interface and use it instead?\n', '        - make data arg generic bytes?\n', '        - make collect() run as long as gas provided allows\n', '*/\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract LoanManager is Restricted, TokenReceiver {\n', '    using SafeMath for uint256;\n', '\n', '    enum LoanState { Open, Repaid, Defaulted, Collected } // NB: Defaulted state is not stored, only getters calculate\n', '\n', '    struct LoanProduct {\n', '        uint minDisbursedAmount; // 0: with decimals set in AugmintToken.decimals\n', '        uint32 term;            // 1\n', '        uint32 discountRate;    // 2: discountRate in parts per million , ie. 10,000 = 1%\n', '        uint32 collateralRatio; // 3: loan token amount / colleteral pegged ccy value\n', '                                //      in parts per million , ie. 10,000 = 1%\n', '        uint32 defaultingFeePt; // 4: % of collateral in parts per million , ie. 50,000 = 5%\n', '        bool isActive;          // 5\n', '    }\n', '\n', "    /* NB: we don't need to store loan parameters because loan products can't be altered (only disabled/enabled) */\n", '    struct LoanData {\n', '        uint collateralAmount; // 0\n', '        uint repaymentAmount; // 1\n', '        address borrower; // 2\n', '        uint32 productId; // 3\n', '        LoanState state; // 4\n', '        uint40 maturity; // 5\n', '    }\n', '\n', '    LoanProduct[] public products;\n', '\n', '    LoanData[] public loans;\n', '    mapping(address => uint[]) public accountLoans;  // owner account address =>  array of loan Ids\n', '\n', '    Rates public rates; // instance of ETH/pegged currency rate provider contract\n', '    AugmintTokenInterface public augmintToken; // instance of token contract\n', '    MonetarySupervisor public monetarySupervisor;\n', '\n', '    event NewLoan(uint32 productId, uint loanId, address indexed borrower, uint collateralAmount, uint loanAmount,\n', '        uint repaymentAmount, uint40 maturity);\n', '\n', '    event LoanProductActiveStateChanged(uint32 productId, bool newState);\n', '\n', '    event LoanProductAdded(uint32 productId);\n', '\n', '    event LoanRepayed(uint loanId, address borrower);\n', '\n', '    event LoanCollected(uint loanId, address indexed borrower, uint collectedCollateral,\n', '        uint releasedCollateral, uint defaultingFee);\n', '\n', '    event SystemContractsChanged(Rates newRatesContract, MonetarySupervisor newMonetarySupervisor);\n', '\n', '    constructor(address permissionGranterContract, AugmintTokenInterface _augmintToken,\n', '                    MonetarySupervisor _monetarySupervisor, Rates _rates)\n', '    public Restricted(permissionGranterContract) {\n', '        augmintToken = _augmintToken;\n', '        monetarySupervisor = _monetarySupervisor;\n', '        rates = _rates;\n', '    }\n', '\n', '    function addLoanProduct(uint32 term, uint32 discountRate, uint32 collateralRatio, uint minDisbursedAmount,\n', '                                uint32 defaultingFeePt, bool isActive)\n', '    external restrict("StabilityBoard") {\n', '\n', '        uint _newProductId = products.push(\n', '            LoanProduct(minDisbursedAmount, term, discountRate, collateralRatio, defaultingFeePt, isActive)\n', '        ) - 1;\n', '\n', '        uint32 newProductId = uint32(_newProductId);\n', '        require(newProductId == _newProductId, "productId overflow");\n', '\n', '        emit LoanProductAdded(newProductId);\n', '    }\n', '\n', '    function setLoanProductActiveState(uint32 productId, bool newState)\n', '    external restrict ("StabilityBoard") {\n', '        require(productId < products.length, "invalid productId"); // next line would revert but require to emit reason\n', '        products[productId].isActive = newState;\n', '        emit LoanProductActiveStateChanged(productId, newState);\n', '    }\n', '\n', '    function newEthBackedLoan(uint32 productId) external payable {\n', '        require(productId < products.length, "invalid productId"); // next line would revert but require to emit reason\n', '        LoanProduct storage product = products[productId];\n', '        require(product.isActive, "product must be in active state"); // valid product\n', '\n', '\n', '        // calculate loan values based on ETH sent in with Tx\n', '        uint tokenValue = rates.convertFromWei(augmintToken.peggedSymbol(), msg.value);\n', '        uint repaymentAmount = tokenValue.mul(product.collateralRatio).div(1000000);\n', '\n', '        uint loanAmount;\n', '        (loanAmount, ) = calculateLoanValues(product, repaymentAmount);\n', '\n', '        require(loanAmount >= product.minDisbursedAmount, "loanAmount must be >= minDisbursedAmount");\n', '\n', '        uint expiration = now.add(product.term);\n', '        uint40 maturity = uint40(expiration);\n', '        require(maturity == expiration, "maturity overflow");\n', '\n', '        // Create new loan\n', '        uint loanId = loans.push(LoanData(msg.value, repaymentAmount, msg.sender,\n', '                                            productId, LoanState.Open, maturity)) - 1;\n', '\n', '        // Store ref to new loan\n', '        accountLoans[msg.sender].push(loanId);\n', '\n', '        // Issue tokens and send to borrower\n', '        monetarySupervisor.issueLoan(msg.sender, loanAmount);\n', '\n', '        emit NewLoan(productId, loanId, msg.sender, msg.value, loanAmount, repaymentAmount, maturity);\n', '    }\n', '\n', "    /* repay loan, called from AugmintToken's transferAndNotify\n", '     Flow for repaying loan:\n', "        1) user calls token contract's transferAndNotify loanId passed in data arg\n", '        2) transferAndNotify transfers tokens to the Lender contract\n', '        3) transferAndNotify calls Lender.transferNotification with lockProductId\n', '    */\n', '    // from arg is not used as we allow anyone to repay a loan:\n', '    function transferNotification(address, uint repaymentAmount, uint loanId) external {\n', '        require(msg.sender == address(augmintToken), "msg.sender must be augmintToken");\n', '\n', '        _repayLoan(loanId, repaymentAmount);\n', '    }\n', '\n', '    function collect(uint[] loanIds) external {\n', '        /* when there are a lots of loans to be collected then\n', "             the client need to call it in batches to make sure tx won't exceed block gas limit.\n", "         Anyone can call it - can't cause harm as it only allows to collect loans which they are defaulted\n", '         TODO: optimise defaulting fee calculations\n', '        */\n', '        uint totalLoanAmountCollected;\n', '        uint totalCollateralToCollect;\n', '        uint totalDefaultingFee;\n', '        for (uint i = 0; i < loanIds.length; i++) {\n', '            require(loanIds[i] < loans.length, "invalid loanId"); // next line would revert but require to emit reason\n', '            LoanData storage loan = loans[loanIds[i]];\n', '            require(loan.state == LoanState.Open, "loan state must be Open");\n', '            require(now >= loan.maturity, "current time must be later than maturity");\n', '            LoanProduct storage product = products[loan.productId];\n', '\n', '            uint loanAmount;\n', '            (loanAmount, ) = calculateLoanValues(product, loan.repaymentAmount);\n', '\n', '            totalLoanAmountCollected = totalLoanAmountCollected.add(loanAmount);\n', '\n', '            loan.state = LoanState.Collected;\n', '\n', '            // send ETH collateral to augmintToken reserve\n', '            uint defaultingFeeInToken = loan.repaymentAmount.mul(product.defaultingFeePt).div(1000000);\n', '            uint defaultingFee = rates.convertToWei(augmintToken.peggedSymbol(), defaultingFeeInToken);\n', '            uint targetCollection = rates.convertToWei(augmintToken.peggedSymbol(),\n', '                    loan.repaymentAmount).add(defaultingFee);\n', '\n', '            uint releasedCollateral;\n', '            if (targetCollection < loan.collateralAmount) {\n', '                releasedCollateral = loan.collateralAmount.sub(targetCollection);\n', '                loan.borrower.transfer(releasedCollateral);\n', '            }\n', '            uint collateralToCollect = loan.collateralAmount.sub(releasedCollateral);\n', '            if (defaultingFee >= collateralToCollect) {\n', '                defaultingFee = collateralToCollect;\n', '                collateralToCollect = 0;\n', '            } else {\n', '                collateralToCollect = collateralToCollect.sub(defaultingFee);\n', '            }\n', '            totalDefaultingFee = totalDefaultingFee.add(defaultingFee);\n', '\n', '            totalCollateralToCollect = totalCollateralToCollect.add(collateralToCollect);\n', '\n', '            emit LoanCollected(loanIds[i], loan.borrower, collateralToCollect.add(defaultingFee),\n', '                    releasedCollateral, defaultingFee);\n', '        }\n', '\n', '        if (totalCollateralToCollect > 0) {\n', '            address(monetarySupervisor.augmintReserves()).transfer(totalCollateralToCollect);\n', '        }\n', '\n', '        if (totalDefaultingFee > 0) {\n', '            address(augmintToken.feeAccount()).transfer(totalDefaultingFee);\n', '        }\n', '\n', '        monetarySupervisor.loanCollectionNotification(totalLoanAmountCollected);// update KPIs\n', '\n', '    }\n', '\n', '    /* to allow upgrade of Rates and MonetarySupervisor contracts */\n', '    function setSystemContracts(Rates newRatesContract, MonetarySupervisor newMonetarySupervisor)\n', '    external restrict("StabilityBoard") {\n', '        rates = newRatesContract;\n', '        monetarySupervisor = newMonetarySupervisor;\n', '        emit SystemContractsChanged(newRatesContract, newMonetarySupervisor);\n', '    }\n', '\n', '    function getProductCount() external view returns (uint) {\n', '        return products.length;\n', '    }\n', '\n', '    // returns <chunkSize> loan products starting from some <offset>:\n', '    // [ productId, minDisbursedAmount, term, discountRate, collateralRatio, defaultingFeePt, maxLoanAmount, isActive ]\n', '    function getProducts(uint offset, uint16 chunkSize)\n', '    external view returns (uint[8][]) {\n', '        uint limit = SafeMath.min(offset.add(chunkSize), products.length);\n', '        uint[8][] memory response = new uint[8][](limit.sub(offset));\n', '\n', '        for (uint i = offset; i < limit; i++) {\n', '            LoanProduct storage product = products[i];\n', '            response[i - offset] = [i, product.minDisbursedAmount, product.term, product.discountRate,\n', '                    product.collateralRatio, product.defaultingFeePt,\n', '                    monetarySupervisor.getMaxLoanAmount(product.minDisbursedAmount), product.isActive ? 1 : 0 ];\n', '        }\n', '        return response;\n', '    }\n', '\n', '    function getLoanCount() external view returns (uint) {\n', '        return loans.length;\n', '    }\n', '\n', '    /* returns <chunkSize> loans starting from some <offset>. Loans data encoded as:\n', '        [loanId, collateralAmount, repaymentAmount, borrower, productId,\n', '              state, maturity, disbursementTime, loanAmount, interestAmount] */\n', '    function getLoans(uint offset, uint16 chunkSize)\n', '    external view returns (uint[10][]) {\n', '        uint limit = SafeMath.min(offset.add(chunkSize), loans.length);\n', '        uint[10][] memory response = new uint[10][](limit.sub(offset));\n', '\n', '        for (uint i = offset; i < limit; i++) {\n', '            response[i - offset] = getLoanTuple(i);\n', '        }\n', '        return response;\n', '    }\n', '\n', '    function getLoanCountForAddress(address borrower) external view returns (uint) {\n', '        return accountLoans[borrower].length;\n', '    }\n', '\n', '    /* returns <chunkSize> loans of a given account, starting from some <offset>. Loans data encoded as:\n', '        [loanId, collateralAmount, repaymentAmount, borrower, productId, state, maturity, disbursementTime,\n', '                                                                                    loanAmount, interestAmount ] */\n', '    function getLoansForAddress(address borrower, uint offset, uint16 chunkSize)\n', '    external view returns (uint[10][]) {\n', '        uint[] storage loansForAddress = accountLoans[borrower];\n', '        uint limit = SafeMath.min(offset.add(chunkSize), loansForAddress.length);\n', '        uint[10][] memory response = new uint[10][](limit.sub(offset));\n', '\n', '        for (uint i = offset; i < limit; i++) {\n', '            response[i - offset] = getLoanTuple(loansForAddress[i]);\n', '        }\n', '        return response;\n', '    }\n', '\n', '    function getLoanTuple(uint loanId) public view returns (uint[10] result) {\n', '        require(loanId < loans.length, "invalid loanId"); // next line would revert but require to emit reason\n', '        LoanData storage loan = loans[loanId];\n', '        LoanProduct storage product = products[loan.productId];\n', '\n', '        uint loanAmount;\n', '        uint interestAmount;\n', '        (loanAmount, interestAmount) = calculateLoanValues(product, loan.repaymentAmount);\n', '        uint disbursementTime = loan.maturity - product.term;\n', '\n', '        LoanState loanState =\n', '                loan.state == LoanState.Open && now >= loan.maturity ? LoanState.Defaulted : loan.state;\n', '\n', '        result = [loanId, loan.collateralAmount, loan.repaymentAmount, uint(loan.borrower),\n', '                loan.productId, uint(loanState), loan.maturity, disbursementTime, loanAmount, interestAmount];\n', '    }\n', '\n', '    function calculateLoanValues(LoanProduct storage product, uint repaymentAmount)\n', '    internal view returns (uint loanAmount, uint interestAmount) {\n', '        // calculate loan values based on repayment amount\n', '        loanAmount = repaymentAmount.mul(product.discountRate).div(1000000);\n', '        interestAmount = loanAmount > repaymentAmount ? 0 : repaymentAmount.sub(loanAmount);\n', '    }\n', '\n', '    /* internal function, assuming repayment amount already transfered  */\n', '    function _repayLoan(uint loanId, uint repaymentAmount) internal {\n', '        require(loanId < loans.length, "invalid loanId"); // next line would revert but require to emit reason\n', '        LoanData storage loan = loans[loanId];\n', '        require(loan.state == LoanState.Open, "loan state must be Open");\n', '        require(repaymentAmount == loan.repaymentAmount, "repaymentAmount must be equal to tokens sent");\n', '        require(now <= loan.maturity, "current time must be earlier than maturity");\n', '\n', '        LoanProduct storage product = products[loan.productId];\n', '        uint loanAmount;\n', '        uint interestAmount;\n', '        (loanAmount, interestAmount) = calculateLoanValues(product, loan.repaymentAmount);\n', '\n', '        loans[loanId].state = LoanState.Repaid;\n', '\n', '        if (interestAmount > 0) {\n', '            augmintToken.transfer(monetarySupervisor.interestEarnedAccount(), interestAmount);\n', '            augmintToken.burn(loanAmount);\n', '        } else {\n', '            // negative or zero interest (i.e. discountRate >= 0)\n', '            augmintToken.burn(repaymentAmount);\n', '        }\n', '\n', '        monetarySupervisor.loanRepaymentNotification(loanAmount); // update KPIs\n', '\n', '        loan.borrower.transfer(loan.collateralAmount); // send back ETH collateral\n', '\n', '        emit LoanRepayed(loanId, loan.borrower);\n', '    }\n', '}']