['/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title The GainmersTOKEN contract\n', ' * @dev The GainmersTOKEN Token inherite from StandardToken and Ownable by Zeppelin\n', ' * @author Gainmers.Teamdev\n', ' */\n', 'contract GainmersTOKEN is StandardToken, Ownable {\n', '    string  public  constant name = "Gain Token";\n', '    string  public  constant symbol = "GMR";\n', '    uint8   public  constant decimals = 18;\n', '\n', '    uint256 public  totalSupply;\n', '    uint    public  transferableStartTime;\n', '    address public  tokenSaleContract;\n', '   \n', '\n', '    modifier onlyWhenTransferEnabled() \n', '    {\n', '        if ( now < transferableStartTime ) {\n', '            require(msg.sender == tokenSaleContract || msg.sender == owner);\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier validDestination(address to) \n', '    {\n', '        require(to != address(this));\n', '        _;\n', '    }\n', '\n', '    modifier onlySaleContract()\n', '    {\n', '        require(msg.sender == tokenSaleContract);\n', '        _;\n', '    }\n', '\n', '    function GainmersTOKEN(\n', '        uint tokenTotalAmount, \n', '        uint _transferableStartTime, \n', '        address _admin) public \n', '    {\n', '        \n', '        totalSupply = tokenTotalAmount * (10 ** uint256(decimals));\n', '\n', '        balances[msg.sender] = totalSupply;\n', '        emit Transfer(address(0x0), msg.sender, totalSupply);\n', '\n', '        transferableStartTime = _transferableStartTime;\n', '        tokenSaleContract = msg.sender;\n', '\n', '        transferOwnership(_admin); \n', '\n', '    }\n', '\n', '    /**\n', '     * @dev override transfer token for a specified address to add onlyWhenTransferEnabled and validDestination\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint _value)\n', '        public\n', '        validDestination(_to)\n', '        onlyWhenTransferEnabled\n', '        returns (bool) \n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev override transferFrom token for a specified address to add onlyWhenTransferEnabled and validDestination\n', '     * @param _from The address to transfer from.\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        public\n', '        validDestination(_to)\n', '        onlyWhenTransferEnabled\n', '        returns (bool) \n', '    {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    event Burn(address indexed _burner, uint _value);\n', '\n', '    /**\n', '     * @dev burn tokens\n', '     * @param _value The amount to be burned.\n', '     * @return always true (necessary in case of override)\n', '     */\n', '    function burn(uint _value) \n', '        public\n', '        onlyWhenTransferEnabled\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '        emit Transfer(msg.sender, address(0x0), _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev burn tokens in the behalf of someone\n', '     * @param _from The address of the owner of the token.\n', '     * @param _value The amount to be burned.\n', '     * @return always true (necessary in case of override)\n', '     */\n', '    function burnFrom(address _from, uint256 _value) \n', '        public\n', '        onlyWhenTransferEnabled\n', '        onlyOwner\n', '        returns(bool) \n', '    {\n', '        assert(transferFrom(_from, msg.sender, _value));\n', '        return burn(_value);\n', '    }\n', '\n', '    /** \n', '    *If the event SaleSoldout is called this function enables earlier tokens transfer\n', '    */\n', '    function enableTransferEarlier ()\n', '        public\n', '        onlySaleContract\n', '    {\n', '        transferableStartTime = now + 2 days;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev transfer to owner any tokens send by mistake on this contracts\n', '     * @param token The address of the token to transfer.\n', '     * @param amount The amount to be transfered.\n', '     */\n', '    function emergencyERC20Drain(ERC20 token, uint amount )\n', '        public\n', '        onlyOwner \n', '    {\n', '        token.transfer(owner, amount);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ModifiedCrowdsale\n', ' * @dev ModifiedCrowdsale is based in Crowdsale. Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override \n', ' * the methods to add functionality. Consider using &#39;super&#39; where appropiate to concatenate\n', ' * behavior.\n', ' */\n', ' \n', 'contract ModifiedCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    StandardToken public token; \n', '\n', '    //Start and end timestamps where investments are allowed \n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '     // how many token units a buyer gets per wei\n', '    uint256 public rate;\n', '\n', '    // address where crowdsale funds are collected\n', '    address public wallet;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n', '    //Event trigger if the Crowdsale reaches the hardcap\n', '     event TokenSaleSoldOut();\n', '    /**\n', '    * @param _startTime StartTime for the token crowdsale\n', '    * @param _endTime EndTime for the token crowdsale     \n', '    * @param _rate Number of token units a buyer gets per wei\n', '    * @param _wallet Address where collected funds will be forwarded to\n', '    */\n', '    function ModifiedCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public  {\n', '        \n', '        require(_startTime >= now);\n', '        require(_endTime >= _startTime);\n', '        require(_rate > 0);\n', '        require(_wallet != 0x0);\n', '\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '        \n', '        token = createTokenContract(); \n', '    }\n', '\n', '    // creates the token to be sold.\n', '    // override this method to have crowdsale of a specific mintable token.\n', '    function createTokenContract() \n', '        internal \n', '        returns(StandardToken) \n', '    {\n', '        return new StandardToken();\n', '    }\n', '\n', '    /**\n', '    * @dev fallback function ***DO NOT OVERRIDE***\n', '    */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address _beneficiary) public   payable {\n', '        require(validPurchase());\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(rate);\n', '        tokens += getBonus(tokens);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        require(token.transfer(_beneficiary, tokens)); \n', '        emit TokenPurchase(_beneficiary, weiAmount, tokens);\n', '\n', '        forwardFunds();\n', '\n', '        postBuyTokens();\n', '    }\n', '\n', '    // Action after buying tokens\n', '    function postBuyTokens () internal  \n', '    {emit TokenSaleSoldOut();\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() \n', '       internal \n', '    {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase()  internal  view\n', '        returns(bool) \n', '    {\n', '        bool withinPeriod = now >= startTime && now <= endTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        bool nonInvalidAccount = msg.sender != 0;\n', '        return withinPeriod && nonZeroPurchase && nonInvalidAccount;\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() \n', '        public \n', '        constant \n', '        returns(bool) \n', '    {\n', '        return now > endTime;\n', '    }\n', '\n', '\n', '    /**\n', '      * @dev Get the bonus based on the buy time \n', '      * @return the number of bonus token\n', '    */\n', '    function getBonus(uint256 _tokens) internal view returns (uint256 bonus) {\n', '        require(_tokens != 0);\n', '        if (startTime <= now && now < startTime + 7 days ) {\n', '            return _tokens.div(5);\n', '        } else if (startTime + 7 days <= now && now < startTime + 14 days ) {\n', '            return _tokens.div(10);\n', '        } else if (startTime + 14 days <= now && now < startTime + 21 days ) {\n', '            return _tokens.div(20);\n', '        }\n', '\n', '        return 0;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Extension of Crowdsale with a max amount of funds raised\n', ' */\n', 'contract CappedCrowdsale is ModifiedCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  // Request Modification : delete constant because needed in son contract\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title GainmersSALE\n', ' * @dev \n', ' * GainmersSALE inherits form the Ownable and CappedCrowdsale,\n', ' *\n', ' * @author Gainmers.Teamdev\n', ' */\n', 'contract GainmersSALE is Ownable, CappedCrowdsale {\n', '    \n', '    //Total supply of the GainmersTOKEN\n', '    uint public constant TotalTOkenSupply = 100000000;\n', '\n', '    //Hardcap of the ICO in wei\n', '    uint private constant Hardcap = 30000 ether;\n', '\n', '    //Exchange rate EHT/ GMR token\n', '    uint private constant RateExchange = 1660;\n', '\n', '   \n', '\n', '    /**Initial distribution of the Tokens*/\n', '\n', '    // Token initialy distributed for the team management and developer incentives (10%)\n', '    address public constant TeamWallet = 0x6009267Cb183AEC8842cb1d020410f172dD2d50F;\n', '    uint public constant TeamWalletAmount = 10000000e18; \n', '    \n', '     // Token initialy distributed for the Advisors and sponsors (10%)\n', '    address public constant TeamAdvisorsWallet = 0x3925848aF4388a3c10cd73F3529159de5f0C686c;\n', '    uint public constant AdvisorsAmount = 10000000e18;\n', '    \n', '     // Token initially distribuded for future invesment rounds and prizes in the plataform (15%)\n', '    address public constant \n', '    ReinvestWallet = 0x1cc1Bf6D3100Ce4EE3a398bEdE33A7e3a42225D7;\n', '    uint public constant ReinvestAmount = 15000000e18;\n', '\n', '     // Token initialy distributed for  Bounty Campaing (5%)\n', '    address public constant BountyCampaingWallet = 0xD36FcA0DAd25554922d860dA18Ac47e4F9513672\n', '    ;\n', '    uint public constant BountyAmount = 5000000e18;\n', '\n', '    \n', '\n', '    //Period after the sale for the token to be transferable\n', '    uint public constant AfterSaleTransferableTime = 2 days;\n', '\n', '\n', '    function GainmersSALE(uint256 _startTime, uint256 _endTime) public\n', '      CappedCrowdsale(Hardcap)\n', '      ModifiedCrowdsale(_startTime,\n', '                         _endTime, \n', '                         RateExchange, \n', '                         TeamWallet)\n', '    {\n', '        \n', '        token.transfer(TeamWallet, TeamWalletAmount);\n', '        token.transfer(TeamAdvisorsWallet, AdvisorsAmount);\n', '        token.transfer(ReinvestWallet, ReinvestAmount);\n', '        token.transfer(BountyCampaingWallet, BountyAmount);\n', '\n', '\n', '        \n', '    }\n', '\n', '    /**\n', '     * @dev Handles the creation of the GainmersTOKEN\n', '     * @return the  StandardToken \n', '     */\n', '    function createTokenContract () \n', '      internal \n', '      returns(StandardToken) \n', '    {\n', '        return new GainmersTOKEN(TotalTOkenSupply,\n', '         endTime.add(AfterSaleTransferableTime),\n', '        TeamWallet);\n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * @dev Drain the remaining tokens of the crowdsale to the TeamWallet account\n', '     * @dev Only for owner\n', '     * @return the StandardToken \n', '     */\n', '    function drainRemainingToken () \n', '      public\n', '      onlyOwner\n', '    {\n', '        require(hasEnded());\n', '        token.transfer(TeamWallet, token.balanceOf(this));\n', '    }\n', '\n', '\n', '    /** \n', '    * @dev Allows the early transfer of tokens if the ICO end before the end date\n', '    */\n', '\n', '    function postBuyTokens ()  internal {\n', '        if ( weiRaised >= Hardcap ) {  \n', '            GainmersTOKEN gainmersToken = GainmersTOKEN (token);\n', '            gainmersToken.enableTransferEarlier();\n', '            emit TokenSaleSoldOut();\n', '        }\n', '    }\n', '}']
['/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title The GainmersTOKEN contract\n', ' * @dev The GainmersTOKEN Token inherite from StandardToken and Ownable by Zeppelin\n', ' * @author Gainmers.Teamdev\n', ' */\n', 'contract GainmersTOKEN is StandardToken, Ownable {\n', '    string  public  constant name = "Gain Token";\n', '    string  public  constant symbol = "GMR";\n', '    uint8   public  constant decimals = 18;\n', '\n', '    uint256 public  totalSupply;\n', '    uint    public  transferableStartTime;\n', '    address public  tokenSaleContract;\n', '   \n', '\n', '    modifier onlyWhenTransferEnabled() \n', '    {\n', '        if ( now < transferableStartTime ) {\n', '            require(msg.sender == tokenSaleContract || msg.sender == owner);\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier validDestination(address to) \n', '    {\n', '        require(to != address(this));\n', '        _;\n', '    }\n', '\n', '    modifier onlySaleContract()\n', '    {\n', '        require(msg.sender == tokenSaleContract);\n', '        _;\n', '    }\n', '\n', '    function GainmersTOKEN(\n', '        uint tokenTotalAmount, \n', '        uint _transferableStartTime, \n', '        address _admin) public \n', '    {\n', '        \n', '        totalSupply = tokenTotalAmount * (10 ** uint256(decimals));\n', '\n', '        balances[msg.sender] = totalSupply;\n', '        emit Transfer(address(0x0), msg.sender, totalSupply);\n', '\n', '        transferableStartTime = _transferableStartTime;\n', '        tokenSaleContract = msg.sender;\n', '\n', '        transferOwnership(_admin); \n', '\n', '    }\n', '\n', '    /**\n', '     * @dev override transfer token for a specified address to add onlyWhenTransferEnabled and validDestination\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint _value)\n', '        public\n', '        validDestination(_to)\n', '        onlyWhenTransferEnabled\n', '        returns (bool) \n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev override transferFrom token for a specified address to add onlyWhenTransferEnabled and validDestination\n', '     * @param _from The address to transfer from.\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        public\n', '        validDestination(_to)\n', '        onlyWhenTransferEnabled\n', '        returns (bool) \n', '    {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    event Burn(address indexed _burner, uint _value);\n', '\n', '    /**\n', '     * @dev burn tokens\n', '     * @param _value The amount to be burned.\n', '     * @return always true (necessary in case of override)\n', '     */\n', '    function burn(uint _value) \n', '        public\n', '        onlyWhenTransferEnabled\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '        emit Transfer(msg.sender, address(0x0), _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev burn tokens in the behalf of someone\n', '     * @param _from The address of the owner of the token.\n', '     * @param _value The amount to be burned.\n', '     * @return always true (necessary in case of override)\n', '     */\n', '    function burnFrom(address _from, uint256 _value) \n', '        public\n', '        onlyWhenTransferEnabled\n', '        onlyOwner\n', '        returns(bool) \n', '    {\n', '        assert(transferFrom(_from, msg.sender, _value));\n', '        return burn(_value);\n', '    }\n', '\n', '    /** \n', '    *If the event SaleSoldout is called this function enables earlier tokens transfer\n', '    */\n', '    function enableTransferEarlier ()\n', '        public\n', '        onlySaleContract\n', '    {\n', '        transferableStartTime = now + 2 days;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev transfer to owner any tokens send by mistake on this contracts\n', '     * @param token The address of the token to transfer.\n', '     * @param amount The amount to be transfered.\n', '     */\n', '    function emergencyERC20Drain(ERC20 token, uint amount )\n', '        public\n', '        onlyOwner \n', '    {\n', '        token.transfer(owner, amount);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ModifiedCrowdsale\n', ' * @dev ModifiedCrowdsale is based in Crowdsale. Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override \n', " * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n", ' * behavior.\n', ' */\n', ' \n', 'contract ModifiedCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    StandardToken public token; \n', '\n', '    //Start and end timestamps where investments are allowed \n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '     // how many token units a buyer gets per wei\n', '    uint256 public rate;\n', '\n', '    // address where crowdsale funds are collected\n', '    address public wallet;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n', '    //Event trigger if the Crowdsale reaches the hardcap\n', '     event TokenSaleSoldOut();\n', '    /**\n', '    * @param _startTime StartTime for the token crowdsale\n', '    * @param _endTime EndTime for the token crowdsale     \n', '    * @param _rate Number of token units a buyer gets per wei\n', '    * @param _wallet Address where collected funds will be forwarded to\n', '    */\n', '    function ModifiedCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public  {\n', '        \n', '        require(_startTime >= now);\n', '        require(_endTime >= _startTime);\n', '        require(_rate > 0);\n', '        require(_wallet != 0x0);\n', '\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '        \n', '        token = createTokenContract(); \n', '    }\n', '\n', '    // creates the token to be sold.\n', '    // override this method to have crowdsale of a specific mintable token.\n', '    function createTokenContract() \n', '        internal \n', '        returns(StandardToken) \n', '    {\n', '        return new StandardToken();\n', '    }\n', '\n', '    /**\n', '    * @dev fallback function ***DO NOT OVERRIDE***\n', '    */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address _beneficiary) public   payable {\n', '        require(validPurchase());\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(rate);\n', '        tokens += getBonus(tokens);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        require(token.transfer(_beneficiary, tokens)); \n', '        emit TokenPurchase(_beneficiary, weiAmount, tokens);\n', '\n', '        forwardFunds();\n', '\n', '        postBuyTokens();\n', '    }\n', '\n', '    // Action after buying tokens\n', '    function postBuyTokens () internal  \n', '    {emit TokenSaleSoldOut();\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() \n', '       internal \n', '    {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase()  internal  view\n', '        returns(bool) \n', '    {\n', '        bool withinPeriod = now >= startTime && now <= endTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        bool nonInvalidAccount = msg.sender != 0;\n', '        return withinPeriod && nonZeroPurchase && nonInvalidAccount;\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() \n', '        public \n', '        constant \n', '        returns(bool) \n', '    {\n', '        return now > endTime;\n', '    }\n', '\n', '\n', '    /**\n', '      * @dev Get the bonus based on the buy time \n', '      * @return the number of bonus token\n', '    */\n', '    function getBonus(uint256 _tokens) internal view returns (uint256 bonus) {\n', '        require(_tokens != 0);\n', '        if (startTime <= now && now < startTime + 7 days ) {\n', '            return _tokens.div(5);\n', '        } else if (startTime + 7 days <= now && now < startTime + 14 days ) {\n', '            return _tokens.div(10);\n', '        } else if (startTime + 14 days <= now && now < startTime + 21 days ) {\n', '            return _tokens.div(20);\n', '        }\n', '\n', '        return 0;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Extension of Crowdsale with a max amount of funds raised\n', ' */\n', 'contract CappedCrowdsale is ModifiedCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  // Request Modification : delete constant because needed in son contract\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title GainmersSALE\n', ' * @dev \n', ' * GainmersSALE inherits form the Ownable and CappedCrowdsale,\n', ' *\n', ' * @author Gainmers.Teamdev\n', ' */\n', 'contract GainmersSALE is Ownable, CappedCrowdsale {\n', '    \n', '    //Total supply of the GainmersTOKEN\n', '    uint public constant TotalTOkenSupply = 100000000;\n', '\n', '    //Hardcap of the ICO in wei\n', '    uint private constant Hardcap = 30000 ether;\n', '\n', '    //Exchange rate EHT/ GMR token\n', '    uint private constant RateExchange = 1660;\n', '\n', '   \n', '\n', '    /**Initial distribution of the Tokens*/\n', '\n', '    // Token initialy distributed for the team management and developer incentives (10%)\n', '    address public constant TeamWallet = 0x6009267Cb183AEC8842cb1d020410f172dD2d50F;\n', '    uint public constant TeamWalletAmount = 10000000e18; \n', '    \n', '     // Token initialy distributed for the Advisors and sponsors (10%)\n', '    address public constant TeamAdvisorsWallet = 0x3925848aF4388a3c10cd73F3529159de5f0C686c;\n', '    uint public constant AdvisorsAmount = 10000000e18;\n', '    \n', '     // Token initially distribuded for future invesment rounds and prizes in the plataform (15%)\n', '    address public constant \n', '    ReinvestWallet = 0x1cc1Bf6D3100Ce4EE3a398bEdE33A7e3a42225D7;\n', '    uint public constant ReinvestAmount = 15000000e18;\n', '\n', '     // Token initialy distributed for  Bounty Campaing (5%)\n', '    address public constant BountyCampaingWallet = 0xD36FcA0DAd25554922d860dA18Ac47e4F9513672\n', '    ;\n', '    uint public constant BountyAmount = 5000000e18;\n', '\n', '    \n', '\n', '    //Period after the sale for the token to be transferable\n', '    uint public constant AfterSaleTransferableTime = 2 days;\n', '\n', '\n', '    function GainmersSALE(uint256 _startTime, uint256 _endTime) public\n', '      CappedCrowdsale(Hardcap)\n', '      ModifiedCrowdsale(_startTime,\n', '                         _endTime, \n', '                         RateExchange, \n', '                         TeamWallet)\n', '    {\n', '        \n', '        token.transfer(TeamWallet, TeamWalletAmount);\n', '        token.transfer(TeamAdvisorsWallet, AdvisorsAmount);\n', '        token.transfer(ReinvestWallet, ReinvestAmount);\n', '        token.transfer(BountyCampaingWallet, BountyAmount);\n', '\n', '\n', '        \n', '    }\n', '\n', '    /**\n', '     * @dev Handles the creation of the GainmersTOKEN\n', '     * @return the  StandardToken \n', '     */\n', '    function createTokenContract () \n', '      internal \n', '      returns(StandardToken) \n', '    {\n', '        return new GainmersTOKEN(TotalTOkenSupply,\n', '         endTime.add(AfterSaleTransferableTime),\n', '        TeamWallet);\n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * @dev Drain the remaining tokens of the crowdsale to the TeamWallet account\n', '     * @dev Only for owner\n', '     * @return the StandardToken \n', '     */\n', '    function drainRemainingToken () \n', '      public\n', '      onlyOwner\n', '    {\n', '        require(hasEnded());\n', '        token.transfer(TeamWallet, token.balanceOf(this));\n', '    }\n', '\n', '\n', '    /** \n', '    * @dev Allows the early transfer of tokens if the ICO end before the end date\n', '    */\n', '\n', '    function postBuyTokens ()  internal {\n', '        if ( weiRaised >= Hardcap ) {  \n', '            GainmersTOKEN gainmersToken = GainmersTOKEN (token);\n', '            gainmersToken.enableTransferEarlier();\n', '            emit TokenSaleSoldOut();\n', '        }\n', '    }\n', '}']
