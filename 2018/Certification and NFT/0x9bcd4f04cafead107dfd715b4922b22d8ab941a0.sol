['pragma solidity ^0.4.18;\n', '\n', '\n', '// CONTRACT USED TO TEST THE ICO CONTRACT\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract IprontoToken is StandardToken {\n', '\n', '  // Setting Token Name to Mango\n', '  string public constant name = "iPRONTO";\n', '\n', '  // Setting Token Symbol to MGO\n', '  string public constant symbol = "IPR";\n', '\n', '  // Setting Token Decimals to 18\n', '  uint8 public constant decimals = 18;\n', '\n', '  // Setting Token Decimals to 45 Million\n', '  uint256 public constant INITIAL_SUPPLY = 45000000 * (1 ether / 1 wei);\n', '\n', '  address public owner;\n', '\n', '  // Flags address for KYC verrified.\n', '  mapping (address => bool) public validKyc;\n', '\n', '  function IprontoToken() public{\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  // Approving an address to tranfer tokens\n', '  function approveKyc(address[] _addrs)\n', '        public\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        uint len = _addrs.length;\n', '        while (len-- > 0) {\n', '            validKyc[_addrs[len]] = true;\n', '        }\n', '        return true;\n', '    }\n', '\n', '  function isValidKyc(address _addr) public constant returns (bool){\n', '    return validKyc[_addr];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require(isValidKyc(msg.sender));\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function() public{\n', '    throw;\n', '  }\n', '}\n', '\n', '\n', 'contract CrowdsaleiPRONTOLiveICO{\n', '  using SafeMath for uint256;\n', '  address public owner;\n', '\n', '  // The token being sold\n', '  IprontoToken public token;\n', '\n', '  // rate for one token in wei\n', '  uint256 public rate = 500; // 1 ether\n', '  uint256 public discountRatePreIco = 588; // 1 ether\n', '  uint256 public discountRateIco = 555; // 1 ether\n', '\n', '  // funds raised in Wei\n', '  uint256 public weiRaised;\n', '\n', '  // Funds pool\n', '  // Setting funds pool for PROMOTORS_POOL, PRIVATE_SALE_POOL, PRE_ICO_POOL and ICO_POOL\n', '  uint256 public constant PROMOTORS_POOL = 18000000 * (1 ether / 1 wei);\n', '  uint256 public constant PRIVATE_SALE_POOL = 3600000 * (1 ether / 1 wei);\n', '  uint256 public constant PRE_ICO_POOL = 6300000 * (1 ether / 1 wei);\n', '  uint256 public constant ICO_POOL = 17100000 * (1 ether / 1 wei);\n', '\n', '  // Initilising tracking variables for Funds pool\n', '  uint256 public promotorSale = 0;\n', '  uint256 public privateSale = 0;\n', '  uint256 public preicoSale = 0;\n', '  uint256 public icoSale = 0;\n', '\n', '  // Solidity event to notify the dashboard app about transfer\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  // Contract constructor\n', '  function CrowdsaleiPRONTOLiveICO() public{\n', '    token = createTokenContract();\n', '    owner = msg.sender;\n', '  }\n', '\n', '  // Creates ERC20 standard token\n', '  function createTokenContract() internal returns (IprontoToken) {\n', '    return new IprontoToken();\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase(uint256 weiAmount, address beneficiary) internal view returns (bool) {\n', '    bool nonZeroPurchase = weiAmount != 0;\n', '    bool validAddress = beneficiary != address(0);\n', '    return nonZeroPurchase && validAddress;\n', '  }\n', '\n', '  // Getter function to see all funds pool balances.\n', '  function availableTokenBalance(uint256 token_needed, uint8 mode)  internal view returns (bool){\n', '\n', '    if (mode == 1) { // promotorSale\n', '      return ((promotorSale + token_needed) <= PROMOTORS_POOL );\n', '    }\n', '    else if (mode == 2) { // Closed Group\n', '      return ((privateSale + token_needed) <= PRIVATE_SALE_POOL);\n', '    }\n', '    else if (mode == 3) { // preicoSale\n', '      return ((preicoSale + token_needed) <= PRE_ICO_POOL);\n', '    }\n', '    else if (mode == 4) { // icoSale\n', '      return ((icoSale + token_needed) <= ICO_POOL);\n', '    }\n', '    else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () public payable {\n', '    throw;\n', '  }\n', '\n', '  // Token transfer\n', '  function transferToken(address beneficiary, uint256 tokens, uint8 mode) onlyOwner public {\n', '    // Checking for valid purchase\n', '    require(validPurchase(tokens, beneficiary));\n', '    require(availableTokenBalance(tokens, mode));\n', '    // Execute token purchase\n', '    if(mode == 1){\n', '      promotorSale = promotorSale.add(tokens);\n', '    } else if(mode == 2) {\n', '      privateSale = privateSale.add(tokens);\n', '    } else if(mode == 3) {\n', '      preicoSale = preicoSale.add(tokens);\n', '    } else if(mode == 4) {\n', '      icoSale = icoSale.add(tokens);\n', '    } else {\n', '      throw;\n', '    }\n', '    token.transfer(beneficiary, tokens);\n', '    TokenPurchase(beneficiary, beneficiary, tokens, tokens);\n', '  }\n', '\n', '  // Function to get balance of an address\n', '  function balanceOf(address _addr) public view returns (uint256 balance) {\n', '    return token.balanceOf(_addr);\n', '  }\n', '\n', '  function setTokenPrice(uint256 _rate,uint256 _discountRatePreIco,uint256 _discountRateIco) onlyOwner public returns (bool){\n', '    rate = _rate; // 1 ether\n', '    discountRatePreIco = _discountRatePreIco; // 1 ether\n', '    discountRateIco = _discountRateIco; // 1 ether\n', '    return true;\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '// CONTRACT USED TO TEST THE ICO CONTRACT\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract IprontoToken is StandardToken {\n', '\n', '  // Setting Token Name to Mango\n', '  string public constant name = "iPRONTO";\n', '\n', '  // Setting Token Symbol to MGO\n', '  string public constant symbol = "IPR";\n', '\n', '  // Setting Token Decimals to 18\n', '  uint8 public constant decimals = 18;\n', '\n', '  // Setting Token Decimals to 45 Million\n', '  uint256 public constant INITIAL_SUPPLY = 45000000 * (1 ether / 1 wei);\n', '\n', '  address public owner;\n', '\n', '  // Flags address for KYC verrified.\n', '  mapping (address => bool) public validKyc;\n', '\n', '  function IprontoToken() public{\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  // Approving an address to tranfer tokens\n', '  function approveKyc(address[] _addrs)\n', '        public\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        uint len = _addrs.length;\n', '        while (len-- > 0) {\n', '            validKyc[_addrs[len]] = true;\n', '        }\n', '        return true;\n', '    }\n', '\n', '  function isValidKyc(address _addr) public constant returns (bool){\n', '    return validKyc[_addr];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require(isValidKyc(msg.sender));\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function() public{\n', '    throw;\n', '  }\n', '}\n', '\n', '\n', 'contract CrowdsaleiPRONTOLiveICO{\n', '  using SafeMath for uint256;\n', '  address public owner;\n', '\n', '  // The token being sold\n', '  IprontoToken public token;\n', '\n', '  // rate for one token in wei\n', '  uint256 public rate = 500; // 1 ether\n', '  uint256 public discountRatePreIco = 588; // 1 ether\n', '  uint256 public discountRateIco = 555; // 1 ether\n', '\n', '  // funds raised in Wei\n', '  uint256 public weiRaised;\n', '\n', '  // Funds pool\n', '  // Setting funds pool for PROMOTORS_POOL, PRIVATE_SALE_POOL, PRE_ICO_POOL and ICO_POOL\n', '  uint256 public constant PROMOTORS_POOL = 18000000 * (1 ether / 1 wei);\n', '  uint256 public constant PRIVATE_SALE_POOL = 3600000 * (1 ether / 1 wei);\n', '  uint256 public constant PRE_ICO_POOL = 6300000 * (1 ether / 1 wei);\n', '  uint256 public constant ICO_POOL = 17100000 * (1 ether / 1 wei);\n', '\n', '  // Initilising tracking variables for Funds pool\n', '  uint256 public promotorSale = 0;\n', '  uint256 public privateSale = 0;\n', '  uint256 public preicoSale = 0;\n', '  uint256 public icoSale = 0;\n', '\n', '  // Solidity event to notify the dashboard app about transfer\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  // Contract constructor\n', '  function CrowdsaleiPRONTOLiveICO() public{\n', '    token = createTokenContract();\n', '    owner = msg.sender;\n', '  }\n', '\n', '  // Creates ERC20 standard token\n', '  function createTokenContract() internal returns (IprontoToken) {\n', '    return new IprontoToken();\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase(uint256 weiAmount, address beneficiary) internal view returns (bool) {\n', '    bool nonZeroPurchase = weiAmount != 0;\n', '    bool validAddress = beneficiary != address(0);\n', '    return nonZeroPurchase && validAddress;\n', '  }\n', '\n', '  // Getter function to see all funds pool balances.\n', '  function availableTokenBalance(uint256 token_needed, uint8 mode)  internal view returns (bool){\n', '\n', '    if (mode == 1) { // promotorSale\n', '      return ((promotorSale + token_needed) <= PROMOTORS_POOL );\n', '    }\n', '    else if (mode == 2) { // Closed Group\n', '      return ((privateSale + token_needed) <= PRIVATE_SALE_POOL);\n', '    }\n', '    else if (mode == 3) { // preicoSale\n', '      return ((preicoSale + token_needed) <= PRE_ICO_POOL);\n', '    }\n', '    else if (mode == 4) { // icoSale\n', '      return ((icoSale + token_needed) <= ICO_POOL);\n', '    }\n', '    else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () public payable {\n', '    throw;\n', '  }\n', '\n', '  // Token transfer\n', '  function transferToken(address beneficiary, uint256 tokens, uint8 mode) onlyOwner public {\n', '    // Checking for valid purchase\n', '    require(validPurchase(tokens, beneficiary));\n', '    require(availableTokenBalance(tokens, mode));\n', '    // Execute token purchase\n', '    if(mode == 1){\n', '      promotorSale = promotorSale.add(tokens);\n', '    } else if(mode == 2) {\n', '      privateSale = privateSale.add(tokens);\n', '    } else if(mode == 3) {\n', '      preicoSale = preicoSale.add(tokens);\n', '    } else if(mode == 4) {\n', '      icoSale = icoSale.add(tokens);\n', '    } else {\n', '      throw;\n', '    }\n', '    token.transfer(beneficiary, tokens);\n', '    TokenPurchase(beneficiary, beneficiary, tokens, tokens);\n', '  }\n', '\n', '  // Function to get balance of an address\n', '  function balanceOf(address _addr) public view returns (uint256 balance) {\n', '    return token.balanceOf(_addr);\n', '  }\n', '\n', '  function setTokenPrice(uint256 _rate,uint256 _discountRatePreIco,uint256 _discountRateIco) onlyOwner public returns (bool){\n', '    rate = _rate; // 1 ether\n', '    discountRatePreIco = _discountRatePreIco; // 1 ether\n', '    discountRateIco = _discountRateIco; // 1 ether\n', '    return true;\n', '  }\n', '}']
