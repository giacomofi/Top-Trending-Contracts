['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/NameRegistry.sol\n', '\n', 'contract NameRegistry is Ownable {\n', '  mapping(address => bool) registrar;\n', '\n', '  // Index event by address, for reverse look up\n', '  event NameSet(address indexed addr, string name);\n', '  event NameFinalized(address indexed addr, bytes32 namehash);\n', '\n', '  // External services should honour the NameRemoved event, and remove name-address pair from index.\n', '  event NameRemoved(address indexed addr, bytes32 namehash, bool forced);\n', '\n', '  // lookup of address by name hash\n', '  mapping(bytes32 => address) public namehashAddresses;\n', '\n', '  mapping(bytes32 => bool) public namehashFinalized;\n', '\n', '  function registerName(address addr, string name) public onlyRegistrar {\n', '    require(bytes(name).length != 0);\n', '    require(addr != address(0));\n', '\n', '    bytes32 namehash = keccak256(bytes(name));\n', '    require(namehashAddresses[namehash] == address(0));\n', '\n', '    namehashAddresses[namehash] = addr;\n', '    emit NameSet(addr, name);\n', '  }\n', '\n', '  function finalizeName(address addr, string name) public onlyRegistrar {\n', '    require(bytes(name).length != 0);\n', '    require(addr != address(0));\n', '\n', '    bytes32 namehash = keccak256(bytes(name));\n', '    require(!namehashFinalized[namehash]);\n', '\n', '    address nameOwner = namehashAddresses[namehash];\n', '\n', '    if (nameOwner != addr) {\n', '      namehashAddresses[namehash] = addr;\n', '\n', '      if (nameOwner != address(0)) {\n', '        emit NameRemoved(nameOwner, namehash, true);\n', '      }\n', '      emit NameSet(addr, name);\n', '    }\n', '\n', '    namehashFinalized[namehash] = true;\n', '    emit NameFinalized(addr, namehash);\n', '  }\n', '\n', '  function transferName(address addr, string name) public {\n', '    require(bytes(name).length != 0);\n', '    require(addr != address(0));\n', '\n', '    bytes32 namehash = keccak256(bytes(name));\n', '    require(namehashAddresses[namehash] == msg.sender);\n', '\n', '    namehashAddresses[namehash] = addr;\n', '\n', '    emit NameRemoved(msg.sender, namehash, false);\n', '    emit NameSet(addr, name);\n', '  }\n', '\n', '  function removeName(bytes32 namehash) public {\n', '    require(namehashAddresses[namehash] == msg.sender);\n', '    namehashAddresses[namehash] = address(0);\n', '    emit NameRemoved(msg.sender, namehash, false);\n', '  }\n', '\n', '  function addRegistrar(address addr) public onlyOwner {\n', '    registrar[addr] = true;\n', '  }\n', '\n', '  function isRegistrar(address addr) public view returns(bool) {\n', '    return registrar[addr];\n', '  }\n', '\n', '  function removeRegistrar(address addr) public onlyOwner {\n', '    registrar[addr] = false;\n', '  }\n', '\n', '  modifier onlyRegistrar {\n', '    require(registrar[msg.sender]);\n', '    _;\n', '  }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/NameRegistry.sol\n', '\n', 'contract NameRegistry is Ownable {\n', '  mapping(address => bool) registrar;\n', '\n', '  // Index event by address, for reverse look up\n', '  event NameSet(address indexed addr, string name);\n', '  event NameFinalized(address indexed addr, bytes32 namehash);\n', '\n', '  // External services should honour the NameRemoved event, and remove name-address pair from index.\n', '  event NameRemoved(address indexed addr, bytes32 namehash, bool forced);\n', '\n', '  // lookup of address by name hash\n', '  mapping(bytes32 => address) public namehashAddresses;\n', '\n', '  mapping(bytes32 => bool) public namehashFinalized;\n', '\n', '  function registerName(address addr, string name) public onlyRegistrar {\n', '    require(bytes(name).length != 0);\n', '    require(addr != address(0));\n', '\n', '    bytes32 namehash = keccak256(bytes(name));\n', '    require(namehashAddresses[namehash] == address(0));\n', '\n', '    namehashAddresses[namehash] = addr;\n', '    emit NameSet(addr, name);\n', '  }\n', '\n', '  function finalizeName(address addr, string name) public onlyRegistrar {\n', '    require(bytes(name).length != 0);\n', '    require(addr != address(0));\n', '\n', '    bytes32 namehash = keccak256(bytes(name));\n', '    require(!namehashFinalized[namehash]);\n', '\n', '    address nameOwner = namehashAddresses[namehash];\n', '\n', '    if (nameOwner != addr) {\n', '      namehashAddresses[namehash] = addr;\n', '\n', '      if (nameOwner != address(0)) {\n', '        emit NameRemoved(nameOwner, namehash, true);\n', '      }\n', '      emit NameSet(addr, name);\n', '    }\n', '\n', '    namehashFinalized[namehash] = true;\n', '    emit NameFinalized(addr, namehash);\n', '  }\n', '\n', '  function transferName(address addr, string name) public {\n', '    require(bytes(name).length != 0);\n', '    require(addr != address(0));\n', '\n', '    bytes32 namehash = keccak256(bytes(name));\n', '    require(namehashAddresses[namehash] == msg.sender);\n', '\n', '    namehashAddresses[namehash] = addr;\n', '\n', '    emit NameRemoved(msg.sender, namehash, false);\n', '    emit NameSet(addr, name);\n', '  }\n', '\n', '  function removeName(bytes32 namehash) public {\n', '    require(namehashAddresses[namehash] == msg.sender);\n', '    namehashAddresses[namehash] = address(0);\n', '    emit NameRemoved(msg.sender, namehash, false);\n', '  }\n', '\n', '  function addRegistrar(address addr) public onlyOwner {\n', '    registrar[addr] = true;\n', '  }\n', '\n', '  function isRegistrar(address addr) public view returns(bool) {\n', '    return registrar[addr];\n', '  }\n', '\n', '  function removeRegistrar(address addr) public onlyOwner {\n', '    registrar[addr] = false;\n', '  }\n', '\n', '  modifier onlyRegistrar {\n', '    require(registrar[msg.sender]);\n', '    _;\n', '  }\n', '}']
