['// OwnTheDay Source code\n', '// copyright 2018 xeroblood <https://owntheday.io>\n', '\n', 'pragma solidity 0.4.19;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', '* @title Ownable\n', '* @dev The Ownable contract has an owner address, and provides basic authorization control\n', '* functions, this simplifies the implementation of "user permissions".\n', '*/\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', '* @title Pausable\n', '* @dev Base contract which allows children to implement an emergency stop mechanism.\n', '*/\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', '\n', '/**\n', '* @title Helps contracts guard agains reentrancy attacks.\n', '* @author Remco Bloemen <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="97e5f2faf4f8d7a5">[email&#160;protected]</a>Ï€.com>\n', '* @notice If you mark a function `nonReentrant`, you should also\n', '* mark it `external`.\n', '*/\n', 'contract ReentrancyGuard {\n', '\n', '    /**\n', '    * @dev We use a single lock for the whole contract.\n', '    */\n', '    bool private reentrancyLock = false;\n', '\n', '    /**\n', '    * @dev Prevents a contract from calling itself, directly or indirectly.\n', '    * @notice If you mark a function `nonReentrant`, you should also\n', '    * mark it `external`. Calling one nonReentrant function from\n', '    * another is not supported. Instead, you can implement a\n', '    * `private` function doing the actual work, and a `external`\n', '    * wrapper marked as `nonReentrant`.\n', '    */\n', '    modifier nonReentrant() {\n', '        require(!reentrancyLock);\n', '        reentrancyLock = true;\n', '        _;\n', '        reentrancyLock = false;\n', '    }\n', '\n', '}\n', '\n', '\n', '/// @title Own the Day!\n', '/// @author xeroblood (https://owntheday.io)\n', 'contract OwnTheDay is Pausable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    event DayClaimed(address buyer, address seller, uint16 dayIndex, uint256 newPrice);\n', '\n', '    /// @dev A mapping from Day Index to Current Price.\n', '    ///  Initial Price set at 1 finney (1/1000th of an ether).\n', '    mapping (uint16 => uint256) public dayIndexToPrice;\n', '\n', '    /// @dev A mapping from Day Index to the address owner. Days with\n', '    ///  no valid owner address are assigned to contract owner.\n', '    mapping (uint16 => address) public dayIndexToOwner;\n', '\n', '    /// @dev A mapping from Account Address to Nickname.\n', '    mapping (address => string) public ownerAddressToName;\n', '\n', '    /// @dev Calculate the Final Sale Price after the Owner-Cut has been calculated\n', '    function calculateOwnerCut(uint256 price) public pure returns (uint256) {\n', '        uint8 percentCut = 5;\n', '        if (price > 5000 finney) {\n', '            percentCut = 2;\n', '        } else if (price > 500 finney) {\n', '            percentCut = 3;\n', '        } else if (price > 250 finney) {\n', '            percentCut = 4;\n', '        }\n', '        return price.mul(percentCut).div(100);\n', '    }\n', '\n', '    /// @dev Calculate the Price Increase based on the current Purchase Price\n', '    function calculatePriceIncrease(uint256 price) public pure returns (uint256) {\n', '        uint8 percentIncrease = 100;\n', '        if (price > 5000 finney) {\n', '            percentIncrease = 15;\n', '        } else if (price > 2500 finney) {\n', '            percentIncrease = 18;\n', '        } else if (price > 500 finney) {\n', '            percentIncrease = 26;\n', '        } else if (price > 250 finney) {\n', '            percentIncrease = 36;\n', '        }\n', '        return price.mul(percentIncrease).div(100);\n', '    }\n', '\n', '    /// @dev Gets the Current (or Default) Price of a Day\n', '    function getPriceByDayIndex(uint16 dayIndex) public view returns (uint256) {\n', '        require(dayIndex >= 0 && dayIndex < 366);\n', '        uint256 price = dayIndexToPrice[dayIndex];\n', '        if (price == 0) { price = 1 finney; }\n', '        return price;\n', '    }\n', '\n', '    /// @dev Sets the Nickname for an Account Address\n', '    function setAccountNickname(string nickname) public whenNotPaused {\n', '        require(msg.sender != address(0));\n', '        require(bytes(nickname).length > 0);\n', '        ownerAddressToName[msg.sender] = nickname;\n', '    }\n', '\n', '    /// @dev Claim a Day for Your Very Own!\n', '    /// The Purchase Price is Paid to the Previous Owner\n', '    function claimDay(uint16 dayIndex) public nonReentrant whenNotPaused payable {\n', '        require(msg.sender != address(0));\n', '        require(dayIndex >= 0 && dayIndex < 366);\n', '\n', '        // Prevent buying from self\n', '        address buyer = msg.sender;\n', '        address seller = dayIndexToOwner[dayIndex];\n', '        require(buyer != seller);\n', '\n', '        // Get Amount Paid\n', '        uint256 amountPaid = msg.value;\n', '\n', '        // Get Current Purchase Price from Index and ensure enough was Paid\n', '        uint256 purchasePrice = dayIndexToPrice[dayIndex];\n', '        if (purchasePrice == 0) {\n', '            purchasePrice = 1 finney; // == 0.001 ether or 1000000000000000 wei\n', '        }\n', '        require(amountPaid >= purchasePrice);\n', '\n', '        // If too much was paid, track the change to be returned\n', '        uint256 changeToReturn = 0;\n', '        if (amountPaid > purchasePrice) {\n', '            changeToReturn = amountPaid.sub(purchasePrice);\n', '            amountPaid -= changeToReturn;\n', '        }\n', '\n', '        // Calculate New Purchase Price and update storage\n', '        uint256 priceIncrease = calculatePriceIncrease(purchasePrice);\n', '        uint256 newPurchasePrice = purchasePrice.add(priceIncrease);\n', '        dayIndexToPrice[dayIndex] = newPurchasePrice;\n', '\n', '        // Calculate Sale Price after Owner-Cut and update Owner Balance\n', '        uint256 ownerCut = calculateOwnerCut(amountPaid);\n', '        uint256 salePrice = amountPaid.sub(ownerCut);\n', '\n', '        // Assign Day to New Owner\n', '        dayIndexToOwner[dayIndex] = buyer;\n', '\n', '        // Fire Claim Event\n', '        DayClaimed(buyer, seller, dayIndex, newPurchasePrice);\n', '\n', '        // Transfer Funds (Initial sales are made to owner)\n', '        if (seller != address(0)) {\n', '            owner.transfer(ownerCut);\n', '            seller.transfer(salePrice);\n', '        } else {\n', '            owner.transfer(salePrice.add(ownerCut));\n', '        }\n', '        if (changeToReturn > 0) {\n', '            buyer.transfer(changeToReturn);\n', '        }\n', '    }\n', '}']
['// OwnTheDay Source code\n', '// copyright 2018 xeroblood <https://owntheday.io>\n', '\n', 'pragma solidity 0.4.19;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', '* @title Ownable\n', '* @dev The Ownable contract has an owner address, and provides basic authorization control\n', '* functions, this simplifies the implementation of "user permissions".\n', '*/\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', '* @title Pausable\n', '* @dev Base contract which allows children to implement an emergency stop mechanism.\n', '*/\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', '\n', '/**\n', '* @title Helps contracts guard agains reentrancy attacks.\n', '* @author Remco Bloemen <remco@2Ï€.com>\n', '* @notice If you mark a function `nonReentrant`, you should also\n', '* mark it `external`.\n', '*/\n', 'contract ReentrancyGuard {\n', '\n', '    /**\n', '    * @dev We use a single lock for the whole contract.\n', '    */\n', '    bool private reentrancyLock = false;\n', '\n', '    /**\n', '    * @dev Prevents a contract from calling itself, directly or indirectly.\n', '    * @notice If you mark a function `nonReentrant`, you should also\n', '    * mark it `external`. Calling one nonReentrant function from\n', '    * another is not supported. Instead, you can implement a\n', '    * `private` function doing the actual work, and a `external`\n', '    * wrapper marked as `nonReentrant`.\n', '    */\n', '    modifier nonReentrant() {\n', '        require(!reentrancyLock);\n', '        reentrancyLock = true;\n', '        _;\n', '        reentrancyLock = false;\n', '    }\n', '\n', '}\n', '\n', '\n', '/// @title Own the Day!\n', '/// @author xeroblood (https://owntheday.io)\n', 'contract OwnTheDay is Pausable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    event DayClaimed(address buyer, address seller, uint16 dayIndex, uint256 newPrice);\n', '\n', '    /// @dev A mapping from Day Index to Current Price.\n', '    ///  Initial Price set at 1 finney (1/1000th of an ether).\n', '    mapping (uint16 => uint256) public dayIndexToPrice;\n', '\n', '    /// @dev A mapping from Day Index to the address owner. Days with\n', '    ///  no valid owner address are assigned to contract owner.\n', '    mapping (uint16 => address) public dayIndexToOwner;\n', '\n', '    /// @dev A mapping from Account Address to Nickname.\n', '    mapping (address => string) public ownerAddressToName;\n', '\n', '    /// @dev Calculate the Final Sale Price after the Owner-Cut has been calculated\n', '    function calculateOwnerCut(uint256 price) public pure returns (uint256) {\n', '        uint8 percentCut = 5;\n', '        if (price > 5000 finney) {\n', '            percentCut = 2;\n', '        } else if (price > 500 finney) {\n', '            percentCut = 3;\n', '        } else if (price > 250 finney) {\n', '            percentCut = 4;\n', '        }\n', '        return price.mul(percentCut).div(100);\n', '    }\n', '\n', '    /// @dev Calculate the Price Increase based on the current Purchase Price\n', '    function calculatePriceIncrease(uint256 price) public pure returns (uint256) {\n', '        uint8 percentIncrease = 100;\n', '        if (price > 5000 finney) {\n', '            percentIncrease = 15;\n', '        } else if (price > 2500 finney) {\n', '            percentIncrease = 18;\n', '        } else if (price > 500 finney) {\n', '            percentIncrease = 26;\n', '        } else if (price > 250 finney) {\n', '            percentIncrease = 36;\n', '        }\n', '        return price.mul(percentIncrease).div(100);\n', '    }\n', '\n', '    /// @dev Gets the Current (or Default) Price of a Day\n', '    function getPriceByDayIndex(uint16 dayIndex) public view returns (uint256) {\n', '        require(dayIndex >= 0 && dayIndex < 366);\n', '        uint256 price = dayIndexToPrice[dayIndex];\n', '        if (price == 0) { price = 1 finney; }\n', '        return price;\n', '    }\n', '\n', '    /// @dev Sets the Nickname for an Account Address\n', '    function setAccountNickname(string nickname) public whenNotPaused {\n', '        require(msg.sender != address(0));\n', '        require(bytes(nickname).length > 0);\n', '        ownerAddressToName[msg.sender] = nickname;\n', '    }\n', '\n', '    /// @dev Claim a Day for Your Very Own!\n', '    /// The Purchase Price is Paid to the Previous Owner\n', '    function claimDay(uint16 dayIndex) public nonReentrant whenNotPaused payable {\n', '        require(msg.sender != address(0));\n', '        require(dayIndex >= 0 && dayIndex < 366);\n', '\n', '        // Prevent buying from self\n', '        address buyer = msg.sender;\n', '        address seller = dayIndexToOwner[dayIndex];\n', '        require(buyer != seller);\n', '\n', '        // Get Amount Paid\n', '        uint256 amountPaid = msg.value;\n', '\n', '        // Get Current Purchase Price from Index and ensure enough was Paid\n', '        uint256 purchasePrice = dayIndexToPrice[dayIndex];\n', '        if (purchasePrice == 0) {\n', '            purchasePrice = 1 finney; // == 0.001 ether or 1000000000000000 wei\n', '        }\n', '        require(amountPaid >= purchasePrice);\n', '\n', '        // If too much was paid, track the change to be returned\n', '        uint256 changeToReturn = 0;\n', '        if (amountPaid > purchasePrice) {\n', '            changeToReturn = amountPaid.sub(purchasePrice);\n', '            amountPaid -= changeToReturn;\n', '        }\n', '\n', '        // Calculate New Purchase Price and update storage\n', '        uint256 priceIncrease = calculatePriceIncrease(purchasePrice);\n', '        uint256 newPurchasePrice = purchasePrice.add(priceIncrease);\n', '        dayIndexToPrice[dayIndex] = newPurchasePrice;\n', '\n', '        // Calculate Sale Price after Owner-Cut and update Owner Balance\n', '        uint256 ownerCut = calculateOwnerCut(amountPaid);\n', '        uint256 salePrice = amountPaid.sub(ownerCut);\n', '\n', '        // Assign Day to New Owner\n', '        dayIndexToOwner[dayIndex] = buyer;\n', '\n', '        // Fire Claim Event\n', '        DayClaimed(buyer, seller, dayIndex, newPurchasePrice);\n', '\n', '        // Transfer Funds (Initial sales are made to owner)\n', '        if (seller != address(0)) {\n', '            owner.transfer(ownerCut);\n', '            seller.transfer(salePrice);\n', '        } else {\n', '            owner.transfer(salePrice.add(ownerCut));\n', '        }\n', '        if (changeToReturn > 0) {\n', '            buyer.transfer(changeToReturn);\n', '        }\n', '    }\n', '}']
