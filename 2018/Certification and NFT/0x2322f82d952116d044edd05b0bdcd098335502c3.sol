['pragma solidity ^0.4.19;\n', '\n', 'contract SafetherStorage {\n', '    struct Depositor {\n', '        bytes8      _token;\n', '        uint256     _limit;\n', '        uint256     _deposit;\n', '    }\n', '    \n', '    mapping (address=>Depositor) internal _depositor;\n', '}\n', '\n', 'contract SafetherModifier is SafetherStorage {\n', '    modifier isRegisterd {\n', '        require(_depositor[msg.sender]._token != 0x0000000000000000);\n', '        _;\n', '    }\n', '    \n', '    modifier isNotRegisterd {\n', '        require(_depositor[msg.sender]._token == 0x0000000000000000);\n', '        _;\n', '    }\n', '    \n', '    modifier isValidDepositor(address depositor, bytes8 token) {\n', '        require(_depositor[depositor]._token != 0x0000000000000000);\n', '        require(_depositor[depositor]._deposit > 0);\n', '        require(_depositor[depositor]._token == token);\n', '        require(block.number >= _depositor[depositor]._limit);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract SafetherAbstract {\n', '    function getDepositor() public constant returns(bytes8, uint256, uint256);\n', '    \n', '    function register() public;\n', '    function deposit(uint256 period) public payable;\n', '    function withdraw(address depositor, bytes8 token) public payable;\n', '    function cancel() public payable;\n', '}\n', '\n', 'contract Safether is SafetherModifier, SafetherAbstract {\n', '    function getDepositor() public constant returns(bytes8, uint256, uint256) {\n', '        return (_depositor[msg.sender]._token, \n', '                _depositor[msg.sender]._limit,\n', '                _depositor[msg.sender]._deposit);\n', '    }\n', '    \n', '    function register() public isNotRegisterd {\n', '        _depositor[msg.sender]._token = bytes8(keccak256(block.number, msg.sender));\n', '    }\n', '    \n', '    function deposit(uint256 period) public payable isRegisterd {\n', '        _depositor[msg.sender]._deposit += msg.value;\n', '        _depositor[msg.sender]._limit = block.number + period;\n', '    }\n', '    \n', '    function withdraw(address depositor, bytes8 token) public payable isValidDepositor(depositor, token) {\n', '        uint256 tempDeposit = _depositor[depositor]._deposit;\n', '         _depositor[depositor]._deposit = 0;\n', '         msg.sender.transfer(tempDeposit + msg.value);\n', '    }\n', '    \n', '    function cancel() public payable isRegisterd {\n', '        uint256 tempDeposit = _depositor[msg.sender]._deposit;\n', '        delete _depositor[msg.sender];\n', '        msg.sender.transfer(tempDeposit + msg.value);\n', '    }\n', '}']