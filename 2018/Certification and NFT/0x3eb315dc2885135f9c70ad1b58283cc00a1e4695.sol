['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  /**\n', '   * @param _wallet Vault address\n', '   */\n', '  constructor(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    emit Closed();\n', '    wallet.transfer(address(this).balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    emit RefundsEnabled();\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    emit Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title CryptualProjectToken\n', ' * @dev Official ERC20 token contract for the Cryptual Project.\n', ' * This contract includes both a presale and a crowdsale.\n', ' */\n', 'contract CryptualProjectToken is StandardToken, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  // ERC20 optional details\n', '  string public constant name = "Cryptual Project Token"; // solium-disable-line uppercase\n', '  string public constant symbol = "CPT"; // solium-disable-line uppercase\n', '  uint8 public constant decimals = 0; // solium-disable-line uppercase\n', '\n', '  // Token constants, variables\n', '  uint256 public constant INITIAL_SUPPLY = 283000000;\n', '  address public wallet;\n', '\n', '  // Presale constants\n', '  uint256 public constant PRESALE_OPENING_TIME = 1530356400; // 06/30/2018 11:00:00 GMT\n', '  uint256 public constant PRESALE_CLOSING_TIME = 1530921600; // 07/07/2018 00:00:00 GMT\n', '  uint256 public constant PRESALE_RATE = 150000;\n', '  uint256 public constant PRESALE_WEI_CAP = 500 ether;\n', '  uint256 public constant PRESALE_WEI_GOAL = 50 ether;\n', '  \n', '  // Crowdsale constants\n', '  uint256 public constant CROWDSALE_OPENING_TIME = 1531047600; // 07/08/2018 11:00:00 GMT\n', '  uint256 public constant CROWDSALE_CLOSING_TIME = 1533686400; // 08/08/2018 00:00:00 GMT\n', '  uint256 public constant CROWDSALE_WEI_CAP = 5000 ether;\n', '\n', '  // Combined wei goal for both sales\n', '  uint256 public constant COMBINED_WEI_GOAL = 750 ether;\n', '  \n', '  // More crowdsale parameters\n', '  uint256[] public crowdsaleWeiAvailableLevels = [1000 ether, 1500 ether, 2000 ether];\n', '  uint256[] public crowdsaleRates = [135000, 120000, 100000];\n', '  uint256[] public crowdsaleMinElapsedTimeLevels = [0, 12 * 3600, 18 * 3600, 21 * 3600, 22 * 3600];\n', '  uint256[] public crowdsaleUserCaps = [1 ether, 2 ether, 4 ether, 8 ether, CROWDSALE_WEI_CAP];\n', '\n', '  // List of contributions by address for user caps feature\n', '  mapping(address => uint256) public crowdsaleContributions;\n', '\n', '  // Amount of wei raised\n', '  uint256 public presaleWeiRaised;\n', '  uint256 public crowdsaleWeiRaised;\n', '\n', '  /**\n', '   * @dev Constructor that sends msg.sender the initial token supply\n', '   */\n', '  constructor(\n', '    address _wallet\n', '  ) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    vault = new RefundVault(wallet);\n', '\n', '    totalSupply_ = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '    emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '  }\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  /**\n', '   * @dev fallback token purchase function\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev token purchase function\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    require(_beneficiary != address(0));\n', '    require(weiAmount != 0);\n', '    bool isPresale = block.timestamp >= PRESALE_OPENING_TIME && block.timestamp <= PRESALE_CLOSING_TIME;\n', '    bool isCrowdsale = block.timestamp >= CROWDSALE_OPENING_TIME && block.timestamp <= CROWDSALE_CLOSING_TIME;\n', '    require(isPresale || isCrowdsale);\n', '    uint256 tokens;\n', '\n', '    if (isCrowdsale) {\n', '      require(crowdsaleWeiRaised.add(weiAmount) <= CROWDSALE_WEI_CAP);\n', '      require(crowdsaleContributions[_beneficiary].add(weiAmount) <= getCrowdsaleUserCap());\n', '      \n', '      // calculate token amount to be created\n', '      tokens = _getCrowdsaleTokenAmount(weiAmount);\n', '      require(tokens != 0);\n', '\n', '      // update state\n', '      crowdsaleWeiRaised = crowdsaleWeiRaised.add(weiAmount);\n', '    } else if (isPresale) {\n', '      require(presaleWeiRaised.add(weiAmount) <= PRESALE_WEI_CAP);\n', '      require(whitelist[_beneficiary]);\n', '      \n', '      // calculate token amount to be created\n', '      tokens = weiAmount.mul(PRESALE_RATE).div(1 ether);\n', '      require(tokens != 0);\n', '\n', '      // update state\n', '      presaleWeiRaised = presaleWeiRaised.add(weiAmount);\n', '    }\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    if (isCrowdsale) crowdsaleContributions[_beneficiary] = crowdsaleContributions[_beneficiary].add(weiAmount);\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the current contribution cap per user in wei.\n', '   * Note that this cap in changes with time.\n', '   * @return The maximum wei a user may contribute in total\n', '   */\n', '  function getCrowdsaleUserCap() public view returns (uint256) {\n', '    require(block.timestamp >= CROWDSALE_OPENING_TIME && block.timestamp <= CROWDSALE_CLOSING_TIME);\n', '    // solium-disable-next-line security/no-block-members\n', '    uint256 elapsedTime = block.timestamp.sub(CROWDSALE_OPENING_TIME);\n', '    uint256 currentMinElapsedTime = 0;\n', '    uint256 currentCap = 0;\n', '\n', '    for (uint i = 0; i < crowdsaleUserCaps.length; i++) {\n', '      if (elapsedTime < crowdsaleMinElapsedTimeLevels[i]) continue;\n', '      if (crowdsaleMinElapsedTimeLevels[i] < currentMinElapsedTime) continue;\n', '      currentCap = crowdsaleUserCaps[i];\n', '    }\n', '\n', '    return currentCap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to compute output tokens from input wei\n', '   * @param _weiAmount The value in wei to be converted into tokens\n', '   * @return The number of tokens _weiAmount wei will buy at present time\n', '   */\n', '  function _getCrowdsaleTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    uint256 uncountedWeiRaised = crowdsaleWeiRaised;\n', '    uint256 uncountedWeiAmount = _weiAmount;\n', '    uint256 tokenAmount = 0;\n', '\n', '    for (uint i = 0; i < crowdsaleWeiAvailableLevels.length; i++) {\n', '      uint256 weiAvailable = crowdsaleWeiAvailableLevels[i];\n', '      \n', '      if (uncountedWeiRaised >= weiAvailable) {\n', '        uncountedWeiRaised = uncountedWeiRaised.sub(weiAvailable);\n', '      } else {\n', '        if (uncountedWeiRaised > 0) {\n', '            weiAvailable = weiAvailable.sub(uncountedWeiRaised);\n', '            uncountedWeiRaised = 0;\n', '        }\n', '        \n', '        if (uncountedWeiAmount <= weiAvailable) {\n', '          tokenAmount = tokenAmount.add(uncountedWeiAmount.mul(crowdsaleRates[i]));\n', '          break;\n', '        } else {\n', '          uncountedWeiAmount = uncountedWeiAmount.sub(weiAvailable);\n', '          tokenAmount = tokenAmount.add(weiAvailable.mul(crowdsaleRates[i]));\n', '        }\n', '      }\n', '    }\n', '\n', '    return tokenAmount.div(1 ether);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    totalSupply_ = totalSupply_.add(_tokenAmount);\n', '    balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\n', '    emit Transfer(0x0, _beneficiary, _tokenAmount);\n', '  }\n', '  \n', '  // Private presale buyer whitelist\n', '  mapping(address => bool) public whitelist;\n', '\n', '  /**\n', '   * @dev Adds single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '  function addToPresaleWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '  function addManyToPresaleWhitelist(address[] _beneficiaries) external onlyOwner {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelist[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Removes single address from whitelist.\n', '   * @param _beneficiary Address to be removed to the whitelist\n', '   */\n', '  function removeFromPresaleWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = false;\n', '  }\n', '\n', '  // Crowdsale finalization/refunding\n', '  bool public isCrowdsaleFinalized = false;\n', '\n', '  event CrowdsaleFinalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalizeCrowdsale() external {\n', '    require(!isCrowdsaleFinalized);\n', '    require(block.timestamp > CROWDSALE_CLOSING_TIME || (block.timestamp > PRESALE_CLOSING_TIME && presaleWeiRaised < PRESALE_WEI_GOAL));\n', '\n', '    if (combinedGoalReached()) {\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '\n', '    emit CrowdsaleFinalized();\n', '\n', '    isCrowdsaleFinalized = true;\n', '  }\n', '\n', '  // Refund vault used to hold funds while crowdsale is running\n', '  RefundVault public vault;\n', '\n', '  /**\n', '   * @dev Investors can claim refunds here if crowdsale is unsuccessful\n', '   */\n', '  function claimRefund() external {\n', '    require(isCrowdsaleFinalized);\n', '    require(!combinedGoalReached());\n', '\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether funding goal was reached.\n', '   * @return Whether funding goal was reached\n', '   */\n', '  function combinedGoalReached() public view returns (bool) {\n', '    return presaleWeiRaised.add(crowdsaleWeiRaised) >= COMBINED_WEI_GOAL;\n', '  }\n', '\n', '}']