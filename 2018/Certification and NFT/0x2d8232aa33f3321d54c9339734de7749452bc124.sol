['pragma solidity ^0.4.24;\n', '\n', '// File: contracts/interfaces/IOwned.sol\n', '\n', '/*\n', '    Owned Contract Interface\n', '*/\n', 'contract IOwned {\n', '    function transferOwnership(address _newOwner) public;\n', '    function acceptOwnership() public;\n', '    function transferOwnershipNow(address newContractOwner) public;\n', '}\n', '\n', '// File: contracts/utility/Owned.sol\n', '\n', '/*\n', '    This is the "owned" utility contract used by bancor with one additional function - transferOwnershipNow()\n', '    \n', '    The original unmodified version can be found here:\n', '    https://github.com/bancorprotocol/contracts/commit/63480ca28534830f184d3c4bf799c1f90d113846\n', '    \n', '    Provides support and utilities for contract ownership\n', '*/\n', 'contract Owned is IOwned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n', '\n', '    /**\n', '        @dev constructor\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // allows execution by the owner only\n', '    modifier ownerOnly {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev allows transferring the contract ownership\n', '        the new owner still needs to accept the transfer\n', '        can only be called by the contract owner\n', '        @param _newOwner    new contract owner\n', '    */\n', '    function transferOwnership(address _newOwner) public ownerOnly {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    /**\n', '        @dev used by a new owner to accept an ownership transfer\n', '    */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '\n', '    /**\n', '        @dev transfers the contract ownership without needing the new owner to accept ownership\n', '        @param newContractOwner    new contract owner\n', '    */\n', '    function transferOwnershipNow(address newContractOwner) ownerOnly public {\n', '        require(newContractOwner != owner);\n', '        emit OwnerUpdate(owner, newContractOwner);\n', '        owner = newContractOwner;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/interfaces/ILogger.sol\n', '\n', '/*\n', '    Logger Contract Interface\n', '*/\n', '\n', 'contract ILogger {\n', '    function addNewLoggerPermission(address addressToPermission) public;\n', '    function emitTaskCreated(uint uuid, uint amount) public;\n', '    function emitProjectCreated(uint uuid, uint amount, address rewardAddress) public;\n', '    function emitNewSmartToken(address token) public;\n', '    function emitIssuance(uint256 amount) public;\n', '    function emitDestruction(uint256 amount) public;\n', '    function emitTransfer(address from, address to, uint256 value) public;\n', '    function emitApproval(address owner, address spender, uint256 value) public;\n', '    function emitGenericLog(string messageType, string message) public;\n', '}\n', '\n', '// File: contracts/Logger.sol\n', '\n', '/*\n', '\n', 'Centralized logger allows backend to easily watch all events on all communities without needing to watch each community individually\n', '\n', '*/\n', 'contract Logger is Owned, ILogger  {\n', '\n', '    // Community\n', '    event TaskCreated(address msgSender, uint _uuid, uint _amount);\n', '    event ProjectCreated(address msgSender, uint _uuid, uint _amount, address _address);\n', '\n', '    // SmartToken\n', '    // triggered when a smart token is deployed - the _token address is defined for forward compatibility\n', '    //  in case we want to trigger the event from a factory\n', '    event NewSmartToken(address msgSender, address _token);\n', '    // triggered when the total supply is increased\n', '    event Issuance(address msgSender, uint256 _amount);\n', '    // triggered when the total supply is decreased\n', '    event Destruction(address msgSender, uint256 _amount);\n', '    // erc20\n', '    event Transfer(address msgSender, address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address msgSender, address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // Logger\n', '    event NewCommunityAddress(address msgSender, address _newAddress);\n', '\n', '    event GenericLog(address msgSender, string messageType, string message);\n', '    mapping (address => bool) public permissionedAddresses;\n', '\n', '    modifier hasLoggerPermissions(address _address) {\n', '        require(permissionedAddresses[_address] == true);\n', '        _;\n', '    }\n', '\n', '    function addNewLoggerPermission(address addressToPermission) ownerOnly public {\n', '        permissionedAddresses[addressToPermission] = true;\n', '    }\n', '\n', '    function emitTaskCreated(uint uuid, uint amount) public hasLoggerPermissions(msg.sender) {\n', '        emit TaskCreated(msg.sender, uuid, amount);\n', '    }\n', '\n', '    function emitProjectCreated(uint uuid, uint amount, address rewardAddress) public hasLoggerPermissions(msg.sender) {\n', '        emit ProjectCreated(msg.sender, uuid, amount, rewardAddress);\n', '    }\n', '\n', '    function emitNewSmartToken(address token) public hasLoggerPermissions(msg.sender) {\n', '        emit NewSmartToken(msg.sender, token);\n', '    }\n', '\n', '    function emitIssuance(uint256 amount) public hasLoggerPermissions(msg.sender) {\n', '        emit Issuance(msg.sender, amount);\n', '    }\n', '\n', '    function emitDestruction(uint256 amount) public hasLoggerPermissions(msg.sender) {\n', '        emit Destruction(msg.sender, amount);\n', '    }\n', '\n', '    function emitTransfer(address from, address to, uint256 value) public hasLoggerPermissions(msg.sender) {\n', '        emit Transfer(msg.sender, from, to, value);\n', '    }\n', '\n', '    function emitApproval(address owner, address spender, uint256 value) public hasLoggerPermissions(msg.sender) {\n', '        emit Approval(msg.sender, owner, spender, value);\n', '    }\n', '\n', '    function emitGenericLog(string messageType, string message) public hasLoggerPermissions(msg.sender) {\n', '        emit GenericLog(msg.sender, messageType, message);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// File: contracts/interfaces/IOwned.sol\n', '\n', '/*\n', '    Owned Contract Interface\n', '*/\n', 'contract IOwned {\n', '    function transferOwnership(address _newOwner) public;\n', '    function acceptOwnership() public;\n', '    function transferOwnershipNow(address newContractOwner) public;\n', '}\n', '\n', '// File: contracts/utility/Owned.sol\n', '\n', '/*\n', '    This is the "owned" utility contract used by bancor with one additional function - transferOwnershipNow()\n', '    \n', '    The original unmodified version can be found here:\n', '    https://github.com/bancorprotocol/contracts/commit/63480ca28534830f184d3c4bf799c1f90d113846\n', '    \n', '    Provides support and utilities for contract ownership\n', '*/\n', 'contract Owned is IOwned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n', '\n', '    /**\n', '        @dev constructor\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // allows execution by the owner only\n', '    modifier ownerOnly {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev allows transferring the contract ownership\n', '        the new owner still needs to accept the transfer\n', '        can only be called by the contract owner\n', '        @param _newOwner    new contract owner\n', '    */\n', '    function transferOwnership(address _newOwner) public ownerOnly {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    /**\n', '        @dev used by a new owner to accept an ownership transfer\n', '    */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '\n', '    /**\n', '        @dev transfers the contract ownership without needing the new owner to accept ownership\n', '        @param newContractOwner    new contract owner\n', '    */\n', '    function transferOwnershipNow(address newContractOwner) ownerOnly public {\n', '        require(newContractOwner != owner);\n', '        emit OwnerUpdate(owner, newContractOwner);\n', '        owner = newContractOwner;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/interfaces/ILogger.sol\n', '\n', '/*\n', '    Logger Contract Interface\n', '*/\n', '\n', 'contract ILogger {\n', '    function addNewLoggerPermission(address addressToPermission) public;\n', '    function emitTaskCreated(uint uuid, uint amount) public;\n', '    function emitProjectCreated(uint uuid, uint amount, address rewardAddress) public;\n', '    function emitNewSmartToken(address token) public;\n', '    function emitIssuance(uint256 amount) public;\n', '    function emitDestruction(uint256 amount) public;\n', '    function emitTransfer(address from, address to, uint256 value) public;\n', '    function emitApproval(address owner, address spender, uint256 value) public;\n', '    function emitGenericLog(string messageType, string message) public;\n', '}\n', '\n', '// File: contracts/Logger.sol\n', '\n', '/*\n', '\n', 'Centralized logger allows backend to easily watch all events on all communities without needing to watch each community individually\n', '\n', '*/\n', 'contract Logger is Owned, ILogger  {\n', '\n', '    // Community\n', '    event TaskCreated(address msgSender, uint _uuid, uint _amount);\n', '    event ProjectCreated(address msgSender, uint _uuid, uint _amount, address _address);\n', '\n', '    // SmartToken\n', '    // triggered when a smart token is deployed - the _token address is defined for forward compatibility\n', '    //  in case we want to trigger the event from a factory\n', '    event NewSmartToken(address msgSender, address _token);\n', '    // triggered when the total supply is increased\n', '    event Issuance(address msgSender, uint256 _amount);\n', '    // triggered when the total supply is decreased\n', '    event Destruction(address msgSender, uint256 _amount);\n', '    // erc20\n', '    event Transfer(address msgSender, address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address msgSender, address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // Logger\n', '    event NewCommunityAddress(address msgSender, address _newAddress);\n', '\n', '    event GenericLog(address msgSender, string messageType, string message);\n', '    mapping (address => bool) public permissionedAddresses;\n', '\n', '    modifier hasLoggerPermissions(address _address) {\n', '        require(permissionedAddresses[_address] == true);\n', '        _;\n', '    }\n', '\n', '    function addNewLoggerPermission(address addressToPermission) ownerOnly public {\n', '        permissionedAddresses[addressToPermission] = true;\n', '    }\n', '\n', '    function emitTaskCreated(uint uuid, uint amount) public hasLoggerPermissions(msg.sender) {\n', '        emit TaskCreated(msg.sender, uuid, amount);\n', '    }\n', '\n', '    function emitProjectCreated(uint uuid, uint amount, address rewardAddress) public hasLoggerPermissions(msg.sender) {\n', '        emit ProjectCreated(msg.sender, uuid, amount, rewardAddress);\n', '    }\n', '\n', '    function emitNewSmartToken(address token) public hasLoggerPermissions(msg.sender) {\n', '        emit NewSmartToken(msg.sender, token);\n', '    }\n', '\n', '    function emitIssuance(uint256 amount) public hasLoggerPermissions(msg.sender) {\n', '        emit Issuance(msg.sender, amount);\n', '    }\n', '\n', '    function emitDestruction(uint256 amount) public hasLoggerPermissions(msg.sender) {\n', '        emit Destruction(msg.sender, amount);\n', '    }\n', '\n', '    function emitTransfer(address from, address to, uint256 value) public hasLoggerPermissions(msg.sender) {\n', '        emit Transfer(msg.sender, from, to, value);\n', '    }\n', '\n', '    function emitApproval(address owner, address spender, uint256 value) public hasLoggerPermissions(msg.sender) {\n', '        emit Approval(msg.sender, owner, spender, value);\n', '    }\n', '\n', '    function emitGenericLog(string messageType, string message) public hasLoggerPermissions(msg.sender) {\n', '        emit GenericLog(msg.sender, messageType, message);\n', '    }\n', '}']
