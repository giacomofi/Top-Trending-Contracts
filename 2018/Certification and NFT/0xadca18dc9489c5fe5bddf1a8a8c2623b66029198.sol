['// Ethertote - Token Burn contract\n', '\n', '\n', '// -----------------------------------------------------------------------------\n', '// The following contract allows unsold tokens as part of the token sale\n', '// to be permantnely locked ("burned") so that nobody is able to retrieve them\n', '\n', '// This is achieved by passing ownership of the contract to a null address (0x0)\n', '// using the constructor function when the contract is deployed onto the blockchain\n', '\n', '// The contract uses a default fallback function to accept Eth and Tokens \n', '// and the Ethertote team will not be able to retrieve any Eth or tokens sent\n', '// to this contract.\n', '\n', '// We decided to use this smart contract in favour of allowing tokens to \n', '// be sent to the null account of 0x0, as this prevents anyone from ever \n', '// accidentally sending their own TOTE tokens to 0x0. IF they did this\n', '// accidentally it would throw and the tokens would not be sent there.\n', '\n', '// The ERC20 compliant transfer() and transferFrom() function prevent any tokens\n', '// from ever being sent to 0x0\n', '// -----------------------------------------------------------------------------\n', '\n', 'pragma solidity 0.4.24;\n', '\n', 'contract TokenBurn {\n', '    \n', '    address public thisContractAddress;\n', '    address public admin;\n', '    \n', '    // upon deployment, ownership of this contract is immediately given to the \n', '    // null address\n', '    address public newOwner = 0x0000000000000000000000000000000000000000;\n', '    \n', '    // MODIFIERS\n', '    modifier onlyAdmin { \n', '        require(msg.sender == admin\n', '        ); \n', '        _; \n', '    }\n', '    \n', '    // constructor executed upon deployment to the blockchain\n', '    constructor() public {\n', '        thisContractAddress = address(this);\n', '        admin = newOwner;\n', '    }\n', '    \n', '    // FALLBACK - allows Eth and tokens to be sent to this address\n', '    function () private payable {}\n', '  \n', '}']