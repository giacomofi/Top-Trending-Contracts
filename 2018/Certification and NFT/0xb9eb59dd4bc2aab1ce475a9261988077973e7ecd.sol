['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title HolderBase\n', ' * @notice HolderBase handles data & funcitons for token or ether holders.\n', ' * HolderBase contract can distribute only one of ether or token.\n', ' */\n', 'contract HolderBase is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  uint8 public constant MAX_HOLDERS = 64; // TODO: tokyo-input should verify # of holders\n', '  uint256 public coeff;\n', '  bool public distributed;\n', '  bool public initialized;\n', '\n', '  struct Holder {\n', '    address addr;\n', '    uint96 ratio;\n', '  }\n', '\n', '  Holder[] public holders;\n', '\n', '  event Distributed();\n', '\n', '  function HolderBase(uint256 _coeff) public {\n', '    require(_coeff != 0);\n', '    coeff = _coeff;\n', '  }\n', '\n', '  function getHolderCount() public view returns (uint256) {\n', '    return holders.length;\n', '  }\n', '\n', '  function initHolders(address[] _addrs, uint96[] _ratios) public onlyOwner {\n', '    require(!initialized);\n', '    require(holders.length == 0);\n', '    require(_addrs.length != 0);\n', '    require(_addrs.length <= MAX_HOLDERS);\n', '    require(_addrs.length == _ratios.length);\n', '\n', '    uint256 accRatio;\n', '\n', '    for(uint8 i = 0; i < _addrs.length; i++) {\n', '      if (_addrs[i] != address(0)) {\n', '        // address will be 0x00 in case of "crowdsale".\n', '        holders.push(Holder(_addrs[i], _ratios[i]));\n', '      }\n', '\n', '      accRatio = accRatio.add(uint256(_ratios[i]));\n', '    }\n', '\n', '    require(accRatio <= coeff);\n', '\n', '    initialized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Distribute ether to `holder`s according to ratio.\n', '   * Remaining ether is transfered to `wallet` from the close\n', '   * function of RefundVault contract.\n', '   */\n', '  function distribute() internal {\n', '    require(!distributed, "Already distributed");\n', '    uint256 balance = this.balance;\n', '\n', '    require(balance > 0, "No ether to distribute");\n', '    distributed = true;\n', '\n', '    for (uint8 i = 0; i < holders.length; i++) {\n', '      uint256 holderAmount = balance.mul(uint256(holders[i].ratio)).div(coeff);\n', '\n', '      holders[i].addr.transfer(holderAmount);\n', '    }\n', '\n', '    emit Distributed(); // A single log to reduce gas\n', '  }\n', '\n', '  /**\n', '   * @dev Distribute ERC20 token to `holder`s according to ratio.\n', '   */\n', '  function distributeToken(ERC20Basic _token, uint256 _targetTotalSupply) internal {\n', '    require(!distributed, "Already distributed");\n', '    distributed = true;\n', '\n', '    for (uint8 i = 0; i < holders.length; i++) {\n', '      uint256 holderAmount = _targetTotalSupply.mul(uint256(holders[i].ratio)).div(coeff);\n', '      deliverTokens(_token, holders[i].addr, holderAmount);\n', '    }\n', '\n', '    emit Distributed(); // A single log to reduce gas\n', '  }\n', '\n', '  // Override to distribute tokens\n', '  function deliverTokens(ERC20Basic _token, address _beneficiary, uint256 _tokens) internal {}\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Locker\n', ' * @notice Locker holds tokens and releases them at a certain time.\n', ' */\n', 'contract Locker is Ownable {\n', '  using SafeMath for uint;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * It is init state only when adding release info is possible.\n', '   * beneficiary only can release tokens when Locker is active.\n', '   * After all tokens are released, locker is drawn.\n', '   */\n', '  enum State { Init, Ready, Active, Drawn }\n', '\n', '  struct Beneficiary {\n', '    uint ratio;             // ratio based on Locker&#39;s initial balance.\n', '    uint withdrawAmount;    // accumulated tokens beneficiary released\n', '    bool releaseAllTokens;\n', '  }\n', '\n', '  /**\n', '   * @notice Release has info to release tokens.\n', '   * If lock type is straight, only two release infos is required.\n', '   *\n', '   *     |\n', '   * 100 |                _______________\n', '   *     |              _/\n', '   *  50 |            _/\n', '   *     |         . |\n', '   *     |       .   |\n', '   *     |     .     |\n', '   *     +===+=======+----*----------> time\n', '   *     Locker  First    Last\n', '   *  Activated  Release  Release\n', '   *\n', '   *\n', '   * If lock type is variable, the release graph will be\n', '   *\n', '   *     |\n', '   * 100 |                                 _________\n', '   *     |                                |\n', '   *  70 |                      __________|\n', '   *     |                     |\n', '   *  30 |            _________|\n', '   *     |           |\n', '   *     +===+=======+---------+----------*------> time\n', '   *     Locker   First        Second     Last\n', '   *  Activated   Release      Release    Release\n', '   *\n', '   *\n', '   *\n', '   * For the first straight release graph, parameters would be\n', '   *   coeff: 100\n', '   *   releaseTimes: [\n', '   *     first release time,\n', '   *     second release time\n', '   *   ]\n', '   *   releaseRatios: [\n', '   *     50,\n', '   *     100,\n', '   *   ]\n', '   *\n', '   * For the second variable release graph, parameters would be\n', '   *   coeff: 100\n', '   *   releaseTimes: [\n', '   *     first release time,\n', '   *     second release time,\n', '   *     last release time\n', '   *   ]\n', '   *   releaseRatios: [\n', '   *     30,\n', '   *     70,\n', '   *     100,\n', '   *   ]\n', '   *\n', '   */\n', '  struct Release {\n', '    bool isStraight;        // lock type : straight or variable\n', '    uint[] releaseTimes;    //\n', '    uint[] releaseRatios;   //\n', '  }\n', '\n', '  uint public activeTime;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  uint public coeff;\n', '  uint public initialBalance;\n', '  uint public withdrawAmount; // total amount of tokens released\n', '\n', '  mapping (address => Beneficiary) public beneficiaries;\n', '  mapping (address => Release) public releases;  // beneficiary&#39;s lock\n', '  mapping (address => bool) public locked; // whether beneficiary&#39;s lock is instantiated\n', '\n', '  uint public numBeneficiaries;\n', '  uint public numLocks;\n', '\n', '  State public state;\n', '\n', '  modifier onlyState(State v) {\n', '    require(state == v);\n', '    _;\n', '  }\n', '\n', '  modifier onlyBeneficiary(address _addr) {\n', '    require(beneficiaries[_addr].ratio > 0);\n', '    _;\n', '  }\n', '\n', '  event StateChanged(State _state);\n', '  event Locked(address indexed _beneficiary, bool _isStraight);\n', '  event Released(address indexed _beneficiary, uint256 _amount);\n', '\n', '  function Locker(address _token, uint _coeff, address[] _beneficiaries, uint[] _ratios) public {\n', '    require(_token != address(0));\n', '    require(_beneficiaries.length == _ratios.length);\n', '\n', '    token = ERC20Basic(_token);\n', '    coeff = _coeff;\n', '    numBeneficiaries = _beneficiaries.length;\n', '\n', '    uint accRatio;\n', '\n', '    for(uint i = 0; i < numBeneficiaries; i++) {\n', '      require(_ratios[i] > 0);\n', '      beneficiaries[_beneficiaries[i]].ratio = _ratios[i];\n', '\n', '      accRatio = accRatio.add(_ratios[i]);\n', '    }\n', '\n', '    require(coeff == accRatio);\n', '  }\n', '\n', '  /**\n', '   * @notice beneficiary can release their tokens after activated\n', '   */\n', '  function activate() external onlyOwner onlyState(State.Ready) {\n', '    require(numLocks == numBeneficiaries); // double check : assert all releases are recorded\n', '\n', '    initialBalance = token.balanceOf(this);\n', '    require(initialBalance > 0);\n', '\n', '    activeTime = now; // solium-disable-line security/no-block-members\n', '\n', '    // set locker as active state\n', '    state = State.Active;\n', '    emit StateChanged(state);\n', '  }\n', '\n', '  function getReleaseType(address _beneficiary)\n', '    public\n', '    view\n', '    onlyBeneficiary(_beneficiary)\n', '    returns (bool)\n', '  {\n', '    return releases[_beneficiary].isStraight;\n', '  }\n', '\n', '  function getTotalLockedAmounts(address _beneficiary)\n', '    public\n', '    view\n', '    onlyBeneficiary(_beneficiary)\n', '    returns (uint)\n', '  {\n', '    return getPartialAmount(beneficiaries[_beneficiary].ratio, coeff, initialBalance);\n', '  }\n', '\n', '  function getReleaseTimes(address _beneficiary)\n', '    public\n', '    view\n', '    onlyBeneficiary(_beneficiary)\n', '    returns (uint[])\n', '  {\n', '    return releases[_beneficiary].releaseTimes;\n', '  }\n', '\n', '  function getReleaseRatios(address _beneficiary)\n', '    public\n', '    view\n', '    onlyBeneficiary(_beneficiary)\n', '    returns (uint[])\n', '  {\n', '    return releases[_beneficiary].releaseRatios;\n', '  }\n', '\n', '  /**\n', '   * @notice add new release record for beneficiary\n', '   */\n', '  function lock(address _beneficiary, bool _isStraight, uint[] _releaseTimes, uint[] _releaseRatios)\n', '    external\n', '    onlyOwner\n', '    onlyState(State.Init)\n', '    onlyBeneficiary(_beneficiary)\n', '  {\n', '    require(!locked[_beneficiary]);\n', '    require(_releaseRatios.length != 0);\n', '    require(_releaseRatios.length == _releaseTimes.length);\n', '\n', '    uint i;\n', '    uint len = _releaseRatios.length;\n', '\n', '    // finally should release all tokens\n', '    require(_releaseRatios[len - 1] == coeff);\n', '\n', '    // check two array are ascending sorted\n', '    for(i = 0; i < len - 1; i++) {\n', '      require(_releaseTimes[i] < _releaseTimes[i + 1]);\n', '      require(_releaseRatios[i] < _releaseRatios[i + 1]);\n', '    }\n', '\n', '    // 2 release times for straight locking type\n', '    if (_isStraight) {\n', '      require(len == 2);\n', '    }\n', '\n', '    numLocks = numLocks.add(1);\n', '\n', '    // create Release for the beneficiary\n', '    releases[_beneficiary].isStraight = _isStraight;\n', '\n', '    // copy array of uint\n', '    releases[_beneficiary].releaseTimes = _releaseTimes;\n', '    releases[_beneficiary].releaseRatios = _releaseRatios;\n', '\n', '    // lock beneficiary\n', '    locked[_beneficiary] = true;\n', '    emit Locked(_beneficiary, _isStraight);\n', '\n', '    //  if all beneficiaries locked, change Locker state to change\n', '    if (numLocks == numBeneficiaries) {\n', '      state = State.Ready;\n', '      emit StateChanged(state);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice transfer releasable tokens for beneficiary wrt the release graph\n', '   */\n', '  function release() external onlyState(State.Active) onlyBeneficiary(msg.sender) {\n', '    require(!beneficiaries[msg.sender].releaseAllTokens);\n', '\n', '    uint releasableAmount = getReleasableAmount(msg.sender);\n', '    beneficiaries[msg.sender].withdrawAmount = beneficiaries[msg.sender].withdrawAmount.add(releasableAmount);\n', '\n', '    beneficiaries[msg.sender].releaseAllTokens = beneficiaries[msg.sender].withdrawAmount == getPartialAmount(\n', '      beneficiaries[msg.sender].ratio,\n', '      coeff,\n', '      initialBalance);\n', '\n', '    withdrawAmount = withdrawAmount.add(releasableAmount);\n', '\n', '    if (withdrawAmount == initialBalance) {\n', '      state = State.Drawn;\n', '      emit StateChanged(state);\n', '    }\n', '\n', '    token.transfer(msg.sender, releasableAmount);\n', '    emit Released(msg.sender, releasableAmount);\n', '  }\n', '\n', '  function getReleasableAmount(address _beneficiary) internal view returns (uint) {\n', '    if (releases[_beneficiary].isStraight) {\n', '      return getStraightReleasableAmount(_beneficiary);\n', '    } else {\n', '      return getVariableReleasableAmount(_beneficiary);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice return releaseable amount for beneficiary in case of straight type of release\n', '   */\n', '  function getStraightReleasableAmount(address _beneficiary) internal view returns (uint releasableAmount) {\n', '    Beneficiary memory _b = beneficiaries[_beneficiary];\n', '    Release memory _r = releases[_beneficiary];\n', '\n', '    // total amount of tokens beneficiary can release\n', '    uint totalReleasableAmount = getTotalLockedAmounts(_beneficiary);\n', '\n', '    uint firstTime = _r.releaseTimes[0];\n', '    uint lastTime = _r.releaseTimes[1];\n', '\n', '    // solium-disable security/no-block-members\n', '    require(now >= firstTime); // pass if can release\n', '    // solium-enable security/no-block-members\n', '\n', '    if(now >= lastTime) { // inclusive to reduce calculation\n', '      releasableAmount = totalReleasableAmount;\n', '    } else {\n', '      // releasable amount at first time\n', '      uint firstAmount = getPartialAmount(\n', '        _r.releaseRatios[0],\n', '        coeff,\n', '        totalReleasableAmount);\n', '\n', '      // partial amount without first amount\n', '      releasableAmount = getPartialAmount(\n', '        now.sub(firstTime),\n', '        lastTime.sub(firstTime),\n', '        totalReleasableAmount.sub(firstAmount));\n', '      releasableAmount = releasableAmount.add(firstAmount);\n', '    }\n', '\n', '    // subtract already withdrawn amounts\n', '    releasableAmount = releasableAmount.sub(_b.withdrawAmount);\n', '  }\n', '\n', '  /**\n', '   * @notice return releaseable amount for beneficiary in case of variable type of release\n', '   */\n', '  function getVariableReleasableAmount(address _beneficiary) internal view returns (uint releasableAmount) {\n', '    Beneficiary memory _b = beneficiaries[_beneficiary];\n', '    Release memory _r = releases[_beneficiary];\n', '\n', '    // total amount of tokens beneficiary will receive\n', '    uint totalReleasableAmount = getTotalLockedAmounts(_beneficiary);\n', '\n', '    uint releaseRatio;\n', '\n', '    // reverse order for short curcit\n', '    for(uint i = _r.releaseTimes.length - 1; i >= 0; i--) {\n', '      if (now >= _r.releaseTimes[i]) {\n', '        releaseRatio = _r.releaseRatios[i];\n', '        break;\n', '      }\n', '    }\n', '\n', '    require(releaseRatio > 0);\n', '\n', '    releasableAmount = getPartialAmount(\n', '      releaseRatio,\n', '      coeff,\n', '      totalReleasableAmount);\n', '    releasableAmount = releasableAmount.sub(_b.withdrawAmount);\n', '  }\n', '\n', '  /// https://github.com/0xProject/0x.js/blob/05aae368132a81ddb9fd6a04ac5b0ff1cbb24691/packages/contracts/src/current/protocol/Exchange/Exchange.sol#L497\n', '  /// @notice Calculates partial value given a numerator and denominator.\n', '  /// @param numerator Numerator.\n', '  /// @param denominator Denominator.\n', '  /// @param target Value to calculate partial of.\n', '  /// @return Partial value of target.\n', '  function getPartialAmount(uint numerator, uint denominator, uint target) public pure returns (uint) {\n', '    return numerator.mul(target).div(denominator);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  /**\n', '   * @param _wallet Vault address\n', '   */\n', '  constructor(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    emit Closed();\n', '    wallet.transfer(address(this).balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    emit RefundsEnabled();\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    emit Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title MultiHolderVault\n', ' * @dev This contract distribute ether to multiple address.\n', ' */\n', 'contract MultiHolderVault is HolderBase, RefundVault {\n', '  using SafeMath for uint256;\n', '\n', '  function MultiHolderVault(address _wallet, uint256 _ratioCoeff)\n', '    public\n', '    HolderBase(_ratioCoeff)\n', '    RefundVault(_wallet)\n', '  {}\n', '\n', '  function close() public onlyOwner {\n', '    require(state == State.Active);\n', '    require(initialized);\n', '\n', '    super.distribute(); // distribute ether to holders\n', '    super.close(); // transfer remaining ether to wallet\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', 'contract BaseCrowdsale is HolderBase, Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  Locker public locker;     // token locker\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // how many token units a buyer gets per wei\n', '  // use coeff ratio from HolderBase\n', '  uint256 public rate;\n', '\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  // ratio of tokens for crowdsale\n', '  uint256 public crowdsaleRatio;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  uint256 public cap;\n', '\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '\n', '  // refund vault used to hold funds while crowdsale is running\n', '  MultiHolderVault public vault;\n', '\n', '  address public nextTokenOwner;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  event Finalized();\n', '  event ClaimTokens(address indexed _token, uint256 _amount);\n', '\n', '  function BaseCrowdsale(uint256 _coeff) HolderBase(_coeff) public {}\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  function buyTokens(address beneficiary) public payable whenNotPaused {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    uint256 toFund = calculateToFund(beneficiary, weiAmount);\n', '    require(toFund > 0);\n', '\n', '    uint256 toReturn = weiAmount.sub(toFund);\n', '\n', '    buyTokensPreHook(beneficiary, toFund);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(toFund);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(toFund);\n', '\n', '    if (toReturn > 0) {\n', '      msg.sender.transfer(toReturn);\n', '    }\n', '\n', '    buyTokensPostHook(beneficiary, tokens, toFund);\n', '\n', '    generateTokens(beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender, beneficiary, toFund, tokens);\n', '    forwardFunds(toFund);\n', '  }\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '\n', '  // vault finalization task, called when owner calls finalize()\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '      finalizationSuccessHook();\n', '    } else {\n', '      finalizationFailHook();\n', '    }\n', '  }\n', '\n', '  // if crowdsale is unsuccessful, investors can claim refunds here\n', '  function claimRefund() public {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  function goalReached() public view returns (bool) {\n', '    return weiRaised >= goal;\n', '  }\n', '\n', '  /// @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return capReached || now > endTime; // solium-disable-line security/no-block-members\n', '  }\n', '\n', '  // Override this method to have a way to add business logic to your crowdsale when buying\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    return weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @notice forwardd ether to vault\n', '   */\n', '  function forwardFunds(uint256 toFund) internal {\n', '    vault.deposit.value(toFund)(msg.sender);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime; // solium-disable-line security/no-block-members\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  /**\n', '   * @notice calculate fund wrt sale cap. Override this function to control ether cap.\n', '   * @param _beneficiary address address to receive tokens\n', '   * @param _weiAmount uint256 amount of ether in wei\n', '   */\n', '  function calculateToFund(address _beneficiary, uint256 _weiAmount) internal view returns (uint256) {\n', '    uint256 toFund;\n', '    uint256 postWeiRaised = weiRaised.add(_weiAmount);\n', '\n', '    if (postWeiRaised > cap) {\n', '      toFund = cap.sub(weiRaised);\n', '    } else {\n', '      toFund = _weiAmount;\n', '    }\n', '    return toFund;\n', '  }\n', '\n', '  /**\n', '   * @notice interface to initialize crowdsale parameters.\n', '   * init should be implemented by Crowdsale Generator.\n', '   */\n', '  function init(bytes32[] args) public;\n', '\n', '  /**\n', '   * @notice pre hook for buyTokens function\n', '   * @param _beneficiary address address to receive tokens\n', '   * @param _toFund uint256 amount of ether in wei\n', '   */\n', '  function buyTokensPreHook(address _beneficiary, uint256 _toFund) internal {}\n', '\n', '  /**\n', '   * @notice post hook for buyTokens function\n', '   * @param _beneficiary address address to receive tokens\n', '   * @param _tokens uint256 amount of tokens to receive\n', '   * @param _toFund uint256 amount of ether in wei\n', '   */\n', '  function buyTokensPostHook(address _beneficiary, uint256 _tokens, uint256 _toFund) internal {}\n', '\n', '  function finalizationFailHook() internal {\n', '    vault.enableRefunds();\n', '  }\n', '\n', '  function finalizationSuccessHook() internal {\n', '    // calculate target total supply including all token holders\n', '    uint256 targetTotalSupply = getTotalSupply().mul(coeff).div(crowdsaleRatio);\n', '    ERC20Basic token = ERC20Basic(getTokenAddress());\n', '\n', '    super.distributeToken(token, targetTotalSupply);\n', '    afterGeneratorHook();\n', '\n', '    locker.activate();\n', '    vault.close();\n', '\n', '    transferTokenOwnership(nextTokenOwner);\n', '  }\n', '\n', '  function afterGeneratorHook() internal {}\n', '\n', '  /**\n', '   * @notice common interfaces for both of MiniMe and Mintable token.\n', '   */\n', '  function generateTokens(address _beneficiary, uint256 _tokens) internal;\n', '  function transferTokenOwnership(address _to) internal;\n', '  function getTotalSupply() internal returns (uint256);\n', '  function finishMinting() internal returns (bool);\n', '  function getTokenAddress() internal returns (address);\n', '\n', '  /**\n', '   * @notice helper function to generate tokens with ratio\n', '   */\n', '  function generateTargetTokens(address _beneficiary, uint256 _targetTotalSupply, uint256 _ratio) internal {\n', '    uint256 tokens = _targetTotalSupply.mul(_ratio).div(coeff);\n', '    generateTokens(_beneficiary, tokens);\n', '  }\n', '\n', '  /**\n', '   * @notice claim ERC20Basic compatible tokens\n', '   */\n', '  function claimTokens(ERC20Basic _token) external onlyOwner {\n', '    require(isFinalized);\n', '    uint256 balance = _token.balanceOf(this);\n', '    _token.transfer(owner, balance);\n', '    emit ClaimTokens(_token, balance);\n', '  }\n', '\n', '  /**\n', '   * @notice Override HolderBase.deliverTokens\n', '   * @param _token ERC20Basic token contract\n', '   * @param _beneficiary Address to receive tokens\n', '   * @param _tokens Amount of tokens\n', '   */\n', '  function deliverTokens(ERC20Basic _token, address _beneficiary, uint256 _tokens) internal {\n', '    generateTokens(_beneficiary, _tokens);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title BlockIntervalCrowdsale\n', ' * @notice BlockIntervalCrowdsale limit purchaser to take participate too frequently.\n', ' */\n', 'contract BlockIntervalCrowdsale is BaseCrowdsale {\n', '  uint256 public blockInterval;\n', '  mapping (address => uint256) public recentBlock;\n', '\n', '  function BlockIntervalCrowdsale(uint256 _blockInterval) public {\n', '    require(_blockInterval != 0);\n', '    blockInterval = _blockInterval;\n', '  }\n', '\n', '  /**\n', '   * @return true if the block number is over the block internal.\n', '   */\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinBlock = recentBlock[msg.sender].add(blockInterval) < block.number;\n', '    return withinBlock && super.validPurchase();\n', '  }\n', '\n', '  /**\n', '   * @notice save the block number\n', '   */\n', '  function buyTokensPreHook(address _beneficiary, uint256 _toFund) internal {\n', '    recentBlock[msg.sender] = block.number;\n', '    super.buyTokensPreHook(_beneficiary, _toFund);\n', '  }\n', '}\n', '\n', '\n', '// https://github.com/bitclave/crowdsale/blob/master/contracts/BonusCrowdsale.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', '* @dev Parent crowdsale contract with support for time-based and amount based bonuses\n', '* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n', '*\n', '*/\n', 'contract BonusCrowdsale is BaseCrowdsale {\n', '\n', '  // Constants\n', '  // The following will be populated by main crowdsale contract\n', '  uint32[] public BONUS_TIMES;\n', '  uint32[] public BONUS_TIMES_VALUES;\n', '  uint128[] public BONUS_AMOUNTS;\n', '  uint32[] public BONUS_AMOUNTS_VALUES;\n', '\n', '  /**\n', '  * @dev Retrieve length of bonuses by time array\n', '  * @return Bonuses by time array length\n', '  */\n', '  function bonusesForTimesCount() public view returns(uint) {\n', '    return BONUS_TIMES.length;\n', '  }\n', '\n', '  /**\n', '  * @dev Sets bonuses for time\n', '  */\n', '  function setBonusesForTimes(uint32[] times, uint32[] values) public onlyOwner {\n', '    require(times.length == values.length);\n', '    for (uint i = 0; i + 1 < times.length; i++) {\n', '      require(times[i] < times[i+1]);\n', '    }\n', '\n', '    BONUS_TIMES = times;\n', '    BONUS_TIMES_VALUES = values;\n', '  }\n', '\n', '  /**\n', '  * @dev Retrieve length of bonuses by amounts array\n', '  * @return Bonuses by amounts array length\n', '  */\n', '  function bonusesForAmountsCount() public view returns(uint) {\n', '    return BONUS_AMOUNTS.length;\n', '  }\n', '\n', '  /**\n', '  * @dev Sets bonuses for USD amounts\n', '  */\n', '  function setBonusesForAmounts(uint128[] amounts, uint32[] values) public onlyOwner {\n', '    require(amounts.length == values.length);\n', '    for (uint i = 0; i + 1 < amounts.length; i++) {\n', '      require(amounts[i] > amounts[i+1]);\n', '    }\n', '\n', '    BONUS_AMOUNTS = amounts;\n', '    BONUS_AMOUNTS_VALUES = values;\n', '  }\n', '\n', '  /**\n', '  * @notice Overrided getTokenAmount function of parent Crowdsale contract\n', '    to calculate the token with time and amount bonus.\n', '  * @param weiAmount walelt of investor to receive tokens\n', '  */\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    // Compute time and amount bonus\n', '    uint256 bonus = computeBonus(weiAmount);\n', '    uint256 rateWithBonus = rate.mul(coeff.add(bonus)).div(coeff);\n', '    return weiAmount.mul(rateWithBonus);\n', '  }\n', '\n', '  /**\n', '  * @dev Computes overall bonus based on time of contribution and amount of contribution.\n', '  * The total bonus is the sum of bonus by time and bonus by amount\n', '  * @return bonus percentage scaled by 10\n', '  */\n', '  function computeBonus(uint256 weiAmount) public view returns(uint256) {\n', '    return computeAmountBonus(weiAmount).add(computeTimeBonus());\n', '  }\n', '\n', '  /**\n', '  * @dev Computes bonus based on time of contribution relative to the beginning of crowdsale\n', '  * @return bonus percentage scaled by 10\n', '  */\n', '  function computeTimeBonus() public view returns(uint256) {\n', '    require(now >= startTime); // solium-disable-line security/no-block-members\n', '\n', '    for (uint i = 0; i < BONUS_TIMES.length; i++) {\n', '      if (now <= BONUS_TIMES[i]) { // solium-disable-line security/no-block-members\n', '        return BONUS_TIMES_VALUES[i];\n', '      }\n', '    }\n', '\n', '    return 0;\n', '  }\n', '\n', '  /**\n', '  * @dev Computes bonus based on amount of contribution\n', '  * @return bonus percentage scaled by 10\n', '  */\n', '  function computeAmountBonus(uint256 weiAmount) public view returns(uint256) {\n', '    for (uint i = 0; i < BONUS_AMOUNTS.length; i++) {\n', '      if (weiAmount >= BONUS_AMOUNTS[i]) {\n', '        return BONUS_AMOUNTS_VALUES[i];\n', '      }\n', '    }\n', '\n', '    return 0;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title FinishMintingCrowdsale\n', ' * @notice FinishMintingCrowdsale prevents token generation after sale ended.\n', ' */\n', 'contract FinishMintingCrowdsale is BaseCrowdsale {\n', '  function afterGeneratorHook() internal {\n', '    require(finishMinting());\n', '    super.afterGeneratorHook();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title KYC\n', ' * @dev KYC contract handles the white list for PLCCrowdsale contract\n', ' * Only accounts registered in KYC contract can buy PLC token.\n', ' * Admins can register account, and the reason why\n', ' */\n', 'contract KYC is Ownable {\n', '  // check the address is registered for token sale\n', '  mapping (address => bool) public registeredAddress;\n', '\n', '  // check the address is admin of kyc contract\n', '  mapping (address => bool) public admin;\n', '\n', '  event Registered(address indexed _addr);\n', '  event Unregistered(address indexed _addr);\n', '  event SetAdmin(address indexed _addr, bool indexed _isAdmin);\n', '\n', '  /**\n', '   * @dev check whether the msg.sender is admin or not\n', '   */\n', '  modifier onlyAdmin() {\n', '    require(admin[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  function KYC() public {\n', '    admin[msg.sender] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev set new admin as admin of KYC contract\n', '   * @param _addr address The address to set as admin of KYC contract\n', '   */\n', '  function setAdmin(address _addr, bool _isAdmin)\n', '    public\n', '    onlyOwner\n', '  {\n', '    require(_addr != address(0));\n', '    admin[_addr] = _isAdmin;\n', '\n', '    emit SetAdmin(_addr, _isAdmin);\n', '  }\n', '\n', '  /**\n', '   * @dev register the address for token sale\n', '   * @param _addr address The address to register for token sale\n', '   */\n', '  function register(address _addr)\n', '    public\n', '    onlyAdmin\n', '  {\n', '    require(_addr != address(0));\n', '\n', '    registeredAddress[_addr] = true;\n', '\n', '    emit Registered(_addr);\n', '  }\n', '\n', '  /**\n', '   * @dev register the addresses for token sale\n', '   * @param _addrs address[] The addresses to register for token sale\n', '   */\n', '  function registerByList(address[] _addrs)\n', '    public\n', '    onlyAdmin\n', '  {\n', '    for(uint256 i = 0; i < _addrs.length; i++) {\n', '      require(_addrs[i] != address(0));\n', '\n', '      registeredAddress[_addrs[i]] = true;\n', '\n', '      emit Registered(_addrs[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev unregister the registered address\n', '   * @param _addr address The address to unregister for token sale\n', '   */\n', '  function unregister(address _addr)\n', '    public\n', '    onlyAdmin\n', '  {\n', '    registeredAddress[_addr] = false;\n', '\n', '    emit Unregistered(_addr);\n', '  }\n', '\n', '  /**\n', '   * @dev unregister the registered addresses\n', '   * @param _addrs address[] The addresses to unregister for token sale\n', '   */\n', '  function unregisterByList(address[] _addrs)\n', '    public\n', '    onlyAdmin\n', '  {\n', '    for(uint256 i = 0; i < _addrs.length; i++) {\n', '      registeredAddress[_addrs[i]] = false;\n', '\n', '      emit Unregistered(_addrs[i]);\n', '    }\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title KYCCrowdsale\n', ' * @notice KYCCrowdsale checks kyc information and\n', ' */\n', 'contract KYCCrowdsale is BaseCrowdsale {\n', '\n', '  KYC kyc;\n', '\n', '  function KYCCrowdsale (address _kyc) public {\n', '    require(_kyc != 0x0);\n', '    kyc = KYC(_kyc);\n', '  }\n', '\n', '  function registered(address _addr) public view returns (bool) {\n', '    return kyc.registeredAddress(_addr);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract MintableBaseCrowdsale is BaseCrowdsale {\n', '\n', '  MintableToken token;\n', '\n', '  function MintableBaseCrowdsale (address _token) public {\n', '    require(_token != address(0));\n', '    token = MintableToken(_token);\n', '  }\n', '\n', '\n', '  function generateTokens(address _beneficiary, uint256 _tokens) internal {\n', '    token.mint(_beneficiary, _tokens);\n', '  }\n', '\n', '  function transferTokenOwnership(address _to) internal {\n', '    token.transferOwnership(_to);\n', '  }\n', '\n', '  function getTotalSupply() internal returns (uint256) {\n', '    return token.totalSupply();\n', '  }\n', '\n', '  function finishMinting() internal returns (bool) {\n', '    require(token.finishMinting());\n', '    return true;\n', '  }\n', '\n', '  function getTokenAddress() internal returns (address) {\n', '    return address(token);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title StagedCrowdsale\n', ' * @notice StagedCrowdsale seperates sale period with start time & end time.\n', ' * For each period, seperate max cap and kyc could be setup.\n', ' * Both startTime and endTime are inclusive.\n', ' */\n', 'contract StagedCrowdsale is KYCCrowdsale {\n', '\n', '  uint8 public numPeriods;\n', '\n', '  Stage[] public stages;\n', '\n', '  struct Stage {\n', '    uint128 cap;\n', '    uint128 maxPurchaseLimit;\n', '    uint128 minPurchaseLimit;\n', '    uint128 weiRaised; // stage&#39;s weiAmount raised\n', '    uint32 startTime;\n', '    uint32 endTime;\n', '    bool kyc;\n', '  }\n', '\n', '  function StagedCrowdsale(uint _numPeriods) public {\n', '    numPeriods = uint8(_numPeriods);\n', '    require(numPeriods > 0);\n', '  }\n', '\n', '  function initStages(\n', '    uint32[] _startTimes,\n', '    uint32[] _endTimes,\n', '    uint128[] _capRatios,\n', '    uint128[] _maxPurchaseLimits,\n', '    uint128[] _minPurchaseLimits,\n', '    bool[] _kycs)\n', '    public\n', '  {\n', '    uint len = numPeriods;\n', '\n', '    require(stages.length == 0);\n', '    // solium-disable\n', '    require(len == _startTimes.length &&\n', '      len == _endTimes.length &&\n', '      len == _capRatios.length &&\n', '      len == _maxPurchaseLimits.length &&\n', '      len == _minPurchaseLimits.length &&\n', '      len == _kycs.length);\n', '    // solium-enable\n', '\n', '    for (uint i = 0; i < len; i++) {\n', '      require(_endTimes[i] >= _startTimes[i]);\n', '\n', '      uint stageCap;\n', '\n', '      if (_capRatios[i] != 0) {\n', '        stageCap = cap.mul(uint(_capRatios[i])).div(coeff);\n', '      } else {\n', '        stageCap = 0;\n', '      }\n', '\n', '      stages.push(Stage({\n', '        startTime: _startTimes[i],\n', '        endTime: _endTimes[i],\n', '        cap: uint128(stageCap),\n', '        maxPurchaseLimit: _maxPurchaseLimits[i],\n', '        minPurchaseLimit: _minPurchaseLimits[i],\n', '        kyc: _kycs[i],\n', '        weiRaised: 0\n', '      }));\n', '    }\n', '\n', '    require(validPeriods());\n', '  }\n', '\n', '  /**\n', '   * @notice if period is on sale, return index of the period.\n', '   */\n', '  function getStageIndex() public view returns (uint8 currentStage, bool onSale) {\n', '    onSale = true;\n', '    Stage memory p;\n', '\n', '    for (currentStage = 0; currentStage < stages.length; currentStage++) {\n', '      p = stages[currentStage];\n', '      if (p.startTime <= now && now <= p.endTime) {\n', '        return;\n', '      }\n', '    }\n', '\n', '    onSale = false;\n', '  }\n', '\n', '  /**\n', '   * @notice return if all period is finished.\n', '   */\n', '  function saleFinished() public view returns (bool) {\n', '    require(stages.length == numPeriods);\n', '    return stages[stages.length - 1].endTime < now;\n', '  }\n', '\n', '\n', '  function validPeriods() internal view returns (bool) {\n', '    if (stages.length != numPeriods) {\n', '      return false;\n', '    }\n', '\n', '    // check stages are overlapped.\n', '    for (uint8 i = 0; i < stages.length - 1; i++) {\n', '      if (stages[i].endTime >= stages[i + 1].startTime) {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice Override BaseCrowdsale.calculateToFund function.\n', '   * Check if period is on sale and apply cap if needed.\n', '   */\n', '  function calculateToFund(address _beneficiary, uint256 _weiAmount) internal view returns (uint256) {\n', '    uint256 weiAmount = _weiAmount;\n', '    uint8 currentStage;\n', '    bool onSale;\n', '\n', '    (currentStage, onSale) = getStageIndex();\n', '\n', '    require(onSale);\n', '\n', '    Stage memory p = stages[currentStage];\n', '\n', '    // Check kyc if needed for this period\n', '    if (p.kyc) {\n', '      require(super.registered(_beneficiary));\n', '    }\n', '\n', '    // check min purchase limit of the period\n', '    require(weiAmount >= uint(p.minPurchaseLimit));\n', '\n', '    // reduce up to max purchase limit of the period\n', '    if (p.maxPurchaseLimit != 0 && weiAmount > uint(p.maxPurchaseLimit)) {\n', '      weiAmount = uint(p.maxPurchaseLimit);\n', '    }\n', '\n', '    // pre-calculate `toFund` with the period&#39;s cap\n', '    if (p.cap > 0) {\n', '      uint256 postWeiRaised = uint256(p.weiRaised).add(weiAmount);\n', '\n', '      if (postWeiRaised > p.cap) {\n', '        weiAmount = uint256(p.cap).sub(p.weiRaised);\n', '      }\n', '    }\n', '\n', '    // get `toFund` with the cap of the sale\n', '    return super.calculateToFund(_beneficiary, weiAmount);\n', '  }\n', '\n', '  function buyTokensPreHook(address _beneficiary, uint256 _toFund) internal {\n', '    uint8 currentStage;\n', '    bool onSale;\n', '\n', '    (currentStage, onSale) = getStageIndex();\n', '\n', '    require(onSale);\n', '\n', '    Stage storage p = stages[currentStage];\n', '\n', '    p.weiRaised = uint128(_toFund.add(uint256(p.weiRaised)));\n', '    super.buyTokensPreHook(_beneficiary, _toFund);\n', '  }\n', '}\n', '\n', '\n', 'pragma solidity^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract AlphaconCrowdsale is BaseCrowdsale, MintableBaseCrowdsale, BonusCrowdsale, BlockIntervalCrowdsale, KYCCrowdsale, StagedCrowdsale, FinishMintingCrowdsale {\n', '\n', '  bool public initialized;\n', '\n', '  // constructor parameters are left padded bytes32.\n', '\n', '  function AlphaconCrowdsale(bytes32[5] args) \n', '    BaseCrowdsale(\n', '      parseUint(args[0]))\n', '    MintableBaseCrowdsale(\n', '      parseAddress(args[1]))\n', '    BonusCrowdsale()\n', '    BlockIntervalCrowdsale(\n', '      parseUint(args[2]))\n', '    KYCCrowdsale(\n', '      parseAddress(args[3]))\n', '    StagedCrowdsale(\n', '      parseUint(args[4]))\n', '    FinishMintingCrowdsale() public {}\n', '  \n', '\n', '  function parseBool(bytes32 b) internal pure returns (bool) {\n', '    return b == 0x1;\n', '  }\n', '\n', '  function parseUint(bytes32 b) internal pure returns (uint) {\n', '    return uint(b);\n', '  }\n', '\n', '  function parseAddress(bytes32 b) internal pure returns (address) {\n', '    return address(b & 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff);\n', '  }\n', '\n', '  function init(bytes32[] args) public {\n', '    uint _startTime = uint(args[0]);\n', '    uint _endTime = uint(args[1]);\n', '    uint _rate = uint(args[2]);\n', '    uint _cap = uint(args[3]);\n', '    uint _goal = uint(args[4]);\n', '    uint _crowdsaleRatio = uint(args[5]);\n', '    address _vault = address(args[6]);\n', '    address _locker = address(args[7]);\n', '    address _nextTokenOwner = address(args[8]);\n', '\n', '    require(_endTime > _startTime);\n', '    require(_rate > 0);\n', '    require(_cap > 0);\n', '    require(_goal > 0);\n', '    require(_cap > _goal);\n', '    require(_crowdsaleRatio > 0);\n', '    require(_vault != address(0));\n', '    require(_locker != address(0));\n', '    require(_nextTokenOwner != address(0));\n', '    \n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    cap = _cap;\n', '    goal = _goal;\n', '    crowdsaleRatio = _crowdsaleRatio;\n', '    vault = MultiHolderVault(_vault);\n', '    locker = Locker(_locker);\n', '    nextTokenOwner = _nextTokenOwner;\n', '  }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title HolderBase\n', ' * @notice HolderBase handles data & funcitons for token or ether holders.\n', ' * HolderBase contract can distribute only one of ether or token.\n', ' */\n', 'contract HolderBase is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  uint8 public constant MAX_HOLDERS = 64; // TODO: tokyo-input should verify # of holders\n', '  uint256 public coeff;\n', '  bool public distributed;\n', '  bool public initialized;\n', '\n', '  struct Holder {\n', '    address addr;\n', '    uint96 ratio;\n', '  }\n', '\n', '  Holder[] public holders;\n', '\n', '  event Distributed();\n', '\n', '  function HolderBase(uint256 _coeff) public {\n', '    require(_coeff != 0);\n', '    coeff = _coeff;\n', '  }\n', '\n', '  function getHolderCount() public view returns (uint256) {\n', '    return holders.length;\n', '  }\n', '\n', '  function initHolders(address[] _addrs, uint96[] _ratios) public onlyOwner {\n', '    require(!initialized);\n', '    require(holders.length == 0);\n', '    require(_addrs.length != 0);\n', '    require(_addrs.length <= MAX_HOLDERS);\n', '    require(_addrs.length == _ratios.length);\n', '\n', '    uint256 accRatio;\n', '\n', '    for(uint8 i = 0; i < _addrs.length; i++) {\n', '      if (_addrs[i] != address(0)) {\n', '        // address will be 0x00 in case of "crowdsale".\n', '        holders.push(Holder(_addrs[i], _ratios[i]));\n', '      }\n', '\n', '      accRatio = accRatio.add(uint256(_ratios[i]));\n', '    }\n', '\n', '    require(accRatio <= coeff);\n', '\n', '    initialized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Distribute ether to `holder`s according to ratio.\n', '   * Remaining ether is transfered to `wallet` from the close\n', '   * function of RefundVault contract.\n', '   */\n', '  function distribute() internal {\n', '    require(!distributed, "Already distributed");\n', '    uint256 balance = this.balance;\n', '\n', '    require(balance > 0, "No ether to distribute");\n', '    distributed = true;\n', '\n', '    for (uint8 i = 0; i < holders.length; i++) {\n', '      uint256 holderAmount = balance.mul(uint256(holders[i].ratio)).div(coeff);\n', '\n', '      holders[i].addr.transfer(holderAmount);\n', '    }\n', '\n', '    emit Distributed(); // A single log to reduce gas\n', '  }\n', '\n', '  /**\n', '   * @dev Distribute ERC20 token to `holder`s according to ratio.\n', '   */\n', '  function distributeToken(ERC20Basic _token, uint256 _targetTotalSupply) internal {\n', '    require(!distributed, "Already distributed");\n', '    distributed = true;\n', '\n', '    for (uint8 i = 0; i < holders.length; i++) {\n', '      uint256 holderAmount = _targetTotalSupply.mul(uint256(holders[i].ratio)).div(coeff);\n', '      deliverTokens(_token, holders[i].addr, holderAmount);\n', '    }\n', '\n', '    emit Distributed(); // A single log to reduce gas\n', '  }\n', '\n', '  // Override to distribute tokens\n', '  function deliverTokens(ERC20Basic _token, address _beneficiary, uint256 _tokens) internal {}\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Locker\n', ' * @notice Locker holds tokens and releases them at a certain time.\n', ' */\n', 'contract Locker is Ownable {\n', '  using SafeMath for uint;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * It is init state only when adding release info is possible.\n', '   * beneficiary only can release tokens when Locker is active.\n', '   * After all tokens are released, locker is drawn.\n', '   */\n', '  enum State { Init, Ready, Active, Drawn }\n', '\n', '  struct Beneficiary {\n', "    uint ratio;             // ratio based on Locker's initial balance.\n", '    uint withdrawAmount;    // accumulated tokens beneficiary released\n', '    bool releaseAllTokens;\n', '  }\n', '\n', '  /**\n', '   * @notice Release has info to release tokens.\n', '   * If lock type is straight, only two release infos is required.\n', '   *\n', '   *     |\n', '   * 100 |                _______________\n', '   *     |              _/\n', '   *  50 |            _/\n', '   *     |         . |\n', '   *     |       .   |\n', '   *     |     .     |\n', '   *     +===+=======+----*----------> time\n', '   *     Locker  First    Last\n', '   *  Activated  Release  Release\n', '   *\n', '   *\n', '   * If lock type is variable, the release graph will be\n', '   *\n', '   *     |\n', '   * 100 |                                 _________\n', '   *     |                                |\n', '   *  70 |                      __________|\n', '   *     |                     |\n', '   *  30 |            _________|\n', '   *     |           |\n', '   *     +===+=======+---------+----------*------> time\n', '   *     Locker   First        Second     Last\n', '   *  Activated   Release      Release    Release\n', '   *\n', '   *\n', '   *\n', '   * For the first straight release graph, parameters would be\n', '   *   coeff: 100\n', '   *   releaseTimes: [\n', '   *     first release time,\n', '   *     second release time\n', '   *   ]\n', '   *   releaseRatios: [\n', '   *     50,\n', '   *     100,\n', '   *   ]\n', '   *\n', '   * For the second variable release graph, parameters would be\n', '   *   coeff: 100\n', '   *   releaseTimes: [\n', '   *     first release time,\n', '   *     second release time,\n', '   *     last release time\n', '   *   ]\n', '   *   releaseRatios: [\n', '   *     30,\n', '   *     70,\n', '   *     100,\n', '   *   ]\n', '   *\n', '   */\n', '  struct Release {\n', '    bool isStraight;        // lock type : straight or variable\n', '    uint[] releaseTimes;    //\n', '    uint[] releaseRatios;   //\n', '  }\n', '\n', '  uint public activeTime;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  uint public coeff;\n', '  uint public initialBalance;\n', '  uint public withdrawAmount; // total amount of tokens released\n', '\n', '  mapping (address => Beneficiary) public beneficiaries;\n', "  mapping (address => Release) public releases;  // beneficiary's lock\n", "  mapping (address => bool) public locked; // whether beneficiary's lock is instantiated\n", '\n', '  uint public numBeneficiaries;\n', '  uint public numLocks;\n', '\n', '  State public state;\n', '\n', '  modifier onlyState(State v) {\n', '    require(state == v);\n', '    _;\n', '  }\n', '\n', '  modifier onlyBeneficiary(address _addr) {\n', '    require(beneficiaries[_addr].ratio > 0);\n', '    _;\n', '  }\n', '\n', '  event StateChanged(State _state);\n', '  event Locked(address indexed _beneficiary, bool _isStraight);\n', '  event Released(address indexed _beneficiary, uint256 _amount);\n', '\n', '  function Locker(address _token, uint _coeff, address[] _beneficiaries, uint[] _ratios) public {\n', '    require(_token != address(0));\n', '    require(_beneficiaries.length == _ratios.length);\n', '\n', '    token = ERC20Basic(_token);\n', '    coeff = _coeff;\n', '    numBeneficiaries = _beneficiaries.length;\n', '\n', '    uint accRatio;\n', '\n', '    for(uint i = 0; i < numBeneficiaries; i++) {\n', '      require(_ratios[i] > 0);\n', '      beneficiaries[_beneficiaries[i]].ratio = _ratios[i];\n', '\n', '      accRatio = accRatio.add(_ratios[i]);\n', '    }\n', '\n', '    require(coeff == accRatio);\n', '  }\n', '\n', '  /**\n', '   * @notice beneficiary can release their tokens after activated\n', '   */\n', '  function activate() external onlyOwner onlyState(State.Ready) {\n', '    require(numLocks == numBeneficiaries); // double check : assert all releases are recorded\n', '\n', '    initialBalance = token.balanceOf(this);\n', '    require(initialBalance > 0);\n', '\n', '    activeTime = now; // solium-disable-line security/no-block-members\n', '\n', '    // set locker as active state\n', '    state = State.Active;\n', '    emit StateChanged(state);\n', '  }\n', '\n', '  function getReleaseType(address _beneficiary)\n', '    public\n', '    view\n', '    onlyBeneficiary(_beneficiary)\n', '    returns (bool)\n', '  {\n', '    return releases[_beneficiary].isStraight;\n', '  }\n', '\n', '  function getTotalLockedAmounts(address _beneficiary)\n', '    public\n', '    view\n', '    onlyBeneficiary(_beneficiary)\n', '    returns (uint)\n', '  {\n', '    return getPartialAmount(beneficiaries[_beneficiary].ratio, coeff, initialBalance);\n', '  }\n', '\n', '  function getReleaseTimes(address _beneficiary)\n', '    public\n', '    view\n', '    onlyBeneficiary(_beneficiary)\n', '    returns (uint[])\n', '  {\n', '    return releases[_beneficiary].releaseTimes;\n', '  }\n', '\n', '  function getReleaseRatios(address _beneficiary)\n', '    public\n', '    view\n', '    onlyBeneficiary(_beneficiary)\n', '    returns (uint[])\n', '  {\n', '    return releases[_beneficiary].releaseRatios;\n', '  }\n', '\n', '  /**\n', '   * @notice add new release record for beneficiary\n', '   */\n', '  function lock(address _beneficiary, bool _isStraight, uint[] _releaseTimes, uint[] _releaseRatios)\n', '    external\n', '    onlyOwner\n', '    onlyState(State.Init)\n', '    onlyBeneficiary(_beneficiary)\n', '  {\n', '    require(!locked[_beneficiary]);\n', '    require(_releaseRatios.length != 0);\n', '    require(_releaseRatios.length == _releaseTimes.length);\n', '\n', '    uint i;\n', '    uint len = _releaseRatios.length;\n', '\n', '    // finally should release all tokens\n', '    require(_releaseRatios[len - 1] == coeff);\n', '\n', '    // check two array are ascending sorted\n', '    for(i = 0; i < len - 1; i++) {\n', '      require(_releaseTimes[i] < _releaseTimes[i + 1]);\n', '      require(_releaseRatios[i] < _releaseRatios[i + 1]);\n', '    }\n', '\n', '    // 2 release times for straight locking type\n', '    if (_isStraight) {\n', '      require(len == 2);\n', '    }\n', '\n', '    numLocks = numLocks.add(1);\n', '\n', '    // create Release for the beneficiary\n', '    releases[_beneficiary].isStraight = _isStraight;\n', '\n', '    // copy array of uint\n', '    releases[_beneficiary].releaseTimes = _releaseTimes;\n', '    releases[_beneficiary].releaseRatios = _releaseRatios;\n', '\n', '    // lock beneficiary\n', '    locked[_beneficiary] = true;\n', '    emit Locked(_beneficiary, _isStraight);\n', '\n', '    //  if all beneficiaries locked, change Locker state to change\n', '    if (numLocks == numBeneficiaries) {\n', '      state = State.Ready;\n', '      emit StateChanged(state);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice transfer releasable tokens for beneficiary wrt the release graph\n', '   */\n', '  function release() external onlyState(State.Active) onlyBeneficiary(msg.sender) {\n', '    require(!beneficiaries[msg.sender].releaseAllTokens);\n', '\n', '    uint releasableAmount = getReleasableAmount(msg.sender);\n', '    beneficiaries[msg.sender].withdrawAmount = beneficiaries[msg.sender].withdrawAmount.add(releasableAmount);\n', '\n', '    beneficiaries[msg.sender].releaseAllTokens = beneficiaries[msg.sender].withdrawAmount == getPartialAmount(\n', '      beneficiaries[msg.sender].ratio,\n', '      coeff,\n', '      initialBalance);\n', '\n', '    withdrawAmount = withdrawAmount.add(releasableAmount);\n', '\n', '    if (withdrawAmount == initialBalance) {\n', '      state = State.Drawn;\n', '      emit StateChanged(state);\n', '    }\n', '\n', '    token.transfer(msg.sender, releasableAmount);\n', '    emit Released(msg.sender, releasableAmount);\n', '  }\n', '\n', '  function getReleasableAmount(address _beneficiary) internal view returns (uint) {\n', '    if (releases[_beneficiary].isStraight) {\n', '      return getStraightReleasableAmount(_beneficiary);\n', '    } else {\n', '      return getVariableReleasableAmount(_beneficiary);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice return releaseable amount for beneficiary in case of straight type of release\n', '   */\n', '  function getStraightReleasableAmount(address _beneficiary) internal view returns (uint releasableAmount) {\n', '    Beneficiary memory _b = beneficiaries[_beneficiary];\n', '    Release memory _r = releases[_beneficiary];\n', '\n', '    // total amount of tokens beneficiary can release\n', '    uint totalReleasableAmount = getTotalLockedAmounts(_beneficiary);\n', '\n', '    uint firstTime = _r.releaseTimes[0];\n', '    uint lastTime = _r.releaseTimes[1];\n', '\n', '    // solium-disable security/no-block-members\n', '    require(now >= firstTime); // pass if can release\n', '    // solium-enable security/no-block-members\n', '\n', '    if(now >= lastTime) { // inclusive to reduce calculation\n', '      releasableAmount = totalReleasableAmount;\n', '    } else {\n', '      // releasable amount at first time\n', '      uint firstAmount = getPartialAmount(\n', '        _r.releaseRatios[0],\n', '        coeff,\n', '        totalReleasableAmount);\n', '\n', '      // partial amount without first amount\n', '      releasableAmount = getPartialAmount(\n', '        now.sub(firstTime),\n', '        lastTime.sub(firstTime),\n', '        totalReleasableAmount.sub(firstAmount));\n', '      releasableAmount = releasableAmount.add(firstAmount);\n', '    }\n', '\n', '    // subtract already withdrawn amounts\n', '    releasableAmount = releasableAmount.sub(_b.withdrawAmount);\n', '  }\n', '\n', '  /**\n', '   * @notice return releaseable amount for beneficiary in case of variable type of release\n', '   */\n', '  function getVariableReleasableAmount(address _beneficiary) internal view returns (uint releasableAmount) {\n', '    Beneficiary memory _b = beneficiaries[_beneficiary];\n', '    Release memory _r = releases[_beneficiary];\n', '\n', '    // total amount of tokens beneficiary will receive\n', '    uint totalReleasableAmount = getTotalLockedAmounts(_beneficiary);\n', '\n', '    uint releaseRatio;\n', '\n', '    // reverse order for short curcit\n', '    for(uint i = _r.releaseTimes.length - 1; i >= 0; i--) {\n', '      if (now >= _r.releaseTimes[i]) {\n', '        releaseRatio = _r.releaseRatios[i];\n', '        break;\n', '      }\n', '    }\n', '\n', '    require(releaseRatio > 0);\n', '\n', '    releasableAmount = getPartialAmount(\n', '      releaseRatio,\n', '      coeff,\n', '      totalReleasableAmount);\n', '    releasableAmount = releasableAmount.sub(_b.withdrawAmount);\n', '  }\n', '\n', '  /// https://github.com/0xProject/0x.js/blob/05aae368132a81ddb9fd6a04ac5b0ff1cbb24691/packages/contracts/src/current/protocol/Exchange/Exchange.sol#L497\n', '  /// @notice Calculates partial value given a numerator and denominator.\n', '  /// @param numerator Numerator.\n', '  /// @param denominator Denominator.\n', '  /// @param target Value to calculate partial of.\n', '  /// @return Partial value of target.\n', '  function getPartialAmount(uint numerator, uint denominator, uint target) public pure returns (uint) {\n', '    return numerator.mul(target).div(denominator);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  /**\n', '   * @param _wallet Vault address\n', '   */\n', '  constructor(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    emit Closed();\n', '    wallet.transfer(address(this).balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    emit RefundsEnabled();\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    emit Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title MultiHolderVault\n', ' * @dev This contract distribute ether to multiple address.\n', ' */\n', 'contract MultiHolderVault is HolderBase, RefundVault {\n', '  using SafeMath for uint256;\n', '\n', '  function MultiHolderVault(address _wallet, uint256 _ratioCoeff)\n', '    public\n', '    HolderBase(_ratioCoeff)\n', '    RefundVault(_wallet)\n', '  {}\n', '\n', '  function close() public onlyOwner {\n', '    require(state == State.Active);\n', '    require(initialized);\n', '\n', '    super.distribute(); // distribute ether to holders\n', '    super.close(); // transfer remaining ether to wallet\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', 'contract BaseCrowdsale is HolderBase, Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  Locker public locker;     // token locker\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // how many token units a buyer gets per wei\n', '  // use coeff ratio from HolderBase\n', '  uint256 public rate;\n', '\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  // ratio of tokens for crowdsale\n', '  uint256 public crowdsaleRatio;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  uint256 public cap;\n', '\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '\n', '  // refund vault used to hold funds while crowdsale is running\n', '  MultiHolderVault public vault;\n', '\n', '  address public nextTokenOwner;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  event Finalized();\n', '  event ClaimTokens(address indexed _token, uint256 _amount);\n', '\n', '  function BaseCrowdsale(uint256 _coeff) HolderBase(_coeff) public {}\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  function buyTokens(address beneficiary) public payable whenNotPaused {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    uint256 toFund = calculateToFund(beneficiary, weiAmount);\n', '    require(toFund > 0);\n', '\n', '    uint256 toReturn = weiAmount.sub(toFund);\n', '\n', '    buyTokensPreHook(beneficiary, toFund);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(toFund);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(toFund);\n', '\n', '    if (toReturn > 0) {\n', '      msg.sender.transfer(toReturn);\n', '    }\n', '\n', '    buyTokensPostHook(beneficiary, tokens, toFund);\n', '\n', '    generateTokens(beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender, beneficiary, toFund, tokens);\n', '    forwardFunds(toFund);\n', '  }\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '\n', '  // vault finalization task, called when owner calls finalize()\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '      finalizationSuccessHook();\n', '    } else {\n', '      finalizationFailHook();\n', '    }\n', '  }\n', '\n', '  // if crowdsale is unsuccessful, investors can claim refunds here\n', '  function claimRefund() public {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  function goalReached() public view returns (bool) {\n', '    return weiRaised >= goal;\n', '  }\n', '\n', '  /// @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return capReached || now > endTime; // solium-disable-line security/no-block-members\n', '  }\n', '\n', '  // Override this method to have a way to add business logic to your crowdsale when buying\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    return weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @notice forwardd ether to vault\n', '   */\n', '  function forwardFunds(uint256 toFund) internal {\n', '    vault.deposit.value(toFund)(msg.sender);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime; // solium-disable-line security/no-block-members\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  /**\n', '   * @notice calculate fund wrt sale cap. Override this function to control ether cap.\n', '   * @param _beneficiary address address to receive tokens\n', '   * @param _weiAmount uint256 amount of ether in wei\n', '   */\n', '  function calculateToFund(address _beneficiary, uint256 _weiAmount) internal view returns (uint256) {\n', '    uint256 toFund;\n', '    uint256 postWeiRaised = weiRaised.add(_weiAmount);\n', '\n', '    if (postWeiRaised > cap) {\n', '      toFund = cap.sub(weiRaised);\n', '    } else {\n', '      toFund = _weiAmount;\n', '    }\n', '    return toFund;\n', '  }\n', '\n', '  /**\n', '   * @notice interface to initialize crowdsale parameters.\n', '   * init should be implemented by Crowdsale Generator.\n', '   */\n', '  function init(bytes32[] args) public;\n', '\n', '  /**\n', '   * @notice pre hook for buyTokens function\n', '   * @param _beneficiary address address to receive tokens\n', '   * @param _toFund uint256 amount of ether in wei\n', '   */\n', '  function buyTokensPreHook(address _beneficiary, uint256 _toFund) internal {}\n', '\n', '  /**\n', '   * @notice post hook for buyTokens function\n', '   * @param _beneficiary address address to receive tokens\n', '   * @param _tokens uint256 amount of tokens to receive\n', '   * @param _toFund uint256 amount of ether in wei\n', '   */\n', '  function buyTokensPostHook(address _beneficiary, uint256 _tokens, uint256 _toFund) internal {}\n', '\n', '  function finalizationFailHook() internal {\n', '    vault.enableRefunds();\n', '  }\n', '\n', '  function finalizationSuccessHook() internal {\n', '    // calculate target total supply including all token holders\n', '    uint256 targetTotalSupply = getTotalSupply().mul(coeff).div(crowdsaleRatio);\n', '    ERC20Basic token = ERC20Basic(getTokenAddress());\n', '\n', '    super.distributeToken(token, targetTotalSupply);\n', '    afterGeneratorHook();\n', '\n', '    locker.activate();\n', '    vault.close();\n', '\n', '    transferTokenOwnership(nextTokenOwner);\n', '  }\n', '\n', '  function afterGeneratorHook() internal {}\n', '\n', '  /**\n', '   * @notice common interfaces for both of MiniMe and Mintable token.\n', '   */\n', '  function generateTokens(address _beneficiary, uint256 _tokens) internal;\n', '  function transferTokenOwnership(address _to) internal;\n', '  function getTotalSupply() internal returns (uint256);\n', '  function finishMinting() internal returns (bool);\n', '  function getTokenAddress() internal returns (address);\n', '\n', '  /**\n', '   * @notice helper function to generate tokens with ratio\n', '   */\n', '  function generateTargetTokens(address _beneficiary, uint256 _targetTotalSupply, uint256 _ratio) internal {\n', '    uint256 tokens = _targetTotalSupply.mul(_ratio).div(coeff);\n', '    generateTokens(_beneficiary, tokens);\n', '  }\n', '\n', '  /**\n', '   * @notice claim ERC20Basic compatible tokens\n', '   */\n', '  function claimTokens(ERC20Basic _token) external onlyOwner {\n', '    require(isFinalized);\n', '    uint256 balance = _token.balanceOf(this);\n', '    _token.transfer(owner, balance);\n', '    emit ClaimTokens(_token, balance);\n', '  }\n', '\n', '  /**\n', '   * @notice Override HolderBase.deliverTokens\n', '   * @param _token ERC20Basic token contract\n', '   * @param _beneficiary Address to receive tokens\n', '   * @param _tokens Amount of tokens\n', '   */\n', '  function deliverTokens(ERC20Basic _token, address _beneficiary, uint256 _tokens) internal {\n', '    generateTokens(_beneficiary, _tokens);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title BlockIntervalCrowdsale\n', ' * @notice BlockIntervalCrowdsale limit purchaser to take participate too frequently.\n', ' */\n', 'contract BlockIntervalCrowdsale is BaseCrowdsale {\n', '  uint256 public blockInterval;\n', '  mapping (address => uint256) public recentBlock;\n', '\n', '  function BlockIntervalCrowdsale(uint256 _blockInterval) public {\n', '    require(_blockInterval != 0);\n', '    blockInterval = _blockInterval;\n', '  }\n', '\n', '  /**\n', '   * @return true if the block number is over the block internal.\n', '   */\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinBlock = recentBlock[msg.sender].add(blockInterval) < block.number;\n', '    return withinBlock && super.validPurchase();\n', '  }\n', '\n', '  /**\n', '   * @notice save the block number\n', '   */\n', '  function buyTokensPreHook(address _beneficiary, uint256 _toFund) internal {\n', '    recentBlock[msg.sender] = block.number;\n', '    super.buyTokensPreHook(_beneficiary, _toFund);\n', '  }\n', '}\n', '\n', '\n', '// https://github.com/bitclave/crowdsale/blob/master/contracts/BonusCrowdsale.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', '* @dev Parent crowdsale contract with support for time-based and amount based bonuses\n', '* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n', '*\n', '*/\n', 'contract BonusCrowdsale is BaseCrowdsale {\n', '\n', '  // Constants\n', '  // The following will be populated by main crowdsale contract\n', '  uint32[] public BONUS_TIMES;\n', '  uint32[] public BONUS_TIMES_VALUES;\n', '  uint128[] public BONUS_AMOUNTS;\n', '  uint32[] public BONUS_AMOUNTS_VALUES;\n', '\n', '  /**\n', '  * @dev Retrieve length of bonuses by time array\n', '  * @return Bonuses by time array length\n', '  */\n', '  function bonusesForTimesCount() public view returns(uint) {\n', '    return BONUS_TIMES.length;\n', '  }\n', '\n', '  /**\n', '  * @dev Sets bonuses for time\n', '  */\n', '  function setBonusesForTimes(uint32[] times, uint32[] values) public onlyOwner {\n', '    require(times.length == values.length);\n', '    for (uint i = 0; i + 1 < times.length; i++) {\n', '      require(times[i] < times[i+1]);\n', '    }\n', '\n', '    BONUS_TIMES = times;\n', '    BONUS_TIMES_VALUES = values;\n', '  }\n', '\n', '  /**\n', '  * @dev Retrieve length of bonuses by amounts array\n', '  * @return Bonuses by amounts array length\n', '  */\n', '  function bonusesForAmountsCount() public view returns(uint) {\n', '    return BONUS_AMOUNTS.length;\n', '  }\n', '\n', '  /**\n', '  * @dev Sets bonuses for USD amounts\n', '  */\n', '  function setBonusesForAmounts(uint128[] amounts, uint32[] values) public onlyOwner {\n', '    require(amounts.length == values.length);\n', '    for (uint i = 0; i + 1 < amounts.length; i++) {\n', '      require(amounts[i] > amounts[i+1]);\n', '    }\n', '\n', '    BONUS_AMOUNTS = amounts;\n', '    BONUS_AMOUNTS_VALUES = values;\n', '  }\n', '\n', '  /**\n', '  * @notice Overrided getTokenAmount function of parent Crowdsale contract\n', '    to calculate the token with time and amount bonus.\n', '  * @param weiAmount walelt of investor to receive tokens\n', '  */\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    // Compute time and amount bonus\n', '    uint256 bonus = computeBonus(weiAmount);\n', '    uint256 rateWithBonus = rate.mul(coeff.add(bonus)).div(coeff);\n', '    return weiAmount.mul(rateWithBonus);\n', '  }\n', '\n', '  /**\n', '  * @dev Computes overall bonus based on time of contribution and amount of contribution.\n', '  * The total bonus is the sum of bonus by time and bonus by amount\n', '  * @return bonus percentage scaled by 10\n', '  */\n', '  function computeBonus(uint256 weiAmount) public view returns(uint256) {\n', '    return computeAmountBonus(weiAmount).add(computeTimeBonus());\n', '  }\n', '\n', '  /**\n', '  * @dev Computes bonus based on time of contribution relative to the beginning of crowdsale\n', '  * @return bonus percentage scaled by 10\n', '  */\n', '  function computeTimeBonus() public view returns(uint256) {\n', '    require(now >= startTime); // solium-disable-line security/no-block-members\n', '\n', '    for (uint i = 0; i < BONUS_TIMES.length; i++) {\n', '      if (now <= BONUS_TIMES[i]) { // solium-disable-line security/no-block-members\n', '        return BONUS_TIMES_VALUES[i];\n', '      }\n', '    }\n', '\n', '    return 0;\n', '  }\n', '\n', '  /**\n', '  * @dev Computes bonus based on amount of contribution\n', '  * @return bonus percentage scaled by 10\n', '  */\n', '  function computeAmountBonus(uint256 weiAmount) public view returns(uint256) {\n', '    for (uint i = 0; i < BONUS_AMOUNTS.length; i++) {\n', '      if (weiAmount >= BONUS_AMOUNTS[i]) {\n', '        return BONUS_AMOUNTS_VALUES[i];\n', '      }\n', '    }\n', '\n', '    return 0;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title FinishMintingCrowdsale\n', ' * @notice FinishMintingCrowdsale prevents token generation after sale ended.\n', ' */\n', 'contract FinishMintingCrowdsale is BaseCrowdsale {\n', '  function afterGeneratorHook() internal {\n', '    require(finishMinting());\n', '    super.afterGeneratorHook();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title KYC\n', ' * @dev KYC contract handles the white list for PLCCrowdsale contract\n', ' * Only accounts registered in KYC contract can buy PLC token.\n', ' * Admins can register account, and the reason why\n', ' */\n', 'contract KYC is Ownable {\n', '  // check the address is registered for token sale\n', '  mapping (address => bool) public registeredAddress;\n', '\n', '  // check the address is admin of kyc contract\n', '  mapping (address => bool) public admin;\n', '\n', '  event Registered(address indexed _addr);\n', '  event Unregistered(address indexed _addr);\n', '  event SetAdmin(address indexed _addr, bool indexed _isAdmin);\n', '\n', '  /**\n', '   * @dev check whether the msg.sender is admin or not\n', '   */\n', '  modifier onlyAdmin() {\n', '    require(admin[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  function KYC() public {\n', '    admin[msg.sender] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev set new admin as admin of KYC contract\n', '   * @param _addr address The address to set as admin of KYC contract\n', '   */\n', '  function setAdmin(address _addr, bool _isAdmin)\n', '    public\n', '    onlyOwner\n', '  {\n', '    require(_addr != address(0));\n', '    admin[_addr] = _isAdmin;\n', '\n', '    emit SetAdmin(_addr, _isAdmin);\n', '  }\n', '\n', '  /**\n', '   * @dev register the address for token sale\n', '   * @param _addr address The address to register for token sale\n', '   */\n', '  function register(address _addr)\n', '    public\n', '    onlyAdmin\n', '  {\n', '    require(_addr != address(0));\n', '\n', '    registeredAddress[_addr] = true;\n', '\n', '    emit Registered(_addr);\n', '  }\n', '\n', '  /**\n', '   * @dev register the addresses for token sale\n', '   * @param _addrs address[] The addresses to register for token sale\n', '   */\n', '  function registerByList(address[] _addrs)\n', '    public\n', '    onlyAdmin\n', '  {\n', '    for(uint256 i = 0; i < _addrs.length; i++) {\n', '      require(_addrs[i] != address(0));\n', '\n', '      registeredAddress[_addrs[i]] = true;\n', '\n', '      emit Registered(_addrs[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev unregister the registered address\n', '   * @param _addr address The address to unregister for token sale\n', '   */\n', '  function unregister(address _addr)\n', '    public\n', '    onlyAdmin\n', '  {\n', '    registeredAddress[_addr] = false;\n', '\n', '    emit Unregistered(_addr);\n', '  }\n', '\n', '  /**\n', '   * @dev unregister the registered addresses\n', '   * @param _addrs address[] The addresses to unregister for token sale\n', '   */\n', '  function unregisterByList(address[] _addrs)\n', '    public\n', '    onlyAdmin\n', '  {\n', '    for(uint256 i = 0; i < _addrs.length; i++) {\n', '      registeredAddress[_addrs[i]] = false;\n', '\n', '      emit Unregistered(_addrs[i]);\n', '    }\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title KYCCrowdsale\n', ' * @notice KYCCrowdsale checks kyc information and\n', ' */\n', 'contract KYCCrowdsale is BaseCrowdsale {\n', '\n', '  KYC kyc;\n', '\n', '  function KYCCrowdsale (address _kyc) public {\n', '    require(_kyc != 0x0);\n', '    kyc = KYC(_kyc);\n', '  }\n', '\n', '  function registered(address _addr) public view returns (bool) {\n', '    return kyc.registeredAddress(_addr);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract MintableBaseCrowdsale is BaseCrowdsale {\n', '\n', '  MintableToken token;\n', '\n', '  function MintableBaseCrowdsale (address _token) public {\n', '    require(_token != address(0));\n', '    token = MintableToken(_token);\n', '  }\n', '\n', '\n', '  function generateTokens(address _beneficiary, uint256 _tokens) internal {\n', '    token.mint(_beneficiary, _tokens);\n', '  }\n', '\n', '  function transferTokenOwnership(address _to) internal {\n', '    token.transferOwnership(_to);\n', '  }\n', '\n', '  function getTotalSupply() internal returns (uint256) {\n', '    return token.totalSupply();\n', '  }\n', '\n', '  function finishMinting() internal returns (bool) {\n', '    require(token.finishMinting());\n', '    return true;\n', '  }\n', '\n', '  function getTokenAddress() internal returns (address) {\n', '    return address(token);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title StagedCrowdsale\n', ' * @notice StagedCrowdsale seperates sale period with start time & end time.\n', ' * For each period, seperate max cap and kyc could be setup.\n', ' * Both startTime and endTime are inclusive.\n', ' */\n', 'contract StagedCrowdsale is KYCCrowdsale {\n', '\n', '  uint8 public numPeriods;\n', '\n', '  Stage[] public stages;\n', '\n', '  struct Stage {\n', '    uint128 cap;\n', '    uint128 maxPurchaseLimit;\n', '    uint128 minPurchaseLimit;\n', "    uint128 weiRaised; // stage's weiAmount raised\n", '    uint32 startTime;\n', '    uint32 endTime;\n', '    bool kyc;\n', '  }\n', '\n', '  function StagedCrowdsale(uint _numPeriods) public {\n', '    numPeriods = uint8(_numPeriods);\n', '    require(numPeriods > 0);\n', '  }\n', '\n', '  function initStages(\n', '    uint32[] _startTimes,\n', '    uint32[] _endTimes,\n', '    uint128[] _capRatios,\n', '    uint128[] _maxPurchaseLimits,\n', '    uint128[] _minPurchaseLimits,\n', '    bool[] _kycs)\n', '    public\n', '  {\n', '    uint len = numPeriods;\n', '\n', '    require(stages.length == 0);\n', '    // solium-disable\n', '    require(len == _startTimes.length &&\n', '      len == _endTimes.length &&\n', '      len == _capRatios.length &&\n', '      len == _maxPurchaseLimits.length &&\n', '      len == _minPurchaseLimits.length &&\n', '      len == _kycs.length);\n', '    // solium-enable\n', '\n', '    for (uint i = 0; i < len; i++) {\n', '      require(_endTimes[i] >= _startTimes[i]);\n', '\n', '      uint stageCap;\n', '\n', '      if (_capRatios[i] != 0) {\n', '        stageCap = cap.mul(uint(_capRatios[i])).div(coeff);\n', '      } else {\n', '        stageCap = 0;\n', '      }\n', '\n', '      stages.push(Stage({\n', '        startTime: _startTimes[i],\n', '        endTime: _endTimes[i],\n', '        cap: uint128(stageCap),\n', '        maxPurchaseLimit: _maxPurchaseLimits[i],\n', '        minPurchaseLimit: _minPurchaseLimits[i],\n', '        kyc: _kycs[i],\n', '        weiRaised: 0\n', '      }));\n', '    }\n', '\n', '    require(validPeriods());\n', '  }\n', '\n', '  /**\n', '   * @notice if period is on sale, return index of the period.\n', '   */\n', '  function getStageIndex() public view returns (uint8 currentStage, bool onSale) {\n', '    onSale = true;\n', '    Stage memory p;\n', '\n', '    for (currentStage = 0; currentStage < stages.length; currentStage++) {\n', '      p = stages[currentStage];\n', '      if (p.startTime <= now && now <= p.endTime) {\n', '        return;\n', '      }\n', '    }\n', '\n', '    onSale = false;\n', '  }\n', '\n', '  /**\n', '   * @notice return if all period is finished.\n', '   */\n', '  function saleFinished() public view returns (bool) {\n', '    require(stages.length == numPeriods);\n', '    return stages[stages.length - 1].endTime < now;\n', '  }\n', '\n', '\n', '  function validPeriods() internal view returns (bool) {\n', '    if (stages.length != numPeriods) {\n', '      return false;\n', '    }\n', '\n', '    // check stages are overlapped.\n', '    for (uint8 i = 0; i < stages.length - 1; i++) {\n', '      if (stages[i].endTime >= stages[i + 1].startTime) {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice Override BaseCrowdsale.calculateToFund function.\n', '   * Check if period is on sale and apply cap if needed.\n', '   */\n', '  function calculateToFund(address _beneficiary, uint256 _weiAmount) internal view returns (uint256) {\n', '    uint256 weiAmount = _weiAmount;\n', '    uint8 currentStage;\n', '    bool onSale;\n', '\n', '    (currentStage, onSale) = getStageIndex();\n', '\n', '    require(onSale);\n', '\n', '    Stage memory p = stages[currentStage];\n', '\n', '    // Check kyc if needed for this period\n', '    if (p.kyc) {\n', '      require(super.registered(_beneficiary));\n', '    }\n', '\n', '    // check min purchase limit of the period\n', '    require(weiAmount >= uint(p.minPurchaseLimit));\n', '\n', '    // reduce up to max purchase limit of the period\n', '    if (p.maxPurchaseLimit != 0 && weiAmount > uint(p.maxPurchaseLimit)) {\n', '      weiAmount = uint(p.maxPurchaseLimit);\n', '    }\n', '\n', "    // pre-calculate `toFund` with the period's cap\n", '    if (p.cap > 0) {\n', '      uint256 postWeiRaised = uint256(p.weiRaised).add(weiAmount);\n', '\n', '      if (postWeiRaised > p.cap) {\n', '        weiAmount = uint256(p.cap).sub(p.weiRaised);\n', '      }\n', '    }\n', '\n', '    // get `toFund` with the cap of the sale\n', '    return super.calculateToFund(_beneficiary, weiAmount);\n', '  }\n', '\n', '  function buyTokensPreHook(address _beneficiary, uint256 _toFund) internal {\n', '    uint8 currentStage;\n', '    bool onSale;\n', '\n', '    (currentStage, onSale) = getStageIndex();\n', '\n', '    require(onSale);\n', '\n', '    Stage storage p = stages[currentStage];\n', '\n', '    p.weiRaised = uint128(_toFund.add(uint256(p.weiRaised)));\n', '    super.buyTokensPreHook(_beneficiary, _toFund);\n', '  }\n', '}\n', '\n', '\n', 'pragma solidity^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract AlphaconCrowdsale is BaseCrowdsale, MintableBaseCrowdsale, BonusCrowdsale, BlockIntervalCrowdsale, KYCCrowdsale, StagedCrowdsale, FinishMintingCrowdsale {\n', '\n', '  bool public initialized;\n', '\n', '  // constructor parameters are left padded bytes32.\n', '\n', '  function AlphaconCrowdsale(bytes32[5] args) \n', '    BaseCrowdsale(\n', '      parseUint(args[0]))\n', '    MintableBaseCrowdsale(\n', '      parseAddress(args[1]))\n', '    BonusCrowdsale()\n', '    BlockIntervalCrowdsale(\n', '      parseUint(args[2]))\n', '    KYCCrowdsale(\n', '      parseAddress(args[3]))\n', '    StagedCrowdsale(\n', '      parseUint(args[4]))\n', '    FinishMintingCrowdsale() public {}\n', '  \n', '\n', '  function parseBool(bytes32 b) internal pure returns (bool) {\n', '    return b == 0x1;\n', '  }\n', '\n', '  function parseUint(bytes32 b) internal pure returns (uint) {\n', '    return uint(b);\n', '  }\n', '\n', '  function parseAddress(bytes32 b) internal pure returns (address) {\n', '    return address(b & 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff);\n', '  }\n', '\n', '  function init(bytes32[] args) public {\n', '    uint _startTime = uint(args[0]);\n', '    uint _endTime = uint(args[1]);\n', '    uint _rate = uint(args[2]);\n', '    uint _cap = uint(args[3]);\n', '    uint _goal = uint(args[4]);\n', '    uint _crowdsaleRatio = uint(args[5]);\n', '    address _vault = address(args[6]);\n', '    address _locker = address(args[7]);\n', '    address _nextTokenOwner = address(args[8]);\n', '\n', '    require(_endTime > _startTime);\n', '    require(_rate > 0);\n', '    require(_cap > 0);\n', '    require(_goal > 0);\n', '    require(_cap > _goal);\n', '    require(_crowdsaleRatio > 0);\n', '    require(_vault != address(0));\n', '    require(_locker != address(0));\n', '    require(_nextTokenOwner != address(0));\n', '    \n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    cap = _cap;\n', '    goal = _goal;\n', '    crowdsaleRatio = _crowdsaleRatio;\n', '    vault = MultiHolderVault(_vault);\n', '    locker = Locker(_locker);\n', '    nextTokenOwner = _nextTokenOwner;\n', '  }\n', '}']
