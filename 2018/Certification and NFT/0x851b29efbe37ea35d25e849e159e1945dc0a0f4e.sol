['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title WhiteListRegistry\n', ' * @dev A whitelist registry contract that holds the list of addreses that can participate in the crowdsale.\n', ' * Owner can add and remove addresses to whitelist.\n', ' */\n', 'contract WhiteListRegistry is Ownable {\n', '\n', '    mapping (address => WhiteListInfo) public whitelist;\n', '\n', '    struct WhiteListInfo {\n', '        bool whiteListed;\n', '        uint minCap;\n', '    }\n', '\n', '    event AddedToWhiteList(address contributor, uint minCap);\n', '\n', '    event RemovedFromWhiteList(address _contributor);\n', '\n', '    function addToWhiteList(address _contributor, uint _minCap) public onlyOwner {\n', '        require(_contributor != address(0));\n', '        whitelist[_contributor] = WhiteListInfo(true, _minCap);\n', '        emit AddedToWhiteList(_contributor, _minCap);\n', '    }\n', '\n', '    function removeFromWhiteList(address _contributor) public onlyOwner {\n', '        require(_contributor != address(0));\n', '        delete whitelist[_contributor];\n', '        emit RemovedFromWhiteList(_contributor);\n', '    }\n', '\n', '    function isWhiteListed(address _contributor) public view returns(bool) {\n', '        return whitelist[_contributor].whiteListed;\n', '    }\n', '\n', '    function isAmountAllowed(address _contributor, uint _amount) public view returns(bool) {\n', '        return whitelist[_contributor].minCap <= _amount && isWhiteListed(_contributor);\n', '    }\n', '}']