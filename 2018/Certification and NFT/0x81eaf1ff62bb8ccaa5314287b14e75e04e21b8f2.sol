['pragma solidity ^ 0.4.19;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\n', 'contract ERC721 {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '    // Required methods for ERC-721 Compatibility.\n', '    function approve(address _to, uint256 _tokenId) external;\n', '\n', '    function transfer(address _to, uint256 _tokenId) external;\n', '\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n', '\n', '    function ownerOf(uint256 _tokenId) external view returns(address _owner);\n', '\n', '    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n', '    function supportsInterface(bytes4 _interfaceID) external view returns(bool);\n', '\n', '    function totalSupply() public view returns(uint256 total);\n', '\n', '    function balanceOf(address _owner) public view returns(uint256 _balance);\n', '}\n', '\n', 'contract AnimecardAccessControl {\n', '    /// @dev Event is fired when contract is forked.\n', '    event ContractFork(address newContract);\n', '\n', '    /// - CEO: The CEO can reassign other roles, change the addresses of dependent smart contracts,\n', '    /// and pause/unpause the AnimecardCore contract.\n', '    /// - CFO: The CFO can withdraw funds from its auction and sale contracts.\n', '    /// - Manager: The Animator can create regular and promo AnimeCards.\n', '    address public ceoAddress;\n', '    address public cfoAddress;\n', '    address public animatorAddress;\n', '\n', '    /// @dev Keeps track whether the contract is paused. When that is true, most actions are blocked.\n', '    bool public paused = false;\n', '\n', '    /// @dev Access-modifier for CEO-only functionality.\n', '    modifier onlyCEO() {\n', '        require(msg.sender == ceoAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Access-modifier for CFO-only functionality.\n', '    modifier onlyCFO() {\n', '        require(msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Access-modifier for Animator-only functionality.\n', '    modifier onlyAnimator() {\n', '        require(msg.sender == animatorAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Access-modifier for C-level-only functionality.\n', '    modifier onlyCLevel() {\n', '        require(\n', '            msg.sender == animatorAddress ||\n', '            msg.sender == ceoAddress ||\n', '            msg.sender == cfoAddress\n', '        );\n', '        _;\n', '    }\n', '\n', '    /// Assigns a new address to the CEO role. Only available to the current CEO.\n', '    /// @param _newCEO The address of the new CEO\n', '    function setCEO(address _newCEO) external onlyCEO {\n', '        require(_newCEO != address(0));\n', '\n', '        ceoAddress = _newCEO;\n', '    }\n', '\n', '    /// Assigns a new address to act as the CFO. Only available to the current CEO.\n', '    /// @param _newCFO The address of the new CFO\n', '    function setCFO(address _newCFO) external onlyCEO {\n', '        require(_newCFO != address(0));\n', '\n', '        cfoAddress = _newCFO;\n', '    }\n', '\n', '    /// Assigns a new address to the Animator role. Only available to the current CEO.\n', '    /// @param _newAnimator The address of the new Animator\n', '    function setAnimator(address _newAnimator) external onlyCEO {\n', '        require(_newAnimator != address(0));\n', '\n', '        animatorAddress = _newAnimator;\n', '    }\n', '\n', '    /*** Pausable functionality adapted from OpenZeppelin ***/\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any "C-level" role to pause the contract. Used only when\n', '    ///  a bug or exploit is detected and we need to limit damage.\n', '    function pause() external onlyCLevel whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\n', '    ///  one reason we may pause the contract is when CFO or COO accounts are\n', '    ///  compromised.\n', '    /// @notice This is public rather than external so it can be called by\n', '    ///  derived contracts.\n', '    function unpause() public onlyCEO whenPaused {\n', '        // can&#39;t unpause if contract was upgraded\n', '        paused = false;\n', '    }\n', '\n', '    /*** Destructible functionality adapted from OpenZeppelin ***/\n', '    /**\n', '     * @dev Transfers the current balance to the owner and terminates the contract.\n', '     */\n', '    function destroy() onlyCEO public {\n', '        selfdestruct(ceoAddress);\n', '    }\n', '\n', '    function destroyAndSend(address _recipient) onlyCEO public {\n', '        selfdestruct(_recipient);\n', '    }\n', '}\n', '\n', 'contract AnimecardBase is AnimecardAccessControl {\n', '    using SafeMath\n', '    for uint256;\n', '\n', '    /*** DATA TYPES ***/\n', '\n', '    /// The main anime card struct\n', '    struct Animecard {\n', '        /// Name of the character\n', '        string characterName;\n', '        /// Name of designer & studio that created the character\n', '        string studioName;\n', '\n', '        /// AWS S3-CDN URL for character image\n', '        string characterImageUrl;\n', '        /// IPFS hash of character details\n', '        string characterImageHash;\n', '        /// The timestamp from the block when this anime card was created\n', '        uint64 creationTime;\n', '    }\n', '\n', '\n', '    /*** EVENTS ***/\n', '    /// The Birth event is fired whenever a new anime card comes into existence.\n', '    event Birth(address owner, uint256 tokenId, string cardName, string studio);\n', '    /// Transfer event as defined in current draft of ERC721. Fired every time animecard\n', '    /// ownership is assigned, including births.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '    /// The TokenSold event is fired whenever a token is sold.\n', '    event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 price, address prevOwner, address owner, string cardName);\n', '\n', '    /*** STORAGE ***/\n', '    /// An array containing all AnimeCards in existence. The id of each animecard\n', '    /// is an index in this array.\n', '    Animecard[] animecards;\n', '\n', '    /// @dev A mapping from anime card ids to the address that owns them.\n', '    mapping(uint256 => address) public animecardToOwner;\n', '\n', '    /// @dev A mapping from owner address to count of anime cards that address owns.\n', '    /// Used internally inside balanceOf() to resolve ownership count.\n', '    mapping(address => uint256) public ownerAnimecardCount;\n', '\n', '    /// @dev A mapping from anime card ids to an address that has been approved to call\n', '    ///  transferFrom(). Each anime card can only have 1 approved address for transfer\n', '    ///  at any time. A 0 value means no approval is outstanding.\n', '    mapping(uint256 => address) public animecardToApproved;\n', '\n', '    // @dev A mapping from anime card ids to their price.\n', '    mapping(uint256 => uint256) public animecardToPrice;\n', '\n', '    // @dev Previous sale price of anime card\n', '    mapping(uint256 => uint256) public animecardPrevPrice;\n', '\n', '    /// @dev Assigns ownership of a specific anime card to an address.\n', '    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n', '        // Transfer ownership and update owner anime card counts.\n', '        // ownerAnimecardCount[_to] = ownerAnimecardCount[_to].add(1);\n', '        ownerAnimecardCount[_to]++;\n', '        animecardToOwner[_tokenId] = _to;\n', '        // When creating new tokens _from is 0x0, but we can&#39;t account that address.\n', '        if (_from != address(0)) {\n', '            // ownerAnimecardCount[_from] = ownerAnimecardCount[_from].sub(1);\n', '            ownerAnimecardCount[_from]--;\n', '            // clear any previously approved ownership exchange\n', '            delete animecardToApproved[_tokenId];\n', '        }\n', '        // Fire the transfer event.\n', '        Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /// @dev An internal method that creates a new anime card and stores it.\n', '    /// @param _characterName The name of the character\n', '    /// @param _studioName The studio that created this character\n', '    /// @param _characterImageUrl AWS S3-CDN URL for character image\n', '    /// @param _characterImageHash IPFS hash for character image\n', '    /// @param _price of animecard character\n', '    /// @param _owner The initial owner of this anime card\n', '    function _createAnimecard(\n', '        string _characterName,\n', '        string _studioName,\n', '        string _characterImageUrl,\n', '        string _characterImageHash,\n', '        uint256 _price,\n', '        address _owner\n', '    )\n', '    internal\n', '    returns(uint) {\n', '\n', '        Animecard memory _animecard = Animecard({\n', '            characterName: _characterName,\n', '            studioName: _studioName,\n', '            characterImageUrl: _characterImageUrl,\n', '            characterImageHash: _characterImageHash,\n', '            creationTime: uint64(now)\n', '        });\n', '        uint256 newAnimecardId = animecards.push(_animecard);\n', '        newAnimecardId = newAnimecardId.sub(1);\n', '\n', '        // Fire the birth event.\n', '        Birth(\n', '            _owner,\n', '            newAnimecardId,\n', '            _animecard.characterName,\n', '            _animecard.studioName\n', '        );\n', '\n', '        // Set the price for the animecard.\n', '        animecardToPrice[newAnimecardId] = _price;\n', '\n', '        // This will assign ownership, and also fire the Transfer event as per ERC-721 draft.\n', '        _transfer(0, _owner, newAnimecardId);\n', '\n', '        return newAnimecardId;\n', '\n', '    }\n', '}\n', '\n', 'contract AnimecardPricing is AnimecardBase {\n', '\n', '    /*** CONSTANTS ***/\n', '    // Pricing steps.\n', '    uint256 private constant first_step_limit = 0.05 ether;\n', '    uint256 private constant second_step_limit = 0.5 ether;\n', '    uint256 private constant third_step_limit = 2.0 ether;\n', '    uint256 private constant fourth_step_limit = 5.0 ether;\n', '\n', '\n', '    // Cut for studio & platform for each sale transaction\n', '    uint256 public platformFee = 50; // 50%\n', '\n', '    /// @dev Set Studio Fee. Can only be called by the Animator address. \n', '    function setPlatformFee(uint256 _val) external onlyAnimator {\n', '        platformFee = _val;\n', '    }\n', '\n', '    /// @dev Computes next price of token given the current sale price.\n', '    function computeNextPrice(uint256 _salePrice)\n', '    internal\n', '    pure\n', '    returns(uint256) {\n', '        if (_salePrice < first_step_limit) {\n', '            return SafeMath.div(SafeMath.mul(_salePrice, 200), 100);\n', '        } else if (_salePrice < second_step_limit) {\n', '            return SafeMath.div(SafeMath.mul(_salePrice, 135), 100);\n', '        } else if (_salePrice < third_step_limit) {\n', '            return SafeMath.div(SafeMath.mul(_salePrice, 125), 100);\n', '        } else if (_salePrice < fourth_step_limit) {\n', '            return SafeMath.div(SafeMath.mul(_salePrice, 120), 100);\n', '        } else {\n', '            return SafeMath.div(SafeMath.mul(_salePrice, 115), 100);\n', '        }\n', '    }\n', '\n', '    /// @dev Computes the payment for the token, which is the sale price of the token\n', '    /// minus the house&#39;s cut.\n', '    function computePayment(\n', '        uint256 _tokenId,\n', '        uint256 _salePrice)\n', '    internal\n', '    view\n', '    returns(uint256) {\n', '        uint256 prevSalePrice = animecardPrevPrice[_tokenId];\n', '\n', '        uint256 profit = _salePrice - prevSalePrice;\n', '\n', '        uint256 ownerCut = SafeMath.sub(100, platformFee);\n', '        uint256 ownerProfitShare = SafeMath.div(SafeMath.mul(profit, ownerCut), 100);\n', '\n', '        return prevSalePrice + ownerProfitShare;\n', '    }\n', '}\n', '\n', 'contract AnimecardOwnership is AnimecardPricing, ERC721 {\n', '    /// Name of the collection of NFTs managed by this contract, as defined in ERC721.\n', '    string public constant NAME = "CryptoAnime";\n', '    /// Symbol referencing the entire collection of NFTs managed in this contract, as\n', '    /// defined in ERC721.\n', '    string public constant SYMBOL = "ANM";\n', '\n', '    bytes4 public constant INTERFACE_SIGNATURE_ERC165 =\n', '        bytes4(keccak256("supportsInterface(bytes4)"));\n', '\n', '    bytes4 public constant INTERFACE_SIGNATURE_ERC721 =\n', '        bytes4(keccak256("name()")) ^\n', '        bytes4(keccak256("symbol()")) ^\n', '        bytes4(keccak256("totalSupply()")) ^\n', '        bytes4(keccak256("balanceOf(address)")) ^\n', '        bytes4(keccak256("ownerOf(uint256)")) ^\n', '        bytes4(keccak256("approve(address,uint256)")) ^\n', '        bytes4(keccak256("transfer(address,uint256)")) ^\n', '        bytes4(keccak256("transferFrom(address,address,uint256)")) ^\n', '        bytes4(keccak256("tokensOfOwner(address)")) ^\n', '        bytes4(keccak256("tokenMetadata(uint256,string)"));\n', '\n', '    /*** EVENTS ***/\n', '    /// Approval event as defined in the current draft of ERC721. Fired every time\n', '    /// animecard approved owners is updated. When Transfer event is emitted, this \n', '    /// also indicates that approved address is reset to none.\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n', '    ///  Returns true for any standardized interfaces implemented by this contract. We implement\n', '    ///  ERC-165 (obviously!) and ERC-721.\n', '    function supportsInterface(bytes4 _interfaceID)\n', '    external\n', '    view\n', '    returns(bool) {\n', '        return ((_interfaceID == INTERFACE_SIGNATURE_ERC165) || (_interfaceID == INTERFACE_SIGNATURE_ERC721));\n', '    }\n', '\n', '    // @notice Optional for ERC-20 compliance.\n', '    function name() external pure returns(string) {\n', '        return NAME;\n', '    }\n', '\n', '    // @notice Optional for ERC-20 compliance.\n', '    function symbol() external pure returns(string) {\n', '        return SYMBOL;\n', '    }\n', '\n', '    /// @dev Returns the total number of Animecards currently in existence.\n', '    /// @notice Required for ERC-20 and ERC-721 compliance.\n', '    function totalSupply() public view returns(uint) {\n', '        return animecards.length;\n', '    }\n', '\n', '    /// @dev Returns the number of Animecards owned by a specific address.\n', '    /// @param _owner The owner address to check.\n', '    /// @notice Required for ERC-20 and ERC-721 compliance.\n', '    function balanceOf(address _owner)\n', '    public\n', '    view\n', '    returns(uint256 count) {\n', '        return ownerAnimecardCount[_owner];\n', '    }\n', '\n', '    /// @dev Returns the address currently assigned ownership of a given Animecard.\n', '    /// @notice Required for ERC-721 compliance.\n', '    function ownerOf(uint256 _tokenId)\n', '    external\n', '    view\n', '    returns(address _owner) {\n', '        _owner = animecardToOwner[_tokenId];\n', '        require(_owner != address(0));\n', '    }\n', '\n', '    /// @dev Grant another address the right to transfer a specific Anime card via\n', '    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\n', '    /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '    ///  clear all approvals.\n', '    /// @param _tokenId The ID of the Animecard that can be transferred if this call succeeds.\n', '    /// @notice Required for ERC-20 and ERC-721 compliance.\n', '    function approve(address _to, uint256 _tokenId)\n', '    external\n', '    whenNotPaused {\n', '        // Only an owner can grant transfer approval.\n', '        require(_owns(msg.sender, _tokenId));\n', '\n', '        // Register the approval (replacing any previous approval).\n', '        _approve(_tokenId, _to);\n', '\n', '        // Fire approval event upon successful approval.\n', '        Approval(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    /// @dev Transfers a Animecard to another address. If transferring to a smart\n', '    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 or else your\n', '    /// Animecard may be lost forever.\n', '    /// @param _to The address of the recipient, can be a user or contract.\n', '    /// @param _tokenId The ID of the Animecard to transfer.\n', '    /// @notice Required for ERC-20 and ERC-721 compliance.\n', '    function transfer(address _to, uint256 _tokenId)\n', '    external\n', '    whenNotPaused {\n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_to != address(0));\n', '        // Disallow transfers to this contract to prevent accidental misuse.\n', '        // The contract should never own any animecard (except very briefly\n', '        // after a Anime card is created).\n', '        require(_to != address(this));\n', '\n', '        // You can only transfer your own Animecard.\n', '        require(_owns(msg.sender, _tokenId));\n', '        // TODO - Disallow transfer to self\n', '\n', '        // Reassign ownership, clear pending approvals, fire Transfer event.\n', '        _transfer(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    /// @dev Transfer a Animecard owned by another address, for which the calling address\n', '    ///  has previously been granted transfer approval by the owner.\n', '    /// @param _from The address that owns the Animecard to be transfered.\n', '    /// @param _to The address that should take ownership of the Animecard. Can be any\n', '    /// address, including the caller.\n', '    /// @param _tokenId The ID of the Animecard to be transferred.\n', '    /// @notice Required for ERC-20 and ERC-721 compliance.\n', '    function transferFrom(address _from, address _to, uint256 _tokenId)\n', '    external\n', '    whenNotPaused {\n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_to != address(0));\n', '        // Disallow transfers to this contract to prevent accidental misuse.\n', '        // The contract should never own any animecard (except very briefly\n', '        // after an animecard is created).\n', '        require(_to != address(this));\n', '\n', '        // Check for approval and valid ownership\n', '        require(_approvedFor(msg.sender, _tokenId));\n', '        require(_owns(_from, _tokenId));\n', '\n', '        // Reassign ownership (also clears pending approvals and fires Transfer event).\n', '        _transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /// @dev Returns a list of all Animecard IDs assigned to an address.\n', '    /// @param _owner The owner whose Animecards we are interested in.\n', '    ///  This method MUST NEVER be called by smart contract code. First, it is fairly\n', '    ///  expensive (it walks the entire Animecard array looking for Animecard belonging\n', '    /// to owner), but it also returns a dynamic array, which is only supported for web3\n', '    /// calls, and not contract-to-contract calls. Thus, this method is external rather\n', '    /// than public.\n', '    function tokensOfOwner(address _owner)\n', '    external\n', '    view\n', '    returns(uint256[] ownerTokens) {\n', '        uint256 tokenCount = balanceOf(_owner);\n', '\n', '        if (tokenCount == 0) {\n', '            // Returns an empty array\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](tokenCount);\n', '            uint256 totalAnimecards = totalSupply();\n', '            uint256 resultIndex = 0;\n', '\n', '            uint256 animecardId;\n', '            for (animecardId = 0; animecardId <= totalAnimecards; animecardId++) {\n', '                if (animecardToOwner[animecardId] == _owner) {\n', '                    result[resultIndex] = animecardId;\n', '                    resultIndex++;\n', '                }\n', '            }\n', '\n', '            return result;\n', '        }\n', '    }\n', '\n', '    /// @dev Checks if a given address is the current owner of a particular Animecard.\n', '    /// @param _claimant the address we are validating against.\n', '    /// @param _tokenId Animecard id, only valid when > 0\n', '    function _owns(address _claimant, uint256 _tokenId)\n', '    internal\n', '    view\n', '    returns(bool) {\n', '        return animecardToOwner[_tokenId] == _claimant;\n', '    }\n', '\n', '    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\n', '    /// approval. Setting _approved to address(0) clears all transfer approval.\n', '    /// NOTE: _approve() does NOT send the Approval event. This is intentional because\n', '    /// _approve() and transferFrom() are used together for putting Animecards on sale and,\n', '    /// there is no value in spamming the log with Approval events in that case.\n', '    function _approve(uint256 _tokenId, address _approved) internal {\n', '        animecardToApproved[_tokenId] = _approved;\n', '    }\n', '\n', '    /// @dev Checks if a given address currently has transferApproval for a particular \n', '    /// Animecard.\n', '    /// @param _claimant the address we are confirming Animecard is approved for.\n', '    /// @param _tokenId Animecard id, only valid when > 0\n', '    function _approvedFor(address _claimant, uint256 _tokenId)\n', '    internal\n', '    view\n', '    returns(bool) {\n', '        return animecardToApproved[_tokenId] == _claimant;\n', '    }\n', '\n', '    /// Safety check on _to address to prevent against an unexpected 0x0 default.\n', '    function _addressNotNull(address _to) internal pure returns(bool) {\n', '        return _to != address(0);\n', '    }\n', '\n', '}\n', '\n', 'contract AnimecardSale is AnimecardOwnership {\n', '\n', '    // Allows someone to send ether and obtain the token\n', '    function purchase(uint256 _tokenId)\n', '    public\n', '    payable\n', '    whenNotPaused {\n', '        address newOwner = msg.sender;\n', '        address oldOwner = animecardToOwner[_tokenId];\n', '        uint256 salePrice = animecardToPrice[_tokenId];\n', '\n', '        // Require that the owner of the token is not sending to self.\n', '        require(oldOwner != newOwner);\n', '\n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_addressNotNull(newOwner));\n', '\n', '        // Check that sent amount is greater than or equal to the sale price\n', '        require(msg.value >= salePrice);\n', '\n', '        uint256 payment = uint256(computePayment(_tokenId, salePrice));\n', '        uint256 purchaseExcess = SafeMath.sub(msg.value, salePrice);\n', '\n', '        // Set next listing price.\n', '        animecardPrevPrice[_tokenId] = animecardToPrice[_tokenId];\n', '        animecardToPrice[_tokenId] = computeNextPrice(salePrice);\n', '\n', '        // Transfer the Animecard to the buyer.\n', '        _transfer(oldOwner, newOwner, _tokenId);\n', '\n', '        // Pay seller of the Animecard if they are not this contract.\n', '        if (oldOwner != address(this)) {\n', '            oldOwner.transfer(payment);\n', '        }\n', '\n', '        TokenSold(_tokenId, salePrice, animecardToPrice[_tokenId], oldOwner, newOwner, animecards[_tokenId].characterName);\n', '\n', '        // Reimburse the buyer of any excess paid.\n', '        msg.sender.transfer(purchaseExcess);\n', '    }\n', '\n', '    function priceOf(uint256 _tokenId)\n', '    public\n', '    view\n', '    returns(uint256 price) {\n', '        return animecardToPrice[_tokenId];\n', '    }\n', '\n', '\n', '}\n', '\n', 'contract AnimecardMinting is AnimecardSale {\n', '    /*** CONSTANTS ***/\n', '    /// @dev Starting price of a regular Animecard.\n', '    // uint128 private constant STARTING_PRICE = 0.01 ether;\n', '\n', '    /// @dev Creates a new Animecard\n', '    function createAnimecard(\n', '        string _characterName,\n', '        string _studioName,\n', '        string _characterImageUrl,\n', '        string _characterImageHash,\n', '        uint256 _price\n', '    )\n', '    public\n', '    onlyAnimator\n', '    returns(uint) {\n', '        uint256 animecardId = _createAnimecard(\n', '            _characterName, _studioName,\n', '            _characterImageUrl, _characterImageHash,\n', '            _price, address(this)\n', '        );\n', '\n', '        return animecardId;\n', '    }\n', '}\n', '\n', '// Cryptoanime: Anime collectibles on blockchain\n', 'contract AnimecardCore is AnimecardMinting {\n', '    // contract AnimecardCore is AnimecardMinting {\n', '    // Set in case the core contract is broken and a fork is required\n', '    address public newContractAddress;\n', '\n', '    function AnimecardCore() public {\n', '        // Starts paused.\n', '        paused = true;\n', '\n', '        // The creator of the contract is the initial CEO\n', '        ceoAddress = msg.sender;\n', '\n', '        // The creator of the contract is also the initial Animator\n', '        animatorAddress = msg.sender;\n', '    }\n', '\n', '    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\n', '    ///  breaking bug. This method does nothing but keep track of the new contract and\n', '    ///  emit a message indicating that the new address is set. It&#39;s up to clients of this\n', '    ///  contract to update to the new contract address in that case. (This contract will\n', '    ///  be paused indefinitely if such an upgrade takes place.)\n', '    /// @param _v2Address new address\n', '    function setNewAddress(address _v2Address)\n', '    external\n', '    onlyCEO\n', '    whenPaused {\n', '        newContractAddress = _v2Address;\n', '        ContractFork(_v2Address);\n', '    }\n', '\n', '    /// @dev Withdraw all Ether from the contract. This includes both the studio fee\n', '    /// and blockpunk fee on every animecard sold and any Ether sent directly to\n', '    /// contract address.\n', '    /// Only the CFO can withdraw the balance or specify the address to send\n', '    /// the balance to.\n', '    function withdrawBalance(address _to) external onlyCFO {\n', '        // We are using this boolean method to make sure that even if one fails it will still work\n', '        if (_to == address(0)) {\n', '            cfoAddress.transfer(this.balance);\n', '        } else {\n', '            _to.transfer(this.balance);\n', '        }\n', '    }\n', '\n', '    /// @notice Returns all the relevant information about a specific animecard.\n', '    /// @param _tokenId The tokenId of the animecard of interest.\n', '    function getAnimecard(uint256 _tokenId)\n', '    external\n', '    view\n', '    returns(\n', '        string characterName,\n', '        string studioName,\n', '        string characterImageUrl,\n', '        string characterImageHash,\n', '        uint256 sellingPrice,\n', '        address owner) {\n', '        Animecard storage animecard = animecards[_tokenId];\n', '        characterName = animecard.characterName;\n', '        studioName = animecard.studioName;\n', '        characterImageUrl = animecard.characterImageUrl;\n', '        characterImageHash = animecard.characterImageHash;\n', '        sellingPrice = animecardToPrice[_tokenId];\n', '        owner = animecardToOwner[_tokenId];\n', '    }\n', '\n', '\n', '    /// @dev Override unpause so it requires all external contract addresses\n', '    ///  to be set before contract can be unpaused. Also, we can&#39;t have\n', '    ///  newContractAddress set either, because then the contract was upgraded.\n', '    /// @notice This is public rather than external so we can call super.unpause\n', '    ///  without using an expensive call.\n', '    function unpause()\n', '    public\n', '    onlyCEO\n', '    whenPaused {\n', '        require(newContractAddress == address(0));\n', '\n', '        // Actually unpause the contract.\n', '        super.unpause();\n', '    }\n', '\n', '    /// @notice Direct donations\n', '    function () external payable {}\n', '}']
['pragma solidity ^ 0.4.19;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\n', 'contract ERC721 {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '    // Required methods for ERC-721 Compatibility.\n', '    function approve(address _to, uint256 _tokenId) external;\n', '\n', '    function transfer(address _to, uint256 _tokenId) external;\n', '\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n', '\n', '    function ownerOf(uint256 _tokenId) external view returns(address _owner);\n', '\n', '    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n', '    function supportsInterface(bytes4 _interfaceID) external view returns(bool);\n', '\n', '    function totalSupply() public view returns(uint256 total);\n', '\n', '    function balanceOf(address _owner) public view returns(uint256 _balance);\n', '}\n', '\n', 'contract AnimecardAccessControl {\n', '    /// @dev Event is fired when contract is forked.\n', '    event ContractFork(address newContract);\n', '\n', '    /// - CEO: The CEO can reassign other roles, change the addresses of dependent smart contracts,\n', '    /// and pause/unpause the AnimecardCore contract.\n', '    /// - CFO: The CFO can withdraw funds from its auction and sale contracts.\n', '    /// - Manager: The Animator can create regular and promo AnimeCards.\n', '    address public ceoAddress;\n', '    address public cfoAddress;\n', '    address public animatorAddress;\n', '\n', '    /// @dev Keeps track whether the contract is paused. When that is true, most actions are blocked.\n', '    bool public paused = false;\n', '\n', '    /// @dev Access-modifier for CEO-only functionality.\n', '    modifier onlyCEO() {\n', '        require(msg.sender == ceoAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Access-modifier for CFO-only functionality.\n', '    modifier onlyCFO() {\n', '        require(msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Access-modifier for Animator-only functionality.\n', '    modifier onlyAnimator() {\n', '        require(msg.sender == animatorAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Access-modifier for C-level-only functionality.\n', '    modifier onlyCLevel() {\n', '        require(\n', '            msg.sender == animatorAddress ||\n', '            msg.sender == ceoAddress ||\n', '            msg.sender == cfoAddress\n', '        );\n', '        _;\n', '    }\n', '\n', '    /// Assigns a new address to the CEO role. Only available to the current CEO.\n', '    /// @param _newCEO The address of the new CEO\n', '    function setCEO(address _newCEO) external onlyCEO {\n', '        require(_newCEO != address(0));\n', '\n', '        ceoAddress = _newCEO;\n', '    }\n', '\n', '    /// Assigns a new address to act as the CFO. Only available to the current CEO.\n', '    /// @param _newCFO The address of the new CFO\n', '    function setCFO(address _newCFO) external onlyCEO {\n', '        require(_newCFO != address(0));\n', '\n', '        cfoAddress = _newCFO;\n', '    }\n', '\n', '    /// Assigns a new address to the Animator role. Only available to the current CEO.\n', '    /// @param _newAnimator The address of the new Animator\n', '    function setAnimator(address _newAnimator) external onlyCEO {\n', '        require(_newAnimator != address(0));\n', '\n', '        animatorAddress = _newAnimator;\n', '    }\n', '\n', '    /*** Pausable functionality adapted from OpenZeppelin ***/\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any "C-level" role to pause the contract. Used only when\n', '    ///  a bug or exploit is detected and we need to limit damage.\n', '    function pause() external onlyCLevel whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\n', '    ///  one reason we may pause the contract is when CFO or COO accounts are\n', '    ///  compromised.\n', '    /// @notice This is public rather than external so it can be called by\n', '    ///  derived contracts.\n', '    function unpause() public onlyCEO whenPaused {\n', "        // can't unpause if contract was upgraded\n", '        paused = false;\n', '    }\n', '\n', '    /*** Destructible functionality adapted from OpenZeppelin ***/\n', '    /**\n', '     * @dev Transfers the current balance to the owner and terminates the contract.\n', '     */\n', '    function destroy() onlyCEO public {\n', '        selfdestruct(ceoAddress);\n', '    }\n', '\n', '    function destroyAndSend(address _recipient) onlyCEO public {\n', '        selfdestruct(_recipient);\n', '    }\n', '}\n', '\n', 'contract AnimecardBase is AnimecardAccessControl {\n', '    using SafeMath\n', '    for uint256;\n', '\n', '    /*** DATA TYPES ***/\n', '\n', '    /// The main anime card struct\n', '    struct Animecard {\n', '        /// Name of the character\n', '        string characterName;\n', '        /// Name of designer & studio that created the character\n', '        string studioName;\n', '\n', '        /// AWS S3-CDN URL for character image\n', '        string characterImageUrl;\n', '        /// IPFS hash of character details\n', '        string characterImageHash;\n', '        /// The timestamp from the block when this anime card was created\n', '        uint64 creationTime;\n', '    }\n', '\n', '\n', '    /*** EVENTS ***/\n', '    /// The Birth event is fired whenever a new anime card comes into existence.\n', '    event Birth(address owner, uint256 tokenId, string cardName, string studio);\n', '    /// Transfer event as defined in current draft of ERC721. Fired every time animecard\n', '    /// ownership is assigned, including births.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '    /// The TokenSold event is fired whenever a token is sold.\n', '    event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 price, address prevOwner, address owner, string cardName);\n', '\n', '    /*** STORAGE ***/\n', '    /// An array containing all AnimeCards in existence. The id of each animecard\n', '    /// is an index in this array.\n', '    Animecard[] animecards;\n', '\n', '    /// @dev A mapping from anime card ids to the address that owns them.\n', '    mapping(uint256 => address) public animecardToOwner;\n', '\n', '    /// @dev A mapping from owner address to count of anime cards that address owns.\n', '    /// Used internally inside balanceOf() to resolve ownership count.\n', '    mapping(address => uint256) public ownerAnimecardCount;\n', '\n', '    /// @dev A mapping from anime card ids to an address that has been approved to call\n', '    ///  transferFrom(). Each anime card can only have 1 approved address for transfer\n', '    ///  at any time. A 0 value means no approval is outstanding.\n', '    mapping(uint256 => address) public animecardToApproved;\n', '\n', '    // @dev A mapping from anime card ids to their price.\n', '    mapping(uint256 => uint256) public animecardToPrice;\n', '\n', '    // @dev Previous sale price of anime card\n', '    mapping(uint256 => uint256) public animecardPrevPrice;\n', '\n', '    /// @dev Assigns ownership of a specific anime card to an address.\n', '    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n', '        // Transfer ownership and update owner anime card counts.\n', '        // ownerAnimecardCount[_to] = ownerAnimecardCount[_to].add(1);\n', '        ownerAnimecardCount[_to]++;\n', '        animecardToOwner[_tokenId] = _to;\n', "        // When creating new tokens _from is 0x0, but we can't account that address.\n", '        if (_from != address(0)) {\n', '            // ownerAnimecardCount[_from] = ownerAnimecardCount[_from].sub(1);\n', '            ownerAnimecardCount[_from]--;\n', '            // clear any previously approved ownership exchange\n', '            delete animecardToApproved[_tokenId];\n', '        }\n', '        // Fire the transfer event.\n', '        Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /// @dev An internal method that creates a new anime card and stores it.\n', '    /// @param _characterName The name of the character\n', '    /// @param _studioName The studio that created this character\n', '    /// @param _characterImageUrl AWS S3-CDN URL for character image\n', '    /// @param _characterImageHash IPFS hash for character image\n', '    /// @param _price of animecard character\n', '    /// @param _owner The initial owner of this anime card\n', '    function _createAnimecard(\n', '        string _characterName,\n', '        string _studioName,\n', '        string _characterImageUrl,\n', '        string _characterImageHash,\n', '        uint256 _price,\n', '        address _owner\n', '    )\n', '    internal\n', '    returns(uint) {\n', '\n', '        Animecard memory _animecard = Animecard({\n', '            characterName: _characterName,\n', '            studioName: _studioName,\n', '            characterImageUrl: _characterImageUrl,\n', '            characterImageHash: _characterImageHash,\n', '            creationTime: uint64(now)\n', '        });\n', '        uint256 newAnimecardId = animecards.push(_animecard);\n', '        newAnimecardId = newAnimecardId.sub(1);\n', '\n', '        // Fire the birth event.\n', '        Birth(\n', '            _owner,\n', '            newAnimecardId,\n', '            _animecard.characterName,\n', '            _animecard.studioName\n', '        );\n', '\n', '        // Set the price for the animecard.\n', '        animecardToPrice[newAnimecardId] = _price;\n', '\n', '        // This will assign ownership, and also fire the Transfer event as per ERC-721 draft.\n', '        _transfer(0, _owner, newAnimecardId);\n', '\n', '        return newAnimecardId;\n', '\n', '    }\n', '}\n', '\n', 'contract AnimecardPricing is AnimecardBase {\n', '\n', '    /*** CONSTANTS ***/\n', '    // Pricing steps.\n', '    uint256 private constant first_step_limit = 0.05 ether;\n', '    uint256 private constant second_step_limit = 0.5 ether;\n', '    uint256 private constant third_step_limit = 2.0 ether;\n', '    uint256 private constant fourth_step_limit = 5.0 ether;\n', '\n', '\n', '    // Cut for studio & platform for each sale transaction\n', '    uint256 public platformFee = 50; // 50%\n', '\n', '    /// @dev Set Studio Fee. Can only be called by the Animator address. \n', '    function setPlatformFee(uint256 _val) external onlyAnimator {\n', '        platformFee = _val;\n', '    }\n', '\n', '    /// @dev Computes next price of token given the current sale price.\n', '    function computeNextPrice(uint256 _salePrice)\n', '    internal\n', '    pure\n', '    returns(uint256) {\n', '        if (_salePrice < first_step_limit) {\n', '            return SafeMath.div(SafeMath.mul(_salePrice, 200), 100);\n', '        } else if (_salePrice < second_step_limit) {\n', '            return SafeMath.div(SafeMath.mul(_salePrice, 135), 100);\n', '        } else if (_salePrice < third_step_limit) {\n', '            return SafeMath.div(SafeMath.mul(_salePrice, 125), 100);\n', '        } else if (_salePrice < fourth_step_limit) {\n', '            return SafeMath.div(SafeMath.mul(_salePrice, 120), 100);\n', '        } else {\n', '            return SafeMath.div(SafeMath.mul(_salePrice, 115), 100);\n', '        }\n', '    }\n', '\n', '    /// @dev Computes the payment for the token, which is the sale price of the token\n', "    /// minus the house's cut.\n", '    function computePayment(\n', '        uint256 _tokenId,\n', '        uint256 _salePrice)\n', '    internal\n', '    view\n', '    returns(uint256) {\n', '        uint256 prevSalePrice = animecardPrevPrice[_tokenId];\n', '\n', '        uint256 profit = _salePrice - prevSalePrice;\n', '\n', '        uint256 ownerCut = SafeMath.sub(100, platformFee);\n', '        uint256 ownerProfitShare = SafeMath.div(SafeMath.mul(profit, ownerCut), 100);\n', '\n', '        return prevSalePrice + ownerProfitShare;\n', '    }\n', '}\n', '\n', 'contract AnimecardOwnership is AnimecardPricing, ERC721 {\n', '    /// Name of the collection of NFTs managed by this contract, as defined in ERC721.\n', '    string public constant NAME = "CryptoAnime";\n', '    /// Symbol referencing the entire collection of NFTs managed in this contract, as\n', '    /// defined in ERC721.\n', '    string public constant SYMBOL = "ANM";\n', '\n', '    bytes4 public constant INTERFACE_SIGNATURE_ERC165 =\n', '        bytes4(keccak256("supportsInterface(bytes4)"));\n', '\n', '    bytes4 public constant INTERFACE_SIGNATURE_ERC721 =\n', '        bytes4(keccak256("name()")) ^\n', '        bytes4(keccak256("symbol()")) ^\n', '        bytes4(keccak256("totalSupply()")) ^\n', '        bytes4(keccak256("balanceOf(address)")) ^\n', '        bytes4(keccak256("ownerOf(uint256)")) ^\n', '        bytes4(keccak256("approve(address,uint256)")) ^\n', '        bytes4(keccak256("transfer(address,uint256)")) ^\n', '        bytes4(keccak256("transferFrom(address,address,uint256)")) ^\n', '        bytes4(keccak256("tokensOfOwner(address)")) ^\n', '        bytes4(keccak256("tokenMetadata(uint256,string)"));\n', '\n', '    /*** EVENTS ***/\n', '    /// Approval event as defined in the current draft of ERC721. Fired every time\n', '    /// animecard approved owners is updated. When Transfer event is emitted, this \n', '    /// also indicates that approved address is reset to none.\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n', '    ///  Returns true for any standardized interfaces implemented by this contract. We implement\n', '    ///  ERC-165 (obviously!) and ERC-721.\n', '    function supportsInterface(bytes4 _interfaceID)\n', '    external\n', '    view\n', '    returns(bool) {\n', '        return ((_interfaceID == INTERFACE_SIGNATURE_ERC165) || (_interfaceID == INTERFACE_SIGNATURE_ERC721));\n', '    }\n', '\n', '    // @notice Optional for ERC-20 compliance.\n', '    function name() external pure returns(string) {\n', '        return NAME;\n', '    }\n', '\n', '    // @notice Optional for ERC-20 compliance.\n', '    function symbol() external pure returns(string) {\n', '        return SYMBOL;\n', '    }\n', '\n', '    /// @dev Returns the total number of Animecards currently in existence.\n', '    /// @notice Required for ERC-20 and ERC-721 compliance.\n', '    function totalSupply() public view returns(uint) {\n', '        return animecards.length;\n', '    }\n', '\n', '    /// @dev Returns the number of Animecards owned by a specific address.\n', '    /// @param _owner The owner address to check.\n', '    /// @notice Required for ERC-20 and ERC-721 compliance.\n', '    function balanceOf(address _owner)\n', '    public\n', '    view\n', '    returns(uint256 count) {\n', '        return ownerAnimecardCount[_owner];\n', '    }\n', '\n', '    /// @dev Returns the address currently assigned ownership of a given Animecard.\n', '    /// @notice Required for ERC-721 compliance.\n', '    function ownerOf(uint256 _tokenId)\n', '    external\n', '    view\n', '    returns(address _owner) {\n', '        _owner = animecardToOwner[_tokenId];\n', '        require(_owner != address(0));\n', '    }\n', '\n', '    /// @dev Grant another address the right to transfer a specific Anime card via\n', '    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\n', '    /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '    ///  clear all approvals.\n', '    /// @param _tokenId The ID of the Animecard that can be transferred if this call succeeds.\n', '    /// @notice Required for ERC-20 and ERC-721 compliance.\n', '    function approve(address _to, uint256 _tokenId)\n', '    external\n', '    whenNotPaused {\n', '        // Only an owner can grant transfer approval.\n', '        require(_owns(msg.sender, _tokenId));\n', '\n', '        // Register the approval (replacing any previous approval).\n', '        _approve(_tokenId, _to);\n', '\n', '        // Fire approval event upon successful approval.\n', '        Approval(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    /// @dev Transfers a Animecard to another address. If transferring to a smart\n', '    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 or else your\n', '    /// Animecard may be lost forever.\n', '    /// @param _to The address of the recipient, can be a user or contract.\n', '    /// @param _tokenId The ID of the Animecard to transfer.\n', '    /// @notice Required for ERC-20 and ERC-721 compliance.\n', '    function transfer(address _to, uint256 _tokenId)\n', '    external\n', '    whenNotPaused {\n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_to != address(0));\n', '        // Disallow transfers to this contract to prevent accidental misuse.\n', '        // The contract should never own any animecard (except very briefly\n', '        // after a Anime card is created).\n', '        require(_to != address(this));\n', '\n', '        // You can only transfer your own Animecard.\n', '        require(_owns(msg.sender, _tokenId));\n', '        // TODO - Disallow transfer to self\n', '\n', '        // Reassign ownership, clear pending approvals, fire Transfer event.\n', '        _transfer(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    /// @dev Transfer a Animecard owned by another address, for which the calling address\n', '    ///  has previously been granted transfer approval by the owner.\n', '    /// @param _from The address that owns the Animecard to be transfered.\n', '    /// @param _to The address that should take ownership of the Animecard. Can be any\n', '    /// address, including the caller.\n', '    /// @param _tokenId The ID of the Animecard to be transferred.\n', '    /// @notice Required for ERC-20 and ERC-721 compliance.\n', '    function transferFrom(address _from, address _to, uint256 _tokenId)\n', '    external\n', '    whenNotPaused {\n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_to != address(0));\n', '        // Disallow transfers to this contract to prevent accidental misuse.\n', '        // The contract should never own any animecard (except very briefly\n', '        // after an animecard is created).\n', '        require(_to != address(this));\n', '\n', '        // Check for approval and valid ownership\n', '        require(_approvedFor(msg.sender, _tokenId));\n', '        require(_owns(_from, _tokenId));\n', '\n', '        // Reassign ownership (also clears pending approvals and fires Transfer event).\n', '        _transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /// @dev Returns a list of all Animecard IDs assigned to an address.\n', '    /// @param _owner The owner whose Animecards we are interested in.\n', '    ///  This method MUST NEVER be called by smart contract code. First, it is fairly\n', '    ///  expensive (it walks the entire Animecard array looking for Animecard belonging\n', '    /// to owner), but it also returns a dynamic array, which is only supported for web3\n', '    /// calls, and not contract-to-contract calls. Thus, this method is external rather\n', '    /// than public.\n', '    function tokensOfOwner(address _owner)\n', '    external\n', '    view\n', '    returns(uint256[] ownerTokens) {\n', '        uint256 tokenCount = balanceOf(_owner);\n', '\n', '        if (tokenCount == 0) {\n', '            // Returns an empty array\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](tokenCount);\n', '            uint256 totalAnimecards = totalSupply();\n', '            uint256 resultIndex = 0;\n', '\n', '            uint256 animecardId;\n', '            for (animecardId = 0; animecardId <= totalAnimecards; animecardId++) {\n', '                if (animecardToOwner[animecardId] == _owner) {\n', '                    result[resultIndex] = animecardId;\n', '                    resultIndex++;\n', '                }\n', '            }\n', '\n', '            return result;\n', '        }\n', '    }\n', '\n', '    /// @dev Checks if a given address is the current owner of a particular Animecard.\n', '    /// @param _claimant the address we are validating against.\n', '    /// @param _tokenId Animecard id, only valid when > 0\n', '    function _owns(address _claimant, uint256 _tokenId)\n', '    internal\n', '    view\n', '    returns(bool) {\n', '        return animecardToOwner[_tokenId] == _claimant;\n', '    }\n', '\n', '    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\n', '    /// approval. Setting _approved to address(0) clears all transfer approval.\n', '    /// NOTE: _approve() does NOT send the Approval event. This is intentional because\n', '    /// _approve() and transferFrom() are used together for putting Animecards on sale and,\n', '    /// there is no value in spamming the log with Approval events in that case.\n', '    function _approve(uint256 _tokenId, address _approved) internal {\n', '        animecardToApproved[_tokenId] = _approved;\n', '    }\n', '\n', '    /// @dev Checks if a given address currently has transferApproval for a particular \n', '    /// Animecard.\n', '    /// @param _claimant the address we are confirming Animecard is approved for.\n', '    /// @param _tokenId Animecard id, only valid when > 0\n', '    function _approvedFor(address _claimant, uint256 _tokenId)\n', '    internal\n', '    view\n', '    returns(bool) {\n', '        return animecardToApproved[_tokenId] == _claimant;\n', '    }\n', '\n', '    /// Safety check on _to address to prevent against an unexpected 0x0 default.\n', '    function _addressNotNull(address _to) internal pure returns(bool) {\n', '        return _to != address(0);\n', '    }\n', '\n', '}\n', '\n', 'contract AnimecardSale is AnimecardOwnership {\n', '\n', '    // Allows someone to send ether and obtain the token\n', '    function purchase(uint256 _tokenId)\n', '    public\n', '    payable\n', '    whenNotPaused {\n', '        address newOwner = msg.sender;\n', '        address oldOwner = animecardToOwner[_tokenId];\n', '        uint256 salePrice = animecardToPrice[_tokenId];\n', '\n', '        // Require that the owner of the token is not sending to self.\n', '        require(oldOwner != newOwner);\n', '\n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_addressNotNull(newOwner));\n', '\n', '        // Check that sent amount is greater than or equal to the sale price\n', '        require(msg.value >= salePrice);\n', '\n', '        uint256 payment = uint256(computePayment(_tokenId, salePrice));\n', '        uint256 purchaseExcess = SafeMath.sub(msg.value, salePrice);\n', '\n', '        // Set next listing price.\n', '        animecardPrevPrice[_tokenId] = animecardToPrice[_tokenId];\n', '        animecardToPrice[_tokenId] = computeNextPrice(salePrice);\n', '\n', '        // Transfer the Animecard to the buyer.\n', '        _transfer(oldOwner, newOwner, _tokenId);\n', '\n', '        // Pay seller of the Animecard if they are not this contract.\n', '        if (oldOwner != address(this)) {\n', '            oldOwner.transfer(payment);\n', '        }\n', '\n', '        TokenSold(_tokenId, salePrice, animecardToPrice[_tokenId], oldOwner, newOwner, animecards[_tokenId].characterName);\n', '\n', '        // Reimburse the buyer of any excess paid.\n', '        msg.sender.transfer(purchaseExcess);\n', '    }\n', '\n', '    function priceOf(uint256 _tokenId)\n', '    public\n', '    view\n', '    returns(uint256 price) {\n', '        return animecardToPrice[_tokenId];\n', '    }\n', '\n', '\n', '}\n', '\n', 'contract AnimecardMinting is AnimecardSale {\n', '    /*** CONSTANTS ***/\n', '    /// @dev Starting price of a regular Animecard.\n', '    // uint128 private constant STARTING_PRICE = 0.01 ether;\n', '\n', '    /// @dev Creates a new Animecard\n', '    function createAnimecard(\n', '        string _characterName,\n', '        string _studioName,\n', '        string _characterImageUrl,\n', '        string _characterImageHash,\n', '        uint256 _price\n', '    )\n', '    public\n', '    onlyAnimator\n', '    returns(uint) {\n', '        uint256 animecardId = _createAnimecard(\n', '            _characterName, _studioName,\n', '            _characterImageUrl, _characterImageHash,\n', '            _price, address(this)\n', '        );\n', '\n', '        return animecardId;\n', '    }\n', '}\n', '\n', '// Cryptoanime: Anime collectibles on blockchain\n', 'contract AnimecardCore is AnimecardMinting {\n', '    // contract AnimecardCore is AnimecardMinting {\n', '    // Set in case the core contract is broken and a fork is required\n', '    address public newContractAddress;\n', '\n', '    function AnimecardCore() public {\n', '        // Starts paused.\n', '        paused = true;\n', '\n', '        // The creator of the contract is the initial CEO\n', '        ceoAddress = msg.sender;\n', '\n', '        // The creator of the contract is also the initial Animator\n', '        animatorAddress = msg.sender;\n', '    }\n', '\n', '    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\n', '    ///  breaking bug. This method does nothing but keep track of the new contract and\n', "    ///  emit a message indicating that the new address is set. It's up to clients of this\n", '    ///  contract to update to the new contract address in that case. (This contract will\n', '    ///  be paused indefinitely if such an upgrade takes place.)\n', '    /// @param _v2Address new address\n', '    function setNewAddress(address _v2Address)\n', '    external\n', '    onlyCEO\n', '    whenPaused {\n', '        newContractAddress = _v2Address;\n', '        ContractFork(_v2Address);\n', '    }\n', '\n', '    /// @dev Withdraw all Ether from the contract. This includes both the studio fee\n', '    /// and blockpunk fee on every animecard sold and any Ether sent directly to\n', '    /// contract address.\n', '    /// Only the CFO can withdraw the balance or specify the address to send\n', '    /// the balance to.\n', '    function withdrawBalance(address _to) external onlyCFO {\n', '        // We are using this boolean method to make sure that even if one fails it will still work\n', '        if (_to == address(0)) {\n', '            cfoAddress.transfer(this.balance);\n', '        } else {\n', '            _to.transfer(this.balance);\n', '        }\n', '    }\n', '\n', '    /// @notice Returns all the relevant information about a specific animecard.\n', '    /// @param _tokenId The tokenId of the animecard of interest.\n', '    function getAnimecard(uint256 _tokenId)\n', '    external\n', '    view\n', '    returns(\n', '        string characterName,\n', '        string studioName,\n', '        string characterImageUrl,\n', '        string characterImageHash,\n', '        uint256 sellingPrice,\n', '        address owner) {\n', '        Animecard storage animecard = animecards[_tokenId];\n', '        characterName = animecard.characterName;\n', '        studioName = animecard.studioName;\n', '        characterImageUrl = animecard.characterImageUrl;\n', '        characterImageHash = animecard.characterImageHash;\n', '        sellingPrice = animecardToPrice[_tokenId];\n', '        owner = animecardToOwner[_tokenId];\n', '    }\n', '\n', '\n', '    /// @dev Override unpause so it requires all external contract addresses\n', "    ///  to be set before contract can be unpaused. Also, we can't have\n", '    ///  newContractAddress set either, because then the contract was upgraded.\n', '    /// @notice This is public rather than external so we can call super.unpause\n', '    ///  without using an expensive call.\n', '    function unpause()\n', '    public\n', '    onlyCEO\n', '    whenPaused {\n', '        require(newContractAddress == address(0));\n', '\n', '        // Actually unpause the contract.\n', '        super.unpause();\n', '    }\n', '\n', '    /// @notice Direct donations\n', '    function () external payable {}\n', '}']
