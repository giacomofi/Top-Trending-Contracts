['pragma solidity ^0.4.24; \n', '\n', '// similar as shrimpfarmer, with two changes:\n', '// A. half of your plumbers leave when you sell pooh\n', '// B. the "free" 300 plumber cost 0.001 eth (in line with the mining fee)\n', '\n', '// bots should have a harder time\n', '\n', 'contract PlumberCollector{\n', '    uint256 public POOH_TO_CALL_1PLUMBER=86400;//for final version should be seconds in a day\n', '    uint256 public STARTING_POOH=300;\n', '    uint256 PSN=10000;\n', '    uint256 PSNH=5000;\n', '    bool public initialized=false;\n', '    address public ceoAddress;\n', '    mapping (address => uint256) public hatcheryPlumber;\n', '    mapping (address => uint256) public claimedPoohs;\n', '    mapping (address => uint256) public lastHatch;\n', '    mapping (address => address) public referrals;\n', '    uint256 public marketPoohs;\n', '   \n', '\n', '    constructor() public\n', '    {\n', '        ceoAddress=msg.sender;\n', '    }\n', '\n', '    function hatchPoohs(address ref) public\n', '    {\n', '        require(initialized);\n', '        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender)\n', '        {\n', '            referrals[msg.sender]=ref;\n', '        }\n', '        uint256 poohsUsed=getMyPoohs();\n', '        uint256 newPlumber=SafeMath.div(poohsUsed,POOH_TO_CALL_1PLUMBER);\n', '        hatcheryPlumber[msg.sender]=SafeMath.add(hatcheryPlumber[msg.sender],newPlumber);\n', '        claimedPoohs[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '        \n', '        //send referral poohs\n', '        claimedPoohs[referrals[msg.sender]]=SafeMath.add(claimedPoohs[referrals[msg.sender]],SafeMath.div(poohsUsed,5));\n', '        \n', '        //boost market to nerf shrimp hoarding\n', '        marketPoohs=SafeMath.add(marketPoohs,SafeMath.div(poohsUsed,10));\n', '    }\n', '\n', '    function sellPoohs() public{\n', '        require(initialized);\n', '        uint256 hasPoohs=getMyPoohs();\n', '        uint256 poohValue=calculatePoohSell(hasPoohs);\n', '        uint256 fee=devFee(poohValue);\n', '        // kill one half of the owner&#39;s snails on egg sale\n', '        hatcheryPlumber[msg.sender] = SafeMath.div(hatcheryPlumber[msg.sender],2);\n', '        claimedPoohs[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '        marketPoohs=SafeMath.add(marketPoohs,hasPoohs);\n', '        ceoAddress.transfer(fee);\n', '        msg.sender.transfer(SafeMath.sub(poohValue,fee));\n', '    }\n', '\n', '    function buyPoohs() public payable\n', '    {\n', '        require(initialized);\n', '        uint256 poohsBought=calculatePoohBuy(msg.value,SafeMath.sub(address(this).balance,msg.value));\n', '        poohsBought=SafeMath.sub(poohsBought,devFee(poohsBought));\n', '        ceoAddress.transfer(devFee(msg.value));\n', '        claimedPoohs[msg.sender]=SafeMath.add(claimedPoohs[msg.sender],poohsBought);\n', '    }\n', '\n', '    //magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256)\n', '    {\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '\n', '    function calculatePoohSell(uint256 poohs) public view returns(uint256)\n', '    {\n', '        return calculateTrade(poohs,marketPoohs,address(this).balance);\n', '    }\n', '\n', '    function calculatePoohBuy(uint256 eth,uint256 contractBalance) public view returns(uint256)\n', '    {\n', '        return calculateTrade(eth,contractBalance,marketPoohs);\n', '    }\n', '\n', '    function calculatePoohBuySimple(uint256 eth) public view returns(uint256)\n', '    {\n', '        return calculatePoohBuy(eth, address(this).balance);\n', '    }\n', '\n', '    function devFee(uint256 amount) public pure returns(uint256)\n', '    {\n', '        // 5% devFee\n', '        return SafeMath.div(amount,20);\n', '    }\n', '\n', '    function seedMarket(uint256 poohs) public payable\n', '    {\n', '        require(marketPoohs==0);\n', '        initialized=true;\n', '        marketPoohs=poohs;\n', '    }\n', '\n', '    function getFreePlumber() public payable\n', '    {\n', '        require(initialized);\n', '        require(msg.value==0.001 ether); //similar to mining fee, prevents bots\n', '        ceoAddress.transfer(msg.value); //ceo gets this entrance fee\n', '        require(hatcheryPlumber[msg.sender]==0);\n', '        lastHatch[msg.sender]=now;\n', '        hatcheryPlumber[msg.sender]=STARTING_POOH;\n', '    }\n', '\n', '    function getBalance() public view returns(uint256)\n', '    {\n', '        return address(this).balance;\n', '    }\n', '\n', '    function getMyPlumbers() public view returns(uint256)\n', '    {\n', '        return hatcheryPlumber[msg.sender];\n', '    }\n', '\n', '    \n', '\n', '    function getMyPoohs() public view returns(uint256)\n', '    {\n', '        return SafeMath.add(claimedPoohs[msg.sender],getPoohsSinceLastHatch(msg.sender));\n', '    }\n', '\n', '    function getPoohsSinceLastHatch(address adr) public view returns(uint256)\n', '    {\n', '        uint256 secondsPassed=min(POOH_TO_CALL_1PLUMBER,SafeMath.sub(now,lastHatch[adr]));\n', '        return SafeMath.mul(secondsPassed,hatcheryPlumber[adr]);\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) \n', '    {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) \n', '  {\n', '    if (a == 0) \n', '    {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.24; \n', '\n', '// similar as shrimpfarmer, with two changes:\n', '// A. half of your plumbers leave when you sell pooh\n', '// B. the "free" 300 plumber cost 0.001 eth (in line with the mining fee)\n', '\n', '// bots should have a harder time\n', '\n', 'contract PlumberCollector{\n', '    uint256 public POOH_TO_CALL_1PLUMBER=86400;//for final version should be seconds in a day\n', '    uint256 public STARTING_POOH=300;\n', '    uint256 PSN=10000;\n', '    uint256 PSNH=5000;\n', '    bool public initialized=false;\n', '    address public ceoAddress;\n', '    mapping (address => uint256) public hatcheryPlumber;\n', '    mapping (address => uint256) public claimedPoohs;\n', '    mapping (address => uint256) public lastHatch;\n', '    mapping (address => address) public referrals;\n', '    uint256 public marketPoohs;\n', '   \n', '\n', '    constructor() public\n', '    {\n', '        ceoAddress=msg.sender;\n', '    }\n', '\n', '    function hatchPoohs(address ref) public\n', '    {\n', '        require(initialized);\n', '        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender)\n', '        {\n', '            referrals[msg.sender]=ref;\n', '        }\n', '        uint256 poohsUsed=getMyPoohs();\n', '        uint256 newPlumber=SafeMath.div(poohsUsed,POOH_TO_CALL_1PLUMBER);\n', '        hatcheryPlumber[msg.sender]=SafeMath.add(hatcheryPlumber[msg.sender],newPlumber);\n', '        claimedPoohs[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '        \n', '        //send referral poohs\n', '        claimedPoohs[referrals[msg.sender]]=SafeMath.add(claimedPoohs[referrals[msg.sender]],SafeMath.div(poohsUsed,5));\n', '        \n', '        //boost market to nerf shrimp hoarding\n', '        marketPoohs=SafeMath.add(marketPoohs,SafeMath.div(poohsUsed,10));\n', '    }\n', '\n', '    function sellPoohs() public{\n', '        require(initialized);\n', '        uint256 hasPoohs=getMyPoohs();\n', '        uint256 poohValue=calculatePoohSell(hasPoohs);\n', '        uint256 fee=devFee(poohValue);\n', "        // kill one half of the owner's snails on egg sale\n", '        hatcheryPlumber[msg.sender] = SafeMath.div(hatcheryPlumber[msg.sender],2);\n', '        claimedPoohs[msg.sender]=0;\n', '        lastHatch[msg.sender]=now;\n', '        marketPoohs=SafeMath.add(marketPoohs,hasPoohs);\n', '        ceoAddress.transfer(fee);\n', '        msg.sender.transfer(SafeMath.sub(poohValue,fee));\n', '    }\n', '\n', '    function buyPoohs() public payable\n', '    {\n', '        require(initialized);\n', '        uint256 poohsBought=calculatePoohBuy(msg.value,SafeMath.sub(address(this).balance,msg.value));\n', '        poohsBought=SafeMath.sub(poohsBought,devFee(poohsBought));\n', '        ceoAddress.transfer(devFee(msg.value));\n', '        claimedPoohs[msg.sender]=SafeMath.add(claimedPoohs[msg.sender],poohsBought);\n', '    }\n', '\n', '    //magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256)\n', '    {\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '\n', '    function calculatePoohSell(uint256 poohs) public view returns(uint256)\n', '    {\n', '        return calculateTrade(poohs,marketPoohs,address(this).balance);\n', '    }\n', '\n', '    function calculatePoohBuy(uint256 eth,uint256 contractBalance) public view returns(uint256)\n', '    {\n', '        return calculateTrade(eth,contractBalance,marketPoohs);\n', '    }\n', '\n', '    function calculatePoohBuySimple(uint256 eth) public view returns(uint256)\n', '    {\n', '        return calculatePoohBuy(eth, address(this).balance);\n', '    }\n', '\n', '    function devFee(uint256 amount) public pure returns(uint256)\n', '    {\n', '        // 5% devFee\n', '        return SafeMath.div(amount,20);\n', '    }\n', '\n', '    function seedMarket(uint256 poohs) public payable\n', '    {\n', '        require(marketPoohs==0);\n', '        initialized=true;\n', '        marketPoohs=poohs;\n', '    }\n', '\n', '    function getFreePlumber() public payable\n', '    {\n', '        require(initialized);\n', '        require(msg.value==0.001 ether); //similar to mining fee, prevents bots\n', '        ceoAddress.transfer(msg.value); //ceo gets this entrance fee\n', '        require(hatcheryPlumber[msg.sender]==0);\n', '        lastHatch[msg.sender]=now;\n', '        hatcheryPlumber[msg.sender]=STARTING_POOH;\n', '    }\n', '\n', '    function getBalance() public view returns(uint256)\n', '    {\n', '        return address(this).balance;\n', '    }\n', '\n', '    function getMyPlumbers() public view returns(uint256)\n', '    {\n', '        return hatcheryPlumber[msg.sender];\n', '    }\n', '\n', '    \n', '\n', '    function getMyPoohs() public view returns(uint256)\n', '    {\n', '        return SafeMath.add(claimedPoohs[msg.sender],getPoohsSinceLastHatch(msg.sender));\n', '    }\n', '\n', '    function getPoohsSinceLastHatch(address adr) public view returns(uint256)\n', '    {\n', '        uint256 secondsPassed=min(POOH_TO_CALL_1PLUMBER,SafeMath.sub(now,lastHatch[adr]));\n', '        return SafeMath.mul(secondsPassed,hatcheryPlumber[adr]);\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) \n', '    {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) \n', '  {\n', '    if (a == 0) \n', '    {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
