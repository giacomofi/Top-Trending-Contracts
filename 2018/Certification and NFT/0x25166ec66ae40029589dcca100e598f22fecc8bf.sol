['// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract IGummyCoin{\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '}\n', '\n', 'contract CrowdsaleGummy is Owned {\n', '  using SafeMath for uint256;\n', '  \n', '  \n', '  function CrowdsaleGummy(address _wallet, address _tokenOwner){\n', '      wallet = _wallet;\n', '      owner = _tokenOwner;\n', '  }\n', '  // Interface takes an address of the existing contract as parameter\n', '  IGummyCoin token = IGummyCoin(0xb4db72af3421ebb00d9b905c00e1ed727fc95bbe);\n', '  \n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate = 200000;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '  \n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  \n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  function freeTokens(address _beneficiary) public {\n', '      require(token.balanceOf(_beneficiary) == 0);\n', '      token.transfer(_beneficiary,rate);\n', '  }\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '    \n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '    _forwardFunds();\n', '    \n', '  }\n', '  \n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '  \n', '  function _getTokenAmount(uint256 _weiAmount) public view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '  \n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transfer(_beneficiary,_tokenAmount);\n', '  }\n', '\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '  \n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '  \n', '}']