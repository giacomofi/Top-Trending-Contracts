['/*\n', '  Copyright 2017 Sharder Foundation.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', '/**\n', '* @title Sharder Protocol Token.\n', '* For more information about this token sale, please visit https://sharder.org\n', '* @author Ben - <xy@sharder.org>.\n', '* @dev https://github.com/ethereum/EIPs/issues/20\n', '* @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', '*/\n', 'contract SharderToken {\n', '    using SafeMath for uint;\n', '    string public constant NAME = "Sharder Storage";\n', '    string public constant SYMBOL = "SS";\n', '    uint public constant DECIMALS = 18;\n', '    uint public totalSupply;\n', '\n', '    mapping (address => mapping (address => uint256))  public allowed;\n', '    mapping (address => uint) public balances;\n', '\n', '    /// This is where we hold ether during this crowdsale. We will not transfer any ether\n', '    /// out of this address before we invocate the `closeCrowdsale` function to finalize the crowdsale.\n', '    /// This promise is not guanranteed by smart contract by can be verified with public\n', '    /// Ethereum transactions data available on several blockchain browsers.\n', '    /// This is the only address from which `startCrowdsale` and `closeCrowdsale` can be invocated.\n', '    address public owner;\n', '\n', '    /// Admin account used to manage after crowdsale\n', '    address public admin;\n', '\n', '    mapping (address => bool) public accountLockup;\n', '    mapping (address => uint) public accountLockupTime;\n', '    mapping (address => bool) public frozenAccounts;\n', '\n', '    ///   +-----------------------------------------------------------------------------------+\n', '    ///   |                        SS Token Issue Plan - First Round                          |\n', '    ///   +-----------------------------------------------------------------------------------+\n', '    ///   |  Total Sale  |   Airdrop    |  Community Reserve  |  Team Reserve | System Reward |\n', '    ///   +-----------------------------------------------------------------------------------+\n', "    ///   |     50%      |     10%      |         10%         |  Don't Issued | Don't Issued  |\n", '    ///   +-----------------------------------------------------------------------------------+\n', '    ///   | 250,000,000  |  50,000,000  |     50,000,000      |      None     |      None     |\n', '    ///   +-----------------------------------------------------------------------------------+\n', '    uint256 internal constant FIRST_ROUND_ISSUED_SS = 350000000000000000000000000;\n', '\n', '    /// Maximum amount of fund to be raised, the sale ends on reaching this amount.\n', '    uint256 public constant HARD_CAP = 1500 ether;\n', '\n', "    /// It will be refuned if crowdsale can't acheive the soft cap, all ethers will be refuned.\n", '    uint256 public constant SOFT_CAP = 1000 ether;\n', '\n', '    /// 1 ether exchange rate\n', '    /// base the 7-day average close price (Feb.15 through Feb.21, 2018) on CoinMarketCap.com at Feb.21.\n', '    uint256 public constant BASE_RATE = 20719;\n', '\n', '    /// 1 ether == 1000 finney\n', '    /// Min contribution: 0.1 ether\n', '    uint256 public constant CONTRIBUTION_MIN = 100 finney;\n', '\n', '    /// Max contribution: 5 ether\n', '    uint256 public constant CONTRIBUTION_MAX = 5000 finney;\n', '\n', '    /// Sold SS tokens in crowdsale\n', '    uint256 public soldSS = 0;\n', '\n', '    uint8[2] internal bonusPercentages = [\n', '    0,\n', '    0\n', '    ];\n', '\n', '    uint256 internal constant MAX_PROMOTION_SS = 0;\n', '    uint internal constant NUM_OF_PHASE = 2;\n', '    uint internal constant BLOCKS_PER_PHASE = 86400;\n', '\n', '    /// Crowdsale start block number.\n', '    uint public saleStartAtBlock = 0;\n', '\n', '    /// Crowdsale ended block number.\n', '    uint public saleEndAtBlock = 0;\n', '\n', '    /// Unsold ss token whether isssued.\n', '    bool internal unsoldTokenIssued = false;\n', '\n', '    /// Goal whether achieved\n', '    bool internal isGoalAchieved = false;\n', '\n', '    /// Received ether\n', '    uint256 internal totalEthReceived = 0;\n', '\n', '    /// Issue event index starting from 0.\n', '    uint256 internal issueIndex = 0;\n', '\n', '    /*\n', '     * EVENTS\n', '     */\n', '    /// Emitted only once after token sale starts.\n', '    event SaleStarted();\n', '\n', '    /// Emitted only once after token sale ended (all token issued).\n', '    event SaleEnded();\n', '\n', '    /// Emitted when a function is invocated by unauthorized addresses.\n', '    event InvalidCaller(address caller);\n', '\n', '    /// Emitted when a function is invocated without the specified preconditions.\n', '    /// This event will not come alone with an exception.\n', '    event InvalidState(bytes msg);\n', '\n', '    /// Emitted for each sucuessful token purchase.\n', '    event Issue(uint issueIndex, address addr, uint ethAmount, uint tokenAmount);\n', '\n', '    /// Emitted if the token sale succeeded.\n', '    event SaleSucceeded();\n', '\n', '    /// Emitted if the token sale failed.\n', '    /// When token sale failed, all Ether will be return to the original purchasing\n', '    /// address with a minor deduction of transaction feeï¼ˆgas)\n', '    event SaleFailed();\n', '\n', '    // This notifies clients about the amount to transfer\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount to approve\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal isNotFrozen {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balances[_from] >= _value);\n', '        // Check for overflows\n', '        require(balances[_to] + _value > balances[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balances[_from] + balances[_to];\n', '        // Subtract from the sender\n', '        balances[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balances[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balances[_from] + balances[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _transferTokensWithDecimal The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint _transferTokensWithDecimal) public {\n', '        _transfer(msg.sender, _to, _transferTokensWithDecimal);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _transferTokensWithDecimal uint the amout of tokens to be transfered\n', '    */\n', '    function transferFrom(address _from, address _to, uint _transferTokensWithDecimal) public returns (bool success) {\n', '        require(_transferTokensWithDecimal <= allowed[_from][msg.sender]);     // Check allowance\n', '        allowed[_from][msg.sender] -= _transferTokensWithDecimal;\n', '        _transfer(_from, _to, _transferTokensWithDecimal);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     * Allows `_spender` to spend no more than `_approveTokensWithDecimal` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _approveTokensWithDecimal the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _approveTokensWithDecimal) public isNotFrozen returns (bool success) {\n', '        allowed[msg.sender][_spender] = _approveTokensWithDecimal;\n', '        Approval(msg.sender, _spender, _approveTokensWithDecimal);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint specifing the amount of tokens still avaible for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) internal constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '       * Destroy tokens\n', '       * Remove `_value` tokens from the system irreversibly\n', '       *\n', '       * @param _burnedTokensWithDecimal the amount of reserve tokens. !!IMPORTANT is 18 DECIMALS\n', '       */\n', '    function burn(uint256 _burnedTokensWithDecimal) public returns (bool success) {\n', '        require(balances[msg.sender] >= _burnedTokensWithDecimal);   /// Check if the sender has enough\n', '        balances[msg.sender] -= _burnedTokensWithDecimal;            /// Subtract from the sender\n', '        totalSupply -= _burnedTokensWithDecimal;                      /// Updates totalSupply\n', '        Burn(msg.sender, _burnedTokensWithDecimal);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _burnedTokensWithDecimal the amount of reserve tokens. !!IMPORTANT is 18 DECIMALS\n', '     */\n', '    function burnFrom(address _from, uint256 _burnedTokensWithDecimal) public returns (bool success) {\n', '        require(balances[_from] >= _burnedTokensWithDecimal);                /// Check if the targeted balance is enough\n', '        require(_burnedTokensWithDecimal <= allowed[_from][msg.sender]);    /// Check allowance\n', '        balances[_from] -= _burnedTokensWithDecimal;                        /// Subtract from the targeted balance\n', "        allowed[_from][msg.sender] -= _burnedTokensWithDecimal;             /// Subtract from the sender's allowance\n", '        totalSupply -= _burnedTokensWithDecimal;                            /// Update totalSupply\n', '        Burn(_from, _burnedTokensWithDecimal);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     * MODIFIERS\n', '     */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require(msg.sender == owner || msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier beforeStart {\n', '        require(!saleStarted());\n', '        _;\n', '    }\n', '\n', '    modifier inProgress {\n', '        require(saleStarted() && !saleEnded());\n', '        _;\n', '    }\n', '\n', '    modifier afterEnd {\n', '        require(saleEnded());\n', '        _;\n', '    }\n', '\n', '    modifier isNotFrozen {\n', '        require( frozenAccounts[msg.sender] != true && now > accountLockupTime[msg.sender] );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * CONSTRUCTOR\n', '     *\n', '     * @dev Initialize the Sharder Token\n', '     */\n', '    function SharderToken() public {\n', '        owner = msg.sender;\n', '        admin = msg.sender;\n', '        totalSupply = FIRST_ROUND_ISSUED_SS;\n', '    }\n', '\n', '    /*\n', '     * PUBLIC FUNCTIONS\n', '     */\n', '\n', '    ///@dev Set admin account.\n', '    function setAdmin(address _address) public onlyOwner {\n', '       admin=_address;\n', '    }\n', '\n', '    ///@dev Set frozen status of account.\n', '    function setAccountFrozenStatus(address _address, bool _frozenStatus) public onlyAdmin {\n', '        require(unsoldTokenIssued);\n', '        frozenAccounts[_address] = _frozenStatus;\n', '    }\n', '\n', "    /// @dev Lockup account till the date. Can't lockup again when this account locked already.\n", '    /// 1 year = 31536000 seconds\n', '    /// 0.5 year = 15768000 seconds\n', '    function lockupAccount(address _address, uint _lockupSeconds) public onlyAdmin {\n', '        require((accountLockup[_address] && now > accountLockupTime[_address]) || !accountLockup[_address]);\n', '\n', '        // frozen time = now + _lockupSeconds\n', '        accountLockupTime[_address] = now + _lockupSeconds;\n', '        accountLockup[_address] = true;\n', '    }\n', '\n', '    /// @dev Start the crowdsale.\n', '    function startCrowdsale(uint _saleStartAtBlock) public onlyOwner beforeStart {\n', '        require(_saleStartAtBlock > block.number);\n', '        saleStartAtBlock = _saleStartAtBlock;\n', '        SaleStarted();\n', '    }\n', '\n', '    /// @dev Close the crowdsale and issue unsold tokens to `owner` address.\n', '    function closeCrowdsale() public onlyOwner afterEnd {\n', '        require(!unsoldTokenIssued);\n', '\n', '        if (totalEthReceived >= SOFT_CAP) {\n', '            saleEndAtBlock = block.number;\n', '            issueUnsoldToken();\n', '            SaleSucceeded();\n', '        } else {\n', '            SaleFailed();\n', '        }\n', '    }\n', '\n', '    /// @dev goal achieved ahead of time\n', '    function goalAchieved() public onlyOwner {\n', '        require(!isGoalAchieved && softCapReached());\n', '        isGoalAchieved = true;\n', '        closeCrowdsale();\n', '    }\n', '\n', '    /// @dev Returns the current price.\n', '    function price() public constant returns (uint tokens) {\n', '        return computeTokenAmount(1 ether);\n', '    }\n', '\n', '    /// @dev This default function allows token to be purchased by directly\n', '    /// sending ether to this smart contract.\n', '    function () public payable {\n', '        issueToken(msg.sender);\n', '    }\n', '\n', '    /// @dev Issue token based on ether received.\n', '    /// @param recipient Address that newly issued token will be sent to.\n', '    function issueToken(address recipient) public payable inProgress {\n', '        // Personal cap check\n', '        require(balances[recipient].div(BASE_RATE).add(msg.value) <= CONTRIBUTION_MAX);\n', '        // Contribution cap check\n', '        require(CONTRIBUTION_MIN <= msg.value && msg.value <= CONTRIBUTION_MAX);\n', '\n', '        uint tokens = computeTokenAmount(msg.value);\n', '\n', '        totalEthReceived = totalEthReceived.add(msg.value);\n', '        soldSS = soldSS.add(tokens);\n', '\n', '        balances[recipient] = balances[recipient].add(tokens);\n', '        Issue(issueIndex++,recipient,msg.value,tokens);\n', '\n', '        require(owner.send(msg.value));\n', '    }\n', '\n', '    /// @dev Issue token for reserve.\n', '    /// @param recipient Address that newly issued reserve token will be sent to.\n', '    /// @param _issueTokensWithDecimal the amount of reserve tokens. !!IMPORTANT is 18 DECIMALS\n', '    function issueReserveToken(address recipient, uint256 _issueTokensWithDecimal) onlyOwner public {\n', '        balances[recipient] = balances[recipient].add(_issueTokensWithDecimal);\n', '        totalSupply = totalSupply.add(_issueTokensWithDecimal);\n', '        Issue(issueIndex++,recipient,0,_issueTokensWithDecimal);\n', '    }\n', '\n', '    /*\n', '     * INTERNAL FUNCTIONS\n', '     */\n', '    /// @dev Compute the amount of SS token that can be purchased.\n', '    /// @param ethAmount Amount of Ether to purchase SS.\n', '    /// @return Amount of SS token to purchase\n', '    function computeTokenAmount(uint ethAmount) internal constant returns (uint tokens) {\n', '        uint phase = (block.number - saleStartAtBlock).div(BLOCKS_PER_PHASE);\n', '\n', '        // A safe check\n', '        if (phase >= bonusPercentages.length) {\n', '            phase = bonusPercentages.length - 1;\n', '        }\n', '\n', '        uint tokenBase = ethAmount.mul(BASE_RATE);\n', '\n', '        //Check promotion supply and phase bonus\n', '        uint tokenBonus = 0;\n', '        if(totalEthReceived * BASE_RATE < MAX_PROMOTION_SS) {\n', '            tokenBonus = tokenBase.mul(bonusPercentages[phase]).div(100);\n', '        }\n', '\n', '        tokens = tokenBase.add(tokenBonus);\n', '    }\n', '\n', '    /// @dev Issue unsold token to `owner` address.\n', '    function issueUnsoldToken() internal {\n', '        if (unsoldTokenIssued) {\n', '            InvalidState("Unsold token has been issued already");\n', '        } else {\n', '            // Add another safe guard\n', '            require(soldSS > 0);\n', '\n', '            uint256 unsoldSS = totalSupply.sub(soldSS);\n', "            // Issue 'unsoldToken' to the admin account.\n", '            balances[owner] = balances[owner].add(unsoldSS);\n', '            Issue(issueIndex++,owner,0,unsoldSS);\n', '\n', '            unsoldTokenIssued = true;\n', '        }\n', '    }\n', '\n', '    /// @return true if sale has started, false otherwise.\n', '    function saleStarted() public constant returns (bool) {\n', '        return (saleStartAtBlock > 0 && block.number >= saleStartAtBlock);\n', '    }\n', '\n', '    /// @return true if sale has ended, false otherwise.\n', '    /// Sale ended in: a) end time of crowdsale reached, b) hard cap reached, c) goal achieved ahead of time\n', '    function saleEnded() public constant returns (bool) {\n', '        return saleStartAtBlock > 0 && (saleDue() || hardCapReached() || isGoalAchieved);\n', '    }\n', '\n', '    /// @return true if sale is due when the last phase is finished.\n', '    function saleDue() internal constant returns (bool) {\n', '        return block.number >= saleStartAtBlock + BLOCKS_PER_PHASE * NUM_OF_PHASE;\n', '    }\n', '\n', '    /// @return true if the hard cap is reached.\n', '    function hardCapReached() internal constant returns (bool) {\n', '        return totalEthReceived >= HARD_CAP;\n', '    }\n', '\n', '    /// @return true if the soft cap is reached.\n', '    function softCapReached() internal constant returns (bool) {\n', '        return totalEthReceived >= SOFT_CAP;\n', '    }\n', '}']