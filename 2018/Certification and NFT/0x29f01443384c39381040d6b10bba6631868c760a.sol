['pragma solidity ^0.4.21;\n', '\n', '\n', 'library SafeMath {\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\tassert(a <= c);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(a >= b);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a * b;\n', '\t\tassert(a == 0 || c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn a / b;\n', '\t}\n', '}\n', '\n', '\n', 'contract ContractReceiver {\n', '\tfunction tokenFallback(address from, uint256 value, bytes data) public;\n', '}\n', '\n', '\n', 'contract AuctusToken {\n', '\tfunction transfer(address to, uint256 value) public returns (bool);\n', '\tfunction transfer(address to, uint256 value, bytes data) public returns (bool);\n', '\tfunction burn(uint256 value) public returns (bool);\n', '\tfunction setTokenSaleFinished() public;\n', '}\n', '\n', '\n', 'contract AuctusWhitelist {\n', '\tfunction getAllowedAmountToContribute(address addr) view public returns(uint256);\n', '}\n', '\n', '\n', 'contract AuctusTokenSale is ContractReceiver {\n', '\tusing SafeMath for uint256;\n', '\n', '\taddress public auctusTokenAddress = 0xfD89de68b246eB3e21B06e9B65450AC28D222488;\n', '\taddress public auctusWhiteListAddress = 0xA6e728E524c1D7A65fE5193cA1636265DE9Bc982;\n', '\n', '\tuint256 public startTime = 1522159200; //2018-03-27 2 PM UTC\n', '\tuint256 public endTime; \n', '\n', '\tuint256 public basicPricePerEth = 2000;\n', '\n', '\taddress public owner;\n', '\tuint256 public softCap;\n', '\tuint256 public remainingTokens;\n', '\tuint256 public weiRaised;\n', '\tmapping(address => uint256) public invested;\n', '\n', '\tbool public saleWasSet;\n', '\tbool public tokenSaleHalted;\n', '\n', '\tevent Buy(address indexed buyer, uint256 tokenAmount);\n', '\tevent Revoke(address indexed buyer, uint256 investedAmount);\n', '\n', '\tfunction AuctusTokenSale(uint256 minimumCap, uint256 endSaleTime) public {\n', '\t\towner = msg.sender;\n', '\t\tsoftCap = minimumCap;\n', '\t\tendTime = endSaleTime;\n', '\t\tsaleWasSet = false;\n', '\t\ttokenSaleHalted = false;\n', '\t}\n', '\n', '\tmodifier onlyOwner() {\n', '\t\trequire(owner == msg.sender);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier openSale() {\n', '\t\trequire(saleWasSet && !tokenSaleHalted && now >= startTime && now <= endTime && remainingTokens > 0);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier saleCompletedSuccessfully() {\n', '\t\trequire(weiRaised >= softCap && (now > endTime || remainingTokens == 0));\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier saleFailed() {\n', '\t\trequire(weiRaised < softCap && now > endTime);\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction transferOwnership(address newOwner) onlyOwner public {\n', '\t\trequire(newOwner != address(0));\n', '\t\towner = newOwner;\n', '\t}\n', '\n', '\tfunction setTokenSaleHalt(bool halted) onlyOwner public {\n', '\t\ttokenSaleHalted = halted;\n', '\t}\n', '\n', '\tfunction setSoftCap(uint256 minimumCap) onlyOwner public {\n', '\t\trequire(now < startTime);\n', '\t\tsoftCap = minimumCap;\n', '\t}\n', '\n', '\tfunction setEndSaleTime(uint256 endSaleTime) onlyOwner public {\n', '\t\trequire(now < endTime);\n', '\t\tendTime = endSaleTime;\n', '\t}\n', '\n', '\tfunction tokenFallback(address, uint256 value, bytes) public {\n', '\t\trequire(msg.sender == auctusTokenAddress);\n', '\t\trequire(!saleWasSet);\n', '\t\tsetTokenSaleDistribution(value);\n', '\t}\n', '\n', '\tfunction()\n', '\t\tpayable\n', '\t\topenSale\n', '\t\tpublic\n', '\t{\n', '\t\tuint256 weiToInvest;\n', '\t\tuint256 weiRemaining;\n', '\t\t(weiToInvest, weiRemaining) = getValueToInvest();\n', '\n', '\t\trequire(weiToInvest > 0);\n', '\n', '\t\tuint256 tokensToReceive = weiToInvest.mul(basicPricePerEth);\n', '\t\tremainingTokens = remainingTokens.sub(tokensToReceive);\n', '\t\tweiRaised = weiRaised.add(weiToInvest);\n', '\t\tinvested[msg.sender] = invested[msg.sender].add(weiToInvest);\n', '\n', '\t\tif (weiRemaining > 0) {\n', '\t\t\tmsg.sender.transfer(weiRemaining);\n', '\t\t}\n', '\t\tassert(AuctusToken(auctusTokenAddress).transfer(msg.sender, tokensToReceive));\n', '\n', '\t\temit Buy(msg.sender, tokensToReceive);\n', '\t}\n', '\n', '\tfunction revoke() saleFailed public {\n', '\t\tuint256 investedValue = invested[msg.sender];\n', '\t\trequire(investedValue > 0);\n', '\n', '\t\tinvested[msg.sender] = 0;\n', '\t\tmsg.sender.transfer(investedValue);\n', '\n', '\t\temit Revoke(msg.sender, investedValue);\n', '\t}\n', '\n', '\tfunction finish() \n', '\t\tonlyOwner\n', '\t\tsaleCompletedSuccessfully \n', '\t\tpublic \n', '\t{\n', '\t\t//40% of the ethers are unvested\n', '\t\tuint256 freeEthers = address(this).balance * 40 / 100;\n', '\t\tuint256 vestedEthers = address(this).balance - freeEthers;\n', '\n', '\t\taddress(0xd1B10607921C78D9a00529294C4b99f1bd250E1c).transfer(freeEthers); //Owner\n', '\t\tassert(address(0x0285d35508e1A1f833142EB5211adb858Bd3323A).call.value(vestedEthers)()); //AuctusEtherVesting SC\n', '\n', '\t\tAuctusToken token = AuctusToken(auctusTokenAddress);\n', '\t\ttoken.setTokenSaleFinished();\n', '\t\tif (remainingTokens > 0) {\n', '\t\t\ttoken.burn(remainingTokens);\n', '\t\t\tremainingTokens = 0;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction getValueToInvest() view private returns (uint256, uint256) {\n', '\t\tuint256 allowedValue = AuctusWhitelist(auctusWhiteListAddress).getAllowedAmountToContribute(msg.sender);\n', '\n', '\t\tuint256 weiToInvest;\n', '\t\tif (allowedValue == 0) {\n', '\t\t\tweiToInvest = 0;\n', '\t\t} else if (allowedValue >= invested[msg.sender].add(msg.value)) {\n', '\t\t\tweiToInvest = getAllowedAmount(msg.value);\n', '\t\t} else {\n', '\t\t\tweiToInvest = getAllowedAmount(allowedValue.sub(invested[msg.sender]));\n', '\t\t}\n', '\t\treturn (weiToInvest, msg.value.sub(weiToInvest));\n', '\t}\n', '\n', '\tfunction getAllowedAmount(uint256 value) view private returns (uint256) {\n', '\t\tuint256 maximumValue = remainingTokens / basicPricePerEth;\n', '\t\tif (value > maximumValue) {\n', '\t\t\treturn maximumValue;\n', '\t\t} else {\n', '\t\t\treturn value;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction setTokenSaleDistribution(uint256 totalAmount) private {\n', '\t\t//Auctus core team 20%\n', '\t\tuint256 auctusCoreTeam = totalAmount * 20 / 100;\n', '\t\t//Bounty 2%\n', '\t\tuint256 bounty = totalAmount * 2 / 100;\n', '\t\t//Reserve for Future 18%\n', '\t\tuint256 reserveForFuture = totalAmount * 18 / 100;\n', '\t\t//Partnerships and Advisory free amount 1.8%\n', '\t\tuint256 partnershipsAdvisoryFree = totalAmount * 18 / 1000;\n', '\t\t//Partnerships and Advisory vested amount 7.2%\n', '\t\tuint256 partnershipsAdvisoryVested = totalAmount * 72 / 1000;\n', '\n', '\t\tuint256 privateSales = 2970000000000000000000000;\n', '\t\tuint256 preSale = 2397307557007329968290000;\n', '\n', '\t\ttransferTokens(auctusCoreTeam, bounty, reserveForFuture, preSale, partnershipsAdvisoryVested, partnershipsAdvisoryFree, privateSales);\n', '\t\t\n', '\t\tremainingTokens = totalAmount - auctusCoreTeam - bounty - reserveForFuture - preSale - partnershipsAdvisoryVested - partnershipsAdvisoryFree - privateSales;\n', '\t\tsaleWasSet = true;\n', '\t}\n', '\t\n', '\tfunction transferTokens(\n', '\t\tuint256 auctusCoreTeam,\n', '\t\tuint256 bounty,\n', '\t\tuint256 reserveForFuture,\n', '\t\tuint256 preSale,\n', '\t\tuint256 partnershipsAdvisoryVested,\n', '\t\tuint256 partnershipsAdvisoryFree,\n', '\t\tuint256 privateSales\n', '\t) private {\n', '\t\tAuctusToken token = AuctusToken(auctusTokenAddress);\n', '\t\tbytes memory empty;\n', '\t\tassert(token.transfer(0x6bc58c572d0973cF0EfA1Fe1D7D6c9d7Eea2cd23, auctusCoreTeam, empty)); //AuctusTokenVesting SC\n', '\t\tassert(token.transfer(0x936Cf3e904B83B1D939C41475DC5F7c470419A3E, bounty, empty)); //AuctusBountyDistribution SC\n', '\t\tassert(token.transfer(0xF5ad5fF703D0AD0df3bAb3A1194FbCC5c152bf3b, reserveForFuture, empty)); //AuctusTokenVesting SC\n', '\t\tassert(token.transfer(0x2cE4FAb9F313F1df0978869C5d302768F1bB471d, preSale, empty)); //AuctusPreSaleDistribution SC\n', '\t\tassert(token.transfer(0x03f6278E5c359a5E8947a62E87D85AC394580d13, partnershipsAdvisoryVested, empty)); //AuctusTokenVesting SC\n', '\t\tassert(token.transfer(0x6c89Cc03036193d52e9b8386413b545184BDAb99, partnershipsAdvisoryFree));\n', '\t\tassert(token.transfer(0xd1B10607921C78D9a00529294C4b99f1bd250E1c, privateSales));\n', '\t}\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '\n', 'library SafeMath {\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\tassert(a <= c);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(a >= b);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a * b;\n', '\t\tassert(a == 0 || c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn a / b;\n', '\t}\n', '}\n', '\n', '\n', 'contract ContractReceiver {\n', '\tfunction tokenFallback(address from, uint256 value, bytes data) public;\n', '}\n', '\n', '\n', 'contract AuctusToken {\n', '\tfunction transfer(address to, uint256 value) public returns (bool);\n', '\tfunction transfer(address to, uint256 value, bytes data) public returns (bool);\n', '\tfunction burn(uint256 value) public returns (bool);\n', '\tfunction setTokenSaleFinished() public;\n', '}\n', '\n', '\n', 'contract AuctusWhitelist {\n', '\tfunction getAllowedAmountToContribute(address addr) view public returns(uint256);\n', '}\n', '\n', '\n', 'contract AuctusTokenSale is ContractReceiver {\n', '\tusing SafeMath for uint256;\n', '\n', '\taddress public auctusTokenAddress = 0xfD89de68b246eB3e21B06e9B65450AC28D222488;\n', '\taddress public auctusWhiteListAddress = 0xA6e728E524c1D7A65fE5193cA1636265DE9Bc982;\n', '\n', '\tuint256 public startTime = 1522159200; //2018-03-27 2 PM UTC\n', '\tuint256 public endTime; \n', '\n', '\tuint256 public basicPricePerEth = 2000;\n', '\n', '\taddress public owner;\n', '\tuint256 public softCap;\n', '\tuint256 public remainingTokens;\n', '\tuint256 public weiRaised;\n', '\tmapping(address => uint256) public invested;\n', '\n', '\tbool public saleWasSet;\n', '\tbool public tokenSaleHalted;\n', '\n', '\tevent Buy(address indexed buyer, uint256 tokenAmount);\n', '\tevent Revoke(address indexed buyer, uint256 investedAmount);\n', '\n', '\tfunction AuctusTokenSale(uint256 minimumCap, uint256 endSaleTime) public {\n', '\t\towner = msg.sender;\n', '\t\tsoftCap = minimumCap;\n', '\t\tendTime = endSaleTime;\n', '\t\tsaleWasSet = false;\n', '\t\ttokenSaleHalted = false;\n', '\t}\n', '\n', '\tmodifier onlyOwner() {\n', '\t\trequire(owner == msg.sender);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier openSale() {\n', '\t\trequire(saleWasSet && !tokenSaleHalted && now >= startTime && now <= endTime && remainingTokens > 0);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier saleCompletedSuccessfully() {\n', '\t\trequire(weiRaised >= softCap && (now > endTime || remainingTokens == 0));\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier saleFailed() {\n', '\t\trequire(weiRaised < softCap && now > endTime);\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction transferOwnership(address newOwner) onlyOwner public {\n', '\t\trequire(newOwner != address(0));\n', '\t\towner = newOwner;\n', '\t}\n', '\n', '\tfunction setTokenSaleHalt(bool halted) onlyOwner public {\n', '\t\ttokenSaleHalted = halted;\n', '\t}\n', '\n', '\tfunction setSoftCap(uint256 minimumCap) onlyOwner public {\n', '\t\trequire(now < startTime);\n', '\t\tsoftCap = minimumCap;\n', '\t}\n', '\n', '\tfunction setEndSaleTime(uint256 endSaleTime) onlyOwner public {\n', '\t\trequire(now < endTime);\n', '\t\tendTime = endSaleTime;\n', '\t}\n', '\n', '\tfunction tokenFallback(address, uint256 value, bytes) public {\n', '\t\trequire(msg.sender == auctusTokenAddress);\n', '\t\trequire(!saleWasSet);\n', '\t\tsetTokenSaleDistribution(value);\n', '\t}\n', '\n', '\tfunction()\n', '\t\tpayable\n', '\t\topenSale\n', '\t\tpublic\n', '\t{\n', '\t\tuint256 weiToInvest;\n', '\t\tuint256 weiRemaining;\n', '\t\t(weiToInvest, weiRemaining) = getValueToInvest();\n', '\n', '\t\trequire(weiToInvest > 0);\n', '\n', '\t\tuint256 tokensToReceive = weiToInvest.mul(basicPricePerEth);\n', '\t\tremainingTokens = remainingTokens.sub(tokensToReceive);\n', '\t\tweiRaised = weiRaised.add(weiToInvest);\n', '\t\tinvested[msg.sender] = invested[msg.sender].add(weiToInvest);\n', '\n', '\t\tif (weiRemaining > 0) {\n', '\t\t\tmsg.sender.transfer(weiRemaining);\n', '\t\t}\n', '\t\tassert(AuctusToken(auctusTokenAddress).transfer(msg.sender, tokensToReceive));\n', '\n', '\t\temit Buy(msg.sender, tokensToReceive);\n', '\t}\n', '\n', '\tfunction revoke() saleFailed public {\n', '\t\tuint256 investedValue = invested[msg.sender];\n', '\t\trequire(investedValue > 0);\n', '\n', '\t\tinvested[msg.sender] = 0;\n', '\t\tmsg.sender.transfer(investedValue);\n', '\n', '\t\temit Revoke(msg.sender, investedValue);\n', '\t}\n', '\n', '\tfunction finish() \n', '\t\tonlyOwner\n', '\t\tsaleCompletedSuccessfully \n', '\t\tpublic \n', '\t{\n', '\t\t//40% of the ethers are unvested\n', '\t\tuint256 freeEthers = address(this).balance * 40 / 100;\n', '\t\tuint256 vestedEthers = address(this).balance - freeEthers;\n', '\n', '\t\taddress(0xd1B10607921C78D9a00529294C4b99f1bd250E1c).transfer(freeEthers); //Owner\n', '\t\tassert(address(0x0285d35508e1A1f833142EB5211adb858Bd3323A).call.value(vestedEthers)()); //AuctusEtherVesting SC\n', '\n', '\t\tAuctusToken token = AuctusToken(auctusTokenAddress);\n', '\t\ttoken.setTokenSaleFinished();\n', '\t\tif (remainingTokens > 0) {\n', '\t\t\ttoken.burn(remainingTokens);\n', '\t\t\tremainingTokens = 0;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction getValueToInvest() view private returns (uint256, uint256) {\n', '\t\tuint256 allowedValue = AuctusWhitelist(auctusWhiteListAddress).getAllowedAmountToContribute(msg.sender);\n', '\n', '\t\tuint256 weiToInvest;\n', '\t\tif (allowedValue == 0) {\n', '\t\t\tweiToInvest = 0;\n', '\t\t} else if (allowedValue >= invested[msg.sender].add(msg.value)) {\n', '\t\t\tweiToInvest = getAllowedAmount(msg.value);\n', '\t\t} else {\n', '\t\t\tweiToInvest = getAllowedAmount(allowedValue.sub(invested[msg.sender]));\n', '\t\t}\n', '\t\treturn (weiToInvest, msg.value.sub(weiToInvest));\n', '\t}\n', '\n', '\tfunction getAllowedAmount(uint256 value) view private returns (uint256) {\n', '\t\tuint256 maximumValue = remainingTokens / basicPricePerEth;\n', '\t\tif (value > maximumValue) {\n', '\t\t\treturn maximumValue;\n', '\t\t} else {\n', '\t\t\treturn value;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction setTokenSaleDistribution(uint256 totalAmount) private {\n', '\t\t//Auctus core team 20%\n', '\t\tuint256 auctusCoreTeam = totalAmount * 20 / 100;\n', '\t\t//Bounty 2%\n', '\t\tuint256 bounty = totalAmount * 2 / 100;\n', '\t\t//Reserve for Future 18%\n', '\t\tuint256 reserveForFuture = totalAmount * 18 / 100;\n', '\t\t//Partnerships and Advisory free amount 1.8%\n', '\t\tuint256 partnershipsAdvisoryFree = totalAmount * 18 / 1000;\n', '\t\t//Partnerships and Advisory vested amount 7.2%\n', '\t\tuint256 partnershipsAdvisoryVested = totalAmount * 72 / 1000;\n', '\n', '\t\tuint256 privateSales = 2970000000000000000000000;\n', '\t\tuint256 preSale = 2397307557007329968290000;\n', '\n', '\t\ttransferTokens(auctusCoreTeam, bounty, reserveForFuture, preSale, partnershipsAdvisoryVested, partnershipsAdvisoryFree, privateSales);\n', '\t\t\n', '\t\tremainingTokens = totalAmount - auctusCoreTeam - bounty - reserveForFuture - preSale - partnershipsAdvisoryVested - partnershipsAdvisoryFree - privateSales;\n', '\t\tsaleWasSet = true;\n', '\t}\n', '\t\n', '\tfunction transferTokens(\n', '\t\tuint256 auctusCoreTeam,\n', '\t\tuint256 bounty,\n', '\t\tuint256 reserveForFuture,\n', '\t\tuint256 preSale,\n', '\t\tuint256 partnershipsAdvisoryVested,\n', '\t\tuint256 partnershipsAdvisoryFree,\n', '\t\tuint256 privateSales\n', '\t) private {\n', '\t\tAuctusToken token = AuctusToken(auctusTokenAddress);\n', '\t\tbytes memory empty;\n', '\t\tassert(token.transfer(0x6bc58c572d0973cF0EfA1Fe1D7D6c9d7Eea2cd23, auctusCoreTeam, empty)); //AuctusTokenVesting SC\n', '\t\tassert(token.transfer(0x936Cf3e904B83B1D939C41475DC5F7c470419A3E, bounty, empty)); //AuctusBountyDistribution SC\n', '\t\tassert(token.transfer(0xF5ad5fF703D0AD0df3bAb3A1194FbCC5c152bf3b, reserveForFuture, empty)); //AuctusTokenVesting SC\n', '\t\tassert(token.transfer(0x2cE4FAb9F313F1df0978869C5d302768F1bB471d, preSale, empty)); //AuctusPreSaleDistribution SC\n', '\t\tassert(token.transfer(0x03f6278E5c359a5E8947a62E87D85AC394580d13, partnershipsAdvisoryVested, empty)); //AuctusTokenVesting SC\n', '\t\tassert(token.transfer(0x6c89Cc03036193d52e9b8386413b545184BDAb99, partnershipsAdvisoryFree));\n', '\t\tassert(token.transfer(0xd1B10607921C78D9a00529294C4b99f1bd250E1c, privateSales));\n', '\t}\n', '}']
