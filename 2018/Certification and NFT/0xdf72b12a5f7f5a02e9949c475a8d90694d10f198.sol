['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title Log Various Error Types\n', ' * @author Adam Lemmon <adam@oraclize.it>\n', ' * @dev Inherit this contract and your may now log errors easily\n', ' * To support various error types, params, etc.\n', ' */\n', 'contract LoggingErrors {\n', '  /**\n', '  * Events\n', '  */\n', '  event LogErrorString(string errorString);\n', '\n', '  /**\n', '  * Error cases\n', '  */\n', '\n', '  /**\n', '   * @dev Default error to simply log the error message and return\n', '   * @param _errorMessage The error message to log\n', '   * @return ALWAYS false\n', '   */\n', '  function error(string _errorMessage) internal returns(bool) {\n', '    LogErrorString(_errorMessage);\n', '    return false;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Wallet Connector\n', ' * @dev Connect the wallet contract to the correct Wallet Logic version\n', ' */\n', 'contract WalletConnector is LoggingErrors {\n', '  /**\n', '   * Storage\n', '   */\n', '  address public owner_;\n', '  address public latestLogic_;\n', '  uint256 public latestVersion_;\n', '  mapping(uint256 => address) public logicVersions_;\n', '  uint256 public birthBlock_;\n', '\n', '  /**\n', '   * Events\n', '   */\n', '  event LogLogicVersionAdded(uint256 version);\n', '  event LogLogicVersionRemoved(uint256 version);\n', '\n', '  /**\n', '   * @dev Constructor to set the latest logic address\n', '   * @param _latestVersion Latest version of the wallet logic\n', '   * @param _latestLogic Latest address of the wallet logic contract\n', '   */\n', '  function WalletConnector (\n', '    uint256 _latestVersion,\n', '    address _latestLogic\n', '  ) public {\n', '    owner_ = msg.sender;\n', '    latestLogic_ = _latestLogic;\n', '    latestVersion_ = _latestVersion;\n', '    logicVersions_[_latestVersion] = _latestLogic;\n', '    birthBlock_ = block.number;\n', '  }\n', '\n', '  /**\n', '   * Add a new version of the logic contract\n', '   * @param _version The version to be associated with the new contract.\n', '   * @param _logic New logic contract.\n', '   * @return Success of the transaction.\n', '   */\n', '  function addLogicVersion (\n', '    uint256 _version,\n', '    address _logic\n', '  ) external\n', '    returns(bool)\n', '  {\n', '    if (msg.sender != owner_)\n', '      return error(&#39;msg.sender != owner, WalletConnector.addLogicVersion()&#39;);\n', '\n', '    if (logicVersions_[_version] != 0)\n', '      return error(&#39;Version already exists, WalletConnector.addLogicVersion()&#39;);\n', '\n', '    // Update latest if this is the latest version\n', '    if (_version > latestVersion_) {\n', '      latestLogic_ = _logic;\n', '      latestVersion_ = _version;\n', '    }\n', '\n', '    logicVersions_[_version] = _logic;\n', '    LogLogicVersionAdded(_version);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Remove a version. Cannot remove the latest version.\n', '   * @param  _version The version to remove.\n', '   */\n', '  function removeLogicVersion(uint256 _version) external {\n', '    require(msg.sender == owner_);\n', '    require(_version != latestVersion_);\n', '    delete logicVersions_[_version];\n', '    LogLogicVersionRemoved(_version);\n', '  }\n', '\n', '  /**\n', '   * Constants\n', '   */\n', '\n', '  /**\n', '   * Called from user wallets in order to upgrade their logic.\n', '   * @param _version The version to upgrade to. NOTE pass in 0 to upgrade to latest.\n', '   * @return The address of the logic contract to upgrade to.\n', '   */\n', '  function getLogic(uint256 _version)\n', '    external\n', '    constant\n', '    returns(address)\n', '  {\n', '    if (_version == 0)\n', '      return latestLogic_;\n', '    else\n', '      return logicVersions_[_version];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Wallet to hold and trade ERC20 tokens and ether\n', ' * @author Adam Lemmon <adam@oraclize.it>\n', ' * @dev User wallet to interact with the exchange.\n', ' * all tokens and ether held in this wallet, 1 to 1 mapping to user EOAs.\n', ' */\n', 'contract Wallet is LoggingErrors {\n', '  /**\n', '   * Storage\n', '   */\n', '  // Vars included in wallet logic "lib", the order must match between Wallet and Logic\n', '  address public owner_;\n', '  address public exchange_;\n', '  mapping(address => uint256) public tokenBalances_;\n', '\n', '  address public logic_; // storage location 0x3 loaded for delegatecalls so this var must remain at index 3\n', '  uint256 public birthBlock_;\n', '\n', '  // Address updated at deploy time\n', '  WalletConnector private connector_ = WalletConnector(0x03d6e7b2f48120fd57a89ff0bbd56e9ec39af21c);\n', '\n', '  /**\n', '   * Events\n', '   */\n', '  event LogDeposit(address token, uint256 amount, uint256 balance);\n', '  event LogWithdrawal(address token, uint256 amount, uint256 balance);\n', '\n', '  /**\n', '   * @dev Contract consturtor. Set user as owner and connector address.\n', '   * @param _owner The address of the user&#39;s EOA, wallets created from the exchange\n', '   * so must past in the owner address, msg.sender == exchange.\n', '   */\n', '  function Wallet(address _owner) public {\n', '    owner_ = _owner;\n', '    exchange_ = msg.sender;\n', '    logic_ = connector_.latestLogic_();\n', '    birthBlock_ = block.number;\n', '  }\n', '\n', '  /**\n', '   * @dev Fallback - Only enable funds to be sent from the exchange.\n', '   * Ensures balances will be consistent.\n', '   */\n', '  function () external payable {\n', '    require(msg.sender == exchange_);\n', '  }\n', '\n', '  /**\n', '  * External\n', '  */\n', '\n', '  /**\n', '   * @dev Deposit ether into this wallet, default to address 0 for consistent token lookup.\n', '   */\n', '  function depositEther()\n', '    external\n', '    payable\n', '  {\n', '    require(logic_.delegatecall(bytes4(sha3(&#39;deposit(address,uint256)&#39;)), 0, msg.value));\n', '  }\n', '\n', '  /**\n', '   * @dev Deposit any ERC20 token into this wallet.\n', '   * @param _token The address of the existing token contract.\n', '   * @param _amount The amount of tokens to deposit.\n', '   * @return Bool if the deposit was successful.\n', '   */\n', '  function depositERC20Token (\n', '    address _token,\n', '    uint256 _amount\n', '  ) external\n', '    returns(bool)\n', '  {\n', '    // ether\n', '    if (_token == 0)\n', '      return error(&#39;Cannot deposit ether via depositERC20, Wallet.depositERC20Token()&#39;);\n', '\n', '    require(logic_.delegatecall(bytes4(sha3(&#39;deposit(address,uint256)&#39;)), _token, _amount));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev The result of an order, update the balance of this wallet.\n', '   * @param _token The address of the token balance to update.\n', '   * @param _amount The amount to update the balance by.\n', '   * @param _subtractionFlag If true then subtract the token amount else add.\n', '   * @return Bool if the update was successful.\n', '   */\n', '  function updateBalance (\n', '    address _token,\n', '    uint256 _amount,\n', '    bool _subtractionFlag\n', '  ) external\n', '    returns(bool)\n', '  {\n', '    assembly {\n', '      calldatacopy(0x40, 0, calldatasize)\n', '      delegatecall(gas, sload(0x3), 0x40, calldatasize, 0, 32)\n', '      return(0, 32)\n', '      pop\n', '    }\n', '  }\n', '\n', '  /**\n', '   * User may update to the latest version of the exchange contract.\n', '   * Note that multiple versions are NOT supported at this time and therefore if a\n', '   * user does not wish to update they will no longer be able to use the exchange.\n', '   * @param _exchange The new exchange.\n', '   * @return Success of this transaction.\n', '   */\n', '  function updateExchange(address _exchange)\n', '    external\n', '    returns(bool)\n', '  {\n', '    if (msg.sender != owner_)\n', '      return error(&#39;msg.sender != owner_, Wallet.updateExchange()&#39;);\n', '\n', '    // If subsequent messages are not sent from this address all orders will fail\n', '    exchange_ = _exchange;\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * User may update to a new or older version of the logic contract.\n', '   * @param _version The versin to update to.\n', '   * @return Success of this transaction.\n', '   */\n', '  function updateLogic(uint256 _version)\n', '    external\n', '    returns(bool)\n', '  {\n', '    if (msg.sender != owner_)\n', '      return error(&#39;msg.sender != owner_, Wallet.updateLogic()&#39;);\n', '\n', '    address newVersion = connector_.getLogic(_version);\n', '\n', '    // Invalid version as defined by connector\n', '    if (newVersion == 0)\n', '      return error(&#39;Invalid version, Wallet.updateLogic()&#39;);\n', '\n', '    logic_ = newVersion;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Verify an order that the Exchange has received involving this wallet.\n', '   * Internal checks and then authorize the exchange to move the tokens.\n', '   * If sending ether will transfer to the exchange to broker the trade.\n', '   * @param _token The address of the token contract being sold.\n', '   * @param _amount The amount of tokens the order is for.\n', '   * @param _fee The fee for the current trade.\n', '   * @param _feeToken The token of which the fee is to be paid in.\n', '   * @return If the order was verified or not.\n', '   */\n', '  function verifyOrder (\n', '    address _token,\n', '    uint256 _amount,\n', '    uint256 _fee,\n', '    address _feeToken\n', '  ) external\n', '    returns(bool)\n', '  {\n', '    assembly {\n', '      calldatacopy(0x40, 0, calldatasize)\n', '      delegatecall(gas, sload(0x3), 0x40, calldatasize, 0, 32)\n', '      return(0, 32)\n', '      pop\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Withdraw any token, including ether from this wallet to an EOA.\n', '   * @param _token The address of the token to withdraw.\n', '   * @param _amount The amount to withdraw.\n', '   * @return Success of the withdrawal.\n', '   */\n', '  function withdraw(address _token, uint256 _amount)\n', '    external\n', '    returns(bool)\n', '  {\n', '    if(msg.sender != owner_)\n', '      return error(&#39;msg.sender != owner, Wallet.withdraw()&#39;);\n', '\n', '    assembly {\n', '      calldatacopy(0x40, 0, calldatasize)\n', '      delegatecall(gas, sload(0x3), 0x40, calldatasize, 0, 32)\n', '      return(0, 32)\n', '      pop\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Constants\n', '   */\n', '\n', '  /**\n', '   * @dev Get the balance for a specific token.\n', '   * @param _token The address of the token contract to retrieve the balance of.\n', '   * @return The current balance within this contract.\n', '   */\n', '  function balanceOf(address _token)\n', '    public\n', '    constant\n', '    returns(uint)\n', '  {\n', '    return tokenBalances_[_token];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract Token {\n', '  /// @return total amount of tokens\n', '  function totalSupply() constant returns (uint256 supply) {}\n', '\n', '  /// @param _owner The address from which the balance will be retrieved\n', '  /// @return The balance\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '  /// @notice send `_value` token to `_to` from `msg.sender`\n', '  /// @param _to The address of the recipient\n', '  /// @param _value The amount of token to be transferred\n', '  /// @return Whether the transfer was successful or not\n', '  function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '  /// @param _from The address of the sender\n', '  /// @param _to The address of the recipient\n', '  /// @param _value The amount of token to be transferred\n', '  /// @return Whether the transfer was successful or not\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '  /// @param _spender The address of the account able to transfer the tokens\n', '  /// @param _value The amount of wei to be approved for transfer\n', '  /// @return Whether the approval was successful or not\n', '  function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '  /// @param _owner The address of the account owning tokens\n', '  /// @param _spender The address of the account able to transfer the tokens\n', '  /// @return Amount of remaining tokens allowed to spent\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '  uint public decimals;\n', '  string public name;\n', '}\n', '\n', '\n', '/**\n', ' * @title Decentralized exchange for ether and ERC20 tokens.\n', ' * @author Adam Lemmon <adam@oraclize.it>\n', ' * @dev All trades brokered by this contract.\n', ' * Orders submitted by off chain order book and this contract handles\n', ' * verification and execution of orders.\n', ' * All value between parties is transferred via this exchange.\n', ' * Methods arranged by visibility; external, public, internal, private and alphabatized within.\n', ' */\n', 'contract Exchange is LoggingErrors {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  /**\n', '   * Data Structures\n', '   */\n', '  struct Order {\n', '    bool active_;  // True: active, False: filled or cancelled\n', '    address offerToken_;\n', '    uint256 offerTokenTotal_;\n', '    uint256 offerTokenRemaining_;  // Amount left to give\n', '    address wantToken_;\n', '    uint256 wantTokenTotal_;\n', '    uint256 wantTokenReceived_;  // Amount received, note this may exceed want total\n', '  }\n', '\n', '  /**\n', '   * Storage\n', '   */\n', '  address private orderBookAccount_;\n', '  address private owner_;\n', '  uint256 public minOrderEthAmount_;\n', '  uint256 public birthBlock_;\n', '  address public edoToken_;\n', '  uint256 public edoPerWei_;\n', '  uint256 public edoPerWeiDecimals_;\n', '  address public eidooWallet_;\n', '  mapping(bytes32 => Order) public orders_; // Map order hashes to order data struct\n', '  mapping(address => address) public userAccountToWallet_; // User EOA to wallet addresses\n', '\n', '  /**\n', '   * Events\n', '   */\n', '  event LogEdoRateSet(uint256 rate);\n', '  event LogOrderExecutionSuccess();\n', '  event LogOrderFilled(bytes32 indexed orderId, uint256 fillAmount, uint256 fillRemaining);\n', '  event LogUserAdded(address indexed user, address walletAddress);\n', '  event LogWalletDeposit(address indexed walletAddress, address token, uint256 amount, uint256 balance);\n', '  event LogWalletWithdrawal(address indexed walletAddress, address token, uint256 amount, uint256 balance);\n', '\n', '  /**\n', '   * @dev Contract constructor - CONFIRM matches contract name.  Set owner and addr of order book.\n', '   * @param _bookAccount The EOA address for the order book, will submit ALL orders.\n', '   * @param _minOrderEthAmount Minimum amount of ether that each order must contain.\n', '   * @param _edoToken Deployed edo token.\n', '   * @param _edoPerWei Rate of edo tokens per wei.\n', '   * @param _edoPerWeiDecimals Decimlas carried in edo rate.\n', '   * @param _eidooWallet Wallet to pay fees to.\n', '   */\n', '  function Exchange(\n', '    address _bookAccount,\n', '    uint256 _minOrderEthAmount,\n', '    address _edoToken,\n', '    uint256 _edoPerWei,\n', '    uint256 _edoPerWeiDecimals,\n', '    address _eidooWallet\n', '  ) public {\n', '    orderBookAccount_ = _bookAccount;\n', '    minOrderEthAmount_ = _minOrderEthAmount;\n', '    owner_ = msg.sender;\n', '    birthBlock_ = block.number;\n', '    edoToken_ = _edoToken;\n', '    edoPerWei_ = _edoPerWei;\n', '    edoPerWeiDecimals_ = _edoPerWeiDecimals;\n', '    eidooWallet_ = _eidooWallet;\n', '  }\n', '\n', '  /**\n', '   * @dev Fallback. wallets utilize to send ether in order to broker trade.\n', '   */\n', '  function () external payable { }\n', '\n', '  /**\n', '   * External\n', '   */\n', '\n', '  /**\n', '   * @dev Add a new user to the exchange, create a wallet for them.\n', '   * Map their account address to the wallet contract for lookup.\n', '   * @param _userAccount The address of the user&#39;s EOA.\n', '   * @return Success of the transaction, false if error condition met.\n', '   */\n', '  function addNewUser(address _userAccount)\n', '    external\n', '    returns (bool)\n', '  {\n', '    if (userAccountToWallet_[_userAccount] != address(0))\n', '      return error(&#39;User already exists, Exchange.addNewUser()&#39;);\n', '\n', '    // Pass the userAccount address to wallet constructor so owner is not the exchange contract\n', '    address userWallet = new Wallet(_userAccount);\n', '\n', '    userAccountToWallet_[_userAccount] = userWallet;\n', '\n', '    LogUserAdded(_userAccount, userWallet);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * Execute orders in batches.\n', '   * @param  _token_and_EOA_Addresses Tokan and user addresses.\n', '   * @param  _amountsExpirationAndSalt Offer and want token amount and expiration and salt values.\n', '   * @param _sig_v All order signature v values.\n', '   * @param _sig_r_and_s All order signature r and r values.\n', '   * @return The success of this transaction.\n', '   */\n', '  function batchExecuteOrder(\n', '    address[4][] _token_and_EOA_Addresses,\n', '    uint256[8][] _amountsExpirationAndSalt, // Packing to save stack size\n', '    uint8[2][] _sig_v,\n', '    bytes32[4][] _sig_r_and_s\n', '  ) external\n', '    returns(bool)\n', '  {\n', '    for (uint256 i = 0; i < _amountsExpirationAndSalt.length; i++) {\n', '      require(executeOrder(\n', '        _token_and_EOA_Addresses[i],\n', '        _amountsExpirationAndSalt[i],\n', '        _sig_v[i],\n', '        _sig_r_and_s[i]\n', '      ));\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Execute an order that was submitted by the external order book server.\n', '   * The order book server believes it to be a match.\n', '   * There are components for both orders, maker and taker, 2 signatures as well.\n', '   * @param _token_and_EOA_Addresses The addresses of the maker and taker EOAs and offered token contracts.\n', '   * [makerEOA, makerOfferToken, takerEOA, takerOfferToken]\n', '   * @param _amountsExpirationAndSalt The amount of tokens, [makerOffer, makerWant, takerOffer, takerWant].\n', '   * and the block number at which this order expires\n', '   * and a random number to mitigate replay. [makerExpiry, makerSalt, takerExpiry, takerSalt]\n', '   * @param _sig_v ECDSA signature parameter v, maker 0 and taker 1.\n', '   * @param _sig_r_and_s ECDSA signature parameters r ans s, maker 0, 1 and taker 2, 3.\n', '   * @return Success of the transaction, false if error condition met.\n', '   * Like types grouped to eliminate stack depth error\n', '   */\n', '  function executeOrder (\n', '    address[4] _token_and_EOA_Addresses,\n', '    uint256[8] _amountsExpirationAndSalt, // Packing to save stack size\n', '    uint8[2] _sig_v,\n', '    bytes32[4] _sig_r_and_s\n', '  ) public\n', '    returns(bool)\n', '  {\n', '    // Only read wallet addresses from storage once\n', '    // Need one more stack slot so squashing into array\n', '    Wallet[2] memory wallets = [\n', '      Wallet(userAccountToWallet_[_token_and_EOA_Addresses[0]]), // maker\n', '      Wallet(userAccountToWallet_[_token_and_EOA_Addresses[2]]) // taker\n', '    ];\n', '\n', '    // Basic pre-conditions, return if any input data is invalid\n', '    if(!__executeOrderInputIsValid__(\n', '      _token_and_EOA_Addresses,\n', '      _amountsExpirationAndSalt,\n', '      wallets[0],\n', '      wallets[1]\n', '    ))\n', '      return error(&#39;Input is invalid, Exchange.executeOrder()&#39;);\n', '\n', '    // Verify Maker and Taker signatures\n', '    bytes32 makerOrderHash;\n', '    bytes32 takerOrderHash;\n', '    (makerOrderHash, takerOrderHash) = __generateOrderHashes__(_token_and_EOA_Addresses, _amountsExpirationAndSalt);\n', '\n', '    if (!__signatureIsValid__(\n', '      _token_and_EOA_Addresses[0],\n', '      makerOrderHash,\n', '      _sig_v[0],\n', '      _sig_r_and_s[0],\n', '      _sig_r_and_s[1]\n', '    ))\n', '      return error(&#39;Maker signature is invalid, Exchange.executeOrder()&#39;);\n', '\n', '    if (!__signatureIsValid__(\n', '      _token_and_EOA_Addresses[2],\n', '      takerOrderHash,\n', '      _sig_v[1],\n', '      _sig_r_and_s[2],\n', '      _sig_r_and_s[3]\n', '    ))\n', '      return error(&#39;Taker signature is invalid, Exchange.executeOrder()&#39;);\n', '\n', '    // Exchange Order Verification and matching.\n', '    Order memory makerOrder = orders_[makerOrderHash];\n', '    Order memory takerOrder = orders_[takerOrderHash];\n', '\n', '    if (makerOrder.wantTokenTotal_ == 0) {  // Check for existence\n', '      makerOrder.active_ = true;\n', '      makerOrder.offerToken_ = _token_and_EOA_Addresses[1];\n', '      makerOrder.offerTokenTotal_ = _amountsExpirationAndSalt[0];\n', '      makerOrder.offerTokenRemaining_ = _amountsExpirationAndSalt[0]; // Amount to give\n', '      makerOrder.wantToken_ = _token_and_EOA_Addresses[3];\n', '      makerOrder.wantTokenTotal_ = _amountsExpirationAndSalt[1];\n', '      makerOrder.wantTokenReceived_ = 0; // Amount received\n', '    }\n', '\n', '    if (takerOrder.wantTokenTotal_ == 0) {  // Check for existence\n', '      takerOrder.active_ = true;\n', '      takerOrder.offerToken_ = _token_and_EOA_Addresses[3];\n', '      takerOrder.offerTokenTotal_ = _amountsExpirationAndSalt[2];\n', '      takerOrder.offerTokenRemaining_ = _amountsExpirationAndSalt[2];  // Amount to give\n', '      takerOrder.wantToken_ = _token_and_EOA_Addresses[1];\n', '      takerOrder.wantTokenTotal_ = _amountsExpirationAndSalt[3];\n', '      takerOrder.wantTokenReceived_ = 0; // Amount received\n', '    }\n', '\n', '    if (!__ordersMatch_and_AreVaild__(makerOrder, takerOrder))\n', '      return error(&#39;Orders do not match, Exchange.executeOrder()&#39;);\n', '\n', '    // Trade amounts\n', '    uint256 toTakerAmount;\n', '    uint256 toMakerAmount;\n', '    (toTakerAmount, toMakerAmount) = __getTradeAmounts__(makerOrder, takerOrder);\n', '\n', '    // TODO consider removing. Can this condition be met?\n', '    if (toTakerAmount < 1 || toMakerAmount < 1)\n', '      return error(&#39;Token amount < 1, price ratio is invalid! Token value < 1, Exchange.executeOrder()&#39;);\n', '\n', '    // Taker is offering edo tokens so ensure sufficient balance in order to offer edo and pay fee in edo\n', '    if (\n', '        takerOrder.offerToken_ == edoToken_ &&\n', '        Token(edoToken_).balanceOf(wallets[1]) < __calculateFee__(makerOrder, toTakerAmount, toMakerAmount).add(toMakerAmount)\n', '      ) {\n', '        return error(&#39;Taker has an insufficient EDO token balance to cover the fee AND the offer, Exchange.executeOrder()&#39;);\n', '    // Taker has sufficent EDO token balance to pay the fee\n', '    } else if (Token(edoToken_).balanceOf(wallets[1]) < __calculateFee__(makerOrder, toTakerAmount, toMakerAmount))\n', '      return error(&#39;Taker has an insufficient EDO token balance to cover the fee, Exchange.executeOrder()&#39;);\n', '\n', '    // Wallet Order Verification, reach out to the maker and taker wallets.\n', '    if (!__ordersVerifiedByWallets__(\n', '        _token_and_EOA_Addresses,\n', '        toMakerAmount,\n', '        toTakerAmount,\n', '        wallets[0],\n', '        wallets[1],\n', '        __calculateFee__(makerOrder, toTakerAmount, toMakerAmount)\n', '      ))\n', '      return error(&#39;Order could not be verified by wallets, Exchange.executeOrder()&#39;);\n', '\n', '    // Order Execution, Order Fully Verified by this point, time to execute!\n', '    // Local order structs\n', '    __updateOrders__(makerOrder, takerOrder, toTakerAmount, toMakerAmount);\n', '\n', '    // Write to storage then external calls\n', '    //  Update orders active flag if filled\n', '    if (makerOrder.offerTokenRemaining_ == 0)\n', '      makerOrder.active_ = false;\n', '\n', '    if (takerOrder.offerTokenRemaining_ == 0)\n', '      takerOrder.active_ = false;\n', '\n', '    // Finally write orders to storage\n', '    orders_[makerOrderHash] = makerOrder;\n', '    orders_[takerOrderHash] = takerOrder;\n', '\n', '    // Transfer the external value, ether <> tokens\n', '    require(\n', '      __executeTokenTransfer__(\n', '        _token_and_EOA_Addresses,\n', '        toTakerAmount,\n', '        toMakerAmount,\n', '        __calculateFee__(makerOrder, toTakerAmount, toMakerAmount),\n', '        wallets[0],\n', '        wallets[1]\n', '      )\n', '    );\n', '\n', '    // Log the order id(hash), amount of offer given, amount of offer remaining\n', '    LogOrderFilled(makerOrderHash, toTakerAmount, makerOrder.offerTokenRemaining_);\n', '    LogOrderFilled(takerOrderHash, toMakerAmount, takerOrder.offerTokenRemaining_);\n', '\n', '    LogOrderExecutionSuccess();\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Set the rate of wei per edo token in or to calculate edo fee\n', '   * @param _edoPerWei Rate of edo tokens per wei.\n', '   * @return Success of the transaction.\n', '   */\n', '  function setEdoRate(\n', '    uint256 _edoPerWei\n', '  ) external\n', '    returns(bool)\n', '  {\n', '    if (msg.sender != owner_)\n', '      return error(&#39;msg.sender != owner, Exchange.setEdoRate()&#39;);\n', '\n', '    edoPerWei_ = _edoPerWei;\n', '\n', '    LogEdoRateSet(edoPerWei_);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Set the wallet for fees to be paid to.\n', '   * @param _eidooWallet Wallet to pay fees to.\n', '   * @return Success of the transaction.\n', '   */\n', '  function setEidooWallet(\n', '    address _eidooWallet\n', '  ) external\n', '    returns(bool)\n', '  {\n', '    if (msg.sender != owner_)\n', '      return error(&#39;msg.sender != owner, Exchange.setEidooWallet()&#39;);\n', '\n', '    eidooWallet_ = _eidooWallet;\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Set the minimum amount of ether required per order.\n', '   * @param _minOrderEthAmount Min amount of ether required per order.\n', '   * @return Success of the transaction.\n', '   */\n', '  function setMinOrderEthAmount (\n', '    uint256 _minOrderEthAmount\n', '  ) external\n', '    returns(bool)\n', '  {\n', '    if (msg.sender != owner_)\n', '      return error(&#39;msg.sender != owner, Exchange.setMinOrderEtherAmount()&#39;);\n', '\n', '    minOrderEthAmount_ = _minOrderEthAmount;\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Set a new order book account.\n', '   * @param _account The new order book account.\n', '   */\n', '  function setOrderBookAcount (\n', '    address _account\n', '  ) external\n', '    returns(bool)\n', '  {\n', '    if (msg.sender != owner_)\n', '      return error(&#39;msg.sender != owner, Exchange.setOrderBookAcount()&#39;);\n', '\n', '    orderBookAccount_ = _account;\n', '    return true;\n', '  }\n', '\n', '  /*\n', '   Methods to catch events from external contracts, user wallets primarily\n', '   */\n', '\n', '  /**\n', '   * @dev Simply log the event to track wallet interaction off-chain\n', '   * @param _token The address of the token that was deposited.\n', '   * @param _amount The amount of the token that was deposited.\n', '   * @param _walletBalance The updated balance of the wallet after deposit.\n', '   */\n', '  function walletDeposit(\n', '    address _token,\n', '    uint256 _amount,\n', '    uint256 _walletBalance\n', '  ) external\n', '  {\n', '    LogWalletDeposit(msg.sender, _token, _amount, _walletBalance);\n', '  }\n', '\n', '  /**\n', '   * @dev Simply log the event to track wallet interaction off-chain\n', '   * @param _token The address of the token that was deposited.\n', '   * @param _amount The amount of the token that was deposited.\n', '   * @param _walletBalance The updated balance of the wallet after deposit.\n', '   */\n', '  function walletWithdrawal(\n', '    address _token,\n', '    uint256 _amount,\n', '    uint256 _walletBalance\n', '  ) external\n', '  {\n', '    LogWalletWithdrawal(msg.sender, _token, _amount, _walletBalance);\n', '  }\n', '\n', '  /**\n', '   * Private\n', '   */\n', '\n', '  /**\n', '   * Calculate the fee for the given trade. Calculated as the set % of the wei amount\n', '   * converted into EDO tokens using the manually set conversion ratio.\n', '   * @param _makerOrder The maker order object.\n', '   * @param _toTaker The amount of tokens going to the taker.\n', '   * @param _toMaker The amount of tokens going to the maker.\n', '   * @return The total fee to be paid in EDO tokens.\n', '   */\n', '  function __calculateFee__(\n', '    Order _makerOrder,\n', '    uint256 _toTaker,\n', '    uint256 _toMaker\n', '  ) private\n', '    constant\n', '    returns(uint256)\n', '  {\n', '    // weiAmount * (fee %) * (EDO/Wei) / (decimals in edo/wei) / (decimals in percentage)\n', '    if (_makerOrder.offerToken_ == address(0)) {\n', '      return _toTaker.mul(edoPerWei_).div(10**edoPerWeiDecimals_);\n', '    } else {\n', '      return _toMaker.mul(edoPerWei_).div(10**edoPerWeiDecimals_);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Verify the input to order execution is valid.\n', '   * @param _token_and_EOA_Addresses The addresses of the maker and taker EOAs and offered token contracts.\n', '   * [makerEOA, makerOfferToken, takerEOA, takerOfferToken]\n', '   * @param _amountsExpirationAndSalt The amount of tokens, [makerOffer, makerWant, takerOffer, takerWant].\n', '   * as well as The block number at which this order expires, maker[4] and taker[6].\n', '   * @return Success if all checks pass.\n', '   */\n', '  function __executeOrderInputIsValid__(\n', '    address[4] _token_and_EOA_Addresses,\n', '    uint256[8] _amountsExpirationAndSalt,\n', '    address _makerWallet,\n', '    address _takerWallet\n', '  ) private\n', '    constant\n', '    returns(bool)\n', '  {\n', '    if (msg.sender != orderBookAccount_)\n', '      return error(&#39;msg.sender != orderBookAccount, Exchange.__executeOrderInputIsValid__()&#39;);\n', '\n', '    if (block.number > _amountsExpirationAndSalt[4])\n', '      return error(&#39;Maker order has expired, Exchange.__executeOrderInputIsValid__()&#39;);\n', '\n', '    if (block.number > _amountsExpirationAndSalt[6])\n', '      return error(&#39;Taker order has expired, Exchange.__executeOrderInputIsValid__()&#39;);\n', '\n', '    // Wallets\n', '    if (_makerWallet == address(0))\n', '      return error(&#39;Maker wallet does not exist, Exchange.__executeOrderInputIsValid__()&#39;);\n', '\n', '    if (_takerWallet == address(0))\n', '      return error(&#39;Taker wallet does not exist, Exchange.__executeOrderInputIsValid__()&#39;);\n', '\n', '    // Tokens, addresses and amounts, ether exists\n', '    if (_token_and_EOA_Addresses[1] != address(0) && _token_and_EOA_Addresses[3] != address(0))\n', '      return error(&#39;Ether omitted! Is not offered by either the Taker or Maker, Exchange.__executeOrderInputIsValid__()&#39;);\n', '\n', '    if (_token_and_EOA_Addresses[1] == address(0) && _token_and_EOA_Addresses[3] == address(0))\n', '      return error(&#39;Taker and Maker offer token are both ether, Exchange.__executeOrderInputIsValid__()&#39;);\n', '\n', '    if (\n', '        _amountsExpirationAndSalt[0] == 0 ||\n', '        _amountsExpirationAndSalt[1] == 0 ||\n', '        _amountsExpirationAndSalt[2] == 0 ||\n', '        _amountsExpirationAndSalt[3] == 0\n', '      )\n', '      return error(&#39;May not execute an order where token amount == 0, Exchange.__executeOrderInputIsValid__()&#39;);\n', '\n', '    // Confirm order ether amount >= min amount\n', '    // Maker\n', '    uint256 minOrderEthAmount = minOrderEthAmount_; // Single storage read\n', '    if (_token_and_EOA_Addresses[1] == 0 && _amountsExpirationAndSalt[0] < minOrderEthAmount)\n', '      return error(&#39;Maker order does not meet the minOrderEthAmount_ of ether, Exchange.__executeOrderInputIsValid__()&#39;);\n', '\n', '    // Taker\n', '    if (_token_and_EOA_Addresses[3] == 0 && _amountsExpirationAndSalt[2] < minOrderEthAmount)\n', '      return error(&#39;Taker order does not meet the minOrderEthAmount_ of ether, Exchange.__executeOrderInputIsValid__()&#39;);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Execute the external transfer of tokens.\n', '   * @param _token_and_EOA_Addresses The addresses of the maker and taker EOAs and offered token contracts.\n', '   * [makerEOA, makerOfferToken, takerEOA, takerOfferToken]\n', '   * @param _toTakerAmount The amount of tokens to transfer to the taker.\n', '   * @param _toMakerAmount The amount of tokens to transfer to the maker.\n', '   * @return Success if both wallets verify the order.\n', '   */\n', '  function __executeTokenTransfer__(\n', '    address[4] _token_and_EOA_Addresses,\n', '    uint256 _toTakerAmount,\n', '    uint256 _toMakerAmount,\n', '    uint256 _fee,\n', '    Wallet _makerWallet,\n', '    Wallet _takerWallet\n', '  ) private\n', '    returns (bool)\n', '  {\n', '    // Wallet mapping balances\n', '    address makerOfferToken = _token_and_EOA_Addresses[1];\n', '    address takerOfferToken = _token_and_EOA_Addresses[3];\n', '\n', '    // Taker to pay fee before trading\n', '    require(_takerWallet.updateBalance(edoToken_, _fee, true));  // Subtraction flag\n', '    require(Token(edoToken_).transferFrom(_takerWallet, eidooWallet_, _fee));\n', '\n', '    // Move the toTakerAmount from the maker to the taker\n', '    require(_makerWallet.updateBalance(makerOfferToken, _toTakerAmount, true));  // Subtraction flag\n', '      /*return error(&#39;Unable to subtract maker token from maker wallet, Exchange.__executeTokenTransfer__()&#39;);*/\n', '\n', '    require(_takerWallet.updateBalance(makerOfferToken, _toTakerAmount, false));\n', '      /*return error(&#39;Unable to add maker token to taker wallet, Exchange.__executeTokenTransfer__()&#39;);*/\n', '\n', '    // Move the toMakerAmount from the taker to the maker\n', '    require(_takerWallet.updateBalance(takerOfferToken, _toMakerAmount, true));  // Subtraction flag\n', '      /*return error(&#39;Unable to subtract taker token from taker wallet, Exchange.__executeTokenTransfer__()&#39;);*/\n', '\n', '    require(_makerWallet.updateBalance(takerOfferToken, _toMakerAmount, false));\n', '      /*return error(&#39;Unable to add taker token to maker wallet, Exchange.__executeTokenTransfer__()&#39;);*/\n', '\n', '    // Contract ether balances and token contract balances\n', '    // Ether to the taker and tokens to the maker\n', '    if (makerOfferToken == address(0)) {\n', '      _takerWallet.transfer(_toTakerAmount);\n', '      require(\n', '        Token(takerOfferToken).transferFrom(_takerWallet, _makerWallet, _toMakerAmount)\n', '      );\n', '      assert(\n', '        __tokenAndWalletBalancesMatch__(_makerWallet, _takerWallet, takerOfferToken)\n', '      );\n', '\n', '    // Ether to the maker and tokens to the taker\n', '    } else if (takerOfferToken == address(0)) {\n', '      _makerWallet.transfer(_toMakerAmount);\n', '      require(\n', '        Token(makerOfferToken).transferFrom(_makerWallet, _takerWallet, _toTakerAmount)\n', '      );\n', '      assert(\n', '        __tokenAndWalletBalancesMatch__(_makerWallet, _takerWallet, makerOfferToken)\n', '      );\n', '\n', '    // Something went wrong one had to have been ether\n', '    } else revert();\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev compute the log10 of a given number, takes the floor, ie. 2.5 = 2\n', '   * @param _number The number to compute the log 10 of.\n', '   * @return The floored log 10.\n', '   */\n', '  function __flooredLog10__(uint _number)\n', '    public\n', '    constant\n', '    returns (uint256)\n', '  {\n', '    uint unit = 0;\n', '    while (_number / (10**unit) >= 10)\n', '      unit++;\n', '    return unit;\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates Keccak-256 hash of order with specified parameters.\n', '   * @param _token_and_EOA_Addresses The addresses of the order, [makerEOA, makerOfferToken, makerWantToken].\n', '   * @param _amountsExpirationAndSalt The amount of tokens as well as\n', '   * the block number at which this order expires and random salt number.\n', '   * @return Keccak-256 hash of each order.\n', '   */\n', '  function __generateOrderHashes__(\n', '    address[4] _token_and_EOA_Addresses,\n', '    uint256[8] _amountsExpirationAndSalt\n', '  ) private\n', '    constant\n', '    returns (bytes32, bytes32)\n', '  {\n', '    bytes32 makerOrderHash = keccak256(\n', '      address(this),\n', '      _token_and_EOA_Addresses[0], // _makerEOA\n', '      _token_and_EOA_Addresses[1], // offerToken\n', '      _amountsExpirationAndSalt[0],  // offerTokenAmount\n', '      _token_and_EOA_Addresses[3], // wantToken\n', '      _amountsExpirationAndSalt[1],  // wantTokenAmount\n', '      _amountsExpirationAndSalt[4], // expiry\n', '      _amountsExpirationAndSalt[5] // salt\n', '    );\n', '\n', '\n', '    bytes32 takerOrderHash = keccak256(\n', '      address(this),\n', '      _token_and_EOA_Addresses[2], // _makerEOA\n', '      _token_and_EOA_Addresses[3], // offerToken\n', '      _amountsExpirationAndSalt[2],  // offerTokenAmount\n', '      _token_and_EOA_Addresses[1], // wantToken\n', '      _amountsExpirationAndSalt[3],  // wantTokenAmount\n', '      _amountsExpirationAndSalt[6], // expiry\n', '      _amountsExpirationAndSalt[7] // salt\n', '    );\n', '\n', '    return (makerOrderHash, takerOrderHash);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the price ratio for this order.\n', '   * The ratio is calculated with the largest value as the numerator, this aids\n', '   * to significantly reduce rounding errors.\n', '   * @param _makerOrder The maker order data structure.\n', '   * @return The ratio to `_decimals` decimal places.\n', '   */\n', '  function __getOrderPriceRatio__(Order _makerOrder, uint256 _decimals)\n', '    private\n', '    constant\n', '    returns (uint256 orderPriceRatio)\n', '  {\n', '    if (_makerOrder.offerTokenTotal_ >= _makerOrder.wantTokenTotal_) {\n', '      orderPriceRatio = _makerOrder.offerTokenTotal_.mul(10**_decimals).div(_makerOrder.wantTokenTotal_);\n', '    } else {\n', '      orderPriceRatio = _makerOrder.wantTokenTotal_.mul(10**_decimals).div(_makerOrder.offerTokenTotal_);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Compute the tradeable amounts of the two verified orders.\n', '   * Token amount is the min remaining between want and offer of the two orders that isn&#39;t ether.\n', '   * Ether amount is then: etherAmount = tokenAmount * priceRatio, as ratio = eth / token.\n', '   * @param _makerOrder The maker order data structure.\n', '   * @param _takerOrder The taker order data structure.\n', '   * @return The amount moving from makerOfferRemaining to takerWantRemaining and vice versa.\n', '   * TODO: consider rounding errors, etc\n', '   */\n', '  function __getTradeAmounts__(\n', '    Order _makerOrder,\n', '    Order _takerOrder\n', '  ) private\n', '    constant\n', '    returns (uint256 toTakerAmount, uint256 toMakerAmount)\n', '  {\n', '    bool ratioIsWeiPerTok = __ratioIsWeiPerTok__(_makerOrder);\n', '    uint256 decimals = __flooredLog10__(__max__(_makerOrder.offerTokenTotal_, _makerOrder.wantTokenTotal_)) + 1;\n', '    uint256 priceRatio = __getOrderPriceRatio__(_makerOrder, decimals);\n', '\n', '    // Amount left for order to receive\n', '    uint256 makerAmountLeftToReceive = _makerOrder.wantTokenTotal_.sub(_makerOrder.wantTokenReceived_);\n', '    uint256 takerAmountLeftToReceive = _takerOrder.wantTokenTotal_.sub(_takerOrder.wantTokenReceived_);\n', '\n', '    // wei/tok and taker receiving wei or tok/wei and taker receiving tok\n', '    if (\n', '        ratioIsWeiPerTok && _takerOrder.wantToken_ == address(0) ||\n', '        !ratioIsWeiPerTok && _takerOrder.wantToken_ != address(0)\n', '    ) {\n', '      // In the case that the maker is offering more than the taker wants for the same quantity being offered\n', '      // For example: maker offer 20 wei for 10 tokens but taker offers 10 tokens for 10 wei\n', '      // Taker receives 20 wei for the 10 tokens, both orders filled\n', '      if (\n', '        _makerOrder.offerTokenRemaining_ > takerAmountLeftToReceive &&\n', '        makerAmountLeftToReceive <= _takerOrder.offerTokenRemaining_\n', '      ) {\n', '        toTakerAmount = __max__(_makerOrder.offerTokenRemaining_, takerAmountLeftToReceive);\n', '      } else {\n', '        toTakerAmount = __min__(_makerOrder.offerTokenRemaining_, takerAmountLeftToReceive);\n', '      }\n', '\n', '      toMakerAmount = toTakerAmount.mul(10**decimals).div(priceRatio);\n', '\n', '    // wei/tok and maker receiving wei or tok/wei and maker receiving tok\n', '    } else {\n', '      toMakerAmount = __min__(_takerOrder.offerTokenRemaining_, makerAmountLeftToReceive);\n', '      toTakerAmount = toMakerAmount.mul(10**decimals).div(priceRatio);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Return the maximum of two uints\n', '   * @param _a Uint 1\n', '   * @param _b Uint 2\n', '   * @return The grater value or a if equal\n', '   */\n', '  function __max__(uint256 _a, uint256 _b)\n', '    private\n', '    constant\n', '    returns (uint256)\n', '  {\n', '    return _a < _b ? _b : _a;\n', '  }\n', '\n', '  /**\n', '   * @dev Return the minimum of two uints\n', '   * @param _a Uint 1\n', '   * @param _b Uint 2\n', '   * @return The smallest value or b if equal\n', '   */\n', '  function __min__(uint256 _a, uint256 _b)\n', '    private\n', '    constant\n', '    returns (uint256)\n', '  {\n', '    return _a < _b ? _a : _b;\n', '  }\n', '\n', '  /**\n', '   * @dev Define if the ratio to be used is wei/tok to tok/wei. Largest uint will\n', '   * always act as the numerator.\n', '   * @param _makerOrder The maker order object.\n', '   * @return If the ratio is wei/tok or not.\n', '   */\n', '  function __ratioIsWeiPerTok__(Order _makerOrder)\n', '    private\n', '    constant\n', '    returns (bool)\n', '  {\n', '    bool offerIsWei = _makerOrder.offerToken_ == address(0) ? true : false;\n', '\n', '    // wei/tok\n', '    if (offerIsWei && _makerOrder.offerTokenTotal_ >= _makerOrder.wantTokenTotal_) {\n', '      return true;\n', '\n', '    } else if (!offerIsWei && _makerOrder.wantTokenTotal_ >= _makerOrder.offerTokenTotal_) {\n', '      return true;\n', '\n', '    // tok/wei. otherwise wanting wei && offer > want, OR offer wei && want > offer\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Confirm that the orders do match and are valid.\n', '   * @param _makerOrder The maker order data structure.\n', '   * @param _takerOrder The taker order data structure.\n', '   * @return Bool if the orders passes all checks.\n', '   */\n', '  function __ordersMatch_and_AreVaild__(\n', '    Order _makerOrder,\n', '    Order _takerOrder\n', '  ) private\n', '    constant\n', '    returns (bool)\n', '  {\n', '    // Orders still active\n', '    if (!_makerOrder.active_)\n', '      return error(&#39;Maker order is inactive, Exchange.__ordersMatch_and_AreVaild__()&#39;);\n', '\n', '    if (!_takerOrder.active_)\n', '      return error(&#39;Taker order is inactive, Exchange.__ordersMatch_and_AreVaild__()&#39;);\n', '\n', '    // Confirm tokens match\n', '    // NOTE potentially omit as matching handled upstream?\n', '    if (_makerOrder.wantToken_ != _takerOrder.offerToken_)\n', '      return error(&#39;Maker wanted token does not match taker offer token, Exchange.__ordersMatch_and_AreVaild__()&#39;);\n', '\n', '    if (_makerOrder.offerToken_ != _takerOrder.wantToken_)\n', '      return error(&#39;Maker offer token does not match taker wanted token, Exchange.__ordersMatch_and_AreVaild__()&#39;);\n', '\n', '    // Price Ratios, to x decimal places hence * decimals, dependent on the size of the denominator.\n', '    // Ratios are relative to eth, amount of ether for a single token, ie. ETH / GNO == 0.2 Ether per 1 Gnosis\n', '    uint256 orderPrice;  // The price the maker is willing to accept\n', '    uint256 offeredPrice; // The offer the taker has given\n', '    uint256 decimals = _makerOrder.offerToken_ == address(0) ? __flooredLog10__(_makerOrder.wantTokenTotal_) : __flooredLog10__(_makerOrder.offerTokenTotal_);\n', '\n', '    // Ratio = larger amount / smaller amount\n', '    if (_makerOrder.offerTokenTotal_ >= _makerOrder.wantTokenTotal_) {\n', '      orderPrice = _makerOrder.offerTokenTotal_.mul(10**decimals).div(_makerOrder.wantTokenTotal_);\n', '      offeredPrice = _takerOrder.wantTokenTotal_.mul(10**decimals).div(_takerOrder.offerTokenTotal_);\n', '\n', '      // ie. Maker is offering 10 ETH for 100 GNO but taker is offering 100 GNO for 20 ETH, no match!\n', '      // The taker wants more ether than the maker is offering.\n', '      if (orderPrice < offeredPrice)\n', '        return error(&#39;Taker price is greater than maker price, Exchange.__ordersMatch_and_AreVaild__()&#39;);\n', '\n', '    } else {\n', '      orderPrice = _makerOrder.wantTokenTotal_.mul(10**decimals).div(_makerOrder.offerTokenTotal_);\n', '      offeredPrice = _takerOrder.offerTokenTotal_.mul(10**decimals).div(_takerOrder.wantTokenTotal_);\n', '\n', '      // ie. Maker is offering 100 GNO for 10 ETH but taker is offering 5 ETH for 100 GNO, no match!\n', '      // The taker is not offering enough ether for the maker\n', '      if (orderPrice > offeredPrice)\n', '        return error(&#39;Taker price is less than maker price, Exchange.__ordersMatch_and_AreVaild__()&#39;);\n', '\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Ask each wallet to verify this order.\n', '   * @param _token_and_EOA_Addresses The addresses of the maker and taker EOAs and offered token contracts.\n', '   * [makerEOA, makerOfferToken, takerEOA, takerOfferToken]\n', '   * @param _toMakerAmount The amount of tokens to be sent to the maker.\n', '   * @param _toTakerAmount The amount of tokens to be sent to the taker.\n', '   * @param _makerWallet The maker&#39;s wallet contract.\n', '   * @param _takerWallet The taker&#39;s wallet contract.\n', '   * @param _fee The fee to be paid for this trade, paid in full by taker.\n', '   * @return Success if both wallets verify the order.\n', '   */\n', '  function __ordersVerifiedByWallets__(\n', '    address[4] _token_and_EOA_Addresses,\n', '    uint256 _toMakerAmount,\n', '    uint256 _toTakerAmount,\n', '    Wallet _makerWallet,\n', '    Wallet _takerWallet,\n', '    uint256 _fee\n', '  ) private\n', '    constant\n', '    returns (bool)\n', '  {\n', '    // Have the transaction verified by both maker and taker wallets\n', '    // confirm sufficient balance to transfer, offerToken and offerTokenAmount\n', '    if(!_makerWallet.verifyOrder(_token_and_EOA_Addresses[1], _toTakerAmount, 0, 0))\n', '      return error(&#39;Maker wallet could not verify the order, Exchange.__ordersVerifiedByWallets__()&#39;);\n', '\n', '    if(!_takerWallet.verifyOrder(_token_and_EOA_Addresses[3], _toMakerAmount, _fee, edoToken_))\n', '      return error(&#39;Taker wallet could not verify the order, Exchange.__ordersVerifiedByWallets__()&#39;);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev On chain verification of an ECDSA ethereum signature.\n', '   * @param _signer The EOA address of the account that supposedly signed the message.\n', '   * @param _orderHash The on-chain generated hash for the order.\n', '   * @param _v ECDSA signature parameter v.\n', '   * @param _r ECDSA signature parameter r.\n', '   * @param _s ECDSA signature parameter s.\n', '   * @return Bool if the signature is valid or not.\n', '   */\n', '  function __signatureIsValid__(\n', '    address _signer,\n', '    bytes32 _orderHash,\n', '    uint8 _v,\n', '    bytes32 _r,\n', '    bytes32 _s\n', '  ) private\n', '    constant\n', '    returns (bool)\n', '  {\n', '    address recoveredAddr = ecrecover(\n', '      keccak256(&#39;\\x19Ethereum Signed Message:\\n32&#39;, _orderHash),\n', '      _v, _r, _s\n', '    );\n', '\n', '    return recoveredAddr == _signer;\n', '  }\n', '\n', '  /**\n', '   * @dev Confirm wallet local balances and token balances match.\n', '   * @param _makerWallet  Maker wallet address.\n', '   * @param _takerWallet  Taker wallet address.\n', '   * @param _token  Token address to confirm balances match.\n', '   * @return If the balances do match.\n', '   */\n', '  function __tokenAndWalletBalancesMatch__(\n', '    address _makerWallet,\n', '    address _takerWallet,\n', '    address _token\n', '  ) private\n', '    constant\n', '    returns(bool)\n', '  {\n', '    if (Token(_token).balanceOf(_makerWallet) != Wallet(_makerWallet).balanceOf(_token))\n', '      return false;\n', '\n', '    if (Token(_token).balanceOf(_takerWallet) != Wallet(_takerWallet).balanceOf(_token))\n', '      return false;\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Update the order structs.\n', '   * @param _makerOrder The maker order data structure.\n', '   * @param _takerOrder The taker order data structure.\n', '   * @param _toTakerAmount The amount of tokens to be moved to the taker.\n', '   * @param _toTakerAmount The amount of tokens to be moved to the maker.\n', '   * @return Success if the update succeeds.\n', '   */\n', '  function __updateOrders__(\n', '    Order _makerOrder,\n', '    Order _takerOrder,\n', '    uint256 _toTakerAmount,\n', '    uint256 _toMakerAmount\n', '  ) private\n', '  {\n', '    // taker => maker\n', '    _makerOrder.wantTokenReceived_ = _makerOrder.wantTokenReceived_.add(_toMakerAmount);\n', '    _takerOrder.offerTokenRemaining_ = _takerOrder.offerTokenRemaining_.sub(_toMakerAmount);\n', '\n', '    // maker => taker\n', '    _takerOrder.wantTokenReceived_ = _takerOrder.wantTokenReceived_.add(_toTakerAmount);\n', '    _makerOrder.offerTokenRemaining_ = _makerOrder.offerTokenRemaining_.sub(_toTakerAmount);\n', '  }\n', '}']
['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title Log Various Error Types\n', ' * @author Adam Lemmon <adam@oraclize.it>\n', ' * @dev Inherit this contract and your may now log errors easily\n', ' * To support various error types, params, etc.\n', ' */\n', 'contract LoggingErrors {\n', '  /**\n', '  * Events\n', '  */\n', '  event LogErrorString(string errorString);\n', '\n', '  /**\n', '  * Error cases\n', '  */\n', '\n', '  /**\n', '   * @dev Default error to simply log the error message and return\n', '   * @param _errorMessage The error message to log\n', '   * @return ALWAYS false\n', '   */\n', '  function error(string _errorMessage) internal returns(bool) {\n', '    LogErrorString(_errorMessage);\n', '    return false;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Wallet Connector\n', ' * @dev Connect the wallet contract to the correct Wallet Logic version\n', ' */\n', 'contract WalletConnector is LoggingErrors {\n', '  /**\n', '   * Storage\n', '   */\n', '  address public owner_;\n', '  address public latestLogic_;\n', '  uint256 public latestVersion_;\n', '  mapping(uint256 => address) public logicVersions_;\n', '  uint256 public birthBlock_;\n', '\n', '  /**\n', '   * Events\n', '   */\n', '  event LogLogicVersionAdded(uint256 version);\n', '  event LogLogicVersionRemoved(uint256 version);\n', '\n', '  /**\n', '   * @dev Constructor to set the latest logic address\n', '   * @param _latestVersion Latest version of the wallet logic\n', '   * @param _latestLogic Latest address of the wallet logic contract\n', '   */\n', '  function WalletConnector (\n', '    uint256 _latestVersion,\n', '    address _latestLogic\n', '  ) public {\n', '    owner_ = msg.sender;\n', '    latestLogic_ = _latestLogic;\n', '    latestVersion_ = _latestVersion;\n', '    logicVersions_[_latestVersion] = _latestLogic;\n', '    birthBlock_ = block.number;\n', '  }\n', '\n', '  /**\n', '   * Add a new version of the logic contract\n', '   * @param _version The version to be associated with the new contract.\n', '   * @param _logic New logic contract.\n', '   * @return Success of the transaction.\n', '   */\n', '  function addLogicVersion (\n', '    uint256 _version,\n', '    address _logic\n', '  ) external\n', '    returns(bool)\n', '  {\n', '    if (msg.sender != owner_)\n', "      return error('msg.sender != owner, WalletConnector.addLogicVersion()');\n", '\n', '    if (logicVersions_[_version] != 0)\n', "      return error('Version already exists, WalletConnector.addLogicVersion()');\n", '\n', '    // Update latest if this is the latest version\n', '    if (_version > latestVersion_) {\n', '      latestLogic_ = _logic;\n', '      latestVersion_ = _version;\n', '    }\n', '\n', '    logicVersions_[_version] = _logic;\n', '    LogLogicVersionAdded(_version);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Remove a version. Cannot remove the latest version.\n', '   * @param  _version The version to remove.\n', '   */\n', '  function removeLogicVersion(uint256 _version) external {\n', '    require(msg.sender == owner_);\n', '    require(_version != latestVersion_);\n', '    delete logicVersions_[_version];\n', '    LogLogicVersionRemoved(_version);\n', '  }\n', '\n', '  /**\n', '   * Constants\n', '   */\n', '\n', '  /**\n', '   * Called from user wallets in order to upgrade their logic.\n', '   * @param _version The version to upgrade to. NOTE pass in 0 to upgrade to latest.\n', '   * @return The address of the logic contract to upgrade to.\n', '   */\n', '  function getLogic(uint256 _version)\n', '    external\n', '    constant\n', '    returns(address)\n', '  {\n', '    if (_version == 0)\n', '      return latestLogic_;\n', '    else\n', '      return logicVersions_[_version];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Wallet to hold and trade ERC20 tokens and ether\n', ' * @author Adam Lemmon <adam@oraclize.it>\n', ' * @dev User wallet to interact with the exchange.\n', ' * all tokens and ether held in this wallet, 1 to 1 mapping to user EOAs.\n', ' */\n', 'contract Wallet is LoggingErrors {\n', '  /**\n', '   * Storage\n', '   */\n', '  // Vars included in wallet logic "lib", the order must match between Wallet and Logic\n', '  address public owner_;\n', '  address public exchange_;\n', '  mapping(address => uint256) public tokenBalances_;\n', '\n', '  address public logic_; // storage location 0x3 loaded for delegatecalls so this var must remain at index 3\n', '  uint256 public birthBlock_;\n', '\n', '  // Address updated at deploy time\n', '  WalletConnector private connector_ = WalletConnector(0x03d6e7b2f48120fd57a89ff0bbd56e9ec39af21c);\n', '\n', '  /**\n', '   * Events\n', '   */\n', '  event LogDeposit(address token, uint256 amount, uint256 balance);\n', '  event LogWithdrawal(address token, uint256 amount, uint256 balance);\n', '\n', '  /**\n', '   * @dev Contract consturtor. Set user as owner and connector address.\n', "   * @param _owner The address of the user's EOA, wallets created from the exchange\n", '   * so must past in the owner address, msg.sender == exchange.\n', '   */\n', '  function Wallet(address _owner) public {\n', '    owner_ = _owner;\n', '    exchange_ = msg.sender;\n', '    logic_ = connector_.latestLogic_();\n', '    birthBlock_ = block.number;\n', '  }\n', '\n', '  /**\n', '   * @dev Fallback - Only enable funds to be sent from the exchange.\n', '   * Ensures balances will be consistent.\n', '   */\n', '  function () external payable {\n', '    require(msg.sender == exchange_);\n', '  }\n', '\n', '  /**\n', '  * External\n', '  */\n', '\n', '  /**\n', '   * @dev Deposit ether into this wallet, default to address 0 for consistent token lookup.\n', '   */\n', '  function depositEther()\n', '    external\n', '    payable\n', '  {\n', "    require(logic_.delegatecall(bytes4(sha3('deposit(address,uint256)')), 0, msg.value));\n", '  }\n', '\n', '  /**\n', '   * @dev Deposit any ERC20 token into this wallet.\n', '   * @param _token The address of the existing token contract.\n', '   * @param _amount The amount of tokens to deposit.\n', '   * @return Bool if the deposit was successful.\n', '   */\n', '  function depositERC20Token (\n', '    address _token,\n', '    uint256 _amount\n', '  ) external\n', '    returns(bool)\n', '  {\n', '    // ether\n', '    if (_token == 0)\n', "      return error('Cannot deposit ether via depositERC20, Wallet.depositERC20Token()');\n", '\n', "    require(logic_.delegatecall(bytes4(sha3('deposit(address,uint256)')), _token, _amount));\n", '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev The result of an order, update the balance of this wallet.\n', '   * @param _token The address of the token balance to update.\n', '   * @param _amount The amount to update the balance by.\n', '   * @param _subtractionFlag If true then subtract the token amount else add.\n', '   * @return Bool if the update was successful.\n', '   */\n', '  function updateBalance (\n', '    address _token,\n', '    uint256 _amount,\n', '    bool _subtractionFlag\n', '  ) external\n', '    returns(bool)\n', '  {\n', '    assembly {\n', '      calldatacopy(0x40, 0, calldatasize)\n', '      delegatecall(gas, sload(0x3), 0x40, calldatasize, 0, 32)\n', '      return(0, 32)\n', '      pop\n', '    }\n', '  }\n', '\n', '  /**\n', '   * User may update to the latest version of the exchange contract.\n', '   * Note that multiple versions are NOT supported at this time and therefore if a\n', '   * user does not wish to update they will no longer be able to use the exchange.\n', '   * @param _exchange The new exchange.\n', '   * @return Success of this transaction.\n', '   */\n', '  function updateExchange(address _exchange)\n', '    external\n', '    returns(bool)\n', '  {\n', '    if (msg.sender != owner_)\n', "      return error('msg.sender != owner_, Wallet.updateExchange()');\n", '\n', '    // If subsequent messages are not sent from this address all orders will fail\n', '    exchange_ = _exchange;\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * User may update to a new or older version of the logic contract.\n', '   * @param _version The versin to update to.\n', '   * @return Success of this transaction.\n', '   */\n', '  function updateLogic(uint256 _version)\n', '    external\n', '    returns(bool)\n', '  {\n', '    if (msg.sender != owner_)\n', "      return error('msg.sender != owner_, Wallet.updateLogic()');\n", '\n', '    address newVersion = connector_.getLogic(_version);\n', '\n', '    // Invalid version as defined by connector\n', '    if (newVersion == 0)\n', "      return error('Invalid version, Wallet.updateLogic()');\n", '\n', '    logic_ = newVersion;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Verify an order that the Exchange has received involving this wallet.\n', '   * Internal checks and then authorize the exchange to move the tokens.\n', '   * If sending ether will transfer to the exchange to broker the trade.\n', '   * @param _token The address of the token contract being sold.\n', '   * @param _amount The amount of tokens the order is for.\n', '   * @param _fee The fee for the current trade.\n', '   * @param _feeToken The token of which the fee is to be paid in.\n', '   * @return If the order was verified or not.\n', '   */\n', '  function verifyOrder (\n', '    address _token,\n', '    uint256 _amount,\n', '    uint256 _fee,\n', '    address _feeToken\n', '  ) external\n', '    returns(bool)\n', '  {\n', '    assembly {\n', '      calldatacopy(0x40, 0, calldatasize)\n', '      delegatecall(gas, sload(0x3), 0x40, calldatasize, 0, 32)\n', '      return(0, 32)\n', '      pop\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Withdraw any token, including ether from this wallet to an EOA.\n', '   * @param _token The address of the token to withdraw.\n', '   * @param _amount The amount to withdraw.\n', '   * @return Success of the withdrawal.\n', '   */\n', '  function withdraw(address _token, uint256 _amount)\n', '    external\n', '    returns(bool)\n', '  {\n', '    if(msg.sender != owner_)\n', "      return error('msg.sender != owner, Wallet.withdraw()');\n", '\n', '    assembly {\n', '      calldatacopy(0x40, 0, calldatasize)\n', '      delegatecall(gas, sload(0x3), 0x40, calldatasize, 0, 32)\n', '      return(0, 32)\n', '      pop\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Constants\n', '   */\n', '\n', '  /**\n', '   * @dev Get the balance for a specific token.\n', '   * @param _token The address of the token contract to retrieve the balance of.\n', '   * @return The current balance within this contract.\n', '   */\n', '  function balanceOf(address _token)\n', '    public\n', '    constant\n', '    returns(uint)\n', '  {\n', '    return tokenBalances_[_token];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract Token {\n', '  /// @return total amount of tokens\n', '  function totalSupply() constant returns (uint256 supply) {}\n', '\n', '  /// @param _owner The address from which the balance will be retrieved\n', '  /// @return The balance\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '  /// @notice send `_value` token to `_to` from `msg.sender`\n', '  /// @param _to The address of the recipient\n', '  /// @param _value The amount of token to be transferred\n', '  /// @return Whether the transfer was successful or not\n', '  function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '  /// @param _from The address of the sender\n', '  /// @param _to The address of the recipient\n', '  /// @param _value The amount of token to be transferred\n', '  /// @return Whether the transfer was successful or not\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '  /// @param _spender The address of the account able to transfer the tokens\n', '  /// @param _value The amount of wei to be approved for transfer\n', '  /// @return Whether the approval was successful or not\n', '  function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '  /// @param _owner The address of the account owning tokens\n', '  /// @param _spender The address of the account able to transfer the tokens\n', '  /// @return Amount of remaining tokens allowed to spent\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '  uint public decimals;\n', '  string public name;\n', '}\n', '\n', '\n', '/**\n', ' * @title Decentralized exchange for ether and ERC20 tokens.\n', ' * @author Adam Lemmon <adam@oraclize.it>\n', ' * @dev All trades brokered by this contract.\n', ' * Orders submitted by off chain order book and this contract handles\n', ' * verification and execution of orders.\n', ' * All value between parties is transferred via this exchange.\n', ' * Methods arranged by visibility; external, public, internal, private and alphabatized within.\n', ' */\n', 'contract Exchange is LoggingErrors {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  /**\n', '   * Data Structures\n', '   */\n', '  struct Order {\n', '    bool active_;  // True: active, False: filled or cancelled\n', '    address offerToken_;\n', '    uint256 offerTokenTotal_;\n', '    uint256 offerTokenRemaining_;  // Amount left to give\n', '    address wantToken_;\n', '    uint256 wantTokenTotal_;\n', '    uint256 wantTokenReceived_;  // Amount received, note this may exceed want total\n', '  }\n', '\n', '  /**\n', '   * Storage\n', '   */\n', '  address private orderBookAccount_;\n', '  address private owner_;\n', '  uint256 public minOrderEthAmount_;\n', '  uint256 public birthBlock_;\n', '  address public edoToken_;\n', '  uint256 public edoPerWei_;\n', '  uint256 public edoPerWeiDecimals_;\n', '  address public eidooWallet_;\n', '  mapping(bytes32 => Order) public orders_; // Map order hashes to order data struct\n', '  mapping(address => address) public userAccountToWallet_; // User EOA to wallet addresses\n', '\n', '  /**\n', '   * Events\n', '   */\n', '  event LogEdoRateSet(uint256 rate);\n', '  event LogOrderExecutionSuccess();\n', '  event LogOrderFilled(bytes32 indexed orderId, uint256 fillAmount, uint256 fillRemaining);\n', '  event LogUserAdded(address indexed user, address walletAddress);\n', '  event LogWalletDeposit(address indexed walletAddress, address token, uint256 amount, uint256 balance);\n', '  event LogWalletWithdrawal(address indexed walletAddress, address token, uint256 amount, uint256 balance);\n', '\n', '  /**\n', '   * @dev Contract constructor - CONFIRM matches contract name.  Set owner and addr of order book.\n', '   * @param _bookAccount The EOA address for the order book, will submit ALL orders.\n', '   * @param _minOrderEthAmount Minimum amount of ether that each order must contain.\n', '   * @param _edoToken Deployed edo token.\n', '   * @param _edoPerWei Rate of edo tokens per wei.\n', '   * @param _edoPerWeiDecimals Decimlas carried in edo rate.\n', '   * @param _eidooWallet Wallet to pay fees to.\n', '   */\n', '  function Exchange(\n', '    address _bookAccount,\n', '    uint256 _minOrderEthAmount,\n', '    address _edoToken,\n', '    uint256 _edoPerWei,\n', '    uint256 _edoPerWeiDecimals,\n', '    address _eidooWallet\n', '  ) public {\n', '    orderBookAccount_ = _bookAccount;\n', '    minOrderEthAmount_ = _minOrderEthAmount;\n', '    owner_ = msg.sender;\n', '    birthBlock_ = block.number;\n', '    edoToken_ = _edoToken;\n', '    edoPerWei_ = _edoPerWei;\n', '    edoPerWeiDecimals_ = _edoPerWeiDecimals;\n', '    eidooWallet_ = _eidooWallet;\n', '  }\n', '\n', '  /**\n', '   * @dev Fallback. wallets utilize to send ether in order to broker trade.\n', '   */\n', '  function () external payable { }\n', '\n', '  /**\n', '   * External\n', '   */\n', '\n', '  /**\n', '   * @dev Add a new user to the exchange, create a wallet for them.\n', '   * Map their account address to the wallet contract for lookup.\n', "   * @param _userAccount The address of the user's EOA.\n", '   * @return Success of the transaction, false if error condition met.\n', '   */\n', '  function addNewUser(address _userAccount)\n', '    external\n', '    returns (bool)\n', '  {\n', '    if (userAccountToWallet_[_userAccount] != address(0))\n', "      return error('User already exists, Exchange.addNewUser()');\n", '\n', '    // Pass the userAccount address to wallet constructor so owner is not the exchange contract\n', '    address userWallet = new Wallet(_userAccount);\n', '\n', '    userAccountToWallet_[_userAccount] = userWallet;\n', '\n', '    LogUserAdded(_userAccount, userWallet);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * Execute orders in batches.\n', '   * @param  _token_and_EOA_Addresses Tokan and user addresses.\n', '   * @param  _amountsExpirationAndSalt Offer and want token amount and expiration and salt values.\n', '   * @param _sig_v All order signature v values.\n', '   * @param _sig_r_and_s All order signature r and r values.\n', '   * @return The success of this transaction.\n', '   */\n', '  function batchExecuteOrder(\n', '    address[4][] _token_and_EOA_Addresses,\n', '    uint256[8][] _amountsExpirationAndSalt, // Packing to save stack size\n', '    uint8[2][] _sig_v,\n', '    bytes32[4][] _sig_r_and_s\n', '  ) external\n', '    returns(bool)\n', '  {\n', '    for (uint256 i = 0; i < _amountsExpirationAndSalt.length; i++) {\n', '      require(executeOrder(\n', '        _token_and_EOA_Addresses[i],\n', '        _amountsExpirationAndSalt[i],\n', '        _sig_v[i],\n', '        _sig_r_and_s[i]\n', '      ));\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Execute an order that was submitted by the external order book server.\n', '   * The order book server believes it to be a match.\n', '   * There are components for both orders, maker and taker, 2 signatures as well.\n', '   * @param _token_and_EOA_Addresses The addresses of the maker and taker EOAs and offered token contracts.\n', '   * [makerEOA, makerOfferToken, takerEOA, takerOfferToken]\n', '   * @param _amountsExpirationAndSalt The amount of tokens, [makerOffer, makerWant, takerOffer, takerWant].\n', '   * and the block number at which this order expires\n', '   * and a random number to mitigate replay. [makerExpiry, makerSalt, takerExpiry, takerSalt]\n', '   * @param _sig_v ECDSA signature parameter v, maker 0 and taker 1.\n', '   * @param _sig_r_and_s ECDSA signature parameters r ans s, maker 0, 1 and taker 2, 3.\n', '   * @return Success of the transaction, false if error condition met.\n', '   * Like types grouped to eliminate stack depth error\n', '   */\n', '  function executeOrder (\n', '    address[4] _token_and_EOA_Addresses,\n', '    uint256[8] _amountsExpirationAndSalt, // Packing to save stack size\n', '    uint8[2] _sig_v,\n', '    bytes32[4] _sig_r_and_s\n', '  ) public\n', '    returns(bool)\n', '  {\n', '    // Only read wallet addresses from storage once\n', '    // Need one more stack slot so squashing into array\n', '    Wallet[2] memory wallets = [\n', '      Wallet(userAccountToWallet_[_token_and_EOA_Addresses[0]]), // maker\n', '      Wallet(userAccountToWallet_[_token_and_EOA_Addresses[2]]) // taker\n', '    ];\n', '\n', '    // Basic pre-conditions, return if any input data is invalid\n', '    if(!__executeOrderInputIsValid__(\n', '      _token_and_EOA_Addresses,\n', '      _amountsExpirationAndSalt,\n', '      wallets[0],\n', '      wallets[1]\n', '    ))\n', "      return error('Input is invalid, Exchange.executeOrder()');\n", '\n', '    // Verify Maker and Taker signatures\n', '    bytes32 makerOrderHash;\n', '    bytes32 takerOrderHash;\n', '    (makerOrderHash, takerOrderHash) = __generateOrderHashes__(_token_and_EOA_Addresses, _amountsExpirationAndSalt);\n', '\n', '    if (!__signatureIsValid__(\n', '      _token_and_EOA_Addresses[0],\n', '      makerOrderHash,\n', '      _sig_v[0],\n', '      _sig_r_and_s[0],\n', '      _sig_r_and_s[1]\n', '    ))\n', "      return error('Maker signature is invalid, Exchange.executeOrder()');\n", '\n', '    if (!__signatureIsValid__(\n', '      _token_and_EOA_Addresses[2],\n', '      takerOrderHash,\n', '      _sig_v[1],\n', '      _sig_r_and_s[2],\n', '      _sig_r_and_s[3]\n', '    ))\n', "      return error('Taker signature is invalid, Exchange.executeOrder()');\n", '\n', '    // Exchange Order Verification and matching.\n', '    Order memory makerOrder = orders_[makerOrderHash];\n', '    Order memory takerOrder = orders_[takerOrderHash];\n', '\n', '    if (makerOrder.wantTokenTotal_ == 0) {  // Check for existence\n', '      makerOrder.active_ = true;\n', '      makerOrder.offerToken_ = _token_and_EOA_Addresses[1];\n', '      makerOrder.offerTokenTotal_ = _amountsExpirationAndSalt[0];\n', '      makerOrder.offerTokenRemaining_ = _amountsExpirationAndSalt[0]; // Amount to give\n', '      makerOrder.wantToken_ = _token_and_EOA_Addresses[3];\n', '      makerOrder.wantTokenTotal_ = _amountsExpirationAndSalt[1];\n', '      makerOrder.wantTokenReceived_ = 0; // Amount received\n', '    }\n', '\n', '    if (takerOrder.wantTokenTotal_ == 0) {  // Check for existence\n', '      takerOrder.active_ = true;\n', '      takerOrder.offerToken_ = _token_and_EOA_Addresses[3];\n', '      takerOrder.offerTokenTotal_ = _amountsExpirationAndSalt[2];\n', '      takerOrder.offerTokenRemaining_ = _amountsExpirationAndSalt[2];  // Amount to give\n', '      takerOrder.wantToken_ = _token_and_EOA_Addresses[1];\n', '      takerOrder.wantTokenTotal_ = _amountsExpirationAndSalt[3];\n', '      takerOrder.wantTokenReceived_ = 0; // Amount received\n', '    }\n', '\n', '    if (!__ordersMatch_and_AreVaild__(makerOrder, takerOrder))\n', "      return error('Orders do not match, Exchange.executeOrder()');\n", '\n', '    // Trade amounts\n', '    uint256 toTakerAmount;\n', '    uint256 toMakerAmount;\n', '    (toTakerAmount, toMakerAmount) = __getTradeAmounts__(makerOrder, takerOrder);\n', '\n', '    // TODO consider removing. Can this condition be met?\n', '    if (toTakerAmount < 1 || toMakerAmount < 1)\n', "      return error('Token amount < 1, price ratio is invalid! Token value < 1, Exchange.executeOrder()');\n", '\n', '    // Taker is offering edo tokens so ensure sufficient balance in order to offer edo and pay fee in edo\n', '    if (\n', '        takerOrder.offerToken_ == edoToken_ &&\n', '        Token(edoToken_).balanceOf(wallets[1]) < __calculateFee__(makerOrder, toTakerAmount, toMakerAmount).add(toMakerAmount)\n', '      ) {\n', "        return error('Taker has an insufficient EDO token balance to cover the fee AND the offer, Exchange.executeOrder()');\n", '    // Taker has sufficent EDO token balance to pay the fee\n', '    } else if (Token(edoToken_).balanceOf(wallets[1]) < __calculateFee__(makerOrder, toTakerAmount, toMakerAmount))\n', "      return error('Taker has an insufficient EDO token balance to cover the fee, Exchange.executeOrder()');\n", '\n', '    // Wallet Order Verification, reach out to the maker and taker wallets.\n', '    if (!__ordersVerifiedByWallets__(\n', '        _token_and_EOA_Addresses,\n', '        toMakerAmount,\n', '        toTakerAmount,\n', '        wallets[0],\n', '        wallets[1],\n', '        __calculateFee__(makerOrder, toTakerAmount, toMakerAmount)\n', '      ))\n', "      return error('Order could not be verified by wallets, Exchange.executeOrder()');\n", '\n', '    // Order Execution, Order Fully Verified by this point, time to execute!\n', '    // Local order structs\n', '    __updateOrders__(makerOrder, takerOrder, toTakerAmount, toMakerAmount);\n', '\n', '    // Write to storage then external calls\n', '    //  Update orders active flag if filled\n', '    if (makerOrder.offerTokenRemaining_ == 0)\n', '      makerOrder.active_ = false;\n', '\n', '    if (takerOrder.offerTokenRemaining_ == 0)\n', '      takerOrder.active_ = false;\n', '\n', '    // Finally write orders to storage\n', '    orders_[makerOrderHash] = makerOrder;\n', '    orders_[takerOrderHash] = takerOrder;\n', '\n', '    // Transfer the external value, ether <> tokens\n', '    require(\n', '      __executeTokenTransfer__(\n', '        _token_and_EOA_Addresses,\n', '        toTakerAmount,\n', '        toMakerAmount,\n', '        __calculateFee__(makerOrder, toTakerAmount, toMakerAmount),\n', '        wallets[0],\n', '        wallets[1]\n', '      )\n', '    );\n', '\n', '    // Log the order id(hash), amount of offer given, amount of offer remaining\n', '    LogOrderFilled(makerOrderHash, toTakerAmount, makerOrder.offerTokenRemaining_);\n', '    LogOrderFilled(takerOrderHash, toMakerAmount, takerOrder.offerTokenRemaining_);\n', '\n', '    LogOrderExecutionSuccess();\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Set the rate of wei per edo token in or to calculate edo fee\n', '   * @param _edoPerWei Rate of edo tokens per wei.\n', '   * @return Success of the transaction.\n', '   */\n', '  function setEdoRate(\n', '    uint256 _edoPerWei\n', '  ) external\n', '    returns(bool)\n', '  {\n', '    if (msg.sender != owner_)\n', "      return error('msg.sender != owner, Exchange.setEdoRate()');\n", '\n', '    edoPerWei_ = _edoPerWei;\n', '\n', '    LogEdoRateSet(edoPerWei_);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Set the wallet for fees to be paid to.\n', '   * @param _eidooWallet Wallet to pay fees to.\n', '   * @return Success of the transaction.\n', '   */\n', '  function setEidooWallet(\n', '    address _eidooWallet\n', '  ) external\n', '    returns(bool)\n', '  {\n', '    if (msg.sender != owner_)\n', "      return error('msg.sender != owner, Exchange.setEidooWallet()');\n", '\n', '    eidooWallet_ = _eidooWallet;\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Set the minimum amount of ether required per order.\n', '   * @param _minOrderEthAmount Min amount of ether required per order.\n', '   * @return Success of the transaction.\n', '   */\n', '  function setMinOrderEthAmount (\n', '    uint256 _minOrderEthAmount\n', '  ) external\n', '    returns(bool)\n', '  {\n', '    if (msg.sender != owner_)\n', "      return error('msg.sender != owner, Exchange.setMinOrderEtherAmount()');\n", '\n', '    minOrderEthAmount_ = _minOrderEthAmount;\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Set a new order book account.\n', '   * @param _account The new order book account.\n', '   */\n', '  function setOrderBookAcount (\n', '    address _account\n', '  ) external\n', '    returns(bool)\n', '  {\n', '    if (msg.sender != owner_)\n', "      return error('msg.sender != owner, Exchange.setOrderBookAcount()');\n", '\n', '    orderBookAccount_ = _account;\n', '    return true;\n', '  }\n', '\n', '  /*\n', '   Methods to catch events from external contracts, user wallets primarily\n', '   */\n', '\n', '  /**\n', '   * @dev Simply log the event to track wallet interaction off-chain\n', '   * @param _token The address of the token that was deposited.\n', '   * @param _amount The amount of the token that was deposited.\n', '   * @param _walletBalance The updated balance of the wallet after deposit.\n', '   */\n', '  function walletDeposit(\n', '    address _token,\n', '    uint256 _amount,\n', '    uint256 _walletBalance\n', '  ) external\n', '  {\n', '    LogWalletDeposit(msg.sender, _token, _amount, _walletBalance);\n', '  }\n', '\n', '  /**\n', '   * @dev Simply log the event to track wallet interaction off-chain\n', '   * @param _token The address of the token that was deposited.\n', '   * @param _amount The amount of the token that was deposited.\n', '   * @param _walletBalance The updated balance of the wallet after deposit.\n', '   */\n', '  function walletWithdrawal(\n', '    address _token,\n', '    uint256 _amount,\n', '    uint256 _walletBalance\n', '  ) external\n', '  {\n', '    LogWalletWithdrawal(msg.sender, _token, _amount, _walletBalance);\n', '  }\n', '\n', '  /**\n', '   * Private\n', '   */\n', '\n', '  /**\n', '   * Calculate the fee for the given trade. Calculated as the set % of the wei amount\n', '   * converted into EDO tokens using the manually set conversion ratio.\n', '   * @param _makerOrder The maker order object.\n', '   * @param _toTaker The amount of tokens going to the taker.\n', '   * @param _toMaker The amount of tokens going to the maker.\n', '   * @return The total fee to be paid in EDO tokens.\n', '   */\n', '  function __calculateFee__(\n', '    Order _makerOrder,\n', '    uint256 _toTaker,\n', '    uint256 _toMaker\n', '  ) private\n', '    constant\n', '    returns(uint256)\n', '  {\n', '    // weiAmount * (fee %) * (EDO/Wei) / (decimals in edo/wei) / (decimals in percentage)\n', '    if (_makerOrder.offerToken_ == address(0)) {\n', '      return _toTaker.mul(edoPerWei_).div(10**edoPerWeiDecimals_);\n', '    } else {\n', '      return _toMaker.mul(edoPerWei_).div(10**edoPerWeiDecimals_);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Verify the input to order execution is valid.\n', '   * @param _token_and_EOA_Addresses The addresses of the maker and taker EOAs and offered token contracts.\n', '   * [makerEOA, makerOfferToken, takerEOA, takerOfferToken]\n', '   * @param _amountsExpirationAndSalt The amount of tokens, [makerOffer, makerWant, takerOffer, takerWant].\n', '   * as well as The block number at which this order expires, maker[4] and taker[6].\n', '   * @return Success if all checks pass.\n', '   */\n', '  function __executeOrderInputIsValid__(\n', '    address[4] _token_and_EOA_Addresses,\n', '    uint256[8] _amountsExpirationAndSalt,\n', '    address _makerWallet,\n', '    address _takerWallet\n', '  ) private\n', '    constant\n', '    returns(bool)\n', '  {\n', '    if (msg.sender != orderBookAccount_)\n', "      return error('msg.sender != orderBookAccount, Exchange.__executeOrderInputIsValid__()');\n", '\n', '    if (block.number > _amountsExpirationAndSalt[4])\n', "      return error('Maker order has expired, Exchange.__executeOrderInputIsValid__()');\n", '\n', '    if (block.number > _amountsExpirationAndSalt[6])\n', "      return error('Taker order has expired, Exchange.__executeOrderInputIsValid__()');\n", '\n', '    // Wallets\n', '    if (_makerWallet == address(0))\n', "      return error('Maker wallet does not exist, Exchange.__executeOrderInputIsValid__()');\n", '\n', '    if (_takerWallet == address(0))\n', "      return error('Taker wallet does not exist, Exchange.__executeOrderInputIsValid__()');\n", '\n', '    // Tokens, addresses and amounts, ether exists\n', '    if (_token_and_EOA_Addresses[1] != address(0) && _token_and_EOA_Addresses[3] != address(0))\n', "      return error('Ether omitted! Is not offered by either the Taker or Maker, Exchange.__executeOrderInputIsValid__()');\n", '\n', '    if (_token_and_EOA_Addresses[1] == address(0) && _token_and_EOA_Addresses[3] == address(0))\n', "      return error('Taker and Maker offer token are both ether, Exchange.__executeOrderInputIsValid__()');\n", '\n', '    if (\n', '        _amountsExpirationAndSalt[0] == 0 ||\n', '        _amountsExpirationAndSalt[1] == 0 ||\n', '        _amountsExpirationAndSalt[2] == 0 ||\n', '        _amountsExpirationAndSalt[3] == 0\n', '      )\n', "      return error('May not execute an order where token amount == 0, Exchange.__executeOrderInputIsValid__()');\n", '\n', '    // Confirm order ether amount >= min amount\n', '    // Maker\n', '    uint256 minOrderEthAmount = minOrderEthAmount_; // Single storage read\n', '    if (_token_and_EOA_Addresses[1] == 0 && _amountsExpirationAndSalt[0] < minOrderEthAmount)\n', "      return error('Maker order does not meet the minOrderEthAmount_ of ether, Exchange.__executeOrderInputIsValid__()');\n", '\n', '    // Taker\n', '    if (_token_and_EOA_Addresses[3] == 0 && _amountsExpirationAndSalt[2] < minOrderEthAmount)\n', "      return error('Taker order does not meet the minOrderEthAmount_ of ether, Exchange.__executeOrderInputIsValid__()');\n", '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Execute the external transfer of tokens.\n', '   * @param _token_and_EOA_Addresses The addresses of the maker and taker EOAs and offered token contracts.\n', '   * [makerEOA, makerOfferToken, takerEOA, takerOfferToken]\n', '   * @param _toTakerAmount The amount of tokens to transfer to the taker.\n', '   * @param _toMakerAmount The amount of tokens to transfer to the maker.\n', '   * @return Success if both wallets verify the order.\n', '   */\n', '  function __executeTokenTransfer__(\n', '    address[4] _token_and_EOA_Addresses,\n', '    uint256 _toTakerAmount,\n', '    uint256 _toMakerAmount,\n', '    uint256 _fee,\n', '    Wallet _makerWallet,\n', '    Wallet _takerWallet\n', '  ) private\n', '    returns (bool)\n', '  {\n', '    // Wallet mapping balances\n', '    address makerOfferToken = _token_and_EOA_Addresses[1];\n', '    address takerOfferToken = _token_and_EOA_Addresses[3];\n', '\n', '    // Taker to pay fee before trading\n', '    require(_takerWallet.updateBalance(edoToken_, _fee, true));  // Subtraction flag\n', '    require(Token(edoToken_).transferFrom(_takerWallet, eidooWallet_, _fee));\n', '\n', '    // Move the toTakerAmount from the maker to the taker\n', '    require(_makerWallet.updateBalance(makerOfferToken, _toTakerAmount, true));  // Subtraction flag\n', "      /*return error('Unable to subtract maker token from maker wallet, Exchange.__executeTokenTransfer__()');*/\n", '\n', '    require(_takerWallet.updateBalance(makerOfferToken, _toTakerAmount, false));\n', "      /*return error('Unable to add maker token to taker wallet, Exchange.__executeTokenTransfer__()');*/\n", '\n', '    // Move the toMakerAmount from the taker to the maker\n', '    require(_takerWallet.updateBalance(takerOfferToken, _toMakerAmount, true));  // Subtraction flag\n', "      /*return error('Unable to subtract taker token from taker wallet, Exchange.__executeTokenTransfer__()');*/\n", '\n', '    require(_makerWallet.updateBalance(takerOfferToken, _toMakerAmount, false));\n', "      /*return error('Unable to add taker token to maker wallet, Exchange.__executeTokenTransfer__()');*/\n", '\n', '    // Contract ether balances and token contract balances\n', '    // Ether to the taker and tokens to the maker\n', '    if (makerOfferToken == address(0)) {\n', '      _takerWallet.transfer(_toTakerAmount);\n', '      require(\n', '        Token(takerOfferToken).transferFrom(_takerWallet, _makerWallet, _toMakerAmount)\n', '      );\n', '      assert(\n', '        __tokenAndWalletBalancesMatch__(_makerWallet, _takerWallet, takerOfferToken)\n', '      );\n', '\n', '    // Ether to the maker and tokens to the taker\n', '    } else if (takerOfferToken == address(0)) {\n', '      _makerWallet.transfer(_toMakerAmount);\n', '      require(\n', '        Token(makerOfferToken).transferFrom(_makerWallet, _takerWallet, _toTakerAmount)\n', '      );\n', '      assert(\n', '        __tokenAndWalletBalancesMatch__(_makerWallet, _takerWallet, makerOfferToken)\n', '      );\n', '\n', '    // Something went wrong one had to have been ether\n', '    } else revert();\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev compute the log10 of a given number, takes the floor, ie. 2.5 = 2\n', '   * @param _number The number to compute the log 10 of.\n', '   * @return The floored log 10.\n', '   */\n', '  function __flooredLog10__(uint _number)\n', '    public\n', '    constant\n', '    returns (uint256)\n', '  {\n', '    uint unit = 0;\n', '    while (_number / (10**unit) >= 10)\n', '      unit++;\n', '    return unit;\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates Keccak-256 hash of order with specified parameters.\n', '   * @param _token_and_EOA_Addresses The addresses of the order, [makerEOA, makerOfferToken, makerWantToken].\n', '   * @param _amountsExpirationAndSalt The amount of tokens as well as\n', '   * the block number at which this order expires and random salt number.\n', '   * @return Keccak-256 hash of each order.\n', '   */\n', '  function __generateOrderHashes__(\n', '    address[4] _token_and_EOA_Addresses,\n', '    uint256[8] _amountsExpirationAndSalt\n', '  ) private\n', '    constant\n', '    returns (bytes32, bytes32)\n', '  {\n', '    bytes32 makerOrderHash = keccak256(\n', '      address(this),\n', '      _token_and_EOA_Addresses[0], // _makerEOA\n', '      _token_and_EOA_Addresses[1], // offerToken\n', '      _amountsExpirationAndSalt[0],  // offerTokenAmount\n', '      _token_and_EOA_Addresses[3], // wantToken\n', '      _amountsExpirationAndSalt[1],  // wantTokenAmount\n', '      _amountsExpirationAndSalt[4], // expiry\n', '      _amountsExpirationAndSalt[5] // salt\n', '    );\n', '\n', '\n', '    bytes32 takerOrderHash = keccak256(\n', '      address(this),\n', '      _token_and_EOA_Addresses[2], // _makerEOA\n', '      _token_and_EOA_Addresses[3], // offerToken\n', '      _amountsExpirationAndSalt[2],  // offerTokenAmount\n', '      _token_and_EOA_Addresses[1], // wantToken\n', '      _amountsExpirationAndSalt[3],  // wantTokenAmount\n', '      _amountsExpirationAndSalt[6], // expiry\n', '      _amountsExpirationAndSalt[7] // salt\n', '    );\n', '\n', '    return (makerOrderHash, takerOrderHash);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the price ratio for this order.\n', '   * The ratio is calculated with the largest value as the numerator, this aids\n', '   * to significantly reduce rounding errors.\n', '   * @param _makerOrder The maker order data structure.\n', '   * @return The ratio to `_decimals` decimal places.\n', '   */\n', '  function __getOrderPriceRatio__(Order _makerOrder, uint256 _decimals)\n', '    private\n', '    constant\n', '    returns (uint256 orderPriceRatio)\n', '  {\n', '    if (_makerOrder.offerTokenTotal_ >= _makerOrder.wantTokenTotal_) {\n', '      orderPriceRatio = _makerOrder.offerTokenTotal_.mul(10**_decimals).div(_makerOrder.wantTokenTotal_);\n', '    } else {\n', '      orderPriceRatio = _makerOrder.wantTokenTotal_.mul(10**_decimals).div(_makerOrder.offerTokenTotal_);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Compute the tradeable amounts of the two verified orders.\n', "   * Token amount is the min remaining between want and offer of the two orders that isn't ether.\n", '   * Ether amount is then: etherAmount = tokenAmount * priceRatio, as ratio = eth / token.\n', '   * @param _makerOrder The maker order data structure.\n', '   * @param _takerOrder The taker order data structure.\n', '   * @return The amount moving from makerOfferRemaining to takerWantRemaining and vice versa.\n', '   * TODO: consider rounding errors, etc\n', '   */\n', '  function __getTradeAmounts__(\n', '    Order _makerOrder,\n', '    Order _takerOrder\n', '  ) private\n', '    constant\n', '    returns (uint256 toTakerAmount, uint256 toMakerAmount)\n', '  {\n', '    bool ratioIsWeiPerTok = __ratioIsWeiPerTok__(_makerOrder);\n', '    uint256 decimals = __flooredLog10__(__max__(_makerOrder.offerTokenTotal_, _makerOrder.wantTokenTotal_)) + 1;\n', '    uint256 priceRatio = __getOrderPriceRatio__(_makerOrder, decimals);\n', '\n', '    // Amount left for order to receive\n', '    uint256 makerAmountLeftToReceive = _makerOrder.wantTokenTotal_.sub(_makerOrder.wantTokenReceived_);\n', '    uint256 takerAmountLeftToReceive = _takerOrder.wantTokenTotal_.sub(_takerOrder.wantTokenReceived_);\n', '\n', '    // wei/tok and taker receiving wei or tok/wei and taker receiving tok\n', '    if (\n', '        ratioIsWeiPerTok && _takerOrder.wantToken_ == address(0) ||\n', '        !ratioIsWeiPerTok && _takerOrder.wantToken_ != address(0)\n', '    ) {\n', '      // In the case that the maker is offering more than the taker wants for the same quantity being offered\n', '      // For example: maker offer 20 wei for 10 tokens but taker offers 10 tokens for 10 wei\n', '      // Taker receives 20 wei for the 10 tokens, both orders filled\n', '      if (\n', '        _makerOrder.offerTokenRemaining_ > takerAmountLeftToReceive &&\n', '        makerAmountLeftToReceive <= _takerOrder.offerTokenRemaining_\n', '      ) {\n', '        toTakerAmount = __max__(_makerOrder.offerTokenRemaining_, takerAmountLeftToReceive);\n', '      } else {\n', '        toTakerAmount = __min__(_makerOrder.offerTokenRemaining_, takerAmountLeftToReceive);\n', '      }\n', '\n', '      toMakerAmount = toTakerAmount.mul(10**decimals).div(priceRatio);\n', '\n', '    // wei/tok and maker receiving wei or tok/wei and maker receiving tok\n', '    } else {\n', '      toMakerAmount = __min__(_takerOrder.offerTokenRemaining_, makerAmountLeftToReceive);\n', '      toTakerAmount = toMakerAmount.mul(10**decimals).div(priceRatio);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Return the maximum of two uints\n', '   * @param _a Uint 1\n', '   * @param _b Uint 2\n', '   * @return The grater value or a if equal\n', '   */\n', '  function __max__(uint256 _a, uint256 _b)\n', '    private\n', '    constant\n', '    returns (uint256)\n', '  {\n', '    return _a < _b ? _b : _a;\n', '  }\n', '\n', '  /**\n', '   * @dev Return the minimum of two uints\n', '   * @param _a Uint 1\n', '   * @param _b Uint 2\n', '   * @return The smallest value or b if equal\n', '   */\n', '  function __min__(uint256 _a, uint256 _b)\n', '    private\n', '    constant\n', '    returns (uint256)\n', '  {\n', '    return _a < _b ? _a : _b;\n', '  }\n', '\n', '  /**\n', '   * @dev Define if the ratio to be used is wei/tok to tok/wei. Largest uint will\n', '   * always act as the numerator.\n', '   * @param _makerOrder The maker order object.\n', '   * @return If the ratio is wei/tok or not.\n', '   */\n', '  function __ratioIsWeiPerTok__(Order _makerOrder)\n', '    private\n', '    constant\n', '    returns (bool)\n', '  {\n', '    bool offerIsWei = _makerOrder.offerToken_ == address(0) ? true : false;\n', '\n', '    // wei/tok\n', '    if (offerIsWei && _makerOrder.offerTokenTotal_ >= _makerOrder.wantTokenTotal_) {\n', '      return true;\n', '\n', '    } else if (!offerIsWei && _makerOrder.wantTokenTotal_ >= _makerOrder.offerTokenTotal_) {\n', '      return true;\n', '\n', '    // tok/wei. otherwise wanting wei && offer > want, OR offer wei && want > offer\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Confirm that the orders do match and are valid.\n', '   * @param _makerOrder The maker order data structure.\n', '   * @param _takerOrder The taker order data structure.\n', '   * @return Bool if the orders passes all checks.\n', '   */\n', '  function __ordersMatch_and_AreVaild__(\n', '    Order _makerOrder,\n', '    Order _takerOrder\n', '  ) private\n', '    constant\n', '    returns (bool)\n', '  {\n', '    // Orders still active\n', '    if (!_makerOrder.active_)\n', "      return error('Maker order is inactive, Exchange.__ordersMatch_and_AreVaild__()');\n", '\n', '    if (!_takerOrder.active_)\n', "      return error('Taker order is inactive, Exchange.__ordersMatch_and_AreVaild__()');\n", '\n', '    // Confirm tokens match\n', '    // NOTE potentially omit as matching handled upstream?\n', '    if (_makerOrder.wantToken_ != _takerOrder.offerToken_)\n', "      return error('Maker wanted token does not match taker offer token, Exchange.__ordersMatch_and_AreVaild__()');\n", '\n', '    if (_makerOrder.offerToken_ != _takerOrder.wantToken_)\n', "      return error('Maker offer token does not match taker wanted token, Exchange.__ordersMatch_and_AreVaild__()');\n", '\n', '    // Price Ratios, to x decimal places hence * decimals, dependent on the size of the denominator.\n', '    // Ratios are relative to eth, amount of ether for a single token, ie. ETH / GNO == 0.2 Ether per 1 Gnosis\n', '    uint256 orderPrice;  // The price the maker is willing to accept\n', '    uint256 offeredPrice; // The offer the taker has given\n', '    uint256 decimals = _makerOrder.offerToken_ == address(0) ? __flooredLog10__(_makerOrder.wantTokenTotal_) : __flooredLog10__(_makerOrder.offerTokenTotal_);\n', '\n', '    // Ratio = larger amount / smaller amount\n', '    if (_makerOrder.offerTokenTotal_ >= _makerOrder.wantTokenTotal_) {\n', '      orderPrice = _makerOrder.offerTokenTotal_.mul(10**decimals).div(_makerOrder.wantTokenTotal_);\n', '      offeredPrice = _takerOrder.wantTokenTotal_.mul(10**decimals).div(_takerOrder.offerTokenTotal_);\n', '\n', '      // ie. Maker is offering 10 ETH for 100 GNO but taker is offering 100 GNO for 20 ETH, no match!\n', '      // The taker wants more ether than the maker is offering.\n', '      if (orderPrice < offeredPrice)\n', "        return error('Taker price is greater than maker price, Exchange.__ordersMatch_and_AreVaild__()');\n", '\n', '    } else {\n', '      orderPrice = _makerOrder.wantTokenTotal_.mul(10**decimals).div(_makerOrder.offerTokenTotal_);\n', '      offeredPrice = _takerOrder.offerTokenTotal_.mul(10**decimals).div(_takerOrder.wantTokenTotal_);\n', '\n', '      // ie. Maker is offering 100 GNO for 10 ETH but taker is offering 5 ETH for 100 GNO, no match!\n', '      // The taker is not offering enough ether for the maker\n', '      if (orderPrice > offeredPrice)\n', "        return error('Taker price is less than maker price, Exchange.__ordersMatch_and_AreVaild__()');\n", '\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Ask each wallet to verify this order.\n', '   * @param _token_and_EOA_Addresses The addresses of the maker and taker EOAs and offered token contracts.\n', '   * [makerEOA, makerOfferToken, takerEOA, takerOfferToken]\n', '   * @param _toMakerAmount The amount of tokens to be sent to the maker.\n', '   * @param _toTakerAmount The amount of tokens to be sent to the taker.\n', "   * @param _makerWallet The maker's wallet contract.\n", "   * @param _takerWallet The taker's wallet contract.\n", '   * @param _fee The fee to be paid for this trade, paid in full by taker.\n', '   * @return Success if both wallets verify the order.\n', '   */\n', '  function __ordersVerifiedByWallets__(\n', '    address[4] _token_and_EOA_Addresses,\n', '    uint256 _toMakerAmount,\n', '    uint256 _toTakerAmount,\n', '    Wallet _makerWallet,\n', '    Wallet _takerWallet,\n', '    uint256 _fee\n', '  ) private\n', '    constant\n', '    returns (bool)\n', '  {\n', '    // Have the transaction verified by both maker and taker wallets\n', '    // confirm sufficient balance to transfer, offerToken and offerTokenAmount\n', '    if(!_makerWallet.verifyOrder(_token_and_EOA_Addresses[1], _toTakerAmount, 0, 0))\n', "      return error('Maker wallet could not verify the order, Exchange.__ordersVerifiedByWallets__()');\n", '\n', '    if(!_takerWallet.verifyOrder(_token_and_EOA_Addresses[3], _toMakerAmount, _fee, edoToken_))\n', "      return error('Taker wallet could not verify the order, Exchange.__ordersVerifiedByWallets__()');\n", '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev On chain verification of an ECDSA ethereum signature.\n', '   * @param _signer The EOA address of the account that supposedly signed the message.\n', '   * @param _orderHash The on-chain generated hash for the order.\n', '   * @param _v ECDSA signature parameter v.\n', '   * @param _r ECDSA signature parameter r.\n', '   * @param _s ECDSA signature parameter s.\n', '   * @return Bool if the signature is valid or not.\n', '   */\n', '  function __signatureIsValid__(\n', '    address _signer,\n', '    bytes32 _orderHash,\n', '    uint8 _v,\n', '    bytes32 _r,\n', '    bytes32 _s\n', '  ) private\n', '    constant\n', '    returns (bool)\n', '  {\n', '    address recoveredAddr = ecrecover(\n', "      keccak256('\\x19Ethereum Signed Message:\\n32', _orderHash),\n", '      _v, _r, _s\n', '    );\n', '\n', '    return recoveredAddr == _signer;\n', '  }\n', '\n', '  /**\n', '   * @dev Confirm wallet local balances and token balances match.\n', '   * @param _makerWallet  Maker wallet address.\n', '   * @param _takerWallet  Taker wallet address.\n', '   * @param _token  Token address to confirm balances match.\n', '   * @return If the balances do match.\n', '   */\n', '  function __tokenAndWalletBalancesMatch__(\n', '    address _makerWallet,\n', '    address _takerWallet,\n', '    address _token\n', '  ) private\n', '    constant\n', '    returns(bool)\n', '  {\n', '    if (Token(_token).balanceOf(_makerWallet) != Wallet(_makerWallet).balanceOf(_token))\n', '      return false;\n', '\n', '    if (Token(_token).balanceOf(_takerWallet) != Wallet(_takerWallet).balanceOf(_token))\n', '      return false;\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Update the order structs.\n', '   * @param _makerOrder The maker order data structure.\n', '   * @param _takerOrder The taker order data structure.\n', '   * @param _toTakerAmount The amount of tokens to be moved to the taker.\n', '   * @param _toTakerAmount The amount of tokens to be moved to the maker.\n', '   * @return Success if the update succeeds.\n', '   */\n', '  function __updateOrders__(\n', '    Order _makerOrder,\n', '    Order _takerOrder,\n', '    uint256 _toTakerAmount,\n', '    uint256 _toMakerAmount\n', '  ) private\n', '  {\n', '    // taker => maker\n', '    _makerOrder.wantTokenReceived_ = _makerOrder.wantTokenReceived_.add(_toMakerAmount);\n', '    _takerOrder.offerTokenRemaining_ = _takerOrder.offerTokenRemaining_.sub(_toMakerAmount);\n', '\n', '    // maker => taker\n', '    _takerOrder.wantTokenReceived_ = _takerOrder.wantTokenReceived_.add(_toTakerAmount);\n', '    _makerOrder.offerTokenRemaining_ = _makerOrder.offerTokenRemaining_.sub(_toTakerAmount);\n', '  }\n', '}']
