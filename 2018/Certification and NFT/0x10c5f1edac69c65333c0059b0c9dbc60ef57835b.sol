['/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity\n', ' *\n', ' * The AFW token contract bases on the ERC20 standard token contracts \n', ' * Company Optimum Consulting - Courbevoie\n', ' * */\n', ' \n', 'pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity\n', ' */\n', 'contract Pausable is Ownable {\n', '\n', '  uint public endDate;\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS not paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(now >= endDate);\n', '    _;\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken, Pausable {\n', '    using SafeMath for uint256;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  }\n', ' \n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken {\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256  _value)\n', '        public onlyOwner\n', '    {\n', '        require(_value > 0);\n', '\t\trequire(balances[msg.sender] >= _value);\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '    event Burn(address indexed burner, uint256  indexed value);\n', '} \n', '   \n', 'contract AFWToken is StandardToken , BurnableToken  {\n', '    using SafeMath for uint256;\n', '    string public constant name = "All4FW";\n', '    string public constant symbol = "AFW";\n', '    uint8 public constant decimals = 18;\t\n', '\t\n', '\t// wallets address for allocation\t\n', '\taddress public Bounties_Wallet = 0xA7135CbD1281d477eef4FC7F0AB19566A47bE759; // 5% : Bounty\n', '\taddress public Team_Wallet = 0xaA1582A5b00fDEc47FeD1CcDDe7e5fA3652B456b; // 8% : Equity & Team\n', '\taddress public OEM_Wallet = 0x51e32712C65AEFAAea9d0b7336A975f400825309; // 10% : Community Builting, Biz Dev\n', '\taddress public LA_wallet = 0xBaC4B80b6C74518bF31b5cE1be80926ffEEBB4db; //8% : Legal & advisors\n', '    \n', '\taddress public tokenWallet = 0x4CE38c5f44794d6173Dd3BBaf208EeEf2033370A;    \n', '\tuint256 public constant INITIAL_SUPPLY = 100000000 ether;\t\n', '\t\n', '\t\n', '\t/// Base exchange rate is set to 1 ETH = 650 AFW.\n', '\tuint256 tokenRate = 650; \n', '\t\n', '\t\n', '    function AFWToken() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '\t\t\n', '\t\t// InitialDistribution\n', '\t\t// 31% ---> 31000000\n', '\t\tbalances[Bounties_Wallet] = INITIAL_SUPPLY.mul(5).div(100) ;\n', '\t\tbalances[Team_Wallet] = INITIAL_SUPPLY.mul(8).div(100);\n', '\t\tbalances[OEM_Wallet] = INITIAL_SUPPLY.mul(10).div(100) ;\n', '\t\tbalances[LA_wallet] = INITIAL_SUPPLY.mul(8).div(100) ;\n', '\t\t\n', '\t\t// 69% ---> 69000000\n', '        balances[tokenWallet] = INITIAL_SUPPLY.mul(69).div(100);\n', '\t\t\n', '        endDate = _endDate;\n', '\t\t\t\t\n', '        emit Transfer(0x0, Bounties_Wallet, balances[Bounties_Wallet]);\n', '        emit Transfer(0x0, Team_Wallet, balances[Team_Wallet]);\n', '\t\temit Transfer(0x0, OEM_Wallet, balances[OEM_Wallet]);\n', '        emit Transfer(0x0, LA_wallet, balances[LA_wallet]);\n', '\t\t\t\t\n', '\t\temit Transfer(0x0, tokenWallet, balances[tokenWallet]);\n', '    }\n', '\n', '\t///-------------------------------------- Pres-Sale / Main Sale\t\n', '    ///\n', '    /// startTime                                                      \t\t\t\t\t\t\t\t\t\t\t\tendTime\n', '    ///     \n', '\t///\t\t2 Days\t\t  \t5 Days\t\t\t\t6 Days\t\t\t6 Days\t\t\t\t\t\t\t\t1 Month\t\t\t\t\n', '\t///\t    750 000 AFW\t\t900 000 AFW1\t\t500 000 AFW\t\t1 850 000 AFW\t\t\t\t\t\t69 000 000 AFW\n', '    ///  O--------------O-----------------O------------------O-------------------O--------O------------------------->\n', '    ///     Disc 20 %     \tDisc 10 %          \tDisc 5 %        Disc 3 %           Closed            Main Sale 0%\t\t\tFinalized\n', '    \n', '\n', '\t/**\n', '\t******** DATE PReICO - ICO */\n', '    uint public constant startDate = 1524866399; /// Start Pre-sale - Friday 27 April 2018 23:59:59\n', '    uint public constant endPreICO = 1526680799;/// Close Pre-Sale - Friday 18 May 2018 23:59:59\n', '\t\n', '\t/// HOT sale start time\n', '    uint constant preSale20 = startDate ; /// Start Pre-sale 20% - Friday 27 April 2018 23:59:59\n', '    uint constant preSale10 = 1525039200; /// Start Pre-sale 10% - Monday 30 April 2018 00:00:00\n', '    uint constant preSale5 = 1525471200; /// Start Pre-sale 5% - Saturday 5 May 2018 00:00:00\n', '\tuint constant preSale3 = 1525989600; /// Start Pre-sale 3% - Friday 11 May 2018 00:00:00  \n', '\t\t\t\n', '    uint public constant startICO = 1526680800; /// Start Main Sale - Saturday 19 May 2018 00:00:00\n', '    uint public constant _endDate = 1529186399; /// Close Main Sale - Saturday 16 June 2018 23:59:59 \n', '\n', '    struct Stat {\n', '        uint currentFundraiser;\n', '        uint btcAmount;\n', '        uint ethAmount;\n', '        uint txCounter;\n', '    }    \n', '    Stat public stat;    \n', '\t\n', '\t/// Maximum tokens to be allocated on the sale (69% of the hard cap)\n', '    uint public constant preIcoCap = 5000000 ether;\n', '    uint public constant IcoCap = 64000000 ether;\n', '\n', '\t/// token caps for each round\n', '\tuint256[4] private StepCaps = [\n', '        750000 ether, \t/// 20% \n', '        900000 ether, \t/// 10%\n', '        1500000 ether, \t/// 5%\n', '        1850000 ether \t/// 3%\n', '    ];\t\n', '\tuint8[4] private StepDiscount = [20, 10, 5, 3];\n', '\t\t\n', '    /**\n', '     * @dev modifier to allow actions only when Pre-ICO end date is now\n', '     */\n', '    modifier isFinished() {\n', '        require(now >= endDate);\n', '        _;\n', '    }\n', '\t\n', '\t/// @return the index of the current discount by date.\n', '    function currentStepIndexByDate() internal view returns (uint8 roundNum) {\n', '        require(now <= endPreICO); \n', '        if(now > preSale3) return 3;\n', '        if(now > preSale5) return 2;\n', '        if(now > preSale10) return 1;\n', '        if(now > preSale20) return 0;\n', '        else return 0;\n', '    }\n', '\t\n', '\n', '    /// @return integer representing the index of the current sale round\n', '    function currentStepIndex() internal view returns (uint8 roundNum) {\n', '        roundNum = currentStepIndexByDate();\n', '        /// round determined by conjunction of both time and total sold tokens\n', '        while(roundNum < 3 && stat.currentFundraiser > StepCaps[roundNum]) {\n', '            roundNum++;\n', '        }\n', '    }\n', '\n', '\t/// @dev Function for calculate the price\n', '\t/// @dev Compute the amount of AFW token that can be purchased.\n', '    /// @param ethAmount Amount of Ether to purchase AFW.\n', '    function computeTokenAmount( uint256 ethAmount) internal view returns (uint256) {\n', '        uint256 tokenBase = ethAmount.mul(tokenRate);\n', '\t\tuint8 roundNum = currentStepIndex();\n', '        uint256 tokens = tokenBase.mul(100)/(100 - (StepDiscount[roundNum]));\n', '\t\treturn tokens;\n', '    }\n', '\n', '\t\n', '\t/// @dev Returns is Pre-Sale.\n', '    function isPreSale() internal view returns (bool) {\n', '        if (now >= startDate && now < endPreICO && preIcoCap.sub(stat.currentFundraiser) > 0) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\t/// @dev Returns is Main Sale.\n', '    function isMainSale() internal view returns (bool) {\n', '        if (now >= startICO && now < endDate) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @notice Buy tokens from contract by sending ether\n', '    function () payable public {\n', '        if (msg.value < 0.001 ether || (!isPreSale() && !isMainSale())) revert();\n', '        buyTokens();\n', '    }\n', '\t\n', '\t/// @return integer representing the index of the current sale round\n', '    function currentStepIndexAll() internal view returns (uint8 roundNum) {\n', '        roundNum = currentStepIndexByDate();\n', '        /// round determined by conjunction of both time and total sold tokens\n', '        while(roundNum < 3 && StepCaps[roundNum]<= 0) {\n', '            roundNum++;\n', '        }\n', '    }\n', '\t\n', '\t/// @dev Compute the amount of AFW token that can be purchased.\n', '    /// @param ethAmount Amount of Ether to purchase AFW.\n', '\tfunction computeTokenAmountAll(uint256 ethAmount) internal returns (uint256) {\n', '        uint256 tokenBase = ethAmount.mul(tokenRate);\n', '\t\tuint8 roundNum = currentStepIndexAll();\n', '\t\tuint256 tokens = tokenBase.mul(100)/(100 - (StepDiscount[roundNum]));\n', '\t\t\t\t\n', '\t\tif (roundNum == 3 && (StepCaps[0] > 0 || StepCaps[1] > 0 || StepCaps[2] > 0))\n', '\t\t{\n', '\t\t\t/// All unsold pre-sale tokens are made available at the last pre-sale period (3% discount rate)\n', '\t\t\tStepCaps[3] = StepCaps[3] + StepCaps[0] + StepCaps[1] + StepCaps[2];\n', '\t\t\tStepCaps[0] = 0;\n', '\t\t\tStepCaps[1] = 0;\n', '\t\t\tStepCaps[2] = 0;\n', '\t\t}\t\t\t\t\n', '\t\tuint256 balancePreIco = StepCaps[roundNum];\t\t\n', '\t\t\n', '\t\tif (balancePreIco == 0 && roundNum == 3) {\n', '\n', '\t\t} else {\n', '\t\t\t/// If tokens available on the pre-sale run out with the order, next pre-sale discount is applied to the remaining ETH\n', '\t\t\tif (balancePreIco < tokens) {\t\t\t\n', '\t\t\t\tuint256 toEthCaps = (balancePreIco.mul((100 - (StepDiscount[roundNum]))).div(100)).div(tokenRate);\t\t\t\n', '\t\t\t\tuint256 toReturnEth = ethAmount - toEthCaps ;\n', '\t\t\t\ttokens= balancePreIco;\n', '\t\t\t\tStepCaps[roundNum]=StepCaps[roundNum]-balancePreIco;\t\t\n', '\t\t\t\ttokens = tokens + computeTokenAmountAll(toReturnEth);\t\t\t\n', '\t\t\t} else {\n', '\t\t\t\tStepCaps[roundNum] = StepCaps[roundNum] - tokens;\n', '\t\t\t}\t\n', '\t\t}\t\t\n', '\t\treturn tokens ;\n', '    }\n', '\t\n', '    /// @notice Buy tokens from contract by sending ether\n', '    function buyTokens() internal {\t\t\n', '\t\t/// only accept a minimum amount of ETH?\n', '        require(msg.value >= 0.001 ether);\n', '        uint256 tokens ;\n', '\t\tuint256 xAmount = msg.value;\n', '\t\tuint256 toReturnEth;\n', '\t\tuint256 toTokensReturn;\n', '\t\tuint256 balanceIco ;\n', '\t\t\n', '\t\tif(isPreSale()){\t\n', '\t\t\tbalanceIco = preIcoCap.sub(stat.currentFundraiser);\n', '\t\t\ttokens =computeTokenAmountAll(xAmount);\n', '\t\t\tif (balanceIco < tokens) {\t\n', '\t\t\t\tuint8 roundNum = currentStepIndexAll();\n', '\t\t\t\ttoTokensReturn = tokens.sub(balanceIco);\t \n', '\t\t\t\ttoReturnEth = (toTokensReturn.mul((100 - (StepDiscount[roundNum]))).div(100)).div(tokenRate);\t\t\t\n', '\t\t\t}\t\t\t\n', '\t\t} else if (isMainSale()) {\n', '\t\t\tbalanceIco = IcoCap.add(preIcoCap);\n', ' \t\t\tbalanceIco = balanceIco.sub(stat.currentFundraiser);\t\n', '\t\t\ttokens = xAmount.mul(tokenRate);\n', '\t\t\tif (balanceIco < tokens) {\n', '\t\t\t\ttoTokensReturn = tokens.sub(balanceIco);\n', '\t\t\t\ttoReturnEth = toTokensReturn.mul(tokenRate);\n', '\t\t\t}\t\t\t\n', '\t\t} else {\n', '            revert();\n', '        }\n', '\n', '\t\tif (tokens > 0 )\n', '\t\t{\n', '\t\t\tif (balanceIco < tokens) {\t\n', '\t\t\t\t/// return  ETH\n', '\t\t\t\tmsg.sender.transfer(toReturnEth);\n', '\t\t\t\t_EnvoisTokens(balanceIco, xAmount - toReturnEth);\n', '\t\t\t} else {\n', '\t\t\t\t_EnvoisTokens(tokens, xAmount);\n', '\t\t\t}\n', '\t\t} else {\n', '            revert();\n', '\t\t}\n', '    }\n', '\n', '\t/// @dev issue tokens for a single buyer\n', '\t/// @dev Issue token based on Ether received.\n', '    /// @param _amount the amount of tokens to send\n', '\t/// @param _ethers the amount of ether it will receive\n', '    function _EnvoisTokens(uint _amount, uint _ethers) internal {\n', '\t\t/// sends tokens AFW to the buyer\n', '        sendTokens(msg.sender, _amount);\n', '        stat.currentFundraiser += _amount;\n', '\t\t/// sends ether to the seller\n', '        tokenWallet.transfer(_ethers);\n', '        stat.ethAmount += _ethers;\n', '        stat.txCounter += 1;\n', '    }\n', '    \n', '\t/// @dev issue tokens for a single buyer\n', '\t/// @dev Issue token based on Ether received.\n', '    /// @param _to address to send to\n', '\t/// @param _amount the amount of tokens to send\n', '    function sendTokens(address _to, uint _amount) internal {\n', '        require(_amount <= balances[tokenWallet]);\n', '        balances[tokenWallet] -= _amount;\n', '        balances[_to] += _amount;\n', '        emit Transfer(tokenWallet, _to, _amount);\n', '    }\n', '\n', '\t/// @dev issue tokens for a single buyer\n', '    /// @param _to address to send to\n', '\t/// @param _amount the amount of tokens to send\n', '\t/// @param _btcAmount the amount of BitCoin\n', '    function _sendTokensManually(address _to, uint _amount, uint _btcAmount) public onlyOwner {\n', '        require(_to != address(0));\n', '        sendTokens(_to, _amount);\n', '        stat.currentFundraiser += _amount;\n', '        stat.btcAmount += _btcAmount;\n', '        stat.txCounter += 1;\n', '    }\n', '\t\n', '\t/// @dev modify Base exchange rate.\n', '\t/// @param newTokenRate the new rate. \n', '    function setTokenRate(uint newTokenRate) public onlyOwner {\n', '        tokenRate = newTokenRate;\n', '    }\n', '\t\n', '\t/// @dev Returns the current rate.\n', '\tfunction getTokenRate() public constant returns (uint) {\n', '        return (tokenRate);\n', '    }    \n', '\t\n', '\t/// @dev Returns the current price for 1 ether.\n', '    function price() public view returns (uint256 tokens) {\n', '\t\tuint _amount = 1 ether;\n', '\t\t\n', '\t\tif(isPreSale()){\t\n', '\t\t\treturn computeTokenAmount(_amount);\n', '\t\t} else if (isMainSale()) {\n', '\t\t\treturn _amount.mul(tokenRate);\n', '\t\t} else {\n', '            return 0;\n', '        }\n', '    }\n', '\t/// @dev Returns the current price.\n', '\t/// @param _amount the amount of ether\n', '    function EthToAFW(uint _amount) public view returns (uint256 tokens) {\n', '\t\tif(isPreSale()){\t\n', '\t\t\treturn computeTokenAmount(_amount);\n', '\t\t} else if (isMainSale()) {\n', '\t\t\treturn _amount.mul(tokenRate);\n', '\t\t} else {\n', '            return 0;\n', '        }\n', '    }      \n', '\n', '\t/// @dev Returns the current Sale.\n', '    function GetSale() public constant returns (uint256 tokens) {\n', '\t\tif(isPreSale()){\t\n', '\t\t\treturn 1;\n', '\t\t} else if (isMainSale()) {\n', '\t\t\treturn 2;\n', '\t\t} else {\n', '            return 0;\n', '        }\n', '    }        \n', '\t\n', '\t/// @dev Returns the current Cap preIco.\n', '\t/// @param _roundNum the caps \n', '\tfunction getCapTab(uint _roundNum) public view returns (uint) {\t\t\t\n', '\t\treturn (StepCaps[_roundNum]);\n', '    }\n', '\t\n', '\t/// @dev modify Base exchange rate.\n', '\t/// @param _roundNum pre-sale round\n', '\t/// @param _value initialize the number of tokens for the indicated pre-sale round\n', '    function setCapTab(uint _roundNum,uint _value) public onlyOwner {\n', '        require(_value > 0);\n', '\t\tStepCaps[_roundNum] = _value;\n', '    }\t\n', '\n', '\t/// @dev Returns the current Balance of Main Sale.\n', '\tfunction getBalanceIco() public constant returns (uint) {\n', '\t\tuint balanceIco = IcoCap.add(preIcoCap);\n', '\t\tbalanceIco = balanceIco.sub(stat.currentFundraiser);\t\n', '        return(balanceIco);\n', '    } \n', '\t\n', '\t /**\n', '     * Overrides the burn function so that it cannot be called until after\n', '     * transfers have been enabled.\n', '     *\n', '     * @param _value    The amount of tokens to burn  \n', '     */\n', '   // burn(uint256 _value) public whenNotPaused {\n', '    function AFWBurn(uint256 _value) public onlyOwner {\n', '        require(msg.sender == owner);\n', '        require(balances[msg.sender] >= _value *10**18);\n', '        super.burn(_value *10**18);\n', '    }\n', '\n', '}']
['/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity\n', ' *\n', ' * The AFW token contract bases on the ERC20 standard token contracts \n', ' * Company Optimum Consulting - Courbevoie\n', ' * */\n', ' \n', 'pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity\n', ' */\n', 'contract Pausable is Ownable {\n', '\n', '  uint public endDate;\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS not paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(now >= endDate);\n', '    _;\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken, Pausable {\n', '    using SafeMath for uint256;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  }\n', ' \n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken {\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256  _value)\n', '        public onlyOwner\n', '    {\n', '        require(_value > 0);\n', '\t\trequire(balances[msg.sender] >= _value);\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '    event Burn(address indexed burner, uint256  indexed value);\n', '} \n', '   \n', 'contract AFWToken is StandardToken , BurnableToken  {\n', '    using SafeMath for uint256;\n', '    string public constant name = "All4FW";\n', '    string public constant symbol = "AFW";\n', '    uint8 public constant decimals = 18;\t\n', '\t\n', '\t// wallets address for allocation\t\n', '\taddress public Bounties_Wallet = 0xA7135CbD1281d477eef4FC7F0AB19566A47bE759; // 5% : Bounty\n', '\taddress public Team_Wallet = 0xaA1582A5b00fDEc47FeD1CcDDe7e5fA3652B456b; // 8% : Equity & Team\n', '\taddress public OEM_Wallet = 0x51e32712C65AEFAAea9d0b7336A975f400825309; // 10% : Community Builting, Biz Dev\n', '\taddress public LA_wallet = 0xBaC4B80b6C74518bF31b5cE1be80926ffEEBB4db; //8% : Legal & advisors\n', '    \n', '\taddress public tokenWallet = 0x4CE38c5f44794d6173Dd3BBaf208EeEf2033370A;    \n', '\tuint256 public constant INITIAL_SUPPLY = 100000000 ether;\t\n', '\t\n', '\t\n', '\t/// Base exchange rate is set to 1 ETH = 650 AFW.\n', '\tuint256 tokenRate = 650; \n', '\t\n', '\t\n', '    function AFWToken() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '\t\t\n', '\t\t// InitialDistribution\n', '\t\t// 31% ---> 31000000\n', '\t\tbalances[Bounties_Wallet] = INITIAL_SUPPLY.mul(5).div(100) ;\n', '\t\tbalances[Team_Wallet] = INITIAL_SUPPLY.mul(8).div(100);\n', '\t\tbalances[OEM_Wallet] = INITIAL_SUPPLY.mul(10).div(100) ;\n', '\t\tbalances[LA_wallet] = INITIAL_SUPPLY.mul(8).div(100) ;\n', '\t\t\n', '\t\t// 69% ---> 69000000\n', '        balances[tokenWallet] = INITIAL_SUPPLY.mul(69).div(100);\n', '\t\t\n', '        endDate = _endDate;\n', '\t\t\t\t\n', '        emit Transfer(0x0, Bounties_Wallet, balances[Bounties_Wallet]);\n', '        emit Transfer(0x0, Team_Wallet, balances[Team_Wallet]);\n', '\t\temit Transfer(0x0, OEM_Wallet, balances[OEM_Wallet]);\n', '        emit Transfer(0x0, LA_wallet, balances[LA_wallet]);\n', '\t\t\t\t\n', '\t\temit Transfer(0x0, tokenWallet, balances[tokenWallet]);\n', '    }\n', '\n', '\t///-------------------------------------- Pres-Sale / Main Sale\t\n', '    ///\n', '    /// startTime                                                      \t\t\t\t\t\t\t\t\t\t\t\tendTime\n', '    ///     \n', '\t///\t\t2 Days\t\t  \t5 Days\t\t\t\t6 Days\t\t\t6 Days\t\t\t\t\t\t\t\t1 Month\t\t\t\t\n', '\t///\t    750 000 AFW\t\t900 000 AFW1\t\t500 000 AFW\t\t1 850 000 AFW\t\t\t\t\t\t69 000 000 AFW\n', '    ///  O--------------O-----------------O------------------O-------------------O--------O------------------------->\n', '    ///     Disc 20 %     \tDisc 10 %          \tDisc 5 %        Disc 3 %           Closed            Main Sale 0%\t\t\tFinalized\n', '    \n', '\n', '\t/**\n', '\t******** DATE PReICO - ICO */\n', '    uint public constant startDate = 1524866399; /// Start Pre-sale - Friday 27 April 2018 23:59:59\n', '    uint public constant endPreICO = 1526680799;/// Close Pre-Sale - Friday 18 May 2018 23:59:59\n', '\t\n', '\t/// HOT sale start time\n', '    uint constant preSale20 = startDate ; /// Start Pre-sale 20% - Friday 27 April 2018 23:59:59\n', '    uint constant preSale10 = 1525039200; /// Start Pre-sale 10% - Monday 30 April 2018 00:00:00\n', '    uint constant preSale5 = 1525471200; /// Start Pre-sale 5% - Saturday 5 May 2018 00:00:00\n', '\tuint constant preSale3 = 1525989600; /// Start Pre-sale 3% - Friday 11 May 2018 00:00:00  \n', '\t\t\t\n', '    uint public constant startICO = 1526680800; /// Start Main Sale - Saturday 19 May 2018 00:00:00\n', '    uint public constant _endDate = 1529186399; /// Close Main Sale - Saturday 16 June 2018 23:59:59 \n', '\n', '    struct Stat {\n', '        uint currentFundraiser;\n', '        uint btcAmount;\n', '        uint ethAmount;\n', '        uint txCounter;\n', '    }    \n', '    Stat public stat;    \n', '\t\n', '\t/// Maximum tokens to be allocated on the sale (69% of the hard cap)\n', '    uint public constant preIcoCap = 5000000 ether;\n', '    uint public constant IcoCap = 64000000 ether;\n', '\n', '\t/// token caps for each round\n', '\tuint256[4] private StepCaps = [\n', '        750000 ether, \t/// 20% \n', '        900000 ether, \t/// 10%\n', '        1500000 ether, \t/// 5%\n', '        1850000 ether \t/// 3%\n', '    ];\t\n', '\tuint8[4] private StepDiscount = [20, 10, 5, 3];\n', '\t\t\n', '    /**\n', '     * @dev modifier to allow actions only when Pre-ICO end date is now\n', '     */\n', '    modifier isFinished() {\n', '        require(now >= endDate);\n', '        _;\n', '    }\n', '\t\n', '\t/// @return the index of the current discount by date.\n', '    function currentStepIndexByDate() internal view returns (uint8 roundNum) {\n', '        require(now <= endPreICO); \n', '        if(now > preSale3) return 3;\n', '        if(now > preSale5) return 2;\n', '        if(now > preSale10) return 1;\n', '        if(now > preSale20) return 0;\n', '        else return 0;\n', '    }\n', '\t\n', '\n', '    /// @return integer representing the index of the current sale round\n', '    function currentStepIndex() internal view returns (uint8 roundNum) {\n', '        roundNum = currentStepIndexByDate();\n', '        /// round determined by conjunction of both time and total sold tokens\n', '        while(roundNum < 3 && stat.currentFundraiser > StepCaps[roundNum]) {\n', '            roundNum++;\n', '        }\n', '    }\n', '\n', '\t/// @dev Function for calculate the price\n', '\t/// @dev Compute the amount of AFW token that can be purchased.\n', '    /// @param ethAmount Amount of Ether to purchase AFW.\n', '    function computeTokenAmount( uint256 ethAmount) internal view returns (uint256) {\n', '        uint256 tokenBase = ethAmount.mul(tokenRate);\n', '\t\tuint8 roundNum = currentStepIndex();\n', '        uint256 tokens = tokenBase.mul(100)/(100 - (StepDiscount[roundNum]));\n', '\t\treturn tokens;\n', '    }\n', '\n', '\t\n', '\t/// @dev Returns is Pre-Sale.\n', '    function isPreSale() internal view returns (bool) {\n', '        if (now >= startDate && now < endPreICO && preIcoCap.sub(stat.currentFundraiser) > 0) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\t/// @dev Returns is Main Sale.\n', '    function isMainSale() internal view returns (bool) {\n', '        if (now >= startICO && now < endDate) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @notice Buy tokens from contract by sending ether\n', '    function () payable public {\n', '        if (msg.value < 0.001 ether || (!isPreSale() && !isMainSale())) revert();\n', '        buyTokens();\n', '    }\n', '\t\n', '\t/// @return integer representing the index of the current sale round\n', '    function currentStepIndexAll() internal view returns (uint8 roundNum) {\n', '        roundNum = currentStepIndexByDate();\n', '        /// round determined by conjunction of both time and total sold tokens\n', '        while(roundNum < 3 && StepCaps[roundNum]<= 0) {\n', '            roundNum++;\n', '        }\n', '    }\n', '\t\n', '\t/// @dev Compute the amount of AFW token that can be purchased.\n', '    /// @param ethAmount Amount of Ether to purchase AFW.\n', '\tfunction computeTokenAmountAll(uint256 ethAmount) internal returns (uint256) {\n', '        uint256 tokenBase = ethAmount.mul(tokenRate);\n', '\t\tuint8 roundNum = currentStepIndexAll();\n', '\t\tuint256 tokens = tokenBase.mul(100)/(100 - (StepDiscount[roundNum]));\n', '\t\t\t\t\n', '\t\tif (roundNum == 3 && (StepCaps[0] > 0 || StepCaps[1] > 0 || StepCaps[2] > 0))\n', '\t\t{\n', '\t\t\t/// All unsold pre-sale tokens are made available at the last pre-sale period (3% discount rate)\n', '\t\t\tStepCaps[3] = StepCaps[3] + StepCaps[0] + StepCaps[1] + StepCaps[2];\n', '\t\t\tStepCaps[0] = 0;\n', '\t\t\tStepCaps[1] = 0;\n', '\t\t\tStepCaps[2] = 0;\n', '\t\t}\t\t\t\t\n', '\t\tuint256 balancePreIco = StepCaps[roundNum];\t\t\n', '\t\t\n', '\t\tif (balancePreIco == 0 && roundNum == 3) {\n', '\n', '\t\t} else {\n', '\t\t\t/// If tokens available on the pre-sale run out with the order, next pre-sale discount is applied to the remaining ETH\n', '\t\t\tif (balancePreIco < tokens) {\t\t\t\n', '\t\t\t\tuint256 toEthCaps = (balancePreIco.mul((100 - (StepDiscount[roundNum]))).div(100)).div(tokenRate);\t\t\t\n', '\t\t\t\tuint256 toReturnEth = ethAmount - toEthCaps ;\n', '\t\t\t\ttokens= balancePreIco;\n', '\t\t\t\tStepCaps[roundNum]=StepCaps[roundNum]-balancePreIco;\t\t\n', '\t\t\t\ttokens = tokens + computeTokenAmountAll(toReturnEth);\t\t\t\n', '\t\t\t} else {\n', '\t\t\t\tStepCaps[roundNum] = StepCaps[roundNum] - tokens;\n', '\t\t\t}\t\n', '\t\t}\t\t\n', '\t\treturn tokens ;\n', '    }\n', '\t\n', '    /// @notice Buy tokens from contract by sending ether\n', '    function buyTokens() internal {\t\t\n', '\t\t/// only accept a minimum amount of ETH?\n', '        require(msg.value >= 0.001 ether);\n', '        uint256 tokens ;\n', '\t\tuint256 xAmount = msg.value;\n', '\t\tuint256 toReturnEth;\n', '\t\tuint256 toTokensReturn;\n', '\t\tuint256 balanceIco ;\n', '\t\t\n', '\t\tif(isPreSale()){\t\n', '\t\t\tbalanceIco = preIcoCap.sub(stat.currentFundraiser);\n', '\t\t\ttokens =computeTokenAmountAll(xAmount);\n', '\t\t\tif (balanceIco < tokens) {\t\n', '\t\t\t\tuint8 roundNum = currentStepIndexAll();\n', '\t\t\t\ttoTokensReturn = tokens.sub(balanceIco);\t \n', '\t\t\t\ttoReturnEth = (toTokensReturn.mul((100 - (StepDiscount[roundNum]))).div(100)).div(tokenRate);\t\t\t\n', '\t\t\t}\t\t\t\n', '\t\t} else if (isMainSale()) {\n', '\t\t\tbalanceIco = IcoCap.add(preIcoCap);\n', ' \t\t\tbalanceIco = balanceIco.sub(stat.currentFundraiser);\t\n', '\t\t\ttokens = xAmount.mul(tokenRate);\n', '\t\t\tif (balanceIco < tokens) {\n', '\t\t\t\ttoTokensReturn = tokens.sub(balanceIco);\n', '\t\t\t\ttoReturnEth = toTokensReturn.mul(tokenRate);\n', '\t\t\t}\t\t\t\n', '\t\t} else {\n', '            revert();\n', '        }\n', '\n', '\t\tif (tokens > 0 )\n', '\t\t{\n', '\t\t\tif (balanceIco < tokens) {\t\n', '\t\t\t\t/// return  ETH\n', '\t\t\t\tmsg.sender.transfer(toReturnEth);\n', '\t\t\t\t_EnvoisTokens(balanceIco, xAmount - toReturnEth);\n', '\t\t\t} else {\n', '\t\t\t\t_EnvoisTokens(tokens, xAmount);\n', '\t\t\t}\n', '\t\t} else {\n', '            revert();\n', '\t\t}\n', '    }\n', '\n', '\t/// @dev issue tokens for a single buyer\n', '\t/// @dev Issue token based on Ether received.\n', '    /// @param _amount the amount of tokens to send\n', '\t/// @param _ethers the amount of ether it will receive\n', '    function _EnvoisTokens(uint _amount, uint _ethers) internal {\n', '\t\t/// sends tokens AFW to the buyer\n', '        sendTokens(msg.sender, _amount);\n', '        stat.currentFundraiser += _amount;\n', '\t\t/// sends ether to the seller\n', '        tokenWallet.transfer(_ethers);\n', '        stat.ethAmount += _ethers;\n', '        stat.txCounter += 1;\n', '    }\n', '    \n', '\t/// @dev issue tokens for a single buyer\n', '\t/// @dev Issue token based on Ether received.\n', '    /// @param _to address to send to\n', '\t/// @param _amount the amount of tokens to send\n', '    function sendTokens(address _to, uint _amount) internal {\n', '        require(_amount <= balances[tokenWallet]);\n', '        balances[tokenWallet] -= _amount;\n', '        balances[_to] += _amount;\n', '        emit Transfer(tokenWallet, _to, _amount);\n', '    }\n', '\n', '\t/// @dev issue tokens for a single buyer\n', '    /// @param _to address to send to\n', '\t/// @param _amount the amount of tokens to send\n', '\t/// @param _btcAmount the amount of BitCoin\n', '    function _sendTokensManually(address _to, uint _amount, uint _btcAmount) public onlyOwner {\n', '        require(_to != address(0));\n', '        sendTokens(_to, _amount);\n', '        stat.currentFundraiser += _amount;\n', '        stat.btcAmount += _btcAmount;\n', '        stat.txCounter += 1;\n', '    }\n', '\t\n', '\t/// @dev modify Base exchange rate.\n', '\t/// @param newTokenRate the new rate. \n', '    function setTokenRate(uint newTokenRate) public onlyOwner {\n', '        tokenRate = newTokenRate;\n', '    }\n', '\t\n', '\t/// @dev Returns the current rate.\n', '\tfunction getTokenRate() public constant returns (uint) {\n', '        return (tokenRate);\n', '    }    \n', '\t\n', '\t/// @dev Returns the current price for 1 ether.\n', '    function price() public view returns (uint256 tokens) {\n', '\t\tuint _amount = 1 ether;\n', '\t\t\n', '\t\tif(isPreSale()){\t\n', '\t\t\treturn computeTokenAmount(_amount);\n', '\t\t} else if (isMainSale()) {\n', '\t\t\treturn _amount.mul(tokenRate);\n', '\t\t} else {\n', '            return 0;\n', '        }\n', '    }\n', '\t/// @dev Returns the current price.\n', '\t/// @param _amount the amount of ether\n', '    function EthToAFW(uint _amount) public view returns (uint256 tokens) {\n', '\t\tif(isPreSale()){\t\n', '\t\t\treturn computeTokenAmount(_amount);\n', '\t\t} else if (isMainSale()) {\n', '\t\t\treturn _amount.mul(tokenRate);\n', '\t\t} else {\n', '            return 0;\n', '        }\n', '    }      \n', '\n', '\t/// @dev Returns the current Sale.\n', '    function GetSale() public constant returns (uint256 tokens) {\n', '\t\tif(isPreSale()){\t\n', '\t\t\treturn 1;\n', '\t\t} else if (isMainSale()) {\n', '\t\t\treturn 2;\n', '\t\t} else {\n', '            return 0;\n', '        }\n', '    }        \n', '\t\n', '\t/// @dev Returns the current Cap preIco.\n', '\t/// @param _roundNum the caps \n', '\tfunction getCapTab(uint _roundNum) public view returns (uint) {\t\t\t\n', '\t\treturn (StepCaps[_roundNum]);\n', '    }\n', '\t\n', '\t/// @dev modify Base exchange rate.\n', '\t/// @param _roundNum pre-sale round\n', '\t/// @param _value initialize the number of tokens for the indicated pre-sale round\n', '    function setCapTab(uint _roundNum,uint _value) public onlyOwner {\n', '        require(_value > 0);\n', '\t\tStepCaps[_roundNum] = _value;\n', '    }\t\n', '\n', '\t/// @dev Returns the current Balance of Main Sale.\n', '\tfunction getBalanceIco() public constant returns (uint) {\n', '\t\tuint balanceIco = IcoCap.add(preIcoCap);\n', '\t\tbalanceIco = balanceIco.sub(stat.currentFundraiser);\t\n', '        return(balanceIco);\n', '    } \n', '\t\n', '\t /**\n', '     * Overrides the burn function so that it cannot be called until after\n', '     * transfers have been enabled.\n', '     *\n', '     * @param _value    The amount of tokens to burn  \n', '     */\n', '   // burn(uint256 _value) public whenNotPaused {\n', '    function AFWBurn(uint256 _value) public onlyOwner {\n', '        require(msg.sender == owner);\n', '        require(balances[msg.sender] >= _value *10**18);\n', '        super.burn(_value *10**18);\n', '    }\n', '\n', '}']
