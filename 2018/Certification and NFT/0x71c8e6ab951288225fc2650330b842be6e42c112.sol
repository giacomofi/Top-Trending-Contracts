['pragma solidity ^0.4.17;\n', '\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    function Ownable() public {\n', '        owner = 0x2d312d2a3cb2a7a48e900aA4559Ec068ab5b4B6D;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    event OwnershipTransferred(address indexed from, address indexed to);\n', '    \n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != 0x0);\n', '        OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract TokenTransferInterface {\n', '    function transfer(address _to, uint256 _value) public;\n', '}\n', '\n', '\n', 'contract AirDrop is Ownable {\n', '\n', '    TokenTransferInterface public constant token = TokenTransferInterface(0xC8A0D57d5F24622813a1BEe07509287BFaA4A3bc);\n', '\n', '    function multiValueAirDrop(address[] _addrs, uint256[] _values) public onlyOwner {\n', '\trequire(_addrs.length == _values.length && _addrs.length <= 100);\n', '        for (uint i = 0; i < _addrs.length; i++) {\n', '            if (_addrs[i] != 0x0 && _values[i] > 0) {\n', '                token.transfer(_addrs[i], _values[i] * (10 ** 18));  \n', '            }\n', '        }\n', '    }\n', '\n', '    function singleValueAirDrop(address[] _addrs, uint256 _value) public onlyOwner {\n', '\trequire(_addrs.length <= 100 && _value > 0);\n', '        for (uint i = 0; i < _addrs.length; i++) {\n', '            if (_addrs[i] != 0x0) {\n', '                token.transfer(_addrs[i], _value * (10 ** 18));\n', '            }\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.17;\n', '\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    function Ownable() public {\n', '        owner = 0x2d312d2a3cb2a7a48e900aA4559Ec068ab5b4B6D;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    event OwnershipTransferred(address indexed from, address indexed to);\n', '    \n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != 0x0);\n', '        OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract TokenTransferInterface {\n', '    function transfer(address _to, uint256 _value) public;\n', '}\n', '\n', '\n', 'contract AirDrop is Ownable {\n', '\n', '    TokenTransferInterface public constant token = TokenTransferInterface(0xC8A0D57d5F24622813a1BEe07509287BFaA4A3bc);\n', '\n', '    function multiValueAirDrop(address[] _addrs, uint256[] _values) public onlyOwner {\n', '\trequire(_addrs.length == _values.length && _addrs.length <= 100);\n', '        for (uint i = 0; i < _addrs.length; i++) {\n', '            if (_addrs[i] != 0x0 && _values[i] > 0) {\n', '                token.transfer(_addrs[i], _values[i] * (10 ** 18));  \n', '            }\n', '        }\n', '    }\n', '\n', '    function singleValueAirDrop(address[] _addrs, uint256 _value) public onlyOwner {\n', '\trequire(_addrs.length <= 100 && _value > 0);\n', '        for (uint i = 0; i < _addrs.length; i++) {\n', '            if (_addrs[i] != 0x0) {\n', '                token.transfer(_addrs[i], _value * (10 ** 18));\n', '            }\n', '        }\n', '    }\n', '}']
