['pragma solidity ^0.4.21;\n', 'contract BLInterface {\n', '    function setPrimaryAccount(address newMainAddress) public;\n', '    function withdraw() public;\n', '}\n', 'contract CSInterface {\n', '    function goalReached() public;\n', '    function goal() public returns (uint);\n', '    function hasClosed() public returns(bool);\n', '    function weiRaised() public returns (uint);\n', '}\n', 'contract StorageInterface {\n', '    function getUInt(bytes32 record) public constant returns (uint);\n', '}\n', 'contract Interim {\n', '    // Define DS, Bubbled and Token Sale addresses\n', '    address public owner; // DS wallet\n', '    address public bubbled; // bubbled dwallet\n', '    BLInterface internal BL; // Blocklord Contract Interface\n', '    CSInterface internal CS; // Crowdsale contract interface\n', '    StorageInterface internal s; // Eternal Storage Interface\n', '    uint public rate; // ETH to GBP rate\n', '    function Interim() public {\n', '        // Setup owner DS\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    modifier onlyBubbled() {\n', '        require(msg.sender == bubbled);\n', '        _;\n', '    }\n', '    modifier onlyMembers() {\n', '        require(msg.sender == owner || msg.sender == bubbled);\n', '        _;\n', '    }\n', '    // Setup the interface to the Blocklord contract\n', '    function setBLInterface(address newAddress) public onlyOwner {\n', '        BL = BLInterface(newAddress);\n', '    }\n', '    // Setup the interface to the storage contract\n', '    function setStorageInterface(address newAddress) public onlyOwner {\n', '        s = StorageInterface(newAddress);\n', '    }\n', '    // Setup the interface to the Blocklord contract\n', '    function setCSInterface(address newAddress) public onlyOwner {\n', '        CS = CSInterface(newAddress);\n', '    }\n', '    // Setup the interface to the Bubbled multisig contract\n', '    function setBubbled(address newAddress) public onlyMembers {\n', '        bubbled = newAddress;\n', '    }\n', '    // Setup the interface to the DS Personal address\n', '    function setDS(address newAddress) public onlyOwner {\n', '        owner = newAddress;\n', '    }\n', '\n', '    function setRate(uint _rate) public onlyOwner {\n', '      rate = _rate;\n', '    }\n', '\n', '    // we can call this function to check the status of both crowdsale and blocklord\n', '    function checkStatus () public returns(uint raisedBL, uint raisedCS, uint total, uint required, bool goalReached){\n', '      raisedBL = s.getUInt(keccak256(address(this), "balance"));\n', '      raisedCS = CS.weiRaised();\n', '      total = raisedBL + raisedCS;\n', '      required = CS.goal();\n', '      goalReached = total >= required;\n', '    }\n', '\n', '    function completeContract (bool toSplit) public payable {\n', '    //   require(CS.hasClosed()); // fail if crowdsale has not closed\n', '    bool goalReached;\n', '    (,,,goalReached) = checkStatus();\n', '    if (goalReached) require(toSplit == false);\n', '      uint feeDue;\n', '      if (toSplit == false) {\n', '        feeDue = 20000 / rate * 1000000000000000000; // fee due in Wei\n', '        require(msg.value >= feeDue);\n', '      }\n', '      BL.withdraw(); // withdraw ETH from Blocklord contract to Interim contract\n', '       if (goalReached) { // if goal reached\n', '         BL.setPrimaryAccount(bubbled); // Transfer Blocklord contract and payment to be maade offline\n', '         owner.transfer(feeDue);\n', '         bubbled.transfer(this.balance);\n', '       } else { // if goal not reached\n', '         if (toSplit) { // if Bubbled decides to split\n', '           BL.setPrimaryAccount(owner); //set ownership to DS\n', '           uint balance = this.balance;\n', '           bubbled.transfer(balance / 2);\n', '           owner.transfer(balance / 2);\n', '         } else {\n', '           // Bubbled decides to keep blocklord\n', '           BL.setPrimaryAccount(bubbled);\n', '           owner.transfer(feeDue);\n', '           bubbled.transfer(this.balance);\n', '         }\n', '       }\n', '    }\n', '    // receive ether from blocklord contract\n', '    function () public payable {\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', 'contract BLInterface {\n', '    function setPrimaryAccount(address newMainAddress) public;\n', '    function withdraw() public;\n', '}\n', 'contract CSInterface {\n', '    function goalReached() public;\n', '    function goal() public returns (uint);\n', '    function hasClosed() public returns(bool);\n', '    function weiRaised() public returns (uint);\n', '}\n', 'contract StorageInterface {\n', '    function getUInt(bytes32 record) public constant returns (uint);\n', '}\n', 'contract Interim {\n', '    // Define DS, Bubbled and Token Sale addresses\n', '    address public owner; // DS wallet\n', '    address public bubbled; // bubbled dwallet\n', '    BLInterface internal BL; // Blocklord Contract Interface\n', '    CSInterface internal CS; // Crowdsale contract interface\n', '    StorageInterface internal s; // Eternal Storage Interface\n', '    uint public rate; // ETH to GBP rate\n', '    function Interim() public {\n', '        // Setup owner DS\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    modifier onlyBubbled() {\n', '        require(msg.sender == bubbled);\n', '        _;\n', '    }\n', '    modifier onlyMembers() {\n', '        require(msg.sender == owner || msg.sender == bubbled);\n', '        _;\n', '    }\n', '    // Setup the interface to the Blocklord contract\n', '    function setBLInterface(address newAddress) public onlyOwner {\n', '        BL = BLInterface(newAddress);\n', '    }\n', '    // Setup the interface to the storage contract\n', '    function setStorageInterface(address newAddress) public onlyOwner {\n', '        s = StorageInterface(newAddress);\n', '    }\n', '    // Setup the interface to the Blocklord contract\n', '    function setCSInterface(address newAddress) public onlyOwner {\n', '        CS = CSInterface(newAddress);\n', '    }\n', '    // Setup the interface to the Bubbled multisig contract\n', '    function setBubbled(address newAddress) public onlyMembers {\n', '        bubbled = newAddress;\n', '    }\n', '    // Setup the interface to the DS Personal address\n', '    function setDS(address newAddress) public onlyOwner {\n', '        owner = newAddress;\n', '    }\n', '\n', '    function setRate(uint _rate) public onlyOwner {\n', '      rate = _rate;\n', '    }\n', '\n', '    // we can call this function to check the status of both crowdsale and blocklord\n', '    function checkStatus () public returns(uint raisedBL, uint raisedCS, uint total, uint required, bool goalReached){\n', '      raisedBL = s.getUInt(keccak256(address(this), "balance"));\n', '      raisedCS = CS.weiRaised();\n', '      total = raisedBL + raisedCS;\n', '      required = CS.goal();\n', '      goalReached = total >= required;\n', '    }\n', '\n', '    function completeContract (bool toSplit) public payable {\n', '    //   require(CS.hasClosed()); // fail if crowdsale has not closed\n', '    bool goalReached;\n', '    (,,,goalReached) = checkStatus();\n', '    if (goalReached) require(toSplit == false);\n', '      uint feeDue;\n', '      if (toSplit == false) {\n', '        feeDue = 20000 / rate * 1000000000000000000; // fee due in Wei\n', '        require(msg.value >= feeDue);\n', '      }\n', '      BL.withdraw(); // withdraw ETH from Blocklord contract to Interim contract\n', '       if (goalReached) { // if goal reached\n', '         BL.setPrimaryAccount(bubbled); // Transfer Blocklord contract and payment to be maade offline\n', '         owner.transfer(feeDue);\n', '         bubbled.transfer(this.balance);\n', '       } else { // if goal not reached\n', '         if (toSplit) { // if Bubbled decides to split\n', '           BL.setPrimaryAccount(owner); //set ownership to DS\n', '           uint balance = this.balance;\n', '           bubbled.transfer(balance / 2);\n', '           owner.transfer(balance / 2);\n', '         } else {\n', '           // Bubbled decides to keep blocklord\n', '           BL.setPrimaryAccount(bubbled);\n', '           owner.transfer(feeDue);\n', '           bubbled.transfer(this.balance);\n', '         }\n', '       }\n', '    }\n', '    // receive ether from blocklord contract\n', '    function () public payable {\n', '    }\n', '}']
