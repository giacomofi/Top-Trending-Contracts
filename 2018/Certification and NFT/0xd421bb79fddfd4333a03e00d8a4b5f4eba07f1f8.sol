['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20Basic {\n', '\tfunction totalSupply() public view returns (uint256);\n', '\tfunction balanceOf(address who) public view returns (uint256);\n', '\tfunction transfer(address to, uint256 value) public returns (bool);\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '\tfunction allowance(address owner, address spender) public view returns (uint256);\n', '\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\tfunction approve(address spender, uint256 value) public returns (bool);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '\tusing SafeMath for uint256;\n', '\n', '\tmapping(address => uint256) balances;\n', '\n', '\tuint256 totalSupply_;\n', '\n', '\tfunction totalSupply() public view returns (uint256) {\n', '\t\treturn totalSupply_;\n', '\t}\n', '\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[msg.sender]);\n', '\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '\tmapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[_from]);\n', '\t\trequire(_value <= allowed[_from][msg.sender]);\n', '\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\tTransfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\tApproval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '\n', '\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '\t\tuint oldValue = allowed[msg.sender][_spender];\n', '\t\tif (_subtractedValue > oldValue) {\n', '\t\t\tallowed[msg.sender][_spender] = 0;\n', '\t\t} else {\n', '\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\t\t}\n', '\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        Burn(burner, _value);\n', '        Transfer(burner, address(0), _value);\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\tuint256 c = a * b;\n', '\t\tassert(c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a / b;\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '}\n', '\n', 'contract Ownable {\n', '\taddress public owner;\n', '\n', '\n', '\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '\tfunction Ownable() public {\n', '\t\towner = msg.sender;\n', '\t}\n', '\n', '\tmodifier onlyOwner() {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction transferOwnership(address newOwner) public onlyOwner {\n', '\t\trequire(newOwner != address(0));\n', '\t\tOwnershipTransferred(owner, newOwner);\n', '\t\towner = newOwner;\n', '\t}\n', '\n', '}\n', '\n', 'contract TriggmineToken is StandardToken, BurnableToken, Ownable {\n', '\n', '\tstring public constant name = "Triggmine Coin";\n', '\n', '\tstring public constant symbol = "TRG";\n', '\n', '\tuint256 public constant decimals = 18;\n', '\n', '\tbool public released = false;\n', '\tevent Release();\n', '\n', '\taddress public holder;\n', '\n', '\tmapping(address => uint) public lockedAddresses;\n', '\n', '\tmodifier isReleased () {\n', '\t\trequire(released || msg.sender == holder || msg.sender == owner);\n', '\t\trequire(lockedAddresses[msg.sender] <= now);\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction TriggmineToken() public {\n', '\t\towner = 0x7E83f1F82Ab7dDE49F620D2546BfFB0539058414;\n', '\n', '\t\ttotalSupply_ = 620000000 * (10 ** decimals);\n', '\t\tbalances[owner] = totalSupply_;\n', '\t\tTransfer(0x0, owner, totalSupply_);\n', '\n', '\t\tholder = owner;\n', '\t}\n', '\n', '\tfunction lockAddress(address _lockedAddress, uint256 _time) public onlyOwner returns (bool) {\n', '\t\trequire(balances[_lockedAddress] == 0 && lockedAddresses[_lockedAddress] == 0 && _time > now);\n', '\t\tlockedAddresses[_lockedAddress] = _time;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction release() onlyOwner public returns (bool) {\n', '\t\trequire(!released);\n', '\t\treleased = true;\n', '\t\tRelease();\n', '\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getOwner() public view returns (address) {\n', '\t\treturn owner;\n', '\t}\n', '\n', '\tfunction transfer(address _to, uint256 _value) public isReleased returns (bool) {\n', '\t\treturn super.transfer(_to, _value);\n', '\t}\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public isReleased returns (bool) {\n', '\t\treturn super.transferFrom(_from, _to, _value);\n', '\t}\n', '\n', '\tfunction approve(address _spender, uint256 _value) public isReleased returns (bool) {\n', '\t\treturn super.approve(_spender, _value);\n', '\t}\n', '\n', '\tfunction increaseApproval(address _spender, uint _addedValue) public isReleased returns (bool success) {\n', '\t\treturn super.increaseApproval(_spender, _addedValue);\n', '\t}\n', '\n', '\tfunction decreaseApproval(address _spender, uint _subtractedValue) public isReleased returns (bool success) {\n', '\t\treturn super.decreaseApproval(_spender, _subtractedValue);\n', '\t}\n', '\n', '\tfunction transferOwnership(address newOwner) public onlyOwner {\n', '\t\taddress oldOwner = owner;\n', '\t\tsuper.transferOwnership(newOwner);\n', '\n', '\t\tif (oldOwner != holder) {\n', '\t\t\tallowed[holder][oldOwner] = 0;\n', '\t\t\tApproval(holder, oldOwner, 0);\n', '\t\t}\n', '\n', '\t\tif (owner != holder) {\n', '\t\t\tallowed[holder][owner] = balances[holder];\n', '\t\t\tApproval(holder, owner, balances[holder]);\n', '\t\t}\n', '\t}\n', '\n', '}\n', '\n', 'contract TriggminePresale is Ownable {\n', '    uint public constant SALES_START = 1523890800;\n', '    uint public constant SALES_END = 1525100400; \n', '\n', '    address public constant ASSET_MANAGER_WALLET = 0x7E83f1F82Ab7dDE49F620D2546BfFB0539058414;\n', '    address public constant ESCROW_WALLET = 0x2e9F22E2D559d9a5ce234AB722bc6e818FA5D079;\n', '\n', '    address public constant TOKEN_ADDRESS = 0x98F319D4dc58315796Ec8F06274fe2d4a5A69721; \n', '    uint public constant TOKEN_CENTS = 1000000000000000000;\n', '    uint public constant TOKEN_PRICE = 0.0001 ether;\n', '\n', '    uint public constant ETH_HARD_CAP = 3000 ether;\n', '    uint public constant SALE_MAX_CAP = 36000000 * TOKEN_CENTS;\n', '\n', '    uint public constant BONUS_WL = 20;\n', '    uint public constant BONUS_2_DAYS = 20;\n', '    uint public constant BONUS_3_DAYS = 19;\n', '    uint public constant BONUS_4_DAYS = 18;\n', '    uint public constant BONUS_5_DAYS = 17;\n', '    uint public constant BONUS_6_DAYS = 16;\n', '    uint public constant BONUS_15_DAYS = 15;\n', '\n', '    uint public saleContributions;\n', '    uint public tokensPurchased;\n', '\n', '    address public whitelistSupplier;\n', '    mapping(address => bool) public whitelistPrivate;\n', '    mapping(address => bool) public whitelistPublic;\n', '\n', '    event Contributed(address receiver, uint contribution, uint reward);\n', '    event PrivateWhitelistUpdated(address participant, bool isWhitelisted);\n', '    event PublicWhitelistUpdated(address participant, bool isWhitelisted);\n', '\n', '    function TriggminePresale() public {\n', '        whitelistSupplier = msg.sender;\n', '        owner = ASSET_MANAGER_WALLET;\n', '    }\n', '\n', '    modifier onlyWhitelistSupplier() {\n', '        require(msg.sender == whitelistSupplier || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function contribute() public payable returns(bool) {\n', '        return contributeFor(msg.sender);\n', '    }\n', '\n', '    function contributeFor(address _participant) public payable returns(bool) {\n', '        require(now < SALES_END);\n', '        require(saleContributions < ETH_HARD_CAP);\n', '\n', '        uint bonusPercents = 0;\n', '        if (now < SALES_START) { \n', '            require(whitelistPrivate[_participant]);\n', '            bonusPercents = BONUS_WL;\n', '        } else if (now < SALES_START + 1 days) { \n', '            require(whitelistPublic[_participant] || whitelistPrivate[_participant]);\n', '            bonusPercents = BONUS_WL;\n', '        } else if (now < SALES_START + 2 days) {\n', '            bonusPercents = BONUS_2_DAYS;\n', '        } else if (now < SALES_START + 3 days) {\n', '            bonusPercents = BONUS_3_DAYS;\n', '        } else if (now < SALES_START + 4 days) {\n', '            bonusPercents = BONUS_4_DAYS;\n', '        } else if (now < SALES_START + 5 days) {\n', '            bonusPercents = BONUS_5_DAYS;\n', '        } else if (now < SALES_START + 6 days) {\n', '            bonusPercents = BONUS_6_DAYS;\n', '        } else if (now < SALES_START + 15 days) {\n', '            bonusPercents = BONUS_15_DAYS;\n', '        }\n', '\n', '        uint tokensAmount = (msg.value * TOKEN_CENTS) / TOKEN_PRICE;\n', '        require(tokensAmount > 0);\n', '        uint bonusTokens = (tokensAmount * bonusPercents) / 100;\n', '        uint totalTokens = tokensAmount + bonusTokens;\n', '\n', '        tokensPurchased += totalTokens;\n', '        require(tokensPurchased <= SALE_MAX_CAP);\n', '        require(TriggmineToken(TOKEN_ADDRESS).transferFrom(ASSET_MANAGER_WALLET, _participant, totalTokens));\n', '        saleContributions += msg.value;\n', '        ESCROW_WALLET.transfer(msg.value);\n', '\n', '        Contributed(_participant, msg.value, totalTokens);\n', '        return true;\n', '    }\n', '\n', '    function addToPrivateWhitelist(address _participant) onlyWhitelistSupplier() public returns(bool) {\n', '        if (whitelistPrivate[_participant]) {\n', '            return true;\n', '        }\n', '        whitelistPrivate[_participant] = true;\n', '        PrivateWhitelistUpdated(_participant, true);\n', '        return true;\n', '    }\n', '\n', '    function removeFromPrivateWhitelist(address _participant) onlyWhitelistSupplier() public returns(bool) {\n', '        if (!whitelistPrivate[_participant]) {\n', '            return true;\n', '        }\n', '        whitelistPrivate[_participant] = false;\n', '        PrivateWhitelistUpdated(_participant, false);\n', '        return true;\n', '    }\n', '\n', '    function addToPublicWhitelist(address _participant) onlyWhitelistSupplier() public returns(bool) {\n', '        if (whitelistPublic[_participant]) {\n', '            return true;\n', '        }\n', '        whitelistPublic[_participant] = true;\n', '        PublicWhitelistUpdated(_participant, true);\n', '        return true;\n', '    }\n', '\n', '    function removeFromPublicWhitelist(address _participant) onlyWhitelistSupplier() public returns(bool) {\n', '        if (!whitelistPublic[_participant]) {\n', '            return true;\n', '        }\n', '        whitelistPublic[_participant] = false;\n', '        PublicWhitelistUpdated(_participant, false);\n', '        return true;\n', '    }\n', '\n', '    function getTokenOwner() public view returns (address) {\n', '        return TriggmineToken(TOKEN_ADDRESS).getOwner();\n', '    }\n', '\n', '    function restoreTokenOwnership() public onlyOwner {\n', '        TriggmineToken(TOKEN_ADDRESS).transferOwnership(ASSET_MANAGER_WALLET);\n', '    }\n', '\n', '    function () public payable {\n', '        contribute();\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20Basic {\n', '\tfunction totalSupply() public view returns (uint256);\n', '\tfunction balanceOf(address who) public view returns (uint256);\n', '\tfunction transfer(address to, uint256 value) public returns (bool);\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '\tfunction allowance(address owner, address spender) public view returns (uint256);\n', '\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\tfunction approve(address spender, uint256 value) public returns (bool);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '\tusing SafeMath for uint256;\n', '\n', '\tmapping(address => uint256) balances;\n', '\n', '\tuint256 totalSupply_;\n', '\n', '\tfunction totalSupply() public view returns (uint256) {\n', '\t\treturn totalSupply_;\n', '\t}\n', '\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[msg.sender]);\n', '\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '\tmapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[_from]);\n', '\t\trequire(_value <= allowed[_from][msg.sender]);\n', '\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\tTransfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\tApproval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '\n', '\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '\t\tuint oldValue = allowed[msg.sender][_spender];\n', '\t\tif (_subtractedValue > oldValue) {\n', '\t\t\tallowed[msg.sender][_spender] = 0;\n', '\t\t} else {\n', '\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\t\t}\n', '\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        Burn(burner, _value);\n', '        Transfer(burner, address(0), _value);\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\tuint256 c = a * b;\n', '\t\tassert(c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a / b;\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '}\n', '\n', 'contract Ownable {\n', '\taddress public owner;\n', '\n', '\n', '\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '\tfunction Ownable() public {\n', '\t\towner = msg.sender;\n', '\t}\n', '\n', '\tmodifier onlyOwner() {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction transferOwnership(address newOwner) public onlyOwner {\n', '\t\trequire(newOwner != address(0));\n', '\t\tOwnershipTransferred(owner, newOwner);\n', '\t\towner = newOwner;\n', '\t}\n', '\n', '}\n', '\n', 'contract TriggmineToken is StandardToken, BurnableToken, Ownable {\n', '\n', '\tstring public constant name = "Triggmine Coin";\n', '\n', '\tstring public constant symbol = "TRG";\n', '\n', '\tuint256 public constant decimals = 18;\n', '\n', '\tbool public released = false;\n', '\tevent Release();\n', '\n', '\taddress public holder;\n', '\n', '\tmapping(address => uint) public lockedAddresses;\n', '\n', '\tmodifier isReleased () {\n', '\t\trequire(released || msg.sender == holder || msg.sender == owner);\n', '\t\trequire(lockedAddresses[msg.sender] <= now);\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction TriggmineToken() public {\n', '\t\towner = 0x7E83f1F82Ab7dDE49F620D2546BfFB0539058414;\n', '\n', '\t\ttotalSupply_ = 620000000 * (10 ** decimals);\n', '\t\tbalances[owner] = totalSupply_;\n', '\t\tTransfer(0x0, owner, totalSupply_);\n', '\n', '\t\tholder = owner;\n', '\t}\n', '\n', '\tfunction lockAddress(address _lockedAddress, uint256 _time) public onlyOwner returns (bool) {\n', '\t\trequire(balances[_lockedAddress] == 0 && lockedAddresses[_lockedAddress] == 0 && _time > now);\n', '\t\tlockedAddresses[_lockedAddress] = _time;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction release() onlyOwner public returns (bool) {\n', '\t\trequire(!released);\n', '\t\treleased = true;\n', '\t\tRelease();\n', '\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getOwner() public view returns (address) {\n', '\t\treturn owner;\n', '\t}\n', '\n', '\tfunction transfer(address _to, uint256 _value) public isReleased returns (bool) {\n', '\t\treturn super.transfer(_to, _value);\n', '\t}\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public isReleased returns (bool) {\n', '\t\treturn super.transferFrom(_from, _to, _value);\n', '\t}\n', '\n', '\tfunction approve(address _spender, uint256 _value) public isReleased returns (bool) {\n', '\t\treturn super.approve(_spender, _value);\n', '\t}\n', '\n', '\tfunction increaseApproval(address _spender, uint _addedValue) public isReleased returns (bool success) {\n', '\t\treturn super.increaseApproval(_spender, _addedValue);\n', '\t}\n', '\n', '\tfunction decreaseApproval(address _spender, uint _subtractedValue) public isReleased returns (bool success) {\n', '\t\treturn super.decreaseApproval(_spender, _subtractedValue);\n', '\t}\n', '\n', '\tfunction transferOwnership(address newOwner) public onlyOwner {\n', '\t\taddress oldOwner = owner;\n', '\t\tsuper.transferOwnership(newOwner);\n', '\n', '\t\tif (oldOwner != holder) {\n', '\t\t\tallowed[holder][oldOwner] = 0;\n', '\t\t\tApproval(holder, oldOwner, 0);\n', '\t\t}\n', '\n', '\t\tif (owner != holder) {\n', '\t\t\tallowed[holder][owner] = balances[holder];\n', '\t\t\tApproval(holder, owner, balances[holder]);\n', '\t\t}\n', '\t}\n', '\n', '}\n', '\n', 'contract TriggminePresale is Ownable {\n', '    uint public constant SALES_START = 1523890800;\n', '    uint public constant SALES_END = 1525100400; \n', '\n', '    address public constant ASSET_MANAGER_WALLET = 0x7E83f1F82Ab7dDE49F620D2546BfFB0539058414;\n', '    address public constant ESCROW_WALLET = 0x2e9F22E2D559d9a5ce234AB722bc6e818FA5D079;\n', '\n', '    address public constant TOKEN_ADDRESS = 0x98F319D4dc58315796Ec8F06274fe2d4a5A69721; \n', '    uint public constant TOKEN_CENTS = 1000000000000000000;\n', '    uint public constant TOKEN_PRICE = 0.0001 ether;\n', '\n', '    uint public constant ETH_HARD_CAP = 3000 ether;\n', '    uint public constant SALE_MAX_CAP = 36000000 * TOKEN_CENTS;\n', '\n', '    uint public constant BONUS_WL = 20;\n', '    uint public constant BONUS_2_DAYS = 20;\n', '    uint public constant BONUS_3_DAYS = 19;\n', '    uint public constant BONUS_4_DAYS = 18;\n', '    uint public constant BONUS_5_DAYS = 17;\n', '    uint public constant BONUS_6_DAYS = 16;\n', '    uint public constant BONUS_15_DAYS = 15;\n', '\n', '    uint public saleContributions;\n', '    uint public tokensPurchased;\n', '\n', '    address public whitelistSupplier;\n', '    mapping(address => bool) public whitelistPrivate;\n', '    mapping(address => bool) public whitelistPublic;\n', '\n', '    event Contributed(address receiver, uint contribution, uint reward);\n', '    event PrivateWhitelistUpdated(address participant, bool isWhitelisted);\n', '    event PublicWhitelistUpdated(address participant, bool isWhitelisted);\n', '\n', '    function TriggminePresale() public {\n', '        whitelistSupplier = msg.sender;\n', '        owner = ASSET_MANAGER_WALLET;\n', '    }\n', '\n', '    modifier onlyWhitelistSupplier() {\n', '        require(msg.sender == whitelistSupplier || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function contribute() public payable returns(bool) {\n', '        return contributeFor(msg.sender);\n', '    }\n', '\n', '    function contributeFor(address _participant) public payable returns(bool) {\n', '        require(now < SALES_END);\n', '        require(saleContributions < ETH_HARD_CAP);\n', '\n', '        uint bonusPercents = 0;\n', '        if (now < SALES_START) { \n', '            require(whitelistPrivate[_participant]);\n', '            bonusPercents = BONUS_WL;\n', '        } else if (now < SALES_START + 1 days) { \n', '            require(whitelistPublic[_participant] || whitelistPrivate[_participant]);\n', '            bonusPercents = BONUS_WL;\n', '        } else if (now < SALES_START + 2 days) {\n', '            bonusPercents = BONUS_2_DAYS;\n', '        } else if (now < SALES_START + 3 days) {\n', '            bonusPercents = BONUS_3_DAYS;\n', '        } else if (now < SALES_START + 4 days) {\n', '            bonusPercents = BONUS_4_DAYS;\n', '        } else if (now < SALES_START + 5 days) {\n', '            bonusPercents = BONUS_5_DAYS;\n', '        } else if (now < SALES_START + 6 days) {\n', '            bonusPercents = BONUS_6_DAYS;\n', '        } else if (now < SALES_START + 15 days) {\n', '            bonusPercents = BONUS_15_DAYS;\n', '        }\n', '\n', '        uint tokensAmount = (msg.value * TOKEN_CENTS) / TOKEN_PRICE;\n', '        require(tokensAmount > 0);\n', '        uint bonusTokens = (tokensAmount * bonusPercents) / 100;\n', '        uint totalTokens = tokensAmount + bonusTokens;\n', '\n', '        tokensPurchased += totalTokens;\n', '        require(tokensPurchased <= SALE_MAX_CAP);\n', '        require(TriggmineToken(TOKEN_ADDRESS).transferFrom(ASSET_MANAGER_WALLET, _participant, totalTokens));\n', '        saleContributions += msg.value;\n', '        ESCROW_WALLET.transfer(msg.value);\n', '\n', '        Contributed(_participant, msg.value, totalTokens);\n', '        return true;\n', '    }\n', '\n', '    function addToPrivateWhitelist(address _participant) onlyWhitelistSupplier() public returns(bool) {\n', '        if (whitelistPrivate[_participant]) {\n', '            return true;\n', '        }\n', '        whitelistPrivate[_participant] = true;\n', '        PrivateWhitelistUpdated(_participant, true);\n', '        return true;\n', '    }\n', '\n', '    function removeFromPrivateWhitelist(address _participant) onlyWhitelistSupplier() public returns(bool) {\n', '        if (!whitelistPrivate[_participant]) {\n', '            return true;\n', '        }\n', '        whitelistPrivate[_participant] = false;\n', '        PrivateWhitelistUpdated(_participant, false);\n', '        return true;\n', '    }\n', '\n', '    function addToPublicWhitelist(address _participant) onlyWhitelistSupplier() public returns(bool) {\n', '        if (whitelistPublic[_participant]) {\n', '            return true;\n', '        }\n', '        whitelistPublic[_participant] = true;\n', '        PublicWhitelistUpdated(_participant, true);\n', '        return true;\n', '    }\n', '\n', '    function removeFromPublicWhitelist(address _participant) onlyWhitelistSupplier() public returns(bool) {\n', '        if (!whitelistPublic[_participant]) {\n', '            return true;\n', '        }\n', '        whitelistPublic[_participant] = false;\n', '        PublicWhitelistUpdated(_participant, false);\n', '        return true;\n', '    }\n', '\n', '    function getTokenOwner() public view returns (address) {\n', '        return TriggmineToken(TOKEN_ADDRESS).getOwner();\n', '    }\n', '\n', '    function restoreTokenOwnership() public onlyOwner {\n', '        TriggmineToken(TOKEN_ADDRESS).transferOwnership(ASSET_MANAGER_WALLET);\n', '    }\n', '\n', '    function () public payable {\n', '        contribute();\n', '    }\n', '\n', '}']
