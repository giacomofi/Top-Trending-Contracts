['/*\n', '\n', 'Read code from https://github.com/onbjerg/dai.how\n', '\n', '*/\n', 'interface IMaker {\n', '    function sai() public view returns (ERC20);\n', '    function skr() public view returns (ERC20);\n', '    function gem() public view returns (ERC20);\n', '\n', '    function open() public returns (bytes32 cup);\n', '    function give(bytes32 cup, address guy) public;\n', '\n', '    function gap() public view returns (uint);\n', '    function per() public view returns (uint);\n', '\n', '    function ask(uint wad) public view returns (uint);\n', '    function bid(uint wad) public view returns (uint);\n', '\n', '    function join(uint wad) public;\n', '    function lock(bytes32 cup, uint wad) public;\n', '    function free(bytes32 cup, uint wad) public;\n', '    function draw(bytes32 cup, uint wad) public;\n', '    function cage(uint fit_, uint jam) public;\n', '}\n', '\n', 'interface ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() public payable;\n', '    function withdraw(uint wad) public;\n', '}\n', '\n', 'contract DSMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '\n', '    function min(uint x, uint y) internal pure returns (uint z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint x, uint y) internal pure returns (uint z) {\n', '        return x >= y ? x : y;\n', '    }\n', '    function imin(int x, int y) internal pure returns (int z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int x, int y) internal pure returns (int z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    uint constant WAD = 10 ** 18;\n', '    uint constant RAY = 10 ** 27;\n', '\n', '    function wmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '    function rmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '    function wdiv(uint x, uint y) public pure returns (uint z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '    function rdiv(uint x, uint y) public pure returns (uint z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    // This famous algorithm is called "exponentiation by squaring"\n', '    // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '    //\n', "    // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '    //\n', '    // These facts are why it works:\n', '    //\n', '    //  If n is even, then x^n = (x^2)^(n/2).\n', '    //  If n is odd,  then x^n = x * x^(n-1),\n', '    //   and applying the equation for even x gives\n', '    //    x^n = x * (x^2)^((n-1) / 2).\n', '    //\n', '    //  Also, EVM division is flooring and\n', '    //    floor[(n-1) / 2] = floor[n / 2].\n', '    //\n', '    function rpow(uint x, uint n) internal pure returns (uint z) {\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'contract DaiMaker is DSMath {\n', '    IMaker public maker;\n', '    ERC20 public weth;\n', '    ERC20 public peth;\n', '    ERC20 public dai;\n', '\n', '    event MakeDai(address indexed daiOwner, address indexed cdpOwner, uint256 ethAmount, uint256 daiAmount, uint256 pethAmount);\n', '\n', '    function DaiMaker(IMaker _maker) {\n', '        maker = _maker;\n', '        weth = maker.gem();\n', '        peth = maker.skr();\n', '        dai = maker.sai();\n', '    }\n', '\n', '    function makeDai(uint256 daiAmount, address cdpOwner, address daiOwner) payable public returns (bytes32 cdpId) {\n', '        IWETH(weth).deposit.value(msg.value)();      // wrap eth in weth token\n', '        weth.approve(maker, msg.value);              // allow maker to pull weth\n', '\n', '        // calculate how much peth we need to enter with\n', '        uint256 inverseAsk = rdiv(msg.value, wmul(maker.gap(), maker.per())) - 1;\n', '\n', '        maker.join(inverseAsk);                      // convert weth to peth\n', '        uint256 pethAmount = peth.balanceOf(this);\n', '\n', '        peth.approve(maker, pethAmount);             // allow maker to pull peth\n', '\n', '        cdpId = maker.open();                        // create cdp in maker\n', '        maker.lock(cdpId, pethAmount);               // lock peth into cdp\n', '        maker.draw(cdpId, daiAmount);                // create dai from cdp\n', '\n', '        dai.transfer(daiOwner, daiAmount);           // transfer dai to owner\n', '        maker.give(cdpId, cdpOwner);                 // transfer cdp to owner\n', '\n', '        MakeDai(daiOwner, cdpOwner, msg.value, daiAmount, pethAmount);\n', '    }\n', '}']