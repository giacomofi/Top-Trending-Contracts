['pragma solidity ^0.4.19;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract ERC20Interface {\n', '  function totalSupply() public constant returns (uint);\n', '  function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '  function approve(address spender, uint tokens) public returns (bool success);\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', 'contract ERC827 {\n', '\n', '  function approve( address _spender, uint256 _value, bytes _data ) public returns (bool);\n', '  function transfer( address _to, uint256 _value, bytes _data ) public returns (bool);\n', '  function transferFrom( address _from, address _to, uint256 _value, bytes _data ) public returns (bool);\n', '\n', '}\n', '\n', '\n', 'contract TEFoodsToken is Ownable, ERC20Interface {\n', '\n', '  using SafeMath for uint;\n', '\n', '  string public constant name = "TEFOOD FARM TO FORK FOOD TRACEABILITY SYSTEM LICENSE TOKEN";\n', '  string public constant symbol = "TFOOD";\n', '  uint8 public constant decimals = 18;\n', '  uint constant _totalSupply = 1000000000 * 1 ether;\n', '  uint public transferrableTime = 1521712800;\n', '  uint _vestedSupply;\n', '  uint _circulatingSupply;\n', '  mapping (address => uint) balances;\n', '  mapping (address => mapping(address => uint)) allowed;\n', '\n', '  struct vestedBalance {\n', '    address addr;\n', '    uint balance;\n', '  }\n', '  mapping (uint => vestedBalance[]) vestingMap;\n', '\n', '\n', '\n', '  function TEFoodsToken () public {\n', '    owner = msg.sender;\n', '    balances[0x00] = _totalSupply;\n', '  }\n', '\n', '  event VestedTokensReleased(address to, uint amount);\n', '\n', '  function allocateTokens (address addr, uint amount) public onlyOwner returns (bool) {\n', '    require (addr != 0x00);\n', '    require (amount > 0);\n', '    balances[0x00] = balances[0x00].sub(amount);\n', '    balances[addr] = balances[addr].add(amount);\n', '    _circulatingSupply = _circulatingSupply.add(amount);\n', '    assert (_vestedSupply.add(_circulatingSupply).add(balances[0x00]) == _totalSupply);\n', '    return true;\n', '  }\n', '\n', '  function allocateVestedTokens (address addr, uint amount, uint vestingPeriod) public onlyOwner returns (bool) {\n', '    require (addr != 0x00);\n', '    require (amount > 0);\n', '    require (vestingPeriod > 0);\n', '    balances[0x00] = balances[0x00].sub(amount);\n', '    vestingMap[vestingPeriod].push( vestedBalance (addr,amount) );\n', '    _vestedSupply = _vestedSupply.add(amount);\n', '    assert (_vestedSupply.add(_circulatingSupply).add(balances[0x00]) == _totalSupply);\n', '    return true;\n', '  }\n', '\n', '  function releaseVestedTokens (uint vestingPeriod) public {\n', '    require (now >= transferrableTime.add(vestingPeriod));\n', '    require (vestingMap[vestingPeriod].length > 0);\n', '    require (vestingMap[vestingPeriod][0].balance > 0);\n', '    var v = vestingMap[vestingPeriod];\n', '    for (uint8 i = 0; i < v.length; i++) {\n', '      balances[v[i].addr] = balances[v[i].addr].add(v[i].balance);\n', '      _circulatingSupply = _circulatingSupply.add(v[i].balance);\n', '      _vestedSupply = _vestedSupply.sub(v[i].balance);\n', '      v[i].balance = 0;\n', '      VestedTokensReleased(v[i].addr, v[i].balance);\n', '    }\n', '  }\n', '\n', '  function enableTransfers () public onlyOwner returns (bool) {\n', '    if (now.add(86400) < transferrableTime) {\n', '      transferrableTime = now.add(86400);\n', '    }\n', '    owner = 0x00;\n', '    return true;\n', '  }\n', '\n', '  function () public payable {\n', '    revert();\n', '  }\n', '\n', '  function totalSupply() public constant returns (uint) {\n', '    return _circulatingSupply;\n', '  }\n', '\n', '  function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '    return balances[tokenOwner];\n', '  }\n', '\n', '  function vestedBalanceOf(address tokenOwner, uint vestingPeriod) public constant returns (uint balance) {\n', '    var v = vestingMap[vestingPeriod];\n', '    for (uint8 i = 0; i < v.length; i++) {\n', '      if (v[i].addr == tokenOwner) return v[i].balance;\n', '    }\n', '    return 0;\n', '  }\n', '\n', '  function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '    return allowed[tokenOwner][spender];\n', '  }\n', '\n', '  function transfer(address to, uint tokens) public returns (bool success) {\n', '    require (now >= transferrableTime);\n', '    require (to != address(this));\n', '    require (balances[msg.sender] >= tokens);\n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    Transfer(msg.sender, to, tokens);\n', '    return true;\n', '  }\n', '\n', '  function approve(address spender, uint tokens) public returns (bool success) {\n', '    require (spender != address(this));\n', '    allowed[msg.sender][spender] = tokens;\n', '    Approval(msg.sender, spender, tokens);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '    require (now >= transferrableTime);\n', '    require (to != address(this));\n', '    require (allowed[from][msg.sender] >= tokens);\n', '    balances[from] = balances[from].sub(tokens);\n', '    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    Transfer(from, to, tokens);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract TEFoods827Token is TEFoodsToken, ERC827 {\n', '\n', '  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\n', '    super.approve(_spender, _value);\n', '    require(_spender.call(_data));\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n', '    super.transfer(_to, _value);\n', '    require(_to.call(_data));\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n', '    super.transferFrom(_from, _to, _value);\n', '    require(_to.call(_data));\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract TEFoodsCrowdsale is Ownable {\n', '\n', '  using SafeMath for uint;\n', '\n', '  TEFoods827Token public tokenContract;\n', '\n', '  uint public constant crowdsaleStartTime = 1519293600;\n', '  uint public constant crowdsaleUncappedTime = 1519336800;\n', '  uint public constant crowdsaleClosedTime = 1521712800;\n', '  uint public maxGasPriceInWei = 50000000000;\n', '  uint public constant contributionCapInWei = 1000000000000000000;\n', '  address public constant teFoodsAddress = 0x27Ca683EdeAB8D03c6B5d7818f78Ba27a2025159;\n', '\n', '  uint public constant tokenRateInUsdCents = 5;\n', '  uint public constant ethRateInUsdCents = 92500;\n', '  uint public constant amountToRaiseInUsdCents = 1910000000;\n', '  uint public constant minContributionInUsdCents = 10000;\n', '\n', '  uint[4] public tokenBonusTimes = [1519898400,1520503200,1521108000,1521712800];\n', '  uint[4] public tokenBonusPct = [15,12,10,5];\n', '\n', '  uint public whitelistedAddressCount;\n', '  uint public contributorCount;\n', '  bool public crowdsaleFinished;\n', '  uint public amountRaisedInUsdCents;\n', '\n', '  uint public constant totalTokenSupply = 1000000000 * 1 ether;\n', '  uint public tokensAllocated;\n', '\n', '  uint public constant marketingTokenAllocation = 60000000 * 1 ether;\n', '  uint public marketingTokensDistributed;\n', '\n', '  mapping (address => bool) presaleAllocated;\n', '  mapping (address => bool) marketingAllocated;\n', '\n', '  struct Contributor {\n', '    bool authorised;\n', '    bool contributed;\n', '  }\n', '  mapping (address => Contributor) whitelist;\n', '\n', '\n', '  event PresaleAllocation(address to, uint usdAmount, uint tokenAmount);\n', '  event MarketingAllocation(address to, uint tokenAmount);\n', '  event CrowdsaleClosed(uint usdRaisedInCents);\n', '  event TokensTransferrable();\n', '\n', '  function TEFoodsCrowdsale () public {\n', '    require (teFoodsAddress != 0x00);\n', '    tokenContract = new TEFoods827Token();\n', '  }\n', '\n', '  function allocatePresaleTokens (address recipient, uint amountInUsdCents, uint bonusPct, uint vestingPeriodInSeconds) public onlyOwner  {\n', '    require (now < crowdsaleStartTime);\n', '    require (!presaleAllocated[recipient]);\n', '    uint tokenAmount = amountInUsdCents.mul(1 ether).div(tokenRateInUsdCents);\n', '    uint bonusAmount = tokenAmount.mul(bonusPct).div(100);\n', '\n', '    if (vestingPeriodInSeconds > 0) {\n', '      require (tokenContract.allocateTokens(recipient, tokenAmount));\n', '      require (tokenContract.allocateVestedTokens(recipient, bonusAmount, vestingPeriodInSeconds));\n', '    } else {\n', '      require (tokenContract.allocateTokens(recipient, tokenAmount.add(bonusAmount)));\n', '    }\n', '    amountRaisedInUsdCents = amountRaisedInUsdCents.add(amountInUsdCents);\n', '    tokensAllocated = tokensAllocated.add(tokenAmount).add(bonusAmount);\n', '    presaleAllocated[recipient] = true;\n', '    PresaleAllocation(recipient, amountInUsdCents, tokenAmount.add(bonusAmount));\n', '  }\n', '\n', '  function allocateMarketingTokens (address recipient, uint tokenAmount) public onlyOwner {\n', '    require (!marketingAllocated[recipient]);\n', '    require (marketingTokensDistributed.add(tokenAmount) <= marketingTokenAllocation);\n', '    marketingTokensDistributed = marketingTokensDistributed.add(tokenAmount);\n', '    tokensAllocated = tokensAllocated.add(tokenAmount);\n', '    require (tokenContract.allocateTokens(recipient, tokenAmount));\n', '    marketingAllocated[recipient] = true;\n', '    MarketingAllocation(recipient, tokenAmount);\n', '  }\n', '\n', '  function whitelistUsers (address[] addressList) public onlyOwner {\n', '    require (now < crowdsaleStartTime);\n', '    for (uint8 i = 0; i < addressList.length; i++) {\n', '      require (!whitelist[i].authorised);\n', '      whitelist[addressList[i]].authorised = true;\n', '    }\n', '    whitelistedAddressCount = whitelistedAddressCount.add(addressList.length);\n', '  }\n', '\n', '  function revokeUsers (address[] addressList) public onlyOwner {\n', '    require (now < crowdsaleStartTime);\n', '    for (uint8 i = 0; i < addressList.length; i++) {\n', '      require (whitelist[i].authorised);\n', '      whitelist[addressList[i]].authorised = false;\n', '    }\n', '    whitelistedAddressCount = whitelistedAddressCount.sub(addressList.length);\n', '  }\n', '\n', '  function setMaxGasPrice (uint newMaxInWei) public onlyOwner {\n', '    require(newMaxInWei >= 1000000000);\n', '    maxGasPriceInWei = newMaxInWei;\n', '  }\n', '\n', '  function checkWhitelisted (address addr) public view returns (bool) {\n', '    return whitelist[addr].authorised;\n', '  }\n', '\n', '  function isOpen () public view returns (bool) {\n', '    return (now >= crowdsaleStartTime && !crowdsaleFinished && now < crowdsaleClosedTime);\n', '  }\n', '\n', '\n', '  function getRemainingEthAvailable () public view returns (uint) {\n', '    if (crowdsaleFinished || now > crowdsaleClosedTime) return 0;\n', '    return amountToRaiseInUsdCents.sub(amountRaisedInUsdCents).mul(1 ether).div(ethRateInUsdCents);\n', '  }\n', '\n', '  function _applyBonus (uint amount) internal view returns (uint) {\n', '    for (uint8 i = 0; i < 3; i++) {\n', '      if (tokenBonusTimes[i] > now) {\n', '        return amount.add(amount.mul(tokenBonusPct[i]).div(100));\n', '      }\n', '    }\n', '    return amount.add(amount.mul(tokenBonusPct[3]).div(100));\n', '  }\n', '\n', '  function _allocateTokens(address addr, uint amount) internal {\n', '    require (tokensAllocated.add(amount) <= totalTokenSupply);\n', '    tokensAllocated = tokensAllocated.add(amount);\n', '    teFoodsAddress.transfer(this.balance);\n', '    if (!whitelist[addr].contributed) {\n', '      whitelist[addr].contributed = true;\n', '      contributorCount = contributorCount.add(1);\n', '    }\n', '    require(tokenContract.allocateTokens(addr, amount));\n', '  }\n', '\n', '  function () public payable {\n', '    require (tx.gasprice <= maxGasPriceInWei);\n', '    require (msg.value > 0);\n', '    require (now >= crowdsaleStartTime && now <= crowdsaleClosedTime);\n', '    require (whitelist[msg.sender].authorised);\n', '    require (!crowdsaleFinished);\n', '    if (now < crowdsaleUncappedTime) {\n', '      require (!whitelist[msg.sender].contributed);\n', '      require (msg.value <= contributionCapInWei);\n', '    }\n', '    uint usdAmount = msg.value.mul(ethRateInUsdCents).div(1 ether);\n', '    require (usdAmount >= minContributionInUsdCents);\n', '    uint tokenAmount = _applyBonus(msg.value.mul(ethRateInUsdCents).div(tokenRateInUsdCents));\n', '    amountRaisedInUsdCents = amountRaisedInUsdCents.add(usdAmount);\n', '    if (amountRaisedInUsdCents >= amountToRaiseInUsdCents) {\n', '      closeCrowdsale();\n', '    } else {\n', '      _allocateTokens(msg.sender, tokenAmount);\n', '    }\n', '  }\n', '\n', '  function closeCrowdsale () public {\n', '    require (!crowdsaleFinished);\n', '    require (now >= crowdsaleStartTime);\n', '    require (msg.sender == owner || amountRaisedInUsdCents >= amountToRaiseInUsdCents);\n', '    crowdsaleFinished = true;\n', '\n', '    if (msg.value > 0 && amountRaisedInUsdCents >= amountToRaiseInUsdCents) {\n', '\n', '      uint excessEth = amountRaisedInUsdCents.sub(amountToRaiseInUsdCents).mul(1 ether).div(ethRateInUsdCents);\n', '      uint tokenAmount = _applyBonus(msg.value.sub(excessEth).mul(ethRateInUsdCents).div(tokenRateInUsdCents));\n', '      amountRaisedInUsdCents = amountToRaiseInUsdCents;\n', '      msg.sender.transfer(excessEth);\n', '      _allocateTokens(msg.sender, tokenAmount);\n', '    } else if ( amountRaisedInUsdCents < amountToRaiseInUsdCents) {\n', '      tokenAmount = amountToRaiseInUsdCents.sub(amountRaisedInUsdCents).mul(1 ether).div(tokenRateInUsdCents);\n', '      tokensAllocated = tokensAllocated.add(tokenAmount); // burn\n', '    }\n', '    CrowdsaleClosed(amountRaisedInUsdCents);\n', '  }\n', '\n', '  function enableTokenTransfers () public onlyOwner {\n', '    require (crowdsaleFinished);\n', '    require (marketingTokensDistributed == marketingTokenAllocation);\n', '    uint remainingTokens = totalTokenSupply.sub(tokensAllocated);\n', '    uint oneYear = remainingTokens.mul(25).div(100);\n', '    uint twoYears = remainingTokens.sub(oneYear);\n', '    tokensAllocated = tokensAllocated.add(remainingTokens);\n', '    require (tokenContract.allocateVestedTokens(teFoodsAddress, oneYear, 31536000));\n', '    require (tokenContract.allocateVestedTokens(teFoodsAddress, twoYears, 63072000));\n', '    require (tokenContract.enableTransfers());\n', '    TokensTransferrable();\n', '  }\n', '\n', '}']