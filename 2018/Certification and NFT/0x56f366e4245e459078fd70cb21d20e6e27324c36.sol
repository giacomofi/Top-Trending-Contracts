['pragma solidity ^0.4.24;\n', '\n', '/*\n', ' * A smart contract to return funds to the creator after a hold period\n', ' * \n', ' * Copyright 2018 Geoff Lamperd\n', ' */\n', 'contract PayItBack {\n', '\n', '    uint constant HOLD_TIME = 31 days;\n', '\n', '    address public creator;\n', '    uint public contributionTime = 0;\n', '    uint public totalContributions = 0;\n', '    bool public isDisabled = false;\n', '\n', '\tevent Contribution(uint _amount, address _from);\n', '\tevent OwnershipConfirmed();\n', '\tevent PaidOut(uint _amount);\n', '\tevent Warning(string _message);\n', '\tevent Disabled();\n', '\n', '    modifier ownerOnly() {\n', '        require(msg.sender == creator, \n', '                "Sorry, you&#39;re not the owner of this contract");\n', '\n', '        _;\n', '    }\n', '\n', '    modifier nilBalance() {\n', '        require(address(this).balance <= 0, \n', '                "Balance is not 0");\n', '\n', '        _;\n', '    }\n', '    \n', '    modifier afterHoldExpiry() {\n', '        require(contributionTime > 0, \n', '                "No contributions have been received");\n', '        require(now > (contributionTime + HOLD_TIME), \n', '                "Payments are on hold");\n', '\n', '        _;\n', '    }\n', '    \n', '    modifier enabled() {\n', '        require(!isDisabled, \n', '                "This contract has been disabled");\n', '\n', '        _;\n', '    }\n', '\n', '    modifier wontOverflow() {\n', '        require(totalContributions + msg.value > totalContributions);\n', '\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        creator = msg.sender;\n', '    }\n', '\n', '    // Fallback function. If ETH has been transferred, call contribute()\n', '    function () public payable {\n', '        contribute();\n', '    }\n', '\n', '    function contribute() public payable enabled wontOverflow {\n', '        // Hold time starts with first contribution\n', '        // Don&#39;t allow subsequent contributions to reset the expiry\n', '        if (contributionTime == 0 && msg.value > 0) {\n', '            contributionTime = now;\n', '        }\n', '\n', '        totalContributions += msg.value;\n', '\n', '        emit Contribution(msg.value, msg.sender);\n', '    }\n', '\n', '    // Pay the contract balance to the contract creator\n', '    function payUp() public ownerOnly afterHoldExpiry {\n', '        uint payment = address(this).balance;\n', '        totalContributions -= payment;\n', '        if (totalContributions != 0) {\n', '            // something has gone wrong\n', '            emit Warning("Balance is unexpectedly non-zero after payment");\n', '        }\n', '        contributionTime = 0; // Reset expiry\n', '        emit PaidOut(payment);\n', '        creator.transfer(payment);\n', '    }\n', '\n', '    function verifyOwnership() public ownerOnly returns(bool) {\n', '        emit OwnershipConfirmed();\n', '\n', '        return true;\n', '    }\n', '\n', '    // Owner can permanently disabled the contract. This will prevent\n', '    // further contributions\n', '    function disable() public ownerOnly nilBalance enabled {\n', '        isDisabled = true;\n', '        \n', '        emit Disabled();\n', '    }\n', '    \n', '    function expiryTime() public view returns(uint) {\n', '        return contributionTime + HOLD_TIME;\n', '    }\n', '    \n', '    function daysMinutesTilExpiryTime() public view returns(uint, uint) {\n', '        uint secsLeft = (contributionTime + HOLD_TIME - now);\n', '        uint daysLeft = secsLeft / 1 days;\n', '        uint minsLeft = (secsLeft % 1 days) / 1 minutes;\n', '        return (daysLeft, minsLeft);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/*\n', ' * A smart contract to return funds to the creator after a hold period\n', ' * \n', ' * Copyright 2018 Geoff Lamperd\n', ' */\n', 'contract PayItBack {\n', '\n', '    uint constant HOLD_TIME = 31 days;\n', '\n', '    address public creator;\n', '    uint public contributionTime = 0;\n', '    uint public totalContributions = 0;\n', '    bool public isDisabled = false;\n', '\n', '\tevent Contribution(uint _amount, address _from);\n', '\tevent OwnershipConfirmed();\n', '\tevent PaidOut(uint _amount);\n', '\tevent Warning(string _message);\n', '\tevent Disabled();\n', '\n', '    modifier ownerOnly() {\n', '        require(msg.sender == creator, \n', '                "Sorry, you\'re not the owner of this contract");\n', '\n', '        _;\n', '    }\n', '\n', '    modifier nilBalance() {\n', '        require(address(this).balance <= 0, \n', '                "Balance is not 0");\n', '\n', '        _;\n', '    }\n', '    \n', '    modifier afterHoldExpiry() {\n', '        require(contributionTime > 0, \n', '                "No contributions have been received");\n', '        require(now > (contributionTime + HOLD_TIME), \n', '                "Payments are on hold");\n', '\n', '        _;\n', '    }\n', '    \n', '    modifier enabled() {\n', '        require(!isDisabled, \n', '                "This contract has been disabled");\n', '\n', '        _;\n', '    }\n', '\n', '    modifier wontOverflow() {\n', '        require(totalContributions + msg.value > totalContributions);\n', '\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        creator = msg.sender;\n', '    }\n', '\n', '    // Fallback function. If ETH has been transferred, call contribute()\n', '    function () public payable {\n', '        contribute();\n', '    }\n', '\n', '    function contribute() public payable enabled wontOverflow {\n', '        // Hold time starts with first contribution\n', "        // Don't allow subsequent contributions to reset the expiry\n", '        if (contributionTime == 0 && msg.value > 0) {\n', '            contributionTime = now;\n', '        }\n', '\n', '        totalContributions += msg.value;\n', '\n', '        emit Contribution(msg.value, msg.sender);\n', '    }\n', '\n', '    // Pay the contract balance to the contract creator\n', '    function payUp() public ownerOnly afterHoldExpiry {\n', '        uint payment = address(this).balance;\n', '        totalContributions -= payment;\n', '        if (totalContributions != 0) {\n', '            // something has gone wrong\n', '            emit Warning("Balance is unexpectedly non-zero after payment");\n', '        }\n', '        contributionTime = 0; // Reset expiry\n', '        emit PaidOut(payment);\n', '        creator.transfer(payment);\n', '    }\n', '\n', '    function verifyOwnership() public ownerOnly returns(bool) {\n', '        emit OwnershipConfirmed();\n', '\n', '        return true;\n', '    }\n', '\n', '    // Owner can permanently disabled the contract. This will prevent\n', '    // further contributions\n', '    function disable() public ownerOnly nilBalance enabled {\n', '        isDisabled = true;\n', '        \n', '        emit Disabled();\n', '    }\n', '    \n', '    function expiryTime() public view returns(uint) {\n', '        return contributionTime + HOLD_TIME;\n', '    }\n', '    \n', '    function daysMinutesTilExpiryTime() public view returns(uint, uint) {\n', '        uint secsLeft = (contributionTime + HOLD_TIME - now);\n', '        uint daysLeft = secsLeft / 1 days;\n', '        uint minsLeft = (secsLeft % 1 days) / 1 minutes;\n', '        return (daysLeft, minsLeft);\n', '    }\n', '}']
