['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract DragonToken{\n', '  function transferFrom(address _from, address _to, uint256 _value) returns(bool success);\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive. The contract requires a MintableToken that will be\n', ' * minted as contributions arrive, note that the crowdsale contract\n', ' * must be owner of the token in order to be able to mint it.\n', ' */\n', 'contract Crowdsale is Ownable{\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  DragonToken public token;\n', '  \n', '  // The address of token reserves\n', '  address public tokenReserve;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // token rate in wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  \n', '  uint256 public tokensSold;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   * @param releaseTime tokens unlock time\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint256 releaseTime);\n', '  \n', '  /**\n', '   * event upon endTime updated\n', '   */\n', '  event EndTimeUpdated();\n', '  \n', '  /**\n', '   * Dragon token price updated\n', '   */\n', '  event DragonPriceUpdated();\n', '  \n', '  /**\n', '   * event for token releasing\n', '   * @param holder who is releasing his tokens\n', '   */\n', '  event TokenReleased(address indexed holder, uint256 amount);\n', '\n', '\n', '  function Crowdsale() public {\n', '  \n', '    owner = 0xF615Ac471E066b5ae4BD211CC5044c7a31E89C4e; // overriding owner\n', '    startTime = now;\n', '    endTime = 1521187200;\n', '    rate = 5000000000000000; // price in wei\n', '    wallet = 0xF615Ac471E066b5ae4BD211CC5044c7a31E89C4e;\n', '    token = DragonToken(0x814F67fA286f7572B041D041b1D99b432c9155Ee);\n', '    tokenReserve = 0xF615Ac471E066b5ae4BD211CC5044c7a31E89C4e;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    tokensSold = tokensSold.add(tokens);\n', '\n', '    uint256 lockedFor = assignTokens(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens, lockedFor);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    uint256 amount = weiAmount.div(rate);\n', '    return amount.mul(100000000); // multiply with decimals\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  function updateEndTime(uint256 newTime) onlyOwner external {\n', '    require(newTime > startTime);\n', '    endTime = newTime;\n', '    EndTimeUpdated();\n', '  }\n', '  \n', '  function updateDragonPrice(uint256 weiAmount) onlyOwner external {\n', '    require(weiAmount > 0);\n', '    rate = weiAmount;\n', '    DragonPriceUpdated();\n', '  }\n', '  \n', '  mapping(address => uint256) balances;\n', '  mapping(address => uint256) releaseTime;\n', '  function assignTokens(address beneficiary, uint256 amount) private returns(uint256 lockedFor){\n', '      lockedFor = now + 45 days;\n', '      balances[beneficiary] = balances[beneficiary].add(amount);\n', '      releaseTime[beneficiary] = lockedFor;\n', '  }\n', '  \n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '\n', '  function unlockTime(address _owner) public view returns (uint256 time) {\n', '    return releaseTime[_owner];\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function releaseDragonTokens() public {\n', '    require(now >= releaseTime[msg.sender]);\n', '    \n', '    uint256 amount = balances[msg.sender];\n', '    require(amount > 0);\n', '    \n', '    balances[msg.sender] = 0;\n', '    if(!token.transferFrom(tokenReserve,msg.sender,amount)){\n', '        revert();\n', '    }\n', '\n', '    TokenReleased(msg.sender,amount);\n', '  }\n', '  \n', '}']