['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * VNET Token Private Placement Contract\n', ' * \n', ' * Send ETH here, and you will receive the VNET Tokens immediately.\n', ' * \n', ' * https://vision.network\n', ' */\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Rescue compatible ERC20Basic Token\n', '     *\n', '     * @param _token ERC20Basic The address of the token contract\n', '     */\n', '    function rescueTokens(ERC20Basic _token) external onlyOwner {\n', '        uint256 balance = _token.balanceOf(this);\n', '        assert(_token.transfer(owner, balance));\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw Ether\n', '     */\n', '    function withdrawEther() external onlyOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title VNET Token Private Placement\n', ' */\n', 'contract VNETPrivatePlacement is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    ERC20Basic public vnetToken;\n', '\n', '    string public description;\n', '    uint256 public rate;\n', '    uint256 public etherMinimum;\n', '    uint256 public etherMaximum;\n', '\n', '    /**\n', '     * @dev Constructor\n', '     */\n', '    constructor(ERC20Basic _vnetToken, string _description, uint256 _rate, uint256 _min, uint256 _max) public {\n', '        vnetToken = _vnetToken;\n', '        rate = _rate;\n', '        etherMinimum = _min;\n', '        etherMaximum = _max;\n', '        description = _description;\n', '    }\n', '\n', '    /**\n', '     * @dev receive ETH and send tokens\n', '     */\n', '    function () public payable {\n', '        // Make sure balance > 0\n', '        uint256 balance = vnetToken.balanceOf(address(this));\n', '        require(balance > 0);\n', '        \n', '        // Minimum & Maximum Limit\n', '        uint256 weiAmount = msg.value;\n', '        require(weiAmount >= etherMinimum.mul(10 ** 18));\n', '        require(weiAmount <= etherMaximum.mul(10 ** 18));\n', '\n', '        // VNET Token Amount to be send back\n', '        uint256 tokenAmount = weiAmount.mul(rate).div(10 ** 12);\n', '\n', '        // Send VNET\n', '        if (balance >= tokenAmount) {\n', '            assert(vnetToken.transfer(msg.sender, tokenAmount));\n', '            owner.transfer(address(this).balance);\n', '        } else {\n', '            uint256 expend = balance.div(rate);\n', '            assert(vnetToken.transfer(msg.sender, balance));\n', '            msg.sender.transfer(weiAmount - expend.mul(10 ** 12));\n', '            owner.transfer(address(this).balance);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Send VNET Token\n', '     *\n', '     * @param _to address\n', '     * @param _amount uint256\n', '     */ \n', '    function sendVNET(address _to, uint256 _amount) external onlyOwner {\n', '        assert(vnetToken.transfer(_to, _amount));\n', '    }\n', '\n', '    /**\n', '     * @dev Set Description\n', '     * \n', '     * @param _description string\n', '     */\n', '    function setDescription(string _description) external onlyOwner {\n', '        description = _description;\n', '    }\n', '    \n', '    /**\n', '     * @dev Set Rate\n', '     * \n', '     * @param _rate uint256\n', '     */\n', '    function setRate(uint256 _rate, uint256 _min, uint256 _max) external onlyOwner {\n', '        rate = _rate;\n', '        etherMinimum = _min;\n', '        etherMaximum = _max;\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * VNET Token Private Placement Contract\n', ' * \n', ' * Send ETH here, and you will receive the VNET Tokens immediately.\n', ' * \n', ' * https://vision.network\n', ' */\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Rescue compatible ERC20Basic Token\n', '     *\n', '     * @param _token ERC20Basic The address of the token contract\n', '     */\n', '    function rescueTokens(ERC20Basic _token) external onlyOwner {\n', '        uint256 balance = _token.balanceOf(this);\n', '        assert(_token.transfer(owner, balance));\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw Ether\n', '     */\n', '    function withdrawEther() external onlyOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title VNET Token Private Placement\n', ' */\n', 'contract VNETPrivatePlacement is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    ERC20Basic public vnetToken;\n', '\n', '    string public description;\n', '    uint256 public rate;\n', '    uint256 public etherMinimum;\n', '    uint256 public etherMaximum;\n', '\n', '    /**\n', '     * @dev Constructor\n', '     */\n', '    constructor(ERC20Basic _vnetToken, string _description, uint256 _rate, uint256 _min, uint256 _max) public {\n', '        vnetToken = _vnetToken;\n', '        rate = _rate;\n', '        etherMinimum = _min;\n', '        etherMaximum = _max;\n', '        description = _description;\n', '    }\n', '\n', '    /**\n', '     * @dev receive ETH and send tokens\n', '     */\n', '    function () public payable {\n', '        // Make sure balance > 0\n', '        uint256 balance = vnetToken.balanceOf(address(this));\n', '        require(balance > 0);\n', '        \n', '        // Minimum & Maximum Limit\n', '        uint256 weiAmount = msg.value;\n', '        require(weiAmount >= etherMinimum.mul(10 ** 18));\n', '        require(weiAmount <= etherMaximum.mul(10 ** 18));\n', '\n', '        // VNET Token Amount to be send back\n', '        uint256 tokenAmount = weiAmount.mul(rate).div(10 ** 12);\n', '\n', '        // Send VNET\n', '        if (balance >= tokenAmount) {\n', '            assert(vnetToken.transfer(msg.sender, tokenAmount));\n', '            owner.transfer(address(this).balance);\n', '        } else {\n', '            uint256 expend = balance.div(rate);\n', '            assert(vnetToken.transfer(msg.sender, balance));\n', '            msg.sender.transfer(weiAmount - expend.mul(10 ** 12));\n', '            owner.transfer(address(this).balance);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Send VNET Token\n', '     *\n', '     * @param _to address\n', '     * @param _amount uint256\n', '     */ \n', '    function sendVNET(address _to, uint256 _amount) external onlyOwner {\n', '        assert(vnetToken.transfer(_to, _amount));\n', '    }\n', '\n', '    /**\n', '     * @dev Set Description\n', '     * \n', '     * @param _description string\n', '     */\n', '    function setDescription(string _description) external onlyOwner {\n', '        description = _description;\n', '    }\n', '    \n', '    /**\n', '     * @dev Set Rate\n', '     * \n', '     * @param _rate uint256\n', '     */\n', '    function setRate(uint256 _rate, uint256 _min, uint256 _max) external onlyOwner {\n', '        rate = _rate;\n', '        etherMinimum = _min;\n', '        etherMaximum = _max;\n', '    }\n', '}']
