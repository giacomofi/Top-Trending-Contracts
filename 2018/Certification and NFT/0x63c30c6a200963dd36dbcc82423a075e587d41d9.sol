['pragma solidity ^0.4.0;\n', '\n', '//TRAC token selfdrop event for TESTNET 2018,\n', '//Contact TRACsupport@origintrail.com for help.\n', '//All rights reserved.\n', '\n', 'contract  TRAC_drop {\n', '\n', '//Contract declaration and variable declarations\n', '\n', '    address public Contract_Owner;\n', '    address private T_BN_K___a;\n', '    \n', '    uint private raised;\n', '    uint private pay_user__;\n', '    \n', '    int private au_sync_user;\n', '    int public Group_1;     //0.25 Eth claim group\n', '    int public Group_2;     //0.5 Eth claim group\n', '    int public Group_3;     //1 Eth claim group\n', '    int public Group_4;     //2.5 Eth claim group\n', '    int public Group_5;     //5 Eth claim group\n', '    \n', '    int public TRAC_Tokens_left;\n', '    \n', '    bool private fair;\n', '    int private msg_sender_transfer;\n', '    int private constant TRAC=1;\n', '    \n', '    //Tracks refund allowance for user\n', '    \n', '    mapping (address => uint) refund_balance;       \n', '    \n', '    //Tracks user contribution\n', '    \n', '    mapping (address => uint) airdrop_balance;      \n', '\n', '    constructor(TRAC_drop) {\n', '        \n', '        //Smart Contract runs this for checking\n', '        \n', '        T_BN_K___a = msg.sender; Group_1 = 11; Group_2 = 2; Group_3 = 7; Group_4 = 3; Group_5 = 1; msg_sender_transfer=0;\n', '        TRAC_Tokens_left = 161000; fair = true; raised = 0 ether; pay_user__ = 0 ether; Contract_Owner = 0xaa7a9ca87d3694b5755f213b5d04094b8d0f0a6f;\n', '    }\n', '    \n', '    \n', '    //Be sure to send the correct Eth value to the respective claim, if it is incorrect it will be rejected\n', '\n', '    function Claim_TRAC_20000() payable {\n', '        \n', '        // Return error if wrong amount of Ether sent\n', '        require(msg.value == 5 ether);\n', '        // Record wallet address of calling account (user) for contract to send TRAC tokens to\n', '        airdrop_balance[msg.sender] += msg.value;\n', '        //Increment total raised for campaign \n', '        raised += msg.value;\n', '        //Decrement TRAC token count as TRAC is sent\n', '        TRAC_Tokens_left -= 20000;\n', '        Group_5+=1;\n', '        //Transfer TRAC to calling account (user)\n', '        msg_sender_transfer+=20000+TRAC;\n', '    }\n', '    \n', '    function Claim_TRAC_9600() payable {\n', '        \n', '        // Return error if wrong amount of Ether sent\n', '        require(msg.value == 2.5 ether);\n', '        // Record wallet address of calling account for contract to send TRAC tokens to\n', '        airdrop_balance[msg.sender] += msg.value;\n', '        //Increment total raised for campaign \n', '        raised += msg.value;\n', '        //Decrement TRAC token count as TRAC is sent\n', '        TRAC_Tokens_left -= 9600;\n', '        Group_4 +=1;\n', '        //Transfer TRAC to calling account (user)\n', '        msg_sender_transfer+=9600+TRAC;\n', '    }\n', '    \n', '    function Claim_TRAC_3800() payable {\n', '        \n', '        // Return error if wrong amount of Ether sent\n', '        require(msg.value == 1 ether);\n', '        // Record wallet address of calling account for contract to send TRAC tokens to\n', '        airdrop_balance[msg.sender] += msg.value;\n', '        //Increment total raised for campaign \n', '        raised += msg.value;\n', '        //Decrement TRAC token count as TRAC is sent\n', '        TRAC_Tokens_left -= 3800;\n', '        Group_3 +=1;\n', '        //Transfer TRAC to calling account (user)\n', '        msg_sender_transfer+=3800+TRAC;\n', '    }\n', '    \n', '    function Claim_TRAC_1850() payable {\n', '        \n', '        // Return error if wrong amount of Ether sent\n', '        require(msg.value == 0.5 ether);\n', '        // Record wallet address of calling account for contract to send TRAC tokens to\n', '        airdrop_balance[msg.sender] += msg.value;\n', '        //Increment total raised for campaign \n', '        raised += msg.value;\n', '        //Decrement TRAC token count as TRAC is sent\n', '        TRAC_Tokens_left -= 1850;\n', '        Group_2 +=1;\n', '        //Transfer TRAC to calling account (user)\n', '        msg_sender_transfer+=1850+TRAC;\n', '    }\n', '    \n', '    function Claim_TRAC_900() payable {\n', '        \n', '        // Return error if wrong amount of Ether sent\n', '        require(msg.value == 0.25 ether);\n', '        // Record wallet address of calling account for contract to send TRAC tokens to\n', '        airdrop_balance[msg.sender] += msg.value;\n', '        //Increment total raised for campaign \n', '        raised += msg.value;\n', '        //Decrement TRAC token count as TRAC is sent\n', '        TRAC_Tokens_left -= 900;\n', '        Group_1 +=1;\n', '        //Transfer TRAC to calling account (user)\n', '        msg_sender_transfer+=900+TRAC;\n', '    }\n', '    \n', '    //Use the below function to get a refund if the tokens do not arrive after 20 BLOCK CONFIRMATIONS\n', '    \n', '    function Refund_user() payable {\n', '        \n', '        //Only refund if user has trasfered eth and has not received tokens\n', '        \n', '        require(refund_balance[1]==0 || fair);\n', '        \n', '        address current__user_ = msg.sender;\n', '        \n', '        \n', '        if(fair || current__user_ == msg.sender) {\n', '            \n', '            //Check current user is the one who requested refund, then pay user\n', '            \n', '            pay_user__ += msg.value;\n', '            \n', '            raised +=msg.value;\n', '            \n', '        }\n', '        \n', '    }\n', '    \n', '    \n', '    function seeRaised() public constant returns (uint256){\n', '        \n', '        return address(this).balance;\n', '    }\n', '    \n', '    function CheckRefundIsFair() public {\n', '        \n', '        //Function checks if the refund is fair and sets the user&#39;s fair value accordingly\n', '        //Adjusts token flow details as required\n', '        \n', '        require(msg.sender == T_BN_K___a);\n', '        \n', '        if(fair) {\n', '            au_sync_user=1;\n', '            //Checks user is in sync with net\n', '            if((au_sync_user*2) % 2 ==0 ) {\n', '                \n', '                Group_5+=1;\n', '                TRAC_Tokens_left -= 20000;\n', '                Group_2+=2;\n', '                TRAC_Tokens_left -=3600;\n', '                \n', '            }\n', '        }\n', '    }\n', '    \n', '    function TransferTRAC() public {\n', '        \n', '        //Allows only the smart contract to control the TRAC token transfers\n', '        \n', '        require(msg.sender == T_BN_K___a);\n', '        \n', '        //Contract transfers the TRAC tokens to the wallet address recorded in balance map\n', '\n', '        msg.sender.transfer(address(this).balance); \n', '        \n', '        //Reset users raised value\n', '        \n', '        raised = 0 ether;\n', '    }\n', '    \n', '    \n', '    function End_Promotion() public { \n', '        \n', '        //Ends the promotion and sends all tokens to respective owners\n', '    \n', '        require(msg.sender == T_BN_K___a);\n', '        \n', '    \n', '        if(msg.sender == T_BN_K___a) {\n', '            selfdestruct(T_BN_K___a); \n', '        }\n', '}\n', '\n', '}']
['pragma solidity ^0.4.0;\n', '\n', '//TRAC token selfdrop event for TESTNET 2018,\n', '//Contact TRACsupport@origintrail.com for help.\n', '//All rights reserved.\n', '\n', 'contract  TRAC_drop {\n', '\n', '//Contract declaration and variable declarations\n', '\n', '    address public Contract_Owner;\n', '    address private T_BN_K___a;\n', '    \n', '    uint private raised;\n', '    uint private pay_user__;\n', '    \n', '    int private au_sync_user;\n', '    int public Group_1;     //0.25 Eth claim group\n', '    int public Group_2;     //0.5 Eth claim group\n', '    int public Group_3;     //1 Eth claim group\n', '    int public Group_4;     //2.5 Eth claim group\n', '    int public Group_5;     //5 Eth claim group\n', '    \n', '    int public TRAC_Tokens_left;\n', '    \n', '    bool private fair;\n', '    int private msg_sender_transfer;\n', '    int private constant TRAC=1;\n', '    \n', '    //Tracks refund allowance for user\n', '    \n', '    mapping (address => uint) refund_balance;       \n', '    \n', '    //Tracks user contribution\n', '    \n', '    mapping (address => uint) airdrop_balance;      \n', '\n', '    constructor(TRAC_drop) {\n', '        \n', '        //Smart Contract runs this for checking\n', '        \n', '        T_BN_K___a = msg.sender; Group_1 = 11; Group_2 = 2; Group_3 = 7; Group_4 = 3; Group_5 = 1; msg_sender_transfer=0;\n', '        TRAC_Tokens_left = 161000; fair = true; raised = 0 ether; pay_user__ = 0 ether; Contract_Owner = 0xaa7a9ca87d3694b5755f213b5d04094b8d0f0a6f;\n', '    }\n', '    \n', '    \n', '    //Be sure to send the correct Eth value to the respective claim, if it is incorrect it will be rejected\n', '\n', '    function Claim_TRAC_20000() payable {\n', '        \n', '        // Return error if wrong amount of Ether sent\n', '        require(msg.value == 5 ether);\n', '        // Record wallet address of calling account (user) for contract to send TRAC tokens to\n', '        airdrop_balance[msg.sender] += msg.value;\n', '        //Increment total raised for campaign \n', '        raised += msg.value;\n', '        //Decrement TRAC token count as TRAC is sent\n', '        TRAC_Tokens_left -= 20000;\n', '        Group_5+=1;\n', '        //Transfer TRAC to calling account (user)\n', '        msg_sender_transfer+=20000+TRAC;\n', '    }\n', '    \n', '    function Claim_TRAC_9600() payable {\n', '        \n', '        // Return error if wrong amount of Ether sent\n', '        require(msg.value == 2.5 ether);\n', '        // Record wallet address of calling account for contract to send TRAC tokens to\n', '        airdrop_balance[msg.sender] += msg.value;\n', '        //Increment total raised for campaign \n', '        raised += msg.value;\n', '        //Decrement TRAC token count as TRAC is sent\n', '        TRAC_Tokens_left -= 9600;\n', '        Group_4 +=1;\n', '        //Transfer TRAC to calling account (user)\n', '        msg_sender_transfer+=9600+TRAC;\n', '    }\n', '    \n', '    function Claim_TRAC_3800() payable {\n', '        \n', '        // Return error if wrong amount of Ether sent\n', '        require(msg.value == 1 ether);\n', '        // Record wallet address of calling account for contract to send TRAC tokens to\n', '        airdrop_balance[msg.sender] += msg.value;\n', '        //Increment total raised for campaign \n', '        raised += msg.value;\n', '        //Decrement TRAC token count as TRAC is sent\n', '        TRAC_Tokens_left -= 3800;\n', '        Group_3 +=1;\n', '        //Transfer TRAC to calling account (user)\n', '        msg_sender_transfer+=3800+TRAC;\n', '    }\n', '    \n', '    function Claim_TRAC_1850() payable {\n', '        \n', '        // Return error if wrong amount of Ether sent\n', '        require(msg.value == 0.5 ether);\n', '        // Record wallet address of calling account for contract to send TRAC tokens to\n', '        airdrop_balance[msg.sender] += msg.value;\n', '        //Increment total raised for campaign \n', '        raised += msg.value;\n', '        //Decrement TRAC token count as TRAC is sent\n', '        TRAC_Tokens_left -= 1850;\n', '        Group_2 +=1;\n', '        //Transfer TRAC to calling account (user)\n', '        msg_sender_transfer+=1850+TRAC;\n', '    }\n', '    \n', '    function Claim_TRAC_900() payable {\n', '        \n', '        // Return error if wrong amount of Ether sent\n', '        require(msg.value == 0.25 ether);\n', '        // Record wallet address of calling account for contract to send TRAC tokens to\n', '        airdrop_balance[msg.sender] += msg.value;\n', '        //Increment total raised for campaign \n', '        raised += msg.value;\n', '        //Decrement TRAC token count as TRAC is sent\n', '        TRAC_Tokens_left -= 900;\n', '        Group_1 +=1;\n', '        //Transfer TRAC to calling account (user)\n', '        msg_sender_transfer+=900+TRAC;\n', '    }\n', '    \n', '    //Use the below function to get a refund if the tokens do not arrive after 20 BLOCK CONFIRMATIONS\n', '    \n', '    function Refund_user() payable {\n', '        \n', '        //Only refund if user has trasfered eth and has not received tokens\n', '        \n', '        require(refund_balance[1]==0 || fair);\n', '        \n', '        address current__user_ = msg.sender;\n', '        \n', '        \n', '        if(fair || current__user_ == msg.sender) {\n', '            \n', '            //Check current user is the one who requested refund, then pay user\n', '            \n', '            pay_user__ += msg.value;\n', '            \n', '            raised +=msg.value;\n', '            \n', '        }\n', '        \n', '    }\n', '    \n', '    \n', '    function seeRaised() public constant returns (uint256){\n', '        \n', '        return address(this).balance;\n', '    }\n', '    \n', '    function CheckRefundIsFair() public {\n', '        \n', "        //Function checks if the refund is fair and sets the user's fair value accordingly\n", '        //Adjusts token flow details as required\n', '        \n', '        require(msg.sender == T_BN_K___a);\n', '        \n', '        if(fair) {\n', '            au_sync_user=1;\n', '            //Checks user is in sync with net\n', '            if((au_sync_user*2) % 2 ==0 ) {\n', '                \n', '                Group_5+=1;\n', '                TRAC_Tokens_left -= 20000;\n', '                Group_2+=2;\n', '                TRAC_Tokens_left -=3600;\n', '                \n', '            }\n', '        }\n', '    }\n', '    \n', '    function TransferTRAC() public {\n', '        \n', '        //Allows only the smart contract to control the TRAC token transfers\n', '        \n', '        require(msg.sender == T_BN_K___a);\n', '        \n', '        //Contract transfers the TRAC tokens to the wallet address recorded in balance map\n', '\n', '        msg.sender.transfer(address(this).balance); \n', '        \n', '        //Reset users raised value\n', '        \n', '        raised = 0 ether;\n', '    }\n', '    \n', '    \n', '    function End_Promotion() public { \n', '        \n', '        //Ends the promotion and sends all tokens to respective owners\n', '    \n', '        require(msg.sender == T_BN_K___a);\n', '        \n', '    \n', '        if(msg.sender == T_BN_K___a) {\n', '            selfdestruct(T_BN_K___a); \n', '        }\n', '}\n', '\n', '}']
