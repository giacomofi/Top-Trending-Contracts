['pragma solidity ^0.4.18;\n', '\n', 'interface CornFarm\n', '{\n', '    function buyObject(address _beneficiary) public payable;\n', '}\n', '\n', 'interface Corn\n', '{\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract TaxManFarmer {\n', '    using SafeMath for uint256;\n', '    \n', '    bool private reentrancy_lock = false;\n', '    \n', '    address public shop = 0x02E0d32837313d9A5b0f88dB5f3Ef8075f4AFd1C;\n', '    address public object = 0x63b173CdDe9580F49aD80F4F697c4Ed40f349Ed6;\n', '    address public taxMan = 0xd5048F05Ed7185821C999e3e077A3d1baed0952c;\n', '    \n', '    mapping(address => uint256) public workDone;\n', '    \n', '    modifier nonReentrant() {\n', '        require(!reentrancy_lock);\n', '        reentrancy_lock = true;\n', '        _;\n', '        reentrancy_lock = false;\n', '    }\n', '    \n', '    function pepFarm() nonReentrant external {\n', '        for (uint8 i = 0; i < 100; i++) {\n', '            CornFarm(shop).buyObject(this);\n', '        }\n', '        \n', '        workDone[msg.sender] = workDone[msg.sender].add(uint256(95 ether));\n', '        workDone[taxMan] = workDone[taxMan].add(uint256(5 ether));\n', '    }\n', '    \n', '    function reapFarm() nonReentrant external {\n', '        require(workDone[msg.sender] > 0);\n', '        Corn(object).transfer(msg.sender, workDone[msg.sender]);\n', '        Corn(object).transfer(taxMan, workDone[taxMan]);\n', '        workDone[msg.sender] = 0;\n', '        workDone[taxMan] = 0;\n', '    }\n', '}']