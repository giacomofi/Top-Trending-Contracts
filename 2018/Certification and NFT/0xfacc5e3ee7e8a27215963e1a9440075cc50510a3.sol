['pragma solidity ^0.4.4;\n', '\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && (balances[_to] + _value) > balances[_to] && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to] && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', '\n', 'contract IAHCToken is StandardToken {\n', '\n', '    string public constant name   = "IAHC";\n', '    string public constant symbol = "IAHC";\n', '\n', '    uint8 public constant decimals = 8;\n', '    uint  public constant decimals_multiplier = 100000000;\n', '\n', '    address public constant ESCROW_WALLET = 0x3D7FaD8174dac0df6a0a3B473b9569f7618d07E2;\n', '\n', '    uint public constant icoSupply          = 500000000 * decimals_multiplier; //0,5 billion (500,000,000 IAHC coins will be available for purchase (25% of total IAHC)\n', '    uint public constant icoTokensPrice     = 142000;                          //wei / decimals, base price: 0.0000142 ETH per 1 IAHC\n', '    uint public constant icoMinCap          = 100   ether;\n', '    uint public constant icoMaxCap          = 7000  ether;\n', '\n', '    uint public constant whiteListMinAmount = 0.50  ether;\n', '    uint public constant preSaleMinAmount   = 0.25  ether;\n', '    uint public constant crowdSaleMinAmount = 0.10  ether;\n', '\n', '    address public icoOwner;\n', '    uint public icoLeftSupply  = icoSupply; //current left tokens to sell during ico\n', '    uint public icoSoldCap     = 0;         //current sold value in wei\n', '\n', '    uint public whiteListTime         = 1519084800; //20.02.2018 (40% discount)\n', '    uint public preSaleListTime       = 1521590400; //21.03.2018 (28% discount)\n', '    uint public crowdSaleTime         = 1524355200; //22.04.2018 (10% discount)\n', '    uint public crowdSaleEndTime      = 1526947200; //22.05.2018 (0% discount)\n', '    uint public icoEndTime            = 1529712000; //23.06.2018\n', '    uint public guarenteedPaybackTime = 1532304000; //23.07.2018\n', '\n', '    mapping(address => bool) public whiteList;\n', '    mapping(address => uint) public icoContributions;\n', '\n', '    function IAHCToken(){\n', '        icoOwner = msg.sender;\n', '        balances[icoOwner] = 2000000000 * decimals_multiplier - icoSupply; //froze ico tokens\n', '        totalSupply = 2000000000 * decimals_multiplier;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == icoOwner);\n', '        _;\n', '    }\n', '\n', '    //unfroze tokens if some left unsold from ico\n', '    function icoEndUnfrozeTokens() public onlyOwner() returns(bool) {\n', '        require(now >= icoEndTime && icoLeftSupply > 0);\n', '\n', '        balances[icoOwner] += icoLeftSupply;\n', '        icoLeftSupply = 0;\n', '    }\n', '\n', '    //if soft cap is not reached - participant can ask ethers back\n', '    function minCapFail() public {\n', '        require(now >= icoEndTime && icoSoldCap < icoMinCap);\n', '        require(icoContributions[msg.sender] > 0 && balances[msg.sender] > 0);\n', '\n', '        uint tokens = balances[msg.sender];\n', '        balances[icoOwner] += tokens;\n', '        balances[msg.sender] -= tokens;\n', '        uint contribution = icoContributions[msg.sender];\n', '        icoContributions[msg.sender] = 0;\n', '\n', '        Transfer(msg.sender, icoOwner, tokens);\n', '\n', '        msg.sender.transfer(contribution);\n', '    }\n', '\n', '    // for info\n', '    function getCurrentStageDiscount() public constant returns (uint) {\n', '        uint discount = 0;\n', '        if (now >= icoEndTime && now < preSaleListTime) {\n', '            discount = 40;\n', '        } else if (now < crowdSaleTime) {\n', '            discount = 28;\n', '        } else if (now < crowdSaleEndTime) {\n', '            discount = 10;\n', '        }\n', '        return discount;\n', '    }\n', '\n', '    function safePayback(address receiver, uint amount) public onlyOwner() {\n', '        require(now >= guarenteedPaybackTime);\n', '        require(icoSoldCap < icoMinCap);\n', '\n', '        receiver.transfer(amount);\n', '    }\n', '\n', '    // count tokens i could buy now\n', '    function countTokens(uint paid, address sender) public constant returns (uint) {\n', '        uint discount = 0;\n', '        if (now < preSaleListTime) {\n', '            require(whiteList[sender]);\n', '            require(paid >= whiteListMinAmount);\n', '            discount = 40;\n', '        } else if (now < crowdSaleTime) {\n', '            require(paid >= preSaleMinAmount);\n', '            discount = 28;\n', '        } else if (now < crowdSaleEndTime) {\n', '            require(paid >= crowdSaleMinAmount);\n', '            discount = 10;\n', '        }\n', '\n', '        uint tokens = paid / icoTokensPrice;\n', '        if (discount > 0) {\n', '            tokens = tokens / (100 - discount) * 100;\n', '        }\n', '        return tokens;\n', '    }\n', '\n', '    // buy tokens if you can\n', '    function () public payable {\n', '        contribute();\n', '    }\n', '\n', '    function contribute() public payable {\n', '        require(now >= whiteListTime && now < icoEndTime && icoLeftSupply > 0);\n', '\n', '        uint tokens = countTokens(msg.value, msg.sender);\n', '        uint payback = 0;\n', '        if (icoLeftSupply < tokens) {\n', '            //not enough tokens so we need to return some ethers back\n', '            payback = msg.value - (msg.value / tokens) * icoLeftSupply;\n', '            tokens = icoLeftSupply;\n', '        }\n', '        uint contribution = msg.value - payback;\n', '\n', '        icoLeftSupply                -= tokens;\n', '        balances[msg.sender]         += tokens;\n', '        icoSoldCap                   += contribution;\n', '        icoContributions[msg.sender] += contribution;\n', '\n', '        Transfer(icoOwner, msg.sender, tokens);\n', '\n', '        if (icoSoldCap >= icoMinCap) {\n', '            ESCROW_WALLET.transfer(this.balance);\n', '        }\n', '        if (payback > 0) {\n', '            msg.sender.transfer(payback);\n', '        }\n', '    }\n', '\n', '\n', '    //lists\n', '    function addToWhitelist(address _participant) public onlyOwner() returns(bool) {\n', '        if (whiteList[_participant]) {\n', '            return true;\n', '        }\n', '        whiteList[_participant] = true;\n', '        return true;\n', '    }\n', '    function removeFromWhitelist(address _participant) public onlyOwner() returns(bool) {\n', '        if (!whiteList[_participant]) {\n', '            return true;\n', '        }\n', '        whiteList[_participant] = false;\n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.4;\n', '\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && (balances[_to] + _value) > balances[_to] && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to] && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', '\n', 'contract IAHCToken is StandardToken {\n', '\n', '    string public constant name   = "IAHC";\n', '    string public constant symbol = "IAHC";\n', '\n', '    uint8 public constant decimals = 8;\n', '    uint  public constant decimals_multiplier = 100000000;\n', '\n', '    address public constant ESCROW_WALLET = 0x3D7FaD8174dac0df6a0a3B473b9569f7618d07E2;\n', '\n', '    uint public constant icoSupply          = 500000000 * decimals_multiplier; //0,5 billion (500,000,000 IAHC coins will be available for purchase (25% of total IAHC)\n', '    uint public constant icoTokensPrice     = 142000;                          //wei / decimals, base price: 0.0000142 ETH per 1 IAHC\n', '    uint public constant icoMinCap          = 100   ether;\n', '    uint public constant icoMaxCap          = 7000  ether;\n', '\n', '    uint public constant whiteListMinAmount = 0.50  ether;\n', '    uint public constant preSaleMinAmount   = 0.25  ether;\n', '    uint public constant crowdSaleMinAmount = 0.10  ether;\n', '\n', '    address public icoOwner;\n', '    uint public icoLeftSupply  = icoSupply; //current left tokens to sell during ico\n', '    uint public icoSoldCap     = 0;         //current sold value in wei\n', '\n', '    uint public whiteListTime         = 1519084800; //20.02.2018 (40% discount)\n', '    uint public preSaleListTime       = 1521590400; //21.03.2018 (28% discount)\n', '    uint public crowdSaleTime         = 1524355200; //22.04.2018 (10% discount)\n', '    uint public crowdSaleEndTime      = 1526947200; //22.05.2018 (0% discount)\n', '    uint public icoEndTime            = 1529712000; //23.06.2018\n', '    uint public guarenteedPaybackTime = 1532304000; //23.07.2018\n', '\n', '    mapping(address => bool) public whiteList;\n', '    mapping(address => uint) public icoContributions;\n', '\n', '    function IAHCToken(){\n', '        icoOwner = msg.sender;\n', '        balances[icoOwner] = 2000000000 * decimals_multiplier - icoSupply; //froze ico tokens\n', '        totalSupply = 2000000000 * decimals_multiplier;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == icoOwner);\n', '        _;\n', '    }\n', '\n', '    //unfroze tokens if some left unsold from ico\n', '    function icoEndUnfrozeTokens() public onlyOwner() returns(bool) {\n', '        require(now >= icoEndTime && icoLeftSupply > 0);\n', '\n', '        balances[icoOwner] += icoLeftSupply;\n', '        icoLeftSupply = 0;\n', '    }\n', '\n', '    //if soft cap is not reached - participant can ask ethers back\n', '    function minCapFail() public {\n', '        require(now >= icoEndTime && icoSoldCap < icoMinCap);\n', '        require(icoContributions[msg.sender] > 0 && balances[msg.sender] > 0);\n', '\n', '        uint tokens = balances[msg.sender];\n', '        balances[icoOwner] += tokens;\n', '        balances[msg.sender] -= tokens;\n', '        uint contribution = icoContributions[msg.sender];\n', '        icoContributions[msg.sender] = 0;\n', '\n', '        Transfer(msg.sender, icoOwner, tokens);\n', '\n', '        msg.sender.transfer(contribution);\n', '    }\n', '\n', '    // for info\n', '    function getCurrentStageDiscount() public constant returns (uint) {\n', '        uint discount = 0;\n', '        if (now >= icoEndTime && now < preSaleListTime) {\n', '            discount = 40;\n', '        } else if (now < crowdSaleTime) {\n', '            discount = 28;\n', '        } else if (now < crowdSaleEndTime) {\n', '            discount = 10;\n', '        }\n', '        return discount;\n', '    }\n', '\n', '    function safePayback(address receiver, uint amount) public onlyOwner() {\n', '        require(now >= guarenteedPaybackTime);\n', '        require(icoSoldCap < icoMinCap);\n', '\n', '        receiver.transfer(amount);\n', '    }\n', '\n', '    // count tokens i could buy now\n', '    function countTokens(uint paid, address sender) public constant returns (uint) {\n', '        uint discount = 0;\n', '        if (now < preSaleListTime) {\n', '            require(whiteList[sender]);\n', '            require(paid >= whiteListMinAmount);\n', '            discount = 40;\n', '        } else if (now < crowdSaleTime) {\n', '            require(paid >= preSaleMinAmount);\n', '            discount = 28;\n', '        } else if (now < crowdSaleEndTime) {\n', '            require(paid >= crowdSaleMinAmount);\n', '            discount = 10;\n', '        }\n', '\n', '        uint tokens = paid / icoTokensPrice;\n', '        if (discount > 0) {\n', '            tokens = tokens / (100 - discount) * 100;\n', '        }\n', '        return tokens;\n', '    }\n', '\n', '    // buy tokens if you can\n', '    function () public payable {\n', '        contribute();\n', '    }\n', '\n', '    function contribute() public payable {\n', '        require(now >= whiteListTime && now < icoEndTime && icoLeftSupply > 0);\n', '\n', '        uint tokens = countTokens(msg.value, msg.sender);\n', '        uint payback = 0;\n', '        if (icoLeftSupply < tokens) {\n', '            //not enough tokens so we need to return some ethers back\n', '            payback = msg.value - (msg.value / tokens) * icoLeftSupply;\n', '            tokens = icoLeftSupply;\n', '        }\n', '        uint contribution = msg.value - payback;\n', '\n', '        icoLeftSupply                -= tokens;\n', '        balances[msg.sender]         += tokens;\n', '        icoSoldCap                   += contribution;\n', '        icoContributions[msg.sender] += contribution;\n', '\n', '        Transfer(icoOwner, msg.sender, tokens);\n', '\n', '        if (icoSoldCap >= icoMinCap) {\n', '            ESCROW_WALLET.transfer(this.balance);\n', '        }\n', '        if (payback > 0) {\n', '            msg.sender.transfer(payback);\n', '        }\n', '    }\n', '\n', '\n', '    //lists\n', '    function addToWhitelist(address _participant) public onlyOwner() returns(bool) {\n', '        if (whiteList[_participant]) {\n', '            return true;\n', '        }\n', '        whiteList[_participant] = true;\n', '        return true;\n', '    }\n', '    function removeFromWhitelist(address _participant) public onlyOwner() returns(bool) {\n', '        if (!whiteList[_participant]) {\n', '            return true;\n', '        }\n', '        whiteList[_participant] = false;\n', '        return true;\n', '    }\n', '\n', '}']
