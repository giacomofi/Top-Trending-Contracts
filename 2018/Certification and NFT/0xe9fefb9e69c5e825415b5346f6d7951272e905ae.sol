['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**************************************************************\n', ' * @title Scale Token Contract\n', ' * @file Scale.sol\n', ' * @author Jared Downing and Kane Thomas of the Scale Network\n', ' * @version 1.0\n', ' *\n', ' * @section DESCRIPTION\n', ' *\n', ' * This is an ERC20-based token with staking and inflationary functionality.\n', ' *\n', ' *************************************************************/\n', '\n', '//////////////////////////////////\n', '/// OpenZeppelin library imports\n', '//////////////////////////////////\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' * Modified to allow minting for non-owner addresses\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) internal returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Contracts that should not own Ether\n', ' * @author Remco Bloemen <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="cbb9aea6a8a48bf9">[email&#160;protected]</a>π.com>\n', ' * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n', ' * in the contract, it will allow the owner to reclaim this ether.\n', ' * @notice Ether can still be send to this contract by:\n', ' * calling functions labeled `payable`\n', ' * `selfdestruct(contract_address)`\n', ' * mining directly to the contract address\n', '*/\n', 'contract HasNoEther is Ownable {\n', '\n', '  /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '  constructor() public payable {\n', '    require(msg.value == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Disallows direct send by settings a default function without the `payable` flag.\n', '   */\n', '  function() external {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    assert(owner.send(address(this).balance));\n', '  }\n', '}\n', '\n', '//////////////////////////////////\n', '/// Scale Token\n', '//////////////////////////////////\n', '\n', 'contract Scale is MintableToken, HasNoEther {\n', '\n', '    // Libraries\n', '    using SafeMath for uint;\n', '\n', '    //////////////////////\n', '    // Token Information\n', '    //////////////////////\n', '    string public constant name = "SCALE";\n', '    string public constant symbol = "SCALE";\n', '    uint8 public constant  decimals = 18;\n', '\n', '    ///////////////////////////////////////////////////////////\n', '    // Variables For Staking and Pooling\n', '    ///////////////////////////////////////////////////////////\n', '\n', '    // -- Pool Minting Rates and Percentages -- //\n', '    // Pool for Scale distribution to rewards pool\n', '    // Set to 0 to prohibit issuing to the pool before it is assigned\n', '    address public pool = address(0);\n', '\n', '    // Pool and Owner minted tokens per second\n', '    uint public poolMintRate;\n', '    uint public ownerMintRate;\n', '\n', '    // Amount of Scale to be staked to the pool, staking, and mint, as calculated through their percentages\n', '    uint public poolMintAmount;\n', '    uint public stakingMintAmount;\n', '    uint public ownerMintAmount;\n', '\n', '    // Scale distribution percentages\n', '    uint public poolPercentage = 70;\n', '    uint public ownerPercentage = 5;\n', '    uint public stakingPercentage = 25;\n', '\n', '    // Last time minted for owner and pool\n', '    uint public ownerTimeLastMinted;\n', '    uint public poolTimeLastMinted;\n', '\n', '    // -- Staking -- //\n', '    // Minted tokens per second\n', '    uint public stakingMintRate;\n', '\n', '    // Total Scale currently staked\n', '    uint public totalScaleStaked;\n', '\n', '    // Mapping of the timestamp => totalStaking that is created each time an address stakes or unstakes\n', '    mapping (uint => uint) totalStakingHistory;\n', '\n', '    // Variable for staking accuracy. Set to 86400 for seconds in a day so that staking gains are based on the day an account begins staking.\n', '    uint timingVariable = 86400;\n', '\n', '    // Address staking information\n', '    struct AddressStakeData {\n', '        uint stakeBalance;\n', '        uint initialStakeTime;\n', '    }\n', '\n', '    // Track all tokens staked\n', '    mapping (address => AddressStakeData) public stakeBalances;\n', '\n', '    // -- Inflation -- //\n', '    // Inflation rate begins at 100% per year and decreases by 15% per year until it reaches 10% where it decreases by 0.5% per year\n', '    uint256 inflationRate = 1000;\n', '\n', '    // Used to manage when to inflate. Allowed to inflate once per year until the rate reaches 1%.\n', '    uint256 public lastInflationUpdate;\n', '\n', '    // -- Events -- //\n', '    // Fired when tokens are staked\n', '    event Stake(address indexed staker, uint256 value);\n', '    // Fired when tokens are unstaked\n', '    event Unstake(address indexed unstaker, uint256 stakedAmount, uint256 stakingGains);\n', '\n', '    //////////////////////////////////////////////////\n', '    /// Scale Token Functionality\n', '    //////////////////////////////////////////////////\n', '\n', '    /// @dev Scale token constructor\n', '    constructor() public {\n', '        // Assign owner\n', '        owner = msg.sender;\n', '\n', '        // Assign initial owner supply\n', '        uint _initOwnerSupply = 10000000 ether;\n', '        // Mint given to owner only one-time\n', '        bool _success = mint(msg.sender, _initOwnerSupply);\n', '        // Require minting success\n', '        require(_success);\n', '\n', '        // Set pool and owner last minted to ensure extra coins are not minted by either\n', '        ownerTimeLastMinted = now;\n', '        poolTimeLastMinted = now;\n', '\n', '        // Set minting amount for pool, staking, and owner over the course of 1 year\n', '        poolMintAmount = _initOwnerSupply.mul(poolPercentage).div(100);\n', '        ownerMintAmount = _initOwnerSupply.mul(ownerPercentage).div(100);\n', '        stakingMintAmount = _initOwnerSupply.mul(stakingPercentage).div(100);\n', '\n', '        // One year in seconds\n', '        uint _oneYearInSeconds = 31536000 ether;\n', '\n', '        // Set the rate of coins minted per second for the pool, owner, and global staking\n', '        poolMintRate = calculateFraction(poolMintAmount, _oneYearInSeconds, decimals);\n', '        ownerMintRate = calculateFraction(ownerMintAmount, _oneYearInSeconds, decimals);\n', '        stakingMintRate = calculateFraction(stakingMintAmount, _oneYearInSeconds, decimals);\n', '\n', '        // Set the last time inflation was update to now so that the next time it can be updated is 1 year from now\n', '        lastInflationUpdate = now;\n', '    }\n', '\n', '    /////////////\n', '    // Inflation\n', '    /////////////\n', '\n', '    /// @dev the inflation rate begins at 100% and decreases by 15% every year until it reaches 10%\n', '    /// at 10% the rate begins to decrease by 0.5% until it reaches 1%\n', '    function adjustInflationRate() private {\n', '\n', '\n', '      // Make sure adjustInflationRate cannot be called for at least another year\n', '      lastInflationUpdate = now;\n', '\n', '      // Decrease inflation rate by 15% each year\n', '      if (inflationRate > 100) {\n', '\n', '        inflationRate = inflationRate.sub(300);\n', '      }\n', '      // Inflation rate reaches 10%. Decrease inflation rate by 0.5% from here on out until it reaches 1%.\n', '      else if (inflationRate > 10) {\n', '\n', '        inflationRate = inflationRate.sub(5);\n', '      }\n', '\n', '      // Calculate new mint amount of Scale that should be created per year.\n', '      // Example Inflation Past Year 1 for the poolMintAmount: 16M * 0.85 * 0.7 = 9,520,000\n', '      poolMintAmount = totalSupply.mul(inflationRate).div(1000).mul(poolPercentage).div(100);\n', '      ownerMintAmount = totalSupply.mul(inflationRate).div(1000).mul(ownerPercentage).div(100);\n', '      stakingMintAmount = totalSupply.mul(inflationRate).div(1000).mul(stakingPercentage).div(100);\n', '\n', '        // Adjust Scale created per-second for each rate\n', '        poolMintRate = calculateFraction(poolMintAmount, 31536000 ether, decimals);\n', '        ownerMintRate = calculateFraction(ownerMintAmount, 31536000 ether, decimals);\n', '        stakingMintRate = calculateFraction(stakingMintAmount, 31536000 ether, decimals);\n', '    }\n', '\n', '    /// @dev anyone can call this function to update the inflation rate yearly\n', '    function updateInflationRate() public {\n', '\n', '      // Require 1 year to have passed for every inflation adjustment\n', '      require(now.sub(lastInflationUpdate) >= 31536000);\n', '\n', '      adjustInflationRate();\n', '\n', '    }\n', '\n', '    /////////////\n', '    // Staking\n', '    /////////////\n', '\n', '    /// @dev staking function which allows users to stake an amount of tokens to gain interest for up to 30 days\n', '    /// @param _stakeAmount how many tokens a user wants to stake\n', '    function stakeScale(uint _stakeAmount) external {\n', '\n', '        // Require that tokens are staked successfully\n', '        require(stake(msg.sender, _stakeAmount));\n', '    }\n', '\n', '    /// @dev stake for a seperate address\n', '    /// @param _stakeAmount how many tokens a user wants to stake\n', '    function stakeFor(address _user, uint _stakeAmount) external {\n', '\n', '      // You can only stake tokens for another user if they have not already staked tokens\n', '      require(stakeBalances[_user].stakeBalance == 0);\n', '\n', '      // Transfer Scale from to the user\n', '      transfer( _user, _stakeAmount);\n', '\n', '      // Stake for the user\n', '      stake(_user, _stakeAmount);\n', '    }\n', '\n', '    /// @dev stake function reduces the user&#39;s total available balance and adds it to their staking balance\n', '    /// @param _value how many tokens a user wants to stake\n', '    function stake(address _user, uint256 _value) private returns (bool success) {\n', '\n', '        // You can only stake as many tokens as you have\n', '        require(_value <= balances[_user]);\n', '        // You can only stake tokens if you have not already staked tokens\n', '        require(stakeBalances[_user].stakeBalance == 0);\n', '\n', '        // Subtract stake amount from regular token balance\n', '        balances[_user] = balances[_user].sub(_value);\n', '\n', '        // Add stake amount to staked balance\n', '        stakeBalances[_user].stakeBalance = _value;\n', '\n', '        // Increment the staking staked tokens value\n', '        totalScaleStaked = totalScaleStaked.add(_value);\n', '\n', '        // Save the time that the stake started\n', '        stakeBalances[_user].initialStakeTime = now.div(timingVariable);\n', '\n', '        // Set the new staking history\n', '        setTotalStakingHistory();\n', '\n', '        // Fire an event to tell the world of the newly staked tokens\n', '        emit Stake(_user, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev returns how much Scale a user has earned so far\n', '    /// @param _now is passed in to allow for a gas-free analysis\n', '    /// @return staking gains based on the amount of time passed since staking began\n', '    function getStakingGains(uint _now) view public returns (uint) {\n', '\n', '        if (stakeBalances[msg.sender].stakeBalance == 0) {\n', '\n', '          return 0;\n', '        }\n', '\n', '        return calculateStakeGains(_now);\n', '    }\n', '\n', '    /// @dev allows users to reclaim any staked tokens\n', '    /// @return bool on success\n', '    function unstake() external returns (bool) {\n', '\n', '        // Require that there was some amount vested\n', '        require(stakeBalances[msg.sender].stakeBalance > 0);\n', '\n', '        // Require that at least 7 timing variables have passed (days)\n', '        require(now.div(timingVariable).sub(stakeBalances[msg.sender].initialStakeTime) >= 7);\n', '\n', '        // Calculate tokens to mint\n', '        uint _tokensToMint = calculateStakeGains(now);\n', '\n', '        balances[msg.sender] = balances[msg.sender].add(stakeBalances[msg.sender].stakeBalance);\n', '\n', '        // Subtract stake balance from totalScaleStaked\n', '        totalScaleStaked = totalScaleStaked.sub(stakeBalances[msg.sender].stakeBalance);\n', '\n', '        // Mint the new tokens to the sender\n', '        mint(msg.sender, _tokensToMint);\n', '\n', '        // Scale unstaked event\n', '        emit Unstake(msg.sender, stakeBalances[msg.sender].stakeBalance, _tokensToMint);\n', '\n', '        // Clear out stored data from mapping\n', '        stakeBalances[msg.sender].stakeBalance = 0;\n', '        stakeBalances[msg.sender].initialStakeTime = 0;\n', '\n', '        // Set this every time someone adjusts the totalScaleStaking amount\n', '        setTotalStakingHistory();\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev Helper function to claimStake that modularizes the minting via staking calculation\n', '    /// @param _now when the user stopped staking. Passed in as a variable to allow for checking without using gas from the getStakingGains function.\n', '    /// @return uint for total coins to be minted\n', '    function calculateStakeGains(uint _now) view private returns (uint mintTotal)  {\n', '\n', '      uint _nowAsTimingVariable = _now.div(timingVariable);    // Today as a unique value in unix time\n', '      uint _initialStakeTimeInVariable = stakeBalances[msg.sender].initialStakeTime; // When the user started staking as a unique day in unix time\n', '      uint _timePassedSinceStakeInVariable = _nowAsTimingVariable.sub(_initialStakeTimeInVariable); // How much time has passed, in days, since the user started staking.\n', '      uint _stakePercentages = 0; // Keeps an additive track of the user&#39;s staking percentages over time\n', '      uint _tokensToMint = 0; // How many new Scale tokens to create\n', '      uint _lastUsedVariable;  // Last day the totalScaleStaked was updated\n', '\n', '      // Average this msg.sender&#39;s relative percentage ownership of totalScaleStaked throughout each day since they started staking\n', '      for (uint i = _initialStakeTimeInVariable; i < _nowAsTimingVariable; i++) {\n', '\n', '        // If the day exists add it to the percentages\n', '        if (totalStakingHistory[i] != 0) {\n', '\n', '           // If the day does exist add it to the number to be later averaged as a total average percentage of total staking\n', '          _stakePercentages = _stakePercentages.add(calculateFraction(stakeBalances[msg.sender].stakeBalance, totalStakingHistory[i], decimals));\n', '\n', '          // Set this as the last day someone staked\n', '          _lastUsedVariable = totalStakingHistory[i];\n', '        }\n', '        else {\n', '\n', '          // Use the last day found in the totalStakingHistory mapping\n', '          _stakePercentages = _stakePercentages.add(calculateFraction(stakeBalances[msg.sender].stakeBalance, _lastUsedVariable, decimals));\n', '        }\n', '\n', '      }\n', '\n', '        // Get the account&#39;s average percentage staked of the total stake over the course of all days they have been staking\n', '        uint _stakePercentageAverage = calculateFraction(_stakePercentages, _timePassedSinceStakeInVariable, 0);\n', '\n', '        // Calculate this account&#39;s mint rate per second while staking\n', '        uint _finalMintRate = stakingMintRate.mul(_stakePercentageAverage);\n', '\n', '        // Account for 18 decimals when calculating the amount of tokens to mint\n', '        _finalMintRate = _finalMintRate.div(1 ether);\n', '\n', '        // Calculate total tokens to be minted. Multiply by timingVariable to convert back to seconds.\n', '        if (_timePassedSinceStakeInVariable >= 365) {\n', '\n', '          // Tokens were staked for the maximum amount of time, one year. Give them one year&#39;s worth of tokens. ( this limit is placed to avoid gas limits)\n', '          _tokensToMint = calculateMintTotal(timingVariable.mul(365), _finalMintRate);\n', '        }\n', '        else {\n', '\n', '          // Tokens were staked for less than the maximum amount of time\n', '          _tokensToMint = calculateMintTotal(_timePassedSinceStakeInVariable.mul(timingVariable), _finalMintRate);\n', '        }\n', '\n', '        return  _tokensToMint;\n', '    }\n', '\n', '    /// @dev set the new totalStakingHistory mapping to the current timestamp and totalScaleStaked\n', '    function setTotalStakingHistory() private {\n', '\n', '      // Get now in terms of the variable staking accuracy (days in Scale&#39;s case)\n', '      uint _nowAsTimingVariable = now.div(timingVariable);\n', '\n', '      // Set the totalStakingHistory as a timestamp of the totalScaleStaked today\n', '      totalStakingHistory[_nowAsTimingVariable] = totalScaleStaked;\n', '    }\n', '\n', '    /// @dev Allows user to check their staked balance\n', '    /// @return staked balance\n', '    function getStakedBalance() view external returns (uint stakedBalance) {\n', '\n', '        return stakeBalances[msg.sender].stakeBalance;\n', '    }\n', '\n', '    /////////////\n', '    // Scale Owner Claiming\n', '    /////////////\n', '\n', '    /// @dev allows contract owner to claim their mint\n', '    function ownerClaim() external onlyOwner {\n', '\n', '        require(now > ownerTimeLastMinted);\n', '\n', '        uint _timePassedSinceLastMint; // The amount of time passed since the owner claimed in seconds\n', '        uint _tokenMintCount; // The amount of new tokens to mint\n', '        bool _mintingSuccess; // The success of minting the new Scale tokens\n', '\n', '        // Calculate the number of seconds that have passed since the owner last took a claim\n', '        _timePassedSinceLastMint = now.sub(ownerTimeLastMinted);\n', '\n', '        assert(_timePassedSinceLastMint > 0);\n', '\n', '        // Determine the token mint amount, determined from the number of seconds passed and the ownerMintRate\n', '        _tokenMintCount = calculateMintTotal(_timePassedSinceLastMint, ownerMintRate);\n', '\n', '        // Mint the owner&#39;s tokens; this also increases totalSupply\n', '        _mintingSuccess = mint(msg.sender, _tokenMintCount);\n', '\n', '        require(_mintingSuccess);\n', '\n', '        // New minting was a success. Set last time minted to current block.timestamp (now)\n', '        ownerTimeLastMinted = now;\n', '    }\n', '\n', '    ////////////////////////////////\n', '    // Scale Pool Distribution\n', '    ////////////////////////////////\n', '\n', '    /// @dev anyone can call this function that mints Scale to the pool dedicated to Scale distribution to rewards pool\n', '    function poolIssue() public {\n', '\n', '        // Do not allow tokens to be minted to the pool until the pool is set\n', '        require(pool != address(0));\n', '\n', '        // Make sure time has passed since last minted to pool\n', '        require(now > poolTimeLastMinted);\n', '        require(pool != address(0));\n', '\n', '        uint _timePassedSinceLastMint; // The amount of time passed since the pool claimed in seconds\n', '        uint _tokenMintCount; // The amount of new tokens to mint\n', '        bool _mintingSuccess; // The success of minting the new Scale tokens\n', '\n', '        // Calculate the number of seconds that have passed since the owner last took a claim\n', '        _timePassedSinceLastMint = now.sub(poolTimeLastMinted);\n', '\n', '        assert(_timePassedSinceLastMint > 0);\n', '\n', '        // Determine the token mint amount, determined from the number of seconds passed and the ownerMintRate\n', '        _tokenMintCount = calculateMintTotal(_timePassedSinceLastMint, poolMintRate);\n', '\n', '        // Mint the owner&#39;s tokens; this also increases totalSupply\n', '        _mintingSuccess = mint(pool, _tokenMintCount);\n', '\n', '        require(_mintingSuccess);\n', '\n', '        // New minting was a success! Set last time minted to current block.timestamp (now)\n', '        poolTimeLastMinted = now;\n', '    }\n', '\n', '    /// @dev sets the address for the rewards pool\n', '    /// @param _newAddress pool Address\n', '    function setPool(address _newAddress) public onlyOwner {\n', '\n', '        pool = _newAddress;\n', '    }\n', '\n', '    ////////////////////////////////\n', '    // Helper Functions\n', '    ////////////////////////////////\n', '\n', '    /// @dev calculateFraction allows us to better handle the Solidity ugliness of not having decimals as a native type\n', '    /// @param _numerator is the top part of the fraction we are calculating\n', '    /// @param _denominator is the bottom part of the fraction we are calculating\n', '    /// @param _precision tells the function how many significant digits to calculate out to\n', '    /// @return quotient returns the result of our fraction calculation\n', '    function calculateFraction(uint _numerator, uint _denominator, uint _precision) pure private returns(uint quotient) {\n', '        // Take passed value and expand it to the required precision\n', '        _numerator = _numerator.mul(10 ** (_precision + 1));\n', '        // Handle last-digit rounding\n', '        uint _quotient = ((_numerator.div(_denominator)) + 5) / 10;\n', '        return (_quotient);\n', '    }\n', '\n', '    /// @dev Determines the amount of Scale to create based on the number of seconds that have passed\n', '    /// @param _timeInSeconds is the time passed in seconds to mint for\n', '    /// @return uint with the calculated number of new tokens to mint\n', '    function calculateMintTotal(uint _timeInSeconds, uint _mintRate) pure private returns(uint mintAmount) {\n', '        // Calculates the amount of tokens to mint based upon the number of seconds passed\n', '        return(_timeInSeconds.mul(_mintRate));\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**************************************************************\n', ' * @title Scale Token Contract\n', ' * @file Scale.sol\n', ' * @author Jared Downing and Kane Thomas of the Scale Network\n', ' * @version 1.0\n', ' *\n', ' * @section DESCRIPTION\n', ' *\n', ' * This is an ERC20-based token with staking and inflationary functionality.\n', ' *\n', ' *************************************************************/\n', '\n', '//////////////////////////////////\n', '/// OpenZeppelin library imports\n', '//////////////////////////////////\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' * Modified to allow minting for non-owner addresses\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) internal returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Contracts that should not own Ether\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n', ' * in the contract, it will allow the owner to reclaim this ether.\n', ' * @notice Ether can still be send to this contract by:\n', ' * calling functions labeled `payable`\n', ' * `selfdestruct(contract_address)`\n', ' * mining directly to the contract address\n', '*/\n', 'contract HasNoEther is Ownable {\n', '\n', '  /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '  constructor() public payable {\n', '    require(msg.value == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Disallows direct send by settings a default function without the `payable` flag.\n', '   */\n', '  function() external {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    assert(owner.send(address(this).balance));\n', '  }\n', '}\n', '\n', '//////////////////////////////////\n', '/// Scale Token\n', '//////////////////////////////////\n', '\n', 'contract Scale is MintableToken, HasNoEther {\n', '\n', '    // Libraries\n', '    using SafeMath for uint;\n', '\n', '    //////////////////////\n', '    // Token Information\n', '    //////////////////////\n', '    string public constant name = "SCALE";\n', '    string public constant symbol = "SCALE";\n', '    uint8 public constant  decimals = 18;\n', '\n', '    ///////////////////////////////////////////////////////////\n', '    // Variables For Staking and Pooling\n', '    ///////////////////////////////////////////////////////////\n', '\n', '    // -- Pool Minting Rates and Percentages -- //\n', '    // Pool for Scale distribution to rewards pool\n', '    // Set to 0 to prohibit issuing to the pool before it is assigned\n', '    address public pool = address(0);\n', '\n', '    // Pool and Owner minted tokens per second\n', '    uint public poolMintRate;\n', '    uint public ownerMintRate;\n', '\n', '    // Amount of Scale to be staked to the pool, staking, and mint, as calculated through their percentages\n', '    uint public poolMintAmount;\n', '    uint public stakingMintAmount;\n', '    uint public ownerMintAmount;\n', '\n', '    // Scale distribution percentages\n', '    uint public poolPercentage = 70;\n', '    uint public ownerPercentage = 5;\n', '    uint public stakingPercentage = 25;\n', '\n', '    // Last time minted for owner and pool\n', '    uint public ownerTimeLastMinted;\n', '    uint public poolTimeLastMinted;\n', '\n', '    // -- Staking -- //\n', '    // Minted tokens per second\n', '    uint public stakingMintRate;\n', '\n', '    // Total Scale currently staked\n', '    uint public totalScaleStaked;\n', '\n', '    // Mapping of the timestamp => totalStaking that is created each time an address stakes or unstakes\n', '    mapping (uint => uint) totalStakingHistory;\n', '\n', '    // Variable for staking accuracy. Set to 86400 for seconds in a day so that staking gains are based on the day an account begins staking.\n', '    uint timingVariable = 86400;\n', '\n', '    // Address staking information\n', '    struct AddressStakeData {\n', '        uint stakeBalance;\n', '        uint initialStakeTime;\n', '    }\n', '\n', '    // Track all tokens staked\n', '    mapping (address => AddressStakeData) public stakeBalances;\n', '\n', '    // -- Inflation -- //\n', '    // Inflation rate begins at 100% per year and decreases by 15% per year until it reaches 10% where it decreases by 0.5% per year\n', '    uint256 inflationRate = 1000;\n', '\n', '    // Used to manage when to inflate. Allowed to inflate once per year until the rate reaches 1%.\n', '    uint256 public lastInflationUpdate;\n', '\n', '    // -- Events -- //\n', '    // Fired when tokens are staked\n', '    event Stake(address indexed staker, uint256 value);\n', '    // Fired when tokens are unstaked\n', '    event Unstake(address indexed unstaker, uint256 stakedAmount, uint256 stakingGains);\n', '\n', '    //////////////////////////////////////////////////\n', '    /// Scale Token Functionality\n', '    //////////////////////////////////////////////////\n', '\n', '    /// @dev Scale token constructor\n', '    constructor() public {\n', '        // Assign owner\n', '        owner = msg.sender;\n', '\n', '        // Assign initial owner supply\n', '        uint _initOwnerSupply = 10000000 ether;\n', '        // Mint given to owner only one-time\n', '        bool _success = mint(msg.sender, _initOwnerSupply);\n', '        // Require minting success\n', '        require(_success);\n', '\n', '        // Set pool and owner last minted to ensure extra coins are not minted by either\n', '        ownerTimeLastMinted = now;\n', '        poolTimeLastMinted = now;\n', '\n', '        // Set minting amount for pool, staking, and owner over the course of 1 year\n', '        poolMintAmount = _initOwnerSupply.mul(poolPercentage).div(100);\n', '        ownerMintAmount = _initOwnerSupply.mul(ownerPercentage).div(100);\n', '        stakingMintAmount = _initOwnerSupply.mul(stakingPercentage).div(100);\n', '\n', '        // One year in seconds\n', '        uint _oneYearInSeconds = 31536000 ether;\n', '\n', '        // Set the rate of coins minted per second for the pool, owner, and global staking\n', '        poolMintRate = calculateFraction(poolMintAmount, _oneYearInSeconds, decimals);\n', '        ownerMintRate = calculateFraction(ownerMintAmount, _oneYearInSeconds, decimals);\n', '        stakingMintRate = calculateFraction(stakingMintAmount, _oneYearInSeconds, decimals);\n', '\n', '        // Set the last time inflation was update to now so that the next time it can be updated is 1 year from now\n', '        lastInflationUpdate = now;\n', '    }\n', '\n', '    /////////////\n', '    // Inflation\n', '    /////////////\n', '\n', '    /// @dev the inflation rate begins at 100% and decreases by 15% every year until it reaches 10%\n', '    /// at 10% the rate begins to decrease by 0.5% until it reaches 1%\n', '    function adjustInflationRate() private {\n', '\n', '\n', '      // Make sure adjustInflationRate cannot be called for at least another year\n', '      lastInflationUpdate = now;\n', '\n', '      // Decrease inflation rate by 15% each year\n', '      if (inflationRate > 100) {\n', '\n', '        inflationRate = inflationRate.sub(300);\n', '      }\n', '      // Inflation rate reaches 10%. Decrease inflation rate by 0.5% from here on out until it reaches 1%.\n', '      else if (inflationRate > 10) {\n', '\n', '        inflationRate = inflationRate.sub(5);\n', '      }\n', '\n', '      // Calculate new mint amount of Scale that should be created per year.\n', '      // Example Inflation Past Year 1 for the poolMintAmount: 16M * 0.85 * 0.7 = 9,520,000\n', '      poolMintAmount = totalSupply.mul(inflationRate).div(1000).mul(poolPercentage).div(100);\n', '      ownerMintAmount = totalSupply.mul(inflationRate).div(1000).mul(ownerPercentage).div(100);\n', '      stakingMintAmount = totalSupply.mul(inflationRate).div(1000).mul(stakingPercentage).div(100);\n', '\n', '        // Adjust Scale created per-second for each rate\n', '        poolMintRate = calculateFraction(poolMintAmount, 31536000 ether, decimals);\n', '        ownerMintRate = calculateFraction(ownerMintAmount, 31536000 ether, decimals);\n', '        stakingMintRate = calculateFraction(stakingMintAmount, 31536000 ether, decimals);\n', '    }\n', '\n', '    /// @dev anyone can call this function to update the inflation rate yearly\n', '    function updateInflationRate() public {\n', '\n', '      // Require 1 year to have passed for every inflation adjustment\n', '      require(now.sub(lastInflationUpdate) >= 31536000);\n', '\n', '      adjustInflationRate();\n', '\n', '    }\n', '\n', '    /////////////\n', '    // Staking\n', '    /////////////\n', '\n', '    /// @dev staking function which allows users to stake an amount of tokens to gain interest for up to 30 days\n', '    /// @param _stakeAmount how many tokens a user wants to stake\n', '    function stakeScale(uint _stakeAmount) external {\n', '\n', '        // Require that tokens are staked successfully\n', '        require(stake(msg.sender, _stakeAmount));\n', '    }\n', '\n', '    /// @dev stake for a seperate address\n', '    /// @param _stakeAmount how many tokens a user wants to stake\n', '    function stakeFor(address _user, uint _stakeAmount) external {\n', '\n', '      // You can only stake tokens for another user if they have not already staked tokens\n', '      require(stakeBalances[_user].stakeBalance == 0);\n', '\n', '      // Transfer Scale from to the user\n', '      transfer( _user, _stakeAmount);\n', '\n', '      // Stake for the user\n', '      stake(_user, _stakeAmount);\n', '    }\n', '\n', "    /// @dev stake function reduces the user's total available balance and adds it to their staking balance\n", '    /// @param _value how many tokens a user wants to stake\n', '    function stake(address _user, uint256 _value) private returns (bool success) {\n', '\n', '        // You can only stake as many tokens as you have\n', '        require(_value <= balances[_user]);\n', '        // You can only stake tokens if you have not already staked tokens\n', '        require(stakeBalances[_user].stakeBalance == 0);\n', '\n', '        // Subtract stake amount from regular token balance\n', '        balances[_user] = balances[_user].sub(_value);\n', '\n', '        // Add stake amount to staked balance\n', '        stakeBalances[_user].stakeBalance = _value;\n', '\n', '        // Increment the staking staked tokens value\n', '        totalScaleStaked = totalScaleStaked.add(_value);\n', '\n', '        // Save the time that the stake started\n', '        stakeBalances[_user].initialStakeTime = now.div(timingVariable);\n', '\n', '        // Set the new staking history\n', '        setTotalStakingHistory();\n', '\n', '        // Fire an event to tell the world of the newly staked tokens\n', '        emit Stake(_user, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev returns how much Scale a user has earned so far\n', '    /// @param _now is passed in to allow for a gas-free analysis\n', '    /// @return staking gains based on the amount of time passed since staking began\n', '    function getStakingGains(uint _now) view public returns (uint) {\n', '\n', '        if (stakeBalances[msg.sender].stakeBalance == 0) {\n', '\n', '          return 0;\n', '        }\n', '\n', '        return calculateStakeGains(_now);\n', '    }\n', '\n', '    /// @dev allows users to reclaim any staked tokens\n', '    /// @return bool on success\n', '    function unstake() external returns (bool) {\n', '\n', '        // Require that there was some amount vested\n', '        require(stakeBalances[msg.sender].stakeBalance > 0);\n', '\n', '        // Require that at least 7 timing variables have passed (days)\n', '        require(now.div(timingVariable).sub(stakeBalances[msg.sender].initialStakeTime) >= 7);\n', '\n', '        // Calculate tokens to mint\n', '        uint _tokensToMint = calculateStakeGains(now);\n', '\n', '        balances[msg.sender] = balances[msg.sender].add(stakeBalances[msg.sender].stakeBalance);\n', '\n', '        // Subtract stake balance from totalScaleStaked\n', '        totalScaleStaked = totalScaleStaked.sub(stakeBalances[msg.sender].stakeBalance);\n', '\n', '        // Mint the new tokens to the sender\n', '        mint(msg.sender, _tokensToMint);\n', '\n', '        // Scale unstaked event\n', '        emit Unstake(msg.sender, stakeBalances[msg.sender].stakeBalance, _tokensToMint);\n', '\n', '        // Clear out stored data from mapping\n', '        stakeBalances[msg.sender].stakeBalance = 0;\n', '        stakeBalances[msg.sender].initialStakeTime = 0;\n', '\n', '        // Set this every time someone adjusts the totalScaleStaking amount\n', '        setTotalStakingHistory();\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev Helper function to claimStake that modularizes the minting via staking calculation\n', '    /// @param _now when the user stopped staking. Passed in as a variable to allow for checking without using gas from the getStakingGains function.\n', '    /// @return uint for total coins to be minted\n', '    function calculateStakeGains(uint _now) view private returns (uint mintTotal)  {\n', '\n', '      uint _nowAsTimingVariable = _now.div(timingVariable);    // Today as a unique value in unix time\n', '      uint _initialStakeTimeInVariable = stakeBalances[msg.sender].initialStakeTime; // When the user started staking as a unique day in unix time\n', '      uint _timePassedSinceStakeInVariable = _nowAsTimingVariable.sub(_initialStakeTimeInVariable); // How much time has passed, in days, since the user started staking.\n', "      uint _stakePercentages = 0; // Keeps an additive track of the user's staking percentages over time\n", '      uint _tokensToMint = 0; // How many new Scale tokens to create\n', '      uint _lastUsedVariable;  // Last day the totalScaleStaked was updated\n', '\n', "      // Average this msg.sender's relative percentage ownership of totalScaleStaked throughout each day since they started staking\n", '      for (uint i = _initialStakeTimeInVariable; i < _nowAsTimingVariable; i++) {\n', '\n', '        // If the day exists add it to the percentages\n', '        if (totalStakingHistory[i] != 0) {\n', '\n', '           // If the day does exist add it to the number to be later averaged as a total average percentage of total staking\n', '          _stakePercentages = _stakePercentages.add(calculateFraction(stakeBalances[msg.sender].stakeBalance, totalStakingHistory[i], decimals));\n', '\n', '          // Set this as the last day someone staked\n', '          _lastUsedVariable = totalStakingHistory[i];\n', '        }\n', '        else {\n', '\n', '          // Use the last day found in the totalStakingHistory mapping\n', '          _stakePercentages = _stakePercentages.add(calculateFraction(stakeBalances[msg.sender].stakeBalance, _lastUsedVariable, decimals));\n', '        }\n', '\n', '      }\n', '\n', "        // Get the account's average percentage staked of the total stake over the course of all days they have been staking\n", '        uint _stakePercentageAverage = calculateFraction(_stakePercentages, _timePassedSinceStakeInVariable, 0);\n', '\n', "        // Calculate this account's mint rate per second while staking\n", '        uint _finalMintRate = stakingMintRate.mul(_stakePercentageAverage);\n', '\n', '        // Account for 18 decimals when calculating the amount of tokens to mint\n', '        _finalMintRate = _finalMintRate.div(1 ether);\n', '\n', '        // Calculate total tokens to be minted. Multiply by timingVariable to convert back to seconds.\n', '        if (_timePassedSinceStakeInVariable >= 365) {\n', '\n', "          // Tokens were staked for the maximum amount of time, one year. Give them one year's worth of tokens. ( this limit is placed to avoid gas limits)\n", '          _tokensToMint = calculateMintTotal(timingVariable.mul(365), _finalMintRate);\n', '        }\n', '        else {\n', '\n', '          // Tokens were staked for less than the maximum amount of time\n', '          _tokensToMint = calculateMintTotal(_timePassedSinceStakeInVariable.mul(timingVariable), _finalMintRate);\n', '        }\n', '\n', '        return  _tokensToMint;\n', '    }\n', '\n', '    /// @dev set the new totalStakingHistory mapping to the current timestamp and totalScaleStaked\n', '    function setTotalStakingHistory() private {\n', '\n', "      // Get now in terms of the variable staking accuracy (days in Scale's case)\n", '      uint _nowAsTimingVariable = now.div(timingVariable);\n', '\n', '      // Set the totalStakingHistory as a timestamp of the totalScaleStaked today\n', '      totalStakingHistory[_nowAsTimingVariable] = totalScaleStaked;\n', '    }\n', '\n', '    /// @dev Allows user to check their staked balance\n', '    /// @return staked balance\n', '    function getStakedBalance() view external returns (uint stakedBalance) {\n', '\n', '        return stakeBalances[msg.sender].stakeBalance;\n', '    }\n', '\n', '    /////////////\n', '    // Scale Owner Claiming\n', '    /////////////\n', '\n', '    /// @dev allows contract owner to claim their mint\n', '    function ownerClaim() external onlyOwner {\n', '\n', '        require(now > ownerTimeLastMinted);\n', '\n', '        uint _timePassedSinceLastMint; // The amount of time passed since the owner claimed in seconds\n', '        uint _tokenMintCount; // The amount of new tokens to mint\n', '        bool _mintingSuccess; // The success of minting the new Scale tokens\n', '\n', '        // Calculate the number of seconds that have passed since the owner last took a claim\n', '        _timePassedSinceLastMint = now.sub(ownerTimeLastMinted);\n', '\n', '        assert(_timePassedSinceLastMint > 0);\n', '\n', '        // Determine the token mint amount, determined from the number of seconds passed and the ownerMintRate\n', '        _tokenMintCount = calculateMintTotal(_timePassedSinceLastMint, ownerMintRate);\n', '\n', "        // Mint the owner's tokens; this also increases totalSupply\n", '        _mintingSuccess = mint(msg.sender, _tokenMintCount);\n', '\n', '        require(_mintingSuccess);\n', '\n', '        // New minting was a success. Set last time minted to current block.timestamp (now)\n', '        ownerTimeLastMinted = now;\n', '    }\n', '\n', '    ////////////////////////////////\n', '    // Scale Pool Distribution\n', '    ////////////////////////////////\n', '\n', '    /// @dev anyone can call this function that mints Scale to the pool dedicated to Scale distribution to rewards pool\n', '    function poolIssue() public {\n', '\n', '        // Do not allow tokens to be minted to the pool until the pool is set\n', '        require(pool != address(0));\n', '\n', '        // Make sure time has passed since last minted to pool\n', '        require(now > poolTimeLastMinted);\n', '        require(pool != address(0));\n', '\n', '        uint _timePassedSinceLastMint; // The amount of time passed since the pool claimed in seconds\n', '        uint _tokenMintCount; // The amount of new tokens to mint\n', '        bool _mintingSuccess; // The success of minting the new Scale tokens\n', '\n', '        // Calculate the number of seconds that have passed since the owner last took a claim\n', '        _timePassedSinceLastMint = now.sub(poolTimeLastMinted);\n', '\n', '        assert(_timePassedSinceLastMint > 0);\n', '\n', '        // Determine the token mint amount, determined from the number of seconds passed and the ownerMintRate\n', '        _tokenMintCount = calculateMintTotal(_timePassedSinceLastMint, poolMintRate);\n', '\n', "        // Mint the owner's tokens; this also increases totalSupply\n", '        _mintingSuccess = mint(pool, _tokenMintCount);\n', '\n', '        require(_mintingSuccess);\n', '\n', '        // New minting was a success! Set last time minted to current block.timestamp (now)\n', '        poolTimeLastMinted = now;\n', '    }\n', '\n', '    /// @dev sets the address for the rewards pool\n', '    /// @param _newAddress pool Address\n', '    function setPool(address _newAddress) public onlyOwner {\n', '\n', '        pool = _newAddress;\n', '    }\n', '\n', '    ////////////////////////////////\n', '    // Helper Functions\n', '    ////////////////////////////////\n', '\n', '    /// @dev calculateFraction allows us to better handle the Solidity ugliness of not having decimals as a native type\n', '    /// @param _numerator is the top part of the fraction we are calculating\n', '    /// @param _denominator is the bottom part of the fraction we are calculating\n', '    /// @param _precision tells the function how many significant digits to calculate out to\n', '    /// @return quotient returns the result of our fraction calculation\n', '    function calculateFraction(uint _numerator, uint _denominator, uint _precision) pure private returns(uint quotient) {\n', '        // Take passed value and expand it to the required precision\n', '        _numerator = _numerator.mul(10 ** (_precision + 1));\n', '        // Handle last-digit rounding\n', '        uint _quotient = ((_numerator.div(_denominator)) + 5) / 10;\n', '        return (_quotient);\n', '    }\n', '\n', '    /// @dev Determines the amount of Scale to create based on the number of seconds that have passed\n', '    /// @param _timeInSeconds is the time passed in seconds to mint for\n', '    /// @return uint with the calculated number of new tokens to mint\n', '    function calculateMintTotal(uint _timeInSeconds, uint _mintRate) pure private returns(uint mintAmount) {\n', '        // Calculates the amount of tokens to mint based upon the number of seconds passed\n', '        return(_timeInSeconds.mul(_mintRate));\n', '    }\n', '\n', '}']
