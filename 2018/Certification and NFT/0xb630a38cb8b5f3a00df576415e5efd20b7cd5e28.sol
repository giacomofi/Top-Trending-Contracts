['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '// The NOTES ERC20 Token. There is a delay before addresses that are not added to the "activeGroup" can transfer tokens. \n', '// That delay ends when admin calls the "activate()" function.\n', '// Otherwise it is a generic ERC20 standard token, based originally on the BAT token\n', '// https://etherscan.io/address/0x0d8775f648430679a709e98d2b0cb6250d2887ef#code\n', '\n', '// The standard ERC20 Token interface\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// NOTES Token Implementation - transfers are prohibited unless switched on by admin\n', 'contract Notes is Token {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    //// CONSTANTS\n', '\n', '    // Number of NOTES (800 million)\n', '    uint256 public constant TOTAL_SUPPLY = 2000 * (10**6) * 10**uint256(decimals);\n', '\n', '    // Token Metadata\n', '    string public constant name = "NOTES";\n', '    string public constant symbol = "NOTES";\n', '    uint8 public constant decimals = 18;\n', '    string public version = "1.0";\n', '\n', '    //// PROPERTIES\n', '\n', '    address admin;\n', '    bool public activated = false;\n', '    mapping (address => bool) public activeGroup;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    //// MODIFIERS\n', '\n', '    modifier active()\n', '    {\n', '        require(activated || activeGroup[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin()\n', '    {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    //// CONSTRUCTOR\n', '\n', '    function Notes(address fund, address _admin)\n', '    {\n', '        admin = _admin;\n', '        totalSupply = TOTAL_SUPPLY;\n', '        balances[fund] = TOTAL_SUPPLY;    // Deposit all to fund\n', '        Transfer(address(this), fund, TOTAL_SUPPLY);\n', '        activeGroup[fund] = true;  // Allow the fund to transfer\n', '    }\n', '\n', '    //// ADMIN FUNCTIONS\n', '\n', '    function addToActiveGroup(address a) onlyAdmin {\n', '        activeGroup[a] = true;\n', '    }\n', '\n', '    function activate() onlyAdmin {\n', '        activated = true;\n', '    }\n', '\n', '    //// TOKEN FUNCTIONS\n', '\n', '    function transfer(address _to, uint256 _value) active returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) active returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balances[_from] >= _value);\n', '        require(allowed[_from][msg.sender] >= _value && _value > 0);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) active returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '// The Choon smart contract. A state channel on the streaming service distributes cryptographically signed vouchers to artists on demand.\n', '// Those artists can then cash those vouchers into NOTES via this contract.\n', '// A solo artist could cash the NOTES directly to an address, or a band could cash them to a Smart Record Contract.\n', '// The Smart Record contract would then distribute the NOTES to the individual artists, according to its terms.\n', '\n', 'contract Choon  {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // Events\n', '    event VoucherCashed(address indexed to, uint256 value);\n', '\n', '    // Notes Contract\n', '    address notesContract;\n', '\n', '    // The address of the state channel authority that signs the vouchers\n', '    address choonAuthority;\n', '\n', '    // The contract admin\n', '    address admin;\n', '\n', '    // The total Notes payments to each address\n', '    mapping(address => uint256) public payments;\n', '\n', '    // Used to kill the contract in case it needs to be replaced with a new one\n', '    bool active = true;\n', '\n', '    // Modifiers\n', '    modifier onlyAdmin()\n', '    {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier isActive()\n', '    {\n', '        require(active);\n', '        _;\n', '    }\n', '\n', '    // Constructor\n', '    function Choon(address _notesContract, address _choonAuthority, address _admin)\n', '    {\n', '        notesContract = _notesContract;\n', '        choonAuthority = _choonAuthority;\n', '        admin = _admin;\n', '    }\n', '\n', '    function setActive(bool _active) onlyAdmin external {\n', '        active = _active;\n', '    }\n', '\n', '    function setAuthority(address _authority) onlyAdmin external {\n', '        choonAuthority = _authority;\n', '    }\n', '\n', '    function shutdown() onlyAdmin external {\n', '        active = false;\n', '        // Transfer all remaining Notes to admin\n', '        uint256 balance = Notes(notesContract).balanceOf(address(this));\n', '        Notes(notesContract).transfer(admin, balance);\n', '    }\n', '\n', '    /// @dev Remit a voucher to Choon to get paid Notes\n', '    // Note that the voucher always updates the *total* lifetime balance of the beneficiary.\n', '    // This contract tracks what has been paid out so far, so it then knows how much to pay.\n', '    // This prevents double-spending of vouchers.\n', '    function remit(address receiver, uint256 balance, bytes sig) external isActive {\n', '        // Ensure that the voucher sig is valid and from the choonAuthority\n', '        require(verifyBalanceProof(receiver, balance, sig));\n', '        // Compute the NOTES owed due to this voucher and pay the beneficiary (receiver).\n', '        uint priorBalance = payments[receiver];\n', '        uint owed = balance.sub(priorBalance);\n', '        require(owed > 0);\n', '        payments[receiver] = balance;\n', '        Notes(notesContract).transfer(receiver, owed);\n', '        VoucherCashed(receiver, owed);\n', '    }\n', '\n', '    function verifyBalanceProof(address receiver, uint256 balance, bytes sig) private returns (bool) {\n', '        bytes memory prefix = "\\x19Choon:\\n32";\n', '        bytes32 message_hash = keccak256(prefix, receiver, balance);\n', '        address signer = ecverify(message_hash, sig);\n', '        return (signer == choonAuthority);\n', '    }\n', '\n', '    // ECVerify function, from &#181;Raiden and others\n', '    function ecverify(bytes32 hash, bytes signature) private returns (address signature_address) {\n', '        require(signature.length == 65);\n', '\n', '        bytes32 r;\n', '        bytes32 s;\n', '        uint8 v;\n', '\n', '        // The signature format is a compact form of:\n', '        //   {bytes32 r}{bytes32 s}{uint8 v}\n', '        // Compact means, uint8 is not padded to 32 bytes.\n', '        assembly {\n', '            r := mload(add(signature, 32))\n', '            s := mload(add(signature, 64))\n', '\n', '        // Here we are loading the last 32 bytes, including 31 bytes of &#39;s&#39;.\n', '            v := byte(0, mload(add(signature, 96)))\n', '        }\n', '\n', '        // Version of signature should be 27 or 28, but 0 and 1 are also possible\n', '        if (v < 27) {\n', '            v += 27;\n', '        }\n', '\n', '        require(v == 27 || v == 28);\n', '\n', '        signature_address = ecrecover(hash, v, r, s);\n', '\n', '        // ecrecover returns zero on error\n', '        require(signature_address != 0x0);\n', '\n', '        return signature_address;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '// The NOTES ERC20 Token. There is a delay before addresses that are not added to the "activeGroup" can transfer tokens. \n', '// That delay ends when admin calls the "activate()" function.\n', '// Otherwise it is a generic ERC20 standard token, based originally on the BAT token\n', '// https://etherscan.io/address/0x0d8775f648430679a709e98d2b0cb6250d2887ef#code\n', '\n', '// The standard ERC20 Token interface\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// NOTES Token Implementation - transfers are prohibited unless switched on by admin\n', 'contract Notes is Token {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    //// CONSTANTS\n', '\n', '    // Number of NOTES (800 million)\n', '    uint256 public constant TOTAL_SUPPLY = 2000 * (10**6) * 10**uint256(decimals);\n', '\n', '    // Token Metadata\n', '    string public constant name = "NOTES";\n', '    string public constant symbol = "NOTES";\n', '    uint8 public constant decimals = 18;\n', '    string public version = "1.0";\n', '\n', '    //// PROPERTIES\n', '\n', '    address admin;\n', '    bool public activated = false;\n', '    mapping (address => bool) public activeGroup;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    //// MODIFIERS\n', '\n', '    modifier active()\n', '    {\n', '        require(activated || activeGroup[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin()\n', '    {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    //// CONSTRUCTOR\n', '\n', '    function Notes(address fund, address _admin)\n', '    {\n', '        admin = _admin;\n', '        totalSupply = TOTAL_SUPPLY;\n', '        balances[fund] = TOTAL_SUPPLY;    // Deposit all to fund\n', '        Transfer(address(this), fund, TOTAL_SUPPLY);\n', '        activeGroup[fund] = true;  // Allow the fund to transfer\n', '    }\n', '\n', '    //// ADMIN FUNCTIONS\n', '\n', '    function addToActiveGroup(address a) onlyAdmin {\n', '        activeGroup[a] = true;\n', '    }\n', '\n', '    function activate() onlyAdmin {\n', '        activated = true;\n', '    }\n', '\n', '    //// TOKEN FUNCTIONS\n', '\n', '    function transfer(address _to, uint256 _value) active returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) active returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balances[_from] >= _value);\n', '        require(allowed[_from][msg.sender] >= _value && _value > 0);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) active returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '// The Choon smart contract. A state channel on the streaming service distributes cryptographically signed vouchers to artists on demand.\n', '// Those artists can then cash those vouchers into NOTES via this contract.\n', '// A solo artist could cash the NOTES directly to an address, or a band could cash them to a Smart Record Contract.\n', '// The Smart Record contract would then distribute the NOTES to the individual artists, according to its terms.\n', '\n', 'contract Choon  {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // Events\n', '    event VoucherCashed(address indexed to, uint256 value);\n', '\n', '    // Notes Contract\n', '    address notesContract;\n', '\n', '    // The address of the state channel authority that signs the vouchers\n', '    address choonAuthority;\n', '\n', '    // The contract admin\n', '    address admin;\n', '\n', '    // The total Notes payments to each address\n', '    mapping(address => uint256) public payments;\n', '\n', '    // Used to kill the contract in case it needs to be replaced with a new one\n', '    bool active = true;\n', '\n', '    // Modifiers\n', '    modifier onlyAdmin()\n', '    {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier isActive()\n', '    {\n', '        require(active);\n', '        _;\n', '    }\n', '\n', '    // Constructor\n', '    function Choon(address _notesContract, address _choonAuthority, address _admin)\n', '    {\n', '        notesContract = _notesContract;\n', '        choonAuthority = _choonAuthority;\n', '        admin = _admin;\n', '    }\n', '\n', '    function setActive(bool _active) onlyAdmin external {\n', '        active = _active;\n', '    }\n', '\n', '    function setAuthority(address _authority) onlyAdmin external {\n', '        choonAuthority = _authority;\n', '    }\n', '\n', '    function shutdown() onlyAdmin external {\n', '        active = false;\n', '        // Transfer all remaining Notes to admin\n', '        uint256 balance = Notes(notesContract).balanceOf(address(this));\n', '        Notes(notesContract).transfer(admin, balance);\n', '    }\n', '\n', '    /// @dev Remit a voucher to Choon to get paid Notes\n', '    // Note that the voucher always updates the *total* lifetime balance of the beneficiary.\n', '    // This contract tracks what has been paid out so far, so it then knows how much to pay.\n', '    // This prevents double-spending of vouchers.\n', '    function remit(address receiver, uint256 balance, bytes sig) external isActive {\n', '        // Ensure that the voucher sig is valid and from the choonAuthority\n', '        require(verifyBalanceProof(receiver, balance, sig));\n', '        // Compute the NOTES owed due to this voucher and pay the beneficiary (receiver).\n', '        uint priorBalance = payments[receiver];\n', '        uint owed = balance.sub(priorBalance);\n', '        require(owed > 0);\n', '        payments[receiver] = balance;\n', '        Notes(notesContract).transfer(receiver, owed);\n', '        VoucherCashed(receiver, owed);\n', '    }\n', '\n', '    function verifyBalanceProof(address receiver, uint256 balance, bytes sig) private returns (bool) {\n', '        bytes memory prefix = "\\x19Choon:\\n32";\n', '        bytes32 message_hash = keccak256(prefix, receiver, balance);\n', '        address signer = ecverify(message_hash, sig);\n', '        return (signer == choonAuthority);\n', '    }\n', '\n', '    // ECVerify function, from µRaiden and others\n', '    function ecverify(bytes32 hash, bytes signature) private returns (address signature_address) {\n', '        require(signature.length == 65);\n', '\n', '        bytes32 r;\n', '        bytes32 s;\n', '        uint8 v;\n', '\n', '        // The signature format is a compact form of:\n', '        //   {bytes32 r}{bytes32 s}{uint8 v}\n', '        // Compact means, uint8 is not padded to 32 bytes.\n', '        assembly {\n', '            r := mload(add(signature, 32))\n', '            s := mload(add(signature, 64))\n', '\n', "        // Here we are loading the last 32 bytes, including 31 bytes of 's'.\n", '            v := byte(0, mload(add(signature, 96)))\n', '        }\n', '\n', '        // Version of signature should be 27 or 28, but 0 and 1 are also possible\n', '        if (v < 27) {\n', '            v += 27;\n', '        }\n', '\n', '        require(v == 27 || v == 28);\n', '\n', '        signature_address = ecrecover(hash, v, r, s);\n', '\n', '        // ecrecover returns zero on error\n', '        require(signature_address != 0x0);\n', '\n', '        return signature_address;\n', '    }\n', '\n', '}']
