['pragma solidity ^0.4.23;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    require(c / a == b, "Overflow - Multiplication");\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a, "Underflow - Subtraction");\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    require(c >= a, "Overflow - Addition");\n', '    return c;\n', '  }\n', '}\n', '\n', 'library Contract {\n', '\n', '  using SafeMath for uint;\n', '\n', '  // Modifiers: //\n', '\n', '  // Runs two functions before and after a function -\n', '  modifier conditions(function () pure first, function () pure last) {\n', '    first();\n', '    _;\n', '    last();\n', '  }\n', '\n', '  bytes32 internal constant EXEC_PERMISSIONS = keccak256(&#39;script_exec_permissions&#39;);\n', '\n', '  // Sets up contract execution - reads execution id and sender from storage and\n', '  // places in memory, creating getters. Calling this function should be the first\n', '  // action an application does as part of execution, as it sets up memory for\n', '  // execution. Additionally, application functions in the main file should be\n', '  // external, so that memory is not touched prior to calling this function.\n', '  // The 3rd slot allocated will hold a pointer to a storage buffer, which will\n', '  // be reverted to abstract storage to store data, emit events, and forward\n', '  // wei on behalf of the application.\n', '  function authorize(address _script_exec) internal view {\n', '    // Initialize memory\n', '    initialize();\n', '\n', '    // Check that the sender is authorized as a script exec contract for this exec id\n', '    bytes32 perms = EXEC_PERMISSIONS;\n', '    bool authorized;\n', '    assembly {\n', '      // Place the script exec address at 0, and the exec permissions seed after it\n', '      mstore(0, _script_exec)\n', '      mstore(0x20, perms)\n', '      // Hash the resulting 0x34 bytes, and place back into memory at 0\n', '      mstore(0, keccak256(0x0c, 0x34))\n', '      // Place the exec id after the hash -\n', '      mstore(0x20, mload(0x80))\n', '      // Hash the previous hash with the execution id, and check the result\n', '      authorized := sload(keccak256(0, 0x40))\n', '    }\n', '    if (!authorized)\n', '      revert("Sender is not authorized as a script exec address");\n', '  }\n', '\n', '  // Sets up contract execution when initializing an instance of the application\n', '  // First, reads execution id and sender from storage (execution id should be 0xDEAD),\n', '  // then places them in memory, creating getters. Calling this function should be the first\n', '  // action an application does as part of execution, as it sets up memory for\n', '  // execution. Additionally, application functions in the main file should be\n', '  // external, so that memory is not touched prior to calling this function.\n', '  // The 3rd slot allocated will hold a pointer to a storage buffer, which will\n', '  // be reverted to abstract storage to store data, emit events, and forward\n', '  // wei on behalf of the application.\n', '  function initialize() internal view {\n', '    // No memory should have been allocated yet - expect the free memory pointer\n', '    // to point to 0x80 - and throw if it does not\n', '    require(freeMem() == 0x80, "Memory allocated prior to execution");\n', '    // Next, set up memory for execution\n', '    assembly {\n', '      mstore(0x80, sload(0))     // Execution id, read from storage\n', '      mstore(0xa0, sload(1))     // Original sender address, read from storage\n', '      mstore(0xc0, 0)            // Pointer to storage buffer\n', '      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n', '      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n', '      mstore(0x120, 0)           // Number of storage slots written to in buffer\n', '      mstore(0x140, 0)           // Number of events pushed to buffer\n', '      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n', '\n', '      // Update free memory pointer -\n', '      mstore(0x40, 0x180)\n', '    }\n', '    // Ensure that the sender and execution id returned from storage are expected values -\n', '    assert(execID() != bytes32(0) && sender() != address(0));\n', '  }\n', '\n', '  // Calls the passed-in function, performing a memory state check before and after the check\n', '  // is executed.\n', '  function checks(function () view _check) conditions(validState, validState) internal view {\n', '    _check();\n', '  }\n', '\n', '  // Calls the passed-in function, performing a memory state check before and after the check\n', '  // is executed.\n', '  function checks(function () pure _check) conditions(validState, validState) internal pure {\n', '    _check();\n', '  }\n', '\n', '  // Ensures execution completed successfully, and reverts the created storage buffer\n', '  // back to the sender.\n', '  function commit() conditions(validState, none) internal pure {\n', '    // Check value of storage buffer pointer - should be at least 0x180\n', '    bytes32 ptr = buffPtr();\n', '    require(ptr >= 0x180, "Invalid buffer pointer");\n', '\n', '    assembly {\n', '      // Get the size of the buffer\n', '      let size := mload(add(0x20, ptr))\n', '      mstore(ptr, 0x20) // Place dynamic data offset before buffer\n', '      // Revert to storage\n', '      revert(ptr, add(0x40, size))\n', '    }\n', '  }\n', '\n', '  // Helpers: //\n', '\n', '  // Checks to ensure the application was correctly executed -\n', '  function validState() private pure {\n', '    if (freeMem() < 0x180)\n', '      revert(&#39;Expected Contract.execute()&#39;);\n', '\n', '    if (buffPtr() != 0 && buffPtr() < 0x180)\n', '      revert(&#39;Invalid buffer pointer&#39;);\n', '\n', '    assert(execID() != bytes32(0) && sender() != address(0));\n', '  }\n', '\n', '  // Returns a pointer to the execution storage buffer -\n', '  function buffPtr() private pure returns (bytes32 ptr) {\n', '    assembly { ptr := mload(0xc0) }\n', '  }\n', '\n', '  // Returns the location pointed to by the free memory pointer -\n', '  function freeMem() private pure returns (bytes32 ptr) {\n', '    assembly { ptr := mload(0x40) }\n', '  }\n', '\n', '  // Returns the current storage action\n', '  function currentAction() private pure returns (bytes4 action) {\n', '    if (buffPtr() == bytes32(0))\n', '      return bytes4(0);\n', '\n', '    assembly { action := mload(0xe0) }\n', '  }\n', '\n', '  // If the current action is not storing, reverts\n', '  function isStoring() private pure {\n', '    if (currentAction() != STORES)\n', '      revert(&#39;Invalid current action - expected STORES&#39;);\n', '  }\n', '\n', '  // If the current action is not emitting, reverts\n', '  function isEmitting() private pure {\n', '    if (currentAction() != EMITS)\n', '      revert(&#39;Invalid current action - expected EMITS&#39;);\n', '  }\n', '\n', '  // If the current action is not paying, reverts\n', '  function isPaying() private pure {\n', '    if (currentAction() != PAYS)\n', '      revert(&#39;Invalid current action - expected PAYS&#39;);\n', '  }\n', '\n', '  // Initializes a storage buffer in memory -\n', '  function startBuffer() private pure {\n', '    assembly {\n', '      // Get a pointer to free memory, and place at 0xc0 (storage buffer pointer)\n', '      let ptr := msize()\n', '      mstore(0xc0, ptr)\n', '      // Clear bytes at pointer -\n', '      mstore(ptr, 0)            // temp ptr\n', '      mstore(add(0x20, ptr), 0) // buffer length\n', '      // Update free memory pointer -\n', '      mstore(0x40, add(0x40, ptr))\n', '      // Set expected next function to &#39;NONE&#39; -\n', '      mstore(0x100, 1)\n', '    }\n', '  }\n', '\n', '  // Checks whether or not it is valid to create a STORES action request -\n', '  function validStoreBuff() private pure {\n', '    // Get pointer to current buffer - if zero, create a new buffer -\n', '    if (buffPtr() == bytes32(0))\n', '      startBuffer();\n', '\n', '    // Ensure that the current action is not &#39;storing&#39;, and that the buffer has not already\n', '    // completed a STORES action -\n', '    if (stored() != 0 || currentAction() == STORES)\n', '      revert(&#39;Duplicate request - stores&#39;);\n', '  }\n', '\n', '  // Checks whether or not it is valid to create an EMITS action request -\n', '  function validEmitBuff() private pure {\n', '    // Get pointer to current buffer - if zero, create a new buffer -\n', '    if (buffPtr() == bytes32(0))\n', '      startBuffer();\n', '\n', '    // Ensure that the current action is not &#39;emitting&#39;, and that the buffer has not already\n', '    // completed an EMITS action -\n', '    if (emitted() != 0 || currentAction() == EMITS)\n', '      revert(&#39;Duplicate request - emits&#39;);\n', '  }\n', '\n', '  // Checks whether or not it is valid to create a PAYS action request -\n', '  function validPayBuff() private pure {\n', '    // Get pointer to current buffer - if zero, create a new buffer -\n', '    if (buffPtr() == bytes32(0))\n', '      startBuffer();\n', '\n', '    // Ensure that the current action is not &#39;paying&#39;, and that the buffer has not already\n', '    // completed an PAYS action -\n', '    if (paid() != 0 || currentAction() == PAYS)\n', '      revert(&#39;Duplicate request - pays&#39;);\n', '  }\n', '\n', '  // Placeholder function when no pre or post condition for a function is needed\n', '  function none() private pure { }\n', '\n', '  // Runtime getters: //\n', '\n', '  // Returns the execution id from memory -\n', '  function execID() internal pure returns (bytes32 exec_id) {\n', '    assembly { exec_id := mload(0x80) }\n', '    require(exec_id != bytes32(0), "Execution id overwritten, or not read");\n', '  }\n', '\n', '  // Returns the original sender from memory -\n', '  function sender() internal pure returns (address addr) {\n', '    assembly { addr := mload(0xa0) }\n', '    require(addr != address(0), "Sender address overwritten, or not read");\n', '  }\n', '\n', '  // Reading from storage: //\n', '\n', '  // Reads from storage, resolving the passed-in location to its true location in storage\n', '  // by hashing with the exec id. Returns the data read from that location\n', '  function read(bytes32 _location) internal view returns (bytes32 data) {\n', '    data = keccak256(_location, execID());\n', '    assembly { data := sload(data) }\n', '  }\n', '\n', '  // Storing data, emitting events, and forwarding payments: //\n', '\n', '  bytes4 internal constant EMITS = bytes4(keccak256(&#39;Emit((bytes32[],bytes)[])&#39;));\n', '  bytes4 internal constant STORES = bytes4(keccak256(&#39;Store(bytes32[])&#39;));\n', '  bytes4 internal constant PAYS = bytes4(keccak256(&#39;Pay(bytes32[])&#39;));\n', '  bytes4 internal constant THROWS = bytes4(keccak256(&#39;Error(string)&#39;));\n', '\n', '  // Function enums -\n', '  enum NextFunction {\n', '    INVALID, NONE, STORE_DEST, VAL_SET, VAL_INC, VAL_DEC, EMIT_LOG, PAY_DEST, PAY_AMT\n', '  }\n', '\n', '  // Checks that a call pushing a storage destination to the buffer is expected and valid\n', '  function validStoreDest() private pure {\n', '    // Ensure that the next function expected pushes a storage destination -\n', '    if (expected() != NextFunction.STORE_DEST)\n', '      revert(&#39;Unexpected function order - expected storage destination to be pushed&#39;);\n', '\n', '    // Ensure that the current buffer is pushing STORES actions -\n', '    isStoring();\n', '  }\n', '\n', '  // Checks that a call pushing a storage value to the buffer is expected and valid\n', '  function validStoreVal() private pure {\n', '    // Ensure that the next function expected pushes a storage value -\n', '    if (\n', '      expected() != NextFunction.VAL_SET &&\n', '      expected() != NextFunction.VAL_INC &&\n', '      expected() != NextFunction.VAL_DEC\n', '    ) revert(&#39;Unexpected function order - expected storage value to be pushed&#39;);\n', '\n', '    // Ensure that the current buffer is pushing STORES actions -\n', '    isStoring();\n', '  }\n', '\n', '  // Checks that a call pushing a payment destination to the buffer is expected and valid\n', '  function validPayDest() private pure {\n', '    // Ensure that the next function expected pushes a payment destination -\n', '    if (expected() != NextFunction.PAY_DEST)\n', '      revert(&#39;Unexpected function order - expected payment destination to be pushed&#39;);\n', '\n', '    // Ensure that the current buffer is pushing PAYS actions -\n', '    isPaying();\n', '  }\n', '\n', '  // Checks that a call pushing a payment amount to the buffer is expected and valid\n', '  function validPayAmt() private pure {\n', '    // Ensure that the next function expected pushes a payment amount -\n', '    if (expected() != NextFunction.PAY_AMT)\n', '      revert(&#39;Unexpected function order - expected payment amount to be pushed&#39;);\n', '\n', '    // Ensure that the current buffer is pushing PAYS actions -\n', '    isPaying();\n', '  }\n', '\n', '  // Checks that a call pushing an event to the buffer is expected and valid\n', '  function validEvent() private pure {\n', '    // Ensure that the next function expected pushes an event -\n', '    if (expected() != NextFunction.EMIT_LOG)\n', '      revert(&#39;Unexpected function order - expected event to be pushed&#39;);\n', '\n', '    // Ensure that the current buffer is pushing EMITS actions -\n', '    isEmitting();\n', '  }\n', '\n', '  // Begins creating a storage buffer - values and locations pushed will be committed\n', '  // to storage at the end of execution\n', '  function storing() conditions(validStoreBuff, isStoring) internal pure {\n', '    bytes4 action_req = STORES;\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push requestor to the end of buffer, as well as to the &#39;current action&#39; slot -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n', '      // Push &#39;0&#39; to the end of the 4 bytes just pushed - this will be the length of the STORES action\n', '      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n', '      // Increment buffer length - 0x24 plus the previous length\n', '      mstore(ptr, add(0x24, mload(ptr)))\n', '      // Set the current action being executed (STORES) -\n', '      mstore(0xe0, action_req)\n', '      // Set the expected next function - STORE_DEST\n', '      mstore(0x100, 2)\n', '      // Set a pointer to the length of the current request within the buffer\n', '      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Sets a passed in location to a value passed in via &#39;to&#39;\n', '  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage destination to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - VAL_SET\n', '      mstore(0x100, 3)\n', '      // Increment STORES action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of storage slots pushed to -\n', '      mstore(0x120, add(1, mload(0x120)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '    return _field;\n', '  }\n', '\n', '  // Sets a previously-passed-in destination in storage to the value\n', '  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage value to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _val)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - STORE_DEST\n', '      mstore(0x100, 2)\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Sets a previously-passed-in destination in storage to the value\n', '  function to(bytes32 _field, uint _val) internal pure {\n', '    to(_field, bytes32(_val));\n', '  }\n', '\n', '  // Sets a previously-passed-in destination in storage to the value\n', '  function to(bytes32 _field, address _val) internal pure {\n', '    to(_field, bytes32(_val));\n', '  }\n', '\n', '  // Sets a previously-passed-in destination in storage to the value\n', '  function to(bytes32 _field, bool _val) internal pure {\n', '    to(\n', '      _field,\n', '      _val ? bytes32(1) : bytes32(0)\n', '    );\n', '  }\n', '\n', '  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n', '    // Read value stored at the location in storage -\n', '    val = keccak256(_field, execID());\n', '    assembly {\n', '      val := sload(val)\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage destination to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - VAL_INC\n', '      mstore(0x100, 4)\n', '      // Increment STORES action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of storage slots pushed to -\n', '      mstore(0x120, add(1, mload(0x120)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '    return val;\n', '  }\n', '\n', '  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n', '    // Read value stored at the location in storage -\n', '    val = keccak256(_field, execID());\n', '    assembly {\n', '      val := sload(val)\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage destination to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - VAL_DEC\n', '      mstore(0x100, 5)\n', '      // Increment STORES action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of storage slots pushed to -\n', '      mstore(0x120, add(1, mload(0x120)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '    return val;\n', '  }\n', '\n', '  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n', '    // Check the expected function type - if it is VAL_INC, perform safe-add on the value\n', '    // If it is VAL_DEC, perform safe-sub on the value\n', '    if (expected() == NextFunction.VAL_INC)\n', '      _amt = _amt.add(uint(_val));\n', '    else if (expected() == NextFunction.VAL_DEC)\n', '      _amt = uint(_val).sub(_amt);\n', '    else\n', '      revert(&#39;Expected VAL_INC or VAL_DEC&#39;);\n', '\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage value to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - STORE_DEST\n', '      mstore(0x100, 2)\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Decreases the value at some field by a maximum amount, and sets it to 0 if there will be underflow\n', '  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n', '    // Check the expected function type - if it is VAL_DEC, set the new amount to the difference of\n', '    // _val and _amt, to a minimum of 0\n', '    if (expected() == NextFunction.VAL_DEC) {\n', '      if (_amt >= uint(_val))\n', '        _amt = 0;\n', '      else\n', '        _amt = uint(_val).sub(_amt);\n', '    } else {\n', '      revert(&#39;Expected VAL_DEC&#39;);\n', '    }\n', '\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage value to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - STORE_DEST\n', '      mstore(0x100, 2)\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Begins creating an event log buffer - topics and data pushed will be emitted by\n', '  // storage at the end of execution\n', '  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n', '    bytes4 action_req = EMITS;\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push requestor to the end of buffer, as well as to the &#39;current action&#39; slot -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n', '      // Push &#39;0&#39; to the end of the 4 bytes just pushed - this will be the length of the EMITS action\n', '      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n', '      // Increment buffer length - 0x24 plus the previous length\n', '      mstore(ptr, add(0x24, mload(ptr)))\n', '      // Set the current action being executed (EMITS) -\n', '      mstore(0xe0, action_req)\n', '      // Set the expected next function - EMIT_LOG\n', '      mstore(0x100, 6)\n', '      // Set a pointer to the length of the current request within the buffer\n', '      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push 0 to the end of the buffer - event will have 0 topics\n', '      mstore(add(0x20, add(ptr, mload(ptr))), 0)\n', '      // If _data is zero, set data size to 0 in buffer and push -\n', '      if eq(_data, 0) {\n', '        mstore(add(0x40, add(ptr, mload(ptr))), 0)\n', '        // Increment buffer length - 0x40 plus the original length\n', '        mstore(ptr, add(0x40, mload(ptr)))\n', '      }\n', '      // If _data is not zero, set size to 0x20 and push to buffer -\n', '      if iszero(eq(_data, 0)) {\n', '        // Push data size (0x20) to the end of the buffer\n', '        mstore(add(0x40, add(ptr, mload(ptr))), 0x20)\n', '        // Push data to the end of the buffer\n', '        mstore(add(0x60, add(ptr, mload(ptr))), _data)\n', '        // Increment buffer length - 0x60 plus the original length\n', '        mstore(ptr, add(0x60, mload(ptr)))\n', '      }\n', '      // Increment EMITS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of events pushed to buffer -\n', '      mstore(0x140, add(1, mload(0x140)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push 1 to the end of the buffer - event will have 1 topic\n', '      mstore(add(0x20, add(ptr, mload(ptr))), 1)\n', '      // Push topic to end of buffer\n', '      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n', '      // If _data is zero, set data size to 0 in buffer and push -\n', '      if eq(_data, 0) {\n', '        mstore(add(0x60, add(ptr, mload(ptr))), 0)\n', '        // Increment buffer length - 0x60 plus the original length\n', '        mstore(ptr, add(0x60, mload(ptr)))\n', '      }\n', '      // If _data is not zero, set size to 0x20 and push to buffer -\n', '      if iszero(eq(_data, 0)) {\n', '        // Push data size (0x20) to the end of the buffer\n', '        mstore(add(0x60, add(ptr, mload(ptr))), 0x20)\n', '        // Push data to the end of the buffer\n', '        mstore(add(0x80, add(ptr, mload(ptr))), _data)\n', '        // Increment buffer length - 0x80 plus the original length\n', '        mstore(ptr, add(0x80, mload(ptr)))\n', '      }\n', '      // Increment EMITS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of events pushed to buffer -\n', '      mstore(0x140, add(1, mload(0x140)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push 2 to the end of the buffer - event will have 2 topics\n', '      mstore(add(0x20, add(ptr, mload(ptr))), 2)\n', '      // Push topics to end of buffer\n', '      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n', '      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n', '      // If _data is zero, set data size to 0 in buffer and push -\n', '      if eq(_data, 0) {\n', '        mstore(add(0x80, add(ptr, mload(ptr))), 0)\n', '        // Increment buffer length - 0x80 plus the original length\n', '        mstore(ptr, add(0x80, mload(ptr)))\n', '      }\n', '      // If _data is not zero, set size to 0x20 and push to buffer -\n', '      if iszero(eq(_data, 0)) {\n', '        // Push data size (0x20) to the end of the buffer\n', '        mstore(add(0x80, add(ptr, mload(ptr))), 0x20)\n', '        // Push data to the end of the buffer\n', '        mstore(add(0xa0, add(ptr, mload(ptr))), _data)\n', '        // Increment buffer length - 0xa0 plus the original length\n', '        mstore(ptr, add(0xa0, mload(ptr)))\n', '      }\n', '      // Increment EMITS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of events pushed to buffer -\n', '      mstore(0x140, add(1, mload(0x140)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push 3 to the end of the buffer - event will have 3 topics\n', '      mstore(add(0x20, add(ptr, mload(ptr))), 3)\n', '      // Push topics to end of buffer\n', '      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n', '      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n', '      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n', '      // If _data is zero, set data size to 0 in buffer and push -\n', '      if eq(_data, 0) {\n', '        mstore(add(0xa0, add(ptr, mload(ptr))), 0)\n', '        // Increment buffer length - 0xa0 plus the original length\n', '        mstore(ptr, add(0xa0, mload(ptr)))\n', '      }\n', '      // If _data is not zero, set size to 0x20 and push to buffer -\n', '      if iszero(eq(_data, 0)) {\n', '        // Push data size (0x20) to the end of the buffer\n', '        mstore(add(0xa0, add(ptr, mload(ptr))), 0x20)\n', '        // Push data to the end of the buffer\n', '        mstore(add(0xc0, add(ptr, mload(ptr))), _data)\n', '        // Increment buffer length - 0xc0 plus the original length\n', '        mstore(ptr, add(0xc0, mload(ptr)))\n', '      }\n', '      // Increment EMITS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of events pushed to buffer -\n', '      mstore(0x140, add(1, mload(0x140)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push 4 to the end of the buffer - event will have 4 topics\n', '      mstore(add(0x20, add(ptr, mload(ptr))), 4)\n', '      // Push topics to end of buffer\n', '      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n', '      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n', '      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n', '      mstore(add(0xa0, add(ptr, mload(ptr))), mload(add(0x60, _topics)))\n', '      // If _data is zero, set data size to 0 in buffer and push -\n', '      if eq(_data, 0) {\n', '        mstore(add(0xc0, add(ptr, mload(ptr))), 0)\n', '        // Increment buffer length - 0xc0 plus the original length\n', '        mstore(ptr, add(0xc0, mload(ptr)))\n', '      }\n', '      // If _data is not zero, set size to 0x20 and push to buffer -\n', '      if iszero(eq(_data, 0)) {\n', '        // Push data size (0x20) to the end of the buffer\n', '        mstore(add(0xc0, add(ptr, mload(ptr))), 0x20)\n', '        // Push data to the end of the buffer\n', '        mstore(add(0xe0, add(ptr, mload(ptr))), _data)\n', '        // Increment buffer length - 0xe0 plus the original length\n', '        mstore(ptr, add(0xe0, mload(ptr)))\n', '      }\n', '      // Increment EMITS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of events pushed to buffer -\n', '      mstore(0x140, add(1, mload(0x140)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Begins creating a storage buffer - destinations entered will be forwarded wei\n', '  // before the end of execution\n', '  function paying() conditions(validPayBuff, isPaying) internal pure {\n', '    bytes4 action_req = PAYS;\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push requestor to the end of buffer, as well as to the &#39;current action&#39; slot -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n', '      // Push &#39;0&#39; to the end of the 4 bytes just pushed - this will be the length of the PAYS action\n', '      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n', '      // Increment buffer length - 0x24 plus the previous length\n', '      mstore(ptr, add(0x24, mload(ptr)))\n', '      // Set the current action being executed (PAYS) -\n', '      mstore(0xe0, action_req)\n', '      // Set the expected next function - PAY_AMT\n', '      mstore(0x100, 8)\n', '      // Set a pointer to the length of the current request within the buffer\n', '      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Pushes an amount of wei to forward to the buffer\n', '  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push payment amount to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _amount)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - PAY_DEST\n', '      mstore(0x100, 7)\n', '      // Increment PAYS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of payment destinations to be pushed to -\n', '      mstore(0x160, add(1, mload(0x160)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '    return _amount;\n', '  }\n', '\n', '  // Push an address to forward wei to, to the buffer\n', '  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push payment destination to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _dest)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - PAY_AMT\n', '      mstore(0x100, 8)\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Sets the free memory pointer to point beyond all accessed memory\n', '  function setFreeMem() private pure {\n', '    assembly { mstore(0x40, msize) }\n', '  }\n', '\n', '  // Returns the enum representing the next expected function to be called -\n', '  function expected() private pure returns (NextFunction next) {\n', '    assembly { next := mload(0x100) }\n', '  }\n', '\n', '  // Returns the number of events pushed to the storage buffer -\n', '  function emitted() internal pure returns (uint num_emitted) {\n', '    if (buffPtr() == bytes32(0))\n', '      return 0;\n', '\n', '    // Load number emitted from buffer -\n', '    assembly { num_emitted := mload(0x140) }\n', '  }\n', '\n', '  // Returns the number of storage slots pushed to the storage buffer -\n', '  function stored() internal pure returns (uint num_stored) {\n', '    if (buffPtr() == bytes32(0))\n', '      return 0;\n', '\n', '    // Load number stored from buffer -\n', '    assembly { num_stored := mload(0x120) }\n', '  }\n', '\n', '  // Returns the number of payment destinations and amounts pushed to the storage buffer -\n', '  function paid() internal pure returns (uint num_paid) {\n', '    if (buffPtr() == bytes32(0))\n', '      return 0;\n', '\n', '    // Load number paid from buffer -\n', '    assembly { num_paid := mload(0x160) }\n', '  }\n', '}\n', '\n', 'library ManageSale {\n', '\n', '  using Contract for *;\n', '\n', '  // event CrowdsaleConfigured(bytes32 indexed exec_id, bytes32 indexed token_name, uint start_time);\n', '  bytes32 internal constant CROWDSALE_CONFIGURED = keccak256("CrowdsaleConfigured(bytes32,bytes32,uint256)");\n', '\n', '  // event CrowdsaleFinalized(bytes32 indexed exec_id);\n', '  bytes32 internal constant CROWDSALE_FINALIZED = keccak256("CrowdsaleFinalized(bytes32)");\n', '\n', '  // Returns the topics for a crowdsale configuration event\n', '  function CONFIGURE(bytes32 _exec_id, bytes32 _name) private pure returns (bytes32[3] memory)\n', '    { return [CROWDSALE_CONFIGURED, _exec_id, _name]; }\n', '\n', '  // Returns the topics for a crowdsale finalization event\n', '  function FINALIZE(bytes32 _exec_id) private pure returns (bytes32[2] memory)\n', '    { return [CROWDSALE_FINALIZED, _exec_id]; }\n', '\n', '  // Checks input and then creates storage buffer for sale initialization\n', '  function initializeCrowdsale() internal view {\n', '    uint start_time = uint(Contract.read(SaleManager.startTime()));\n', '    bytes32 token_name = Contract.read(SaleManager.tokenName());\n', '\n', '    // Ensure the sale has already started, and the token has been initialized\n', '    if (start_time < now)\n', '      revert(&#39;crowdsale already started&#39;);\n', '    if (token_name == 0)\n', '      revert(&#39;token not init&#39;);\n', '\n', '    Contract.storing();\n', '\n', '    // Store updated crowdsale configuration status\n', '    Contract.set(SaleManager.isConfigured()).to(true);\n', '\n', '    // Set up EMITS action requests -\n', '    Contract.emitting();\n', '\n', '    // Add CROWDSALE_INITIALIZED signature and topics\n', '    Contract.log(CONFIGURE(Contract.execID(), token_name), bytes32(start_time));\n', '  }\n', '\n', '  // Checks input and then creates storage buffer for sale finalization\n', '  function finalizeCrowdsale() internal view {\n', '    // Ensure sale has been configured -\n', '    if (Contract.read(SaleManager.isConfigured()) == 0)\n', '      revert(&#39;crowdsale has not been configured&#39;);\n', '\n', '    Contract.storing();\n', '\n', '    // Store updated crowdsale finalization status\n', '    Contract.set(SaleManager.isFinished()).to(true);\n', '\n', '    // Set up EMITS action requests -\n', '    Contract.emitting();\n', '\n', '    // Add CROWDSALE_FINALIZED signature and topics\n', '    Contract.log(FINALIZE(Contract.execID()), bytes32(0));\n', '  }\n', '}\n', '\n', 'library ConfigureSale {\n', '\n', '  using Contract for *;\n', '  using SafeMath for uint;\n', '\n', '  // event TierMinUpdate(bytes32 indexed exec_id, uint indexed tier_index, uint current_token_purchase_min)\n', '  bytes32 private constant TIER_MIN_UPDATE = keccak256("TierMinUpdate(bytes32,uint256,uint256)");\n', '\n', '  // event CrowdsaleTiersAdded(bytes32 indexed exec_id, uint current_tier_list_len)\n', '  bytes32 private constant CROWDSALE_TIERS_ADDED = keccak256("CrowdsaleTiersAdded(bytes32,uint256)");\n', '\n', '  function MIN_UPDATE(bytes32 _exec_id, uint _idx) private pure returns (bytes32[3] memory)\n', '    { return [TIER_MIN_UPDATE, _exec_id, bytes32(_idx)]; }\n', '\n', '  function ADD_TIERS(bytes32 _exec_id) private pure returns (bytes32[2] memory)\n', '    { return [CROWDSALE_TIERS_ADDED, _exec_id]; }\n', '\n', '  // Checks input and then creates storage buffer to create sale tiers\n', '  function createCrowdsaleTiers(\n', '    bytes32[] _tier_names, uint[] _tier_durations, uint[] _tier_prices, uint[] _tier_caps, uint[] _tier_minimums,\n', '    bool[] _tier_modifiable, bool[] _tier_whitelisted\n', '  ) internal view {\n', '    // Ensure valid input\n', '    if (\n', '      _tier_names.length != _tier_durations.length\n', '      || _tier_names.length != _tier_prices.length\n', '      || _tier_names.length != _tier_caps.length\n', '      || _tier_names.length != _tier_modifiable.length\n', '      || _tier_names.length != _tier_whitelisted.length\n', '      || _tier_names.length == 0\n', '    ) revert("array length mismatch");\n', '\n', '    uint durations_sum = uint(Contract.read(SaleManager.totalDuration()));\n', '    uint num_tiers = uint(Contract.read(SaleManager.saleTierList()));\n', '\n', '    // Begin storing values in buffer\n', '    Contract.storing();\n', '\n', '    // Store new tier list length\n', '    Contract.increase(SaleManager.saleTierList()).by(_tier_names.length);\n', '\n', '    // Loop over each new tier, and add to storage buffer. Keep track of the added duration\n', '    for (uint i = 0; i < _tier_names.length; i++) {\n', '      // Ensure valid input -\n', '      if (\n', '        _tier_caps[i] == 0 || _tier_prices[i] == 0 || _tier_durations[i] == 0\n', '      ) revert("invalid tier vals");\n', '\n', '      // Increment total duration of the crowdsale\n', '      durations_sum = durations_sum.add(_tier_durations[i]);\n', '\n', '      // Store tier information -\n', '      // Tier name\n', '      Contract.set(SaleManager.tierName(num_tiers + i)).to(_tier_names[i]);\n', '      // Tier maximum token sell cap\n', '      Contract.set(SaleManager.tierCap(num_tiers + i)).to(_tier_caps[i]);\n', '      // Tier purchase price (in wei/10^decimals units)\n', '      Contract.set(SaleManager.tierPrice(num_tiers + i)).to(_tier_prices[i]);\n', '      // Tier duration\n', '      Contract.set(SaleManager.tierDuration(num_tiers + i)).to(_tier_durations[i]);\n', '      // Tier minimum purchase size\n', '      Contract.set(SaleManager.tierMin(num_tiers + i)).to(_tier_minimums[i]);\n', '      // Tier duration modifiability status\n', '      Contract.set(SaleManager.tierModifiable(num_tiers + i)).to(_tier_modifiable[i]);\n', '      // Whether tier is whitelisted\n', '      Contract.set(SaleManager.tierWhitelisted(num_tiers + i)).to(_tier_whitelisted[i]);\n', '    }\n', '    // Store new total crowdsale duration\n', '    Contract.set(SaleManager.totalDuration()).to(durations_sum);\n', '\n', '    // Set up EMITS action requests -\n', '    Contract.emitting();\n', '\n', '    // Add CROWDSALE_TIERS_ADDED signature and topics\n', '    Contract.log(\n', '      ADD_TIERS(Contract.execID()), bytes32(num_tiers.add(_tier_names.length))\n', '    );\n', '  }\n', '\n', '  // Checks input and then creates storage buffer to whitelist addresses\n', '  function whitelistMultiForTier(\n', '    uint _tier_index, address[] _to_whitelist, uint[] _min_token_purchase, uint[] _max_purchase_amt\n', '  ) internal view {\n', '    // Ensure valid input\n', '    if (\n', '      _to_whitelist.length != _min_token_purchase.length\n', '      || _to_whitelist.length != _max_purchase_amt.length\n', '      || _to_whitelist.length == 0\n', '    ) revert("mismatched input lengths");\n', '\n', '    // Get tier whitelist length\n', '    uint tier_whitelist_length = uint(Contract.read(SaleManager.tierWhitelist(_tier_index)));\n', '\n', '    // Set up STORES action requests -\n', '    Contract.storing();\n', '\n', '    // Loop over input and add whitelist storage information to buffer\n', '    for (uint i = 0; i < _to_whitelist.length; i++) {\n', '      // Store user&#39;s minimum token purchase amount\n', '      Contract.set(\n', '        SaleManager.whitelistMinTok(_tier_index, _to_whitelist[i])\n', '      ).to(_min_token_purchase[i]);\n', '      // Store user maximum token purchase amount\n', '      Contract.set(\n', '        SaleManager.whitelistMaxTok(_tier_index, _to_whitelist[i])\n', '      ).to(_max_purchase_amt[i]);\n', '\n', '      // If the user does not currently have whitelist information in storage,\n', '      // push them to the sale&#39;s whitelist array\n', '      if (\n', '        Contract.read(SaleManager.whitelistMinTok(_tier_index, _to_whitelist[i])) == 0 &&\n', '        Contract.read(SaleManager.whitelistMaxTok(_tier_index, _to_whitelist[i])) == 0\n', '      ) {\n', '        Contract.set(\n', '          bytes32(32 + (32 * tier_whitelist_length) + uint(SaleManager.tierWhitelist(_tier_index)))\n', '        ).to(_to_whitelist[i]);\n', '        // Increment tier whitelist length\n', '        tier_whitelist_length++;\n', '      }\n', '    }\n', '\n', '    // Store new tier whitelist length\n', '    Contract.set(SaleManager.tierWhitelist(_tier_index)).to(tier_whitelist_length);\n', '  }\n', '\n', '  // Checks input and then creates storage buffer to update a tier&#39;s duration\n', '  function updateTierDuration(uint _tier_index, uint _new_duration) internal view {\n', '    // Ensure valid input\n', '    if (_new_duration == 0)\n', '      revert(&#39;invalid duration&#39;);\n', '\n', '    // Get sale start time -\n', '    uint starts_at = uint(Contract.read(SaleManager.startTime()));\n', '    // Get current tier in storage -\n', '    uint current_tier = uint(Contract.read(SaleManager.currentTier()));\n', '    // Get total sale duration -\n', '    uint total_duration = uint(Contract.read(SaleManager.totalDuration()));\n', '    // Get the time at which the current tier will end -\n', '    uint cur_ends_at = uint(Contract.read(SaleManager.currentEndsAt()));\n', '    // Get the current duration of the tier marked for update -\n', '    uint previous_duration\n', '      = uint(Contract.read(SaleManager.tierDuration(_tier_index)));\n', '\n', '    // Normalize returned current tier index\n', '    current_tier = current_tier.sub(1);\n', '\n', '    // Ensure an update is being performed\n', '    if (previous_duration == _new_duration)\n', '      revert("duration unchanged");\n', '    // Total crowdsale duration should always be minimum the previous duration for the tier to update\n', '    if (total_duration < previous_duration)\n', '      revert("total duration invalid");\n', '    // Ensure tier to update is within range of existing tiers -\n', '    if (uint(Contract.read(SaleManager.saleTierList())) <= _tier_index)\n', '      revert("tier does not exist");\n', '    // Ensure tier to update has not already passed -\n', '    if (current_tier > _tier_index)\n', '      revert("tier has already completed");\n', '    // Ensure the tier targeted was marked as &#39;modifiable&#39; -\n', '    if (Contract.read(SaleManager.tierModifiable(_tier_index)) == 0)\n', '      revert("tier duration not modifiable");\n', '\n', '    Contract.storing();\n', '\n', '    // If the tier to update is tier 0, the sale should not have started yet -\n', '    if (_tier_index == 0) {\n', '      if (now >= starts_at)\n', '        revert("cannot modify initial tier once sale has started");\n', '\n', '      // Store current tier end time\n', '      Contract.set(SaleManager.currentEndsAt()).to(_new_duration.add(starts_at));\n', '    } else if (_tier_index > current_tier) {\n', '      // If the end time has passed, and we are trying to update the next tier, the tier\n', '      // is already in progress and cannot be updated\n', '      if (_tier_index - current_tier == 1 && now >= cur_ends_at)\n', '        revert("cannot modify tier after it has begun");\n', '\n', '      // Loop over tiers in storage and increment end time -\n', '      for (uint i = current_tier + 1; i < _tier_index; i++)\n', '        cur_ends_at = cur_ends_at.add(uint(Contract.read(SaleManager.tierDuration(i))));\n', '\n', '      if (cur_ends_at < now)\n', '        revert("cannot modify current tier");\n', '    } else {\n', '      // Not a valid state to update - throw\n', '      revert(&#39;cannot update tier&#39;);\n', '    }\n', '\n', '    // Get new overall crowdsale duration -\n', '    if (previous_duration > _new_duration) // Subtracting from total_duration\n', '      total_duration = total_duration.sub(previous_duration - _new_duration);\n', '    else // Adding to total_duration\n', '      total_duration = total_duration.add(_new_duration - previous_duration);\n', '\n', '    // Store updated tier duration\n', '    Contract.set(SaleManager.tierDuration(_tier_index)).to(_new_duration);\n', '\n', '    // Update total crowdsale duration\n', '    Contract.set(SaleManager.totalDuration()).to(total_duration);\n', '  }\n', '\n', '  // Checks input and then creates storage buffer to update a tier&#39;s minimum cap\n', '  function updateTierMinimum(uint _tier_index, uint _new_minimum) internal view {\n', '    // Ensure passed-in index is within range -\n', '    if (uint(Contract.read(SaleManager.saleTierList())) <= _tier_index)\n', '      revert(&#39;tier does not exist&#39;);\n', '    // Ensure tier was marked as modifiable -\n', '    if (Contract.read(SaleManager.tierModifiable(_tier_index)) == 0)\n', '      revert(&#39;tier mincap not modifiable&#39;);\n', '\n', '    Contract.storing();\n', '\n', '    // Update tier minimum cap\n', '    Contract.set(SaleManager.tierMin(_tier_index)).to(_new_minimum);\n', '\n', '    // Set up EMITS action requests -\n', '    Contract.emitting();\n', '\n', '    // Add GLOBAL_MIN_UPDATE signature and topics\n', '    Contract.log(\n', '      MIN_UPDATE(Contract.execID(), _tier_index), bytes32(_new_minimum)\n', '    );\n', '  }\n', '}\n', '\n', 'library SaleManager {\n', '\n', '  using Contract for *;\n', '\n', '  /// SALE ///\n', '\n', '  // Storage location of crowdsale admin address\n', '  function admin() internal pure returns (bytes32)\n', '    { return keccak256(&#39;sale_admin&#39;); }\n', '\n', '  // Whether the crowdsale and token are configured, and the sale is ready to run\n', '  function isConfigured() internal pure returns (bytes32)\n', '    { return keccak256("sale_is_configured"); }\n', '\n', '  // Whether or not the crowdsale is post-purchase\n', '  function isFinished() internal pure returns (bytes32)\n', '    { return keccak256("sale_is_completed"); }\n', '\n', '  // Storage location of the crowdsale&#39;s start time\n', '  function startTime() internal pure returns (bytes32)\n', '    { return keccak256("sale_start_time"); }\n', '\n', '  // Storage location of the amount of time the crowdsale will take, accounting for all tiers\n', '  function totalDuration() internal pure returns (bytes32)\n', '    { return keccak256("sale_total_duration"); }\n', '\n', '  /// TIERS ///\n', '\n', '  // Stores the number of tiers in the sale\n', '  function saleTierList() internal pure returns (bytes32)\n', '    { return keccak256("sale_tier_list"); }\n', '\n', '  // Stores the name of the tier\n', '  function tierName(uint _idx) internal pure returns (bytes32)\n', '    { return keccak256(_idx, "name", saleTierList()); }\n', '\n', '  // Stores the number of tokens that will be sold in the tier\n', '  function tierCap(uint _idx) internal pure returns (bytes32)\n', '    { return keccak256(_idx, "cap", saleTierList()); }\n', '\n', '  // Stores the price of a token (1 * 10^decimals units), in wei\n', '  function tierPrice(uint _idx) internal pure returns (bytes32)\n', '    { return keccak256(_idx, "price", saleTierList()); }\n', '\n', '  // Stores the minimum number of tokens a user must purchase for a given tier\n', '  function tierMin(uint _idx) internal pure returns (bytes32)\n', '    { return keccak256(_idx, "minimum", saleTierList()); }\n', '\n', '  // Stores the duration of a tier\n', '  function tierDuration(uint _idx) internal pure returns (bytes32)\n', '    { return keccak256(_idx, "duration", saleTierList()); }\n', '\n', '  // Whether or not the tier&#39;s duration is modifiable (before it has begin)\n', '  function tierModifiable(uint _idx) internal pure returns (bytes32)\n', '    { return keccak256(_idx, "mod_stat", saleTierList()); }\n', '\n', '  // Returns the storage location of the tier&#39;s whitelist status\n', '  function tierWhitelisted(uint _idx) internal pure returns (bytes32)\n', '    { return keccak256(_idx, "wl_stat", saleTierList()); }\n', '\n', '  // Storage location of the index of the current tier. If zero, no tier is currently active\n', '  function currentTier() internal pure returns (bytes32)\n', '    { return keccak256("sale_current_tier"); }\n', '\n', '  // Storage location of the end time of the current tier. Purchase attempts beyond this time will update the current tier (if another is available)\n', '  function currentEndsAt() internal pure returns (bytes32)\n', '    { return keccak256("current_tier_ends_at"); }\n', '\n', '  /// WHITELIST ///\n', '\n', '  // Stores a tier&#39;s whitelist\n', '  function tierWhitelist(uint _idx) internal pure returns (bytes32)\n', '    { return keccak256(_idx, "tier_whitelists"); }\n', '\n', '  // Stores a spender&#39;s maximum number of tokens allowed to be purchased\n', '  function whitelistMaxTok(uint _idx, address _spender) internal pure returns (bytes32)\n', '    { return keccak256(_spender, "max_tok", tierWhitelist(_idx)); }\n', '\n', '  // Stores a spender&#39;s minimum token purchase amount for a given whitelisted tier\n', '  function whitelistMinTok(uint _idx, address _spender) internal pure returns (bytes32)\n', '    { return keccak256(_spender, "min_tok", tierWhitelist(_idx)); }\n', '\n', '  /// TOKEN ///\n', '\n', '  // Storage location for token name\n', '  function tokenName() internal pure returns (bytes32)\n', '    { return keccak256("token_name"); }\n', '\n', '  // Storage location for token ticker symbol\n', '  function tokenSymbol() internal pure returns (bytes32)\n', '    { return keccak256("token_symbol"); }\n', '\n', '  // Storage location for token decimals\n', '  function tokenDecimals() internal pure returns (bytes32)\n', '    { return keccak256("token_decimals"); }\n', '\n', '  // Storage location for token totalSupply\n', '  function tokenTotalSupply() internal pure returns (bytes32)\n', '    { return keccak256("token_total_supply"); }\n', '\n', '  // Storage seed for user balances mapping\n', '  bytes32 internal constant TOKEN_BALANCES = keccak256("token_balances");\n', '\n', '  function balances(address _owner) internal pure returns (bytes32)\n', '    { return keccak256(_owner, TOKEN_BALANCES); }\n', '\n', '  // Whether or not the token is unlocked for transfers\n', '  function tokensUnlocked() internal pure returns (bytes32)\n', '    { return keccak256(&#39;sale_tokens_unlocked&#39;); }\n', '\n', '  /// CHECKS ///\n', '\n', '  // Ensures that the sender is the admin address, and the sale is not initialized\n', '  function onlyAdminAndNotInit() internal view {\n', '    if (address(Contract.read(admin())) != Contract.sender())\n', '      revert(&#39;sender is not admin&#39;);\n', '\n', '    if (Contract.read(isConfigured()) != 0)\n', '      revert(&#39;sale has already been configured&#39;);\n', '  }\n', '\n', '  // Ensures that the sender is the admin address, and the sale is not finalized\n', '  function onlyAdminAndNotFinal() internal view {\n', '    if (address(Contract.read(admin())) != Contract.sender())\n', '      revert(&#39;sender is not admin&#39;);\n', '\n', '    if (Contract.read(isFinished()) != 0)\n', '      revert(&#39;sale has already been finalized&#39;);\n', '  }\n', '\n', '  // Ensure that the sender is the sale admin\n', '  function onlyAdmin() internal view {\n', '    if (address(Contract.read(admin())) != Contract.sender())\n', '      revert(&#39;sender is not admin&#39;);\n', '  }\n', '\n', '  // Ensures both storage and events have been pushed to the buffer\n', '  function emitAndStore() internal pure {\n', '    if (Contract.emitted() == 0 || Contract.stored() == 0)\n', '      revert(&#39;invalid state change&#39;);\n', '  }\n', '\n', '  // Ensures the pending state change will only store\n', '  function onlyStores() internal pure {\n', '    if (Contract.paid() != 0 || Contract.emitted() != 0)\n', '      revert(&#39;expected only storage&#39;);\n', '\n', '    if (Contract.stored() == 0)\n', '      revert(&#39;expected storage&#39;);\n', '  }\n', '\n', '  /// FUNCTIONS ///\n', '\n', '  /*\n', '  Allows the admin to add additional crowdsale tiers before the start of the sale\n', '\n', '  @param _tier_names: The name of each tier to add\n', '  @param _tier_durations: The duration of each tier to add\n', '  @param _tier_prices: The set purchase price for each tier\n', '  @param _tier_caps: The maximum tokens to sell in each tier\n', '  @param _tier_minimums: The minimum number of tokens that must be purchased by a user\n', '  @param _tier_modifiable: Whether each tier&#39;s duration is modifiable or not\n', '  @param _tier_whitelisted: Whether each tier incorporates a whitelist\n', '  */\n', '  function createCrowdsaleTiers(\n', '    bytes32[] _tier_names, uint[] _tier_durations, uint[] _tier_prices, uint[] _tier_caps, uint[] _tier_minimums,\n', '    bool[] _tier_modifiable, bool[] _tier_whitelisted\n', '  ) external view {\n', '    // Begin execution - reads execution id and original sender address from storage\n', '    Contract.authorize(msg.sender);\n', '    // Check that the sender is the admin and the sale is not initialized\n', '    Contract.checks(onlyAdminAndNotInit);\n', '    // Execute function -\n', '    ConfigureSale.createCrowdsaleTiers(\n', '      _tier_names, _tier_durations, _tier_prices,\n', '      _tier_caps, _tier_minimums, _tier_modifiable, _tier_whitelisted\n', '    );\n', '    // Ensures state change will only affect storage and events -\n', '    Contract.checks(emitAndStore);\n', '    // Commit state changes to storage -\n', '    Contract.commit();\n', '  }\n', '\n', '  /*\n', '  Allows the admin to whitelist addresses for a tier which was setup to be whitelist-enabled -\n', '\n', '  @param _tier_index: The index of the tier for which the whitelist will be updated\n', '  @param _to_whitelist: An array of addresses that will be whitelisted\n', '  @param _min_token_purchase: Each address&#39; minimum purchase amount\n', '  @param _max_purchase_amt: Each address&#39; maximum purchase amount\n', '  */\n', '  function whitelistMultiForTier(\n', '    uint _tier_index, address[] _to_whitelist, uint[] _min_token_purchase, uint[] _max_purchase_amt\n', '  ) external view {\n', '    // Begin execution - reads execution id and original sender address from storage\n', '    Contract.authorize(msg.sender);\n', '    // Check that the sender is the sale admin -\n', '    Contract.checks(onlyAdmin);\n', '    // Execute function -\n', '    ConfigureSale.whitelistMultiForTier(\n', '      _tier_index, _to_whitelist, _min_token_purchase, _max_purchase_amt\n', '    );\n', '    // Ensures state change will only affect storage -\n', '    Contract.checks(onlyStores);\n', '    // Commit state changes to storage -\n', '    Contract.commit();\n', '  }\n', '\n', '  /*\n', '  Allows the admin to update a tier&#39;s duration, provided it was marked as modifiable and has not started\n', '\n', '  @param _tier_index: The index of the tier whose duration will be updated\n', '  @param _new_duration: The new duration of the tier\n', '  */\n', '  function updateTierDuration(uint _tier_index, uint _new_duration) external view {\n', '    // Begin execution - reads execution id and original sender address from storage\n', '    Contract.authorize(msg.sender);\n', '    // Check that the sender is the sale admin and that the sale is not finalized -\n', '    Contract.checks(onlyAdminAndNotFinal);\n', '    // Execute function -\n', '    ConfigureSale.updateTierDuration(_tier_index, _new_duration);\n', '    // Ensures state change will only affect storage -\n', '    Contract.checks(onlyStores);\n', '    // Commit state changes to storage -\n', '    Contract.commit();\n', '  }\n', '\n', '  /*\n', '  Allows the admin to update a tier&#39;s minimum purchase amount (if it was marked modifiable)\n', '\n', '  @param _tier_index: The index of the tier whose minimum will be updated\n', '  @param _new_minimum: The minimum amount of tokens\n', '  */\n', '  function updateTierMinimum(uint _tier_index, uint _new_minimum) external view {\n', '    // Begin execution - reads execution id and original sender address from storage\n', '    Contract.authorize(msg.sender);\n', '    // Check that the sender is the sale admin and that the sale is not finalized -\n', '    Contract.checks(onlyAdminAndNotFinal);\n', '    // Execute function -\n', '    ConfigureSale.updateTierMinimum(_tier_index, _new_minimum);\n', '    // Ensures state change will only affect storage -\n', '    Contract.checks(emitAndStore);\n', '    // Commit state changes to storage -\n', '    Contract.commit();\n', '  }\n', '\n', '  // Allows the admin to initialize a crowdsale, marking it configured\n', '  function initializeCrowdsale() external view {\n', '    // Begin execution - reads execution id and original sender address from storage\n', '    Contract.authorize(msg.sender);\n', '    // Check that the sender is the sale admin and the sale is not initialized -\n', '    Contract.checks(onlyAdminAndNotInit);\n', '    // Execute function -\n', '    ManageSale.initializeCrowdsale();\n', '    // Ensures state change will only affect storage and events -\n', '    Contract.checks(emitAndStore);\n', '    // Commit state changes to storage -\n', '    Contract.commit();\n', '  }\n', '\n', '  // Allows the admin to finalize a crowdsale, marking it completed\n', '  function finalizeCrowdsale() external view {\n', '    // Begin execution - reads execution id and original sender address from storage\n', '    Contract.authorize(msg.sender);\n', '    // Check that the sender is the sale admin and that the sale is not finalized -\n', '    Contract.checks(onlyAdminAndNotFinal);\n', '    // Execute function -\n', '    ManageSale.finalizeCrowdsale();\n', '    // Ensures state change will only affect storage and events -\n', '    Contract.checks(emitAndStore);\n', '    // Commit state changes to storage -\n', '    Contract.commit();\n', '  }\n', '}']