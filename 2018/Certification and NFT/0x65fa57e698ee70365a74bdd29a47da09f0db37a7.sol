['// Created by Mohamed Sharaf.\n', '// EMail: <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="2b466b4644434a464e4f58434a594a4d05454e5f">[email&#160;protected]</a>\n', '// Date: 15/04/2018\n', 'pragma solidity ^0.4.21;\n', '\n', 'contract Secure {\n', '    /* Constructor */\n', '    function Secure() public {\n', '\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract Token is Ownable {\n', '    // Public variables of the token\n', '    string public name = "VoxelX GRAY";\n', '    string public symbol = "GRAY";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 10000000000 * 10 ** uint256(decimals); // 10 billion tokens;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constructor function\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function Token() public {\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '    returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '    public\n', '    returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    // Change Name\n', '    function setName(string _name) public onlyOwner {\n', '        name = _name;\n', '    }\n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // Token being sold\n', '    Token public token;\n', '\n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public startTime = 1524202200;\n', '    uint256 public endTime   = 1525973400;\n', '\n', '    // Crowdsale cap (how much can be raised total)\n', '    uint256 public cap = 25000 ether;\n', '\n', '    // Address where funds are collected\n', '    address public wallet = 0xff2A97D65E486cA7Bd209f55Fa1dA38B6D5Bf260;\n', '\n', '    // Predefined rate of token to Ethereum (1/rate = crowdsale price)\n', '    uint256 public rate = 200000;\n', '\n', '    // Min/max purchase\n', '    uint256 public minSale = 0.0025 ether;\n', '    uint256 public maxSale = 1000 ether;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '    mapping(address => uint256) public contributions;\n', '\n', '    // Finalization flag for when we want to withdraw the remaining tokens after the end\n', '    bool public finished = false;\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    function Crowdsale(address _token) public {\n', '        require(_token != address(0));\n', '        owner = msg.sender;\n', '        token = Token(_token);\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function() external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address beneficiary) public payable {\n', '        require(beneficiary != address(0));\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '        // update total and individual contributions\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        contributions[beneficiary] = contributions[beneficiary].add(weiAmount);\n', '\n', '        // Send tokens\n', '        token.transfer(beneficiary, tokens);\n', '        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        // Send funds\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    // Returns true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        bool capReached = weiRaised >= cap;\n', '        bool endTimeReached = now > endTime;\n', '        return capReached || endTimeReached || finished;\n', '    }\n', '\n', '    // Bonuses for larger purchases (in hundredths of percent)\n', '    function bonusPercentForWeiAmount(uint256 weiAmount) public pure returns (uint256) {\n', '        if (weiAmount >= 500 ether) return 1000;\n', '        // 10%\n', '        if (weiAmount >= 250 ether) return 750;\n', '        // 7.5%\n', '        if (weiAmount >= 100 ether) return 500;\n', '        // 5%\n', '        if (weiAmount >= 50 ether) return 375;\n', '        // 3.75%\n', '        if (weiAmount >= 15 ether) return 250;\n', '        // 2.5%\n', '        if (weiAmount >= 5 ether) return 125;\n', '        // 1.25%\n', '        return 0;\n', '        // 0% bonus if lower than 5 eth\n', '    }\n', '\n', '    // Returns you how much tokens do you get for the wei passed\n', '    function getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n', '        uint256 tokens = weiAmount.mul(rate);\n', '        uint256 bonus = bonusPercentForWeiAmount(weiAmount);\n', '        tokens = tokens.mul(10000 + bonus).div(10000);\n', '        return tokens;\n', '    }\n', '\n', '    // Returns true if the transaction can buy tokens\n', '    function validPurchase() internal view returns (bool) {\n', '        bool withinPeriod = now >= startTime && now <= endTime;\n', '        bool moreThanMinPurchase = msg.value >= minSale;\n', '        bool lessThanMaxPurchase = contributions[msg.sender] + msg.value <= maxSale;\n', '        bool withinCap = weiRaised.add(msg.value) <= cap;\n', '\n', '        return withinPeriod && moreThanMinPurchase && lessThanMaxPurchase && withinCap && !finished;\n', '    }\n', '\n', '    // Escape hatch in case the sale needs to be urgently stopped\n', '    function endSale() public onlyOwner {\n', '        finished = true;\n', '        // send remaining tokens back to the owner\n', '        uint256 tokensLeft = token.balanceOf(this);\n', '        token.transfer(owner, tokensLeft);\n', '    }\n', '\n', '    // set rate for gray so we can handle time based sales rates\n', '    function setRate(uint256 _rate) public onlyOwner {\n', '        rate = _rate;\n', '    }\n', '\n', '    // set start time\n', '    function setStartTime(uint256 _startTime) public onlyOwner {\n', '        startTime = _startTime;\n', '    }\n', '\n', '    // set end time\n', '    function setEndTime(uint256 _endTime) public onlyOwner {\n', '        endTime = _endTime;\n', '    }\n', '\n', '    // set finalized time so contract can be paused\n', '    function setFinished(bool _finished) public onlyOwner {\n', '        finished = _finished;\n', '    }\n', '\n', '}']