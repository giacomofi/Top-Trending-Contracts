['pragma solidity ^0.4.23;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '    interface ERC20 {\n', '        function transfer(address _beneficiary, uint256 _tokenAmount) external returns (bool);\n', '        function transferFromICO(address _to, uint256 _value) external returns(bool);\n', '    }\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract MainSale is Ownable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    ERC20 public token;\n', '    \n', '    address reserve = 0x611200beabeac749071b30db84d17ec205654463;\n', '    address promouters = 0x2632d043ac8bbbad07c7dabd326ade3ca4f6b53e;\n', '    address bounty = 0xff5a1984fade92bfb0e5fd7986186d432545b834;\n', '\n', '    uint256 public constant decimals = 18;\n', '    uint256 constant dec = 10**decimals;\n', '\n', '    mapping(address=>bool) whitelist;\n', '\n', '    uint256 public startCloseSale = now; // start // 1.07.2018 10:00 UTC\n', '    uint256 public endCloseSale = 1532987999; // Monday, 30-Jul-18 23:59:59 UTC-2\n', '\n', '    uint256 public startStage1 = 1532988001; // Tuesday, 31-Jul-18 00:00:01 UTC-2\n', '    uint256 public endStage1 = 1533074399; // Tuesday, 31-Jul-18 23:59:59 UTC-2\n', '\n', '    uint256 public startStage2 = 1533074400; // Wednesday, 01-Aug-18 00:00:00 UTC-2\n', '    uint256 public endStage2 = 1533679199; // Tuesday, 07-Aug-18 23:59:59 UTC-2\n', '\n', '    uint256 public startStage3 = 1533679200; // Wednesday, 08-Aug-18 00:00:00 UTC-2 \n', '    uint256 public endStage3 = 1535752799; // Friday, 31-Aug-18 23:59:59 UTC-2\n', '\n', '    uint256 public buyPrice = 920000000000000000; // 0.92 Ether\n', '    \n', '    uint256 public ethUSD;\n', '\n', '    uint256 public weisRaised = 0;\n', '\n', '    string public stageNow = "NoSale";\n', '    \n', '    event Authorized(address wlCandidate, uint timestamp);\n', '    event Revoked(address wlCandidate, uint timestamp);\n', '\n', '    constructor() public {}\n', '\n', '    function setToken (ERC20 _token) public onlyOwner {\n', '        token = _token;\n', '    }\n', '    \n', '    /*******************************************************************************\n', '     * Whitelist&#39;s section\n', '     */\n', '    function authorize(address wlCandidate) public onlyOwner  {\n', '        require(wlCandidate != address(0x0));\n', '        require(!isWhitelisted(wlCandidate));\n', '        whitelist[wlCandidate] = true;\n', '        emit Authorized(wlCandidate, now);\n', '    }\n', '\n', '    function revoke(address wlCandidate) public  onlyOwner {\n', '        whitelist[wlCandidate] = false;\n', '        emit Revoked(wlCandidate, now);\n', '    }\n', '\n', '    function isWhitelisted(address wlCandidate) public view returns(bool) {\n', '        return whitelist[wlCandidate];\n', '    }\n', '    \n', '    /*******************************************************************************\n', '     * Setter&#39;s Section\n', '     */\n', '\n', '    function setStartCloseSale(uint256 newStartSale) public onlyOwner {\n', '        startCloseSale = newStartSale;\n', '    }\n', '\n', '    function setEndCloseSale(uint256 newEndSale) public onlyOwner{\n', '        endCloseSale = newEndSale;\n', '    }\n', '\n', '    function setStartStage1(uint256 newsetStage2) public onlyOwner{\n', '        startStage1 = newsetStage2;\n', '    }\n', '\n', '    function setEndStage1(uint256 newsetStage3) public onlyOwner{\n', '        endStage1 = newsetStage3;\n', '    }\n', '\n', '    function setStartStage2(uint256 newsetStage4) public onlyOwner{\n', '        startStage2 = newsetStage4;\n', '    }\n', '\n', '    function setEndStage2(uint256 newsetStage5) public onlyOwner{\n', '        endStage2 = newsetStage5;\n', '    }\n', '\n', '    function setStartStage3(uint256 newsetStage5) public onlyOwner{\n', '        startStage3 = newsetStage5;\n', '    }\n', '\n', '    function setEndStage3(uint256 newsetStage5) public onlyOwner{\n', '        endStage3 = newsetStage5;\n', '    }\n', '\n', '    function setPrices(uint256 newPrice) public onlyOwner {\n', '        buyPrice = newPrice;\n', '    }\n', '    \n', '    function setETHUSD(uint256 _ethUSD) public onlyOwner { \n', '        ethUSD = _ethUSD;\n', '    \n', '    \n', '    }\n', '    \n', '    /*******************************************************************************\n', '     * Payable Section\n', '     */\n', '    function ()  public payable {\n', '        \n', '        require(msg.value >= (1*1e18/ethUSD*100));\n', '\n', '        if (now >= startCloseSale || now <= endCloseSale) {\n', '            require(isWhitelisted(msg.sender));\n', '            closeSale(msg.sender, msg.value);\n', '            stageNow = "Close Sale for Whitelist&#39;s members";\n', '            \n', '        } else if (now >= startStage1 || now <= endStage1) {\n', '            sale1(msg.sender, msg.value);\n', '            stageNow = "Stage 1";\n', '\n', '        } else if (now >= startStage2 || now <= endStage2) {\n', '            sale2(msg.sender, msg.value);\n', '             stageNow = "Stage 2";\n', '\n', '        } else if (now >= startStage3 || now <= endStage3) {\n', '            sale3(msg.sender, msg.value);\n', '             stageNow = "Stage 3";\n', '\n', '        } else {\n', '            stageNow = "No Sale";\n', '            revert();\n', '        } \n', '    }\n', '    \n', '    // issue token in a period of closed sales\n', '    function closeSale(address _investor, uint256 _value) internal {\n', '\n', '        uint256 tokens = _value.mul(1e18).div(buyPrice); // 68%\n', '        uint256 bonusTokens = tokens.mul(30).div(100); // + 30% per stage\n', '        tokens = tokens.add(bonusTokens); \n', '        token.transferFromICO(_investor, tokens);\n', '        weisRaised = weisRaised.add(msg.value);\n', '\n', '        uint256 tokensReserve = tokens.mul(15).div(68); // 15 %\n', '        token.transferFromICO(reserve, tokensReserve);\n', '\n', '        uint256 tokensBoynty = tokens.div(34); // 2 %\n', '        token.transferFromICO(bounty, tokensBoynty);\n', '\n', '        uint256 tokensPromo = tokens.mul(15).div(68); // 15%\n', '        token.transferFromICO(promouters, tokensPromo);\n', '    }\n', '    \n', '    // the issue of tokens in period 1 sales\n', '    function sale1(address _investor, uint256 _value) internal {\n', '\n', '        uint256 tokens = _value.mul(1e18).div(buyPrice); // 66% \n', '\n', '        uint256 bonusTokens = tokens.mul(10).div(100); // + 10% per stage\n', '        tokens = tokens.add(bonusTokens); // 66 %\n', '\n', '        token.transferFromICO(_investor, tokens);\n', '\n', '        uint256 tokensReserve = tokens.mul(5).div(22); // 15 %\n', '        token.transferFromICO(reserve, tokensReserve);\n', '\n', '        uint256 tokensBoynty = tokens.mul(2).div(33); // 4 %\n', '        token.transferFromICO(bounty, tokensBoynty);\n', '\n', '        uint256 tokensPromo = tokens.mul(5).div(22); // 15%\n', '        token.transferFromICO(promouters, tokensPromo);\n', '\n', '        weisRaised = weisRaised.add(msg.value);\n', '    }\n', '    \n', '    // the issue of tokens in period 2 sales\n', '    function sale2(address _investor, uint256 _value) internal {\n', '\n', '        uint256 tokens = _value.mul(1e18).div(buyPrice); // 64 %\n', '\n', '        uint256 bonusTokens = tokens.mul(5).div(100); // + 5% \n', '        tokens = tokens.add(bonusTokens);\n', '\n', '        token.transferFromICO(_investor, tokens);\n', '\n', '        uint256 tokensReserve = tokens.mul(15).div(64); // 15 %\n', '        token.transferFromICO(reserve, tokensReserve);\n', '\n', '        uint256 tokensBoynty = tokens.mul(3).div(32); // 6 %\n', '        token.transferFromICO(bounty, tokensBoynty);\n', '\n', '        uint256 tokensPromo = tokens.mul(15).div(64); // 15%\n', '        token.transferFromICO(promouters, tokensPromo);\n', '\n', '        weisRaised = weisRaised.add(msg.value);\n', '    }\n', '\n', '    // the issue of tokens in period 3 sales\n', '    function sale3(address _investor, uint256 _value) internal {\n', '\n', '        uint256 tokens = _value.mul(1e18).div(buyPrice); // 62 %\n', '        token.transferFromICO(_investor, tokens);\n', '\n', '        uint256 tokensReserve = tokens.mul(15).div(62); // 15 %\n', '        token.transferFromICO(reserve, tokensReserve);\n', '\n', '        uint256 tokensBoynty = tokens.mul(4).div(31); // 8 %\n', '        token.transferFromICO(bounty, tokensBoynty);\n', '\n', '        uint256 tokensPromo = tokens.mul(15).div(62); // 15%\n', '        token.transferFromICO(promouters, tokensPromo);\n', '\n', '        weisRaised = weisRaised.add(msg.value);\n', '    }\n', '\n', '    /*******************************************************************************\n', '     * Manual Management\n', '     */\n', '    function transferEthFromContract(address _to, uint256 amount) public onlyOwner {\n', '        _to.transfer(amount);\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '    interface ERC20 {\n', '        function transfer(address _beneficiary, uint256 _tokenAmount) external returns (bool);\n', '        function transferFromICO(address _to, uint256 _value) external returns(bool);\n', '    }\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract MainSale is Ownable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    ERC20 public token;\n', '    \n', '    address reserve = 0x611200beabeac749071b30db84d17ec205654463;\n', '    address promouters = 0x2632d043ac8bbbad07c7dabd326ade3ca4f6b53e;\n', '    address bounty = 0xff5a1984fade92bfb0e5fd7986186d432545b834;\n', '\n', '    uint256 public constant decimals = 18;\n', '    uint256 constant dec = 10**decimals;\n', '\n', '    mapping(address=>bool) whitelist;\n', '\n', '    uint256 public startCloseSale = now; // start // 1.07.2018 10:00 UTC\n', '    uint256 public endCloseSale = 1532987999; // Monday, 30-Jul-18 23:59:59 UTC-2\n', '\n', '    uint256 public startStage1 = 1532988001; // Tuesday, 31-Jul-18 00:00:01 UTC-2\n', '    uint256 public endStage1 = 1533074399; // Tuesday, 31-Jul-18 23:59:59 UTC-2\n', '\n', '    uint256 public startStage2 = 1533074400; // Wednesday, 01-Aug-18 00:00:00 UTC-2\n', '    uint256 public endStage2 = 1533679199; // Tuesday, 07-Aug-18 23:59:59 UTC-2\n', '\n', '    uint256 public startStage3 = 1533679200; // Wednesday, 08-Aug-18 00:00:00 UTC-2 \n', '    uint256 public endStage3 = 1535752799; // Friday, 31-Aug-18 23:59:59 UTC-2\n', '\n', '    uint256 public buyPrice = 920000000000000000; // 0.92 Ether\n', '    \n', '    uint256 public ethUSD;\n', '\n', '    uint256 public weisRaised = 0;\n', '\n', '    string public stageNow = "NoSale";\n', '    \n', '    event Authorized(address wlCandidate, uint timestamp);\n', '    event Revoked(address wlCandidate, uint timestamp);\n', '\n', '    constructor() public {}\n', '\n', '    function setToken (ERC20 _token) public onlyOwner {\n', '        token = _token;\n', '    }\n', '    \n', '    /*******************************************************************************\n', "     * Whitelist's section\n", '     */\n', '    function authorize(address wlCandidate) public onlyOwner  {\n', '        require(wlCandidate != address(0x0));\n', '        require(!isWhitelisted(wlCandidate));\n', '        whitelist[wlCandidate] = true;\n', '        emit Authorized(wlCandidate, now);\n', '    }\n', '\n', '    function revoke(address wlCandidate) public  onlyOwner {\n', '        whitelist[wlCandidate] = false;\n', '        emit Revoked(wlCandidate, now);\n', '    }\n', '\n', '    function isWhitelisted(address wlCandidate) public view returns(bool) {\n', '        return whitelist[wlCandidate];\n', '    }\n', '    \n', '    /*******************************************************************************\n', "     * Setter's Section\n", '     */\n', '\n', '    function setStartCloseSale(uint256 newStartSale) public onlyOwner {\n', '        startCloseSale = newStartSale;\n', '    }\n', '\n', '    function setEndCloseSale(uint256 newEndSale) public onlyOwner{\n', '        endCloseSale = newEndSale;\n', '    }\n', '\n', '    function setStartStage1(uint256 newsetStage2) public onlyOwner{\n', '        startStage1 = newsetStage2;\n', '    }\n', '\n', '    function setEndStage1(uint256 newsetStage3) public onlyOwner{\n', '        endStage1 = newsetStage3;\n', '    }\n', '\n', '    function setStartStage2(uint256 newsetStage4) public onlyOwner{\n', '        startStage2 = newsetStage4;\n', '    }\n', '\n', '    function setEndStage2(uint256 newsetStage5) public onlyOwner{\n', '        endStage2 = newsetStage5;\n', '    }\n', '\n', '    function setStartStage3(uint256 newsetStage5) public onlyOwner{\n', '        startStage3 = newsetStage5;\n', '    }\n', '\n', '    function setEndStage3(uint256 newsetStage5) public onlyOwner{\n', '        endStage3 = newsetStage5;\n', '    }\n', '\n', '    function setPrices(uint256 newPrice) public onlyOwner {\n', '        buyPrice = newPrice;\n', '    }\n', '    \n', '    function setETHUSD(uint256 _ethUSD) public onlyOwner { \n', '        ethUSD = _ethUSD;\n', '    \n', '    \n', '    }\n', '    \n', '    /*******************************************************************************\n', '     * Payable Section\n', '     */\n', '    function ()  public payable {\n', '        \n', '        require(msg.value >= (1*1e18/ethUSD*100));\n', '\n', '        if (now >= startCloseSale || now <= endCloseSale) {\n', '            require(isWhitelisted(msg.sender));\n', '            closeSale(msg.sender, msg.value);\n', '            stageNow = "Close Sale for Whitelist\'s members";\n', '            \n', '        } else if (now >= startStage1 || now <= endStage1) {\n', '            sale1(msg.sender, msg.value);\n', '            stageNow = "Stage 1";\n', '\n', '        } else if (now >= startStage2 || now <= endStage2) {\n', '            sale2(msg.sender, msg.value);\n', '             stageNow = "Stage 2";\n', '\n', '        } else if (now >= startStage3 || now <= endStage3) {\n', '            sale3(msg.sender, msg.value);\n', '             stageNow = "Stage 3";\n', '\n', '        } else {\n', '            stageNow = "No Sale";\n', '            revert();\n', '        } \n', '    }\n', '    \n', '    // issue token in a period of closed sales\n', '    function closeSale(address _investor, uint256 _value) internal {\n', '\n', '        uint256 tokens = _value.mul(1e18).div(buyPrice); // 68%\n', '        uint256 bonusTokens = tokens.mul(30).div(100); // + 30% per stage\n', '        tokens = tokens.add(bonusTokens); \n', '        token.transferFromICO(_investor, tokens);\n', '        weisRaised = weisRaised.add(msg.value);\n', '\n', '        uint256 tokensReserve = tokens.mul(15).div(68); // 15 %\n', '        token.transferFromICO(reserve, tokensReserve);\n', '\n', '        uint256 tokensBoynty = tokens.div(34); // 2 %\n', '        token.transferFromICO(bounty, tokensBoynty);\n', '\n', '        uint256 tokensPromo = tokens.mul(15).div(68); // 15%\n', '        token.transferFromICO(promouters, tokensPromo);\n', '    }\n', '    \n', '    // the issue of tokens in period 1 sales\n', '    function sale1(address _investor, uint256 _value) internal {\n', '\n', '        uint256 tokens = _value.mul(1e18).div(buyPrice); // 66% \n', '\n', '        uint256 bonusTokens = tokens.mul(10).div(100); // + 10% per stage\n', '        tokens = tokens.add(bonusTokens); // 66 %\n', '\n', '        token.transferFromICO(_investor, tokens);\n', '\n', '        uint256 tokensReserve = tokens.mul(5).div(22); // 15 %\n', '        token.transferFromICO(reserve, tokensReserve);\n', '\n', '        uint256 tokensBoynty = tokens.mul(2).div(33); // 4 %\n', '        token.transferFromICO(bounty, tokensBoynty);\n', '\n', '        uint256 tokensPromo = tokens.mul(5).div(22); // 15%\n', '        token.transferFromICO(promouters, tokensPromo);\n', '\n', '        weisRaised = weisRaised.add(msg.value);\n', '    }\n', '    \n', '    // the issue of tokens in period 2 sales\n', '    function sale2(address _investor, uint256 _value) internal {\n', '\n', '        uint256 tokens = _value.mul(1e18).div(buyPrice); // 64 %\n', '\n', '        uint256 bonusTokens = tokens.mul(5).div(100); // + 5% \n', '        tokens = tokens.add(bonusTokens);\n', '\n', '        token.transferFromICO(_investor, tokens);\n', '\n', '        uint256 tokensReserve = tokens.mul(15).div(64); // 15 %\n', '        token.transferFromICO(reserve, tokensReserve);\n', '\n', '        uint256 tokensBoynty = tokens.mul(3).div(32); // 6 %\n', '        token.transferFromICO(bounty, tokensBoynty);\n', '\n', '        uint256 tokensPromo = tokens.mul(15).div(64); // 15%\n', '        token.transferFromICO(promouters, tokensPromo);\n', '\n', '        weisRaised = weisRaised.add(msg.value);\n', '    }\n', '\n', '    // the issue of tokens in period 3 sales\n', '    function sale3(address _investor, uint256 _value) internal {\n', '\n', '        uint256 tokens = _value.mul(1e18).div(buyPrice); // 62 %\n', '        token.transferFromICO(_investor, tokens);\n', '\n', '        uint256 tokensReserve = tokens.mul(15).div(62); // 15 %\n', '        token.transferFromICO(reserve, tokensReserve);\n', '\n', '        uint256 tokensBoynty = tokens.mul(4).div(31); // 8 %\n', '        token.transferFromICO(bounty, tokensBoynty);\n', '\n', '        uint256 tokensPromo = tokens.mul(15).div(62); // 15%\n', '        token.transferFromICO(promouters, tokensPromo);\n', '\n', '        weisRaised = weisRaised.add(msg.value);\n', '    }\n', '\n', '    /*******************************************************************************\n', '     * Manual Management\n', '     */\n', '    function transferEthFromContract(address _to, uint256 amount) public onlyOwner {\n', '        _to.transfer(amount);\n', '    }\n', '}']
