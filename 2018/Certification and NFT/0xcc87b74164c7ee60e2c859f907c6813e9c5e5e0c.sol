['pragma solidity ^0.4.24;\n', '\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(msg.sender != address(0));\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_from != address(0));\n', '\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   * https://github.com/OpenZeppelin\n', '   * openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', 'contract HiGold is StandardToken, Ownable {\n', '\n', '    /*** SAFEMATH ***/\n', '    using SafeMath for uint256;\n', '\n', '    /*** EVENTS ***/\n', '    event Deposit(address indexed manager, address indexed user, uint value);\n', '    event Withdrawl(address indexed manager, address indexed user, uint value);\n', '\n', '    /*** CONSTANTS ***/\n', '    // ERC20\n', '    string public name = "HiGold Community Token";\n', '    string public symbol = "HIG";\n', '    uint256 public decimals = 18;\n', '\n', '    /*** STORAGE ***/\n', '    // HiGold Standard\n', '    uint256 public inVaults;\n', '    address public miner;\n', '    mapping (address => mapping (address => uint256)) inVault;\n', '\n', '    /*** MODIFIERS  ***/\n', '    modifier onlyMiner() {\n', '        require(msg.sender == miner);\n', '        _;\n', '    }\n', '\n', '    /*** FUNCTIONS ***/\n', '    // Constructor function\n', '    constructor() public {\n', '        totalSupply = 105 * (10 ** 26);\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', '    // Public functions\n', '    function totalInVaults() public constant returns (uint256 amount) {\n', '        return inVaults;\n', '    }\n', '\n', '    function balanceOfOwnerInVault\n', '    (\n', '        address _vault,\n', '        address _owner\n', '    )\n', '        public\n', '        constant\n', '        returns (uint256 balance)\n', '    {\n', '        return inVault[_vault][_owner];\n', '    }\n', '\n', '    function deposit\n', '    (\n', '        address _vault,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        inVaults = inVaults.add(_value);\n', '        inVault[_vault][msg.sender] = inVault[_vault][msg.sender].add(_value);\n', '        emit Deposit(_vault, msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function withdraw\n', '    (\n', '        address _vault,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        inVault[_vault][msg.sender] = inVault[_vault][msg.sender].sub(_value);\n', '        inVaults = inVaults.sub(_value);\n', '        balances[msg.sender] = balances[msg.sender].add(_value);\n', '        emit Withdrawl(_vault, msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function accounting\n', '    (\n', '        address _credit, // -\n', '        address _debit, // +\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        inVault[msg.sender][_credit] = inVault[msg.sender][_credit].sub(_value);\n', '        inVault[msg.sender][_debit] = inVault[msg.sender][_debit].add(_value);\n', '        return true;\n', '    }\n', '\n', '    /// For Mining\n', '    function startMining(address _minerContract) public  onlyOwner {\n', '        require(miner == address(0));\n', '        miner = _minerContract;\n', '        inVault[miner][miner] = 105 * (10 ** 26);\n', '    }\n', '    //// Update contract overview infomations when new token is mined.\n', '    function updateInfo(uint _value) public onlyMiner returns(bool) {\n', '        totalSupply = totalSupply.add(_value);\n', '        inVaults = inVaults.add(_value);\n', '        return true;\n', '    }\n', '    //// Change miner contract if needed.\n', '    function setNewMiner(address _newMiner) public onlyMiner returns(bool) {\n', '        miner = _newMiner;\n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(msg.sender != address(0));\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_from != address(0));\n', '\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   * https://github.com/OpenZeppelin\n', '   * openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', 'contract HiGold is StandardToken, Ownable {\n', '\n', '    /*** SAFEMATH ***/\n', '    using SafeMath for uint256;\n', '\n', '    /*** EVENTS ***/\n', '    event Deposit(address indexed manager, address indexed user, uint value);\n', '    event Withdrawl(address indexed manager, address indexed user, uint value);\n', '\n', '    /*** CONSTANTS ***/\n', '    // ERC20\n', '    string public name = "HiGold Community Token";\n', '    string public symbol = "HIG";\n', '    uint256 public decimals = 18;\n', '\n', '    /*** STORAGE ***/\n', '    // HiGold Standard\n', '    uint256 public inVaults;\n', '    address public miner;\n', '    mapping (address => mapping (address => uint256)) inVault;\n', '\n', '    /*** MODIFIERS  ***/\n', '    modifier onlyMiner() {\n', '        require(msg.sender == miner);\n', '        _;\n', '    }\n', '\n', '    /*** FUNCTIONS ***/\n', '    // Constructor function\n', '    constructor() public {\n', '        totalSupply = 105 * (10 ** 26);\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', '    // Public functions\n', '    function totalInVaults() public constant returns (uint256 amount) {\n', '        return inVaults;\n', '    }\n', '\n', '    function balanceOfOwnerInVault\n', '    (\n', '        address _vault,\n', '        address _owner\n', '    )\n', '        public\n', '        constant\n', '        returns (uint256 balance)\n', '    {\n', '        return inVault[_vault][_owner];\n', '    }\n', '\n', '    function deposit\n', '    (\n', '        address _vault,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        inVaults = inVaults.add(_value);\n', '        inVault[_vault][msg.sender] = inVault[_vault][msg.sender].add(_value);\n', '        emit Deposit(_vault, msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function withdraw\n', '    (\n', '        address _vault,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        inVault[_vault][msg.sender] = inVault[_vault][msg.sender].sub(_value);\n', '        inVaults = inVaults.sub(_value);\n', '        balances[msg.sender] = balances[msg.sender].add(_value);\n', '        emit Withdrawl(_vault, msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function accounting\n', '    (\n', '        address _credit, // -\n', '        address _debit, // +\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        inVault[msg.sender][_credit] = inVault[msg.sender][_credit].sub(_value);\n', '        inVault[msg.sender][_debit] = inVault[msg.sender][_debit].add(_value);\n', '        return true;\n', '    }\n', '\n', '    /// For Mining\n', '    function startMining(address _minerContract) public  onlyOwner {\n', '        require(miner == address(0));\n', '        miner = _minerContract;\n', '        inVault[miner][miner] = 105 * (10 ** 26);\n', '    }\n', '    //// Update contract overview infomations when new token is mined.\n', '    function updateInfo(uint _value) public onlyMiner returns(bool) {\n', '        totalSupply = totalSupply.add(_value);\n', '        inVaults = inVaults.add(_value);\n', '        return true;\n', '    }\n', '    //// Change miner contract if needed.\n', '    function setNewMiner(address _newMiner) public onlyMiner returns(bool) {\n', '        miner = _newMiner;\n', '        return true;\n', '    }\n', '\n', '}']
