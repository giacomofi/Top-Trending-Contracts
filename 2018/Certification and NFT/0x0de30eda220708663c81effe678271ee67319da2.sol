['pragma solidity 0.4.24;\n', '\n', '// File: contracts\\lib\\Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner, "only owner is able to call this function");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts\\lib\\Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: contracts\\lib\\SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts\\lib\\Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale - modified from zeppelin-solidity library\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    // address where funds are collected\n', '    address public wallet;\n', '\n', '    // how many token units a buyer gets per wei\n', '    uint256 public rate;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '\n', '    // event for token purchase logging\n', '    // purchaser who paid for the tokens\n', '    // beneficiary who got the tokens\n', '    // value weis paid for purchase\n', '    // amount amount of tokens purchased\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    function initCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '        require(\n', '            startTime == 0 && endTime == 0 && rate == 0 && wallet == address(0),\n', '            "Global variables must be empty when initializing crowdsale!"\n', '        );\n', '        require(_startTime >= now, "_startTime must be more than current time!");\n', '        require(_endTime >= _startTime, "_endTime must be more than _startTime!");\n', '        require(_wallet != address(0), "_wallet parameter must not be empty!");\n', '\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return now > endTime;\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '}\n', '\n', '// File: contracts\\lib\\FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '// File: contracts\\lib\\ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts\\Whitelist.sol\n', '\n', '/**\n', ' * @title Whitelist - crowdsale whitelist contract\n', ' * @author Gustavo Guimaraes - <gustavo@starbase.co>\n', ' */\n', 'contract Whitelist is Ownable {\n', '    mapping(address => bool) public allowedAddresses;\n', '\n', '    event WhitelistUpdated(uint256 timestamp, string operation, address indexed member);\n', '\n', '    /**\n', '    * @dev Adds single address to whitelist.\n', '    * @param _address Address to be added to the whitelist\n', '    */\n', '    function addToWhitelist(address _address) external onlyOwner {\n', '        allowedAddresses[_address] = true;\n', '        emit WhitelistUpdated(now, "Added", _address);\n', '    }\n', '\n', '    /**\n', '     * @dev add various whitelist addresses\n', '     * @param _addresses Array of ethereum addresses\n', '     */\n', '    function addManyToWhitelist(address[] _addresses) external onlyOwner {\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            allowedAddresses[_addresses[i]] = true;\n', '            emit WhitelistUpdated(now, "Added", _addresses[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev remove whitelist addresses\n', '     * @param _addresses Array of ethereum addresses\n', '     */\n', '    function removeManyFromWhitelist(address[] _addresses) public onlyOwner {\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            allowedAddresses[_addresses[i]] = false;\n', '            emit WhitelistUpdated(now, "Removed", _addresses[i]);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\TokenSaleInterface.sol\n', '\n', '/**\n', ' * @title TokenSale contract interface\n', ' */\n', 'interface TokenSaleInterface {\n', '    function init\n', '    (\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        address _whitelist,\n', '        address _starToken,\n', '        address _companyToken,\n', '        uint256 _rate,\n', '        uint256 _starRate,\n', '        address _wallet,\n', '        uint256 _crowdsaleCap,\n', '        bool    _isWeiAccepted\n', '    )\n', '    external;\n', '}\n', '\n', '// File: contracts\\TokenSaleForAlreadyDeployedERC20Tokens.sol\n', '\n', '/**\n', ' * @title Token Sale contract - crowdsale of company tokens.\n', ' * @author Gustavo Guimaraes - <gustavo@starbase.co>\n', ' */\n', 'contract TokenSaleForAlreadyDeployedERC20Tokens is FinalizableCrowdsale, Pausable {\n', '    uint256 public crowdsaleCap;\n', '    // amount of raised money in STAR\n', '    uint256 public starRaised;\n', '    uint256 public starRate;\n', '    bool public isWeiAccepted;\n', '\n', '    // external contracts\n', '    Whitelist public whitelist;\n', '    ERC20 public starToken;\n', '    // The token being sold\n', '    ERC20 public tokenOnSale;\n', '\n', '    event TokenRateChanged(uint256 previousRate, uint256 newRate);\n', '    event TokenStarRateChanged(uint256 previousStarRate, uint256 newStarRate);\n', '    event TokenPurchaseWithStar(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @dev initialization function\n', '     * @param _startTime The timestamp of the beginning of the crowdsale\n', '     * @param _endTime Timestamp when the crowdsale will finish\n', '     * @param _whitelist contract containing the whitelisted addresses\n', '     * @param _starToken STAR token contract address\n', '     * @param _tokenOnSale ERC20 token for sale\n', '     * @param _rate The token rate per ETH\n', '     * @param _starRate The token rate per STAR\n', '     * @param _wallet Multisig wallet that will hold the crowdsale funds.\n', '     * @param _crowdsaleCap Cap for the token sale\n', '     * @param _isWeiAccepted Bool for acceptance of ether in token sale\n', '     */\n', '    function init(\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        address _whitelist,\n', '        address _starToken,\n', '        address _tokenOnSale,\n', '        uint256 _rate,\n', '        uint256 _starRate,\n', '        address _wallet,\n', '        uint256 _crowdsaleCap,\n', '        bool    _isWeiAccepted\n', '    )\n', '        external\n', '    {\n', '        require(\n', '            whitelist == address(0) &&\n', '            starToken == address(0) &&\n', '            rate == 0 &&\n', '            starRate == 0 &&\n', '            tokenOnSale == address(0) &&\n', '            crowdsaleCap == 0,\n', '            "Global variables should not have been set before!"\n', '        );\n', '\n', '        require(\n', '            _whitelist != address(0) &&\n', '            _starToken != address(0) &&\n', '            !(_rate == 0 && _starRate == 0) &&\n', '            _tokenOnSale != address(0) &&\n', '            _crowdsaleCap != 0,\n', '            "Parameter variables cannot be empty!"\n', '        );\n', '\n', '        initCrowdsale(_startTime, _endTime, _rate, _wallet);\n', '        tokenOnSale = ERC20(_tokenOnSale);\n', '        whitelist = Whitelist(_whitelist);\n', '        starToken = ERC20(_starToken);\n', '        starRate = _starRate;\n', '        isWeiAccepted = _isWeiAccepted;\n', '        owner = tx.origin;\n', '\n', '        crowdsaleCap = _crowdsaleCap;\n', '    }\n', '\n', '    modifier isWhitelisted(address beneficiary) {\n', '        require(whitelist.allowedAddresses(beneficiary), "Beneficiary not whitelisted!");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev override fallback function. cannot use it\n', '     */\n', '    function () external payable {\n', '        revert("No fallback function defined!");\n', '    }\n', '\n', '    /**\n', '     * @dev change crowdsale ETH rate\n', '     * @param newRate Figure that corresponds to the new ETH rate per token\n', '     */\n', '    function setRate(uint256 newRate) external onlyOwner {\n', '        require(newRate != 0, "ETH rate must be more than 0");\n', '\n', '        emit TokenRateChanged(rate, newRate);\n', '        rate = newRate;\n', '    }\n', '\n', '    /**\n', '     * @dev change crowdsale STAR rate\n', '     * @param newStarRate Figure that corresponds to the new STAR rate per token\n', '     */\n', '    function setStarRate(uint256 newStarRate) external onlyOwner {\n', '        require(newStarRate != 0, "Star rate must be more than 0!");\n', '\n', '        emit TokenStarRateChanged(starRate, newStarRate);\n', '        starRate = newStarRate;\n', '    }\n', '\n', '    /**\n', '     * @dev allows sale to receive wei or not\n', '     */\n', '    function setIsWeiAccepted(bool _isWeiAccepted) external onlyOwner {\n', '        require(rate != 0, "When accepting Wei you need to set a conversion rate!");\n', '        isWeiAccepted = _isWeiAccepted;\n', '    }\n', '\n', '    /**\n', '     * @dev function that allows token purchases with STAR\n', '     * @param beneficiary Address of the purchaser\n', '     */\n', '    function buyTokens(address beneficiary)\n', '        public\n', '        payable\n', '        whenNotPaused\n', '        isWhitelisted(beneficiary)\n', '    {\n', '        require(beneficiary != address(0));\n', '        require(validPurchase() && tokenOnSale.balanceOf(address(this)) > 0);\n', '\n', '        if (!isWeiAccepted) {\n', '            require(msg.value == 0);\n', '        } else if (msg.value > 0) {\n', '            buyTokensWithWei(beneficiary);\n', '        }\n', '\n', '        // beneficiary must allow TokenSale address to transfer star tokens on its behalf\n', '        uint256 starAllocationToTokenSale = starToken.allowance(beneficiary, address(this));\n', '        if (starAllocationToTokenSale > 0) {\n', '            // calculate token amount to be created\n', '            uint256 tokens = starAllocationToTokenSale.mul(starRate);\n', '\n', '            //remainder logic\n', '            if (tokens > tokenOnSale.balanceOf(address(this))) {\n', '                tokens = tokenOnSale.balanceOf(address(this));\n', '\n', '                starAllocationToTokenSale = tokens.div(starRate);\n', '            }\n', '\n', '            // update state\n', '            starRaised = starRaised.add(starAllocationToTokenSale);\n', '\n', '            tokenOnSale.transfer(beneficiary, tokens);\n', '            emit TokenPurchaseWithStar(msg.sender, beneficiary, starAllocationToTokenSale, tokens);\n', '\n', '            // forward funds\n', '            starToken.transferFrom(beneficiary, wallet, starAllocationToTokenSale);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev function that allows token purchases with Wei\n', '     * @param beneficiary Address of the purchaser\n', '     */\n', '    function buyTokensWithWei(address beneficiary)\n', '        internal\n', '    {\n', '        uint256 weiAmount = msg.value;\n', '        uint256 weiRefund = 0;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(rate);\n', '\n', '        //remainder logic\n', '        if (tokens > tokenOnSale.balanceOf(address(this))) {\n', '            tokens = tokenOnSale.balanceOf(address(this));\n', '            weiAmount = tokens.div(rate);\n', '\n', '            weiRefund = msg.value.sub(weiAmount);\n', '        }\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        tokenOnSale.transfer(beneficiary, tokens);\n', '        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        wallet.transfer(weiAmount);\n', '        if (weiRefund > 0) {\n', '            msg.sender.transfer(weiRefund);\n', '        }\n', '    }\n', '\n', '    // override Crowdsale#hasEnded to add cap logic\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        if (tokenOnSale.balanceOf(address(this)) == uint(0) && (starRaised > 0 || weiRaised > 0)) {\n', '            return true;\n', '        }\n', '\n', '        return super.hasEnded();\n', '    }\n', '\n', '    /**\n', '     * @dev override Crowdsale#validPurchase\n', '     * @return true if the transaction can buy tokens\n', '     */\n', '    function validPurchase() internal view returns (bool) {\n', '        return now >= startTime && now <= endTime;\n', '    }\n', '\n', '    /**\n', '     * @dev finalizes crowdsale\n', '     */\n', '    function finalization() internal {\n', '        if (tokenOnSale.balanceOf(address(this)) > 0) {\n', '            uint256 remainingTokens = tokenOnSale.balanceOf(address(this));\n', '\n', '            tokenOnSale.transfer(wallet, remainingTokens);\n', '        }\n', '\n', '        super.finalization();\n', '    }\n', '}']