['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' */\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       throw;\n', '     }\n', '     _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' * @dev Implemantation of the basic standart token.\n', ' */\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint _value) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title TRA Protocol Token.\n', 'contract TRAToken is StandardToken {\n', '    string public constant NAME = "TRACoin";\n', '    string public constant SYMBOL = "TRA";\n', '    uint public constant DECIMALS = 18;\n', '\n', '    /// During token sale, we use one consistent price: 50000 TRA/ETH.\n', '    /// We split the entire token sale period into 3 phases, each\n', '    /// phase has a different bonus setting as specified in `bonusPercentages`.\n', '    /// The real price for phase i is `(1 + bonusPercentages[i]/100.0) * BASE_RATE`.\n', '    /// The first phase or early-bird phase has a much higher bonus.\n', '    uint8[10] public bonusPercentages = [\n', '        20,\n', '        10,\n', '        0\n', '    ];\n', '\n', '    uint public constant NUM_OF_PHASE = 3;\n', '  \n', '    /// Each phase contains exactly 29000 Ethereum blocks, which is roughly 7 days,\n', '    /// which makes this 3-phase sale period roughly 21 days.\n', '    uint16 public constant BLOCKS_PER_PHASE = 29000;\n', '\n', '    /// This is where we hold ETH during this token sale. We will not transfer any Ether\n', '    /// out of this address before we invocate the `close` function to finalize the sale. \n', '    /// This promise is not guanranteed by smart contract by can be verified with public\n', '    /// Ethereum transactions data available on several blockchain browsers.\n', '    /// This is the only address from which `start` and `close` can be invocated.\n', '    /// Note: this will be initialized during the contract deployment.\n', '    address public target;\n', '\n', '    /// `firstblock` specifies from which block our token sale starts.\n', '    /// This can only be modified once by the owner of `target` address.\n', '    uint public firstblock = 0;\n', '\n', '    /// Indicates whether unsold token have been issued. This part of TRA token\n', '    /// is managed by the project team and is issued directly to `target`.\n', '    bool public unsoldTokenIssued = false;\n', '\n', '    /// Minimum amount of funds to be raised for the sale to succeed. \n', '    uint256 public constant GOAL = 5000 ether;\n', '\n', '    /// Maximum amount of fund to be raised, the sale ends on reaching this amount.\n', '    uint256 public constant HARD_CAP = 10000 ether;\n', '\n', '    /// Base exchange rate is set to 1 ETH = 50000 TRA.\n', '    uint256 public constant BASE_RATE = 50000;\n', '\n', '    /// A simple stat for emitting events.\n', '    uint public totalEthReceived = 0;\n', '\n', '    /// Issue event index starting from 0.\n', '    uint public issueIndex = 0;\n', '\n', '    /* \n', '     * EVENTS\n', '     */\n', '\n', '    /// Emitted only once after token sale starts.\n', '    event SaleStarted();\n', '\n', '    /// Emitted only once after token sale ended (all token issued).\n', '    event SaleEnded();\n', '\n', '    /// Emitted when a function is invocated by unauthorized addresses.\n', '    event InvalidCaller(address caller);\n', '\n', '    /// Emitted when a function is invocated without the specified preconditions.\n', '    /// This event will not come alone with an exception.\n', '    event InvalidState(bytes msg);\n', '\n', '    /// Emitted for each sucuessful token purchase.\n', '    event Issue(uint issueIndex, address addr, uint ethAmount, uint tokenAmount);\n', '\n', '    /// Emitted if the token sale succeeded.\n', '    event SaleSucceeded();\n', '\n', '    /// Emitted if the token sale failed.\n', '    /// When token sale failed, all Ether will be return to the original purchasing\n', '    /// address with a minor deduction of transaction feeï¼ˆgas)\n', '    event SaleFailed();\n', '\n', '    /*\n', '     * MODIFIERS\n', '     */\n', '\n', '    modifier onlyOwner {\n', '        if (target == msg.sender) {\n', '            _;\n', '        } else {\n', '            InvalidCaller(msg.sender);\n', '            throw;\n', '        }\n', '    }\n', '\n', '    modifier beforeStart {\n', '        if (!saleStarted()) {\n', '            _;\n', '        } else {\n', '            InvalidState("Sale has not started yet");\n', '            throw;\n', '        }\n', '    }\n', '\n', '    modifier inProgress {\n', '        if (saleStarted() && !saleEnded()) {\n', '            _;\n', '        } else {\n', '            InvalidState("Sale is not in progress");\n', '            throw;\n', '        }\n', '    }\n', '\n', '    modifier afterEnd {\n', '        if (saleEnded()) {\n', '            _;\n', '        } else {\n', '            InvalidState("Sale is not ended yet");\n', '            throw;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * CONSTRUCTOR \n', '     * \n', '     * @dev Initialize the TRA Token\n', '     * @param _target The escrow account address\n', '     */\n', '    function TRAToken(address _target) {\n', '        target = _target;\n', '        totalSupply = 10 ** 27;\n', '        balances[target] = totalSupply;\n', '    }\n', '\n', '    /*\n', '     * PUBLIC FUNCTIONS\n', '     */\n', '\n', '    /// @dev Start the token sale.\n', '    /// @param _firstblock The block from which the sale will start.\n', '    function start(uint _firstblock) public onlyOwner beforeStart {\n', '        if (_firstblock <= block.number) {\n', '            // Must specify a block in the future.\n', '            throw;\n', '        }\n', '\n', '        firstblock = _firstblock;\n', '        SaleStarted();\n', '    }\n', '\n', '    /// @dev Triggers unsold tokens to be issued to `target` address.\n', '    function close() public onlyOwner afterEnd {\n', '        if (totalEthReceived < GOAL) {\n', '            SaleFailed();\n', '        } else {\n', '            SaleSucceeded();\n', '        }\n', '    }\n', '\n', '    /// @dev Returns the current price.\n', '    function price() public constant returns (uint tokens) {\n', '        return computeTokenAmount(1 ether);\n', '    }\n', '\n', '    /// @dev This default function allows token to be purchased by directly\n', '    /// sending ether to this smart contract.\n', '    function () payable {\n', '        issueToken(msg.sender);\n', '    }\n', '\n', '    /// @dev Issue token based on Ether received.\n', '    /// @param recipient Address that newly issued token will be sent to.\n', '    function issueToken(address recipient) payable inProgress {\n', '        // We only accept minimum purchase of 0.01 ETH.\n', '        assert(msg.value >= 0.01 ether);\n', '\n', '        // We only accept maximum purchase of 10000 ETH.\n', '        assert(msg.value <= 10000 ether);\n', '\n', '        // We only accept totalEthReceived < HARD_CAP\n', '        uint ethReceived = totalEthReceived + msg.value;\n', '        assert(ethReceived <= HARD_CAP);\n', '\n', '        uint tokens = computeTokenAmount(msg.value);\n', '        totalEthReceived = totalEthReceived.add(msg.value);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '        balances[target] = balances[target].sub(tokens);\n', '\n', '        Issue(\n', '            issueIndex++,\n', '            recipient,\n', '            msg.value,\n', '            tokens\n', '        );\n', '\n', '        if (!target.send(msg.value)) {\n', '            throw;\n', '        }\n', '    }\n', '\n', '    /*\n', '     * INTERNAL FUNCTIONS\n', '     */\n', '  \n', '    /// @dev Compute the amount of TRA token that can be purchased.\n', '    /// @param ethAmount Amount of Ether to purchase TRA.\n', '    /// @return Amount of TRA token to purchase\n', '    function computeTokenAmount(uint ethAmount) internal constant returns (uint tokens) {\n', '        uint phase = (block.number - firstblock).div(BLOCKS_PER_PHASE);\n', '\n', '        // A safe check\n', '        if (phase >= bonusPercentages.length) {\n', '            phase = bonusPercentages.length - 1;\n', '        }\n', '\n', '        uint tokenBase = ethAmount.mul(BASE_RATE);\n', '        uint tokenBonus = tokenBase.mul(bonusPercentages[phase]).div(100);\n', '\n', '        tokens = tokenBase.add(tokenBonus);\n', '    }\n', '\n', '    /// @return true if sale has started, false otherwise.\n', '    function saleStarted() constant returns (bool) {\n', '        return (firstblock > 0 && block.number >= firstblock);\n', '    }\n', '\n', '    /// @return true if sale has ended, false otherwise.\n', '    function saleEnded() constant returns (bool) {\n', '        return firstblock > 0 && (saleDue() || hardCapReached());\n', '    }\n', '\n', '    /// @return true if sale is due when the last phase is finished.\n', '    function saleDue() constant returns (bool) {\n', '        return block.number >= firstblock + BLOCKS_PER_PHASE * NUM_OF_PHASE;\n', '    }\n', '\n', '    /// @return true if the hard cap is reached.\n', '    function hardCapReached() constant returns (bool) {\n', '        return totalEthReceived >= HARD_CAP;\n', '    }\n', '}']