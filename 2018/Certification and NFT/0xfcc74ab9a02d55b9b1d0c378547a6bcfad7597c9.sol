['pragma solidity ^0.4.19;\n', '\n', 'contract token {\n', '    function transfer(address receiver, uint256 amount);\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', 'contract WashCrowdsale {\n', '    using SafeMath for uint256;\n', '    \n', '    address public beneficiary;\n', '    uint256 public fundingGoal;\n', '    uint256 public amountRaised;\n', '    uint256 public preSaleStartdate;\n', '    uint256 public preSaleDeadline;\n', '    uint256 public mainSaleStartdate;\n', '    uint256 public mainSaleDeadline;\n', '    uint256 public price;\n', '    uint256 public fundTransferred;\n', '    token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '    bool crowdsaleClosed = false;\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function WashCrowdsale() {\n', '        beneficiary = 0x7C583E878f851A26A557ba50188Bc8B77d6F0e98;\n', '        fundingGoal = 2100 ether;\n', '        preSaleStartdate = 1523318400;\n', '        preSaleDeadline = 1523836800;\n', '        mainSaleStartdate = 1523923200;\n', '        mainSaleDeadline = 1525564800;\n', '        price = 0.0004166 ether;\n', '        tokenReward = token(0x5b8c5c4835b2B5dAEF18079389FDaEfE9f7a6063);\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable {\n', '        require(!crowdsaleClosed);\n', '        uint256 bonus = 0;\n', '        uint256 amount;\n', '        uint256 ethamount = msg.value;\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].add(ethamount);\n', '        amountRaised = amountRaised.add(ethamount);\n', '        \n', '        //add bounus for funders\n', '        if(now >= preSaleStartdate && now <= preSaleDeadline ){\n', '            amount =  ethamount.div(price);\n', '            bonus = amount.div(8);\n', '            amount = amount.add(bonus);\n', '        }\n', '        else if(now >= mainSaleStartdate && now <= mainSaleDeadline){\n', '            amount =  ethamount.div(price);\n', '        }\n', '        \n', '        amount = amount.mul(1000000000000000000);\n', '        tokenReward.transfer(msg.sender, amount);\n', '        beneficiary.send(ethamount);\n', '        fundTransferred = fundTransferred.add(ethamount);\n', '    }\n', '\n', '    modifier afterDeadline() { if (now >= mainSaleDeadline) _; }\n', '\n', '    /**\n', '     *ends the campaign after deadline\n', '     */\n', '     \n', '    function endCrowdsale() afterDeadline {\n', '\t   if(msg.sender == beneficiary){\n', '         crowdsaleClosed = true;\n', '\t  }\n', '    }\n', '\t\n', '    function ChangeDates(uint256 _preSaleStartdate, uint256 _preSaleDeadline, uint256 _mainSaleStartdate, uint256 _mainSaleDeadline) {\n', '        if(msg.sender == beneficiary){\n', '              if(_preSaleStartdate != 0){\n', '                   preSaleStartdate = _preSaleStartdate;\n', '              }\n', '              if(_preSaleDeadline != 0){\n', '                   preSaleDeadline = _preSaleDeadline;\n', '              }\n', '              if(_mainSaleStartdate != 0){\n', '                   mainSaleStartdate = _mainSaleStartdate;\n', '              }\n', '              if(_mainSaleDeadline != 0){\n', '                   mainSaleDeadline = _mainSaleDeadline; \n', '              }\n', '\t\t\t  \n', '\t\t\t  if(crowdsaleClosed == true){\n', '\t\t\t\t crowdsaleClosed = false;\n', '\t\t\t  }\n', '        }\n', '    }\n', '    \n', '    function getTokensBack() {\n', '        uint256 remaining = tokenReward.balanceOf(this);\n', '        if(msg.sender == beneficiary){\n', '           tokenReward.transfer(beneficiary, remaining); \n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'contract token {\n', '    function transfer(address receiver, uint256 amount);\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', 'contract WashCrowdsale {\n', '    using SafeMath for uint256;\n', '    \n', '    address public beneficiary;\n', '    uint256 public fundingGoal;\n', '    uint256 public amountRaised;\n', '    uint256 public preSaleStartdate;\n', '    uint256 public preSaleDeadline;\n', '    uint256 public mainSaleStartdate;\n', '    uint256 public mainSaleDeadline;\n', '    uint256 public price;\n', '    uint256 public fundTransferred;\n', '    token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '    bool crowdsaleClosed = false;\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function WashCrowdsale() {\n', '        beneficiary = 0x7C583E878f851A26A557ba50188Bc8B77d6F0e98;\n', '        fundingGoal = 2100 ether;\n', '        preSaleStartdate = 1523318400;\n', '        preSaleDeadline = 1523836800;\n', '        mainSaleStartdate = 1523923200;\n', '        mainSaleDeadline = 1525564800;\n', '        price = 0.0004166 ether;\n', '        tokenReward = token(0x5b8c5c4835b2B5dAEF18079389FDaEfE9f7a6063);\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable {\n', '        require(!crowdsaleClosed);\n', '        uint256 bonus = 0;\n', '        uint256 amount;\n', '        uint256 ethamount = msg.value;\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].add(ethamount);\n', '        amountRaised = amountRaised.add(ethamount);\n', '        \n', '        //add bounus for funders\n', '        if(now >= preSaleStartdate && now <= preSaleDeadline ){\n', '            amount =  ethamount.div(price);\n', '            bonus = amount.div(8);\n', '            amount = amount.add(bonus);\n', '        }\n', '        else if(now >= mainSaleStartdate && now <= mainSaleDeadline){\n', '            amount =  ethamount.div(price);\n', '        }\n', '        \n', '        amount = amount.mul(1000000000000000000);\n', '        tokenReward.transfer(msg.sender, amount);\n', '        beneficiary.send(ethamount);\n', '        fundTransferred = fundTransferred.add(ethamount);\n', '    }\n', '\n', '    modifier afterDeadline() { if (now >= mainSaleDeadline) _; }\n', '\n', '    /**\n', '     *ends the campaign after deadline\n', '     */\n', '     \n', '    function endCrowdsale() afterDeadline {\n', '\t   if(msg.sender == beneficiary){\n', '         crowdsaleClosed = true;\n', '\t  }\n', '    }\n', '\t\n', '    function ChangeDates(uint256 _preSaleStartdate, uint256 _preSaleDeadline, uint256 _mainSaleStartdate, uint256 _mainSaleDeadline) {\n', '        if(msg.sender == beneficiary){\n', '              if(_preSaleStartdate != 0){\n', '                   preSaleStartdate = _preSaleStartdate;\n', '              }\n', '              if(_preSaleDeadline != 0){\n', '                   preSaleDeadline = _preSaleDeadline;\n', '              }\n', '              if(_mainSaleStartdate != 0){\n', '                   mainSaleStartdate = _mainSaleStartdate;\n', '              }\n', '              if(_mainSaleDeadline != 0){\n', '                   mainSaleDeadline = _mainSaleDeadline; \n', '              }\n', '\t\t\t  \n', '\t\t\t  if(crowdsaleClosed == true){\n', '\t\t\t\t crowdsaleClosed = false;\n', '\t\t\t  }\n', '        }\n', '    }\n', '    \n', '    function getTokensBack() {\n', '        uint256 remaining = tokenReward.balanceOf(this);\n', '        if(msg.sender == beneficiary){\n', '           tokenReward.transfer(beneficiary, remaining); \n', '        }\n', '    }\n', '}']
