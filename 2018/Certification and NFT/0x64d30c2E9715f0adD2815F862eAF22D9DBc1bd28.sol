['pragma solidity ^0.4.4;\n', '\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint);\n', '  function allowance(address owner, address spender) public constant returns (uint);\n', '\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) public returns (bool ok);\n', '  function approve(address spender, uint value) public returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract BoltToken is ERC20{\n', '    \n', '    address owner = msg.sender;\n', '    \n', '    bool public canPurchase = false;\n', '    \n', '    mapping (address => uint) balances;\n', '    mapping (address => uint) roundContributions;\n', '    address[] roundContributionsIndexes;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '\n', '    uint public currentSupply = 0;\n', '    uint public totalSupply = 32032000000000000000000000;\n', '    \n', '    uint public round = 0;\n', '    uint public roundFunds = 0;\n', '    uint public roundReward = 200200000000000000000000;\n', '    \n', '    string public name = "BOLT token";\n', '    string public symbol = "BOLT";\n', '    uint8 public decimals = 18;\n', '    \n', '    bool public isToken = true;\n', '    \n', '    string public tokenSaleAgreement = "https://bolt-project.net/tsa.pdf";\n', '    \n', '    uint contributionsDistribStep = 0;\n', '    \n', '    event Contribution(address indexed from, uint value);\n', '    event RoundEnd(uint roundNumber);\n', '    \n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        // mitigates the ERC20 short address attack\n', '        if(msg.data.length < (2 * 32) + 4) { return false; }\n', '\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) public  returns (bool success){\n', '        // mitigates the ERC20 short address attack\n', '        if(msg.data.length < (3 * 32) + 4) { return false; }\n', '        \n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    function approve(address _spender, uint _value) public  returns (bool success){\n', '        // mitigates the ERC20 spend/approval race condition\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '        \n', '        allowed[msg.sender][_spender] = _value;\n', '        \n', '        emit Approval(msg.sender, _spender, _value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function enablePurchase() public {\n', '        if(msg.sender != owner && currentSupply>=totalSupply){ return; }\n', '        \n', '        canPurchase = true;\n', '    }\n', '\n', '    function disablePurchase() public {\n', '        if(msg.sender != owner){ return; }\n', '        \n', '        canPurchase = false;\n', '    }\n', '    \n', '    function changeTsaLink(string _link) public {\n', '        if(msg.sender != owner){ return; }\n', '        \n', '        tokenSaleAgreement = _link;\n', '    }\n', '    \n', '    function changeReward(uint _roundReward) public {\n', '        if(msg.sender != owner){ return; }\n', '        \n', '        roundReward = _roundReward;\n', '    }\n', '    \n', '    function nextRound() public {\n', '        if(msg.sender != owner){ return; }\n', '        uint i = contributionsDistribStep;\n', '        while(i < contributionsDistribStep+10 && i<roundContributionsIndexes.length){\n', '            address contributor = roundContributionsIndexes[i];\n', '            balances[contributor] += roundReward*roundContributions[contributor]/roundFunds;\n', '            roundContributions[contributor] = 0;\n', '            i++;\n', '        }\n', '        \n', '        contributionsDistribStep = i;\n', '        \n', '        if(i==roundContributionsIndexes.length){\n', '            delete roundContributionsIndexes;\n', '            \n', '            emit RoundEnd(round);\n', '            \n', '            roundFunds = 0;\n', '            currentSupply += roundReward;\n', '            round += 1;\n', '            contributionsDistribStep = 0;\n', '        }\n', '    }\n', '\n', '    function contribute(bool _acceptConditions) payable public {\n', '        \n', '        if(msg.value == 0){ return; }\n', '        \n', '        if(!canPurchase || !_acceptConditions || msg.value < 10 finney){\n', '            msg.sender.transfer(msg.value);\n', '            return;\n', '        }\n', '        \n', '        owner.transfer(msg.value);\n', '        \n', '        if(roundContributions[msg.sender] == 0){\n', '           roundContributionsIndexes.push(msg.sender); \n', '        }\n', '        \n', '        roundContributions[msg.sender] += msg.value;\n', '        roundFunds += msg.value;\n', '        \n', '        emit Contribution(msg.sender, msg.value);\n', '    }\n', '}']