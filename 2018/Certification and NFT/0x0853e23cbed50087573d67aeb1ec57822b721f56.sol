['pragma solidity ^0.4.17;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address internal owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title TradePlaceCrowdsale\n', ' * @dev TradePlaceCrowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them EXTP tokens based\n', ' * on a EXTP token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(msg.sender, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '\n', '  function burnTokens(uint256 _unsoldTokens) onlyOwner public returns (bool) {\n', '    totalSupply = SafeMath.sub(totalSupply, _unsoldTokens);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Med-h Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale is Ownable, Pausable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  /**\n', '   *  @MintableToken token - Token Object\n', '   *  @address wallet - Wallet Address\n', '   *  @uint256 rate - Tokens per Ether\n', '   *  @uint256 weiRaised - Total funds raised in Ethers\n', '  */\n', '  MintableToken internal token;\n', '  address internal wallet;\n', '  uint256 public rate;\n', '  uint256 internal weiRaised;\n', '\n', ' /**\n', '    *  @uint256 preICOstartTime - pre ICO Start Time\n', '    *  @uint256 preICOEndTime - pre ICO End Time\n', '    *  @uint256 ICOstartTime - ICO Start Time\n', '    *  @uint256 ICOEndTime - ICO End Time\n', '    */\n', '    uint256 public preICOstartTime;\n', '    uint256 public preICOEndTime;\n', '  \n', '    uint256 public ICOstartTime;\n', '    uint256 public ICOEndTime;\n', '    \n', '    // Weeks in UTC\n', '    uint public StageOne;\n', '    uint public StageTwo;\n', '    uint public StageThree;\n', '    uint public StageFour;\n', '\n', '    /**\n', '    *  @uint preIcoBonus \n', '    *  @uint StageOneBonus \n', '    *  @uint StageTwoBonus\n', '    *  @uint StageThreeBonus\n', '    *  @uint StageFourBonus \n', '    */\n', '    uint public StageOneBonus;\n', '    uint public StageTwoBonus;\n', '    uint public StageThreeBonus;\n', '    uint public StageFourBonus;\n', '\n', '    /**\n', '    *  @uint256 totalSupply - Total supply of tokens  ~ 500,000,000 EXTP \n', '    *  @uint256 publicSupply - Total public Supply  ~ 20 percent\n', '    *  @uint256 preIcoSupply - Total PreICO Supply from Public Supply ~ 10 percent\n', '    *  @uint256 icoSupply - Total ICO Supply from Public Supply ~ 10 percent\n', '    *  @uint256 bountySupply - Total Bounty Supply ~ 10 percent\n', '    *  @uint256 reserveSupply - Total Reserve Supply ~ 20 percent\n', '    *  @uint256 advisorSupply - Total Advisor Supply ~ 10 percent\n', '    *  @uint256 founderSupply - Total Founder Supply ~ 20 percent\n', '    *  @uint256 teamSupply - Total team Supply ~ 10 percent\n', '    *  @uint256 rewardSupply - Total reward Supply ~ 10 percent\n', '    */\n', '    uint256 public totalSupply = SafeMath.mul(500000000, 1 ether); // 500000000\n', '    uint256 public publicSupply = SafeMath.mul(100000000, 1 ether);\n', '    uint256 public preIcoSupply = SafeMath.mul(50000000, 1 ether);                     \n', '    uint256 public icoSupply = SafeMath.mul(50000000, 1 ether);\n', '\n', '    uint256 public bountySupply = SafeMath.mul(50000000, 1 ether);\n', '    uint256 public reserveSupply = SafeMath.mul(100000000, 1 ether);\n', '    uint256 public advisorSupply = SafeMath.mul(50000000, 1 ether);\n', '    uint256 public founderSupply = SafeMath.mul(100000000, 1 ether);\n', '    uint256 public teamSupply = SafeMath.mul(50000000, 1 ether);\n', '    uint256 public rewardSupply = SafeMath.mul(50000000, 1 ether);\n', '  \n', '    /**\n', '    *  @uint256 advisorTimeLock - Advisor Timelock \n', '    *  @uint256 founderfounderTimeLock - Founder and Team Timelock \n', '    *  @uint256 reserveTimeLock - Company Reserved Timelock \n', '    *  @uint256 reserveTimeLock - Team Timelock \n', '    */\n', '    uint256 public founderTimeLock;\n', '    uint256 public advisorTimeLock;\n', '    uint256 public reserveTimeLock;\n', '    uint256 public teamTimeLock;\n', '\n', '    // count the number of function calls\n', '    uint public founderCounter = 0; // internal\n', '    uint public teamCounter = 0;\n', '    uint public advisorCounter = 0;\n', '  /**\n', '    *  @bool checkUnsoldTokens - \n', '    *  @bool upgradeICOSupply - Boolean variable updates when the PreICO tokens added to ICO supply\n', '    *  @bool grantReserveSupply - Boolean variable updates when reserve tokens minted\n', '    */\n', '    bool public checkBurnTokens;\n', '    bool public upgradeICOSupply;\n', '    bool public grantReserveSupply;\n', '\n', ' /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    /**\n', '   * function Crowdsale - Parameterized Constructor\n', '   * @param _startTime - StartTime of Crowdsale\n', '   * @param _endTime - EndTime of Crowdsale\n', '   * @param _rate - Tokens against Ether\n', '   * @param _wallet - MultiSignature Wallet Address\n', '   */\n', ' function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    token = createTokenContract();\n', '    preICOstartTime = _startTime; // Dec - 10 - 2018\n', '    preICOEndTime = 1547769600;  //SafeMath.add(preICOstartTime,3 minutes);   Jan - 18 - 2019\n', '    ICOstartTime = 1548633600; //SafeMath.add(preICOEndTime, 1 minutes); Jan - 28 - 2019\n', '    ICOEndTime = _endTime; // March - 19 - 2019\n', '    rate = _rate; \n', '    wallet = _wallet;\n', '\n', '    /** Calculations of Bonuses in private Sale or Pre-ICO */\n', '    StageOneBonus = SafeMath.div(SafeMath.mul(rate,20),100);\n', '    StageTwoBonus = SafeMath.div(SafeMath.mul(rate,15),100);\n', '    StageThreeBonus = SafeMath.div(SafeMath.mul(rate,10),100);\n', '    StageFourBonus = SafeMath.div(SafeMath.mul(rate,5),100);\n', '\n', '    /** ICO bonuses week calculations */\n', '    StageOne = SafeMath.add(ICOstartTime, 12 days);\n', '    StageTwo = SafeMath.add(StageOne, 12 days);\n', '    StageThree = SafeMath.add(StageTwo, 12 days);\n', '    StageFour = SafeMath.add(StageThree, 12 days);\n', '\n', '    /** Vested Period calculations for team and advisors*/\n', '    founderTimeLock = SafeMath.add(ICOEndTime, 3 minutes);\n', '    advisorTimeLock = SafeMath.add(ICOEndTime, 3 minutes);\n', '    reserveTimeLock = SafeMath.add(ICOEndTime, 3 minutes);\n', '    teamTimeLock = SafeMath.add(ICOEndTime, 3 minutes);\n', '    \n', '    checkBurnTokens = false;\n', '    upgradeICOSupply = false;\n', '    grantReserveSupply = false;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '  /**\n', '   * function preIcoTokens - Calculate Tokens in of PRE-ICO \n', '   */\n', '  function preIcoTokens(uint256 weiAmount, uint256 tokens) internal returns (uint256) {\n', '  \n', '    require(preIcoSupply > 0);\n', '\n', '    tokens = SafeMath.add(tokens, weiAmount.mul(rate));\n', '\n', '    require(preIcoSupply >= tokens);\n', '    \n', '    preIcoSupply = preIcoSupply.sub(tokens);        \n', '    publicSupply = publicSupply.sub(tokens);\n', '\n', '    return tokens;     \n', '  }\n', '\n', '  /**\n', '   * function icoTokens - Calculate Tokens in Main ICO\n', '   */\n', '  function icoTokens(uint256 weiAmount, uint256 tokens, uint256 accessTime) internal returns (uint256) {\n', '\n', '    require(icoSupply > 0);\n', '\n', '      if ( accessTime <= StageOne ) { \n', '        tokens = SafeMath.add(tokens, weiAmount.mul(StageOneBonus));\n', '      } else if (( accessTime <= StageTwo ) && (accessTime > StageOne)) { \n', '        tokens = SafeMath.add(tokens, weiAmount.mul(StageTwoBonus));\n', '      } else if (( accessTime <= StageThree ) && (accessTime > StageTwo)) {  \n', '        tokens = SafeMath.add(tokens, weiAmount.mul(StageThreeBonus));\n', '      } else if (( accessTime <= StageFour ) && (accessTime > StageThree)) {  \n', '        tokens = SafeMath.add(tokens, weiAmount.mul(StageFourBonus));\n', '      }\n', '        tokens = SafeMath.add(tokens, weiAmount.mul(rate)); \n', '      require(icoSupply >= tokens);\n', '      \n', '      icoSupply = icoSupply.sub(tokens);        \n', '      publicSupply = publicSupply.sub(tokens);\n', '\n', '      return tokens;\n', '  }\n', '  \n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // High level token purchase function\n', '  function buyTokens(address beneficiary) whenNotPaused public payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '    // minimum investment should be 0.05 ETH \n', '    require((weiAmount >= 50000000000000000));\n', '    \n', '    uint256 accessTime = now;\n', '    uint256 tokens = 0;\n', '\n', '\n', '   if ((accessTime >= preICOstartTime) && (accessTime <= preICOEndTime)) {\n', '           tokens = preIcoTokens(weiAmount, tokens);\n', '\n', '    } else if ((accessTime >= ICOstartTime) && (accessTime <= ICOEndTime)) {\n', '       if (!upgradeICOSupply) {\n', '          icoSupply = SafeMath.add(icoSupply,preIcoSupply);\n', '          upgradeICOSupply = true;\n', '        }\n', '       tokens = icoTokens(weiAmount, tokens, accessTime);\n', '    } else {\n', '      revert();\n', '    }\n', '    \n', '    weiRaised = weiRaised.add(weiAmount);\n', '     if(msg.data.length == 20) {\n', '    address referer = bytesToAddress(bytes(msg.data));\n', '    // self-referrer check\n', '    require(referer != msg.sender);\n', '    uint refererTokens = tokens.mul(6).div(100);\n', '    // bonus for referrer\n', '    token.mint(referer, refererTokens);\n', '  }\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', 'function bytesToAddress(bytes source) internal pure returns(address) {\n', '  uint result;\n', '  uint mul = 1;\n', '  for(uint i = 20; i > 0; i--) {\n', '    result += uint8(source[i-1])*mul;\n', '    mul = mul*256;\n', '  }\n', '  return address(result);\n', '}\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= preICOstartTime && now <= ICOEndTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '      return now > ICOEndTime;\n', '  }\n', '\n', '  function getTokenAddress() onlyOwner public returns (address) {\n', '    return token;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract Allocations is Crowdsale {\n', '\n', '    function bountyDrop(address[] recipients, uint256[] values) public onlyOwner {\n', '\n', '        for (uint256 i = 0; i < recipients.length; i++) {\n', '            values[i] = SafeMath.mul(values[i], 1 ether);\n', '            require(bountySupply >= values[i]);\n', '            bountySupply = SafeMath.sub(bountySupply,values[i]);\n', '\n', '            token.mint(recipients[i], values[i]);\n', '        }\n', '    }\n', '\n', '    function rewardDrop(address[] recipients, uint256[] values) public onlyOwner {\n', '\n', '        for (uint256 i = 0; i < recipients.length; i++) {\n', '            values[i] = SafeMath.mul(values[i], 1 ether);\n', '            require(rewardSupply >= values[i]);\n', '            rewardSupply = SafeMath.sub(rewardSupply,values[i]);\n', '\n', '            token.mint(recipients[i], values[i]);\n', '        }\n', '    }\n', '\n', '    function grantAdvisorToken(address beneficiary ) public onlyOwner {\n', '        require((advisorCounter < 4) && (advisorTimeLock < now));\n', '        advisorTimeLock = SafeMath.add(advisorTimeLock, 2 minutes);\n', '        token.mint(beneficiary,SafeMath.div(advisorSupply, 4));\n', '        advisorCounter = SafeMath.add(advisorCounter, 1);    \n', '    }\n', '\n', '    function grantFounderToken(address founderAddress) public onlyOwner {\n', '        require((founderCounter < 4) && (founderTimeLock < now));\n', '        founderTimeLock = SafeMath.add(founderTimeLock, 2 minutes);\n', '        token.mint(founderAddress,SafeMath.div(founderSupply, 4));\n', '        founderCounter = SafeMath.add(founderCounter, 1);        \n', '    }\n', '\n', '    function grantTeamToken(address teamAddress) public onlyOwner {\n', '        require((teamCounter < 2) && (teamTimeLock < now));\n', '        teamTimeLock = SafeMath.add(teamTimeLock, 2 minutes);\n', '        token.mint(teamAddress,SafeMath.div(teamSupply, 4));\n', '        teamCounter = SafeMath.add(teamCounter, 1);        \n', '    }\n', '\n', '    function grantReserveToken(address beneficiary) public onlyOwner {\n', '        require((!grantReserveSupply) && (now > reserveTimeLock));\n', '        grantReserveSupply = true;\n', '        token.mint(beneficiary,reserveSupply);\n', '        reserveSupply = 0;\n', '    }\n', '\n', '    function transferFunds(address[] recipients, uint256[] values) public onlyOwner {\n', '        require(!checkBurnTokens);\n', '        for (uint256 i = 0; i < recipients.length; i++) {\n', '            values[i] = SafeMath.mul(values[i], 1 ether);\n', '            require(publicSupply >= values[i]);\n', '            publicSupply = SafeMath.sub(publicSupply,values[i]);\n', '            token.mint(recipients[i], values[i]); \n', '            }\n', '    } \n', '\n', '    function burnToken() public onlyOwner returns (bool) {\n', '        require(hasEnded());\n', '        require(!checkBurnTokens);\n', '        // token.burnTokens(icoSupply);\n', '        totalSupply = SafeMath.sub(totalSupply, icoSupply);\n', '        publicSupply = 0;\n', '        preIcoSupply = 0;\n', '        icoSupply = 0;\n', '        checkBurnTokens = true;\n', '\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Extension of Crowdsale with a max amount of funds raised\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 internal cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  bool isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalizeCrowdsale() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '    \n', '    finalization();\n', '    Finalized();\n', '    \n', '    isFinalized = true;\n', '    }\n', '  \n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) {\n', '    require(_wallet != 0x0);\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title RefundableCrowdsale\n', ' * @dev Extension of Crowdsale contract that adds a funding goal, and\n', ' * the possibility of users getting a refund if goal is not met.\n', " * Uses a RefundVault as the crowdsale's vault.\n", ' */\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 internal goal;\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault private vault;\n', '\n', '  function RefundableCrowdsale(uint256 _goal) {\n', '    require(_goal > 0);\n', '    vault = new RefundVault(wallet);\n', '    goal = _goal;\n', '  }\n', '\n', "  // We're overriding the fund forwarding from Crowdsale.\n", '  // In addition to sending the funds, we want to call\n', '  // the RefundVault deposit function\n', '  function forwardFunds() internal {\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '\n', '  // if crowdsale is unsuccessful, investors can claim refunds here\n', '  function claimRefund() public {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  // vault finalization task, called when owner calls finalize()\n', '  function finalization() internal {\n', '    if (goalReached()) { \n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '    super.finalization();\n', '  \n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether funding goal was reached. \n', '   * @return Whether funding goal was reached\n', '   */\n', '  function goalReached() public view returns (bool) {\n', '    return weiRaised >= (goal - (5000 * 1 ether));\n', '  }\n', '\n', '  function getVaultAddress() onlyOwner public returns (address) {\n', '    return vault;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title EXTP Token\n', ' */\n', '\n', '\n', 'contract TradePlaceToken is MintableToken {\n', '\n', '  string public constant name = "Trade PLace";\n', '  string public constant symbol = "EXTP";\n', '  uint8 public constant decimals = 18;\n', '  uint256 public totalSupply = SafeMath.mul(500000000 , 1 ether); //500000000\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract TradePlaceCrowdsale is Crowdsale, CappedCrowdsale, RefundableCrowdsale, Allocations {\n', '    /** Constructor TradePlaceCrowdsale */\n', '    function TradePlaceCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _cap, uint256 _goal, address _wallet)\n', '    CappedCrowdsale(_cap)\n', '    FinalizableCrowdsale()\n', '    RefundableCrowdsale(_goal)\n', '    Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '    {\n', '    }\n', '\n', '    /**TradePlaceToken Contract is generating from here */\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return new TradePlaceToken();\n', '    }\n', '}']