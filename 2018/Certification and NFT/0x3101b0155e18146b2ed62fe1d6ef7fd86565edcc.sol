['pragma solidity 0.4.24;\n', '/**\n', '* @title Circa ICO Contract\n', '* @dev Circa is an ERC-20 Standar Compliant Token\n', '* @author Fares A. Akel C. f.antonio.akel@gmail.com\n', '*/\n', '\n', '/**\n', ' * @title SafeMath by OpenZeppelin\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function burnToken(uint256 _burnedAmount) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title admined\n', ' * @notice This contract is administered\n', ' */\n', 'contract admined {\n', '    mapping(address => uint8) level;\n', '    //0 normal user\n', '    //1 basic admin\n', '    //2 master admin\n', '\n', '    /**\n', '    * @dev This contructor set the first master admin\n', '    */\n', '    constructor() internal {\n', '        level[0xEFfea09df22E0B25655BD3f23D9B531ba47d2A8B] = 2; //Set initial admin\n', '        emit AdminshipUpdated(0xEFfea09df22E0B25655BD3f23D9B531ba47d2A8B,2);\n', '    }\n', '\n', '    /**\n', '    * @dev This modifier limits function execution to the admin by level\n', '    */\n', '    modifier onlyAdmin(uint8 _level) { //A modifier to define admin-only functions\n', '        require(level[msg.sender] >= _level );\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice This function set the adminship level on the contract to _newAdmin\n', '    * @param _newAdmin The new admin of the contract\n', '    * @param _level level to set\n', '    */\n', '    function adminshipLevel(address _newAdmin, uint8 _level) onlyAdmin(2) public { //Admin can be set\n', '        require(_newAdmin != address(0));\n', '        level[_newAdmin] = _level;\n', '        emit AdminshipUpdated(_newAdmin,_level);\n', '    }\n', '\n', '    /**\n', '    * @dev Log Events\n', '    */\n', '    event AdminshipUpdated(address _newAdmin, uint8 _level);\n', '\n', '}\n', '\n', 'contract CircaICO is admined {\n', '\n', '    using SafeMath for uint256;\n', '    //This ico have these possible states\n', '    enum State {\n', '        PreSale, //PreSale - best value\n', '        MainSale,\n', '        Successful\n', '    }\n', '    //Public variables\n', '\n', '    //Time-state Related\n', '    State public state = State.PreSale; //Set initial stage\n', '    uint256 constant public PreSaleStart = 1532908800; //Human time (GMT): Monday, 30 July 2018 0:00:00\n', '    uint256 constant public PreSaleDeadline = 1534118399; //Human time (GMT): Sunday, 12 August 2018 23:59:59\n', '    uint256 constant public MainSaleStart = 1535155200; //Human time (GMT): Saturday, 25 August 2018 0:00:00\n', '    uint256 constant public MainSaleDeadline = 1536105599; //Human time (GMT): Tuesday, 4 September 2018 23:59:59\n', '    uint256 public completedAt; //Set when ico finish\n', '\n', '    //Token-eth related\n', '    uint256 public totalRaised; //eth collected in wei [INFO]\n', '    uint256 public PreSaleDistributed; //presale tokens distributed [INFO]\n', '    uint256 public MainSaleDistributed; //MainSale tokens distributed [INFO]\n', '    uint256 public PreSaleLimit = 260000000 * (10 ** 18); //260M tokens\n', '    uint256 public mainSale1Limit = 190000000 * (10 ** 18); // 190M tokens\n', '    uint256 public totalDistributed; //Whole sale tokens distributed [INFO]\n', '    ERC20Basic public tokenReward; //Token contract address\n', '    uint256 public hardCap = 640000000 * (10 ** 18); // 640M tokens (max tokens to be distributed by contract) [INFO]\n', '    //Contract details\n', '    address public creator;\n', '    string public version = &#39;1&#39;;\n', '\n', '    bool ended = false;\n', '\n', '    //Tokens per eth rates\n', '    uint256[3] rates = [45000,35000,28000];\n', '\n', '    //events for log\n', '    event LogFundrisingInitialized(address _creator);\n', '    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n', '    event LogBeneficiaryPaid(address _beneficiaryAddress);\n', '    event LogContributorsPayout(address _addr, uint _amount);\n', '    event LogFundingSuccessful(uint _totalRaised);\n', '\n', '    //Modifier to prevent execution if ico has ended\n', '    modifier notFinished() {\n', '        require(state != State.Successful);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice ICO constructor\n', '    * @param _addressOfTokenUsedAsReward is the token to distribute\n', '    */\n', '    constructor(ERC20Basic _addressOfTokenUsedAsReward) public {\n', '\n', '        creator = 0xEFfea09df22E0B25655BD3f23D9B531ba47d2A8B; //Creator is set\n', '        tokenReward = _addressOfTokenUsedAsReward; //Token address is set during deployment\n', '\n', '        emit LogFundrisingInitialized(creator);\n', '    }\n', '\n', '    /**\n', '    * @notice contribution handler\n', '    */\n', '    function contribute() public notFinished payable {\n', '        require(msg.value <= 500 ether); //No whales\n', '\n', '        uint256 tokenBought = 0; //tokens bought variable\n', '\n', '        totalRaised = totalRaised.add(msg.value); //ether received updated\n', '\n', '        //Rate of exchange depends on stage\n', '        if (state == State.PreSale){\n', '\n', '            require(now >= PreSaleStart);\n', '\n', '            tokenBought = msg.value.mul(rates[0]);\n', '\n', '            if(PreSaleDistributed <= 30000000 * (10**18)){\n', '              tokenBought = tokenBought.mul(12);\n', '              tokenBought = tokenBought.div(10); //+20%\n', '            } else if (PreSaleDistributed <= 50000000 * (10**18)){\n', '              tokenBought = tokenBought.mul(11);\n', '              tokenBought = tokenBought.div(10); //+10%\n', '            }\n', '\n', '            PreSaleDistributed = PreSaleDistributed.add(tokenBought); //Tokens sold on presale updated\n', '\n', '        } else if (state == State.MainSale){\n', '\n', '            require(now >= MainSaleStart);\n', '\n', '            if(MainSaleDistributed < mainSale1Limit){\n', '              tokenBought = msg.value.mul(rates[1]);\n', '\n', '              if(MainSaleDistributed <= 80000000 * (10**18)){\n', '                tokenBought = tokenBought.mul(12);\n', '                tokenBought = tokenBought.div(10); //+20%\n', '              }\n', '\n', '            } else tokenBought = msg.value.mul(rates[2]);\n', '\n', '            MainSaleDistributed = MainSaleDistributed.add(tokenBought);\n', '\n', '        }\n', '\n', '        totalDistributed = totalDistributed.add(tokenBought); //whole tokens sold updated\n', '\n', '        require(totalDistributed <= hardCap);\n', '        require(tokenReward.transfer(msg.sender, tokenBought));\n', '\n', '        emit LogContributorsPayout(msg.sender, tokenBought);\n', '        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\n', '\n', '        checkIfFundingCompleteOrExpired();\n', '    }\n', '\n', '    /**\n', '    * @notice check status\n', '    */\n', '    function checkIfFundingCompleteOrExpired() public {\n', '\n', '        //If hardCap is reached ICO ends\n', '        if (totalDistributed == hardCap && state != State.Successful){\n', '\n', '            state = State.Successful; //ICO becomes Successful\n', '            completedAt = now; //ICO is complete\n', '\n', '            emit LogFundingSuccessful(totalRaised); //we log the finish\n', '            successful(); //and execute closure\n', '\n', '        } else if(state == State.PreSale && PreSaleDistributed >= PreSaleLimit){\n', '\n', '            state = State.MainSale; //Once presale ends the ICO holds\n', '\n', '        }\n', '    }\n', '\n', '    function forceNextStage() onlyAdmin(2) public {\n', '\n', '        if(state == State.PreSale && now > PreSaleDeadline){\n', '          state = State.MainSale;\n', '        } else if (state == State.MainSale && now > MainSaleDeadline ){\n', '          state = State.Successful; //ICO becomes Successful\n', '          completedAt = now; //ICO is complete\n', '\n', '          emit LogFundingSuccessful(totalRaised); //we log the finish\n', '          successful(); //and execute closure\n', '        } else revert();\n', '\n', '    }\n', '\n', '    /**\n', '    * @notice successful closure handler\n', '    */\n', '    function successful() public {\n', '        //When successful\n', '        require(state == State.Successful);\n', '        if(ended == false){\n', '            ended = true;\n', '            //If there is any token left after ico\n', '            uint256 remanent = hardCap.sub(totalDistributed); //Total tokens to distribute - total distributed\n', '            //It&#39;s burned\n', '            require(tokenReward.burnToken(remanent));\n', '        }\n', '        //After successful all remaining eth is send to creator\n', '        creator.transfer(address(this).balance);\n', '        emit LogBeneficiaryPaid(creator);\n', '\n', '    }\n', '\n', '    /**\n', '    * @notice Manual eth retrieve\n', '    */\n', '    function ethRetrieve() onlyAdmin(2) public {\n', '      creator.transfer(address(this).balance);\n', '      emit LogBeneficiaryPaid(creator);\n', '    }\n', '\n', '    /**\n', '    * @notice Function to claim any token stuck on contract\n', '    */\n', '    function externalTokensRecovery(ERC20Basic _address) onlyAdmin(2) public{\n', '        require(state == State.Successful);\n', '\n', '        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\n', '        _address.transfer(msg.sender,remainder); //Transfer tokens to admin\n', '\n', '    }\n', '\n', '    /*\n', '    * @dev Direct payments handler\n', '    */\n', '\n', '    function () public payable {\n', '\n', '        contribute();\n', '\n', '    }\n', '}']