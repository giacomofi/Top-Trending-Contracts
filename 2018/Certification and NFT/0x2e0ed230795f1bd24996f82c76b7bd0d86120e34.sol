['pragma solidity ^0.4.24;\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '// File: contracts/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner(msg.sender));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if the account is the owner of the contract.\n', '   */\n', '  function isOwner(address account) public view returns(bool) {\n', '    return account == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner)\n', '    public\n', '    onlyOwner\n', '  {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner)\n', '    internal\n', '  {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Paused();\n', '  event Unpaused();\n', '\n', '  bool private _paused;\n', '\n', '  constructor() public {\n', '    _paused = false;\n', '  }\n', '\n', '  /**\n', '   * @return true if the contract is paused, false otherwise.\n', '   */\n', '  function paused() public view returns(bool) {\n', '    return _paused;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!_paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(_paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause()\n', '    public\n', '    onlyOwner\n', '    whenNotPaused\n', '  {\n', '    _paused = true;\n', '    emit Paused();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause()\n', '    public\n', '    onlyOwner\n', '    whenPaused\n', '  {\n', '    _paused = false;\n', '    emit Unpaused();\n', '  }\n', '}\n', '\n', '// File: contracts/Operable.sol\n', '\n', '/**\n', ' * @title Operable\n', ' * @dev Base contract that allows the owner to enforce access control over certain\n', ' * operations by adding or removing operator addresses.\n', ' */\n', 'contract Operable is Pausable {\n', '  event OperatorAdded(address indexed account);\n', '  event OperatorRemoved(address indexed account);\n', '\n', '  mapping (address => bool) private _operators;\n', '\n', '  constructor() public {\n', '    _addOperator(msg.sender);\n', '  }\n', '\n', '  modifier onlyOperator() {\n', '    require(isOperator(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isOperator(address account)\n', '    public\n', '    view\n', '    returns (bool) \n', '  {\n', '    require(account != address(0));\n', '    return _operators[account];\n', '  }\n', '\n', '  function addOperator(address account)\n', '    public\n', '    onlyOwner\n', '  {\n', '    _addOperator(account);\n', '  }\n', '\n', '  function removeOperator(address account)\n', '    public\n', '    onlyOwner\n', '  {\n', '    _removeOperator(account);\n', '  }\n', '\n', '  function _addOperator(address account)\n', '    internal\n', '  {\n', '    require(account != address(0));\n', '    _operators[account] = true;\n', '    emit OperatorAdded(account);\n', '  }\n', '\n', '  function _removeOperator(address account)\n', '    internal\n', '  {\n', '    require(account != address(0));\n', '    _operators[account] = false;\n', '    emit OperatorRemoved(account);\n', '  }\n', '}\n', '\n', '// File: contracts/TimestampNotary.sol\n', '\n', 'contract TimestampNotary is Operable {\n', '  struct Time {\n', '    uint32 declared;\n', '    uint32 recorded;\n', '  }\n', '  mapping (bytes32 => Time) _hashTime;\n', '\n', '  event Timestamp(\n', '    bytes32 indexed hash,\n', '    uint32 declaredTime,\n', '    uint32 recordedTime\n', '  );\n', '\n', '  /**\n', '   * @dev Allows an operator to timestamp a new hash value.\n', '   * @param hash bytes32 The hash value to be stamped in the contract storage\n', '   * @param declaredTime uint The timestamp associated with the given hash value\n', '   */\n', '  function addTimestamp(bytes32 hash, uint32 declaredTime)\n', '    public\n', '    onlyOperator\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    _addTimestamp(hash, declaredTime);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Registers the timestamp hash value in the contract storage, along with\n', '   * the current and declared timestamps.\n', '   * @param hash bytes32 The hash value to be registered\n', '   * @param declaredTime uint32 The declared timestamp of the hash value\n', '   */\n', '  function _addTimestamp(bytes32 hash, uint32 declaredTime) internal {\n', '    uint32 recordedTime = uint32(block.timestamp);\n', '    _hashTime[hash] = Time(declaredTime, recordedTime);\n', '    emit Timestamp(hash, declaredTime, recordedTime);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows anyone to verify the declared timestamp for any given hash.\n', '   */\n', '  function verifyDeclaredTime(bytes32 hash)\n', '    public\n', '    view\n', '    returns (uint32)\n', '  {\n', '    return _hashTime[hash].declared;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows anyone to verify the recorded timestamp for any given hash.\n', '   */\n', '  function verifyRecordedTime(bytes32 hash)\n', '    public\n', '    view\n', '    returns (uint32)\n', '  {\n', '    return _hashTime[hash].recorded;\n', '  }\n', '}\n', '\n', '// File: contracts/LinkedToken.sol\n', '\n', 'contract LinkedTokenAbstract {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address account) public view returns (uint256);\n', '}\n', '\n', '\n', 'contract LinkedToken is Pausable {\n', '  address internal _token;\n', '  event TokenChanged(address indexed token);\n', '  \n', '  /**\n', '   * @dev Returns the address of the associated token contract.\n', '   */\n', '  function tokenAddress() public view returns (address) {\n', '    return _token;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to change the address of the associated token contract.\n', '   * @param token address The address of the new token contract\n', '   */\n', '  function setToken(address token) \n', '    public\n', '    onlyOwner\n', '    whenPaused\n', '    returns (bool)\n', '  {\n', '    _setToken(token);\n', '    emit TokenChanged(token);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Changes the address of the associated token contract\n', '   * @param token address The address of the new token contract\n', '   */\n', '  function _setToken(address token) internal {\n', '    require(token != address(0));\n', '    _token = token;\n', '  }\n', '}\n', '\n', '// File: contracts/AssetNotary.sol\n', '\n', 'contract AssetNotary is TimestampNotary, LinkedToken {\n', '  using SafeMath for uint256;\n', '\n', '  bytes8[] private _assetList;\n', '  mapping (bytes8 => uint8) private _assetDecimals;\n', '  mapping (bytes8 => uint256) private _assetBalances;\n', '\n', '  event AssetBalanceUpdate(\n', '    bytes8 indexed assetId,\n', '    uint256 balance\n', '  );\n', '\n', '  function registerAsset(bytes8 assetId, uint8 decimals)\n', '    public\n', '    onlyOperator\n', '    returns (bool)\n', '  {\n', '    require(decimals > 0);\n', '    require(decimals <= 32);\n', '    _assetDecimals[assetId] = decimals;\n', '    _assetList.push(assetId);\n', '    return true;\n', '  }\n', '\n', '  function assetList()\n', '    public\n', '    view\n', '    returns (bytes8[])\n', '  {\n', '    return _assetList;\n', '  }\n', '\n', '  function getAssetId(string name)\n', '    public\n', '    pure\n', '    returns (bytes8)\n', '  {\n', '    return bytes8(keccak256(abi.encodePacked(name)));\n', '  }\n', '\n', '  function assetDecimals(bytes8 assetId)\n', '    public\n', '    view\n', '    returns (uint8)\n', '  {\n', '    return _assetDecimals[assetId];\n', '  }\n', '\n', '  function assetBalance(bytes8 assetId)\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return _assetBalances[assetId];\n', '  }\n', '\n', '  function updateAssetBalances(bytes8[] assets, uint256[] balances)\n', '    public\n', '    onlyOperator\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    uint assetsLength = assets.length;\n', '    require(assetsLength > 0);\n', '    require(assetsLength == balances.length);\n', '    \n', '    for (uint i=0; i<assetsLength; i++) {\n', '      require(_assetDecimals[assets[i]] > 0);\n', '      _assetBalances[assets[i]] = balances[i];\n', '      emit AssetBalanceUpdate(assets[i], balances[i]);\n', '    }\n', '    return true;\n', '  }\n', '\n', '  function verifyUserBalance(address user, string assetName)\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    LinkedTokenAbstract token = LinkedTokenAbstract(_token);\n', '    uint256 totalShares = token.totalSupply();\n', '    require(totalShares > 0);\n', '    uint256 userShares = token.balanceOf(user);\n', '    bytes8 assetId = getAssetId(assetName);\n', '    return _assetBalances[assetId].mul(userShares) / totalShares;\n', '  }\n', '}\n', '\n', '// File: contracts/XFTNotary.sol\n', '\n', 'contract XFTNotary is AssetNotary {\n', "  string public constant name = 'XFT Asset Notary';\n", "  string public constant version = '0.1';\n", '  \n', '  /*\n', '   * @dev Links the Notary contract with the Token contract.\n', '   */\n', '  constructor(address token) public {\n', '    _setToken(token);\n', '  }\n', '}']