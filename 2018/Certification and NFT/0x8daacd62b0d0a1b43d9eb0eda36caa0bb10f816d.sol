['pragma solidity ^0.4.18;\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Interface {\n', '\tfunction name() public view returns (string);\n', '\tfunction symbol() public view returns (string);\n', '\tfunction decimals() public view returns (uint);\n', '    function totalSupply() public view returns (uint);\n', '\tfunction maximumSupply() public view returns (uint);\n', '\t\n', '    function balanceOf(address _queryAddress) public constant returns (uint balance);\n', '    function allowance(address _queryAddress, address _approvedAddress) public constant returns (uint remaining);\n', '    function transfer(address _transferAddress, uint _tokenAmount) public returns (bool success);\n', '    function approve(address _approvedAddress, uint _tokenAmount) public returns (bool success);\n', '    function transferFrom(address _fromAddress, address _transferAddress, uint _tokenAmount) public returns (bool success);\n', '\n', '    event Transfer(address indexed _fromAddress, address indexed _transferAddress, uint _tokenAmount);\n', '    event Approval(address indexed _fromAddress, address indexed _approvedAddress, uint _tokenAmount);\n', '}\n', '\n', '\n', 'contract PLEXToken is ERC20Interface {\n', '\tusing SafeMath for uint;\n', '    mapping(address => uint) public balances;\n', '\tmapping(address => mapping(address => uint)) public allowed;\n', '\t\n', '\tstring public name;\n', '\tstring public symbol;\n', '\tuint public decimals;\n', '\tuint public totalSupply;\n', '\tuint public maximumSupply;\n', '\tuint public preSaleSupply;\n', '\tuint public mainSaleSupply;\n', '\tuint public preSaleRate;\n', '\tuint public mainSaleRateP1;\n', '\tuint public mainSaleRateP2;\n', '\tuint public mainSaleRateP3;\n', '\tuint public mainSaleRateP4;\n', '\tuint public preSaleEnd;\n', '\tuint public mainSaleStart;\n', '\tuint public mainSaleEnd;\n', '\taddress public contractOwner;\n', '\n', '    constructor() public {\n', '\t\tname = "PLEX";\n', '\t\tsymbol = "PLEX";\n', '\t\tdecimals = 2;\n', '\t\ttotalSupply = 0;\n', '\t\tmaximumSupply = 10000000000;\n', '\t\tpreSaleSupply = 1000000000;\n', '\t\tmainSaleSupply = 4000000000;\n', '\t\tpreSaleRate = 0.0002 ether;\n', '\t\tmainSaleRateP1 = 0.000625 ether;\n', '\t\tmainSaleRateP2 = 0.00071428571 ether;\n', '\t\tmainSaleRateP3 = 0.00083333333 ether;\n', '\t\tmainSaleRateP4 = 0.001 ether;\n', '\t\tpreSaleEnd = 1529884800;\n', '\t\tmainSaleStart = 1530554400;\n', '\t\tmainSaleEnd = 1532908800;\n', '\t\tcontractOwner = msg.sender;\n', '\t\t\n', '\t\tbalances[0xaF3D1767966B8464bEDD88f5B6cFDC23D3Ba7CE3] = 100000000;\n', '\t\temit Transfer(0, 0xaF3D1767966B8464bEDD88f5B6cFDC23D3Ba7CE3, 100000000);\n', '\t\t\n', '\t\tbalances[0x0d958C8f7CCD8d3b03653C3A487Bc11A5db9749B] = 400000000;\n', '\t\temit Transfer(0, 0x0d958C8f7CCD8d3b03653C3A487Bc11A5db9749B, 400000000);\n', '\t\t\n', '\t\tbalances[0x3ca16559A1CC5172d4e524D652892Fb9D422F030] = 500000000;\n', '\t\temit Transfer(0, 0x3ca16559A1CC5172d4e524D652892Fb9D422F030, 500000000);\n', '\t\t\n', '\t\tbalances[0xf231dcadBf45Ab3d4Ca552079FC9B71860CC8255] = 500000000;\n', '\t\temit Transfer(0, 0xf231dcadBf45Ab3d4Ca552079FC9B71860CC8255, 500000000);\n', '\t\t\n', '\t\tbalances[0x38ea72e347232BE550CbF15582056f3259e3A2DF] = 500000000;\n', '\t\temit Transfer(0, 0x38ea72e347232BE550CbF15582056f3259e3A2DF, 500000000);\n', '\t\t\n', '\t\tbalances[0x0e951a73965e373a0ACdFF4Ca6839aB3Aa111061] = 1000000000;\n', '\t\temit Transfer(0, 0x0e951a73965e373a0ACdFF4Ca6839aB3Aa111061, 1000000000);\n', '\t\t\n', '\t\tbalances[0x7Ee2Ec2ECC77Dd7DB791629D5D1aA18f97E7569B] = 1000000000;\n', '\t\temit Transfer(0, 0x7Ee2Ec2ECC77Dd7DB791629D5D1aA18f97E7569B, 1000000000);\n', '\t\t\n', '\t\tbalances[0xF8041851c7E9deB3EA93472F27e9DF872014EcDd] = 1000000000;\n', '\t\temit Transfer(0, 0xF8041851c7E9deB3EA93472F27e9DF872014EcDd, 1000000000);\n', '\t\t\n', '\t\ttotalSupply = totalSupply.add(5000000000);\n', '\t}\n', '\t\n', '\tfunction name() public constant returns (string) {\n', '\t\treturn name;\n', '\t}\n', '\t\n', '\tfunction symbol() public constant returns (string) {\n', '\t\treturn symbol;\n', '\t}\n', '\t\n', '\tfunction decimals() public constant returns (uint) {\n', '\t\treturn decimals;\n', '\t}\n', '\t\n', '\tfunction totalSupply() public constant returns (uint) {\n', '\t\treturn totalSupply;\n', '\t}\n', '\t\n', '\tfunction maximumSupply() public constant returns (uint) {\n', '\t\treturn maximumSupply;\n', '\t}\n', '\t\n', '\tfunction balanceOf(address _queryAddress) public constant returns (uint balance) {\n', '        return balances[_queryAddress];\n', '    }\n', '\t\n', '\tfunction allowance(address _queryAddress, address _approvedAddress) public constant returns (uint remaining) {\n', '        return allowed[_queryAddress][_approvedAddress];\n', '    }\n', '\t\n', '\tfunction transfer(address _transferAddress, uint _tokenAmount) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_tokenAmount);\n', '        balances[_transferAddress] = balances[_transferAddress].add(_tokenAmount);\n', '        emit Transfer(msg.sender, _transferAddress, _tokenAmount);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction approve(address _approvedAddress, uint _tokenAmount) public returns (bool success) {\n', '        allowed[msg.sender][_approvedAddress] = _tokenAmount;\n', '        emit Approval(msg.sender, _approvedAddress, _tokenAmount);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction transferFrom(address _fromAddress, address _transferAddress, uint _tokenAmount) public returns (bool success) {\n', '        balances[_fromAddress] = balances[_fromAddress].sub(_tokenAmount);\n', '        allowed[_fromAddress][msg.sender] = allowed[_fromAddress][msg.sender].sub(_tokenAmount);\n', '        balances[_transferAddress] = balances[_transferAddress].add(_tokenAmount);\n', '        emit Transfer(_fromAddress, _transferAddress, _tokenAmount);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction setDates(uint _preSaleEnd, uint _mainSaleStart, uint _mainSaleEnd) public returns (bool success) {\n', '\t\trequire(msg.sender == contractOwner);\n', '\t\tpreSaleEnd = _preSaleEnd;\n', '\t\tmainSaleStart = _mainSaleStart;\n', '\t\tmainSaleEnd = _mainSaleEnd;\n', '\t\treturn true;\n', '\t}\n', '\t\n', '\tfunction setPreSaleRate(uint _preSaleRate) public returns (bool success) {\n', '\t\trequire(msg.sender == contractOwner);\n', '\t\tpreSaleRate = _preSaleRate;\n', '\t\treturn true;\n', '\t}\n', '    \n', '    function() public payable {\n', '        require((now <= preSaleEnd) || (now >= mainSaleStart && now <= mainSaleEnd));\n', '\t\tif (now <= preSaleEnd) {\n', '\t\t\trequire((msg.value >= 0.01 ether && msg.value <= 15 ether) && (preSaleSupply >= (msg.value / preSaleRate) * 100));\n', '\t\t\tpreSaleSupply = preSaleSupply.sub((msg.value / preSaleRate) * 100);\n', '\t\t\ttotalSupply = totalSupply.add((msg.value / preSaleRate) * 100);\n', '\t\t\tbalances[msg.sender] = balances[msg.sender].add((msg.value / preSaleRate) * 100);\n', '\t\t\temit Transfer(0, msg.sender, (msg.value / preSaleRate) * 100);\n', '\t\t}\n', '\t\tif (now >= mainSaleStart && now <= mainSaleEnd) {\n', '\t\t\trequire((msg.value >= 0.01 ether && msg.value <= 15 ether) && (mainSaleSupply >= (msg.value / mainSaleRateP1) * 100));\n', '\t\t\tif (mainSaleSupply <= 4000000000 && mainSaleSupply > 3000000000) {\n', '\t\t\t\tmainSaleSupply = mainSaleSupply.sub((msg.value / mainSaleRateP1) * 100);\n', '\t\t\t\ttotalSupply = totalSupply.add((msg.value / mainSaleRateP1) * 100);\n', '\t\t\t\tbalances[msg.sender] = balances[msg.sender].add((msg.value / mainSaleRateP1) * 100);\n', '\t\t\t\temit Transfer(0, msg.sender, (msg.value / mainSaleRateP1) * 100);\n', '\t\t\t}\n', '\t\t\tif (mainSaleSupply <= 3000000000 && mainSaleSupply > 2000000000) {\n', '\t\t\t\tmainSaleSupply = mainSaleSupply.sub((msg.value / mainSaleRateP2) * 100);\n', '\t\t\t\ttotalSupply = totalSupply.add((msg.value / mainSaleRateP2) * 100);\n', '\t\t\t\tbalances[msg.sender] = balances[msg.sender].add((msg.value / mainSaleRateP2) * 100);\n', '\t\t\t\temit Transfer(0, msg.sender, (msg.value / mainSaleRateP2) * 100);\n', '\t\t\t}\n', '\t\t\tif (mainSaleSupply <= 2000000000 && mainSaleSupply > 1000000000) {\n', '\t\t\t\tmainSaleSupply = mainSaleSupply.sub((msg.value / mainSaleRateP3) * 100);\n', '\t\t\t\ttotalSupply = totalSupply.add((msg.value / mainSaleRateP3) * 100);\n', '\t\t\t\tbalances[msg.sender] = balances[msg.sender].add((msg.value / mainSaleRateP3) * 100);\n', '\t\t\t\temit Transfer(0, msg.sender, (msg.value / mainSaleRateP3) * 100);\n', '\t\t\t}\n', '\t\t\tif (mainSaleSupply <= 1000000000) {\n', '\t\t\t\tmainSaleSupply = mainSaleSupply.sub((msg.value / mainSaleRateP4) * 100);\n', '\t\t\t\ttotalSupply = totalSupply.add((msg.value / mainSaleRateP4) * 100);\n', '\t\t\t\tbalances[msg.sender] = balances[msg.sender].add((msg.value / mainSaleRateP4) * 100);\n', '\t\t\t\temit Transfer(0, msg.sender, (msg.value / mainSaleRateP4) * 100);\n', '\t\t\t}\n', '\t\t}\n', '\t\tcontractOwner.transfer(msg.value);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Interface {\n', '\tfunction name() public view returns (string);\n', '\tfunction symbol() public view returns (string);\n', '\tfunction decimals() public view returns (uint);\n', '    function totalSupply() public view returns (uint);\n', '\tfunction maximumSupply() public view returns (uint);\n', '\t\n', '    function balanceOf(address _queryAddress) public constant returns (uint balance);\n', '    function allowance(address _queryAddress, address _approvedAddress) public constant returns (uint remaining);\n', '    function transfer(address _transferAddress, uint _tokenAmount) public returns (bool success);\n', '    function approve(address _approvedAddress, uint _tokenAmount) public returns (bool success);\n', '    function transferFrom(address _fromAddress, address _transferAddress, uint _tokenAmount) public returns (bool success);\n', '\n', '    event Transfer(address indexed _fromAddress, address indexed _transferAddress, uint _tokenAmount);\n', '    event Approval(address indexed _fromAddress, address indexed _approvedAddress, uint _tokenAmount);\n', '}\n', '\n', '\n', 'contract PLEXToken is ERC20Interface {\n', '\tusing SafeMath for uint;\n', '    mapping(address => uint) public balances;\n', '\tmapping(address => mapping(address => uint)) public allowed;\n', '\t\n', '\tstring public name;\n', '\tstring public symbol;\n', '\tuint public decimals;\n', '\tuint public totalSupply;\n', '\tuint public maximumSupply;\n', '\tuint public preSaleSupply;\n', '\tuint public mainSaleSupply;\n', '\tuint public preSaleRate;\n', '\tuint public mainSaleRateP1;\n', '\tuint public mainSaleRateP2;\n', '\tuint public mainSaleRateP3;\n', '\tuint public mainSaleRateP4;\n', '\tuint public preSaleEnd;\n', '\tuint public mainSaleStart;\n', '\tuint public mainSaleEnd;\n', '\taddress public contractOwner;\n', '\n', '    constructor() public {\n', '\t\tname = "PLEX";\n', '\t\tsymbol = "PLEX";\n', '\t\tdecimals = 2;\n', '\t\ttotalSupply = 0;\n', '\t\tmaximumSupply = 10000000000;\n', '\t\tpreSaleSupply = 1000000000;\n', '\t\tmainSaleSupply = 4000000000;\n', '\t\tpreSaleRate = 0.0002 ether;\n', '\t\tmainSaleRateP1 = 0.000625 ether;\n', '\t\tmainSaleRateP2 = 0.00071428571 ether;\n', '\t\tmainSaleRateP3 = 0.00083333333 ether;\n', '\t\tmainSaleRateP4 = 0.001 ether;\n', '\t\tpreSaleEnd = 1529884800;\n', '\t\tmainSaleStart = 1530554400;\n', '\t\tmainSaleEnd = 1532908800;\n', '\t\tcontractOwner = msg.sender;\n', '\t\t\n', '\t\tbalances[0xaF3D1767966B8464bEDD88f5B6cFDC23D3Ba7CE3] = 100000000;\n', '\t\temit Transfer(0, 0xaF3D1767966B8464bEDD88f5B6cFDC23D3Ba7CE3, 100000000);\n', '\t\t\n', '\t\tbalances[0x0d958C8f7CCD8d3b03653C3A487Bc11A5db9749B] = 400000000;\n', '\t\temit Transfer(0, 0x0d958C8f7CCD8d3b03653C3A487Bc11A5db9749B, 400000000);\n', '\t\t\n', '\t\tbalances[0x3ca16559A1CC5172d4e524D652892Fb9D422F030] = 500000000;\n', '\t\temit Transfer(0, 0x3ca16559A1CC5172d4e524D652892Fb9D422F030, 500000000);\n', '\t\t\n', '\t\tbalances[0xf231dcadBf45Ab3d4Ca552079FC9B71860CC8255] = 500000000;\n', '\t\temit Transfer(0, 0xf231dcadBf45Ab3d4Ca552079FC9B71860CC8255, 500000000);\n', '\t\t\n', '\t\tbalances[0x38ea72e347232BE550CbF15582056f3259e3A2DF] = 500000000;\n', '\t\temit Transfer(0, 0x38ea72e347232BE550CbF15582056f3259e3A2DF, 500000000);\n', '\t\t\n', '\t\tbalances[0x0e951a73965e373a0ACdFF4Ca6839aB3Aa111061] = 1000000000;\n', '\t\temit Transfer(0, 0x0e951a73965e373a0ACdFF4Ca6839aB3Aa111061, 1000000000);\n', '\t\t\n', '\t\tbalances[0x7Ee2Ec2ECC77Dd7DB791629D5D1aA18f97E7569B] = 1000000000;\n', '\t\temit Transfer(0, 0x7Ee2Ec2ECC77Dd7DB791629D5D1aA18f97E7569B, 1000000000);\n', '\t\t\n', '\t\tbalances[0xF8041851c7E9deB3EA93472F27e9DF872014EcDd] = 1000000000;\n', '\t\temit Transfer(0, 0xF8041851c7E9deB3EA93472F27e9DF872014EcDd, 1000000000);\n', '\t\t\n', '\t\ttotalSupply = totalSupply.add(5000000000);\n', '\t}\n', '\t\n', '\tfunction name() public constant returns (string) {\n', '\t\treturn name;\n', '\t}\n', '\t\n', '\tfunction symbol() public constant returns (string) {\n', '\t\treturn symbol;\n', '\t}\n', '\t\n', '\tfunction decimals() public constant returns (uint) {\n', '\t\treturn decimals;\n', '\t}\n', '\t\n', '\tfunction totalSupply() public constant returns (uint) {\n', '\t\treturn totalSupply;\n', '\t}\n', '\t\n', '\tfunction maximumSupply() public constant returns (uint) {\n', '\t\treturn maximumSupply;\n', '\t}\n', '\t\n', '\tfunction balanceOf(address _queryAddress) public constant returns (uint balance) {\n', '        return balances[_queryAddress];\n', '    }\n', '\t\n', '\tfunction allowance(address _queryAddress, address _approvedAddress) public constant returns (uint remaining) {\n', '        return allowed[_queryAddress][_approvedAddress];\n', '    }\n', '\t\n', '\tfunction transfer(address _transferAddress, uint _tokenAmount) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_tokenAmount);\n', '        balances[_transferAddress] = balances[_transferAddress].add(_tokenAmount);\n', '        emit Transfer(msg.sender, _transferAddress, _tokenAmount);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction approve(address _approvedAddress, uint _tokenAmount) public returns (bool success) {\n', '        allowed[msg.sender][_approvedAddress] = _tokenAmount;\n', '        emit Approval(msg.sender, _approvedAddress, _tokenAmount);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction transferFrom(address _fromAddress, address _transferAddress, uint _tokenAmount) public returns (bool success) {\n', '        balances[_fromAddress] = balances[_fromAddress].sub(_tokenAmount);\n', '        allowed[_fromAddress][msg.sender] = allowed[_fromAddress][msg.sender].sub(_tokenAmount);\n', '        balances[_transferAddress] = balances[_transferAddress].add(_tokenAmount);\n', '        emit Transfer(_fromAddress, _transferAddress, _tokenAmount);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction setDates(uint _preSaleEnd, uint _mainSaleStart, uint _mainSaleEnd) public returns (bool success) {\n', '\t\trequire(msg.sender == contractOwner);\n', '\t\tpreSaleEnd = _preSaleEnd;\n', '\t\tmainSaleStart = _mainSaleStart;\n', '\t\tmainSaleEnd = _mainSaleEnd;\n', '\t\treturn true;\n', '\t}\n', '\t\n', '\tfunction setPreSaleRate(uint _preSaleRate) public returns (bool success) {\n', '\t\trequire(msg.sender == contractOwner);\n', '\t\tpreSaleRate = _preSaleRate;\n', '\t\treturn true;\n', '\t}\n', '    \n', '    function() public payable {\n', '        require((now <= preSaleEnd) || (now >= mainSaleStart && now <= mainSaleEnd));\n', '\t\tif (now <= preSaleEnd) {\n', '\t\t\trequire((msg.value >= 0.01 ether && msg.value <= 15 ether) && (preSaleSupply >= (msg.value / preSaleRate) * 100));\n', '\t\t\tpreSaleSupply = preSaleSupply.sub((msg.value / preSaleRate) * 100);\n', '\t\t\ttotalSupply = totalSupply.add((msg.value / preSaleRate) * 100);\n', '\t\t\tbalances[msg.sender] = balances[msg.sender].add((msg.value / preSaleRate) * 100);\n', '\t\t\temit Transfer(0, msg.sender, (msg.value / preSaleRate) * 100);\n', '\t\t}\n', '\t\tif (now >= mainSaleStart && now <= mainSaleEnd) {\n', '\t\t\trequire((msg.value >= 0.01 ether && msg.value <= 15 ether) && (mainSaleSupply >= (msg.value / mainSaleRateP1) * 100));\n', '\t\t\tif (mainSaleSupply <= 4000000000 && mainSaleSupply > 3000000000) {\n', '\t\t\t\tmainSaleSupply = mainSaleSupply.sub((msg.value / mainSaleRateP1) * 100);\n', '\t\t\t\ttotalSupply = totalSupply.add((msg.value / mainSaleRateP1) * 100);\n', '\t\t\t\tbalances[msg.sender] = balances[msg.sender].add((msg.value / mainSaleRateP1) * 100);\n', '\t\t\t\temit Transfer(0, msg.sender, (msg.value / mainSaleRateP1) * 100);\n', '\t\t\t}\n', '\t\t\tif (mainSaleSupply <= 3000000000 && mainSaleSupply > 2000000000) {\n', '\t\t\t\tmainSaleSupply = mainSaleSupply.sub((msg.value / mainSaleRateP2) * 100);\n', '\t\t\t\ttotalSupply = totalSupply.add((msg.value / mainSaleRateP2) * 100);\n', '\t\t\t\tbalances[msg.sender] = balances[msg.sender].add((msg.value / mainSaleRateP2) * 100);\n', '\t\t\t\temit Transfer(0, msg.sender, (msg.value / mainSaleRateP2) * 100);\n', '\t\t\t}\n', '\t\t\tif (mainSaleSupply <= 2000000000 && mainSaleSupply > 1000000000) {\n', '\t\t\t\tmainSaleSupply = mainSaleSupply.sub((msg.value / mainSaleRateP3) * 100);\n', '\t\t\t\ttotalSupply = totalSupply.add((msg.value / mainSaleRateP3) * 100);\n', '\t\t\t\tbalances[msg.sender] = balances[msg.sender].add((msg.value / mainSaleRateP3) * 100);\n', '\t\t\t\temit Transfer(0, msg.sender, (msg.value / mainSaleRateP3) * 100);\n', '\t\t\t}\n', '\t\t\tif (mainSaleSupply <= 1000000000) {\n', '\t\t\t\tmainSaleSupply = mainSaleSupply.sub((msg.value / mainSaleRateP4) * 100);\n', '\t\t\t\ttotalSupply = totalSupply.add((msg.value / mainSaleRateP4) * 100);\n', '\t\t\t\tbalances[msg.sender] = balances[msg.sender].add((msg.value / mainSaleRateP4) * 100);\n', '\t\t\t\temit Transfer(0, msg.sender, (msg.value / mainSaleRateP4) * 100);\n', '\t\t\t}\n', '\t\t}\n', '\t\tcontractOwner.transfer(msg.value);\n', '    }\n', '}']
