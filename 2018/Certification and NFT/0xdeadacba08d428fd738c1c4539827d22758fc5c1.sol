['pragma solidity ^0.4.0;\n', 'contract ERC20TokenInterface {\n', '    function totalSupply() constant returns (uint256 supply);\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ART1 is ERC20TokenInterface {\n', "  string public constant name = 'ART1';\n", '  uint256 public constant decimals = 2;\n', "  string public constant symbol = 'ART1';\n", "  string public constant version = 'v0.0.1';\n", '\n', '  uint256 private constant totalTokens = 277777 * (10 ** decimals);\n', '\n', '  mapping (address => uint256) public balances;\n', '  mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '  event MigrationInfoSet(string newMigrationInfo);\n', '\n', '  string public migrationInfo = "";\n', '\n', '  address public migrationInfoSetter;\n', '\n', '  modifier onlyFromMigrationInfoSetter {\n', '    if (msg.sender != migrationInfoSetter) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '  function ART1(address _migrationInfoSetter) {\n', '    if (_migrationInfoSetter == 0) throw;\n', '    migrationInfoSetter = _migrationInfoSetter;\n', '    balances[msg.sender] = totalTokens;\n', '  }\n', '\n', '  function totalSupply() constant returns (uint256) {\n', '    return totalTokens;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    if (balances[msg.sender] >= _value) {\n', '      balances[msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value) {\n', '      balances[_from] -= _value;\n', '      allowed[_from][msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant public returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  function compareAndApprove(address _spender, uint256 _currentValue, uint256 _newValue) public returns(bool) {\n', '    if (allowed[msg.sender][_spender] != _currentValue) {\n', '      return false;\n', '    }\n', '    return approve(_spender, _newValue);\n', '  }\n', '  function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  function setMigrationInfo(string _migrationInfo) onlyFromMigrationInfoSetter public {\n', '    migrationInfo = _migrationInfo;\n', '    MigrationInfoSet(_migrationInfo);\n', '  }\n', '  function changeMigrationInfoSetter(address _newMigrationInfoSetter) onlyFromMigrationInfoSetter public {\n', '    migrationInfoSetter = _newMigrationInfoSetter;\n', '  }\n', '}']