['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '    require(_releaseTime > now);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() public {\n', '    require(now >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BitcoinusToken is ERC20, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  string public constant name = "Bitcoinus";\n', '    string public constant symbol = "BITS";\n', '    uint8 public constant decimals = 18;\n', '\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canTransfer() {\n', '    require(mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public canTransfer returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Transfer tokens from one address to another\n', '  * @param _from address The address which you want to send tokens from\n', '  * @param _to address The address which you want to transfer to\n', '  * @param _value uint256 the amount of tokens to be transferred\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _value) public canTransfer returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '  *\n', '  * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '  * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "  * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '  * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '  * @param _spender The address which will spend the funds.\n', '  * @param _value The amount of tokens to be spent.\n', '  */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '  * @param _owner address The address which owns the funds.\n', '  * @param _spender address The address which will spend the funds.\n', '  * @return A uint256 specifying the amount of tokens still available for the spender.\n', '  */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '  * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '  *\n', '  * approve should be called when allowed[_spender] == 0. To increment\n', '  * allowed value is better to use this function to avoid 2 calls (and wait until\n', '  * the first transaction is mined)\n', '  * From MonolithDAO Token.sol\n', '  * @param _spender The address which will spend the funds.\n', '  * @param _addedValue The amount of tokens to increase the allowance by.\n', '  */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '  *\n', '  * approve should be called when allowed[_spender] == 0. To decrement\n', '  * allowed value is better to use this function to avoid 2 calls (and wait until\n', '  * the first transaction is mined)\n', '  * From MonolithDAO Token.sol\n', '  * @param _spender The address which will spend the funds.\n', '  * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '  */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Function to mint tokens\n', '  * @param _to The address that will receive the minted tokens.\n', '  * @param _amount The amount of tokens to mint.\n', '  * @return A boolean that indicates if the operation was successful.\n', '  */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Function to stop minting new tokens.\n', '  * @return True if the operation was successful.\n', '  */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract BitcoinusCrowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '  // Wallet where all ether will be stored\n', '  address public constant WALLET = 0x3f39CD8a8Ae0540F0FD38aB695D36ceCf0f254E3;\n', '  // Wallet for team tokens\n', '  address public constant TEAM_WALLET = 0x35317879205E9fd59AeeC429b5494B84D8507C20;\n', '  // Wallet for bounty tokens\n', '  address public constant BOUNTY_WALLET = 0x088C48cA51A024909f06DF60597492492Eb66C2a;\n', '  // Wallet for company tokens\n', '  address public constant COMPANY_WALLET = 0x576B5cA75d4598dC31640F395F6201C5Dd0EbbB4;\n', '\n', '  uint256 public constant TEAM_TOKENS = 4000000e18;\n', '  uint256 public constant TEAM_TOKENS_LOCK_PERIOD = 60 * 60 * 24 * 365; // 365 days\n', '  uint256 public constant COMPANY_TOKENS = 10000000e18;\n', '  uint256 public constant COMPANY_TOKENS_LOCK_PERIOD = 60 * 60 * 24 * 180; // 180 days\n', '  uint256 public constant BOUNTY_TOKENS = 1000000e18;\n', '  uint256 public constant SOFT_CAP = 3000000e18;\n', '  uint256 public constant ICO_TOKENS = 50000000e18;\n', '  uint256 public constant START_TIME = 1516579200; // 2018/01/22 00:00 UTC +0\n', '  uint256 public constant END_TIME = 1525996800; // 2018/05/11 00:00 UTC +0\n', '  uint256 public constant RATE = 1000;\n', '  uint256 public constant LARGE_PURCHASE = 1500e18;\n', '  uint256 public constant LARGE_PURCHASE_BONUS = 5;\n', '\n', '  Stage[] stages;\n', '\n', '  struct Stage {\n', '    uint256 till;\n', '    uint256 cap;\n', '    uint8 discount;\n', '  }\n', '\n', '  // The token being sold\n', '  BitcoinusToken public token;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  // refund vault used to hold funds while crowdsale is running\n', '    RefundVault public vault;\n', '\n', '  uint256 public currentStage = 0;\n', '    bool public isFinalized = false;\n', '\n', '  address tokenMinter;\n', '\n', '  TokenTimelock public teamTimelock;\n', '  TokenTimelock public companyTimelock;\n', '\n', '  /**\n', '  * event for token purchase logging\n', '  * @param purchaser who paid for the tokens\n', '  * @param beneficiary who got the tokens\n', '  * @param value weis paid for purchase\n', '  * @param amount amount of tokens purchased\n', '  */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  event Finalized();\n', '  /**\n', '   * When there no tokens left to mint and token minter tries to manually mint tokens\n', '   * this event is raised to signal how many tokens we have to charge back to purchaser\n', '   */\n', '  event ManualTokenMintRequiresRefund(address indexed purchaser, uint256 value);\n', '\n', '  function BitcoinusCrowdsale(address _token) public {\n', '    stages.push(Stage({ till: 1519344000, discount: 47, cap: 8000000e18 })); // 2018/02/23 00:00 UTC +0\n', '    stages.push(Stage({ till: 1521849600, discount: 40, cap: 17000000e18 })); // 2018/03/24 00:00 UTC +0\n', '    stages.push(Stage({ till: 1523836800, discount: 30, cap: 15000000e18 })); // 2018/04/16 00:00 UTC +0\n', '    stages.push(Stage({ till: 1525219200, discount: 15, cap: 7000000e18 })); // 2018/05/02 00:00 UTC +0\n', '    stages.push(Stage({ till: 1525996800, discount: 5,  cap: 3000000e18 })); // 2018/05/11 00:00 UTC +0\n', '\n', '    token = BitcoinusToken(_token);\n', '    vault = new RefundVault(WALLET);\n', '    tokenMinter = msg.sender;\n', '  }\n', '\n', '  modifier onlyTokenMinterOrOwner() {\n', '    require(msg.sender == tokenMinter || msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '    uint256 nowTime = getNow();\n', '    // this loop moves stages and insures correct stage according to date\n', '    while (currentStage < stages.length && stages[currentStage].till < nowTime) {\n', '      stages[stages.length - 1].cap = stages[stages.length - 1].cap.add(stages[currentStage].cap); // move all unsold tokens to last stage\n', '      stages[currentStage].cap = 0;\n', '      currentStage = currentStage.add(1);\n', '    }\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = calculateTokens(weiAmount);\n', '\n', '    uint256 excess = appendContribution(beneficiary, tokens);\n', '\n', '    if (excess > 0) { // hard cap reached, no more tokens to mint\n', '      uint256 refund = excess.mul(weiAmount).div(tokens);\n', '      weiAmount = weiAmount.sub(refund);\n', '      msg.sender.transfer(refund);\n', '    }\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens.sub(excess));\n', '\n', '    if (goalReached()) {\n', '      WALLET.transfer(weiAmount);\n', '    } else {\n', '      vault.deposit.value(weiAmount)(msg.sender);\n', '    }\n', '  }\n', '\n', '  function calculateTokens(uint256 _weiAmount) internal view returns (uint256) {\n', '    uint256 tokens = _weiAmount.mul(RATE).mul(100).div(uint256(100).sub(stages[currentStage].discount));\n', '\n', '    uint256 bonus = 0;\n', '    if (currentStage > 0 && tokens >= LARGE_PURCHASE) {\n', '      bonus = tokens.mul(LARGE_PURCHASE_BONUS).div(100);\n', '    }\n', '\n', '    return tokens.add(bonus);\n', '  }\n', '\n', '  function appendContribution(address _beneficiary, uint256 _tokens) internal returns (uint256) {\n', '    uint256 excess = _tokens;\n', '    uint256 tokensToMint = 0;\n', '\n', '    while (excess > 0 && currentStage < stages.length) {\n', '      Stage storage stage = stages[currentStage];\n', '      if (excess >= stage.cap) {\n', '        excess = excess.sub(stage.cap);\n', '        tokensToMint = tokensToMint.add(stage.cap);\n', '        stage.cap = 0;\n', '        currentStage = currentStage.add(1);\n', '      } else {\n', '        stage.cap = stage.cap.sub(excess);\n', '        tokensToMint = tokensToMint.add(excess);\n', '        excess = 0;\n', '      }\n', '    }\n', '    token.mint(_beneficiary, tokensToMint);\n', '    return excess;\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = getNow() >= START_TIME && getNow() <= END_TIME;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    bool canMint = token.totalSupply() < ICO_TOKENS;\n', '    bool validStage = (currentStage < stages.length);\n', '    return withinPeriod && nonZeroPurchase && canMint && validStage;\n', '  }\n', '\n', '  // if crowdsale is unsuccessful, investors can claim refunds here\n', '    function claimRefund() public {\n', '      require(isFinalized);\n', '      require(!goalReached());\n', '\n', '      vault.refund(msg.sender);\n', '  }\n', '\n', '  /**\n', '    * @dev Must be called after crowdsale ends, to do some extra finalization\n', "    * work. Calls the contract's finalization function.\n", '    */\n', '    function finalize() onlyOwner public {\n', '      require(!isFinalized);\n', '      require(hasEnded());\n', '\n', '      if (goalReached()) {\n', '      vault.close();\n', '\n', '      teamTimelock = new TokenTimelock(token, TEAM_WALLET, getNow().add(TEAM_TOKENS_LOCK_PERIOD));\n', '      token.mint(teamTimelock, TEAM_TOKENS);\n', '\n', '      companyTimelock = new TokenTimelock(token, COMPANY_WALLET, getNow().add(COMPANY_TOKENS_LOCK_PERIOD));\n', '      token.mint(companyTimelock, COMPANY_TOKENS);\n', '\n', '      token.mint(BOUNTY_WALLET, BOUNTY_TOKENS);\n', '\n', '      token.finishMinting();\n', '      token.transferOwnership(0x1);\n', '      } else {\n', '          vault.enableRefunds();\n', '      }\n', '\n', '      Finalized();\n', '\n', '      isFinalized = true;\n', '    }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return getNow() > END_TIME || token.totalSupply() == ICO_TOKENS;\n', '  }\n', '\n', '    function goalReached() public view returns (bool) {\n', '      return token.totalSupply() >= SOFT_CAP;\n', '    }\n', '\n', '    // fallback function can be used to buy tokens or claim refund\n', '    function () external payable {\n', '      if (!isFinalized) {\n', '        buyTokens(msg.sender);\n', '    } else {\n', '      claimRefund();\n', '      }\n', '    }\n', '\n', '    function mintTokens(address[] _receivers, uint256[] _amounts) external onlyTokenMinterOrOwner {\n', '    require(_receivers.length > 0 && _receivers.length <= 100);\n', '    require(_receivers.length == _amounts.length);\n', '    require(!isFinalized);\n', '    for (uint256 i = 0; i < _receivers.length; i++) {\n', '      address receiver = _receivers[i];\n', '      uint256 amount = _amounts[i];\n', '\n', '        require(receiver != address(0));\n', '        require(amount > 0);\n', '\n', '        uint256 excess = appendContribution(receiver, amount);\n', '\n', '        if (excess > 0) {\n', '          ManualTokenMintRequiresRefund(receiver, excess);\n', '        }\n', '    }\n', '    }\n', '\n', '    function setTokenMinter(address _tokenMinter) public onlyOwner {\n', '      require(_tokenMinter != address(0));\n', '      tokenMinter = _tokenMinter;\n', '    }\n', '\n', '  function getNow() internal view returns (uint256) {\n', '    return now;\n', '  }\n', '}']