['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b != 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '    }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value > 0);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '}\n', '\n', 'contract LiTeum is StandardToken, BurnableToken, Ownable {\n', '\n', '    // Constants\n', '    string  public constant name = "LiTeum";\n', '    string  public constant symbol = "LTMF";\n', '    uint8   public constant decimals = 18;\n', '    uint256 public constant INITIAL_SUPPLY = 100000000000 * (10 ** uint256(decimals));\n', '\n', '\n', '\n', '    // Properties\n', '    address public adminAddr;               // the address of a admin currently selling this token\n', '    bool    public transferEnabled = false; // indicates if transferring tokens is enabled or not\n', '\n', '    // Modifiers\n', '    modifier onlyWhenTransferEnabled() {\n', '        if (!transferEnabled) {\n', '            require(msg.sender == adminAddr);\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * The listed addresses are not valid recipients of tokens.\n', '     *\n', '     * 0x0           - the zero address is not valid\n', '     * this          - the contract itself should not receive tokens\n', '     * owner         - the owner has all the initial tokens, but cannot receive any back\n', '     * adminAddr     - the admin has an allowance of tokens to transfer, but does not receive any\n', '     */\n', '    modifier validDestination(address _to) {\n', '        require(_to != address(0x0));\n', '        require(_to != address(this));\n', '        require(_to != owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Constructor - instantiates token supply and allocates balanace of\n', '     * to the owner (msg.sender).\n', '     */\n', '    constructor(address _admin)public  {\n', '        // the owner is a custodian of tokens.\n', '        require(msg.sender != _admin);\n', '\n', '        totalSupply = INITIAL_SUPPLY;\n', '\n', '        // mint all tokens\n', '        balances[msg.sender] = totalSupply;\n', '        emit Transfer(address(0x0), msg.sender, totalSupply);\n', '\n', '        adminAddr = _admin;\n', '    }\n', '\n', '    /**\n', '     * Enables the ability of anyone to transfer their tokens. This can\n', '     * only be called by the token owner. Once enabled, it is not\n', '     * possible to disable transfers.\n', '     */\n', '    function enableTransfer() external onlyOwner {\n', '        transferEnabled = true;\n', '\n', '    }\n', '\n', '    /**\n', '     * Disable the token transfer. This can\n', '     * only be called by the token owner.\n', '     */\n', '    function disableTransfer() external onlyOwner {\n', '        transferEnabled = false;\n', '\n', '    }\n', '\n', '    /**\n', '     * owner send tokens to admin.\n', '     */\n', '    function transferToAdmin(uint256 _value) public onlyOwner onlyWhenTransferEnabled returns (bool) {\n', '    \treturn super.transfer(adminAddr, _value);\n', '    }\n', '\n', '    function adminTransfer(address _to, uint256 _value) public onlyWhenTransferEnabled returns (bool) {\n', '\n', '    \trequire (msg.sender == adminAddr);\n', '    \treturn super.transfer(_to, _value);\n', '\n', '    }\n', '\n', '    /**\n', '     * Overrides ERC20 transfer function with modifier that prevents the\n', '     * ability to transfer tokens until after transfers have been enabled.\n', '     */\n', '    function transfer(address _to, uint256 _value) public onlyWhenTransferEnabled validDestination(_to) returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * Overrides ERC20 transferFrom function with modifier that prevents the\n', '     * ability to transfer tokens until after transfers have been enabled.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public onlyWhenTransferEnabled validDestination(_to) returns (bool) {\n', '      require(msg.sender==_from);\n', '      bool result = super.transferFrom(_from, _to, _value);\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * Overrides the burn function so that it cannot be called until after\n', '     * transfers have been enabled.\n', '     *\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(transferEnabled || msg.sender == owner);\n', '        super.burn(_value);\n', '        emit Transfer(msg.sender, address(0x0), _value);\n', '    }\n', '\n', '    /**\n', '    *function to kill the token\n', '    */\n', '    function kill() public onlyOwner\n', '    {\n', '        selfdestruct(owner);\n', '    }\n', '}']