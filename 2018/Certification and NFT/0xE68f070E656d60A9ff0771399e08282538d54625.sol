['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract BBODServiceRegistry is Ownable {\n', '\n', '  //1. Manager\n', '  //2. CustodyStorage\n', '  mapping(uint => address) public registry;\n', '\n', '    constructor(address _owner) {\n', '        owner = _owner;\n', '    }\n', '\n', '  function setServiceRegistryEntry (uint key, address entry) external onlyOwner {\n', '    registry[key] = entry;\n', '  }\n', '}\n', '\n', 'contract CustodyStorage {\n', '\n', '  BBODServiceRegistry public bbodServiceRegistry;\n', '\n', '  mapping(address => bool) public custodiesMap;\n', '\n', '  //Number of all custodies in the contract\n', '  uint public custodyCounter = 0;\n', '\n', '  address[] public custodiesArray;\n', '\n', '  event CustodyRemoved(address indexed custody);\n', '\n', '  constructor(address _serviceRegistryAddress) public {\n', '    bbodServiceRegistry = BBODServiceRegistry(_serviceRegistryAddress);\n', '  }\n', '\n', '  modifier onlyManager() {\n', '    require(msg.sender == bbodServiceRegistry.registry(1));\n', '    _;\n', '  }\n', '\n', '  function addCustody(address _custody) external onlyManager {\n', '    custodiesMap[_custody] = true;\n', '    custodiesArray.push(_custody);\n', '    custodyCounter++;\n', '  }\n', '\n', '  function removeCustody(address _custodyAddress, uint _arrayIndex) external onlyManager {\n', '    require(custodiesArray[_arrayIndex] == _custodyAddress);\n', '\n', '    if (_arrayIndex == custodyCounter - 1) {\n', '      //Removing last custody\n', '      custodiesMap[_custodyAddress] = false;\n', '      emit CustodyRemoved(_custodyAddress);\n', '      custodyCounter--;\n', '      return;\n', '    }\n', '\n', '    custodiesMap[_custodyAddress] = false;\n', '    //Overwriting deleted custody with the last custody in the array\n', '    custodiesArray[_arrayIndex] = custodiesArray[custodyCounter - 1];\n', '    custodyCounter--;\n', '\n', '    emit CustodyRemoved(_custodyAddress);\n', '  }\n', '}']