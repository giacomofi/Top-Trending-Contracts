['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract AccessControl {\n', '    address public creatorAddress;\n', '    uint16 public totalSeraphims = 0;\n', '    mapping (address => bool) public seraphims;\n', '\n', '    bool public isMaintenanceMode = true;\n', ' \n', '    modifier onlyCREATOR() {\n', '        require(msg.sender == creatorAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlySERAPHIM() {\n', '        require(seraphims[msg.sender] == true);\n', '        _;\n', '    }\n', '    \n', '    modifier isContractActive {\n', '        require(!isMaintenanceMode);\n', '        _;\n', '    }\n', '    \n', '    // Constructor\n', '    function AccessControl() public {\n', '        creatorAddress = msg.sender;\n', '    }\n', '    \n', '\n', '    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\n', '        if (seraphims[_newSeraphim] == false) {\n', '            seraphims[_newSeraphim] = true;\n', '            totalSeraphims += 1;\n', '        }\n', '    }\n', '    \n', '    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\n', '        if (seraphims[_oldSeraphim] == true) {\n', '            seraphims[_oldSeraphim] = false;\n', '            totalSeraphims -= 1;\n', '        }\n', '    }\n', '\n', '    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\n', '        isMaintenanceMode = _isMaintaining;\n', '    }\n', '\n', '  \n', '} \n', '\n', '\n', '\n', '/**\n', ' * @title ERC721 interface\n', ' * @dev see https://github.com/ethereum/eips/issues/721\n', ' */\n', 'contract ERC721 {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function takeOwnership(uint256 _tokenId) public;\n', '}\n', '\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint x, uint y) pure internal returns(uint) {\n', '      uint z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint x, uint y) pure internal returns(uint) {\n', '      assert(x >= y);\n', '      uint z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint x, uint y) pure internal returns(uint) {\n', '      uint z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\n', '        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\n', '        return uint8(genNum % (maxRandom - min + 1)+min);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC721Token\n', ' * Generic implementation for the required functionality of the ERC721 standard\n', ' */\n', 'contract MedalData is ERC721, AccessControl, SafeMath {\n', '  \n', '  // Total amount of tokens\n', '  uint256 private totalTokens;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) public tokenOwner;\n', '\n', '// Mapping from token ID to medal type\n', '  mapping (uint256 => uint8) public medalType;\n', '  \n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) private tokenApprovals;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) private ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) private ownedTokensIndex;\n', '  \n', '  uint32[12] public currentTokenNumbers;\n', '  \n', '  uint32[12] public maxTokenNumbers;\n', '\n', '\n', '\n', '\n', '\n', '  /**\n', '  * @dev Guarantees msg.sender is owner of the given token\n', '  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '  */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the total amount of tokens stored by the contract\n', '  * @return uint256 representing the total amount of tokens\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalTokens;\n', '  }\n', '  \n', '  function setMaxTokenNumbers() external onlyCREATOR {\n', '      maxTokenNumbers[0] = 5000;\n', '      maxTokenNumbers[1] = 5000;\n', '      maxTokenNumbers[2] = 5000;\n', '      maxTokenNumbers[3] = 5000;\n', '      maxTokenNumbers[4] = 500;\n', '      maxTokenNumbers[5] = 500;\n', '      maxTokenNumbers[6] = 200;\n', '      maxTokenNumbers[7] = 200;\n', '      maxTokenNumbers[8] = 200;\n', '      maxTokenNumbers[9] = 100;\n', '      maxTokenNumbers[10] = 100;\n', '      maxTokenNumbers[11] = 50;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address\n', '  * @param _owner address to query the balance of\n', '  * @return uint256 representing the amount owned by the passed address\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return ownedTokens[_owner].length;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the list of tokens owned by a given address\n', '  * @param _owner address to query the tokens of\n', '  * @return uint256[] representing the list of tokens owned by the passed address\n', '  */\n', '  function tokensOf(address _owner) public view returns (uint256[]) {\n', '    return ownedTokens[_owner];\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the owner of the specified token ID\n', '  * @param _tokenId uint256 ID of the token to query the owner of\n', '  * @return owner address currently marked as the owner of the given token ID\n', '  */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address to take ownership of a given token ID\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved to take ownership of the given token ID\n', '   */\n', '  function approvedFor(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfers the ownership of a given token ID to another address\n', '  * @param _to address to receive the ownership of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Approves another address to claim for the ownership of the given token ID\n', '  * @param _to address to be approved for the given token ID\n', '  * @param _tokenId uint256 ID of the token to be approved\n', '  */\n', '  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    if (approvedFor(_tokenId) != 0 || _to != 0) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      Approval(owner, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Claims the ownership of a given token ID\n', '  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n', '  */\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    require(isApprovedFor(msg.sender, _tokenId));\n', '    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Mint token function\n', '  * @param _to The address that will own the minted token\n', '  */\n', '  \n', '  function _createMedal(address _to, uint8 _seriesID) public onlySERAPHIM {\n', '    require(_to != address(0));\n', '   if (currentTokenNumbers[_seriesID] <= maxTokenNumbers[_seriesID]) {\n', '    medalType[totalTokens] = _seriesID;\n', '    currentTokenNumbers[_seriesID]= currentTokenNumbers[_seriesID]+1;\n', '    addToken(_to, totalTokens);\n', '    Transfer(0x0, _to, totalTokens);\n', '  }\n', '  }\n', '\n', '\n', '    function getCurrentTokensByType(uint32 _seriesID) public constant returns (uint32) {\n', '        return currentTokenNumbers[_seriesID];\n', '    }\n', '\n', '    function getMedalType (uint256 _tokenId) public constant returns (uint8) {\n', '        return medalType[_tokenId];\n', '    }\n', '  /**\n', '  * @dev Burns a specific token\n', '  * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '  */\n', '  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) external {\n', '    if (approvedFor(_tokenId) != 0) {\n', '      clearApproval(msg.sender, _tokenId);\n', '    }\n', '    removeToken(msg.sender, _tokenId);\n', '    Transfer(msg.sender, 0x0, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether the msg.sender is approved for the given token ID or not\n', '   * This function is not private so it can be extended in further implementations like the operatable ERC721\n', '   * @param _owner address of the owner to query the approval of\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return bool whether the msg.sender is approved for the given token ID or not\n', '   */\n', '  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n', '    return approvedFor(_tokenId) == _owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n', '  * @param _from address which you want to send tokens from\n', '  * @param _to address which you want to transfer the token to\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    require(_to != ownerOf(_tokenId));\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeToken(_from, _tokenId);\n', '    addToken(_to, _tokenId);\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval of a given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApproval(address _owner, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    tokenApprovals[_tokenId] = 0;\n', '    Approval(_owner, 0, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to add a token ID to the list of a given address\n', '  * @param _to address representing the new owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '  */\n', '  function addToken(address _to, uint256 _tokenId) private {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    uint256 length = balanceOf(_to);\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '    totalTokens = safeAdd(totalTokens, 1);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to remove a token ID from the list of a given address\n', '  * @param _from address representing the previous owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '  */\n', '  function removeToken(address _from, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = safeSubtract(balanceOf(_from),1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    tokenOwner[_tokenId] = 0;\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    ownedTokens[_from][lastTokenIndex] = 0;\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '    totalTokens = safeSubtract(totalTokens,1);\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract AccessControl {\n', '    address public creatorAddress;\n', '    uint16 public totalSeraphims = 0;\n', '    mapping (address => bool) public seraphims;\n', '\n', '    bool public isMaintenanceMode = true;\n', ' \n', '    modifier onlyCREATOR() {\n', '        require(msg.sender == creatorAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlySERAPHIM() {\n', '        require(seraphims[msg.sender] == true);\n', '        _;\n', '    }\n', '    \n', '    modifier isContractActive {\n', '        require(!isMaintenanceMode);\n', '        _;\n', '    }\n', '    \n', '    // Constructor\n', '    function AccessControl() public {\n', '        creatorAddress = msg.sender;\n', '    }\n', '    \n', '\n', '    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\n', '        if (seraphims[_newSeraphim] == false) {\n', '            seraphims[_newSeraphim] = true;\n', '            totalSeraphims += 1;\n', '        }\n', '    }\n', '    \n', '    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\n', '        if (seraphims[_oldSeraphim] == true) {\n', '            seraphims[_oldSeraphim] = false;\n', '            totalSeraphims -= 1;\n', '        }\n', '    }\n', '\n', '    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\n', '        isMaintenanceMode = _isMaintaining;\n', '    }\n', '\n', '  \n', '} \n', '\n', '\n', '\n', '/**\n', ' * @title ERC721 interface\n', ' * @dev see https://github.com/ethereum/eips/issues/721\n', ' */\n', 'contract ERC721 {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function takeOwnership(uint256 _tokenId) public;\n', '}\n', '\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint x, uint y) pure internal returns(uint) {\n', '      uint z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint x, uint y) pure internal returns(uint) {\n', '      assert(x >= y);\n', '      uint z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint x, uint y) pure internal returns(uint) {\n', '      uint z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) constant public returns(uint8) {\n', '        uint256 genNum = uint256(block.blockhash(block.number-1)) + uint256(privateAddress);\n', '        return uint8(genNum % (maxRandom - min + 1)+min);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC721Token\n', ' * Generic implementation for the required functionality of the ERC721 standard\n', ' */\n', 'contract MedalData is ERC721, AccessControl, SafeMath {\n', '  \n', '  // Total amount of tokens\n', '  uint256 private totalTokens;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) public tokenOwner;\n', '\n', '// Mapping from token ID to medal type\n', '  mapping (uint256 => uint8) public medalType;\n', '  \n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) private tokenApprovals;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) private ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) private ownedTokensIndex;\n', '  \n', '  uint32[12] public currentTokenNumbers;\n', '  \n', '  uint32[12] public maxTokenNumbers;\n', '\n', '\n', '\n', '\n', '\n', '  /**\n', '  * @dev Guarantees msg.sender is owner of the given token\n', '  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '  */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the total amount of tokens stored by the contract\n', '  * @return uint256 representing the total amount of tokens\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalTokens;\n', '  }\n', '  \n', '  function setMaxTokenNumbers() external onlyCREATOR {\n', '      maxTokenNumbers[0] = 5000;\n', '      maxTokenNumbers[1] = 5000;\n', '      maxTokenNumbers[2] = 5000;\n', '      maxTokenNumbers[3] = 5000;\n', '      maxTokenNumbers[4] = 500;\n', '      maxTokenNumbers[5] = 500;\n', '      maxTokenNumbers[6] = 200;\n', '      maxTokenNumbers[7] = 200;\n', '      maxTokenNumbers[8] = 200;\n', '      maxTokenNumbers[9] = 100;\n', '      maxTokenNumbers[10] = 100;\n', '      maxTokenNumbers[11] = 50;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address\n', '  * @param _owner address to query the balance of\n', '  * @return uint256 representing the amount owned by the passed address\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return ownedTokens[_owner].length;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the list of tokens owned by a given address\n', '  * @param _owner address to query the tokens of\n', '  * @return uint256[] representing the list of tokens owned by the passed address\n', '  */\n', '  function tokensOf(address _owner) public view returns (uint256[]) {\n', '    return ownedTokens[_owner];\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the owner of the specified token ID\n', '  * @param _tokenId uint256 ID of the token to query the owner of\n', '  * @return owner address currently marked as the owner of the given token ID\n', '  */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address to take ownership of a given token ID\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved to take ownership of the given token ID\n', '   */\n', '  function approvedFor(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfers the ownership of a given token ID to another address\n', '  * @param _to address to receive the ownership of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Approves another address to claim for the ownership of the given token ID\n', '  * @param _to address to be approved for the given token ID\n', '  * @param _tokenId uint256 ID of the token to be approved\n', '  */\n', '  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    if (approvedFor(_tokenId) != 0 || _to != 0) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      Approval(owner, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Claims the ownership of a given token ID\n', '  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n', '  */\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    require(isApprovedFor(msg.sender, _tokenId));\n', '    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Mint token function\n', '  * @param _to The address that will own the minted token\n', '  */\n', '  \n', '  function _createMedal(address _to, uint8 _seriesID) public onlySERAPHIM {\n', '    require(_to != address(0));\n', '   if (currentTokenNumbers[_seriesID] <= maxTokenNumbers[_seriesID]) {\n', '    medalType[totalTokens] = _seriesID;\n', '    currentTokenNumbers[_seriesID]= currentTokenNumbers[_seriesID]+1;\n', '    addToken(_to, totalTokens);\n', '    Transfer(0x0, _to, totalTokens);\n', '  }\n', '  }\n', '\n', '\n', '    function getCurrentTokensByType(uint32 _seriesID) public constant returns (uint32) {\n', '        return currentTokenNumbers[_seriesID];\n', '    }\n', '\n', '    function getMedalType (uint256 _tokenId) public constant returns (uint8) {\n', '        return medalType[_tokenId];\n', '    }\n', '  /**\n', '  * @dev Burns a specific token\n', '  * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '  */\n', '  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) external {\n', '    if (approvedFor(_tokenId) != 0) {\n', '      clearApproval(msg.sender, _tokenId);\n', '    }\n', '    removeToken(msg.sender, _tokenId);\n', '    Transfer(msg.sender, 0x0, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether the msg.sender is approved for the given token ID or not\n', '   * This function is not private so it can be extended in further implementations like the operatable ERC721\n', '   * @param _owner address of the owner to query the approval of\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return bool whether the msg.sender is approved for the given token ID or not\n', '   */\n', '  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n', '    return approvedFor(_tokenId) == _owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n', '  * @param _from address which you want to send tokens from\n', '  * @param _to address which you want to transfer the token to\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    require(_to != ownerOf(_tokenId));\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeToken(_from, _tokenId);\n', '    addToken(_to, _tokenId);\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval of a given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApproval(address _owner, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    tokenApprovals[_tokenId] = 0;\n', '    Approval(_owner, 0, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to add a token ID to the list of a given address\n', '  * @param _to address representing the new owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '  */\n', '  function addToken(address _to, uint256 _tokenId) private {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    uint256 length = balanceOf(_to);\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '    totalTokens = safeAdd(totalTokens, 1);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to remove a token ID from the list of a given address\n', '  * @param _from address representing the previous owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '  */\n', '  function removeToken(address _from, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = safeSubtract(balanceOf(_from),1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    tokenOwner[_tokenId] = 0;\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    ownedTokens[_from][lastTokenIndex] = 0;\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '    totalTokens = safeSubtract(totalTokens,1);\n', '  }\n', '}']
