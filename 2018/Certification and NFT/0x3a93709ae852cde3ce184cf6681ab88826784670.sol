['pragma solidity 0.4.24;\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: contracts/VestTokenAllocation.sol\n', '\n', '/**\n', ' * @title VestTokenAllocation contract\n', ' * @author Gustavo Guimaraes - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="096e7c7a7d687f666e7c6064687b686c7a496e64686065276a6664">[email&#160;protected]</a>>\n', ' */\n', 'contract VestTokenAllocation is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20;\n', '\n', '    uint256 public cliff;\n', '    uint256 public start;\n', '    uint256 public duration;\n', '    uint256 public allocatedTokens;\n', '    uint256 public canSelfDestruct;\n', '\n', '    mapping (address => uint256) public totalTokensLocked;\n', '    mapping (address => uint256) public releasedTokens;\n', '\n', '    ERC20 public golix;\n', '    address public tokenDistribution;\n', '\n', '    event Released(address beneficiary, uint256 amount);\n', '\n', '    /**\n', '     * @dev creates the locking contract with vesting mechanism\n', '     * as well as ability to set tokens for addresses and time contract can self-destruct\n', '     * @param _token GolixToken address\n', '     * @param _tokenDistribution GolixTokenDistribution contract address\n', '     * @param _start timestamp representing the beginning of the token vesting process\n', '     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest. ie 1 year in secs\n', '     * @param _duration time in seconds of the period in which the tokens completely vest. ie 4 years in secs\n', '     * @param _canSelfDestruct timestamp of when contract is able to selfdestruct\n', '     */\n', '    function VestTokenAllocation\n', '        (\n', '            ERC20 _token,\n', '            address _tokenDistribution,\n', '            uint256 _start,\n', '            uint256 _cliff,\n', '            uint256 _duration,\n', '            uint256 _canSelfDestruct\n', '        )\n', '        public\n', '    {\n', '        require(_token != address(0) && _cliff != 0);\n', '        require(_cliff <= _duration);\n', '        require(_start > now);\n', '        require(_canSelfDestruct > _duration.add(_start));\n', '\n', '        duration = _duration;\n', '        cliff = _start.add(_cliff);\n', '        start = _start;\n', '\n', '        golix = ERC20(_token);\n', '        tokenDistribution = _tokenDistribution;\n', '        canSelfDestruct = _canSelfDestruct;\n', '    }\n', '\n', '    modifier onlyOwnerOrTokenDistributionContract() {\n', '        require(msg.sender == address(owner) || msg.sender == address(tokenDistribution));\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Adds vested token allocation\n', '     * @param beneficiary Ethereum address of a person\n', '     * @param allocationValue Number of tokens allocated to person\n', '     */\n', '    function addVestTokenAllocation(address beneficiary, uint256 allocationValue)\n', '        external\n', '        onlyOwnerOrTokenDistributionContract\n', '    {\n', '        require(totalTokensLocked[beneficiary] == 0 && beneficiary != address(0)); // can only add once.\n', '\n', '        allocatedTokens = allocatedTokens.add(allocationValue);\n', '        require(allocatedTokens <= golix.balanceOf(this));\n', '\n', '        totalTokensLocked[beneficiary] = allocationValue;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers vested tokens to beneficiary.\n', '     */\n', '    function release() public {\n', '        uint256 unreleased = releasableAmount();\n', '\n', '        require(unreleased > 0);\n', '\n', '        releasedTokens[msg.sender] = releasedTokens[msg.sender].add(unreleased);\n', '\n', '        golix.safeTransfer(msg.sender, unreleased);\n', '\n', '        emit Released(msg.sender, unreleased);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount that has already vested but hasn&#39;t been released yet.\n', '     */\n', '    function releasableAmount() public view returns (uint256) {\n', '        return vestedAmount().sub(releasedTokens[msg.sender]);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount that has already vested.\n', '     */\n', '    function vestedAmount() public view returns (uint256) {\n', '        uint256 totalBalance = totalTokensLocked[msg.sender];\n', '\n', '        if (now < cliff) {\n', '            return 0;\n', '        } else if (now >= start.add(duration)) {\n', '            return totalBalance;\n', '        } else {\n', '            return totalBalance.mul(now.sub(start)).div(duration);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev allow for selfdestruct possibility and sending funds to owner\n', '     */\n', '    function kill() public onlyOwner {\n', '        require(now >= canSelfDestruct);\n', '        uint256 balance = golix.balanceOf(this);\n', '\n', '        if (balance > 0) {\n', '            golix.transfer(msg.sender, balance);\n', '        }\n', '\n', '        selfdestruct(owner);\n', '    }\n', '}']