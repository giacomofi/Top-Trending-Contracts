['pragma solidity ^0.4.24;\n', '\n', '// --> http://lucky9.io <-- Ethereum Lottery.\n', '//\n', '// - 1 of 3 chance to win half of the JACKPOT! And every 999th ticket grabs 80% of the JACKPOT!\n', '//\n', '// - The house edge is 1% of the ticket price, 1% reserved for transactions.\n', '//\n', '// - The winnings are distributed by the Smart Contract automatically.\n', '//\n', '// - Smart Contract address: 0x2d7765c44e44b9ec01d30ea367e8403aa4415cb3\n', '// - More details at: https://etherscan.io/address/0x2d7765c44e44b9ec01d30ea367e8403aa4415cb3\n', '//\n', '// - NOTE: Ensure sufficient gas limit for transaction to succeed. Gas limit 150000 should be sufficient.\n', '//\n', '// --- GOOD LUCK! ---\n', '//\n', '\n', 'contract lucky9io {\n', '    // Public variables\n', '    uint public house_edge = 0;\n', '    uint public jackpot = 0;\n', '    address public last_winner;\n', '    uint public last_win_wei = 0;\n', '    uint public total_wins_wei = 0;\n', '    uint public total_wins_count = 0;\n', '\n', '    // Internal variables\n', '    bool private game_alive = true;\n', '    address private owner = 0x5Bf066c70C2B5e02F1C6723E72e82478Fec41201;\n', '    uint private entry_number = 0;\n', '    uint private value = 0;\n', '\n', '    modifier onlyOwner() {\n', '     require(msg.sender == owner, "Sender not authorized.");\n', '     _;\n', '    }\n', '\n', '    function () public payable {\n', '        // Only accept ticket purchases if the game is ON\n', '        require(game_alive == true);\n', '\n', '        // No contract calls\n', '        require(isContract(msg.sender) != true);\n', '\n', '        // Price of the ticket is 0.009 ETH\n', '        require(msg.value / 1000000000000000 == 9);\n', '\n', '        // House edge + Jackpot (1% is reserved for transactions)\n', '        jackpot = jackpot + (msg.value * 98 / 100);\n', '        house_edge = house_edge + (msg.value / 100);\n', '\n', '        // Owner does not participate in the play, only adds up to the JACKPOT\n', '        if(msg.sender == owner) return;\n', '\n', '        // Increasing the ticket number\n', '        entry_number = entry_number + 1;\n', '\n', "        // Let's see if the ticket is the 999th...\n", '        if(entry_number % 999 == 0) {\n', '            // We have a WINNER !!!\n', '\n', '            // Calculate the prize money\n', '            uint win_amount_999 = jackpot * 80 / 100;\n', '            jackpot = jackpot - win_amount_999;\n', '\n', '            // Set the statistics\n', '            last_winner = msg.sender;\n', '            last_win_wei = win_amount;\n', '            total_wins_count = total_wins_count + 1;\n', '            total_wins_wei = total_wins_wei + win_amount_999;\n', '\n', '            // Pay the winning\n', '            msg.sender.transfer(win_amount_999);\n', '            return;\n', '        } else {\n', '            // Get the lucky number\n', '            uint lucky_number = uint(keccak256(abi.encodePacked((entry_number+block.number), blockhash(block.number))));\n', '\n', '            if(lucky_number % 3 == 0) {\n', '                // We have a WINNER !!!\n', '\n', '                // Calculate the prize money\n', '                uint win_amount = jackpot * 50 / 100;\n', '                if(address(this).balance - house_edge < win_amount) {\n', '                    win_amount = (address(this).balance-house_edge) * 50 / 100;\n', '                }\n', '\n', '                jackpot = jackpot - win_amount;\n', '\n', '                // Set the statistics\n', '                last_winner = msg.sender;\n', '                last_win_wei = win_amount;\n', '                total_wins_count = total_wins_count + 1;\n', '                total_wins_wei = total_wins_wei + win_amount;\n', '\n', '                // Pay the winning\n', '                msg.sender.transfer(win_amount);\n', '            }\n', '\n', '            return;\n', '        }\n', '    }\n', '\n', '    function isContract(address addr) private view returns (bool) {\n', '          uint size;\n', '          assembly {\n', '              size := extcodesize(addr)\n', '\n', '          }\n', '          return size > 0;\n', '    }\n', '\n', '    function getBalance() constant public returns (uint256) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    function getTotalTickets() constant public returns (uint256) {\n', '        return entry_number;\n', '    }\n', '\n', '    function getLastWin() constant public returns (uint256) {\n', '        return last_win_wei;\n', '    }\n', '\n', '    function getLastWinner() constant public returns (address) {\n', '        return last_winner;\n', '    }\n', '\n', '    function getTotalWins() constant public returns (uint256) {\n', '        return total_wins_wei;\n', '    }\n', '\n', '    function getTotalWinsCount() constant public returns (uint256) {\n', '        return total_wins_count;\n', '    }\n', '\n', '    // Owner functions\n', '    function stopGame() public onlyOwner {\n', '        game_alive = false;\n', '        return;\n', '    }\n', '\n', '    function startGame() public onlyOwner {\n', '        game_alive = true;\n', '        return;\n', '    }\n', '\n', '    function transferHouseEdge(uint amount) public onlyOwner payable {\n', '        require(amount <= house_edge);\n', '        require((address(this).balance - amount) > 0);\n', '\n', '        owner.transfer(amount);\n', '        house_edge = house_edge - amount;\n', '    }\n', '}']