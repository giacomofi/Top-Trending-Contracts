['pragma solidity ^0.4.18; // solhint-disable-line\n', '\n', '\n', '\n', 'contract EtherCartel{\n', '    //uint256 DRUGS_TO_PRODUCE_1KILO=1;\n', '    uint256 public DRUGS_TO_PRODUCE_1KILO=86400;//for final version should be seconds in a day\n', '    uint256 public STARTING_KILOS=300;\n', '    uint256 PSN=10000;\n', '    uint256 PSNH=5000;\n', '    bool public initialized=false;\n', '    address public ceoAddress=0x85abE8E3bed0d4891ba201Af1e212FE50bb65a26;\n', '    mapping (address => uint256) public Kilos;\n', '    mapping (address => uint256) public claimedDrugs;\n', '    mapping (address => uint256) public lastCollect;\n', '    mapping (address => address) public referrals;\n', '    uint256 public marketDrugs;\n', '    function DrugDealer() public{\n', '        ceoAddress=msg.sender;\n', '    }\n', '    function collectDrugs(address ref) public{\n', '        require(initialized);\n', '        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\n', '            referrals[msg.sender]=ref;\n', '        }\n', '        uint256 drugsUsed=getMyDrugs();\n', '        uint256 newKilo=SafeMath.div(drugsUsed,DRUGS_TO_PRODUCE_1KILO);\n', '        Kilos[msg.sender]=SafeMath.add(Kilos[msg.sender],newKilo);\n', '        claimedDrugs[msg.sender]=0;\n', '        lastCollect[msg.sender]=now;\n', '        \n', '        //send referral drugs\n', '        claimedDrugs[referrals[msg.sender]]=SafeMath.add(claimedDrugs[referrals[msg.sender]],SafeMath.div(drugsUsed,5));\n', '        \n', '        //boost market to nerf kilo hoarding\n', '        marketDrugs=SafeMath.add(marketDrugs,SafeMath.div(drugsUsed,10));\n', '    }\n', '    function sellDrugs() public{\n', '        require(initialized);\n', '        uint256 hasDrugs=getMyDrugs();\n', '        uint256 drugValue=calculateDrugSell(hasDrugs);\n', '        uint256 fee=devFee(drugValue);\n', '        claimedDrugs[msg.sender]=0;\n', '        lastCollect[msg.sender]=now;\n', '        marketDrugs=SafeMath.add(marketDrugs,hasDrugs);\n', '        ceoAddress.transfer(fee);\n', '        msg.sender.transfer(SafeMath.sub(drugValue,fee));\n', '    }\n', '    function buyDrugs() public payable{\n', '        require(initialized);\n', '        uint256 drugsBought=calculateDrugBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n', '        drugsBought=SafeMath.sub(drugsBought,devFee(drugsBought));\n', '        ceoAddress.transfer(devFee(msg.value));\n', '        claimedDrugs[msg.sender]=SafeMath.add(claimedDrugs[msg.sender],drugsBought);\n', '    }\n', '    //magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '    function calculateDrugSell(uint256 drugs) public view returns(uint256){\n', '        return calculateTrade(drugs,marketDrugs,this.balance);\n', '    }\n', '    function calculateDrugBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n', '        return calculateTrade(eth,contractBalance,marketDrugs);\n', '    }\n', '    function calculateDrugBuySimple(uint256 eth) public view returns(uint256){\n', '        return calculateDrugBuy(eth,this.balance);\n', '    }\n', '    function devFee(uint256 amount) public view returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(amount,4),100);\n', '    }\n', '    function seedMarket(uint256 drugs) public payable{\n', '        require(marketDrugs==0);\n', '        initialized=true;\n', '        marketDrugs=drugs;\n', '    }\n', '    function getFreeKilo() public{\n', '        require(initialized);\n', '        require(Kilos[msg.sender]==0);\n', '        lastCollect[msg.sender]=now;\n', '        Kilos[msg.sender]=STARTING_KILOS;\n', '    }\n', '    function getBalance() public view returns(uint256){\n', '        return this.balance;\n', '    }\n', '    function getMyKilo() public view returns(uint256){\n', '        return Kilos[msg.sender];\n', '    }\n', '    function getMyDrugs() public view returns(uint256){\n', '        return SafeMath.add(claimedDrugs[msg.sender],getDrugsSinceLastCollect(msg.sender));\n', '    }\n', '    function getDrugsSinceLastCollect(address adr) public view returns(uint256){\n', '        uint256 secondsPassed=min(DRUGS_TO_PRODUCE_1KILO,SafeMath.sub(now,lastCollect[adr]));\n', '        return SafeMath.mul(secondsPassed,Kilos[adr]);\n', '    }\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']