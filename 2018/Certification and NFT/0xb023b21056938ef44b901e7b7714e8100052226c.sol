['pragma solidity 0.4.25;\n', '/**\n', ' * 外部调用外部代币。\n', ' */\n', ' interface token {\n', '    function transfer(address receiver, uint amount) external;\n', '}\n', '\n', '/**\n', ' * 众筹合约\n', ' */\n', 'contract Crowdsale {\n', '    address public beneficiary = msg.sender; //受益人地址，测试时为合约创建者\n', '    uint public fundingGoal;  //众筹目标，单位是ether\n', '    uint public amountRaised; //已筹集金额数量， 单位是ether\n', '    uint public deadline; //截止时间\n', '    uint public price;  //代币价格\n', '    token public tokenReward;   // 要卖的token\n', '    bool public fundingGoalReached = false;  //达成众筹目标\n', '    bool public crowdsaleClosed = false; //众筹关闭\n', '\n', '\n', '    mapping(address => uint256) public balance; //保存众筹地址及对应的以太币数量\n', '\n', '    // 受益人将众筹金额转走的通知\n', '    event GoalReached(address _beneficiary, uint _amountRaised);\n', '\n', '    // 用来记录众筹资金变动的通知，_isContribution表示是否是捐赠，因为有可能是捐赠者退出或发起者转移众筹资金\n', '    event FundTransfer(address _backer, uint _amount, bool _isContribution);\n', '\n', '    /**\n', '     * 初始化构造函数\n', '     *\n', '     * @param fundingGoalInEthers 众筹以太币总量\n', '     * @param durationInMinutes 众筹截止,单位是分钟\n', '     */\n', '    constructor(\n', '        uint fundingGoalInEthers,\n', '        uint durationInMinutes,\n', '        uint TokenCostOfEachether,\n', '        address addressOfTokenUsedAsReward\n', '    )  public {\n', '        fundingGoal = fundingGoalInEthers * 1 ether;\n', '        deadline = now + durationInMinutes * 1 minutes;\n', '        price = TokenCostOfEachether ; //1个以太币可以买几个代币\n', '        tokenReward = token(addressOfTokenUsedAsReward); \n', '    }\n', '\n', '\n', '    /**\n', '     * 默认函数\n', '     *\n', '     * 默认函数，可以向合约直接打款\n', '     */\n', '    function () payable public {\n', '\n', '        //判断是否关闭众筹\n', '        require(!crowdsaleClosed);\n', '        uint amount = msg.value;\n', '\n', '        //捐款人的金额累加\n', '        balance[msg.sender] += amount;\n', '\n', '        //捐款总额累加\n', '        amountRaised += amount;\n', '\n', '        //转帐操作，转多少代币给捐款人\n', '         tokenReward.transfer(msg.sender, amount * price);\n', '         emit FundTransfer(msg.sender, amount, true);\n', '    }\n', '\n', '    /**\n', '     * 判断是否已经过了众筹截止限期\n', '     */\n', '    modifier afterDeadline() { if (now >= deadline) _; }\n', '\n', '    /**\n', '     * 检测众筹目标是否已经达到\n', '     */\n', '    function checkGoalReached() afterDeadline public {\n', '        if (amountRaised >= fundingGoal){\n', '            //达成众筹目标\n', '            fundingGoalReached = true;\n', '          emit  GoalReached(beneficiary, amountRaised);\n', '        }\n', '\n', '        //关闭众筹\n', '        crowdsaleClosed = true;\n', '    }\n', '    function backtoken(uint backnum) public{\n', '        uint amount = backnum * 10 ** 18;\n', '        tokenReward.transfer(beneficiary, amount);\n', '       emit FundTransfer(beneficiary, amount, true);\n', '    }\n', '    \n', '    function backeth() public{\n', '        beneficiary.transfer(amountRaised);\n', '        emit FundTransfer(beneficiary, amountRaised, true);\n', '    }\n', '\n', '    /**\n', '     * 收回资金\n', '     *\n', '     * 检查是否达到了目标或时间限制，如果有，并且达到了资金目标，\n', '     * 将全部金额发送给受益人。如果没有达到目标，每个贡献者都可以退出\n', '     * 他们贡献的金额\n', '     * 注：这里代码应该是限制了众筹时间结束且众筹目标没有达成的情况下才允许退出。如果去掉限制条件afterDeadline，应该是可以允许众筹时间还未到且众筹目标没有达成的情况下退出\n', '     */\n', '    function safeWithdrawal() afterDeadline public {\n', '\n', '        //如果没有达成众筹目标\n', '        if (!fundingGoalReached) {\n', '            //获取合约调用者已捐款余额\n', '            uint amount = balance[msg.sender];\n', '\n', '            if (amount > 0) {\n', '                //返回合约发起者所有余额\n', '                beneficiary.transfer(amountRaised);\n', '                emit  FundTransfer(beneficiary, amount, false);\n', '                balance[msg.sender] = 0;\n', '            }\n', '        }\n', '\n', '        //如果达成众筹目标，并且合约调用者是受益人\n', '        if (fundingGoalReached && beneficiary == msg.sender) {\n', '\n', '            //将所有捐款从合约中给受益人\n', '            beneficiary.transfer(amountRaised);\n', '\n', '          emit  FundTransfer(beneficiary, amount, false);\n', '        }\n', '    }\n', '}']