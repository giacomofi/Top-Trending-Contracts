['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/*\n', ' * Haltable\n', ' *\n', ' * Abstract contract that allows children to implement an\n', ' * emergency stop mechanism. Differs from Pausable by requiring a state.\n', ' *\n', ' *\n', ' * Originally envisioned in FirstBlood ICO contract.\n', ' */\n', 'contract Haltable is Ownable {\n', '  bool public halted = false;\n', '\n', '  modifier inNormalState {\n', '    require(!halted);\n', '    _;\n', '  }\n', '\n', '  modifier inEmergencyState {\n', '    require(halted);\n', '    _;\n', '  }\n', '\n', '  // called by the owner on emergency, triggers stopped state\n', '  function halt() external onlyOwner inNormalState {\n', '    halted = true;\n', '  }\n', '\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function unhalt() external onlyOwner inEmergencyState {\n', '    halted = false;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable\n', ' *\n', ' * @dev Standard ERC20 token\n', ' */\n', 'contract Burnable is StandardToken {\n', '  using SafeMath for uint;\n', '\n', '  /* This notifies clients about the amount burnt */\n', '  event Burn(address indexed from, uint value);\n', '\n', '  function burn(uint _value) returns (bool success) {\n', '    require(_value > 0 && balances[msg.sender] >= _value);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Burn(msg.sender, _value);\n', '    return true;\n', '  }\n', '\n', '  function burnFrom(address _from, uint _value) returns (bool success) {\n', '    require(_from != 0x0 && _value > 0 && balances[_from] >= _value);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Burn(_from, _value);\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '    require(_to != 0x0); //use burn\n', '\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '    require(_to != 0x0); //use burn\n', '\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Contract that will work with ERC223 tokens.\n', ' */\n', '\n', 'contract ERC223ReceivingContract {\n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data);\n', '}\n', '\n', '/**\n', ' * @title AnythingAppToken\n', ' *\n', ' * @dev Burnable Ownable ERC20 token\n', ' */\n', 'contract AnythingAppToken is Burnable, Ownable {\n', '\n', '  string public constant name = "AnythingApp Token";\n', '  string public constant symbol = "ANY";\n', '  uint8 public constant decimals = 18;\n', '  uint public constant INITIAL_SUPPLY = 400000000 * 1 ether;\n', '\n', '  /* The finalizer contract that allows unlift the transfer limits on this token */\n', '  address public releaseAgent;\n', '\n', '  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n', '  bool public released = false;\n', '\n', '  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n', '  mapping (address => bool) public transferAgents;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '\n', '  /**\n', '   * Limit token transfer until the crowdsale is over.\n', '   *\n', '   */\n', '  modifier canTransfer(address _sender) {\n', '    require(released || transferAgents[_sender]);\n', '    _;\n', '  }\n', '\n', '  /** The function can be called only before or after the tokens have been released */\n', '  modifier inReleaseState(bool releaseState) {\n', '    require(releaseState == released);\n', '    _;\n', '  }\n', '\n', '  /** The function can be called only by a whitelisted release agent. */\n', '  modifier onlyReleaseAgent() {\n', '    require(msg.sender == releaseAgent);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Constructor that gives msg.sender all of existing tokens.\n', '   */\n', '  function AnythingAppToken() {\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '    Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '  }\n', '\n', '  /**\n', '   * Set the contract that can call release and make the token transferable.\n', '   *\n', '   * Design choice. Allow reset the release agent to fix fat finger mistakes.\n', '   */\n', '  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n', '    require(addr != 0x0);\n', '\n', '    // We don&#39;t do interface check here as we might want to a normal wallet address to act as a release agent\n', '    releaseAgent = addr;\n', '  }\n', '\n', '  function release() onlyReleaseAgent inReleaseState(false) public {\n', '    released = true;\n', '  }\n', '\n', '  /**\n', '   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n', '   */\n', '  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n', '    require(addr != 0x0);\n', '    transferAgents[addr] = state;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {\n', '    // Call Burnable.transferForm()\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '\n', '  /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      Invokes the `tokenFallback` function if the recipient is a contract.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallback` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function transfer(address _to, uint _value, bytes _data) canTransfer(msg.sender) returns (bool success) {\n', '      require(_to != address(0));\n', '      require(_value <= balances[msg.sender]);\n', '      uint codeLength;\n', '      assembly {\n', '          codeLength := extcodesize(_to)\n', '      }\n', '      balances[msg.sender] = balances[msg.sender].sub(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '      if(codeLength>0) {\n', '          ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '          receiver.tokenFallback(msg.sender, _value, _data);\n', '      }\n', '      Transfer(msg.sender, _to, _value, _data);\n', '      return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      This function works the same with the previous one\n', '     *      but doesn&#39;t contain `_data` param.\n', '     *      Added due to backwards compatibility reasons.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     */\n', '    function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {\n', '      require(_to != address(0));\n', '      require(_value <= balances[msg.sender]);\n', '\n', '      uint codeLength;\n', '      bytes memory empty;\n', '\n', '      assembly {\n', '          codeLength := extcodesize(_to)\n', '      }\n', '\n', '      balances[msg.sender] = balances[msg.sender].sub(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '      if(codeLength>0) {\n', '          ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '          receiver.tokenFallback(msg.sender, _value, empty);\n', '      }\n', '      Transfer(msg.sender, _to, _value, empty);\n', '      return true;\n', '    }\n', '\n', '  function burn(uint _value) onlyOwner returns (bool success) {\n', '    return super.burn(_value);\n', '  }\n', '\n', '  function burnFrom(address _from, uint _value) onlyOwner returns (bool success) {\n', '    return super.burnFrom(_from, _value);\n', '  }\n', '}\n', '\n', 'contract InvestorWhiteList is Ownable {\n', '  mapping (address => bool) public investorWhiteList;\n', '\n', '  mapping (address => address) public referralList;\n', '\n', '  function InvestorWhiteList() {\n', '\n', '  }\n', '\n', '  function addInvestorToWhiteList(address investor) external onlyOwner {\n', '    require(investor != 0x0 && !investorWhiteList[investor]);\n', '    investorWhiteList[investor] = true;\n', '  }\n', '\n', '  function removeInvestorFromWhiteList(address investor) external onlyOwner {\n', '    require(investor != 0x0 && investorWhiteList[investor]);\n', '    investorWhiteList[investor] = false;\n', '  }\n', '\n', '  //when new user will contribute ICO contract will automatically send bonus to referral\n', '  function addReferralOf(address investor, address referral) external onlyOwner {\n', '    require(investor != 0x0 && referral != 0x0 && referralList[investor] == 0x0 && investor != referral);\n', '    referralList[investor] = referral;\n', '  }\n', '\n', '  function isAllowed(address investor) constant external returns (bool result) {\n', '    return investorWhiteList[investor];\n', '  }\n', '\n', '  function getReferralOf(address investor) constant external returns (address result) {\n', '    return referralList[investor];\n', '  }\n', '}\n', '\n', 'contract PriceReceiver {\n', '  address public ethPriceProvider;\n', '\n', '  modifier onlyEthPriceProvider() {\n', '    require(msg.sender == ethPriceProvider);\n', '    _;\n', '  }\n', '\n', '  function receiveEthPrice(uint ethUsdPrice) external;\n', '\n', '  function setEthPriceProvider(address provider) external;\n', '}\n', '\n', 'contract AnythingAppTokenPreSale is Haltable, PriceReceiver {\n', '  using SafeMath for uint;\n', '\n', '  string public constant name = "AnythingAppTokenPreSale";\n', '\n', '  AnythingAppToken public token;\n', '  InvestorWhiteList public investorWhiteList;\n', '  address public beneficiary;\n', '\n', '  uint public tokenPriceUsd;\n', '  uint public totalTokens;//in wei\n', '\n', '  uint public ethUsdRate;\n', '\n', '  uint public collected = 0;\n', '  uint public withdrawn = 0;\n', '  uint public tokensSold = 0;\n', '  uint public investorCount = 0;\n', '  uint public weiRefunded = 0;\n', '\n', '  uint public startTime;\n', '  uint public endTime;\n', '\n', '  bool public crowdsaleFinished = false;\n', '\n', '  mapping (address => bool) public refunded;\n', '  mapping (address => uint) public deposited;\n', '\n', '  uint public constant MINIMAL_PURCHASE = 250 ether;\n', '  uint public constant LIMIT_PER_USER = 500000 ether;\n', '\n', '  event NewContribution(address indexed holder, uint tokenAmount, uint etherAmount);\n', '  event NewReferralTransfer(address indexed investor, address indexed referral, uint tokenAmount);\n', '  event Refunded(address indexed holder, uint amount);\n', '  event Deposited(address indexed holder, uint amount);\n', '\n', '  modifier preSaleActive() {\n', '    require(block.timestamp >= startTime && block.timestamp < endTime);\n', '    _;\n', '  }\n', '\n', '  modifier preSaleEnded() {\n', '    require(block.timestamp >= endTime);\n', '    _;\n', '  }\n', '\n', '\n', '  function AnythingAppTokenPreSale(\n', '    address _token,\n', '    address _beneficiary,\n', '    address _investorWhiteList,\n', '\n', '    uint _totalTokens,\n', '    uint _tokenPriceUsd,\n', '\n', '    uint _baseEthUsdPrice,\n', '\n', '    uint _startTime,\n', '    uint _endTime\n', '  ) {\n', '    ethUsdRate = _baseEthUsdPrice;\n', '    tokenPriceUsd = _tokenPriceUsd;\n', '\n', '    totalTokens = _totalTokens.mul(1 ether);\n', '\n', '    token = AnythingAppToken(_token);\n', '    investorWhiteList = InvestorWhiteList(_investorWhiteList);\n', '    beneficiary = _beneficiary;\n', '\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '  }\n', '\n', '  function() payable {\n', '    doPurchase(msg.sender);\n', '  }\n', '\n', '  function tokenFallback(address _from, uint _value, bytes _data) public pure { }\n', '\n', '  function doPurchase(address _owner) private preSaleActive inNormalState {\n', '    if (token.balanceOf(msg.sender) == 0) investorCount++;\n', '\n', '    uint tokens = msg.value.mul(ethUsdRate).div(tokenPriceUsd);\n', '    address referral = investorWhiteList.getReferralOf(msg.sender);\n', '    uint referralBonus = calculateReferralBonus(tokens);\n', '\n', '    uint newTokensSold = tokensSold.add(tokens);\n', '    if (referralBonus > 0 && referral != 0x0) {\n', '      newTokensSold = newTokensSold.add(referralBonus);\n', '    }\n', '\n', '    require(newTokensSold <= totalTokens);\n', '    require(token.balanceOf(msg.sender).add(tokens) <= LIMIT_PER_USER);\n', '\n', '    tokensSold = newTokensSold;\n', '\n', '    collected = collected.add(msg.value);\n', '    deposited[msg.sender] = deposited[msg.sender].add(msg.value);\n', '\n', '    token.transfer(msg.sender, tokens);\n', '    NewContribution(_owner, tokens, msg.value);\n', '\n', '    if (referralBonus > 0 && referral != 0x0) {\n', '      token.transfer(referral, referralBonus);\n', '      NewReferralTransfer(msg.sender, referral, referralBonus);\n', '    }\n', '  }\n', '\n', '  function calculateReferralBonus(uint _tokens) internal constant returns (uint _bonus) {\n', '    return _tokens.mul(20).div(100);\n', '  }\n', '\n', '  function withdraw() external onlyOwner {\n', '    uint toWithdraw = collected.sub(withdrawn);\n', '    beneficiary.transfer(toWithdraw);\n', '    withdrawn = withdrawn.add(toWithdraw);\n', '  }\n', '\n', '  function withdrawTokens() external onlyOwner {\n', '    token.transfer(beneficiary, token.balanceOf(this));\n', '  }\n', '\n', '  function receiveEthPrice(uint ethUsdPrice) external onlyEthPriceProvider {\n', '    require(ethUsdPrice > 0);\n', '    ethUsdRate = ethUsdPrice;\n', '  }\n', '\n', '  function setEthPriceProvider(address provider) external onlyOwner {\n', '    require(provider != 0x0);\n', '    ethPriceProvider = provider;\n', '  }\n', '\n', '  function setNewWhiteList(address newWhiteList) external onlyOwner {\n', '    require(newWhiteList != 0x0);\n', '    investorWhiteList = InvestorWhiteList(newWhiteList);\n', '  }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/*\n', ' * Haltable\n', ' *\n', ' * Abstract contract that allows children to implement an\n', ' * emergency stop mechanism. Differs from Pausable by requiring a state.\n', ' *\n', ' *\n', ' * Originally envisioned in FirstBlood ICO contract.\n', ' */\n', 'contract Haltable is Ownable {\n', '  bool public halted = false;\n', '\n', '  modifier inNormalState {\n', '    require(!halted);\n', '    _;\n', '  }\n', '\n', '  modifier inEmergencyState {\n', '    require(halted);\n', '    _;\n', '  }\n', '\n', '  // called by the owner on emergency, triggers stopped state\n', '  function halt() external onlyOwner inNormalState {\n', '    halted = true;\n', '  }\n', '\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function unhalt() external onlyOwner inEmergencyState {\n', '    halted = false;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable\n', ' *\n', ' * @dev Standard ERC20 token\n', ' */\n', 'contract Burnable is StandardToken {\n', '  using SafeMath for uint;\n', '\n', '  /* This notifies clients about the amount burnt */\n', '  event Burn(address indexed from, uint value);\n', '\n', '  function burn(uint _value) returns (bool success) {\n', '    require(_value > 0 && balances[msg.sender] >= _value);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Burn(msg.sender, _value);\n', '    return true;\n', '  }\n', '\n', '  function burnFrom(address _from, uint _value) returns (bool success) {\n', '    require(_from != 0x0 && _value > 0 && balances[_from] >= _value);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Burn(_from, _value);\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '    require(_to != 0x0); //use burn\n', '\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '    require(_to != 0x0); //use burn\n', '\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Contract that will work with ERC223 tokens.\n', ' */\n', '\n', 'contract ERC223ReceivingContract {\n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data);\n', '}\n', '\n', '/**\n', ' * @title AnythingAppToken\n', ' *\n', ' * @dev Burnable Ownable ERC20 token\n', ' */\n', 'contract AnythingAppToken is Burnable, Ownable {\n', '\n', '  string public constant name = "AnythingApp Token";\n', '  string public constant symbol = "ANY";\n', '  uint8 public constant decimals = 18;\n', '  uint public constant INITIAL_SUPPLY = 400000000 * 1 ether;\n', '\n', '  /* The finalizer contract that allows unlift the transfer limits on this token */\n', '  address public releaseAgent;\n', '\n', '  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n', '  bool public released = false;\n', '\n', '  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n', '  mapping (address => bool) public transferAgents;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '\n', '  /**\n', '   * Limit token transfer until the crowdsale is over.\n', '   *\n', '   */\n', '  modifier canTransfer(address _sender) {\n', '    require(released || transferAgents[_sender]);\n', '    _;\n', '  }\n', '\n', '  /** The function can be called only before or after the tokens have been released */\n', '  modifier inReleaseState(bool releaseState) {\n', '    require(releaseState == released);\n', '    _;\n', '  }\n', '\n', '  /** The function can be called only by a whitelisted release agent. */\n', '  modifier onlyReleaseAgent() {\n', '    require(msg.sender == releaseAgent);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Constructor that gives msg.sender all of existing tokens.\n', '   */\n', '  function AnythingAppToken() {\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '    Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '  }\n', '\n', '  /**\n', '   * Set the contract that can call release and make the token transferable.\n', '   *\n', '   * Design choice. Allow reset the release agent to fix fat finger mistakes.\n', '   */\n', '  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n', '    require(addr != 0x0);\n', '\n', "    // We don't do interface check here as we might want to a normal wallet address to act as a release agent\n", '    releaseAgent = addr;\n', '  }\n', '\n', '  function release() onlyReleaseAgent inReleaseState(false) public {\n', '    released = true;\n', '  }\n', '\n', '  /**\n', '   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n', '   */\n', '  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n', '    require(addr != 0x0);\n', '    transferAgents[addr] = state;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {\n', '    // Call Burnable.transferForm()\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '\n', '  /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      Invokes the `tokenFallback` function if the recipient is a contract.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallback` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function transfer(address _to, uint _value, bytes _data) canTransfer(msg.sender) returns (bool success) {\n', '      require(_to != address(0));\n', '      require(_value <= balances[msg.sender]);\n', '      uint codeLength;\n', '      assembly {\n', '          codeLength := extcodesize(_to)\n', '      }\n', '      balances[msg.sender] = balances[msg.sender].sub(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '      if(codeLength>0) {\n', '          ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '          receiver.tokenFallback(msg.sender, _value, _data);\n', '      }\n', '      Transfer(msg.sender, _to, _value, _data);\n', '      return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      This function works the same with the previous one\n', "     *      but doesn't contain `_data` param.\n", '     *      Added due to backwards compatibility reasons.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     */\n', '    function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {\n', '      require(_to != address(0));\n', '      require(_value <= balances[msg.sender]);\n', '\n', '      uint codeLength;\n', '      bytes memory empty;\n', '\n', '      assembly {\n', '          codeLength := extcodesize(_to)\n', '      }\n', '\n', '      balances[msg.sender] = balances[msg.sender].sub(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '      if(codeLength>0) {\n', '          ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '          receiver.tokenFallback(msg.sender, _value, empty);\n', '      }\n', '      Transfer(msg.sender, _to, _value, empty);\n', '      return true;\n', '    }\n', '\n', '  function burn(uint _value) onlyOwner returns (bool success) {\n', '    return super.burn(_value);\n', '  }\n', '\n', '  function burnFrom(address _from, uint _value) onlyOwner returns (bool success) {\n', '    return super.burnFrom(_from, _value);\n', '  }\n', '}\n', '\n', 'contract InvestorWhiteList is Ownable {\n', '  mapping (address => bool) public investorWhiteList;\n', '\n', '  mapping (address => address) public referralList;\n', '\n', '  function InvestorWhiteList() {\n', '\n', '  }\n', '\n', '  function addInvestorToWhiteList(address investor) external onlyOwner {\n', '    require(investor != 0x0 && !investorWhiteList[investor]);\n', '    investorWhiteList[investor] = true;\n', '  }\n', '\n', '  function removeInvestorFromWhiteList(address investor) external onlyOwner {\n', '    require(investor != 0x0 && investorWhiteList[investor]);\n', '    investorWhiteList[investor] = false;\n', '  }\n', '\n', '  //when new user will contribute ICO contract will automatically send bonus to referral\n', '  function addReferralOf(address investor, address referral) external onlyOwner {\n', '    require(investor != 0x0 && referral != 0x0 && referralList[investor] == 0x0 && investor != referral);\n', '    referralList[investor] = referral;\n', '  }\n', '\n', '  function isAllowed(address investor) constant external returns (bool result) {\n', '    return investorWhiteList[investor];\n', '  }\n', '\n', '  function getReferralOf(address investor) constant external returns (address result) {\n', '    return referralList[investor];\n', '  }\n', '}\n', '\n', 'contract PriceReceiver {\n', '  address public ethPriceProvider;\n', '\n', '  modifier onlyEthPriceProvider() {\n', '    require(msg.sender == ethPriceProvider);\n', '    _;\n', '  }\n', '\n', '  function receiveEthPrice(uint ethUsdPrice) external;\n', '\n', '  function setEthPriceProvider(address provider) external;\n', '}\n', '\n', 'contract AnythingAppTokenPreSale is Haltable, PriceReceiver {\n', '  using SafeMath for uint;\n', '\n', '  string public constant name = "AnythingAppTokenPreSale";\n', '\n', '  AnythingAppToken public token;\n', '  InvestorWhiteList public investorWhiteList;\n', '  address public beneficiary;\n', '\n', '  uint public tokenPriceUsd;\n', '  uint public totalTokens;//in wei\n', '\n', '  uint public ethUsdRate;\n', '\n', '  uint public collected = 0;\n', '  uint public withdrawn = 0;\n', '  uint public tokensSold = 0;\n', '  uint public investorCount = 0;\n', '  uint public weiRefunded = 0;\n', '\n', '  uint public startTime;\n', '  uint public endTime;\n', '\n', '  bool public crowdsaleFinished = false;\n', '\n', '  mapping (address => bool) public refunded;\n', '  mapping (address => uint) public deposited;\n', '\n', '  uint public constant MINIMAL_PURCHASE = 250 ether;\n', '  uint public constant LIMIT_PER_USER = 500000 ether;\n', '\n', '  event NewContribution(address indexed holder, uint tokenAmount, uint etherAmount);\n', '  event NewReferralTransfer(address indexed investor, address indexed referral, uint tokenAmount);\n', '  event Refunded(address indexed holder, uint amount);\n', '  event Deposited(address indexed holder, uint amount);\n', '\n', '  modifier preSaleActive() {\n', '    require(block.timestamp >= startTime && block.timestamp < endTime);\n', '    _;\n', '  }\n', '\n', '  modifier preSaleEnded() {\n', '    require(block.timestamp >= endTime);\n', '    _;\n', '  }\n', '\n', '\n', '  function AnythingAppTokenPreSale(\n', '    address _token,\n', '    address _beneficiary,\n', '    address _investorWhiteList,\n', '\n', '    uint _totalTokens,\n', '    uint _tokenPriceUsd,\n', '\n', '    uint _baseEthUsdPrice,\n', '\n', '    uint _startTime,\n', '    uint _endTime\n', '  ) {\n', '    ethUsdRate = _baseEthUsdPrice;\n', '    tokenPriceUsd = _tokenPriceUsd;\n', '\n', '    totalTokens = _totalTokens.mul(1 ether);\n', '\n', '    token = AnythingAppToken(_token);\n', '    investorWhiteList = InvestorWhiteList(_investorWhiteList);\n', '    beneficiary = _beneficiary;\n', '\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '  }\n', '\n', '  function() payable {\n', '    doPurchase(msg.sender);\n', '  }\n', '\n', '  function tokenFallback(address _from, uint _value, bytes _data) public pure { }\n', '\n', '  function doPurchase(address _owner) private preSaleActive inNormalState {\n', '    if (token.balanceOf(msg.sender) == 0) investorCount++;\n', '\n', '    uint tokens = msg.value.mul(ethUsdRate).div(tokenPriceUsd);\n', '    address referral = investorWhiteList.getReferralOf(msg.sender);\n', '    uint referralBonus = calculateReferralBonus(tokens);\n', '\n', '    uint newTokensSold = tokensSold.add(tokens);\n', '    if (referralBonus > 0 && referral != 0x0) {\n', '      newTokensSold = newTokensSold.add(referralBonus);\n', '    }\n', '\n', '    require(newTokensSold <= totalTokens);\n', '    require(token.balanceOf(msg.sender).add(tokens) <= LIMIT_PER_USER);\n', '\n', '    tokensSold = newTokensSold;\n', '\n', '    collected = collected.add(msg.value);\n', '    deposited[msg.sender] = deposited[msg.sender].add(msg.value);\n', '\n', '    token.transfer(msg.sender, tokens);\n', '    NewContribution(_owner, tokens, msg.value);\n', '\n', '    if (referralBonus > 0 && referral != 0x0) {\n', '      token.transfer(referral, referralBonus);\n', '      NewReferralTransfer(msg.sender, referral, referralBonus);\n', '    }\n', '  }\n', '\n', '  function calculateReferralBonus(uint _tokens) internal constant returns (uint _bonus) {\n', '    return _tokens.mul(20).div(100);\n', '  }\n', '\n', '  function withdraw() external onlyOwner {\n', '    uint toWithdraw = collected.sub(withdrawn);\n', '    beneficiary.transfer(toWithdraw);\n', '    withdrawn = withdrawn.add(toWithdraw);\n', '  }\n', '\n', '  function withdrawTokens() external onlyOwner {\n', '    token.transfer(beneficiary, token.balanceOf(this));\n', '  }\n', '\n', '  function receiveEthPrice(uint ethUsdPrice) external onlyEthPriceProvider {\n', '    require(ethUsdPrice > 0);\n', '    ethUsdRate = ethUsdPrice;\n', '  }\n', '\n', '  function setEthPriceProvider(address provider) external onlyOwner {\n', '    require(provider != 0x0);\n', '    ethPriceProvider = provider;\n', '  }\n', '\n', '  function setNewWhiteList(address newWhiteList) external onlyOwner {\n', '    require(newWhiteList != 0x0);\n', '    investorWhiteList = InvestorWhiteList(newWhiteList);\n', '  }\n', '}']
