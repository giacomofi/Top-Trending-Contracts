['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract BatchTransferEther is Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    event LogTransfer(address indexed sender, address indexed receiver, uint256 amount);\n', '    \n', '    function batchTransferEtherWithSameAmount(address[] _addresses, uint _amoumt) public payable onlyOwner {\n', '        require(_addresses.length != 0 && _amoumt != 0);\n', '        uint checkAmount = msg.value.div(_addresses.length);\n', '        require(_amoumt == checkAmount);\n', '        \n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            require(_addresses[i] != address(0));\n', '            _addresses[i].transfer(_amoumt);\n', '            emit LogTransfer(msg.sender, _addresses[i], _amoumt);\n', '        }\n', '    }\n', '    \n', '    function batchTransferEther(address[] _addresses, uint[] _amoumts) public payable onlyOwner {\n', '        require(_addresses.length == _amoumts.length || _addresses.length != 0);\n', '        uint total = sumAmounts(_amoumts);\n', '        require(total == msg.value);\n', '        \n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            require(_addresses[i] != 0x0);\n', '            _addresses[i].transfer(_amoumts[i]);\n', '            emit LogTransfer(msg.sender, _addresses[i], _amoumts[i]);\n', '        }\n', '    }\n', '    \n', '    function sumAmounts(uint[] _amoumts) private pure returns (uint sumResult) {\n', '        for (uint i = 0; i < _amoumts.length; i++) {\n', '            require(_amoumts[i] > 0);\n', '            sumResult = sumResult.add(_amoumts[i]);\n', '        }\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract BatchTransferEther is Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    event LogTransfer(address indexed sender, address indexed receiver, uint256 amount);\n', '    \n', '    function batchTransferEtherWithSameAmount(address[] _addresses, uint _amoumt) public payable onlyOwner {\n', '        require(_addresses.length != 0 && _amoumt != 0);\n', '        uint checkAmount = msg.value.div(_addresses.length);\n', '        require(_amoumt == checkAmount);\n', '        \n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            require(_addresses[i] != address(0));\n', '            _addresses[i].transfer(_amoumt);\n', '            emit LogTransfer(msg.sender, _addresses[i], _amoumt);\n', '        }\n', '    }\n', '    \n', '    function batchTransferEther(address[] _addresses, uint[] _amoumts) public payable onlyOwner {\n', '        require(_addresses.length == _amoumts.length || _addresses.length != 0);\n', '        uint total = sumAmounts(_amoumts);\n', '        require(total == msg.value);\n', '        \n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            require(_addresses[i] != 0x0);\n', '            _addresses[i].transfer(_amoumts[i]);\n', '            emit LogTransfer(msg.sender, _addresses[i], _amoumts[i]);\n', '        }\n', '    }\n', '    \n', '    function sumAmounts(uint[] _amoumts) private pure returns (uint sumResult) {\n', '        for (uint i = 0; i < _amoumts.length; i++) {\n', '            require(_amoumts[i] > 0);\n', '            sumResult = sumResult.add(_amoumts[i]);\n', '        }\n', '    }\n', '\n', '}']
