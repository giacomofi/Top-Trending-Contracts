['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/commons/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath by OpenZeppelin (partially)\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/ERC20TokenInterface.sol\n', '\n', '/**\n', ' * Token contract interface for external use\n', ' */\n', 'contract ERC20TokenInterface {\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 value);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '}\n', '\n', '// File: contracts/interfaces/FiatContractInterface.sol\n', '\n', '/**\n', '* @title Fiat currency contract\n', '* @dev This contract will return the value of 0.01$ ETH in wei\n', '*/\n', 'contract FiatContractInterface {\n', '\n', '    function EUR(uint _id) public constant returns (uint256);\n', '\n', '}\n', '\n', '// File: contracts/NETRico.sol\n', '\n', '/**\n', '* @title NETRico sale main contract\n', '*/\n', 'contract NETRico {\n', '\n', '    FiatContractInterface price = FiatContractInterface(0x8055d0504666e2B6942BeB8D6014c964658Ca591); // MAINNET ADDRESS\n', '\n', '    using SafeMath for uint256;\n', '\n', '    //This sale have 3 stages\n', '    enum State {\n', '        Stage1,\n', '        Stage2,\n', '        Successful\n', '    }\n', '\n', '    //public variables\n', '    State public state = State.Stage1; //Set initial stage\n', '    uint256 public startTime;\n', '    uint256 public startStage2Time;\n', '    uint256 public deadline;\n', '    uint256 public totalRaised; //eth in wei\n', '    uint256 public totalDistributed; //tokens distributed\n', '    uint256 public completedAt; //Time stamp when the sale finish\n', '    ERC20TokenInterface public tokenReward; //Address of the valid token used as reward\n', '    address public creator; //Address of the contract deployer\n', '    string public campaignUrl; //Web site of the campaign\n', '    string public version = "2";\n', '\n', '    //events for log\n', '    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n', '    event LogBeneficiaryPaid(address _beneficiaryAddress);\n', '    event LogFundingSuccessful(uint _totalRaised);\n', '    event LogFunderInitialized(address _creator, string _url);\n', '    event LogContributorsPayout(address _addr, uint _amount);\n', '\n', '    modifier notFinished() {\n', '        require(state != State.Successful);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCreator() {\n', '        require(msg.sender == creator);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice NETRico constructor\n', '    * @param _campaignUrl is the ICO _url\n', '    * @param _addressOfTokenUsedAsReward is the token totalDistributed\n', '    * @param _startTime timestamp of Stage1 start\n', '    * @param _startStage2Time timestamp of Stage2 start\n', '    * @param _deadline timestamp of Stage2 stop\n', '    */\n', '    function NETRico(string _campaignUrl, ERC20TokenInterface _addressOfTokenUsedAsReward,\n', '        uint256 _startTime, uint256 _startStage2Time, uint256 _deadline) public {\n', '        require(_addressOfTokenUsedAsReward != address(0)\n', '            && _startTime > now\n', '            && _startStage2Time > _startTime\n', '            && _deadline > _startStage2Time);\n', '\n', '        creator = 0xB987B463c7573f0B7b6eD7cc8E5Fab9042272065;\n', '        //creator = msg.sender;\n', '        campaignUrl = _campaignUrl;\n', '        tokenReward = ERC20TokenInterface(_addressOfTokenUsedAsReward);\n', '\n', '        startTime = _startTime;\n', '        startStage2Time = _startStage2Time;\n', '        deadline = _deadline;\n', '\n', '        emit LogFunderInitialized(creator, campaignUrl);\n', '    }\n', '\n', '    /**\n', '    * @notice Function to handle eth transfers\n', '    * @dev BEWARE: if a call to this functions doesn&#39;t have\n', '    * enough gas, transaction could not be finished\n', '    */\n', '    function() public payable {\n', '        contribute();\n', '    }\n', '\n', '    /**\n', '    * @notice Set timestamp of Stage2 start\n', '    **/\n', '    function setStage2Start(uint256 _startStage2Time) public onlyCreator {\n', '        require(_startStage2Time > now && _startStage2Time > startTime && _startStage2Time < deadline);\n', '        startStage2Time = _startStage2Time;\n', '    }\n', '\n', '    /**\n', '    * @notice Set timestamp of deadline\n', '    **/\n', '    function setDeadline(uint256 _deadline) public onlyCreator {\n', '        require(_deadline > now && _deadline > startStage2Time);\n', '        deadline = _deadline;\n', '    }\n', '\n', '    /**\n', '    * @notice contribution handler\n', '    */\n', '    function contribute() public notFinished payable {\n', '        require(now >= startTime);\n', '\n', '        uint256 tokenBought;\n', '        //Variable to store amount of tokens bought\n', '        uint256 tokenPrice = price.EUR(0);\n', '        //1 cent value in wei\n', '\n', '        totalRaised = totalRaised.add(msg.value);\n', '        //Save the total eth totalRaised (in wei)\n', '\n', '        tokenPrice = tokenPrice.mul(2);\n', '        //0.02$ EUR value in wei\n', '        tokenPrice = tokenPrice.div(10 ** 8);\n', '        //Change base 18 to 10\n', '\n', '        tokenBought = msg.value.div(tokenPrice);\n', '        //Base 18/ Base 10 = Base 8\n', '        tokenBought = tokenBought.mul(10 ** 10);\n', '        //Base 8 to Base 18\n', '\n', '        require(tokenBought >= 100 * 10 ** 18);\n', '        //Minimum 100 base tokens\n', '\n', '        //Bonus calculation\n', '        if (state == State.Stage1) {\n', '            tokenBought = tokenBought.mul(140);\n', '            tokenBought = tokenBought.div(100);\n', '            //+40%\n', '        } else if (state == State.Stage2) {\n', '            tokenBought = tokenBought.mul(120);\n', '            tokenBought = tokenBought.div(100);\n', '            //+20%\n', '        }\n', '\n', '        totalDistributed = totalDistributed.add(tokenBought);\n', '        //Save to total tokens distributed\n', '\n', '        tokenReward.transfer(msg.sender, tokenBought);\n', '        //Send Tokens\n', '\n', '        creator.transfer(msg.value);\n', '        // Send ETH to creator\n', '        emit LogBeneficiaryPaid(creator);\n', '\n', '        //LOGS\n', '        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\n', '        emit LogContributorsPayout(msg.sender, tokenBought);\n', '\n', '        checkIfFundingCompleteOrExpired();\n', '    }\n', '\n', '    /**\n', '    * @notice check status\n', '    */\n', '    function checkIfFundingCompleteOrExpired() public {\n', '\n', '        if (now > deadline && state != State.Successful) {\n', '\n', '            state = State.Successful;\n', '            //Sale becomes Successful\n', '            completedAt = now;\n', '            //ICO finished\n', '\n', '            emit LogFundingSuccessful(totalRaised);\n', '            //we log the finish\n', '\n', '            finished();\n', '        } else if (state == State.Stage1 && now >= startStage2Time) {\n', '\n', '            state = State.Stage2;\n', '\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @notice Function for closure handle\n', '    */\n', '    function finished() public { //When finished eth are transferred to creator\n', '        require(state == State.Successful);\n', '        //Only when sale finish\n', '\n', '        uint256 remainder = tokenReward.balanceOf(this);\n', '        //Remaining tokens on contract\n', '        //Funds send to creator if any\n', '        if (address(this).balance > 0) {\n', '            creator.transfer(address(this).balance);\n', '            emit LogBeneficiaryPaid(creator);\n', '        }\n', '\n', '        tokenReward.transfer(creator, remainder);\n', '        //remainder tokens send to creator\n', '        emit LogContributorsPayout(creator, remainder);\n', '\n', '    }\n', '\n', '    /**\n', '    * @notice Function to claim any token stuck on contract\n', '    */\n', '    function claimTokens(ERC20TokenInterface _address) public {\n', '        require(state == State.Successful);\n', '        //Only when sale finish\n', '        require(msg.sender == creator);\n', '\n', '        uint256 remainder = _address.balanceOf(this);\n', '        //Check remainder tokens\n', '        _address.transfer(creator, remainder);\n', '        //Transfer tokens to creator\n', '\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/commons/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath by OpenZeppelin (partially)\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/ERC20TokenInterface.sol\n', '\n', '/**\n', ' * Token contract interface for external use\n', ' */\n', 'contract ERC20TokenInterface {\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 value);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '}\n', '\n', '// File: contracts/interfaces/FiatContractInterface.sol\n', '\n', '/**\n', '* @title Fiat currency contract\n', '* @dev This contract will return the value of 0.01$ ETH in wei\n', '*/\n', 'contract FiatContractInterface {\n', '\n', '    function EUR(uint _id) public constant returns (uint256);\n', '\n', '}\n', '\n', '// File: contracts/NETRico.sol\n', '\n', '/**\n', '* @title NETRico sale main contract\n', '*/\n', 'contract NETRico {\n', '\n', '    FiatContractInterface price = FiatContractInterface(0x8055d0504666e2B6942BeB8D6014c964658Ca591); // MAINNET ADDRESS\n', '\n', '    using SafeMath for uint256;\n', '\n', '    //This sale have 3 stages\n', '    enum State {\n', '        Stage1,\n', '        Stage2,\n', '        Successful\n', '    }\n', '\n', '    //public variables\n', '    State public state = State.Stage1; //Set initial stage\n', '    uint256 public startTime;\n', '    uint256 public startStage2Time;\n', '    uint256 public deadline;\n', '    uint256 public totalRaised; //eth in wei\n', '    uint256 public totalDistributed; //tokens distributed\n', '    uint256 public completedAt; //Time stamp when the sale finish\n', '    ERC20TokenInterface public tokenReward; //Address of the valid token used as reward\n', '    address public creator; //Address of the contract deployer\n', '    string public campaignUrl; //Web site of the campaign\n', '    string public version = "2";\n', '\n', '    //events for log\n', '    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n', '    event LogBeneficiaryPaid(address _beneficiaryAddress);\n', '    event LogFundingSuccessful(uint _totalRaised);\n', '    event LogFunderInitialized(address _creator, string _url);\n', '    event LogContributorsPayout(address _addr, uint _amount);\n', '\n', '    modifier notFinished() {\n', '        require(state != State.Successful);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCreator() {\n', '        require(msg.sender == creator);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice NETRico constructor\n', '    * @param _campaignUrl is the ICO _url\n', '    * @param _addressOfTokenUsedAsReward is the token totalDistributed\n', '    * @param _startTime timestamp of Stage1 start\n', '    * @param _startStage2Time timestamp of Stage2 start\n', '    * @param _deadline timestamp of Stage2 stop\n', '    */\n', '    function NETRico(string _campaignUrl, ERC20TokenInterface _addressOfTokenUsedAsReward,\n', '        uint256 _startTime, uint256 _startStage2Time, uint256 _deadline) public {\n', '        require(_addressOfTokenUsedAsReward != address(0)\n', '            && _startTime > now\n', '            && _startStage2Time > _startTime\n', '            && _deadline > _startStage2Time);\n', '\n', '        creator = 0xB987B463c7573f0B7b6eD7cc8E5Fab9042272065;\n', '        //creator = msg.sender;\n', '        campaignUrl = _campaignUrl;\n', '        tokenReward = ERC20TokenInterface(_addressOfTokenUsedAsReward);\n', '\n', '        startTime = _startTime;\n', '        startStage2Time = _startStage2Time;\n', '        deadline = _deadline;\n', '\n', '        emit LogFunderInitialized(creator, campaignUrl);\n', '    }\n', '\n', '    /**\n', '    * @notice Function to handle eth transfers\n', "    * @dev BEWARE: if a call to this functions doesn't have\n", '    * enough gas, transaction could not be finished\n', '    */\n', '    function() public payable {\n', '        contribute();\n', '    }\n', '\n', '    /**\n', '    * @notice Set timestamp of Stage2 start\n', '    **/\n', '    function setStage2Start(uint256 _startStage2Time) public onlyCreator {\n', '        require(_startStage2Time > now && _startStage2Time > startTime && _startStage2Time < deadline);\n', '        startStage2Time = _startStage2Time;\n', '    }\n', '\n', '    /**\n', '    * @notice Set timestamp of deadline\n', '    **/\n', '    function setDeadline(uint256 _deadline) public onlyCreator {\n', '        require(_deadline > now && _deadline > startStage2Time);\n', '        deadline = _deadline;\n', '    }\n', '\n', '    /**\n', '    * @notice contribution handler\n', '    */\n', '    function contribute() public notFinished payable {\n', '        require(now >= startTime);\n', '\n', '        uint256 tokenBought;\n', '        //Variable to store amount of tokens bought\n', '        uint256 tokenPrice = price.EUR(0);\n', '        //1 cent value in wei\n', '\n', '        totalRaised = totalRaised.add(msg.value);\n', '        //Save the total eth totalRaised (in wei)\n', '\n', '        tokenPrice = tokenPrice.mul(2);\n', '        //0.02$ EUR value in wei\n', '        tokenPrice = tokenPrice.div(10 ** 8);\n', '        //Change base 18 to 10\n', '\n', '        tokenBought = msg.value.div(tokenPrice);\n', '        //Base 18/ Base 10 = Base 8\n', '        tokenBought = tokenBought.mul(10 ** 10);\n', '        //Base 8 to Base 18\n', '\n', '        require(tokenBought >= 100 * 10 ** 18);\n', '        //Minimum 100 base tokens\n', '\n', '        //Bonus calculation\n', '        if (state == State.Stage1) {\n', '            tokenBought = tokenBought.mul(140);\n', '            tokenBought = tokenBought.div(100);\n', '            //+40%\n', '        } else if (state == State.Stage2) {\n', '            tokenBought = tokenBought.mul(120);\n', '            tokenBought = tokenBought.div(100);\n', '            //+20%\n', '        }\n', '\n', '        totalDistributed = totalDistributed.add(tokenBought);\n', '        //Save to total tokens distributed\n', '\n', '        tokenReward.transfer(msg.sender, tokenBought);\n', '        //Send Tokens\n', '\n', '        creator.transfer(msg.value);\n', '        // Send ETH to creator\n', '        emit LogBeneficiaryPaid(creator);\n', '\n', '        //LOGS\n', '        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\n', '        emit LogContributorsPayout(msg.sender, tokenBought);\n', '\n', '        checkIfFundingCompleteOrExpired();\n', '    }\n', '\n', '    /**\n', '    * @notice check status\n', '    */\n', '    function checkIfFundingCompleteOrExpired() public {\n', '\n', '        if (now > deadline && state != State.Successful) {\n', '\n', '            state = State.Successful;\n', '            //Sale becomes Successful\n', '            completedAt = now;\n', '            //ICO finished\n', '\n', '            emit LogFundingSuccessful(totalRaised);\n', '            //we log the finish\n', '\n', '            finished();\n', '        } else if (state == State.Stage1 && now >= startStage2Time) {\n', '\n', '            state = State.Stage2;\n', '\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @notice Function for closure handle\n', '    */\n', '    function finished() public { //When finished eth are transferred to creator\n', '        require(state == State.Successful);\n', '        //Only when sale finish\n', '\n', '        uint256 remainder = tokenReward.balanceOf(this);\n', '        //Remaining tokens on contract\n', '        //Funds send to creator if any\n', '        if (address(this).balance > 0) {\n', '            creator.transfer(address(this).balance);\n', '            emit LogBeneficiaryPaid(creator);\n', '        }\n', '\n', '        tokenReward.transfer(creator, remainder);\n', '        //remainder tokens send to creator\n', '        emit LogContributorsPayout(creator, remainder);\n', '\n', '    }\n', '\n', '    /**\n', '    * @notice Function to claim any token stuck on contract\n', '    */\n', '    function claimTokens(ERC20TokenInterface _address) public {\n', '        require(state == State.Successful);\n', '        //Only when sale finish\n', '        require(msg.sender == creator);\n', '\n', '        uint256 remainder = _address.balanceOf(this);\n', '        //Check remainder tokens\n', '        _address.transfer(creator, remainder);\n', '        //Transfer tokens to creator\n', '\n', '    }\n', '}']
