['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/flavours/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/commons/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/flavours/Lockable.sol\n', '\n', '/**\n', ' * @title Lockable\n', ' * @dev Base contract which allows children to\n', ' *      implement main operations locking mechanism.\n', ' */\n', 'contract Lockable is Ownable {\n', '  event Lock();\n', '  event Unlock();\n', '\n', '  bool public locked = false;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable\n', '  *       only when the contract is not locked.\n', '   */\n', '  modifier whenNotLocked() {\n', '    require(!locked);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable\n', '   *      only when the contract is locked.\n', '   */\n', '  modifier whenLocked() {\n', '    require(locked);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to locke, triggers locked state\n', '   */\n', '  function lock() onlyOwner whenNotLocked public {\n', '    locked = true;\n', '    Lock();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner\n', '   *      to unlock, returns to unlocked state\n', '   */\n', '  function unlock() onlyOwner whenLocked public {\n', '    locked = false;\n', '    Unlock();\n', '  }\n', '}\n', '\n', '// File: contracts/base/BaseFixedERC20Token.sol\n', '\n', 'contract BaseFixedERC20Token is Lockable {\n', '  using SafeMath for uint;\n', '\n', '  /// @dev ERC20 Total supply\n', '  uint public totalSupply;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  mapping(address => mapping (address => uint)) private allowed;\n', '\n', '  /// @dev Fired if Token transfered accourding to ERC20\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '  /// @dev Fired if Token withdraw is approved accourding to ERC20\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address.\n', '   * @param owner_ The address to query the the balance of.\n', '   * @return An uint representing the amount owned by the passed address.\n', '   */\n', '  function balanceOf(address owner_) public view returns (uint balance) {\n', '    return balances[owner_];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer token for a specified address\n', '   * @param to_ The address to transfer to.\n', '   * @param value_ The amount to be transferred.\n', '   */\n', '  function transfer(address to_, uint value_) whenNotLocked public returns (bool) {\n', '    require(to_ != address(0) && value_ <= balances[msg.sender]);\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(value_);\n', '    balances[to_] = balances[to_].add(value_);\n', '    Transfer(msg.sender, to_, value_);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param from_ address The address which you want to send tokens from\n', '   * @param to_ address The address which you want to transfer to\n', '   * @param value_ uint the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address from_, address to_, uint value_) whenNotLocked public returns (bool) {\n', '    require(to_ != address(0) && value_ <= balances[from_] && value_ <= allowed[from_][msg.sender]);\n', '    balances[from_] = balances[from_].sub(value_);\n', '    balances[to_] = balances[to_].add(value_);\n', '    allowed[from_][msg.sender] = allowed[from_][msg.sender].sub(value_);\n', '    Transfer(from_, to_, value_);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering.\n', '   *\n', '   * To change the approve amount you first have to reduce the addresses\n', '   * allowance to zero by calling `approve(spender_, 0)` if it is not\n', '   * already 0 to mitigate the race condition described in:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   * @param spender_ The address which will spend the funds.\n', '   * @param value_ The amount of tokens to be spent.\n', '   */\n', '  function approve(address spender_, uint value_) whenNotLocked public returns (bool) {\n', '    if (value_ != 0 && allowed[msg.sender][spender_] != 0) {\n', '      revert();\n', '    }\n', '    allowed[msg.sender][spender_] = value_;\n', '    Approval(msg.sender, spender_, value_);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param owner_ address The address which owns the funds.\n', '   * @param spender_ address The address which will spend the funds.\n', '   * @return A uint specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address owner_, address spender_) view public returns (uint) {\n', '    return allowed[owner_][spender_];\n', '  }\n', '}\n', '\n', '// File: contracts/base/BaseICOToken.sol\n', '\n', '/**\n', ' * @dev Not mintable, ERC20 compilant token, distributed by ICO/Pre-ICO.\n', ' */\n', 'contract BaseICOToken is BaseFixedERC20Token {\n', '\n', '  /// @dev Available supply of tokens\n', '  uint public availableSupply;\n', '\n', '  /// @dev ICO/Pre-ICO smart contract allowed to distribute public funds for this\n', '  address public ico;\n', '\n', '  /// @dev Fired if investment for `amount` of tokens performed by `to` address\n', '  event ICOTokensInvested(address indexed to, uint amount);\n', '\n', '  /// @dev ICO contract changed for this token\n', '  event ICOChanged(address indexed icoContract);\n', '\n', '  /**\n', '   * @dev Not mintable, ERC20 compilant token, distributed by ICO/Pre-ICO.\n', '   * @param totalSupply_ Total tokens supply.\n', '   */\n', '  function BaseICOToken(uint totalSupply_) public {\n', '    locked = true;\n', '    totalSupply = totalSupply_;\n', '    availableSupply = totalSupply_;\n', '  }\n', '\n', '  /**\n', '   * @dev Set address of ICO smart-contract which controls token\n', '   * initial token distribution.\n', '   * @param ico_ ICO contract address.\n', '   */\n', '  function changeICO(address ico_) onlyOwner public {\n', '    ico = ico_;\n', '    ICOChanged(ico);\n', '  }\n', '\n', '  function isValidICOInvestment(address to_, uint amount_) internal view returns(bool) {\n', '    return msg.sender == ico && to_ != address(0) && amount_ <= availableSupply;\n', '  }\n', '\n', '  /**\n', '   * @dev Assign `amount_` of tokens to investor identified by `to_` address.\n', '   * @param to_ Investor address.\n', '   * @param amount_ Number of tokens distributed.\n', '   */\n', '  function icoInvestment(address to_, uint amount_) public returns (uint) {\n', '    require(isValidICOInvestment(to_, amount_));\n', '    availableSupply -= amount_;\n', '    balances[to_] = balances[to_].add(amount_);\n', '    ICOTokensInvested(to_, amount_);\n', '    return amount_;\n', '  }\n', '}\n', '\n', '// File: contracts/base/BaseICO.sol\n', '\n', '/**\n', ' * @dev Base abstract smart contract for any ICO\n', ' */\n', 'contract BaseICO is Ownable {\n', '\n', '  /// @dev ICO state\n', '  enum State {\n', '    // ICO is not active and not started\n', '    Inactive,\n', '    // ICO is active, tokens can be distributed among investors.\n', '    // ICO parameters (end date, hard/low caps) cannot be changed.\n', '    Active,\n', '    // ICO is suspended, tokens cannot be distributed among investors.\n', '    // ICO can be resumed to `Active state`.\n', '    // ICO parameters (end date, hard/low caps) may changed.\n', '    Suspended,\n', '    // ICO is termnated by owner, ICO cannot be resumed.\n', '    Terminated,\n', '    // ICO goals are not reached,\n', '    // ICO terminated and cannot be resumed.\n', '    NotCompleted,\n', '    // ICO completed, ICO goals reached successfully,\n', '    // ICO terminated and cannot be resumed.\n', '    Completed\n', '  }\n', '\n', '  /// @dev Token which controlled by this ICO\n', '  BaseICOToken public token;\n', '\n', '  /// @dev Current ICO state.\n', '  State public state;\n', '\n', '  /// @dev ICO start date seconds since epoch.\n', '  uint public startAt;\n', '\n', '  /// @dev ICO end date seconds since epoch.\n', '  uint public endAt;\n', '\n', '  /// @dev Minimal amount of investments in wei needed for successfull ICO\n', '  uint public lowCapWei;\n', '\n', '  /// @dev Maximal amount of investments in wei for this ICO.\n', '  /// If reached ICO will be in `Completed` state.\n', '  uint public hardCapWei;\n', '\n', '  /// @dev Minimal amount of investments in wei per investor.\n', '  uint public lowCapTxWei;\n', '\n', '  /// @dev Maximal amount of investments in wei per investor.\n', '  uint public hardCapTxWei;\n', '\n', '  /// @dev Number of investments collected by this ICO\n', '  uint public collectedWei;\n', '\n', '  /// @dev Team wallet used to collect funds\n', '  address public teamWallet;\n', '\n', '  /// @dev True if whitelist enabled\n', '  bool public whitelistEnabled = true;\n', '\n', '  /// @dev ICO whitelist\n', '  mapping (address => bool) public whitelist;\n', '\n', '  // ICO state transition events\n', '  event ICOStarted(uint indexed endAt, uint lowCapWei, uint hardCapWei, uint lowCapTxWei, uint hardCapTxWei);\n', '  event ICOResumed(uint indexed endAt, uint lowCapWei, uint hardCapWei, uint lowCapTxWei, uint hardCapTxWei);\n', '  event ICOSuspended();\n', '  event ICOTerminated();\n', '  event ICONotCompleted();\n', '  event ICOCompleted(uint collectedWei);\n', '  event ICOInvestment(address indexed from, uint investedWei, uint tokens, uint8 bonusPct);\n', '  event ICOWhitelisted(address indexed addr);\n', '  event ICOBlacklisted(address indexed addr);\n', '\n', '  modifier isSuspended() {\n', '    require(state == State.Suspended);\n', '    _;\n', '  }\n', '\n', '  modifier isActive() {\n', '    require(state == State.Active);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Add address to ICO whitelist\n', '   * @param address_ Investor address\n', '   */\n', '  function whitelist(address address_) external onlyOwner {\n', '    whitelist[address_] = true;\n', '    ICOWhitelisted(address_);\n', '  }\n', '\n', '  /**\n', '   * Remove address from ICO whitelist\n', '   * @param address_ Investor address\n', '   */\n', '  function blacklist(address address_) external onlyOwner {\n', '    delete whitelist[address_];\n', '    ICOBlacklisted(address_);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns true if given address in ICO whitelist\n', '   */\n', '  function whitelisted(address address_) public view returns (bool) {\n', '    if (whitelistEnabled) {\n', '      return whitelist[address_];\n', '    } else {\n', '      return true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Enable whitelisting\n', '   */\n', '  function enableWhitelist() public onlyOwner {\n', '    whitelistEnabled = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Disable whitelisting\n', '   */\n', '  function disableWhitelist() public onlyOwner {\n', '    whitelistEnabled = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Trigger start of ICO.\n', '   * @param endAt_ ICO end date, seconds since epoch.\n', '   */\n', '  function start(uint endAt_) onlyOwner public {\n', '    require(endAt_ > block.timestamp && state == State.Inactive);\n', '    endAt = endAt_;\n', '    startAt = block.timestamp;\n', '    state = State.Active;\n', '    ICOStarted(endAt, lowCapWei, hardCapWei, lowCapTxWei, hardCapTxWei);\n', '  }\n', '\n', '  /**\n', '   * @dev Suspend this ICO.\n', '   * ICO can be activated later by calling `resume()` function.\n', '   * In suspend state, ICO owner can change basic ICO paraneter using `tune()` function,\n', '   * tokens cannot be distributed among investors.\n', '   */\n', '  function suspend() onlyOwner isActive public {\n', '    state = State.Suspended;\n', '    ICOSuspended();\n', '  }\n', '\n', '  /**\n', '   * @dev Terminate the ICO.\n', '   * ICO goals are not reached, ICO terminated and cannot be resumed.\n', '   */\n', '  function terminate() onlyOwner public {\n', '    require(state != State.Terminated &&\n', '            state != State.NotCompleted &&\n', '            state != State.Completed);\n', '    state = State.Terminated;\n', '    ICOTerminated();\n', '  }\n', '\n', '  /**\n', '   * @dev Change basic ICO paraneters. Can be done only during `Suspended` state.\n', '   * Any provided parameter is used only if it is not zero.\n', '   * @param endAt_ ICO end date seconds since epoch. Used if it is not zero.\n', '   * @param lowCapWei_ ICO low capacity. Used if it is not zero.\n', '   * @param hardCapWei_ ICO hard capacity. Used if it is not zero.\n', '   * @param lowCapTxWei_ Min limit for ICO per transaction\n', '   * @param hardCapTxWei_ Hard limit for ICO per transaction\n', '   */\n', '  function tune(uint endAt_,\n', '                uint lowCapWei_,\n', '                uint hardCapWei_,\n', '                uint lowCapTxWei_,\n', '                uint hardCapTxWei_) onlyOwner isSuspended public {\n', '    if (endAt_ > block.timestamp) {\n', '      endAt = endAt_;\n', '    }\n', '    if (lowCapWei_ > 0) {\n', '      lowCapWei = lowCapWei_;\n', '    }\n', '    if (hardCapWei_ > 0) {\n', '      hardCapWei = hardCapWei_;\n', '    }\n', '    if (lowCapTxWei_ > 0) {\n', '      lowCapTxWei = lowCapTxWei_;\n', '    }\n', '    if (hardCapTxWei_ > 0) {\n', '      hardCapTxWei = hardCapTxWei_;\n', '    }\n', '    require(lowCapWei <= hardCapWei && lowCapTxWei <= hardCapTxWei);\n', '    touch();\n', '  }\n', '\n', '  /**\n', '   * @dev Resume a previously suspended ICO.\n', '   */\n', '  function resume() onlyOwner isSuspended public {\n', '    state = State.Active;\n', '    ICOResumed(endAt, lowCapWei, hardCapWei, lowCapTxWei, hardCapTxWei);\n', '    touch();\n', '  }\n', '\n', '  /**\n', '   * @dev Send ether to the fund collection wallet\n', '   */\n', '  function forwardFunds() internal {\n', '    teamWallet.transfer(msg.value);\n', '  }\n', '\n', '  /**\n', '   * @dev Recalculate ICO state based on current block time.\n', '   * Should be called periodically by ICO owner.\n', '   */\n', '  function touch() public;\n', '\n', '  /**\n', '   * @dev Buy tokens\n', '   */\n', '  function buyTokens() public payable;\n', '}\n', '\n', '// File: contracts/MDPreICO.sol\n', '\n', '/**\n', ' * @title MD tokens Pre-ICO contract.\n', ' */\n', 'contract MDPreICO is BaseICO {\n', '  using SafeMath for uint;\n', '\n', '  /// @dev 18 decimals for token\n', '  uint internal constant ONE_TOKEN = 1e18;\n', '\n', '  /// @dev 1e18 WEI == 1ETH == 1000 tokens\n', '  uint public constant ETH_TOKEN_EXCHANGE_RATIO = 1000;\n', '\n', '  /// @dev 100% bonus for pre-ICO\n', '  uint8 internal constant BONUS = 100; // 100%\n', '\n', '  function MDPreICO(address icoToken_,\n', '                    address teamWallet_,\n', '                    uint lowCapWei_,\n', '                    uint hardCapWei_,\n', '                    uint lowCapTxWei_,\n', '                    uint hardCapTxWei_) public {\n', '    require(icoToken_ != address(0) && teamWallet_ != address(0));\n', '    token = BaseICOToken(icoToken_);\n', '    teamWallet = teamWallet_;\n', '    state = State.Inactive;\n', '    lowCapWei = lowCapWei_;\n', '    hardCapWei = hardCapWei_;\n', '    lowCapTxWei = lowCapTxWei_;\n', '    hardCapTxWei = hardCapTxWei_;\n', '  }\n', '\n', '  /**\n', '   * @dev Recalculate ICO state based on current block time.\n', '   * Should be called periodically by ICO owner.\n', '   */\n', '  function touch() public {\n', '    if (state != State.Active && state != State.Suspended) {\n', '      return;\n', '    }\n', '    if (collectedWei >= hardCapWei) {\n', '      state = State.Completed;\n', '      endAt = block.timestamp;\n', '      ICOCompleted(collectedWei);\n', '    } else if (block.timestamp >= endAt) {\n', '      if (collectedWei < lowCapWei) {\n', '        state = State.NotCompleted;\n', '        ICONotCompleted();\n', '      } else {\n', '        state = State.Completed;\n', '        ICOCompleted(collectedWei);\n', '      }\n', '    }\n', '  }\n', '\n', '  function buyTokens() public payable {\n', '    require(state == State.Active &&\n', '            block.timestamp <= endAt &&\n', '            msg.value >= lowCapTxWei &&\n', '            msg.value <= hardCapTxWei &&\n', '            collectedWei + msg.value <= hardCapWei &&\n', '            whitelisted(msg.sender));\n', '    uint amountWei = msg.value;\n', '    uint iwei = amountWei.mul(100 + BONUS).div(100);\n', '    uint itokens = iwei * ETH_TOKEN_EXCHANGE_RATIO;\n', '    token.icoInvestment(msg.sender, itokens); // Transfer tokens to investor\n', '    collectedWei = collectedWei.add(amountWei);\n', '    ICOInvestment(msg.sender, amountWei, itokens, BONUS);\n', '    forwardFunds();\n', '    touch();\n', '  }\n', '\n', '  /**\n', '   * Accept direct payments\n', '   */\n', '  function() external payable {\n', '    buyTokens();\n', '  }\n', '}']