['pragma solidity ^0.4.24;\n', '\n', 'interface IOracle {\n', '\n', '    /**\n', '    * @notice Returns address of oracle currency (0x0 for ETH)\n', '    */\n', '    function getCurrencyAddress() external view returns(address);\n', '\n', '    /**\n', '    * @notice Returns symbol of oracle currency (0x0 for ETH)\n', '    */\n', '    function getCurrencySymbol() external view returns(bytes32);\n', '\n', '    /**\n', '    * @notice Returns denomination of price\n', '    */\n', '    function getCurrencyDenominated() external view returns(bytes32);\n', '\n', '    /**\n', '    * @notice Returns price - should throw if not valid\n', '    */\n', '    function getPrice() external view returns(uint256);\n', '\n', '}\n', '\n', '/**\n', ' * @title Interface to MakerDAO Medianizer contract\n', ' */\n', '\n', 'interface IMedianizer {\n', '\n', '    function peek() constant external returns (bytes32, bool);\n', '\n', '    function read() constant external returns (bytes32);\n', '\n', '    function set(address wat) external;\n', '\n', '    function set(bytes12 pos, address wat) external;\n', '\n', '    function setMin(uint96 min_) external;\n', '\n', '    function setNext(bytes12 next_) external;\n', '\n', '    function unset(bytes12 pos) external;\n', '\n', '    function unset(address wat) external;\n', '\n', '    function poke() external;\n', '\n', '    function poke(bytes32) external;\n', '\n', '    function compute() constant external returns (bytes32, bool);\n', '\n', '    function void() external;\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract MakerDAOOracle is IOracle, Ownable {\n', '\n', '    address public medianizer;\n', '    address public currencyAddress;\n', '    bytes32 public currencySymbol;\n', '\n', '    bool public manualOverride;\n', '    uint256 public manualPrice;\n', '\n', '    event ChangeMedianizer(address _newMedianizer, address _oldMedianizer, uint256 _now);\n', '    event SetManualPrice(uint256 _oldPrice, uint256 _newPrice, uint256 _time);\n', '    event SetManualOverride(bool _override, uint256 _time);\n', '\n', '    /**\n', '      * @notice Creates a new Maker based oracle\n', '      * @param _medianizer Address of Maker medianizer\n', '      * @param _currencyAddress Address of currency (0x0 for ETH)\n', '      * @param _currencySymbol Symbol of currency\n', '      */\n', '    constructor (address _medianizer, address _currencyAddress, bytes32 _currencySymbol) public {\n', '        medianizer = _medianizer;\n', '        currencyAddress = _currencyAddress;\n', '        currencySymbol = _currencySymbol;\n', '    }\n', '\n', '    /**\n', '      * @notice Updates medianizer address\n', '      * @param _medianizer Address of Maker medianizer\n', '      */\n', '    function changeMedianier(address _medianizer) public onlyOwner {\n', '        require(_medianizer != address(0), "0x not allowed");\n', '        emit ChangeMedianizer(_medianizer, medianizer, now);\n', '        medianizer = _medianizer;\n', '    }\n', '\n', '    /**\n', '    * @notice Returns address of oracle currency (0x0 for ETH)\n', '    */\n', '    function getCurrencyAddress() external view returns(address) {\n', '        return currencyAddress;\n', '    }\n', '\n', '    /**\n', '    * @notice Returns symbol of oracle currency (0x0 for ETH)\n', '    */\n', '    function getCurrencySymbol() external view returns(bytes32) {\n', '        return currencySymbol;\n', '    }\n', '\n', '    /**\n', '    * @notice Returns denomination of price\n', '    */\n', '    function getCurrencyDenominated() external view returns(bytes32) {\n', '        // All MakerDAO oracles are denominated in USD\n', '        return bytes32("USD");\n', '    }\n', '\n', '    /**\n', '    * @notice Returns price - should throw if not valid\n', '    */\n', '    function getPrice() external view returns(uint256) {\n', '        if (manualOverride) {\n', '            return manualPrice;\n', '        }\n', '        (bytes32 price, bool valid) = IMedianizer(medianizer).peek();\n', '        require(valid, "MakerDAO Oracle returning invalid value");\n', '        return uint256(price);\n', '    }\n', '\n', '    /**\n', '      * @notice Set a manual price. NA - this will only be used if manualOverride == true\n', '      * @param _price Price to set\n', '      */\n', '    function setManualPrice(uint256 _price) public onlyOwner {\n', '        emit SetManualPrice(manualPrice, _price, now);\n', '        manualPrice = _price;\n', '    }\n', '\n', '    /**\n', '      * @notice Determine whether manual price is used or not\n', '      * @param _override Whether to use the manual override price or not\n', '      */\n', '    function setManualOverride(bool _override) public onlyOwner {\n', '        manualOverride = _override;\n', '        emit SetManualOverride(_override, now);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'interface IOracle {\n', '\n', '    /**\n', '    * @notice Returns address of oracle currency (0x0 for ETH)\n', '    */\n', '    function getCurrencyAddress() external view returns(address);\n', '\n', '    /**\n', '    * @notice Returns symbol of oracle currency (0x0 for ETH)\n', '    */\n', '    function getCurrencySymbol() external view returns(bytes32);\n', '\n', '    /**\n', '    * @notice Returns denomination of price\n', '    */\n', '    function getCurrencyDenominated() external view returns(bytes32);\n', '\n', '    /**\n', '    * @notice Returns price - should throw if not valid\n', '    */\n', '    function getPrice() external view returns(uint256);\n', '\n', '}\n', '\n', '/**\n', ' * @title Interface to MakerDAO Medianizer contract\n', ' */\n', '\n', 'interface IMedianizer {\n', '\n', '    function peek() constant external returns (bytes32, bool);\n', '\n', '    function read() constant external returns (bytes32);\n', '\n', '    function set(address wat) external;\n', '\n', '    function set(bytes12 pos, address wat) external;\n', '\n', '    function setMin(uint96 min_) external;\n', '\n', '    function setNext(bytes12 next_) external;\n', '\n', '    function unset(bytes12 pos) external;\n', '\n', '    function unset(address wat) external;\n', '\n', '    function poke() external;\n', '\n', '    function poke(bytes32) external;\n', '\n', '    function compute() constant external returns (bytes32, bool);\n', '\n', '    function void() external;\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract MakerDAOOracle is IOracle, Ownable {\n', '\n', '    address public medianizer;\n', '    address public currencyAddress;\n', '    bytes32 public currencySymbol;\n', '\n', '    bool public manualOverride;\n', '    uint256 public manualPrice;\n', '\n', '    event ChangeMedianizer(address _newMedianizer, address _oldMedianizer, uint256 _now);\n', '    event SetManualPrice(uint256 _oldPrice, uint256 _newPrice, uint256 _time);\n', '    event SetManualOverride(bool _override, uint256 _time);\n', '\n', '    /**\n', '      * @notice Creates a new Maker based oracle\n', '      * @param _medianizer Address of Maker medianizer\n', '      * @param _currencyAddress Address of currency (0x0 for ETH)\n', '      * @param _currencySymbol Symbol of currency\n', '      */\n', '    constructor (address _medianizer, address _currencyAddress, bytes32 _currencySymbol) public {\n', '        medianizer = _medianizer;\n', '        currencyAddress = _currencyAddress;\n', '        currencySymbol = _currencySymbol;\n', '    }\n', '\n', '    /**\n', '      * @notice Updates medianizer address\n', '      * @param _medianizer Address of Maker medianizer\n', '      */\n', '    function changeMedianier(address _medianizer) public onlyOwner {\n', '        require(_medianizer != address(0), "0x not allowed");\n', '        emit ChangeMedianizer(_medianizer, medianizer, now);\n', '        medianizer = _medianizer;\n', '    }\n', '\n', '    /**\n', '    * @notice Returns address of oracle currency (0x0 for ETH)\n', '    */\n', '    function getCurrencyAddress() external view returns(address) {\n', '        return currencyAddress;\n', '    }\n', '\n', '    /**\n', '    * @notice Returns symbol of oracle currency (0x0 for ETH)\n', '    */\n', '    function getCurrencySymbol() external view returns(bytes32) {\n', '        return currencySymbol;\n', '    }\n', '\n', '    /**\n', '    * @notice Returns denomination of price\n', '    */\n', '    function getCurrencyDenominated() external view returns(bytes32) {\n', '        // All MakerDAO oracles are denominated in USD\n', '        return bytes32("USD");\n', '    }\n', '\n', '    /**\n', '    * @notice Returns price - should throw if not valid\n', '    */\n', '    function getPrice() external view returns(uint256) {\n', '        if (manualOverride) {\n', '            return manualPrice;\n', '        }\n', '        (bytes32 price, bool valid) = IMedianizer(medianizer).peek();\n', '        require(valid, "MakerDAO Oracle returning invalid value");\n', '        return uint256(price);\n', '    }\n', '\n', '    /**\n', '      * @notice Set a manual price. NA - this will only be used if manualOverride == true\n', '      * @param _price Price to set\n', '      */\n', '    function setManualPrice(uint256 _price) public onlyOwner {\n', '        emit SetManualPrice(manualPrice, _price, now);\n', '        manualPrice = _price;\n', '    }\n', '\n', '    /**\n', '      * @notice Determine whether manual price is used or not\n', '      * @param _override Whether to use the manual override price or not\n', '      */\n', '    function setManualOverride(bool _override) public onlyOwner {\n', '        manualOverride = _override;\n', '        emit SetManualOverride(_override, now);\n', '    }\n', '\n', '}']
