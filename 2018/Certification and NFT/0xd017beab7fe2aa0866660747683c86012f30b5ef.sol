['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title BetexStorage\n', ' */\n', 'contract BetexStorage is Ownable {\n', '\n', '    // minimum funding to get volume bonus\t\n', '    uint256 public constant VOLUME_BONUS_CONDITION = 50 ether;\n', '\n', '    // minimum funding to get volume extra bonus\t\n', '    uint256 public constant VOLUME_EXTRA_BONUS_CONDITION = 100 ether;\n', '\n', '    // extra bonus amount during first bonus round, %\n', '    uint256 public constant FIRST_VOLUME_EXTRA_BONUS = 20;\n', '\n', '    // extra bonus amount during second bonus round, %\n', '    uint256 public constant SECOND_VOLUME_EXTRA_BONUS = 10;\n', '\n', '    // bonus amount during first bonus round, %\n', '    uint256 public constant FIRST_VOLUME_BONUS = 10;\n', '\n', '    // bonus amount during second bonus round, %\n', '    uint256 public constant SECOND_VOLUME_BONUS = 5;\n', '\n', '    // oraclize funding order\n', '    struct Order {\n', '        address beneficiary;\n', '        uint256 funds;\n', '        uint256 bonus;\n', '        uint256 rate;\n', '    }\n', '\n', '    // oraclize funding orders\n', '    mapping (bytes32 => Order) public orders;\n', '\n', '    // oraclize orders for unsold tokens allocation\n', '    mapping (bytes32 => bool) public unsoldAllocationOrders;\n', '\n', '    // addresses allowed to buy tokens\n', '    mapping (address => bool) public whitelist;\n', '\n', '    // funded\n', '    mapping (address => bool) public funded;\n', '\n', '    // funders\n', '    address[] public funders;\n', '    \n', '    // pre ico funders\n', '    address[] public preICOFunders;\n', '\n', '    // tokens to allocate before ico sale starts\n', '    mapping (address => uint256) public preICOBalances;\n', '\n', '    // is preICO data initialized\n', '    bool public preICODataInitialized;\n', '\n', '\n', '    /**\n', '     * @dev Constructor\n', '     */  \n', '    function BetexStorage() public {\n', '\n', '        // pre sale round 1\n', '        preICOFunders.push(0x233Fd2B3d7a0924Fe1Bb0dd7FA168eEF8C522E65);\n', '        preICOBalances[0x233Fd2B3d7a0924Fe1Bb0dd7FA168eEF8C522E65] = 15000000000000000000000;\n', '        preICOFunders.push(0x2712ba56cB3Cf8783693c8a1796F70ABa57132b1);\n', '        preICOBalances[0x2712ba56cB3Cf8783693c8a1796F70ABa57132b1] = 15000000000000000000000;\n', '        preICOFunders.push(0x6f3DDfb726eA637e125C4fbf6694B940711478f4);\n', '        preICOBalances[0x6f3DDfb726eA637e125C4fbf6694B940711478f4] = 15000000000000000000000;\n', '        preICOFunders.push(0xAf7Ff6f381684707001d517Bf83C4a3538f9C82a);\n', '        preICOBalances[0xAf7Ff6f381684707001d517Bf83C4a3538f9C82a] = 22548265874120000000000;\n', '        preICOFunders.push(0x51219a9330c196b8bd7fA0737C8e0db53c1ad628);\n', '        preICOBalances[0x51219a9330c196b8bd7fA0737C8e0db53c1ad628] = 32145215844400000000000;\n', '        preICOFunders.push(0xA2D42D689769f7BA32712f27B09606fFD8F3b699);\n', '        preICOBalances[0xA2D42D689769f7BA32712f27B09606fFD8F3b699] = 15000000000000000000000;\n', '        preICOFunders.push(0xB7C9D3AAbF44296232538B8b184F274B57003994);\n', '        preICOBalances[0xB7C9D3AAbF44296232538B8b184F274B57003994] = 20000000000000000000000;\n', '        preICOFunders.push(0x58667a170F53b809CA9143c1CeEa00D2Df866577);\n', '        preICOBalances[0x58667a170F53b809CA9143c1CeEa00D2Df866577] = 184526257787000000000000;\n', '        preICOFunders.push(0x0D4b2A1a47b1059d622C033c2a58F2F651010553);\n', '        preICOBalances[0x0D4b2A1a47b1059d622C033c2a58F2F651010553] = 17845264771100000000000;\n', '        preICOFunders.push(0x982F59497026473d2227f5dd02cdf6fdCF237AE0);\n', '        preICOBalances[0x982F59497026473d2227f5dd02cdf6fdCF237AE0] = 31358989521120000000000;\n', '        preICOFunders.push(0x250d540EFeabA7b5C0407A955Fd76217590dbc37);\n', '        preICOBalances[0x250d540EFeabA7b5C0407A955Fd76217590dbc37] = 15000000000000000000000;\n', '        preICOFunders.push(0x2Cde7768B7d5dcb12c5b5572daEf3F7B855c8685);\n', '        preICOBalances[0x2Cde7768B7d5dcb12c5b5572daEf3F7B855c8685] = 17500000000000000000000;\n', '        preICOFunders.push(0x89777c2a4C1843a99B2fF481a4CEF67f5d7A1387);\n', '        preICOBalances[0x89777c2a4C1843a99B2fF481a4CEF67f5d7A1387] = 15000000000000000000000;\n', '        preICOFunders.push(0x63699D4d309e48e8B575BE771700570A828dC655);\n', '        preICOBalances[0x63699D4d309e48e8B575BE771700570A828dC655] = 15000000000000000000000;\n', '        preICOFunders.push(0x9bc92E0da2e4aC174b8E33D7c74b5009563a8e2A);\n', '        preICOBalances[0x9bc92E0da2e4aC174b8E33D7c74b5009563a8e2A] = 21542365440880000000000;\n', '        preICOFunders.push(0xA1CA632CF8Fb3a965c84668e09e3BEdb3567F35D);\n', '        preICOBalances[0xA1CA632CF8Fb3a965c84668e09e3BEdb3567F35D] = 15000000000000000000000;\n', '        preICOFunders.push(0x1DCeF74ddD26c82f34B300E027b5CaA4eC4F8C83);\n', '        preICOBalances[0x1DCeF74ddD26c82f34B300E027b5CaA4eC4F8C83] = 15000000000000000000000;\n', '        preICOFunders.push(0x51B7Bf4B7C1E89cfe7C09938Ad0096F9dFFCA4B7);\n', '        preICOBalances[0x51B7Bf4B7C1E89cfe7C09938Ad0096F9dFFCA4B7] = 17533640761380000000000;\n', '\n', '        // pre sale round 2 \n', '        preICOFunders.push(0xD2Cdc0905877ee3b7d08220D783bd042de825AEb);\n', '        preICOBalances[0xD2Cdc0905877ee3b7d08220D783bd042de825AEb] = 5000000000000000000000;\n', '        preICOFunders.push(0x3b217081702AF670e2c2fD25FD7da882620a68E8);\n', '        preICOBalances[0x3b217081702AF670e2c2fD25FD7da882620a68E8] = 7415245400000000000000;\n', '        preICOFunders.push(0xbA860D4B9423bF6b517B29c395A49fe80Da758E3);\n', '        preICOBalances[0xbA860D4B9423bF6b517B29c395A49fe80Da758E3] = 5000000000000000000000;\n', '        preICOFunders.push(0xF64b80DdfB860C0D1bEb760fd9fC663c4D5C4dC3);\n', '        preICOBalances[0xF64b80DdfB860C0D1bEb760fd9fC663c4D5C4dC3] = 75000000000000000000000;\n', '        preICOFunders.push(0x396D5A35B5f41D7cafCCF9BeF225c274d2c7B6E2);\n', '        preICOBalances[0x396D5A35B5f41D7cafCCF9BeF225c274d2c7B6E2] = 74589245777000000000000;\n', '        preICOFunders.push(0x4d61A4aD175E96139Ae8c5d951327e3f6Cc3f764);\n', '        preICOBalances[0x4d61A4aD175E96139Ae8c5d951327e3f6Cc3f764] = 5000000000000000000000;\n', '        preICOFunders.push(0x4B490F6A49C17657A5508B8Bf8F1D7f5aAD8c921);\n', '        preICOBalances[0x4B490F6A49C17657A5508B8Bf8F1D7f5aAD8c921] = 200000000000000000000000;\n', '        preICOFunders.push(0xC943038f2f1dd1faC6E10B82039C14bd20ff1F8E);\n', '        preICOBalances[0xC943038f2f1dd1faC6E10B82039C14bd20ff1F8E] = 174522545811300000000000;\n', '        preICOFunders.push(0xBa87D63A8C4Ed665b6881BaCe4A225a07c418F22);\n', '        preICOBalances[0xBa87D63A8C4Ed665b6881BaCe4A225a07c418F22] = 5000000000000000000000;\n', '        preICOFunders.push(0x753846c0467cF320BcDA9f1C67fF86dF39b1438c);\n', '        preICOBalances[0x753846c0467cF320BcDA9f1C67fF86dF39b1438c] = 5000000000000000000000;\n', '        preICOFunders.push(0x3773bBB1adDF9D642D5bbFaafa13b0690Fb33460);\n', '        preICOBalances[0x3773bBB1adDF9D642D5bbFaafa13b0690Fb33460] = 5000000000000000000000;\n', '        preICOFunders.push(0x456Cf70345cbF483779166af117B40938B8F0A9c);\n', '        preICOBalances[0x456Cf70345cbF483779166af117B40938B8F0A9c] = 50000000000000000000000;\n', '        preICOFunders.push(0x662AE260D736F041Db66c34617d5fB22eC0cC2Ee);\n', '        preICOBalances[0x662AE260D736F041Db66c34617d5fB22eC0cC2Ee] = 40000000000000000000000;\n', '        preICOFunders.push(0xEa7e647F167AdAa4df52AF630A873a1379f68E3F);\n', '        preICOBalances[0xEa7e647F167AdAa4df52AF630A873a1379f68E3F] = 40000000000000000000000;\n', '        preICOFunders.push(0x352913f3F7CA96530180b93C18C86f38b3F0c429);\n', '        preICOBalances[0x352913f3F7CA96530180b93C18C86f38b3F0c429] = 45458265454000000000000;\n', '        preICOFunders.push(0xB21bf8391a6500ED210Af96d125867124261f4d4);\n', '        preICOBalances[0xB21bf8391a6500ED210Af96d125867124261f4d4] = 5000000000000000000000;\n', '        preICOFunders.push(0xDecBd29B42c66f90679D2CB34e73E571F447f6c5);\n', '        preICOBalances[0xDecBd29B42c66f90679D2CB34e73E571F447f6c5] = 7500000000000000000000;\n', '        preICOFunders.push(0xE36106a0DC0F07e87f7194694631511317909b8B);\n', '        preICOBalances[0xE36106a0DC0F07e87f7194694631511317909b8B] = 5000000000000000000000;\n', '        preICOFunders.push(0xe9114cd97E0Ee4fe349D3F57d0C9710E18581b69);\n', '        preICOBalances[0xe9114cd97E0Ee4fe349D3F57d0C9710E18581b69] = 40000000000000000000000;\n', '        preICOFunders.push(0xC73996ce45752B9AE4e85EDDf056Aa9aaCaAD4A2);\n', '        preICOBalances[0xC73996ce45752B9AE4e85EDDf056Aa9aaCaAD4A2] = 100000000000000000000000;\n', '        preICOFunders.push(0x6C1407d9984Dc2cE33456b67acAaEC78c1784673);\n', '        preICOBalances[0x6C1407d9984Dc2cE33456b67acAaEC78c1784673] = 5000000000000000000000;\n', '        preICOFunders.push(0x987e93429004CA9fa2A42604658B99Bb5A574f01);\n', '        preICOBalances[0x987e93429004CA9fa2A42604658B99Bb5A574f01] = 124354548881022000000000;\n', '        preICOFunders.push(0x4c3B81B5f9f9c7efa03bE39218E6760E8D2A1609);\n', '        preICOBalances[0x4c3B81B5f9f9c7efa03bE39218E6760E8D2A1609] = 5000000000000000000000;\n', '        preICOFunders.push(0x33fA8cd89B151458Cb147ecC497e469f2c1D38eA);\n', '        preICOBalances[0x33fA8cd89B151458Cb147ecC497e469f2c1D38eA] = 60000000000000000000000;\n', '\n', '        // main sale (01-31 of Marh)\n', '        preICOFunders.push(0x9AfA1204afCf48AB4302F246Ef4BE5C1D733a751);\n', '        preICOBalances[0x9AfA1204afCf48AB4302F246Ef4BE5C1D733a751] = 154551417972192330000000;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a new address to the funders\n', "     * @param _funder funder's address\n", '     */\n', '    function addFunder(address _funder) public onlyOwner {\n', '        if (!funded[_funder]) {\n', '            funders.push(_funder);\n', '            funded[_funder] = true;\n', '        }\n', '    }\n', '   \n', '    /**\n', '     * @return true if address is a funder address\n', "     * @param _funder funder's address\n", '     */\n', '    function isFunder(address _funder) public view returns(bool) {\n', '        return funded[_funder];\n', '    }\n', '\n', '    /**\n', '     * @return funders count\n', '     */\n', '    function getFundersCount() public view returns(uint256) {\n', '        return funders.length;\n', '    }\n', '\n', '    /**\n', '     * @return number of preICO funders count\n', '     */\n', '    function getPreICOFundersCount() public view returns(uint256) {\n', '        return preICOFunders.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a new oraclize funding order\n', '     * @param _orderId oraclize order id\n', "     * @param _beneficiary who'll get the tokens\n", '     * @param _funds paid wei amount\n', '     * @param _bonus bonus amount\n', '     */\n', '    function addOrder(\n', '        bytes32 _orderId, \n', '        address _beneficiary, \n', '        uint256 _funds, \n', '        uint256 _bonus\n', '    )\n', '        public \n', '        onlyOwner \n', '    {\n', '        orders[_orderId].beneficiary = _beneficiary;\n', '        orders[_orderId].funds = _funds;\n', '        orders[_orderId].bonus = _bonus;\n', '    }\n', '\n', '    /**\n', '     * @dev Get oraclize funding order by order id\n', '     * @param _orderId oraclize order id\n', '     * @return beneficiaty address, paid funds amount and bonus amount \n', '     */\n', '    function getOrder(bytes32 _orderId) \n', '        public \n', '        view \n', '        returns(address, uint256, uint256)\n', '    {\n', '        address _beneficiary = orders[_orderId].beneficiary;\n', '        uint256 _funds = orders[_orderId].funds;\n', '        uint256 _bonus = orders[_orderId].bonus;\n', '\n', '        return (_beneficiary, _funds, _bonus);\n', '    }\n', '\n', '    /**\n', '     * @dev Set eth/usd rate for the specified oraclize order\n', '     * @param _orderId oraclize order id\n', '     * @param _rate eth/usd rate\n', '     */\n', '    function setRateForOrder(bytes32 _orderId, uint256 _rate) public onlyOwner {\n', '        orders[_orderId].rate = _rate;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a new oraclize unsold tokens allocation order\n', '     * @param _orderId oraclize order id\n', '     */\n', '    function addUnsoldAllocationOrder(bytes32 _orderId) public onlyOwner {\n', '        unsoldAllocationOrders[_orderId] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Whitelist the address\n', '     * @param _address address to be whitelisted\n', '     */\n', '    function addToWhitelist(address _address) public onlyOwner {\n', '        whitelist[_address] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if address is whitelisted\n', '     * @param _address address that needs to be verified\n', '     * @return true if address is whitelisted\n', '     */\n', '    function isWhitelisted(address _address) public view returns(bool) {\n', '        return whitelist[_address];\n', '    }\n', '\n', '    /**\n', '     * @dev Get bonus amount for token purchase\n', '     * @param _funds amount of the funds\n', '     * @param _bonusChangeTime bonus change time\n', '     * @return corresponding bonus value\n', '     */\n', '    function getBonus(uint256 _funds, uint256 _bonusChangeTime) public view returns(uint256) {\n', '        \n', '        if (_funds < VOLUME_BONUS_CONDITION)\n', '            return 0;\n', '\n', '        if (now < _bonusChangeTime) { // solium-disable-line security/no-block-members\n', '            if (_funds >= VOLUME_EXTRA_BONUS_CONDITION)\n', '                return FIRST_VOLUME_EXTRA_BONUS;\n', '            else \n', '                return FIRST_VOLUME_BONUS;\n', '        } else {\n', '            if (_funds >= VOLUME_EXTRA_BONUS_CONDITION)\n', '                return SECOND_VOLUME_EXTRA_BONUS;\n', '            else\n', '                return SECOND_VOLUME_BONUS;\n', '        }\n', '        return 0;\n', '    }\n', '}']