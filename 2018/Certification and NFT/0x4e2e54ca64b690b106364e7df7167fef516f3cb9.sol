['/*\n', 'The MaxiPRO Contract.\n', '\n', 'The MaxiPRO Contract is free software: you can redistribute it and/or\n', 'modify.\n', '@author Ivan Fedorov \n', 'twitter https://twitter.com/maxipro_pro\n', 'bitcointalk https://bitcointalk.org/index.php?topic=4336550\n', 'telegram https://t.me/Maxipro_pro\n', 'medium https://medium.com/@maxipro_pro\n', 'contact e-mail: info@maxipro.pro\n', '*/\n', '\n', '\n', '\n', '\n', ' pragma solidity ^0.4.16; \n', '    contract owned {\n', '        address public owner;\n', '\n', '        function owned() {\n', '            owner = msg.sender;\n', '        }\n', '\n', '        modifier onlyOwner {\n', '            require(msg.sender == owner);\n', '            _;\n', '        }\n', '\n', '        function transferOwnership(address newOwner) onlyOwner {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '\t\t\n', '\tcontract Crowdsale is owned {\n', '    \n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) public balanceOf;\n', '\t  mapping (address => bool) public frozenAccount;\n', '      event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function Crowdsale() payable owned() {\n', '        totalSupply = 1000000000;\n', '        balanceOf[this] = 400000000; // public sale\n', '\t\tbalanceOf[0x552e7F467CAF7FaBCEcaFdF3e986d093F85c5762] = 300000000; // team\n', '\t\tbalanceOf[0x8Caa69e596CCE4A5EbaE0Efe44765573EDCa70CE] = 200000000; // for development and support of investment instrument\n', '\t\tbalanceOf[0x4d989F62Dc0133d82Dbe8378a9d6542F3b0ABee5] = 8750000; // closed sale \n', '\t\tbalanceOf[0xA81A580813c3b187a8A2B6b67c555b10C73614fa] = 2500000; // closed sale \n', '\t\tbalanceOf[0x08c68BB69532EaaAF5d62B3732A2b7b7ABd74394] = 10000000; // closed sale \n', '\t\tbalanceOf[0x829ac84591641639A7b8C7150b7CF3e753778cd8] = 6250000; // closed sale \n', '\t\tbalanceOf[0xae8b76e01EBcd0e2E8b190922F08639D42abc0c9] = 3250000; // closed sale \n', '\t\tbalanceOf[0x78C2bd83Fd47ea35C6B4750AeFEc1a7CF1a2Ad0a] = 2000000; // closed sale \n', '\t\tbalanceOf[0x24e7d49CBF4108473dBC1c7A4ADF0De28CaF4148] = 4125000; // closed sale \n', '\t\tbalanceOf[0x322D5BA67bdc48ECC675546C302DB6B5d7a0C610] = 5250000; // closed sale \n', '\t\tbalanceOf[0x2e43daE28DF4ef8952096721eE22602344638979] = 8750000; // closed sale \n', '\t\tbalanceOf[0x3C36A7F610C777641fcD2f12B0D82917575AB7dd] = 3750000; // closed sale \n', '\t\tbalanceOf[0xDCE1d58c47b28dfe22F6B334E5517a49bF7B229a] = 7500000; // closed sale \n', '\t\tbalanceOf[0x36Cbb77588E5a59124e530dEc08a3C5433cCD820] = 6750000; // closed sale \n', '\t\tbalanceOf[0x3887FCB4BC96E66076B213963FbE277Ed808345A] = 12500000; // closed sale \n', '\t\tbalanceOf[0x6658E430bBD2b97c421A8BBA13361cC83D48609C] = 6250000; // closed sale \n', '\t\tbalanceOf[0xb137178106ade0506393d2041BDf90AF542F35ED] = 2500000; // closed sale \n', '\t\tbalanceOf[0x8F551F0B6144235cB89F000BA87fDd3A6B425F2E] = 7500000; // closed sale \n', '\t\tbalanceOf[0xfC1F805de2C30af99B72B02B60ED9877660C5194] = 2375000; // closed sale \n', '\t\n', '    }\n', '\n', '    function () payable {\n', '        require(balanceOf[this] > 0);\n', '        uint256 tokens = 200000 * msg.value / 1000000000000000000;\n', '        if (tokens > balanceOf[this]) {\n', '            tokens = balanceOf[this];\n', '            uint valueWei = tokens * 1000000000000000000 / 200000;\n', '            msg.sender.transfer(msg.value - valueWei);\n', '        }\n', '        require(balanceOf[msg.sender] + tokens > balanceOf[msg.sender]); \n', '        require(tokens > 0);\n', '        balanceOf[msg.sender] += tokens;\n', '        balanceOf[this] -= tokens;\n', '        Transfer(this, msg.sender, tokens);\n', '    }\n', '}\n', 'contract Token is Crowdsale {\n', '    \n', '   \n', '    string  public name        = &#39;MaxiPRO&#39;;\n', '    string  public symbol      = "MPR";\n', '    uint8   public decimals    = 0;\n', '\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Burned(address indexed owner, uint256 value);\n', '\n', '    function Token() payable Crowdsale() {}\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '\t\trequire(!frozenAccount[msg.sender]);\n', '\t\t\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public {\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(allowed[_from][msg.sender] >= _value);\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant\n', '        returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function burn(uint256 _value) public {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burned(msg.sender, _value);\n', '    }\n', '}\n', 'contract MaxiPRO is Token {\n', '    \n', '    \n', '    function withdraw() public onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '     function killMe() public onlyOwner {\n', '        require(totalSupply == 0);\n', '        selfdestruct(owner);\n', '    }\n', '}']
['/*\n', 'The MaxiPRO Contract.\n', '\n', 'The MaxiPRO Contract is free software: you can redistribute it and/or\n', 'modify.\n', '@author Ivan Fedorov \n', 'twitter https://twitter.com/maxipro_pro\n', 'bitcointalk https://bitcointalk.org/index.php?topic=4336550\n', 'telegram https://t.me/Maxipro_pro\n', 'medium https://medium.com/@maxipro_pro\n', 'contact e-mail: info@maxipro.pro\n', '*/\n', '\n', '\n', '\n', '\n', ' pragma solidity ^0.4.16; \n', '    contract owned {\n', '        address public owner;\n', '\n', '        function owned() {\n', '            owner = msg.sender;\n', '        }\n', '\n', '        modifier onlyOwner {\n', '            require(msg.sender == owner);\n', '            _;\n', '        }\n', '\n', '        function transferOwnership(address newOwner) onlyOwner {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '\t\t\n', '\tcontract Crowdsale is owned {\n', '    \n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) public balanceOf;\n', '\t  mapping (address => bool) public frozenAccount;\n', '      event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function Crowdsale() payable owned() {\n', '        totalSupply = 1000000000;\n', '        balanceOf[this] = 400000000; // public sale\n', '\t\tbalanceOf[0x552e7F467CAF7FaBCEcaFdF3e986d093F85c5762] = 300000000; // team\n', '\t\tbalanceOf[0x8Caa69e596CCE4A5EbaE0Efe44765573EDCa70CE] = 200000000; // for development and support of investment instrument\n', '\t\tbalanceOf[0x4d989F62Dc0133d82Dbe8378a9d6542F3b0ABee5] = 8750000; // closed sale \n', '\t\tbalanceOf[0xA81A580813c3b187a8A2B6b67c555b10C73614fa] = 2500000; // closed sale \n', '\t\tbalanceOf[0x08c68BB69532EaaAF5d62B3732A2b7b7ABd74394] = 10000000; // closed sale \n', '\t\tbalanceOf[0x829ac84591641639A7b8C7150b7CF3e753778cd8] = 6250000; // closed sale \n', '\t\tbalanceOf[0xae8b76e01EBcd0e2E8b190922F08639D42abc0c9] = 3250000; // closed sale \n', '\t\tbalanceOf[0x78C2bd83Fd47ea35C6B4750AeFEc1a7CF1a2Ad0a] = 2000000; // closed sale \n', '\t\tbalanceOf[0x24e7d49CBF4108473dBC1c7A4ADF0De28CaF4148] = 4125000; // closed sale \n', '\t\tbalanceOf[0x322D5BA67bdc48ECC675546C302DB6B5d7a0C610] = 5250000; // closed sale \n', '\t\tbalanceOf[0x2e43daE28DF4ef8952096721eE22602344638979] = 8750000; // closed sale \n', '\t\tbalanceOf[0x3C36A7F610C777641fcD2f12B0D82917575AB7dd] = 3750000; // closed sale \n', '\t\tbalanceOf[0xDCE1d58c47b28dfe22F6B334E5517a49bF7B229a] = 7500000; // closed sale \n', '\t\tbalanceOf[0x36Cbb77588E5a59124e530dEc08a3C5433cCD820] = 6750000; // closed sale \n', '\t\tbalanceOf[0x3887FCB4BC96E66076B213963FbE277Ed808345A] = 12500000; // closed sale \n', '\t\tbalanceOf[0x6658E430bBD2b97c421A8BBA13361cC83D48609C] = 6250000; // closed sale \n', '\t\tbalanceOf[0xb137178106ade0506393d2041BDf90AF542F35ED] = 2500000; // closed sale \n', '\t\tbalanceOf[0x8F551F0B6144235cB89F000BA87fDd3A6B425F2E] = 7500000; // closed sale \n', '\t\tbalanceOf[0xfC1F805de2C30af99B72B02B60ED9877660C5194] = 2375000; // closed sale \n', '\t\n', '    }\n', '\n', '    function () payable {\n', '        require(balanceOf[this] > 0);\n', '        uint256 tokens = 200000 * msg.value / 1000000000000000000;\n', '        if (tokens > balanceOf[this]) {\n', '            tokens = balanceOf[this];\n', '            uint valueWei = tokens * 1000000000000000000 / 200000;\n', '            msg.sender.transfer(msg.value - valueWei);\n', '        }\n', '        require(balanceOf[msg.sender] + tokens > balanceOf[msg.sender]); \n', '        require(tokens > 0);\n', '        balanceOf[msg.sender] += tokens;\n', '        balanceOf[this] -= tokens;\n', '        Transfer(this, msg.sender, tokens);\n', '    }\n', '}\n', 'contract Token is Crowdsale {\n', '    \n', '   \n', "    string  public name        = 'MaxiPRO';\n", '    string  public symbol      = "MPR";\n', '    uint8   public decimals    = 0;\n', '\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Burned(address indexed owner, uint256 value);\n', '\n', '    function Token() payable Crowdsale() {}\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '\t\trequire(!frozenAccount[msg.sender]);\n', '\t\t\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public {\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(allowed[_from][msg.sender] >= _value);\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant\n', '        returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function burn(uint256 _value) public {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burned(msg.sender, _value);\n', '    }\n', '}\n', 'contract MaxiPRO is Token {\n', '    \n', '    \n', '    function withdraw() public onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '     function killMe() public onlyOwner {\n', '        require(totalSupply == 0);\n', '        selfdestruct(owner);\n', '    }\n', '}']
