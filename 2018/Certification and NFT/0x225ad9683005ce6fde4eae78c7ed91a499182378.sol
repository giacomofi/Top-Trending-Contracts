['pragma solidity ^0.4.19; //\n', '\n', '// MobSquads.io\n', '\n', '\n', 'contract ERC721 {\n', '  // Required methods\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function implementsERC721() public pure returns (bool);\n', '  function ownerOf(uint256 _tokenId) public view returns (address addr);\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '\n', '  // Optional\n', '  // function name() public view returns (string name);\n', '  // function symbol() public view returns (string symbol);\n', '  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n', '  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n', '}\n', '\n', 'contract MobSquads is ERC721 {\n', '\n', '  /*** EVENTS ***/\n', '\n', '  /// @dev The Birth event is fired whenever a new mobster comes into existence.\n', '  event Birth(uint256 tokenId, string name, address owner);\n', '\n', '  /// @dev The TokenSold event is fired whenever a token is sold.\n', '  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner);\n', '\n', '  /// @dev Transfer event as defined in current draft of ERC721.\n', '  ///  ownership is assigned, including births.\n', '  event Transfer(address from, address to, uint256 tokenId);\n', '\n', '  /*** CONSTANTS ***/\n', '\n', '  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '  string public constant NAME = "MobSquads"; //\n', '  string public constant SYMBOL = "MOBS"; //\n', '\n', '  uint256 public precision = 1000000000000; //0.000001 Eth\n', '\n', '  uint256 public hitPrice =  0.005 ether;\n', '\n', '  /*** STORAGE ***/\n', '\n', '  /// @dev A mapping from mobster IDs to the address that owns them. All villians have\n', '  ///  some valid owner address.\n', '  mapping (uint256 => address) public mobsterIndexToOwner;\n', '\n', '  // @dev A mapping from owner address to count of tokens that address owns.\n', '  //  Used internally inside balanceOf() to resolve ownership count.\n', '  mapping (address => uint256) private ownershipTokenCount;\n', '\n', '  /// @dev A mapping from mobsters to an address that has been approved to call\n', '  ///  transferFrom(). Each mobster can only have one approved address for transfer\n', '  ///  at any time. A zero value means no approval is outstanding.\n', '  mapping (uint256 => address) public mobsterIndexToApproved;\n', '\n', '  // @dev A mapping from mobsters to the price of the token.\n', '  mapping (uint256 => uint256) private mobsterIndexToPrice;\n', '\n', '  // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '  address public ceoAddress;\n', '  address public cooAddress;\n', '\n', '  // minimum tokens before sales\n', '  uint256 public minimumTokensBeforeSale = 13;\n', '\n', '  /*** DATATYPES ***/\n', '  struct Mobster {\n', '    uint256 id; // needed for gnarly front end\n', '    string name;\n', '    uint256 boss; // which gang member of\n', '    uint256 state; // 0 = normal , 1 = dazed\n', '    uint256 dazedExipryTime; // if this mobster was disarmed, when does it expire\n', '    uint256 buyPrice; // the price at which this mobster was bossd\n', '  }\n', '\n', '  Mobster[] private mobsters;\n', '  uint256 public leadingGang;\n', '  uint256 public leadingHitCount;\n', '  uint256[] public gangHits;  // number of hits a gang has done\n', '  uint256 public currentHitTotal;\n', '  uint256 public lethalBonusAtHits = 200;\n', '\n', '\n', '  // @dev A mapping from mobsters to the price of the token.\n', '  mapping (uint256 => uint256) private bossIndexToGang;\n', '\n', '  mapping (address => uint256) public mobsterBalances;\n', '\n', '\n', '  /*** ACCESS MODIFIERS ***/\n', '  /// @dev Access modifier for CEO-only functionality\n', '  modifier onlyCEO() {\n', '    require(msg.sender == ceoAddress);\n', '    _;\n', '  }\n', '\n', '  /// @dev Access modifier for COO-only functionality\n', '  modifier onlyCOO() {\n', '    require(msg.sender == cooAddress);\n', '    _;\n', '  }\n', '\n', '  /// Access modifier for contract owner only functionality\n', '  modifier onlyCLevel() {\n', '    require(\n', '      msg.sender == ceoAddress ||\n', '      msg.sender == cooAddress\n', '    );\n', '    _;\n', '  }\n', '\n', '  /*** CONSTRUCTOR ***/\n', '  function MobSquads() public {\n', '    ceoAddress = msg.sender;\n', '    cooAddress = msg.sender;\n', '    leadingHitCount = 0;\n', '     gangHits.length++;\n', '  //  _createMobster("The Godfather",address(this),2000000000000000,0);\n', '  }\n', '\n', '  /*** PUBLIC FUNCTIONS ***/\n', '  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n', '  /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '  ///  clear all approvals.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function approve(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    // Caller must own token.\n', '    require(_owns(msg.sender, _tokenId));\n', '\n', '    mobsterIndexToApproved[_tokenId] = _to;\n', '\n', '    Approval(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// For querying balance of a particular account\n', '  /// @param _owner The address for balance query\n', '  /// @dev Required for ERC-721 compliance.\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return ownershipTokenCount[_owner];\n', '  }\n', '\n', '  /// @dev Creates a new mobster with the given name.\n', '  function createMobster(string _name, uint256 _startPrice, uint256 _boss) public onlyCLevel {\n', '    _createMobster(_name, address(this), _startPrice,_boss);\n', '  }\n', '\n', '  /// @notice Returns all the relevant information about a specific mobster.\n', '  /// @param _tokenId The tokenId of the mobster of interest.\n', '  function getMobster(uint256 _tokenId) public view returns (\n', '    uint256 id,\n', '    string name,\n', '    uint256 boss,\n', '    uint256 sellingPrice,\n', '    address owner,\n', '    uint256 state,\n', '    uint256 dazedExipryTime,\n', '    uint256 buyPrice,\n', '    uint256 nextPrice\n', '  ) {\n', '    id = _tokenId;\n', '    Mobster storage mobster = mobsters[_tokenId];\n', '    name = mobster.name;\n', '    boss = mobster.boss;\n', '    sellingPrice =mobsterIndexToPrice[_tokenId];\n', '    owner = mobsterIndexToOwner[_tokenId];\n', '    state = mobster.state;\n', '    if (mobster.state==1 && now>mobster.dazedExipryTime){\n', '        state=0; // time expired so say they are armed\n', '    }\n', '    dazedExipryTime=mobster.dazedExipryTime;\n', '    buyPrice=mobster.buyPrice;\n', '    nextPrice=calculateNewPrice(_tokenId);\n', '  }\n', '\n', '\n', '  function setLethalBonusAtHits (uint256 _count) public onlyCLevel {\n', '        lethalBonusAtHits = _count;\n', '    }\n', '\n', '    function setHitPrice (uint256 _price) public onlyCLevel {\n', '          hitPrice = _price;\n', '      }\n', '\n', '  /// hit a mobster\n', '  function hitMobster(uint256 _victim  , uint256 _hitter) public payable returns (bool){\n', '    address mobsterOwner = mobsterIndexToOwner[_victim];\n', '    require(msg.sender != mobsterOwner); // it doesn&#39;t make sense, but hey\n', '    require(msg.sender==mobsterIndexToOwner[_hitter]); // they must be a hitter owner\n', '\n', '    // Godfather cannot be hit\n', '    if (msg.value>=hitPrice && _victim!=0 && _hitter!=0){\n', '        // zap mobster\n', '        mobsters[_victim].state=1;\n', '        mobsters[_victim].dazedExipryTime = now + (2 * 1 minutes);\n', '\n', '        uint256 gangNumber=SafeMath.div(mobsters[_hitter].boss,6)+1;\n', '\n', '        gangHits[gangNumber]++; // increase the hit count for this gang\n', '        currentHitTotal++;\n', '\n', '        if  (gangHits[gangNumber]>leadingHitCount){\n', '            leadingHitCount=gangHits[gangNumber];\n', '            leadingGang=gangNumber;\n', '        }\n', '\n', '      // Lethal Bonus Time\n', '     if (currentHitTotal==lethalBonusAtHits){\n', '       uint256 lethalBonus = SafeMath.mul(SafeMath.div(currentHitTotal * hitPrice,100),15); // 15% = 90% for mobsters/bosses\n', '\n', '         // each of the 6 members of the gang with the most hits receives 10% of the Hit Pool\n', '         uint256 winningMobsterIndex  = (6*(leadingGang-1))+1; // include the boss\n', '         for (uint256 x = winningMobsterIndex;x<6+winningMobsterIndex;x++){\n', '             if(mobsterIndexToOwner[x]!=0 && mobsterIndexToOwner[x]!=address(this)){\n', '                         mobsterBalances[ mobsterIndexToOwner[x]]+=lethalBonus; // available for withdrawal\n', '              }\n', '         } // end for this gang\n', '\n', '         currentHitTotal=0; // reset the counter\n', '\n', '         // need to reset the gangHits\n', '         for (uint256 y = 0 ; y<gangHits.length;y++){\n', '           gangHits[y]=0;\n', '           leadingHitCount=0;\n', '           leadingGang=0;\n', '         }\n', '\n', '     } // end if bonus time\n', '\n', '\n', '   } // end if this is a hit\n', '\n', '}\n', '\n', '\n', '  function implementsERC721() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function name() public pure returns (string) {\n', '    return NAME;\n', '  }\n', '\n', '  /// For querying owner of token\n', '  /// @param _tokenId The tokenID for owner inquiry\n', '  /// @dev Required for ERC-721 compliance.\n', '  function ownerOf(uint256 _tokenId)\n', '    public\n', '    view\n', '    returns (address owner)\n', '  {\n', '    owner = mobsterIndexToOwner[_tokenId];\n', '    require(owner != address(0));\n', '  }\n', '\n', '  function payout(address _to) public onlyCLevel {\n', '    _payout(_to);\n', '  }\n', '\n', '\n', '\n', '  // Allows someone to send ether and obtain the token\n', '  function purchase(uint256 _tokenId) public payable {\n', '    address oldOwner = mobsterIndexToOwner[_tokenId];\n', '\n', '    uint256 sellingPrice = mobsterIndexToPrice[_tokenId];\n', '    // no sales until we reach a minimum amount\n', '    require(totalSupply()>=minimumTokensBeforeSale);\n', '\n', '    // Making sure token owner is not sending to self\n', '    require(oldOwner != msg.sender);\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(msg.sender));\n', '\n', '    // Making sure sent amount is greater than or equal to the sellingPrice\n', '    require(msg.value >= sellingPrice);\n', '\n', '// Godfather when sold will raise by 17% (10% previous owner , 3.5% to contract, 3,5% to pool for mobsters)\n', '// Bosses when sold will raise by 17% (10% previous owner , 3.5% to contract , 3.5% to Godfather owner)\n', '// Mobsters when sold will raise by 22% (10% previous owner, 3.5% to Godfather, 3.5% to contract, 5% to their boss owner)\n', '    uint256 contractFee = roundIt(uint256(SafeMath.mul(SafeMath.div(mobsters[_tokenId].buyPrice,1000),35))); // 3.5%\n', '\n', '     // godfather is flipped\n', '    if (_tokenId==0){\n', '        uint256 poolPayment = roundIt(uint256(SafeMath.div(contractFee,5))); // 20%\n', '        // each of the 5 members of the gang with the most hits receives 20% of the mobsterPool\n', '\n', '        //leadingGang 0,1,2,3,4 = gangs\n', '        // leaders are  always 1,7,13,19,25 ,,,, so mobsters are (6*leadingGang)+2; -->\n', '        uint256 winningMobsterIndex  = (6*(leadingGang-1))+2; // boss not included in mobster payments\n', '        for (uint256 x = winningMobsterIndex;x<5+winningMobsterIndex;x++){\n', '            if(mobsterIndexToOwner[x]!=0 &&  mobsterIndexToOwner[x]!=address(this)){\n', '                        mobsterBalances[ mobsterIndexToOwner[x]]+=poolPayment; // available for withdrawal\n', '             }\n', '        }\n', '\n', '        // need to reset the gangHits\n', '        for (uint256 y = 0 ; y<gangHits.length;y++){\n', '          gangHits[y]=0;\n', '          leadingHitCount=0;\n', '          leadingGang=0;\n', '        }\n', '\n', '    }\n', '\n', '\n', '    // boss\n', '    uint256 godFatherFee = 0;\n', '    if (_tokenId!=0){\n', '        godFatherFee = contractFee; // 3.5%\n', '    }\n', '    // mobster\n', '    uint256 bossFee = 0;\n', '    if (mobsters[_tokenId].boss!=_tokenId && _tokenId!=0){\n', '        bossFee =  roundIt(uint256(SafeMath.div(mobsters[_tokenId].buyPrice,20))); // 5%\n', '    }\n', '    // pay the godfather if not owned by contract\n', '    if (godFatherFee>0 && mobsterIndexToOwner[0]!=address(this)){\n', '        mobsterIndexToOwner[0].transfer(godFatherFee);\n', '    }\n', '\n', '     // pay the bossFee if not owned by the contract\n', '    if (_tokenId!=0 && bossFee>0 && mobsterIndexToOwner[mobsters[_tokenId].boss]!=address(this)){\n', '        mobsterIndexToOwner[mobsters[_tokenId].boss].transfer(bossFee);\n', '    }\n', '\n', '     uint256 previousOwnerPayout = roundIt(SafeMath.mul(SafeMath.div(mobsters[_tokenId].buyPrice, 100), 110)); // 110% to previous owner\n', '\n', '     mobsterIndexToPrice[_tokenId]  = calculateNewPrice(_tokenId);\n', '     mobsters[_tokenId].state=0;\n', '     mobsters[_tokenId].buyPrice=sellingPrice;\n', '\n', '    _transfer(oldOwner, msg.sender, _tokenId);\n', '\n', '    // Pay previous tokenOwner if owner is not contract\n', '    if (oldOwner != address(this)) {\n', '      oldOwner.transfer(previousOwnerPayout); // 110% to previous owner\n', '    }\n', '\n', '    TokenSold(_tokenId, sellingPrice, mobsterIndexToPrice[_tokenId], oldOwner, msg.sender);\n', '\n', '    if(SafeMath.sub(msg.value, sellingPrice)>0){\n', '             msg.sender.transfer(SafeMath.sub(msg.value, sellingPrice)); // return any additional amount\n', '    }\n', '\n', '  }\n', '\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\n', '    return mobsterIndexToPrice[_tokenId];\n', '  }\n', '\n', '  function nextPrice(uint256 _tokenId) public view returns (uint256 nPrice) {\n', '    return calculateNewPrice(_tokenId);\n', '  }\n', '\n', '\n', '    function claimMobsterFunds() public {\n', '      if (mobsterBalances[msg.sender]==0) revert();\n', '      uint256 amount = mobsterBalances[msg.sender];\n', '      if (amount>0){\n', '        mobsterBalances[msg.sender] = 0;\n', '        msg.sender.transfer(amount);\n', '      }\n', '    }\n', '\n', '\n', ' function calculateNewPrice(uint256 _tokenId) internal view returns (uint256 price){\n', '   uint256 sellingPrice = mobsterIndexToPrice[_tokenId];\n', '   uint256 newPrice;\n', '\n', '   // level 0\n', '   // Godfather when sold will raise by 17%\n', '   if (_tokenId==0){\n', '         newPrice = roundIt(SafeMath.div(SafeMath.mul(sellingPrice, 117), 100));\n', '   }\n', '   // level 1\n', '    //Bosses when sold will raise by 17%\n', '  if (mobsters[_tokenId].boss==_tokenId && _tokenId!=0){\n', '        newPrice = roundIt(SafeMath.div(SafeMath.mul(sellingPrice, 117), 100));\n', '   }\n', '   // level 2\n', '   // Mobsters when sold will raise by 22%\n', '  if (mobsters[_tokenId].boss!=_tokenId){\n', '        newPrice= roundIt(SafeMath.div(SafeMath.mul(sellingPrice, 122), 100));\n', '   }\n', '   return newPrice;\n', ' }\n', '\n', '  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '  /// @param _newCEO The address of the new CEO\n', '  function setCEO(address _newCEO) public onlyCEO {\n', '    require(_newCEO != address(0));\n', '\n', '    ceoAddress = _newCEO;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\n', '  /// @param _newCOO The address of the new COO\n', '  function setCOO(address _newCOO) public onlyCEO {\n', '    require(_newCOO != address(0));\n', '\n', '    cooAddress = _newCOO;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function symbol() public pure returns (string) {\n', '    return SYMBOL;\n', '  }\n', '\n', '  /// @notice Allow pre-approved user to take ownership of a token\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    address newOwner = msg.sender;\n', '    address oldOwner = mobsterIndexToOwner[_tokenId];\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Making sure transfer is approved\n', '    require(_approved(newOwner, _tokenId));\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '  }\n', '\n', '  /// @param _owner The owner whose tokens we are interested in.\n', '  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\n', '    uint256 tokenCount = balanceOf(_owner);\n', '    if (tokenCount == 0) {\n', '        // Return an empty array\n', '      return new uint256[](0);\n', '    } else {\n', '      uint256[] memory result = new uint256[](tokenCount);\n', '      uint256 totalmobsters = totalSupply();\n', '      uint256 resultIndex = 0;\n', '\n', '      uint256 mobsterId;\n', '      for (mobsterId = 0; mobsterId <= totalmobsters; mobsterId++) {\n', '        if (mobsterIndexToOwner[mobsterId] == _owner) {\n', '          result[resultIndex] = mobsterId;\n', '          resultIndex++;\n', '        }\n', '      }\n', '      return result;\n', '    }\n', '  }\n', '\n', '  /// For querying totalSupply of token\n', '  /// @dev Required for ERC-721 compliance.\n', '  function totalSupply() public view returns (uint256 total) {\n', '    return mobsters.length;\n', '  }\n', '\n', '  /// Owner initates the transfer of the token to another account\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transfer(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    require(_owns(msg.sender, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// Third-party initiates transfer of token from address _from to address _to\n', '  /// @param _from The address for the token to be transferred from.\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    require(_owns(_from, _tokenId));\n', '    require(_approved(_to, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /*** PRIVATE FUNCTIONS ***/\n', '  /// Safety check on _to address to prevent against an unexpected 0x0 default.\n', '  function _addressNotNull(address _to) private pure returns (bool) {\n', '    return _to != address(0);\n', '  }\n', '\n', '  /// For checking approval of transfer for address _to\n', '  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n', '    return mobsterIndexToApproved[_tokenId] == _to;\n', '  }\n', '\n', '\n', '  /// For creating mobsters\n', '  function _createMobster(string _name, address _owner, uint256 _price, uint256 _boss) private {\n', '\n', '    Mobster memory _mobster = Mobster({\n', '      name: _name,\n', '      boss: _boss,\n', '      state: 0,\n', '      dazedExipryTime: 0,\n', '      buyPrice: _price,\n', '      id: mobsters.length-1\n', '    });\n', '    uint256 newMobsterId = mobsters.push(_mobster) - 1;\n', '    mobsters[newMobsterId].id=newMobsterId;\n', '\n', '\n', '    if (newMobsterId % 6 ==0 || newMobsterId==1)\n', '    {\n', '        gangHits.length++;\n', '    }\n', '\n', '    // It&#39;s probably never going to happen, 4 billion tokens are A LOT, but\n', '    // let&#39;s just be 100% sure we never let this happen.\n', '    require(newMobsterId == uint256(uint32(newMobsterId)));\n', '\n', '    Birth(newMobsterId, _name, _owner);\n', '\n', '    mobsterIndexToPrice[newMobsterId] = _price;\n', '\n', '    // This will assign ownership, and also emit the Transfer event as\n', '    // per ERC721 draft\n', '    _transfer(address(0), _owner, newMobsterId);\n', '  }\n', '\n', '  /// Check for token ownership\n', '  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\n', '    return claimant == mobsterIndexToOwner[_tokenId];\n', '  }\n', '\n', '  /// For paying out balance on contract\n', '  function _payout(address _to) private {\n', '    if (_to == address(0)) {\n', '      ceoAddress.transfer(this.balance);\n', '    } else {\n', '      _to.transfer(this.balance);\n', '    }\n', '  }\n', '\n', '  /// @dev Assigns ownership of a specific mobster to an address.\n', '  function _transfer(address _from, address _to, uint256 _tokenId) private {\n', '    // Since the number of mobsters is capped to 2^32 we can&#39;t overflow this\n', '    ownershipTokenCount[_to]++;\n', '    //transfer ownership\n', '    mobsterIndexToOwner[_tokenId] = _to;\n', '\n', '    // When creating new mobsters _from is 0x0, but we can&#39;t account that address.\n', '    if (_from != address(0)) {\n', '      ownershipTokenCount[_from]--;\n', '      // clear any previously approved ownership exchange\n', '      delete mobsterIndexToApproved[_tokenId];\n', '    }\n', '\n', '    // Emit the transfer event.\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '    // utility to round to the game precision\n', '    function roundIt(uint256 amount) internal constant returns (uint256)\n', '    {\n', '        // round down to correct preicision\n', '        uint256 result = (amount/precision)*precision;\n', '        return result;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.19; //\n', '\n', '// MobSquads.io\n', '\n', '\n', 'contract ERC721 {\n', '  // Required methods\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function implementsERC721() public pure returns (bool);\n', '  function ownerOf(uint256 _tokenId) public view returns (address addr);\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '\n', '  // Optional\n', '  // function name() public view returns (string name);\n', '  // function symbol() public view returns (string symbol);\n', '  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n', '  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n', '}\n', '\n', 'contract MobSquads is ERC721 {\n', '\n', '  /*** EVENTS ***/\n', '\n', '  /// @dev The Birth event is fired whenever a new mobster comes into existence.\n', '  event Birth(uint256 tokenId, string name, address owner);\n', '\n', '  /// @dev The TokenSold event is fired whenever a token is sold.\n', '  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner);\n', '\n', '  /// @dev Transfer event as defined in current draft of ERC721.\n', '  ///  ownership is assigned, including births.\n', '  event Transfer(address from, address to, uint256 tokenId);\n', '\n', '  /*** CONSTANTS ***/\n', '\n', '  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '  string public constant NAME = "MobSquads"; //\n', '  string public constant SYMBOL = "MOBS"; //\n', '\n', '  uint256 public precision = 1000000000000; //0.000001 Eth\n', '\n', '  uint256 public hitPrice =  0.005 ether;\n', '\n', '  /*** STORAGE ***/\n', '\n', '  /// @dev A mapping from mobster IDs to the address that owns them. All villians have\n', '  ///  some valid owner address.\n', '  mapping (uint256 => address) public mobsterIndexToOwner;\n', '\n', '  // @dev A mapping from owner address to count of tokens that address owns.\n', '  //  Used internally inside balanceOf() to resolve ownership count.\n', '  mapping (address => uint256) private ownershipTokenCount;\n', '\n', '  /// @dev A mapping from mobsters to an address that has been approved to call\n', '  ///  transferFrom(). Each mobster can only have one approved address for transfer\n', '  ///  at any time. A zero value means no approval is outstanding.\n', '  mapping (uint256 => address) public mobsterIndexToApproved;\n', '\n', '  // @dev A mapping from mobsters to the price of the token.\n', '  mapping (uint256 => uint256) private mobsterIndexToPrice;\n', '\n', '  // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '  address public ceoAddress;\n', '  address public cooAddress;\n', '\n', '  // minimum tokens before sales\n', '  uint256 public minimumTokensBeforeSale = 13;\n', '\n', '  /*** DATATYPES ***/\n', '  struct Mobster {\n', '    uint256 id; // needed for gnarly front end\n', '    string name;\n', '    uint256 boss; // which gang member of\n', '    uint256 state; // 0 = normal , 1 = dazed\n', '    uint256 dazedExipryTime; // if this mobster was disarmed, when does it expire\n', '    uint256 buyPrice; // the price at which this mobster was bossd\n', '  }\n', '\n', '  Mobster[] private mobsters;\n', '  uint256 public leadingGang;\n', '  uint256 public leadingHitCount;\n', '  uint256[] public gangHits;  // number of hits a gang has done\n', '  uint256 public currentHitTotal;\n', '  uint256 public lethalBonusAtHits = 200;\n', '\n', '\n', '  // @dev A mapping from mobsters to the price of the token.\n', '  mapping (uint256 => uint256) private bossIndexToGang;\n', '\n', '  mapping (address => uint256) public mobsterBalances;\n', '\n', '\n', '  /*** ACCESS MODIFIERS ***/\n', '  /// @dev Access modifier for CEO-only functionality\n', '  modifier onlyCEO() {\n', '    require(msg.sender == ceoAddress);\n', '    _;\n', '  }\n', '\n', '  /// @dev Access modifier for COO-only functionality\n', '  modifier onlyCOO() {\n', '    require(msg.sender == cooAddress);\n', '    _;\n', '  }\n', '\n', '  /// Access modifier for contract owner only functionality\n', '  modifier onlyCLevel() {\n', '    require(\n', '      msg.sender == ceoAddress ||\n', '      msg.sender == cooAddress\n', '    );\n', '    _;\n', '  }\n', '\n', '  /*** CONSTRUCTOR ***/\n', '  function MobSquads() public {\n', '    ceoAddress = msg.sender;\n', '    cooAddress = msg.sender;\n', '    leadingHitCount = 0;\n', '     gangHits.length++;\n', '  //  _createMobster("The Godfather",address(this),2000000000000000,0);\n', '  }\n', '\n', '  /*** PUBLIC FUNCTIONS ***/\n', '  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n', '  /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '  ///  clear all approvals.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function approve(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    // Caller must own token.\n', '    require(_owns(msg.sender, _tokenId));\n', '\n', '    mobsterIndexToApproved[_tokenId] = _to;\n', '\n', '    Approval(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// For querying balance of a particular account\n', '  /// @param _owner The address for balance query\n', '  /// @dev Required for ERC-721 compliance.\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return ownershipTokenCount[_owner];\n', '  }\n', '\n', '  /// @dev Creates a new mobster with the given name.\n', '  function createMobster(string _name, uint256 _startPrice, uint256 _boss) public onlyCLevel {\n', '    _createMobster(_name, address(this), _startPrice,_boss);\n', '  }\n', '\n', '  /// @notice Returns all the relevant information about a specific mobster.\n', '  /// @param _tokenId The tokenId of the mobster of interest.\n', '  function getMobster(uint256 _tokenId) public view returns (\n', '    uint256 id,\n', '    string name,\n', '    uint256 boss,\n', '    uint256 sellingPrice,\n', '    address owner,\n', '    uint256 state,\n', '    uint256 dazedExipryTime,\n', '    uint256 buyPrice,\n', '    uint256 nextPrice\n', '  ) {\n', '    id = _tokenId;\n', '    Mobster storage mobster = mobsters[_tokenId];\n', '    name = mobster.name;\n', '    boss = mobster.boss;\n', '    sellingPrice =mobsterIndexToPrice[_tokenId];\n', '    owner = mobsterIndexToOwner[_tokenId];\n', '    state = mobster.state;\n', '    if (mobster.state==1 && now>mobster.dazedExipryTime){\n', '        state=0; // time expired so say they are armed\n', '    }\n', '    dazedExipryTime=mobster.dazedExipryTime;\n', '    buyPrice=mobster.buyPrice;\n', '    nextPrice=calculateNewPrice(_tokenId);\n', '  }\n', '\n', '\n', '  function setLethalBonusAtHits (uint256 _count) public onlyCLevel {\n', '        lethalBonusAtHits = _count;\n', '    }\n', '\n', '    function setHitPrice (uint256 _price) public onlyCLevel {\n', '          hitPrice = _price;\n', '      }\n', '\n', '  /// hit a mobster\n', '  function hitMobster(uint256 _victim  , uint256 _hitter) public payable returns (bool){\n', '    address mobsterOwner = mobsterIndexToOwner[_victim];\n', "    require(msg.sender != mobsterOwner); // it doesn't make sense, but hey\n", '    require(msg.sender==mobsterIndexToOwner[_hitter]); // they must be a hitter owner\n', '\n', '    // Godfather cannot be hit\n', '    if (msg.value>=hitPrice && _victim!=0 && _hitter!=0){\n', '        // zap mobster\n', '        mobsters[_victim].state=1;\n', '        mobsters[_victim].dazedExipryTime = now + (2 * 1 minutes);\n', '\n', '        uint256 gangNumber=SafeMath.div(mobsters[_hitter].boss,6)+1;\n', '\n', '        gangHits[gangNumber]++; // increase the hit count for this gang\n', '        currentHitTotal++;\n', '\n', '        if  (gangHits[gangNumber]>leadingHitCount){\n', '            leadingHitCount=gangHits[gangNumber];\n', '            leadingGang=gangNumber;\n', '        }\n', '\n', '      // Lethal Bonus Time\n', '     if (currentHitTotal==lethalBonusAtHits){\n', '       uint256 lethalBonus = SafeMath.mul(SafeMath.div(currentHitTotal * hitPrice,100),15); // 15% = 90% for mobsters/bosses\n', '\n', '         // each of the 6 members of the gang with the most hits receives 10% of the Hit Pool\n', '         uint256 winningMobsterIndex  = (6*(leadingGang-1))+1; // include the boss\n', '         for (uint256 x = winningMobsterIndex;x<6+winningMobsterIndex;x++){\n', '             if(mobsterIndexToOwner[x]!=0 && mobsterIndexToOwner[x]!=address(this)){\n', '                         mobsterBalances[ mobsterIndexToOwner[x]]+=lethalBonus; // available for withdrawal\n', '              }\n', '         } // end for this gang\n', '\n', '         currentHitTotal=0; // reset the counter\n', '\n', '         // need to reset the gangHits\n', '         for (uint256 y = 0 ; y<gangHits.length;y++){\n', '           gangHits[y]=0;\n', '           leadingHitCount=0;\n', '           leadingGang=0;\n', '         }\n', '\n', '     } // end if bonus time\n', '\n', '\n', '   } // end if this is a hit\n', '\n', '}\n', '\n', '\n', '  function implementsERC721() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function name() public pure returns (string) {\n', '    return NAME;\n', '  }\n', '\n', '  /// For querying owner of token\n', '  /// @param _tokenId The tokenID for owner inquiry\n', '  /// @dev Required for ERC-721 compliance.\n', '  function ownerOf(uint256 _tokenId)\n', '    public\n', '    view\n', '    returns (address owner)\n', '  {\n', '    owner = mobsterIndexToOwner[_tokenId];\n', '    require(owner != address(0));\n', '  }\n', '\n', '  function payout(address _to) public onlyCLevel {\n', '    _payout(_to);\n', '  }\n', '\n', '\n', '\n', '  // Allows someone to send ether and obtain the token\n', '  function purchase(uint256 _tokenId) public payable {\n', '    address oldOwner = mobsterIndexToOwner[_tokenId];\n', '\n', '    uint256 sellingPrice = mobsterIndexToPrice[_tokenId];\n', '    // no sales until we reach a minimum amount\n', '    require(totalSupply()>=minimumTokensBeforeSale);\n', '\n', '    // Making sure token owner is not sending to self\n', '    require(oldOwner != msg.sender);\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(msg.sender));\n', '\n', '    // Making sure sent amount is greater than or equal to the sellingPrice\n', '    require(msg.value >= sellingPrice);\n', '\n', '// Godfather when sold will raise by 17% (10% previous owner , 3.5% to contract, 3,5% to pool for mobsters)\n', '// Bosses when sold will raise by 17% (10% previous owner , 3.5% to contract , 3.5% to Godfather owner)\n', '// Mobsters when sold will raise by 22% (10% previous owner, 3.5% to Godfather, 3.5% to contract, 5% to their boss owner)\n', '    uint256 contractFee = roundIt(uint256(SafeMath.mul(SafeMath.div(mobsters[_tokenId].buyPrice,1000),35))); // 3.5%\n', '\n', '     // godfather is flipped\n', '    if (_tokenId==0){\n', '        uint256 poolPayment = roundIt(uint256(SafeMath.div(contractFee,5))); // 20%\n', '        // each of the 5 members of the gang with the most hits receives 20% of the mobsterPool\n', '\n', '        //leadingGang 0,1,2,3,4 = gangs\n', '        // leaders are  always 1,7,13,19,25 ,,,, so mobsters are (6*leadingGang)+2; -->\n', '        uint256 winningMobsterIndex  = (6*(leadingGang-1))+2; // boss not included in mobster payments\n', '        for (uint256 x = winningMobsterIndex;x<5+winningMobsterIndex;x++){\n', '            if(mobsterIndexToOwner[x]!=0 &&  mobsterIndexToOwner[x]!=address(this)){\n', '                        mobsterBalances[ mobsterIndexToOwner[x]]+=poolPayment; // available for withdrawal\n', '             }\n', '        }\n', '\n', '        // need to reset the gangHits\n', '        for (uint256 y = 0 ; y<gangHits.length;y++){\n', '          gangHits[y]=0;\n', '          leadingHitCount=0;\n', '          leadingGang=0;\n', '        }\n', '\n', '    }\n', '\n', '\n', '    // boss\n', '    uint256 godFatherFee = 0;\n', '    if (_tokenId!=0){\n', '        godFatherFee = contractFee; // 3.5%\n', '    }\n', '    // mobster\n', '    uint256 bossFee = 0;\n', '    if (mobsters[_tokenId].boss!=_tokenId && _tokenId!=0){\n', '        bossFee =  roundIt(uint256(SafeMath.div(mobsters[_tokenId].buyPrice,20))); // 5%\n', '    }\n', '    // pay the godfather if not owned by contract\n', '    if (godFatherFee>0 && mobsterIndexToOwner[0]!=address(this)){\n', '        mobsterIndexToOwner[0].transfer(godFatherFee);\n', '    }\n', '\n', '     // pay the bossFee if not owned by the contract\n', '    if (_tokenId!=0 && bossFee>0 && mobsterIndexToOwner[mobsters[_tokenId].boss]!=address(this)){\n', '        mobsterIndexToOwner[mobsters[_tokenId].boss].transfer(bossFee);\n', '    }\n', '\n', '     uint256 previousOwnerPayout = roundIt(SafeMath.mul(SafeMath.div(mobsters[_tokenId].buyPrice, 100), 110)); // 110% to previous owner\n', '\n', '     mobsterIndexToPrice[_tokenId]  = calculateNewPrice(_tokenId);\n', '     mobsters[_tokenId].state=0;\n', '     mobsters[_tokenId].buyPrice=sellingPrice;\n', '\n', '    _transfer(oldOwner, msg.sender, _tokenId);\n', '\n', '    // Pay previous tokenOwner if owner is not contract\n', '    if (oldOwner != address(this)) {\n', '      oldOwner.transfer(previousOwnerPayout); // 110% to previous owner\n', '    }\n', '\n', '    TokenSold(_tokenId, sellingPrice, mobsterIndexToPrice[_tokenId], oldOwner, msg.sender);\n', '\n', '    if(SafeMath.sub(msg.value, sellingPrice)>0){\n', '             msg.sender.transfer(SafeMath.sub(msg.value, sellingPrice)); // return any additional amount\n', '    }\n', '\n', '  }\n', '\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\n', '    return mobsterIndexToPrice[_tokenId];\n', '  }\n', '\n', '  function nextPrice(uint256 _tokenId) public view returns (uint256 nPrice) {\n', '    return calculateNewPrice(_tokenId);\n', '  }\n', '\n', '\n', '    function claimMobsterFunds() public {\n', '      if (mobsterBalances[msg.sender]==0) revert();\n', '      uint256 amount = mobsterBalances[msg.sender];\n', '      if (amount>0){\n', '        mobsterBalances[msg.sender] = 0;\n', '        msg.sender.transfer(amount);\n', '      }\n', '    }\n', '\n', '\n', ' function calculateNewPrice(uint256 _tokenId) internal view returns (uint256 price){\n', '   uint256 sellingPrice = mobsterIndexToPrice[_tokenId];\n', '   uint256 newPrice;\n', '\n', '   // level 0\n', '   // Godfather when sold will raise by 17%\n', '   if (_tokenId==0){\n', '         newPrice = roundIt(SafeMath.div(SafeMath.mul(sellingPrice, 117), 100));\n', '   }\n', '   // level 1\n', '    //Bosses when sold will raise by 17%\n', '  if (mobsters[_tokenId].boss==_tokenId && _tokenId!=0){\n', '        newPrice = roundIt(SafeMath.div(SafeMath.mul(sellingPrice, 117), 100));\n', '   }\n', '   // level 2\n', '   // Mobsters when sold will raise by 22%\n', '  if (mobsters[_tokenId].boss!=_tokenId){\n', '        newPrice= roundIt(SafeMath.div(SafeMath.mul(sellingPrice, 122), 100));\n', '   }\n', '   return newPrice;\n', ' }\n', '\n', '  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '  /// @param _newCEO The address of the new CEO\n', '  function setCEO(address _newCEO) public onlyCEO {\n', '    require(_newCEO != address(0));\n', '\n', '    ceoAddress = _newCEO;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\n', '  /// @param _newCOO The address of the new COO\n', '  function setCOO(address _newCOO) public onlyCEO {\n', '    require(_newCOO != address(0));\n', '\n', '    cooAddress = _newCOO;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function symbol() public pure returns (string) {\n', '    return SYMBOL;\n', '  }\n', '\n', '  /// @notice Allow pre-approved user to take ownership of a token\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    address newOwner = msg.sender;\n', '    address oldOwner = mobsterIndexToOwner[_tokenId];\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Making sure transfer is approved\n', '    require(_approved(newOwner, _tokenId));\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '  }\n', '\n', '  /// @param _owner The owner whose tokens we are interested in.\n', '  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\n', '    uint256 tokenCount = balanceOf(_owner);\n', '    if (tokenCount == 0) {\n', '        // Return an empty array\n', '      return new uint256[](0);\n', '    } else {\n', '      uint256[] memory result = new uint256[](tokenCount);\n', '      uint256 totalmobsters = totalSupply();\n', '      uint256 resultIndex = 0;\n', '\n', '      uint256 mobsterId;\n', '      for (mobsterId = 0; mobsterId <= totalmobsters; mobsterId++) {\n', '        if (mobsterIndexToOwner[mobsterId] == _owner) {\n', '          result[resultIndex] = mobsterId;\n', '          resultIndex++;\n', '        }\n', '      }\n', '      return result;\n', '    }\n', '  }\n', '\n', '  /// For querying totalSupply of token\n', '  /// @dev Required for ERC-721 compliance.\n', '  function totalSupply() public view returns (uint256 total) {\n', '    return mobsters.length;\n', '  }\n', '\n', '  /// Owner initates the transfer of the token to another account\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transfer(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    require(_owns(msg.sender, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// Third-party initiates transfer of token from address _from to address _to\n', '  /// @param _from The address for the token to be transferred from.\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    require(_owns(_from, _tokenId));\n', '    require(_approved(_to, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /*** PRIVATE FUNCTIONS ***/\n', '  /// Safety check on _to address to prevent against an unexpected 0x0 default.\n', '  function _addressNotNull(address _to) private pure returns (bool) {\n', '    return _to != address(0);\n', '  }\n', '\n', '  /// For checking approval of transfer for address _to\n', '  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n', '    return mobsterIndexToApproved[_tokenId] == _to;\n', '  }\n', '\n', '\n', '  /// For creating mobsters\n', '  function _createMobster(string _name, address _owner, uint256 _price, uint256 _boss) private {\n', '\n', '    Mobster memory _mobster = Mobster({\n', '      name: _name,\n', '      boss: _boss,\n', '      state: 0,\n', '      dazedExipryTime: 0,\n', '      buyPrice: _price,\n', '      id: mobsters.length-1\n', '    });\n', '    uint256 newMobsterId = mobsters.push(_mobster) - 1;\n', '    mobsters[newMobsterId].id=newMobsterId;\n', '\n', '\n', '    if (newMobsterId % 6 ==0 || newMobsterId==1)\n', '    {\n', '        gangHits.length++;\n', '    }\n', '\n', "    // It's probably never going to happen, 4 billion tokens are A LOT, but\n", "    // let's just be 100% sure we never let this happen.\n", '    require(newMobsterId == uint256(uint32(newMobsterId)));\n', '\n', '    Birth(newMobsterId, _name, _owner);\n', '\n', '    mobsterIndexToPrice[newMobsterId] = _price;\n', '\n', '    // This will assign ownership, and also emit the Transfer event as\n', '    // per ERC721 draft\n', '    _transfer(address(0), _owner, newMobsterId);\n', '  }\n', '\n', '  /// Check for token ownership\n', '  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\n', '    return claimant == mobsterIndexToOwner[_tokenId];\n', '  }\n', '\n', '  /// For paying out balance on contract\n', '  function _payout(address _to) private {\n', '    if (_to == address(0)) {\n', '      ceoAddress.transfer(this.balance);\n', '    } else {\n', '      _to.transfer(this.balance);\n', '    }\n', '  }\n', '\n', '  /// @dev Assigns ownership of a specific mobster to an address.\n', '  function _transfer(address _from, address _to, uint256 _tokenId) private {\n', "    // Since the number of mobsters is capped to 2^32 we can't overflow this\n", '    ownershipTokenCount[_to]++;\n', '    //transfer ownership\n', '    mobsterIndexToOwner[_tokenId] = _to;\n', '\n', "    // When creating new mobsters _from is 0x0, but we can't account that address.\n", '    if (_from != address(0)) {\n', '      ownershipTokenCount[_from]--;\n', '      // clear any previously approved ownership exchange\n', '      delete mobsterIndexToApproved[_tokenId];\n', '    }\n', '\n', '    // Emit the transfer event.\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '    // utility to round to the game precision\n', '    function roundIt(uint256 amount) internal constant returns (uint256)\n', '    {\n', '        // round down to correct preicision\n', '        uint256 result = (amount/precision)*precision;\n', '        return result;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
