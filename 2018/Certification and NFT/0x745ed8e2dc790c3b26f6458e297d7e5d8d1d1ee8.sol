['pragma solidity > 0.4.99 <0.6.0;\n', '\n', 'interface IERC20Token {\n', '    function balanceOf(address owner) external returns (uint256);\n', '    function transfer(address to, uint256 amount) external returns (bool);\n', '    function burn(uint256 _value) external returns (bool);\n', '    function decimals() external returns (uint256);\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '}\n', '\n', 'contract Ownable {\n', '  address payable public _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '  * account.\n', '  */\n', '  constructor() internal {\n', '    _owner = tx.origin;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '  * @return the address of the owner.\n', '  */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Throws if called by any account other than the owner.\n', '  */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @return true if `msg.sender` is the owner of the contract.\n', '  */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Allows the current owner to relinquish control of the contract.\n', '  * @notice Renouncing to ownership will leave the contract without an owner.\n', '  * It will not be possible to call the functions with the `onlyOwner`\n', '  * modifier anymore.\n', '  */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '  * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '  * @param newOwner The address to transfer ownership to.\n', '  */\n', '  function transferOwnership(address payable newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '  * @dev Transfers control of the contract to a newOwner.\n', '  * @param newOwner The address to transfer ownership to.\n', '  */\n', '  function _transferOwnership(address payable newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract TokenSale is Ownable {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    string public constant createdBy = "AssetSplit.org - the guys who cut the pizza";\n', '    \n', '    IERC20Token public tokenContract;\n', '    uint256 public tokenPerEther;\n', '\n', '    uint256 public tokensSold;\n', '    \n', '    uint256 public earlyBirdsPaid = 0;\n', '    uint256 public earlyBirdBonus = 5;\n', '    uint256 public earlyBirdValue = 900;\n', '    \n', '    uint256 public bonusStage1;\n', '    uint256 public bonusStage2;\n', '    uint256 public bonusStage3;\n', '    \n', '    uint256 public bonusPercentage1;\n', '    uint256 public bonusPercentage2;\n', '    uint256 public bonusPercentage3;\n', '\n', '    event Sold(address buyer, uint256 amount);\n', '\n', '    constructor(address _tokenContract, uint256 _tokenPerEther, uint256 _bonusStage1, uint256 _bonusPercentage1, uint256 _bonusStage2, uint256 _bonusPercentage2, uint256 _bonusStage3, uint256 _bonusPercentage3) public {\n', '        tokenContract = IERC20Token(_tokenContract);\n', '        tokenPerEther = _tokenPerEther;\n', '        \n', '        bonusStage1 = _bonusStage1.mul(1 ether);\n', '        bonusStage2 = _bonusStage2.mul(1 ether);\n', '        bonusStage3 = _bonusStage3.mul(1 ether);\n', '        bonusPercentage1 = _bonusPercentage1;\n', '        bonusPercentage2 = _bonusPercentage2;\n', '        bonusPercentage3 = _bonusPercentage3;\n', '    }\n', '    \n', '    function buyTokenWithEther() public payable {\n', '        address payable creator = _owner;\n', '        uint256 scaledAmount;\n', '        \n', '        require(msg.value > 0);\n', '        \n', '        if (msg.value < bonusStage1 || bonusStage1 == 0) {\n', '        scaledAmount = msg.value.mul(tokenPerEther).mul(uint256(10) ** tokenContract.decimals()).div(10 ** 18);\n', '        }\n', '        if (bonusStage1 != 0 && msg.value >= bonusStage1) {\n', '            scaledAmount = msg.value.mul(tokenPerEther).mul(uint256(10) ** tokenContract.decimals()).div(10 ** 18).mul(bonusPercentage1).div(100);\n', '        }\n', '        if (bonusStage2 != 0 && msg.value >= bonusStage2) {\n', '            scaledAmount = msg.value.mul(tokenPerEther).mul(uint256(10) ** tokenContract.decimals()).div(10 ** 18).mul(bonusPercentage2).div(100);\n', '        }\n', '        if (bonusStage3 != 0 && msg.value >= bonusStage3) {\n', '            scaledAmount = msg.value.mul(tokenPerEther).mul(uint256(10) ** tokenContract.decimals()).div(10 ** 18).mul(bonusPercentage3).div(100);\n', '            if (earlyBirdsPaid < earlyBirdBonus) {\n', '                earlyBirdsPaid = earlyBirdsPaid.add(1);\n', '                scaledAmount = scaledAmount.add((earlyBirdValue).mul(uint256(10) ** tokenContract.decimals()));\n', '            }\n', '        }\n', '        \n', '        require(tokenContract.balanceOf(address(this)) >= scaledAmount);\n', '        emit Sold(msg.sender, scaledAmount);\n', '        tokensSold = tokensSold.add(scaledAmount);\n', '        creator.transfer(address(this).balance);\n', '        require(tokenContract.transfer(msg.sender, scaledAmount));\n', '    }\n', '    \n', '    function () external payable {\n', '        buyTokenWithEther();\n', '    }\n', '}']