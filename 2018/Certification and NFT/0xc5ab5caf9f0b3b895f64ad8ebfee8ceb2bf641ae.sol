['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '// File: contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/token/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: contracts/TeamLocker.sol\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TeamLocker is SafeMath, Ownable {\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    ERC20Basic public token;\n', '\n', '    address[] public beneficiaries;\n', '    uint256[] public ratios;\n', '    uint256 public genTime;\n', '    \n', '    uint256 public collectedTokens;\n', '\n', '    function TeamLocker(address _token, address[] _beneficiaries, uint256[] _ratios, uint256 _genTime) {\n', '\n', '        require(_token != 0x00);\n', '        require(_beneficiaries.length > 0 && _beneficiaries.length == _ratios.length);\n', '        require(_genTime > 0);\n', '\n', '        for (uint i = 0; i < _beneficiaries.length; i++) {\n', '            require(_beneficiaries[i] != 0x00);\n', '        }\n', '\n', '        token = ERC20Basic(_token);\n', '        beneficiaries = _beneficiaries;\n', '        ratios = _ratios;\n', '        genTime = _genTime;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers tokens held by timelock to beneficiary.\n', '     */\n', '    function release() public {\n', '\n', '        uint256 balance = token.balanceOf(address(this));\n', '        uint256 total = add(balance, collectedTokens);\n', '\n', '        uint256 lockTime1 = add(genTime, 183 days); // 6 months\n', '        uint256 lockTime2 = add(genTime, 1 years); // 1 year\n', '\n', '        uint256 currentRatio = 20;\n', '\n', '        if (now >= lockTime1) {\n', '            currentRatio = 50;\n', '        }\n', '\n', '        if (now >= lockTime2) {\n', '            currentRatio = 100;\n', '        }\n', '\n', '        uint256 releasedAmount = div(mul(total, currentRatio), 100);\n', '        uint256 grantAmount = sub(releasedAmount, collectedTokens);\n', '        require(grantAmount > 0);\n', '        collectedTokens = add(collectedTokens, grantAmount);\n', '\n', '\n', '        uint256 grantAmountForEach; // = div(grantAmount, 3);\n', '\n', '        for (uint i = 0; i < beneficiaries.length; i++) {\n', '            grantAmountForEach = div(mul(grantAmount, ratios[i]), 100);\n', '            token.safeTransfer(beneficiaries[i], grantAmountForEach);\n', '        }\n', '    }\n', '\n', '\n', '    function setGenTime(uint256 _genTime) public onlyOwner {\n', '        require(_genTime > 0);\n', '        genTime = _genTime;\n', '    }\n', '\n', '    function setToken(address newToken) public onlyOwner {\n', '        require(newToken != 0x00);\n', '        token = ERC20Basic(newToken);\n', '    }\n', '    \n', '    function destruct(address to) public onlyOwner {\n', '        require(to != 0x00);\n', '        selfdestruct(to);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '// File: contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/token/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: contracts/TeamLocker.sol\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TeamLocker is SafeMath, Ownable {\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    ERC20Basic public token;\n', '\n', '    address[] public beneficiaries;\n', '    uint256[] public ratios;\n', '    uint256 public genTime;\n', '    \n', '    uint256 public collectedTokens;\n', '\n', '    function TeamLocker(address _token, address[] _beneficiaries, uint256[] _ratios, uint256 _genTime) {\n', '\n', '        require(_token != 0x00);\n', '        require(_beneficiaries.length > 0 && _beneficiaries.length == _ratios.length);\n', '        require(_genTime > 0);\n', '\n', '        for (uint i = 0; i < _beneficiaries.length; i++) {\n', '            require(_beneficiaries[i] != 0x00);\n', '        }\n', '\n', '        token = ERC20Basic(_token);\n', '        beneficiaries = _beneficiaries;\n', '        ratios = _ratios;\n', '        genTime = _genTime;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers tokens held by timelock to beneficiary.\n', '     */\n', '    function release() public {\n', '\n', '        uint256 balance = token.balanceOf(address(this));\n', '        uint256 total = add(balance, collectedTokens);\n', '\n', '        uint256 lockTime1 = add(genTime, 183 days); // 6 months\n', '        uint256 lockTime2 = add(genTime, 1 years); // 1 year\n', '\n', '        uint256 currentRatio = 20;\n', '\n', '        if (now >= lockTime1) {\n', '            currentRatio = 50;\n', '        }\n', '\n', '        if (now >= lockTime2) {\n', '            currentRatio = 100;\n', '        }\n', '\n', '        uint256 releasedAmount = div(mul(total, currentRatio), 100);\n', '        uint256 grantAmount = sub(releasedAmount, collectedTokens);\n', '        require(grantAmount > 0);\n', '        collectedTokens = add(collectedTokens, grantAmount);\n', '\n', '\n', '        uint256 grantAmountForEach; // = div(grantAmount, 3);\n', '\n', '        for (uint i = 0; i < beneficiaries.length; i++) {\n', '            grantAmountForEach = div(mul(grantAmount, ratios[i]), 100);\n', '            token.safeTransfer(beneficiaries[i], grantAmountForEach);\n', '        }\n', '    }\n', '\n', '\n', '    function setGenTime(uint256 _genTime) public onlyOwner {\n', '        require(_genTime > 0);\n', '        genTime = _genTime;\n', '    }\n', '\n', '    function setToken(address newToken) public onlyOwner {\n', '        require(newToken != 0x00);\n', '        token = ERC20Basic(newToken);\n', '    }\n', '    \n', '    function destruct(address to) public onlyOwner {\n', '        require(to != 0x00);\n', '        selfdestruct(to);\n', '    }\n', '}']
