['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract DI {\n', '    function ap(address u_) external;\n', '    function rb(address u_) external;\n', '    function ico(uint i_, address x_, uint c_) external;\n', '    function sco(uint i_, address x_, uint c_) external;\n', '    function gco(uint i_, address x_) public view returns (uint _c);\n', '    function gcp(uint ci_) public view returns (uint _c);\n', '    function cpn(uint ci_) external;\n', '    function gur(address x_, address y_) external returns (address _z);\n', '    function gcmp(uint i_, uint c_) public view returns (uint _c);\n', '    function cmpn(uint i_, uint c_) external;\n', '    function cg(address x_, uint gpc_, uint mg_, uint gc_) external;\n', '    function ggc(address x_) public view returns (uint _c);\n', '    function ggcd(address x_) public view returns (uint _c);\n', '    function guhb(address x_) public view returns (bool _c);\n', '    function gcsc(uint ci_) public view returns (uint _c);\n', '    function gcpn(uint ci_) public view returns (uint _c);\n', '    function gcpm(uint ci_) public view returns (uint _c);\n', '    function gcpa(uint ci_) public view returns (uint _c);\n', '    function gcsp(uint ci_) public view returns (uint _c);\n', '    function sc(uint ci_, uint csp_, uint cpm_, uint cpa_, uint csc_) external;\n', '    function irbg(address x_, uint c_) external;\n', '    function grg(address x_) public view returns (uint _c);\n', '}\n', '\n', 'contract Presale {\n', '    event EventBc(address x_, uint ci_);\n', '    event EventBmc(address x_, uint ci_, uint c_);\n', '    event EventCg(address x_);\n', '\n', '    uint rb = 10;\n', '    uint GC = 10;\n', '    uint MG = 50;\n', '    uint GPC = 3;\n', '    uint npb = 50;\n', '\n', '    DI di;\n', '    address public opAddr;\n', '    address private newOpAddr;\n', '\n', '    function Presale() public {\n', '        opAddr = msg.sender;\n', '    }\n', '\n', '\n', '    function bc(uint ci_, address ref_) public payable {\n', '        uint cp_ = di.gcp(ci_);\n', '        require(cp_ > 0);\n', '        cp_ = cp_ * pf(msg.sender)/10000;\n', '        require(msg.value >= cp_);\n', '\n', '        uint excessMoney = msg.value - cp_;\n', '\n', '        di.cpn(ci_);\n', '        di.ico(ci_, msg.sender, 1);\n', '\n', '        di.ap(msg.sender);\n', '        di.rb(msg.sender);\n', '\n', '        EventBc(msg.sender, ci_);\n', '\n', '        address rr = di.gur(msg.sender, ref_);\n', '        if(rr != address(0))\n', '            rr.transfer(cp_ * rb / 100);\n', '\n', '        msg.sender.transfer(excessMoney);\n', '    }\n', '\n', '    function bmc(uint ci_, uint c_, address ref_) public payable {\n', '        require(di.gcp(ci_) > 0);\n', '\n', '        uint cmp_ = di.gcmp(ci_, c_);\n', '        cmp_ = cmp_ * pf(msg.sender)/10000;\n', '        require(msg.value >= cmp_);\n', '\n', '        uint excessMoney = msg.value - cmp_;\n', '            \n', '\n', '\n', '        di.cmpn(ci_, c_);\n', '        di.ico(ci_, msg.sender, c_);\n', '\n', '        di.ap(msg.sender);\n', '        di.rb(msg.sender);\n', '\n', '        EventBmc(msg.sender, ci_, c_);\n', '\n', '        address rr = di.gur(msg.sender, ref_);\n', '        if(rr != address(0)) {\n', '            uint rrb = cmp_ * rb / 100;\n', '            di.irbg(rr, rrb);\n', '            rr.transfer(rrb);\n', '        }\n', '        msg.sender.transfer(excessMoney);\n', '    }\n', '    \n', '    function cg() public {\n', '        di.cg(msg.sender, GPC, MG, GC);\n', '        di.ap(msg.sender);\n', '        EventCg(msg.sender);\n', '    }\n', '\n', '    function pf(address u_) public view returns (uint c) {\n', '        c = 10000;\n', '        if(!di.guhb(u_)) {\n', '            c = c * (100 - npb) / 100;\n', '        }\n', '        uint _gc = di.ggc(u_);\n', '        if(_gc > 0) {\n', '            c = c * (100 - _gc) / 100;\n', '        }\n', '    }\n', '\n', '    function cd1(address x_) public view returns (uint _gc, uint _gcd, bool _uhb, uint _npb, uint _ggcd, uint _mg, uint _gpc, uint _rb, uint _rg) {\n', '        _gc = di.ggc(x_);\n', '        _gcd = di.ggcd(x_);\n', '        _uhb = di.guhb(x_);\n', '        _npb = npb;\n', '        _ggcd = GC;\n', '        _mg = MG;\n', '        _gpc = GPC;\n', '        _rb = rb;\n', '        _rg = di.grg(x_);\n', '    }\n', '    function cd() public view returns (uint _gc, uint _gcd, bool _uhb, uint _npb, uint _ggcd, uint _mg, uint _gpc, uint _rb, uint _rg) {\n', '        return cd1(msg.sender);\n', '    }\n', '    function gcard(uint ci_, address co_) public view returns (uint _coc, uint _csc, uint _cp, uint _cpn, uint _cpm, uint _cpa, uint _csp) {\n', '        _coc = di.gco(ci_, co_);\n', '        _csc = di.gcsc(ci_);\n', '        _cp = di.gcp(ci_);\n', '        _cpn = di.gcpn(ci_);\n', '        _cpm = di.gcpm(ci_);\n', '        _cpa = di.gcpa(ci_);\n', '        _csp = di.gcsp(ci_);\n', '    }\n', '\n', '\n', '    function sc(uint ci_, uint csp_, uint cpm_, uint cpa_, uint csc_) public onlyOp {\n', '        di.sc(ci_, csp_, cpm_, cpa_, csc_);\n', '    }\n', '    function srb(uint rb_) external onlyOp {\n', '        rb = rb_;\n', '    }\n', '    function sgc(uint GC_) public onlyOp {\n', '        GC = GC_;\n', '    }\n', '    function smg(uint MG_) public onlyOp {\n', '        MG = MG_;\n', '    }   \n', '    function sgpc(uint GPC_) public onlyOp {\n', '        GPC = GPC_;\n', '    }    \n', '    function snpb(uint npb_) public onlyOp {\n', '        npb = npb_;\n', '    }\n', '\n', '    function payout(address to_) public onlyOp {\n', '        payoutX(to_, this.balance);\n', '    }\n', '    function payoutX(address to_, uint value_) public onlyOp {\n', '        require(address(0) != to_);\n', '        if(value_ > this.balance)\n', '            to_.transfer(this.balance);\n', '        else\n', '            to_.transfer(value_);\n', '    }\n', '\n', '    function sdc(address dc_) public onlyOp {\n', '        if(dc_ != address(0))\n', '            di = DI(dc_);\n', '    }\n', '    modifier onlyOp() {\n', '        require(msg.sender == opAddr);\n', '        _;\n', '    }\n', '    function setOp(address newOpAddr_) public onlyOp {\n', '        require(newOpAddr_ != address(0));\n', '        newOpAddr = newOpAddr_;\n', '    }\n', '    function acceptOp() public {\n', '        require(msg.sender == newOpAddr);\n', '        require(address(0) != newOpAddr);\n', '        opAddr = newOpAddr;\n', '        newOpAddr = address(0);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract DI {\n', '    function ap(address u_) external;\n', '    function rb(address u_) external;\n', '    function ico(uint i_, address x_, uint c_) external;\n', '    function sco(uint i_, address x_, uint c_) external;\n', '    function gco(uint i_, address x_) public view returns (uint _c);\n', '    function gcp(uint ci_) public view returns (uint _c);\n', '    function cpn(uint ci_) external;\n', '    function gur(address x_, address y_) external returns (address _z);\n', '    function gcmp(uint i_, uint c_) public view returns (uint _c);\n', '    function cmpn(uint i_, uint c_) external;\n', '    function cg(address x_, uint gpc_, uint mg_, uint gc_) external;\n', '    function ggc(address x_) public view returns (uint _c);\n', '    function ggcd(address x_) public view returns (uint _c);\n', '    function guhb(address x_) public view returns (bool _c);\n', '    function gcsc(uint ci_) public view returns (uint _c);\n', '    function gcpn(uint ci_) public view returns (uint _c);\n', '    function gcpm(uint ci_) public view returns (uint _c);\n', '    function gcpa(uint ci_) public view returns (uint _c);\n', '    function gcsp(uint ci_) public view returns (uint _c);\n', '    function sc(uint ci_, uint csp_, uint cpm_, uint cpa_, uint csc_) external;\n', '    function irbg(address x_, uint c_) external;\n', '    function grg(address x_) public view returns (uint _c);\n', '}\n', '\n', 'contract Presale {\n', '    event EventBc(address x_, uint ci_);\n', '    event EventBmc(address x_, uint ci_, uint c_);\n', '    event EventCg(address x_);\n', '\n', '    uint rb = 10;\n', '    uint GC = 10;\n', '    uint MG = 50;\n', '    uint GPC = 3;\n', '    uint npb = 50;\n', '\n', '    DI di;\n', '    address public opAddr;\n', '    address private newOpAddr;\n', '\n', '    function Presale() public {\n', '        opAddr = msg.sender;\n', '    }\n', '\n', '\n', '    function bc(uint ci_, address ref_) public payable {\n', '        uint cp_ = di.gcp(ci_);\n', '        require(cp_ > 0);\n', '        cp_ = cp_ * pf(msg.sender)/10000;\n', '        require(msg.value >= cp_);\n', '\n', '        uint excessMoney = msg.value - cp_;\n', '\n', '        di.cpn(ci_);\n', '        di.ico(ci_, msg.sender, 1);\n', '\n', '        di.ap(msg.sender);\n', '        di.rb(msg.sender);\n', '\n', '        EventBc(msg.sender, ci_);\n', '\n', '        address rr = di.gur(msg.sender, ref_);\n', '        if(rr != address(0))\n', '            rr.transfer(cp_ * rb / 100);\n', '\n', '        msg.sender.transfer(excessMoney);\n', '    }\n', '\n', '    function bmc(uint ci_, uint c_, address ref_) public payable {\n', '        require(di.gcp(ci_) > 0);\n', '\n', '        uint cmp_ = di.gcmp(ci_, c_);\n', '        cmp_ = cmp_ * pf(msg.sender)/10000;\n', '        require(msg.value >= cmp_);\n', '\n', '        uint excessMoney = msg.value - cmp_;\n', '            \n', '\n', '\n', '        di.cmpn(ci_, c_);\n', '        di.ico(ci_, msg.sender, c_);\n', '\n', '        di.ap(msg.sender);\n', '        di.rb(msg.sender);\n', '\n', '        EventBmc(msg.sender, ci_, c_);\n', '\n', '        address rr = di.gur(msg.sender, ref_);\n', '        if(rr != address(0)) {\n', '            uint rrb = cmp_ * rb / 100;\n', '            di.irbg(rr, rrb);\n', '            rr.transfer(rrb);\n', '        }\n', '        msg.sender.transfer(excessMoney);\n', '    }\n', '    \n', '    function cg() public {\n', '        di.cg(msg.sender, GPC, MG, GC);\n', '        di.ap(msg.sender);\n', '        EventCg(msg.sender);\n', '    }\n', '\n', '    function pf(address u_) public view returns (uint c) {\n', '        c = 10000;\n', '        if(!di.guhb(u_)) {\n', '            c = c * (100 - npb) / 100;\n', '        }\n', '        uint _gc = di.ggc(u_);\n', '        if(_gc > 0) {\n', '            c = c * (100 - _gc) / 100;\n', '        }\n', '    }\n', '\n', '    function cd1(address x_) public view returns (uint _gc, uint _gcd, bool _uhb, uint _npb, uint _ggcd, uint _mg, uint _gpc, uint _rb, uint _rg) {\n', '        _gc = di.ggc(x_);\n', '        _gcd = di.ggcd(x_);\n', '        _uhb = di.guhb(x_);\n', '        _npb = npb;\n', '        _ggcd = GC;\n', '        _mg = MG;\n', '        _gpc = GPC;\n', '        _rb = rb;\n', '        _rg = di.grg(x_);\n', '    }\n', '    function cd() public view returns (uint _gc, uint _gcd, bool _uhb, uint _npb, uint _ggcd, uint _mg, uint _gpc, uint _rb, uint _rg) {\n', '        return cd1(msg.sender);\n', '    }\n', '    function gcard(uint ci_, address co_) public view returns (uint _coc, uint _csc, uint _cp, uint _cpn, uint _cpm, uint _cpa, uint _csp) {\n', '        _coc = di.gco(ci_, co_);\n', '        _csc = di.gcsc(ci_);\n', '        _cp = di.gcp(ci_);\n', '        _cpn = di.gcpn(ci_);\n', '        _cpm = di.gcpm(ci_);\n', '        _cpa = di.gcpa(ci_);\n', '        _csp = di.gcsp(ci_);\n', '    }\n', '\n', '\n', '    function sc(uint ci_, uint csp_, uint cpm_, uint cpa_, uint csc_) public onlyOp {\n', '        di.sc(ci_, csp_, cpm_, cpa_, csc_);\n', '    }\n', '    function srb(uint rb_) external onlyOp {\n', '        rb = rb_;\n', '    }\n', '    function sgc(uint GC_) public onlyOp {\n', '        GC = GC_;\n', '    }\n', '    function smg(uint MG_) public onlyOp {\n', '        MG = MG_;\n', '    }   \n', '    function sgpc(uint GPC_) public onlyOp {\n', '        GPC = GPC_;\n', '    }    \n', '    function snpb(uint npb_) public onlyOp {\n', '        npb = npb_;\n', '    }\n', '\n', '    function payout(address to_) public onlyOp {\n', '        payoutX(to_, this.balance);\n', '    }\n', '    function payoutX(address to_, uint value_) public onlyOp {\n', '        require(address(0) != to_);\n', '        if(value_ > this.balance)\n', '            to_.transfer(this.balance);\n', '        else\n', '            to_.transfer(value_);\n', '    }\n', '\n', '    function sdc(address dc_) public onlyOp {\n', '        if(dc_ != address(0))\n', '            di = DI(dc_);\n', '    }\n', '    modifier onlyOp() {\n', '        require(msg.sender == opAddr);\n', '        _;\n', '    }\n', '    function setOp(address newOpAddr_) public onlyOp {\n', '        require(newOpAddr_ != address(0));\n', '        newOpAddr = newOpAddr_;\n', '    }\n', '    function acceptOp() public {\n', '        require(msg.sender == newOpAddr);\n', '        require(address(0) != newOpAddr);\n', '        opAddr = newOpAddr;\n', '        newOpAddr = address(0);\n', '    }\n', '}']
