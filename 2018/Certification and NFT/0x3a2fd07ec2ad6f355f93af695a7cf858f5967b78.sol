['pragma solidity ^0.4.24;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/MTVote.sol\n', '\n', 'contract TVCrowdsale {\n', '    uint256 public currentRate;\n', '    function buyTokens(address _beneficiary) public payable;\n', '}\n', '\n', 'contract TVToken {\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function safeTransfer(address _to, uint256 _value, bytes _data) public;\n', '}\n', '\n', '\n', 'contract MTVote is Ownable {\n', '    address public TVTokenAddress;\n', '    address public TVCrowdsaleAddress;\n', '    address public manager;\n', '    address public wallet;\n', '    address internal checkAndBuySender;\n', '    bytes4 constant TOKEN_RECEIVED = bytes4(keccak256("onTokenReceived(address,uint256,bytes)"));\n', '    bool pause = false;\n', '\n', '    mapping(uint => uint) public targets;\n', '    uint public targetIdsSize = 0;\n', '    uint[] public targetIds;\n', '\n', '    modifier onlyOwnerOrManager() {\n', '        require(msg.sender == owner || manager == msg.sender);\n', '        _;\n', '    }\n', '\n', '    event TokenReceived(address from, uint value, uint targetId);\n', '    event changeAndVoteEvent(address voter, uint rate, uint value, uint targetId);\n', '\n', '    constructor(\n', '        address _TVTokenAddress,\n', '        address _TVCrowdsaleAddress,\n', '        address _manager,\n', '        address _wallet) public {\n', '\n', '        manager = _manager;\n', '        wallet = _wallet;\n', '        TVTokenAddress = _TVTokenAddress;\n', '        TVCrowdsaleAddress = _TVCrowdsaleAddress;\n', '    }\n', '\n', '    function changeAndVote(uint targetId) public payable {\n', '        require(!pause);\n', '        uint rate = TVCrowdsale(TVCrowdsaleAddress).currentRate();\n', '\n', '        TVCrowdsale(TVCrowdsaleAddress).buyTokens.value(msg.value)(this);\n', '        bytes memory data = toBytes(targetId);\n', '        checkAndBuySender = msg.sender;\n', '        TVToken(TVTokenAddress).safeTransfer(this, msg.value * rate, data);\n', '\n', '        emit changeAndVoteEvent(msg.sender, rate, msg.value, targetId);\n', '    }\n', '\n', '    function onTokenReceived(address _from, uint256 _value, bytes _data) public returns (bytes4) {\n', '        require(msg.sender == TVTokenAddress);\n', '        require(!pause);\n', '        uint targetId = uint256(convertBytesToBytes32(_data));\n', '        targets[targetId] += _value;\n', '        TVToken(TVTokenAddress).transfer(wallet, _value);\n', '        _from = this == _from ? checkAndBuySender : _from;\n', '        checkAndBuySender = address(0);\n', '\n', '        bool inList = false;\n', '        for (uint i = 0; i < targetIdsSize; i++) {\n', '            if (targetIds[i] == targetId) {\n', '                inList = true;\n', '            }\n', '        }\n', '        if (!inList) {\n', '            targetIds.push(targetId);\n', '            targetIdsSize++;\n', '        }\n', '\n', '        emit TokenReceived(_from, _value, targetId);\n', '        return TOKEN_RECEIVED;\n', '    }\n', '\n', '    function setPause(bool isPaused) public onlyOwnerOrManager {\n', '        pause = isPaused;\n', '    }\n', '\n', '    function clear() public onlyOwnerOrManager {\n', '        targetIdsSize = 0;\n', '    }\n', '\n', '    function changeTVTokenAddress(address newAddress) public onlyOwnerOrManager {\n', '        TVTokenAddress = newAddress;\n', '    }\n', '\n', '    function changeTVCrowdsaleAddress(address newAddress) public onlyOwnerOrManager {\n', '        TVCrowdsaleAddress = newAddress;\n', '    }\n', '\n', '    function setManager(address _manager) public onlyOwner {\n', '        manager = _manager;\n', '    }\n', '\n', '    function convertBytesToBytes32(bytes inBytes) internal pure returns (bytes32 out) {\n', '        if (inBytes.length == 0) {\n', '            return 0x0;\n', '        }\n', '\n', '        assembly {\n', '            out := mload(add(inBytes, 32))\n', '        }\n', '    }\n', '\n', '    function bytesToUint(bytes32 b) internal pure returns (uint number){\n', '        for (uint i = 0; i < b.length; i++) {\n', '            number = number + uint(b[i]) * (2 ** (8 * (b.length - (i + 1))));\n', '        }\n', '    }\n', '\n', '    function toBytes(uint256 x) internal pure returns (bytes b) {\n', '        b = new bytes(32);\n', '        assembly {mstore(add(b, 32), x)}\n', '    }\n', '}']