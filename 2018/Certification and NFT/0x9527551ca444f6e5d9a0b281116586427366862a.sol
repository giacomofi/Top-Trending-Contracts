['pragma solidity 0.4.21;\n', '\n', '// ----------------------------------------------------------------------------\n', '// &#39;Digitize Coin Presale&#39; contract: https://digitizecoin.com \n', '//\n', '// Digitize Coin - DTZ: 0x664e6db4044f23c95de63ec299aaa9b39c59328d\n', '// SoftCap: 600 ether\n', '// HardCap: 4000 ether - 26668000 tokens\n', '// Tokens per 1 ether: 6667\n', '// KYC: PICOPS https://picops.parity.io\n', '//\n', '// (c) Radek Ostrowski / http://startonchain.com - The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '    owner = _newOwner;\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0);\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// RefundVault for &#39;Digitize Coin&#39; project imported from:\n', '// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/crowdsale/distribution/utils/RefundVault.sol\n', '//\n', '// Radek Ostrowski / http://startonchain.com / https://digitizecoin.com \n', '// ----------------------------------------------------------------------------\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it to destination wallet if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed _beneficiary, uint256 _weiAmount);\n', '\n', '  /**\n', '   * @param _wallet Final vault address\n', '   */\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  /**\n', '   * @param _contributor Contributor address\n', '   */\n', '  function deposit(address _contributor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[_contributor] = deposited[_contributor].add(msg.value); \n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    emit Closed();\n', '    wallet.transfer(address(this).balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    emit RefundsEnabled();\n', '  }\n', '\n', '  /**\n', '   * @param _contributor Contributor address\n', '   */\n', '  function refund(address _contributor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[_contributor];\n', '    require(depositedValue > 0);\n', '    deposited[_contributor] = 0;\n', '    _contributor.transfer(depositedValue);\n', '    emit Refunded(_contributor, depositedValue);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title CutdownToken\n', ' * @dev Some ERC20 interface methods used in this contract\n', ' */\n', 'contract CutdownToken {\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title Parity PICOPS Whitelist\n', ' */\n', 'contract PICOPSCertifier {\n', '    function certified(address) public constant returns (bool);\n', '}\n', '\n', '/**\n', ' * @title DigitizeCoinPresale\n', ' * @dev Desired amount of DigitizeCoin tokens for this sale must be allocated \n', ' * to this contract address prior to the sale start\n', ' */\n', 'contract DigitizeCoinPresale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  // token being sold\n', '  CutdownToken public token;\n', '  // KYC\n', '  PICOPSCertifier public picopsCertifier;\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault public vault;\n', '\n', '  // start and end timestamps where contributions are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '  uint256 public softCap;\n', '  bool public hardCapReached;\n', '\n', '  mapping(address => bool) public whitelist;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public constant rate = 6667;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  // amount of total contribution for each address\n', '  mapping(address => uint256) public contributed;\n', '\n', '  // minimum amount of ether allowed, inclusive\n', '  uint256 public constant minContribution = 0.1 ether;\n', '\n', '  // maximum contribution without KYC, exclusive\n', '  uint256 public constant maxAnonymousContribution = 5 ether;\n', '\n', '  /**\n', '   * Custom events\n', '   */\n', '  event TokenPurchase(address indexed _purchaser, uint256 _value, uint256 _tokens);\n', '  event PicopsCertifierUpdated(address indexed _oldCertifier, address indexed _newCertifier);\n', '  event AddedToWhitelist(address indexed _who);\n', '  event RemovedFromWhitelist(address indexed _who);\n', '  event WithdrawnERC20Tokens(address indexed _tokenContract, address indexed _owner, uint256 _balance);\n', '  event WithdrawnEther(address indexed _owner, uint256 _balance);\n', '\n', '  // constructor\n', '  function DigitizeCoinPresale(uint256 _startTime, uint256 _durationInDays, \n', '    uint256 _softCap, address _wallet, CutdownToken _token, address _picops) public {\n', '    bool validTimes = _startTime >= now && _durationInDays > 0;\n', '    bool validAddresses = _wallet != address(0) && _token != address(0) && _picops != address(0);\n', '    require(validTimes && validAddresses);\n', '\n', '    owner = msg.sender;\n', '    startTime = _startTime;\n', '    endTime = _startTime + (_durationInDays * 1 days);\n', '    softCap = _softCap;\n', '    token = _token;\n', '    vault = new RefundVault(_wallet);\n', '    picopsCertifier = PICOPSCertifier(_picops);\n', '  }\n', '\n', '  // fallback function used to buy tokens\n', '  function () external payable {\n', '    require(validPurchase());\n', '\n', '    address purchaser = msg.sender;\n', '    uint256 weiAmount = msg.value;\n', '    uint256 chargedWeiAmount = weiAmount;\n', '    uint256 tokensAmount = weiAmount.mul(rate);\n', '    uint256 tokensDue = tokensAmount;\n', '    uint256 tokensLeft = token.balanceOf(address(this));\n', '\n', '    // if sending more then available, allocate all tokens and refund the rest of ether\n', '    if(tokensAmount > tokensLeft) {\n', '      chargedWeiAmount = tokensLeft.div(rate);\n', '      tokensDue = tokensLeft;\n', '      hardCapReached = true;\n', '    } else if(tokensAmount == tokensLeft) {\n', '      hardCapReached = true;\n', '    }\n', '\n', '    weiRaised = weiRaised.add(chargedWeiAmount);\n', '    contributed[purchaser] = contributed[purchaser].add(chargedWeiAmount);\n', '    token.transfer(purchaser, tokensDue);\n', '\n', '    // refund if appropriate\n', '    if(chargedWeiAmount < weiAmount) {\n', '      purchaser.transfer(weiAmount - chargedWeiAmount);\n', '    }\n', '    emit TokenPurchase(purchaser, chargedWeiAmount, tokensDue);\n', '\n', '    // forward funds to vault\n', '    vault.deposit.value(chargedWeiAmount)(purchaser);\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether funding soft cap was reached. \n', '   * @return Whether funding soft cap was reached\n', '   */\n', '  function softCapReached() public view returns (bool) {\n', '    return weiRaised >= softCap;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime || hardCapReached;\n', '  }\n', '\n', '  function hasStarted() public view returns (bool) {\n', '    return now >= startTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Contributors can claim refunds here if crowdsale is unsuccessful\n', '   */\n', '  function claimRefund() public {\n', '    require(hasEnded() && !softCapReached());\n', '\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev vault finalization task, called when owner calls finalize()\n', '   */\n', '  function finalize() public onlyOwner {\n', '    require(hasEnded());\n', '\n', '    if (softCapReached()) {\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = hasStarted() && !hasEnded();\n', '    bool validContribution = msg.value >= minContribution;\n', '    bool passKyc = picopsCertifier.certified(msg.sender);\n', '    //check if contributor can possibly go over anonymous contibution limit\n', '    bool anonymousAllowed = contributed[msg.sender].add(msg.value) < maxAnonymousContribution;\n', '    bool allowedKyc = passKyc || anonymousAllowed;\n', '    return withinPeriod && validContribution && allowedKyc;\n', '  }\n', '\n', '  // ability to set new certifier even after the sale started\n', '  function setPicopsCertifier(address _picopsCertifier) onlyOwner public  {\n', '    require(_picopsCertifier != address(picopsCertifier));\n', '    emit PicopsCertifierUpdated(address(picopsCertifier), _picopsCertifier);\n', '    picopsCertifier = PICOPSCertifier(_picopsCertifier);\n', '  }\n', '\n', '  function passedKYC(address _wallet) view public returns (bool) {\n', '    return picopsCertifier.certified(_wallet);\n', '  }\n', '\n', '  // ability to add to whitelist even after the sale started\n', '  function addToWhitelist(address[] _wallets) public onlyOwner {\n', '    for (uint i = 0; i < _wallets.length; i++) {\n', '      whitelist[_wallets[i]] = true;\n', '      emit AddedToWhitelist(_wallets[i]);\n', '    }\n', '  }\n', '\n', '  // ability to remove from whitelist even after the sale started\n', '  function removeFromWhitelist(address[] _wallets) public onlyOwner {\n', '    for (uint i = 0; i < _wallets.length; i++) {\n', '      whitelist[_wallets[i]] = false;\n', '      emit RemovedFromWhitelist(_wallets[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Allows to transfer out the ether balance that was forced into this contract, e.g with `selfdestruct`\n', '   */\n', '  function withdrawEther() onlyOwner public {\n', '    require(hasEnded());\n', '    uint256 totalBalance = address(this).balance;\n', '    require(totalBalance > 0);\n', '    owner.transfer(totalBalance);\n', '    emit WithdrawnEther(owner, totalBalance);\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows to transfer out the balance of arbitrary ERC20 tokens from the contract.\n', '   * @param _token The contract address of the ERC20 token.\n', '   */\n', '  function withdrawERC20Tokens(CutdownToken _token) onlyOwner public {\n', '    require(hasEnded());\n', '    uint256 totalBalance = _token.balanceOf(address(this));\n', '    require(totalBalance > 0);\n', '    _token.transfer(owner, totalBalance);\n', '    emit WithdrawnERC20Tokens(address(_token), owner, totalBalance);\n', '  }\n', '}']
['pragma solidity 0.4.21;\n', '\n', '// ----------------------------------------------------------------------------\n', "// 'Digitize Coin Presale' contract: https://digitizecoin.com \n", '//\n', '// Digitize Coin - DTZ: 0x664e6db4044f23c95de63ec299aaa9b39c59328d\n', '// SoftCap: 600 ether\n', '// HardCap: 4000 ether - 26668000 tokens\n', '// Tokens per 1 ether: 6667\n', '// KYC: PICOPS https://picops.parity.io\n', '//\n', '// (c) Radek Ostrowski / http://startonchain.com - The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '    owner = _newOwner;\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0);\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', "// RefundVault for 'Digitize Coin' project imported from:\n", '// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/crowdsale/distribution/utils/RefundVault.sol\n', '//\n', '// Radek Ostrowski / http://startonchain.com / https://digitizecoin.com \n', '// ----------------------------------------------------------------------------\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it to destination wallet if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed _beneficiary, uint256 _weiAmount);\n', '\n', '  /**\n', '   * @param _wallet Final vault address\n', '   */\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  /**\n', '   * @param _contributor Contributor address\n', '   */\n', '  function deposit(address _contributor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[_contributor] = deposited[_contributor].add(msg.value); \n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    emit Closed();\n', '    wallet.transfer(address(this).balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    emit RefundsEnabled();\n', '  }\n', '\n', '  /**\n', '   * @param _contributor Contributor address\n', '   */\n', '  function refund(address _contributor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[_contributor];\n', '    require(depositedValue > 0);\n', '    deposited[_contributor] = 0;\n', '    _contributor.transfer(depositedValue);\n', '    emit Refunded(_contributor, depositedValue);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title CutdownToken\n', ' * @dev Some ERC20 interface methods used in this contract\n', ' */\n', 'contract CutdownToken {\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title Parity PICOPS Whitelist\n', ' */\n', 'contract PICOPSCertifier {\n', '    function certified(address) public constant returns (bool);\n', '}\n', '\n', '/**\n', ' * @title DigitizeCoinPresale\n', ' * @dev Desired amount of DigitizeCoin tokens for this sale must be allocated \n', ' * to this contract address prior to the sale start\n', ' */\n', 'contract DigitizeCoinPresale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  // token being sold\n', '  CutdownToken public token;\n', '  // KYC\n', '  PICOPSCertifier public picopsCertifier;\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault public vault;\n', '\n', '  // start and end timestamps where contributions are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '  uint256 public softCap;\n', '  bool public hardCapReached;\n', '\n', '  mapping(address => bool) public whitelist;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public constant rate = 6667;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  // amount of total contribution for each address\n', '  mapping(address => uint256) public contributed;\n', '\n', '  // minimum amount of ether allowed, inclusive\n', '  uint256 public constant minContribution = 0.1 ether;\n', '\n', '  // maximum contribution without KYC, exclusive\n', '  uint256 public constant maxAnonymousContribution = 5 ether;\n', '\n', '  /**\n', '   * Custom events\n', '   */\n', '  event TokenPurchase(address indexed _purchaser, uint256 _value, uint256 _tokens);\n', '  event PicopsCertifierUpdated(address indexed _oldCertifier, address indexed _newCertifier);\n', '  event AddedToWhitelist(address indexed _who);\n', '  event RemovedFromWhitelist(address indexed _who);\n', '  event WithdrawnERC20Tokens(address indexed _tokenContract, address indexed _owner, uint256 _balance);\n', '  event WithdrawnEther(address indexed _owner, uint256 _balance);\n', '\n', '  // constructor\n', '  function DigitizeCoinPresale(uint256 _startTime, uint256 _durationInDays, \n', '    uint256 _softCap, address _wallet, CutdownToken _token, address _picops) public {\n', '    bool validTimes = _startTime >= now && _durationInDays > 0;\n', '    bool validAddresses = _wallet != address(0) && _token != address(0) && _picops != address(0);\n', '    require(validTimes && validAddresses);\n', '\n', '    owner = msg.sender;\n', '    startTime = _startTime;\n', '    endTime = _startTime + (_durationInDays * 1 days);\n', '    softCap = _softCap;\n', '    token = _token;\n', '    vault = new RefundVault(_wallet);\n', '    picopsCertifier = PICOPSCertifier(_picops);\n', '  }\n', '\n', '  // fallback function used to buy tokens\n', '  function () external payable {\n', '    require(validPurchase());\n', '\n', '    address purchaser = msg.sender;\n', '    uint256 weiAmount = msg.value;\n', '    uint256 chargedWeiAmount = weiAmount;\n', '    uint256 tokensAmount = weiAmount.mul(rate);\n', '    uint256 tokensDue = tokensAmount;\n', '    uint256 tokensLeft = token.balanceOf(address(this));\n', '\n', '    // if sending more then available, allocate all tokens and refund the rest of ether\n', '    if(tokensAmount > tokensLeft) {\n', '      chargedWeiAmount = tokensLeft.div(rate);\n', '      tokensDue = tokensLeft;\n', '      hardCapReached = true;\n', '    } else if(tokensAmount == tokensLeft) {\n', '      hardCapReached = true;\n', '    }\n', '\n', '    weiRaised = weiRaised.add(chargedWeiAmount);\n', '    contributed[purchaser] = contributed[purchaser].add(chargedWeiAmount);\n', '    token.transfer(purchaser, tokensDue);\n', '\n', '    // refund if appropriate\n', '    if(chargedWeiAmount < weiAmount) {\n', '      purchaser.transfer(weiAmount - chargedWeiAmount);\n', '    }\n', '    emit TokenPurchase(purchaser, chargedWeiAmount, tokensDue);\n', '\n', '    // forward funds to vault\n', '    vault.deposit.value(chargedWeiAmount)(purchaser);\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether funding soft cap was reached. \n', '   * @return Whether funding soft cap was reached\n', '   */\n', '  function softCapReached() public view returns (bool) {\n', '    return weiRaised >= softCap;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime || hardCapReached;\n', '  }\n', '\n', '  function hasStarted() public view returns (bool) {\n', '    return now >= startTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Contributors can claim refunds here if crowdsale is unsuccessful\n', '   */\n', '  function claimRefund() public {\n', '    require(hasEnded() && !softCapReached());\n', '\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev vault finalization task, called when owner calls finalize()\n', '   */\n', '  function finalize() public onlyOwner {\n', '    require(hasEnded());\n', '\n', '    if (softCapReached()) {\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = hasStarted() && !hasEnded();\n', '    bool validContribution = msg.value >= minContribution;\n', '    bool passKyc = picopsCertifier.certified(msg.sender);\n', '    //check if contributor can possibly go over anonymous contibution limit\n', '    bool anonymousAllowed = contributed[msg.sender].add(msg.value) < maxAnonymousContribution;\n', '    bool allowedKyc = passKyc || anonymousAllowed;\n', '    return withinPeriod && validContribution && allowedKyc;\n', '  }\n', '\n', '  // ability to set new certifier even after the sale started\n', '  function setPicopsCertifier(address _picopsCertifier) onlyOwner public  {\n', '    require(_picopsCertifier != address(picopsCertifier));\n', '    emit PicopsCertifierUpdated(address(picopsCertifier), _picopsCertifier);\n', '    picopsCertifier = PICOPSCertifier(_picopsCertifier);\n', '  }\n', '\n', '  function passedKYC(address _wallet) view public returns (bool) {\n', '    return picopsCertifier.certified(_wallet);\n', '  }\n', '\n', '  // ability to add to whitelist even after the sale started\n', '  function addToWhitelist(address[] _wallets) public onlyOwner {\n', '    for (uint i = 0; i < _wallets.length; i++) {\n', '      whitelist[_wallets[i]] = true;\n', '      emit AddedToWhitelist(_wallets[i]);\n', '    }\n', '  }\n', '\n', '  // ability to remove from whitelist even after the sale started\n', '  function removeFromWhitelist(address[] _wallets) public onlyOwner {\n', '    for (uint i = 0; i < _wallets.length; i++) {\n', '      whitelist[_wallets[i]] = false;\n', '      emit RemovedFromWhitelist(_wallets[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Allows to transfer out the ether balance that was forced into this contract, e.g with `selfdestruct`\n', '   */\n', '  function withdrawEther() onlyOwner public {\n', '    require(hasEnded());\n', '    uint256 totalBalance = address(this).balance;\n', '    require(totalBalance > 0);\n', '    owner.transfer(totalBalance);\n', '    emit WithdrawnEther(owner, totalBalance);\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows to transfer out the balance of arbitrary ERC20 tokens from the contract.\n', '   * @param _token The contract address of the ERC20 token.\n', '   */\n', '  function withdrawERC20Tokens(CutdownToken _token) onlyOwner public {\n', '    require(hasEnded());\n', '    uint256 totalBalance = _token.balanceOf(address(this));\n', '    require(totalBalance > 0);\n', '    _token.transfer(owner, totalBalance);\n', '    emit WithdrawnERC20Tokens(address(_token), owner, totalBalance);\n', '  }\n', '}']
