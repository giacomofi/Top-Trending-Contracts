['pragma solidity 0.4.24;\n', '\n', '// File: node_modules/@tokenfoundry/sale-contracts/contracts/interfaces/VaultI.sol\n', '\n', 'interface VaultI {\n', '    function deposit(address contributor) external payable;\n', '    function saleSuccessful() external;\n', '    function enableRefunds() external;\n', '    function refund(address contributor) external;\n', '    function close() external;\n', '    function sendFundsToWallet() external;\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/Math.sol\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: node_modules/@tokenfoundry/sale-contracts/contracts/Vault.sol\n', '\n', '// Adapted from Open Zeppelin&#39;s RefundVault\n', '\n', '/**\n', ' * @title Vault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract Vault is VaultI, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    enum State { Active, Success, Refunding, Closed }\n', '\n', '    // The timestamp of the first deposit\n', '    uint256 public firstDepositTimestamp; \n', '\n', '    mapping (address => uint256) public deposited;\n', '\n', '    // The amount to be disbursed to the wallet every month\n', '    uint256 public disbursementWei;\n', '    uint256 public disbursementDuration;\n', '\n', '    // Wallet from the project team\n', '    address public trustedWallet;\n', '\n', '    // The eth amount the team will get initially if the sale is successful\n', '    uint256 public initialWei;\n', '\n', '    // Timestamp that has to pass before sending funds to the wallet\n', '    uint256 public nextDisbursement;\n', '    \n', '    // Total amount that was deposited\n', '    uint256 public totalDeposited;\n', '\n', '    // Amount that can be refunded\n', '    uint256 public refundable;\n', '\n', '    State public state;\n', '\n', '    event Closed();\n', '    event RefundsEnabled();\n', '    event Refunded(address indexed contributor, uint256 amount);\n', '\n', '    modifier atState(State _state) {\n', '        require(state == _state);\n', '        _;\n', '    }\n', '\n', '    constructor (\n', '        address _wallet,\n', '        uint256 _initialWei,\n', '        uint256 _disbursementWei,\n', '        uint256 _disbursementDuration\n', '    ) \n', '        public \n', '    {\n', '        require(_wallet != address(0));\n', '        require(_disbursementWei != 0);\n', '        trustedWallet = _wallet;\n', '        initialWei = _initialWei;\n', '        disbursementWei = _disbursementWei;\n', '        disbursementDuration = _disbursementDuration;\n', '        state = State.Active;\n', '    }\n', '\n', '    /// @dev Called by the sale contract to deposit ether for a contributor.\n', '    function deposit(address _contributor) onlyOwner external payable {\n', '        require(state == State.Active || state == State.Success);\n', '        if (firstDepositTimestamp == 0) {\n', '            firstDepositTimestamp = now;\n', '        }\n', '        totalDeposited = totalDeposited.add(msg.value);\n', '        deposited[_contributor] = deposited[_contributor].add(msg.value);\n', '    }\n', '\n', '    /// @dev Sends initial funds to the wallet.\n', '    function saleSuccessful()\n', '        onlyOwner \n', '        external \n', '        atState(State.Active)\n', '    {\n', '        state = State.Success;\n', '        transferToWallet(initialWei);\n', '    }\n', '\n', '    /// @dev Called by the owner if the project didn&#39;t deliver the testnet contracts or if we need to stop disbursements for any reasone.\n', '    function enableRefunds() onlyOwner external {\n', '        require(state != State.Refunding);\n', '        state = State.Refunding;\n', '        uint256 currentBalance = address(this).balance;\n', '        refundable = currentBalance <= totalDeposited ? currentBalance : totalDeposited;\n', '        emit RefundsEnabled();\n', '    }\n', '\n', '    /// @dev Refunds ether to the contributors if in the Refunding state.\n', '    function refund(address _contributor) external atState(State.Refunding) {\n', '        require(deposited[_contributor] > 0);\n', '        uint256 refundAmount = deposited[_contributor].mul(refundable).div(totalDeposited);\n', '        deposited[_contributor] = 0;\n', '        _contributor.transfer(refundAmount);\n', '        emit Refunded(_contributor, refundAmount);\n', '    }\n', '\n', '    /// @dev Called by the owner if the sale has ended.\n', '    function close() external atState(State.Success) onlyOwner {\n', '        state = State.Closed;\n', '        nextDisbursement = now;\n', '        emit Closed();\n', '    }\n', '\n', '    /// @dev Sends the disbursement amount to the wallet after the disbursement period has passed. Can be called by anyone.\n', '    function sendFundsToWallet() external atState(State.Closed) {\n', '        require(nextDisbursement <= now);\n', '\n', '        if (disbursementDuration == 0) {\n', '            trustedWallet.transfer(address(this).balance);\n', '            return;\n', '        }\n', '\n', '        uint256 numberOfDisbursements = now.sub(nextDisbursement).div(disbursementDuration).add(1);\n', '\n', '        nextDisbursement = nextDisbursement.add(disbursementDuration.mul(numberOfDisbursements));\n', '\n', '        transferToWallet(disbursementWei.mul(numberOfDisbursements));\n', '    }\n', '\n', '    function transferToWallet(uint256 _amount) internal {\n', '        uint256 amountToSend = Math.min256(_amount, address(this).balance);\n', '        trustedWallet.transfer(amountToSend);\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '// File: node_modules/@tokenfoundry/sale-contracts/contracts/interfaces/VaultI.sol\n', '\n', 'interface VaultI {\n', '    function deposit(address contributor) external payable;\n', '    function saleSuccessful() external;\n', '    function enableRefunds() external;\n', '    function refund(address contributor) external;\n', '    function close() external;\n', '    function sendFundsToWallet() external;\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/Math.sol\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: node_modules/@tokenfoundry/sale-contracts/contracts/Vault.sol\n', '\n', "// Adapted from Open Zeppelin's RefundVault\n", '\n', '/**\n', ' * @title Vault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract Vault is VaultI, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    enum State { Active, Success, Refunding, Closed }\n', '\n', '    // The timestamp of the first deposit\n', '    uint256 public firstDepositTimestamp; \n', '\n', '    mapping (address => uint256) public deposited;\n', '\n', '    // The amount to be disbursed to the wallet every month\n', '    uint256 public disbursementWei;\n', '    uint256 public disbursementDuration;\n', '\n', '    // Wallet from the project team\n', '    address public trustedWallet;\n', '\n', '    // The eth amount the team will get initially if the sale is successful\n', '    uint256 public initialWei;\n', '\n', '    // Timestamp that has to pass before sending funds to the wallet\n', '    uint256 public nextDisbursement;\n', '    \n', '    // Total amount that was deposited\n', '    uint256 public totalDeposited;\n', '\n', '    // Amount that can be refunded\n', '    uint256 public refundable;\n', '\n', '    State public state;\n', '\n', '    event Closed();\n', '    event RefundsEnabled();\n', '    event Refunded(address indexed contributor, uint256 amount);\n', '\n', '    modifier atState(State _state) {\n', '        require(state == _state);\n', '        _;\n', '    }\n', '\n', '    constructor (\n', '        address _wallet,\n', '        uint256 _initialWei,\n', '        uint256 _disbursementWei,\n', '        uint256 _disbursementDuration\n', '    ) \n', '        public \n', '    {\n', '        require(_wallet != address(0));\n', '        require(_disbursementWei != 0);\n', '        trustedWallet = _wallet;\n', '        initialWei = _initialWei;\n', '        disbursementWei = _disbursementWei;\n', '        disbursementDuration = _disbursementDuration;\n', '        state = State.Active;\n', '    }\n', '\n', '    /// @dev Called by the sale contract to deposit ether for a contributor.\n', '    function deposit(address _contributor) onlyOwner external payable {\n', '        require(state == State.Active || state == State.Success);\n', '        if (firstDepositTimestamp == 0) {\n', '            firstDepositTimestamp = now;\n', '        }\n', '        totalDeposited = totalDeposited.add(msg.value);\n', '        deposited[_contributor] = deposited[_contributor].add(msg.value);\n', '    }\n', '\n', '    /// @dev Sends initial funds to the wallet.\n', '    function saleSuccessful()\n', '        onlyOwner \n', '        external \n', '        atState(State.Active)\n', '    {\n', '        state = State.Success;\n', '        transferToWallet(initialWei);\n', '    }\n', '\n', "    /// @dev Called by the owner if the project didn't deliver the testnet contracts or if we need to stop disbursements for any reasone.\n", '    function enableRefunds() onlyOwner external {\n', '        require(state != State.Refunding);\n', '        state = State.Refunding;\n', '        uint256 currentBalance = address(this).balance;\n', '        refundable = currentBalance <= totalDeposited ? currentBalance : totalDeposited;\n', '        emit RefundsEnabled();\n', '    }\n', '\n', '    /// @dev Refunds ether to the contributors if in the Refunding state.\n', '    function refund(address _contributor) external atState(State.Refunding) {\n', '        require(deposited[_contributor] > 0);\n', '        uint256 refundAmount = deposited[_contributor].mul(refundable).div(totalDeposited);\n', '        deposited[_contributor] = 0;\n', '        _contributor.transfer(refundAmount);\n', '        emit Refunded(_contributor, refundAmount);\n', '    }\n', '\n', '    /// @dev Called by the owner if the sale has ended.\n', '    function close() external atState(State.Success) onlyOwner {\n', '        state = State.Closed;\n', '        nextDisbursement = now;\n', '        emit Closed();\n', '    }\n', '\n', '    /// @dev Sends the disbursement amount to the wallet after the disbursement period has passed. Can be called by anyone.\n', '    function sendFundsToWallet() external atState(State.Closed) {\n', '        require(nextDisbursement <= now);\n', '\n', '        if (disbursementDuration == 0) {\n', '            trustedWallet.transfer(address(this).balance);\n', '            return;\n', '        }\n', '\n', '        uint256 numberOfDisbursements = now.sub(nextDisbursement).div(disbursementDuration).add(1);\n', '\n', '        nextDisbursement = nextDisbursement.add(disbursementDuration.mul(numberOfDisbursements));\n', '\n', '        transferToWallet(disbursementWei.mul(numberOfDisbursements));\n', '    }\n', '\n', '    function transferToWallet(uint256 _amount) internal {\n', '        uint256 amountToSend = Math.min256(_amount, address(this).balance);\n', '        trustedWallet.transfer(amountToSend);\n', '    }\n', '}']
