['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}   \n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/** \n', ' * @title Based on the &#39;final&#39; ERC20 token standard as specified at:\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md \n', ' */\n', 'contract ERC20Interface {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function name() public view returns (string);\n', '    function symbol() public view returns (string);\n', '    function decimals() public view returns (uint8);\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _owner) public view returns (uint256);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title TestToken\n', ' * @dev The TestToken contract provides the token functionality of the IPT Global token\n', ' * and allows the admin to distribute frozen tokens which requires defrosting to become transferable.\n', ' */\n', 'contract TestToken is ERC20Interface, Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    //Name of the token.\n', '    string  internal constant NAME = "Test Token";\n', '    \n', '    //Symbol of the token.\n', '    string  internal constant SYMBOL = "TEST";     \n', '    \n', '    //Granularity of the token.\n', '    uint8   internal constant DECIMALS = 8;        \n', '    \n', '    //Factor for numerical calculations.\n', '    uint256 internal constant DECIMALFACTOR = 10 ** uint(DECIMALS); \n', '    \n', '    //Total supply of IPT Global tokens.\n', '    uint256 internal constant TOTAL_SUPPLY = 300000000 * uint256(DECIMALFACTOR);  \n', '    \n', '    //Base defrosting value used to calculate fractional percentage of 0.2 %\n', '    uint8 internal constant standardDefrostingValue = 2;\n', '    \n', '    //Base defrosting numerator used to calculate fractional percentage of 0.2 %\n', '    uint8 internal constant standardDefrostingNumerator = 10;\n', '\n', '    \n', '    //Stores all frozen TEST Global token holders.\n', '    mapping(address => bool)    public frostbite;\n', '    \n', '    //Stores received frozen IPT Global tokens in an accumulated fashion. \n', '    mapping(address => uint256) public frozenTokensReceived;\n', '    \n', '    //Stores and tracks frozen IPT Global token balances.\n', '    mapping(address => uint256) public frozenBalance;\n', '    \n', '    //Stores custom frozen IPT Global token defrosting % rates. \n', '    mapping(address => uint8) public customDefrostingRate;\n', '    \n', '    //Stores the balance of IPT Global holders (complies with ERC-Standard).\n', '    mapping(address => uint256) internal balances; \n', '    \n', '    //Stores any allowances given to other IPT Global holders.\n', '    mapping(address => mapping(address => uint256)) internal allowed; \n', '    \n', '    \n', '    //Event which allows for logging of frostbite granting activities.\n', '    event FrostbiteGranted(\n', '        address recipient, \n', '        uint256 frozenAmount, \n', '        uint256 defrostingRate);\n', '    \n', '    //Event which allows for logging of frostbite terminating activities.\n', '    event FrostBiteTerminated(\n', '        address recipient,\n', '        uint256 frozenBalance);\n', '    \n', '    //Event which allows for logging of frozen token transfer activities.\n', '    event FrozenTokensTransferred(\n', '        address owner, \n', '        address recipient, \n', '        uint256 frozenAmount, \n', '        uint256 defrostingRate);\n', '    \n', '    //Event which allows for logging of custom frozen token defrosting activities.   \n', '    event CustomTokenDefrosting(\n', '        address owner,\n', '        uint256 percentage,\n', '        uint256 defrostedAmount);\n', '        \n', '    //Event which allows for logging of calculated frozen token defrosting activities.   \n', '    event CalculatedTokenDefrosting(\n', '        address owner,\n', '        uint256 defrostedAmount);\n', '    \n', '    //Event which allows for logging of complete recipient recovery activities.\n', '    event RecipientRecovered(\n', '        address recipient,\n', '        uint256 customDefrostingRate,\n', '        uint256 frozenBalance,\n', '        bool frostbite);\n', '     \n', '    //Event which allows for logging of recipient balance recovery activities.   \n', '    event FrozenBalanceDefrosted(\n', '        address recipient,\n', '        uint256 frozenBalance,\n', '        bool frostbite);\n', '    \n', '    //Event which allows for logging of defrostingrate-adjusting activities.\n', '    event DefrostingRateChanged(\n', '        address recipient,\n', '        uint256 defrostingRate);\n', '        \n', '    //Event which allows for logging of frozenBalance-adjusting activities.\n', '    event FrozenBalanceChanged(\n', '        address recipient, \n', '        uint256 defrostedAmount);\n', '    \n', '    \n', '    /**\n', '     * @dev constructor sets initialises and configurates the smart contract.\n', '     * More specifically, it grants the smart contract owner the total supply\n', '     * of IPT Global tokens.\n', '     */\n', '    constructor() public {\n', '        balances[msg.sender] = TOTAL_SUPPLY;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev frozenTokenTransfer function allows the owner of the smart contract to Transfer\n', '     * frozen tokens (untransferable till melted) to a particular recipient.\n', '     * @param _recipient the address which will receive the frozen tokens.\n', '     * @param _frozenAmount the value which will be sent to the _recipient.\n', '     * @param _customDefrostingRate the rate at which the tokens will be melted.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function frozenTokenTransfer(address _recipient, uint256 _frozenAmount, uint8 _customDefrostingRate) external onlyOwner returns (bool) {\n', '        require(_recipient != address(0));\n', '        require(_frozenAmount <= balances[msg.sender]);\n', '        \n', '        frozenTokensReceived[_recipient] = _frozenAmount;\n', '               frozenBalance[_recipient] = _frozenAmount;\n', '        customDefrostingRate[_recipient] = _customDefrostingRate;\n', '                   frostbite[_recipient] = true;\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_frozenAmount);\n', '        balances[_recipient] = balances[_recipient].add(_frozenAmount);\n', '        \n', '        emit FrozenTokensTransferred(msg.sender, _recipient, _frozenAmount, customDefrostingRate[_recipient]);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev changeCustomDefrostingRate function allows the owner of the smart contract to change individual custom defrosting rates.\n', '     * @param _recipient the address whose defrostingRate will be adjusted.\n', '     * @param _newCustomDefrostingRate the new defrosting rate which will be placed on the recipient.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function changeCustomDefrostingRate(address _recipient, uint8 _newCustomDefrostingRate) external onlyOwner returns (bool) {\n', '        require(_recipient != address(0));\n', '        require(frostbite[_recipient]);\n', '        \n', '        customDefrostingRate[_recipient] = _newCustomDefrostingRate;\n', '        \n', '        emit DefrostingRateChanged(_recipient, _newCustomDefrostingRate);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev changeFrozenBalance function allows the owner of the smart contract to change individual particular frozen balances.\n', '     * @param _recipient the address whose defrostingRate will be adjusted.\n', '     * @param _defrostedAmount the defrosted/subtracted amount of an existing particular frozen balance..\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function changeFrozenBalance(address _recipient, uint256 _defrostedAmount) external onlyOwner returns (bool) {\n', '        require(_recipient != address(0));\n', '        require(_defrostedAmount <= frozenBalance[_recipient]);\n', '        require(frostbite[_recipient]);\n', '        \n', '        frozenBalance[_recipient] = frozenBalance[_recipient].sub(_defrostedAmount);\n', '        \n', '        emit FrozenBalanceChanged(_recipient, _defrostedAmount);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev removeFrozenTokenConfigurations function allows the owner of the smart contract to remove all \n', '     * frostbites, frozenbalances and defrosting rates of an array of recipient addresses < 50.\n', '     * @param _recipients the address(es) which will be recovered.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function removeFrozenTokenConfigurations(address[] _recipients) external onlyOwner returns (bool) {\n', '        \n', '        for (uint256 i = 0; i < _recipients.length; i++) {\n', '            if (frostbite[_recipients[i]]) {\n', '                customDefrostingRate[_recipients[i]] = 0;\n', '                       frozenBalance[_recipients[i]] = 0;\n', '                           frostbite[_recipients[i]] = false;\n', '                \n', '                emit RecipientRecovered(_recipients[i], customDefrostingRate[_recipients[i]], frozenBalance[_recipients[i]], false);\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev standardTokenDefrosting function allows the owner of the smart contract to defrost\n', '     * frozen tokens based on a base defrosting Rate of 0.2 % (from multiple recipients at once if desired) of particular recipient addresses < 50.\n', '     * @param _recipients the address(es) which will receive defrosting of frozen tokens.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function standardTokenDefrosting(address[] _recipients) external onlyOwner returns (bool) {\n', '        \n', '        for (uint256 i = 0; i < _recipients.length; i++) {\n', '            if (frostbite[_recipients[i]]) {\n', '                uint256 defrostedAmount = (frozenTokensReceived[_recipients[i]].mul(standardDefrostingValue).div(standardDefrostingNumerator)).div(100);\n', '                \n', '                frozenBalance[_recipients[i]] = frozenBalance[_recipients[i]].sub(defrostedAmount);\n', '                \n', '                emit CalculatedTokenDefrosting(msg.sender, defrostedAmount);\n', '            }\n', '            if (frozenBalance[_recipients[i]] == 0) {\n', '                         frostbite[_recipients[i]] = false;\n', '                         \n', '                emit FrozenBalanceDefrosted(_recipients[i], frozenBalance[_recipients[i]], false);\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev customTokenDefrosting function allows the owner of the smart contract to defrost\n', '     * frozen tokens based on custom defrosting Rates (from multiple recipients at once if desired) of particular recipient addresses < 50.\n', '     * @param _recipients the address(es) which will receive defrosting of frozen tokens.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function customTokenDefrosting(address[] _recipients) external onlyOwner returns (bool) {\n', '        \n', '        for (uint256 i = 0; i < _recipients.length; i++) {\n', '            if (frostbite[_recipients[i]]) {\n', '                uint256 defrostedAmount = (frozenTokensReceived[_recipients[i]].mul(customDefrostingRate[_recipients[i]])).div(100);\n', '                \n', '                frozenBalance[_recipients[i]] = frozenBalance[_recipients[i]].sub(defrostedAmount);\n', '               \n', '                emit CustomTokenDefrosting(msg.sender, customDefrostingRate[_recipients[i]], defrostedAmount);\n', '            }\n', '            if (frozenBalance[_recipients[i]] == 0) {\n', '                         frostbite[_recipients[i]] = false;\n', '                         \n', '                    emit FrozenBalanceDefrosted(_recipients[i], frozenBalance[_recipients[i]], false);\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        \n', '        if (frostbite[msg.sender]) {\n', '            require(_value <= balances[msg.sender].sub(frozenBalance[msg.sender]));\n', '        }\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '         \n', '    }\n', '    \n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        \n', '        if (frostbite[_from]) {\n', '            require(_value <= balances[_from].sub(frozenBalance[_from]));\n', '            require(_value <= allowed[_from][msg.sender]);\n', '        }\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev balanceOf function gets the balance of the specified address.\n', '     * @param _owner The address to query the balance of.\n', '     * @return An uint256 representing the token balance of the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '        \n', '    /**\n', '     * @dev allowance function checks the amount of tokens allowed by an owner for a spender to spend.\n', '     * @param _owner address is the address which owns the spendable funds.\n', '     * @param _spender address is the address which will spend the owned funds.\n', '     * @return A uint256 specifying the amount of tokens which are still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    /**\n', '     * @dev totalSupply function returns the total supply of tokens.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return TOTAL_SUPPLY;\n', '    }\n', '    \n', '    /** \n', '     * @dev decimals function returns the decimal units of the token. \n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return DECIMALS;\n', '    }\n', '            \n', '    /** \n', '     * @dev symbol function returns the symbol ticker of the token. \n', '     */\n', '    function symbol() public view returns (string) {\n', '        return SYMBOL;\n', '    }\n', '    \n', '    /** \n', '     * @dev name function returns the name of the token. \n', '     */\n', '    function name() public view returns (string) {\n', '        return NAME;\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}   \n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/** \n', " * @title Based on the 'final' ERC20 token standard as specified at:\n", ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md \n', ' */\n', 'contract ERC20Interface {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function name() public view returns (string);\n', '    function symbol() public view returns (string);\n', '    function decimals() public view returns (uint8);\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _owner) public view returns (uint256);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title TestToken\n', ' * @dev The TestToken contract provides the token functionality of the IPT Global token\n', ' * and allows the admin to distribute frozen tokens which requires defrosting to become transferable.\n', ' */\n', 'contract TestToken is ERC20Interface, Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    //Name of the token.\n', '    string  internal constant NAME = "Test Token";\n', '    \n', '    //Symbol of the token.\n', '    string  internal constant SYMBOL = "TEST";     \n', '    \n', '    //Granularity of the token.\n', '    uint8   internal constant DECIMALS = 8;        \n', '    \n', '    //Factor for numerical calculations.\n', '    uint256 internal constant DECIMALFACTOR = 10 ** uint(DECIMALS); \n', '    \n', '    //Total supply of IPT Global tokens.\n', '    uint256 internal constant TOTAL_SUPPLY = 300000000 * uint256(DECIMALFACTOR);  \n', '    \n', '    //Base defrosting value used to calculate fractional percentage of 0.2 %\n', '    uint8 internal constant standardDefrostingValue = 2;\n', '    \n', '    //Base defrosting numerator used to calculate fractional percentage of 0.2 %\n', '    uint8 internal constant standardDefrostingNumerator = 10;\n', '\n', '    \n', '    //Stores all frozen TEST Global token holders.\n', '    mapping(address => bool)    public frostbite;\n', '    \n', '    //Stores received frozen IPT Global tokens in an accumulated fashion. \n', '    mapping(address => uint256) public frozenTokensReceived;\n', '    \n', '    //Stores and tracks frozen IPT Global token balances.\n', '    mapping(address => uint256) public frozenBalance;\n', '    \n', '    //Stores custom frozen IPT Global token defrosting % rates. \n', '    mapping(address => uint8) public customDefrostingRate;\n', '    \n', '    //Stores the balance of IPT Global holders (complies with ERC-Standard).\n', '    mapping(address => uint256) internal balances; \n', '    \n', '    //Stores any allowances given to other IPT Global holders.\n', '    mapping(address => mapping(address => uint256)) internal allowed; \n', '    \n', '    \n', '    //Event which allows for logging of frostbite granting activities.\n', '    event FrostbiteGranted(\n', '        address recipient, \n', '        uint256 frozenAmount, \n', '        uint256 defrostingRate);\n', '    \n', '    //Event which allows for logging of frostbite terminating activities.\n', '    event FrostBiteTerminated(\n', '        address recipient,\n', '        uint256 frozenBalance);\n', '    \n', '    //Event which allows for logging of frozen token transfer activities.\n', '    event FrozenTokensTransferred(\n', '        address owner, \n', '        address recipient, \n', '        uint256 frozenAmount, \n', '        uint256 defrostingRate);\n', '    \n', '    //Event which allows for logging of custom frozen token defrosting activities.   \n', '    event CustomTokenDefrosting(\n', '        address owner,\n', '        uint256 percentage,\n', '        uint256 defrostedAmount);\n', '        \n', '    //Event which allows for logging of calculated frozen token defrosting activities.   \n', '    event CalculatedTokenDefrosting(\n', '        address owner,\n', '        uint256 defrostedAmount);\n', '    \n', '    //Event which allows for logging of complete recipient recovery activities.\n', '    event RecipientRecovered(\n', '        address recipient,\n', '        uint256 customDefrostingRate,\n', '        uint256 frozenBalance,\n', '        bool frostbite);\n', '     \n', '    //Event which allows for logging of recipient balance recovery activities.   \n', '    event FrozenBalanceDefrosted(\n', '        address recipient,\n', '        uint256 frozenBalance,\n', '        bool frostbite);\n', '    \n', '    //Event which allows for logging of defrostingrate-adjusting activities.\n', '    event DefrostingRateChanged(\n', '        address recipient,\n', '        uint256 defrostingRate);\n', '        \n', '    //Event which allows for logging of frozenBalance-adjusting activities.\n', '    event FrozenBalanceChanged(\n', '        address recipient, \n', '        uint256 defrostedAmount);\n', '    \n', '    \n', '    /**\n', '     * @dev constructor sets initialises and configurates the smart contract.\n', '     * More specifically, it grants the smart contract owner the total supply\n', '     * of IPT Global tokens.\n', '     */\n', '    constructor() public {\n', '        balances[msg.sender] = TOTAL_SUPPLY;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev frozenTokenTransfer function allows the owner of the smart contract to Transfer\n', '     * frozen tokens (untransferable till melted) to a particular recipient.\n', '     * @param _recipient the address which will receive the frozen tokens.\n', '     * @param _frozenAmount the value which will be sent to the _recipient.\n', '     * @param _customDefrostingRate the rate at which the tokens will be melted.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function frozenTokenTransfer(address _recipient, uint256 _frozenAmount, uint8 _customDefrostingRate) external onlyOwner returns (bool) {\n', '        require(_recipient != address(0));\n', '        require(_frozenAmount <= balances[msg.sender]);\n', '        \n', '        frozenTokensReceived[_recipient] = _frozenAmount;\n', '               frozenBalance[_recipient] = _frozenAmount;\n', '        customDefrostingRate[_recipient] = _customDefrostingRate;\n', '                   frostbite[_recipient] = true;\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_frozenAmount);\n', '        balances[_recipient] = balances[_recipient].add(_frozenAmount);\n', '        \n', '        emit FrozenTokensTransferred(msg.sender, _recipient, _frozenAmount, customDefrostingRate[_recipient]);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev changeCustomDefrostingRate function allows the owner of the smart contract to change individual custom defrosting rates.\n', '     * @param _recipient the address whose defrostingRate will be adjusted.\n', '     * @param _newCustomDefrostingRate the new defrosting rate which will be placed on the recipient.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function changeCustomDefrostingRate(address _recipient, uint8 _newCustomDefrostingRate) external onlyOwner returns (bool) {\n', '        require(_recipient != address(0));\n', '        require(frostbite[_recipient]);\n', '        \n', '        customDefrostingRate[_recipient] = _newCustomDefrostingRate;\n', '        \n', '        emit DefrostingRateChanged(_recipient, _newCustomDefrostingRate);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev changeFrozenBalance function allows the owner of the smart contract to change individual particular frozen balances.\n', '     * @param _recipient the address whose defrostingRate will be adjusted.\n', '     * @param _defrostedAmount the defrosted/subtracted amount of an existing particular frozen balance..\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function changeFrozenBalance(address _recipient, uint256 _defrostedAmount) external onlyOwner returns (bool) {\n', '        require(_recipient != address(0));\n', '        require(_defrostedAmount <= frozenBalance[_recipient]);\n', '        require(frostbite[_recipient]);\n', '        \n', '        frozenBalance[_recipient] = frozenBalance[_recipient].sub(_defrostedAmount);\n', '        \n', '        emit FrozenBalanceChanged(_recipient, _defrostedAmount);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev removeFrozenTokenConfigurations function allows the owner of the smart contract to remove all \n', '     * frostbites, frozenbalances and defrosting rates of an array of recipient addresses < 50.\n', '     * @param _recipients the address(es) which will be recovered.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function removeFrozenTokenConfigurations(address[] _recipients) external onlyOwner returns (bool) {\n', '        \n', '        for (uint256 i = 0; i < _recipients.length; i++) {\n', '            if (frostbite[_recipients[i]]) {\n', '                customDefrostingRate[_recipients[i]] = 0;\n', '                       frozenBalance[_recipients[i]] = 0;\n', '                           frostbite[_recipients[i]] = false;\n', '                \n', '                emit RecipientRecovered(_recipients[i], customDefrostingRate[_recipients[i]], frozenBalance[_recipients[i]], false);\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev standardTokenDefrosting function allows the owner of the smart contract to defrost\n', '     * frozen tokens based on a base defrosting Rate of 0.2 % (from multiple recipients at once if desired) of particular recipient addresses < 50.\n', '     * @param _recipients the address(es) which will receive defrosting of frozen tokens.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function standardTokenDefrosting(address[] _recipients) external onlyOwner returns (bool) {\n', '        \n', '        for (uint256 i = 0; i < _recipients.length; i++) {\n', '            if (frostbite[_recipients[i]]) {\n', '                uint256 defrostedAmount = (frozenTokensReceived[_recipients[i]].mul(standardDefrostingValue).div(standardDefrostingNumerator)).div(100);\n', '                \n', '                frozenBalance[_recipients[i]] = frozenBalance[_recipients[i]].sub(defrostedAmount);\n', '                \n', '                emit CalculatedTokenDefrosting(msg.sender, defrostedAmount);\n', '            }\n', '            if (frozenBalance[_recipients[i]] == 0) {\n', '                         frostbite[_recipients[i]] = false;\n', '                         \n', '                emit FrozenBalanceDefrosted(_recipients[i], frozenBalance[_recipients[i]], false);\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev customTokenDefrosting function allows the owner of the smart contract to defrost\n', '     * frozen tokens based on custom defrosting Rates (from multiple recipients at once if desired) of particular recipient addresses < 50.\n', '     * @param _recipients the address(es) which will receive defrosting of frozen tokens.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function customTokenDefrosting(address[] _recipients) external onlyOwner returns (bool) {\n', '        \n', '        for (uint256 i = 0; i < _recipients.length; i++) {\n', '            if (frostbite[_recipients[i]]) {\n', '                uint256 defrostedAmount = (frozenTokensReceived[_recipients[i]].mul(customDefrostingRate[_recipients[i]])).div(100);\n', '                \n', '                frozenBalance[_recipients[i]] = frozenBalance[_recipients[i]].sub(defrostedAmount);\n', '               \n', '                emit CustomTokenDefrosting(msg.sender, customDefrostingRate[_recipients[i]], defrostedAmount);\n', '            }\n', '            if (frozenBalance[_recipients[i]] == 0) {\n', '                         frostbite[_recipients[i]] = false;\n', '                         \n', '                    emit FrozenBalanceDefrosted(_recipients[i], frozenBalance[_recipients[i]], false);\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        \n', '        if (frostbite[msg.sender]) {\n', '            require(_value <= balances[msg.sender].sub(frozenBalance[msg.sender]));\n', '        }\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '         \n', '    }\n', '    \n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        \n', '        if (frostbite[_from]) {\n', '            require(_value <= balances[_from].sub(frozenBalance[_from]));\n', '            require(_value <= allowed[_from][msg.sender]);\n', '        }\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev balanceOf function gets the balance of the specified address.\n', '     * @param _owner The address to query the balance of.\n', '     * @return An uint256 representing the token balance of the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '        \n', '    /**\n', '     * @dev allowance function checks the amount of tokens allowed by an owner for a spender to spend.\n', '     * @param _owner address is the address which owns the spendable funds.\n', '     * @param _spender address is the address which will spend the owned funds.\n', '     * @return A uint256 specifying the amount of tokens which are still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    /**\n', '     * @dev totalSupply function returns the total supply of tokens.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return TOTAL_SUPPLY;\n', '    }\n', '    \n', '    /** \n', '     * @dev decimals function returns the decimal units of the token. \n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return DECIMALS;\n', '    }\n', '            \n', '    /** \n', '     * @dev symbol function returns the symbol ticker of the token. \n', '     */\n', '    function symbol() public view returns (string) {\n', '        return SYMBOL;\n', '    }\n', '    \n', '    /** \n', '     * @dev name function returns the name of the token. \n', '     */\n', '    function name() public view returns (string) {\n', '        return NAME;\n', '    }\n', '}']
