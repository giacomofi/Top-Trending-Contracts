['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title Reputation system\n', ' * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\n', ' * A reputation is use to assign influence measure to a DAO&#39;S peers.\n', ' * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.\n', ' * The Reputation contract maintain a map of address to reputation value.\n', ' * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.\n', ' */\n', '\n', 'contract Reputation is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    mapping (address => uint256) public balances;\n', '    uint256 public totalSupply;\n', '    uint public decimals = 18;\n', '\n', '    // Event indicating minting of reputation to an address.\n', '    event Mint(address indexed _to, uint256 _amount);\n', '    // Event indicating burning of reputation for an address.\n', '    event Burn(address indexed _from, uint256 _amount);\n', '\n', '    /**\n', '    * @dev return the reputation amount of a given owner\n', '    * @param _owner an address of the owner which we want to get his reputation\n', '    */\n', '    function reputationOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Generates `_amount` of reputation that are assigned to `_to`\n', '    * @param _to The address that will be assigned the new reputation\n', '    * @param _amount The quantity of reputation to be generated\n', '    * @return True if the reputation are generated correctly\n', '    */\n', '    function mint(address _to, uint _amount)\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '    {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Burns `_amount` of reputation from `_from`\n', '    * if _amount tokens to burn > balances[_from] the balance of _from will turn to zero.\n', '    * @param _from The address that will lose the reputation\n', '    * @param _amount The quantity of reputation to burn\n', '    * @return True if the reputation are burned correctly\n', '    */\n', '    function burn(address _from, uint _amount)\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '    {\n', '        uint amountMinted = _amount;\n', '        if (balances[_from] < _amount) {\n', '            amountMinted = balances[_from];\n', '        }\n', '        totalSupply = totalSupply.sub(amountMinted);\n', '        balances[_from] = balances[_from].sub(amountMinted);\n', '        emit Burn(_from, amountMinted);\n', '        return true;\n', '    }\n', '}']