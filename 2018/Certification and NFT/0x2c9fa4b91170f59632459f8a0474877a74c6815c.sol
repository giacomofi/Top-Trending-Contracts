['pragma solidity ^0.4.24; \n', '\n', 'interface IToken {\n', '  function name() external view returns(string);\n', '\n', '  function symbol() external view returns(string);\n', '\n', '  function decimals() external view returns(uint8);\n', '\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n', '\n', '  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n', '\n', '  function mint(address to, uint256 value) external returns (bool);\n', '\n', '  function burn(address from, uint256 value) external returns (bool);\n', '\n', '  function isMinter(address account) external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '\n', '  event Paused(address account);\n', '  event Unpaused(address account);\n', '}\n', ' /**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'library SafeERC20 {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  function safeTransfer(\n', '    IToken token,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    IToken token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(\n', '    IToken token,\n', '    address spender,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    // safeApprove should only be called when setting an initial allowance,\n', '    // or when resetting it to zero. To increase and decrease it, use\n', "    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '    require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n', '    require(token.approve(spender, value));\n', '  }\n', '\n', '  function safeIncreaseAllowance(\n', '    IToken token,\n', '    address spender,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '    require(token.approve(spender, newAllowance));\n', '  }\n', '\n', '  function safeDecreaseAllowance(\n', '    IToken token,\n', '    address spender,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '    require(token.approve(spender, newAllowance));\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract ReentrancyGuard {\n', '\n', '  /// @dev counter to allow mutex lock with only one SSTORE operation\n', '  uint256 private _guardCounter;\n', '\n', '  constructor() internal {\n', '    // The counter starts at one to prevent changing it from zero to a non-zero\n', '    // value, which is a more expensive operation.\n', '    _guardCounter = 1;\n', '  }\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * Calling a `nonReentrant` function from another `nonReentrant`\n', '   * function is not supported. It is possible to prevent this from happening\n', '   * by making the `nonReentrant` function external, and make it call a\n', '   * `private` function that does the actual work.\n', '   */\n', '  modifier nonReentrant() {\n', '    _guardCounter += 1;\n', '    uint256 localCounter = _guardCounter;\n', '    _;\n', '    require(localCounter == _guardCounter);\n', '  }\n', '\n', '}\n', '\n', 'contract Crowdsale is ReentrancyGuard {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for IToken;\n', '\n', '  // The token being sold\n', '  IToken private _token;\n', '\n', '  // Address where funds are collected\n', '  address private _wallet;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '  // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\n', '  // 1 wei will give you 1 unit, or 0.001 TOK.\n', '  uint256 private _rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 private _weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokensPurchased(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * @param rate Number of token units a buyer gets per wei\n', '   * @dev The rate is the conversion between wei and the smallest and indivisible\n', '   * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\n', '   * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\n', '   * @param wallet Address where collected funds will be forwarded to\n', '   * @param token Address of the token being sold\n', '   */\n', '  constructor(uint256 rate, address wallet, IToken token) internal {\n', '    require(rate > 0);\n', '    require(wallet != address(0));\n', '    require(token != address(0));\n', '\n', '    _rate = rate;\n', '    _wallet = wallet;\n', '    _token = token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   * Note that other contracts will transfer fund with a base gas stipend\n', '   * of 2300, which is not enough to call buyTokens. Consider calling\n', '   * buyTokens directly when purchasing tokens from a contract.\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @return the token being sold.\n', '   */\n', '  function token() public view returns(IToken) {\n', '    return _token;\n', '  }\n', '\n', '  /**\n', '   * @return the address where funds are collected.\n', '   */\n', '  function wallet() public view returns(address) {\n', '    return _wallet;\n', '  }\n', '\n', '  /**\n', '   * @return the number of token units a buyer gets per wei.\n', '   */\n', '  function rate() public view returns(uint256) {\n', '    return _rate;\n', '  }\n', '\n', '  /**\n', '   * @return the amount of wei raised.\n', '   */\n', '  function weiRaised() public view returns (uint256) {\n', '    return _weiRaised;\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', "   * This function has a non-reentrancy guard, so it shouldn't be called by\n", '   * another `nonReentrant` function.\n', '   * @param beneficiary Recipient of the token purchase\n', '   */\n', '  function buyTokens(address beneficiary) public nonReentrant payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    _weiRaised = _weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(beneficiary, tokens);\n', '    emit TokensPurchased(\n', '      msg.sender,\n', '      beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n', "   * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n", '   *   super._preValidatePurchase(beneficiary, weiAmount);\n', '   *   require(weiRaised().add(weiAmount) <= cap);\n', '   * @param beneficiary Address performing the token purchase\n', '   * @param weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(\n', '    address beneficiary,\n', '    uint256 weiAmount\n', '  )\n', '    internal\n', '    view\n', '  {\n', '    require(beneficiary != address(0));\n', '    require(weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param beneficiary Address performing the token purchase\n', '   * @param weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(\n', '    address beneficiary,\n', '    uint256 weiAmount\n', '  )\n', '    internal\n', '    view\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param beneficiary Address performing the token purchase\n', '   * @param tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address beneficiary,\n', '    uint256 tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _token.safeTransfer(beneficiary, tokenAmount);\n', '  }\n', '\n', '  /**\n', "   * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send tokens.\n", '   * @param beneficiary Address receiving the tokens\n', '   * @param tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address beneficiary,\n', '    uint256 tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(beneficiary, tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param beneficiary Address receiving the tokens\n', '   * @param weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(\n', '    address beneficiary,\n', '    uint256 weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 weiAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    return weiAmount.mul(_rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    _wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 private _cap;\n', '\n', '  /**\n', '   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n', '   * @param cap Max amount of wei to be contributed\n', '   */\n', '  constructor(uint256 cap) internal {\n', '    require(cap > 0);\n', '    _cap = cap;\n', '  }\n', '\n', '  /**\n', '   * @return the cap of the crowdsale.\n', '   */\n', '  function cap() public view returns(uint256) {\n', '    return _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the cap has been reached.\n', '   * @return Whether the cap was reached\n', '   */\n', '  function capReached() public view returns (bool) {\n', '    return weiRaised() >= _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring purchase to respect the funding cap.\n', '   * @param beneficiary Token purchaser\n', '   * @param weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address beneficiary,\n', '    uint256 weiAmount\n', '  )\n', '    internal\n', '    view\n', '  {\n', '    super._preValidatePurchase(beneficiary, weiAmount);\n', '    require(weiRaised().add(weiAmount) <= _cap);\n', '  }\n', '\n', '}\n', '\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 private _openingTime;\n', '  uint256 private _closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    require(isOpen());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param openingTime Crowdsale opening time\n', '   * @param closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 openingTime, uint256 closingTime) internal {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(openingTime >= block.timestamp);\n', '    require(closingTime > openingTime);\n', '\n', '    _openingTime = openingTime;\n', '    _closingTime = closingTime;\n', '  }\n', '\n', '  /**\n', '   * @return the crowdsale opening time.\n', '   */\n', '  function openingTime() public view returns(uint256) {\n', '    return _openingTime;\n', '  }\n', '\n', '  /**\n', '   * @return the crowdsale closing time.\n', '   */\n', '  function closingTime() public view returns(uint256) {\n', '    return _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @return true if the crowdsale is open, false otherwise.\n', '   */\n', '  function isOpen() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param beneficiary Token purchaser\n', '   * @param weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address beneficiary,\n', '    uint256 weiAmount\n', '  )\n', '    internal\n', '    onlyWhileOpen\n', '    view\n', '  {\n', '    super._preValidatePurchase(beneficiary, weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'contract MintedCrowdsale is Crowdsale {\n', '  constructor() internal {}\n', '\n', '  /**\n', '   * @dev Overrides delivery by minting tokens upon purchase.\n', '   * @param beneficiary Token purchaser\n', '   * @param tokenAmount Number of tokens to be minted\n', '   */\n', '  function _deliverTokens(\n', '    address beneficiary,\n', '    uint256 tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    require(token().mint(beneficiary, tokenAmount));\n', '  }\n', '}\n', '\n', 'contract SharesCrowdsale is Crowdsale {\n', '  address[] public wallets;\n', '\n', '  constructor(\n', '    address[] _wallets\n', '  ) internal {\n', '    wallets = _wallets;\n', '  }\n', '\n', '  /**\n', '   * @dev Reverts if payment amount is less than limit.\n', '   */\n', '  modifier canBuyOneToken() {\n', '    uint256 calculatedRate = rate() + increaseRateValue - decreaseRateValue;\n', '    uint256 priceOfTokenInWei = 1 ether / calculatedRate;\n', '    require(msg.value >= priceOfTokenInWei);\n', '    _;\n', '  }\n', '\n', '  event IncreaseRate(\n', '    uint256 change,\n', '    uint256 rate\n', '  );\n', '\n', '  event DecreaseRate(\n', '    uint256 change,\n', '    uint256 rate\n', '  );\n', '\n', '  uint256 public increaseRateValue = 0;\n', '  uint256 public decreaseRateValue = 0;\n', '\n', '  /**\n', '   * @dev Call this method when price of ether increased\n', '   * @param value Change in USD from start price\n', '   * @return How much tokens investor will receive per 1 ether\n', '   */\n', '  function increaseRateBy(uint256 value)\n', '    external returns (uint256)\n', '  {\n', '    require(token().isMinter(msg.sender));\n', '\n', '    increaseRateValue = value;\n', '    decreaseRateValue = 0;\n', '\n', '    uint256 calculatedRate = rate() + increaseRateValue;\n', '\n', '    emit IncreaseRate(value, calculatedRate);\n', '\n', '    return calculatedRate;\n', '  }\n', '\n', '  /**\n', '   * @dev Call this method when price of ether decreased\n', '   * @param value Change in USD from start price\n', '   * @return How much tokens investor will receive per 1 ether\n', '   */\n', '  function decreaseRateBy(uint256 value)\n', '    external returns (uint256)\n', '  {\n', '    require(token().isMinter(msg.sender));\n', '\n', '    increaseRateValue = 0;\n', '    decreaseRateValue = value;\n', '\n', '    uint256 calculatedRate = rate() - decreaseRateValue;\n', '\n', '    emit DecreaseRate(value, calculatedRate);\n', '\n', '    return calculatedRate;\n', '  }\n', '\n', '  /**\n', '   * @param weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 weiAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    uint256 calculatedRate = rate() + increaseRateValue - decreaseRateValue;\n', '    uint256 tokensAmount = weiAmount.mul(calculatedRate).div(1 ether);\n', '\n', '    uint256 charge = weiAmount.mul(calculatedRate).mod(1 ether);\n', '    if (charge > 0) {\n', '        tokensAmount += 1;\n', '    }\n', '\n', '    return tokensAmount;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    if (weiRaised() > 100 ether) {\n', '        wallet().transfer(msg.value);\n', '    } else {\n', '        uint256 walletsNumber = wallets.length;\n', '        uint256 amountPerWallet = msg.value.div(walletsNumber);\n', '\n', '        for (uint256 i = 0; i < walletsNumber; i++) {\n', '            wallets[i].transfer(amountPerWallet);\n', '        }\n', '\n', '        uint256 charge = msg.value.mod(walletsNumber);\n', '        if (charge > 0) {\n', '            wallets[0].transfer(charge);\n', '        }\n', '    }\n', '  }\n', '\n', '  function _preValidatePurchase(\n', '    address beneficiary,\n', '    uint256 weiAmount\n', '  )\n', '    internal\n', '    canBuyOneToken()\n', '    view\n', '  {\n', '    super._preValidatePurchase(beneficiary, weiAmount);\n', '  }\n', '}\n', '\n', 'contract Tokensale is Crowdsale, MintedCrowdsale, CappedCrowdsale, TimedCrowdsale, SharesCrowdsale {\n', '  constructor(\n', '    uint256 rate,\n', '    address finalWallet,\n', '    address token,\n', '    uint256 cap,\n', '    uint256 openingTime,\n', '    uint256 closingTime,\n', '    address[] wallets\n', '  )\n', '    public\n', '    Crowdsale(rate, finalWallet, IToken(token))\n', '    CappedCrowdsale(cap)\n', '    TimedCrowdsale(openingTime, closingTime)\n', '    SharesCrowdsale(wallets)\n', '  {\n', '  }\n', '}']