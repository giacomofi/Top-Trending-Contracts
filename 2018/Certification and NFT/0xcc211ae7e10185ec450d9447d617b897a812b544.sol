['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Whitelist\n', ' * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n', ' * @dev This simplifies the implementation of "user permissions".\n', ' */\n', 'contract Whitelist is Ownable {\n', '  mapping(address => bool) public whitelist;\n', '  \n', '  event WhitelistedAddressAdded(address addr);\n', '  event WhitelistedAddressRemoved(address addr);\n', '\n', '  /**\n', '   * @dev Throws if called by any account that&#39;s not whitelisted.\n', '   */\n', '  modifier onlyWhitelisted() {\n', '    require(whitelist[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param addr address\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist \n', '   */\n', '  function addAddressToWhitelist(address addr) onlyOwner public returns(bool success) {\n', '    if (!whitelist[addr]) {\n', '      whitelist[addr] = true;\n', '      WhitelistedAddressAdded(addr);\n', '      success = true; \n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev add addresses to the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was added to the whitelist, \n', '   * false if all addresses were already in the whitelist  \n', '   */\n', '  function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      if (addAddressToWhitelist(addrs[i])) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param addr address\n', '   * @return true if the address was removed from the whitelist, \n', '   * false if the address wasn&#39;t in the whitelist in the first place \n', '   */\n', '  function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\n', '    if (whitelist[addr]) {\n', '      whitelist[addr] = false;\n', '      WhitelistedAddressRemoved(addr);\n', '      success = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove addresses from the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was removed from the whitelist, \n', '   * false if all addresses weren&#39;t in the whitelist in the first place\n', '   */\n', '  function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      if (removeAddressFromWhitelist(addrs[i])) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Basic {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);  \n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function exists(uint256 _tokenId) public view returns (bool _exists);\n', '  \n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function getApproved(uint256 _tokenId) public view returns (address _operator);\n', '  \n', '  function setApprovalForAll(address _operator, bool _approved) public;\n', '  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;  \n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public;\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Enumerable is ERC721Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\n', '  function tokenByIndex(uint256 _index) public view returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Metadata is ERC721Basic {\n', '  function name() public view returns (string _name);\n', '  function symbol() public view returns (string _symbol);\n', '  function tokenURI(uint256 _tokenId) public view returns (string);\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' *  from ERC721 asset contracts.\n', ' */\n', 'contract ERC721Receiver {\n', '  /**\n', '   * @dev Magic value to be returned upon successful reception of an NFT\n', '   *  Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`,\n', '   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '   */\n', '  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba; \n', '\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient\n', '   *  after a `safetransfer`. This function MAY throw to revert and reject the\n', '   *  transfer. This function MUST use 50,000 gas or less. Return of other\n', '   *  than the magic value MUST result in the transaction being reverted.\n', '   *  Note: the contract address is always the message sender.\n', '   * @param _from The sending address \n', '   * @param _tokenId The NFT identifier which is being transfered\n', '   * @param _data Additional data with no specified format\n', '   * @return `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '   */\n', '  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * Returns whether there is code in the target address\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   *  as the code is not actually created until after the constructor finishes.\n', '   * @param addr address address to check\n', '   * @return whether there is code in the target address\n', '   */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint256 size;\n', '    assembly { size := extcodesize(addr) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721BasicToken is ERC721Basic {\n', '  using SafeMath for uint256;\n', '  using AddressUtils for address;\n', '  \n', '  // Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba; \n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) internal tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) internal tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping (address => uint256) internal ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping (address => mapping (address => bool)) internal operatorApprovals;\n', '\n', '  /**\n', '  * @dev Guarantees msg.sender is owner of the given token\n', '  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '  */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n', '  * @param _tokenId uint256 ID of the token to validate\n', '  */\n', '  modifier canTransfer(uint256 _tokenId) {\n', '    require(isApprovedOrOwner(msg.sender, _tokenId));\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address\n', '  * @param _owner address to query the balance of\n', '  * @return uint256 representing the amount owned by the passed address\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    require(_owner != address(0));\n', '    return ownedTokensCount[_owner];\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the owner of the specified token ID\n', '  * @param _tokenId uint256 ID of the token to query the owner of\n', '  * @return owner address currently marked as the owner of the given token ID\n', '  */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Returns whether the specified token exists\n', '  * @param _tokenId uint256 ID of the token to query the existance of\n', '  * @return whether the token exists\n', '  */\n', '  function exists(uint256 _tokenId) public view returns (bool) {\n', '    address owner = tokenOwner[_tokenId];\n', '    return owner != address(0);\n', '  }\n', '\n', '  /**\n', '  * @dev Approves another address to transfer the given token ID\n', '  * @dev The zero address indicates there is no approved address.\n', '  * @dev There can only be one approved address per token at a given time.\n', '  * @dev Can only be called by the token owner or an approved operator.\n', '  * @param _to address to be approved for the given token ID\n', '  * @param _tokenId uint256 ID of the token to be approved\n', '  */\n', '  function approve(address _to, uint256 _tokenId) public {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      Approval(owner, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for a the given token ID\n', '   */\n', '  function getApproved(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Sets or unsets the approval of a given operator\n', '  * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n', '  * @param _to operator address to set the approval\n', '  * @param _approved representing the status of the approval to be set\n', '  */\n', '  function setApprovalForAll(address _to, bool _approved) public {\n', '    require(_to != msg.sender);\n', '    operatorApprovals[msg.sender][_to] = _approved;\n', '    ApprovalForAll(msg.sender, _to, _approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param _owner owner address which you want to query the approval of\n', '   * @param _operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n', '    return operatorApprovals[_owner][_operator];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfers the ownership of a given token ID to another address\n', '  * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '  * @dev Requires the msg sender to be the owner, approved, or operator\n', '  * @param _from current owner of the token\n', '  * @param _to address to receive the ownership of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\n', '    require(_from != address(0));\n', '    require(_to != address(0));\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeTokenFrom(_from, _tokenId);\n', '    addTokenTo(_to, _tokenId);\n', '    \n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Safely transfers the ownership of a given token ID to another address\n', '  * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '  *  which is called upon a safe transfer, and return the magic value\n', '  *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '  *  the transfer is reverted.\n', '  * @dev Requires the msg sender to be the owner, approved, or operator\n', '  * @param _from current owner of the token\n', '  * @param _to address to receive the ownership of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\n', '    safeTransferFrom(_from, _to, _tokenId, "");\n', '  }\n', '\n', '  /**\n', '  * @dev Safely transfers the ownership of a given token ID to another address\n', '  * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '  *  which is called upon a safe transfer, and return the magic value\n', '  *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '  *  the transfer is reverted.\n', '  * @dev Requires the msg sender to be the owner, approved, or operator\n', '  * @param _from current owner of the token\n', '  * @param _to address to receive the ownership of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  * @param _data bytes data to send along with a safe transfer check\n', '  */\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public canTransfer(_tokenId) {\n', '    transferFrom(_from, _to, _tokenId);\n', '    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the given spender can transfer a given token ID\n', '   * @param _spender address of the spender to query\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @return bool whether the msg.sender is approved for the given token ID,\n', '   *  is an operator of the owner, or is the owner of the token\n', '   */\n', '  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\n', '    address owner = ownerOf(_tokenId);\n', '    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to mint a new token\n', '  * @dev Reverts if the given token ID already exists\n', '  * @param _to The address that will own the minted token\n', '  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '  */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    addTokenTo(_to, _tokenId);\n', '    Transfer(address(0), _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to burn a specific token\n', '  * @dev Reverts if the token does not exist\n', '  * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '  */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    clearApproval(_owner, _tokenId);\n', '    removeTokenFrom(_owner, _tokenId);\n', '    Transfer(_owner, address(0), _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval of a given token ID\n', '  * @dev Reverts if the given address is not indeed the owner of the token\n', '  * @param _owner owner of the token\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApproval(address _owner, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    if (tokenApprovals[_tokenId] != address(0)) {\n', '      tokenApprovals[_tokenId] = address(0);\n', '      Approval(_owner, address(0), _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to add a token ID to the list of a given address\n', '  * @param _to address representing the new owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '  */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to remove a token ID from the list of a given address\n', '  * @param _from address representing the previous owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '  */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _from);\n', '    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n', '    tokenOwner[_tokenId] = address(0);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to invoke `onERC721Received` on a target address\n', '  * @dev The call is not executed if the target address is not a contract\n', '  * @param _from address representing the previous owner of the given token ID\n', '  * @param _to target address that will receive the tokens\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  * @param _data bytes optional data to send along with the call\n', '  * @return whether the call correctly returned the expected magic value\n', '  */\n', '  function checkAndCallSafeTransfer(address _from, address _to, uint256 _tokenId, bytes _data) internal returns (bool) {\n', '    if (!_to.isContract()) {\n', '      return true;\n', '    }\n', '    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\n', '    return (retval == ERC721_RECEIVED);\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Token is ERC721, ERC721BasicToken {\n', '  // Token name\n', '  string internal name_;\n', '\n', '  // Token symbol\n', '  string internal symbol_;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) internal ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] internal allTokens;\n', '\n', '  // Mapping from token id to position in the allTokens array\n', '  mapping(uint256 => uint256) internal allTokensIndex;\n', '\n', '  // Optional mapping for token URIs \n', '  mapping(uint256 => string) internal tokenURIs;\n', '\n', '  /**\n', '  * @dev Constructor function\n', '  */\n', '  function ERC721Token(string _name, string _symbol) public {\n', '    name_ = _name;\n', '    symbol_ = _symbol;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the token name\n', '  * @return string representing the token name\n', '  */\n', '  function name() public view returns (string) {\n', '    return name_;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the token symbol\n', '  * @return string representing the token symbol\n', '  */\n', '  function symbol() public view returns (string) {\n', '    return symbol_;\n', '  }\n', '\n', '  /**\n', '  * @dev Returns an URI for a given token ID\n', '  * @dev Throws if the token ID does not exist. May return an empty string.\n', '  * @param _tokenId uint256 ID of the token to query\n', '  */\n', '  function tokenURI(uint256 _tokenId) public view returns (string) {\n', '    require(exists(_tokenId));\n', '    return tokenURIs[_tokenId];\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to set the token URI for a given token\n', '  * @dev Reverts if the token ID does not exist\n', '  * @param _tokenId uint256 ID of the token to set its URI\n', '  * @param _uri string URI to assign\n', '  */\n', '  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n', '    require(exists(_tokenId));\n', '    tokenURIs[_tokenId] = _uri;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '  * @param _owner address owning the tokens list to be accessed\n', '  * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '  * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '  */\n', '  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\n', '    require(_index < balanceOf(_owner));\n', '    return ownedTokens[_owner][_index];\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the total amount of tokens stored by the contract\n', '  * @return uint256 representing the total amount of tokens\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return allTokens.length;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the token ID at a given index of all the tokens in this contract\n', '  * @dev Reverts if the index is greater or equal to the total number of tokens\n', '  * @param _index uint256 representing the index to be accessed of the tokens list\n', '  * @return uint256 token ID at the given index of the tokens list\n', '  */\n', '  function tokenByIndex(uint256 _index) public view returns (uint256) {\n', '    require(_index < totalSupply());\n', '    return allTokens[_index];\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to add a token ID to the list of a given address\n', '  * @param _to address representing the new owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '  */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    super.addTokenTo(_to, _tokenId);\n', '    uint256 length = ownedTokens[_to].length;\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to remove a token ID from the list of a given address\n', '  * @param _from address representing the previous owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '  */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    super.removeTokenFrom(_from, _tokenId);\n', '\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    ownedTokens[_from][lastTokenIndex] = 0;\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to mint a new token\n', '  * @dev Reverts if the given token ID already exists\n', '  * @param _to address the beneficiary that will own the minted token\n', '  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '  */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    super._mint(_to, _tokenId);\n', '    \n', '    allTokensIndex[_tokenId] = allTokens.length;\n', '    allTokens.push(_tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to burn a specific token\n', '  * @dev Reverts if the token does not exist\n', '  * @param _owner owner of the token to burn\n', '  * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '  */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    super._burn(_owner, _tokenId);\n', '\n', '    // Clear metadata (if any)\n', '    if (bytes(tokenURIs[_tokenId]).length != 0) {\n', '      delete tokenURIs[_tokenId];\n', '    }\n', '\n', '    // Reorg all tokens array\n', '    uint256 tokenIndex = allTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = allTokens.length.sub(1);\n', '    uint256 lastToken = allTokens[lastTokenIndex];\n', '\n', '    allTokens[tokenIndex] = lastToken;\n', '    allTokens[lastTokenIndex] = 0;\n', '\n', '    allTokens.length--;\n', '    allTokensIndex[_tokenId] = 0;\n', '    allTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '}\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title ERC721 Token for Crypto Avatars\n', ' * @dev Allows to create and "evolve" Crypto Avatars.\n', ' * Avatars can be created and modified only by a whitelisted account,\n', ' * Contract owner can be superseded by the contract supervisor in case of emergency.\n', ' * @author Guerrilla Crypto\n', ' */\n', 'contract CryptoAvatars is ERC721Token, Whitelist {\n', '\n', '    struct CryptoAvatar {\n', '        uint256 statistics;\n', '        uint32 avatarType;\n', '        uint32 level;\n', '        uint32 experience;\n', '        uint64 creationTime;\n', '        bool isHibernated;\n', '    }\n', '\n', '    /// @dev An array containing the CryptoAvatar struct for all Avatars in existence. The ID\n', '    ///  of each avatar is an index into this array.\n', '    CryptoAvatar[] avatars;\n', '\n', '    /// @dev Supervisor can take over contract owner\n', '    address public supervisor;\n', '\n', '    /// @dev allow avatar creation\n', '    bool public allowAvatarCreation = true;\n', '\n', '    /// @dev The Creation event is fired whenever a new avatar comes into existence.\n', '    event Creation(uint256 avatarId, uint256 statistics, uint256 avatarType,  uint256 level, uint256 experience);\n', '    /// @dev The Evolution event is fired whenever an avatar evolves (changes its characteristics).\n', '    event Evolution(uint256 avatarId, uint256 statistics, uint256 avatarType, uint256 level, uint256 experience);\n', '    /// @dev The SupervisorChanged event is fired whenever the supervisor is changed\n', '    event SupervisorChanged(address indexed previousSupervisor, address indexed newSupervisor);\n', '    /// @dev The Hibernated event is fired whenever the avatar is hibernated by the owner\n', '    event Hibernated(uint256 avatarId);\n', '    /// @dev The WokenUp event is fired whenever the avatar is woken up by the owner\n', '    event WokenUp(uint256 avatarId);\n', '\n', '    /// @dev Create token with name and symbol and set the supervisor\n', '    constructor(address _supervisor)\n', '    ERC721Token("CryptoAvatars", "AVA") public\n', '    {\n', '        // set the supervisor\n', '        supervisor = _supervisor;\n', '        // add owner to whitelist\n', '        addAddressToWhitelist(msg.sender);\n', '        // add supervisor to whitelist\n', '        addAddressToWhitelist(supervisor);\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the supervisor.\n', '    */\n', '    modifier onlySupervisor() {\n', '        require(msg.sender == supervisor);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the supervisor to take control of the contract.\n', '     */\n', '    function takeControl() external onlySupervisor {\n', '        require(owner != supervisor);\n', '        // new owner is the supervisor\n', '        owner = supervisor;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current supervisor to transfer control of the contract to a newSupervisor.\n', '     * @param newSupervisor The address to transfer to.\n', '     */\n', '    function changeSupervisor(address newSupervisor) external onlySupervisor {\n', '        require(newSupervisor != supervisor);\n', '        emit SupervisorChanged(supervisor, newSupervisor);\n', '        supervisor = newSupervisor;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the supervisor to stop the creation of new avatars.\n', '    */\n', '    function stopAvatarCreation() external onlySupervisor {\n', '        allowAvatarCreation = false;\n', '    }\n', '\n', '    /// @notice Returns all the relevant information about a specific avatar.\n', '    /// @param _id The ID of the avatar\n', '    function getCryptoAvatar(uint256 _id)\n', '    external\n', '    view\n', '    returns (\n', '        uint256 statistics,\n', '        uint256 avatarType,\n', '        uint256 level,\n', '        uint256 experience,\n', '        uint256 creationTime,\n', '        bool isHibernated\n', '    ) {\n', '        // check if exists\n', '        require(exists(_id));\n', '\n', '        CryptoAvatar storage avatar = avatars[_id];\n', '        statistics = uint256(avatar.statistics);\n', '        avatarType = uint256(avatar.avatarType);\n', '        level = uint256(avatar.level);\n', '        experience = uint256(avatar.experience);\n', '        creationTime = uint256(avatar.creationTime);\n', '        isHibernated = avatar.isHibernated;\n', '    }\n', '\n', '\n', '    /// @dev An external method that creates a new avatar and stores it. This\n', '    ///  method doesn&#39;t do any checking and should only be called when the\n', '    ///  input data is known to be valid. Will generate both a Creation event\n', '    ///  and a Transfer event.\n', '    ///  Only whitelisted callers can access this\n', '    /// @param _avatarType The avatar type\n', '    /// @param _level The avatar level\n', '    /// @param _experience The avatar experience.\n', '    /// @param _statistics The avatar statistics.\n', '    /// @param _owner The initial owner of this avatar.\n', '    function createCryptoAvatar(\n', '    uint256 _statistics,\n', '    uint256 _avatarType,\n', '    uint256 _level,\n', '    uint256 _experience,\n', '    address _owner\n', '    )\n', '    onlyWhitelisted\n', '    external\n', '    {\n', '        // check if we can create new avatar\n', '        require(allowAvatarCreation);\n', '        // check if parameters are compatible with struc\n', '        require(_avatarType == uint256(uint32(_avatarType)));\n', '        require(_level == uint256(uint32(_level)));\n', '        require(_experience == uint256(uint32(_experience)));\n', '\n', '        // create object\n', '        CryptoAvatar memory _avatar = CryptoAvatar({\n', '        statistics: _statistics,\n', '        avatarType: uint32(_avatarType),\n', '        level: uint32(_level),\n', '        experience: uint32(_experience),\n', '        creationTime: uint64(now),\n', '        isHibernated: false\n', '        });\n', '\n', '        // new index (push returns new array length)\n', '        uint256 newAvatarId = avatars.push(_avatar) - 1;\n', '\n', '        // emit creation event\n', '        emit Creation(newAvatarId, _statistics, uint256(_avatarType),  uint256(_level), uint256(_experience));\n', '\n', '        // Create avatar, assign to owner and emit the Transfer event\n', '        _mint(_owner, newAvatarId);\n', '    }\n', '\n', '\n', '    /// @dev An external method that modifies the avatar characteristic. This\n', '    ///  method doesn&#39;t do any checking and should only be called when the\n', '    ///  input data is known to be valid. Will generate a Evolution event.\n', '    ///  Only whitelisted callers can access this\n', '    /// @param _id The avatar id\n', '    /// @param _statistics The avatar statistics.\n', '    /// @param _avatarType The avatar type\n', '    /// @param _level The avatar level\n', '    /// @param _experience The avatar experience.\n', '    function evolveCryptoAvatar(\n', '    uint256 _id,\n', '    uint256 _statistics,\n', '    uint256 _avatarType,\n', '    uint256 _level,\n', '    uint256 _experience\n', '    )\n', '    onlyWhitelisted\n', '    external\n', '    {\n', '        // check if parameters are compatible with struct\n', '        require(_avatarType == uint256(uint32(_avatarType)));\n', '        require(_level == uint256(uint32(_level)));\n', '        require(_experience == uint256(uint32(_experience)));\n', '\n', '        // check if avatar exists\n', '        require(exists(_id));\n', '        // retrieve avatar\n', '        CryptoAvatar storage avatar = avatars[_id];\n', '\n', '        // check if avatar is hibernated and cannot be modified\n', '        require(!avatar.isHibernated);\n', '\n', '        // store new values\n', '        avatar.statistics = _statistics;\n', '        avatar.avatarType = uint32(_avatarType);\n', '        avatar.level = uint32(_level);\n', '        avatar.experience = uint32(_experience);\n', '        \n', '        // emit event\n', '        emit Evolution(_id, _statistics, uint256(_avatarType), uint256(_level), uint256(_experience));\n', '    }\n', '\n', '    /// @dev Set the avatar URI\n', '    /// @param _tokenId The avatar id\n', '    /// @param _uri The avatar URI\n', '\n', '    function setTokenURI(\n', '    uint256 _tokenId,\n', '    string _uri\n', '    )\n', '    onlyWhitelisted\n', '    public\n', '    {\n', '        super._setTokenURI(_tokenId, _uri);\n', '    }\n', '\n', '    /// @dev Hibernate the avatar: cannot be modified\n', '    /// @param _tokenId The avatar id\n', '\n', '    function hibernate(\n', '    uint256 _tokenId\n', '    )\n', '    external\n', '    {\n', '        // check if avatar exists\n', '        require(exists(_tokenId));\n', '        // retrieve avatar\n', '        CryptoAvatar storage avatar = avatars[_tokenId];\n', '        // check if not already hibernated\n', '        require(!avatar.isHibernated);\n', '        // check if owner\n', '        address owner = ownerOf(_tokenId);\n', '        require(msg.sender == owner);\n', '        // hibernate\n', '        avatar.isHibernated = true;\n', '\n', '        emit Hibernated(_tokenId);\n', '    }\n', '\n', '    /// @dev Wake up the avatar: can be modified\n', '    /// @param _tokenId The avatar id\n', '\n', '    function wakeUp(\n', '    uint256 _tokenId\n', '    )\n', '    external\n', '    {\n', '        // check if avatar exists\n', '        require(exists(_tokenId));\n', '        // retrieve avatar\n', '        CryptoAvatar storage avatar = avatars[_tokenId];\n', '        // check if not already hibernated\n', '        require(avatar.isHibernated);\n', '        // check if owner\n', '        address owner = ownerOf(_tokenId);\n', '        require(msg.sender == owner);\n', '        // hibernate\n', '        avatar.isHibernated = false;\n', '\n', '        emit WokenUp(_tokenId);\n', '    }\n', '\n', '}']