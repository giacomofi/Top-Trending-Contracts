['pragma solidity ^0.4.23;\n', '\n', '\n', 'library Math {\n', '\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        \n', '        if(a == 0) { return 0; }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract QRC20 {\n', '\n', '\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    \n', '\n', '    address public owner_;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() public {\n', '        \n', '        owner_ = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        \n', '        require(msg.sender == owner_);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        \n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner_, newOwner);\n', '        owner_ = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract BasicToken is QRC20 {\n', '    \n', '\n', '    using Math for uint256;\n', '    \n', '    uint256 totalSupply_;    \n', '    mapping(address => uint256) balances_;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        \n', '        return totalSupply_;\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '\n', '        require(to != address(0));\n', '        require(value <= balances_[msg.sender]);\n', '\n', '        balances_[msg.sender] = balances_[msg.sender].sub(value);\n', '        balances_[to] = balances_[to].add(value);\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address owner) public view returns (uint256 balance) {\n', '\n', '        return balances_[owner];\n', '    }\n', '}\n', '\n', '\n', 'contract StandardToken is BasicToken {\n', '\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '    mapping (address => mapping (address => uint256)) internal allowed_;\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '\n', '        require(to != address(0));\n', '        require(value <= balances_[from]);\n', '        require(value <= allowed_[from][msg.sender]);\n', '\n', '        balances_[from] = balances_[from].sub(value);\n', '        balances_[to] = balances_[to].add(value);\n', '        allowed_[from][msg.sender] = allowed_[from][msg.sender].sub(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        \n', '        allowed_[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        \n', '        return allowed_[owner][spender];\n', '    }\n', '\n', '    function burn(uint256 value) public {\n', '\n', '        require(value <= balances_[msg.sender]);\n', '        address burner = msg.sender;\n', '        balances_[burner] = balances_[burner].sub(value);\n', '        totalSupply_ = totalSupply_.sub(value);\n', '        emit Burn(burner, value);\n', '    }\n', '}\n', '\n', '\n', 'contract UUNIOToken is StandardToken, Ownable {\n', '\n', '    \n', '    using Math for uint;\n', '\n', '    string constant public name     = "UUNIO Token";\n', '    string constant public symbol   = "UUNIO";\n', '    uint8 constant public decimals  = 8;\n', '    uint256 constant INITIAL_SUPPLY = 900000000e8;\n', '\n', '    // MAINNET\n', '    address constant team      = 0x9c619FF74015bECc48D429755aA54435ba367e23;\n', '    address constant advisors  = 0xB4fca416727c92F5dBfC1d3C248F9A50B9f811fE;\n', '    address constant reserve   = 0x8E2c648f493323623C2a55010953aE2B98ec7675;\n', '    address constant system1   = 0x91c2ccf957C32A3F37125240942E97C1bD2aC394;\n', '    address constant system2   = 0xB9E51D549c2c0EE7976E354e8a33CD2F91Ef955C;\n', '    address constant angel     = 0x3f957Fc80cdf9ad2A9D78C3aFd13a75099A167B3;\n', '    address constant partners  = 0x8F3e215C76B312Fd28fBAaf16FE98d6e9357b8AB;\n', '    address constant preSale   = 0x39401cd3f45C682Bbb75eA4D3aDD4E268b19D0Fc;\n', '    address constant crowdSale = 0xB06DD470C23979f8331e790D47866130001e7492;\n', '    address constant benefit   = 0x0Ff19B60b84040019EA6B46E6314367484f66F8F;\n', '    \n', '    // TESTNET\n', '    // address constant team        = 0x08cF66b63c2995c7Cc611f58c3Df1305a1E46ba7;\n', '    // address constant advisors    = 0xCf456ED49752F0376aFd6d8Ed2CC6e959E57C086;\n', '    // address constant reserve     = 0x9F1046F1e85640256E2303AC807F895C5c0b862b;\n', '    // address constant system1     = 0xC97eFe0481964b344Df74e8Fa09b194010736A62;\n', '    // address constant system2     = 0xC97eFe0481964b344Df74e8Fa09b194010736A62;\n', '    // address constant angel       = 0xd03631463a266A749C666E6066D835bDAD307FB8;\n', '    // address constant partners    = 0xd03631463a266A749C666E6066D835bDAD307FB8;\n', '    // address constant preSale     = 0xd03631463a266A749C666E6066D835bDAD307FB8;\n', '    // address constant crowdSale   = 0xd03631463a266A749C666E6066D835bDAD307FB8;\n', '    // address constant benefit     = 0x08cF66b63c2995c7Cc611f58c3Df1305a1E46ba7;\n', '\n', '    // 10%\n', '    uint constant teamTokens      = 90000000e8;\n', '    // 10%    \n', '    uint constant advisorsTokens  = 90000000e8;\n', '    // 30%    \n', '    uint constant reserveTokens   = 270000000e8;\n', '    //// total 15.14, 136260000 ///////\n', '    // 15%\n', '    uint constant system1Tokens   = 135000000e8;\n', '    // 0.14%\n', '    uint constant system2Tokens   = 1260000e8;\n', '    ////////////////////////\n', '    // 5.556684%\n', '    uint constant angelTokens     = 50010156e8;\n', '    // 2.360022%\n', '    uint constant partnersTokens  = 21240198e8;\n', '    // 15.275652%\n', '    uint constant preSaleTokens   = 137480868e8;\n', '    // 11.667642%\n', '    uint constant crowdSaleTokens = 105008778e8;\n', '\n', '    constructor() public {\n', '\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '\n', '        preFixed(team, teamTokens);\n', '        preFixed(advisors, advisorsTokens);\n', '        preFixed(reserve, reserveTokens);\n', '        preFixed(system1, system1Tokens);\n', '        preFixed(system2, system2Tokens);\n', '        preFixed(angel, angelTokens);\n', '        preFixed(partners, partnersTokens);\n', '        preFixed(preSale, preSaleTokens);\n', '        preFixed(crowdSale, crowdSaleTokens);\n', '    }\n', '\n', '    function preFixed(address addr, uint amount) internal returns (bool) {\n', '        \n', '        balances_[addr] = amount;\n', '        emit Transfer(address(0x0), addr, amount);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function () public payable {\n', '\n', '        benefit.transfer(msg.value);\n', '    }\n', '}']