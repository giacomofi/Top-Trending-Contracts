['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function _burn(address _burner, uint256 _value) internal {\n', '        require(_value <= balances[_burner]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        balances[_burner] = balances[_burner].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        Burn(_burner, _value);\n', '        Transfer(_burner, address(0), _value);\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract DividendPayoutToken is BurnableToken, MintableToken {\n', '\n', '    // Dividends already claimed by investor\n', '    mapping(address => uint256) public dividendPayments;\n', '    // Total dividends claimed by all investors\n', '    uint256 public totalDividendPayments;\n', '\n', '    // invoke this function after each dividend payout\n', '    function increaseDividendPayments(address _investor, uint256 _amount) onlyOwner public {\n', '        dividendPayments[_investor] = dividendPayments[_investor].add(_amount);\n', '        totalDividendPayments = totalDividendPayments.add(_amount);\n', '    }\n', '\n', '    //When transfer tokens decrease dividendPayments for sender and increase for receiver\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        // balance before transfer\n', '        uint256 oldBalanceFrom = balances[msg.sender];\n', '\n', '        // invoke super function with requires\n', '        bool isTransferred = super.transfer(_to, _value);\n', '\n', '        uint256 transferredClaims = dividendPayments[msg.sender].mul(_value).div(oldBalanceFrom);\n', '        dividendPayments[msg.sender] = dividendPayments[msg.sender].sub(transferredClaims);\n', '        dividendPayments[_to] = dividendPayments[_to].add(transferredClaims);\n', '\n', '        return isTransferred;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        // balance before transfer\n', '        uint256 oldBalanceFrom = balances[_from];\n', '\n', '        // invoke super function with requires\n', '        bool isTransferred = super.transferFrom(_from, _to, _value);\n', '\n', '        uint256 transferredClaims = dividendPayments[_from].mul(_value).div(oldBalanceFrom);\n', '        dividendPayments[_from] = dividendPayments[_from].sub(transferredClaims);\n', '        dividendPayments[_to] = dividendPayments[_to].add(transferredClaims);\n', '\n', '        return isTransferred;\n', '    }\n', '\n', '    function burn() public {\n', '        address burner = msg.sender;\n', '\n', '        // balance before burning tokens\n', '        uint256 oldBalance = balances[burner];\n', '\n', '        super._burn(burner, oldBalance);\n', '\n', '        uint256 burnedClaims = dividendPayments[burner];\n', '        dividendPayments[burner] = dividendPayments[burner].sub(burnedClaims);\n', '        totalDividendPayments = totalDividendPayments.sub(burnedClaims);\n', '\n', '        SaleInterface(owner).refund(burner);\n', '    }\n', '\n', '}\n', '\n', 'contract RicoToken is DividendPayoutToken {\n', '\n', '    string public constant name = "Rico";\n', '\n', '    string public constant symbol = "Rico";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '}\n', '\n', '\n', '// Interface for PreSale and CrowdSale contracts with refund function\n', 'contract SaleInterface {\n', '\n', '    function refund(address _to) public;\n', '\n', '}\n', '\n', '\n', 'contract ReentrancyGuard {\n', '\n', '    /**\n', '     * @dev We use a single lock for the whole contract.\n', '     */\n', '    bool private reentrancy_lock = false;\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * @notice If you mark a function `nonReentrant`, you should also\n', '     * mark it `external`. Calling one nonReentrant function from\n', '     * another is not supported. Instead, you can implement a\n', '     * `private` function doing the actual work, and a `external`\n', '     * wrapper marked as `nonReentrant`.\n', '     */\n', '    modifier nonReentrant() {\n', '        require(!reentrancy_lock);\n', '        reentrancy_lock = true;\n', '        _;\n', '        reentrancy_lock = false;\n', '    }\n', '\n', '}\n', '\n', 'contract PreSale is Ownable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    RicoToken public token;\n', '    address tokenContractAddress;\n', '\n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    // Address where funds are transferred after success end of PreSale\n', '    address public wallet;\n', '\n', '    // How many token units a buyer gets per wei\n', '    uint256 public rate;\n', '\n', '    uint256 public minimumInvest; // in wei\n', '\n', '    uint256 public softCap; // in wei\n', '    uint256 public hardCap; // in wei\n', '\n', '    // investors => amount of money\n', '    mapping(address => uint) public balances;\n', '\n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '\n', '    // PreSale bonus in percent\n', '    uint256 bonusPercent;\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    function PreSale(\n', '        address _token) public\n', '    {\n', '\n', '        startTime = 1525251600;\n', '        endTime = startTime + 80 minutes;\n', '\n', '        wallet = 0xA298811CB7809fe48D74ad571B8a6025F142c3C7;\n', '        token = RicoToken(_token);\n', '        tokenContractAddress = _token;\n', '\n', '        // minimumInvest in wei\n', '        minimumInvest = 1000000000000;\n', '\n', '        // 1 token for approximately 0.00015 eth\n', '        rate = 1000;\n', '\n', '        softCap = 150 * 0.000001 ether;\n', '        hardCap = 1500 * 0.000001 ether;\n', '        bonusPercent = 50;\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    modifier saleIsOn() {\n', '        bool withinPeriod = now >= startTime && now <= endTime;\n', '        require(withinPeriod);\n', '        _;\n', '    }\n', '\n', '    modifier isUnderHardCap() {\n', '        require(weiRaised < hardCap);\n', '        _;\n', '    }\n', '\n', '    modifier refundAllowed() {\n', '        require(weiRaised < softCap && now > endTime);\n', '        _;\n', '    }\n', '\n', '    // @return true if PreSale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return now > endTime;\n', '    }\n', '\n', '    // Refund ether to the investors (invoke from only token)\n', '    function refund(address _to) public refundAllowed {\n', '        require(msg.sender == tokenContractAddress);\n', '\n', '        uint256 valueToReturn = balances[_to];\n', '\n', '        // update states\n', '        balances[_to] = 0;\n', '        weiRaised = weiRaised.sub(valueToReturn);\n', '\n', '        _to.transfer(valueToReturn);\n', '    }\n', '\n', '    // Get amount of tokens\n', '    // @param value weis paid for tokens\n', '    function getTokenAmount(uint256 _value) internal view returns (uint256) {\n', '        return _value.mul(rate);\n', '    }\n', '\n', '    // Send weis to the wallet\n', '    function forwardFunds(uint256 _value) internal {\n', '        wallet.transfer(_value);\n', '    }\n', '\n', '    // Success finish of PreSale\n', '    function finishPreSale() public onlyOwner {\n', '        require(weiRaised >= softCap);\n', '        require(weiRaised >= hardCap || now > endTime);\n', '\n', '        if (now < endTime) {\n', '            endTime = now;\n', '        }\n', '\n', '        forwardFunds(this.balance);\n', '        token.transferOwnership(owner);\n', '    }\n', '\n', '    // Change owner of token after end of PreSale if Soft Cap has not raised\n', '    function changeTokenOwner() public onlyOwner {\n', '        require(now > endTime && weiRaised < softCap);\n', '        token.transferOwnership(owner);\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address _beneficiary) saleIsOn isUnderHardCap nonReentrant public payable {\n', '        require(_beneficiary != address(0));\n', '        require(msg.value >= minimumInvest);\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 tokens = getTokenAmount(weiAmount);\n', '        tokens = tokens.add(tokens.mul(bonusPercent).div(100));\n', '\n', '        token.mint(_beneficiary, tokens);\n', '\n', '        // update states\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        balances[_beneficiary] = balances[_beneficiary].add(weiAmount);\n', '\n', '        TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '    }\n', '\n', '    function() external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function _burn(address _burner, uint256 _value) internal {\n', '        require(_value <= balances[_burner]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        balances[_burner] = balances[_burner].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        Burn(_burner, _value);\n', '        Transfer(_burner, address(0), _value);\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract DividendPayoutToken is BurnableToken, MintableToken {\n', '\n', '    // Dividends already claimed by investor\n', '    mapping(address => uint256) public dividendPayments;\n', '    // Total dividends claimed by all investors\n', '    uint256 public totalDividendPayments;\n', '\n', '    // invoke this function after each dividend payout\n', '    function increaseDividendPayments(address _investor, uint256 _amount) onlyOwner public {\n', '        dividendPayments[_investor] = dividendPayments[_investor].add(_amount);\n', '        totalDividendPayments = totalDividendPayments.add(_amount);\n', '    }\n', '\n', '    //When transfer tokens decrease dividendPayments for sender and increase for receiver\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        // balance before transfer\n', '        uint256 oldBalanceFrom = balances[msg.sender];\n', '\n', '        // invoke super function with requires\n', '        bool isTransferred = super.transfer(_to, _value);\n', '\n', '        uint256 transferredClaims = dividendPayments[msg.sender].mul(_value).div(oldBalanceFrom);\n', '        dividendPayments[msg.sender] = dividendPayments[msg.sender].sub(transferredClaims);\n', '        dividendPayments[_to] = dividendPayments[_to].add(transferredClaims);\n', '\n', '        return isTransferred;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        // balance before transfer\n', '        uint256 oldBalanceFrom = balances[_from];\n', '\n', '        // invoke super function with requires\n', '        bool isTransferred = super.transferFrom(_from, _to, _value);\n', '\n', '        uint256 transferredClaims = dividendPayments[_from].mul(_value).div(oldBalanceFrom);\n', '        dividendPayments[_from] = dividendPayments[_from].sub(transferredClaims);\n', '        dividendPayments[_to] = dividendPayments[_to].add(transferredClaims);\n', '\n', '        return isTransferred;\n', '    }\n', '\n', '    function burn() public {\n', '        address burner = msg.sender;\n', '\n', '        // balance before burning tokens\n', '        uint256 oldBalance = balances[burner];\n', '\n', '        super._burn(burner, oldBalance);\n', '\n', '        uint256 burnedClaims = dividendPayments[burner];\n', '        dividendPayments[burner] = dividendPayments[burner].sub(burnedClaims);\n', '        totalDividendPayments = totalDividendPayments.sub(burnedClaims);\n', '\n', '        SaleInterface(owner).refund(burner);\n', '    }\n', '\n', '}\n', '\n', 'contract RicoToken is DividendPayoutToken {\n', '\n', '    string public constant name = "Rico";\n', '\n', '    string public constant symbol = "Rico";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '}\n', '\n', '\n', '// Interface for PreSale and CrowdSale contracts with refund function\n', 'contract SaleInterface {\n', '\n', '    function refund(address _to) public;\n', '\n', '}\n', '\n', '\n', 'contract ReentrancyGuard {\n', '\n', '    /**\n', '     * @dev We use a single lock for the whole contract.\n', '     */\n', '    bool private reentrancy_lock = false;\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * @notice If you mark a function `nonReentrant`, you should also\n', '     * mark it `external`. Calling one nonReentrant function from\n', '     * another is not supported. Instead, you can implement a\n', '     * `private` function doing the actual work, and a `external`\n', '     * wrapper marked as `nonReentrant`.\n', '     */\n', '    modifier nonReentrant() {\n', '        require(!reentrancy_lock);\n', '        reentrancy_lock = true;\n', '        _;\n', '        reentrancy_lock = false;\n', '    }\n', '\n', '}\n', '\n', 'contract PreSale is Ownable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    RicoToken public token;\n', '    address tokenContractAddress;\n', '\n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    // Address where funds are transferred after success end of PreSale\n', '    address public wallet;\n', '\n', '    // How many token units a buyer gets per wei\n', '    uint256 public rate;\n', '\n', '    uint256 public minimumInvest; // in wei\n', '\n', '    uint256 public softCap; // in wei\n', '    uint256 public hardCap; // in wei\n', '\n', '    // investors => amount of money\n', '    mapping(address => uint) public balances;\n', '\n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '\n', '    // PreSale bonus in percent\n', '    uint256 bonusPercent;\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    function PreSale(\n', '        address _token) public\n', '    {\n', '\n', '        startTime = 1525251600;\n', '        endTime = startTime + 80 minutes;\n', '\n', '        wallet = 0xA298811CB7809fe48D74ad571B8a6025F142c3C7;\n', '        token = RicoToken(_token);\n', '        tokenContractAddress = _token;\n', '\n', '        // minimumInvest in wei\n', '        minimumInvest = 1000000000000;\n', '\n', '        // 1 token for approximately 0.00015 eth\n', '        rate = 1000;\n', '\n', '        softCap = 150 * 0.000001 ether;\n', '        hardCap = 1500 * 0.000001 ether;\n', '        bonusPercent = 50;\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    modifier saleIsOn() {\n', '        bool withinPeriod = now >= startTime && now <= endTime;\n', '        require(withinPeriod);\n', '        _;\n', '    }\n', '\n', '    modifier isUnderHardCap() {\n', '        require(weiRaised < hardCap);\n', '        _;\n', '    }\n', '\n', '    modifier refundAllowed() {\n', '        require(weiRaised < softCap && now > endTime);\n', '        _;\n', '    }\n', '\n', '    // @return true if PreSale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return now > endTime;\n', '    }\n', '\n', '    // Refund ether to the investors (invoke from only token)\n', '    function refund(address _to) public refundAllowed {\n', '        require(msg.sender == tokenContractAddress);\n', '\n', '        uint256 valueToReturn = balances[_to];\n', '\n', '        // update states\n', '        balances[_to] = 0;\n', '        weiRaised = weiRaised.sub(valueToReturn);\n', '\n', '        _to.transfer(valueToReturn);\n', '    }\n', '\n', '    // Get amount of tokens\n', '    // @param value weis paid for tokens\n', '    function getTokenAmount(uint256 _value) internal view returns (uint256) {\n', '        return _value.mul(rate);\n', '    }\n', '\n', '    // Send weis to the wallet\n', '    function forwardFunds(uint256 _value) internal {\n', '        wallet.transfer(_value);\n', '    }\n', '\n', '    // Success finish of PreSale\n', '    function finishPreSale() public onlyOwner {\n', '        require(weiRaised >= softCap);\n', '        require(weiRaised >= hardCap || now > endTime);\n', '\n', '        if (now < endTime) {\n', '            endTime = now;\n', '        }\n', '\n', '        forwardFunds(this.balance);\n', '        token.transferOwnership(owner);\n', '    }\n', '\n', '    // Change owner of token after end of PreSale if Soft Cap has not raised\n', '    function changeTokenOwner() public onlyOwner {\n', '        require(now > endTime && weiRaised < softCap);\n', '        token.transferOwnership(owner);\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address _beneficiary) saleIsOn isUnderHardCap nonReentrant public payable {\n', '        require(_beneficiary != address(0));\n', '        require(msg.value >= minimumInvest);\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 tokens = getTokenAmount(weiAmount);\n', '        tokens = tokens.add(tokens.mul(bonusPercent).div(100));\n', '\n', '        token.mint(_beneficiary, tokens);\n', '\n', '        // update states\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        balances[_beneficiary] = balances[_beneficiary].add(weiAmount);\n', '\n', '        TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '    }\n', '\n', '    function() external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '}']
