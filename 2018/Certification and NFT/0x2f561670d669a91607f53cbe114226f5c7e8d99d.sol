['pragma solidity ^0.4.22;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract EstateParticipationUnit  \n', '{\n', '    using SafeMath for uint256;  \n', '    \n', '    enum VoteType\n', '    {\n', '        NONE,\n', '        ALLOW_TRANSFER,\n', '        CHANGE_ADMIN_WALLET,\n', '        CHANGE_BUY_SELL_LIMITS,\n', '        CHANGE_BUY_SELL_PRICE,\n', '        SEND_WEI_FROM_EXCHANGE,\n', '        SEND_WEI_FROM_PAYMENT,\n', '        TRANSFER_EXCHANGE_WEI_TO_PAYMENT,\n', '        START_PAYMENT\n', '    }\n', '    \n', '    struct VoteData\n', '    {\n', '        bool voteYes;\n', '        bool voteCancel;\n', '        address person;\n', '        uint lastVoteId;\n', '    }\n', '    \n', '    struct PaymentData\n', '    {\n', '        uint weiTotal;\n', '        uint weiReceived;\n', '        uint unitsTotal;\n', '        uint unitsReceived;\n', '        uint weiForSingleUnit;\n', '    }\n', '    \n', '    struct BalanceData\n', '    {\n', '        uint balance;\n', '        uint transferAllowed;\n', '        uint balancePaymentSeries;\n', '        VoteData vote;\n', '        mapping (address => uint) allowed;\n', '        bytes32 paymentBalances;\n', '    }\n', '    \n', '    struct ChangeBuySellPriceVoteData\n', '    {\n', '        bool ignoreSecurityLimits;\n', '        uint buyPrice;\n', '        uint buyAddUnits;\n', '        uint sellPrice;\n', '        uint sellAddUnits;\n', '    }\n', '    \n', '    struct AllowTransferVoteData\n', '    {\n', '        address addressTo;\n', '        uint amount;\n', '    }\n', '    \n', '    struct ChangeAdminAddressVoteData\n', '    {\n', '        uint index;\n', '        address adminAddress;\n', '    }\n', '    \n', '    struct ChangeBuySellLimitsVoteData\n', '    {\n', '        uint buyPriceMin;\n', '        uint buyPriceMax;\n', '        uint sellPriceMin;\n', '        uint sellPriceMax;\n', '    }\n', '    \n', '    struct SendWeiFromExchangeVoteData\n', '    {\n', '        address addressTo;\n', '        uint amount;\n', '    }\n', '    \n', '    struct SendWeiFromPaymentVoteData\n', '    {\n', '        address addressTo;\n', '        uint amount;\n', '    }\n', '    \n', '    struct TransferWeiFromExchangeToPaymentVoteData\n', '    {\n', '        bool reverse;\n', '        uint amount;\n', '    }\n', '    \n', '    struct StartPaymentVoteData\n', '    {\n', '        uint weiToShare;\n', '        uint date;\n', '    }\n', '    \n', '    struct PriceSumData\n', '    {\n', '        uint price;\n', '        uint amount;\n', '    }\n', '    \n', '    modifier onlyAdmin()\n', '    {\n', '        require (isAdmin(msg.sender));\n', '        _;\n', '    }\n', '    \n', '    address private mainBalanceAdmin;\n', '    address private buyBalanceAdmin;\n', '    address private sellBalanceAdmin;\n', '    string public constant name = "Estate Participation Unit";\n', '    string public constant symbol = "EPU";\n', '    uint8 public constant decimals = 0;\n', '    uint public amountOfUnitsOutsideAdminWallet = 0;\n', '    uint private constant maxUnits = 200000000;\n', '    uint public paymentNumber = 0;\n', '    uint public paymentSortId = 0;\n', '    uint private paymentSeries = 0;\n', '    bytes32 private paymentHistory;\n', '    uint public weiForPayment = 0;\n', '    uint public totalAmountOfWeiPaidToUsers = 0;\n', '    uint private totalAmountOfWeiPaidToUsersPerSeries = 0;\n', '    uint private totalAmountOfWeiOnPaymentsPerSeries = 0;\n', '    uint public lastPaymentDate;\n', '    \n', '    uint private weiBuyPrice = 50000000000000000;\n', '    uint private securityWeiBuyPriceFrom = 0;\n', '    uint private securityWeiBuyPriceTo = 0;\n', '    \n', '    uint private weiSellPrice = 47000000000000000;\n', '    uint public unitsToSell = 0;\n', '    uint private securityWeiSellPriceFrom = 0;\n', '    uint private securityWeiSellPriceTo = 0;\n', '    uint public weiFromExchange = 0;\n', '    \n', '    PriceSumData private buySum;\n', '    PriceSumData private sellSum;\n', '    \n', '    uint private voteId = 0;\n', '    bool private voteInProgress;\n', '    uint private votesTotalYes;\n', '    uint private votesTotalNo;\n', '    uint private voteCancel;\n', '    \n', '    AllowTransferVoteData private allowTransferVoteData;\n', '    ChangeAdminAddressVoteData private changeAdminAddressVoteData;\n', '    ChangeBuySellLimitsVoteData private changeBuySellLimitsVoteData;\n', '    ChangeBuySellPriceVoteData private changeBuySellPriceVoteData;\n', '    SendWeiFromExchangeVoteData private sendWeiFromExchangeVoteData;\n', '    SendWeiFromPaymentVoteData private sendWeiFromPaymentVoteData;\n', '    TransferWeiFromExchangeToPaymentVoteData private transferWeiFromExchangeToPaymentVoteData;\n', '    StartPaymentVoteData private startPaymentVoteData;\n', '    \n', '    VoteType private voteType = VoteType.NONE;\n', '    \n', '    mapping(address => BalanceData) private balances;\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint units);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event OnEmitNewUnitsFromMainWallet(uint units, uint totalOutside);\n', '    event OnAddNewUnitsToMainWallet(uint units, uint totalOutside);\n', '    event NewPayment(uint indexed index, uint totalWei, uint totalUnits, uint date);\n', '    event PaymentReceived(address indexed owner, uint paymentId, uint weiAmount, uint units);\n', '    event UnitsBuy(address indexed buyer, uint amount);\n', '    event UnitsSell(address indexed seller, uint amount);\n', '    event OnExchangeBuyUpdate(uint newValue, uint unitsToBuy);\n', '    event OnExchangeSellUpdate(uint newValue, uint unitsToSell);\n', '    \n', '    modifier startVoting\n', '    {\n', '        require(voteType == VoteType.NONE);\n', '        _;\n', '    }\n', '    \n', '    constructor(\n', '        uint paymentOffset,\n', '        address mainBalanceAdminAddress, \n', '        address buyBalanceAdminAddress, \n', '        address sellBalanceAdminAddress\n', '    ) \n', '    payable\n', '    public\n', '    {\n', '        paymentNumber = paymentOffset;\n', '        mainBalanceAdmin = mainBalanceAdminAddress;\n', '        buyBalanceAdmin = buyBalanceAdminAddress;\n', '        sellBalanceAdmin = sellBalanceAdminAddress;\n', '        BalanceData storage b = balances[mainBalanceAdminAddress];\n', '        b.balance = maxUnits;\n', '        weiForPayment = weiForPayment.add(msg.value);\n', '    }\n', '    \n', '    function  getAdminAccounts()\n', '    external onlyAdmin view\n', '    returns(\n', '        address mainBalanceAdminAddress, \n', '        address buyBalanceAdminAddress, \n', '        address sellBalanceAdminAddress\n', '    )\n', '    {\n', '        mainBalanceAdminAddress = mainBalanceAdmin;\n', '        buyBalanceAdminAddress = buyBalanceAdmin;\n', '        sellBalanceAdminAddress = sellBalanceAdmin;\n', '    }\n', '    \n', '    function getBuySellSum()\n', '    external onlyAdmin view\n', '    returns(\n', '        uint buyPrice,\n', '        uint buyAmount,\n', '        uint sellPrice,\n', '        uint sellAmount\n', '    )\n', '    {\n', '        buyPrice = buySum.price;\n', '        buyAmount = buySum.amount;\n', '        sellPrice = sellSum.price;\n', '        sellAmount = sellSum.amount;\n', '    }\n', '    \n', '    function getSecurityLimits() \n', '    external view \n', '    returns(\n', '        uint buyPriceFrom, \n', '        uint buyPriceTo, \n', '        uint sellPriceFrom, \n', '        uint sellPriceTo\n', '    )\n', '    {\n', '        buyPriceFrom = securityWeiBuyPriceFrom;\n', '        buyPriceTo = securityWeiBuyPriceTo;\n', '        sellPriceFrom = securityWeiSellPriceFrom;\n', '        sellPriceTo = securityWeiSellPriceTo;\n', '    }\n', '    \n', '    function getThisAddress() \n', '    external view \n', '    returns (address)\n', '    {\n', '        return address(this);\n', '    }\n', '    \n', '    function() payable external \n', '    {\n', '        weiForPayment = weiForPayment.add(msg.value);\n', '    }\n', '    \n', '     function startVotingForAllowTransfer(\n', '         address addressTo, \n', '         uint amount\n', '    )\n', '        external onlyAdmin startVoting\n', '    {\n', '        voteType = VoteType.ALLOW_TRANSFER;\n', '        allowTransferVoteData.addressTo = addressTo;\n', '        allowTransferVoteData.amount = amount;\n', '        internalStartVoting();\n', '    }\n', '    \n', '    function startVotingForChangeAdminAddress(\n', '        uint index, \n', '        address adminAddress\n', '    )\n', '        external onlyAdmin startVoting\n', '    {\n', '        require(!isAdmin(adminAddress));\n', '        voteType = VoteType.CHANGE_ADMIN_WALLET;\n', '        changeAdminAddressVoteData.index = index;\n', '        changeAdminAddressVoteData.adminAddress = adminAddress;\n', '        internalStartVoting();\n', '    }\n', '    \n', '    function startVotingForChangeBuySellLimits(\n', '        uint buyPriceMin, \n', '        uint buyPriceMax, \n', '        uint sellPriceMin, \n', '        uint sellPriceMax\n', '    )\n', '        external onlyAdmin startVoting\n', '    {\n', '        if(buyPriceMin > 0 && buyPriceMax > 0)\n', '        {\n', '            require(buyPriceMin < buyPriceMax);\n', '        }\n', '        if(sellPriceMin > 0 && sellPriceMax > 0)\n', '        {\n', '            require(sellPriceMin < sellPriceMax);\n', '        }\n', '        if(buyPriceMin > 0 && sellPriceMax > 0)\n', '        {\n', '            require(buyPriceMin >= sellPriceMax);\n', '        }\n', '        voteType = VoteType.CHANGE_BUY_SELL_LIMITS;\n', '        changeBuySellLimitsVoteData.buyPriceMin = buyPriceMin;\n', '        changeBuySellLimitsVoteData.buyPriceMax = buyPriceMax;\n', '        changeBuySellLimitsVoteData.sellPriceMin = sellPriceMin;\n', '        changeBuySellLimitsVoteData.sellPriceMax = sellPriceMax;\n', '        internalStartVoting();\n', '    }\n', '    \n', '    function startVotingForChangeBuySellPrice(\n', '        uint buyPrice, \n', '        uint buyAddUnits, \n', '        uint sellPrice, \n', '        uint sellAddUnits, \n', '        bool ignoreSecurityLimits\n', '    )\n', '        external onlyAdmin startVoting\n', '    {\n', '        require(buyPrice >= sellPrice);\n', '        require(sellAddUnits * sellPrice <= weiFromExchange);\n', '        voteType = VoteType.CHANGE_BUY_SELL_PRICE;\n', '        changeBuySellPriceVoteData.buyPrice = buyPrice;\n', '        changeBuySellPriceVoteData.buyAddUnits = buyAddUnits;\n', '        changeBuySellPriceVoteData.sellPrice = sellPrice;\n', '        changeBuySellPriceVoteData.sellAddUnits = sellAddUnits;\n', '        changeBuySellPriceVoteData.ignoreSecurityLimits = ignoreSecurityLimits;\n', '        internalStartVoting();\n', '    }\n', '    \n', '    function startVotingForSendWeiFromExchange(\n', '        address addressTo, \n', '        uint amount\n', '    )\n', '        external onlyAdmin startVoting\n', '    {\n', '        require(amount <= weiFromExchange);\n', '        voteType = VoteType.SEND_WEI_FROM_EXCHANGE;\n', '        sendWeiFromExchangeVoteData.addressTo = addressTo;\n', '        sendWeiFromExchangeVoteData.amount = amount;\n', '        internalStartVoting();\n', '    }\n', '    \n', '    function startVotingForSendWeiFromPayment(\n', '        address addressTo, \n', '        uint amount\n', '    )\n', '        external onlyAdmin startVoting\n', '    {\n', '        uint balance = address(this).balance.sub(weiFromExchange);\n', '        require(amount <= balance && amount <= weiForPayment);\n', '        voteType = VoteType.SEND_WEI_FROM_PAYMENT;\n', '        sendWeiFromPaymentVoteData.addressTo = addressTo;\n', '        sendWeiFromPaymentVoteData.amount = amount;\n', '        internalStartVoting();\n', '    }\n', '    \n', '    function startVotingForTransferWeiFromExchangeToPayment(\n', '        bool reverse,\n', '        uint amount\n', '    )\n', '        external onlyAdmin startVoting\n', '    {\n', '        if(reverse)\n', '        {\n', '            require(amount <= weiForPayment);\n', '        }\n', '        else\n', '        {\n', '            require(amount <= weiFromExchange);\n', '        }\n', '        voteType = VoteType.TRANSFER_EXCHANGE_WEI_TO_PAYMENT; \n', '        transferWeiFromExchangeToPaymentVoteData.reverse = reverse;\n', '        transferWeiFromExchangeToPaymentVoteData.amount = amount;\n', '        internalStartVoting();\n', '    }\n', '    \n', '    function startVotingForStartPayment(\n', '        uint weiToShare,\n', '        uint date\n', '    )\n', '        external onlyAdmin startVoting\n', '    {\n', '        require(weiToShare > 0 && weiToShare <= weiForPayment);\n', '        voteType = VoteType.START_PAYMENT;\n', '        startPaymentVoteData.weiToShare = weiToShare;\n', '        startPaymentVoteData.date = date;\n', '        internalStartVoting();\n', '    }\n', '    \n', '     function voteForCurrent(bool voteYes)\n', '        external onlyAdmin\n', '    {\n', '        require(voteType != VoteType.NONE);\n', '        VoteData storage d = balances[msg.sender].vote;\n', '        // already voted\n', '        if(d.lastVoteId == voteId)\n', '        {\n', '            // ...but changed mind\n', '            if(voteYes != d.voteYes)\n', '            {\n', '                if(voteYes)\n', '                {\n', '                    votesTotalYes = votesTotalYes.add(1);\n', '                    votesTotalNo = votesTotalNo.sub(1);\n', '                }\n', '                else\n', '                {\n', '                    votesTotalYes = votesTotalYes.sub(1);\n', '                    votesTotalNo = votesTotalNo.add(1);\n', '                }\n', '            }\n', '        }\n', '        // a new vote\n', "        // adding 'else' costs more gas\n", '        if(d.lastVoteId < voteId)\n', '        {\n', '            if(voteYes)\n', '            {\n', '                votesTotalYes = votesTotalYes.add(1);\n', '            }\n', '            else\n', '            {\n', '                votesTotalNo = votesTotalNo.add(1);\n', '            }\n', '        }\n', '        // 5 / 10 means something is voted out\n', '        if(votesTotalYes.mul(10).div(3) > 5)\n', '        {\n', "            // adding 'else' for each vote type costs more gas\n", '            if(voteType == VoteType.ALLOW_TRANSFER)\n', '            {\n', '                internalAllowTransfer(\n', '                    allowTransferVoteData.addressTo, \n', '                    allowTransferVoteData.amount\n', '                );\n', '            }\n', '            if(voteType == VoteType.CHANGE_ADMIN_WALLET)\n', '            {\n', '                internalChangeAdminWallet(\n', '                    changeAdminAddressVoteData.index, \n', '                    changeAdminAddressVoteData.adminAddress\n', '                );\n', '            }\n', '            if(voteType == VoteType.CHANGE_BUY_SELL_LIMITS)\n', '            {\n', '                internalChangeBuySellLimits(\n', '                    changeBuySellLimitsVoteData.buyPriceMin, \n', '                    changeBuySellLimitsVoteData.buyPriceMax, \n', '                    changeBuySellLimitsVoteData.sellPriceMin, \n', '                    changeBuySellLimitsVoteData.sellPriceMax\n', '                );\n', '            }\n', '            if(voteType == VoteType.CHANGE_BUY_SELL_PRICE)\n', '            {\n', '                internalChangeBuySellPrice(\n', '                    changeBuySellPriceVoteData.buyPrice, \n', '                    changeBuySellPriceVoteData.buyAddUnits, \n', '                    changeBuySellPriceVoteData.sellPrice, \n', '                    changeBuySellPriceVoteData.sellAddUnits,\n', '                    changeBuySellPriceVoteData.ignoreSecurityLimits\n', '                );\n', '            }\n', '            if(voteType == VoteType.SEND_WEI_FROM_EXCHANGE)\n', '            {\n', '                internalSendWeiFromExchange(\n', '                    sendWeiFromExchangeVoteData.addressTo, \n', '                    sendWeiFromExchangeVoteData.amount\n', '                );\n', '            }\n', '            if(voteType == VoteType.SEND_WEI_FROM_PAYMENT)\n', '            {\n', '                internalSendWeiFromPayment(\n', '                    sendWeiFromPaymentVoteData.addressTo, \n', '                    sendWeiFromPaymentVoteData.amount\n', '                );\n', '            }\n', '            if(voteType == VoteType.TRANSFER_EXCHANGE_WEI_TO_PAYMENT)\n', '            {\n', '                internalTransferExchangeWeiToPayment(\n', '                    transferWeiFromExchangeToPaymentVoteData.reverse,\n', '                    transferWeiFromExchangeToPaymentVoteData.amount\n', '                );\n', '            }\n', '            if(voteType == VoteType.START_PAYMENT)\n', '            {\n', '                internalStartPayment(\n', '                    startPaymentVoteData.weiToShare,\n', '                    startPaymentVoteData.date\n', '                );\n', '            }\n', '            voteType = VoteType.NONE;\n', '            internalResetVotingData();\n', '        }\n', '        if(votesTotalNo.mul(10).div(3) > 5)\n', '        {\n', '            voteType = VoteType.NONE;\n', '            internalResetVotingData();\n', '        }\n', '        d.voteYes = voteYes;\n', '        d.lastVoteId = voteId;\n', '    }\n', '    \n', '    function voteCancelCurrent() \n', '        external onlyAdmin\n', '    {\n', '        require(voteType != VoteType.NONE);\n', '        VoteData storage d = balances[msg.sender].vote;\n', '        if(d.lastVoteId <= voteId || !d.voteCancel)\n', '        {\n', '            d.voteCancel = true;\n', '            d.lastVoteId = voteId;\n', '            voteCancel++;\n', '        }\n', '        uint votesCalc = voteCancel.mul(10);\n', '        // 3 admins\n', '        votesCalc = votesCalc.div(3);\n', '        // 5 / 10 means something is voted out\n', '        if(votesCalc > 5)\n', '        {\n', '            voteType = VoteType.NONE;\n', '            internalResetVotingData();\n', '        }\n', '    }\n', '    \n', '    function addEthForSell() \n', '        external payable onlyAdmin\n', '    {\n', '        require(msg.value > 0);\n', '        weiFromExchange = weiFromExchange.add(msg.value);\n', '    }\n', '    \n', '    function addEthForPayment() \n', '        external payable\n', '    {\n', '        weiForPayment = weiForPayment.add(msg.value);\n', '    }\n', '    \n', '    function buyEPU() \n', '    public payable\n', '    {\n', '        // how many units has client bought\n', '        uint amount = msg.value.div(weiBuyPrice);\n', '        uint b = balances[buyBalanceAdmin].balance;\n', "        // can't buy more than main account balance\n", '        if(amount >= b)\n', '        {\n', '            amount = b;\n', '        }\n', '        // the needed price for bought units\n', '        uint price = amount.mul(weiBuyPrice);\n', '        weiFromExchange = weiFromExchange.add(price);\n', '        if(amount > 0)\n', '        {\n', '            buySum.price = buySum.price.add(price);\n', '            buySum.amount = buySum.amount.add(amount);\n', '            internalAllowTransfer(msg.sender, amount);\n', '           // send units to client\n', '            internalTransfer(buyBalanceAdmin, msg.sender, amount);\n', '            // emit event\n', '            emit UnitsBuy(msg.sender, amount);\n', '            //buyBalanceAdmin.transfer(price); \n', '        }\n', '        // if client sent more than needed\n', '        if(msg.value > price)\n', '        {\n', '            // send him the rest back\n', '            msg.sender.transfer(msg.value.sub(price));\n', '        }\n', '    }\n', '    \n', '    function sellEPU(uint amount) \n', '        external payable \n', '        returns(uint revenue)\n', '    {\n', '        require(amount > 0);\n', '        uint fixedAmount = amount;\n', '        BalanceData storage b = balances[msg.sender];\n', '        uint balance = b.balance;\n', '        uint max = balance < unitsToSell ? balance : unitsToSell;\n', '        if(fixedAmount > max)\n', '        {\n', '            fixedAmount = max;\n', '        }\n', '        uint price = fixedAmount.mul(weiSellPrice);\n', '        require(price > 0 && price <= weiFromExchange);\n', '        sellSum.price = sellSum.price.add(price);\n', '        sellSum.amount = sellSum.amount.add(amount);\n', '        internalTransfer(msg.sender, sellBalanceAdmin, fixedAmount);\n', '        weiFromExchange = weiFromExchange.sub(price);\n', '        emit UnitsSell(msg.sender, fixedAmount);\n', '        msg.sender.transfer(price);\n', '        return price;\n', '    }\n', '    \n', '    function checkPayment() \n', '        external\n', '    {\n', '        internalCheckPayment(msg.sender);\n', '    }\n', '    \n', '    function checkPaymentFor(\n', '        address person\n', '    )\n', '        external\n', '    {\n', '        internalCheckPayment(person);\n', '    }\n', '    \n', '    function accountData() \n', '        external view \n', '        returns (\n', '            uint unitsBalance, \n', '            uint payableUnits, \n', '            uint totalWeiToReceive, \n', '            uint weiBuyPriceForUnit, \n', '            uint buyUnitsLeft, \n', '            uint weiSellPriceForUnit, \n', '            uint sellUnitsLeft\n', '        )\n', '    {\n', '        BalanceData storage b = balances[msg.sender];\n', '        unitsBalance = b.balance;\n', '        if(b.balancePaymentSeries < paymentSeries)\n', '        {\n', '            payableUnits = unitsBalance;\n', '            for(uint i = 0; i <= paymentSortId; i++)\n', '            {\n', '                totalWeiToReceive = totalWeiToReceive.add(getPaymentWeiPerUnit(i).mul(payableUnits));\n', '            }\n', '        }\n', '        else\n', '        {\n', '            (totalWeiToReceive, payableUnits) = getAddressWeiFromPayments(b);\n', '        }\n', '        weiBuyPriceForUnit = weiBuyPrice;\n', '        buyUnitsLeft = balances[buyBalanceAdmin].balance;\n', '        weiSellPriceForUnit = weiSellPrice;\n', '        sellUnitsLeft = unitsToSell;\n', '    }\n', '    \n', '    function getBuyUnitsInformations() \n', '        external view \n', '        returns(\n', '            uint weiBuyPriceForUnit, \n', '            uint unitsLeft\n', '        )\n', '    {\n', '        weiBuyPriceForUnit = weiBuyPrice;\n', '        unitsLeft = balances[buyBalanceAdmin].balance;\n', '    }\n', '    \n', '    function getSellUnitsInformations() \n', '        external view \n', '        returns(\n', '            uint weiSellPriceForUnit, \n', '            uint unitsLeft\n', '        )\n', '    {\n', '        weiSellPriceForUnit = weiSellPrice;\n', '        unitsLeft = unitsToSell;\n', '    }\n', '    \n', '    function checkVotingForAllowTransfer() \n', '        external view onlyAdmin \n', '        returns(\n', '            address allowTo, \n', '            uint amount, \n', '            uint votesYes, \n', '            uint votesNo, \n', '            bool stillActive\n', '        )\n', '    {\n', '        require(voteType == VoteType.ALLOW_TRANSFER);\n', '        return (\n', '            allowTransferVoteData.addressTo, \n', '            allowTransferVoteData.amount, \n', '            votesTotalYes, \n', '            votesTotalNo, \n', '            voteType == VoteType.ALLOW_TRANSFER\n', '        );\n', '    }\n', '    \n', '    function checkVotingForChangeAdminAddress() \n', '        external view onlyAdmin \n', '        returns(\n', '            uint adminId, \n', '            address newAdminAddress, \n', '            uint votesYes, \n', '            uint votesNo, \n', '            bool stillActive\n', '        )\n', '    {\n', '        require(voteType == VoteType.CHANGE_ADMIN_WALLET);\n', '        return (\n', '            changeAdminAddressVoteData.index, \n', '            changeAdminAddressVoteData.adminAddress, \n', '            votesTotalYes, \n', '            votesTotalNo, \n', '            voteType == VoteType.CHANGE_ADMIN_WALLET\n', '        );\n', '    }\n', '    \n', '    function checkVotingForChangeBuySellLimits() \n', '        external view onlyAdmin \n', '        returns(\n', '            uint buyPriceMin, \n', '            uint buyPriceMax, \n', '            uint sellPriceMin, \n', '            uint sellPriceMax, \n', '            uint votesYes, \n', '            uint votesNo, \n', '            bool stillActive\n', '        )\n', '    {\n', '        require(voteType == VoteType.CHANGE_BUY_SELL_LIMITS);\n', '        return (\n', '            changeBuySellLimitsVoteData.buyPriceMin,\n', '            changeBuySellLimitsVoteData.buyPriceMax, \n', '            changeBuySellLimitsVoteData.sellPriceMin, \n', '            changeBuySellLimitsVoteData.sellPriceMax, \n', '            votesTotalYes, \n', '            votesTotalNo, \n', '            voteType == VoteType.CHANGE_BUY_SELL_LIMITS\n', '        );\n', '    }\n', '    \n', '    function checkVotingForChangeBuySellPrice() \n', '        external view onlyAdmin\n', '        returns(\n', '            uint buyPrice, \n', '            uint buyAddUnits, \n', '            uint sellPrice, \n', '            uint sellAddUnits, \n', '            bool ignoreSecurityLimits, \n', '            uint votesYes, \n', '            uint votesNo, \n', '            bool stillActive\n', '        )\n', '    {\n', '        require(voteType == VoteType.CHANGE_BUY_SELL_PRICE);\n', '        return (\n', '            changeBuySellPriceVoteData.buyPrice, \n', '            changeBuySellPriceVoteData.buyAddUnits, \n', '            changeBuySellPriceVoteData.sellPrice, \n', '            changeBuySellPriceVoteData.sellAddUnits, \n', '            changeBuySellPriceVoteData.ignoreSecurityLimits, \n', '            votesTotalYes, \n', '            votesTotalNo, \n', '            voteType == VoteType.CHANGE_BUY_SELL_PRICE\n', '        );\n', '    }\n', '    \n', '    function checkVotingForSendWeiFromExchange() \n', '        external view onlyAdmin \n', '        returns(\n', '            address addressTo, \n', '            uint weiAmount, \n', '            uint votesYes, \n', '            uint votesNo, \n', '            bool stillActive\n', '        )\n', '    {\n', '        require(voteType == VoteType.SEND_WEI_FROM_EXCHANGE);\n', '        return (\n', '            sendWeiFromExchangeVoteData.addressTo, \n', '            sendWeiFromExchangeVoteData.amount, \n', '            votesTotalYes, \n', '            votesTotalNo, \n', '            voteType == VoteType.SEND_WEI_FROM_EXCHANGE\n', '        );\n', '    }\n', '    \n', '    function checkVotingForSendWeiFromPayment() \n', '        external view onlyAdmin\n', '        returns(\n', '            address addressTo, \n', '            uint weiAmount, \n', '            uint votesYes, \n', '            uint votesNo, \n', '            bool stillActive\n', '        )\n', '    {\n', '        require(voteType == VoteType.SEND_WEI_FROM_PAYMENT);\n', '        return (\n', '            sendWeiFromPaymentVoteData.addressTo, \n', '            sendWeiFromPaymentVoteData.amount, \n', '            votesTotalYes, \n', '            votesTotalNo, \n', '            voteType == VoteType.SEND_WEI_FROM_PAYMENT\n', '        );\n', '    }\n', '    \n', '    function checkVotingForTransferWeiFromExchangeToPayment() \n', '        external view onlyAdmin\n', '        returns (\n', '            bool reverse,\n', '            uint amount, \n', '            uint votesYes, \n', '            uint votesNo, \n', '            bool stillActive\n', '        )\n', '    {\n', '        require(voteType == VoteType.TRANSFER_EXCHANGE_WEI_TO_PAYMENT);\n', '        return (\n', '            transferWeiFromExchangeToPaymentVoteData.reverse,\n', '            transferWeiFromExchangeToPaymentVoteData.amount, \n', '            votesTotalYes, \n', '            votesTotalNo, \n', '            voteType == VoteType.TRANSFER_EXCHANGE_WEI_TO_PAYMENT\n', '        );\n', '    }\n', '    \n', '    function checkVotingForStartPayment() \n', '        external view onlyAdmin \n', '        returns(\n', '            uint weiToShare, \n', '            uint date,\n', '            uint votesYes, \n', '            uint votesNo, \n', '            bool stillActive\n', '        )\n', '    {\n', '        require(voteType == VoteType.START_PAYMENT);\n', '        return (\n', '            startPaymentVoteData.weiToShare, \n', '            startPaymentVoteData.date,\n', '            votesTotalYes, \n', '            votesTotalNo, \n', '            voteType == VoteType.START_PAYMENT\n', '        );\n', '    }\n', '    \n', '    \n', '    function totalSupply() \n', '        public constant \n', '        returns (uint)\n', '    {\n', '        return maxUnits - balances[mainBalanceAdmin].balance;\n', '    }\n', '    \n', '    \n', '     //  important to display balance in the wallet.\n', '    function balanceOf(address unitOwner) \n', '        public constant \n', '        returns (uint balance) \n', '    {\n', '        balance = balances[unitOwner].balance;\n', '    }\n', '    \n', '    function transferFrom(\n', '        address from, \n', '        address to, uint units\n', '    ) \n', '        public \n', '        returns (bool success) \n', '    {\n', '        BalanceData storage b = balances[from];\n', '        uint a = b.allowed[msg.sender];\n', '        a = a.sub(units);\n', '        b.allowed[msg.sender] = a;\n', '        success = internalTransfer(from, to, units);\n', '    }\n', '    \n', '    function approve(\n', '        address spender, \n', '        uint units\n', '    ) \n', '        public \n', '        returns (bool success) \n', '    {\n', '        balances[msg.sender].allowed[spender] = units;\n', '        emit Approval(msg.sender, spender, units);\n', '        success = true;\n', '    }\n', '    \n', '    function allowance(\n', '        address unitOwner, \n', '        address spender\n', '    ) \n', '        public constant \n', '        returns (uint remaining) \n', '    {\n', '        remaining = balances[unitOwner].allowed[spender];\n', '    }\n', '    \n', '    function transfer(\n', '        address to, \n', '        uint value\n', '    ) \n', '        public \n', '        returns (bool success)\n', '    {\n', '        return internalTransfer(msg.sender, to, value);\n', '    }\n', '    \n', '    function getMaskForPaymentBytes() private pure returns(bytes32)\n', '    {\n', '        return bytes32(uint(2**32 - 1));\n', '    }\n', '    \n', '    function getPaymentBytesIndexSize(uint index) private pure returns (uint)\n', '    {\n', '        return 32 * index;\n', '    }\n', '    \n', '    function getPaymentWeiPerUnit(uint index) private view returns(uint weiPerUnit)\n', '    {\n', '        bytes32 mask = getMaskForPaymentBytes();\n', '        uint offsetIndex = getPaymentBytesIndexSize(index);\n', '        mask = shiftLeft(mask, offsetIndex);\n', '        bytes32 before = paymentHistory & mask;\n', '        weiPerUnit = uint(shiftRight(before, offsetIndex)).mul(1000000000000);\n', '    }\n', '    \n', '    //bytes32 private dataBytes;\n', '    \n', '    function getMask() private pure returns (bytes32)\n', '    {\n', '        return bytes32(uint(2**32 - 1));\n', '    }\n', '    \n', '    function getBitIndex(uint index) private pure returns (uint)\n', '    {\n', '        return 32 * index;\n', '    }\n', '    \n', '    function shiftLeft (bytes32 a, uint n) private pure returns (bytes32) \n', '    {\n', '        uint shifted = uint(a) * 2 ** uint(n);\n', '        return bytes32(shifted);\n', '    }\n', '    \n', '    function shiftRight (bytes32 a, uint n) private pure returns (bytes32) \n', '    {\n', '        uint shifted = uint(a) / 2  ** uint(n);\n', '        return bytes32(shifted);\n', '    }\n', '    \n', '    function internalStartVoting() \n', '        private onlyAdmin\n', '    {\n', '        internalResetVotingData();\n', '        voteId = voteId.add(1);\n', '    }\n', '    \n', '    function internalResetVotingData() \n', '        private onlyAdmin\n', '    {\n', '        votesTotalYes = 0;\n', '        votesTotalNo = 0;\n', '        voteCancel = 0;\n', '    }\n', '    \n', '    function internalAllowTransfer(\n', '        address from, \n', '        uint amount\n', '    ) \n', '        private\n', '    {\n', '        BalanceData storage b = balances[from];\n', '        b.transferAllowed = b.transferAllowed.add(amount);\n', '    }\n', '    \n', '    function internalChangeAdminWallet(\n', '        uint index, \n', '        address addr\n', '    ) \n', '        private onlyAdmin\n', '    {\n', "        // adding 'else' for each index costs more gas\n", '        if(index == 0)\n', '        {\n', '            internalTransferAccount(mainBalanceAdmin, addr);\n', '            mainBalanceAdmin = addr;\n', '        }\n', '        if(index == 1)\n', '        {\n', '            internalTransferAccount(buyBalanceAdmin, addr);\n', '            buyBalanceAdmin = addr;\n', '        }\n', '        if(index == 2)\n', '        {\n', '            internalTransferAccount(sellBalanceAdmin, addr);\n', '            sellBalanceAdmin = addr;\n', '        }\n', '    }\n', '    \n', '    function internalAddBuyUnits(\n', '        uint price, \n', '        uint addUnits, \n', '        bool ignoreLimits\n', '    ) \n', '        private onlyAdmin\n', '    {\n', '        if(price > 0)\n', '        {\n', '            weiBuyPrice = price;\n', '            if(!ignoreLimits && securityWeiBuyPriceFrom > 0 && weiBuyPrice < securityWeiBuyPriceFrom)\n', '            {\n', '                weiBuyPrice = securityWeiBuyPriceFrom;\n', '            }\n', '            if(!ignoreLimits && securityWeiBuyPriceTo > 0 && weiBuyPrice > securityWeiBuyPriceTo)\n', '            {\n', '                weiBuyPrice = securityWeiBuyPriceTo;\n', '            }\n', '        }\n', '        if(addUnits > 0)\n', '        {\n', '            uint b = balances[mainBalanceAdmin].balance;\n', '            if(addUnits > b)\n', '            {\n', '                addUnits = b;\n', '            }\n', '            internalAllowTransfer(buyBalanceAdmin, addUnits);\n', '            internalTransfer(mainBalanceAdmin, buyBalanceAdmin, addUnits);\n', '        }\n', '        emit OnExchangeBuyUpdate(weiBuyPrice, balances[buyBalanceAdmin].balance);\n', '    }\n', '    \n', '    function internalAddSellUnits(\n', '        uint price, \n', '        uint addUnits, \n', '        bool ignoreLimits\n', '    ) \n', '        private onlyAdmin\n', '    {\n', '        if(price > 0)\n', '        {\n', '            weiSellPrice = price;\n', '            if(!ignoreLimits)\n', '            {\n', '                if(securityWeiSellPriceFrom > 0 && weiSellPrice < securityWeiSellPriceFrom)\n', '                {\n', '                    weiSellPrice = securityWeiSellPriceFrom;\n', '                }\n', '                if(securityWeiSellPriceTo > 0 && weiSellPrice > securityWeiSellPriceTo)\n', '                {\n', '                    weiSellPrice = securityWeiSellPriceTo;\n', '                }   \n', '            }\n', '        }\n', '        if(addUnits > 0)\n', '        {\n', '            unitsToSell = unitsToSell.add(addUnits);\n', '            //uint requireWei = unitsToSell * weiSellPrice;\n', '            uint maxUnitsAccountCanBuy = sellBalanceAdmin.balance.div(weiSellPrice);\n', '            if(unitsToSell > maxUnitsAccountCanBuy)\n', '            {\n', '                unitsToSell = maxUnitsAccountCanBuy;\n', '            }\n', '            //internalTransfer(mainBalanceAdmin, sellBalanceAdmin, unitsToSell);\n', '            //balances[mainBalanceAdmin] = balances[mainBalanceAdmin].sub(unitsToSell);\n', '        }\n', '        emit OnExchangeSellUpdate(weiSellPrice, unitsToSell);\n', '    }\n', '    \n', '    function internalChangeBuySellLimits(\n', '        uint buyPriceMin, \n', '        uint buyPriceMax, \n', '        uint sellPriceMin, \n', '        uint sellPriceMax\n', '    ) \n', '        private onlyAdmin\n', '    {\n', '        if(buyPriceMin > 0)\n', '        {\n', '            securityWeiBuyPriceFrom = buyPriceMin;\n', '        }\n', '        if(buyPriceMax > 0)\n', '        {\n', '            securityWeiBuyPriceTo = buyPriceMax;\n', '        }\n', '        if(sellPriceMin > 0)\n', '        {\n', '            securityWeiSellPriceFrom = sellPriceMin;\n', '        }\n', '        if(sellPriceMax > 0)\n', '        {\n', '            securityWeiSellPriceTo = sellPriceMax;\n', '        }\n', '    }\n', '    \n', '    function internalChangeBuySellPrice(\n', '        uint buyPrice, \n', '        uint buyAddUnits, \n', '        uint sellPrice, \n', '        uint sellAddUnits, \n', '        bool ignoreSecurityLimits\n', '    ) \n', '        private onlyAdmin\n', '    {\n', '        internalAddBuyUnits(buyPrice, buyAddUnits, ignoreSecurityLimits);\n', '        internalAddSellUnits(sellPrice, sellAddUnits, ignoreSecurityLimits);\n', '    }\n', '    \n', '    // Executed when there is too much wei on the exchange\n', '    function internalSendWeiFromExchange(\n', '        address addressTo, \n', '        uint amount\n', '    ) \n', '        private onlyAdmin\n', '    {\n', '        internalRemoveWeiFromExchange(amount);\n', '        addressTo.transfer(amount);\n', '    }\n', '    \n', '    function internalTransferExchangeWeiToPayment(bool reverse, uint amount)\n', '        private onlyAdmin\n', '    {\n', '        if(reverse)\n', '        {\n', '            weiFromExchange = weiFromExchange.add(amount);\n', '            weiForPayment = weiForPayment.sub(amount);\n', '        }\n', '        else\n', '        {\n', '            internalRemoveWeiFromExchange(amount);\n', '            weiForPayment = weiForPayment.add(amount);\n', '        }\n', '    }\n', '    \n', '    function internalRemoveWeiFromExchange(uint amount) \n', '        private onlyAdmin\n', '    {\n', '        weiFromExchange = weiFromExchange.sub(amount);\n', '        uint units = weiFromExchange.div(weiSellPrice);\n', '        if(units < unitsToSell)\n', '        {\n', '            unitsToSell = units;\n', '        }\n', '    }\n', '    \n', '    function internalSendWeiFromPayment(\n', '        address addressTo,\n', '        uint amount\n', '    ) \n', '        private onlyAdmin\n', '    {\n', '        weiForPayment = weiForPayment.sub(amount);\n', '        addressTo.transfer(amount);\n', '    }\n', '    \n', '    function getAmountOfUnitsOnPaymentId(\n', '        BalanceData storage b, \n', '        uint index\n', '    ) \n', '        private view\n', '        returns(uint)\n', '    {\n', '        bytes32 mask = getMask();\n', '        uint offsetIndex = getBitIndex(index);\n', '        mask = shiftLeft(mask, offsetIndex);\n', '        bytes32 before = b.paymentBalances & mask;\n', '        before = shiftRight(before, offsetIndex);\n', '        uint r = uint(before);\n', '        // special case of error\n', '        if(r > amountOfUnitsOutsideAdminWallet)\n', '        {\n', '            return 0;\n', '        }\n', '        return r;\n', '    }\n', '    \n', '    function setAmountOfUnitsOnPaymentId(\n', '        BalanceData storage b, \n', '        uint index,\n', '        uint value\n', '    )\n', '    private\n', '    {\n', '        bytes32 mask = getMask();\n', '        uint offsetIndex = getBitIndex(index);\n', '        mask = shiftLeft(mask, offsetIndex);\n', '        b.paymentBalances = (b.paymentBalances ^ mask) & b.paymentBalances;\n', '        bytes32 field = bytes32(value);\n', '        field = shiftLeft(field, offsetIndex);\n', '        b.paymentBalances = b.paymentBalances | field;\n', '    }\n', '    \n', '    function internalTransferAccount(\n', '        address addrA, \n', '        address addrB\n', '    ) \n', '        private onlyAdmin\n', '    {\n', '        if(addrA != 0x0 && addrB != 0x0)\n', '        {\n', '            BalanceData storage from = balances[addrA];\n', '            BalanceData storage to = balances[addrB];\n', '\n', '            if(from.balancePaymentSeries < paymentSeries)\n', '            {\n', '                from.paymentBalances = bytes32(0);\n', '                setAmountOfUnitsOnPaymentId(from, 0, from.balance);\n', '                from.balancePaymentSeries = paymentSeries;\n', '            }\n', '            \n', '            if(to.balancePaymentSeries < paymentSeries)\n', '            {\n', '                to.paymentBalances = bytes32(0);\n', '                setAmountOfUnitsOnPaymentId(to, 0, to.balance);\n', '                to.balancePaymentSeries = paymentSeries;\n', '            }\n', '\n', '            uint nextPaymentFirstUnits = getAmountOfUnitsOnPaymentId(from, 0);\n', '            setAmountOfUnitsOnPaymentId(from, 0, 0);\n', '            setAmountOfUnitsOnPaymentId(to, 1, nextPaymentFirstUnits);\n', '            for(uint i = 0; i <= 5; i++)\n', '            {\n', '                uint existingUnits = getAmountOfUnitsOnPaymentId(from, i);\n', '                existingUnits = existingUnits.add(getAmountOfUnitsOnPaymentId(to, i));\n', '                \n', '                setAmountOfUnitsOnPaymentId(from, i, 0);\n', '                setAmountOfUnitsOnPaymentId(to, i, existingUnits);\n', '            }\n', '            to.balance = to.balance.add(from.balance);\n', '            from.balance = 0;\n', '        }\n', '    }\n', '    \n', "    // metamask error with start payment? Ensure if it's not dividing by 0!\n", '    \n', '    function internalStartPayment(uint weiTotal, uint date) \n', '        private onlyAdmin\n', '    {\n', '        require(weiTotal >= amountOfUnitsOutsideAdminWallet);\n', '        paymentNumber = paymentNumber.add(1);\n', '        paymentSortId = paymentNumber % 6;\n', '        if(paymentSortId == 0)\n', '        {\n', '            paymentHistory = bytes32(0);\n', '            paymentSeries = paymentSeries.add(1);\n', '            \n', '            uint weiLeft = totalAmountOfWeiOnPaymentsPerSeries.sub(totalAmountOfWeiPaidToUsersPerSeries);\n', '            if(weiLeft > 0)\n', '            {\n', '                weiForPayment = weiForPayment.add(weiLeft);\n', '            }\n', '            totalAmountOfWeiPaidToUsersPerSeries = 0;\n', '            totalAmountOfWeiOnPaymentsPerSeries = 0;\n', '        }\n', '        buySum.price = 0;\n', '        buySum.amount = 0;\n', '        sellSum.price = 0;\n', '        sellSum.amount = 0;\n', '        bytes32 mask = getMaskForPaymentBytes();\n', '        uint offsetIndex = getPaymentBytesIndexSize(paymentSortId);\n', '        mask = shiftLeft(mask, offsetIndex);\n', '        paymentHistory = (paymentHistory ^ mask) & paymentHistory;\n', '        // amount of microether (1 / 1 000 000 eth)  per unit\n', '        bytes32 field = bytes32((weiTotal.div(1000000000000)).div(amountOfUnitsOutsideAdminWallet));\n', '        field = shiftLeft(field, offsetIndex);\n', '        paymentHistory = paymentHistory | field;\n', '        weiForPayment = weiForPayment.sub(weiTotal);\n', '        totalAmountOfWeiOnPaymentsPerSeries = totalAmountOfWeiOnPaymentsPerSeries.add(weiTotal);\n', '        internalCheckPayment(buyBalanceAdmin);\n', '        internalCheckPayment(sellBalanceAdmin);\n', '        lastPaymentDate = date;\n', '        emit NewPayment(paymentNumber, weiTotal, amountOfUnitsOutsideAdminWallet, lastPaymentDate);\n', '    }\n', '    \n', '    function internalCheckPayment(address person) \n', '        private\n', '    {\n', '        require(person != mainBalanceAdmin);\n', '        BalanceData storage b = balances[person];\n', '        if(b.balancePaymentSeries < paymentSeries)\n', '        {\n', '            b.balancePaymentSeries = paymentSeries;\n', '            b.paymentBalances = bytes32(b.balance);\n', '        }\n', '        (uint weiToSendSum, uint unitsReceived) = getAddressWeiFromPayments(b);\n', '        b.paymentBalances = bytes32(0);\n', '        setAmountOfUnitsOnPaymentId(b, paymentSortId.add(1), b.balance);\n', '        if(weiToSendSum > 0)\n', '        {\n', '            totalAmountOfWeiPaidToUsers = totalAmountOfWeiPaidToUsers.add(weiToSendSum);\n', '            totalAmountOfWeiPaidToUsersPerSeries = totalAmountOfWeiPaidToUsersPerSeries.add(weiToSendSum);\n', '            emit PaymentReceived(person, paymentNumber, weiToSendSum, unitsReceived);\n', '            person.transfer(weiToSendSum);   \n', '        }\n', '    }\n', '    \n', '    function getAddressWeiFromPayments(BalanceData storage b)\n', '        private view\n', '        returns(uint weiSum, uint unitsSum)\n', '    {\n', '        for(uint i = 0; i <= paymentSortId; i++)\n', '        {\n', '            unitsSum = unitsSum.add(getAmountOfUnitsOnPaymentId(b, i));\n', '            weiSum = weiSum.add(getPaymentWeiPerUnit(i).mul(unitsSum));\n', '        }\n', '    }\n', '    \n', '    function proceedTransferFromMainAdmin(BalanceData storage bT, uint value)\n', '        private\n', '    {\n', '        if(bT.balancePaymentSeries < paymentSeries)\n', '        {\n', '            bT.paymentBalances = bytes32(0);\n', '            setAmountOfUnitsOnPaymentId(bT, 0, bT.balance);\n', '            bT.balancePaymentSeries = paymentSeries;\n', '        }\n', '        amountOfUnitsOutsideAdminWallet = amountOfUnitsOutsideAdminWallet.add(value);   \n', '        uint fixedNewPayment = paymentNumber.add(1);\n', '        uint curr = getAmountOfUnitsOnPaymentId(bT, fixedNewPayment).add(value);\n', '        setAmountOfUnitsOnPaymentId(bT, fixedNewPayment, curr);\n', '    }\n', '    \n', '    function proceedTransferToMainAdmin(BalanceData storage bF, uint value)\n', '        private\n', '    {\n', '        amountOfUnitsOutsideAdminWallet = amountOfUnitsOutsideAdminWallet.sub(value);\n', '        if(bF.balancePaymentSeries < paymentSeries)\n', '        {\n', '            bF.paymentBalances = bytes32(0);\n', '            setAmountOfUnitsOnPaymentId(bF, 0, bF.balance);\n', '            bF.balancePaymentSeries = paymentSeries;\n', '        }\n', '        uint maxVal = paymentSortId.add(1);\n', '        for(uint i = 0; i <= maxVal; i++)\n', '        {\n', '            uint v = getAmountOfUnitsOnPaymentId(bF, i);\n', '            if(v >= value)\n', '            {\n', '                setAmountOfUnitsOnPaymentId(bF, i, v.sub(value));\n', '                break;\n', '            }\n', '            value = value.sub(v);\n', '            setAmountOfUnitsOnPaymentId(bF, i, 0);\n', '        }\n', '    }\n', '    \n', '    function proceedTransferFromUserToUser(BalanceData storage bF, BalanceData storage bT, uint value)\n', '        private\n', '    {\n', '        if(bF.balancePaymentSeries < paymentSeries)\n', '        {\n', '            bF.paymentBalances = bytes32(0);\n', '            setAmountOfUnitsOnPaymentId(bF, 0, bF.balance);\n', '            bF.balancePaymentSeries = paymentSeries;\n', '        }\n', '        if(bT.balancePaymentSeries < paymentSeries)\n', '        {\n', '            bT.paymentBalances = bytes32(0);\n', '            setAmountOfUnitsOnPaymentId(bT, 0, bT.balance);\n', '            bT.balancePaymentSeries = paymentSeries;\n', '        }\n', '        uint maxVal = paymentSortId.add(1);\n', '        for(uint i = 0; i <= maxVal; i++)\n', '        {\n', '            uint fromAmount = getAmountOfUnitsOnPaymentId(bF, i);\n', '            uint toAmount = getAmountOfUnitsOnPaymentId(bT, i);\n', '            if(fromAmount >= value)\n', '            {\n', '                setAmountOfUnitsOnPaymentId(bT, i, toAmount.add(value));\n', '                setAmountOfUnitsOnPaymentId(bF, i, fromAmount.sub(value));\n', '                break;\n', '            }\n', '            value = value.sub(fromAmount);\n', '            setAmountOfUnitsOnPaymentId(bT, i, toAmount.add(fromAmount));\n', '            setAmountOfUnitsOnPaymentId(bF, i, 0);\n', '        }\n', '    }\n', '    \n', '    function internalTransfer(\n', '        address from, \n', '        address to, \n', '        uint value\n', '    ) \n', '        private \n', '        returns (bool success)\n', '    {\n', '        BalanceData storage bF = balances[from];\n', '        BalanceData storage bT = balances[to];\n', '        if(to == 0x0 || bF.balance < value)\n', '        {\n', '            return false;\n', '        }\n', '        bool fromMainAdmin = from == mainBalanceAdmin;\n', '        bool fromAdminToNonAdmin = isAdmin(from) && !isAdmin(to);\n', '        if(fromMainAdmin || fromAdminToNonAdmin)\n', '        {\n', '            assert(bT.transferAllowed > 0);\n', '            if(value > bT.transferAllowed)\n', '            {\n', '                value = bT.transferAllowed;\n', '            }\n', '            bT.transferAllowed = bT.transferAllowed.sub(value);\n', '        }\n', '        if(to == sellBalanceAdmin)\n', '        {\n', '            require(unitsToSell > 0);\n', '            if(value > unitsToSell)\n', '            {\n', '                value = unitsToSell;\n', '            }\n', '            unitsToSell = unitsToSell.sub(value);\n', '        }\n', '        \n', '        if(fromMainAdmin)\n', '        {\n', '            proceedTransferFromMainAdmin(bT, value);\n', '            emit OnEmitNewUnitsFromMainWallet(value, amountOfUnitsOutsideAdminWallet);\n', '        }\n', '        else if(to == mainBalanceAdmin)\n', '        {\n', '            proceedTransferToMainAdmin(bF, value);\n', '            emit OnAddNewUnitsToMainWallet(value, amountOfUnitsOutsideAdminWallet);\n', '        }\n', '        else\n', '        {\n', '            proceedTransferFromUserToUser(bF, bT, value);\n', '        }\n', '        bF.balance = bF.balance.sub(value);\n', '        bT.balance = bT.balance.add(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function isAdmin(address  person) private view \n', '    returns(bool)\n', '    {\n', '        return (person == mainBalanceAdmin || person == buyBalanceAdmin || person == sellBalanceAdmin);\n', '    }\n', '}']