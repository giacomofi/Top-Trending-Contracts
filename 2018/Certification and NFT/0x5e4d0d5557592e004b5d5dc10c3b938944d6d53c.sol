['pragma solidity ^0.4.16;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {  owner = msg.sender;  }\n', '    modifier onlyOwner {  require (msg.sender == owner);    _;   }\n', '    function transferOwnership(address newOwner) onlyOwner public{  owner = newOwner;  }\n', '}\n', '\n', 'contract token is owned{\n', '    string public name; \n', '    string public symbol; \n', '    uint8 public decimals = 10;  \n', '    uint256 public totalSupply; \n', '\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);  \n', '    event Burn(address indexed from, uint256 value);  \n', '    \n', '    function token(uint256 initialSupply, string tokenName, string tokenSymbol) public {\n', '\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  \n', '        \n', '        balanceOf[msg.sender] = totalSupply; \n', '\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '\n', '      require(_to != 0x0); \n', '      require(balanceOf[_from] >= _value); \n', '      require(balanceOf[_to] + _value > balanceOf[_to]); \n', '      \n', '      uint previousBalances = balanceOf[_from] + balanceOf[_to]; \n', '      balanceOf[_from] -= _value; \n', '      balanceOf[_to] += _value; \n', '      emit Transfer(_from, _to, _value); \n', '      assert(balanceOf[_from] + balanceOf[_to] == previousBalances); \n', '\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {   _transfer(msg.sender, _to, _value);   }\n', '\n', '    function burn(uint256 _value) public onlyOwner returns (bool success) {\n', '        \n', '        require(balanceOf[msg.sender] >= _value);   \n', '\n', '\t\tbalanceOf[msg.sender] -= _value; \n', '        totalSupply -= _value; \n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract MyAdvancedToken is token {\n', '\n', '    uint256 public buyPrice; \n', '    uint public amountTotal =0; \n', '\tuint public amountRaised=0;\n', '\tbool public crowdFunding = false;  \n', '    uint public deadline = 0; \n', '    uint public fundingGoal = 0;  \n', '\n', '\tmapping (address => bool) public frozenAccount; \n', '    \n', '    event FrozenFunds(address target, bool frozen); \n', '\tevent FundTransfer(address _backer, uint _amount, bool _isContribution); \n', '\n', '    function MyAdvancedToken(uint256 initialSupply, string tokenName, string tokenSymbol) public token (initialSupply, tokenName, tokenSymbol) {\n', '        buyPrice  = 10000; \n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0); \n', '        require (balanceOf[_from] > _value); \n', '        require (balanceOf[_to] + _value > balanceOf[_to]); \n', '        require(!frozenAccount[_from]); \n', '        require(!frozenAccount[_to]);\n', '        \n', '        balanceOf[_from] -= _value; \n', '        balanceOf[_to] += _value; \n', '        emit Transfer(_from, _to, _value); \n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) public onlyOwner {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function setPrices(uint256 newBuyPrice) public onlyOwner {\n', '        buyPrice = newBuyPrice;\n', '    }\n', '   function () payable public {\n', '\t  require (crowdFunding == true);\n', '\t  check_status();\n', '\t  require (crowdFunding == true);\n', '\t  uint amount = msg.value* buyPrice;\n', '\t  _transfer(owner, msg.sender, amount);\n', '\t  amountTotal += msg.value;\n', '\t  amountRaised += msg.value;\n', '      //emit FundTransfer(msg.sender, amount, true);\n', '    }\n', '\n', '\tfunction check_status() internal {\n', '\t  if (deadline >0 && now >= deadline)\n', '\t\t  crowdFunding = false;\n', '\t  if( fundingGoal >0 && amountRaised > fundingGoal )\n', '\t\t  crowdFunding = false;\n', '\n', '\t  if( crowdFunding == false ){\n', '\t      deadline = 0;\n', '\t\t  fundingGoal = 0;\n', '\t\t  amountRaised = 0;\n', '\t  }\n', '\t}\n', '\n', '\tfunction openCrowdFunding(bool bOpen,uint totalEth, uint durationInMinutes) public  onlyOwner {\n', '\t    deadline = 0;\n', '\t    fundingGoal = 0;\n', '\t    amountRaised = 0;\n', '\t\t\n', '\t\tcrowdFunding = bOpen;\n', '\n', '\t\tif(totalEth >0){\n', '\t\t\tfundingGoal = totalEth;\n', '\t\t}\n', '\t\tif(durationInMinutes >0)\n', '\t\t\tdeadline = now + durationInMinutes * 1 minutes;\n', '\t}\n', '\t\n', '    function getEth() public  onlyOwner { //ok\n', '\t\trequire( amountTotal >= 100 );\n', '        uint256 amt = amountTotal-100;\n', '        owner.transfer(amt);\n', '        emit FundTransfer(owner, amt, false);\n', '\t\tamountTotal = 100;\n', '    }\n', '}']