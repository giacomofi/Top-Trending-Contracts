['/*\n', '--------------------------------------------------------------------------------\n', 'The Bethereum [BETHER] Token Smart Contract\n', '\n', 'Credit:\n', 'Bethereum Limited\n', '\n', 'ERC20: https://github.com/ethereum/EIPs/issues/20\n', 'ERC223: https://github.com/ethereum/EIPs/issues/223\n', '\n', 'MIT Licence\n', '--------------------------------------------------------------------------------\n', '*/\n', '\n', '/*\n', '* Contract that is working with ERC223 tokens\n', '*/\n', '\n', 'contract ContractReceiver {\n', '    function tokenFallback(address _from, uint _value, bytes _data) {\n', '        /* Fix for Mist warning */\n', '        _from;\n', '        _value;\n', '        _data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract ERC223Interface {\n', '    uint public totalSupply;\n', '    function balanceOf(address who) constant returns (uint);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '}\n', '\n', '\n', 'contract BethereumERC223 is ERC223Interface {\n', '    using SafeMath for uint256;\n', '\n', '    /* Contract Constants */\n', '    string public constant _name = "Bethereum";\n', '    string public constant _symbol = "BETHER";\n', '    uint8 public constant _decimals = 18;\n', '\n', '    /* Contract Variables */\n', '    address public owner;\n', '    mapping(address => uint256) public balances;\n', '    mapping(address => mapping (address => uint256)) public allowed;\n', '\n', '    /* Constructor initializes the owner&#39;s balance and the supply  */\n', '    function BethereumERC223() {\n', '        totalSupply = 244890382832398351471266750;\n', '        owner = msg.sender;\n', '        balances[owner] = totalSupply;\n', '    }\n', '\n', '    /* ERC20 Events */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* ERC223 Events */\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '\n', '    /* Returns the balance of a particular account */\n', '    function balanceOf(address _address) constant returns (uint256 balance) {\n', '        return balances[_address];\n', '    }\n', '\n', '    /* Transfer the balance from the sender&#39;s address to the address _to */\n', '    function transfer(address _to, uint _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value\n', '        && _value > 0\n', '        && balances[_to] + _value > balances[_to]) {\n', '            bytes memory empty;\n', '            if(isContract(_to)) {\n', '                return transferToContract(_to, _value, empty);\n', '            } else {\n', '                return transferToAddress(_to, _value, empty);\n', '            }\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /* Withdraws to address _to form the address _from up to the amount _value */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value\n', '        && allowed[_from][msg.sender] >= _value\n', '        && _value > 0\n', '        && balances[_to] + _value > balances[_to]) {\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /* Allows _spender to withdraw the _allowance amount form sender */\n', '    function approve(address _spender, uint256 _allowance) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _allowance;\n', '        Approval(msg.sender, _spender, _allowance);\n', '        return true;\n', '    }\n', '\n', '    /* Checks how much _spender can withdraw from _owner */\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /* ERC223 Functions */\n', '    /* Get the contract constant _name */\n', '    function name() constant returns (string name) {\n', '        return _name;\n', '    }\n', '\n', '    /* Get the contract constant _symbol */\n', '    function symbol() constant returns (string symbol) {\n', '        return _symbol;\n', '    }\n', '\n', '    /* Get the contract constant _decimals */\n', '    function decimals() constant returns (uint8 decimals) {\n', '        return _decimals;\n', '    }\n', '\n', '    /* Transfer the balance from the sender&#39;s address to the address _to with data _data */\n', '    function transfer(address _to, uint _value, bytes _data) returns (bool success) {\n', '        if (balances[msg.sender] >= _value\n', '        && _value > 0\n', '        && balances[_to] + _value > balances[_to]) {\n', '            if(isContract(_to)) {\n', '                return transferToContract(_to, _value, _data);\n', '            } else {\n', '                return transferToAddress(_to, _value, _data);\n', '            }\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /* Transfer function when _to represents a regular address */\n', '    function transferToAddress(address _to, uint _value, bytes _data) internal returns (bool success) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '\n', '    /* Transfer function when _to represents a contract address, with the caveat\n', '    that the contract needs to implement the tokenFallback function in order to receive tokens */\n', '    function transferToContract(address _to, uint _value, bytes _data) internal returns (bool success) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        Transfer(msg.sender, _to, _value);\n', '        Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '\n', '    /* Infers if whether _address is a contract based on the presence of bytecode */\n', '    function isContract(address _address) internal returns (bool is_contract) {\n', '        uint length;\n', '        if (_address == 0) return false;\n', '        assembly {\n', '        length := extcodesize(_address)\n', '        }\n', '        if(length > 0) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /* Stops any attempt to send Ether to this contract */\n', '    function () {\n', '        throw;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', '/**\n', '* @title Pausable token\n', '*\n', '* @dev StandardToken modified with pausable transfers.\n', '**/\n', 'contract PausableToken is BethereumERC223, Pausable {\n', '\n', '    function transfer(address _to, uint256 _value, bytes _data) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value, _data);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is BethereumERC223, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract BethereumToken is MintableToken, PausableToken {\n', '\n', '    function BethereumToken(){\n', '        pause();\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    MintableToken public token;\n', '\n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    // address where funds are collected\n', '    address public wallet;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '    function Crowdsale(uint256 _endTime, address _wallet) {\n', '\n', '        require(_endTime >= now);\n', '        require(_wallet != 0x0);\n', '\n', '        token = createTokenContract();\n', '        endTime = _endTime;\n', '        wallet = _wallet;\n', '    }\n', '\n', '    // creates the token to be sold.\n', '    // override this method to have crowdsale of a specific mintable token.\n', '    function createTokenContract() internal returns (BethereumToken) {\n', '        return new BethereumToken();\n', '    }\n', '\n', '\n', '    // fallback function can be used to buy tokens\n', '    function () payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address beneficiary) public payable {  }\n', '\n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase() internal constant returns (bool) {\n', '        bool withinPeriod = now >= startTime && now <= endTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        return withinPeriod && nonZeroPurchase;\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public constant returns (bool) {\n', '        return now > endTime;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    bool public isFinalized = false;\n', '\n', '    bool public weiCapReached = false;\n', '\n', '    event Finalized();\n', '\n', '    /**\n', '     * @dev Must be called after crowdsale ends, to do some extra finalization\n', '     * work. Calls the contract&#39;s finalization function.\n', '     */\n', '    function finalize() onlyOwner public {\n', '        require(!isFinalized);\n', '\n', '        finalization();\n', '        Finalized();\n', '\n', '        isFinalized = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Can be overridden to add finalization logic. The overriding function\n', '     * should call super.finalization() to ensure the chain of finalization is\n', '     * executed entirely.\n', '     */\n', '    function finalization() internal {\n', '    }\n', '}\n', '\n', 'contract BETHERTokenSale is FinalizableCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // Define sale\n', '    uint public constant RATE = 17500;\n', '    uint public constant TOKEN_SALE_LIMIT = 25000 * 1000000000000000000;\n', '\n', '    uint256 public constant TOKENS_FOR_OPERATIONS = 400000000*(10**18);\n', '    uint256 public constant TOKENS_FOR_SALE = 600000000*(10**18);\n', '\n', '    uint public constant TOKENS_FOR_PRESALE = 315000000*(1 ether / 1 wei);\n', '\n', '    uint public BONUS_PERCENTAGE;\n', '\n', '    enum Phase {\n', '    Created,\n', '    CrowdsaleRunning,\n', '    Paused\n', '    }\n', '\n', '    Phase public currentPhase = Phase.Created;\n', '\n', '    event LogPhaseSwitch(Phase phase);\n', '\n', '    // Constructor\n', '    function BETHERTokenSale(\n', '    uint256 _end,\n', '    address _wallet\n', '    )\n', '    FinalizableCrowdsale()\n', '    Crowdsale(_end, _wallet) {\n', '    }\n', '\n', '    function setNewBonusScheme(uint _bonusPercentage) {\n', '        BONUS_PERCENTAGE = _bonusPercentage;\n', '    }\n', '\n', '    function mintRawTokens(address _buyer, uint256 _newTokens) public onlyOwner {\n', '        token.mint(_buyer, _newTokens);\n', '    }\n', '\n', '    /// @dev Lets buy you some tokens.\n', '    function buyTokens(address _buyer) public payable {\n', '        // Available only if presale or crowdsale is running.\n', '        require(currentPhase == Phase.CrowdsaleRunning);\n', '        require(_buyer != address(0));\n', '        require(msg.value > 0);\n', '        require(validPurchase());\n', '\n', '        uint tokensWouldAddTo = 0;\n', '        uint weiWouldAddTo = 0;\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        uint newTokens = msg.value.mul(RATE);\n', '\n', '        weiWouldAddTo = weiRaised.add(weiAmount);\n', '\n', '        require(weiWouldAddTo <= TOKEN_SALE_LIMIT);\n', '\n', '        newTokens = addBonusTokens(token.totalSupply(), newTokens);\n', '\n', '        tokensWouldAddTo = newTokens.add(token.totalSupply());\n', '        require(tokensWouldAddTo <= TOKENS_FOR_SALE);\n', '\n', '        token.mint(_buyer, newTokens);\n', '        TokenPurchase(msg.sender, _buyer, weiAmount, newTokens);\n', '\n', '        weiRaised = weiWouldAddTo;\n', '        forwardFunds();\n', '        if (weiRaised == TOKENS_FOR_SALE){\n', '            weiCapReached = true;\n', '        }\n', '    }\n', '\n', '    // @dev Adds bonus tokens by token supply bought by user\n', '    // @param _totalSupply total supply of token bought during pre-sale/crowdsale\n', '    // @param _newTokens tokens currently bought by user\n', '    function addBonusTokens(uint256 _totalSupply, uint256 _newTokens) internal view returns (uint256) {\n', '        uint returnTokens;\n', '        uint tokens = _newTokens;\n', '        returnTokens = tokens.add(tokens.mul(BONUS_PERCENTAGE).div(100));\n', '\n', '        return returnTokens;\n', '    }\n', '\n', '    function setSalePhase(Phase _nextPhase) public onlyOwner {\n', '        currentPhase = _nextPhase;\n', '        LogPhaseSwitch(_nextPhase);\n', '    }\n', '\n', '    function transferTokenOwnership(address _newOwner) {\n', '        token.transferOwnership(_newOwner);\n', '    }\n', '\n', '    // Finalize\n', '    function finalization() internal {\n', '        uint256 toMint = TOKENS_FOR_OPERATIONS;\n', '        token.mint(wallet, toMint);\n', '        token.finishMinting();\n', '        token.transferOwnership(wallet);\n', '    }\n', '}']