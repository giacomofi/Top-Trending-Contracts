['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until \n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) \n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) \n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end blocks, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end blocks where investments are allowed (both inclusive)\n', '  uint256 public startBlock;\n', '  uint256 public endBlock;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startBlock, uint256 _endBlock, address _wallet) {\n', '    require(_startBlock >= block.number);\n', '    require(_endBlock >= _startBlock);\n', '    require(_wallet != 0x0);\n', '\n', '    token = createTokenContract();\n', '    startBlock = _startBlock;\n', '    endBlock = _endBlock;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = block.number >= startBlock && block.number <= endBlock;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return block.number > endBlock;\n', '  }\n', '\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Extension of Crowsdale with a max amount of funds raised\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowsdale where an owner can do extra work\n', ' * after finishing. \n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '    \n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overriden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) {\n', '    require(_wallet != 0x0);\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title RefundableCrowdsale\n', ' * @dev Extension of Crowdsale contract that adds a funding goal, and\n', ' * the possibility of users getting a refund if goal is not met.\n', " * Uses a RefundVault as the crowdsale's vault.\n", ' */\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault public vault;\n', '\n', '  function RefundableCrowdsale(uint256 _goal) {\n', '    require(_goal > 0);\n', '    vault = new RefundVault(wallet);\n', '    goal = _goal;\n', '  }\n', '\n', "  // We're overriding the fund forwarding from Crowdsale.\n", '  // In addition to sending the funds, we want to call\n', '  // the RefundVault deposit function\n', '  function forwardFunds() internal {\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '\n', '  // if crowdsale is unsuccessful, investors can claim refunds here\n', '  function claimRefund() {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  // vault finalization task, called when owner calls finalize()\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '\n', '    super.finalization();\n', '  }\n', '\n', '  function goalReached() public constant returns (bool) {\n', '    return weiRaised >= goal;\n', '  }\n', '\n', '}\n', '\n', 'contract GlobCoinToken is MintableToken {\n', '  using SafeMath for uint256;\n', '  string public constant name = "GlobCoin Crypto Platform";\n', '  string public constant symbol = "GCP";\n', '  uint8 public constant decimals = 18;\n', '\n', '  modifier onlyMintingFinished() {\n', '    require(mintingFinished == true);\n', '    _;\n', '  }\n', '  /// @dev Same ERC20 behavior, but require the token to be unlocked\n', '  /// @param _spender address The address which will spend the funds.\n', '  /// @param _value uint256 The amount of tokens to be spent.\n', '  function approve(address _spender, uint256 _value) public onlyMintingFinished returns (bool) {\n', '      return super.approve(_spender, _value);\n', '  }\n', '\n', '  /// @dev Same ERC20 behavior, but require the token to be unlocked\n', '  /// @param _to address The address to transfer to.\n', '  /// @param _value uint256 The amount to be transferred.\n', '  function transfer(address _to, uint256 _value) public onlyMintingFinished returns (bool) {\n', '      return super.transfer(_to, _value);\n', '  }\n', '\n', '  /// @dev Same ERC20 behavior, but require the token to be unlocked\n', '  /// @param _from address The address which you want to send tokens from.\n', '  /// @param _to address The address which you want to transfer to.\n', '  /// @param _value uint256 the amount of tokens to be transferred.\n', '  function transferFrom(address _from, address _to, uint256 _value) public onlyMintingFinished returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '}\n', '\n', 'contract GlobcoinTokenSale is CappedCrowdsale, RefundableCrowdsale {\n', '\n', '  //Start of the Actual crowdsale. Starblock is the start of the presale.\n', '  uint256 public startSale;\n', '  uint256 public endPresale;\n', '\n', '  // Presale Rate per wei ~30% bonus over rate1\n', '  uint256 public constant PRESALERATE = 17000;\n', '\n', '  // new rates\n', '  uint256 public constant RATE1 = 13000;\n', '  uint256 public constant RATE2 = 12000;\n', '  uint256 public constant RATE3 = 11000;\n', '  uint256 public constant RATE4 = 10000;\n', '\n', '\n', '  // Cap per tier for bonus in wei.\n', '  uint256 public constant TIER1 =  3000000000000000000000;\n', '  uint256 public constant TIER2 =  5000000000000000000000;\n', '  uint256 public constant TIER3 =  7500000000000000000000;\n', '\n', '  //Presale\n', '  uint256 public weiRaisedPreSale;\n', '  uint256 public presaleCap;\n', '\n', '  function GlobcoinTokenSale(uint256 _startBlock, uint256 _endPresale, uint256 _startSale, uint256 _endBlock, uint256 _goal,uint256 _presaleCap, uint256 _cap, address _wallet) public\n', '  CappedCrowdsale(_cap) FinalizableCrowdsale() RefundableCrowdsale(_goal) Crowdsale(_startBlock, _endBlock, _wallet) {\n', '    require(_goal <= _cap);\n', '    require(_startSale > _startBlock);\n', '    require(_endBlock > _startSale);\n', '    require(_presaleCap > 0);\n', '    require(_presaleCap <= _cap);\n', '\n', '    startSale = _startSale;\n', '    endPresale = _endPresale;\n', '    presaleCap = _presaleCap;\n', '  }\n', '\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new GlobCoinToken();\n', '  }\n', '\n', '  //white listed address\n', '  mapping (address => bool) public whiteListedAddress;\n', '  mapping (address => bool) public whiteListedAddressPresale;\n', '\n', '  modifier onlyPresaleWhitelisted() {\n', '    require( isWhitelistedPresale(msg.sender) ) ;\n', '    _;\n', '  }\n', '\n', '  modifier onlyWhitelisted() {\n', '    require( isWhitelisted(msg.sender) || isWhitelistedPresale(msg.sender) ) ;\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Add a list of address to be whitelisted for the crowdsale only.\n', '   * @param _users , the list of user Address. Tested for out of gas until 200 addresses.\n', '   */\n', '  function whitelistAddresses( address[] _users) onlyOwner {\n', '    for( uint i = 0 ; i < _users.length ; i++ ) {\n', '      whiteListedAddress[_users[i]] = true;\n', '    }\n', '  }\n', '\n', '  function unwhitelistAddress( address _users) onlyOwner {\n', '    whiteListedAddress[_users] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Add a list of address to be whitelisted for the Presale And sale.\n', '   * @param _users , the list of user Address. Tested for out of gas until 200 addresses.\n', '   */\n', '  function whitelistAddressesPresale( address[] _users) onlyOwner {\n', '    for( uint i = 0 ; i < _users.length ; i++ ) {\n', '      whiteListedAddressPresale[_users[i]] = true;\n', '    }\n', '  }\n', '\n', '  function unwhitelistAddressPresale( address _users) onlyOwner {\n', '    whiteListedAddressPresale[_users] = false;\n', '  }\n', '\n', '  function isWhitelisted(address _user) public constant returns (bool) {\n', '    return whiteListedAddress[_user];\n', '  }\n', '\n', '  function isWhitelistedPresale(address _user) public constant returns (bool) {\n', '    return whiteListedAddressPresale[_user];\n', '  }\n', '\n', '  function () payable {\n', '    if (validPurchasePresale()){\n', '      buyTokensPresale(msg.sender);\n', '    } else {\n', '      buyTokens(msg.sender);\n', '    }\n', '  }\n', '\n', '  function buyTokens(address beneficiary) payable onlyWhitelisted {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '    uint256 tokens = calculateTokenAmount(weiAmount);\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    forwardFunds();\n', '  }\n', '\n', '  function buyTokensPresale(address beneficiary) payable onlyPresaleWhitelisted {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchasePresale());\n', '\n', '    uint256 weiAmount = msg.value;\n', '    uint256 tokens = weiAmount.mul(PRESALERATE);\n', '    weiRaisedPreSale = weiRaisedPreSale.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    forwardFunds();\n', '  }\n', '\n', '  // calculate the amount of token the user is getting - can overlap on multiple tiers.\n', '  function calculateTokenAmount(uint256 weiAmount) internal returns (uint256){\n', '    uint256 amountToBuy = weiAmount;\n', '    uint256 amountTokenBought;\n', '    uint256 currentWeiRaised = weiRaised;\n', '     if (currentWeiRaised < TIER1 && amountToBuy > 0) {\n', '       var (amountBoughtInTier, amountLeftTobuy) = calculateAmountPerTier(amountToBuy,TIER1,RATE1,currentWeiRaised);\n', '       amountTokenBought = amountTokenBought.add(amountBoughtInTier);\n', '       currentWeiRaised = currentWeiRaised.add(amountToBuy.sub(amountLeftTobuy));\n', '       amountToBuy = amountLeftTobuy;\n', '     }\n', '     if (currentWeiRaised < TIER2 && amountToBuy > 0) {\n', '      (amountBoughtInTier, amountLeftTobuy) = calculateAmountPerTier(amountToBuy,TIER2,RATE2,currentWeiRaised);\n', '      amountTokenBought = amountTokenBought.add(amountBoughtInTier);\n', '      currentWeiRaised = currentWeiRaised.add(amountToBuy.sub(amountLeftTobuy));\n', '      amountToBuy = amountLeftTobuy;\n', '     }\n', '     if (currentWeiRaised < TIER3 && amountToBuy > 0) {\n', '      (amountBoughtInTier, amountLeftTobuy) = calculateAmountPerTier(amountToBuy,TIER3,RATE3,currentWeiRaised);\n', '      amountTokenBought = amountTokenBought.add(amountBoughtInTier);\n', '      currentWeiRaised = currentWeiRaised.add(amountToBuy.sub(amountLeftTobuy));\n', '      amountToBuy = amountLeftTobuy;\n', '     }\n', '    if ( currentWeiRaised < cap && amountToBuy > 0) {\n', '      (amountBoughtInTier, amountLeftTobuy) = calculateAmountPerTier(amountToBuy,cap,RATE4,currentWeiRaised);\n', '      amountTokenBought = amountTokenBought.add(amountBoughtInTier);\n', '      currentWeiRaised = currentWeiRaised.add(amountToBuy.sub(amountLeftTobuy));\n', '      amountToBuy = amountLeftTobuy;\n', '    }\n', '    return amountTokenBought;\n', '  }\n', '\n', '  // calculate the amount of token within a tier.\n', '  function calculateAmountPerTier(uint256 amountToBuy,uint256 tier,uint256 rate,uint256 currentWeiRaised) internal returns (uint256,uint256) {\n', '    uint256 amountAvailable = tier.sub(currentWeiRaised);\n', '    if ( amountToBuy > amountAvailable ) {\n', '      uint256 amountBoughtInTier = amountAvailable.mul(rate);\n', '      amountToBuy = amountToBuy.sub(amountAvailable);\n', '      return (amountBoughtInTier,amountToBuy);\n', '    } else {\n', '      amountBoughtInTier = amountToBuy.mul(rate);\n', '      return (amountBoughtInTier,0);\n', '    }\n', '  }\n', '\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '      //Globcoin gets 60% of the amount of the total token supply\n', '      uint256 totalSupply = token.totalSupply();\n', '      // total supply\n', '      token.mint(wallet, totalSupply);\n', '      // 50% of tokens generated during crowdsale to make it 60% for GC\n', '      token.mint(wallet, totalSupply.div(2));\n', '      token.finishMinting();\n', '    }\n', '    super.finalization();\n', '  }\n', '\n', '  // Override of the validPurchase function so that the new sale periode start at StartSale instead of Startblock.\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = block.number >= startSale && block.number <= endBlock;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    uint256 totalWeiRaised = weiRaisedPreSale.add(weiRaised);\n', '    bool withinCap = totalWeiRaised.add(msg.value) <= cap;\n', '    return withinCap && withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // Sale period start at StartBlock until the sale Start ( startSale )\n', '  function validPurchasePresale() internal constant returns (bool) {\n', '    bool withinPeriod = (block.number >= startBlock) && (block.number <= endPresale);\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    bool withinCap = weiRaisedPreSale.add(msg.value) <= presaleCap;\n', '    return withinPeriod && nonZeroPurchase && withinCap;\n', '  }\n', '\n', '  // Override of the goalReached function so that the goal take into account the token raised during the Presale.\n', '  function goalReached() public constant returns (bool) {\n', '    uint256 totalWeiRaised = weiRaisedPreSale.add(weiRaised);\n', '    return totalWeiRaised >= goal || super.goalReached();\n', '  }\n', '\n', '}']