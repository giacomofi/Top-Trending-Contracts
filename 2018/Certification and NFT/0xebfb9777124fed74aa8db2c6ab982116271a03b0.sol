['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract B0xAccount is Ownable {\n', '    using SafeMath for uint;\n', '\n', '\tmapping (address => Withdraw[]) public withdrawals;\n', '\n', '    address public receiver1;\n', '    address public receiver2;\n', '\n', '    uint public numerator = 3;\n', '    uint public denominator = 7;\n', '\n', '    struct Withdraw {\n', '        uint amount;\n', '        uint blockNumber;\n', '        uint blockTimestamp;\n', '    }\n', '\n', '    function() \n', '        public\n', '        payable\n', '    {\n', '        require(msg.value > 0);\n', '        uint toSend = msg.value.mul(numerator).div(denominator);\n', '        require(receiver1.send(toSend));\n', '        require(receiver2.send(toSend));\n', '    }\n', '\n', '    constructor(\n', '        address _receiver1,\n', '        address _receiver2)\n', '        public\n', '    {\n', '        receiver1 = _receiver1;\n', '        receiver2 = _receiver2;\n', '    }\n', '\n', '    function deposit()\n', '        public\n', '        payable\n', '        returns(bool)\n', '    {}\n', '\n', '    function withdraw(\n', '        uint _value)\n', '        public\n', '        returns(bool)\n', '    {\n', '        require(\n', '            msg.sender == receiver1 \n', '            || msg.sender == receiver2);\n', '\n', '        uint amount = _value;\n', '        if (amount > address(this).balance) {\n', '            amount = address(this).balance;\n', '        }\n', '\n', '        withdrawals[msg.sender].push(Withdraw({\n', '            amount: amount,\n', '            blockNumber: block.number,\n', '            blockTimestamp: block.timestamp\n', '        }));\n', '\n', '        return (msg.sender.send(amount));\n', '    }\n', '\n', '    function setReceiver1(\n', '        address _receiver\n', '    )\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(_receiver != address(0) && _receiver != receiver1);\n', '        receiver1 = _receiver;\n', '    }\n', '\n', '    function setReceiver2(\n', '        address _receiver\n', '    )\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(_receiver != address(0) && _receiver != receiver2);\n', '        receiver2 = _receiver;\n', '    }\n', '\n', '    function setNumeratorDenominator(\n', '        uint _numerator,\n', '        uint _denominator\n', '    )\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(_numerator > 0 && (_numerator*2) <= _denominator);\n', '        numerator = _numerator;\n', '        denominator = _denominator;\n', '    }\n', '\n', '    function getBalance()\n', '        public\n', '        view\n', '        returns (uint)\n', '    {\n', '        return address(this).balance;\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract B0xAccount is Ownable {\n', '    using SafeMath for uint;\n', '\n', '\tmapping (address => Withdraw[]) public withdrawals;\n', '\n', '    address public receiver1;\n', '    address public receiver2;\n', '\n', '    uint public numerator = 3;\n', '    uint public denominator = 7;\n', '\n', '    struct Withdraw {\n', '        uint amount;\n', '        uint blockNumber;\n', '        uint blockTimestamp;\n', '    }\n', '\n', '    function() \n', '        public\n', '        payable\n', '    {\n', '        require(msg.value > 0);\n', '        uint toSend = msg.value.mul(numerator).div(denominator);\n', '        require(receiver1.send(toSend));\n', '        require(receiver2.send(toSend));\n', '    }\n', '\n', '    constructor(\n', '        address _receiver1,\n', '        address _receiver2)\n', '        public\n', '    {\n', '        receiver1 = _receiver1;\n', '        receiver2 = _receiver2;\n', '    }\n', '\n', '    function deposit()\n', '        public\n', '        payable\n', '        returns(bool)\n', '    {}\n', '\n', '    function withdraw(\n', '        uint _value)\n', '        public\n', '        returns(bool)\n', '    {\n', '        require(\n', '            msg.sender == receiver1 \n', '            || msg.sender == receiver2);\n', '\n', '        uint amount = _value;\n', '        if (amount > address(this).balance) {\n', '            amount = address(this).balance;\n', '        }\n', '\n', '        withdrawals[msg.sender].push(Withdraw({\n', '            amount: amount,\n', '            blockNumber: block.number,\n', '            blockTimestamp: block.timestamp\n', '        }));\n', '\n', '        return (msg.sender.send(amount));\n', '    }\n', '\n', '    function setReceiver1(\n', '        address _receiver\n', '    )\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(_receiver != address(0) && _receiver != receiver1);\n', '        receiver1 = _receiver;\n', '    }\n', '\n', '    function setReceiver2(\n', '        address _receiver\n', '    )\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(_receiver != address(0) && _receiver != receiver2);\n', '        receiver2 = _receiver;\n', '    }\n', '\n', '    function setNumeratorDenominator(\n', '        uint _numerator,\n', '        uint _denominator\n', '    )\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(_numerator > 0 && (_numerator*2) <= _denominator);\n', '        numerator = _numerator;\n', '        denominator = _denominator;\n', '    }\n', '\n', '    function getBalance()\n', '        public\n', '        view\n', '        returns (uint)\n', '    {\n', '        return address(this).balance;\n', '    }\n', '}']
