['pragma solidity ^0.4.16;\n', '\n', 'contract SafeMath {\n', '    function safeMul(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint a, uint b) pure internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract TEGTY is owned, SafeMath {\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals = 8;\n', '    uint public totalSupply;\n', '\n', '    mapping (address => uint) public balanceOf;\n', '    mapping (address => mapping (address => uint)) public allowance;\n', '    mapping (address => uint) public lockInfo;\n', '\n', '    uint constant valueTotal = 20 * 10000 * 10000 * 10 ** 8;\t//A total of two hundred million\n', '    uint constant valueSale = valueTotal / 100 * 15;  // sell 15%\n', '    uint constant valueTeam = valueTotal / 100 * 85;   // other 85%\n', '\n', '    uint public minEth = 0.1 ether;\n', '\n', '    uint public maxEth = 1000 ether;\n', '\n', '\tuint256 public buyPrice = 5000;\t//Purchase price\n', '    uint256 public sellPrice = 1;\t//The price /10000\n', '    \n', '    bool public buyTradeConfir = false;\t//buy\n', '    bool public sellTradeConfir = false;\t//sell\n', '    \n', '    uint public saleQuantity = 0;\n', '\n', '    uint public ethQuantity = 0;\n', '\n', '    modifier validAddress(address _address) {\n', '        assert(0x0 != _address);\n', '        _;\n', '    }\n', '\n', '    modifier validEth {\n', '        assert(msg.value >= minEth && msg.value <= maxEth);\n', '        _;\n', '    }\n', '\n', '    modifier validPeriod {\n', '        assert(buyTradeConfir);\n', '        _;\n', '    }\n', '\n', '    modifier validQuantity {\n', '        assert(valueSale >= saleQuantity);\n', '        _;\n', '    }\n', '\n', '\n', '    function TEGTY() public\n', '    {\n', '    \ttotalSupply = valueTotal;\n', '    \t//buy\n', '    \tbalanceOf[this] = valueSale;\n', '        Transfer(0x0, this, valueSale);\n', '        // owner\n', '        balanceOf[msg.sender] = valueTeam;\n', '        Transfer(0x0, msg.sender, valueTeam);\n', '    \tname = &#39;Engagementy&#39;;\n', '    \tsymbol = &#39;EGTY&#39;; \n', '    }\n', '\n', '    function transfer(address _to, uint _value) public validAddress(_to) returns (bool success)\n', '    {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(validTransfer(msg.sender, _value));\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferInner(address _to, uint _value) private returns (bool success)\n', '    {\n', '        balanceOf[this] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(this, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public validAddress(_from) validAddress(_to) returns (bool success)\n', '    {\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        require(validTransfer(_from, _value));\n', '        balanceOf[_to] += _value;\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public validAddress(_spender) returns (bool success)\n', '    {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function lock(address _to, uint _value) private validAddress(_to)\n', '    {\n', '        require(_value > 0);\n', '        require(lockInfo[_to] + _value <= balanceOf[_to]);\n', '        lockInfo[_to] += _value;\n', '    }\n', '\n', '    function validTransfer(address _from, uint _value) private constant returns (bool)\n', '    {\n', '        if (_value == 0)\n', '            return false;\n', '\n', '        return lockInfo[_from] + _value <= balanceOf[_from];\n', '    }\n', '\n', '\n', '    function () public payable\n', '    {\n', '        buy();\n', '    }\n', '\n', '    function buy() public payable validEth validPeriod validQuantity\n', '    {\n', '        uint eth = msg.value;\n', '\n', '        uint quantity = eth * buyPrice / 10 ** 10;\n', '\n', '        uint leftQuantity = safeSub(valueSale, saleQuantity);\n', '        if (quantity > leftQuantity) {\n', '            quantity = leftQuantity;\n', '        }\n', '\n', '        saleQuantity = safeAdd(saleQuantity, quantity);\n', '        ethQuantity = safeAdd(ethQuantity, eth);\n', '\n', '        require(transferInner(msg.sender, quantity));\n', '\n', '        lock(msg.sender, quantity);\n', '\n', '        Buy(msg.sender, eth, quantity);\n', '\n', '    }\n', '\n', '    function sell(uint256 amount) public {\n', '\t\tif(sellTradeConfir){\n', '\t\t\trequire(this.balance >= amount * sellPrice / 10000);\n', '\t\t\ttransferFrom(msg.sender, this, amount);\n', '\t\t\tmsg.sender.transfer(amount * sellPrice / 10000);\n', '\t\t}\n', '    }\n', '    \n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '    \n', '    function starBuy() public onlyOwner returns (bool)\n', '\t{\n', '\t    buyTradeConfir = true;\n', '\t    StarBuy();\n', '\t    return true;\n', '\t}\n', '    \n', '    function stopBuy() public onlyOwner returns (bool)\n', '    {\n', '        buyTradeConfir = false;\n', '        StopBuy();\n', '        return true;\n', '    }\n', '    \n', '    function starSell() public onlyOwner returns (bool)\n', '\t{\n', '\t    sellTradeConfir = true;\n', '\t    StarSell();\n', '\t    return true;\n', '\t}\n', '    \n', '    function stopSell() public onlyOwner returns (bool)\n', '\t{\n', '\t    sellTradeConfir = false;\n', '\t    StopSell();\n', '\t    return true;\n', '\t}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '    event Buy(address indexed sender, uint eth, uint token);\n', '    event Burn(address indexed from, uint256 value);\n', '    event StopSell();\n', '    event StopBuy();\n', '    event StarSell();\n', '    event StarBuy();\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'contract SafeMath {\n', '    function safeMul(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint a, uint b) pure internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract TEGTY is owned, SafeMath {\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals = 8;\n', '    uint public totalSupply;\n', '\n', '    mapping (address => uint) public balanceOf;\n', '    mapping (address => mapping (address => uint)) public allowance;\n', '    mapping (address => uint) public lockInfo;\n', '\n', '    uint constant valueTotal = 20 * 10000 * 10000 * 10 ** 8;\t//A total of two hundred million\n', '    uint constant valueSale = valueTotal / 100 * 15;  // sell 15%\n', '    uint constant valueTeam = valueTotal / 100 * 85;   // other 85%\n', '\n', '    uint public minEth = 0.1 ether;\n', '\n', '    uint public maxEth = 1000 ether;\n', '\n', '\tuint256 public buyPrice = 5000;\t//Purchase price\n', '    uint256 public sellPrice = 1;\t//The price /10000\n', '    \n', '    bool public buyTradeConfir = false;\t//buy\n', '    bool public sellTradeConfir = false;\t//sell\n', '    \n', '    uint public saleQuantity = 0;\n', '\n', '    uint public ethQuantity = 0;\n', '\n', '    modifier validAddress(address _address) {\n', '        assert(0x0 != _address);\n', '        _;\n', '    }\n', '\n', '    modifier validEth {\n', '        assert(msg.value >= minEth && msg.value <= maxEth);\n', '        _;\n', '    }\n', '\n', '    modifier validPeriod {\n', '        assert(buyTradeConfir);\n', '        _;\n', '    }\n', '\n', '    modifier validQuantity {\n', '        assert(valueSale >= saleQuantity);\n', '        _;\n', '    }\n', '\n', '\n', '    function TEGTY() public\n', '    {\n', '    \ttotalSupply = valueTotal;\n', '    \t//buy\n', '    \tbalanceOf[this] = valueSale;\n', '        Transfer(0x0, this, valueSale);\n', '        // owner\n', '        balanceOf[msg.sender] = valueTeam;\n', '        Transfer(0x0, msg.sender, valueTeam);\n', "    \tname = 'Engagementy';\n", "    \tsymbol = 'EGTY'; \n", '    }\n', '\n', '    function transfer(address _to, uint _value) public validAddress(_to) returns (bool success)\n', '    {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(validTransfer(msg.sender, _value));\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferInner(address _to, uint _value) private returns (bool success)\n', '    {\n', '        balanceOf[this] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(this, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public validAddress(_from) validAddress(_to) returns (bool success)\n', '    {\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        require(validTransfer(_from, _value));\n', '        balanceOf[_to] += _value;\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public validAddress(_spender) returns (bool success)\n', '    {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function lock(address _to, uint _value) private validAddress(_to)\n', '    {\n', '        require(_value > 0);\n', '        require(lockInfo[_to] + _value <= balanceOf[_to]);\n', '        lockInfo[_to] += _value;\n', '    }\n', '\n', '    function validTransfer(address _from, uint _value) private constant returns (bool)\n', '    {\n', '        if (_value == 0)\n', '            return false;\n', '\n', '        return lockInfo[_from] + _value <= balanceOf[_from];\n', '    }\n', '\n', '\n', '    function () public payable\n', '    {\n', '        buy();\n', '    }\n', '\n', '    function buy() public payable validEth validPeriod validQuantity\n', '    {\n', '        uint eth = msg.value;\n', '\n', '        uint quantity = eth * buyPrice / 10 ** 10;\n', '\n', '        uint leftQuantity = safeSub(valueSale, saleQuantity);\n', '        if (quantity > leftQuantity) {\n', '            quantity = leftQuantity;\n', '        }\n', '\n', '        saleQuantity = safeAdd(saleQuantity, quantity);\n', '        ethQuantity = safeAdd(ethQuantity, eth);\n', '\n', '        require(transferInner(msg.sender, quantity));\n', '\n', '        lock(msg.sender, quantity);\n', '\n', '        Buy(msg.sender, eth, quantity);\n', '\n', '    }\n', '\n', '    function sell(uint256 amount) public {\n', '\t\tif(sellTradeConfir){\n', '\t\t\trequire(this.balance >= amount * sellPrice / 10000);\n', '\t\t\ttransferFrom(msg.sender, this, amount);\n', '\t\t\tmsg.sender.transfer(amount * sellPrice / 10000);\n', '\t\t}\n', '    }\n', '    \n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '    \n', '    function starBuy() public onlyOwner returns (bool)\n', '\t{\n', '\t    buyTradeConfir = true;\n', '\t    StarBuy();\n', '\t    return true;\n', '\t}\n', '    \n', '    function stopBuy() public onlyOwner returns (bool)\n', '    {\n', '        buyTradeConfir = false;\n', '        StopBuy();\n', '        return true;\n', '    }\n', '    \n', '    function starSell() public onlyOwner returns (bool)\n', '\t{\n', '\t    sellTradeConfir = true;\n', '\t    StarSell();\n', '\t    return true;\n', '\t}\n', '    \n', '    function stopSell() public onlyOwner returns (bool)\n', '\t{\n', '\t    sellTradeConfir = false;\n', '\t    StopSell();\n', '\t    return true;\n', '\t}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '    event Buy(address indexed sender, uint eth, uint token);\n', '    event Burn(address indexed from, uint256 value);\n', '    event StopSell();\n', '    event StopBuy();\n', '    event StarSell();\n', '    event StarBuy();\n', '}']
