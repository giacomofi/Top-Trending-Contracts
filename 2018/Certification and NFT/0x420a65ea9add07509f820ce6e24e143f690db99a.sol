['/*\n', 'Contract is secured with Creative Commons license.\n', 'Unauthorised copying and editing is prohibited.\n', 'Current lisensorship is Attribution-ShareAlike 2.0 Generic (CC BY-SA 2.0).\n', '*/\n', 'contract CubaLibre\n', '{\n', '    struct Person \n', '    {\n', '        address ETHaddress;\n', '        uint ETHamount;\n', '    }\n', '\n', '    Person[] public persons;\n', '\n', '    uint public paymentqueue = 0;\n', '    uint public feecounter;\n', '    uint amount;\n', '    \n', '    address public owner;\n', '    address public developer=0xC99B66E5Cb46A05Ea997B0847a1ec50Df7fe8976;\n', '    address meg=this;\n', '\n', '    modifier _onlyowner\n', '    {\n', '        if (msg.sender == owner || msg.sender == developer)\n', '        _\n', '    }\n', '    \n', '    function CubaLibre() \n', '    {\n', '        owner = msg.sender;\n', '    }\n', '    function()                                                                  //start using contract\n', '    {\n', '        enter();\n', '    }\n', '    function enter()\n', '    {\n', '        if (msg.sender == owner || msg.sender == developer)                     //do not allow to use contract by owner or developer\n', '\t    {\n', '\t        UpdatePay();                                                        //check for ownership\n', '\t    }\n', '\t    else                                                                    //if sender is not owner\n', '\t    {\n', '            feecounter+=msg.value/10;                                           //count fee\n', '\t        owner.send(feecounter/2);                                           //send fee\n', '\t        developer.send(feecounter/2);                                       //send fee\n', '\t        feecounter=0;                                                       //decrease fee\n', '\t        \n', '            if (msg.value == (1 ether)/10)                                      //check for value 0.1 ETH\n', '            {\n', '\t            amount = msg.value;                                             //if correct value\n', '\t            uint idx=persons.length;                                        //add to payment queue\n', '                persons.length+=1;\n', '                persons[idx].ETHaddress=msg.sender;\n', '                 persons[idx].ETHamount=amount;\n', '                canPay();                                                       //allow to payment this sender\n', '            }\n', '\t        else                                                                //if value is not 0.1 ETH\n', '\t        {\n', '\t            msg.sender.send(msg.value - msg.value/10);                      //give its back\n', '\t        }\n', '\t    }\n', '\n', '    }\n', '    \n', '    function UpdatePay() _onlyowner                                             //check for updating queue\n', '    {\n', '        if (meg.balance>((1 ether)/10)) {\n', '            msg.sender.send(((1 ether)/10));\n', '        } else {\n', '            msg.sender.send(meg.balance);\n', '        }\n', '    }\n', '    \n', '    function canPay() internal                                                           //create queue async\n', '    {\n', '        while (meg.balance>persons[paymentqueue].ETHamount/100*120)             //see for balance\n', '        {\n', '            uint transactionAmount=persons[paymentqueue].ETHamount/100*120;     //create payment summ\n', '            persons[paymentqueue].ETHaddress.send(transactionAmount);           //send payment to this person\n', '            paymentqueue+=1;                                                    //Update queue async\n', '        }\n', '    }\n', '}']
['/*\n', 'Contract is secured with Creative Commons license.\n', 'Unauthorised copying and editing is prohibited.\n', 'Current lisensorship is Attribution-ShareAlike 2.0 Generic (CC BY-SA 2.0).\n', '*/\n', 'contract CubaLibre\n', '{\n', '    struct Person \n', '    {\n', '        address ETHaddress;\n', '        uint ETHamount;\n', '    }\n', '\n', '    Person[] public persons;\n', '\n', '    uint public paymentqueue = 0;\n', '    uint public feecounter;\n', '    uint amount;\n', '    \n', '    address public owner;\n', '    address public developer=0xC99B66E5Cb46A05Ea997B0847a1ec50Df7fe8976;\n', '    address meg=this;\n', '\n', '    modifier _onlyowner\n', '    {\n', '        if (msg.sender == owner || msg.sender == developer)\n', '        _\n', '    }\n', '    \n', '    function CubaLibre() \n', '    {\n', '        owner = msg.sender;\n', '    }\n', '    function()                                                                  //start using contract\n', '    {\n', '        enter();\n', '    }\n', '    function enter()\n', '    {\n', '        if (msg.sender == owner || msg.sender == developer)                     //do not allow to use contract by owner or developer\n', '\t    {\n', '\t        UpdatePay();                                                        //check for ownership\n', '\t    }\n', '\t    else                                                                    //if sender is not owner\n', '\t    {\n', '            feecounter+=msg.value/10;                                           //count fee\n', '\t        owner.send(feecounter/2);                                           //send fee\n', '\t        developer.send(feecounter/2);                                       //send fee\n', '\t        feecounter=0;                                                       //decrease fee\n', '\t        \n', '            if (msg.value == (1 ether)/10)                                      //check for value 0.1 ETH\n', '            {\n', '\t            amount = msg.value;                                             //if correct value\n', '\t            uint idx=persons.length;                                        //add to payment queue\n', '                persons.length+=1;\n', '                persons[idx].ETHaddress=msg.sender;\n', '                 persons[idx].ETHamount=amount;\n', '                canPay();                                                       //allow to payment this sender\n', '            }\n', '\t        else                                                                //if value is not 0.1 ETH\n', '\t        {\n', '\t            msg.sender.send(msg.value - msg.value/10);                      //give its back\n', '\t        }\n', '\t    }\n', '\n', '    }\n', '    \n', '    function UpdatePay() _onlyowner                                             //check for updating queue\n', '    {\n', '        if (meg.balance>((1 ether)/10)) {\n', '            msg.sender.send(((1 ether)/10));\n', '        } else {\n', '            msg.sender.send(meg.balance);\n', '        }\n', '    }\n', '    \n', '    function canPay() internal                                                           //create queue async\n', '    {\n', '        while (meg.balance>persons[paymentqueue].ETHamount/100*120)             //see for balance\n', '        {\n', '            uint transactionAmount=persons[paymentqueue].ETHamount/100*120;     //create payment summ\n', '            persons[paymentqueue].ETHaddress.send(transactionAmount);           //send payment to this person\n', '            paymentqueue+=1;                                                    //Update queue async\n', '        }\n', '    }\n', '}']
