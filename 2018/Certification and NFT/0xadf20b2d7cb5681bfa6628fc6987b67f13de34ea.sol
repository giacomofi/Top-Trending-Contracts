['pragma solidity ^0.4.24;\n', '\n', '/* You&#39;ve seen all of this before. Here are the differences.\n', '\n', '// A. A quarter of your clones die when you sell ideas. Market saturation, y&#39;see?\n', '// B. You can "become" Norsefire and take the dev fees, since he&#39;s involved in everything.\n', '// B. 1. The Norsefire boon is a hot potato. If someone else buys it off you, you profit.\n', '// B. 2. When Norsefire flips, we actually send him 5% of the increase. You receive 50%, the contract receives the other 45%.\n', '// C. You get your &#39;free&#39; clones for 0.00232 Ether, because throwbaaaaaack.\n', '// D. Referral rates have been dropped to 5% instead of 20%. The referral target must have bought in.\n', '// E. The generation rate of ideas have been halved, as a sign of my opinion of the community at large.\n', '// F. God knows this will probably be successful in spite of myself.\n', '\n', '*/\n', '\n', 'contract CloneWars {\n', '    using SafeMath for uint;\n', '    \n', '    /* Event */\n', '    \n', '    event MarketBoost(\n', '        uint amountSent  \n', '    );\n', '    \n', '    event NorsefireSwitch(\n', '        address from,\n', '        address to,\n', '        uint price\n', '    );\n', '    \n', '    event ClonesDeployed(\n', '        address deployer,\n', '        uint clones\n', '    );\n', '    \n', '    event IdeasSold(\n', '        address seller,\n', '        uint ideas\n', '    );\n', '    \n', '    event IdeasBought(\n', '        address buyer,\n', '        uint ideas\n', '    );\n', '    \n', '    /* Constants */\n', '    \n', '    uint256 public clones_to_create_one_idea = 2 days;\n', '    uint256 public starting_clones           = 3; // Shrimp, Shrooms and Snails.\n', '    uint256        PSN                       = 10000;\n', '    uint256        PSNH                      = 5000;\n', '    address        actualNorse               = 0x4F4eBF556CFDc21c3424F85ff6572C77c514Fcae;\n', '    \n', '    /* Variables */\n', '    uint256 public marketIdeas;\n', '    uint256 public norsefirePrice;\n', '    bool    public initialized;\n', '    address public currentNorsefire;\n', '    mapping (address => uint256) public arrayOfClones;\n', '    mapping (address => uint256) public claimedIdeas;\n', '    mapping (address => uint256) public lastDeploy;\n', '    mapping (address => address) public referrals;\n', '    \n', '    constructor () public {\n', '        initialized      = false;\n', '        norsefirePrice   = 0.1 ether;\n', '        currentNorsefire = 0x133702E91d1B7fBcb84D4D582BA54F834f8fD1f8;\n', '    }\n', '    \n', '    function becomeNorsefire() public payable {\n', '        require(initialized);\n', '        address oldNorseAddr = currentNorsefire;\n', '        uint oldNorsePrice   = norsefirePrice;\n', '        \n', '        // Did you actually send enough?\n', '        require(msg.value >= norsefirePrice);\n', '        \n', '        uint excess          = msg.value.sub(oldNorsePrice);\n', '        norsefirePrice       = oldNorsePrice.add(oldNorsePrice.div(10));\n', '        uint diffFivePct     = (norsefirePrice.sub(oldNorsePrice)).div(20);\n', '        uint flipPrize       = diffFivePct.mul(10);\n', '        uint marketBoost     = diffFivePct.mul(9);\n', '        address _newNorse    = msg.sender;\n', '        uint    _toRefund    = (oldNorsePrice.add(flipPrize)).add(excess);\n', '        currentNorsefire     = _newNorse;\n', '        oldNorseAddr.transfer(_toRefund);\n', '        actualNorse.transfer(diffFivePct);\n', '        boostCloneMarket(marketBoost);\n', '        emit NorsefireSwitch(oldNorseAddr, _newNorse, norsefirePrice);\n', '    }\n', '    \n', '    function boostCloneMarket(uint _eth) public payable {\n', '        require(initialized);\n', '        emit MarketBoost(_eth);\n', '    }\n', '    \n', '    function deployIdeas(address ref) public{\n', '        \n', '        require(initialized);\n', '        \n', '        address _deployer = msg.sender;\n', '        \n', '        if(referrals[_deployer] == 0 && referrals[_deployer] != _deployer){\n', '            referrals[_deployer]=ref;\n', '        }\n', '        \n', '        uint256 myIdeas          = getMyIdeas();\n', '        uint256 newIdeas         = myIdeas.div(clones_to_create_one_idea);\n', '        arrayOfClones[_deployer] = arrayOfClones[_deployer].add(newIdeas);\n', '        claimedIdeas[_deployer]  = 0;\n', '        lastDeploy[_deployer]    = now;\n', '        \n', '        // Send referral ideas: dropped to 5% instead of 20% to reduce inflation.\n', '        if (arrayOfClones[referrals[_deployer]] > 0) \n', '        {\n', '            claimedIdeas[referrals[_deployer]] = claimedIdeas[referrals[_deployer]].add(myIdeas.div(20));\n', '        }\n', '        \n', '        // Boost market to minimise idea hoarding\n', '        marketIdeas = marketIdeas.add(myIdeas.div(10));\n', '        emit ClonesDeployed(_deployer, newIdeas);\n', '    }\n', '    \n', '    function sellIdeas() public {\n', '        require(initialized);\n', '        \n', '        address _caller = msg.sender;\n', '        \n', '        uint256 hasIdeas        = getMyIdeas();\n', '        uint256 ideaValue       = calculateIdeaSell(hasIdeas);\n', '        uint256 fee             = devFee(ideaValue);\n', '        // Destroy a quarter the owner&#39;s clones when selling ideas thanks to market saturation.\n', '        arrayOfClones[_caller]  = (arrayOfClones[msg.sender].div(4)).mul(3);\n', '        claimedIdeas[_caller]   = 0;\n', '        lastDeploy[_caller]     = now;\n', '        marketIdeas             = marketIdeas.add(hasIdeas);\n', '        currentNorsefire.transfer(fee);\n', '        _caller.transfer(ideaValue.sub(fee));\n', '        emit IdeasSold(_caller, hasIdeas);\n', '    }\n', '    \n', '    function buyIdeas() public payable{\n', '        require(initialized);\n', '        address _buyer       = msg.sender;\n', '        uint    _sent        = msg.value;\n', '        uint256 ideasBought  = calculateIdeaBuy(_sent, SafeMath.sub(address(this).balance,_sent));\n', '        ideasBought          = ideasBought.sub(devFee(ideasBought));\n', '        currentNorsefire.transfer(devFee(_sent));\n', '        claimedIdeas[_buyer] = claimedIdeas[_buyer].add(ideasBought);\n', '        emit IdeasBought(_buyer, ideasBought);\n', '    }\n', '\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '    \n', '    function calculateIdeaSell(uint256 _ideas) public view returns(uint256){\n', '        return calculateTrade(_ideas,marketIdeas,address(this).balance);\n', '    }\n', '    \n', '    function calculateIdeaBuy(uint256 eth,uint256 _balance) public view returns(uint256){\n', '        return calculateTrade(eth, _balance, marketIdeas);\n', '    }\n', '    function calculateIdeaBuySimple(uint256 eth) public view returns(uint256){\n', '        return calculateIdeaBuy(eth,address(this).balance);\n', '    }\n', '    \n', '    function devFee(uint256 amount) public pure returns(uint256){\n', '        return amount.mul(4).div(100);\n', '    }\n', '    \n', '    function releaseTheOriginal(uint256 _ideas) public payable {\n', '        require(msg.sender  == currentNorsefire);\n', '        require(marketIdeas == 0);\n', '        initialized         = true;\n', '        marketIdeas         = _ideas;\n', '        boostCloneMarket(msg.value);\n', '    }\n', '    \n', '    function hijackClones() public payable{\n', '        require(initialized);\n', '        require(msg.value==0.00232 ether); // Throwback to the OG.\n', '        address _caller        = msg.sender;\n', '        currentNorsefire.transfer(msg.value); // The current Norsefire gets this regitration\n', '        require(arrayOfClones[_caller]==0);\n', '        lastDeploy[_caller]    = now;\n', '        arrayOfClones[_caller] = starting_clones;\n', '    }\n', '    \n', '    function getBalance() public view returns(uint256){\n', '        return address(this).balance;\n', '    }\n', '    \n', '    function getMyClones() public view returns(uint256){\n', '        return arrayOfClones[msg.sender];\n', '    }\n', '    \n', '    function getNorsefirePrice() public view returns(uint256){\n', '        return norsefirePrice;\n', '    }\n', '    \n', '    function getMyIdeas() public view returns(uint256){\n', '        address _caller = msg.sender;\n', '        return claimedIdeas[_caller].add(getIdeasSinceLastDeploy(_caller));\n', '    }\n', '    \n', '    function getIdeasSinceLastDeploy(address adr) public view returns(uint256){\n', '        uint256 secondsPassed=min(clones_to_create_one_idea, now.sub(lastDeploy[adr]));\n', '        return secondsPassed.mul(arrayOfClones[adr]);\n', '    }\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']