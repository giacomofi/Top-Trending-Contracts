['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  WhitelistedGateway public gateway;\n', '  PendingContributions public pending;\n', '\n', '\tbool closedManually = false;\n', '\tbool acceptWithoutWhitelist = true;\n', '  uint256 minContrib;\n', '\n', '\tfunction setPending(bool newValue) public onlyOwner {\n', '\t\tacceptWithoutWhitelist = newValue;\n', '\t}\n', '\n', '\tfunction setClosedManually(bool newValue) public onlyOwner {\n', '\t\tclosedManually = newValue;\n', '\t}\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, address _vault, Whitelist _whitelist, uint256 _minContrib) public {\n', '    // require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_vault != address(0));\n', '\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    minContrib = _minContrib;\n', '    gateway = new WhitelistedGateway(_whitelist, _vault);\n', '\tpending = new PendingContributions(gateway);\n', '\t// allow the pending container to fund the gateway\n', '\tgateway.addOwner(pending);\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    require(validPurchase());\n', '    forwardFunds();  \n', '  }\n', '\n', '  // send ether either to the Gateway or to the PendingContributions\n', '  function forwardFunds() internal {\n', '\tif(gateway.isWhitelisted(msg.sender)) {\n', '\t\tgateway.fund.value(msg.value)(msg.sender);\n', '\t\treturn;\n', '\t} \n', '\tpending.fund.value(msg.value)(msg.sender);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool sufficientPurchase = msg.value >= minContrib;\n', '    bool whitelisted = gateway.isWhitelisted(msg.sender);\n', '    return !closedManually && withinPeriod && sufficientPurchase && (acceptWithoutWhitelist || whitelisted);\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '}\n', '\n', 'contract PendingContributions is Ownable {\n', '\tusing SafeMath for uint256;\n', '\n', '\tmapping(address=>uint256) public contributions;\n', '\tWhitelistedGateway public gateway;\n', '\n', '\tevent PendingContributionReceived(address contributor, uint256 value, uint256 timestamp);\n', '\tevent PendingContributionAccepted(address contributor, uint256 value, uint256 timestamp);\n', '\tevent PendingContributionWithdrawn(address contributor, uint256 value, uint256 timestamp);\n', '\n', '\tfunction PendingContributions(WhitelistedGateway _gateway) public {\n', '\t\tgateway = _gateway;\n', '\t}\n', '\n', '\tmodifier onlyWhitelisted(address contributor) {\n', '\t\trequire(gateway.isWhitelisted(contributor));\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction fund(address contributor) payable public onlyOwner {\n', '\t\tcontributions[contributor] += msg.value;\n', '\t\tPendingContributionReceived(contributor, msg.value, now);\n', '\t}\n', '\n', '\tfunction withdraw() public {\n', '\t\tuint256 toTransfer = contributions[msg.sender];\n', '\t\trequire(toTransfer > 0);\n', '\t\tcontributions[msg.sender] = 0;\n', '\t\tmsg.sender.transfer(toTransfer);\n', '\t\tPendingContributionWithdrawn(msg.sender, toTransfer, now);\n', '\t}\n', '\n', '\tfunction retry(address contributor) public onlyWhitelisted(contributor) {\n', '\t\tuint256 toTransfer = contributions[contributor];\n', '\t\trequire(toTransfer > 0);\n', '\t\tgateway.fund.value(toTransfer)(contributor);\n', '\t\tcontributions[contributor] = 0;\n', '\t\tPendingContributionAccepted(contributor, toTransfer, now);\n', '\t}\n', '}\n', '\n', 'contract Whitelist is Ownable {\n', '\tusing SafeMath for uint256;\n', '\n', '\tmapping(address=>bool) public whitelist;\n', '\t\n', '\tevent Authorized(address candidate, uint timestamp);\n', '\tevent Revoked(address candidate, uint timestamp);\n', '\n', '\tfunction authorize(address candidate) public onlyOwner {\n', '\t    whitelist[candidate] = true;\n', '\t    Authorized(candidate, now);\n', '\t}\n', '\t\n', '\t// also if not in the list..\n', '\tfunction revoke(address candidate) public onlyOwner {\n', '\t    whitelist[candidate] = false;\n', '\t    Revoked(candidate, now);\n', '\t}\n', '\t\n', '\tfunction authorizeMany(address[50] candidates) public onlyOwner {\n', '\t    for(uint i = 0; i < candidates.length; i++) {\n', '\t        authorize(candidates[i]);\n', '\t    }\n', '\t}\n', '\n', '\tfunction isWhitelisted(address candidate) public view returns(bool) {\n', '\t\treturn whitelist[candidate];\n', '\t}\n', '}\n', '\n', 'contract WhitelistedGateway {\n', '\tusing SafeMath for uint256;\n', '\n', '\tmapping(address=>bool) public owners;\n', '\tmapping(address=>uint) public contributions;\n', '\taddress public vault;\n', '\tWhitelist public whitelist;\n', '\n', '\tevent NewContribution(address contributor, uint256 amount, uint256 timestamp);\n', '\n', '\tmodifier onlyOwners() {\n', '\t\trequire(owners[msg.sender]);\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction addOwner(address newOwner) public onlyOwners {\n', '\t\towners[newOwner] = true;\n', '\t}\n', '\n', '\tfunction WhitelistedGateway(Whitelist _whitelist, address _vault) public {\n', '\t\twhitelist = _whitelist;\n', '\t\tvault = _vault;\n', '\t\towners[msg.sender] = true;\n', '\t}\n', '\n', '\tfunction isWhitelisted(address candidate) public view returns(bool) {\n', '\t\treturn whitelist.isWhitelisted(candidate);\n', '\t}\n', '\n', '\tfunction fund(address contributor) public payable onlyOwners {\n', '\t\tcontributions[contributor] += msg.value;\n', '\t\tvault.transfer(msg.value);\n', '\t\tNewContribution(contributor, msg.value, now);\n', '\t}\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  WhitelistedGateway public gateway;\n', '  PendingContributions public pending;\n', '\n', '\tbool closedManually = false;\n', '\tbool acceptWithoutWhitelist = true;\n', '  uint256 minContrib;\n', '\n', '\tfunction setPending(bool newValue) public onlyOwner {\n', '\t\tacceptWithoutWhitelist = newValue;\n', '\t}\n', '\n', '\tfunction setClosedManually(bool newValue) public onlyOwner {\n', '\t\tclosedManually = newValue;\n', '\t}\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, address _vault, Whitelist _whitelist, uint256 _minContrib) public {\n', '    // require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_vault != address(0));\n', '\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    minContrib = _minContrib;\n', '    gateway = new WhitelistedGateway(_whitelist, _vault);\n', '\tpending = new PendingContributions(gateway);\n', '\t// allow the pending container to fund the gateway\n', '\tgateway.addOwner(pending);\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    require(validPurchase());\n', '    forwardFunds();  \n', '  }\n', '\n', '  // send ether either to the Gateway or to the PendingContributions\n', '  function forwardFunds() internal {\n', '\tif(gateway.isWhitelisted(msg.sender)) {\n', '\t\tgateway.fund.value(msg.value)(msg.sender);\n', '\t\treturn;\n', '\t} \n', '\tpending.fund.value(msg.value)(msg.sender);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool sufficientPurchase = msg.value >= minContrib;\n', '    bool whitelisted = gateway.isWhitelisted(msg.sender);\n', '    return !closedManually && withinPeriod && sufficientPurchase && (acceptWithoutWhitelist || whitelisted);\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '}\n', '\n', 'contract PendingContributions is Ownable {\n', '\tusing SafeMath for uint256;\n', '\n', '\tmapping(address=>uint256) public contributions;\n', '\tWhitelistedGateway public gateway;\n', '\n', '\tevent PendingContributionReceived(address contributor, uint256 value, uint256 timestamp);\n', '\tevent PendingContributionAccepted(address contributor, uint256 value, uint256 timestamp);\n', '\tevent PendingContributionWithdrawn(address contributor, uint256 value, uint256 timestamp);\n', '\n', '\tfunction PendingContributions(WhitelistedGateway _gateway) public {\n', '\t\tgateway = _gateway;\n', '\t}\n', '\n', '\tmodifier onlyWhitelisted(address contributor) {\n', '\t\trequire(gateway.isWhitelisted(contributor));\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction fund(address contributor) payable public onlyOwner {\n', '\t\tcontributions[contributor] += msg.value;\n', '\t\tPendingContributionReceived(contributor, msg.value, now);\n', '\t}\n', '\n', '\tfunction withdraw() public {\n', '\t\tuint256 toTransfer = contributions[msg.sender];\n', '\t\trequire(toTransfer > 0);\n', '\t\tcontributions[msg.sender] = 0;\n', '\t\tmsg.sender.transfer(toTransfer);\n', '\t\tPendingContributionWithdrawn(msg.sender, toTransfer, now);\n', '\t}\n', '\n', '\tfunction retry(address contributor) public onlyWhitelisted(contributor) {\n', '\t\tuint256 toTransfer = contributions[contributor];\n', '\t\trequire(toTransfer > 0);\n', '\t\tgateway.fund.value(toTransfer)(contributor);\n', '\t\tcontributions[contributor] = 0;\n', '\t\tPendingContributionAccepted(contributor, toTransfer, now);\n', '\t}\n', '}\n', '\n', 'contract Whitelist is Ownable {\n', '\tusing SafeMath for uint256;\n', '\n', '\tmapping(address=>bool) public whitelist;\n', '\t\n', '\tevent Authorized(address candidate, uint timestamp);\n', '\tevent Revoked(address candidate, uint timestamp);\n', '\n', '\tfunction authorize(address candidate) public onlyOwner {\n', '\t    whitelist[candidate] = true;\n', '\t    Authorized(candidate, now);\n', '\t}\n', '\t\n', '\t// also if not in the list..\n', '\tfunction revoke(address candidate) public onlyOwner {\n', '\t    whitelist[candidate] = false;\n', '\t    Revoked(candidate, now);\n', '\t}\n', '\t\n', '\tfunction authorizeMany(address[50] candidates) public onlyOwner {\n', '\t    for(uint i = 0; i < candidates.length; i++) {\n', '\t        authorize(candidates[i]);\n', '\t    }\n', '\t}\n', '\n', '\tfunction isWhitelisted(address candidate) public view returns(bool) {\n', '\t\treturn whitelist[candidate];\n', '\t}\n', '}\n', '\n', 'contract WhitelistedGateway {\n', '\tusing SafeMath for uint256;\n', '\n', '\tmapping(address=>bool) public owners;\n', '\tmapping(address=>uint) public contributions;\n', '\taddress public vault;\n', '\tWhitelist public whitelist;\n', '\n', '\tevent NewContribution(address contributor, uint256 amount, uint256 timestamp);\n', '\n', '\tmodifier onlyOwners() {\n', '\t\trequire(owners[msg.sender]);\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction addOwner(address newOwner) public onlyOwners {\n', '\t\towners[newOwner] = true;\n', '\t}\n', '\n', '\tfunction WhitelistedGateway(Whitelist _whitelist, address _vault) public {\n', '\t\twhitelist = _whitelist;\n', '\t\tvault = _vault;\n', '\t\towners[msg.sender] = true;\n', '\t}\n', '\n', '\tfunction isWhitelisted(address candidate) public view returns(bool) {\n', '\t\treturn whitelist.isWhitelisted(candidate);\n', '\t}\n', '\n', '\tfunction fund(address contributor) public payable onlyOwners {\n', '\t\tcontributions[contributor] += msg.value;\n', '\t\tvault.transfer(msg.value);\n', '\t\tNewContribution(contributor, msg.value, now);\n', '\t}\n', '}']
