['pragma solidity ^0.4.19;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount);\n', '}\n', '\n', 'contract Crowdsale {\n', '    address public beneficiary;\n', '    uint public amountRaised;\n', '    token public tokenReward;\n', '    uint256 public soldTokensCounter;\n', '    uint public price;\n', '    uint public saleStage = 1;\n', '    bool public crowdsaleClosed = false;\n', '    bool public adminVer = false;\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    event FundTransfer(address backer, uint amount, uint price, bool isContribution);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function Crowdsale() {\n', '        beneficiary = msg.sender;\n', '        tokenReward = token(0x745Fa4002332C020f6a05B3FE04BCCf060e36dD3);\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == beneficiary);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Check ownership\n', '     */\n', '    function checkAdmin() onlyOwner {\n', '        adminVer = true;\n', '    }\n', '\n', '    /**\n', '     * Change crowdsale discount stage\n', '     */\n', '    function changeStage(uint stage) onlyOwner {\n', '        saleStage = stage;\n', '    }\n', '\n', '    /**\n', '     * Return unsold tokens to beneficiary address\n', '     */\n', '    function getUnsoldTokens(uint val_) onlyOwner {\n', '        tokenReward.transfer(beneficiary, val_);\n', '    }\n', '\n', '    /**\n', '     * Return unsold tokens to beneficiary address with decimals\n', '     */\n', '    function getUnsoldTokensWithDecimals(uint val_, uint dec_) onlyOwner {\n', '        val_ = val_ * 10 ** dec_;\n', '        tokenReward.transfer(beneficiary, val_);\n', '    }\n', '\n', '    /**\n', '     * Close/Open crowdsale\n', '     */\n', '    function closeCrowdsale(bool closeType) onlyOwner {\n', '        crowdsaleClosed = closeType;\n', '    }\n', '\n', '    /**\n', '     * Return current token price\n', '     *\n', '     * The price depends on `saleStage` and `amountRaised`\n', '     */\n', '    function getPrice() returns (uint) {\n', '        if (saleStage == 4) {\n', '            return 0.0002000 ether;\n', '        } else if (saleStage == 3) {\n', '            return 0.0001667 ether;\n', '        } else if (saleStage == 2) {\n', '            return 0.0001429 ether;\n', '        }\n', '        return 0.000125 ether;\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable {\n', '        require(!crowdsaleClosed);                                                         \n', '        price = getPrice();                                                                //get current token price\n', '        uint amount = msg.value;                                                           //save users eth value\n', '        balanceOf[msg.sender] += amount;                                                   //save users eth value in balance list \n', '        amountRaised += amount;                                                            //update total amount of crowdsale\n', '        uint sendTokens = (amount / price) * 10 ** uint256(18);                            //calculate user&#39;s tokens\n', '        tokenReward.transfer(msg.sender, sendTokens);                                      //send tokens to user\n', '        soldTokensCounter += sendTokens;                                                   //update total sold tokens counter\n', '        FundTransfer(msg.sender, amount, price, true);                                     //pin transaction data in blockchain\n', '        if (beneficiary.send(amount)) { FundTransfer(beneficiary, amount, price, false); } //send users amount to beneficiary\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount);\n', '}\n', '\n', 'contract Crowdsale {\n', '    address public beneficiary;\n', '    uint public amountRaised;\n', '    token public tokenReward;\n', '    uint256 public soldTokensCounter;\n', '    uint public price;\n', '    uint public saleStage = 1;\n', '    bool public crowdsaleClosed = false;\n', '    bool public adminVer = false;\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    event FundTransfer(address backer, uint amount, uint price, bool isContribution);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function Crowdsale() {\n', '        beneficiary = msg.sender;\n', '        tokenReward = token(0x745Fa4002332C020f6a05B3FE04BCCf060e36dD3);\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == beneficiary);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Check ownership\n', '     */\n', '    function checkAdmin() onlyOwner {\n', '        adminVer = true;\n', '    }\n', '\n', '    /**\n', '     * Change crowdsale discount stage\n', '     */\n', '    function changeStage(uint stage) onlyOwner {\n', '        saleStage = stage;\n', '    }\n', '\n', '    /**\n', '     * Return unsold tokens to beneficiary address\n', '     */\n', '    function getUnsoldTokens(uint val_) onlyOwner {\n', '        tokenReward.transfer(beneficiary, val_);\n', '    }\n', '\n', '    /**\n', '     * Return unsold tokens to beneficiary address with decimals\n', '     */\n', '    function getUnsoldTokensWithDecimals(uint val_, uint dec_) onlyOwner {\n', '        val_ = val_ * 10 ** dec_;\n', '        tokenReward.transfer(beneficiary, val_);\n', '    }\n', '\n', '    /**\n', '     * Close/Open crowdsale\n', '     */\n', '    function closeCrowdsale(bool closeType) onlyOwner {\n', '        crowdsaleClosed = closeType;\n', '    }\n', '\n', '    /**\n', '     * Return current token price\n', '     *\n', '     * The price depends on `saleStage` and `amountRaised`\n', '     */\n', '    function getPrice() returns (uint) {\n', '        if (saleStage == 4) {\n', '            return 0.0002000 ether;\n', '        } else if (saleStage == 3) {\n', '            return 0.0001667 ether;\n', '        } else if (saleStage == 2) {\n', '            return 0.0001429 ether;\n', '        }\n', '        return 0.000125 ether;\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable {\n', '        require(!crowdsaleClosed);                                                         \n', '        price = getPrice();                                                                //get current token price\n', '        uint amount = msg.value;                                                           //save users eth value\n', '        balanceOf[msg.sender] += amount;                                                   //save users eth value in balance list \n', '        amountRaised += amount;                                                            //update total amount of crowdsale\n', "        uint sendTokens = (amount / price) * 10 ** uint256(18);                            //calculate user's tokens\n", '        tokenReward.transfer(msg.sender, sendTokens);                                      //send tokens to user\n', '        soldTokensCounter += sendTokens;                                                   //update total sold tokens counter\n', '        FundTransfer(msg.sender, amount, price, true);                                     //pin transaction data in blockchain\n', '        if (beneficiary.send(amount)) { FundTransfer(beneficiary, amount, price, false); } //send users amount to beneficiary\n', '    }\n', '}']
