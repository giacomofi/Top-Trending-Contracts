['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', '// &#39;GILLIONCOIN&#39; CROWDSALE token contract\n', '//\n', '// Deployed to : 0x5dbbf0451f49ccee96a4ab9a530094b35e377f1b\n', '// Symbol      : GILLION\n', '// Name        : GILLION TOKEN\n', '// Total supply: 1000000000\n', '// Decimals    : 18\n', '//\n', '// Enjoy.\n', '//\n', '// (c) by Moritz Neto & Daniel Bar with BokkyPooBah / Bok Consulting Pty Ltd Au 2017. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract GILLIONTOKEN is ERC20Interface, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    uint public startDate;\n', '    uint public bonusEnds;\n', '    uint public endDate;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function GILLIONTOKEN() public {\n', '        symbol = "GILLION";\n', '        name = "GILLION TOKEN";\n', '        decimals = 18;\n', '        bonusEnds = now + 1 weeks;\n', '        endDate = now + 7 weeks;\n', '\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account. The `spender` contract function\n', '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // 300,000 FWD Tokens per 1 ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        require(now >= startDate && now <= endDate);\n', '        uint tokens;\n', '        if (now <= bonusEnds) {\n', '            tokens = msg.value * 330000;\n', '        } else {\n', '            tokens = msg.value * 300000;\n', '        }\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n', '        _totalSupply = safeAdd(_totalSupply, tokens);\n', '        Transfer(address(0), msg.sender, tokens);\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}pragma solidity ^0.4.0;\n', 'contract Ballot {\n', '\n', '    struct Voter {\n', '        uint weight;\n', '        bool voted;\n', '        uint8 vote;\n', '        address delegate;\n', '    }\n', '    struct Proposal {\n', '        uint voteCount;\n', '    }\n', '\n', '    address chairperson;\n', '    mapping(address => Voter) voters;\n', '    Proposal[] proposals;\n', '\n', '    /// Create a new ballot with $(_numProposals) different proposals.\n', '    function Ballot(uint8 _numProposals) public {\n', '        chairperson = msg.sender;\n', '        voters[chairperson].weight = 1;\n', '        proposals.length = _numProposals;\n', '    }\n', '\n', '    /// Give $(toVoter) the right to vote on this ballot.\n', '    /// May only be called by $(chairperson).\n', '    function giveRightToVote(address toVoter) public {\n', '        if (msg.sender != chairperson || voters[toVoter].voted) return;\n', '        voters[toVoter].weight = 1;\n', '    }\n', '\n', '    /// Delegate your vote to the voter $(to).\n', '    function delegate(address to) public {\n', '        Voter storage sender = voters[msg.sender]; // assigns reference\n', '        if (sender.voted) return;\n', '        while (voters[to].delegate != address(0) && voters[to].delegate != msg.sender)\n', '            to = voters[to].delegate;\n', '        if (to == msg.sender) return;\n', '        sender.voted = true;\n', '        sender.delegate = to;\n', '        Voter storage delegateTo = voters[to];\n', '        if (delegateTo.voted)\n', '            proposals[delegateTo.vote].voteCount += sender.weight;\n', '        else\n', '            delegateTo.weight += sender.weight;\n', '    }\n', '\n', '    /// Give a single vote to proposal $(toProposal).\n', '    function vote(uint8 toProposal) public {\n', '        Voter storage sender = voters[msg.sender];\n', '        if (sender.voted || toProposal >= proposals.length) return;\n', '        sender.voted = true;\n', '        sender.vote = toProposal;\n', '        proposals[toProposal].voteCount += sender.weight;\n', '    }\n', '\n', '    function winningProposal() public constant returns (uint8 _winningProposal) {\n', '        uint256 winningVoteCount = 0;\n', '        for (uint8 prop = 0; prop < proposals.length; prop++)\n', '            if (proposals[prop].voteCount > winningVoteCount) {\n', '                winningVoteCount = proposals[prop].voteCount;\n', '                _winningProposal = prop;\n', '            }\n', '    }\n', '}']