['pragma solidity ^0.4.24;\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract TicHTUContract is ERC20Interface{\n', '    using SafeMath for uint;\n', '    \n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint _totalSupply;\n', '    uint256 public rate;\n', '    address owner;\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '\t// @_owner: owner&#39;s address where to keep donations\n', '    // ------------------------------------------------------------------------\n', '    constructor() public{\n', '        symbol = "HTU";\n', '        name = "HONTUBE";\n', '        decimals = 18;\n', '        rate = 500; //OBL per wei\n', '        owner = msg.sender;\n', '        _totalSupply = totalSupply();\n', '        balances[this] = _totalSupply;\n', '        emit Transfer(address(0),this,_totalSupply);\n', '    }\n', '    \n', '    function totalSupply() public constant returns (uint){\n', '       return 25000000000 * 10**uint(decimals); //25 billion\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Transfers the tokens from contracts balance of OBL&#39;s\n', '    // ------------------------------------------------------------------------\n', '    function _transfer(address _to, uint _tokens) internal returns (bool success){\n', '        require(_to != 0x0);\n', '\n', '        require(balances[_to] + _tokens >= balances[_to]);\n', '        balances[this] = balances[this].sub(_tokens);\n', '        balances[_to] = balances[_to].add(_tokens);\n', '        emit Transfer(this,_to,_tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // payable function to receive ethers\n', '    // ------------------------------------------------------------------------\n', '    function () external payable{\n', '        _buyTokens(msg.sender);\n', '    }\n', '    // ------------------------------------------------------------------------\n', '    // verifies, calculates and sends tokens to beneficiary\n', '    // ------------------------------------------------------------------------\n', '    function _buyTokens(address _beneficiary) public payable{\n', '        \n', '        uint256 weiAmount = msg.value;\n', '        \n', '        // calculate OBL tokens to be delivered\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '        \n', '        _preValidatePurchase(_beneficiary, weiAmount, tokens);\n', '\n', '        _processPurchase(_beneficiary, tokens);\n', '        emit TokenPurchase(this, _beneficiary, weiAmount, tokens);\n', '\n', '        _forwardFunds();\n', '    }\n', '\t// ------------------------------------------------------------------------\n', '    // verifies the (sender address, amount of ethers)\n', '\t// Checks if balance does not exceeds 650 OBL\n', '    // ------------------------------------------------------------------------\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount, uint256 tokens) view internal {\n', '        require(_beneficiary != address(0x0));\n', '        require(_weiAmount != 0);\n', '    }\n', '\t// ------------------------------------------------------------------------\n', '    // calculates amount of tokens given weiAmount\n', '    // ------------------------------------------------------------------------\n', '    function _getTokenAmount(uint256 _weiAmount) view internal returns (uint256) {\n', '        return _weiAmount.mul(rate);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // calculates amount of tokens given weiAmount\n', '    // ------------------------------------------------------------------------\n', '    function _changeRate(uint256 _rate){\n', '        rate = _rate;\n', '    }\n', '\t// ------------------------------------------------------------------------\n', '    // calls ERC20&#39;s transfer function to send tokens to beneficiary\n', '    // ------------------------------------------------------------------------\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _transfer(_beneficiary,_tokenAmount);\n', '    }\n', '\t// ------------------------------------------------------------------------\n', '    // deliver tokens to the beneficiary\n', '    // ------------------------------------------------------------------------\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '\t// ------------------------------------------------------------------------\n', '    // forward donations to the owner\n', '    // ------------------------------------------------------------------------\n', '    function _forwardFunds() internal {\n', '        owner.transfer(msg.value);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract TicHTUContract is ERC20Interface{\n', '    using SafeMath for uint;\n', '    \n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint _totalSupply;\n', '    uint256 public rate;\n', '    address owner;\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', "\t// @_owner: owner's address where to keep donations\n", '    // ------------------------------------------------------------------------\n', '    constructor() public{\n', '        symbol = "HTU";\n', '        name = "HONTUBE";\n', '        decimals = 18;\n', '        rate = 500; //OBL per wei\n', '        owner = msg.sender;\n', '        _totalSupply = totalSupply();\n', '        balances[this] = _totalSupply;\n', '        emit Transfer(address(0),this,_totalSupply);\n', '    }\n', '    \n', '    function totalSupply() public constant returns (uint){\n', '       return 25000000000 * 10**uint(decimals); //25 billion\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', "    // Transfers the tokens from contracts balance of OBL's\n", '    // ------------------------------------------------------------------------\n', '    function _transfer(address _to, uint _tokens) internal returns (bool success){\n', '        require(_to != 0x0);\n', '\n', '        require(balances[_to] + _tokens >= balances[_to]);\n', '        balances[this] = balances[this].sub(_tokens);\n', '        balances[_to] = balances[_to].add(_tokens);\n', '        emit Transfer(this,_to,_tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // payable function to receive ethers\n', '    // ------------------------------------------------------------------------\n', '    function () external payable{\n', '        _buyTokens(msg.sender);\n', '    }\n', '    // ------------------------------------------------------------------------\n', '    // verifies, calculates and sends tokens to beneficiary\n', '    // ------------------------------------------------------------------------\n', '    function _buyTokens(address _beneficiary) public payable{\n', '        \n', '        uint256 weiAmount = msg.value;\n', '        \n', '        // calculate OBL tokens to be delivered\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '        \n', '        _preValidatePurchase(_beneficiary, weiAmount, tokens);\n', '\n', '        _processPurchase(_beneficiary, tokens);\n', '        emit TokenPurchase(this, _beneficiary, weiAmount, tokens);\n', '\n', '        _forwardFunds();\n', '    }\n', '\t// ------------------------------------------------------------------------\n', '    // verifies the (sender address, amount of ethers)\n', '\t// Checks if balance does not exceeds 650 OBL\n', '    // ------------------------------------------------------------------------\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount, uint256 tokens) view internal {\n', '        require(_beneficiary != address(0x0));\n', '        require(_weiAmount != 0);\n', '    }\n', '\t// ------------------------------------------------------------------------\n', '    // calculates amount of tokens given weiAmount\n', '    // ------------------------------------------------------------------------\n', '    function _getTokenAmount(uint256 _weiAmount) view internal returns (uint256) {\n', '        return _weiAmount.mul(rate);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // calculates amount of tokens given weiAmount\n', '    // ------------------------------------------------------------------------\n', '    function _changeRate(uint256 _rate){\n', '        rate = _rate;\n', '    }\n', '\t// ------------------------------------------------------------------------\n', "    // calls ERC20's transfer function to send tokens to beneficiary\n", '    // ------------------------------------------------------------------------\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _transfer(_beneficiary,_tokenAmount);\n', '    }\n', '\t// ------------------------------------------------------------------------\n', '    // deliver tokens to the beneficiary\n', '    // ------------------------------------------------------------------------\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '\t// ------------------------------------------------------------------------\n', '    // forward donations to the owner\n', '    // ------------------------------------------------------------------------\n', '    function _forwardFunds() internal {\n', '        owner.transfer(msg.value);\n', '    }\n', '}']
