['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/// @title Whitelist for TKO token sale.\n', '/// @author Takeoff Technology OU - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="3950575f56794d58525c565f5f174e4a">[email&#160;protected]</a>>\n', '/// @dev Based on code by OpenZeppelin&#39;s WhitelistedCrowdsale.sol\n', 'contract TkoWhitelist is Ownable{\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // Manage whitelist account address.\n', '    address public admin;\n', '\n', '    mapping(address => uint256) internal totalIndividualWeiAmount;\n', '    mapping(address => bool) internal whitelist;\n', '\n', '    event AdminChanged(address indexed previousAdmin, address indexed newAdmin);\n', '\n', '\n', '    /**\n', '     * TkoWhitelist\n', '     * @dev TkoWhitelist is the storage for whitelist and total amount by contributor&#39;s address.\n', '     * @param _admin Address of managing whitelist.\n', '     */\n', '    function TkoWhitelist (address _admin) public {\n', '        require(_admin != address(0));\n', '        admin = _admin;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner or the admin.\n', '     */\n', '    modifier onlyOwnerOrAdmin() {\n', '        require(msg.sender == owner || msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to change administrator account of the contract to a newAdmin.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function changeAdmin(address newAdmin) public onlyOwner {\n', '        require(newAdmin != address(0));\n', '        emit AdminChanged(admin, newAdmin);\n', '        admin = newAdmin;\n', '    }\n', '\n', '\n', '    /**\n', '      * @dev Returen whether the beneficiary is whitelisted.\n', '      */\n', '    function isWhitelisted(address _beneficiary) external view onlyOwnerOrAdmin returns (bool) {\n', '        return whitelist[_beneficiary];\n', '    }\n', '\n', '    /**\n', '     * @dev Adds single address to whitelist.\n', '     * @param _beneficiary Address to be added to the whitelist\n', '     */\n', '    function addToWhitelist(address _beneficiary) external onlyOwnerOrAdmin {\n', '        whitelist[_beneficiary] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds list of addresses to whitelist.\n', '     * @param _beneficiaries Addresses to be added to the whitelist\n', '     */\n', '    function addManyToWhitelist(address[] _beneficiaries) external onlyOwnerOrAdmin {\n', '        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '            whitelist[_beneficiaries[i]] = true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes single address from whitelist.\n', '     * @param _beneficiary Address to be removed to the whitelist\n', '     */\n', '    function removeFromWhitelist(address _beneficiary) external onlyOwnerOrAdmin {\n', '        whitelist[_beneficiary] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Return total individual wei amount.\n', '     * @param _beneficiary Addresses to get total wei amount .\n', '     * @return Total wei amount for the address.\n', '     */\n', '    function getTotalIndividualWeiAmount(address _beneficiary) external view onlyOwnerOrAdmin returns (uint256) {\n', '        return totalIndividualWeiAmount[_beneficiary];\n', '    }\n', '\n', '    /**\n', '     * @dev Set total individual wei amount.\n', '     * @param _beneficiary Addresses to set total wei amount.\n', '     * @param _totalWeiAmount Total wei amount for the address.\n', '     */\n', '    function setTotalIndividualWeiAmount(address _beneficiary,uint256 _totalWeiAmount) external onlyOwner {\n', '        totalIndividualWeiAmount[_beneficiary] = _totalWeiAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev Add total individual wei amount.\n', '     * @param _beneficiary Addresses to add total wei amount.\n', '     * @param _weiAmount Total wei amount to be added for the address.\n', '     */\n', '    function addTotalIndividualWeiAmount(address _beneficiary,uint256 _weiAmount) external onlyOwner {\n', '        totalIndividualWeiAmount[_beneficiary] = totalIndividualWeiAmount[_beneficiary].add(_weiAmount);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/// @title Whitelist for TKO token sale.\n', '/// @author Takeoff Technology OU - <info@takeoff.ws>\n', "/// @dev Based on code by OpenZeppelin's WhitelistedCrowdsale.sol\n", 'contract TkoWhitelist is Ownable{\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // Manage whitelist account address.\n', '    address public admin;\n', '\n', '    mapping(address => uint256) internal totalIndividualWeiAmount;\n', '    mapping(address => bool) internal whitelist;\n', '\n', '    event AdminChanged(address indexed previousAdmin, address indexed newAdmin);\n', '\n', '\n', '    /**\n', '     * TkoWhitelist\n', "     * @dev TkoWhitelist is the storage for whitelist and total amount by contributor's address.\n", '     * @param _admin Address of managing whitelist.\n', '     */\n', '    function TkoWhitelist (address _admin) public {\n', '        require(_admin != address(0));\n', '        admin = _admin;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner or the admin.\n', '     */\n', '    modifier onlyOwnerOrAdmin() {\n', '        require(msg.sender == owner || msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to change administrator account of the contract to a newAdmin.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function changeAdmin(address newAdmin) public onlyOwner {\n', '        require(newAdmin != address(0));\n', '        emit AdminChanged(admin, newAdmin);\n', '        admin = newAdmin;\n', '    }\n', '\n', '\n', '    /**\n', '      * @dev Returen whether the beneficiary is whitelisted.\n', '      */\n', '    function isWhitelisted(address _beneficiary) external view onlyOwnerOrAdmin returns (bool) {\n', '        return whitelist[_beneficiary];\n', '    }\n', '\n', '    /**\n', '     * @dev Adds single address to whitelist.\n', '     * @param _beneficiary Address to be added to the whitelist\n', '     */\n', '    function addToWhitelist(address _beneficiary) external onlyOwnerOrAdmin {\n', '        whitelist[_beneficiary] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds list of addresses to whitelist.\n', '     * @param _beneficiaries Addresses to be added to the whitelist\n', '     */\n', '    function addManyToWhitelist(address[] _beneficiaries) external onlyOwnerOrAdmin {\n', '        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '            whitelist[_beneficiaries[i]] = true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes single address from whitelist.\n', '     * @param _beneficiary Address to be removed to the whitelist\n', '     */\n', '    function removeFromWhitelist(address _beneficiary) external onlyOwnerOrAdmin {\n', '        whitelist[_beneficiary] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Return total individual wei amount.\n', '     * @param _beneficiary Addresses to get total wei amount .\n', '     * @return Total wei amount for the address.\n', '     */\n', '    function getTotalIndividualWeiAmount(address _beneficiary) external view onlyOwnerOrAdmin returns (uint256) {\n', '        return totalIndividualWeiAmount[_beneficiary];\n', '    }\n', '\n', '    /**\n', '     * @dev Set total individual wei amount.\n', '     * @param _beneficiary Addresses to set total wei amount.\n', '     * @param _totalWeiAmount Total wei amount for the address.\n', '     */\n', '    function setTotalIndividualWeiAmount(address _beneficiary,uint256 _totalWeiAmount) external onlyOwner {\n', '        totalIndividualWeiAmount[_beneficiary] = _totalWeiAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev Add total individual wei amount.\n', '     * @param _beneficiary Addresses to add total wei amount.\n', '     * @param _weiAmount Total wei amount to be added for the address.\n', '     */\n', '    function addTotalIndividualWeiAmount(address _beneficiary,uint256 _weiAmount) external onlyOwner {\n', '        totalIndividualWeiAmount[_beneficiary] = totalIndividualWeiAmount[_beneficiary].add(_weiAmount);\n', '    }\n', '\n', '}']
