['pragma solidity ^0.4.25;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Fxxx Land Rush Contract - Purchase land parcels with GZE and ETH\n', '//\n', '// Enjoy.\n', '//\n', '// (c) BokkyPooBah / Bok Consulting Pty Ltd for GazeCoin 2018. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    bool private initialised;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function initOwned(address _owner) internal {\n', '        require(!initialised);\n', '        owner = _owner;\n', '        initialised = true;\n', '    }\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '    function transferOwnershipImmediately(address _newOwner) public onlyOwner {\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '    function max(uint a, uint b) internal pure returns (uint c) {\n', '        c = a >= b ? a : b;\n', '    }\n', '    function min(uint a, uint b) internal pure returns (uint c) {\n', '        c = a <= b ? a : b;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// BokkyPooBah&#39;s Token Teleportation Service Interface v1.10\n', '//\n', '// https://github.com/bokkypoobah/BokkyPooBahsTokenTeleportationServiceSmartContract\n', '//\n', '// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contracts that can have tokens approved, and then a function executed\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// BokkyPooBah&#39;s Token Teleportation Service Interface v1.10\n', '//\n', '// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', 'contract BTTSTokenInterface is ERC20Interface {\n', '    uint public constant bttsVersion = 110;\n', '\n', '    bytes public constant signingPrefix = "\\x19Ethereum Signed Message:\\n32";\n', '    bytes4 public constant signedTransferSig = "\\x75\\x32\\xea\\xac";\n', '    bytes4 public constant signedApproveSig = "\\xe9\\xaf\\xa7\\xa1";\n', '    bytes4 public constant signedTransferFromSig = "\\x34\\x4b\\xcc\\x7d";\n', '    bytes4 public constant signedApproveAndCallSig = "\\xf1\\x6f\\x9b\\x53";\n', '\n', '    event OwnershipTransferred(address indexed from, address indexed to);\n', '    event MinterUpdated(address from, address to);\n', '    event Mint(address indexed tokenOwner, uint tokens, bool lockAccount);\n', '    event MintingDisabled();\n', '    event TransfersEnabled();\n', '    event AccountUnlocked(address indexed tokenOwner);\n', '\n', '    function symbol() public view returns (string);\n', '    function name() public view returns (string);\n', '    function decimals() public view returns (uint8);\n', '\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success);\n', '\n', '    // ------------------------------------------------------------------------\n', '    // signed{X} functions\n', '    // ------------------------------------------------------------------------\n', '    function signedTransferHash(address tokenOwner, address to, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash);\n', '    function signedTransferCheck(address tokenOwner, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\n', '    function signedTransfer(address tokenOwner, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\n', '\n', '    function signedApproveHash(address tokenOwner, address spender, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash);\n', '    function signedApproveCheck(address tokenOwner, address spender, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\n', '    function signedApprove(address tokenOwner, address spender, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\n', '\n', '    function signedTransferFromHash(address spender, address from, address to, uint tokens, uint fee, uint nonce) public view returns (bytes32 hash);\n', '    function signedTransferFromCheck(address spender, address from, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\n', '    function signedTransferFrom(address spender, address from, address to, uint tokens, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\n', '\n', '    function signedApproveAndCallHash(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce) public view returns (bytes32 hash);\n', '    function signedApproveAndCallCheck(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce, bytes sig, address feeAccount) public view returns (CheckResult result);\n', '    function signedApproveAndCall(address tokenOwner, address spender, uint tokens, bytes _data, uint fee, uint nonce, bytes sig, address feeAccount) public returns (bool success);\n', '\n', '    function mint(address tokenOwner, uint tokens, bool lockAccount) public returns (bool success);\n', '    function unlockAccount(address tokenOwner) public;\n', '    function disableMinting() public;\n', '    function enableTransfers() public;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // signed{X}Check return status\n', '    // ------------------------------------------------------------------------\n', '    enum CheckResult {\n', '        Success,                           // 0 Success\n', '        NotTransferable,                   // 1 Tokens not transferable yet\n', '        AccountLocked,                     // 2 Account locked\n', '        SignerMismatch,                    // 3 Mismatch in signing account\n', '        InvalidNonce,                      // 4 Invalid nonce\n', '        InsufficientApprovedTokens,        // 5 Insufficient approved tokens\n', '        InsufficientApprovedTokensForFees, // 6 Insufficient approved tokens for fees\n', '        InsufficientTokens,                // 7 Insufficient tokens\n', '        InsufficientTokensForFees,         // 8 Insufficient tokens for fees\n', '        OverflowError                      // 9 Overflow error\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// PriceFeed Interface - _live is true if the rate is valid, false if invalid\n', '// ----------------------------------------------------------------------------\n', 'contract PriceFeedInterface {\n', '    function name() public view returns (string);\n', '    function getRate() public view returns (uint _rate, bool _live);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Bonus List interface\n', '// ----------------------------------------------------------------------------\n', 'contract BonusListInterface {\n', '    function isInBonusList(address account) public view returns (bool);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// FxxxLandRush Contract\n', '// ----------------------------------------------------------------------------\n', 'contract FxxxLandRush is Owned, ApproveAndCallFallBack {\n', '    using SafeMath for uint;\n', '\n', '    uint private constant TENPOW18 = 10 ** 18;\n', '\n', '    BTTSTokenInterface public parcelToken;\n', '    BTTSTokenInterface public gzeToken;\n', '    PriceFeedInterface public ethUsdPriceFeed;\n', '    PriceFeedInterface public gzeEthPriceFeed;\n', '    BonusListInterface public bonusList;\n', '\n', '    address public wallet;\n', '    uint public startDate;\n', '    uint public endDate;\n', '    uint public maxParcels;\n', '    uint public parcelUsd;                  // USD per parcel, e.g., USD 1,500 * 10^18\n', '    uint public usdLockAccountThreshold;    // e.g., USD 7,000 * 10^18\n', '    uint public gzeBonusOffList;            // e.g., 20 = 20% bonus\n', '    uint public gzeBonusOnList;             // e.g., 30 = 30% bonus\n', '\n', '    uint public parcelsSold;\n', '    uint public contributedGze;\n', '    uint public contributedEth;\n', '    bool public finalised;\n', '\n', '    event WalletUpdated(address indexed oldWallet, address indexed newWallet);\n', '    event StartDateUpdated(uint oldStartDate, uint newStartDate);\n', '    event EndDateUpdated(uint oldEndDate, uint newEndDate);\n', '    event MaxParcelsUpdated(uint oldMaxParcels, uint newMaxParcels);\n', '    event ParcelUsdUpdated(uint oldParcelUsd, uint newParcelUsd);\n', '    event UsdLockAccountThresholdUpdated(uint oldUsdLockAccountThreshold, uint newUsdLockAccountThreshold);\n', '    event GzeBonusOffListUpdated(uint oldGzeBonusOffList, uint newGzeBonusOffList);\n', '    event GzeBonusOnListUpdated(uint oldGzeBonusOnList, uint newGzeBonusOnList);\n', '    event Purchased(address indexed addr, uint parcels, uint gzeToTransfer, uint ethToTransfer, uint parcelsSold, uint contributedGze, uint contributedEth, bool lockAccount);\n', '\n', '    constructor(address _parcelToken, address _gzeToken, address _ethUsdPriceFeed, address _gzeEthPriceFeed, address _bonusList, address _wallet, uint _startDate, uint _endDate, uint _maxParcels, uint _parcelUsd, uint _usdLockAccountThreshold, uint _gzeBonusOffList, uint _gzeBonusOnList) public {\n', '        require(_parcelToken != address(0) && _gzeToken != address(0));\n', '        require(_ethUsdPriceFeed != address(0) && _gzeEthPriceFeed != address(0) && _bonusList != address(0));\n', '        require(_wallet != address(0));\n', '        require(_startDate >= now && _endDate > _startDate);\n', '        require(_maxParcels > 0 && _parcelUsd > 0);\n', '        initOwned(msg.sender);\n', '        parcelToken = BTTSTokenInterface(_parcelToken);\n', '        gzeToken = BTTSTokenInterface(_gzeToken);\n', '        ethUsdPriceFeed = PriceFeedInterface(_ethUsdPriceFeed);\n', '        gzeEthPriceFeed = PriceFeedInterface(_gzeEthPriceFeed);\n', '        bonusList = BonusListInterface(_bonusList);\n', '        wallet = _wallet;\n', '        startDate = _startDate;\n', '        endDate = _endDate;\n', '        maxParcels = _maxParcels;\n', '        parcelUsd = _parcelUsd;\n', '        usdLockAccountThreshold = _usdLockAccountThreshold;\n', '        gzeBonusOffList = _gzeBonusOffList;\n', '        gzeBonusOnList = _gzeBonusOnList;\n', '    }\n', '    function setWallet(address _wallet) public onlyOwner {\n', '        require(!finalised);\n', '        require(_wallet != address(0));\n', '        emit WalletUpdated(wallet, _wallet);\n', '        wallet = _wallet;\n', '    }\n', '    function setStartDate(uint _startDate) public onlyOwner {\n', '        require(!finalised);\n', '        require(_startDate >= now);\n', '        emit StartDateUpdated(startDate, _startDate);\n', '        startDate = _startDate;\n', '    }\n', '    function setEndDate(uint _endDate) public onlyOwner {\n', '        require(!finalised);\n', '        require(_endDate > startDate);\n', '        emit EndDateUpdated(endDate, _endDate);\n', '        endDate = _endDate;\n', '    }\n', '    function setMaxParcels(uint _maxParcels) public onlyOwner {\n', '        require(!finalised);\n', '        require(_maxParcels >= parcelsSold);\n', '        emit MaxParcelsUpdated(maxParcels, _maxParcels);\n', '        maxParcels = _maxParcels;\n', '    }\n', '    function setParcelUsd(uint _parcelUsd) public onlyOwner {\n', '        require(!finalised);\n', '        require(_parcelUsd > 0);\n', '        emit ParcelUsdUpdated(parcelUsd, _parcelUsd);\n', '        parcelUsd = _parcelUsd;\n', '    }\n', '    function setUsdLockAccountThreshold(uint _usdLockAccountThreshold) public onlyOwner {\n', '        require(!finalised);\n', '        emit UsdLockAccountThresholdUpdated(usdLockAccountThreshold, _usdLockAccountThreshold);\n', '        usdLockAccountThreshold = _usdLockAccountThreshold;\n', '    }\n', '    function setGzeBonusOffList(uint _gzeBonusOffList) public onlyOwner {\n', '        require(!finalised);\n', '        emit GzeBonusOffListUpdated(gzeBonusOffList, _gzeBonusOffList);\n', '        gzeBonusOffList = _gzeBonusOffList;\n', '    }\n', '    function setGzeBonusOnList(uint _gzeBonusOnList) public onlyOwner {\n', '        require(!finalised);\n', '        emit GzeBonusOnListUpdated(gzeBonusOnList, _gzeBonusOnList);\n', '        gzeBonusOnList = _gzeBonusOnList;\n', '    }\n', '\n', '    function symbol() public view returns (string _symbol) {\n', '        _symbol = parcelToken.symbol();\n', '    }\n', '    function name() public view returns (string _name) {\n', '        _name = parcelToken.name();\n', '    }\n', '\n', '    // USD per ETH, e.g., 221.99 * 10^18\n', '    function ethUsd() public view returns (uint _rate, bool _live) {\n', '        return ethUsdPriceFeed.getRate();\n', '    }\n', '    // ETH per GZE, e.g., 0.00004366 * 10^18\n', '    function gzeEth() public view returns (uint _rate, bool _live) {\n', '        return gzeEthPriceFeed.getRate();\n', '    }\n', '    // USD per GZE, e.g., 0.0096920834 * 10^18\n', '    function gzeUsd() public view returns (uint _rate, bool _live) {\n', '        uint _ethUsd;\n', '        bool _ethUsdLive;\n', '        (_ethUsd, _ethUsdLive) = ethUsdPriceFeed.getRate();\n', '        uint _gzeEth;\n', '        bool _gzeEthLive;\n', '        (_gzeEth, _gzeEthLive) = gzeEthPriceFeed.getRate();\n', '        if (_ethUsdLive && _gzeEthLive) {\n', '            _live = true;\n', '            _rate = _ethUsd.mul(_gzeEth).div(TENPOW18);\n', '        }\n', '    }\n', '    // ETH per parcel, e.g., 6.757061128879679264 * 10^18\n', '    function parcelEth() public view returns (uint _rate, bool _live) {\n', '        uint _ethUsd;\n', '        (_ethUsd, _live) = ethUsd();\n', '        if (_live) {\n', '            _rate = parcelUsd.mul(TENPOW18).div(_ethUsd);\n', '        }\n', '    }\n', '    // GZE per parcel, without bonus, e.g., 154765.486231783766945298 * 10^18\n', '    function parcelGzeWithoutBonus() public view returns (uint _rate, bool _live) {\n', '        uint _gzeUsd;\n', '        (_gzeUsd, _live) = gzeUsd();\n', '        if (_live) {\n', '            _rate = parcelUsd.mul(TENPOW18).div(_gzeUsd);\n', '        }\n', '    }\n', '    // GZE per parcel, with bonus but not on bonus list, e.g., 128971.238526486472454415 * 10^18\n', '    function parcelGzeWithBonusOffList() public view returns (uint _rate, bool _live) {\n', '        uint _parcelGzeWithoutBonus;\n', '        (_parcelGzeWithoutBonus, _live) = parcelGzeWithoutBonus();\n', '        if (_live) {\n', '            _rate = _parcelGzeWithoutBonus.mul(100).div(gzeBonusOffList.add(100));\n', '        }\n', '    }\n', '    // GZE per parcel, with bonus and on bonus list, e.g., 119050.374024449051496383 * 10^18\n', '    function parcelGzeWithBonusOnList() public view returns (uint _rate, bool _live) {\n', '        uint _parcelGzeWithoutBonus;\n', '        (_parcelGzeWithoutBonus, _live) = parcelGzeWithoutBonus();\n', '        if (_live) {\n', '            _rate = _parcelGzeWithoutBonus.mul(100).div(gzeBonusOnList.add(100));\n', '        }\n', '    }\n', '\n', '    // Account contributes by:\n', '    // 1. calling GZE.approve(landRushAddress, tokens)\n', '    // 2. calling this.purchaseWithGze(tokens)\n', '    function purchaseWithGze(uint256 tokens) public {\n', '        require(gzeToken.allowance(msg.sender, this) >= tokens);\n', '        receiveApproval(msg.sender, tokens, gzeToken, "");\n', '    }\n', '    // Account contributes by calling GZE.approveAndCall(landRushAddress, tokens, "")\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes /* data */) public {\n', '        require(now >= startDate && now <= endDate);\n', '        require(token == address(gzeToken));\n', '        uint _parcelGze;\n', '        bool _live;\n', '        if (bonusList.isInBonusList(from)) {\n', '            (_parcelGze, _live) = parcelGzeWithBonusOnList();\n', '        } else {\n', '            (_parcelGze, _live) = parcelGzeWithBonusOffList();\n', '        }\n', '        require(_live);\n', '        uint parcels = tokens.div(_parcelGze);\n', '        if (parcelsSold.add(parcels) >= maxParcels) {\n', '            parcels = maxParcels.sub(parcelsSold);\n', '        }\n', '        uint gzeToTransfer = parcels.mul(_parcelGze);\n', '        contributedGze = contributedGze.add(gzeToTransfer);\n', '        require(ERC20Interface(token).transferFrom(from, wallet, gzeToTransfer));\n', '        bool lock = mintParcelTokens(from, parcels);\n', '        emit Purchased(from, parcels, gzeToTransfer, 0, parcelsSold, contributedGze, contributedEth, lock);\n', '    }\n', '    // Account contributes by sending ETH\n', '    function () public payable {\n', '        require(now >= startDate && now <= endDate);\n', '        uint _parcelEth;\n', '        bool _live;\n', '        (_parcelEth, _live) = parcelEth();\n', '        require(_live);\n', '        uint parcels = msg.value.div(_parcelEth);\n', '        if (parcelsSold.add(parcels) >= maxParcels) {\n', '            parcels = maxParcels.sub(parcelsSold);\n', '        }\n', '        uint ethToTransfer = parcels.mul(_parcelEth);\n', '        contributedEth = contributedEth.add(ethToTransfer);\n', '        uint ethToRefund = msg.value.sub(ethToTransfer);\n', '        if (ethToRefund > 0) {\n', '            msg.sender.transfer(ethToRefund);\n', '        }\n', '        bool lock = mintParcelTokens(msg.sender, parcels);\n', '        emit Purchased(msg.sender, parcels, 0, ethToTransfer, parcelsSold, contributedGze, contributedEth, lock);\n', '    }\n', '    // Contract owner allocates parcels to tokenOwner for offline purchase\n', '    function offlinePurchase(address tokenOwner, uint parcels) public onlyOwner {\n', '        require(!finalised);\n', '        if (parcelsSold.add(parcels) >= maxParcels) {\n', '            parcels = maxParcels.sub(parcelsSold);\n', '        }\n', '        bool lock = mintParcelTokens(tokenOwner, parcels);\n', '        emit Purchased(tokenOwner, parcels, 0, 0, parcelsSold, contributedGze, contributedEth, lock);\n', '    }\n', '    // Internal function to mint tokens and disable minting if maxParcels sold\n', '    function mintParcelTokens(address account, uint parcels) internal returns (bool _lock) {\n', '        require(parcels > 0);\n', '        parcelsSold = parcelsSold.add(parcels);\n', '        _lock = parcelToken.balanceOf(account).add(parcelUsd.mul(parcels)) >= usdLockAccountThreshold;\n', '        require(parcelToken.mint(account, parcelUsd.mul(parcels), _lock));\n', '        if (parcelsSold >= maxParcels) {\n', '            parcelToken.disableMinting();\n', '            finalised = true;\n', '        }\n', '    }\n', '    // Contract owner finalises to disable parcel minting\n', '    function finalise() public onlyOwner {\n', '        require(!finalised);\n', '        require(now > endDate || parcelsSold >= maxParcels);\n', '        parcelToken.disableMinting();\n', '        finalised = true;\n', '    }\n', '}']