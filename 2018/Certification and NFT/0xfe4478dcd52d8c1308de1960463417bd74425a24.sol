['pragma solidity ^0.4.24;\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n', '  // 1 wei will give you 1 unit, or 0.001 TOK.\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens, weiAmount);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n', "   * Example from CappedCrowdsale.sol's _preValidatePurchase method: \n", '   *   super._preValidatePurchase(_beneficiary, _weiAmount);\n', '   *   require(weiRaised.add(_weiAmount) <= cap);\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    token.safeTransfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', 'contract QuinadsCrowdsale is Crowdsale, Ownable {\n', '    using SafeMath for uint8;\n', '    using SafeERC20 for ERC20;\n', '\n', '    uint256 public TokenSaleSupply = 12000000000000000000000000000;\n', '    uint256 public tokensSold;\n', '    \n', '    // contribution(min) per stage\n', '    uint256 public preContrib    = 20000000000000000000;\n', '    uint256 public icoContrib    = 10000000000000000;\n', '    // bonus pre n ico\n', '    uint256 public minGetBonus    = 20000000000000000000;\n', '    uint256 public minGetAddBonus = 50000000000000000000;\n', '    // bonus per stage\n', '    uint8 public prePercentBonus = 10;\n', '    uint8 public icoPercentBonus  = 5;\n', '    // supply per stage (bonus included)\n', '    uint256 public preSupply  = 2400000000000000000000000000;\n', '    uint256 public icoSupply  = 9600000000000000000000000000;\n', '    // stage status\n', '    bool public preOpen = false;\n', '    bool public icoOpen = false;\n', '\n', '    bool public icoClosed = false;\n', '\n', '    mapping(address => uint256) public contributions;\n', '    mapping(address => uint256) public presaleTotalBuy;\n', '    mapping(address => uint256) public icoTotalBuy;\n', '    mapping(address => uint256) public presaleBonus;\n', '    mapping(address => uint256) public icoBonus;\n', '    mapping(uint8 => uint256) public soldPerStage;\n', '    mapping(uint8 => uint256) public availablePerStage;\n', '    mapping(address => bool) public allowPre;\n', '\n', '    // STAGE SETUP\n', '    enum CrowdsaleStage { preSale, ICO }\n', '    CrowdsaleStage public stage = CrowdsaleStage.preSale;\n', '    uint256 public minContribution = preContrib;\n', '    uint256 public stageAllocation = preSupply;\n', '\n', '    constructor(\n', '        uint256 _rate,\n', '        address _wallet,\n', '        ERC20 _token\n', '    )\n', '    Crowdsale(_rate, _wallet, _token)\n', '    public {\n', '        availablePerStage[0] = stageAllocation;\n', '    }\n', '\n', '    /** add some function */\n', '    function openPresale(bool status) public onlyOwner {\n', '        preOpen = status;\n', '    }\n', '    function openICOSale(bool status) public onlyOwner {\n', '        icoOpen = status;\n', '    }\n', '    function closeICO(bool status) public onlyOwner {\n', '        icoClosed = status;\n', '    }\n', '    function setCrowdsaleStage(uint8 _stage) public onlyOwner {\n', '        _setCrowdsaleStage(_stage);\n', '    }\n', '\n', '    function _setCrowdsaleStage(uint8 _stage) internal {\n', '        // can not back to prev stage\n', '        require(_stage > uint8(stage) && _stage < 2);\n', '\n', '        if(uint8(CrowdsaleStage.preSale) == _stage) {\n', '            stage = CrowdsaleStage.preSale;\n', '            minContribution = preContrib;\n', '            stageAllocation = preSupply;\n', '        } else {\n', '            stage = CrowdsaleStage.ICO;\n', '            minContribution = icoContrib;\n', '            stageAllocation = icoSupply;\n', '        }\n', '\n', '        availablePerStage[_stage] = stageAllocation;\n', '    }\n', '\n', '    function whitelistPresale(address _beneficiary, bool status) public onlyOwner {\n', '        allowPre[_beneficiary] = status;\n', '    }\n', '\n', '    function _preValidatePurchase(\n', '        address _beneficiary,\n', '        uint256 _weiAmount\n', '    )\n', '        internal\n', '    {\n', '        // checking\n', '        require(!icoClosed);\n', '        require(_beneficiary != address(0));\n', '        if(stage == CrowdsaleStage.preSale) {\n', '            require(preOpen);\n', '            require(allowPre[_beneficiary]);\n', '            allowPre[_beneficiary] = false;\n', '            require(_weiAmount == minContribution);\n', '        } else {\n', '            require(icoOpen);\n', '            require(_weiAmount >= minContribution);\n', '        }\n', '    }\n', '\n', '    function _processPurchase(\n', '        address _beneficiary,\n', '        uint256 _tokenAmount,\n', '        uint256 _weiAmount\n', '    )\n', '        internal\n', '    {\n', '        uint8 getBonusStage;\n', '        uint256 bonusStage_;\n', '        uint256 additionalBonus = 0;\n', '        if(stage == CrowdsaleStage.preSale) {\n', '            getBonusStage = prePercentBonus;\n', '        } else {\n', '            if(_weiAmount>=minGetBonus){\n', '                getBonusStage = icoPercentBonus;\n', '            } else {\n', '                getBonusStage = 0;\n', '            }\n', '        }\n', '        bonusStage_ = _tokenAmount.mul(getBonusStage).div(100);\n', '        require(availablePerStage[uint8(stage)] >= _tokenAmount);\n', '        tokensSold = tokensSold.add(_tokenAmount);\n', '\n', '        soldPerStage[uint8(stage)] = soldPerStage[uint8(stage)].add(_tokenAmount);\n', '        availablePerStage[uint8(stage)] = availablePerStage[uint8(stage)].sub(_tokenAmount);\n', '        // contribution / stage and all bonuses\n', '        if(stage == CrowdsaleStage.preSale) {\n', '            presaleTotalBuy[_beneficiary] = presaleTotalBuy[_beneficiary] + _tokenAmount;\n', '            presaleBonus[_beneficiary] = presaleBonus[_beneficiary].add(bonusStage_);\n', '        } else {\n', '            icoTotalBuy[_beneficiary] = icoTotalBuy[_beneficiary] + _tokenAmount;\n', '            icoBonus[_beneficiary] = icoBonus[_beneficiary].add(bonusStage_);\n', '        }\n', '        \n', '        _deliverTokens(_beneficiary, _tokenAmount.add(bonusStage_).add(additionalBonus));\n', '\n', '        // next stage or close ICO\n', '        if(availablePerStage[uint8(stage)]<=0){\n', '            // now stage false\n', '            if(stage == CrowdsaleStage.preSale) {\n', '                preOpen = false;\n', '                // stage = CrowdsaleStage.ICO;\n', '                _setCrowdsaleStage(1);\n', '            } else if(stage == CrowdsaleStage.ICO) {\n', '                icoOpen = false;\n', '                icoClosed = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    function _updatePurchasingState(\n', '        address _beneficiary,\n', '        uint256 _weiAmount\n', '    )\n', '        internal\n', '    {\n', '        // contribution\n', '        uint256 _existingContribution = contributions[_beneficiary];\n', '        uint256 _newContribution = _existingContribution.add(_weiAmount);\n', '        contributions[_beneficiary] = _newContribution;\n', '    }\n', '\n', '    function getuserContributions(address _beneficiary) public view returns (uint256) {\n', '        return contributions[_beneficiary];\n', '    }\n', '    function getuserPresaleTotalBuy(address _beneficiary) public view returns (uint256) {\n', '        return presaleTotalBuy[_beneficiary];\n', '    }\n', '    function getuserICOTotalBuy(address _beneficiary) public view returns (uint256) {\n', '        return icoTotalBuy[_beneficiary];\n', '    }\n', '    function getuserPresaleBonus(address _beneficiary) public view returns (uint256) {\n', '        return presaleBonus[_beneficiary];\n', '    }\n', '    function getuserICOBonus(address _beneficiary) public view returns (uint256) {\n', '        return icoBonus[_beneficiary];\n', '    }\n', '    function getAvailableBuyETH(uint8 _stage) public view returns (uint256) {\n', '        return availablePerStage[_stage].div(rate);\n', '    }\n', '\n', '    // send back the rest of token to airdrop program\n', '    function sendToOwner(uint256 _amount) public onlyOwner {\n', '        require(icoClosed);\n', '        _deliverTokens(owner, _amount);\n', '    }\n', '\n', '}']