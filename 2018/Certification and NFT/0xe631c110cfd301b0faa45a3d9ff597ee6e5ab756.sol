['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC721 interface\n', ' * @dev see https://github.com/ethereum/eips/issues/721\n', ' */\n', 'contract ERC721 {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function takeOwnership(uint256 _tokenId) public;\n', '}\n', '\n', '/**\n', ' * @title ERC721Token\n', ' * Generic implementation for the required functionality of the ERC721 standard\n', ' */\n', 'contract ERC721Token is ERC721 {\n', '  using SafeMath for uint256;\n', '\n', '  // Total amount of tokens\n', '  uint256 private totalTokens;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) private tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) private tokenApprovals;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) private ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) private ownedTokensIndex;\n', '\n', '  /**\n', '  * @dev Guarantees msg.sender is owner of the given token\n', '  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '  */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the total amount of tokens stored by the contract\n', '  * @return uint256 representing the total amount of tokens\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalTokens;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address\n', '  * @param _owner address to query the balance of\n', '  * @return uint256 representing the amount owned by the passed address\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return ownedTokens[_owner].length;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the list of tokens owned by a given address\n', '  * @param _owner address to query the tokens of\n', '  * @return uint256[] representing the list of tokens owned by the passed address\n', '  */\n', '  function tokensOf(address _owner) public view returns (uint256[]) {\n', '    return ownedTokens[_owner];\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the owner of the specified token ID\n', '  * @param _tokenId uint256 ID of the token to query the owner of\n', '  * @return owner address currently marked as the owner of the given token ID\n', '  */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address to take ownership of a given token ID\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved to take ownership of the given token ID\n', '   */\n', '  function approvedFor(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfers the ownership of a given token ID to another address\n', '  * @param _to address to receive the ownership of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Approves another address to claim for the ownership of the given token ID\n', '  * @param _to address to be approved for the given token ID\n', '  * @param _tokenId uint256 ID of the token to be approved\n', '  */\n', '  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    if (approvedFor(_tokenId) != 0 || _to != 0) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      emit Approval(owner, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Claims the ownership of a given token ID\n', '  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n', '  */\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    require(isApprovedFor(msg.sender, _tokenId));\n', '    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Mint token function\n', '  * @param _to The address that will own the minted token\n', '  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '  */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    addToken(_to, _tokenId);\n', '    emit Transfer(0x0, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Burns a specific token\n', '  * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '  */\n', '  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n', '    if (approvedFor(_tokenId) != 0) {\n', '      clearApproval(msg.sender, _tokenId);\n', '    }\n', '    removeToken(msg.sender, _tokenId);\n', '    emit Transfer(msg.sender, 0x0, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether the msg.sender is approved for the given token ID or not\n', '   * This function is not private so it can be extended in further implementations like the operatable ERC721\n', '   * @param _owner address of the owner to query the approval of\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return bool whether the msg.sender is approved for the given token ID or not\n', '   */\n', '  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n', '    return approvedFor(_tokenId) == _owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n', '  * @param _from address which you want to send tokens from\n', '  * @param _to address which you want to transfer the token to\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    require(_to != ownerOf(_tokenId));\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeToken(_from, _tokenId);\n', '    addToken(_to, _tokenId);\n', '    emit Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval of a given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApproval(address _owner, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    tokenApprovals[_tokenId] = 0;\n', '    emit Approval(_owner, 0, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to add a token ID to the list of a given address\n', '  * @param _to address representing the new owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '  */\n', '  function addToken(address _to, uint256 _tokenId) private {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    uint256 length = balanceOf(_to);\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '    totalTokens = totalTokens.add(1);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to remove a token ID from the list of a given address\n', '  * @param _from address representing the previous owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '  */\n', '  function removeToken(address _from, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = balanceOf(_from).sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    tokenOwner[_tokenId] = 0;\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    ownedTokens[_from][lastTokenIndex] = 0;\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '    totalTokens = totalTokens.sub(1);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', 'contract HeroesToken is ERC721Token, CanReclaimToken {\n', '    using SafeMath for uint256;\n', '\n', '    event Bought (uint256 indexed _tokenId, address indexed _owner, uint256 _price);\n', '    event Sold (uint256 indexed _tokenId, address indexed _owner, uint256 _price);\n', '\n', '    uint256[] private listedTokens;\n', '    mapping (uint256 => uint256) private priceOfToken;\n', '\n', '    uint256[4] private limits = [0.05 ether, 0.5 ether, 5.0 ether];\n', '\n', '    uint256[4] private fees = [6, 5, 4, 3]; // 6%, 5%; 4%, 3%\n', '    uint256[4] private increases = [200, 150, 130, 120]; // +100%, +50%; +30%, +20%\n', '\n', '    function HeroesToken() ERC721Token() public {}\n', '\n', '    function mint(address _to, uint256 _tokenId, uint256 _price) public onlyOwner {\n', '        require(_to != address(this));\n', '\n', '        super._mint(_to, _tokenId);\n', '        listedTokens.push(_tokenId);\n', '        priceOfToken[_tokenId] = _price;\n', '    }\n', '\n', '    function priceOf(uint256 _tokenId) public view returns (uint256) {\n', '        return priceOfToken[_tokenId];\n', '    }\n', '\n', '    function calculateFee(uint256 _price) public view returns (uint256) {\n', '        if (_price < limits[0]) {\n', '            return _price.mul(fees[0]).div(100);\n', '        } else if (_price < limits[1]) {\n', '            return _price.mul(fees[1]).div(100);\n', '        } else if (_price < limits[2]) {\n', '            return _price.mul(fees[2]).div(100);\n', '        } else {\n', '            return _price.mul(fees[3]).div(100);\n', '        }\n', '    }\n', '\n', '    function calculatePrice(uint256 _price) public view returns (uint256) {\n', '        if (_price < limits[0]) {\n', '            return _price.mul(increases[0]).div(100 - fees[0]);\n', '        } else if (_price < limits[1]) {\n', '            return _price.mul(increases[1]).div(100 - fees[1]);\n', '        } else if (_price < limits[2]) {\n', '            return _price.mul(increases[2]).div(100 - fees[2]);\n', '        } else {\n', '            return _price.mul(increases[3]).div(100 - fees[3]);\n', '        }\n', '    }\n', '\n', '    function buy(uint256 _tokenId) public payable {\n', '        require(priceOf(_tokenId) > 0);\n', '        require(ownerOf(_tokenId) != address(0));\n', '        require(msg.value >= priceOf(_tokenId));\n', '        require(ownerOf(_tokenId) != msg.sender);\n', '        require(!isContract(msg.sender));\n', '        require(msg.sender != address(0));\n', '\n', '        address oldOwner = ownerOf(_tokenId);\n', '        address newOwner = msg.sender;\n', '        uint256 price = priceOf(_tokenId);\n', '        uint256 excess = msg.value.sub(price);\n', '\n', '        super.clearApprovalAndTransfer(oldOwner, newOwner, _tokenId);\n', '        priceOfToken[_tokenId] = calculatePrice(price);\n', '\n', '        emit Bought(_tokenId, newOwner, price);\n', '        emit Sold(_tokenId, oldOwner, price);\n', '\n', '        uint256 fee = calculateFee(price);\n', '        oldOwner.transfer(price.sub(fee));\n', '\n', '        if (excess > 0) {\n', '            newOwner.transfer(excess);\n', '        }\n', '    }\n', '\n', '    function withdrawAll() public onlyOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '    function withdrawAmount(uint256 _amount) public onlyOwner {\n', '        owner.transfer(_amount);\n', '    }\n', '\n', '    function listedTokensAsBytes(uint256 _from, uint256 _to) public constant returns (bytes) {\n', '        require(_from >= 0);\n', '        require(_to >= _from);\n', '        require(_to < listedTokens.length);\n', '      \n', '        // Size of bytes\n', '        uint256 size = 32 * (_to - _from + 1);\n', '        uint256 counter = 0;\n', '        bytes memory b = new bytes(size);\n', '        for (uint256 x = _from; x < _to + 1; x++) {\n', '            uint256 elem = listedTokens[x];\n', '            for (uint y = 0; y < 32; y++) {\n', '                b[counter] = byte(uint8(elem / (2 ** (8 * (31 - y)))));\n', '                counter++;\n', '            }\n', '        }\n', '        return b;\n', '    }\n', '\n', '    function isContract(address _addr) internal view returns (bool) {\n', '        uint size;\n', '        assembly { size := extcodesize(_addr) }\n', '        return size > 0;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC721 interface\n', ' * @dev see https://github.com/ethereum/eips/issues/721\n', ' */\n', 'contract ERC721 {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function takeOwnership(uint256 _tokenId) public;\n', '}\n', '\n', '/**\n', ' * @title ERC721Token\n', ' * Generic implementation for the required functionality of the ERC721 standard\n', ' */\n', 'contract ERC721Token is ERC721 {\n', '  using SafeMath for uint256;\n', '\n', '  // Total amount of tokens\n', '  uint256 private totalTokens;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) private tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) private tokenApprovals;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) private ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) private ownedTokensIndex;\n', '\n', '  /**\n', '  * @dev Guarantees msg.sender is owner of the given token\n', '  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '  */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the total amount of tokens stored by the contract\n', '  * @return uint256 representing the total amount of tokens\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalTokens;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address\n', '  * @param _owner address to query the balance of\n', '  * @return uint256 representing the amount owned by the passed address\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return ownedTokens[_owner].length;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the list of tokens owned by a given address\n', '  * @param _owner address to query the tokens of\n', '  * @return uint256[] representing the list of tokens owned by the passed address\n', '  */\n', '  function tokensOf(address _owner) public view returns (uint256[]) {\n', '    return ownedTokens[_owner];\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the owner of the specified token ID\n', '  * @param _tokenId uint256 ID of the token to query the owner of\n', '  * @return owner address currently marked as the owner of the given token ID\n', '  */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address to take ownership of a given token ID\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved to take ownership of the given token ID\n', '   */\n', '  function approvedFor(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfers the ownership of a given token ID to another address\n', '  * @param _to address to receive the ownership of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Approves another address to claim for the ownership of the given token ID\n', '  * @param _to address to be approved for the given token ID\n', '  * @param _tokenId uint256 ID of the token to be approved\n', '  */\n', '  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    if (approvedFor(_tokenId) != 0 || _to != 0) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      emit Approval(owner, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Claims the ownership of a given token ID\n', '  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n', '  */\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    require(isApprovedFor(msg.sender, _tokenId));\n', '    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Mint token function\n', '  * @param _to The address that will own the minted token\n', '  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '  */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    addToken(_to, _tokenId);\n', '    emit Transfer(0x0, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Burns a specific token\n', '  * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '  */\n', '  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n', '    if (approvedFor(_tokenId) != 0) {\n', '      clearApproval(msg.sender, _tokenId);\n', '    }\n', '    removeToken(msg.sender, _tokenId);\n', '    emit Transfer(msg.sender, 0x0, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether the msg.sender is approved for the given token ID or not\n', '   * This function is not private so it can be extended in further implementations like the operatable ERC721\n', '   * @param _owner address of the owner to query the approval of\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return bool whether the msg.sender is approved for the given token ID or not\n', '   */\n', '  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n', '    return approvedFor(_tokenId) == _owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n', '  * @param _from address which you want to send tokens from\n', '  * @param _to address which you want to transfer the token to\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    require(_to != ownerOf(_tokenId));\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeToken(_from, _tokenId);\n', '    addToken(_to, _tokenId);\n', '    emit Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval of a given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApproval(address _owner, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    tokenApprovals[_tokenId] = 0;\n', '    emit Approval(_owner, 0, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to add a token ID to the list of a given address\n', '  * @param _to address representing the new owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '  */\n', '  function addToken(address _to, uint256 _tokenId) private {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    uint256 length = balanceOf(_to);\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '    totalTokens = totalTokens.add(1);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to remove a token ID from the list of a given address\n', '  * @param _from address representing the previous owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '  */\n', '  function removeToken(address _from, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = balanceOf(_from).sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    tokenOwner[_tokenId] = 0;\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    ownedTokens[_from][lastTokenIndex] = 0;\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '    totalTokens = totalTokens.sub(1);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', 'contract HeroesToken is ERC721Token, CanReclaimToken {\n', '    using SafeMath for uint256;\n', '\n', '    event Bought (uint256 indexed _tokenId, address indexed _owner, uint256 _price);\n', '    event Sold (uint256 indexed _tokenId, address indexed _owner, uint256 _price);\n', '\n', '    uint256[] private listedTokens;\n', '    mapping (uint256 => uint256) private priceOfToken;\n', '\n', '    uint256[4] private limits = [0.05 ether, 0.5 ether, 5.0 ether];\n', '\n', '    uint256[4] private fees = [6, 5, 4, 3]; // 6%, 5%; 4%, 3%\n', '    uint256[4] private increases = [200, 150, 130, 120]; // +100%, +50%; +30%, +20%\n', '\n', '    function HeroesToken() ERC721Token() public {}\n', '\n', '    function mint(address _to, uint256 _tokenId, uint256 _price) public onlyOwner {\n', '        require(_to != address(this));\n', '\n', '        super._mint(_to, _tokenId);\n', '        listedTokens.push(_tokenId);\n', '        priceOfToken[_tokenId] = _price;\n', '    }\n', '\n', '    function priceOf(uint256 _tokenId) public view returns (uint256) {\n', '        return priceOfToken[_tokenId];\n', '    }\n', '\n', '    function calculateFee(uint256 _price) public view returns (uint256) {\n', '        if (_price < limits[0]) {\n', '            return _price.mul(fees[0]).div(100);\n', '        } else if (_price < limits[1]) {\n', '            return _price.mul(fees[1]).div(100);\n', '        } else if (_price < limits[2]) {\n', '            return _price.mul(fees[2]).div(100);\n', '        } else {\n', '            return _price.mul(fees[3]).div(100);\n', '        }\n', '    }\n', '\n', '    function calculatePrice(uint256 _price) public view returns (uint256) {\n', '        if (_price < limits[0]) {\n', '            return _price.mul(increases[0]).div(100 - fees[0]);\n', '        } else if (_price < limits[1]) {\n', '            return _price.mul(increases[1]).div(100 - fees[1]);\n', '        } else if (_price < limits[2]) {\n', '            return _price.mul(increases[2]).div(100 - fees[2]);\n', '        } else {\n', '            return _price.mul(increases[3]).div(100 - fees[3]);\n', '        }\n', '    }\n', '\n', '    function buy(uint256 _tokenId) public payable {\n', '        require(priceOf(_tokenId) > 0);\n', '        require(ownerOf(_tokenId) != address(0));\n', '        require(msg.value >= priceOf(_tokenId));\n', '        require(ownerOf(_tokenId) != msg.sender);\n', '        require(!isContract(msg.sender));\n', '        require(msg.sender != address(0));\n', '\n', '        address oldOwner = ownerOf(_tokenId);\n', '        address newOwner = msg.sender;\n', '        uint256 price = priceOf(_tokenId);\n', '        uint256 excess = msg.value.sub(price);\n', '\n', '        super.clearApprovalAndTransfer(oldOwner, newOwner, _tokenId);\n', '        priceOfToken[_tokenId] = calculatePrice(price);\n', '\n', '        emit Bought(_tokenId, newOwner, price);\n', '        emit Sold(_tokenId, oldOwner, price);\n', '\n', '        uint256 fee = calculateFee(price);\n', '        oldOwner.transfer(price.sub(fee));\n', '\n', '        if (excess > 0) {\n', '            newOwner.transfer(excess);\n', '        }\n', '    }\n', '\n', '    function withdrawAll() public onlyOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '    function withdrawAmount(uint256 _amount) public onlyOwner {\n', '        owner.transfer(_amount);\n', '    }\n', '\n', '    function listedTokensAsBytes(uint256 _from, uint256 _to) public constant returns (bytes) {\n', '        require(_from >= 0);\n', '        require(_to >= _from);\n', '        require(_to < listedTokens.length);\n', '      \n', '        // Size of bytes\n', '        uint256 size = 32 * (_to - _from + 1);\n', '        uint256 counter = 0;\n', '        bytes memory b = new bytes(size);\n', '        for (uint256 x = _from; x < _to + 1; x++) {\n', '            uint256 elem = listedTokens[x];\n', '            for (uint y = 0; y < 32; y++) {\n', '                b[counter] = byte(uint8(elem / (2 ** (8 * (31 - y)))));\n', '                counter++;\n', '            }\n', '        }\n', '        return b;\n', '    }\n', '\n', '    function isContract(address _addr) internal view returns (bool) {\n', '        uint size;\n', '        assembly { size := extcodesize(_addr) }\n', '        return size > 0;\n', '    }\n', '}']
