['pragma solidity ^0.4.18;\n', '/**\n', '* @dev EtherLands PreSale contract.\n', '*\n', '*/\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract PreSale is Ownable {\n', '    uint256 constant public INCREASE_RATE = 700000000000000;\n', '    uint256 constant public START_TIME = 1520972971;\n', '    uint256 constant public END_TIME =   1552508971;\n', '\n', '    uint256 public landsSold;\n', '    mapping (address => uint32) public lands;\n', '\n', '    bool private paused = false; \n', '\n', '    function PreSale() payable public {\n', '    }\n', '\n', '    event landsPurchased(address indexed purchaser, uint256 value, uint32 quantity);\n', '    \n', '    event landsRedeemed(address indexed sender, uint256 lands);\n', '\n', '    function bulkPurchageLand() payable public {\n', '        require(now > START_TIME);\n', '        require(now < END_TIME);\n', '        require(paused == false);\n', '        require(msg.value >= (landPriceCurrent() * 5));\n', '        lands[msg.sender] = lands[msg.sender] + 5;\n', '        landsSold = landsSold + 5;\n', '        landsPurchased(msg.sender, msg.value, 5);\n', '    }\n', '    \n', '    function purchaseLand() payable public {\n', '        require(now > START_TIME);\n', '        require(now < END_TIME);\n', '        require(paused == false);\n', '        require(msg.value >= landPriceCurrent());\n', '\n', '        lands[msg.sender] = lands[msg.sender] + 1;\n', '        landsSold = landsSold + 1;\n', '        \n', '        landsPurchased(msg.sender, msg.value, 1);\n', '    }\n', '    \n', '    function redeemLand(address targetUser) public onlyOwner returns(uint256) {\n', '        require(paused == false);\n', '        require(lands[targetUser] > 0);\n', '\n', '        landsRedeemed(targetUser, lands[targetUser]);\n', '\n', '        uint256 userlands = lands[targetUser];\n', '        lands[targetUser] = 0;\n', '        return userlands;\n', '    }\n', '\n', '    function landPriceCurrent() view public returns(uint256) {\n', '        return (landsSold + 1) * INCREASE_RATE;\n', '    }\n', '     \n', '    function landPricePrevious() view public returns(uint256) {\n', '        return (landsSold) * INCREASE_RATE;\n', '    }\n', '\n', '    function withdrawal() onlyOwner public {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function pause() onlyOwner public {\n', '        paused = true;\n', '    }\n', '    \n', '    function resume() onlyOwner public {\n', '        paused = false;\n', '    }\n', '\n', '    function isPaused () onlyOwner public view returns(bool) {\n', '        return paused;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '/**\n', '* @dev EtherLands PreSale contract.\n', '*\n', '*/\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract PreSale is Ownable {\n', '    uint256 constant public INCREASE_RATE = 700000000000000;\n', '    uint256 constant public START_TIME = 1520972971;\n', '    uint256 constant public END_TIME =   1552508971;\n', '\n', '    uint256 public landsSold;\n', '    mapping (address => uint32) public lands;\n', '\n', '    bool private paused = false; \n', '\n', '    function PreSale() payable public {\n', '    }\n', '\n', '    event landsPurchased(address indexed purchaser, uint256 value, uint32 quantity);\n', '    \n', '    event landsRedeemed(address indexed sender, uint256 lands);\n', '\n', '    function bulkPurchageLand() payable public {\n', '        require(now > START_TIME);\n', '        require(now < END_TIME);\n', '        require(paused == false);\n', '        require(msg.value >= (landPriceCurrent() * 5));\n', '        lands[msg.sender] = lands[msg.sender] + 5;\n', '        landsSold = landsSold + 5;\n', '        landsPurchased(msg.sender, msg.value, 5);\n', '    }\n', '    \n', '    function purchaseLand() payable public {\n', '        require(now > START_TIME);\n', '        require(now < END_TIME);\n', '        require(paused == false);\n', '        require(msg.value >= landPriceCurrent());\n', '\n', '        lands[msg.sender] = lands[msg.sender] + 1;\n', '        landsSold = landsSold + 1;\n', '        \n', '        landsPurchased(msg.sender, msg.value, 1);\n', '    }\n', '    \n', '    function redeemLand(address targetUser) public onlyOwner returns(uint256) {\n', '        require(paused == false);\n', '        require(lands[targetUser] > 0);\n', '\n', '        landsRedeemed(targetUser, lands[targetUser]);\n', '\n', '        uint256 userlands = lands[targetUser];\n', '        lands[targetUser] = 0;\n', '        return userlands;\n', '    }\n', '\n', '    function landPriceCurrent() view public returns(uint256) {\n', '        return (landsSold + 1) * INCREASE_RATE;\n', '    }\n', '     \n', '    function landPricePrevious() view public returns(uint256) {\n', '        return (landsSold) * INCREASE_RATE;\n', '    }\n', '\n', '    function withdrawal() onlyOwner public {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function pause() onlyOwner public {\n', '        paused = true;\n', '    }\n', '    \n', '    function resume() onlyOwner public {\n', '        paused = false;\n', '    }\n', '\n', '    function isPaused () onlyOwner public view returns(bool) {\n', '        return paused;\n', '    }\n', '}']
