['pragma solidity ^0.4.19; // solhint-disable-line\n', '\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Srini Vasan \n', 'contract ERC721 {\n', '  // Required methods\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function implementsERC721() public pure returns (bool);\n', '  function ownerOf(uint256 _tokenId) public view returns (address addr);\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '\n', '}\n', '\n', 'contract CryptonToken is ERC721 {\n', '\n', '  /*** EVENTS ***/\n', '\n', '  /// @dev The Birth event is fired whenever a new crypton comes into existence.\n', '  event Birth(uint256 tokenId, string name, address owner, bool isProtected, uint8 category);\n', '\n', '  /// @dev The TokenSold event is fired whenever a token is sold.\n', '  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\n', '\n', '  /// @dev Transfer event as defined in current draft of ERC721. \n', '  ///  ownership is assigned, including births.\n', '  event Transfer(address from, address to, uint256 tokenId);\n', '\n', '  /// @dev the PaymentTransferredToPreviousOwner event is fired when the previous owner of the Crypton is paid after a purchase.\n', '  event PaymentTransferredToPreviousOwner(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\n', '\n', '  // @dev CryptonIsProtected is fired when the Crypton is protected from snatching - i.e. owner is allowed to set the selling price for the crypton\n', '  event CryptonIsProtected(uint256 tokenId);\n', '\n', '    // @dev The markup was changed\n', '    event MarkupChanged(string name, uint256 newMarkup);\n', '    \n', '    //@dev Selling price of protected Crypton changed\n', '    event ProtectedCryptonSellingPriceChanged(uint256 tokenId, uint256 newSellingPrice);\n', '    \n', '    // Owner protected their Crypton\n', '    event OwnerProtectedCrypton(uint256 _tokenId, uint256 newSellingPrice);\n', '\n', '    //Contract paused event\n', '    event ContractIsPaused(bool paused);\n', '\n', '  /*** CONSTANTS ***/\n', '\n', '  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '  string public constant NAME = "Cryptons"; // solhint-disable-line\n', '  string public constant SYMBOL = "CRYPTON"; // solhint-disable-line\n', '\n', '  uint256 private startingPrice = 0.1 ether;\n', '  uint256 private defaultMarkup = 2 ether;\n', '  uint256 private FIRST_STEP_LIMIT =  1.0 ether;\n', '  uint16 private FIRST_STEP_MULTIPLIER = 200; // double the value\n', '  uint16 private SECOND_STEP_MULTIPLIER = 120; // increment value by 20%\n', '  uint16 private XPROMO_MULTIPLIER = 500; // 5 times the value\n', '  uint16 private CRYPTON_CUT = 6; // our cut\n', '  uint16 private NET_PRICE_PERCENT = 100 - CRYPTON_CUT; // Net price paid out after cut\n', '\n', '  // I could have used enums - but preferered the more specific uint8 \n', '  uint8 private constant PROMO = 1;\n', '  uint8 private constant STANDARD = 2;\n', '  uint8 private constant RESERVED = 7;\n', '  uint8 private constant XPROMO = 10; // First transaction, contract sets sell price to 5x\n', '  \n', '  /*** STORAGE ***/\n', '\n', '  /// @dev A mapping from crypton IDs to the address that owns them. All cryptons have\n', '  ///  some valid owner address.\n', '  mapping (uint256 => address) public cryptonIndexToOwner;\n', '\n', '  mapping (uint256 => bool) public cryptonIndexToProtected;\n', '\n', '  // @dev A mapping from owner address to count of tokens that address owns.\n', '  //  Used internally inside balanceOf() to resolve ownership count.\n', '  mapping (address => uint256) private ownershipTokenCount;\n', '\n', '  /// @dev A mapping from CryptonIDs to an address that has been approved to call\n', '  ///  transferFrom(). Each Crypton can only have one approved address for transfer\n', '  ///  at any time. A zero value means no approval is outstanding.\n', '  mapping (uint256 => address) public cryptonIndexToApproved;\n', '\n', '  // @dev A mapping from CryptonIDs to the price of the token.\n', '  mapping (uint256 => uint256) private cryptonIndexToPrice;\n', '\n', '\n', '  // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '  address public ceoAddress;\n', '  address public cooAddress;\n', '\n', '  /*** DATATYPES ***/\n', '  struct Crypton {\n', '    string name;\n', '    uint8  category;\n', '    uint256 markup;\n', '  }\n', '\n', '  Crypton[] private cryptons;\n', '\n', '    /// @dev Keeps track whether the contract is paused. When that is true, most actions are blocked.\n', '    bool public paused = false;\n', '\n', '  /*** ACCESS MODIFIERS ***/\n', '  /// @dev Access modifier for COO-only functionality\n', '  /// @dev Access modifier for CEO-only functionality\n', '  modifier onlyCEO() {\n', '    require(msg.sender == ceoAddress);\n', '    _;\n', '  }\n', '  \n', '  modifier onlyCOO() {\n', '    require(msg.sender == cooAddress);\n', '    _;\n', '  }\n', '\n', '  /// Access modifier for contract owner only functionality\n', '  modifier onlyCLevel() {\n', '    require(\n', '      msg.sender == ceoAddress ||\n', '      msg.sender == cooAddress\n', '    );\n', '    _;\n', '  }\n', '\n', '    /*** Pausable functionality adapted from OpenZeppelin ***/\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any "C-level" role to pause the contract. Used only when\n', '    ///  a bug or exploit is detected and we need to limit damage.\n', '    function pause()\n', '        external\n', '        onlyCLevel\n', '        whenNotPaused\n', '    {\n', '        paused = true;\n', '        emit ContractIsPaused(paused);\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the CEO\n', '    /// @notice This is public rather than external so it can be called by\n', '    ///  derived contracts.\n', '    function unpause()\n', '        public\n', '        onlyCEO\n', '        whenPaused\n', '    {\n', '        // can&#39;t unpause if contract was forked\n', '        paused = false;\n', '        emit ContractIsPaused(paused);\n', '    }\n', '  /*** CONSTRUCTOR ***/\n', '  constructor() public {\n', '    ceoAddress = msg.sender;\n', '    cooAddress = msg.sender;\n', '  }\n', '\n', '  /*** PUBLIC FUNCTIONS ***/\n', '  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n', '  /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '  ///  clear all approvals.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function approve(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public whenNotPaused {\n', '    // Caller must own token.\n', '    require(_owns(msg.sender, _tokenId));\n', '\n', '    cryptonIndexToApproved[_tokenId] = _to;\n', '\n', '    emit Approval(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// For querying balance of a particular account\n', '  /// @param _owner The address for balance query\n', '  /// @dev Required for ERC-721 compliance.\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return ownershipTokenCount[_owner];\n', '  }\n', '\n', '  /// @dev Creates a new Crypton with the given name, startingPrice, category and an (optional) owner wallet address\n', '  function createCrypton(\n', '    string _name,                           //Required\n', '    uint8 _category,                        //Required\n', '    uint256 _startingPrice,                 // Optional - defaults to startingPrice\n', '    uint256 _markup,                        // Optional - defaults to defaultMarkup\n', '    address _owner                          // Optional - deafults to contract\n', '    ) public onlyCLevel {\n', '      address cryptonOwner = _owner;\n', '      if (cryptonOwner == address(0)) {\n', '        cryptonOwner = address(this);\n', '      }\n', '      \n', '      if (_category == XPROMO) {    // XPROMO Cryptons - force ownership to contract\n', '          cryptonOwner = address(this);\n', '      }\n', '\n', '      if (_markup <= 0) {\n', '          _markup = defaultMarkup;\n', '      }\n', '        \n', '      if (_category == PROMO) { // PROMO Cryptons - force markup to zero\n', '        _markup = 0;  \n', '      }\n', '\n', '      if (_startingPrice <= 0) {\n', '        _startingPrice = startingPrice;\n', '      }\n', '\n', '\n', '      bool isProtected = (_category == PROMO)?true:false; // PROMO cryptons are protected, others are not - at creation\n', '      \n', '      _createCrypton(_name, cryptonOwner, _startingPrice, _markup, isProtected, _category);\n', '  }\n', '\n', '  /// @notice Returns all the relevant information about a specific crypton.\n', '  /// @param _tokenId The tokenId of the crypton of interest.\n', '  function getCrypton(uint256 _tokenId) public view returns (\n', '    string cryptonName,\n', '    uint8 category,\n', '    uint256 markup,\n', '    uint256 sellingPrice,\n', '    address owner,\n', '    bool isProtected\n', '  ) {\n', '    Crypton storage crypton = cryptons[_tokenId];\n', '    cryptonName = crypton.name;\n', '    sellingPrice = cryptonIndexToPrice[_tokenId];\n', '    owner = cryptonIndexToOwner[_tokenId];\n', '    isProtected = cryptonIndexToProtected[_tokenId];\n', '    category = crypton.category;\n', '    markup = crypton.markup;\n', '  }\n', '\n', '  function implementsERC721() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function name() public pure returns (string) {\n', '    return NAME;\n', '  }\n', '\n', '  /// For querying owner of token\n', '  /// @param _tokenId The tokenID for owner inquiry\n', '  /// @dev Required for ERC-721 compliance.\n', '  function ownerOf(uint256 _tokenId)\n', '    public\n', '    view\n', '    returns (address owner)\n', '  {\n', '    owner = cryptonIndexToOwner[_tokenId];\n', '    require(owner != address(0));\n', '  }\n', '\n', '  /// @dev This function withdraws the contract owner&#39;s cut.\n', '  /// Any amount may be withdrawn as there is no user funds.\n', '  /// User funds are immediately sent to the old owner in `purchase`\n', '  function payout(address _to) public onlyCLevel {\n', '    _payout(_to);\n', '  }\n', '\n', '  /// @dev This function allows the contract owner to adjust the selling price of a protected Crypton\n', '  function setPriceForProtectedCrypton(uint256 _tokenId, uint256 newSellingPrice) public whenNotPaused {\n', '    address oldOwner = cryptonIndexToOwner[_tokenId]; // owner in blockchain\n', '    address newOwner = msg.sender;                    // person requesting change\n', '    require(oldOwner == newOwner); // Only current owner can update the price\n', '    require(cryptonIndexToProtected[_tokenId]); // Make sure Crypton is protected\n', '    require(newSellingPrice > 0);  // Make sure the price is not zero\n', '    cryptonIndexToPrice[_tokenId] = newSellingPrice;\n', '    emit ProtectedCryptonSellingPriceChanged(_tokenId, newSellingPrice);\n', ' }\n', '\n', '  /// @dev This function allows the contract owner to buy protection for an unprotected that they already own\n', '  function setProtectionForMyUnprotectedCrypton(uint256 _tokenId, uint256 newSellingPrice) public payable whenNotPaused {\n', '    address oldOwner = cryptonIndexToOwner[_tokenId]; // owner in blockchain\n', '    address newOwner = msg.sender;                    // person requesting change\n', '    uint256 markup = cryptons[_tokenId].markup;\n', '    if (cryptons[_tokenId].category != PROMO) {\n', '      require(markup > 0); // if this is NOT a promotional crypton, the markup should be > zero\n', '    }\n', '    \n', '    require(oldOwner == newOwner); // Only current owner can buy protection for existing crypton\n', '    require(! cryptonIndexToProtected[_tokenId]); // Make sure Crypton is NOT already protected\n', '    require(newSellingPrice > 0);  // Make sure the sellingPrice is more than zero\n', '    require(msg.value >= markup);   // Make sure to collect the markup\n', '    \n', '    cryptonIndexToPrice[_tokenId] = newSellingPrice;\n', '    cryptonIndexToProtected[_tokenId] = true;\n', '    \n', '    emit OwnerProtectedCrypton(_tokenId, newSellingPrice);\n', ' }\n', ' \n', '  function getMarkup(uint256 _tokenId) public view returns (uint256 markup) {\n', '    return cryptons[_tokenId].markup;\n', '  }\n', '\n', '  /// @dev This function allows the contract owner to adjust the markup value\n', '  function setMarkup(uint256 _tokenId, uint256 newMarkup) public onlyCLevel {\n', '    require(newMarkup >= 0);\n', '    cryptons[_tokenId].markup = newMarkup;\n', '    emit MarkupChanged(cryptons[_tokenId].name, newMarkup);\n', '  }\n', '    \n', '  // Allows someone to send ether and obtain the token\n', '  function purchase(uint256 _tokenId, uint256 newSellingPrice) public payable whenNotPaused {\n', '    address oldOwner = cryptonIndexToOwner[_tokenId];\n', '    address newOwner = msg.sender;\n', '    bool isAlreadyProtected = cryptonIndexToProtected[_tokenId];\n', '    \n', '    uint256 sellingPrice = cryptonIndexToPrice[_tokenId];\n', '    uint256 markup = cryptons[_tokenId].markup;\n', '    \n', '    if (cryptons[_tokenId].category != PROMO) {\n', '      require(markup > 0); // if this is NOT a promotional crypton, the markup should be > zero\n', '    }\n', '\n', '    // Make sure token owner is not sending to self\n', '    require(oldOwner != newOwner);\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Make sure sent amount is greater than or equal to the sellingPrice\n', '    require(msg.value >= sellingPrice); // this is redundant - as we are checking this below\n', '\n', '    if (newSellingPrice > 0) { // if we are called with a new selling price, then the buyer is paying the markup or purchasing a protected crypton\n', '        uint256 purchasePrice = sellingPrice; //assume it is protected\n', '        if (! cryptonIndexToProtected[_tokenId] ) { // Crypton is not protected,\n', '            purchasePrice = sellingPrice + markup;  // apply markup\n', '        }\n', '\n', '        // If the Crypton is not already protected, make sure that the buyer is paying markup more than the current selling price\n', '        // If the buyer is not paying the markup - then he cannot set the new selling price- bailout\n', '        require(msg.value >= purchasePrice); \n', '\n', '        // Ok - the buyer paid the markup or the crypton was already protected.\n', '        cryptonIndexToPrice[_tokenId] = newSellingPrice;  // Set the selling price that the buyer wants\n', '        cryptonIndexToProtected[_tokenId] = true;         // Set the Crypton to protected\n', '        emit CryptonIsProtected(_tokenId);                // Let the world know\n', '\n', '    } else {\n', '        // Compute next listing price.\n', '        // Handle XPROMO case first...\n', '        if (\n', '          (oldOwner == address(this)) &&                // first transaction only`\n', '          (cryptons[_tokenId].category == XPROMO)      // Only for XPROMO category\n', '          ) \n', '        {\n', '          cryptonIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, XPROMO_MULTIPLIER), NET_PRICE_PERCENT);            \n', '        } else {\n', '          if (sellingPrice < FIRST_STEP_LIMIT) {\n', '            // first stage\n', '            cryptonIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, FIRST_STEP_MULTIPLIER), NET_PRICE_PERCENT);\n', '          } else {\n', '            // second stage\n', '            cryptonIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, SECOND_STEP_MULTIPLIER), NET_PRICE_PERCENT);\n', '          }\n', '        }\n', '\n', '    }\n', '       \n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '\n', '    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, NET_PRICE_PERCENT), 100));\n', '    string storage cname = cryptons[_tokenId].name;\n', '\n', '    bool isReservedToken = (cryptons[_tokenId].category == RESERVED);\n', '  \n', '    if (isReservedToken && isAlreadyProtected) {\n', '      oldOwner.transfer(payment); //(1-CRYPTON_CUT/100)\n', '      emit PaymentTransferredToPreviousOwner(_tokenId, sellingPrice, cryptonIndexToPrice[_tokenId], oldOwner, newOwner, cname);\n', '      emit TokenSold(_tokenId, sellingPrice, cryptonIndexToPrice[_tokenId], oldOwner, newOwner, cname);\n', '      return;\n', '    }\n', '\n', '    // Pay seller of the Crypton if they are not this contract or if this is a Reserved token\n', '    if ((oldOwner != address(this)) && !isReservedToken ) // Not a Reserved token and not owned by the contract\n', '    {\n', '      oldOwner.transfer(payment); //(1-CRYPTON_CUT/100)\n', '      emit PaymentTransferredToPreviousOwner(_tokenId, sellingPrice, cryptonIndexToPrice[_tokenId], oldOwner, newOwner, cname);\n', '    }\n', '\n', '    emit TokenSold(_tokenId, sellingPrice, cryptonIndexToPrice[_tokenId], oldOwner, newOwner, cname);\n', '\n', '  }\n', '\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\n', '    return cryptonIndexToPrice[_tokenId];\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '  /// @param _newCEO The address of the new CEO\n', '  function setCEO(address _newCEO) public onlyCEO {\n', '    require(_newCEO != address(0));\n', '\n', '    ceoAddress = _newCEO;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\n', '  /// @param _newCOO The address of the new COO\n', '  function setCOO(address _newCOO) public onlyCEO {\n', '    require(_newCOO != address(0));\n', '\n', '    cooAddress = _newCOO;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function symbol() public pure returns (string) {\n', '    return SYMBOL;\n', '  }\n', '\n', '  /// @notice Allow pre-approved user to take ownership of a token\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function takeOwnership(uint256 _tokenId) public whenNotPaused {\n', '    address newOwner = msg.sender;\n', '    address oldOwner = cryptonIndexToOwner[_tokenId];\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Making sure transfer is approved\n', '    require(_approved(newOwner, _tokenId));\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '  }\n', '\n', '  /// @param _owner The owner whose Cryptons we are interested in.\n', '  /// @dev This method MUST NEVER be called by smart contract code. First, it&#39;s fairly\n', '  ///  expensive (it walks the entire Cryptons array looking for cryptons belonging to owner),\n', '  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '  ///  not contract-to-contract calls.\n', '  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\n', '    uint256 tokenCount = balanceOf(_owner);\n', '    if (tokenCount == 0) {\n', '        // Return an empty array\n', '      return new uint256[](0);\n', '    } else {\n', '      uint256[] memory result = new uint256[](tokenCount);\n', '      uint256 totalCryptons = totalSupply();\n', '      uint256 resultIndex = 0;\n', '\n', '      uint256 cryptonId;\n', '      for (cryptonId = 0; cryptonId <= totalCryptons; cryptonId++) {\n', '        if (cryptonIndexToOwner[cryptonId] == _owner) {\n', '          result[resultIndex] = cryptonId;\n', '          resultIndex++;\n', '        }\n', '      }\n', '      return result;\n', '    }\n', '  }\n', '\n', '  /// For querying totalSupply of token\n', '  /// @dev Required for ERC-721 compliance.\n', '  function totalSupply() public view returns (uint256 total) {\n', '    return cryptons.length;\n', '  }\n', '\n', '  /// Owner initates the transfer of the token to another account\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transfer(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public whenNotPaused {\n', '    require(_owns(msg.sender, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// Third-party initiates transfer of token from address _from to address _to\n', '  /// @param _from The address for the token to be transferred from.\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public whenNotPaused {\n', '    require(_owns(_from, _tokenId));\n', '    require(_approved(_to, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /*** PRIVATE FUNCTIONS ***/\n', '  /// Safety check on _to address to prevent against an unexpected 0x0 default.\n', '  function _addressNotNull(address _to) private pure returns (bool) {\n', '    return _to != address(0);\n', '  }\n', '\n', '  /// For checking approval of transfer for address _to\n', '  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n', '    return cryptonIndexToApproved[_tokenId] == _to;\n', '  }\n', '\n', '  /// For creating Crypton\n', '  function _createCrypton(string _name, address _owner, uint256 _price, uint256 _markup, bool _isProtected, uint8 _category) private {\n', '    Crypton memory _crypton = Crypton({\n', '      name: _name,\n', '      category: _category,\n', '      markup: _markup\n', '    });\n', '    uint256 newCryptonId = cryptons.push(_crypton) - 1;\n', '\n', '    // It&#39;s probably never going to happen, 4 billion tokens are A LOT, but\n', '    // let&#39;s just be 100% sure we never let this happen.\n', '    require(newCryptonId == uint256(uint32(newCryptonId)));\n', '\n', '    emit Birth(newCryptonId, _name, _owner, _isProtected, _category);\n', '\n', '    cryptonIndexToPrice[newCryptonId] = _price;\n', '    \n', '    cryptonIndexToProtected[newCryptonId] = _isProtected; // _isProtected is true for promo cryptons - false for others.\n', '\n', '    // This will assign ownership, and also emit the Transfer event as\n', '    // per ERC721 draft\n', '    _transfer(address(0), _owner, newCryptonId);\n', '  }\n', '\n', '  /// Check for token ownership\n', '  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\n', '    return claimant == cryptonIndexToOwner[_tokenId];\n', '  }\n', '\n', '  /// For paying out balance on contract\n', '  function _payout(address _to) private {\n', '    address myAddress = this;\n', '    if (_to == address(0)) {\n', '      ceoAddress.transfer(myAddress.balance);\n', '    } else {\n', '      _to.transfer(myAddress.balance);\n', '    }\n', '  }\n', '\n', '  /// @dev Assigns ownership of a specific Crypton to an address.\n', '  function _transfer(address _from, address _to, uint256 _tokenId) private {\n', '    // Since the number of cryptons is capped to 2^32 we can&#39;t overflow this\n', '    ownershipTokenCount[_to]++;\n', '    //transfer ownership\n', '    cryptonIndexToOwner[_tokenId] = _to;\n', '\n', '    // When creating new cryptons _from is 0x0, but we can&#39;t account that address.\n', '    if (_from != address(0)) {\n', '      ownershipTokenCount[_from]--;\n', '      // clear any previously approved ownership exchange\n', '      delete cryptonIndexToApproved[_tokenId];\n', '    }\n', '\n', '    // Emit the transfer event.\n', '    emit Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '//various getter/setter methods\n', '\n', '  function setFIRST_STEP_LIMIT(uint256 newLimit) public onlyCLevel {\n', '    require(newLimit > 0 && newLimit < 100 ether);\n', '    FIRST_STEP_LIMIT = newLimit;\n', '  }\n', '  function getFIRST_STEP_LIMIT() public view returns (uint256 value) {\n', '    return FIRST_STEP_LIMIT;\n', '  }\n', '\n', '  function setFIRST_STEP_MULTIPLIER(uint16 newValue) public onlyCLevel {\n', '    require(newValue >= 110 && newValue <= 200);\n', '    FIRST_STEP_MULTIPLIER = newValue;\n', '  }\n', '  function getFIRST_STEP_MULTIPLIER() public view returns (uint16 value) {\n', '    return FIRST_STEP_MULTIPLIER;\n', '  }\n', '\n', '  function setSECOND_STEP_MULTIPLIER(uint16 newValue) public onlyCLevel {\n', '    require(newValue >= 110 && newValue <= 200);\n', '    SECOND_STEP_MULTIPLIER = newValue;\n', '  }\n', '  function getSECOND_STEP_MULTIPLIER() public view returns (uint16 value) {\n', '    return SECOND_STEP_MULTIPLIER;\n', '  }\n', '\n', '  function setXPROMO_MULTIPLIER(uint16 newValue) public onlyCLevel {\n', '    require(newValue >= 100 && newValue <= 10000); // between 0 and 100x\n', '    XPROMO_MULTIPLIER = newValue;\n', '  }\n', '  function getXPROMO_MULTIPLIER() public view returns (uint16 value) {\n', '    return XPROMO_MULTIPLIER;\n', '  }\n', '\n', '  function setCRYPTON_CUT(uint16 newValue) public onlyCLevel {\n', '    require(newValue > 0 && newValue < 10);\n', '    CRYPTON_CUT = newValue;\n', '  }\n', '  function getCRYPTON_CUT() public view returns (uint16 value) {\n', '    return CRYPTON_CUT;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.19; // solhint-disable-line\n', '\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Srini Vasan \n', 'contract ERC721 {\n', '  // Required methods\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function implementsERC721() public pure returns (bool);\n', '  function ownerOf(uint256 _tokenId) public view returns (address addr);\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '\n', '}\n', '\n', 'contract CryptonToken is ERC721 {\n', '\n', '  /*** EVENTS ***/\n', '\n', '  /// @dev The Birth event is fired whenever a new crypton comes into existence.\n', '  event Birth(uint256 tokenId, string name, address owner, bool isProtected, uint8 category);\n', '\n', '  /// @dev The TokenSold event is fired whenever a token is sold.\n', '  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\n', '\n', '  /// @dev Transfer event as defined in current draft of ERC721. \n', '  ///  ownership is assigned, including births.\n', '  event Transfer(address from, address to, uint256 tokenId);\n', '\n', '  /// @dev the PaymentTransferredToPreviousOwner event is fired when the previous owner of the Crypton is paid after a purchase.\n', '  event PaymentTransferredToPreviousOwner(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\n', '\n', '  // @dev CryptonIsProtected is fired when the Crypton is protected from snatching - i.e. owner is allowed to set the selling price for the crypton\n', '  event CryptonIsProtected(uint256 tokenId);\n', '\n', '    // @dev The markup was changed\n', '    event MarkupChanged(string name, uint256 newMarkup);\n', '    \n', '    //@dev Selling price of protected Crypton changed\n', '    event ProtectedCryptonSellingPriceChanged(uint256 tokenId, uint256 newSellingPrice);\n', '    \n', '    // Owner protected their Crypton\n', '    event OwnerProtectedCrypton(uint256 _tokenId, uint256 newSellingPrice);\n', '\n', '    //Contract paused event\n', '    event ContractIsPaused(bool paused);\n', '\n', '  /*** CONSTANTS ***/\n', '\n', '  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '  string public constant NAME = "Cryptons"; // solhint-disable-line\n', '  string public constant SYMBOL = "CRYPTON"; // solhint-disable-line\n', '\n', '  uint256 private startingPrice = 0.1 ether;\n', '  uint256 private defaultMarkup = 2 ether;\n', '  uint256 private FIRST_STEP_LIMIT =  1.0 ether;\n', '  uint16 private FIRST_STEP_MULTIPLIER = 200; // double the value\n', '  uint16 private SECOND_STEP_MULTIPLIER = 120; // increment value by 20%\n', '  uint16 private XPROMO_MULTIPLIER = 500; // 5 times the value\n', '  uint16 private CRYPTON_CUT = 6; // our cut\n', '  uint16 private NET_PRICE_PERCENT = 100 - CRYPTON_CUT; // Net price paid out after cut\n', '\n', '  // I could have used enums - but preferered the more specific uint8 \n', '  uint8 private constant PROMO = 1;\n', '  uint8 private constant STANDARD = 2;\n', '  uint8 private constant RESERVED = 7;\n', '  uint8 private constant XPROMO = 10; // First transaction, contract sets sell price to 5x\n', '  \n', '  /*** STORAGE ***/\n', '\n', '  /// @dev A mapping from crypton IDs to the address that owns them. All cryptons have\n', '  ///  some valid owner address.\n', '  mapping (uint256 => address) public cryptonIndexToOwner;\n', '\n', '  mapping (uint256 => bool) public cryptonIndexToProtected;\n', '\n', '  // @dev A mapping from owner address to count of tokens that address owns.\n', '  //  Used internally inside balanceOf() to resolve ownership count.\n', '  mapping (address => uint256) private ownershipTokenCount;\n', '\n', '  /// @dev A mapping from CryptonIDs to an address that has been approved to call\n', '  ///  transferFrom(). Each Crypton can only have one approved address for transfer\n', '  ///  at any time. A zero value means no approval is outstanding.\n', '  mapping (uint256 => address) public cryptonIndexToApproved;\n', '\n', '  // @dev A mapping from CryptonIDs to the price of the token.\n', '  mapping (uint256 => uint256) private cryptonIndexToPrice;\n', '\n', '\n', '  // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '  address public ceoAddress;\n', '  address public cooAddress;\n', '\n', '  /*** DATATYPES ***/\n', '  struct Crypton {\n', '    string name;\n', '    uint8  category;\n', '    uint256 markup;\n', '  }\n', '\n', '  Crypton[] private cryptons;\n', '\n', '    /// @dev Keeps track whether the contract is paused. When that is true, most actions are blocked.\n', '    bool public paused = false;\n', '\n', '  /*** ACCESS MODIFIERS ***/\n', '  /// @dev Access modifier for COO-only functionality\n', '  /// @dev Access modifier for CEO-only functionality\n', '  modifier onlyCEO() {\n', '    require(msg.sender == ceoAddress);\n', '    _;\n', '  }\n', '  \n', '  modifier onlyCOO() {\n', '    require(msg.sender == cooAddress);\n', '    _;\n', '  }\n', '\n', '  /// Access modifier for contract owner only functionality\n', '  modifier onlyCLevel() {\n', '    require(\n', '      msg.sender == ceoAddress ||\n', '      msg.sender == cooAddress\n', '    );\n', '    _;\n', '  }\n', '\n', '    /*** Pausable functionality adapted from OpenZeppelin ***/\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any "C-level" role to pause the contract. Used only when\n', '    ///  a bug or exploit is detected and we need to limit damage.\n', '    function pause()\n', '        external\n', '        onlyCLevel\n', '        whenNotPaused\n', '    {\n', '        paused = true;\n', '        emit ContractIsPaused(paused);\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the CEO\n', '    /// @notice This is public rather than external so it can be called by\n', '    ///  derived contracts.\n', '    function unpause()\n', '        public\n', '        onlyCEO\n', '        whenPaused\n', '    {\n', "        // can't unpause if contract was forked\n", '        paused = false;\n', '        emit ContractIsPaused(paused);\n', '    }\n', '  /*** CONSTRUCTOR ***/\n', '  constructor() public {\n', '    ceoAddress = msg.sender;\n', '    cooAddress = msg.sender;\n', '  }\n', '\n', '  /*** PUBLIC FUNCTIONS ***/\n', '  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n', '  /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '  ///  clear all approvals.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function approve(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public whenNotPaused {\n', '    // Caller must own token.\n', '    require(_owns(msg.sender, _tokenId));\n', '\n', '    cryptonIndexToApproved[_tokenId] = _to;\n', '\n', '    emit Approval(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// For querying balance of a particular account\n', '  /// @param _owner The address for balance query\n', '  /// @dev Required for ERC-721 compliance.\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return ownershipTokenCount[_owner];\n', '  }\n', '\n', '  /// @dev Creates a new Crypton with the given name, startingPrice, category and an (optional) owner wallet address\n', '  function createCrypton(\n', '    string _name,                           //Required\n', '    uint8 _category,                        //Required\n', '    uint256 _startingPrice,                 // Optional - defaults to startingPrice\n', '    uint256 _markup,                        // Optional - defaults to defaultMarkup\n', '    address _owner                          // Optional - deafults to contract\n', '    ) public onlyCLevel {\n', '      address cryptonOwner = _owner;\n', '      if (cryptonOwner == address(0)) {\n', '        cryptonOwner = address(this);\n', '      }\n', '      \n', '      if (_category == XPROMO) {    // XPROMO Cryptons - force ownership to contract\n', '          cryptonOwner = address(this);\n', '      }\n', '\n', '      if (_markup <= 0) {\n', '          _markup = defaultMarkup;\n', '      }\n', '        \n', '      if (_category == PROMO) { // PROMO Cryptons - force markup to zero\n', '        _markup = 0;  \n', '      }\n', '\n', '      if (_startingPrice <= 0) {\n', '        _startingPrice = startingPrice;\n', '      }\n', '\n', '\n', '      bool isProtected = (_category == PROMO)?true:false; // PROMO cryptons are protected, others are not - at creation\n', '      \n', '      _createCrypton(_name, cryptonOwner, _startingPrice, _markup, isProtected, _category);\n', '  }\n', '\n', '  /// @notice Returns all the relevant information about a specific crypton.\n', '  /// @param _tokenId The tokenId of the crypton of interest.\n', '  function getCrypton(uint256 _tokenId) public view returns (\n', '    string cryptonName,\n', '    uint8 category,\n', '    uint256 markup,\n', '    uint256 sellingPrice,\n', '    address owner,\n', '    bool isProtected\n', '  ) {\n', '    Crypton storage crypton = cryptons[_tokenId];\n', '    cryptonName = crypton.name;\n', '    sellingPrice = cryptonIndexToPrice[_tokenId];\n', '    owner = cryptonIndexToOwner[_tokenId];\n', '    isProtected = cryptonIndexToProtected[_tokenId];\n', '    category = crypton.category;\n', '    markup = crypton.markup;\n', '  }\n', '\n', '  function implementsERC721() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function name() public pure returns (string) {\n', '    return NAME;\n', '  }\n', '\n', '  /// For querying owner of token\n', '  /// @param _tokenId The tokenID for owner inquiry\n', '  /// @dev Required for ERC-721 compliance.\n', '  function ownerOf(uint256 _tokenId)\n', '    public\n', '    view\n', '    returns (address owner)\n', '  {\n', '    owner = cryptonIndexToOwner[_tokenId];\n', '    require(owner != address(0));\n', '  }\n', '\n', "  /// @dev This function withdraws the contract owner's cut.\n", '  /// Any amount may be withdrawn as there is no user funds.\n', '  /// User funds are immediately sent to the old owner in `purchase`\n', '  function payout(address _to) public onlyCLevel {\n', '    _payout(_to);\n', '  }\n', '\n', '  /// @dev This function allows the contract owner to adjust the selling price of a protected Crypton\n', '  function setPriceForProtectedCrypton(uint256 _tokenId, uint256 newSellingPrice) public whenNotPaused {\n', '    address oldOwner = cryptonIndexToOwner[_tokenId]; // owner in blockchain\n', '    address newOwner = msg.sender;                    // person requesting change\n', '    require(oldOwner == newOwner); // Only current owner can update the price\n', '    require(cryptonIndexToProtected[_tokenId]); // Make sure Crypton is protected\n', '    require(newSellingPrice > 0);  // Make sure the price is not zero\n', '    cryptonIndexToPrice[_tokenId] = newSellingPrice;\n', '    emit ProtectedCryptonSellingPriceChanged(_tokenId, newSellingPrice);\n', ' }\n', '\n', '  /// @dev This function allows the contract owner to buy protection for an unprotected that they already own\n', '  function setProtectionForMyUnprotectedCrypton(uint256 _tokenId, uint256 newSellingPrice) public payable whenNotPaused {\n', '    address oldOwner = cryptonIndexToOwner[_tokenId]; // owner in blockchain\n', '    address newOwner = msg.sender;                    // person requesting change\n', '    uint256 markup = cryptons[_tokenId].markup;\n', '    if (cryptons[_tokenId].category != PROMO) {\n', '      require(markup > 0); // if this is NOT a promotional crypton, the markup should be > zero\n', '    }\n', '    \n', '    require(oldOwner == newOwner); // Only current owner can buy protection for existing crypton\n', '    require(! cryptonIndexToProtected[_tokenId]); // Make sure Crypton is NOT already protected\n', '    require(newSellingPrice > 0);  // Make sure the sellingPrice is more than zero\n', '    require(msg.value >= markup);   // Make sure to collect the markup\n', '    \n', '    cryptonIndexToPrice[_tokenId] = newSellingPrice;\n', '    cryptonIndexToProtected[_tokenId] = true;\n', '    \n', '    emit OwnerProtectedCrypton(_tokenId, newSellingPrice);\n', ' }\n', ' \n', '  function getMarkup(uint256 _tokenId) public view returns (uint256 markup) {\n', '    return cryptons[_tokenId].markup;\n', '  }\n', '\n', '  /// @dev This function allows the contract owner to adjust the markup value\n', '  function setMarkup(uint256 _tokenId, uint256 newMarkup) public onlyCLevel {\n', '    require(newMarkup >= 0);\n', '    cryptons[_tokenId].markup = newMarkup;\n', '    emit MarkupChanged(cryptons[_tokenId].name, newMarkup);\n', '  }\n', '    \n', '  // Allows someone to send ether and obtain the token\n', '  function purchase(uint256 _tokenId, uint256 newSellingPrice) public payable whenNotPaused {\n', '    address oldOwner = cryptonIndexToOwner[_tokenId];\n', '    address newOwner = msg.sender;\n', '    bool isAlreadyProtected = cryptonIndexToProtected[_tokenId];\n', '    \n', '    uint256 sellingPrice = cryptonIndexToPrice[_tokenId];\n', '    uint256 markup = cryptons[_tokenId].markup;\n', '    \n', '    if (cryptons[_tokenId].category != PROMO) {\n', '      require(markup > 0); // if this is NOT a promotional crypton, the markup should be > zero\n', '    }\n', '\n', '    // Make sure token owner is not sending to self\n', '    require(oldOwner != newOwner);\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Make sure sent amount is greater than or equal to the sellingPrice\n', '    require(msg.value >= sellingPrice); // this is redundant - as we are checking this below\n', '\n', '    if (newSellingPrice > 0) { // if we are called with a new selling price, then the buyer is paying the markup or purchasing a protected crypton\n', '        uint256 purchasePrice = sellingPrice; //assume it is protected\n', '        if (! cryptonIndexToProtected[_tokenId] ) { // Crypton is not protected,\n', '            purchasePrice = sellingPrice + markup;  // apply markup\n', '        }\n', '\n', '        // If the Crypton is not already protected, make sure that the buyer is paying markup more than the current selling price\n', '        // If the buyer is not paying the markup - then he cannot set the new selling price- bailout\n', '        require(msg.value >= purchasePrice); \n', '\n', '        // Ok - the buyer paid the markup or the crypton was already protected.\n', '        cryptonIndexToPrice[_tokenId] = newSellingPrice;  // Set the selling price that the buyer wants\n', '        cryptonIndexToProtected[_tokenId] = true;         // Set the Crypton to protected\n', '        emit CryptonIsProtected(_tokenId);                // Let the world know\n', '\n', '    } else {\n', '        // Compute next listing price.\n', '        // Handle XPROMO case first...\n', '        if (\n', '          (oldOwner == address(this)) &&                // first transaction only`\n', '          (cryptons[_tokenId].category == XPROMO)      // Only for XPROMO category\n', '          ) \n', '        {\n', '          cryptonIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, XPROMO_MULTIPLIER), NET_PRICE_PERCENT);            \n', '        } else {\n', '          if (sellingPrice < FIRST_STEP_LIMIT) {\n', '            // first stage\n', '            cryptonIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, FIRST_STEP_MULTIPLIER), NET_PRICE_PERCENT);\n', '          } else {\n', '            // second stage\n', '            cryptonIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, SECOND_STEP_MULTIPLIER), NET_PRICE_PERCENT);\n', '          }\n', '        }\n', '\n', '    }\n', '       \n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '\n', '    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, NET_PRICE_PERCENT), 100));\n', '    string storage cname = cryptons[_tokenId].name;\n', '\n', '    bool isReservedToken = (cryptons[_tokenId].category == RESERVED);\n', '  \n', '    if (isReservedToken && isAlreadyProtected) {\n', '      oldOwner.transfer(payment); //(1-CRYPTON_CUT/100)\n', '      emit PaymentTransferredToPreviousOwner(_tokenId, sellingPrice, cryptonIndexToPrice[_tokenId], oldOwner, newOwner, cname);\n', '      emit TokenSold(_tokenId, sellingPrice, cryptonIndexToPrice[_tokenId], oldOwner, newOwner, cname);\n', '      return;\n', '    }\n', '\n', '    // Pay seller of the Crypton if they are not this contract or if this is a Reserved token\n', '    if ((oldOwner != address(this)) && !isReservedToken ) // Not a Reserved token and not owned by the contract\n', '    {\n', '      oldOwner.transfer(payment); //(1-CRYPTON_CUT/100)\n', '      emit PaymentTransferredToPreviousOwner(_tokenId, sellingPrice, cryptonIndexToPrice[_tokenId], oldOwner, newOwner, cname);\n', '    }\n', '\n', '    emit TokenSold(_tokenId, sellingPrice, cryptonIndexToPrice[_tokenId], oldOwner, newOwner, cname);\n', '\n', '  }\n', '\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\n', '    return cryptonIndexToPrice[_tokenId];\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '  /// @param _newCEO The address of the new CEO\n', '  function setCEO(address _newCEO) public onlyCEO {\n', '    require(_newCEO != address(0));\n', '\n', '    ceoAddress = _newCEO;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\n', '  /// @param _newCOO The address of the new COO\n', '  function setCOO(address _newCOO) public onlyCEO {\n', '    require(_newCOO != address(0));\n', '\n', '    cooAddress = _newCOO;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function symbol() public pure returns (string) {\n', '    return SYMBOL;\n', '  }\n', '\n', '  /// @notice Allow pre-approved user to take ownership of a token\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function takeOwnership(uint256 _tokenId) public whenNotPaused {\n', '    address newOwner = msg.sender;\n', '    address oldOwner = cryptonIndexToOwner[_tokenId];\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Making sure transfer is approved\n', '    require(_approved(newOwner, _tokenId));\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '  }\n', '\n', '  /// @param _owner The owner whose Cryptons we are interested in.\n', "  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n", '  ///  expensive (it walks the entire Cryptons array looking for cryptons belonging to owner),\n', '  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '  ///  not contract-to-contract calls.\n', '  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\n', '    uint256 tokenCount = balanceOf(_owner);\n', '    if (tokenCount == 0) {\n', '        // Return an empty array\n', '      return new uint256[](0);\n', '    } else {\n', '      uint256[] memory result = new uint256[](tokenCount);\n', '      uint256 totalCryptons = totalSupply();\n', '      uint256 resultIndex = 0;\n', '\n', '      uint256 cryptonId;\n', '      for (cryptonId = 0; cryptonId <= totalCryptons; cryptonId++) {\n', '        if (cryptonIndexToOwner[cryptonId] == _owner) {\n', '          result[resultIndex] = cryptonId;\n', '          resultIndex++;\n', '        }\n', '      }\n', '      return result;\n', '    }\n', '  }\n', '\n', '  /// For querying totalSupply of token\n', '  /// @dev Required for ERC-721 compliance.\n', '  function totalSupply() public view returns (uint256 total) {\n', '    return cryptons.length;\n', '  }\n', '\n', '  /// Owner initates the transfer of the token to another account\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transfer(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public whenNotPaused {\n', '    require(_owns(msg.sender, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// Third-party initiates transfer of token from address _from to address _to\n', '  /// @param _from The address for the token to be transferred from.\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public whenNotPaused {\n', '    require(_owns(_from, _tokenId));\n', '    require(_approved(_to, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /*** PRIVATE FUNCTIONS ***/\n', '  /// Safety check on _to address to prevent against an unexpected 0x0 default.\n', '  function _addressNotNull(address _to) private pure returns (bool) {\n', '    return _to != address(0);\n', '  }\n', '\n', '  /// For checking approval of transfer for address _to\n', '  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n', '    return cryptonIndexToApproved[_tokenId] == _to;\n', '  }\n', '\n', '  /// For creating Crypton\n', '  function _createCrypton(string _name, address _owner, uint256 _price, uint256 _markup, bool _isProtected, uint8 _category) private {\n', '    Crypton memory _crypton = Crypton({\n', '      name: _name,\n', '      category: _category,\n', '      markup: _markup\n', '    });\n', '    uint256 newCryptonId = cryptons.push(_crypton) - 1;\n', '\n', "    // It's probably never going to happen, 4 billion tokens are A LOT, but\n", "    // let's just be 100% sure we never let this happen.\n", '    require(newCryptonId == uint256(uint32(newCryptonId)));\n', '\n', '    emit Birth(newCryptonId, _name, _owner, _isProtected, _category);\n', '\n', '    cryptonIndexToPrice[newCryptonId] = _price;\n', '    \n', '    cryptonIndexToProtected[newCryptonId] = _isProtected; // _isProtected is true for promo cryptons - false for others.\n', '\n', '    // This will assign ownership, and also emit the Transfer event as\n', '    // per ERC721 draft\n', '    _transfer(address(0), _owner, newCryptonId);\n', '  }\n', '\n', '  /// Check for token ownership\n', '  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\n', '    return claimant == cryptonIndexToOwner[_tokenId];\n', '  }\n', '\n', '  /// For paying out balance on contract\n', '  function _payout(address _to) private {\n', '    address myAddress = this;\n', '    if (_to == address(0)) {\n', '      ceoAddress.transfer(myAddress.balance);\n', '    } else {\n', '      _to.transfer(myAddress.balance);\n', '    }\n', '  }\n', '\n', '  /// @dev Assigns ownership of a specific Crypton to an address.\n', '  function _transfer(address _from, address _to, uint256 _tokenId) private {\n', "    // Since the number of cryptons is capped to 2^32 we can't overflow this\n", '    ownershipTokenCount[_to]++;\n', '    //transfer ownership\n', '    cryptonIndexToOwner[_tokenId] = _to;\n', '\n', "    // When creating new cryptons _from is 0x0, but we can't account that address.\n", '    if (_from != address(0)) {\n', '      ownershipTokenCount[_from]--;\n', '      // clear any previously approved ownership exchange\n', '      delete cryptonIndexToApproved[_tokenId];\n', '    }\n', '\n', '    // Emit the transfer event.\n', '    emit Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '//various getter/setter methods\n', '\n', '  function setFIRST_STEP_LIMIT(uint256 newLimit) public onlyCLevel {\n', '    require(newLimit > 0 && newLimit < 100 ether);\n', '    FIRST_STEP_LIMIT = newLimit;\n', '  }\n', '  function getFIRST_STEP_LIMIT() public view returns (uint256 value) {\n', '    return FIRST_STEP_LIMIT;\n', '  }\n', '\n', '  function setFIRST_STEP_MULTIPLIER(uint16 newValue) public onlyCLevel {\n', '    require(newValue >= 110 && newValue <= 200);\n', '    FIRST_STEP_MULTIPLIER = newValue;\n', '  }\n', '  function getFIRST_STEP_MULTIPLIER() public view returns (uint16 value) {\n', '    return FIRST_STEP_MULTIPLIER;\n', '  }\n', '\n', '  function setSECOND_STEP_MULTIPLIER(uint16 newValue) public onlyCLevel {\n', '    require(newValue >= 110 && newValue <= 200);\n', '    SECOND_STEP_MULTIPLIER = newValue;\n', '  }\n', '  function getSECOND_STEP_MULTIPLIER() public view returns (uint16 value) {\n', '    return SECOND_STEP_MULTIPLIER;\n', '  }\n', '\n', '  function setXPROMO_MULTIPLIER(uint16 newValue) public onlyCLevel {\n', '    require(newValue >= 100 && newValue <= 10000); // between 0 and 100x\n', '    XPROMO_MULTIPLIER = newValue;\n', '  }\n', '  function getXPROMO_MULTIPLIER() public view returns (uint16 value) {\n', '    return XPROMO_MULTIPLIER;\n', '  }\n', '\n', '  function setCRYPTON_CUT(uint16 newValue) public onlyCLevel {\n', '    require(newValue > 0 && newValue < 10);\n', '    CRYPTON_CUT = newValue;\n', '  }\n', '  function getCRYPTON_CUT() public view returns (uint16 value) {\n', '    return CRYPTON_CUT;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
