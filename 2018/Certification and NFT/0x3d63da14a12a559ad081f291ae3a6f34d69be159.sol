['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'interface GACR {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function mint(address _to, uint256 _amount) external returns (bool);\n', '    function finishMinting() external returns (bool);\n', '    function totalSupply() external view returns (uint256);\n', '    function setTeamAddress(address _teamFund) external;\n', '    function transferOwnership(address newOwner) external;\n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // ICO stage\n', '    enum CrowdsaleStage { PreICO, ICO }\n', '    CrowdsaleStage public stage = CrowdsaleStage.PreICO; // By default it&#39;s Pre Sale\n', '\n', '    // Token distribution\n', '    uint256 public constant maxTokens           = 50000000*1e18;    // max of GACR tokens\n', '    uint256 public constant tokensForSale       = 28500000*1e18;    // 57%\n', '    uint256 public constant tokensForBounty     = 1500000*1e18;     // 3%\n', '    uint256 public constant tokensForAdvisors   = 3000000*1e18;     // 6%\n', '    uint256 public constant tokensForTeam       = 9000000*1e18;     // 18%\n', '    uint256 public tokensForEcosystem           = 8000000*1e18;     // 16%\n', '\n', '    // Start & End time of Crowdsale\n', '    uint256 startTime   = 1522494000;   // 2018-03-31T11:00:00\n', '    uint256 endTime     = 1539169200;   // 2018-10-10T11:00:00\n', '\n', '    // The token being sold\n', '    GACR public token;\n', '\n', '    // Address where funds are collected\n', '    address public wallet;\n', '\n', '    // How many token units a buyer gets per wei\n', '    uint256 public rate;\n', '\n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '\n', '    // Limit for total contributions\n', '    uint256 public cap;\n', '\n', '    // KYC for ICO\n', '    mapping(address => bool) public whitelist;\n', '\n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @dev Event for whitelist update\n', '     * @param purchaser who add to whitelist\n', '     * @param status of purchased for whitelist\n', '     */\n', '    event WhitelistUpdate(address indexed purchaser, bool status);\n', '\n', '    /**\n', '     * @dev Event for crowdsale finalize\n', '     */\n', '    event Finalized();\n', '\n', '    /**\n', '     * @param _cap ether cap for Crowdsale\n', '     * @param _rate Number of token units a buyer gets per wei\n', '     * @param _wallet Address where collected funds will be forwarded to\n', '     */\n', '    constructor(uint256 _cap, uint256 _rate, address _wallet, address _token) public {\n', '        require(_cap > 0);\n', '        require(_rate > 0);\n', '        require(_wallet != address(0));\n', '\n', '        cap = _cap;\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '        token = GACR(_token);\n', '    }\n', '\n', '    /**\n', '     * @dev Check that sale is on\n', '     */\n', '    modifier saleIsOn() {\n', '        require(now > startTime && now < endTime);\n', '        _;\n', '    }\n', '\n', '    //note: only for test\n', '    //function setNowTime(uint value) public onlyOwner {\n', '    //    require(value != 0);\n', '    //    _nowTime = value;\n', '    //}\n', '\n', '    /**\n', '     * @dev Buy tokens\n', '     */\n', '    function buyTokens(address _beneficiary) saleIsOn public payable {\n', '        uint256 _weiAmount = msg.value;\n', '\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '        require(weiRaised.add(_weiAmount) <= cap);\n', '\n', '        require(stage==CrowdsaleStage.PreICO ||\n', '               (stage==CrowdsaleStage.ICO && isWhitelisted(_beneficiary)));\n', '\n', '        // calculate token amount to be created\n', '        uint256 _tokenAmount = _weiAmount.mul(rate);\n', '\n', '        // bonus calculation\n', '        uint256 bonusTokens = 0;\n', '        if (stage == CrowdsaleStage.PreICO) {\n', '            if (_tokenAmount >= 50e18 && _tokenAmount < 3000e18) {\n', '                bonusTokens = _tokenAmount.mul(23).div(100);\n', '            } else if (_tokenAmount >= 3000e18 && _tokenAmount < 15000e18) {\n', '                bonusTokens = _tokenAmount.mul(27).div(100);\n', '            } else if (_tokenAmount >= 15000e18 && _tokenAmount < 30000e18) {\n', '                bonusTokens = _tokenAmount.mul(30).div(100);\n', '            } else if (_tokenAmount >= 30000e18) {\n', '                bonusTokens = _tokenAmount.mul(35).div(100);\n', '            }\n', '        } else if (stage == CrowdsaleStage.ICO) {\n', '            uint256 _nowTime = now;\n', '\n', '            if (_nowTime >= 1531486800 && _nowTime < 1532696400) {\n', '                bonusTokens = _tokenAmount.mul(18).div(100);\n', '            } else if (_nowTime >= 1532696400 && _nowTime < 1533906000) {\n', '                bonusTokens = _tokenAmount.mul(15).div(100);\n', '            } else if (_nowTime >= 1533906000 && _nowTime < 1535115600) {\n', '                bonusTokens = _tokenAmount.mul(12).div(100);\n', '            } else if (_nowTime >= 1535115600 && _nowTime < 1536325200) {\n', '                bonusTokens = _tokenAmount.mul(9).div(100);\n', '            } else if (_nowTime >= 1536325200 && _nowTime < 1537534800) {\n', '                bonusTokens = _tokenAmount.mul(6).div(100);\n', '            } else if (_nowTime >= 1537534800 && _nowTime < endTime) {\n', '                bonusTokens = _tokenAmount.mul(3).div(100);\n', '            }\n', '        }\n', '        _tokenAmount += bonusTokens;\n', '\n', '        // check limit for sale\n', '        require(tokensForSale >= (token.totalSupply() + _tokenAmount));\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(_weiAmount);\n', '        token.mint(_beneficiary, _tokenAmount);\n', '\n', '        emit TokenPurchase(msg.sender, _beneficiary, _weiAmount, _tokenAmount);\n', '\n', '        wallet.transfer(_weiAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Payable function\n', '     */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Change Crowdsale Stage.\n', '     * Options: PreICO, ICO\n', '     */\n', '    function setCrowdsaleStage(uint value) public onlyOwner {\n', '\n', '        CrowdsaleStage _stage;\n', '\n', '        if (uint256(CrowdsaleStage.PreICO) == value) {\n', '            _stage = CrowdsaleStage.PreICO;\n', '        } else if (uint256(CrowdsaleStage.ICO) == value) {\n', '            _stage = CrowdsaleStage.ICO;\n', '        }\n', '\n', '        stage = _stage;\n', '    }\n', '\n', '    /**\n', '     * @dev Set new rate (protection from strong volatility)\n', '     */\n', '    function setNewRate(uint _newRate) public onlyOwner {\n', '        require(_newRate > 0);\n', '        rate = _newRate;\n', '    }\n', '\n', '    /**\n', '     * @dev Set hard cap (protection from strong volatility)\n', '     */\n', '    function setHardCap(uint256 _newCap) public onlyOwner {\n', '        require(_newCap > 0);\n', '        cap = _newCap;\n', '    }\n', '\n', '    /**\n', '     * @dev Set new wallet\n', '     */\n', '    function changeWallet(address _newWallet) public onlyOwner {\n', '        require(_newWallet != address(0));\n', '        wallet = _newWallet;\n', '    }\n', '\n', '    /**\n', '     * @dev Add/Remove to whitelist array of addresses based on boolean status\n', '     */\n', '    function updateWhitelist(address[] addresses, bool status) public onlyOwner {\n', '        for (uint256 i = 0; i < addresses.length; i++) {\n', '            address contributorAddress = addresses[i];\n', '            whitelist[contributorAddress] = status;\n', '            emit WhitelistUpdate(contributorAddress, status);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Check that address is exist in whitelist\n', '     */\n', '    function isWhitelisted(address contributor) public constant returns (bool) {\n', '        return whitelist[contributor];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n', '        return token.mint(_to, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Return ownership to previous owner\n', '     */\n', '    function returnOwnership() onlyOwner public returns (bool) {\n', '        token.transferOwnership(owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Finish Crowdsale\n', '     */\n', '    function finish(address _bountyFund, address _advisorsFund, address _ecosystemFund, address _teamFund) public onlyOwner {\n', '        require(_bountyFund != address(0));\n', '        require(_advisorsFund != address(0));\n', '        require(_ecosystemFund != address(0));\n', '        require(_teamFund != address(0));\n', '\n', '        emit Finalized();\n', '\n', '        // unsold tokens to ecosystem (perhaps further they will be burnt)\n', '        uint256 unsoldTokens = tokensForSale - token.totalSupply();\n', '        if (unsoldTokens > 0) {\n', '            tokensForEcosystem = tokensForEcosystem + unsoldTokens;\n', '        }\n', '\n', '        // distribute\n', '        token.mint(_bountyFund,tokensForBounty);\n', '        token.mint(_advisorsFund,tokensForAdvisors);\n', '        token.mint(_ecosystemFund,tokensForEcosystem);\n', '        token.mint(_teamFund,tokensForTeam);\n', '\n', '        // finish\n', '        token.finishMinting();\n', '\n', '        // freeze team tokens\n', '        token.setTeamAddress(_teamFund);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'interface GACR {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function mint(address _to, uint256 _amount) external returns (bool);\n', '    function finishMinting() external returns (bool);\n', '    function totalSupply() external view returns (uint256);\n', '    function setTeamAddress(address _teamFund) external;\n', '    function transferOwnership(address newOwner) external;\n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // ICO stage\n', '    enum CrowdsaleStage { PreICO, ICO }\n', "    CrowdsaleStage public stage = CrowdsaleStage.PreICO; // By default it's Pre Sale\n", '\n', '    // Token distribution\n', '    uint256 public constant maxTokens           = 50000000*1e18;    // max of GACR tokens\n', '    uint256 public constant tokensForSale       = 28500000*1e18;    // 57%\n', '    uint256 public constant tokensForBounty     = 1500000*1e18;     // 3%\n', '    uint256 public constant tokensForAdvisors   = 3000000*1e18;     // 6%\n', '    uint256 public constant tokensForTeam       = 9000000*1e18;     // 18%\n', '    uint256 public tokensForEcosystem           = 8000000*1e18;     // 16%\n', '\n', '    // Start & End time of Crowdsale\n', '    uint256 startTime   = 1522494000;   // 2018-03-31T11:00:00\n', '    uint256 endTime     = 1539169200;   // 2018-10-10T11:00:00\n', '\n', '    // The token being sold\n', '    GACR public token;\n', '\n', '    // Address where funds are collected\n', '    address public wallet;\n', '\n', '    // How many token units a buyer gets per wei\n', '    uint256 public rate;\n', '\n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '\n', '    // Limit for total contributions\n', '    uint256 public cap;\n', '\n', '    // KYC for ICO\n', '    mapping(address => bool) public whitelist;\n', '\n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @dev Event for whitelist update\n', '     * @param purchaser who add to whitelist\n', '     * @param status of purchased for whitelist\n', '     */\n', '    event WhitelistUpdate(address indexed purchaser, bool status);\n', '\n', '    /**\n', '     * @dev Event for crowdsale finalize\n', '     */\n', '    event Finalized();\n', '\n', '    /**\n', '     * @param _cap ether cap for Crowdsale\n', '     * @param _rate Number of token units a buyer gets per wei\n', '     * @param _wallet Address where collected funds will be forwarded to\n', '     */\n', '    constructor(uint256 _cap, uint256 _rate, address _wallet, address _token) public {\n', '        require(_cap > 0);\n', '        require(_rate > 0);\n', '        require(_wallet != address(0));\n', '\n', '        cap = _cap;\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '        token = GACR(_token);\n', '    }\n', '\n', '    /**\n', '     * @dev Check that sale is on\n', '     */\n', '    modifier saleIsOn() {\n', '        require(now > startTime && now < endTime);\n', '        _;\n', '    }\n', '\n', '    //note: only for test\n', '    //function setNowTime(uint value) public onlyOwner {\n', '    //    require(value != 0);\n', '    //    _nowTime = value;\n', '    //}\n', '\n', '    /**\n', '     * @dev Buy tokens\n', '     */\n', '    function buyTokens(address _beneficiary) saleIsOn public payable {\n', '        uint256 _weiAmount = msg.value;\n', '\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '        require(weiRaised.add(_weiAmount) <= cap);\n', '\n', '        require(stage==CrowdsaleStage.PreICO ||\n', '               (stage==CrowdsaleStage.ICO && isWhitelisted(_beneficiary)));\n', '\n', '        // calculate token amount to be created\n', '        uint256 _tokenAmount = _weiAmount.mul(rate);\n', '\n', '        // bonus calculation\n', '        uint256 bonusTokens = 0;\n', '        if (stage == CrowdsaleStage.PreICO) {\n', '            if (_tokenAmount >= 50e18 && _tokenAmount < 3000e18) {\n', '                bonusTokens = _tokenAmount.mul(23).div(100);\n', '            } else if (_tokenAmount >= 3000e18 && _tokenAmount < 15000e18) {\n', '                bonusTokens = _tokenAmount.mul(27).div(100);\n', '            } else if (_tokenAmount >= 15000e18 && _tokenAmount < 30000e18) {\n', '                bonusTokens = _tokenAmount.mul(30).div(100);\n', '            } else if (_tokenAmount >= 30000e18) {\n', '                bonusTokens = _tokenAmount.mul(35).div(100);\n', '            }\n', '        } else if (stage == CrowdsaleStage.ICO) {\n', '            uint256 _nowTime = now;\n', '\n', '            if (_nowTime >= 1531486800 && _nowTime < 1532696400) {\n', '                bonusTokens = _tokenAmount.mul(18).div(100);\n', '            } else if (_nowTime >= 1532696400 && _nowTime < 1533906000) {\n', '                bonusTokens = _tokenAmount.mul(15).div(100);\n', '            } else if (_nowTime >= 1533906000 && _nowTime < 1535115600) {\n', '                bonusTokens = _tokenAmount.mul(12).div(100);\n', '            } else if (_nowTime >= 1535115600 && _nowTime < 1536325200) {\n', '                bonusTokens = _tokenAmount.mul(9).div(100);\n', '            } else if (_nowTime >= 1536325200 && _nowTime < 1537534800) {\n', '                bonusTokens = _tokenAmount.mul(6).div(100);\n', '            } else if (_nowTime >= 1537534800 && _nowTime < endTime) {\n', '                bonusTokens = _tokenAmount.mul(3).div(100);\n', '            }\n', '        }\n', '        _tokenAmount += bonusTokens;\n', '\n', '        // check limit for sale\n', '        require(tokensForSale >= (token.totalSupply() + _tokenAmount));\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(_weiAmount);\n', '        token.mint(_beneficiary, _tokenAmount);\n', '\n', '        emit TokenPurchase(msg.sender, _beneficiary, _weiAmount, _tokenAmount);\n', '\n', '        wallet.transfer(_weiAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Payable function\n', '     */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Change Crowdsale Stage.\n', '     * Options: PreICO, ICO\n', '     */\n', '    function setCrowdsaleStage(uint value) public onlyOwner {\n', '\n', '        CrowdsaleStage _stage;\n', '\n', '        if (uint256(CrowdsaleStage.PreICO) == value) {\n', '            _stage = CrowdsaleStage.PreICO;\n', '        } else if (uint256(CrowdsaleStage.ICO) == value) {\n', '            _stage = CrowdsaleStage.ICO;\n', '        }\n', '\n', '        stage = _stage;\n', '    }\n', '\n', '    /**\n', '     * @dev Set new rate (protection from strong volatility)\n', '     */\n', '    function setNewRate(uint _newRate) public onlyOwner {\n', '        require(_newRate > 0);\n', '        rate = _newRate;\n', '    }\n', '\n', '    /**\n', '     * @dev Set hard cap (protection from strong volatility)\n', '     */\n', '    function setHardCap(uint256 _newCap) public onlyOwner {\n', '        require(_newCap > 0);\n', '        cap = _newCap;\n', '    }\n', '\n', '    /**\n', '     * @dev Set new wallet\n', '     */\n', '    function changeWallet(address _newWallet) public onlyOwner {\n', '        require(_newWallet != address(0));\n', '        wallet = _newWallet;\n', '    }\n', '\n', '    /**\n', '     * @dev Add/Remove to whitelist array of addresses based on boolean status\n', '     */\n', '    function updateWhitelist(address[] addresses, bool status) public onlyOwner {\n', '        for (uint256 i = 0; i < addresses.length; i++) {\n', '            address contributorAddress = addresses[i];\n', '            whitelist[contributorAddress] = status;\n', '            emit WhitelistUpdate(contributorAddress, status);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Check that address is exist in whitelist\n', '     */\n', '    function isWhitelisted(address contributor) public constant returns (bool) {\n', '        return whitelist[contributor];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n', '        return token.mint(_to, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Return ownership to previous owner\n', '     */\n', '    function returnOwnership() onlyOwner public returns (bool) {\n', '        token.transferOwnership(owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Finish Crowdsale\n', '     */\n', '    function finish(address _bountyFund, address _advisorsFund, address _ecosystemFund, address _teamFund) public onlyOwner {\n', '        require(_bountyFund != address(0));\n', '        require(_advisorsFund != address(0));\n', '        require(_ecosystemFund != address(0));\n', '        require(_teamFund != address(0));\n', '\n', '        emit Finalized();\n', '\n', '        // unsold tokens to ecosystem (perhaps further they will be burnt)\n', '        uint256 unsoldTokens = tokensForSale - token.totalSupply();\n', '        if (unsoldTokens > 0) {\n', '            tokensForEcosystem = tokensForEcosystem + unsoldTokens;\n', '        }\n', '\n', '        // distribute\n', '        token.mint(_bountyFund,tokensForBounty);\n', '        token.mint(_advisorsFund,tokensForAdvisors);\n', '        token.mint(_ecosystemFund,tokensForEcosystem);\n', '        token.mint(_teamFund,tokensForTeam);\n', '\n', '        // finish\n', '        token.finishMinting();\n', '\n', '        // freeze team tokens\n', '        token.setTeamAddress(_teamFund);\n', '    }\n', '}']
