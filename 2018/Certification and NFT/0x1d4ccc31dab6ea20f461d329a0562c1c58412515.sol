['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title TalaoMarketplace\n', ' * @dev This contract is allowing users to buy or sell Talao tokens at a price set by the owner\n', ' * @author Blockchain Partner\n', ' */\n', 'contract TalaoMarketplace is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  TalaoToken public token;\n', '\n', '  struct MarketplaceData {\n', '    uint buyPrice;\n', '    uint sellPrice;\n', '    uint unitPrice;\n', '  }\n', '\n', '  MarketplaceData public marketplace;\n', '\n', '  event SellingPrice(uint sellingPrice);\n', '  event TalaoBought(address buyer, uint amount, uint price, uint unitPrice);\n', '  event TalaoSold(address seller, uint amount, uint price, uint unitPrice);\n', '\n', '  /**\n', '  * @dev Constructor of the marketplace pointing to the TALAO token address\n', '  * @param talao the talao token address\n', '  **/\n', '  constructor(address talao)\n', '      public\n', '  {\n', '      token = TalaoToken(talao);\n', '  }\n', '\n', '  /**\n', '  * @dev Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n', '  * @param newSellPrice price the users can sell to the contract\n', '  * @param newBuyPrice price users can buy from the contract\n', '  * @param newUnitPrice to manage decimal issue 0,35 = 35 /100 (100 is unit)\n', '  */\n', '  function setPrices(uint256 newSellPrice, uint256 newBuyPrice, uint256 newUnitPrice)\n', '      public\n', '      onlyOwner\n', '  {\n', '      require (newSellPrice > 0 && newBuyPrice > 0 && newUnitPrice > 0, "wrong inputs");\n', '      marketplace.sellPrice = newSellPrice;\n', '      marketplace.buyPrice = newBuyPrice;\n', '      marketplace.unitPrice = newUnitPrice;\n', '  }\n', '\n', '  /**\n', '  * @dev Allow anyone to buy tokens against ether, depending on the buyPrice set by the contract owner.\n', '  * @return amount the amount of tokens bought\n', '  **/\n', '  function buy()\n', '      public\n', '      payable\n', '      returns (uint amount)\n', '  {\n', '      amount = msg.value.mul(marketplace.unitPrice).div(marketplace.buyPrice);\n', '      token.transfer(msg.sender, amount);\n', '      emit TalaoBought(msg.sender, amount, marketplace.buyPrice, marketplace.unitPrice);\n', '      return amount;\n', '  }\n', '\n', '  /**\n', '  * @dev Allow anyone to sell tokens for ether, depending on the sellPrice set by the contract owner.\n', '  * @param amount the number of tokens to be sold\n', '  * @return revenue ethers sent in return\n', '  **/\n', '  function sell(uint amount)\n', '      public\n', '      returns (uint revenue)\n', '  {\n', '      require(token.balanceOf(msg.sender) >= amount, "sender has not enough tokens");\n', '      token.transferFrom(msg.sender, this, amount);\n', '      revenue = amount.mul(marketplace.sellPrice).div(marketplace.unitPrice);\n', '      msg.sender.transfer(revenue);\n', '      emit TalaoSold(msg.sender, amount, marketplace.sellPrice, marketplace.unitPrice);\n', '      return revenue;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the owner to withdraw ethers from the contract.\n', '   * @param ethers quantity of ethers to be withdrawn\n', '   * @return true if withdrawal successful ; false otherwise\n', '   */\n', '  function withdrawEther(uint256 ethers)\n', '      public\n', '      onlyOwner\n', '  {\n', '      if (this.balance >= ethers) {\n', '          msg.sender.transfer(ethers);\n', '      }\n', '  }\n', '\n', '  /**\n', '   * @dev Allow the owner to withdraw tokens from the contract.\n', '   * @param tokens quantity of tokens to be withdrawn\n', '   */\n', '  function withdrawTalao(uint256 tokens)\n', '      public\n', '      onlyOwner\n', '  {\n', '      token.transfer(msg.sender, tokens);\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Fallback function ; only owner can send ether.\n', '  **/\n', '  function ()\n', '      public\n', '      payable\n', '      onlyOwner\n', '  {\n', '\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '    require(_releaseTime > now);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   * @dev Removed original require that amount released was > 0 ; releasing 0 is fine\n', '   */\n', '  function release() public {\n', '    require(now >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(this);\n', '\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' * @notice Talao token transfer function cannot fail thus there&#39;s no need for revocation.\n', ' */\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(uint256 amount);\n', '  event Revoked();\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '\n', '  bool public revocable;\n', '\n', '  mapping (address => uint256) public released;\n', '  mapping (address => bool) public revoked;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _revocable whether the vesting is revocable or not\n', '   */\n', '  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\n', '    require(_beneficiary != address(0));\n', '    require(_cliff <= _duration);\n', '\n', '    beneficiary = _beneficiary;\n', '    revocable = _revocable;\n', '    duration = _duration;\n', '    cliff = _start.add(_cliff);\n', '    start = _start;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @dev Removed original require that amount released was > 0 ; releasing 0 is fine\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function release(ERC20Basic token) public {\n', '    uint256 unreleased = releasableAmount(token);\n', '\n', '    released[token] = released[token].add(unreleased);\n', '\n', '    token.safeTransfer(beneficiary, unreleased);\n', '\n', '    Released(unreleased);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '   * remain in the contract, the rest are returned to the owner.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function revoke(ERC20Basic token) public onlyOwner {\n', '    require(revocable);\n', '    require(!revoked[token]);\n', '\n', '    uint256 balance = token.balanceOf(this);\n', '\n', '    uint256 unreleased = releasableAmount(token);\n', '    uint256 refund = balance.sub(unreleased);\n', '\n', '    revoked[token] = true;\n', '\n', '    token.safeTransfer(owner, refund);\n', '\n', '    Revoked();\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested but hasn&#39;t been released yet.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function releasableAmount(ERC20Basic token) public view returns (uint256) {\n', '    return vestedAmount(token).sub(released[token]);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function vestedAmount(ERC20Basic token) public view returns (uint256) {\n', '    uint256 currentBalance = token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released[token]);\n', '\n', '    if (now < cliff) {\n', '      return 0;\n', '    } else if (now >= start.add(duration) || revoked[token]) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(now.sub(start)).div(duration);\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function Crowdsale(uint256 _rate, uint256 _startTime, uint256 _endTime, address _wallet) public {\n', '    require(_rate > 0);\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  // removed view to be overriden\n', '  function validPurchase() internal returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title RefundableCrowdsale\n', ' * @dev Extension of Crowdsale contract that adds a funding goal, and\n', ' * the possibility of users getting a refund if goal is not met.\n', ' * Uses a RefundVault as the crowdsale&#39;s vault.\n', ' */\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault public vault;\n', '\n', '  function RefundableCrowdsale(uint256 _goal) public {\n', '    require(_goal > 0);\n', '    vault = new RefundVault(wallet);\n', '    goal = _goal;\n', '  }\n', '\n', '  // We&#39;re overriding the fund forwarding from Crowdsale.\n', '  // In addition to sending the funds, we want to call\n', '  // the RefundVault deposit function\n', '  function forwardFunds() internal {\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '\n', '  // if crowdsale is unsuccessful, investors can claim refunds here\n', '  function claimRefund() public {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  // vault finalization task, called when owner calls finalize()\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '\n', '    super.finalization();\n', '  }\n', '\n', '  function goalReached() public view returns (bool) {\n', '    return weiRaised >= goal;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Extension of Crowdsale with a max amount of funds raised\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  // removed view to be overriden\n', '  function validPurchase() internal returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ProgressiveIndividualCappedCrowdsale\n', ' * @dev Extension of Crowdsale with a progressive individual cap\n', ' * @dev This contract is not made for crowdsale superior to 256 * TIME_PERIOD_IN_SEC\n', ' * @author Request.network ; some modifications by Blockchain Partner\n', ' */\n', 'contract ProgressiveIndividualCappedCrowdsale is RefundableCrowdsale, CappedCrowdsale {\n', '\n', '    uint public startGeneralSale;\n', '    uint public constant TIME_PERIOD_IN_SEC = 1 days;\n', '    uint public constant minimumParticipation = 10 finney;\n', '    uint public constant GAS_LIMIT_IN_WEI = 5E10 wei; // limit gas price -50 Gwei wales stopper\n', '    uint256 public baseEthCapPerAddress;\n', '\n', '    mapping(address=>uint) public participated;\n', '\n', '    function ProgressiveIndividualCappedCrowdsale(uint _baseEthCapPerAddress, uint _startGeneralSale)\n', '        public\n', '    {\n', '        baseEthCapPerAddress = _baseEthCapPerAddress;\n', '        startGeneralSale = _startGeneralSale;\n', '    }\n', '\n', '    /**\n', '     * @dev setting cap before the general sale starts\n', '     * @param _newBaseCap the new cap\n', '     */\n', '    function setBaseCap(uint _newBaseCap)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(now < startGeneralSale);\n', '        baseEthCapPerAddress = _newBaseCap;\n', '    }\n', '\n', '    /**\n', '     * @dev overriding CappedCrowdsale#validPurchase to add an individual cap\n', '     * @return true if investors can buy at the moment\n', '     */\n', '    function validPurchase()\n', '        internal\n', '        returns(bool)\n', '    {\n', '        bool gasCheck = tx.gasprice <= GAS_LIMIT_IN_WEI;\n', '        uint ethCapPerAddress = getCurrentEthCapPerAddress();\n', '        participated[msg.sender] = participated[msg.sender].add(msg.value);\n', '        bool enough = participated[msg.sender] >= minimumParticipation;\n', '        return participated[msg.sender] <= ethCapPerAddress && enough && gasCheck;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the current individual cap.\n', '     * @dev This amount increase everyday in an exponential way. Day 1: base cap, Day 2: 2 * base cap, Day 3: 4 * base cap ...\n', '     * @return individual cap in wei\n', '     */\n', '    function getCurrentEthCapPerAddress()\n', '        public\n', '        constant\n', '        returns(uint)\n', '    {\n', '        if (block.timestamp < startGeneralSale) return 0;\n', '        uint timeSinceStartInSec = block.timestamp.sub(startGeneralSale);\n', '        uint currentPeriod = timeSinceStartInSec.div(TIME_PERIOD_IN_SEC).add(1);\n', '\n', '        // for currentPeriod > 256 will always return 0\n', '        return (2 ** currentPeriod.sub(1)).mul(baseEthCapPerAddress);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', '/**\n', ' * @title TalaoToken\n', ' * @dev This contract details the TALAO token and allows freelancers to create/revoke vault access, appoint agents.\n', ' * @author Blockchain Partner\n', ' */\n', 'contract TalaoToken is MintableToken {\n', '  using SafeMath for uint256;\n', '\n', '  // token details\n', '  string public constant name = "Talao";\n', '  string public constant symbol = "TALAO";\n', '  uint8 public constant decimals = 18;\n', '\n', '  // the talao marketplace address\n', '  address public marketplace;\n', '\n', '  // talao tokens needed to create a vault\n', '  uint256 public vaultDeposit;\n', '  // sum of all talao tokens desposited\n', '  uint256 public totalDeposit;\n', '\n', '  struct FreelanceData {\n', '      // access price to the talent vault\n', '      uint256 accessPrice;\n', '      // address of appointed talent agent\n', '      address appointedAgent;\n', '      // how much the talent is sharing with its agent\n', '      uint sharingPlan;\n', '      // how much is the talent deposit\n', '      uint256 userDeposit;\n', '  }\n', '\n', '  // structure that defines a client access to a vault\n', '  struct ClientAccess {\n', '      // is he allowed to access the vault\n', '      bool clientAgreement;\n', '      // the block number when access was granted\n', '      uint clientDate;\n', '  }\n', '\n', '  // Vault allowance client x freelancer\n', '  mapping (address => mapping (address => ClientAccess)) public accessAllowance;\n', '\n', '  // Freelance data is public\n', '  mapping (address=>FreelanceData) public data;\n', '\n', '  enum VaultStatus {Closed, Created, PriceTooHigh, NotEnoughTokensDeposited, AgentRemoved, NewAgent, NewAccess, WrongAccessPrice}\n', '\n', '  // Those event notifies UI about vaults action with vault status\n', '  // Closed Vault access closed\n', '  // Created Vault access created\n', '  // PriceTooHigh Vault access price too high\n', '  // NotEnoughTokensDeposited not enough tokens to pay deposit\n', '  // AgentRemoved agent removed\n', '  // NewAgent new agent appointed\n', '  // NewAccess vault access granted to client\n', '  // WrongAccessPrice client not enough token to pay vault access\n', '  event Vault(address indexed client, address indexed freelance, VaultStatus status);\n', '\n', '  modifier onlyMintingFinished()\n', '  {\n', '      require(mintingFinished == true, "minting has not finished");\n', '      _;\n', '  }\n', '\n', '  /**\n', '  * @dev Let the owner set the marketplace address once minting is over\n', '  *      Possible to do it more than once to ensure maintainability\n', '  * @param theMarketplace the marketplace address\n', '  **/\n', '  function setMarketplace(address theMarketplace)\n', '      public\n', '      onlyMintingFinished\n', '      onlyOwner\n', '  {\n', '      marketplace = theMarketplace;\n', '  }\n', '\n', '  /**\n', '  * @dev Same ERC20 behavior, but require the token to be unlocked\n', '  * @param _spender address The address that will spend the funds.\n', '  * @param _value uint256 The amount of tokens to be spent.\n', '  **/\n', '  function approve(address _spender, uint256 _value)\n', '      public\n', '      onlyMintingFinished\n', '      returns (bool)\n', '  {\n', '      return super.approve(_spender, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Same ERC20 behavior, but require the token to be unlocked and sells some tokens to refill ether balance up to minBalanceForAccounts\n', '  * @param _to address The address to transfer to.\n', '  * @param _value uint256 The amount to be transferred.\n', '  **/\n', '  function transfer(address _to, uint256 _value)\n', '      public\n', '      onlyMintingFinished\n', '      returns (bool result)\n', '  {\n', '      return super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Same ERC20 behavior, but require the token to be unlocked\n', '  * @param _from address The address which you want to send tokens from.\n', '  * @param _to address The address which you want to transfer to.\n', '  * @param _value uint256 the amount of tokens to be transferred.\n', '  **/\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '      public\n', '      onlyMintingFinished\n', '      returns (bool)\n', '  {\n', '      return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Set allowance for other address and notify\n', '   *      Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '   * @param _spender The address authorized to spend\n', '   * @param _value the max amount they can spend\n', '   * @param _extraData some extra information to send to the approved contract\n', '   */\n', '  function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '      public\n', '      onlyMintingFinished\n', '      returns (bool)\n', '  {\n', '      tokenRecipient spender = tokenRecipient(_spender);\n', '      if (approve(_spender, _value)) {\n', '          spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '          return true;\n', '      }\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the owner to withdraw ethers from the contract.\n', '   * @param ethers quantity in weis of ethers to be withdrawn\n', '   * @return true if withdrawal successful ; false otherwise\n', '   */\n', '  function withdrawEther(uint256 ethers)\n', '      public\n', '      onlyOwner\n', '  {\n', '      msg.sender.transfer(ethers);\n', '  }\n', '\n', '  /**\n', '   * @dev Allow the owner to withdraw tokens from the contract without taking tokens from deposits.\n', '   * @param tokens quantity of tokens to be withdrawn\n', '   */\n', '  function withdrawTalao(uint256 tokens)\n', '      public\n', '      onlyOwner\n', '  {\n', '      require(balanceOf(this).sub(totalDeposit) >= tokens, "too much tokens asked");\n', '      _transfer(this, msg.sender, tokens);\n', '  }\n', '\n', '  /******************************************/\n', '  /*      vault functions start here        */\n', '  /******************************************/\n', '\n', '  /**\n', '  * @dev Allows anyone to create a vault access.\n', '  *      Vault deposit is transferred to token contract and sum is stored in totalDeposit\n', '  *      Price must be lower than Vault deposit\n', '  * @param price to pay to access certificate vault\n', '  */\n', '  function createVaultAccess (uint256 price)\n', '      public\n', '      onlyMintingFinished\n', '  {\n', '      require(accessAllowance[msg.sender][msg.sender].clientAgreement==false, "vault already created");\n', '      require(price<=vaultDeposit, "price asked is too high");\n', '      require(balanceOf(msg.sender)>vaultDeposit, "user has not enough tokens to send deposit");\n', '      data[msg.sender].accessPrice=price;\n', '      super.transfer(this, vaultDeposit);\n', '      totalDeposit = totalDeposit.add(vaultDeposit);\n', '      data[msg.sender].userDeposit=vaultDeposit;\n', '      data[msg.sender].sharingPlan=100;\n', '      accessAllowance[msg.sender][msg.sender].clientAgreement=true;\n', '      emit Vault(msg.sender, msg.sender, VaultStatus.Created);\n', '  }\n', '\n', '  /**\n', '  * @dev Closes a vault access, deposit is sent back to freelance wallet\n', '  *      Total deposit in token contract is reduced by user deposit\n', '  */\n', '  function closeVaultAccess()\n', '      public\n', '      onlyMintingFinished\n', '  {\n', '      require(accessAllowance[msg.sender][msg.sender].clientAgreement==true, "vault has not been created");\n', '      require(_transfer(this, msg.sender, data[msg.sender].userDeposit), "token deposit transfer failed");\n', '      accessAllowance[msg.sender][msg.sender].clientAgreement=false;\n', '      totalDeposit=totalDeposit.sub(data[msg.sender].userDeposit);\n', '      data[msg.sender].sharingPlan=0;\n', '      emit Vault(msg.sender, msg.sender, VaultStatus.Closed);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal transfer function used to transfer tokens from an address to another without prior authorization.\n', '  *      Only used in these situations:\n', '  *           * Send tokens from the contract to a token buyer (buy() function)\n', '  *           * Send tokens from the contract to the owner in order to withdraw tokens (withdrawTalao(tokens) function)\n', '  *           * Send tokens from the contract to a user closing its vault thus claiming its deposit back (closeVaultAccess() function)\n', '  * @param _from address The address which you want to send tokens from.\n', '  * @param _to address The address which you want to transfer to.\n', '  * @param _value uint256 the amount of tokens to be transferred.\n', '  * @return true if transfer is successful ; should throw otherwise\n', '  */\n', '  function _transfer(address _from, address _to, uint _value)\n', '      internal\n', '      returns (bool)\n', '  {\n', '      require(_to != 0x0, "destination cannot be 0x0");\n', '      require(balances[_from] >= _value, "not enough tokens in sender wallet");\n', '\n', '      balances[_from] = balances[_from].sub(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '      emit Transfer(_from, _to, _value);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Appoint an agent or a new agent\n', '  *      Former agent is replaced by new agent\n', '  *      Agent will receive token on behalf of the freelance talent\n', '  * @param newagent agent to appoint\n', '  * @param newplan sharing plan is %, 100 means 100% for freelance\n', '  */\n', '  function agentApproval (address newagent, uint newplan)\n', '      public\n', '      onlyMintingFinished\n', '  {\n', '      require(newplan>=0&&newplan<=100, "plan must be between 0 and 100");\n', '      require(accessAllowance[msg.sender][msg.sender].clientAgreement==true, "vault has not been created");\n', '      emit Vault(data[msg.sender].appointedAgent, msg.sender, VaultStatus.AgentRemoved);\n', '      data[msg.sender].appointedAgent=newagent;\n', '      data[msg.sender].sharingPlan=newplan;\n', '      emit Vault(newagent, msg.sender, VaultStatus.NewAgent);\n', '  }\n', '\n', '  /**\n', '   * @dev Set the quantity of tokens necessary for vault access creation\n', '   * @param newdeposit deposit (in tokens) for vault access creation\n', '   */\n', '  function setVaultDeposit (uint newdeposit)\n', '      public\n', '      onlyOwner\n', '  {\n', '      vaultDeposit = newdeposit;\n', '  }\n', '\n', '  /**\n', '  * @dev Buy unlimited access to a freelancer vault\n', '  *      Vault access price is transfered from client to agent or freelance depending on the sharing plan\n', '  *      Allowance is given to client and one stores block.number for future use\n', '  * @param freelance the address of the talent\n', '  * @return true if access is granted ; false if not\n', '  */\n', '  function getVaultAccess (address freelance)\n', '      public\n', '      onlyMintingFinished\n', '      returns (bool)\n', '  {\n', '      require(accessAllowance[freelance][freelance].clientAgreement==true, "vault does not exist");\n', '      require(accessAllowance[msg.sender][freelance].clientAgreement!=true, "access was already granted");\n', '      require(balanceOf(msg.sender)>data[freelance].accessPrice, "user has not enough tokens to get access to vault");\n', '\n', '      uint256 freelance_share = data[freelance].accessPrice.mul(data[freelance].sharingPlan).div(100);\n', '      uint256 agent_share = data[freelance].accessPrice.sub(freelance_share);\n', '      if(freelance_share>0) super.transfer(freelance, freelance_share);\n', '      if(agent_share>0) super.transfer(data[freelance].appointedAgent, agent_share);\n', '      accessAllowance[msg.sender][freelance].clientAgreement=true;\n', '      accessAllowance[msg.sender][freelance].clientDate=block.number;\n', '      emit Vault(msg.sender, freelance, VaultStatus.NewAccess);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Simple getter to retrieve talent agent\n', '  * @param freelance talent address\n', '  * @return address of the agent\n', '  **/\n', '  function getFreelanceAgent(address freelance)\n', '      public\n', '      view\n', '      returns (address)\n', '  {\n', '      return data[freelance].appointedAgent;\n', '  }\n', '\n', '  /**\n', '  * @dev Simple getter to check if user has access to a freelance vault\n', '  * @param freelance talent address\n', '  * @param user user address\n', '  * @return true if access granted or false if not\n', '  **/\n', '  function hasVaultAccess(address freelance, address user)\n', '      public\n', '      view\n', '      returns (bool)\n', '  {\n', '      return ((accessAllowance[user][freelance].clientAgreement) || (data[freelance].appointedAgent == user));\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title TalaoMarketplace\n', ' * @dev This contract is allowing users to buy or sell Talao tokens at a price set by the owner\n', ' * @author Blockchain Partner\n', ' */\n', 'contract TalaoMarketplace is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  TalaoToken public token;\n', '\n', '  struct MarketplaceData {\n', '    uint buyPrice;\n', '    uint sellPrice;\n', '    uint unitPrice;\n', '  }\n', '\n', '  MarketplaceData public marketplace;\n', '\n', '  event SellingPrice(uint sellingPrice);\n', '  event TalaoBought(address buyer, uint amount, uint price, uint unitPrice);\n', '  event TalaoSold(address seller, uint amount, uint price, uint unitPrice);\n', '\n', '  /**\n', '  * @dev Constructor of the marketplace pointing to the TALAO token address\n', '  * @param talao the talao token address\n', '  **/\n', '  constructor(address talao)\n', '      public\n', '  {\n', '      token = TalaoToken(talao);\n', '  }\n', '\n', '  /**\n', '  * @dev Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n', '  * @param newSellPrice price the users can sell to the contract\n', '  * @param newBuyPrice price users can buy from the contract\n', '  * @param newUnitPrice to manage decimal issue 0,35 = 35 /100 (100 is unit)\n', '  */\n', '  function setPrices(uint256 newSellPrice, uint256 newBuyPrice, uint256 newUnitPrice)\n', '      public\n', '      onlyOwner\n', '  {\n', '      require (newSellPrice > 0 && newBuyPrice > 0 && newUnitPrice > 0, "wrong inputs");\n', '      marketplace.sellPrice = newSellPrice;\n', '      marketplace.buyPrice = newBuyPrice;\n', '      marketplace.unitPrice = newUnitPrice;\n', '  }\n', '\n', '  /**\n', '  * @dev Allow anyone to buy tokens against ether, depending on the buyPrice set by the contract owner.\n', '  * @return amount the amount of tokens bought\n', '  **/\n', '  function buy()\n', '      public\n', '      payable\n', '      returns (uint amount)\n', '  {\n', '      amount = msg.value.mul(marketplace.unitPrice).div(marketplace.buyPrice);\n', '      token.transfer(msg.sender, amount);\n', '      emit TalaoBought(msg.sender, amount, marketplace.buyPrice, marketplace.unitPrice);\n', '      return amount;\n', '  }\n', '\n', '  /**\n', '  * @dev Allow anyone to sell tokens for ether, depending on the sellPrice set by the contract owner.\n', '  * @param amount the number of tokens to be sold\n', '  * @return revenue ethers sent in return\n', '  **/\n', '  function sell(uint amount)\n', '      public\n', '      returns (uint revenue)\n', '  {\n', '      require(token.balanceOf(msg.sender) >= amount, "sender has not enough tokens");\n', '      token.transferFrom(msg.sender, this, amount);\n', '      revenue = amount.mul(marketplace.sellPrice).div(marketplace.unitPrice);\n', '      msg.sender.transfer(revenue);\n', '      emit TalaoSold(msg.sender, amount, marketplace.sellPrice, marketplace.unitPrice);\n', '      return revenue;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the owner to withdraw ethers from the contract.\n', '   * @param ethers quantity of ethers to be withdrawn\n', '   * @return true if withdrawal successful ; false otherwise\n', '   */\n', '  function withdrawEther(uint256 ethers)\n', '      public\n', '      onlyOwner\n', '  {\n', '      if (this.balance >= ethers) {\n', '          msg.sender.transfer(ethers);\n', '      }\n', '  }\n', '\n', '  /**\n', '   * @dev Allow the owner to withdraw tokens from the contract.\n', '   * @param tokens quantity of tokens to be withdrawn\n', '   */\n', '  function withdrawTalao(uint256 tokens)\n', '      public\n', '      onlyOwner\n', '  {\n', '      token.transfer(msg.sender, tokens);\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Fallback function ; only owner can send ether.\n', '  **/\n', '  function ()\n', '      public\n', '      payable\n', '      onlyOwner\n', '  {\n', '\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '    require(_releaseTime > now);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   * @dev Removed original require that amount released was > 0 ; releasing 0 is fine\n', '   */\n', '  function release() public {\n', '    require(now >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(this);\n', '\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', " * @notice Talao token transfer function cannot fail thus there's no need for revocation.\n", ' */\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(uint256 amount);\n', '  event Revoked();\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '\n', '  bool public revocable;\n', '\n', '  mapping (address => uint256) public released;\n', '  mapping (address => bool) public revoked;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _revocable whether the vesting is revocable or not\n', '   */\n', '  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\n', '    require(_beneficiary != address(0));\n', '    require(_cliff <= _duration);\n', '\n', '    beneficiary = _beneficiary;\n', '    revocable = _revocable;\n', '    duration = _duration;\n', '    cliff = _start.add(_cliff);\n', '    start = _start;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @dev Removed original require that amount released was > 0 ; releasing 0 is fine\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function release(ERC20Basic token) public {\n', '    uint256 unreleased = releasableAmount(token);\n', '\n', '    released[token] = released[token].add(unreleased);\n', '\n', '    token.safeTransfer(beneficiary, unreleased);\n', '\n', '    Released(unreleased);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '   * remain in the contract, the rest are returned to the owner.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function revoke(ERC20Basic token) public onlyOwner {\n', '    require(revocable);\n', '    require(!revoked[token]);\n', '\n', '    uint256 balance = token.balanceOf(this);\n', '\n', '    uint256 unreleased = releasableAmount(token);\n', '    uint256 refund = balance.sub(unreleased);\n', '\n', '    revoked[token] = true;\n', '\n', '    token.safeTransfer(owner, refund);\n', '\n', '    Revoked();\n', '  }\n', '\n', '  /**\n', "   * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '   * @param token ERC20 token which is being vested\n', '   */\n', '  function releasableAmount(ERC20Basic token) public view returns (uint256) {\n', '    return vestedAmount(token).sub(released[token]);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function vestedAmount(ERC20Basic token) public view returns (uint256) {\n', '    uint256 currentBalance = token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released[token]);\n', '\n', '    if (now < cliff) {\n', '      return 0;\n', '    } else if (now >= start.add(duration) || revoked[token]) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(now.sub(start)).div(duration);\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function Crowdsale(uint256 _rate, uint256 _startTime, uint256 _endTime, address _wallet) public {\n', '    require(_rate > 0);\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  // removed view to be overriden\n', '  function validPurchase() internal returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title RefundableCrowdsale\n', ' * @dev Extension of Crowdsale contract that adds a funding goal, and\n', ' * the possibility of users getting a refund if goal is not met.\n', " * Uses a RefundVault as the crowdsale's vault.\n", ' */\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault public vault;\n', '\n', '  function RefundableCrowdsale(uint256 _goal) public {\n', '    require(_goal > 0);\n', '    vault = new RefundVault(wallet);\n', '    goal = _goal;\n', '  }\n', '\n', "  // We're overriding the fund forwarding from Crowdsale.\n", '  // In addition to sending the funds, we want to call\n', '  // the RefundVault deposit function\n', '  function forwardFunds() internal {\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '\n', '  // if crowdsale is unsuccessful, investors can claim refunds here\n', '  function claimRefund() public {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  // vault finalization task, called when owner calls finalize()\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '\n', '    super.finalization();\n', '  }\n', '\n', '  function goalReached() public view returns (bool) {\n', '    return weiRaised >= goal;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Extension of Crowdsale with a max amount of funds raised\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  // removed view to be overriden\n', '  function validPurchase() internal returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ProgressiveIndividualCappedCrowdsale\n', ' * @dev Extension of Crowdsale with a progressive individual cap\n', ' * @dev This contract is not made for crowdsale superior to 256 * TIME_PERIOD_IN_SEC\n', ' * @author Request.network ; some modifications by Blockchain Partner\n', ' */\n', 'contract ProgressiveIndividualCappedCrowdsale is RefundableCrowdsale, CappedCrowdsale {\n', '\n', '    uint public startGeneralSale;\n', '    uint public constant TIME_PERIOD_IN_SEC = 1 days;\n', '    uint public constant minimumParticipation = 10 finney;\n', '    uint public constant GAS_LIMIT_IN_WEI = 5E10 wei; // limit gas price -50 Gwei wales stopper\n', '    uint256 public baseEthCapPerAddress;\n', '\n', '    mapping(address=>uint) public participated;\n', '\n', '    function ProgressiveIndividualCappedCrowdsale(uint _baseEthCapPerAddress, uint _startGeneralSale)\n', '        public\n', '    {\n', '        baseEthCapPerAddress = _baseEthCapPerAddress;\n', '        startGeneralSale = _startGeneralSale;\n', '    }\n', '\n', '    /**\n', '     * @dev setting cap before the general sale starts\n', '     * @param _newBaseCap the new cap\n', '     */\n', '    function setBaseCap(uint _newBaseCap)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(now < startGeneralSale);\n', '        baseEthCapPerAddress = _newBaseCap;\n', '    }\n', '\n', '    /**\n', '     * @dev overriding CappedCrowdsale#validPurchase to add an individual cap\n', '     * @return true if investors can buy at the moment\n', '     */\n', '    function validPurchase()\n', '        internal\n', '        returns(bool)\n', '    {\n', '        bool gasCheck = tx.gasprice <= GAS_LIMIT_IN_WEI;\n', '        uint ethCapPerAddress = getCurrentEthCapPerAddress();\n', '        participated[msg.sender] = participated[msg.sender].add(msg.value);\n', '        bool enough = participated[msg.sender] >= minimumParticipation;\n', '        return participated[msg.sender] <= ethCapPerAddress && enough && gasCheck;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the current individual cap.\n', '     * @dev This amount increase everyday in an exponential way. Day 1: base cap, Day 2: 2 * base cap, Day 3: 4 * base cap ...\n', '     * @return individual cap in wei\n', '     */\n', '    function getCurrentEthCapPerAddress()\n', '        public\n', '        constant\n', '        returns(uint)\n', '    {\n', '        if (block.timestamp < startGeneralSale) return 0;\n', '        uint timeSinceStartInSec = block.timestamp.sub(startGeneralSale);\n', '        uint currentPeriod = timeSinceStartInSec.div(TIME_PERIOD_IN_SEC).add(1);\n', '\n', '        // for currentPeriod > 256 will always return 0\n', '        return (2 ** currentPeriod.sub(1)).mul(baseEthCapPerAddress);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', '/**\n', ' * @title TalaoToken\n', ' * @dev This contract details the TALAO token and allows freelancers to create/revoke vault access, appoint agents.\n', ' * @author Blockchain Partner\n', ' */\n', 'contract TalaoToken is MintableToken {\n', '  using SafeMath for uint256;\n', '\n', '  // token details\n', '  string public constant name = "Talao";\n', '  string public constant symbol = "TALAO";\n', '  uint8 public constant decimals = 18;\n', '\n', '  // the talao marketplace address\n', '  address public marketplace;\n', '\n', '  // talao tokens needed to create a vault\n', '  uint256 public vaultDeposit;\n', '  // sum of all talao tokens desposited\n', '  uint256 public totalDeposit;\n', '\n', '  struct FreelanceData {\n', '      // access price to the talent vault\n', '      uint256 accessPrice;\n', '      // address of appointed talent agent\n', '      address appointedAgent;\n', '      // how much the talent is sharing with its agent\n', '      uint sharingPlan;\n', '      // how much is the talent deposit\n', '      uint256 userDeposit;\n', '  }\n', '\n', '  // structure that defines a client access to a vault\n', '  struct ClientAccess {\n', '      // is he allowed to access the vault\n', '      bool clientAgreement;\n', '      // the block number when access was granted\n', '      uint clientDate;\n', '  }\n', '\n', '  // Vault allowance client x freelancer\n', '  mapping (address => mapping (address => ClientAccess)) public accessAllowance;\n', '\n', '  // Freelance data is public\n', '  mapping (address=>FreelanceData) public data;\n', '\n', '  enum VaultStatus {Closed, Created, PriceTooHigh, NotEnoughTokensDeposited, AgentRemoved, NewAgent, NewAccess, WrongAccessPrice}\n', '\n', '  // Those event notifies UI about vaults action with vault status\n', '  // Closed Vault access closed\n', '  // Created Vault access created\n', '  // PriceTooHigh Vault access price too high\n', '  // NotEnoughTokensDeposited not enough tokens to pay deposit\n', '  // AgentRemoved agent removed\n', '  // NewAgent new agent appointed\n', '  // NewAccess vault access granted to client\n', '  // WrongAccessPrice client not enough token to pay vault access\n', '  event Vault(address indexed client, address indexed freelance, VaultStatus status);\n', '\n', '  modifier onlyMintingFinished()\n', '  {\n', '      require(mintingFinished == true, "minting has not finished");\n', '      _;\n', '  }\n', '\n', '  /**\n', '  * @dev Let the owner set the marketplace address once minting is over\n', '  *      Possible to do it more than once to ensure maintainability\n', '  * @param theMarketplace the marketplace address\n', '  **/\n', '  function setMarketplace(address theMarketplace)\n', '      public\n', '      onlyMintingFinished\n', '      onlyOwner\n', '  {\n', '      marketplace = theMarketplace;\n', '  }\n', '\n', '  /**\n', '  * @dev Same ERC20 behavior, but require the token to be unlocked\n', '  * @param _spender address The address that will spend the funds.\n', '  * @param _value uint256 The amount of tokens to be spent.\n', '  **/\n', '  function approve(address _spender, uint256 _value)\n', '      public\n', '      onlyMintingFinished\n', '      returns (bool)\n', '  {\n', '      return super.approve(_spender, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Same ERC20 behavior, but require the token to be unlocked and sells some tokens to refill ether balance up to minBalanceForAccounts\n', '  * @param _to address The address to transfer to.\n', '  * @param _value uint256 The amount to be transferred.\n', '  **/\n', '  function transfer(address _to, uint256 _value)\n', '      public\n', '      onlyMintingFinished\n', '      returns (bool result)\n', '  {\n', '      return super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Same ERC20 behavior, but require the token to be unlocked\n', '  * @param _from address The address which you want to send tokens from.\n', '  * @param _to address The address which you want to transfer to.\n', '  * @param _value uint256 the amount of tokens to be transferred.\n', '  **/\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '      public\n', '      onlyMintingFinished\n', '      returns (bool)\n', '  {\n', '      return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Set allowance for other address and notify\n', '   *      Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '   * @param _spender The address authorized to spend\n', '   * @param _value the max amount they can spend\n', '   * @param _extraData some extra information to send to the approved contract\n', '   */\n', '  function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '      public\n', '      onlyMintingFinished\n', '      returns (bool)\n', '  {\n', '      tokenRecipient spender = tokenRecipient(_spender);\n', '      if (approve(_spender, _value)) {\n', '          spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '          return true;\n', '      }\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the owner to withdraw ethers from the contract.\n', '   * @param ethers quantity in weis of ethers to be withdrawn\n', '   * @return true if withdrawal successful ; false otherwise\n', '   */\n', '  function withdrawEther(uint256 ethers)\n', '      public\n', '      onlyOwner\n', '  {\n', '      msg.sender.transfer(ethers);\n', '  }\n', '\n', '  /**\n', '   * @dev Allow the owner to withdraw tokens from the contract without taking tokens from deposits.\n', '   * @param tokens quantity of tokens to be withdrawn\n', '   */\n', '  function withdrawTalao(uint256 tokens)\n', '      public\n', '      onlyOwner\n', '  {\n', '      require(balanceOf(this).sub(totalDeposit) >= tokens, "too much tokens asked");\n', '      _transfer(this, msg.sender, tokens);\n', '  }\n', '\n', '  /******************************************/\n', '  /*      vault functions start here        */\n', '  /******************************************/\n', '\n', '  /**\n', '  * @dev Allows anyone to create a vault access.\n', '  *      Vault deposit is transferred to token contract and sum is stored in totalDeposit\n', '  *      Price must be lower than Vault deposit\n', '  * @param price to pay to access certificate vault\n', '  */\n', '  function createVaultAccess (uint256 price)\n', '      public\n', '      onlyMintingFinished\n', '  {\n', '      require(accessAllowance[msg.sender][msg.sender].clientAgreement==false, "vault already created");\n', '      require(price<=vaultDeposit, "price asked is too high");\n', '      require(balanceOf(msg.sender)>vaultDeposit, "user has not enough tokens to send deposit");\n', '      data[msg.sender].accessPrice=price;\n', '      super.transfer(this, vaultDeposit);\n', '      totalDeposit = totalDeposit.add(vaultDeposit);\n', '      data[msg.sender].userDeposit=vaultDeposit;\n', '      data[msg.sender].sharingPlan=100;\n', '      accessAllowance[msg.sender][msg.sender].clientAgreement=true;\n', '      emit Vault(msg.sender, msg.sender, VaultStatus.Created);\n', '  }\n', '\n', '  /**\n', '  * @dev Closes a vault access, deposit is sent back to freelance wallet\n', '  *      Total deposit in token contract is reduced by user deposit\n', '  */\n', '  function closeVaultAccess()\n', '      public\n', '      onlyMintingFinished\n', '  {\n', '      require(accessAllowance[msg.sender][msg.sender].clientAgreement==true, "vault has not been created");\n', '      require(_transfer(this, msg.sender, data[msg.sender].userDeposit), "token deposit transfer failed");\n', '      accessAllowance[msg.sender][msg.sender].clientAgreement=false;\n', '      totalDeposit=totalDeposit.sub(data[msg.sender].userDeposit);\n', '      data[msg.sender].sharingPlan=0;\n', '      emit Vault(msg.sender, msg.sender, VaultStatus.Closed);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal transfer function used to transfer tokens from an address to another without prior authorization.\n', '  *      Only used in these situations:\n', '  *           * Send tokens from the contract to a token buyer (buy() function)\n', '  *           * Send tokens from the contract to the owner in order to withdraw tokens (withdrawTalao(tokens) function)\n', '  *           * Send tokens from the contract to a user closing its vault thus claiming its deposit back (closeVaultAccess() function)\n', '  * @param _from address The address which you want to send tokens from.\n', '  * @param _to address The address which you want to transfer to.\n', '  * @param _value uint256 the amount of tokens to be transferred.\n', '  * @return true if transfer is successful ; should throw otherwise\n', '  */\n', '  function _transfer(address _from, address _to, uint _value)\n', '      internal\n', '      returns (bool)\n', '  {\n', '      require(_to != 0x0, "destination cannot be 0x0");\n', '      require(balances[_from] >= _value, "not enough tokens in sender wallet");\n', '\n', '      balances[_from] = balances[_from].sub(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '      emit Transfer(_from, _to, _value);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Appoint an agent or a new agent\n', '  *      Former agent is replaced by new agent\n', '  *      Agent will receive token on behalf of the freelance talent\n', '  * @param newagent agent to appoint\n', '  * @param newplan sharing plan is %, 100 means 100% for freelance\n', '  */\n', '  function agentApproval (address newagent, uint newplan)\n', '      public\n', '      onlyMintingFinished\n', '  {\n', '      require(newplan>=0&&newplan<=100, "plan must be between 0 and 100");\n', '      require(accessAllowance[msg.sender][msg.sender].clientAgreement==true, "vault has not been created");\n', '      emit Vault(data[msg.sender].appointedAgent, msg.sender, VaultStatus.AgentRemoved);\n', '      data[msg.sender].appointedAgent=newagent;\n', '      data[msg.sender].sharingPlan=newplan;\n', '      emit Vault(newagent, msg.sender, VaultStatus.NewAgent);\n', '  }\n', '\n', '  /**\n', '   * @dev Set the quantity of tokens necessary for vault access creation\n', '   * @param newdeposit deposit (in tokens) for vault access creation\n', '   */\n', '  function setVaultDeposit (uint newdeposit)\n', '      public\n', '      onlyOwner\n', '  {\n', '      vaultDeposit = newdeposit;\n', '  }\n', '\n', '  /**\n', '  * @dev Buy unlimited access to a freelancer vault\n', '  *      Vault access price is transfered from client to agent or freelance depending on the sharing plan\n', '  *      Allowance is given to client and one stores block.number for future use\n', '  * @param freelance the address of the talent\n', '  * @return true if access is granted ; false if not\n', '  */\n', '  function getVaultAccess (address freelance)\n', '      public\n', '      onlyMintingFinished\n', '      returns (bool)\n', '  {\n', '      require(accessAllowance[freelance][freelance].clientAgreement==true, "vault does not exist");\n', '      require(accessAllowance[msg.sender][freelance].clientAgreement!=true, "access was already granted");\n', '      require(balanceOf(msg.sender)>data[freelance].accessPrice, "user has not enough tokens to get access to vault");\n', '\n', '      uint256 freelance_share = data[freelance].accessPrice.mul(data[freelance].sharingPlan).div(100);\n', '      uint256 agent_share = data[freelance].accessPrice.sub(freelance_share);\n', '      if(freelance_share>0) super.transfer(freelance, freelance_share);\n', '      if(agent_share>0) super.transfer(data[freelance].appointedAgent, agent_share);\n', '      accessAllowance[msg.sender][freelance].clientAgreement=true;\n', '      accessAllowance[msg.sender][freelance].clientDate=block.number;\n', '      emit Vault(msg.sender, freelance, VaultStatus.NewAccess);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Simple getter to retrieve talent agent\n', '  * @param freelance talent address\n', '  * @return address of the agent\n', '  **/\n', '  function getFreelanceAgent(address freelance)\n', '      public\n', '      view\n', '      returns (address)\n', '  {\n', '      return data[freelance].appointedAgent;\n', '  }\n', '\n', '  /**\n', '  * @dev Simple getter to check if user has access to a freelance vault\n', '  * @param freelance talent address\n', '  * @param user user address\n', '  * @return true if access granted or false if not\n', '  **/\n', '  function hasVaultAccess(address freelance, address user)\n', '      public\n', '      view\n', '      returns (bool)\n', '  {\n', '      return ((accessAllowance[user][freelance].clientAgreement) || (data[freelance].appointedAgent == user));\n', '  }\n', '\n', '}']
