['pragma solidity ^0.4.25;\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library Math {\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => bool) blockListed;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        \n', '        require(\n', '            balances[msg.sender] >= _value\n', '            && _value > 0\n', '            && !blockListed[_to]\n', '            && !blockListed[msg.sender]\n', '        );\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(\n', '            _to != address(0)\n', '            && balances[msg.sender] >= _value\n', '            && balances[_from] >= _value\n', '            && _value > 0\n', '            && !blockListed[_to]\n', '            && !blockListed[msg.sender]\n', '        );\n', '\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '    * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value > 0);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address internal owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    * @return True if the operation was successful.\n', '    */\n', '    function finishMinting() onlyOwner public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '\n', '    function addBlockeddUser(address user) public onlyOwner {\n', '        blockListed[user] = true;\n', '    }\n', '\n', '    function removeBlockeddUser(address user) public onlyOwner  {\n', '        blockListed[user] = false;\n', '    }\n', '}\n', '\n', 'contract PullPayment {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public payments;\n', '    uint256 public totalPayments;\n', '\n', '    /**\n', '    * @dev Called by the payer to store the sent amount as credit to be pulled.\n', '    * @param dest The destination address of the funds.\n', '    * @param amount The amount to transfer.\n', '    */\n', '    function asyncSend(address dest, uint256 amount) internal {\n', '        payments[dest] = payments[dest].add(amount);\n', '        totalPayments = totalPayments.add(amount);\n', '    }\n', '\n', '    /**\n', '    * @dev withdraw accumulated balance, called by payee.\n', '    */\n', '    function withdrawPayments() public {\n', '        address payee = msg.sender;\n', '        uint256 payment = payments[payee];\n', '\n', '        require(payment != 0);\n', '        require(this.balance >= payment);\n', '\n', '        totalPayments = totalPayments.sub(payment);\n', '        payments[payee] = 0;\n', '\n', '        assert(payee.send(payment));\n', '    }\n', '}\n', '\n', '\n', 'contract AutoCoinToken is MintableToken {\n', '\n', '  /**\n', '   *  @string name - Token Name\n', '   *  @string symbol - Token Symbol\n', '   *  @uint8 decimals - Token Decimals\n', '   *  @uint256 _totalSupply - Token Total Supply\n', '  */\n', '\n', '    string public constant name = "AUTO COIN";\n', '    string public constant symbol = "AUTO COIN";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant _totalSupply = 400000000000000000000000000;\n', '\n', '/** Constructor AutoCoinToken */\n', '    constructor() public {\n', '        totalSupply = _totalSupply;\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', 'contract Crowdsale is Ownable, Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '    *  @MintableToken token - Token Object\n', '    *  @address wallet - Wallet Address\n', '    *  @uint8 rate - Tokens per Ether\n', '    *  @uint256 weiRaised - Total funds raised in Ethers\n', '    */\n', '\n', '    MintableToken internal token;\n', '    address internal wallet;\n', '    uint256 public rate;\n', '    uint256 internal weiRaised;\n', '\n', '    /**\n', '    *  @uint256 privateSaleStartTime - Private-Sale Start Time\n', '    *  @uint256 privateSaleEndTime - Private-Sale End Time\n', '    *  @uint256 preSaleStartTime - Pre-Sale Start Time\n', '    *  @uint256 preSaleEndTime - Pre-Sale End Time\n', '    *  @uint256 preICOStartTime - Pre-ICO Start Time\n', '    *  @uint256 preICOEndTime - Pre-ICO End Time\n', '    *  @uint256 ICOstartTime - ICO Start Time\n', '    *  @uint256 ICOEndTime - ICO End Time\n', '    */\n', '    \n', '    uint256 public privateSaleStartTime;\n', '    uint256 public privateSaleEndTime;\n', '    uint256 public preSaleStartTime;\n', '    uint256 public preSaleEndTime;\n', '    uint256 public preICOStartTime;\n', '    uint256 public preICOEndTime;\n', '    uint256 public ICOstartTime;\n', '    uint256 public ICOEndTime;\n', '    \n', '    /**\n', '    *  @uint privateBonus - Private Bonus\n', '    *  @uint preSaleBonus - Pre-Sale Bonus\n', '    *  @uint preICOBonus - Pre-Sale Bonus\n', '    *  @uint firstWeekBonus - ICO 1st Week Bonus\n', '    *  @uint secondWeekBonus - ICO 2nd Week Bonus\n', '    *  @uint thirdWeekBonus - ICO 3rd Week Bonus\n', '    *  @uint forthWeekBonus - ICO 4th Week Bonus\n', '    *  @uint fifthWeekBonus - ICO 5th Week Bonus\n', '    */\n', '\n', '    uint256 internal privateSaleBonus;\n', '    uint256 internal preSaleBonus;\n', '    uint256 internal preICOBonus;\n', '    uint256 internal firstWeekBonus;\n', '    uint256 internal secondWeekBonus;\n', '    uint256 internal thirdWeekBonus;\n', '    uint256 internal forthWeekBonus;\n', '    uint256 internal fifthWeekBonus;\n', '\n', '    uint256 internal weekOne;\n', '    uint256 internal weekTwo;\n', '    uint256 internal weekThree;\n', '    uint256 internal weekFour;\n', '    uint256 internal weekFive;\n', '\n', '\n', '    uint256 internal privateSaleTarget;\n', '    uint256 internal preSaleTarget;\n', '    uint256 internal preICOTarget;\n', '\n', '    /**\n', '    *  @uint256 totalSupply - Total supply of tokens \n', '    *  @uint256 publicSupply - Total public Supply \n', '    *  @uint256 bountySupply - Total Bounty Supply\n', '    *  @uint256 reservedSupply - Total Reserved Supply \n', '    *  @uint256 privateSaleSupply - Total Private Supply from Public Supply  \n', '    *  @uint256 preSaleSupply - Total PreSale Supply from Public Supply \n', '    *  @uint256 preICOSupply - Total PreICO Supply from Public Supply\n', '    *  @uint256 icoSupply - Total ICO Supply from Public Supply\n', '    */\n', '\n', '    uint256 public totalSupply = SafeMath.mul(400000000, 1 ether);\n', '    uint256 internal publicSupply = SafeMath.mul(SafeMath.div(totalSupply,100),55);\n', '    uint256 internal bountySupply = SafeMath.mul(SafeMath.div(totalSupply,100),6);\n', '    uint256 internal reservedSupply = SafeMath.mul(SafeMath.div(totalSupply,100),39);\n', '    uint256 internal privateSaleSupply = SafeMath.mul(24750000, 1 ether);\n', '    uint256 internal preSaleSupply = SafeMath.mul(39187500, 1 ether);\n', '    uint256 internal preICOSupply = SafeMath.mul(39187500, 1 ether);\n', '    uint256 internal icoSupply = SafeMath.mul(116875000, 1 ether);\n', '\n', '\n', '    /**\n', '    *  @bool checkUnsoldTokens - Tokens will be added to bounty supply\n', '    *  @bool upgradePreSaleSupply - Boolean variable updates when the PrivateSale tokens added to PreSale supply\n', '    *  @bool upgradePreICOSupply - Boolean variable updates when the PreSale tokens added to PreICO supply\n', '    *  @bool upgradeICOSupply - Boolean variable updates when the PreICO tokens added to ICO supply\n', '    *  @bool grantFounderTeamSupply - Boolean variable updates when Team and Founder tokens minted\n', '    */\n', '\n', '    bool public checkUnsoldTokens;\n', '    bool internal upgradePreSaleSupply;\n', '    bool internal upgradePreICOSupply;\n', '    bool internal upgradeICOSupply;\n', '\n', '\n', '\n', '    /**\n', '    * event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value Wei&#39;s paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '    * function Crowdsale - Parameterized Constructor\n', '    * @param _startTime - StartTime of Crowdsale\n', '    * @param _endTime - EndTime of Crowdsale\n', '    * @param _rate - Tokens against Ether\n', '    * @param _wallet - MultiSignature Wallet Address\n', '    */\n', '\n', '    constructor(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) internal {\n', '        \n', '        require(_wallet != 0x0);\n', '\n', '        token = createTokenContract();\n', '\n', '        privateSaleStartTime = _startTime;\n', '        privateSaleEndTime = 1537952399;\n', '        preSaleStartTime = 1537952400;\n', '        preSaleEndTime = 1541581199;\n', '        preICOStartTime = 1541581200;\n', '        preICOEndTime = 1544000399; \n', '        ICOstartTime = 1544000400;\n', '        ICOEndTime = _endTime;\n', '\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '\n', '        privateSaleBonus = SafeMath.div(SafeMath.mul(rate,50),100);\n', '        preSaleBonus = SafeMath.div(SafeMath.mul(rate,30),100);\n', '        preICOBonus = SafeMath.div(SafeMath.mul(rate,30),100);\n', '        firstWeekBonus = SafeMath.div(SafeMath.mul(rate,20),100);\n', '        secondWeekBonus = SafeMath.div(SafeMath.mul(rate,15),100);\n', '        thirdWeekBonus = SafeMath.div(SafeMath.mul(rate,10),100);\n', '        forthWeekBonus = SafeMath.div(SafeMath.mul(rate,5),100);\n', '        \n', '\n', '        weekOne = SafeMath.add(ICOstartTime, 14 days);\n', '        weekTwo = SafeMath.add(weekOne, 14 days);\n', '        weekThree = SafeMath.add(weekTwo, 14 days);\n', '        weekFour = SafeMath.add(weekThree, 14 days);\n', '        weekFive = SafeMath.add(weekFour, 14 days);\n', '\n', '        privateSaleTarget = SafeMath.mul(4500, 1 ether);\n', '        preSaleTarget = SafeMath.mul(7125, 1 ether);\n', '        preICOTarget = SafeMath.mul(7125, 1 ether);\n', '\n', '        checkUnsoldTokens = false;\n', '        upgradeICOSupply = false;\n', '        upgradePreICOSupply = false;\n', '        upgradePreSaleSupply = false;\n', '    \n', '    }\n', '\n', '    /**\n', '    * function createTokenContract - Mintable Token Created\n', '    */\n', '\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return new MintableToken();\n', '    }\n', '    \n', '    /**\n', '    * function Fallback - Receives Ethers\n', '    */\n', '\n', '    function () payable public {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '        /**\n', '    * function preSaleTokens - Calculate Tokens in PreSale\n', '    */\n', '\n', '    function privateSaleTokens(uint256 weiAmount, uint256 tokens) internal returns (uint256) {\n', '        require(privateSaleSupply > 0);\n', '        require(weiAmount <= privateSaleTarget);\n', '\n', '        tokens = SafeMath.add(tokens, weiAmount.mul(privateSaleBonus));\n', '        tokens = SafeMath.add(tokens, weiAmount.mul(rate));\n', '\n', '        require(privateSaleSupply >= tokens);\n', '\n', '        privateSaleSupply = privateSaleSupply.sub(tokens);        \n', '        privateSaleTarget = privateSaleTarget.sub(weiAmount);\n', '\n', '        return tokens;\n', '    }\n', '\n', '\n', '    /**\n', '    * function preSaleTokens - Calculate Tokens in PreSale\n', '    */\n', '\n', '    function preSaleTokens(uint256 weiAmount, uint256 tokens) internal returns (uint256) {\n', '        require(preSaleSupply > 0);\n', '        require(weiAmount <= preSaleTarget);\n', '\n', '        if (!upgradePreSaleSupply) {\n', '            preSaleSupply = SafeMath.add(preSaleSupply, privateSaleSupply);\n', '            preSaleTarget = SafeMath.add(preSaleTarget, privateSaleTarget);\n', '            upgradePreSaleSupply = true;\n', '        }\n', '\n', '        tokens = SafeMath.add(tokens, weiAmount.mul(preSaleBonus));\n', '        tokens = SafeMath.add(tokens, weiAmount.mul(rate));\n', '\n', '        require(preSaleSupply >= tokens);\n', '\n', '        preSaleSupply = preSaleSupply.sub(tokens);        \n', '        preSaleTarget = preSaleTarget.sub(weiAmount);\n', '        return tokens;\n', '    }\n', '\n', '    /**\n', '        * function preICOTokens - Calculate Tokens in PreICO\n', '        */\n', '\n', '    function preICOTokens(uint256 weiAmount, uint256 tokens) internal returns (uint256) {\n', '            \n', '        require(preICOSupply > 0);\n', '        require(weiAmount <= preICOTarget);\n', '\n', '        if (!upgradePreICOSupply) {\n', '            preICOSupply = SafeMath.add(preICOSupply, preSaleSupply);\n', '            preICOTarget = SafeMath.add(preICOTarget, preSaleTarget);\n', '            upgradePreICOSupply = true;\n', '        }\n', '\n', '        tokens = SafeMath.add(tokens, weiAmount.mul(preICOBonus));\n', '        tokens = SafeMath.add(tokens, weiAmount.mul(rate));\n', '        \n', '        require(preICOSupply >= tokens);\n', '        \n', '        preICOSupply = preICOSupply.sub(tokens);        \n', '        preICOTarget = preICOTarget.sub(weiAmount);\n', '        return tokens;\n', '    }\n', '\n', '    /**\n', '    * function icoTokens - Calculate Tokens in ICO\n', '    */\n', '    \n', '    function icoTokens(uint256 weiAmount, uint256 tokens, uint256 accessTime) internal returns (uint256) {\n', '            \n', '        require(icoSupply > 0);\n', '\n', '        if (!upgradeICOSupply) {\n', '            icoSupply = SafeMath.add(icoSupply,preICOSupply);\n', '            upgradeICOSupply = true;\n', '        }\n', '        \n', '        if (accessTime <= weekOne) {\n', '            tokens = SafeMath.add(tokens, weiAmount.mul(firstWeekBonus));\n', '        } else if (accessTime <= weekTwo) {\n', '            tokens = SafeMath.add(tokens, weiAmount.mul(secondWeekBonus));\n', '        } else if ( accessTime < weekThree ) {\n', '            tokens = SafeMath.add(tokens, weiAmount.mul(thirdWeekBonus));\n', '        } else if ( accessTime < weekFour ) {\n', '            tokens = SafeMath.add(tokens, weiAmount.mul(forthWeekBonus));\n', '        } else if ( accessTime < weekFive ) {\n', '            tokens = SafeMath.add(tokens, weiAmount.mul(fifthWeekBonus));\n', '        }\n', '        \n', '        tokens = SafeMath.add(tokens, weiAmount.mul(rate));\n', '        icoSupply = icoSupply.sub(tokens);        \n', '\n', '        return tokens;\n', '    }\n', '\n', '    /**\n', '    * function buyTokens - Collect Ethers and transfer tokens\n', '    */\n', '\n', '    function buyTokens(address beneficiary) whenNotPaused internal {\n', '\n', '        require(beneficiary != 0x0);\n', '        require(validPurchase());\n', '        uint256 accessTime = now;\n', '        uint256 tokens = 0;\n', '        uint256 weiAmount = msg.value;\n', '\n', '        require((weiAmount >= (100000000000000000)) && (weiAmount <= (20000000000000000000)));\n', '\n', '        if ((accessTime >= privateSaleStartTime) && (accessTime < privateSaleEndTime)) {\n', '            tokens = privateSaleTokens(weiAmount, tokens);\n', '        } else if ((accessTime >= preSaleStartTime) && (accessTime < preSaleEndTime)) {\n', '            tokens = preSaleTokens(weiAmount, tokens);\n', '        } else if ((accessTime >= preICOStartTime) && (accessTime < preICOEndTime)) {\n', '            tokens = preICOTokens(weiAmount, tokens);\n', '        } else if ((accessTime >= ICOstartTime) && (accessTime <= ICOEndTime)) { \n', '            tokens = icoTokens(weiAmount, tokens, accessTime);\n', '        } else {\n', '            revert();\n', '        }\n', '        \n', '        publicSupply = publicSupply.sub(tokens);\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        token.mint(beneficiary, tokens);\n', '        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '        forwardFunds();\n', '    }\n', '\n', '    /**\n', '    * function forwardFunds - Transfer funds to wallet\n', '    */\n', '\n', '    function forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    /**\n', '    * function validPurchase - Checks the purchase is valid or not\n', '    * @return true - Purchase is withPeriod and nonZero\n', '    */\n', '\n', '    function validPurchase() internal view returns (bool) {\n', '        bool withinPeriod = now >= privateSaleStartTime && now <= ICOEndTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        return withinPeriod && nonZeroPurchase;\n', '    }\n', '\n', '    /**\n', '    * function hasEnded - Checks the ICO ends or not\n', '    * @return true - ICO Ends\n', '    */\n', '    \n', '    function hasEnded() public view returns (bool) {\n', '        return now > ICOEndTime;\n', '    }\n', '\n', '    /**\n', '    * function unsoldToken - Function used to transfer all \n', '    *               unsold public tokens to reserve supply\n', '    */\n', '\n', '    function unsoldToken() onlyOwner public {\n', '        require(hasEnded());\n', '        require(!checkUnsoldTokens);\n', '        \n', '        checkUnsoldTokens = true;\n', '        bountySupply = SafeMath.add(bountySupply, publicSupply);\n', '        publicSupply = 0;\n', '\n', '    }\n', '\n', '    /** \n', '    * function getTokenAddress - Get Token Address \n', '    */\n', '\n', '    function getTokenAddress() onlyOwner view public returns (address) {\n', '        return token;\n', '    }\n', '}\n', '\n', 'contract CappedCrowdsale is Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public cap;\n', '\n', '    constructor(uint256 _cap) public {\n', '        require(_cap > 0);\n', '        cap = _cap;\n', '    }\n', '\n', '    // overriding Crowdsale#validPurchase to add extra cap logic\n', '    // @return true if investors can buy at the moment\n', '    function validPurchase() internal view returns (bool) {\n', '        return super.validPurchase() && weiRaised.add(msg.value) <= cap;\n', '    }\n', '\n', '    // overriding Crowdsale#hasEnded to add cap logic\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return super.hasEnded() || weiRaised >= cap;\n', '    }\n', '}\n', '\n', 'contract CrowdsaleFunctions is Crowdsale {\n', '\n', ' /** \n', '  * function bountyFunds - Transfer bounty tokens via AirDrop\n', '  * @param beneficiary address where owner wants to transfer tokens\n', '  * @param tokens value of token\n', '  */\n', '\n', '    function bountyFunds(address[] beneficiary, uint256[] tokens) public onlyOwner {\n', '\n', '        for (uint256 i = 0; i < beneficiary.length; i++) {\n', '            tokens[i] = SafeMath.mul(tokens[i],1 ether); \n', '\n', '            require(beneficiary[i] != 0x0);\n', '            require(bountySupply >= tokens[i]);\n', '            \n', '            bountySupply = SafeMath.sub(bountySupply,tokens[i]);\n', '            token.mint(beneficiary[i], tokens[i]);\n', '        }\n', '    }\n', '\n', '\n', '  /** \n', '   * function grantReservedToken - Transfer advisor,team and founder tokens  \n', '   */\n', '\n', '    function grantReservedToken(address beneficiary, uint256 tokens) public onlyOwner {\n', '        require(beneficiary != 0x0);\n', '        require(reservedSupply > 0);\n', '\n', '        tokens = SafeMath.mul(tokens,1 ether);\n', '        require(reservedSupply >= tokens);\n', '        reservedSupply = SafeMath.sub(reservedSupply,tokens);\n', '        token.mint(beneficiary, tokens);\n', '    }\n', '\n', '/** \n', ' *.function transferToken - Used to transfer tokens to investors who pays us other than Ethers\n', ' * @param beneficiary - Address where owner wants to transfer tokens\n', ' * @param tokens -  Number of tokens\n', ' */\n', '    function transferToken(address beneficiary, uint256 tokens) onlyOwner public {\n', '        \n', '        require(beneficiary != 0x0);\n', '        require(publicSupply > 0);\n', '        tokens = SafeMath.mul(tokens,1 ether);\n', '        require(publicSupply >= tokens);\n', '        publicSupply = SafeMath.sub(publicSupply,tokens);\n', '        token.mint(beneficiary, tokens);\n', '    }\n', '\n', '    function addBlockListed(address user) public onlyOwner {\n', '        token.addBlockeddUser(user);\n', '    }\n', '    \n', '    function removeBlockListed(address user) public onlyOwner {\n', '        token.removeBlockeddUser(user);\n', '    }\n', '}\n', '\n', 'contract FinalizableCrowdsale is Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    bool isFinalized = false;\n', '\n', '    event Finalized();\n', '\n', '    /**\n', '    * @dev Must be called after crowdsale ends, to do some extra finalization\n', '    * work. Calls the contract&#39;s finalization function.\n', '    */\n', '    function finalize() onlyOwner public {\n', '        require(!isFinalized);\n', '        require(hasEnded());\n', '\n', '        finalization();\n', '        emit Finalized();\n', '\n', '        isFinalized = true;\n', '    }\n', '\n', '    /**\n', '    * @dev Can be overridden to add finalization logic. The overriding function\n', '    * should call super.finalization() to ensure the chain of finalization is\n', '    * executed entirely.\n', '    */\n', '    function finalization() internal view {\n', '    }\n', '}\n', '\n', 'contract Migrations {\n', '    address public owner;\n', '    uint public last_completed_migration;\n', '\n', '    modifier restricted() {\n', '        if (msg.sender == owner) _;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function setCompleted(uint completed) public restricted {\n', '        last_completed_migration = completed;\n', '    }\n', '\n', '    function upgrade(address new_address) public restricted {\n', '        Migrations upgraded = Migrations(new_address);\n', '        upgraded.setCompleted(last_completed_migration);\n', '    }\n', '}\n', '\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // minimum amount of funds to be raised in weis\n', '    uint256 public goal;\n', '    bool private _goalReached = false;\n', '    // refund vault used to hold funds while crowdsale is running\n', '    RefundVault private vault;\n', '\n', '    constructor(uint256 _goal) public {\n', '        require(_goal > 0);\n', '        vault = new RefundVault(wallet);\n', '        goal = _goal;\n', '    }\n', '\n', '    // We&#39;re overriding the fund forwarding from Crowdsale.\n', '    // In addition to sending the funds, we want to call\n', '    // the RefundVault deposit function\n', '    function forwardFunds() internal {\n', '        vault.deposit.value(msg.value)(msg.sender);\n', '    }\n', '\n', '    // if crowdsale is unsuccessful, investors can claim refunds here\n', '    function claimRefund() public {\n', '        require(isFinalized);\n', '        require(!goalReached());\n', '\n', '        vault.refund(msg.sender);\n', '    }\n', '\n', '    // vault finalization task, called when owner calls finalize()\n', '    function finalization() internal view {\n', '        if (goalReached()) {\n', '            vault.close();\n', '        } else {\n', '            vault.enableRefunds();\n', '        }\n', '        super.finalization();\n', '    }\n', '\n', '    function goalReached() public payable returns (bool) {\n', '        if (weiRaised >= goal) {\n', '            _goalReached = true;\n', '            return true;\n', '        } else if (_goalReached) {\n', '            return true;\n', '        } \n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function updateGoalCheck() onlyOwner public {\n', '        _goalReached = true;\n', '    }\n', '\n', '    function getVaultAddress() onlyOwner view public returns (address) {\n', '        return vault;\n', '    }\n', '}\n', '\n', 'contract RefundVault is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    enum State { Active, Refunding, Closed }\n', '\n', '    mapping (address => uint256) public deposited;\n', '    address public wallet;\n', '    State public state;\n', '\n', '    event Closed();\n', '    event RefundsEnabled();\n', '    event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '    constructor(address _wallet) public {\n', '        require(_wallet != 0x0);\n', '        wallet = _wallet;\n', '        state = State.Active;\n', '    }\n', '\n', '    function deposit(address investor) onlyOwner public payable {\n', '        require(state == State.Active);\n', '        deposited[investor] = deposited[investor].add(msg.value);\n', '    }\n', '\n', '    function close() onlyOwner public {\n', '        require(state == State.Active);\n', '        state = State.Closed;\n', '        emit Closed();\n', '        wallet.transfer(this.balance);\n', '    }\n', '\n', '    function enableRefunds() onlyOwner public {\n', '        require(state == State.Active);\n', '        state = State.Refunding;\n', '        emit RefundsEnabled();\n', '    }\n', '\n', '    function refund(address investor) public {\n', '        require(state == State.Refunding);\n', '        uint256 depositedValue = deposited[investor];\n', '        deposited[investor] = 0;\n', '        investor.transfer(depositedValue);\n', '        emit Refunded(investor, depositedValue);\n', '    }\n', '}']
['pragma solidity ^0.4.25;\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library Math {\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => bool) blockListed;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        \n', '        require(\n', '            balances[msg.sender] >= _value\n', '            && _value > 0\n', '            && !blockListed[_to]\n', '            && !blockListed[msg.sender]\n', '        );\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(\n', '            _to != address(0)\n', '            && balances[msg.sender] >= _value\n', '            && balances[_from] >= _value\n', '            && _value > 0\n', '            && !blockListed[_to]\n', '            && !blockListed[msg.sender]\n', '        );\n', '\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value > 0);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address internal owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    * @return True if the operation was successful.\n', '    */\n', '    function finishMinting() onlyOwner public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '\n', '    function addBlockeddUser(address user) public onlyOwner {\n', '        blockListed[user] = true;\n', '    }\n', '\n', '    function removeBlockeddUser(address user) public onlyOwner  {\n', '        blockListed[user] = false;\n', '    }\n', '}\n', '\n', 'contract PullPayment {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public payments;\n', '    uint256 public totalPayments;\n', '\n', '    /**\n', '    * @dev Called by the payer to store the sent amount as credit to be pulled.\n', '    * @param dest The destination address of the funds.\n', '    * @param amount The amount to transfer.\n', '    */\n', '    function asyncSend(address dest, uint256 amount) internal {\n', '        payments[dest] = payments[dest].add(amount);\n', '        totalPayments = totalPayments.add(amount);\n', '    }\n', '\n', '    /**\n', '    * @dev withdraw accumulated balance, called by payee.\n', '    */\n', '    function withdrawPayments() public {\n', '        address payee = msg.sender;\n', '        uint256 payment = payments[payee];\n', '\n', '        require(payment != 0);\n', '        require(this.balance >= payment);\n', '\n', '        totalPayments = totalPayments.sub(payment);\n', '        payments[payee] = 0;\n', '\n', '        assert(payee.send(payment));\n', '    }\n', '}\n', '\n', '\n', 'contract AutoCoinToken is MintableToken {\n', '\n', '  /**\n', '   *  @string name - Token Name\n', '   *  @string symbol - Token Symbol\n', '   *  @uint8 decimals - Token Decimals\n', '   *  @uint256 _totalSupply - Token Total Supply\n', '  */\n', '\n', '    string public constant name = "AUTO COIN";\n', '    string public constant symbol = "AUTO COIN";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant _totalSupply = 400000000000000000000000000;\n', '\n', '/** Constructor AutoCoinToken */\n', '    constructor() public {\n', '        totalSupply = _totalSupply;\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', 'contract Crowdsale is Ownable, Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '    *  @MintableToken token - Token Object\n', '    *  @address wallet - Wallet Address\n', '    *  @uint8 rate - Tokens per Ether\n', '    *  @uint256 weiRaised - Total funds raised in Ethers\n', '    */\n', '\n', '    MintableToken internal token;\n', '    address internal wallet;\n', '    uint256 public rate;\n', '    uint256 internal weiRaised;\n', '\n', '    /**\n', '    *  @uint256 privateSaleStartTime - Private-Sale Start Time\n', '    *  @uint256 privateSaleEndTime - Private-Sale End Time\n', '    *  @uint256 preSaleStartTime - Pre-Sale Start Time\n', '    *  @uint256 preSaleEndTime - Pre-Sale End Time\n', '    *  @uint256 preICOStartTime - Pre-ICO Start Time\n', '    *  @uint256 preICOEndTime - Pre-ICO End Time\n', '    *  @uint256 ICOstartTime - ICO Start Time\n', '    *  @uint256 ICOEndTime - ICO End Time\n', '    */\n', '    \n', '    uint256 public privateSaleStartTime;\n', '    uint256 public privateSaleEndTime;\n', '    uint256 public preSaleStartTime;\n', '    uint256 public preSaleEndTime;\n', '    uint256 public preICOStartTime;\n', '    uint256 public preICOEndTime;\n', '    uint256 public ICOstartTime;\n', '    uint256 public ICOEndTime;\n', '    \n', '    /**\n', '    *  @uint privateBonus - Private Bonus\n', '    *  @uint preSaleBonus - Pre-Sale Bonus\n', '    *  @uint preICOBonus - Pre-Sale Bonus\n', '    *  @uint firstWeekBonus - ICO 1st Week Bonus\n', '    *  @uint secondWeekBonus - ICO 2nd Week Bonus\n', '    *  @uint thirdWeekBonus - ICO 3rd Week Bonus\n', '    *  @uint forthWeekBonus - ICO 4th Week Bonus\n', '    *  @uint fifthWeekBonus - ICO 5th Week Bonus\n', '    */\n', '\n', '    uint256 internal privateSaleBonus;\n', '    uint256 internal preSaleBonus;\n', '    uint256 internal preICOBonus;\n', '    uint256 internal firstWeekBonus;\n', '    uint256 internal secondWeekBonus;\n', '    uint256 internal thirdWeekBonus;\n', '    uint256 internal forthWeekBonus;\n', '    uint256 internal fifthWeekBonus;\n', '\n', '    uint256 internal weekOne;\n', '    uint256 internal weekTwo;\n', '    uint256 internal weekThree;\n', '    uint256 internal weekFour;\n', '    uint256 internal weekFive;\n', '\n', '\n', '    uint256 internal privateSaleTarget;\n', '    uint256 internal preSaleTarget;\n', '    uint256 internal preICOTarget;\n', '\n', '    /**\n', '    *  @uint256 totalSupply - Total supply of tokens \n', '    *  @uint256 publicSupply - Total public Supply \n', '    *  @uint256 bountySupply - Total Bounty Supply\n', '    *  @uint256 reservedSupply - Total Reserved Supply \n', '    *  @uint256 privateSaleSupply - Total Private Supply from Public Supply  \n', '    *  @uint256 preSaleSupply - Total PreSale Supply from Public Supply \n', '    *  @uint256 preICOSupply - Total PreICO Supply from Public Supply\n', '    *  @uint256 icoSupply - Total ICO Supply from Public Supply\n', '    */\n', '\n', '    uint256 public totalSupply = SafeMath.mul(400000000, 1 ether);\n', '    uint256 internal publicSupply = SafeMath.mul(SafeMath.div(totalSupply,100),55);\n', '    uint256 internal bountySupply = SafeMath.mul(SafeMath.div(totalSupply,100),6);\n', '    uint256 internal reservedSupply = SafeMath.mul(SafeMath.div(totalSupply,100),39);\n', '    uint256 internal privateSaleSupply = SafeMath.mul(24750000, 1 ether);\n', '    uint256 internal preSaleSupply = SafeMath.mul(39187500, 1 ether);\n', '    uint256 internal preICOSupply = SafeMath.mul(39187500, 1 ether);\n', '    uint256 internal icoSupply = SafeMath.mul(116875000, 1 ether);\n', '\n', '\n', '    /**\n', '    *  @bool checkUnsoldTokens - Tokens will be added to bounty supply\n', '    *  @bool upgradePreSaleSupply - Boolean variable updates when the PrivateSale tokens added to PreSale supply\n', '    *  @bool upgradePreICOSupply - Boolean variable updates when the PreSale tokens added to PreICO supply\n', '    *  @bool upgradeICOSupply - Boolean variable updates when the PreICO tokens added to ICO supply\n', '    *  @bool grantFounderTeamSupply - Boolean variable updates when Team and Founder tokens minted\n', '    */\n', '\n', '    bool public checkUnsoldTokens;\n', '    bool internal upgradePreSaleSupply;\n', '    bool internal upgradePreICOSupply;\n', '    bool internal upgradeICOSupply;\n', '\n', '\n', '\n', '    /**\n', '    * event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', "    * @param value Wei's paid for purchase\n", '    * @param amount amount of tokens purchased\n', '    */\n', '\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '    * function Crowdsale - Parameterized Constructor\n', '    * @param _startTime - StartTime of Crowdsale\n', '    * @param _endTime - EndTime of Crowdsale\n', '    * @param _rate - Tokens against Ether\n', '    * @param _wallet - MultiSignature Wallet Address\n', '    */\n', '\n', '    constructor(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) internal {\n', '        \n', '        require(_wallet != 0x0);\n', '\n', '        token = createTokenContract();\n', '\n', '        privateSaleStartTime = _startTime;\n', '        privateSaleEndTime = 1537952399;\n', '        preSaleStartTime = 1537952400;\n', '        preSaleEndTime = 1541581199;\n', '        preICOStartTime = 1541581200;\n', '        preICOEndTime = 1544000399; \n', '        ICOstartTime = 1544000400;\n', '        ICOEndTime = _endTime;\n', '\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '\n', '        privateSaleBonus = SafeMath.div(SafeMath.mul(rate,50),100);\n', '        preSaleBonus = SafeMath.div(SafeMath.mul(rate,30),100);\n', '        preICOBonus = SafeMath.div(SafeMath.mul(rate,30),100);\n', '        firstWeekBonus = SafeMath.div(SafeMath.mul(rate,20),100);\n', '        secondWeekBonus = SafeMath.div(SafeMath.mul(rate,15),100);\n', '        thirdWeekBonus = SafeMath.div(SafeMath.mul(rate,10),100);\n', '        forthWeekBonus = SafeMath.div(SafeMath.mul(rate,5),100);\n', '        \n', '\n', '        weekOne = SafeMath.add(ICOstartTime, 14 days);\n', '        weekTwo = SafeMath.add(weekOne, 14 days);\n', '        weekThree = SafeMath.add(weekTwo, 14 days);\n', '        weekFour = SafeMath.add(weekThree, 14 days);\n', '        weekFive = SafeMath.add(weekFour, 14 days);\n', '\n', '        privateSaleTarget = SafeMath.mul(4500, 1 ether);\n', '        preSaleTarget = SafeMath.mul(7125, 1 ether);\n', '        preICOTarget = SafeMath.mul(7125, 1 ether);\n', '\n', '        checkUnsoldTokens = false;\n', '        upgradeICOSupply = false;\n', '        upgradePreICOSupply = false;\n', '        upgradePreSaleSupply = false;\n', '    \n', '    }\n', '\n', '    /**\n', '    * function createTokenContract - Mintable Token Created\n', '    */\n', '\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return new MintableToken();\n', '    }\n', '    \n', '    /**\n', '    * function Fallback - Receives Ethers\n', '    */\n', '\n', '    function () payable public {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '        /**\n', '    * function preSaleTokens - Calculate Tokens in PreSale\n', '    */\n', '\n', '    function privateSaleTokens(uint256 weiAmount, uint256 tokens) internal returns (uint256) {\n', '        require(privateSaleSupply > 0);\n', '        require(weiAmount <= privateSaleTarget);\n', '\n', '        tokens = SafeMath.add(tokens, weiAmount.mul(privateSaleBonus));\n', '        tokens = SafeMath.add(tokens, weiAmount.mul(rate));\n', '\n', '        require(privateSaleSupply >= tokens);\n', '\n', '        privateSaleSupply = privateSaleSupply.sub(tokens);        \n', '        privateSaleTarget = privateSaleTarget.sub(weiAmount);\n', '\n', '        return tokens;\n', '    }\n', '\n', '\n', '    /**\n', '    * function preSaleTokens - Calculate Tokens in PreSale\n', '    */\n', '\n', '    function preSaleTokens(uint256 weiAmount, uint256 tokens) internal returns (uint256) {\n', '        require(preSaleSupply > 0);\n', '        require(weiAmount <= preSaleTarget);\n', '\n', '        if (!upgradePreSaleSupply) {\n', '            preSaleSupply = SafeMath.add(preSaleSupply, privateSaleSupply);\n', '            preSaleTarget = SafeMath.add(preSaleTarget, privateSaleTarget);\n', '            upgradePreSaleSupply = true;\n', '        }\n', '\n', '        tokens = SafeMath.add(tokens, weiAmount.mul(preSaleBonus));\n', '        tokens = SafeMath.add(tokens, weiAmount.mul(rate));\n', '\n', '        require(preSaleSupply >= tokens);\n', '\n', '        preSaleSupply = preSaleSupply.sub(tokens);        \n', '        preSaleTarget = preSaleTarget.sub(weiAmount);\n', '        return tokens;\n', '    }\n', '\n', '    /**\n', '        * function preICOTokens - Calculate Tokens in PreICO\n', '        */\n', '\n', '    function preICOTokens(uint256 weiAmount, uint256 tokens) internal returns (uint256) {\n', '            \n', '        require(preICOSupply > 0);\n', '        require(weiAmount <= preICOTarget);\n', '\n', '        if (!upgradePreICOSupply) {\n', '            preICOSupply = SafeMath.add(preICOSupply, preSaleSupply);\n', '            preICOTarget = SafeMath.add(preICOTarget, preSaleTarget);\n', '            upgradePreICOSupply = true;\n', '        }\n', '\n', '        tokens = SafeMath.add(tokens, weiAmount.mul(preICOBonus));\n', '        tokens = SafeMath.add(tokens, weiAmount.mul(rate));\n', '        \n', '        require(preICOSupply >= tokens);\n', '        \n', '        preICOSupply = preICOSupply.sub(tokens);        \n', '        preICOTarget = preICOTarget.sub(weiAmount);\n', '        return tokens;\n', '    }\n', '\n', '    /**\n', '    * function icoTokens - Calculate Tokens in ICO\n', '    */\n', '    \n', '    function icoTokens(uint256 weiAmount, uint256 tokens, uint256 accessTime) internal returns (uint256) {\n', '            \n', '        require(icoSupply > 0);\n', '\n', '        if (!upgradeICOSupply) {\n', '            icoSupply = SafeMath.add(icoSupply,preICOSupply);\n', '            upgradeICOSupply = true;\n', '        }\n', '        \n', '        if (accessTime <= weekOne) {\n', '            tokens = SafeMath.add(tokens, weiAmount.mul(firstWeekBonus));\n', '        } else if (accessTime <= weekTwo) {\n', '            tokens = SafeMath.add(tokens, weiAmount.mul(secondWeekBonus));\n', '        } else if ( accessTime < weekThree ) {\n', '            tokens = SafeMath.add(tokens, weiAmount.mul(thirdWeekBonus));\n', '        } else if ( accessTime < weekFour ) {\n', '            tokens = SafeMath.add(tokens, weiAmount.mul(forthWeekBonus));\n', '        } else if ( accessTime < weekFive ) {\n', '            tokens = SafeMath.add(tokens, weiAmount.mul(fifthWeekBonus));\n', '        }\n', '        \n', '        tokens = SafeMath.add(tokens, weiAmount.mul(rate));\n', '        icoSupply = icoSupply.sub(tokens);        \n', '\n', '        return tokens;\n', '    }\n', '\n', '    /**\n', '    * function buyTokens - Collect Ethers and transfer tokens\n', '    */\n', '\n', '    function buyTokens(address beneficiary) whenNotPaused internal {\n', '\n', '        require(beneficiary != 0x0);\n', '        require(validPurchase());\n', '        uint256 accessTime = now;\n', '        uint256 tokens = 0;\n', '        uint256 weiAmount = msg.value;\n', '\n', '        require((weiAmount >= (100000000000000000)) && (weiAmount <= (20000000000000000000)));\n', '\n', '        if ((accessTime >= privateSaleStartTime) && (accessTime < privateSaleEndTime)) {\n', '            tokens = privateSaleTokens(weiAmount, tokens);\n', '        } else if ((accessTime >= preSaleStartTime) && (accessTime < preSaleEndTime)) {\n', '            tokens = preSaleTokens(weiAmount, tokens);\n', '        } else if ((accessTime >= preICOStartTime) && (accessTime < preICOEndTime)) {\n', '            tokens = preICOTokens(weiAmount, tokens);\n', '        } else if ((accessTime >= ICOstartTime) && (accessTime <= ICOEndTime)) { \n', '            tokens = icoTokens(weiAmount, tokens, accessTime);\n', '        } else {\n', '            revert();\n', '        }\n', '        \n', '        publicSupply = publicSupply.sub(tokens);\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        token.mint(beneficiary, tokens);\n', '        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '        forwardFunds();\n', '    }\n', '\n', '    /**\n', '    * function forwardFunds - Transfer funds to wallet\n', '    */\n', '\n', '    function forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    /**\n', '    * function validPurchase - Checks the purchase is valid or not\n', '    * @return true - Purchase is withPeriod and nonZero\n', '    */\n', '\n', '    function validPurchase() internal view returns (bool) {\n', '        bool withinPeriod = now >= privateSaleStartTime && now <= ICOEndTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        return withinPeriod && nonZeroPurchase;\n', '    }\n', '\n', '    /**\n', '    * function hasEnded - Checks the ICO ends or not\n', '    * @return true - ICO Ends\n', '    */\n', '    \n', '    function hasEnded() public view returns (bool) {\n', '        return now > ICOEndTime;\n', '    }\n', '\n', '    /**\n', '    * function unsoldToken - Function used to transfer all \n', '    *               unsold public tokens to reserve supply\n', '    */\n', '\n', '    function unsoldToken() onlyOwner public {\n', '        require(hasEnded());\n', '        require(!checkUnsoldTokens);\n', '        \n', '        checkUnsoldTokens = true;\n', '        bountySupply = SafeMath.add(bountySupply, publicSupply);\n', '        publicSupply = 0;\n', '\n', '    }\n', '\n', '    /** \n', '    * function getTokenAddress - Get Token Address \n', '    */\n', '\n', '    function getTokenAddress() onlyOwner view public returns (address) {\n', '        return token;\n', '    }\n', '}\n', '\n', 'contract CappedCrowdsale is Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public cap;\n', '\n', '    constructor(uint256 _cap) public {\n', '        require(_cap > 0);\n', '        cap = _cap;\n', '    }\n', '\n', '    // overriding Crowdsale#validPurchase to add extra cap logic\n', '    // @return true if investors can buy at the moment\n', '    function validPurchase() internal view returns (bool) {\n', '        return super.validPurchase() && weiRaised.add(msg.value) <= cap;\n', '    }\n', '\n', '    // overriding Crowdsale#hasEnded to add cap logic\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return super.hasEnded() || weiRaised >= cap;\n', '    }\n', '}\n', '\n', 'contract CrowdsaleFunctions is Crowdsale {\n', '\n', ' /** \n', '  * function bountyFunds - Transfer bounty tokens via AirDrop\n', '  * @param beneficiary address where owner wants to transfer tokens\n', '  * @param tokens value of token\n', '  */\n', '\n', '    function bountyFunds(address[] beneficiary, uint256[] tokens) public onlyOwner {\n', '\n', '        for (uint256 i = 0; i < beneficiary.length; i++) {\n', '            tokens[i] = SafeMath.mul(tokens[i],1 ether); \n', '\n', '            require(beneficiary[i] != 0x0);\n', '            require(bountySupply >= tokens[i]);\n', '            \n', '            bountySupply = SafeMath.sub(bountySupply,tokens[i]);\n', '            token.mint(beneficiary[i], tokens[i]);\n', '        }\n', '    }\n', '\n', '\n', '  /** \n', '   * function grantReservedToken - Transfer advisor,team and founder tokens  \n', '   */\n', '\n', '    function grantReservedToken(address beneficiary, uint256 tokens) public onlyOwner {\n', '        require(beneficiary != 0x0);\n', '        require(reservedSupply > 0);\n', '\n', '        tokens = SafeMath.mul(tokens,1 ether);\n', '        require(reservedSupply >= tokens);\n', '        reservedSupply = SafeMath.sub(reservedSupply,tokens);\n', '        token.mint(beneficiary, tokens);\n', '    }\n', '\n', '/** \n', ' *.function transferToken - Used to transfer tokens to investors who pays us other than Ethers\n', ' * @param beneficiary - Address where owner wants to transfer tokens\n', ' * @param tokens -  Number of tokens\n', ' */\n', '    function transferToken(address beneficiary, uint256 tokens) onlyOwner public {\n', '        \n', '        require(beneficiary != 0x0);\n', '        require(publicSupply > 0);\n', '        tokens = SafeMath.mul(tokens,1 ether);\n', '        require(publicSupply >= tokens);\n', '        publicSupply = SafeMath.sub(publicSupply,tokens);\n', '        token.mint(beneficiary, tokens);\n', '    }\n', '\n', '    function addBlockListed(address user) public onlyOwner {\n', '        token.addBlockeddUser(user);\n', '    }\n', '    \n', '    function removeBlockListed(address user) public onlyOwner {\n', '        token.removeBlockeddUser(user);\n', '    }\n', '}\n', '\n', 'contract FinalizableCrowdsale is Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    bool isFinalized = false;\n', '\n', '    event Finalized();\n', '\n', '    /**\n', '    * @dev Must be called after crowdsale ends, to do some extra finalization\n', "    * work. Calls the contract's finalization function.\n", '    */\n', '    function finalize() onlyOwner public {\n', '        require(!isFinalized);\n', '        require(hasEnded());\n', '\n', '        finalization();\n', '        emit Finalized();\n', '\n', '        isFinalized = true;\n', '    }\n', '\n', '    /**\n', '    * @dev Can be overridden to add finalization logic. The overriding function\n', '    * should call super.finalization() to ensure the chain of finalization is\n', '    * executed entirely.\n', '    */\n', '    function finalization() internal view {\n', '    }\n', '}\n', '\n', 'contract Migrations {\n', '    address public owner;\n', '    uint public last_completed_migration;\n', '\n', '    modifier restricted() {\n', '        if (msg.sender == owner) _;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function setCompleted(uint completed) public restricted {\n', '        last_completed_migration = completed;\n', '    }\n', '\n', '    function upgrade(address new_address) public restricted {\n', '        Migrations upgraded = Migrations(new_address);\n', '        upgraded.setCompleted(last_completed_migration);\n', '    }\n', '}\n', '\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // minimum amount of funds to be raised in weis\n', '    uint256 public goal;\n', '    bool private _goalReached = false;\n', '    // refund vault used to hold funds while crowdsale is running\n', '    RefundVault private vault;\n', '\n', '    constructor(uint256 _goal) public {\n', '        require(_goal > 0);\n', '        vault = new RefundVault(wallet);\n', '        goal = _goal;\n', '    }\n', '\n', "    // We're overriding the fund forwarding from Crowdsale.\n", '    // In addition to sending the funds, we want to call\n', '    // the RefundVault deposit function\n', '    function forwardFunds() internal {\n', '        vault.deposit.value(msg.value)(msg.sender);\n', '    }\n', '\n', '    // if crowdsale is unsuccessful, investors can claim refunds here\n', '    function claimRefund() public {\n', '        require(isFinalized);\n', '        require(!goalReached());\n', '\n', '        vault.refund(msg.sender);\n', '    }\n', '\n', '    // vault finalization task, called when owner calls finalize()\n', '    function finalization() internal view {\n', '        if (goalReached()) {\n', '            vault.close();\n', '        } else {\n', '            vault.enableRefunds();\n', '        }\n', '        super.finalization();\n', '    }\n', '\n', '    function goalReached() public payable returns (bool) {\n', '        if (weiRaised >= goal) {\n', '            _goalReached = true;\n', '            return true;\n', '        } else if (_goalReached) {\n', '            return true;\n', '        } \n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function updateGoalCheck() onlyOwner public {\n', '        _goalReached = true;\n', '    }\n', '\n', '    function getVaultAddress() onlyOwner view public returns (address) {\n', '        return vault;\n', '    }\n', '}\n', '\n', 'contract RefundVault is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    enum State { Active, Refunding, Closed }\n', '\n', '    mapping (address => uint256) public deposited;\n', '    address public wallet;\n', '    State public state;\n', '\n', '    event Closed();\n', '    event RefundsEnabled();\n', '    event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '    constructor(address _wallet) public {\n', '        require(_wallet != 0x0);\n', '        wallet = _wallet;\n', '        state = State.Active;\n', '    }\n', '\n', '    function deposit(address investor) onlyOwner public payable {\n', '        require(state == State.Active);\n', '        deposited[investor] = deposited[investor].add(msg.value);\n', '    }\n', '\n', '    function close() onlyOwner public {\n', '        require(state == State.Active);\n', '        state = State.Closed;\n', '        emit Closed();\n', '        wallet.transfer(this.balance);\n', '    }\n', '\n', '    function enableRefunds() onlyOwner public {\n', '        require(state == State.Active);\n', '        state = State.Refunding;\n', '        emit RefundsEnabled();\n', '    }\n', '\n', '    function refund(address investor) public {\n', '        require(state == State.Refunding);\n', '        uint256 depositedValue = deposited[investor];\n', '        deposited[investor] = 0;\n', '        investor.transfer(depositedValue);\n', '        emit Refunded(investor, depositedValue);\n', '    }\n', '}']
