['pragma solidity ^0.4.23;\n', '/**\n', ' * @title SafeMath\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', ' */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'interface ERC20 {\n', '    function transfer (address _beneficiary, uint256 _tokenAmount) external returns (bool);\n', '    function mintFromICO(address _to, uint256 _amount) external  returns(bool);\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract GlowSale is Ownable {\n', '\n', '    ERC20 public token;\n', '\n', '    using SafeMath for uint;\n', '\n', '    address public backEndOperator = msg.sender;\n', '    address founders = 0x2ed2de73f7aB776A6DB15A30ad7CB8f337CF499D; // 30% - основантели проекта\n', '    address bounty = 0x7a3B004E8A68BCD6C5D0c3936D2f582Acb89E5DD; // 10% - для баунти программы\n', '    address reserve = 0xd9DADf245d04fB1566e7330be591445Ad9953476; // 10% - для резерва\n', '\n', '    mapping(address=>bool) public whitelist;\n', '\n', '    uint256 public startPreSale = now; //1529020801; // Thursday, 15-Jun-18 00:00:01 UTC\n', '    uint256 public endPreSale = 1535759999; // Friday, 31-Aug-18 23:59:59 UTC\n', '    uint256 public startMainSale = 1538352001; // Monday, 01-Oct-18 00:00:01 UTC\n', '    uint256 public endMainSale = 1554076799; // Sunday, 31-Mar-19 23:59:59 UTC\n', '\n', '    uint256 public investors; // общее количество инвесторов\n', '    uint256 public weisRaised; // - общее количество эфира собранное в период сейла\n', '\n', '    uint256 hardCapPreSale = 3200000*1e6; //  3 200 000 tokens\n', '    uint256 hardCapSale = 15000000*1e6; // 15 000 000 tokens\n', '\n', '    uint256 public preSalePrice; // 0.50 $ - цена токена на предварительной распродаже\n', '    uint256 public MainSalePrice; //1.00 $ - цена токена на основной распродаже\n', '    uint256 public dollarPrice; // цена Ether к USD\n', '\n', '    uint256 public soldTokensPreSale; // 3 200 000 - количество проданных на предварительной расопродаже токенов\n', '    uint256 public soldTokensSale; // 36 400 000 - количество проданных на основной распродаже токенов\n', '\n', '    event Finalized();\n', '    event Authorized(address wlCandidate, uint timestamp);\n', '    event Revoked(address wlCandidate, uint timestamp);\n', '\n', '    modifier isUnderHardCap() {\n', '        require(weisRaised <= hardCapSale);\n', '        _;\n', '    }\n', '\n', '    modifier backEnd() {\n', '        require(msg.sender == backEndOperator || msg.sender == owner);\n', '        _;\n', '    }\n', '    // конструктор контракта\n', '    constructor(uint256 _dollareth) public {\n', '        dollarPrice = _dollareth;\n', '        preSalePrice = (1e18/dollarPrice)/2; // 16 знаков потому что 1 цент !!!!!!!!!!!!\n', '        MainSalePrice = 1e18/dollarPrice;\n', '    }\n', '    // авторизация токена/ или изменение адреса\n', '    function setToken (ERC20 _token) public onlyOwner {\n', '        token = _token;\n', '    }\n', '    // изменение цены Ether к USD\n', '    function setDollarRate(uint256 _usdether) public onlyOwner {\n', '        dollarPrice = _usdether;\n', '        preSalePrice = (1e18/dollarPrice)/2; // 16 знаков потому что 1 цент !!!!!!!!!!!!\n', '        MainSalePrice = 1e18/dollarPrice;\n', '    }\n', '    // изменение даты начала предварительной распродажи\n', '    function setStartPreSale(uint256 newStartPreSale) public onlyOwner {\n', '        startPreSale = newStartPreSale;\n', '    }\n', '    // изменение даты окончания предварительной распродажи\n', '    function setEndPreSale(uint256 newEndPreSaled) public onlyOwner {\n', '        endPreSale = newEndPreSaled;\n', '    }\n', '    // изменение даты начала основной распродажи\n', '    function setStartSale(uint256 newStartSale) public onlyOwner {\n', '        startMainSale = newStartSale;\n', '    }\n', '    // изменение даты окончания основной распродажи\n', '    function setEndSale(uint256 newEndSaled) public onlyOwner {\n', '        endMainSale = newEndSaled;\n', '    }\n', '    // Изменение адреса оператора бекэнда\n', '    function setBackEndAddress(address newBackEndOperator) public onlyOwner {\n', '        backEndOperator = newBackEndOperator;\n', '    }\n', '\n', '    /*******************************************************************************\n', '     * Whitelist&#39;s section\n', '     */\n', '    // с сайта backEndOperator авторизует инвестора\n', '    function authorize(address wlCandidate) public backEnd  {\n', '\n', '        require(wlCandidate != address(0x0));\n', '        require(!isWhitelisted(wlCandidate));\n', '        whitelist[wlCandidate] = true;\n', '        investors++;\n', '        emit Authorized(wlCandidate, now);\n', '    }\n', '    // отмена авторизации инвестора в WL(только владелец контракта)\n', '    function revoke(address wlCandidate) public  onlyOwner {\n', '        whitelist[wlCandidate] = false;\n', '        investors--;\n', '        emit Revoked(wlCandidate, now);\n', '    }\n', '    // проверка на нахождение адреса инвестора в WL\n', '    function isWhitelisted(address wlCandidate) internal view returns(bool) {\n', '        return whitelist[wlCandidate];\n', '    }\n', '    /*******************************************************************************\n', '     * Payable&#39;s section\n', '     */\n', '\n', '    function isPreSale() public constant returns(bool) {\n', '        return now >= startPreSale && now <= endPreSale;\n', '    }\n', '\n', '    function isMainSale() public constant returns(bool) {\n', '        return now >= startMainSale && now <= endMainSale;\n', '    }\n', '    // callback функция контракта\n', '    function () public payable //isUnderHardCap\n', '    {\n', '        require(isWhitelisted(msg.sender));\n', '\n', '        if(isPreSale()) {\n', '            preSale(msg.sender, msg.value);\n', '        }\n', '\n', '        else if (isMainSale()) {\n', '            mainSale(msg.sender, msg.value);\n', '        }\n', '\n', '        else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    // выпуск токенов в период предварительной распродажи\n', '    function preSale(address _investor, uint256 _value) internal {\n', '\n', '        uint256 tokens = _value.mul(1e6).div(preSalePrice); // 1e18*1e18/\n', '\n', '        token.mintFromICO(_investor, tokens);\n', '\n', '        uint256 tokensFounders = tokens.mul(3).div(5); // 3/5\n', '        token.mintFromICO(founders, tokensFounders);\n', '\n', '        uint256 tokensBoynty = tokens.div(5); // 1/5\n', '        token.mintFromICO(bounty, tokensBoynty);\n', '\n', '        uint256 tokenReserve = tokens.div(5); // 1/5\n', '        token.mintFromICO(reserve, tokenReserve);\n', '\n', '        weisRaised = weisRaised.add(msg.value);\n', '        soldTokensPreSale = soldTokensPreSale.add(tokens);\n', '\n', '        require(soldTokensPreSale <= hardCapPreSale);\n', '    }\n', '\n', '    // выпуск токенов в период основной распродажи\n', '    function mainSale(address _investor, uint256 _value) internal {\n', '        uint256 tokens = _value.mul(1e6).div(MainSalePrice); // 1e18*1e18/\n', '\n', '        token.mintFromICO(_investor, tokens);\n', '\n', '        uint256 tokensFounders = tokens.mul(3).div(5); //3/5\n', '        token.mintFromICO(founders, tokensFounders);\n', '\n', '        uint256 tokensBoynty = tokens.div(5); // 1/5\n', '        token.mintFromICO(bounty, tokensBoynty);\n', '\n', '        uint256 tokenReserve = tokens.div(5); // 1/5\n', '        token.mintFromICO(reserve, tokenReserve);\n', '\n', '        weisRaised = weisRaised.add(msg.value);\n', '        soldTokensSale = soldTokensSale.add(tokens);\n', '\n', '        require(soldTokensSale <= hardCapSale);\n', '    }\n', '\n', '    // Функция отправки токенов получателям в ручном режиме(только владелец контракта)\n', '    function mintManual(address _recipient, uint256 _value) public backEnd {\n', '        token.mintFromICO(_recipient, _value);\n', '\n', '        uint256 tokensFounders = _value.mul(3).div(5);  // 3/5\n', '        token.mintFromICO(founders, tokensFounders);\n', '\n', '        uint256 tokensBoynty = _value.div(5);  // 1/5\n', '        token.mintFromICO(bounty, tokensBoynty);\n', '\n', '        uint256 tokenReserve = _value.div(5); // 1/5\n', '        token.mintFromICO(reserve, tokenReserve);\n', '        soldTokensSale = soldTokensSale.add(_value);\n', '        //require(soldTokensPreSale <= hardCapPreSale);\n', '        //require(soldTokensSale <= hardCapSale);\n', '    }\n', '\n', '    // Отправка эфира с контракта\n', '    function transferEthFromContract(address _to, uint256 amount) public onlyOwner {\n', '        _to.transfer(amount);\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '/**\n', ' * @title SafeMath\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', ' */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'interface ERC20 {\n', '    function transfer (address _beneficiary, uint256 _tokenAmount) external returns (bool);\n', '    function mintFromICO(address _to, uint256 _amount) external  returns(bool);\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract GlowSale is Ownable {\n', '\n', '    ERC20 public token;\n', '\n', '    using SafeMath for uint;\n', '\n', '    address public backEndOperator = msg.sender;\n', '    address founders = 0x2ed2de73f7aB776A6DB15A30ad7CB8f337CF499D; // 30% - основантели проекта\n', '    address bounty = 0x7a3B004E8A68BCD6C5D0c3936D2f582Acb89E5DD; // 10% - для баунти программы\n', '    address reserve = 0xd9DADf245d04fB1566e7330be591445Ad9953476; // 10% - для резерва\n', '\n', '    mapping(address=>bool) public whitelist;\n', '\n', '    uint256 public startPreSale = now; //1529020801; // Thursday, 15-Jun-18 00:00:01 UTC\n', '    uint256 public endPreSale = 1535759999; // Friday, 31-Aug-18 23:59:59 UTC\n', '    uint256 public startMainSale = 1538352001; // Monday, 01-Oct-18 00:00:01 UTC\n', '    uint256 public endMainSale = 1554076799; // Sunday, 31-Mar-19 23:59:59 UTC\n', '\n', '    uint256 public investors; // общее количество инвесторов\n', '    uint256 public weisRaised; // - общее количество эфира собранное в период сейла\n', '\n', '    uint256 hardCapPreSale = 3200000*1e6; //  3 200 000 tokens\n', '    uint256 hardCapSale = 15000000*1e6; // 15 000 000 tokens\n', '\n', '    uint256 public preSalePrice; // 0.50 $ - цена токена на предварительной распродаже\n', '    uint256 public MainSalePrice; //1.00 $ - цена токена на основной распродаже\n', '    uint256 public dollarPrice; // цена Ether к USD\n', '\n', '    uint256 public soldTokensPreSale; // 3 200 000 - количество проданных на предварительной расопродаже токенов\n', '    uint256 public soldTokensSale; // 36 400 000 - количество проданных на основной распродаже токенов\n', '\n', '    event Finalized();\n', '    event Authorized(address wlCandidate, uint timestamp);\n', '    event Revoked(address wlCandidate, uint timestamp);\n', '\n', '    modifier isUnderHardCap() {\n', '        require(weisRaised <= hardCapSale);\n', '        _;\n', '    }\n', '\n', '    modifier backEnd() {\n', '        require(msg.sender == backEndOperator || msg.sender == owner);\n', '        _;\n', '    }\n', '    // конструктор контракта\n', '    constructor(uint256 _dollareth) public {\n', '        dollarPrice = _dollareth;\n', '        preSalePrice = (1e18/dollarPrice)/2; // 16 знаков потому что 1 цент !!!!!!!!!!!!\n', '        MainSalePrice = 1e18/dollarPrice;\n', '    }\n', '    // авторизация токена/ или изменение адреса\n', '    function setToken (ERC20 _token) public onlyOwner {\n', '        token = _token;\n', '    }\n', '    // изменение цены Ether к USD\n', '    function setDollarRate(uint256 _usdether) public onlyOwner {\n', '        dollarPrice = _usdether;\n', '        preSalePrice = (1e18/dollarPrice)/2; // 16 знаков потому что 1 цент !!!!!!!!!!!!\n', '        MainSalePrice = 1e18/dollarPrice;\n', '    }\n', '    // изменение даты начала предварительной распродажи\n', '    function setStartPreSale(uint256 newStartPreSale) public onlyOwner {\n', '        startPreSale = newStartPreSale;\n', '    }\n', '    // изменение даты окончания предварительной распродажи\n', '    function setEndPreSale(uint256 newEndPreSaled) public onlyOwner {\n', '        endPreSale = newEndPreSaled;\n', '    }\n', '    // изменение даты начала основной распродажи\n', '    function setStartSale(uint256 newStartSale) public onlyOwner {\n', '        startMainSale = newStartSale;\n', '    }\n', '    // изменение даты окончания основной распродажи\n', '    function setEndSale(uint256 newEndSaled) public onlyOwner {\n', '        endMainSale = newEndSaled;\n', '    }\n', '    // Изменение адреса оператора бекэнда\n', '    function setBackEndAddress(address newBackEndOperator) public onlyOwner {\n', '        backEndOperator = newBackEndOperator;\n', '    }\n', '\n', '    /*******************************************************************************\n', "     * Whitelist's section\n", '     */\n', '    // с сайта backEndOperator авторизует инвестора\n', '    function authorize(address wlCandidate) public backEnd  {\n', '\n', '        require(wlCandidate != address(0x0));\n', '        require(!isWhitelisted(wlCandidate));\n', '        whitelist[wlCandidate] = true;\n', '        investors++;\n', '        emit Authorized(wlCandidate, now);\n', '    }\n', '    // отмена авторизации инвестора в WL(только владелец контракта)\n', '    function revoke(address wlCandidate) public  onlyOwner {\n', '        whitelist[wlCandidate] = false;\n', '        investors--;\n', '        emit Revoked(wlCandidate, now);\n', '    }\n', '    // проверка на нахождение адреса инвестора в WL\n', '    function isWhitelisted(address wlCandidate) internal view returns(bool) {\n', '        return whitelist[wlCandidate];\n', '    }\n', '    /*******************************************************************************\n', "     * Payable's section\n", '     */\n', '\n', '    function isPreSale() public constant returns(bool) {\n', '        return now >= startPreSale && now <= endPreSale;\n', '    }\n', '\n', '    function isMainSale() public constant returns(bool) {\n', '        return now >= startMainSale && now <= endMainSale;\n', '    }\n', '    // callback функция контракта\n', '    function () public payable //isUnderHardCap\n', '    {\n', '        require(isWhitelisted(msg.sender));\n', '\n', '        if(isPreSale()) {\n', '            preSale(msg.sender, msg.value);\n', '        }\n', '\n', '        else if (isMainSale()) {\n', '            mainSale(msg.sender, msg.value);\n', '        }\n', '\n', '        else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    // выпуск токенов в период предварительной распродажи\n', '    function preSale(address _investor, uint256 _value) internal {\n', '\n', '        uint256 tokens = _value.mul(1e6).div(preSalePrice); // 1e18*1e18/\n', '\n', '        token.mintFromICO(_investor, tokens);\n', '\n', '        uint256 tokensFounders = tokens.mul(3).div(5); // 3/5\n', '        token.mintFromICO(founders, tokensFounders);\n', '\n', '        uint256 tokensBoynty = tokens.div(5); // 1/5\n', '        token.mintFromICO(bounty, tokensBoynty);\n', '\n', '        uint256 tokenReserve = tokens.div(5); // 1/5\n', '        token.mintFromICO(reserve, tokenReserve);\n', '\n', '        weisRaised = weisRaised.add(msg.value);\n', '        soldTokensPreSale = soldTokensPreSale.add(tokens);\n', '\n', '        require(soldTokensPreSale <= hardCapPreSale);\n', '    }\n', '\n', '    // выпуск токенов в период основной распродажи\n', '    function mainSale(address _investor, uint256 _value) internal {\n', '        uint256 tokens = _value.mul(1e6).div(MainSalePrice); // 1e18*1e18/\n', '\n', '        token.mintFromICO(_investor, tokens);\n', '\n', '        uint256 tokensFounders = tokens.mul(3).div(5); //3/5\n', '        token.mintFromICO(founders, tokensFounders);\n', '\n', '        uint256 tokensBoynty = tokens.div(5); // 1/5\n', '        token.mintFromICO(bounty, tokensBoynty);\n', '\n', '        uint256 tokenReserve = tokens.div(5); // 1/5\n', '        token.mintFromICO(reserve, tokenReserve);\n', '\n', '        weisRaised = weisRaised.add(msg.value);\n', '        soldTokensSale = soldTokensSale.add(tokens);\n', '\n', '        require(soldTokensSale <= hardCapSale);\n', '    }\n', '\n', '    // Функция отправки токенов получателям в ручном режиме(только владелец контракта)\n', '    function mintManual(address _recipient, uint256 _value) public backEnd {\n', '        token.mintFromICO(_recipient, _value);\n', '\n', '        uint256 tokensFounders = _value.mul(3).div(5);  // 3/5\n', '        token.mintFromICO(founders, tokensFounders);\n', '\n', '        uint256 tokensBoynty = _value.div(5);  // 1/5\n', '        token.mintFromICO(bounty, tokensBoynty);\n', '\n', '        uint256 tokenReserve = _value.div(5); // 1/5\n', '        token.mintFromICO(reserve, tokenReserve);\n', '        soldTokensSale = soldTokensSale.add(_value);\n', '        //require(soldTokensPreSale <= hardCapPreSale);\n', '        //require(soldTokensSale <= hardCapSale);\n', '    }\n', '\n', '    // Отправка эфира с контракта\n', '    function transferEthFromContract(address _to, uint256 amount) public onlyOwner {\n', '        _to.transfer(amount);\n', '    }\n', '}']
