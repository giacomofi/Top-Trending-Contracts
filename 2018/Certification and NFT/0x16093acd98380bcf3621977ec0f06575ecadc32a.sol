['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC165\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', ' */\n', 'interface ERC165 {\n', '\n', '  /**\n', '   * @notice Query if a contract implements an interface\n', '   * @param _interfaceId The interface identifier, as specified in ERC-165\n', '   * @dev Interface identification is specified in ERC-165. This function\n', '   * uses less than 30,000 gas.\n', '   */\n', '  function supportsInterface(bytes4 _interfaceId)\n', '    external\n', '    view\n', '    returns (bool);\n', '}\n', '\n', '\n', 'contract Activatable {\n', '    bool public activated;\n', '\n', '    modifier whenActivated {\n', '        require(activated);\n', '        _;\n', '    }\n', '\n', '    modifier whenNotActivated {\n', '        require(!activated);\n', '        _;\n', '    }\n', '\n', '    function activate() public returns (bool) {\n', '        activated = true;\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SupportsInterfaceWithLookup\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Implements ERC165 using a lookup table.\n', ' */\n', 'contract SupportsInterfaceWithLookup is ERC165 {\n', '\n', '  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n', '  /**\n', '   * 0x01ffc9a7 ===\n', "   *   bytes4(keccak256('supportsInterface(bytes4)'))\n", '   */\n', '\n', '  /**\n', "   * @dev a mapping of interface id to whether or not it's supported\n", '   */\n', '  mapping(bytes4 => bool) internal supportedInterfaces;\n', '\n', '  /**\n', '   * @dev A contract implementing SupportsInterfaceWithLookup\n', '   * implement ERC165 itself\n', '   */\n', '  constructor()\n', '    public\n', '  {\n', '    _registerInterface(InterfaceId_ERC165);\n', '  }\n', '\n', '  /**\n', '   * @dev implement supportsInterface(bytes4) using a lookup table\n', '   */\n', '  function supportsInterface(bytes4 _interfaceId)\n', '    external\n', '    view\n', '    returns (bool)\n', '  {\n', '    return supportedInterfaces[_interfaceId];\n', '  }\n', '\n', '  /**\n', '   * @dev private method for registering an interface\n', '   */\n', '  function _registerInterface(bytes4 _interfaceId)\n', '    internal\n', '  {\n', '    require(_interfaceId != 0xffffffff);\n', '    supportedInterfaces[_interfaceId] = true;\n', '  }\n', '}\n', '\n', '\n', 'contract Contract is Ownable, SupportsInterfaceWithLookup {\n', '    /**\n', '     * @notice this.owner.selector ^ this.renounceOwnership.selector ^ this.transferOwnership.selector\n', '        ^ this.template.selector\n', '     */\n', '    bytes4 public constant InterfaceId_Contract = 0x6125ede5;\n', '\n', '    Template public template;\n', '\n', '    constructor(address _owner) public {\n', '        require(_owner != address(0));\n', '\n', '        template = Template(msg.sender);\n', '        owner = _owner;\n', '\n', '        _registerInterface(InterfaceId_Contract);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Strategy is Contract, Activatable {\n', '    /**\n', '     * @notice this.owner.selector ^ this.renounceOwnership.selector ^ this.transferOwnership.selector\n', '        ^ this.template.selector ^ this.activate.selector\n', '     */\n', '    bytes4 public constant InterfaceId_Strategy = 0x6e301925;\n', '\n', '    constructor(address _owner) public Contract(_owner) {\n', '        _registerInterface(InterfaceId_Strategy);\n', '    }\n', '\n', '    function activate() onlyOwner public returns (bool) {\n', '        return super.activate();\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract SaleStrategy is Strategy {\n', '    /**\n', '     * @notice this.owner.selector ^ this.renounceOwnership.selector ^ this.transferOwnership.selector\n', '        ^ this.template.selector ^ this.activate.selector ^ this.deactivate.selector\n', '        ^ this.started.selector ^ this.successful.selector ^ this.finished.selector\n', '     */\n', '    bytes4 public constant InterfaceId_SaleStrategy = 0x04c8123d;\n', '\n', '    Sale public sale;\n', '\n', '    constructor(address _owner, Sale _sale) public Strategy(_owner) {\n', '        sale = _sale;\n', '\n', '        _registerInterface(InterfaceId_SaleStrategy);\n', '    }\n', '\n', '    modifier whenSaleActivated {\n', '        require(sale.activated());\n', '        _;\n', '    }\n', '\n', '    modifier whenSaleNotActivated {\n', '        require(!sale.activated());\n', '        _;\n', '    }\n', '\n', '    function activate() whenSaleNotActivated public returns (bool) {\n', '        return super.activate();\n', '    }\n', '\n', '    function deactivate() onlyOwner whenSaleNotActivated public returns (bool) {\n', '        activated = false;\n', '        return true;\n', '    }\n', '\n', '    function started() public view returns (bool);\n', '\n', '    function successful() public view returns (bool);\n', '\n', '    function finished() public view returns (bool);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Basic is ERC165 {\n', '\n', '  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\n', '  /*\n', '   * 0x80ac58cd ===\n', "   *   bytes4(keccak256('balanceOf(address)')) ^\n", "   *   bytes4(keccak256('ownerOf(uint256)')) ^\n", "   *   bytes4(keccak256('approve(address,uint256)')) ^\n", "   *   bytes4(keccak256('getApproved(uint256)')) ^\n", "   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n", "   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n", "   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n", "   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n", "   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n", '   */\n', '\n', '  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\n', '  /*\n', '   * 0x4f558e79 ===\n', "   *   bytes4(keccak256('exists(uint256)'))\n", '   */\n', '\n', '  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n', '  /**\n', '   * 0x780e9d63 ===\n', "   *   bytes4(keccak256('totalSupply()')) ^\n", "   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n", "   *   bytes4(keccak256('tokenByIndex(uint256)'))\n", '   */\n', '\n', '  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n', '  /**\n', '   * 0x5b5e139f ===\n', "   *   bytes4(keccak256('name()')) ^\n", "   *   bytes4(keccak256('symbol()')) ^\n", "   *   bytes4(keccak256('tokenURI(uint256)'))\n", '   */\n', '\n', '  event Transfer(\n', '    address indexed _from,\n', '    address indexed _to,\n', '    uint256 indexed _tokenId\n', '  );\n', '  event Approval(\n', '    address indexed _owner,\n', '    address indexed _approved,\n', '    uint256 indexed _tokenId\n', '  );\n', '  event ApprovalForAll(\n', '    address indexed _owner,\n', '    address indexed _operator,\n', '    bool _approved\n', '  );\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function exists(uint256 _tokenId) public view returns (bool _exists);\n', '\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function getApproved(uint256 _tokenId)\n', '    public view returns (address _operator);\n', '\n', '  function setApprovalForAll(address _operator, bool _approved) public;\n', '  function isApprovedForAll(address _owner, address _operator)\n', '    public view returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n', '    public;\n', '\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public;\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Enumerable is ERC721Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function tokenOfOwnerByIndex(\n', '    address _owner,\n', '    uint256 _index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256 _tokenId);\n', '\n', '  function tokenByIndex(uint256 _index) public view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Metadata is ERC721Basic {\n', '  function name() external view returns (string _name);\n', '  function symbol() external view returns (string _symbol);\n', '  function tokenURI(uint256 _tokenId) public view returns (string);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'contract ERC721Receiver {\n', '  /**\n', '   * @dev Magic value to be returned upon successful reception of an NFT\n', '   *  Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`,\n', '   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '   */\n', '  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient\n', '   * after a `safetransfer`. This function MAY throw to revert and reject the\n', '   * transfer. Return of other than the magic value MUST result in the\n', '   * transaction being reverted.\n', '   * Note: the contract address is always the message sender.\n', '   * @param _operator The address which called `safeTransferFrom` function\n', '   * @param _from The address which previously owned the token\n', '   * @param _tokenId The NFT identifier which is being transferred\n', '   * @param _data Additional data with no specified format\n', '   * @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '   */\n', '  function onERC721Received(\n', '    address _operator,\n', '    address _from,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '    returns(bytes4);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   * as the code is not actually created until after the constructor finishes.\n', '   * @param _addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address _addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(_addr) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n', '\n', '  using SafeMath for uint256;\n', '  using AddressUtils for address;\n', '\n', '  // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) internal tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) internal tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping (address => uint256) internal ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping (address => mapping (address => bool)) internal operatorApprovals;\n', '\n', '  constructor()\n', '    public\n', '  {\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(InterfaceId_ERC721);\n', '    _registerInterface(InterfaceId_ERC721Exists);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address\n', '   * @param _owner address to query the balance of\n', '   * @return uint256 representing the amount owned by the passed address\n', '   */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    require(_owner != address(0));\n', '    return ownedTokensCount[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the owner of the specified token ID\n', '   * @param _tokenId uint256 ID of the token to query the owner of\n', '   * @return owner address currently marked as the owner of the given token ID\n', '   */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the specified token exists\n', '   * @param _tokenId uint256 ID of the token to query the existence of\n', '   * @return whether the token exists\n', '   */\n', '  function exists(uint256 _tokenId) public view returns (bool) {\n', '    address owner = tokenOwner[_tokenId];\n', '    return owner != address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Approves another address to transfer the given token ID\n', '   * The zero address indicates there is no approved address.\n', '   * There can only be one approved address per token at a given time.\n', '   * Can only be called by the token owner or an approved operator.\n', '   * @param _to address to be approved for the given token ID\n', '   * @param _tokenId uint256 ID of the token to be approved\n', '   */\n', '  function approve(address _to, uint256 _tokenId) public {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '    tokenApprovals[_tokenId] = _to;\n', '    emit Approval(owner, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for the given token ID\n', '   */\n', '  function getApproved(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * An operator is allowed to transfer all tokens of the sender on their behalf\n', '   * @param _to operator address to set the approval\n', '   * @param _approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(address _to, bool _approved) public {\n', '    require(_to != msg.sender);\n', '    operatorApprovals[msg.sender][_to] = _approved;\n', '    emit ApprovalForAll(msg.sender, _to, _approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param _owner owner address which you want to query the approval of\n', '   * @param _operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(\n', '    address _owner,\n', '    address _operator\n', '  )\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return operatorApprovals[_owner][_operator];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers the ownership of a given token ID to another address\n', '   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '  {\n', '    require(isApprovedOrOwner(msg.sender, _tokenId));\n', '    require(_from != address(0));\n', '    require(_to != address(0));\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeTokenFrom(_from, _tokenId);\n', '    addTokenTo(_to, _tokenId);\n', '\n', '    emit Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   *\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '  {\n', '    // solium-disable-next-line arg-overflow\n', '    safeTransferFrom(_from, _to, _tokenId, "");\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '  {\n', '    transferFrom(_from, _to, _tokenId);\n', '    // solium-disable-next-line arg-overflow\n', '    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the given spender can transfer a given token ID\n', '   * @param _spender address of the spender to query\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @return bool whether the msg.sender is approved for the given token ID,\n', '   *  is an operator of the owner, or is the owner of the token\n', '   */\n', '  function isApprovedOrOwner(\n', '    address _spender,\n', '    uint256 _tokenId\n', '  )\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    address owner = ownerOf(_tokenId);\n', '    // Disable solium check because of\n', '    // https://github.com/duaraghav8/Solium/issues/175\n', '    // solium-disable-next-line operator-whitespace\n', '    return (\n', '      _spender == owner ||\n', '      getApproved(_tokenId) == _spender ||\n', '      isApprovedForAll(owner, _spender)\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param _to The address that will own the minted token\n', '   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    addTokenTo(_to, _tokenId);\n', '    emit Transfer(address(0), _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    clearApproval(_owner, _tokenId);\n', '    removeTokenFrom(_owner, _tokenId);\n', '    emit Transfer(_owner, address(0), _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to clear current approval of a given token ID\n', '   * Reverts if the given address is not indeed the owner of the token\n', '   * @param _owner owner of the token\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function clearApproval(address _owner, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    if (tokenApprovals[_tokenId] != address(0)) {\n', '      tokenApprovals[_tokenId] = address(0);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param _to address representing the new owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _from);\n', '    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n', '    tokenOwner[_tokenId] = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onERC721Received` on a target address\n', '   * The call is not executed if the target address is not a contract\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _to target address that will receive the tokens\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function checkAndCallSafeTransfer(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    if (!_to.isContract()) {\n', '      return true;\n', '    }\n', '    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n', '      msg.sender, _from, _tokenId, _data);\n', '    return (retval == ERC721_RECEIVED);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n', '\n', '  // Token name\n', '  string internal name_;\n', '\n', '  // Token symbol\n', '  string internal symbol_;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping(address => uint256[]) internal ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] internal allTokens;\n', '\n', '  // Mapping from token id to position in the allTokens array\n', '  mapping(uint256 => uint256) internal allTokensIndex;\n', '\n', '  // Optional mapping for token URIs\n', '  mapping(uint256 => string) internal tokenURIs;\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  constructor(string _name, string _symbol) public {\n', '    name_ = _name;\n', '    symbol_ = _symbol;\n', '\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(InterfaceId_ERC721Enumerable);\n', '    _registerInterface(InterfaceId_ERC721Metadata);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token name\n', '   * @return string representing the token name\n', '   */\n', '  function name() external view returns (string) {\n', '    return name_;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token symbol\n', '   * @return string representing the token symbol\n', '   */\n', '  function symbol() external view returns (string) {\n', '    return symbol_;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns an URI for a given token ID\n', '   * Throws if the token ID does not exist. May return an empty string.\n', '   * @param _tokenId uint256 ID of the token to query\n', '   */\n', '  function tokenURI(uint256 _tokenId) public view returns (string) {\n', '    require(exists(_tokenId));\n', '    return tokenURIs[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '   * @param _owner address owning the tokens list to be accessed\n', '   * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '   */\n', '  function tokenOfOwnerByIndex(\n', '    address _owner,\n', '    uint256 _index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    require(_index < balanceOf(_owner));\n', '    return ownedTokens[_owner][_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the total amount of tokens stored by the contract\n', '   * @return uint256 representing the total amount of tokens\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return allTokens.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of all the tokens in this contract\n', '   * Reverts if the index is greater or equal to the total number of tokens\n', '   * @param _index uint256 representing the index to be accessed of the tokens list\n', '   * @return uint256 token ID at the given index of the tokens list\n', '   */\n', '  function tokenByIndex(uint256 _index) public view returns (uint256) {\n', '    require(_index < totalSupply());\n', '    return allTokens[_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to set the token URI for a given token\n', '   * Reverts if the token ID does not exist\n', '   * @param _tokenId uint256 ID of the token to set its URI\n', '   * @param _uri string URI to assign\n', '   */\n', '  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n', '    require(exists(_tokenId));\n', '    tokenURIs[_tokenId] = _uri;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param _to address representing the new owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    super.addTokenTo(_to, _tokenId);\n', '    uint256 length = ownedTokens[_to].length;\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    super.removeTokenFrom(_from, _tokenId);\n', '\n', '    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n', '    // then delete the last slot.\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    // This also deletes the contents at the last position of the array\n', '    ownedTokens[_from].length--;\n', '\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param _to address the beneficiary that will own the minted token\n', '   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    super._mint(_to, _tokenId);\n', '\n', '    allTokensIndex[_tokenId] = allTokens.length;\n', '    allTokens.push(_tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param _owner owner of the token to burn\n', '   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    super._burn(_owner, _tokenId);\n', '\n', '    // Clear metadata (if any)\n', '    if (bytes(tokenURIs[_tokenId]).length != 0) {\n', '      delete tokenURIs[_tokenId];\n', '    }\n', '\n', '    // Reorg all tokens array\n', '    uint256 tokenIndex = allTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = allTokens.length.sub(1);\n', '    uint256 lastToken = allTokens[lastTokenIndex];\n', '\n', '    allTokens[tokenIndex] = lastToken;\n', '    allTokens[lastTokenIndex] = 0;\n', '\n', '    allTokens.length--;\n', '    allTokensIndex[_tokenId] = 0;\n', '    allTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    public\n', '    hasMintPermission\n', '    canMint\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public onlyOwner canMint returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title DetailedERC20 token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '\n', 'contract Boost is MintableToken, DetailedERC20("Boost", "BST", 18) {\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Template\n', ' * @notice Template instantiates `Contract`s of the same form.\n', ' */\n', 'contract Template is Ownable, SupportsInterfaceWithLookup {\n', '    /**\n', '     * @notice this.owner.selector ^ this.renounceOwnership.selector ^ this.transferOwnership.selector\n', '        ^ this.bytecodeHash.selector ^ this.price.selector ^ this.beneficiary.selector\n', '        ^ this.name.selector ^ this.description.selector ^ this.setNameAndDescription.selector\n', '        ^ this.instantiate.selector\n', '     */\n', '    bytes4 public constant InterfaceId_Template = 0xd48445ff;\n', '\n', '    mapping(string => string) nameOfLocale;\n', '    mapping(string => string) descriptionOfLocale;\n', '    /**\n', '     * @notice Hash of EVM bytecode to be instantiated.\n', '     */\n', '    bytes32 public bytecodeHash;\n', '    /**\n', '     * @notice Price to pay when instantiating\n', '     */\n', '    uint public price;\n', '    /**\n', '     * @notice Address to receive payment\n', '     */\n', '    address public beneficiary;\n', '\n', '    /**\n', '     * @notice Logged when a new `Contract` instantiated.\n', '     */\n', '    event Instantiated(address indexed creator, address indexed contractAddress);\n', '\n', '    /**\n', '     * @param _bytecodeHash Hash of EVM bytecode\n', '     * @param _price Price of instantiating in wei\n', '     * @param _beneficiary Address to transfer _price when instantiating\n', '     */\n', '    constructor(\n', '        bytes32 _bytecodeHash,\n', '        uint _price,\n', '        address _beneficiary\n', '    ) public {\n', '        bytecodeHash = _bytecodeHash;\n', '        price = _price;\n', '        beneficiary = _beneficiary;\n', '        if (price > 0) {\n', '            require(beneficiary != address(0));\n', '        }\n', '\n', '        _registerInterface(InterfaceId_Template);\n', '    }\n', '\n', '    /**\n', '     * @param _locale IETF language tag(https://en.wikipedia.org/wiki/IETF_language_tag)\n', '     * @return Name in `_locale`.\n', '     */\n', '    function name(string _locale) public view returns (string) {\n', '        return nameOfLocale[_locale];\n', '    }\n', '\n', '    /**\n', '     * @param _locale IETF language tag(https://en.wikipedia.org/wiki/IETF_language_tag)\n', '     * @return Description in `_locale`.\n', '     */\n', '    function description(string _locale) public view returns (string) {\n', '        return descriptionOfLocale[_locale];\n', '    }\n', '\n', '    /**\n', '     * @param _locale IETF language tag(https://en.wikipedia.org/wiki/IETF_language_tag)\n', '     * @param _name Name to set\n', '     * @param _description Description to set\n', '     */\n', '    function setNameAndDescription(string _locale, string _name, string _description) public onlyOwner {\n', '        nameOfLocale[_locale] = _name;\n', '        descriptionOfLocale[_locale] = _description;\n', '    }\n', '\n', '    /**\n', '     * @notice `msg.sender` is passed as first argument for the newly created `Contract`.\n', '     * @param _bytecode Bytecode corresponding to `bytecodeHash`\n', '     * @param _args If arguments where passed to this function, those will be appended to the arguments for `Contract`.\n', "     * @return Newly created contract account's address\n", '     */\n', '    function instantiate(bytes _bytecode, bytes _args) public payable returns (address contractAddress) {\n', '        require(bytecodeHash == keccak256(_bytecode));\n', '        bytes memory calldata = abi.encodePacked(_bytecode, _args);\n', '        assembly {\n', '            contractAddress := create(0, add(calldata, 0x20), mload(calldata))\n', '        }\n', '        if (contractAddress == address(0)) {\n', '            revert("Cannot instantiate contract");\n', '        } else {\n', '            Contract c = Contract(contractAddress);\n', '            // InterfaceId_ERC165\n', '            require(c.supportsInterface(0x01ffc9a7));\n', '            // InterfaceId_Contract\n', '            require(c.supportsInterface(0x6125ede5));\n', '\n', '            if (price > 0) {\n', '                require(msg.value == price);\n', '                beneficiary.transfer(msg.value);\n', '            }\n', '            emit Instantiated(msg.sender, contractAddress);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract StrategyTemplate is Template {\n', '    constructor(\n', '        bytes32 _bytecodeHash,\n', '        uint _price,\n', '        address _beneficiary\n', '    ) public\n', '    Template(\n', '        _bytecodeHash,\n', '        _price,\n', '        _beneficiary\n', '    ) {\n', '    }\n', '\n', '    function instantiate(bytes _bytecode, bytes _args) public payable returns (address contractAddress) {\n', '        Strategy strategy = Strategy(super.instantiate(_bytecode, _args));\n', '        // InterfaceId_Strategy\n', '        require(strategy.supportsInterface(0x6e301925));\n', '        return strategy;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract SaleStrategyTemplate is StrategyTemplate {\n', '    constructor(\n', '        bytes32 _bytecodeHash,\n', '        uint _price,\n', '        address _beneficiary\n', '    ) public\n', '    StrategyTemplate(\n', '        _bytecodeHash,\n', '        _price,\n', '        _beneficiary\n', '    ) {\n', '    }\n', '\n', '    function instantiate(bytes _bytecode, bytes _args) public payable returns (address contractAddress) {\n', '        SaleStrategy strategy = SaleStrategy(super.instantiate(_bytecode, _args));\n', '        // InterfaceId_SaleStrategy\n', '        require(strategy.supportsInterface(0x04c8123d));\n', '        return strategy;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract Sale is Contract, Activatable {\n', '    using SafeMath for uint;\n', '\n', '    /**\n', '     * @notice this.owner.selector ^ this.renounceOwnership.selector ^ this.transferOwnership.selector\n', '        ^ this.template.selector ^ this.activate.selector\n', '        ^ this.projectName.selector ^ this.projectSummary.selector ^ this.projectDescription.selector\n', '        ^ this.logoUrl.selector ^ this.coverImageUrl.selector ^ this.websiteUrl.selector ^ this.whitepaperUrl.selector\n', '        ^ this.name.selector ^ this.weiRaised.selector ^ this.withdrawn.selector ^ this.ready.selector\n', '        ^ this.started.selector ^ this.successful.selector ^ this.finished.selector ^ this.paymentOf.selector\n', '        ^ this.update.selector ^ this.addStrategy.selector ^ this.numberOfStrategies.selector ^ this.strategyAt.selector\n', '        ^ this.numberOfActivatedStrategies.selector ^ this.activatedStrategyAt.selector\n', '        ^ this.withdraw.selector ^ this.claimRefund.selector\n', '     */\n', '    bytes4 public constant InterfaceId_Sale = 0x8139792d;\n', '\n', '    string public projectName;\n', '    string public projectSummary;\n', '    string public projectDescription;\n', '    string public logoUrl;\n', '    string public coverImageUrl;\n', '    string public websiteUrl;\n', '    string public whitepaperUrl;\n', '    string public name;\n', '\n', '    uint256 public weiRaised;\n', '    bool public withdrawn;\n', '\n', '    SaleStrategy[] strategies;\n', '    SaleStrategy[] activatedStrategies;\n', '    mapping(address => uint256) paymentOfPurchaser;\n', '\n', '    constructor(\n', '        address _owner,\n', '        string _projectName,\n', '        string _name\n', '    ) public Contract(_owner) {\n', '        projectName = _projectName;\n', '        name = _name;\n', '\n', '        _registerInterface(InterfaceId_Sale);\n', '    }\n', '\n', '    function update(\n', '        string _projectName,\n', '        string _projectSummary,\n', '        string _projectDescription,\n', '        string _logoUrl,\n', '        string _coverImageUrl,\n', '        string _websiteUrl,\n', '        string _whitepaperUrl,\n', '        string _name\n', '    ) public onlyOwner whenNotActivated {\n', '        projectName = _projectName;\n', '        projectSummary = _projectSummary;\n', '        projectDescription = _projectDescription;\n', '        logoUrl = _logoUrl;\n', '        coverImageUrl = _coverImageUrl;\n', '        websiteUrl = _websiteUrl;\n', '        whitepaperUrl = _whitepaperUrl;\n', '        name = _name;\n', '    }\n', '\n', '    function addStrategy(SaleStrategyTemplate _template, bytes _bytecode) onlyOwner whenNotActivated public payable {\n', '        // InterfaceId_ERC165\n', '        require(_template.supportsInterface(0x01ffc9a7));\n', '        // InterfaceId_Template\n', '        require(_template.supportsInterface(0xd48445ff));\n', '\n', '        require(_isUniqueStrategy(_template));\n', '\n', '        bytes memory args = abi.encode(msg.sender, address(this));\n', '        SaleStrategy strategy = SaleStrategy(_template.instantiate.value(msg.value)(_bytecode, args));\n', '        strategies.push(strategy);\n', '    }\n', '\n', '    function _isUniqueStrategy(SaleStrategyTemplate _template) private view returns (bool) {\n', '        for (uint i = 0; i < strategies.length; i++) {\n', '            SaleStrategy strategy = strategies[i];\n', '            if (address(strategy.template()) == address(_template)) {\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function numberOfStrategies() public view returns (uint256) {\n', '        return strategies.length;\n', '    }\n', '\n', '    function strategyAt(uint256 index) public view returns (address) {\n', '        return strategies[index];\n', '    }\n', '\n', '    function numberOfActivatedStrategies() public view returns (uint256) {\n', '        return activatedStrategies.length;\n', '    }\n', '\n', '    function activatedStrategyAt(uint256 index) public view returns (address) {\n', '        return activatedStrategies[index];\n', '    }\n', '\n', '    function activate() onlyOwner public returns (bool) {\n', '        for (uint i = 0; i < strategies.length; i++) {\n', '            SaleStrategy strategy = strategies[i];\n', '            if (strategy.activated()) {\n', '                activatedStrategies.push(strategy);\n', '            }\n', '        }\n', '        return super.activate();\n', '    }\n', '\n', '    function started() public view returns (bool) {\n', '        if (!activated) return false;\n', '\n', '        bool s = false;\n', '        for (uint i = 0; i < activatedStrategies.length; i++) {\n', '            s = s || activatedStrategies[i].started();\n', '        }\n', '        return s;\n', '    }\n', '\n', '    function successful() public view returns (bool){\n', '        if (!started()) return false;\n', '\n', '        bool s = false;\n', '        for (uint i = 0; i < activatedStrategies.length; i++) {\n', '            s = s || activatedStrategies[i].successful();\n', '        }\n', '        return s;\n', '    }\n', '\n', '    function finished() public view returns (bool){\n', '        if (!started()) return false;\n', '\n', '        bool f = false;\n', '        for (uint i = 0; i < activatedStrategies.length; i++) {\n', '            f = f || activatedStrategies[i].finished();\n', '        }\n', '        return f;\n', '    }\n', '\n', '    function() external payable;\n', '\n', '    function increasePaymentOf(address _purchaser, uint256 _weiAmount) internal {\n', '        require(!finished());\n', '        require(started());\n', '\n', '        paymentOfPurchaser[_purchaser] = paymentOfPurchaser[_purchaser].add(_weiAmount);\n', '        weiRaised = weiRaised.add(_weiAmount);\n', '    }\n', '\n', '    function paymentOf(address _purchaser) public view returns (uint256 weiAmount) {\n', '        return paymentOfPurchaser[_purchaser];\n', '    }\n', '\n', '    function withdraw() onlyOwner whenActivated public returns (bool) {\n', '        require(!withdrawn);\n', '        require(finished());\n', '        require(successful());\n', '\n', '        withdrawn = true;\n', '        msg.sender.transfer(weiRaised);\n', '\n', '        return true;\n', '    }\n', '\n', '    function claimRefund() whenActivated public returns (bool) {\n', '        require(finished());\n', '        require(!successful());\n', '\n', '        uint256 amount = paymentOfPurchaser[msg.sender];\n', '        require(amount > 0);\n', '\n', '        paymentOfPurchaser[msg.sender] = 0;\n', '        msg.sender.transfer(amount);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract SaleTemplate is Template {\n', '    constructor(\n', '        bytes32 _bytecodeHash,\n', '        uint _price,\n', '        address _beneficiary\n', '    ) public\n', '    Template(\n', '        _bytecodeHash,\n', '        _price,\n', '        _beneficiary\n', '    ) {\n', '    }\n', '\n', '    function instantiate(bytes _bytecode, bytes _args) public payable returns (address contractAddress) {\n', '        Sale sale = Sale(super.instantiate(_bytecode, _args));\n', '        // InterfaceId_Sale\n', '        require(sale.supportsInterface(0x8139792d));\n', '        return sale;\n', '    }\n', '}\n', '\n', '\n', 'contract Raiser is ERC721Token("Raiser", "RAI"), Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    event Mint(address indexed to, uint256 tokenId);\n', '\n', '    uint256 public constant HALVING_WEI = 21000000 * (10 ** 18);\n', '    uint256 public constant MAX_HALVING_ERA = 20;\n', '\n', '    Boost public boost;\n', '    uint256 public rewardEra = 0;\n', '\n', '    uint256 weiUntilNextHalving = HALVING_WEI;\n', '    mapping(uint256 => Sale) saleOfTokenId;\n', '    mapping(uint256 => string) slugOfTokenId;\n', '    mapping(uint256 => mapping(address => uint256)) rewardedBoostsOfSomeoneOfTokenId;\n', '\n', '    constructor(Boost _boost) public {\n', '        boost = _boost;\n', '    }\n', '\n', '    function mint(string _slug, SaleTemplate _template, bytes _bytecode, bytes _args) public payable {\n', '        // InterfaceId_ERC165\n', '        require(_template.supportsInterface(0x01ffc9a7));\n', '        // InterfaceId_Template\n', '        require(_template.supportsInterface(0xd48445ff));\n', '\n', '        uint256 tokenId = toTokenId(_slug);\n', '        require(address(saleOfTokenId[tokenId]) == address(0));\n', '\n', '        Sale sale = Sale(_template.instantiate.value(msg.value)(_bytecode, _args));\n', '        saleOfTokenId[tokenId] = sale;\n', '        slugOfTokenId[tokenId] = _slug;\n', '\n', '        _mint(msg.sender, tokenId);\n', '        emit Mint(msg.sender, tokenId);\n', '    }\n', '\n', '    function toTokenId(string _slug) public pure returns (uint256 tokenId) {\n', '        bytes memory chars = bytes(_slug);\n', '        require(chars.length > 0, "String is empty.");\n', '        for (uint i = 0; i < _min(chars.length, 32); i++) {\n', '            uint c = uint(chars[i]);\n', '            require(0x61 <= c && c <= 0x7a || c == 0x2d, "String must contain only lowercase alphabets or hyphens.");\n', '        }\n', '        assembly {\n', '            tokenId := mload(add(chars, 32))\n', '        }\n', '    }\n', '\n', '    function slugOf(uint256 _tokenId) public view returns (string slug) {\n', '        return slugOfTokenId[_tokenId];\n', '    }\n', '\n', '    function saleOf(uint256 _tokenId) public view returns (Sale sale) {\n', '        return saleOfTokenId[_tokenId];\n', '    }\n', '\n', '    function claimableBoostsOf(uint256 _tokenId) public view returns (uint256 boosts, uint256 newRewardEra, uint256 newWeiUntilNextHalving) {\n', '        if (rewardedBoostsOfSomeoneOfTokenId[_tokenId][msg.sender] > 0) {\n', '            return (0, rewardEra, weiUntilNextHalving);\n', '        }\n', '\n', '        Sale sale = saleOfTokenId[_tokenId];\n', '        require(address(sale) != address(0));\n', '        require(sale.finished());\n', '\n', '        uint256 weiAmount = sale.paymentOf(msg.sender);\n', '        if (sale.owner() == msg.sender) {\n', '            weiAmount = weiAmount.add(sale.weiRaised());\n', '        }\n', '        return _weiToBoosts(weiAmount);\n', '    }\n', '\n', '    function claimBoostsOf(uint256 _tokenId) public returns (bool) {\n', '        (uint256 boosts, uint256 newRewardEra, uint256 newWeiUntilNextHalving) = claimableBoostsOf(_tokenId);\n', '        rewardEra = newRewardEra;\n', '        weiUntilNextHalving = newWeiUntilNextHalving;\n', '        if (boosts > 0) {\n', '            boost.mint(msg.sender, boosts);\n', '        }\n', '        rewardedBoostsOfSomeoneOfTokenId[_tokenId][msg.sender] = boosts;\n', '        return true;\n', '    }\n', '\n', '    function rewardedBoostsOf(uint256 _tokenId) public view returns (uint256 boosts) {\n', '        return rewardedBoostsOfSomeoneOfTokenId[_tokenId][msg.sender];\n', '    }\n', '\n', '    function claimableBoosts() public view returns (uint256 boosts, uint256 newRewardEra, uint256 newWeiUntilNextHalving) {\n', '        for (uint i = 0; i < totalSupply(); i++) {\n', '            uint256 tokenId = tokenByIndex(i);\n', '            (uint256 b, uint256 r, uint256 w) = claimableBoostsOf(tokenId);\n', '            boosts = boosts.add(b);\n', '            newRewardEra = r;\n', '            newWeiUntilNextHalving = w;\n', '        }\n', '    }\n', '\n', '    function claimBoosts() public returns (bool) {\n', '        for (uint i = 0; i < totalSupply(); i++) {\n', '            uint256 tokenId = tokenByIndex(i);\n', '            claimBoostsOf(tokenId);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function rewardedBoosts() public view returns (uint256 boosts) {\n', '        for (uint i = 0; i < totalSupply(); i++) {\n', '            uint256 tokenId = tokenByIndex(i);\n', '            boosts = boosts.add(rewardedBoostsOf(tokenId));\n', '        }\n', '    }\n', '\n', '    function boostsUntilNextHalving() public view returns (uint256) {\n', '        (uint256 boosts,,) = _weiToBoosts(weiUntilNextHalving);\n', '        return boosts;\n', '    }\n', '\n', '    function _weiToBoosts(uint256 _weiAmount) private view returns (uint256 boosts, uint256 newRewardEra, uint256 newWeiUntilNextHalving) {\n', '        if (rewardEra > MAX_HALVING_ERA) {\n', '            return (0, rewardEra, weiUntilNextHalving);\n', '        }\n', '        uint256 amount = _weiAmount;\n', '        boosts = 0;\n', '        newRewardEra = rewardEra;\n', '        newWeiUntilNextHalving = weiUntilNextHalving;\n', '        while (amount > 0) {\n', '            uint256 a = _min(amount, weiUntilNextHalving);\n', '            boosts = boosts.add(a.mul(2 ** (MAX_HALVING_ERA.sub(newRewardEra)).div(1000)));\n', '            amount = amount.sub(a);\n', '            newWeiUntilNextHalving = newWeiUntilNextHalving.sub(a);\n', '            if (newWeiUntilNextHalving == 0) {\n', '                newWeiUntilNextHalving = HALVING_WEI;\n', '                newRewardEra += 1;\n', '            }\n', '        }\n', '    }\n', '\n', '    function _min(uint256 _a, uint256 _b) private pure returns (uint256) {\n', '        return _a < _b ? _a : _b;\n', '    }\n', '}']