['pragma solidity ^0.4.19;\n', '\n', '\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <<span class="__cf_email__" data-cfemail="a5c1c0d1c0e5c4ddcccac8dfc0cb8bc6ca">[email&#160;protected]</span>> (https://github.com/dete)\n', 'contract CSCERC721 {\n', '  // Required methods\n', '  function balanceOf(address _owner) public view returns (uint256 balance) { \n', '      return 0;\n', '      \n', '  }\n', '  function ownerOf(uint256 _tokenId) public view returns (address owner) { return;}\n', '\n', '  function getCollectibleDetails(uint256 _assetId) external view returns(uint256 assetId, uint256 sequenceId, uint256 collectibleType, uint256 collectibleClass, bool isRedeemed, address owner) {\n', '        assetId = 0;\n', '        sequenceId = 0;\n', '        collectibleType = 0;\n', '        collectibleClass = 0;\n', '        owner = 0;\n', '        isRedeemed = false;\n', '  }\n', '\n', '   function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n', '        return;\n', '   }\n', '\n', '}\n', '\n', 'contract CSCFactoryERC721 {\n', '    \n', '    function ownerOf(uint256 _tokenId) public view returns (address owner) { return;}\n', '\n', '    function getCollectibleDetails(uint256 _tokenId) external view returns(uint256 assetId, uint256 sequenceId, uint256 collectibleType, uint256 collectibleClass, bytes32 collectibleName, bool isRedeemed, address owner) {\n', '\n', '        assetId = 0;\n', '        sequenceId = 0;\n', '        collectibleType = 0;\n', '        collectibleClass = 0;\n', '        owner = 0;\n', '        collectibleName = 0x0;\n', '        isRedeemed = false;\n', '    }\n', '\n', '    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n', '        return;\n', '   }\n', '}\n', '\n', 'contract ERC20 {\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract CSCResourceFactory {\n', '    mapping(uint16 => address) public resourceIdToAddress; \n', '}\n', '\n', '\n', 'contract MEAHiddenLogic {\n', '\n', '\n', '    function getTotalTonsClaimed() external view returns(uint32) {\n', '        return;\n', '    }\n', '\n', '    function getTotalSupply() external view returns(uint32) {\n', '        return;\n', '    }\n', '\n', '     function getStarTotalSupply(uint8 _starId) external view returns(uint32) {\n', '        return;\n', '    }\n', '\n', '    function getReturnTime(uint256 _assetId) external view returns(uint256 time) {\n', '        return;\n', '    }\n', '\n', '    //uint256 iron, uint256 quartz, uint256 nickel, uint256 cobalt, uint256 silver, uint256 titanium, uint256 lucinite, uint256 gold, uint256 cosmethyst, uint256 allurum,  uint256 platinum,  uint256 trilite \n', '    function setResourceForStar(uint8[5] _resourceTypes, uint16[5] _resourcePer, uint32[5] _resourceAmounts) public returns(uint8 starId) {\n', '    }\n', '\n', '    \n', '    /// @dev Method to fetch collected ore details\n', '    function getAssetCollectedOreBallances(uint256 _assetID) external view returns(uint256 iron, uint256 quartz, uint256 nickel, uint256 cobalt, uint256 silver, uint256 titanium, uint256 lucinite, uint256 gold, uint256 cosmethyst, uint256 allurum,  uint256 platinum,  uint256 trilite);\n', '\n', '    function getAssetCollectedOreBallancesArray(uint256 _assetID) external view returns(uint256[12] ores);\n', '\n', '    function emptyShipCargo(uint32 _assetId) external;\n', '\n', '     /// @dev For creating CSC Collectible\n', '    function startMEAMission(uint256 _assetId, uint256 oreMax, uint8 starId, uint256 _travelTime) public returns(uint256);\n', '\n', '    \n', '}\n', '\n', '/* Controls state and access rights for contract functions\n', ' * @title Operational Control\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' * Inspired and adapted from contract created by OpenZeppelin\n', ' * Ref: https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract OperationalControl {\n', '    // Facilitates access & control for the game.\n', '    // Roles:\n', '    //  -The Managers (Primary/Secondary): Has universal control of all elements (No ability to withdraw)\n', '    //  -The Banker: The Bank can withdraw funds and adjust fees / prices.\n', '    //  -otherManagers: Contracts that need access to functions for gameplay\n', '\n', '    /// @dev Emited when contract is upgraded\n', '    event ContractUpgrade(address newContract);\n', '\n', '    /// @dev Emited when other manager is set\n', '    event OtherManagerUpdated(address otherManager, uint256 state);\n', '\n', '    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '    address public managerPrimary;\n', '    address public managerSecondary;\n', '    address public bankManager;\n', '\n', '    // Contracts that require access for gameplay\n', '    mapping(address => uint8) public otherManagers;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '\n', '    // @dev Keeps track whether the contract erroredOut. When that is true, most actions are blocked & refund can be claimed\n', '    bool public error = false;\n', '\n', '    /// @dev Operation modifiers for limiting access\n', '    modifier onlyManager() {\n', '        require(msg.sender == managerPrimary || msg.sender == managerSecondary);\n', '        _;\n', '    }\n', '\n', '    modifier onlyBanker() {\n', '        require(msg.sender == bankManager);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOtherManagers() {\n', '        require(otherManagers[msg.sender] == 1);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier anyOperator() {\n', '        require(\n', '            msg.sender == managerPrimary ||\n', '            msg.sender == managerSecondary ||\n', '            msg.sender == bankManager ||\n', '            otherManagers[msg.sender] == 1\n', '        );\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Other Manager. (State = 1 is active, 0 is disabled)\n', '    function setOtherManager(address _newOp, uint8 _state) external onlyManager {\n', '        require(_newOp != address(0));\n', '\n', '        otherManagers[_newOp] = _state;\n', '\n', '        OtherManagerUpdated(_newOp,_state);\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Primary Manager.\n', '    function setPrimaryManager(address _newGM) external onlyManager {\n', '        require(_newGM != address(0));\n', '\n', '        managerPrimary = _newGM;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Secondary Manager.\n', '    function setSecondaryManager(address _newGM) external onlyManager {\n', '        require(_newGM != address(0));\n', '\n', '        managerSecondary = _newGM;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Banker.\n', '    function setBanker(address _newBK) external onlyManager {\n', '        require(_newBK != address(0));\n', '\n', '        bankManager = _newBK;\n', '    }\n', '\n', '    /*** Pausable functionality adapted from OpenZeppelin ***/\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract has Error\n', '    modifier whenError {\n', '        require(error);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any Operator role to pause the contract.\n', '    /// Used only if a bug or exploit is discovered (Here to limit losses / damage)\n', '    function pause() external onlyManager whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function unpause() public onlyManager whenPaused {\n', '        // can&#39;t unpause if contract was upgraded\n', '        paused = false;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function hasError() public onlyManager whenPaused {\n', '        error = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function noError() public onlyManager whenPaused {\n', '        error = false;\n', '    }\n', '}\n', '\n', 'contract MEAManager is OperationalControl {\n', '\n', '    /*** EVENTS ***/\n', '\n', '    /*** CONSTANTS ***/\n', '    uint256 public constant REAPER_INTREPID = 3; \n', '    uint256 public constant REAPER_INTREPID_EXTRACTION_BASE = 10; // tons per hour of mining\n', '    uint256 public constant REAPER_INTREPID_FTL_SPEED = 900; // Seconds to travel 1 light year\n', '    uint256 public constant REAPER_INTREPID_MAX_CARGO = 320;\n', '\n', '    uint256 public constant PHOENIX_CORSAIR = 2;\n', '    uint256 public constant PHOENIX_CORSAIR_EXTRACTION_BASE = 40; // tons per hour of mining\n', '    uint256 public constant PHOENIX_CORSAIR_FTL_SPEED = 1440; // Seconds to travel 1 light year\n', '    uint256 public constant PHOENIX_CORSAIR_MAX_CARGO = 1500;\n', '\n', '    uint256 public constant VULCAN_PROMETHEUS = 1;\n', '    uint256 public constant VULCAN_PROMETHEUS_EXTRACTION_BASE = 300; // tons per hour of mining\n', '    uint256 public constant VULCAN_PROMETHEUS_FTL_SPEED = 2057; // Seconds to travel 1 light year\n', '    uint256 public constant VULCAN_PROMETHEUS_MAX_CARGO = 6000; \n', '\n', '    uint256 public constant SIGMA = 4;\n', '    uint256 public constant SIGMA_EXTRACTION_BASE = 150; // tons per hour of mining\n', '    uint256 public constant SIGMA_FTL_SPEED = 4235; // Seconds to travel 1 light year\n', '    uint256 public constant SIGMA_MAX_CARGO = 15000; \n', '\n', '    uint256 public constant HAYATO = 5;\n', '    uint256 public constant HAYATO_EXTRACTION_BASE = 150; // tons per hour of mining\n', '    uint256 public constant HAYATO_FTL_SPEED = 360; // Seconds to travel 1 light year\n', '    uint256 public constant HAYATO_MAX_CARGO = 1500; \n', '\n', '    uint256 public constant CPGPEREGRINE = 6;\n', '    uint256 public constant CPGPEREGRINE_EXTRACTION_BASE = 150; // tons per hour of mining\n', '    uint256 public constant CPGPEREGRINE_FTL_SPEED = 720; // Seconds to travel 1 light year\n', '    uint256 public constant CPGPEREGRINE_MAX_CARGO = 4000; \n', '\n', '    uint256 public constant TACTICALCRUISER = 7;\n', '    uint256 public constant TACTICALCRUISER_EXTRACTION_BASE = 150; // tons per hour of mining\n', '    uint256 public constant TACTICALCRUISER_FTL_SPEED = 720; // Seconds to travel 1 light year\n', '    uint256 public constant TACTICALCRUISER_MAX_CARGO = 1000;\n', '\n', '    uint256 public constant OTHERCRUISER = 8;\n', '    uint256 public constant OTHERCRUISER_EXTRACTION_BASE = 100; // tons per hour of mining\n', '    uint256 public constant OTHERCRUISER_FTL_SPEED = 720; // Seconds to travel 1 light year\n', '    uint256 public constant OTHERCRUISER_MAX_CARGO = 1500;  \n', '\n', '    uint256 public constant VULCAN_POD = 9;\n', '    uint256 public constant VULCAN_POD_EXTRACTION_BASE = 1; // tons per hour of mining\n', '    uint256 public constant VULCAN_POD_FTL_SPEED = 2000; // Seconds to travel 1 light year\n', '    uint256 public constant VULCAN_POD_MAX_CARGO = 75;  \n', '\n', '    //For Devs to Travel Around\n', '    uint256 public constant DEVCLASS = 99;\n', '    uint256 public constant DEVCLASS_EXTRACTION_BASE = 50; // tons per hour of mining\n', '    uint256 public constant DEVCLASS_FTL_SPEED = 10; // Seconds to travel 1 light year\n', '    uint256 public constant DEVCLASS_MAX_CARGO = 500; \n', '    \n', '    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '    string public constant NAME = "MEAGameManager";\n', '\n', '    /*** Mappings ***/\n', '\n', '     /// @dev assetID to ore type to qty collected\n', '    mapping(uint32 => mapping(uint8 => uint32)) public collectedOreAssetMapping;\n', '\n', '    /// @dev owner address to ore type to qty collected\n', '    mapping(address => mapping(uint8 => uint32)) public collectedOreBalanceMapping;\n', '\n', '    /// @dev owner address to ore type to qty collected\n', '    mapping(address => mapping(uint8 => uint32)) public distributedOreBalanceMapping;\n', '\n', '    /// @dev assetID to number of MEA trips it has completed\n', '    mapping(uint32 => uint32) public assetIdNumberOfTripsMapping;\n', '\n', '    /// @dev assetID to ore type to qty collected\n', '    mapping(uint8 => uint16) public starLightyearDistanceMapping;\n', '\n', '    /// @dev assetID to last star visited\n', '    mapping(uint32 => uint8) public assetIdToStarVisitedMapping;\n', '\n', '    /// @dev assetID to last star visited\n', '    mapping(uint16 => address) public resourceERC20Address;\n', '\n', '    /// @dev assetID to Start Time of Current Trip\n', '    mapping(uint32 => uint32) public assetIdCurrentTripStartTimeMapping;\n', '\n', '\n', '    /*** Variables ***/\n', '    uint256 public miningTimePerTrip = 3600; // 3600 for 1 hour 10\n', '    uint256 public aimeIncreasePerTrip = 2500; // 25.00\n', '\n', '    address cscERC721Address;\n', '    address cscFactoryERC721Address;\n', '    address hiddenLogicAddress;\n', ' \n', '\n', '    function MEAManager() public {\n', '        require(msg.sender != address(0));\n', '        paused = true; \n', '        managerPrimary = msg.sender;\n', '        managerSecondary = msg.sender;\n', '        bankManager = msg.sender;\n', '        cscERC721Address = address(0xe4f5e0d5c033f517a943602df942e794a06bc123);\n', '        cscFactoryERC721Address = address(0xcc9a66acf8574141b0e025202dd57649765a4be7);\n', '    }\n', '\n', '    /*** Management Functions ***/\n', '\n', '    /// @dev Set HiddenLogic\n', '    function setHiddenLogic(address _hiddenLogicAddress) public onlyManager {\n', '        hiddenLogicAddress = _hiddenLogicAddress;\n', '    }\n', '\n', '    /// @dev Set HiddenLogic\n', '    function setResourceERC20Address(uint16 _resId, address _reourceAddress) public onlyManager {\n', '        resourceERC20Address[_resId] = _reourceAddress;\n', '    }\n', '\n', '    /// @dev Set HiddenLogic\n', '    function setAllResourceERC20Addresses(address _master) public onlyManager {\n', '        CSCResourceFactory factory = CSCResourceFactory(_master);\n', '        for(uint8 i = 0; i < 12; i++) {\n', '            resourceERC20Address[i] = factory.resourceIdToAddress(i);\n', '        }\n', '    }\n', '\n', '    /// @dev Set CSCErc721 Contract\n', '    function setCSCERC721(address _cscERC721Address) public onlyManager {\n', '        cscERC721Address = _cscERC721Address;\n', '    }\n', '\n', '     /// @dev Set CSCFactoryErc721 Contract\n', '    function setCSCFactoryERC721(address _cscFactoryERC721Address) public onlyManager {\n', '        cscFactoryERC721Address = _cscFactoryERC721Address;\n', '    }\n', '\n', '    /// @dev Set / Modify Lightyear Distance 3.456 ly = 3456\n', '    function setStarDistance(uint8 _starId, uint16 _lightyearsInThousands) public anyOperator {\n', '        starLightyearDistanceMapping[_starId] = _lightyearsInThousands;\n', '    }\n', '\n', '    /// @dev Set / Modify MEA Game Attributes\n', '    function setMEAAttributes(uint256 _aime, uint256 _miningTime) public onlyManager {\n', '        aimeIncreasePerTrip = _aime;\n', '        miningTimePerTrip = _miningTime;\n', '    }\n', '\n', '    /// @dev Withdraw Remaining Resource Tokens\n', '    function reclaimResourceDeposits(address _withdrawAddress) public onlyManager {\n', '        require(_withdrawAddress != address(0));\n', '        for(uint8 ii = 0; ii < 12; ii++) {\n', '            if(resourceERC20Address[ii] != 0) {\n', '                ERC20 resCont = ERC20(resourceERC20Address[ii]);\n', '                uint256 bal = resCont.balanceOf(this);\n', '                resCont.transfer(_withdrawAddress, bal);\n', '            }\n', '        }\n', '    }\n', '\n', '    /*** Public Functions ***/\n', '\n', '     /// @dev Get Current Cargo Hold of AssetId (item names)\n', '    function getAssetIdCargo(uint32 _assetId) public view returns(uint256 iron, uint256 quartz, uint256 nickel, uint256 cobalt, uint256 silver, uint256 titanium, uint256 lucinite, uint256 gold, uint256 cosmethyst, uint256 allurum,  uint256 platinum,  uint256 trilite) {\n', '        uint256[12] memory _ores = getAssetIdCargoArray(_assetId);\n', '        iron = _ores[0];\n', '        quartz = _ores[1];\n', '        nickel = _ores[2];\n', '        cobalt = _ores[3];\n', '        silver = _ores[4];\n', '        titanium = _ores[5];\n', '        lucinite = _ores[6];\n', '        gold = _ores[7];\n', '        cosmethyst = _ores[8];\n', '        allurum = _ores[9];\n', '        platinum = _ores[10];\n', '        trilite = _ores[11];\n', '    }\n', '\n', '    // function getAllShipStats(uint32[] _shipIds) public view returns(uint32[] results) {\n', '    //     //loop all results\n', '    //     for(uint i = 0; i < _shipIds.length; i++) {\n', '    //         results[]];\n', '    //     }\n', '\n', '    // }\n', '\n', '    /// @dev Get Current Cargo Hold of AssetId (array)\n', '    function getAssetIdCargoArray (uint32 _assetId) public view returns(uint256[12])  {\n', '        MEAHiddenLogic logic = MEAHiddenLogic(hiddenLogicAddress);\n', '        return logic.getAssetCollectedOreBallancesArray(_assetId);\n', '    }\n', '\n', '    /// @dev Get AssetId Trip Completed Time\n', '    function getAssetIdTripCompletedTime(uint256 _assetId) external view returns(uint256 time) {\n', '        MEAHiddenLogic logic = MEAHiddenLogic(hiddenLogicAddress);\n', '        return logic.getReturnTime(uint32(_assetId));\n', '    }\n', '\n', '    /// @dev Get AssetId Trip Completed Time\n', '    function getAssetIdTripStartTime(uint256 _assetId) external view returns(uint256 time) {\n', '\n', '        return assetIdCurrentTripStartTimeMapping[uint32(_assetId)];\n', '    }\n', '\n', '    function getLastStarOfAssetId(uint32 _assetId) public view returns(uint8 starId){\n', '        return assetIdToStarVisitedMapping[_assetId];\n', '    }\n', '\n', '    /// @dev Get Resource Address\n', '    function getResourceERC20Address(uint16 _resId) public view returns(address resourceContract) {\n', '        return resourceERC20Address[_resId];\n', '    }\n', '\n', '    /// @dev Get Time\n', '    function getMEATime() external view returns(uint256 time) {\n', '        return now;\n', '    }\n', '\n', '    /// @dev Method to fetch processed ore details\n', '    function getCollectedOreBalances(address _owner) external view returns(uint256 iron, uint256 quartz, uint256 nickel, uint256 cobalt, uint256 silver, uint256 titanium, uint256 lucinite, uint256 gold, uint256 cosmethyst, uint256 allurum,  uint256 platinum,  uint256 trilite) {\n', '\n', '        iron = collectedOreBalanceMapping[_owner][0];\n', '        quartz = collectedOreBalanceMapping[_owner][1];\n', '        nickel = collectedOreBalanceMapping[_owner][2];\n', '        cobalt = collectedOreBalanceMapping[_owner][3];\n', '        silver = collectedOreBalanceMapping[_owner][4];\n', '        titanium = collectedOreBalanceMapping[_owner][5];\n', '        lucinite = collectedOreBalanceMapping[_owner][6];\n', '        gold = collectedOreBalanceMapping[_owner][7];\n', '        cosmethyst = collectedOreBalanceMapping[_owner][8];\n', '        allurum = collectedOreBalanceMapping[_owner][9];\n', '        platinum = collectedOreBalanceMapping[_owner][10];\n', '        trilite = collectedOreBalanceMapping[_owner][11];\n', '    }\n', '\n', '    /// @dev Method to fetch processed ore details\n', '    function getDistributedOreBalances(address _owner) external view returns(uint256 iron, uint256 quartz, uint256 nickel, uint256 cobalt, uint256 silver, uint256 titanium, uint256 lucinite, uint256 gold, uint256 cosmethyst, uint256 allurum,  uint256 platinum,  uint256 trilite) {\n', '\n', '        iron = distributedOreBalanceMapping[_owner][0];\n', '        quartz = distributedOreBalanceMapping[_owner][1];\n', '        nickel = distributedOreBalanceMapping[_owner][2];\n', '        cobalt = distributedOreBalanceMapping[_owner][3];\n', '        silver = distributedOreBalanceMapping[_owner][4];\n', '        titanium = distributedOreBalanceMapping[_owner][5];\n', '        lucinite = distributedOreBalanceMapping[_owner][6];\n', '        gold = distributedOreBalanceMapping[_owner][7];\n', '        cosmethyst = distributedOreBalanceMapping[_owner][8];\n', '        allurum = distributedOreBalanceMapping[_owner][9];\n', '        platinum = distributedOreBalanceMapping[_owner][10];\n', '        trilite = distributedOreBalanceMapping[_owner][11];\n', '    }\n', '\n', '    function withdrawCollectedResources() public {\n', '\n', '        for(uint8 ii = 0; ii < 12; ii++) {\n', '            require(resourceERC20Address[ii] != address(0));\n', '            uint32 oreOutstanding = collectedOreBalanceMapping[msg.sender][ii] - distributedOreBalanceMapping[msg.sender][ii];\n', '            if(oreOutstanding > 0) {\n', '                ERC20 resCont = ERC20(resourceERC20Address[ii]);\n', '                distributedOreBalanceMapping[msg.sender][ii] += oreOutstanding;\n', '                resCont.transfer(msg.sender, oreOutstanding);\n', '            }\n', '        }\n', '\n', '    }\n', '\n', '    //Gets star distance in thousandths of ly\n', '    function getStarDistanceInLyThousandths(uint8 _starId) public view returns (uint32 total) {\n', '        return starLightyearDistanceMapping[_starId];\n', '    }\n', '    \n', '    //Gets total resources already claimed by commanders\n', '    function totalMEATonsClaimed() public view returns (uint32 total) {\n', '        MEAHiddenLogic logic = MEAHiddenLogic(hiddenLogicAddress);\n', '        return logic.getTotalTonsClaimed();\n', '    }\n', '\n', '    //Gets total seeded supply commanders\n', '    function totalMEATonsSupply() public view returns (uint32 total) {\n', '        MEAHiddenLogic logic = MEAHiddenLogic(hiddenLogicAddress);\n', '        return logic.getTotalSupply();\n', '    }\n', '\n', '     function totalStarSupplyRemaining(uint8 _starId) external view returns(uint32) {\n', '        MEAHiddenLogic logic = MEAHiddenLogic(hiddenLogicAddress);\n', '        return logic.getStarTotalSupply(_starId);\n', '    }\n', '\n', '    function claimOreOnlyFromAssetId(uint256 _assetId) {\n', '        uint256 collectibleClass = 0;\n', '        address shipOwner;\n', '        (collectibleClass, shipOwner) = _getShipInfo(_assetId);\n', '\n', '         require(shipOwner == msg.sender);\n', '\n', '        _claimOreAndClear(uint32(_assetId), 0);\n', '    }\n', '    /// @dev For creating CSC Collectible\n', '    function launchShipOnMEA(uint256 _assetId, uint8 starId) public whenNotPaused returns(uint256) {\n', '        \n', '        MEAHiddenLogic logic = MEAHiddenLogic(hiddenLogicAddress);\n', '\n', '        uint256 collectibleClass = 0;\n', '        address shipOwner;\n', '\n', '        (collectibleClass, shipOwner) = _getShipInfo(_assetId);\n', '\n', '        //Check if the ship owner is sender\n', '        require(shipOwner == msg.sender);\n', '\n', '        //Check if ship is back at earth\n', '        require(now > logic.getReturnTime(_assetId));\n', '        \n', '        //Claims ore and clears\n', '        _claimOreAndClear(uint32(_assetId), starId);\n', '\n', '        //Get Asset Stats\n', '        uint tripCount = assetIdNumberOfTripsMapping[uint32(_assetId)];\n', '        uint starTripDist = starLightyearDistanceMapping[starId];\n', '        uint256 oreMax = 5;\n', '        uint256 tripSeconds = 10;\n', '\n', '        if(collectibleClass == REAPER_INTREPID) {\n', '            oreMax = REAPER_INTREPID_EXTRACTION_BASE + (REAPER_INTREPID_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);\n', '            tripSeconds = REAPER_INTREPID_FTL_SPEED * starTripDist / 1000; // 4LPH - 900 seconds per light year\n', '            if(oreMax > REAPER_INTREPID_MAX_CARGO)\n', '                oreMax = REAPER_INTREPID_MAX_CARGO;\n', '        }\n', '        else if(collectibleClass == PHOENIX_CORSAIR) {\n', '            oreMax = PHOENIX_CORSAIR_EXTRACTION_BASE + (PHOENIX_CORSAIR_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);\n', '            tripSeconds = PHOENIX_CORSAIR_FTL_SPEED * starTripDist / 1000; // 2.5LPH - 1440 seconds per light year\n', '            if(oreMax > PHOENIX_CORSAIR_MAX_CARGO)\n', '                oreMax = PHOENIX_CORSAIR_MAX_CARGO;\n', '        }\n', '        else if(collectibleClass == VULCAN_PROMETHEUS) {\n', '            oreMax = VULCAN_PROMETHEUS_EXTRACTION_BASE + (VULCAN_PROMETHEUS_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);\n', '            tripSeconds = VULCAN_PROMETHEUS_FTL_SPEED * starTripDist / 1000; // 1.75LPH - 2057 seconds per light year\n', '            if(oreMax > VULCAN_PROMETHEUS_MAX_CARGO)\n', '                oreMax = VULCAN_PROMETHEUS_MAX_CARGO;\n', '        }\n', '        else if(collectibleClass == SIGMA) {\n', '            oreMax = SIGMA_EXTRACTION_BASE + (SIGMA_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);\n', '            tripSeconds = SIGMA_FTL_SPEED * starTripDist / 1000; // 0.85LPH - 4235 seconds per light year\n', '            if(oreMax > SIGMA_MAX_CARGO)\n', '                oreMax = SIGMA_MAX_CARGO;\n', '        }\n', '        else if(collectibleClass == HAYATO) { //Hayato\n', '            oreMax = HAYATO_EXTRACTION_BASE + (HAYATO_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);\n', '            tripSeconds = HAYATO_FTL_SPEED * starTripDist / 1000; // 10LPH - 360 seconds per light year\n', '            if(oreMax > HAYATO_MAX_CARGO)\n', '                oreMax = HAYATO_MAX_CARGO;\n', '        }\n', '        else if(collectibleClass == CPGPEREGRINE) { //CPG Peregrine\n', '            oreMax = CPGPEREGRINE_EXTRACTION_BASE + (CPGPEREGRINE_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);\n', '            tripSeconds = CPGPEREGRINE_FTL_SPEED * starTripDist / 1000; // 5LPH -720 seconds per light year\n', '            if(oreMax > CPGPEREGRINE_MAX_CARGO)\n', '                oreMax = CPGPEREGRINE_MAX_CARGO;\n', '        }\n', '        else if(collectibleClass == TACTICALCRUISER) { //TACTICA CRUISER Ships\n', '            oreMax = TACTICALCRUISER_EXTRACTION_BASE + (TACTICALCRUISER_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);\n', '            tripSeconds = TACTICALCRUISER_FTL_SPEED * starTripDist / 1000; \n', '            if(oreMax > TACTICALCRUISER_MAX_CARGO)\n', '                oreMax = TACTICALCRUISER_MAX_CARGO;\n', '        }\n', '        else if(collectibleClass == VULCAN_POD) { //TACTICA CRUISER Ships\n', '            oreMax = VULCAN_POD_EXTRACTION_BASE + (VULCAN_POD_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);\n', '            tripSeconds = VULCAN_POD_FTL_SPEED * starTripDist / 1000; \n', '            if(oreMax > VULCAN_POD_MAX_CARGO)\n', '                oreMax = VULCAN_POD_MAX_CARGO;\n', '        }\n', '        else if(collectibleClass >= DEVCLASS) { //Dev Ships\n', '            oreMax = DEVCLASS_EXTRACTION_BASE + (DEVCLASS_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);\n', '            tripSeconds = DEVCLASS_FTL_SPEED * starTripDist / 1000;\n', '            if(oreMax > DEVCLASS_MAX_CARGO)\n', '                oreMax = DEVCLASS_MAX_CARGO;\n', '        } else {\n', '            if(collectibleClass >= OTHERCRUISER) { //Support Other Promo Ships\n', '                oreMax = OTHERCRUISER_EXTRACTION_BASE + (OTHERCRUISER_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);\n', '                tripSeconds = OTHERCRUISER_FTL_SPEED * starTripDist / 1000; \n', '                if(oreMax > OTHERCRUISER_MAX_CARGO)\n', '                    oreMax = OTHERCRUISER_MAX_CARGO;\n', '            }\n', '        }\n', '\n', '        //Make Round Trip + Mining\n', '        tripSeconds = ((tripSeconds * 2) + miningTimePerTrip); //3600 for an hour - 0 for testing ***************************\n', '\n', '        //calculate travel time\n', '        uint256 returnTime = logic.startMEAMission(_assetId, oreMax, starId, tripSeconds);\n', '\n', '        //Confirm trip\n', '        if(returnTime > 0) {\n', '            assetIdNumberOfTripsMapping[uint32(_assetId)] += 1;\n', '            assetIdToStarVisitedMapping[uint32(_assetId)] = starId;\n', '            assetIdCurrentTripStartTimeMapping[uint32(_assetId)] = uint32(now);\n', '        }\n', '        \n', '        return returnTime;\n', '    }\n', '\n', '\n', '    /*** PRIVATE FUNCTIONS ***/\n', '\n', '    /// @dev  Safety check on _to address to prevent against an unexpected 0x0 default.\n', '    function _addressNotNull(address _to) internal pure returns (bool) {\n', '        return _to != address(0);\n', '    }\n', '\n', '    /// @dev  Claims and clears cargo -- ONLY INTERNAL\n', '    function _claimOreAndClear (uint32 _assetId, uint8 _starId) internal {\n', '        MEAHiddenLogic logic = MEAHiddenLogic(hiddenLogicAddress);\n', '        uint256[12] memory _ores = logic.getAssetCollectedOreBallancesArray(_assetId);\n', '        bool hasItems = false;\n', '\n', '        for(uint8 i = 0; i < 12; i++) {\n', '            if(_ores[i] > 0) {\n', '                collectedOreBalanceMapping[msg.sender][i] += uint32(_ores[i]);\n', '                hasItems = true;\n', '            }\n', '        }\n', '\n', '        //Doesn&#39;t Let you Travel to empty stars but lets you collect\n', '        if(hasItems == false && _starId > 0) {\n', '            require(logic.getStarTotalSupply(_starId) > 0);\n', '        }\n', '\n', '        logic.emptyShipCargo(_assetId);\n', '    }\n', '\n', '    function _getShipInfo(uint256 _assetId) internal view returns (uint256 collectibleClass, address owner) {\n', '        \n', '        uint256 nulldata;\n', '        bool nullbool;\n', '        uint256 collectibleType;\n', '\n', '        if(_assetId <= 3000) {\n', '            CSCERC721 shipData = CSCERC721(cscERC721Address);\n', '            (nulldata, nulldata, collectibleType, collectibleClass, nullbool, owner) = shipData.getCollectibleDetails(_assetId);\n', '        } else {\n', '            bytes32 nullstring;\n', '            CSCFactoryERC721 shipFData = CSCFactoryERC721(cscFactoryERC721Address);\n', '            (nulldata, nulldata, collectibleType, collectibleClass, nullstring, nullbool, owner) = shipFData.getCollectibleDetails(_assetId);\n', '        }\n', '\n', '    }\n', '\n', '    \n', '    \n', '    \n', '    \n', '}']
['pragma solidity ^0.4.19;\n', '\n', '\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\n', 'contract CSCERC721 {\n', '  // Required methods\n', '  function balanceOf(address _owner) public view returns (uint256 balance) { \n', '      return 0;\n', '      \n', '  }\n', '  function ownerOf(uint256 _tokenId) public view returns (address owner) { return;}\n', '\n', '  function getCollectibleDetails(uint256 _assetId) external view returns(uint256 assetId, uint256 sequenceId, uint256 collectibleType, uint256 collectibleClass, bool isRedeemed, address owner) {\n', '        assetId = 0;\n', '        sequenceId = 0;\n', '        collectibleType = 0;\n', '        collectibleClass = 0;\n', '        owner = 0;\n', '        isRedeemed = false;\n', '  }\n', '\n', '   function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n', '        return;\n', '   }\n', '\n', '}\n', '\n', 'contract CSCFactoryERC721 {\n', '    \n', '    function ownerOf(uint256 _tokenId) public view returns (address owner) { return;}\n', '\n', '    function getCollectibleDetails(uint256 _tokenId) external view returns(uint256 assetId, uint256 sequenceId, uint256 collectibleType, uint256 collectibleClass, bytes32 collectibleName, bool isRedeemed, address owner) {\n', '\n', '        assetId = 0;\n', '        sequenceId = 0;\n', '        collectibleType = 0;\n', '        collectibleClass = 0;\n', '        owner = 0;\n', '        collectibleName = 0x0;\n', '        isRedeemed = false;\n', '    }\n', '\n', '    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n', '        return;\n', '   }\n', '}\n', '\n', 'contract ERC20 {\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract CSCResourceFactory {\n', '    mapping(uint16 => address) public resourceIdToAddress; \n', '}\n', '\n', '\n', 'contract MEAHiddenLogic {\n', '\n', '\n', '    function getTotalTonsClaimed() external view returns(uint32) {\n', '        return;\n', '    }\n', '\n', '    function getTotalSupply() external view returns(uint32) {\n', '        return;\n', '    }\n', '\n', '     function getStarTotalSupply(uint8 _starId) external view returns(uint32) {\n', '        return;\n', '    }\n', '\n', '    function getReturnTime(uint256 _assetId) external view returns(uint256 time) {\n', '        return;\n', '    }\n', '\n', '    //uint256 iron, uint256 quartz, uint256 nickel, uint256 cobalt, uint256 silver, uint256 titanium, uint256 lucinite, uint256 gold, uint256 cosmethyst, uint256 allurum,  uint256 platinum,  uint256 trilite \n', '    function setResourceForStar(uint8[5] _resourceTypes, uint16[5] _resourcePer, uint32[5] _resourceAmounts) public returns(uint8 starId) {\n', '    }\n', '\n', '    \n', '    /// @dev Method to fetch collected ore details\n', '    function getAssetCollectedOreBallances(uint256 _assetID) external view returns(uint256 iron, uint256 quartz, uint256 nickel, uint256 cobalt, uint256 silver, uint256 titanium, uint256 lucinite, uint256 gold, uint256 cosmethyst, uint256 allurum,  uint256 platinum,  uint256 trilite);\n', '\n', '    function getAssetCollectedOreBallancesArray(uint256 _assetID) external view returns(uint256[12] ores);\n', '\n', '    function emptyShipCargo(uint32 _assetId) external;\n', '\n', '     /// @dev For creating CSC Collectible\n', '    function startMEAMission(uint256 _assetId, uint256 oreMax, uint8 starId, uint256 _travelTime) public returns(uint256);\n', '\n', '    \n', '}\n', '\n', '/* Controls state and access rights for contract functions\n', ' * @title Operational Control\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' * Inspired and adapted from contract created by OpenZeppelin\n', ' * Ref: https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract OperationalControl {\n', '    // Facilitates access & control for the game.\n', '    // Roles:\n', '    //  -The Managers (Primary/Secondary): Has universal control of all elements (No ability to withdraw)\n', '    //  -The Banker: The Bank can withdraw funds and adjust fees / prices.\n', '    //  -otherManagers: Contracts that need access to functions for gameplay\n', '\n', '    /// @dev Emited when contract is upgraded\n', '    event ContractUpgrade(address newContract);\n', '\n', '    /// @dev Emited when other manager is set\n', '    event OtherManagerUpdated(address otherManager, uint256 state);\n', '\n', '    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '    address public managerPrimary;\n', '    address public managerSecondary;\n', '    address public bankManager;\n', '\n', '    // Contracts that require access for gameplay\n', '    mapping(address => uint8) public otherManagers;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '\n', '    // @dev Keeps track whether the contract erroredOut. When that is true, most actions are blocked & refund can be claimed\n', '    bool public error = false;\n', '\n', '    /// @dev Operation modifiers for limiting access\n', '    modifier onlyManager() {\n', '        require(msg.sender == managerPrimary || msg.sender == managerSecondary);\n', '        _;\n', '    }\n', '\n', '    modifier onlyBanker() {\n', '        require(msg.sender == bankManager);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOtherManagers() {\n', '        require(otherManagers[msg.sender] == 1);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier anyOperator() {\n', '        require(\n', '            msg.sender == managerPrimary ||\n', '            msg.sender == managerSecondary ||\n', '            msg.sender == bankManager ||\n', '            otherManagers[msg.sender] == 1\n', '        );\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Other Manager. (State = 1 is active, 0 is disabled)\n', '    function setOtherManager(address _newOp, uint8 _state) external onlyManager {\n', '        require(_newOp != address(0));\n', '\n', '        otherManagers[_newOp] = _state;\n', '\n', '        OtherManagerUpdated(_newOp,_state);\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Primary Manager.\n', '    function setPrimaryManager(address _newGM) external onlyManager {\n', '        require(_newGM != address(0));\n', '\n', '        managerPrimary = _newGM;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Secondary Manager.\n', '    function setSecondaryManager(address _newGM) external onlyManager {\n', '        require(_newGM != address(0));\n', '\n', '        managerSecondary = _newGM;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Banker.\n', '    function setBanker(address _newBK) external onlyManager {\n', '        require(_newBK != address(0));\n', '\n', '        bankManager = _newBK;\n', '    }\n', '\n', '    /*** Pausable functionality adapted from OpenZeppelin ***/\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract has Error\n', '    modifier whenError {\n', '        require(error);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any Operator role to pause the contract.\n', '    /// Used only if a bug or exploit is discovered (Here to limit losses / damage)\n', '    function pause() external onlyManager whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function unpause() public onlyManager whenPaused {\n', "        // can't unpause if contract was upgraded\n", '        paused = false;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function hasError() public onlyManager whenPaused {\n', '        error = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function noError() public onlyManager whenPaused {\n', '        error = false;\n', '    }\n', '}\n', '\n', 'contract MEAManager is OperationalControl {\n', '\n', '    /*** EVENTS ***/\n', '\n', '    /*** CONSTANTS ***/\n', '    uint256 public constant REAPER_INTREPID = 3; \n', '    uint256 public constant REAPER_INTREPID_EXTRACTION_BASE = 10; // tons per hour of mining\n', '    uint256 public constant REAPER_INTREPID_FTL_SPEED = 900; // Seconds to travel 1 light year\n', '    uint256 public constant REAPER_INTREPID_MAX_CARGO = 320;\n', '\n', '    uint256 public constant PHOENIX_CORSAIR = 2;\n', '    uint256 public constant PHOENIX_CORSAIR_EXTRACTION_BASE = 40; // tons per hour of mining\n', '    uint256 public constant PHOENIX_CORSAIR_FTL_SPEED = 1440; // Seconds to travel 1 light year\n', '    uint256 public constant PHOENIX_CORSAIR_MAX_CARGO = 1500;\n', '\n', '    uint256 public constant VULCAN_PROMETHEUS = 1;\n', '    uint256 public constant VULCAN_PROMETHEUS_EXTRACTION_BASE = 300; // tons per hour of mining\n', '    uint256 public constant VULCAN_PROMETHEUS_FTL_SPEED = 2057; // Seconds to travel 1 light year\n', '    uint256 public constant VULCAN_PROMETHEUS_MAX_CARGO = 6000; \n', '\n', '    uint256 public constant SIGMA = 4;\n', '    uint256 public constant SIGMA_EXTRACTION_BASE = 150; // tons per hour of mining\n', '    uint256 public constant SIGMA_FTL_SPEED = 4235; // Seconds to travel 1 light year\n', '    uint256 public constant SIGMA_MAX_CARGO = 15000; \n', '\n', '    uint256 public constant HAYATO = 5;\n', '    uint256 public constant HAYATO_EXTRACTION_BASE = 150; // tons per hour of mining\n', '    uint256 public constant HAYATO_FTL_SPEED = 360; // Seconds to travel 1 light year\n', '    uint256 public constant HAYATO_MAX_CARGO = 1500; \n', '\n', '    uint256 public constant CPGPEREGRINE = 6;\n', '    uint256 public constant CPGPEREGRINE_EXTRACTION_BASE = 150; // tons per hour of mining\n', '    uint256 public constant CPGPEREGRINE_FTL_SPEED = 720; // Seconds to travel 1 light year\n', '    uint256 public constant CPGPEREGRINE_MAX_CARGO = 4000; \n', '\n', '    uint256 public constant TACTICALCRUISER = 7;\n', '    uint256 public constant TACTICALCRUISER_EXTRACTION_BASE = 150; // tons per hour of mining\n', '    uint256 public constant TACTICALCRUISER_FTL_SPEED = 720; // Seconds to travel 1 light year\n', '    uint256 public constant TACTICALCRUISER_MAX_CARGO = 1000;\n', '\n', '    uint256 public constant OTHERCRUISER = 8;\n', '    uint256 public constant OTHERCRUISER_EXTRACTION_BASE = 100; // tons per hour of mining\n', '    uint256 public constant OTHERCRUISER_FTL_SPEED = 720; // Seconds to travel 1 light year\n', '    uint256 public constant OTHERCRUISER_MAX_CARGO = 1500;  \n', '\n', '    uint256 public constant VULCAN_POD = 9;\n', '    uint256 public constant VULCAN_POD_EXTRACTION_BASE = 1; // tons per hour of mining\n', '    uint256 public constant VULCAN_POD_FTL_SPEED = 2000; // Seconds to travel 1 light year\n', '    uint256 public constant VULCAN_POD_MAX_CARGO = 75;  \n', '\n', '    //For Devs to Travel Around\n', '    uint256 public constant DEVCLASS = 99;\n', '    uint256 public constant DEVCLASS_EXTRACTION_BASE = 50; // tons per hour of mining\n', '    uint256 public constant DEVCLASS_FTL_SPEED = 10; // Seconds to travel 1 light year\n', '    uint256 public constant DEVCLASS_MAX_CARGO = 500; \n', '    \n', '    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '    string public constant NAME = "MEAGameManager";\n', '\n', '    /*** Mappings ***/\n', '\n', '     /// @dev assetID to ore type to qty collected\n', '    mapping(uint32 => mapping(uint8 => uint32)) public collectedOreAssetMapping;\n', '\n', '    /// @dev owner address to ore type to qty collected\n', '    mapping(address => mapping(uint8 => uint32)) public collectedOreBalanceMapping;\n', '\n', '    /// @dev owner address to ore type to qty collected\n', '    mapping(address => mapping(uint8 => uint32)) public distributedOreBalanceMapping;\n', '\n', '    /// @dev assetID to number of MEA trips it has completed\n', '    mapping(uint32 => uint32) public assetIdNumberOfTripsMapping;\n', '\n', '    /// @dev assetID to ore type to qty collected\n', '    mapping(uint8 => uint16) public starLightyearDistanceMapping;\n', '\n', '    /// @dev assetID to last star visited\n', '    mapping(uint32 => uint8) public assetIdToStarVisitedMapping;\n', '\n', '    /// @dev assetID to last star visited\n', '    mapping(uint16 => address) public resourceERC20Address;\n', '\n', '    /// @dev assetID to Start Time of Current Trip\n', '    mapping(uint32 => uint32) public assetIdCurrentTripStartTimeMapping;\n', '\n', '\n', '    /*** Variables ***/\n', '    uint256 public miningTimePerTrip = 3600; // 3600 for 1 hour 10\n', '    uint256 public aimeIncreasePerTrip = 2500; // 25.00\n', '\n', '    address cscERC721Address;\n', '    address cscFactoryERC721Address;\n', '    address hiddenLogicAddress;\n', ' \n', '\n', '    function MEAManager() public {\n', '        require(msg.sender != address(0));\n', '        paused = true; \n', '        managerPrimary = msg.sender;\n', '        managerSecondary = msg.sender;\n', '        bankManager = msg.sender;\n', '        cscERC721Address = address(0xe4f5e0d5c033f517a943602df942e794a06bc123);\n', '        cscFactoryERC721Address = address(0xcc9a66acf8574141b0e025202dd57649765a4be7);\n', '    }\n', '\n', '    /*** Management Functions ***/\n', '\n', '    /// @dev Set HiddenLogic\n', '    function setHiddenLogic(address _hiddenLogicAddress) public onlyManager {\n', '        hiddenLogicAddress = _hiddenLogicAddress;\n', '    }\n', '\n', '    /// @dev Set HiddenLogic\n', '    function setResourceERC20Address(uint16 _resId, address _reourceAddress) public onlyManager {\n', '        resourceERC20Address[_resId] = _reourceAddress;\n', '    }\n', '\n', '    /// @dev Set HiddenLogic\n', '    function setAllResourceERC20Addresses(address _master) public onlyManager {\n', '        CSCResourceFactory factory = CSCResourceFactory(_master);\n', '        for(uint8 i = 0; i < 12; i++) {\n', '            resourceERC20Address[i] = factory.resourceIdToAddress(i);\n', '        }\n', '    }\n', '\n', '    /// @dev Set CSCErc721 Contract\n', '    function setCSCERC721(address _cscERC721Address) public onlyManager {\n', '        cscERC721Address = _cscERC721Address;\n', '    }\n', '\n', '     /// @dev Set CSCFactoryErc721 Contract\n', '    function setCSCFactoryERC721(address _cscFactoryERC721Address) public onlyManager {\n', '        cscFactoryERC721Address = _cscFactoryERC721Address;\n', '    }\n', '\n', '    /// @dev Set / Modify Lightyear Distance 3.456 ly = 3456\n', '    function setStarDistance(uint8 _starId, uint16 _lightyearsInThousands) public anyOperator {\n', '        starLightyearDistanceMapping[_starId] = _lightyearsInThousands;\n', '    }\n', '\n', '    /// @dev Set / Modify MEA Game Attributes\n', '    function setMEAAttributes(uint256 _aime, uint256 _miningTime) public onlyManager {\n', '        aimeIncreasePerTrip = _aime;\n', '        miningTimePerTrip = _miningTime;\n', '    }\n', '\n', '    /// @dev Withdraw Remaining Resource Tokens\n', '    function reclaimResourceDeposits(address _withdrawAddress) public onlyManager {\n', '        require(_withdrawAddress != address(0));\n', '        for(uint8 ii = 0; ii < 12; ii++) {\n', '            if(resourceERC20Address[ii] != 0) {\n', '                ERC20 resCont = ERC20(resourceERC20Address[ii]);\n', '                uint256 bal = resCont.balanceOf(this);\n', '                resCont.transfer(_withdrawAddress, bal);\n', '            }\n', '        }\n', '    }\n', '\n', '    /*** Public Functions ***/\n', '\n', '     /// @dev Get Current Cargo Hold of AssetId (item names)\n', '    function getAssetIdCargo(uint32 _assetId) public view returns(uint256 iron, uint256 quartz, uint256 nickel, uint256 cobalt, uint256 silver, uint256 titanium, uint256 lucinite, uint256 gold, uint256 cosmethyst, uint256 allurum,  uint256 platinum,  uint256 trilite) {\n', '        uint256[12] memory _ores = getAssetIdCargoArray(_assetId);\n', '        iron = _ores[0];\n', '        quartz = _ores[1];\n', '        nickel = _ores[2];\n', '        cobalt = _ores[3];\n', '        silver = _ores[4];\n', '        titanium = _ores[5];\n', '        lucinite = _ores[6];\n', '        gold = _ores[7];\n', '        cosmethyst = _ores[8];\n', '        allurum = _ores[9];\n', '        platinum = _ores[10];\n', '        trilite = _ores[11];\n', '    }\n', '\n', '    // function getAllShipStats(uint32[] _shipIds) public view returns(uint32[] results) {\n', '    //     //loop all results\n', '    //     for(uint i = 0; i < _shipIds.length; i++) {\n', '    //         results[]];\n', '    //     }\n', '\n', '    // }\n', '\n', '    /// @dev Get Current Cargo Hold of AssetId (array)\n', '    function getAssetIdCargoArray (uint32 _assetId) public view returns(uint256[12])  {\n', '        MEAHiddenLogic logic = MEAHiddenLogic(hiddenLogicAddress);\n', '        return logic.getAssetCollectedOreBallancesArray(_assetId);\n', '    }\n', '\n', '    /// @dev Get AssetId Trip Completed Time\n', '    function getAssetIdTripCompletedTime(uint256 _assetId) external view returns(uint256 time) {\n', '        MEAHiddenLogic logic = MEAHiddenLogic(hiddenLogicAddress);\n', '        return logic.getReturnTime(uint32(_assetId));\n', '    }\n', '\n', '    /// @dev Get AssetId Trip Completed Time\n', '    function getAssetIdTripStartTime(uint256 _assetId) external view returns(uint256 time) {\n', '\n', '        return assetIdCurrentTripStartTimeMapping[uint32(_assetId)];\n', '    }\n', '\n', '    function getLastStarOfAssetId(uint32 _assetId) public view returns(uint8 starId){\n', '        return assetIdToStarVisitedMapping[_assetId];\n', '    }\n', '\n', '    /// @dev Get Resource Address\n', '    function getResourceERC20Address(uint16 _resId) public view returns(address resourceContract) {\n', '        return resourceERC20Address[_resId];\n', '    }\n', '\n', '    /// @dev Get Time\n', '    function getMEATime() external view returns(uint256 time) {\n', '        return now;\n', '    }\n', '\n', '    /// @dev Method to fetch processed ore details\n', '    function getCollectedOreBalances(address _owner) external view returns(uint256 iron, uint256 quartz, uint256 nickel, uint256 cobalt, uint256 silver, uint256 titanium, uint256 lucinite, uint256 gold, uint256 cosmethyst, uint256 allurum,  uint256 platinum,  uint256 trilite) {\n', '\n', '        iron = collectedOreBalanceMapping[_owner][0];\n', '        quartz = collectedOreBalanceMapping[_owner][1];\n', '        nickel = collectedOreBalanceMapping[_owner][2];\n', '        cobalt = collectedOreBalanceMapping[_owner][3];\n', '        silver = collectedOreBalanceMapping[_owner][4];\n', '        titanium = collectedOreBalanceMapping[_owner][5];\n', '        lucinite = collectedOreBalanceMapping[_owner][6];\n', '        gold = collectedOreBalanceMapping[_owner][7];\n', '        cosmethyst = collectedOreBalanceMapping[_owner][8];\n', '        allurum = collectedOreBalanceMapping[_owner][9];\n', '        platinum = collectedOreBalanceMapping[_owner][10];\n', '        trilite = collectedOreBalanceMapping[_owner][11];\n', '    }\n', '\n', '    /// @dev Method to fetch processed ore details\n', '    function getDistributedOreBalances(address _owner) external view returns(uint256 iron, uint256 quartz, uint256 nickel, uint256 cobalt, uint256 silver, uint256 titanium, uint256 lucinite, uint256 gold, uint256 cosmethyst, uint256 allurum,  uint256 platinum,  uint256 trilite) {\n', '\n', '        iron = distributedOreBalanceMapping[_owner][0];\n', '        quartz = distributedOreBalanceMapping[_owner][1];\n', '        nickel = distributedOreBalanceMapping[_owner][2];\n', '        cobalt = distributedOreBalanceMapping[_owner][3];\n', '        silver = distributedOreBalanceMapping[_owner][4];\n', '        titanium = distributedOreBalanceMapping[_owner][5];\n', '        lucinite = distributedOreBalanceMapping[_owner][6];\n', '        gold = distributedOreBalanceMapping[_owner][7];\n', '        cosmethyst = distributedOreBalanceMapping[_owner][8];\n', '        allurum = distributedOreBalanceMapping[_owner][9];\n', '        platinum = distributedOreBalanceMapping[_owner][10];\n', '        trilite = distributedOreBalanceMapping[_owner][11];\n', '    }\n', '\n', '    function withdrawCollectedResources() public {\n', '\n', '        for(uint8 ii = 0; ii < 12; ii++) {\n', '            require(resourceERC20Address[ii] != address(0));\n', '            uint32 oreOutstanding = collectedOreBalanceMapping[msg.sender][ii] - distributedOreBalanceMapping[msg.sender][ii];\n', '            if(oreOutstanding > 0) {\n', '                ERC20 resCont = ERC20(resourceERC20Address[ii]);\n', '                distributedOreBalanceMapping[msg.sender][ii] += oreOutstanding;\n', '                resCont.transfer(msg.sender, oreOutstanding);\n', '            }\n', '        }\n', '\n', '    }\n', '\n', '    //Gets star distance in thousandths of ly\n', '    function getStarDistanceInLyThousandths(uint8 _starId) public view returns (uint32 total) {\n', '        return starLightyearDistanceMapping[_starId];\n', '    }\n', '    \n', '    //Gets total resources already claimed by commanders\n', '    function totalMEATonsClaimed() public view returns (uint32 total) {\n', '        MEAHiddenLogic logic = MEAHiddenLogic(hiddenLogicAddress);\n', '        return logic.getTotalTonsClaimed();\n', '    }\n', '\n', '    //Gets total seeded supply commanders\n', '    function totalMEATonsSupply() public view returns (uint32 total) {\n', '        MEAHiddenLogic logic = MEAHiddenLogic(hiddenLogicAddress);\n', '        return logic.getTotalSupply();\n', '    }\n', '\n', '     function totalStarSupplyRemaining(uint8 _starId) external view returns(uint32) {\n', '        MEAHiddenLogic logic = MEAHiddenLogic(hiddenLogicAddress);\n', '        return logic.getStarTotalSupply(_starId);\n', '    }\n', '\n', '    function claimOreOnlyFromAssetId(uint256 _assetId) {\n', '        uint256 collectibleClass = 0;\n', '        address shipOwner;\n', '        (collectibleClass, shipOwner) = _getShipInfo(_assetId);\n', '\n', '         require(shipOwner == msg.sender);\n', '\n', '        _claimOreAndClear(uint32(_assetId), 0);\n', '    }\n', '    /// @dev For creating CSC Collectible\n', '    function launchShipOnMEA(uint256 _assetId, uint8 starId) public whenNotPaused returns(uint256) {\n', '        \n', '        MEAHiddenLogic logic = MEAHiddenLogic(hiddenLogicAddress);\n', '\n', '        uint256 collectibleClass = 0;\n', '        address shipOwner;\n', '\n', '        (collectibleClass, shipOwner) = _getShipInfo(_assetId);\n', '\n', '        //Check if the ship owner is sender\n', '        require(shipOwner == msg.sender);\n', '\n', '        //Check if ship is back at earth\n', '        require(now > logic.getReturnTime(_assetId));\n', '        \n', '        //Claims ore and clears\n', '        _claimOreAndClear(uint32(_assetId), starId);\n', '\n', '        //Get Asset Stats\n', '        uint tripCount = assetIdNumberOfTripsMapping[uint32(_assetId)];\n', '        uint starTripDist = starLightyearDistanceMapping[starId];\n', '        uint256 oreMax = 5;\n', '        uint256 tripSeconds = 10;\n', '\n', '        if(collectibleClass == REAPER_INTREPID) {\n', '            oreMax = REAPER_INTREPID_EXTRACTION_BASE + (REAPER_INTREPID_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);\n', '            tripSeconds = REAPER_INTREPID_FTL_SPEED * starTripDist / 1000; // 4LPH - 900 seconds per light year\n', '            if(oreMax > REAPER_INTREPID_MAX_CARGO)\n', '                oreMax = REAPER_INTREPID_MAX_CARGO;\n', '        }\n', '        else if(collectibleClass == PHOENIX_CORSAIR) {\n', '            oreMax = PHOENIX_CORSAIR_EXTRACTION_BASE + (PHOENIX_CORSAIR_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);\n', '            tripSeconds = PHOENIX_CORSAIR_FTL_SPEED * starTripDist / 1000; // 2.5LPH - 1440 seconds per light year\n', '            if(oreMax > PHOENIX_CORSAIR_MAX_CARGO)\n', '                oreMax = PHOENIX_CORSAIR_MAX_CARGO;\n', '        }\n', '        else if(collectibleClass == VULCAN_PROMETHEUS) {\n', '            oreMax = VULCAN_PROMETHEUS_EXTRACTION_BASE + (VULCAN_PROMETHEUS_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);\n', '            tripSeconds = VULCAN_PROMETHEUS_FTL_SPEED * starTripDist / 1000; // 1.75LPH - 2057 seconds per light year\n', '            if(oreMax > VULCAN_PROMETHEUS_MAX_CARGO)\n', '                oreMax = VULCAN_PROMETHEUS_MAX_CARGO;\n', '        }\n', '        else if(collectibleClass == SIGMA) {\n', '            oreMax = SIGMA_EXTRACTION_BASE + (SIGMA_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);\n', '            tripSeconds = SIGMA_FTL_SPEED * starTripDist / 1000; // 0.85LPH - 4235 seconds per light year\n', '            if(oreMax > SIGMA_MAX_CARGO)\n', '                oreMax = SIGMA_MAX_CARGO;\n', '        }\n', '        else if(collectibleClass == HAYATO) { //Hayato\n', '            oreMax = HAYATO_EXTRACTION_BASE + (HAYATO_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);\n', '            tripSeconds = HAYATO_FTL_SPEED * starTripDist / 1000; // 10LPH - 360 seconds per light year\n', '            if(oreMax > HAYATO_MAX_CARGO)\n', '                oreMax = HAYATO_MAX_CARGO;\n', '        }\n', '        else if(collectibleClass == CPGPEREGRINE) { //CPG Peregrine\n', '            oreMax = CPGPEREGRINE_EXTRACTION_BASE + (CPGPEREGRINE_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);\n', '            tripSeconds = CPGPEREGRINE_FTL_SPEED * starTripDist / 1000; // 5LPH -720 seconds per light year\n', '            if(oreMax > CPGPEREGRINE_MAX_CARGO)\n', '                oreMax = CPGPEREGRINE_MAX_CARGO;\n', '        }\n', '        else if(collectibleClass == TACTICALCRUISER) { //TACTICA CRUISER Ships\n', '            oreMax = TACTICALCRUISER_EXTRACTION_BASE + (TACTICALCRUISER_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);\n', '            tripSeconds = TACTICALCRUISER_FTL_SPEED * starTripDist / 1000; \n', '            if(oreMax > TACTICALCRUISER_MAX_CARGO)\n', '                oreMax = TACTICALCRUISER_MAX_CARGO;\n', '        }\n', '        else if(collectibleClass == VULCAN_POD) { //TACTICA CRUISER Ships\n', '            oreMax = VULCAN_POD_EXTRACTION_BASE + (VULCAN_POD_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);\n', '            tripSeconds = VULCAN_POD_FTL_SPEED * starTripDist / 1000; \n', '            if(oreMax > VULCAN_POD_MAX_CARGO)\n', '                oreMax = VULCAN_POD_MAX_CARGO;\n', '        }\n', '        else if(collectibleClass >= DEVCLASS) { //Dev Ships\n', '            oreMax = DEVCLASS_EXTRACTION_BASE + (DEVCLASS_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);\n', '            tripSeconds = DEVCLASS_FTL_SPEED * starTripDist / 1000;\n', '            if(oreMax > DEVCLASS_MAX_CARGO)\n', '                oreMax = DEVCLASS_MAX_CARGO;\n', '        } else {\n', '            if(collectibleClass >= OTHERCRUISER) { //Support Other Promo Ships\n', '                oreMax = OTHERCRUISER_EXTRACTION_BASE + (OTHERCRUISER_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);\n', '                tripSeconds = OTHERCRUISER_FTL_SPEED * starTripDist / 1000; \n', '                if(oreMax > OTHERCRUISER_MAX_CARGO)\n', '                    oreMax = OTHERCRUISER_MAX_CARGO;\n', '            }\n', '        }\n', '\n', '        //Make Round Trip + Mining\n', '        tripSeconds = ((tripSeconds * 2) + miningTimePerTrip); //3600 for an hour - 0 for testing ***************************\n', '\n', '        //calculate travel time\n', '        uint256 returnTime = logic.startMEAMission(_assetId, oreMax, starId, tripSeconds);\n', '\n', '        //Confirm trip\n', '        if(returnTime > 0) {\n', '            assetIdNumberOfTripsMapping[uint32(_assetId)] += 1;\n', '            assetIdToStarVisitedMapping[uint32(_assetId)] = starId;\n', '            assetIdCurrentTripStartTimeMapping[uint32(_assetId)] = uint32(now);\n', '        }\n', '        \n', '        return returnTime;\n', '    }\n', '\n', '\n', '    /*** PRIVATE FUNCTIONS ***/\n', '\n', '    /// @dev  Safety check on _to address to prevent against an unexpected 0x0 default.\n', '    function _addressNotNull(address _to) internal pure returns (bool) {\n', '        return _to != address(0);\n', '    }\n', '\n', '    /// @dev  Claims and clears cargo -- ONLY INTERNAL\n', '    function _claimOreAndClear (uint32 _assetId, uint8 _starId) internal {\n', '        MEAHiddenLogic logic = MEAHiddenLogic(hiddenLogicAddress);\n', '        uint256[12] memory _ores = logic.getAssetCollectedOreBallancesArray(_assetId);\n', '        bool hasItems = false;\n', '\n', '        for(uint8 i = 0; i < 12; i++) {\n', '            if(_ores[i] > 0) {\n', '                collectedOreBalanceMapping[msg.sender][i] += uint32(_ores[i]);\n', '                hasItems = true;\n', '            }\n', '        }\n', '\n', "        //Doesn't Let you Travel to empty stars but lets you collect\n", '        if(hasItems == false && _starId > 0) {\n', '            require(logic.getStarTotalSupply(_starId) > 0);\n', '        }\n', '\n', '        logic.emptyShipCargo(_assetId);\n', '    }\n', '\n', '    function _getShipInfo(uint256 _assetId) internal view returns (uint256 collectibleClass, address owner) {\n', '        \n', '        uint256 nulldata;\n', '        bool nullbool;\n', '        uint256 collectibleType;\n', '\n', '        if(_assetId <= 3000) {\n', '            CSCERC721 shipData = CSCERC721(cscERC721Address);\n', '            (nulldata, nulldata, collectibleType, collectibleClass, nullbool, owner) = shipData.getCollectibleDetails(_assetId);\n', '        } else {\n', '            bytes32 nullstring;\n', '            CSCFactoryERC721 shipFData = CSCFactoryERC721(cscFactoryERC721Address);\n', '            (nulldata, nulldata, collectibleType, collectibleClass, nullstring, nullbool, owner) = shipFData.getCollectibleDetails(_assetId);\n', '        }\n', '\n', '    }\n', '\n', '    \n', '    \n', '    \n', '    \n', '}']
