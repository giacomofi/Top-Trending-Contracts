['pragma solidity 0.4.24;\n', '\n', '// ERC20 Token with ERC223 Token compatibility\n', '// SafeMath from OpenZeppelin Standard\n', '// Added burn functions from Ethereum Token \n', '// - https://theethereum.wiki/w/index.php/ERC20_Token_Standard\n', '// - https://github.com/Dexaran/ERC23-tokens/blob/Recommended/ERC223_Token.sol\n', '// - https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', '// - https://www.ethereum.org/token (uncontrolled, non-standard)\n', '\n', '\n', '// ERC223\n', 'interface ContractReceiver {\n', '  function tokenFallback( address from, uint value, bytes data ) external;\n', '}\n', '\n', '// SafeMath\n', 'contract SafeMath2 {\n', '\n', '    function safeSub(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '    \n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '}\n', '}\n', '\n', '\n', 'contract RUNEToken is SafeMath2\n', '{\n', '    \n', '    // Rune Characteristics\n', '    string  public name = "Rune";\n', '    string  public symbol  = "RUNE";\n', '    uint256   public decimals  = 18;\n', '    uint256 public totalSupply  = 1000000000 * (10 ** decimals);\n', '\n', '    // Mapping\n', '    mapping( address => uint256 ) balances_;\n', '    mapping( address => mapping(address => uint256) ) allowances_;\n', '    \n', '    // Minting event\n', '    function RUNEToken() public {\n', '            balances_[msg.sender] = totalSupply;\n', '                emit Transfer( address(0), msg.sender, totalSupply );\n', '        }\n', '\n', '    function() public payable { revert(); } // does not accept money\n', '    \n', '    // ERC20\n', '    event Approval( address indexed owner,\n', '                    address indexed spender,\n', '                    uint value );\n', '\n', '    event Transfer( address indexed from,\n', '                    address indexed to,\n', '                    uint256 value );\n', '\n', '\n', '    // ERC20\n', '    function balanceOf( address owner ) public constant returns (uint) {\n', '        return balances_[owner];\n', '    }\n', '\n', '    // ERC20\n', '    function approve( address spender, uint256 value ) public\n', '    returns (bool success)\n', '    {\n', '        allowances_[msg.sender][spender] = value;\n', '        emit Approval( msg.sender, spender, value );\n', '        return true;\n', '    }\n', '    \n', '    // recommended fix for known attack on any ERC20\n', '    function safeApprove( address _spender,\n', '                            uint256 _currentValue,\n', '                            uint256 _value ) public\n', '                            returns (bool success) {\n', '\n', '        // If current allowance for _spender is equal to _currentValue, then\n', '        // overwrite it with _value and return true, otherwise return false.\n', '\n', '        if (allowances_[msg.sender][_spender] == _currentValue)\n', '        return approve(_spender, _value);\n', '\n', '        return false;\n', '    }\n', '\n', '    // ERC20\n', '    function allowance( address owner, address spender ) public constant\n', '    returns (uint256 remaining)\n', '    {\n', '        return allowances_[owner][spender];\n', '    }\n', '\n', '    // ERC20\n', '    function transfer(address to, uint256 value) public returns (bool success)\n', '    {\n', '        bytes memory empty; // null\n', '        _transfer( msg.sender, to, value, empty );\n', '        return true;\n', '    }\n', '\n', '    // ERC20\n', '    function transferFrom( address from, address to, uint256 value ) public\n', '    returns (bool success)\n', '    {\n', '        require( value <= allowances_[from][msg.sender] );\n', '\n', '        allowances_[from][msg.sender] -= value;\n', '        bytes memory empty;\n', '        _transfer( from, to, value, empty );\n', '\n', '        return true;\n', '    }\n', '\n', '    // ERC223 Transfer and invoke specified callback\n', '    function transfer( address to,\n', '                        uint value,\n', '                        bytes data,\n', '                        string custom_fallback ) public returns (bool success)\n', '    {\n', '        _transfer( msg.sender, to, value, data );\n', '\n', '        if ( isContract(to) )\n', '        {\n', '        ContractReceiver rx = ContractReceiver( to );\n', '        require( address(rx).call.value(0)(bytes4(keccak256(custom_fallback)),\n', '                msg.sender,\n', '                value,\n', '                data) );\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    // ERC223 Transfer to a contract or externally-owned account\n', '    function transfer( address to, uint value, bytes data ) public\n', '    returns (bool success)\n', '    {\n', '        if (isContract(to)) {\n', '        return transferToContract( to, value, data );\n', '        }\n', '\n', '        _transfer( msg.sender, to, value, data );\n', '        return true;\n', '    }\n', '\n', '    // ERC223 Transfer to contract and invoke tokenFallback() method\n', '    function transferToContract( address to, uint value, bytes data ) private\n', '    returns (bool success)\n', '    {\n', '        _transfer( msg.sender, to, value, data );\n', '\n', '        ContractReceiver rx = ContractReceiver(to);\n', '        rx.tokenFallback( msg.sender, value, data );\n', '\n', '        return true;\n', '    }\n', '\n', '    // ERC223 fetch contract size (must be nonzero to be a contract)\n', '    function isContract( address _addr ) private constant returns (bool)\n', '    {\n', '        uint length;\n', '        assembly { length := extcodesize(_addr) }\n', '        return (length > 0);\n', '    }\n', '\n', '    function _transfer( address from,\n', '                        address to,\n', '                        uint value,\n', '                        bytes data ) internal\n', '    {\n', '        require( to != 0x0 );\n', '        require( balances_[from] >= value );\n', '        require( balances_[to] + value > balances_[to] ); // catch overflow\n', '\n', '        balances_[from] -= value;\n', '        balances_[to] += value;\n', '\n', '        //Transfer( from, to, value, data ); ERC223-compat version\n', '        bytes memory empty;\n', '        empty = data;\n', '        emit Transfer( from, to, value ); // ERC20-compat version\n', '    }\n', '    \n', '    \n', '        // Ethereum Token\n', '    event Burn( address indexed from, uint256 value );\n', '    \n', '        // Ethereum Token\n', '    function burn( uint256 value ) public\n', '    returns (bool success)\n', '    {\n', '        require( balances_[msg.sender] >= value );\n', '        balances_[msg.sender] -= value;\n', '        totalSupply -= value;\n', '\n', '        emit Burn( msg.sender, value );\n', '        return true;\n', '    }\n', '\n', '    // Ethereum Token\n', '    function burnFrom( address from, uint256 value ) public\n', '    returns (bool success)\n', '    {\n', '        require( balances_[from] >= value );\n', '        require( value <= allowances_[from][msg.sender] );\n', '\n', '        balances_[from] -= value;\n', '        allowances_[from][msg.sender] -= value;\n', '        totalSupply -= value;\n', '\n', '        emit Burn( from, value );\n', '        return true;\n', '    }\n', '  \n', '  \n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC165\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', ' */\n', 'interface ERC165 {\n', '\n', '  /**\n', '   * @notice Query if a contract implements an interface\n', '   * @param _interfaceId The interface identifier, as specified in ERC-165\n', '   * @dev Interface identification is specified in ERC-165. This function\n', '   * uses less than 30,000 gas.\n', '   */\n', '  function supportsInterface(bytes4 _interfaceId)\n', '    external\n', '    view\n', '    returns (bool);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SupportsInterfaceWithLookup\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Implements ERC165 using a lookup table.\n', ' */\n', 'contract SupportsInterfaceWithLookup is ERC165 {\n', '\n', '  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n', '  /**\n', '   * 0x01ffc9a7 ===\n', "   *   bytes4(keccak256('supportsInterface(bytes4)'))\n", '   */\n', '\n', '  /**\n', "   * @dev a mapping of interface id to whether or not it's supported\n", '   */\n', '  mapping(bytes4 => bool) internal supportedInterfaces;\n', '\n', '  /**\n', '   * @dev A contract implementing SupportsInterfaceWithLookup\n', '   * implement ERC165 itself\n', '   */\n', '  constructor()\n', '    public\n', '  {\n', '    _registerInterface(InterfaceId_ERC165);\n', '  }\n', '\n', '  /**\n', '   * @dev implement supportsInterface(bytes4) using a lookup table\n', '   */\n', '  function supportsInterface(bytes4 _interfaceId)\n', '    external\n', '    view\n', '    returns (bool)\n', '  {\n', '    return supportedInterfaces[_interfaceId];\n', '  }\n', '\n', '  /**\n', '   * @dev private method for registering an interface\n', '   */\n', '  function _registerInterface(bytes4 _interfaceId)\n', '    internal\n', '  {\n', '    require(_interfaceId != 0xffffffff);\n', '    supportedInterfaces[_interfaceId] = true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Basic is ERC165 {\n', '\n', '  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\n', '  /*\n', '   * 0x80ac58cd ===\n', "   *   bytes4(keccak256('balanceOf(address)')) ^\n", "   *   bytes4(keccak256('ownerOf(uint256)')) ^\n", "   *   bytes4(keccak256('approve(address,uint256)')) ^\n", "   *   bytes4(keccak256('getApproved(uint256)')) ^\n", "   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n", "   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n", "   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n", "   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n", "   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n", '   */\n', '\n', '  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n', '  /**\n', '   * 0x780e9d63 ===\n', "   *   bytes4(keccak256('totalSupply()')) ^\n", "   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n", "   *   bytes4(keccak256('tokenByIndex(uint256)'))\n", '   */\n', '\n', '  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n', '  /**\n', '   * 0x5b5e139f ===\n', "   *   bytes4(keccak256('name()')) ^\n", "   *   bytes4(keccak256('symbol()')) ^\n", "   *   bytes4(keccak256('tokenURI(uint256)'))\n", '   */\n', '\n', '  event Transfer(\n', '    address indexed _from,\n', '    address indexed _to,\n', '    uint256 indexed _tokenId\n', '  );\n', '  event Approval(\n', '    address indexed _owner,\n', '    address indexed _approved,\n', '    uint256 indexed _tokenId\n', '  );\n', '  event ApprovalForAll(\n', '    address indexed _owner,\n', '    address indexed _operator,\n', '    bool _approved\n', '  );\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function getApproved(uint256 _tokenId)\n', '    public view returns (address _operator);\n', '\n', '  function setApprovalForAll(address _operator, bool _approved) public;\n', '  function isApprovedForAll(address _owner, address _operator)\n', '    public view returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n', '    public;\n', '\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public;\n', '}\n', '\n', '\n', '\n', 'contract THORChain721Receiver {\n', '  /**\n', '   * @dev Magic value to be returned upon successful reception of an NFT\n', '   *  Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`,\n', '   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '   */\n', '  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  bytes4 retval;\n', '  bool reverts;\n', '\n', '  constructor(bytes4 _retval, bool _reverts) public {\n', '    retval = _retval;\n', '    reverts = _reverts;\n', '  }\n', '\n', '  event Received(\n', '    address _operator,\n', '    address _from,\n', '    uint256 _tokenId,\n', '    bytes _data,\n', '    uint256 _gas\n', '  );\n', '\n', '  function onERC721Received(\n', '    address _operator,\n', '    address _from,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '    returns(bytes4)\n', '  {\n', '    require(!reverts);\n', '    emit Received(\n', '      _operator,\n', '      _from,\n', '      _tokenId,\n', '      _data,\n', '      gasleft()\n', '    );\n', '    return retval;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = _a * _b;\n', '    require(c / _a == _b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b <= _a);\n', '    uint256 c = _a - _b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    uint256 c = _a + _b;\n', '    require(c >= _a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   * as the code is not actually created until after the constructor finishes.\n', '   * @param _account address of the account to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address _account) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(_account) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n', '\n', '  using SafeMath for uint256;\n', '  using AddressUtils for address;\n', '\n', '  // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) internal tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) internal tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping (address => uint256) internal ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping (address => mapping (address => bool)) internal operatorApprovals;\n', '\n', '  constructor()\n', '    public\n', '  {\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(InterfaceId_ERC721);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address\n', '   * @param _owner address to query the balance of\n', '   * @return uint256 representing the amount owned by the passed address\n', '   */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    require(_owner != address(0));\n', '    return ownedTokensCount[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the owner of the specified token ID\n', '   * @param _tokenId uint256 ID of the token to query the owner of\n', '   * @return owner address currently marked as the owner of the given token ID\n', '   */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Approves another address to transfer the given token ID\n', '   * The zero address indicates there is no approved address.\n', '   * There can only be one approved address per token at a given time.\n', '   * Can only be called by the token owner or an approved operator.\n', '   * @param _to address to be approved for the given token ID\n', '   * @param _tokenId uint256 ID of the token to be approved\n', '   */\n', '  function approve(address _to, uint256 _tokenId) public {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '    tokenApprovals[_tokenId] = _to;\n', '    emit Approval(owner, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for the given token ID\n', '   */\n', '  function getApproved(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * An operator is allowed to transfer all tokens of the sender on their behalf\n', '   * @param _to operator address to set the approval\n', '   * @param _approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(address _to, bool _approved) public {\n', '    require(_to != msg.sender);\n', '    operatorApprovals[msg.sender][_to] = _approved;\n', '    emit ApprovalForAll(msg.sender, _to, _approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param _owner owner address which you want to query the approval of\n', '   * @param _operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(\n', '    address _owner,\n', '    address _operator\n', '  )\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return operatorApprovals[_owner][_operator];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers the ownership of a given token ID to another address\n', '   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '  {\n', '    require(isApprovedOrOwner(msg.sender, _tokenId));\n', '    require(_to != address(0));\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeTokenFrom(_from, _tokenId);\n', '    addTokenTo(_to, _tokenId);\n', '\n', '    emit Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   *\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '  {\n', '    // solium-disable-next-line arg-overflow\n', '    safeTransferFrom(_from, _to, _tokenId, "");\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '  {\n', '    transferFrom(_from, _to, _tokenId);\n', '    // solium-disable-next-line arg-overflow\n', '    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the specified token exists\n', '   * @param _tokenId uint256 ID of the token to query the existence of\n', '   * @return whether the token exists\n', '   */\n', '  function _exists(uint256 _tokenId) internal view returns (bool) {\n', '    address owner = tokenOwner[_tokenId];\n', '    return owner != address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the given spender can transfer a given token ID\n', '   * @param _spender address of the spender to query\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @return bool whether the msg.sender is approved for the given token ID,\n', '   *  is an operator of the owner, or is the owner of the token\n', '   */\n', '  function isApprovedOrOwner(\n', '    address _spender,\n', '    uint256 _tokenId\n', '  )\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    address owner = ownerOf(_tokenId);\n', '    // Disable solium check because of\n', '    // https://github.com/duaraghav8/Solium/issues/175\n', '    // solium-disable-next-line operator-whitespace\n', '    return (\n', '      _spender == owner ||\n', '      getApproved(_tokenId) == _spender ||\n', '      isApprovedForAll(owner, _spender)\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param _to The address that will own the minted token\n', '   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    addTokenTo(_to, _tokenId);\n', '    emit Transfer(address(0), _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    clearApproval(_owner, _tokenId);\n', '    removeTokenFrom(_owner, _tokenId);\n', '    emit Transfer(_owner, address(0), _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to clear current approval of a given token ID\n', '   * Reverts if the given address is not indeed the owner of the token\n', '   * @param _owner owner of the token\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function clearApproval(address _owner, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    if (tokenApprovals[_tokenId] != address(0)) {\n', '      tokenApprovals[_tokenId] = address(0);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param _to address representing the new owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _from);\n', '    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n', '    tokenOwner[_tokenId] = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onERC721Received` on a target address\n', '   * The call is not executed if the target address is not a contract\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _to target address that will receive the tokens\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function checkAndCallSafeTransfer(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    if (!_to.isContract()) {\n', '      return true;\n', '    }\n', '    bytes4 retval = THORChain721Receiver(_to).onERC721Received(\n', '      msg.sender, _from, _tokenId, _data);\n', '    return (retval == ERC721_RECEIVED);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Enumerable is ERC721Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function tokenOfOwnerByIndex(\n', '    address _owner,\n', '    uint256 _index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256 _tokenId);\n', '\n', '  function tokenByIndex(uint256 _index) public view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Metadata is ERC721Basic {\n', '  function name() external view returns (string _name);\n', '  function symbol() external view returns (string _symbol);\n', '  function tokenURI(uint256 _tokenId) public view returns (string);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n', '\n', '  // Token name\n', '  string internal name_;\n', '\n', '  // Token symbol\n', '  string internal symbol_;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping(address => uint256[]) internal ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] internal allTokens;\n', '\n', '  // Mapping from token id to position in the allTokens array\n', '  mapping(uint256 => uint256) internal allTokensIndex;\n', '\n', '  // Optional mapping for token URIs\n', '  mapping(uint256 => string) internal tokenURIs;\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  constructor(string _name, string _symbol) public {\n', '    name_ = _name;\n', '    symbol_ = _symbol;\n', '\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(InterfaceId_ERC721Enumerable);\n', '    _registerInterface(InterfaceId_ERC721Metadata);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token name\n', '   * @return string representing the token name\n', '   */\n', '  function name() external view returns (string) {\n', '    return name_;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token symbol\n', '   * @return string representing the token symbol\n', '   */\n', '  function symbol() external view returns (string) {\n', '    return symbol_;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns an URI for a given token ID\n', '   * Throws if the token ID does not exist. May return an empty string.\n', '   * @param _tokenId uint256 ID of the token to query\n', '   */\n', '  function tokenURI(uint256 _tokenId) public view returns (string) {\n', '    require(_exists(_tokenId));\n', '    return tokenURIs[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '   * @param _owner address owning the tokens list to be accessed\n', '   * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '   */\n', '  function tokenOfOwnerByIndex(\n', '    address _owner,\n', '    uint256 _index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    require(_index < balanceOf(_owner));\n', '    return ownedTokens[_owner][_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the total amount of tokens stored by the contract\n', '   * @return uint256 representing the total amount of tokens\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return allTokens.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of all the tokens in this contract\n', '   * Reverts if the index is greater or equal to the total number of tokens\n', '   * @param _index uint256 representing the index to be accessed of the tokens list\n', '   * @return uint256 token ID at the given index of the tokens list\n', '   */\n', '  function tokenByIndex(uint256 _index) public view returns (uint256) {\n', '    require(_index < totalSupply());\n', '    return allTokens[_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to set the token URI for a given token\n', '   * Reverts if the token ID does not exist\n', '   * @param _tokenId uint256 ID of the token to set its URI\n', '   * @param _uri string URI to assign\n', '   */\n', '  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n', '    require(_exists(_tokenId));\n', '    tokenURIs[_tokenId] = _uri;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param _to address representing the new owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    super.addTokenTo(_to, _tokenId);\n', '    uint256 length = ownedTokens[_to].length;\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    super.removeTokenFrom(_from, _tokenId);\n', '\n', '    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n', '    // then delete the last slot.\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    // This also deletes the contents at the last position of the array\n', '    ownedTokens[_from].length--;\n', '\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param _to address the beneficiary that will own the minted token\n', '   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    super._mint(_to, _tokenId);\n', '\n', '    allTokensIndex[_tokenId] = allTokens.length;\n', '    allTokens.push(_tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param _owner owner of the token to burn\n', '   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    super._burn(_owner, _tokenId);\n', '\n', '    // Clear metadata (if any)\n', '    if (bytes(tokenURIs[_tokenId]).length != 0) {\n', '      delete tokenURIs[_tokenId];\n', '    }\n', '\n', '    // Reorg all tokens array\n', '    uint256 tokenIndex = allTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = allTokens.length.sub(1);\n', '    uint256 lastToken = allTokens[lastTokenIndex];\n', '\n', '    allTokens[tokenIndex] = lastToken;\n', '    allTokens[lastTokenIndex] = 0;\n', '\n', '    allTokens.length--;\n', '    allTokensIndex[_tokenId] = 0;\n', '    allTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '}\n', '\n', 'contract THORChain721 is ERC721Token {\n', '    \n', '    address public owner;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    constructor () public ERC721Token("testTC1", "testTC1") {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // Revert any transaction to this contract.\n', '    function() public payable { \n', '        revert(); \n', '    }\n', '    \n', '    function mint(address _to, uint256 _tokenId) public onlyOwner {\n', '        super._mint(_to, _tokenId);\n', '    }\n', '\n', '    function burn(uint256 _tokenId) public onlyOwner {\n', '        super._burn(ownerOf(_tokenId), _tokenId);\n', '    }\n', '\n', '    function setTokenURI(uint256 _tokenId, string _uri) public onlyOwner {\n', '        super._setTokenURI(_tokenId, _uri);\n', '    }\n', '\n', '    function _removeTokenFrom(address _from, uint256 _tokenId) public {\n', '        super.removeTokenFrom(_from, _tokenId);\n', '    }\n', '}\n', '\n', 'contract Whitelist {\n', '\n', '    address public owner;\n', '    mapping(address => bool) public whitelistAdmins;\n', '    mapping(address => bool) public whitelist;\n', '\n', '    constructor () public {\n', '        owner = msg.sender;\n', '        whitelistAdmins[owner] = true;\n', '    }\n', '\n', '    modifier onlyOwner () {\n', '        require(msg.sender == owner, "Only owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhitelistAdmin () {\n', '        require(whitelistAdmins[msg.sender], "Only whitelist admin");\n', '        _;\n', '    }\n', '\n', '    function isWhitelisted(address _addr) public view returns (bool) {\n', '        return whitelist[_addr];\n', '    }\n', '\n', '    function addWhitelistAdmin(address _admin) public onlyOwner {\n', '        whitelistAdmins[_admin] = true;\n', '    }\n', '\n', '    function removeWhitelistAdmin(address _admin) public onlyOwner {\n', '        require(_admin != owner, "Cannot remove contract owner");\n', '        whitelistAdmins[_admin] = false;\n', '    }\n', '\n', '    function whitelistAddress(address _user) public onlyWhitelistAdmin  {\n', '        whitelist[_user] = true;\n', '    }\n', '\n', '    function whitelistAddresses(address[] _users) public onlyWhitelistAdmin {\n', '        for (uint256 i = 0; i < _users.length; i++) {\n', '            whitelist[_users[i]] = true;\n', '        }\n', '    }\n', '\n', '    function unWhitelistAddress(address _user) public onlyWhitelistAdmin  {\n', '        whitelist[_user] = false;\n', '    }\n', '\n', '    function unWhitelistAddresses(address[] _users) public onlyWhitelistAdmin {\n', '        for (uint256 i = 0; i < _users.length; i++) {\n', '            whitelist[_users[i]] = false;\n', '        }\n', '    }\n', '\n', '}\n', '\n', 'contract Sale1 is Whitelist {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    uint256 public maximumNonWhitelistAmount = 2500 * 50 ether; // in minimum units of rune\n', '\n', '    // in minimum units of rune (1000 = 0.000000000000001000 RUNE per WEI)\n', '    // note that this only works if the amount of rune per wei is more than 1\n', '    uint256 public runeToWeiRatio = 2500;\n', '    bool public withdrawalsAllowed = false;\n', '    bool public tokensWithdrawn = false;\n', '    address public owner;\n', '    address public proceedsAddress = 0xd46cac034f44ac93049f8f1109b6b74f79b3e5e6;\n', '    RUNEToken public RuneToken = RUNEToken(0xdEE02D94be4929d26f67B64Ada7aCf1914007F10);\n', '    Whitelist public WhitelistContract = Whitelist(0x395Eb47d46F7fFa7Dd4b27e1B64FC6F21d5CC4C7);\n', '    THORChain721 public ERC721Token = THORChain721(0x52A9700551128585f0d68B6D4D2FA322a2AeeE47);\n', '\n', '    uint256 public CollectibleIndex0 = 0;\n', '    uint256 public CollectibleIndex1 = 1;\n', '    uint256 public CollectibleIndex2 = 2;\n', '    uint256 public CollectibleIndex3 = 3;\n', '    uint256 public CollectibleIndex4 = 4;\n', '    uint256 public CollectibleIndex5 = 5;\n', '\n', '    uint public winAmount0 = 3333.333333333333333333 ether;\n', '    uint public winAmount1 = 6666.666666666666666667 ether;\n', '    uint public winAmount2 = 10000.0 ether;\n', '    uint public winAmount3 = 13333.333333333333333333 ether;\n', '    uint public winAmount4 = 16666.666666666666666667 ether;\n', '    uint public winAmount5 = 20000.0 ether;\n', '\n', '    mapping (uint256 => address) public collectibleAllocation;\n', '    mapping (address => uint256) public runeAllocation;\n', '\n', '    uint256 public totalRunePurchased;\n', '    uint256 public totalRuneWithdrawn;\n', '\n', '    event TokenWon(uint256 tokenId, address winner);\n', '\n', '    modifier onlyOwner () {\n', '        require(owner == msg.sender, "Only the owner can use this function");\n', '        _;\n', '    }\n', '\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function () public payable {\n', '        require(!tokensWithdrawn, "Tokens withdrawn. No more purchases possible.");\n', '        // Make sure we have enough tokens to sell\n', '        uint runeRemaining = (RuneToken.balanceOf(this).add(totalRuneWithdrawn)).sub(totalRunePurchased);\n', '        uint toForward = msg.value;\n', '        uint weiToReturn = 0;\n', '        uint purchaseAmount = msg.value * runeToWeiRatio;\n', '        if(runeRemaining < purchaseAmount) {\n', '            purchaseAmount = runeRemaining;\n', '            uint price = purchaseAmount.div(runeToWeiRatio);\n', '            weiToReturn = msg.value.sub(price);\n', '            toForward = toForward.sub(weiToReturn);\n', '        }\n', '\n', '        // Assign NFTs\n', '        uint ethBefore = totalRunePurchased.div(runeToWeiRatio);\n', '        uint ethAfter = ethBefore.add(toForward);\n', '\n', '        if(ethBefore <= winAmount0 && ethAfter > winAmount0) {\n', '            collectibleAllocation[CollectibleIndex0] = msg.sender;\n', '            emit TokenWon(CollectibleIndex0, msg.sender);\n', '        } if(ethBefore < winAmount1 && ethAfter >= winAmount1) {\n', '            collectibleAllocation[CollectibleIndex1] = msg.sender;\n', '            emit TokenWon(CollectibleIndex1, msg.sender);\n', '        } if(ethBefore < winAmount2 && ethAfter >= winAmount2) {\n', '            collectibleAllocation[CollectibleIndex2] = msg.sender;\n', '            emit TokenWon(CollectibleIndex2, msg.sender);\n', '        } if(ethBefore < winAmount3 && ethAfter >= winAmount3) {\n', '            collectibleAllocation[CollectibleIndex3] = msg.sender;\n', '            emit TokenWon(CollectibleIndex3, msg.sender);\n', '        } if(ethBefore < winAmount4 && ethAfter >= winAmount4) {\n', '            collectibleAllocation[CollectibleIndex4] = msg.sender;\n', '            emit TokenWon(CollectibleIndex4, msg.sender);\n', '        } if(ethBefore < winAmount5 && ethAfter >= winAmount5) {\n', '            collectibleAllocation[CollectibleIndex5] = msg.sender;\n', '            emit TokenWon(CollectibleIndex5, msg.sender);\n', '        } \n', '\n', '        runeAllocation[msg.sender] = runeAllocation[msg.sender].add(purchaseAmount);\n', '        totalRunePurchased = totalRunePurchased.add(purchaseAmount);\n', '        // Withdraw  ETH \n', '        proceedsAddress.transfer(toForward);\n', '        if(weiToReturn > 0) {\n', '            address(msg.sender).transfer(weiToReturn);\n', '        }\n', '    }\n', '\n', '    function setMaximumNonWhitelistAmount (uint256 _newAmount) public onlyOwner {\n', '        maximumNonWhitelistAmount = _newAmount;\n', '    }\n', '\n', '    function withdrawRune () public {\n', '        require(withdrawalsAllowed, "Withdrawals are not allowed.");\n', '        uint256 runeToWithdraw;\n', '        if (WhitelistContract.isWhitelisted(msg.sender)) {\n', '            runeToWithdraw = runeAllocation[msg.sender];\n', '        } else {\n', '            runeToWithdraw = (\n', '                runeAllocation[msg.sender] > maximumNonWhitelistAmount\n', '            ) ? maximumNonWhitelistAmount : runeAllocation[msg.sender];\n', '        }\n', '\n', '        runeAllocation[msg.sender] = runeAllocation[msg.sender].sub(runeToWithdraw);\n', '        totalRuneWithdrawn = totalRuneWithdrawn.add(runeToWithdraw);\n', '        RuneToken.transfer(msg.sender, runeToWithdraw); // ERC20 method\n', '        distributeCollectiblesTo(msg.sender);\n', '    }\n', '\n', '    function ownerWithdrawRune () public onlyOwner {\n', '        tokensWithdrawn = true;\n', '        RuneToken.transfer(owner, RuneToken.balanceOf(this).sub(totalRunePurchased));\n', '    }\n', '\n', '    function allowWithdrawals () public onlyOwner {\n', '        withdrawalsAllowed = true;\n', '    }\n', '\n', '    function distributeTo (address _receiver) public onlyOwner {\n', '        require(runeAllocation[_receiver] > 0, "Receiver has not purchased any RUNE.");\n', '        uint balance = runeAllocation[_receiver];\n', '        delete runeAllocation[_receiver];\n', '        RuneToken.transfer(_receiver, balance);\n', '        distributeCollectiblesTo(_receiver);\n', '    }\n', '\n', '    function distributeCollectiblesTo (address _receiver) internal {\n', '        if(collectibleAllocation[CollectibleIndex0] == _receiver) {\n', '            delete collectibleAllocation[CollectibleIndex0];\n', '            ERC721Token.safeTransferFrom(owner, _receiver, CollectibleIndex0);\n', '        } \n', '        if(collectibleAllocation[CollectibleIndex1] == _receiver) {\n', '            delete collectibleAllocation[CollectibleIndex1];\n', '            ERC721Token.safeTransferFrom(owner, _receiver, CollectibleIndex1);\n', '        } \n', '        if(collectibleAllocation[CollectibleIndex2] == _receiver) {\n', '            delete collectibleAllocation[CollectibleIndex2];\n', '            ERC721Token.safeTransferFrom(owner, _receiver, CollectibleIndex2);\n', '        } \n', '        if(collectibleAllocation[CollectibleIndex3] == _receiver) {\n', '            delete collectibleAllocation[CollectibleIndex3];\n', '            ERC721Token.safeTransferFrom(owner, _receiver, CollectibleIndex3);\n', '        } \n', '        if(collectibleAllocation[CollectibleIndex4] == _receiver) {\n', '            delete collectibleAllocation[CollectibleIndex4];\n', '            ERC721Token.safeTransferFrom(owner, _receiver, CollectibleIndex4);\n', '        } \n', '        if(collectibleAllocation[CollectibleIndex5] == _receiver) {\n', '            delete collectibleAllocation[CollectibleIndex5];\n', '            ERC721Token.safeTransferFrom(owner, _receiver, CollectibleIndex5);\n', '        }\n', '    }\n', '}']