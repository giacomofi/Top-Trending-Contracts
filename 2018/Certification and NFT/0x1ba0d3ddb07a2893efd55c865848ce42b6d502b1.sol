['pragma solidity ^0.4.18;\n', '\n', '/* \n', ' * IGNITE RATINGS "PHASED DISCOUNT" CROWDSALE CONTRACT. COPYRIGHT 2018 TRUSTIC HOLDING INC. Author - Damon Barnard (damon@igniteratings.com)\n', ' * CONTRACT DEPLOYS A CROWDSALE WITH TIME-BASED REDUCING DISCOUNTS.\n', ' */\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount) public;\n', '}\n', '\n', '/*\n', ' * CONTRACT PERMITS IGNITE TO RECLAIM UNSOLD IGNT\n', ' */\n', 'contract withdrawToken {\n', '    function transfer(address _to, uint _value) external returns (bool success);\n', '    function balanceOf(address _owner) external constant returns (uint balance);\n', '}\n', '\n', '/*\n', ' * SAFEMATH - MATH OPERATIONS WITH SAFETY CHECKS THAT THROW ON ERROR\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/*\n', ' * CROWDSALE CONTRACT CONSTRUCTOR\n', ' */\n', 'contract Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    address public owner; /* CONTRACT OWNER */\n', '    address public operations; /* OPERATIONS MULTISIG WALLET */\n', '    address public index; /* IGNITE INDEX WALLET */\n', '    uint256 public amountRaised; /* TOTAL ETH CONTRIBUTIONS*/\n', '    uint256 public amountRaisedPhase; /* ETH CONTRIBUTIONS SINCE LAST WITHDRAWAL EVENT */\n', '    uint256 public tokensSold; /* TOTAL TOKENS SOLD */\n', '    uint256 public phase1Price; /* PHASE 1 TOKEN PRICE */\n', '    uint256 public phase2Price; /* PHASE 2 TOKEN PRICE */\n', '    uint256 public phase3Price; /* PHASE 3 TOKEN PRICE */\n', '    uint256 public phase4Price; /* PHASE 4 TOKEN PRICE */\n', '    uint256 public phase5Price; /* PHASE 5 TOKEN PRICE */\n', '    uint256 public phase6Price; /* PHASE 6 TOKEN PRICE */\n', '    uint256 public startTime; /* CROWDSALE START TIME */\n', '    token public tokenReward; /* IGNT */\n', '    mapping(address => uint256) public contributionByAddress;\n', '\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function Crowdsale(\n', '        uint saleStartTime,\n', '        address ownerAddress,\n', '        address operationsAddress,\n', '        address indexAddress,\n', '        address rewardTokenAddress\n', '\n', '    ) public {\n', '        startTime = saleStartTime; /* SETS START TIME */\n', '        owner = ownerAddress; /* SETS OWNER */\n', '        operations = operationsAddress; /* SETS OPERATIONS MULTISIG WALLET */\n', '        index = indexAddress; /* SETS IGNITE INDEX WALLET */\n', '        phase1Price = 0.00600 ether; /* SETS PHASE 1 TOKEN PRICE */\n', '        phase2Price = 0.00613 ether; /* SETS PHASE 2 TOKEN PRICE */\n', '        phase3Price = 0.00627 ether; /* SETS PHASE 3 TOKEN PRICE */\n', '        phase4Price = 0.00640 ether; /* SETS PHASE 4 TOKEN PRICE */\n', '        phase5Price = 0.00653 ether; /* SETS PHASE 5 TOKEN PRICE */\n', '        phase6Price = 0.00667 ether; /* SETS PHASE 6 TOKEN PRICE */\n', '        tokenReward = token(rewardTokenAddress); /* SETS IGNT AS CONTRACT REWARD */\n', '    }\n', '\n', '    /*\n', '     * FALLBACK FUNCTION FOR ETH CONTRIBUTIONS - SET OUT PER DISCOUNT PHASE FOR EASE OF UNDERSTANDING/TRANSPARENCY\n', '     */\n', '    function () public payable {\n', '        uint256 amount = msg.value;\n', '        require(now > startTime);\n', '        require(amount <= 1000 ether);\n', '\n', '        if(now < startTime.add(7 days)) { /* SETS PAYMENT RULES FOR CROWDSALE PHASE 1 */\n', '            contributionByAddress[msg.sender] = contributionByAddress[msg.sender].add(amount);\n', '            amountRaised = amountRaised.add(amount);\n', '            amountRaisedPhase = amountRaisedPhase.add(amount);\n', '            tokensSold = tokensSold.add(amount.mul(10**18).div(phase1Price));\n', '            tokenReward.transfer(msg.sender, amount.mul(10**18).div(phase1Price));\n', '            FundTransfer(msg.sender, amount, true);\n', '        }\n', '\n', '        else if(now > startTime.add(7 days) && now < startTime.add(14 days)) { /* SETS PAYMENT RULES FOR CROWDSALE PHASE 2 */\n', '            contributionByAddress[msg.sender] = contributionByAddress[msg.sender].add(amount);\n', '            amountRaised = amountRaised.add(amount);\n', '            amountRaisedPhase = amountRaisedPhase.add(amount);\n', '            tokensSold = tokensSold.add(amount.mul(10**18).div(phase2Price));\n', '            tokenReward.transfer(msg.sender, amount.mul(10**18).div(phase2Price));\n', '            FundTransfer(msg.sender, amount, true);\n', '        }\n', '\n', '        else if(now > startTime.add(14 days) && now < startTime.add(21 days)) { /* SETS PAYMENT RULES FOR CROWDSALE PHASE 3 */\n', '            contributionByAddress[msg.sender] = contributionByAddress[msg.sender].add(amount);\n', '            amountRaised = amountRaised.add(amount);\n', '            amountRaisedPhase = amountRaisedPhase.add(amount);\n', '            tokensSold = tokensSold.add(amount.mul(10**18).div(phase3Price));\n', '            tokenReward.transfer(msg.sender, amount.mul(10**18).div(phase3Price));\n', '            FundTransfer(msg.sender, amount, true);\n', '        }\n', '\n', '        else if(now > startTime.add(21 days) && now < startTime.add(28 days)) { /* SETS PAYMENT RULES FOR CROWDSALE PHASE 4 */\n', '            contributionByAddress[msg.sender] = contributionByAddress[msg.sender].add(amount);\n', '            amountRaised = amountRaised.add(amount);\n', '            amountRaisedPhase = amountRaisedPhase.add(amount);\n', '            tokensSold = tokensSold.add(amount.mul(10**18).div(phase4Price));\n', '            tokenReward.transfer(msg.sender, amount.mul(10**18).div(phase4Price));\n', '            FundTransfer(msg.sender, amount, true);\n', '        }\n', '\n', '        else if(now > startTime.add(28 days) && now < startTime.add(35 days)) { /* SETS PAYMENT RULES FOR CROWDSALE PHASE 5 */\n', '            contributionByAddress[msg.sender] = contributionByAddress[msg.sender].add(amount);\n', '            amountRaised = amountRaised.add(amount);\n', '            amountRaisedPhase = amountRaisedPhase.add(amount);\n', '            tokensSold = tokensSold.add(amount.mul(10**18).div(phase5Price));\n', '            tokenReward.transfer(msg.sender, amount.mul(10**18).div(phase5Price));\n', '            FundTransfer(msg.sender, amount, true);\n', '        }\n', '\n', '        else if(now > startTime.add(35 days)) { /* SETS PAYMENT RULES FOR CROWDSALE PHASE 6 */\n', '            contributionByAddress[msg.sender] = contributionByAddress[msg.sender].add(amount);\n', '            amountRaised = amountRaised.add(amount);\n', '            amountRaisedPhase = amountRaisedPhase.add(amount);\n', '            tokensSold = tokensSold.add(amount.mul(10**18).div(phase6Price));\n', '            tokenReward.transfer(msg.sender, amount.mul(10**18).div(phase6Price));\n', '            FundTransfer(msg.sender, amount, true);\n', '        }\n', '    }\n', '\n', '    /*\n', '     * ALLOW IGNITE TO RECLAIM UNSOLD IGNT\n', '     */\n', '    function withdrawTokens(address tokenContract) external onlyOwner {\n', '        withdrawToken tc = withdrawToken(tokenContract);\n', '\n', '        tc.transfer(owner, tc.balanceOf(this));\n', '    }\n', '    \n', '    /*\n', '     * ALLOW IGNITE TO WITHDRAW CROWDSALE PROCEEDS TO OPERATIONS AND INDEX WALLETS\n', '     */\n', '    function withdrawEther() external onlyOwner {\n', '        uint256 total = this.balance;\n', '        uint256 operationsSplit = 40;\n', '        uint256 indexSplit = 60;\n', '        operations.transfer(total * operationsSplit / 100);\n', '        index.transfer(total * indexSplit / 100);\n', '    }\n', '}']