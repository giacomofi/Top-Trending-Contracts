['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract HasManager {\n', '  address public manager;\n', '\n', '  modifier onlyManager {\n', '    require(msg.sender == manager);\n', '    _;\n', '  }\n', '\n', '  function transferManager(address _newManager) public onlyManager() {\n', '    require(_newManager != address(0));\n', '    manager = _newManager;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Whitelist is Ownable {\n', '  mapping(address => bool) public whitelist;\n', '  address public whitelistManager;\n', '  function AddToWhiteList(address _addr) public {\n', '      require(msg.sender == whitelistManager || msg.sender == owner);\n', '      whitelist[_addr] = true;\n', '  }\n', '\n', '  function AssignWhitelistManager(address _addr) public onlyOwner {\n', '      whitelistManager = _addr;\n', '  }\n', '\n', '  modifier whitelistedOnly {\n', '    require(whitelist[msg.sender]);\n', '    _;\n', '  }\n', '}\n', '\n', 'contract WithBonusPeriods is Ownable {\n', '  uint256 constant INVALID_FROM_TIMESTAMP = 1000000000000;\n', '  uint256 constant INFINITY_TO_TIMESTAMP= 1000000000000;\n', '  struct BonusPeriod {\n', '    uint256 fromTimestamp;\n', '    uint256 toTimestamp;\n', '    uint256 bonusNumerator;\n', '    uint256 bonusDenominator;\n', '  }\n', '\n', '  BonusPeriod[] public bonusPeriods;\n', '  BonusPeriod currentBonusPeriod;\n', '\n', '  function WithBonusPeriods() public {\n', '      initBonuses();\n', '  }\n', '\n', '  function BonusPeriodsCount() public view returns (uint8) {\n', '    return uint8(bonusPeriods.length);\n', '  }\n', '\n', '  //find out bonus for specific timestamp\n', '  function BonusPeriodFor(uint256 timestamp) public view returns (bool ongoing, uint256 from, uint256 to, uint256 num, uint256 den) {\n', '    for(uint i = 0; i < bonusPeriods.length; i++)\n', '      if (bonusPeriods[i].fromTimestamp <= timestamp && bonusPeriods[i].toTimestamp >= timestamp)\n', '        return (true, bonusPeriods[i].fromTimestamp, bonusPeriods[i].toTimestamp, bonusPeriods[i].bonusNumerator,\n', '          bonusPeriods[i].bonusDenominator);\n', '    return (false, 0, 0, 0, 0);\n', '  }\n', '\n', '  function initBonusPeriod(uint256 from, uint256 to, uint256 num, uint256 den) internal  {\n', '    bonusPeriods.push(BonusPeriod(from, to, num, den));\n', '  }\n', '\n', '  function initBonuses() internal {\n', '      //1-7 May, 20%\n', '      initBonusPeriod(1525132800, 1525737599, 20, 100);\n', '      //8-14 May, 15%\n', '      initBonusPeriod(1525737600, 1526342399, 15, 100);\n', '      //15 -21 May, 10%\n', '      initBonusPeriod(1526342400, 1526947199, 10, 100);\n', '      //22 -28 May, 5%\n', '      initBonusPeriod(1526947200, 1527551999, 5, 100);\n', '  }\n', '\n', '  function updateCurrentBonusPeriod() internal  {\n', '    if (currentBonusPeriod.fromTimestamp <= block.timestamp\n', '      && currentBonusPeriod.toTimestamp >= block.timestamp)\n', '      return;\n', '\n', '    currentBonusPeriod.fromTimestamp = INVALID_FROM_TIMESTAMP;\n', '\n', '    for(uint i = 0; i < bonusPeriods.length; i++)\n', '      if (bonusPeriods[i].fromTimestamp <= block.timestamp && bonusPeriods[i].toTimestamp >= block.timestamp) {\n', '        currentBonusPeriod = bonusPeriods[i];\n', '        return;\n', '      }\n', '  }\n', '}\n', '\n', 'contract ICrowdsaleProcessor is Ownable, HasManager {\n', '  modifier whenCrowdsaleAlive() {\n', '    require(isActive());\n', '    _;\n', '  }\n', '\n', '  modifier whenCrowdsaleFailed() {\n', '    require(isFailed());\n', '    _;\n', '  }\n', '\n', '  modifier whenCrowdsaleSuccessful() {\n', '    require(isSuccessful());\n', '    _;\n', '  }\n', '\n', '  modifier hasntStopped() {\n', '    require(!stopped);\n', '    _;\n', '  }\n', '\n', '  modifier hasBeenStopped() {\n', '    require(stopped);\n', '    _;\n', '  }\n', '\n', '  modifier hasntStarted() {\n', '    require(!started);\n', '    _;\n', '  }\n', '\n', '  modifier hasBeenStarted() {\n', '    require(started);\n', '    _;\n', '  }\n', '\n', '  // Minimal acceptable hard cap\n', '  uint256 constant public MIN_HARD_CAP = 1 ether;\n', '\n', '  // Minimal acceptable duration of crowdsale\n', '  uint256 constant public MIN_CROWDSALE_TIME = 3 days;\n', '\n', '  // Maximal acceptable duration of crowdsale\n', '  uint256 constant public MAX_CROWDSALE_TIME = 50 days;\n', '\n', '  // Becomes true when timeframe is assigned\n', '  bool public started;\n', '\n', '  // Becomes true if cancelled by owner\n', '  bool public stopped;\n', '\n', '  // Total collected Ethereum: must be updated every time tokens has been sold\n', '  uint256 public totalCollected;\n', '\n', '  // Total amount of project&#39;s token sold: must be updated every time tokens has been sold\n', '  uint256 public totalSold;\n', '\n', '  // Crowdsale minimal goal, must be greater or equal to Forecasting min amount\n', '  uint256 public minimalGoal;\n', '\n', '  // Crowdsale hard cap, must be less or equal to Forecasting max amount\n', '  uint256 public hardCap;\n', '\n', '  // Crowdsale duration in seconds.\n', '  // Accepted range is MIN_CROWDSALE_TIME..MAX_CROWDSALE_TIME.\n', '  uint256 public duration;\n', '\n', '  // Start timestamp of crowdsale, absolute UTC time\n', '  uint256 public startTimestamp;\n', '\n', '  // End timestamp of crowdsale, absolute UTC time\n', '  uint256 public endTimestamp;\n', '\n', '  // Allows to transfer some ETH into the contract without selling tokens\n', '  function deposit() public payable {}\n', '\n', '  // Returns address of crowdsale token, must be ERC20 compilant\n', '  function getToken() public returns(address);\n', '\n', '  // Transfers ETH rewards amount (if ETH rewards is configured) to Forecasting contract\n', '  function mintETHRewards(address _contract, uint256 _amount) public onlyManager();\n', '\n', '  // Mints token Rewards to Forecasting contract\n', '  function mintTokenRewards(address _contract, uint256 _amount) public onlyManager();\n', '\n', '  // Releases tokens (transfers crowdsale token from mintable to transferrable state)\n', '  function releaseTokens() public onlyManager() hasntStopped() whenCrowdsaleSuccessful();\n', '\n', '  // Stops crowdsale. Called by CrowdsaleController, the latter is called by owner.\n', '  // Crowdsale may be stopped any time before it finishes.\n', '  function stop() public onlyManager() hasntStopped();\n', '\n', '  // Validates parameters and starts crowdsale\n', '  function start(uint256 _startTimestamp, uint256 _endTimestamp, address _fundingAddress)\n', '    public onlyManager() hasntStarted() hasntStopped();\n', '\n', '  // Is crowdsale failed (completed, but minimal goal wasn&#39;t reached)\n', '  function isFailed() public constant returns (bool);\n', '\n', '  // Is crowdsale active (i.e. the token can be sold)\n', '  function isActive() public constant returns (bool);\n', '\n', '  // Is crowdsale completed successfully\n', '  function isSuccessful() public constant returns (bool);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract Crowdsaled is Ownable {\n', '        address public crowdsaleContract = address(0);\n', '        function Crowdsaled() public {\n', '        }\n', '\n', '        modifier onlyCrowdsale{\n', '          require(msg.sender == crowdsaleContract);\n', '          _;\n', '        }\n', '\n', '        modifier onlyCrowdsaleOrOwner {\n', '          require((msg.sender == crowdsaleContract) || (msg.sender == owner));\n', '          _;\n', '        }\n', '\n', '        function setCrowdsale(address crowdsale) public onlyOwner() {\n', '                crowdsaleContract = crowdsale;\n', '        }\n', '}\n', '\n', 'contract LetItPlayToken is Crowdsaled, StandardToken {\n', '        uint256 public totalSupply;\n', '        string public name;\n', '        string public symbol;\n', '        uint8 public decimals;\n', '\n', '        address public forSale;\n', '        address public preSale;\n', '        address public ecoSystemFund;\n', '        address public founders;\n', '        address public team;\n', '        address public advisers;\n', '        address public bounty;\n', '        address public eosShareDrop;\n', '\n', '        bool releasedForTransfer;\n', '\n', '        uint256 private shift;\n', '\n', '        //initial coin distribution\n', '        function LetItPlayToken(\n', '            address _forSale,\n', '            address _ecoSystemFund,\n', '            address _founders,\n', '            address _team,\n', '            address _advisers,\n', '            address _bounty,\n', '            address _preSale,\n', '            address _eosShareDrop\n', '          ) public {\n', '          name = "LetItPlay Token";\n', '          symbol = "PLAY";\n', '          decimals = 8;\n', '          shift = uint256(10)**decimals;\n', '          totalSupply = 1000000000 * shift;\n', '          forSale = _forSale;\n', '          ecoSystemFund = _ecoSystemFund;\n', '          founders = _founders;\n', '          team = _team;\n', '          advisers = _advisers;\n', '          bounty = _bounty;\n', '          eosShareDrop = _eosShareDrop;\n', '          preSale = _preSale;\n', '\n', '          balances[forSale] = totalSupply * 59 / 100;\n', '          balances[ecoSystemFund] = totalSupply * 15 / 100;\n', '          balances[founders] = totalSupply * 15 / 100;\n', '          balances[team] = totalSupply * 5 / 100;\n', '          balances[advisers] = totalSupply * 3 / 100;\n', '          balances[bounty] = totalSupply * 1 / 100;\n', '          balances[preSale] = totalSupply * 1 / 100;\n', '          balances[eosShareDrop] = totalSupply * 1 / 100;\n', '        }\n', '\n', '        function transferByOwner(address from, address to, uint256 value) public onlyOwner {\n', '          require(balances[from] >= value);\n', '          balances[from] = balances[from].sub(value);\n', '          balances[to] = balances[to].add(value);\n', '          emit Transfer(from, to, value);\n', '        }\n', '\n', '        //can be called by crowdsale before token release, control over forSale portion of token supply\n', '        function transferByCrowdsale(address to, uint256 value) public onlyCrowdsale {\n', '          require(balances[forSale] >= value);\n', '          balances[forSale] = balances[forSale].sub(value);\n', '          balances[to] = balances[to].add(value);\n', '          emit Transfer(forSale, to, value);\n', '        }\n', '\n', '        //can be called by crowdsale before token release, allowences is respected here\n', '        function transferFromByCrowdsale(address _from, address _to, uint256 _value) public onlyCrowdsale returns (bool) {\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '\n', '        //after the call token is available for exchange\n', '        function releaseForTransfer() public onlyCrowdsaleOrOwner {\n', '          require(!releasedForTransfer);\n', '          releasedForTransfer = true;\n', '        }\n', '\n', '        //forbid transfer before release\n', '        function transfer(address _to, uint256 _value) public returns (bool) {\n', '          require(releasedForTransfer);\n', '          return super.transfer(_to, _value);\n', '        }\n', '\n', '        //forbid transfer before release\n', '        function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '           require(releasedForTransfer);\n', '           return super.transferFrom(_from, _to, _value);\n', '        }\n', '\n', '        function burn(uint256 value) public  onlyOwner {\n', '            require(value <= balances[msg.sender]);\n', '            balances[msg.sender] = balances[msg.sender].sub(value);\n', '            balances[address(0)] = balances[address(0)].add(value);\n', '            emit Transfer(msg.sender, address(0), value);\n', '        }\n', '}\n', '\n', 'contract BasicCrowdsale is ICrowdsaleProcessor {\n', '  event CROWDSALE_START(uint256 startTimestamp, uint256 endTimestamp, address fundingAddress);\n', '\n', '  // Where to transfer collected ETH\n', '  address public fundingAddress;\n', '\n', '  // Ctor.\n', '  function BasicCrowdsale(\n', '    address _owner,\n', '    address _manager\n', '  )\n', '    public\n', '  {\n', '    owner = _owner;\n', '    manager = _manager;\n', '  }\n', '\n', '  // called by CrowdsaleController to transfer reward part of ETH\n', '  // collected by successful crowdsale to Forecasting contract.\n', '  // This call is made upon closing successful crowdfunding process\n', '  // iff agreed ETH reward part is not zero\n', '  function mintETHRewards(\n', '    address _contract,  // Forecasting contract\n', '    uint256 _amount     // agreed part of totalCollected which is intended for rewards\n', '  )\n', '    public\n', '    onlyManager() // manager is CrowdsaleController instance\n', '  {\n', '    require(_contract.call.value(_amount)());\n', '  }\n', '\n', '  // cancels crowdsale\n', '  function stop() public onlyManager() hasntStopped()  {\n', '    // we can stop only not started and not completed crowdsale\n', '    if (started) {\n', '      require(!isFailed());\n', '      require(!isSuccessful());\n', '    }\n', '    stopped = true;\n', '  }\n', '\n', '  // called by CrowdsaleController to setup start and end time of crowdfunding process\n', '  // as well as funding address (where to transfer ETH upon successful crowdsale)\n', '  function start(\n', '    uint256 _startTimestamp,\n', '    uint256 _endTimestamp,\n', '    address _fundingAddress\n', '  )\n', '    public\n', '    onlyManager()   // manager is CrowdsaleController instance\n', '    hasntStarted()  // not yet started\n', '    hasntStopped()  // crowdsale wasn&#39;t cancelled\n', '  {\n', '    require(_fundingAddress != address(0));\n', '\n', '    // start time must not be earlier than current time\n', '    require(_startTimestamp >= block.timestamp);\n', '\n', '    // range must be sane\n', '    require(_endTimestamp > _startTimestamp);\n', '    duration = _endTimestamp - _startTimestamp;\n', '\n', '    // duration must fit constraints\n', '    require(duration >= MIN_CROWDSALE_TIME && duration <= MAX_CROWDSALE_TIME);\n', '\n', '    startTimestamp = _startTimestamp;\n', '    endTimestamp = _endTimestamp;\n', '    fundingAddress = _fundingAddress;\n', '\n', '    // now crowdsale is considered started, even if the current time is before startTimestamp\n', '    started = true;\n', '\n', '    emit CROWDSALE_START(_startTimestamp, _endTimestamp, _fundingAddress);\n', '  }\n', '\n', '  // must return true if crowdsale is over, but it failed\n', '  function isFailed()\n', '    public\n', '    constant\n', '    returns(bool)\n', '  {\n', '    return (\n', '      // it was started\n', '      started &&\n', '\n', '      // crowdsale period has finished\n', '      block.timestamp >= endTimestamp &&\n', '\n', '      // but collected ETH is below the required minimum\n', '      totalCollected < minimalGoal\n', '    );\n', '  }\n', '\n', '  // must return true if crowdsale is active (i.e. the token can be bought)\n', '  function isActive()\n', '    public\n', '    constant\n', '    returns(bool)\n', '  {\n', '    return (\n', '      // it was started\n', '      started &&\n', '\n', '      // hard cap wasn&#39;t reached yet\n', '      totalCollected < hardCap &&\n', '\n', '      // and current time is within the crowdfunding period\n', '      block.timestamp >= startTimestamp &&\n', '      block.timestamp < endTimestamp\n', '    );\n', '  }\n', '\n', '  // must return true if crowdsale completed successfully\n', '  function isSuccessful()\n', '    public\n', '    constant\n', '    returns(bool)\n', '  {\n', '    return (\n', '      // either the hard cap is collected\n', '      totalCollected >= hardCap ||\n', '\n', '      // ...or the crowdfunding period is over, but the minimum has been reached\n', '      (block.timestamp >= endTimestamp && totalCollected >= minimalGoal)\n', '    );\n', '  }\n', '}\n', '\n', 'contract Crowdsale is BasicCrowdsale, Whitelist, WithBonusPeriods {\n', '\n', '  struct Investor {\n', '    uint256 weiDonated;\n', '    uint256 tokensGiven;\n', '  }\n', '\n', '  mapping(address => Investor) participants;\n', '\n', '  uint256 public tokenRateWei;\n', '  LetItPlayToken public token;\n', '\n', '  // Ctor. MinimalGoal, hardCap, and price are not changeable.\n', '  function Crowdsale(\n', '    uint256 _minimalGoal,\n', '    uint256 _hardCap,\n', '    uint256 _tokenRateWei,\n', '    address _token\n', '  )\n', '    public\n', '    // simplest case where manager==owner. See onlyOwner() and onlyManager() modifiers\n', '    // before functions to figure out the cases in which those addresses should differ\n', '    BasicCrowdsale(msg.sender, msg.sender)\n', '  {\n', '    // just setup them once...\n', '    minimalGoal = _minimalGoal;\n', '    hardCap = _hardCap;\n', '    tokenRateWei = _tokenRateWei;\n', '    token = LetItPlayToken(_token);\n', '  }\n', '\n', '  // Here goes ICrowdsaleProcessor implementation\n', '\n', '  // returns address of crowdsale token. The token must be ERC20-compliant\n', '  function getToken()\n', '    public\n', '    returns(address)\n', '  {\n', '    return address(token);\n', '  }\n', '\n', '  // called by CrowdsaleController to transfer reward part of\n', '  // tokens sold by successful crowdsale to Forecasting contract.\n', '  // This call is made upon closing successful crowdfunding process.\n', '  function mintTokenRewards(\n', '    address _contract,  // Forecasting contract\n', '    uint256 _amount     // agreed part of totalSold which is intended for rewards\n', '  )\n', '    public\n', '    onlyManager() // manager is CrowdsaleController instance\n', '  {\n', '    // crowdsale token is mintable in this example, tokens are created here\n', '    token.transferByCrowdsale(_contract, _amount);\n', '  }\n', '\n', '  // transfers crowdsale token from mintable to transferrable state\n', '  function releaseTokens()\n', '    public\n', '    onlyManager()             // manager is CrowdsaleController instance\n', '    hasntStopped()            // crowdsale wasn&#39;t cancelled\n', '    whenCrowdsaleSuccessful() // crowdsale was successful\n', '  {\n', '    // see token example\n', '    token.releaseForTransfer();\n', '  }\n', '\n', '  function () payable public {\n', '    require(msg.value > 0);\n', '    sellTokens(msg.sender, msg.value);\n', '  }\n', '\n', '  function sellTokens(address _recepient, uint256 _value)\n', '    internal\n', '    hasBeenStarted()\n', '    hasntStopped()\n', '    whenCrowdsaleAlive()\n', '    whitelistedOnly()\n', '  {\n', '    uint256 newTotalCollected = totalCollected + _value;\n', '\n', '    if (hardCap < newTotalCollected) {\n', '      uint256 refund = newTotalCollected - hardCap;\n', '      uint256 diff = _value - refund;\n', '      _recepient.transfer(refund);\n', '      _value = diff;\n', '    }\n', '\n', '    uint256 tokensSold = _value * uint256(10)**token.decimals() / tokenRateWei;\n', '\n', '    //apply bonus period\n', '    updateCurrentBonusPeriod();\n', '    if (currentBonusPeriod.fromTimestamp != INVALID_FROM_TIMESTAMP)\n', '      tokensSold += tokensSold * currentBonusPeriod.bonusNumerator / currentBonusPeriod.bonusDenominator;\n', '\n', '    token.transferByCrowdsale(_recepient, tokensSold);\n', '    participants[_recepient].weiDonated += _value;\n', '    participants[_recepient].tokensGiven += tokensSold;\n', '    totalCollected += _value;\n', '    totalSold += tokensSold;\n', '  }\n', '\n', '  // project&#39;s owner withdraws ETH funds to the funding address upon successful crowdsale\n', '  function withdraw(uint256 _amount) public // can be done partially\n', '    onlyOwner() // project&#39;s owner\n', '    hasntStopped()  // crowdsale wasn&#39;t cancelled\n', '    whenCrowdsaleSuccessful() // crowdsale completed successfully\n', '  {\n', '    require(_amount <= address(this).balance);\n', '    fundingAddress.transfer(_amount);\n', '  }\n', '\n', '  // backers refund their ETH if the crowdsale was cancelled or has failed\n', '  function refund() public\n', '  {\n', '    // either cancelled or failed\n', '    require(stopped || isFailed());\n', '\n', '    uint256 weiDonated = participants[msg.sender].weiDonated;\n', '    uint256 tokens = participants[msg.sender].tokensGiven;\n', '\n', '    // prevent from doing it twice\n', '    require(weiDonated > 0);\n', '    participants[msg.sender].weiDonated = 0;\n', '    participants[msg.sender].tokensGiven = 0;\n', '\n', '    msg.sender.transfer(weiDonated);\n', '\n', '    //this must be approved by investor\n', '    token.transferFromByCrowdsale(msg.sender, token.forSale(), tokens);\n', '  }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract HasManager {\n', '  address public manager;\n', '\n', '  modifier onlyManager {\n', '    require(msg.sender == manager);\n', '    _;\n', '  }\n', '\n', '  function transferManager(address _newManager) public onlyManager() {\n', '    require(_newManager != address(0));\n', '    manager = _newManager;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Whitelist is Ownable {\n', '  mapping(address => bool) public whitelist;\n', '  address public whitelistManager;\n', '  function AddToWhiteList(address _addr) public {\n', '      require(msg.sender == whitelistManager || msg.sender == owner);\n', '      whitelist[_addr] = true;\n', '  }\n', '\n', '  function AssignWhitelistManager(address _addr) public onlyOwner {\n', '      whitelistManager = _addr;\n', '  }\n', '\n', '  modifier whitelistedOnly {\n', '    require(whitelist[msg.sender]);\n', '    _;\n', '  }\n', '}\n', '\n', 'contract WithBonusPeriods is Ownable {\n', '  uint256 constant INVALID_FROM_TIMESTAMP = 1000000000000;\n', '  uint256 constant INFINITY_TO_TIMESTAMP= 1000000000000;\n', '  struct BonusPeriod {\n', '    uint256 fromTimestamp;\n', '    uint256 toTimestamp;\n', '    uint256 bonusNumerator;\n', '    uint256 bonusDenominator;\n', '  }\n', '\n', '  BonusPeriod[] public bonusPeriods;\n', '  BonusPeriod currentBonusPeriod;\n', '\n', '  function WithBonusPeriods() public {\n', '      initBonuses();\n', '  }\n', '\n', '  function BonusPeriodsCount() public view returns (uint8) {\n', '    return uint8(bonusPeriods.length);\n', '  }\n', '\n', '  //find out bonus for specific timestamp\n', '  function BonusPeriodFor(uint256 timestamp) public view returns (bool ongoing, uint256 from, uint256 to, uint256 num, uint256 den) {\n', '    for(uint i = 0; i < bonusPeriods.length; i++)\n', '      if (bonusPeriods[i].fromTimestamp <= timestamp && bonusPeriods[i].toTimestamp >= timestamp)\n', '        return (true, bonusPeriods[i].fromTimestamp, bonusPeriods[i].toTimestamp, bonusPeriods[i].bonusNumerator,\n', '          bonusPeriods[i].bonusDenominator);\n', '    return (false, 0, 0, 0, 0);\n', '  }\n', '\n', '  function initBonusPeriod(uint256 from, uint256 to, uint256 num, uint256 den) internal  {\n', '    bonusPeriods.push(BonusPeriod(from, to, num, den));\n', '  }\n', '\n', '  function initBonuses() internal {\n', '      //1-7 May, 20%\n', '      initBonusPeriod(1525132800, 1525737599, 20, 100);\n', '      //8-14 May, 15%\n', '      initBonusPeriod(1525737600, 1526342399, 15, 100);\n', '      //15 -21 May, 10%\n', '      initBonusPeriod(1526342400, 1526947199, 10, 100);\n', '      //22 -28 May, 5%\n', '      initBonusPeriod(1526947200, 1527551999, 5, 100);\n', '  }\n', '\n', '  function updateCurrentBonusPeriod() internal  {\n', '    if (currentBonusPeriod.fromTimestamp <= block.timestamp\n', '      && currentBonusPeriod.toTimestamp >= block.timestamp)\n', '      return;\n', '\n', '    currentBonusPeriod.fromTimestamp = INVALID_FROM_TIMESTAMP;\n', '\n', '    for(uint i = 0; i < bonusPeriods.length; i++)\n', '      if (bonusPeriods[i].fromTimestamp <= block.timestamp && bonusPeriods[i].toTimestamp >= block.timestamp) {\n', '        currentBonusPeriod = bonusPeriods[i];\n', '        return;\n', '      }\n', '  }\n', '}\n', '\n', 'contract ICrowdsaleProcessor is Ownable, HasManager {\n', '  modifier whenCrowdsaleAlive() {\n', '    require(isActive());\n', '    _;\n', '  }\n', '\n', '  modifier whenCrowdsaleFailed() {\n', '    require(isFailed());\n', '    _;\n', '  }\n', '\n', '  modifier whenCrowdsaleSuccessful() {\n', '    require(isSuccessful());\n', '    _;\n', '  }\n', '\n', '  modifier hasntStopped() {\n', '    require(!stopped);\n', '    _;\n', '  }\n', '\n', '  modifier hasBeenStopped() {\n', '    require(stopped);\n', '    _;\n', '  }\n', '\n', '  modifier hasntStarted() {\n', '    require(!started);\n', '    _;\n', '  }\n', '\n', '  modifier hasBeenStarted() {\n', '    require(started);\n', '    _;\n', '  }\n', '\n', '  // Minimal acceptable hard cap\n', '  uint256 constant public MIN_HARD_CAP = 1 ether;\n', '\n', '  // Minimal acceptable duration of crowdsale\n', '  uint256 constant public MIN_CROWDSALE_TIME = 3 days;\n', '\n', '  // Maximal acceptable duration of crowdsale\n', '  uint256 constant public MAX_CROWDSALE_TIME = 50 days;\n', '\n', '  // Becomes true when timeframe is assigned\n', '  bool public started;\n', '\n', '  // Becomes true if cancelled by owner\n', '  bool public stopped;\n', '\n', '  // Total collected Ethereum: must be updated every time tokens has been sold\n', '  uint256 public totalCollected;\n', '\n', "  // Total amount of project's token sold: must be updated every time tokens has been sold\n", '  uint256 public totalSold;\n', '\n', '  // Crowdsale minimal goal, must be greater or equal to Forecasting min amount\n', '  uint256 public minimalGoal;\n', '\n', '  // Crowdsale hard cap, must be less or equal to Forecasting max amount\n', '  uint256 public hardCap;\n', '\n', '  // Crowdsale duration in seconds.\n', '  // Accepted range is MIN_CROWDSALE_TIME..MAX_CROWDSALE_TIME.\n', '  uint256 public duration;\n', '\n', '  // Start timestamp of crowdsale, absolute UTC time\n', '  uint256 public startTimestamp;\n', '\n', '  // End timestamp of crowdsale, absolute UTC time\n', '  uint256 public endTimestamp;\n', '\n', '  // Allows to transfer some ETH into the contract without selling tokens\n', '  function deposit() public payable {}\n', '\n', '  // Returns address of crowdsale token, must be ERC20 compilant\n', '  function getToken() public returns(address);\n', '\n', '  // Transfers ETH rewards amount (if ETH rewards is configured) to Forecasting contract\n', '  function mintETHRewards(address _contract, uint256 _amount) public onlyManager();\n', '\n', '  // Mints token Rewards to Forecasting contract\n', '  function mintTokenRewards(address _contract, uint256 _amount) public onlyManager();\n', '\n', '  // Releases tokens (transfers crowdsale token from mintable to transferrable state)\n', '  function releaseTokens() public onlyManager() hasntStopped() whenCrowdsaleSuccessful();\n', '\n', '  // Stops crowdsale. Called by CrowdsaleController, the latter is called by owner.\n', '  // Crowdsale may be stopped any time before it finishes.\n', '  function stop() public onlyManager() hasntStopped();\n', '\n', '  // Validates parameters and starts crowdsale\n', '  function start(uint256 _startTimestamp, uint256 _endTimestamp, address _fundingAddress)\n', '    public onlyManager() hasntStarted() hasntStopped();\n', '\n', "  // Is crowdsale failed (completed, but minimal goal wasn't reached)\n", '  function isFailed() public constant returns (bool);\n', '\n', '  // Is crowdsale active (i.e. the token can be sold)\n', '  function isActive() public constant returns (bool);\n', '\n', '  // Is crowdsale completed successfully\n', '  function isSuccessful() public constant returns (bool);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract Crowdsaled is Ownable {\n', '        address public crowdsaleContract = address(0);\n', '        function Crowdsaled() public {\n', '        }\n', '\n', '        modifier onlyCrowdsale{\n', '          require(msg.sender == crowdsaleContract);\n', '          _;\n', '        }\n', '\n', '        modifier onlyCrowdsaleOrOwner {\n', '          require((msg.sender == crowdsaleContract) || (msg.sender == owner));\n', '          _;\n', '        }\n', '\n', '        function setCrowdsale(address crowdsale) public onlyOwner() {\n', '                crowdsaleContract = crowdsale;\n', '        }\n', '}\n', '\n', 'contract LetItPlayToken is Crowdsaled, StandardToken {\n', '        uint256 public totalSupply;\n', '        string public name;\n', '        string public symbol;\n', '        uint8 public decimals;\n', '\n', '        address public forSale;\n', '        address public preSale;\n', '        address public ecoSystemFund;\n', '        address public founders;\n', '        address public team;\n', '        address public advisers;\n', '        address public bounty;\n', '        address public eosShareDrop;\n', '\n', '        bool releasedForTransfer;\n', '\n', '        uint256 private shift;\n', '\n', '        //initial coin distribution\n', '        function LetItPlayToken(\n', '            address _forSale,\n', '            address _ecoSystemFund,\n', '            address _founders,\n', '            address _team,\n', '            address _advisers,\n', '            address _bounty,\n', '            address _preSale,\n', '            address _eosShareDrop\n', '          ) public {\n', '          name = "LetItPlay Token";\n', '          symbol = "PLAY";\n', '          decimals = 8;\n', '          shift = uint256(10)**decimals;\n', '          totalSupply = 1000000000 * shift;\n', '          forSale = _forSale;\n', '          ecoSystemFund = _ecoSystemFund;\n', '          founders = _founders;\n', '          team = _team;\n', '          advisers = _advisers;\n', '          bounty = _bounty;\n', '          eosShareDrop = _eosShareDrop;\n', '          preSale = _preSale;\n', '\n', '          balances[forSale] = totalSupply * 59 / 100;\n', '          balances[ecoSystemFund] = totalSupply * 15 / 100;\n', '          balances[founders] = totalSupply * 15 / 100;\n', '          balances[team] = totalSupply * 5 / 100;\n', '          balances[advisers] = totalSupply * 3 / 100;\n', '          balances[bounty] = totalSupply * 1 / 100;\n', '          balances[preSale] = totalSupply * 1 / 100;\n', '          balances[eosShareDrop] = totalSupply * 1 / 100;\n', '        }\n', '\n', '        function transferByOwner(address from, address to, uint256 value) public onlyOwner {\n', '          require(balances[from] >= value);\n', '          balances[from] = balances[from].sub(value);\n', '          balances[to] = balances[to].add(value);\n', '          emit Transfer(from, to, value);\n', '        }\n', '\n', '        //can be called by crowdsale before token release, control over forSale portion of token supply\n', '        function transferByCrowdsale(address to, uint256 value) public onlyCrowdsale {\n', '          require(balances[forSale] >= value);\n', '          balances[forSale] = balances[forSale].sub(value);\n', '          balances[to] = balances[to].add(value);\n', '          emit Transfer(forSale, to, value);\n', '        }\n', '\n', '        //can be called by crowdsale before token release, allowences is respected here\n', '        function transferFromByCrowdsale(address _from, address _to, uint256 _value) public onlyCrowdsale returns (bool) {\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '\n', '        //after the call token is available for exchange\n', '        function releaseForTransfer() public onlyCrowdsaleOrOwner {\n', '          require(!releasedForTransfer);\n', '          releasedForTransfer = true;\n', '        }\n', '\n', '        //forbid transfer before release\n', '        function transfer(address _to, uint256 _value) public returns (bool) {\n', '          require(releasedForTransfer);\n', '          return super.transfer(_to, _value);\n', '        }\n', '\n', '        //forbid transfer before release\n', '        function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '           require(releasedForTransfer);\n', '           return super.transferFrom(_from, _to, _value);\n', '        }\n', '\n', '        function burn(uint256 value) public  onlyOwner {\n', '            require(value <= balances[msg.sender]);\n', '            balances[msg.sender] = balances[msg.sender].sub(value);\n', '            balances[address(0)] = balances[address(0)].add(value);\n', '            emit Transfer(msg.sender, address(0), value);\n', '        }\n', '}\n', '\n', 'contract BasicCrowdsale is ICrowdsaleProcessor {\n', '  event CROWDSALE_START(uint256 startTimestamp, uint256 endTimestamp, address fundingAddress);\n', '\n', '  // Where to transfer collected ETH\n', '  address public fundingAddress;\n', '\n', '  // Ctor.\n', '  function BasicCrowdsale(\n', '    address _owner,\n', '    address _manager\n', '  )\n', '    public\n', '  {\n', '    owner = _owner;\n', '    manager = _manager;\n', '  }\n', '\n', '  // called by CrowdsaleController to transfer reward part of ETH\n', '  // collected by successful crowdsale to Forecasting contract.\n', '  // This call is made upon closing successful crowdfunding process\n', '  // iff agreed ETH reward part is not zero\n', '  function mintETHRewards(\n', '    address _contract,  // Forecasting contract\n', '    uint256 _amount     // agreed part of totalCollected which is intended for rewards\n', '  )\n', '    public\n', '    onlyManager() // manager is CrowdsaleController instance\n', '  {\n', '    require(_contract.call.value(_amount)());\n', '  }\n', '\n', '  // cancels crowdsale\n', '  function stop() public onlyManager() hasntStopped()  {\n', '    // we can stop only not started and not completed crowdsale\n', '    if (started) {\n', '      require(!isFailed());\n', '      require(!isSuccessful());\n', '    }\n', '    stopped = true;\n', '  }\n', '\n', '  // called by CrowdsaleController to setup start and end time of crowdfunding process\n', '  // as well as funding address (where to transfer ETH upon successful crowdsale)\n', '  function start(\n', '    uint256 _startTimestamp,\n', '    uint256 _endTimestamp,\n', '    address _fundingAddress\n', '  )\n', '    public\n', '    onlyManager()   // manager is CrowdsaleController instance\n', '    hasntStarted()  // not yet started\n', "    hasntStopped()  // crowdsale wasn't cancelled\n", '  {\n', '    require(_fundingAddress != address(0));\n', '\n', '    // start time must not be earlier than current time\n', '    require(_startTimestamp >= block.timestamp);\n', '\n', '    // range must be sane\n', '    require(_endTimestamp > _startTimestamp);\n', '    duration = _endTimestamp - _startTimestamp;\n', '\n', '    // duration must fit constraints\n', '    require(duration >= MIN_CROWDSALE_TIME && duration <= MAX_CROWDSALE_TIME);\n', '\n', '    startTimestamp = _startTimestamp;\n', '    endTimestamp = _endTimestamp;\n', '    fundingAddress = _fundingAddress;\n', '\n', '    // now crowdsale is considered started, even if the current time is before startTimestamp\n', '    started = true;\n', '\n', '    emit CROWDSALE_START(_startTimestamp, _endTimestamp, _fundingAddress);\n', '  }\n', '\n', '  // must return true if crowdsale is over, but it failed\n', '  function isFailed()\n', '    public\n', '    constant\n', '    returns(bool)\n', '  {\n', '    return (\n', '      // it was started\n', '      started &&\n', '\n', '      // crowdsale period has finished\n', '      block.timestamp >= endTimestamp &&\n', '\n', '      // but collected ETH is below the required minimum\n', '      totalCollected < minimalGoal\n', '    );\n', '  }\n', '\n', '  // must return true if crowdsale is active (i.e. the token can be bought)\n', '  function isActive()\n', '    public\n', '    constant\n', '    returns(bool)\n', '  {\n', '    return (\n', '      // it was started\n', '      started &&\n', '\n', "      // hard cap wasn't reached yet\n", '      totalCollected < hardCap &&\n', '\n', '      // and current time is within the crowdfunding period\n', '      block.timestamp >= startTimestamp &&\n', '      block.timestamp < endTimestamp\n', '    );\n', '  }\n', '\n', '  // must return true if crowdsale completed successfully\n', '  function isSuccessful()\n', '    public\n', '    constant\n', '    returns(bool)\n', '  {\n', '    return (\n', '      // either the hard cap is collected\n', '      totalCollected >= hardCap ||\n', '\n', '      // ...or the crowdfunding period is over, but the minimum has been reached\n', '      (block.timestamp >= endTimestamp && totalCollected >= minimalGoal)\n', '    );\n', '  }\n', '}\n', '\n', 'contract Crowdsale is BasicCrowdsale, Whitelist, WithBonusPeriods {\n', '\n', '  struct Investor {\n', '    uint256 weiDonated;\n', '    uint256 tokensGiven;\n', '  }\n', '\n', '  mapping(address => Investor) participants;\n', '\n', '  uint256 public tokenRateWei;\n', '  LetItPlayToken public token;\n', '\n', '  // Ctor. MinimalGoal, hardCap, and price are not changeable.\n', '  function Crowdsale(\n', '    uint256 _minimalGoal,\n', '    uint256 _hardCap,\n', '    uint256 _tokenRateWei,\n', '    address _token\n', '  )\n', '    public\n', '    // simplest case where manager==owner. See onlyOwner() and onlyManager() modifiers\n', '    // before functions to figure out the cases in which those addresses should differ\n', '    BasicCrowdsale(msg.sender, msg.sender)\n', '  {\n', '    // just setup them once...\n', '    minimalGoal = _minimalGoal;\n', '    hardCap = _hardCap;\n', '    tokenRateWei = _tokenRateWei;\n', '    token = LetItPlayToken(_token);\n', '  }\n', '\n', '  // Here goes ICrowdsaleProcessor implementation\n', '\n', '  // returns address of crowdsale token. The token must be ERC20-compliant\n', '  function getToken()\n', '    public\n', '    returns(address)\n', '  {\n', '    return address(token);\n', '  }\n', '\n', '  // called by CrowdsaleController to transfer reward part of\n', '  // tokens sold by successful crowdsale to Forecasting contract.\n', '  // This call is made upon closing successful crowdfunding process.\n', '  function mintTokenRewards(\n', '    address _contract,  // Forecasting contract\n', '    uint256 _amount     // agreed part of totalSold which is intended for rewards\n', '  )\n', '    public\n', '    onlyManager() // manager is CrowdsaleController instance\n', '  {\n', '    // crowdsale token is mintable in this example, tokens are created here\n', '    token.transferByCrowdsale(_contract, _amount);\n', '  }\n', '\n', '  // transfers crowdsale token from mintable to transferrable state\n', '  function releaseTokens()\n', '    public\n', '    onlyManager()             // manager is CrowdsaleController instance\n', "    hasntStopped()            // crowdsale wasn't cancelled\n", '    whenCrowdsaleSuccessful() // crowdsale was successful\n', '  {\n', '    // see token example\n', '    token.releaseForTransfer();\n', '  }\n', '\n', '  function () payable public {\n', '    require(msg.value > 0);\n', '    sellTokens(msg.sender, msg.value);\n', '  }\n', '\n', '  function sellTokens(address _recepient, uint256 _value)\n', '    internal\n', '    hasBeenStarted()\n', '    hasntStopped()\n', '    whenCrowdsaleAlive()\n', '    whitelistedOnly()\n', '  {\n', '    uint256 newTotalCollected = totalCollected + _value;\n', '\n', '    if (hardCap < newTotalCollected) {\n', '      uint256 refund = newTotalCollected - hardCap;\n', '      uint256 diff = _value - refund;\n', '      _recepient.transfer(refund);\n', '      _value = diff;\n', '    }\n', '\n', '    uint256 tokensSold = _value * uint256(10)**token.decimals() / tokenRateWei;\n', '\n', '    //apply bonus period\n', '    updateCurrentBonusPeriod();\n', '    if (currentBonusPeriod.fromTimestamp != INVALID_FROM_TIMESTAMP)\n', '      tokensSold += tokensSold * currentBonusPeriod.bonusNumerator / currentBonusPeriod.bonusDenominator;\n', '\n', '    token.transferByCrowdsale(_recepient, tokensSold);\n', '    participants[_recepient].weiDonated += _value;\n', '    participants[_recepient].tokensGiven += tokensSold;\n', '    totalCollected += _value;\n', '    totalSold += tokensSold;\n', '  }\n', '\n', "  // project's owner withdraws ETH funds to the funding address upon successful crowdsale\n", '  function withdraw(uint256 _amount) public // can be done partially\n', "    onlyOwner() // project's owner\n", "    hasntStopped()  // crowdsale wasn't cancelled\n", '    whenCrowdsaleSuccessful() // crowdsale completed successfully\n', '  {\n', '    require(_amount <= address(this).balance);\n', '    fundingAddress.transfer(_amount);\n', '  }\n', '\n', '  // backers refund their ETH if the crowdsale was cancelled or has failed\n', '  function refund() public\n', '  {\n', '    // either cancelled or failed\n', '    require(stopped || isFailed());\n', '\n', '    uint256 weiDonated = participants[msg.sender].weiDonated;\n', '    uint256 tokens = participants[msg.sender].tokensGiven;\n', '\n', '    // prevent from doing it twice\n', '    require(weiDonated > 0);\n', '    participants[msg.sender].weiDonated = 0;\n', '    participants[msg.sender].tokensGiven = 0;\n', '\n', '    msg.sender.transfer(weiDonated);\n', '\n', '    //this must be approved by investor\n', '    token.transferFromByCrowdsale(msg.sender, token.forSale(), tokens);\n', '  }\n', '}']
