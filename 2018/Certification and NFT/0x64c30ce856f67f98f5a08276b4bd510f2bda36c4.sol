['pragma solidity ^0.4.23;\n', '\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', 'contract RootInBlocks is Ownable {\n', '\n', '  mapping(string => uint) map;\n', '\n', '  event Added(\n', '    string hash,\n', '    uint time\n', '  );\n', '\n', '  function put(string hash) public onlyOwner {\n', '    require(map[hash] == 0);\n', '    map[hash] = block.timestamp;\n', '    emit Added(hash, block.timestamp);\n', '  }\n', '\n', '  function get(string hash) public constant returns(uint) {\n', '    return map[hash];\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', 'contract RootInBlocks is Ownable {\n', '\n', '  mapping(string => uint) map;\n', '\n', '  event Added(\n', '    string hash,\n', '    uint time\n', '  );\n', '\n', '  function put(string hash) public onlyOwner {\n', '    require(map[hash] == 0);\n', '    map[hash] = block.timestamp;\n', '    emit Added(hash, block.timestamp);\n', '  }\n', '\n', '  function get(string hash) public constant returns(uint) {\n', '    return map[hash];\n', '  }\n', '\n', '}']
