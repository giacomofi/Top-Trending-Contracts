['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', 'contract Administrated is Ownable {\n', '\n', '  mapping(address => bool) internal admins;\n', '\n', '  function Administrated() public {\n', '  }\n', '\n', '  modifier onlyAdmin() {\n', '    require(isAdmin(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function setAdmin(address _admin, bool _isAdmin) public {\n', '    require(_admin != address(0));\n', '    require(msg.sender == owner || admins[msg.sender] == true);\n', '    admins[_admin] = _isAdmin;\n', '  }\n', '\n', '  function isAdmin(address _address) public view returns (bool) {\n', '    return admins[_address];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedToken(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract VIVAToken is CappedToken, PausableToken {\n', '\n', '  using SafeERC20 for ERC20;\n', '\n', '  string public name = "VIVA Token";\n', '  string public symbol = "VIVA";\n', '  uint8 public decimals = 18;\n', '\n', '  function VIVAToken(uint256 _cap) public\n', '    CappedToken(_cap * 10**18)\n', '    PausableToken() { }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'library CrowdsaleTokenUtils {\n', '\n', '  // Events\n', '  event MintTokens(address beneficiary, uint256 tokens);\n', '\n', '  using SafeMath for uint256;\n', '\n', '  function mintTokens(VIVAToken token, address beneficiary, uint256 tokens) public returns (bool) {\n', '    require(beneficiary != address(0));\n', '    require(tokens > 0);\n', '    MintTokens(beneficiary, tokens);\n', '    return token.mint(beneficiary, tokens);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract Testable is Ownable {\n', '\n', '  bool internal testing;\n', '  uint256 public _now;\n', '\n', '  function Testable(bool _testing) public {\n', '    testing = _testing;\n', '    _now = now;\n', '  }\n', '\n', '  modifier whenTesting() {\n', '    require(testing);\n', '    _;\n', '  }\n', '\n', '  function getNow() public view returns (uint256) {\n', '    if(testing) {\n', '      return _now;\n', '    } else {\n', '      return now;\n', '    }\n', '  }\n', '\n', '  function setNow(uint256 __now) public onlyOwner whenTesting {\n', '    _now = __now;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '// Not a generalized vesting contract - just our compensation protocol\n', 'contract VIVAVestingVault is Administrated, Testable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  event Released(address beneficiary, uint256 amount);\n', '\n', '  VIVAToken public token;\n', '\n', '  uint256 public d1;\n', '  uint256 public d2;\n', '\n', '  mapping(address => uint256) internal totalDue;\n', '  mapping(address => uint256) internal released;\n', '\n', '  function VIVAVestingVault(\n', '    VIVAToken _token,\n', '    uint256 _d1,\n', '    uint256 _d2,\n', '    bool _testing\n', '  ) public\n', '    Testable(_testing) {\n', '    token = _token;\n', '    d1 = _d1;\n', '    d2 = _d2;\n', '  }\n', '\n', '  function register(address beneficiary, uint256 due) public onlyAdmin {\n', '    require(beneficiary != address(0));\n', '    require(due >= released[beneficiary]);\n', '    totalDue[beneficiary] = due;\n', '  }\n', '\n', '  function release(address beneficiary, uint256 tokens) public {\n', '    require(beneficiary != address(0));\n', '    require(tokens > 0);\n', '    uint256 releasable = releasableAmount(beneficiary);\n', '    require(releasable > 0);\n', '    uint256 toRelease = releasable;\n', '    require(releasable >= tokens);\n', '    if(tokens < releasable) {\n', '      toRelease = tokens;\n', '    }\n', '    require(token.balanceOf(this) >= toRelease);\n', '    assert(released[beneficiary].add(toRelease) <= totalDue[beneficiary]);\n', '    released[beneficiary] = released[beneficiary].add(toRelease);\n', '    assert(token.transfer(beneficiary, toRelease));\n', '    Released(beneficiary, toRelease);\n', '  }\n', '\n', '  function releasableAmount(address beneficiary) public view returns (uint256) {\n', '    uint256 vestedAmount;\n', '    if (getNow() < d1) {\n', '      vestedAmount = 0;\n', '    } else if (getNow() < d2) {\n', '      vestedAmount = totalDue[beneficiary].div(2);\n', '    } else {\n', '      if(isAdmin(msg.sender)) {\n', '        vestedAmount = totalDue[beneficiary];\n', '      } else {\n', '        vestedAmount = totalDue[beneficiary].div(2);\n', '      }\n', '    }\n', '    return vestedAmount.sub(released[beneficiary]);\n', '  }\n', '\n', '  function setSchedule(uint256 _d1, uint256 _d2) public onlyAdmin {\n', '    require(_d1 <= _d2);\n', '    d1 = _d1;\n', '    d2 = _d2;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract VIVACrowdsaleRound is Ownable, Testable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  struct Bonus {\n', '    uint256 tier;\n', '    uint256 rate;\n', '  }\n', '\n', '  bool public refundable;\n', '  uint256 public capAtWei;\n', '  uint256 public capAtDuration;\n', '\n', '  Bonus[] bonuses;\n', '\n', '  function VIVACrowdsaleRound(\n', '    bool _refundable,\n', '    uint256 _capAtWei,\n', '    uint256 _capAtDuration,\n', '    bool _testing\n', '  ) Testable(_testing) public {\n', '    refundable = _refundable;\n', '    capAtWei = _capAtWei;\n', '    capAtDuration = _capAtDuration;\n', '  }\n', '\n', '  function addBonus(uint256 tier, uint256 rate) public onlyOwner {\n', '    Bonus memory bonus;\n', '    bonus.tier = tier;\n', '    bonus.rate = rate;\n', '    bonuses.push(bonus);\n', '  }\n', '\n', '  function setCapAtDuration(uint256 _capAtDuration) onlyOwner public returns (uint256) {\n', '    capAtDuration = _capAtDuration;\n', '  }\n', '\n', '  function setCapAtWei(uint256 _capAtWei) onlyOwner whenTesting public {\n', '    capAtWei = _capAtWei;\n', '  }\n', '\n', '  function getBonusRate(uint256 baseRate, uint256 weiAmount) public view returns (uint256) {\n', '    uint256 r = baseRate;\n', '    for(uint i = 0; i < bonuses.length; i++) {\n', '      if(weiAmount >= bonuses[i].tier) {\n', '        r = bonuses[i].rate;\n', '      } else {\n', '        break;\n', '      }\n', '    }\n', '    return r;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '\n', 'contract VIVARefundVault is RefundVault {\n', '\n', '  function VIVARefundVault(\n', '    address _wallet\n', '  ) RefundVault(_wallet) public { }\n', '\n', '  function setWallet(address _wallet) onlyOwner public {\n', '    require(state == State.Active);\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '  }\n', '\n', '  function getWallet() public view returns (address) {\n', '    return wallet;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract VIVACrowdsaleData is Administrated {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  // Events\n', '  event MintTokens(address beneficiary, uint256 tokens);\n', '\n', '  event CloseRefundVault(bool refund);\n', '  event Finalize(address tokenOwner, bool refundable);\n', '  event RegisterPrivateContribution(address beneficiary, uint256 tokens);\n', '  event RegisterPurchase(VIVACrowdsaleRound round, address beneficiary, uint256 tokens, uint256 weiAmount);\n', '  event UnregisterPurchase(address beneficiary, uint256 tokens, uint256 weiAmount);\n', '\n', '  VIVAToken public token;\n', '\n', '  uint256 public startTime;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  VIVACrowdsaleRound[] public rounds;\n', '\n', '  // Main fund collection (refundable)\n', '  address public wallet;\n', '  VIVARefundVault public refundVault;\n', '  bool public refundVaultClosed = false;\n', '\n', '  // Distribution vaults\n', '  address public bountyVault;\n', '  address public reserveVault;\n', '  address public teamVault;\n', '  address public advisorVault;\n', '\n', '  // Track general sale progress\n', '  uint256 public privateContributionTokens;\n', '  mapping(address => uint256) internal weiContributed;\n', '  uint256 public mintedForSaleTokens; // Total general sale tokens minted\n', '  uint256 public weiRaisedForSale;\n', '\n', '  // Verified investors only for > 7ETH (must be pre-approved)\n', '  uint256 public largeInvestorWei = 7000000000000000000; // 7 ETH\n', '  mapping(address => uint256) internal approvedLargeInvestors; // And their authorized limits\n', '\n', '  function VIVACrowdsaleData(\n', '    VIVAToken _token,\n', '    address _wallet,\n', '    uint256 _startTime\n', '  )  public {\n', '      require(_token != address(0));\n', '      require(_wallet != address(0));\n', '      token = _token;\n', '      wallet = _wallet;\n', '      startTime = _startTime;\n', '      refundVault = new VIVARefundVault(_wallet);\n', '  }\n', '\n', '  function getNumRounds() public view returns (uint256) {\n', '    return rounds.length;\n', '  }\n', '\n', '  function addRound(VIVACrowdsaleRound round) public onlyAdmin {\n', '    require(address(round) != address(0));\n', '    rounds.push(round);\n', '  }\n', '\n', '  function removeRound(uint256 i) public onlyAdmin {\n', '    while (i < rounds.length - 1) {\n', '      rounds[i] = rounds[i+1];\n', '      i++;\n', '    }\n', '    rounds.length--;\n', '  }\n', '\n', '  function setStartTime(uint256 _startTime) public onlyAdmin {\n', '    startTime = _startTime;\n', '  }\n', '\n', '  function mintTokens(address beneficiary, uint256 tokens) public onlyAdmin returns (bool) {\n', '    return CrowdsaleTokenUtils.mintTokens(token, beneficiary, tokens);\n', '  }\n', '\n', '  function registerPrivateContribution(address beneficiary, uint256 tokens) public onlyAdmin returns (bool) {\n', '    require(beneficiary != address(0));\n', '    privateContributionTokens = privateContributionTokens.add(tokens);\n', '    RegisterPrivateContribution(beneficiary, tokens);\n', '    return true;\n', '  }\n', '\n', '  function registerPurchase(VIVACrowdsaleRound round, address beneficiary, uint256 tokens) public payable onlyAdmin returns (bool) {\n', '    require(address(round) != address(0));\n', '    require(beneficiary != address(0));\n', '    if(round.refundable()) {\n', '      refundVault.deposit.value(msg.value)(beneficiary);\n', '    } else {\n', '      wallet.transfer(msg.value);\n', '    }\n', '    weiContributed[beneficiary] = msg.value.add(weiContributed[beneficiary]);\n', '    weiRaisedForSale = weiRaisedForSale.add(msg.value);\n', '    mintedForSaleTokens = mintedForSaleTokens.add(tokens);\n', '    RegisterPurchase(round, beneficiary, tokens, msg.value);\n', '    return true;\n', '  }\n', '\n', '  function getWeiContributed(address from) public view returns (uint256) { return weiContributed[from];  }\n', '\n', '  function closeRefundVault(bool refund) public onlyAdmin {\n', '    require(!refundVaultClosed);\n', '    refundVaultClosed = true;\n', '    if(refund) {\n', '      refundVault.enableRefunds();\n', '    } else {\n', '      refundVault.close();\n', '    }\n', '    CloseRefundVault(refund);\n', '  }\n', '\n', '  function finalize(address tokenOwner, bool refundable) public onlyAdmin {\n', '    require(tokenOwner != address(0));\n', '    require(!isFinalized);\n', '    isFinalized = true;\n', '    if(!refundVaultClosed) {\n', '      closeRefundVault(refundable);\n', '    }\n', '    token.finishMinting();\n', '    token.transferOwnership(tokenOwner);\n', '    Finalize(tokenOwner, refundable);\n', '  }\n', '\n', '  function setWallet(address _wallet) public onlyAdmin {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    refundVault.setWallet(_wallet);\n', '  }\n', '\n', '  function setLargeInvestorWei(uint256 _largeInvestorWei) public onlyAdmin {\n', '    require(_largeInvestorWei >= 0);\n', '    largeInvestorWei = _largeInvestorWei;\n', '  }\n', '\n', '  function getLargeInvestorApproval(address beneficiary) public view returns (uint256) {\n', '    require(beneficiary != address(0));\n', '    return approvedLargeInvestors[beneficiary];\n', '  }\n', '\n', '  function setLargeInvestorApproval(address beneficiary, uint256 weiLimit) public onlyAdmin {\n', '    require(beneficiary != address(0));\n', '    require(weiLimit >= largeInvestorWei);\n', '    approvedLargeInvestors[beneficiary] = weiLimit;\n', '  }\n', '\n', '  function setBountyVault(address vault) public onlyAdmin  { bountyVault = vault;  }\n', '  function setReserveVault(address vault) public onlyAdmin { reserveVault = vault; }\n', '  function setTeamVault(address vault) public onlyAdmin    { teamVault = vault;    }\n', '  function setAdvisorVault(address vault) public onlyAdmin { advisorVault = vault; }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract VIVAVault is Administrated {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  event Released(address beneficiary, uint256 amount);\n', '\n', '  VIVAToken public token;\n', '\n', '  function VIVAVault(\n', '    VIVAToken _token\n', '  ) public {\n', '    token = _token;\n', '  }\n', '\n', '  function release(address beneficiary, uint256 amount) public onlyAdmin {\n', '    require(beneficiary != address(0));\n', '    require(amount > 0);\n', '\n', '    uint256 releasable = releasableAmount(beneficiary);\n', '    require(releasable > 0);\n', '    require(token.balanceOf(this) >= releasable);\n', '    require(amount <= releasable);\n', '\n', '    assert(token.transfer(beneficiary, amount));\n', '\n', '    Released(beneficiary, amount);\n', '  }\n', '\n', '  function releasableAmount(address beneficiary) public view returns (uint256) {\n', '    require(beneficiary != address(0));\n', '    // Any other restrictions we want\n', '    return token.balanceOf(this);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'library VaultUtils {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  function createVestingVault(VIVACrowdsaleData data, address admin, uint256 tokens, uint256 d1, uint256 d2, bool testing) public returns (VIVAVestingVault) {\n', '    require(admin != address(0));\n', '    VIVAVestingVault vault = new VIVAVestingVault(data.token(), d1, d2, testing);\n', '    vault.setAdmin(admin, true);\n', '    assert(data.mintTokens(address(vault), tokens));\n', '    return vault;\n', '  }\n', '\n', '  function createVault(VIVACrowdsaleData data, address admin, uint256 tokens) public returns (VIVAVault) {\n', '    require(admin != address(0));\n', '    VIVAVault vault = new VIVAVault(data.token());\n', '    vault.setAdmin(admin, true);\n', '    assert(data.mintTokens(address(vault), tokens));\n', '    return vault;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'library CrowdsaleUtils {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  function getCurrentRound(VIVACrowdsaleData data, uint256 valuationDate, uint256 weiRaisedForSale) public view returns (VIVACrowdsaleRound) {\n', '    uint256 time = data.startTime();\n', '    bool hadTimeRange = false;\n', '    for(uint i = 0; i < data.getNumRounds(); i++) {\n', '      bool inTimeRange = valuationDate >= time && valuationDate < time.add(data.rounds(i).capAtDuration());\n', '      bool inCapRange = weiRaisedForSale < data.rounds(i).capAtWei();\n', '      if(inTimeRange) {\n', '        if(inCapRange) {\n', '          return data.rounds(i);\n', '        }\n', '        hadTimeRange = true;\n', '      } else {\n', '        if(hadTimeRange) {\n', '          if(inCapRange) {\n', '            return data.rounds(i);\n', '          }\n', '        }\n', '      }\n', '      time = time.add(data.rounds(i).capAtDuration());\n', '    }\n', '  }\n', '\n', '  function validPurchase(VIVACrowdsaleData data, VIVACrowdsaleRound round, address beneficiary, uint256 weiAmount, uint256 tokens, uint256 minContributionWeiAmount, uint256 tokensForSale) public view returns (bool) {\n', '    // Crowdsale must be active\n', '    if(address(round) == address(0)) {\n', '      return false;\n', '    }\n', '    if(data.isFinalized()) {\n', '      return false;\n', '    }\n', '\n', '    // Ensure exceeds min contribution size\n', '    if(weiAmount < minContributionWeiAmount) {\n', '      return false;\n', '    }\n', '    if(tokens <= 0) {\n', '      return false;\n', '    }\n', '\n', '    // Ensure we have enough tokens left for sale\n', '    if(tokens.add(data.mintedForSaleTokens()) > tokensForSale) {\n', '      return false;\n', '    }\n', '\n', '    // Ensure cap not exceeded\n', '    if(weiAmount.add(data.weiRaisedForSale()) > round.capAtWei()) {\n', '      return false;\n', '    }\n', '\n', '    uint256 contributed = weiAmount.add(data.getWeiContributed(beneficiary));\n', '    // Ensure large investors are approved\n', '    if(contributed > data.largeInvestorWei()) {\n', '      if(data.getLargeInvestorApproval(beneficiary) < contributed) {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    // It&#39;s valid!\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract VIVACrowdsale is Administrated, Testable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  // Events (more bubble up from VIVACrowdsaleData)\n', '  event Cancelled();\n', '  event Debug(uint256 value);\n', '\n', '  // ms time constants\n', '  uint256 public constant SECOND = 1000;\n', '  uint256 public constant MINUTE = SECOND * 60;\n', '  uint256 public constant HOUR = MINUTE * 60;\n', '  uint256 public constant DAY = HOUR * 24;\n', '  uint256 public constant WEEK = DAY * 7;\n', '\n', '  // Crowdsale data store separated from logic\n', '  VIVACrowdsaleData public data;\n', '\n', '  // ===== Main TGE Parameters (Constant) =================================================\n', '  uint256 public constant baseRate                 = 35714;\n', '  uint256 public constant minContributionWeiAmount = 1000000000000000;\n', '  uint256 public constant tokensPrivateInvesting   = 50000000 * 10**18;\n', '  uint256 public constant tokensMarketing          = 500000000 * 10**18;\n', '  uint256 public constant tokensTeam               = 300000000 * 10**18;\n', '  uint256 public constant tokensAdvisor            = 150000000 * 10**18;\n', '  uint256 public constant tokensBounty             = 50000000 * 10**18;\n', '  uint256 public constant tokensReserved           = 400000000 * 10**18;\n', '  uint256 public constant tokensForSale            = 3000000000 * 10**18;\n', '  // ======================================================================================\n', '\n', '  function VIVACrowdsale(\n', '    VIVACrowdsaleData _data,\n', '    bool _testing\n', '  ) Testable(_testing) public {\n', '      require(_data != address(0));\n', '      data = _data;\n', '  }\n', '\n', '  function privateContribution(address beneficiary, uint256 tokens) public onlyAdmin {\n', '    require(beneficiary != address(0));\n', '    require(tokens > 0);\n', '    require(!data.isFinalized());\n', '    require(tokens.add(data.privateContributionTokens()) <= tokensPrivateInvesting.add(tokensMarketing));\n', '    assert(data.registerPrivateContribution(beneficiary, tokens));\n', '    assert(data.mintTokens(beneficiary, tokens));\n', '  }\n', '\n', '  function getTokenAmount(VIVACrowdsaleRound round, uint256 weiAmount) public view returns(uint256) {\n', '    require(address(round) != address(0));\n', '    if(weiAmount == 0) return 0;\n', '    return weiAmount.mul(round.getBonusRate(baseRate, weiAmount));\n', '  }\n', '\n', '  function () external payable {\n', '    buyTokens();\n', '  }\n', '\n', '  function buyTokens() public payable {\n', '    require(!data.isFinalized());\n', '    VIVACrowdsaleRound round = getCurrentRound(getNow(), data.weiRaisedForSale());\n', '    require(address(round) != address(0));\n', '    uint256 tokens = getTokenAmount(round, msg.value);\n', '    require(CrowdsaleUtils.validPurchase(data, round, msg.sender, msg.value, tokens, minContributionWeiAmount, tokensForSale));\n', '    assert(data.registerPurchase.value(msg.value)(round, msg.sender, tokens));\n', '    assert(data.mintTokens(msg.sender, tokens));\n', '  }\n', '\n', '  function getCurrentRound(uint256 valuationDate, uint256 weiRaisedForSale) public view returns (VIVACrowdsaleRound) {\n', '    return CrowdsaleUtils.getCurrentRound(data, valuationDate, weiRaisedForSale);\n', '  }\n', '\n', '  function cancel() onlyAdmin public {\n', '    require(!data.isFinalized());\n', '    data.finalize(msg.sender, true);\n', '    Cancelled();\n', '  }\n', '\n', '  function finalize() onlyAdmin public {\n', '    require(!data.isFinalized());\n', '    data.setBountyVault(VaultUtils.createVault(data, msg.sender, tokensBounty));\n', '    data.setReserveVault(VaultUtils.createVault(data, msg.sender, tokensReserved));\n', '    data.setTeamVault(VaultUtils.createVestingVault(data, msg.sender, tokensTeam, getNow() + (365 * DAY), getNow() + (365 * DAY), testing));\n', '    data.setAdvisorVault(VaultUtils.createVestingVault(data, msg.sender, tokensAdvisor, getNow() + (30 * DAY), getNow() + (90 * DAY), testing));\n', '    data.finalize(msg.sender, false);\n', '    // Unsold tokens are burnt (i.e. never minted)\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', 'contract Administrated is Ownable {\n', '\n', '  mapping(address => bool) internal admins;\n', '\n', '  function Administrated() public {\n', '  }\n', '\n', '  modifier onlyAdmin() {\n', '    require(isAdmin(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function setAdmin(address _admin, bool _isAdmin) public {\n', '    require(_admin != address(0));\n', '    require(msg.sender == owner || admins[msg.sender] == true);\n', '    admins[_admin] = _isAdmin;\n', '  }\n', '\n', '  function isAdmin(address _address) public view returns (bool) {\n', '    return admins[_address];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedToken(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract VIVAToken is CappedToken, PausableToken {\n', '\n', '  using SafeERC20 for ERC20;\n', '\n', '  string public name = "VIVA Token";\n', '  string public symbol = "VIVA";\n', '  uint8 public decimals = 18;\n', '\n', '  function VIVAToken(uint256 _cap) public\n', '    CappedToken(_cap * 10**18)\n', '    PausableToken() { }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'library CrowdsaleTokenUtils {\n', '\n', '  // Events\n', '  event MintTokens(address beneficiary, uint256 tokens);\n', '\n', '  using SafeMath for uint256;\n', '\n', '  function mintTokens(VIVAToken token, address beneficiary, uint256 tokens) public returns (bool) {\n', '    require(beneficiary != address(0));\n', '    require(tokens > 0);\n', '    MintTokens(beneficiary, tokens);\n', '    return token.mint(beneficiary, tokens);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract Testable is Ownable {\n', '\n', '  bool internal testing;\n', '  uint256 public _now;\n', '\n', '  function Testable(bool _testing) public {\n', '    testing = _testing;\n', '    _now = now;\n', '  }\n', '\n', '  modifier whenTesting() {\n', '    require(testing);\n', '    _;\n', '  }\n', '\n', '  function getNow() public view returns (uint256) {\n', '    if(testing) {\n', '      return _now;\n', '    } else {\n', '      return now;\n', '    }\n', '  }\n', '\n', '  function setNow(uint256 __now) public onlyOwner whenTesting {\n', '    _now = __now;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '// Not a generalized vesting contract - just our compensation protocol\n', 'contract VIVAVestingVault is Administrated, Testable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  event Released(address beneficiary, uint256 amount);\n', '\n', '  VIVAToken public token;\n', '\n', '  uint256 public d1;\n', '  uint256 public d2;\n', '\n', '  mapping(address => uint256) internal totalDue;\n', '  mapping(address => uint256) internal released;\n', '\n', '  function VIVAVestingVault(\n', '    VIVAToken _token,\n', '    uint256 _d1,\n', '    uint256 _d2,\n', '    bool _testing\n', '  ) public\n', '    Testable(_testing) {\n', '    token = _token;\n', '    d1 = _d1;\n', '    d2 = _d2;\n', '  }\n', '\n', '  function register(address beneficiary, uint256 due) public onlyAdmin {\n', '    require(beneficiary != address(0));\n', '    require(due >= released[beneficiary]);\n', '    totalDue[beneficiary] = due;\n', '  }\n', '\n', '  function release(address beneficiary, uint256 tokens) public {\n', '    require(beneficiary != address(0));\n', '    require(tokens > 0);\n', '    uint256 releasable = releasableAmount(beneficiary);\n', '    require(releasable > 0);\n', '    uint256 toRelease = releasable;\n', '    require(releasable >= tokens);\n', '    if(tokens < releasable) {\n', '      toRelease = tokens;\n', '    }\n', '    require(token.balanceOf(this) >= toRelease);\n', '    assert(released[beneficiary].add(toRelease) <= totalDue[beneficiary]);\n', '    released[beneficiary] = released[beneficiary].add(toRelease);\n', '    assert(token.transfer(beneficiary, toRelease));\n', '    Released(beneficiary, toRelease);\n', '  }\n', '\n', '  function releasableAmount(address beneficiary) public view returns (uint256) {\n', '    uint256 vestedAmount;\n', '    if (getNow() < d1) {\n', '      vestedAmount = 0;\n', '    } else if (getNow() < d2) {\n', '      vestedAmount = totalDue[beneficiary].div(2);\n', '    } else {\n', '      if(isAdmin(msg.sender)) {\n', '        vestedAmount = totalDue[beneficiary];\n', '      } else {\n', '        vestedAmount = totalDue[beneficiary].div(2);\n', '      }\n', '    }\n', '    return vestedAmount.sub(released[beneficiary]);\n', '  }\n', '\n', '  function setSchedule(uint256 _d1, uint256 _d2) public onlyAdmin {\n', '    require(_d1 <= _d2);\n', '    d1 = _d1;\n', '    d2 = _d2;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract VIVACrowdsaleRound is Ownable, Testable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  struct Bonus {\n', '    uint256 tier;\n', '    uint256 rate;\n', '  }\n', '\n', '  bool public refundable;\n', '  uint256 public capAtWei;\n', '  uint256 public capAtDuration;\n', '\n', '  Bonus[] bonuses;\n', '\n', '  function VIVACrowdsaleRound(\n', '    bool _refundable,\n', '    uint256 _capAtWei,\n', '    uint256 _capAtDuration,\n', '    bool _testing\n', '  ) Testable(_testing) public {\n', '    refundable = _refundable;\n', '    capAtWei = _capAtWei;\n', '    capAtDuration = _capAtDuration;\n', '  }\n', '\n', '  function addBonus(uint256 tier, uint256 rate) public onlyOwner {\n', '    Bonus memory bonus;\n', '    bonus.tier = tier;\n', '    bonus.rate = rate;\n', '    bonuses.push(bonus);\n', '  }\n', '\n', '  function setCapAtDuration(uint256 _capAtDuration) onlyOwner public returns (uint256) {\n', '    capAtDuration = _capAtDuration;\n', '  }\n', '\n', '  function setCapAtWei(uint256 _capAtWei) onlyOwner whenTesting public {\n', '    capAtWei = _capAtWei;\n', '  }\n', '\n', '  function getBonusRate(uint256 baseRate, uint256 weiAmount) public view returns (uint256) {\n', '    uint256 r = baseRate;\n', '    for(uint i = 0; i < bonuses.length; i++) {\n', '      if(weiAmount >= bonuses[i].tier) {\n', '        r = bonuses[i].rate;\n', '      } else {\n', '        break;\n', '      }\n', '    }\n', '    return r;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '\n', 'contract VIVARefundVault is RefundVault {\n', '\n', '  function VIVARefundVault(\n', '    address _wallet\n', '  ) RefundVault(_wallet) public { }\n', '\n', '  function setWallet(address _wallet) onlyOwner public {\n', '    require(state == State.Active);\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '  }\n', '\n', '  function getWallet() public view returns (address) {\n', '    return wallet;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract VIVACrowdsaleData is Administrated {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  // Events\n', '  event MintTokens(address beneficiary, uint256 tokens);\n', '\n', '  event CloseRefundVault(bool refund);\n', '  event Finalize(address tokenOwner, bool refundable);\n', '  event RegisterPrivateContribution(address beneficiary, uint256 tokens);\n', '  event RegisterPurchase(VIVACrowdsaleRound round, address beneficiary, uint256 tokens, uint256 weiAmount);\n', '  event UnregisterPurchase(address beneficiary, uint256 tokens, uint256 weiAmount);\n', '\n', '  VIVAToken public token;\n', '\n', '  uint256 public startTime;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  VIVACrowdsaleRound[] public rounds;\n', '\n', '  // Main fund collection (refundable)\n', '  address public wallet;\n', '  VIVARefundVault public refundVault;\n', '  bool public refundVaultClosed = false;\n', '\n', '  // Distribution vaults\n', '  address public bountyVault;\n', '  address public reserveVault;\n', '  address public teamVault;\n', '  address public advisorVault;\n', '\n', '  // Track general sale progress\n', '  uint256 public privateContributionTokens;\n', '  mapping(address => uint256) internal weiContributed;\n', '  uint256 public mintedForSaleTokens; // Total general sale tokens minted\n', '  uint256 public weiRaisedForSale;\n', '\n', '  // Verified investors only for > 7ETH (must be pre-approved)\n', '  uint256 public largeInvestorWei = 7000000000000000000; // 7 ETH\n', '  mapping(address => uint256) internal approvedLargeInvestors; // And their authorized limits\n', '\n', '  function VIVACrowdsaleData(\n', '    VIVAToken _token,\n', '    address _wallet,\n', '    uint256 _startTime\n', '  )  public {\n', '      require(_token != address(0));\n', '      require(_wallet != address(0));\n', '      token = _token;\n', '      wallet = _wallet;\n', '      startTime = _startTime;\n', '      refundVault = new VIVARefundVault(_wallet);\n', '  }\n', '\n', '  function getNumRounds() public view returns (uint256) {\n', '    return rounds.length;\n', '  }\n', '\n', '  function addRound(VIVACrowdsaleRound round) public onlyAdmin {\n', '    require(address(round) != address(0));\n', '    rounds.push(round);\n', '  }\n', '\n', '  function removeRound(uint256 i) public onlyAdmin {\n', '    while (i < rounds.length - 1) {\n', '      rounds[i] = rounds[i+1];\n', '      i++;\n', '    }\n', '    rounds.length--;\n', '  }\n', '\n', '  function setStartTime(uint256 _startTime) public onlyAdmin {\n', '    startTime = _startTime;\n', '  }\n', '\n', '  function mintTokens(address beneficiary, uint256 tokens) public onlyAdmin returns (bool) {\n', '    return CrowdsaleTokenUtils.mintTokens(token, beneficiary, tokens);\n', '  }\n', '\n', '  function registerPrivateContribution(address beneficiary, uint256 tokens) public onlyAdmin returns (bool) {\n', '    require(beneficiary != address(0));\n', '    privateContributionTokens = privateContributionTokens.add(tokens);\n', '    RegisterPrivateContribution(beneficiary, tokens);\n', '    return true;\n', '  }\n', '\n', '  function registerPurchase(VIVACrowdsaleRound round, address beneficiary, uint256 tokens) public payable onlyAdmin returns (bool) {\n', '    require(address(round) != address(0));\n', '    require(beneficiary != address(0));\n', '    if(round.refundable()) {\n', '      refundVault.deposit.value(msg.value)(beneficiary);\n', '    } else {\n', '      wallet.transfer(msg.value);\n', '    }\n', '    weiContributed[beneficiary] = msg.value.add(weiContributed[beneficiary]);\n', '    weiRaisedForSale = weiRaisedForSale.add(msg.value);\n', '    mintedForSaleTokens = mintedForSaleTokens.add(tokens);\n', '    RegisterPurchase(round, beneficiary, tokens, msg.value);\n', '    return true;\n', '  }\n', '\n', '  function getWeiContributed(address from) public view returns (uint256) { return weiContributed[from];  }\n', '\n', '  function closeRefundVault(bool refund) public onlyAdmin {\n', '    require(!refundVaultClosed);\n', '    refundVaultClosed = true;\n', '    if(refund) {\n', '      refundVault.enableRefunds();\n', '    } else {\n', '      refundVault.close();\n', '    }\n', '    CloseRefundVault(refund);\n', '  }\n', '\n', '  function finalize(address tokenOwner, bool refundable) public onlyAdmin {\n', '    require(tokenOwner != address(0));\n', '    require(!isFinalized);\n', '    isFinalized = true;\n', '    if(!refundVaultClosed) {\n', '      closeRefundVault(refundable);\n', '    }\n', '    token.finishMinting();\n', '    token.transferOwnership(tokenOwner);\n', '    Finalize(tokenOwner, refundable);\n', '  }\n', '\n', '  function setWallet(address _wallet) public onlyAdmin {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    refundVault.setWallet(_wallet);\n', '  }\n', '\n', '  function setLargeInvestorWei(uint256 _largeInvestorWei) public onlyAdmin {\n', '    require(_largeInvestorWei >= 0);\n', '    largeInvestorWei = _largeInvestorWei;\n', '  }\n', '\n', '  function getLargeInvestorApproval(address beneficiary) public view returns (uint256) {\n', '    require(beneficiary != address(0));\n', '    return approvedLargeInvestors[beneficiary];\n', '  }\n', '\n', '  function setLargeInvestorApproval(address beneficiary, uint256 weiLimit) public onlyAdmin {\n', '    require(beneficiary != address(0));\n', '    require(weiLimit >= largeInvestorWei);\n', '    approvedLargeInvestors[beneficiary] = weiLimit;\n', '  }\n', '\n', '  function setBountyVault(address vault) public onlyAdmin  { bountyVault = vault;  }\n', '  function setReserveVault(address vault) public onlyAdmin { reserveVault = vault; }\n', '  function setTeamVault(address vault) public onlyAdmin    { teamVault = vault;    }\n', '  function setAdvisorVault(address vault) public onlyAdmin { advisorVault = vault; }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract VIVAVault is Administrated {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  event Released(address beneficiary, uint256 amount);\n', '\n', '  VIVAToken public token;\n', '\n', '  function VIVAVault(\n', '    VIVAToken _token\n', '  ) public {\n', '    token = _token;\n', '  }\n', '\n', '  function release(address beneficiary, uint256 amount) public onlyAdmin {\n', '    require(beneficiary != address(0));\n', '    require(amount > 0);\n', '\n', '    uint256 releasable = releasableAmount(beneficiary);\n', '    require(releasable > 0);\n', '    require(token.balanceOf(this) >= releasable);\n', '    require(amount <= releasable);\n', '\n', '    assert(token.transfer(beneficiary, amount));\n', '\n', '    Released(beneficiary, amount);\n', '  }\n', '\n', '  function releasableAmount(address beneficiary) public view returns (uint256) {\n', '    require(beneficiary != address(0));\n', '    // Any other restrictions we want\n', '    return token.balanceOf(this);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'library VaultUtils {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  function createVestingVault(VIVACrowdsaleData data, address admin, uint256 tokens, uint256 d1, uint256 d2, bool testing) public returns (VIVAVestingVault) {\n', '    require(admin != address(0));\n', '    VIVAVestingVault vault = new VIVAVestingVault(data.token(), d1, d2, testing);\n', '    vault.setAdmin(admin, true);\n', '    assert(data.mintTokens(address(vault), tokens));\n', '    return vault;\n', '  }\n', '\n', '  function createVault(VIVACrowdsaleData data, address admin, uint256 tokens) public returns (VIVAVault) {\n', '    require(admin != address(0));\n', '    VIVAVault vault = new VIVAVault(data.token());\n', '    vault.setAdmin(admin, true);\n', '    assert(data.mintTokens(address(vault), tokens));\n', '    return vault;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'library CrowdsaleUtils {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  function getCurrentRound(VIVACrowdsaleData data, uint256 valuationDate, uint256 weiRaisedForSale) public view returns (VIVACrowdsaleRound) {\n', '    uint256 time = data.startTime();\n', '    bool hadTimeRange = false;\n', '    for(uint i = 0; i < data.getNumRounds(); i++) {\n', '      bool inTimeRange = valuationDate >= time && valuationDate < time.add(data.rounds(i).capAtDuration());\n', '      bool inCapRange = weiRaisedForSale < data.rounds(i).capAtWei();\n', '      if(inTimeRange) {\n', '        if(inCapRange) {\n', '          return data.rounds(i);\n', '        }\n', '        hadTimeRange = true;\n', '      } else {\n', '        if(hadTimeRange) {\n', '          if(inCapRange) {\n', '            return data.rounds(i);\n', '          }\n', '        }\n', '      }\n', '      time = time.add(data.rounds(i).capAtDuration());\n', '    }\n', '  }\n', '\n', '  function validPurchase(VIVACrowdsaleData data, VIVACrowdsaleRound round, address beneficiary, uint256 weiAmount, uint256 tokens, uint256 minContributionWeiAmount, uint256 tokensForSale) public view returns (bool) {\n', '    // Crowdsale must be active\n', '    if(address(round) == address(0)) {\n', '      return false;\n', '    }\n', '    if(data.isFinalized()) {\n', '      return false;\n', '    }\n', '\n', '    // Ensure exceeds min contribution size\n', '    if(weiAmount < minContributionWeiAmount) {\n', '      return false;\n', '    }\n', '    if(tokens <= 0) {\n', '      return false;\n', '    }\n', '\n', '    // Ensure we have enough tokens left for sale\n', '    if(tokens.add(data.mintedForSaleTokens()) > tokensForSale) {\n', '      return false;\n', '    }\n', '\n', '    // Ensure cap not exceeded\n', '    if(weiAmount.add(data.weiRaisedForSale()) > round.capAtWei()) {\n', '      return false;\n', '    }\n', '\n', '    uint256 contributed = weiAmount.add(data.getWeiContributed(beneficiary));\n', '    // Ensure large investors are approved\n', '    if(contributed > data.largeInvestorWei()) {\n', '      if(data.getLargeInvestorApproval(beneficiary) < contributed) {\n', '        return false;\n', '      }\n', '    }\n', '\n', "    // It's valid!\n", '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract VIVACrowdsale is Administrated, Testable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  // Events (more bubble up from VIVACrowdsaleData)\n', '  event Cancelled();\n', '  event Debug(uint256 value);\n', '\n', '  // ms time constants\n', '  uint256 public constant SECOND = 1000;\n', '  uint256 public constant MINUTE = SECOND * 60;\n', '  uint256 public constant HOUR = MINUTE * 60;\n', '  uint256 public constant DAY = HOUR * 24;\n', '  uint256 public constant WEEK = DAY * 7;\n', '\n', '  // Crowdsale data store separated from logic\n', '  VIVACrowdsaleData public data;\n', '\n', '  // ===== Main TGE Parameters (Constant) =================================================\n', '  uint256 public constant baseRate                 = 35714;\n', '  uint256 public constant minContributionWeiAmount = 1000000000000000;\n', '  uint256 public constant tokensPrivateInvesting   = 50000000 * 10**18;\n', '  uint256 public constant tokensMarketing          = 500000000 * 10**18;\n', '  uint256 public constant tokensTeam               = 300000000 * 10**18;\n', '  uint256 public constant tokensAdvisor            = 150000000 * 10**18;\n', '  uint256 public constant tokensBounty             = 50000000 * 10**18;\n', '  uint256 public constant tokensReserved           = 400000000 * 10**18;\n', '  uint256 public constant tokensForSale            = 3000000000 * 10**18;\n', '  // ======================================================================================\n', '\n', '  function VIVACrowdsale(\n', '    VIVACrowdsaleData _data,\n', '    bool _testing\n', '  ) Testable(_testing) public {\n', '      require(_data != address(0));\n', '      data = _data;\n', '  }\n', '\n', '  function privateContribution(address beneficiary, uint256 tokens) public onlyAdmin {\n', '    require(beneficiary != address(0));\n', '    require(tokens > 0);\n', '    require(!data.isFinalized());\n', '    require(tokens.add(data.privateContributionTokens()) <= tokensPrivateInvesting.add(tokensMarketing));\n', '    assert(data.registerPrivateContribution(beneficiary, tokens));\n', '    assert(data.mintTokens(beneficiary, tokens));\n', '  }\n', '\n', '  function getTokenAmount(VIVACrowdsaleRound round, uint256 weiAmount) public view returns(uint256) {\n', '    require(address(round) != address(0));\n', '    if(weiAmount == 0) return 0;\n', '    return weiAmount.mul(round.getBonusRate(baseRate, weiAmount));\n', '  }\n', '\n', '  function () external payable {\n', '    buyTokens();\n', '  }\n', '\n', '  function buyTokens() public payable {\n', '    require(!data.isFinalized());\n', '    VIVACrowdsaleRound round = getCurrentRound(getNow(), data.weiRaisedForSale());\n', '    require(address(round) != address(0));\n', '    uint256 tokens = getTokenAmount(round, msg.value);\n', '    require(CrowdsaleUtils.validPurchase(data, round, msg.sender, msg.value, tokens, minContributionWeiAmount, tokensForSale));\n', '    assert(data.registerPurchase.value(msg.value)(round, msg.sender, tokens));\n', '    assert(data.mintTokens(msg.sender, tokens));\n', '  }\n', '\n', '  function getCurrentRound(uint256 valuationDate, uint256 weiRaisedForSale) public view returns (VIVACrowdsaleRound) {\n', '    return CrowdsaleUtils.getCurrentRound(data, valuationDate, weiRaisedForSale);\n', '  }\n', '\n', '  function cancel() onlyAdmin public {\n', '    require(!data.isFinalized());\n', '    data.finalize(msg.sender, true);\n', '    Cancelled();\n', '  }\n', '\n', '  function finalize() onlyAdmin public {\n', '    require(!data.isFinalized());\n', '    data.setBountyVault(VaultUtils.createVault(data, msg.sender, tokensBounty));\n', '    data.setReserveVault(VaultUtils.createVault(data, msg.sender, tokensReserved));\n', '    data.setTeamVault(VaultUtils.createVestingVault(data, msg.sender, tokensTeam, getNow() + (365 * DAY), getNow() + (365 * DAY), testing));\n', '    data.setAdvisorVault(VaultUtils.createVestingVault(data, msg.sender, tokensAdvisor, getNow() + (30 * DAY), getNow() + (90 * DAY), testing));\n', '    data.finalize(msg.sender, false);\n', '    // Unsold tokens are burnt (i.e. never minted)\n', '  }\n', '\n', '}']
