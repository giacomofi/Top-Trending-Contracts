['pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    \n', '    uint256 c = a / b;\n', '    \n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    \n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', '\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '        \n', '        \n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Jewel {\n', '    function incise(address owner, uint256 value) external returns (uint);\n', '}\n', '\n', 'contract DayQualitys {\n', '    function getAreaQualityByDay(uint32 time, uint32 area) external returns (uint32);\n', '}\n', '\n', 'contract Mineral is BurnableToken, Ownable {\n', '\n', '    string public name = "Mineral";\n', '    string public symbol = "ORE";\n', '    uint8 public decimals = 18;\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 800 * 1000 * 1000 * (10 ** uint256(decimals));\n', '\n', '    uint public constant MINER_4_HOURS = 0.0005 ether;\n', '    uint public constant MINER_8_HOURS = 0.001 ether;\n', '    uint public constant MINER_24_HOURS = 0.003 ether;\n', '\n', '    mapping(address => uint[][72]) public deployRange;\n', '\n', '    \n', '    \n', '    uint public timeScale = 1; \n', '\n', '    \n', '    \n', '    mapping(uint32 => uint32[3][72]) private areaHourDeployed;\n', '\n', '    \n', '    struct AreaHourDeployed {\n', '        uint32[72] lastCollectHour;\n', '        \n', '        mapping(uint32 => uint32[3][72]) hour; \n', '    }\n', '    \n', '    \n', '    mapping(address => AreaHourDeployed) private userAreaHourDeployed;\n', '\n', '    \n', '    uint8 public constant CHECK_POINT_HOUR = 4;\n', '\n', '    \n', '    \n', '    mapping(uint32 => uint32[72]) private areaCheckPoints;\n', '\n', '    \n', '    mapping(uint32 => uint) private dayAverageOutput;\n', '\n', '    \n', '    struct AreaCheckPoint {\n', '        \n', '        mapping(uint32 => uint32[72]) hour;\n', '    }\n', '\n', '    \n', '    \n', '    mapping(address => AreaCheckPoint) private userAreaCheckPoints;\n', '\n', '    uint256 amountEther;\n', '\n', '    \n', '    mapping (address => uint) public remainEther;\n', '\n', '    uint32 public constractDeployTime = uint32(now) / 1 hours * 1 hours;\n', '\n', '    mapping(address => uint) activeArea; \n', '    \n', '    bool enableWhiteList = true;\n', '    mapping(address => bool) whiteUserList;    \n', '    address serverAddress;\n', '\n', '    address coldWallet;\n', '\n', '    bool enableCheckArea = true;\n', '\n', '    Jewel public jewelContract;\n', '    DayQualitys public dayQualitysContract;\n', '\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    function Mineral() public {\n', '        totalSupply = INITIAL_SUPPLY;\n', '        balances[this] = 300 * 1000 * 1000 * (10 ** uint256(decimals));\n', '        balances[parseAddr("0x22de6b7F8b6119bA8E62FB4165834eA00adb6f3E")] = 110 * 1000 * 1000 * (10 ** uint256(decimals));\n', '        balances[parseAddr("0xA3eCD9F46CCfE4D27D747C9c7469990df7412d48")] = 30 * 1000 * 1000 * (10 ** uint256(decimals));\n', '        balances[parseAddr("0x686824DB069586aC0aD8060816F1D66A0EE8297b")] = 60 * 1000 * 1000 * (10 ** uint256(decimals));\n', '        balances[parseAddr("0x9E8eA5C674EBd85868215ceFab9c108Ab9ceA702")] = 150 * 1000 * 1000 * (10 ** uint256(decimals));\n', '        balances[parseAddr("0x4706f5d2a0d4D4eE5A37dDE1438C7de774A2A184")] = 150 * 1000 * 1000 * (10 ** uint256(decimals));\n', '        dayAverageOutput[0] = 241920 * 10 ** uint256(decimals);\n', '    }\n', '\n', '    function parseAddr(string _a) internal returns (address){\n', '        bytes memory b = bytes(_a);\n', '        uint result = 0;\n', '        for (uint i = 0; i < b.length; i++) {\n', '            uint c = uint(b[i]);\n', '            if (c >= 48 && c <= 57) {\n', '                result = result * 16 + (c - 48);\n', '            }\n', '            if(c >= 65 && c<= 90) {\n', '                result = result * 16 + (c - 55);\n', '            }\n', '            if(c >= 97 && c<= 122) {\n', '                result = result * 16 + (c - 87);\n', '            }\n', '        }\n', '        return address(result);\n', '    }\n', '\n', '    /*\n', '    function setTimeScale(uint scale) public onlyOwner {\n', '        timeScale = scale;\n', '    }\n', '\n', '    \n', '    function setConstractDeployTime(uint32 time) public onlyOwner {\n', '        constractDeployTime = time;\n', '    }*/\n', '\n', '    function setColdWallet(address _coldWallet) public onlyOwner {\n', '        coldWallet = _coldWallet;\n', '    }\n', '\n', '    function disableWhiteUserList() public onlyOwner {\n', '        enableWhiteList = false;\n', '    }\n', '\n', '    function disableCheckArea() public onlyOwner {\n', '        enableCheckArea = false;\n', '    }\n', '\n', '    modifier checkWhiteList() {\n', '        if (enableWhiteList) {\n', '            require(whiteUserList[msg.sender]);\n', '        }\n', '        _;\n', '    }\n', '\n', '    function setServerAddress(address addr) public onlyOwner {\n', '        serverAddress = addr;\n', '    }\n', '\n', '    function authUser(string addr) public {\n', '        require(msg.sender == serverAddress || msg.sender == owner);\n', '        address s = bytesToAddress(bytes(addr));\n', '        whiteUserList[s] = true;\n', '    }\n', '\n', '    function bytesToAddress (bytes b) internal view returns (address) {\n', '        uint result = 0;\n', '        for (uint i = 0; i < b.length; i++) {\n', '            uint c = uint(b[i]);\n', '            if (c >= 48 && c <= 57) {\n', '                result = result * 16 + (c - 48);\n', '            }\n', '            if(c >= 65 && c <= 90) {\n', '                result = result * 16 + (c - 55);\n', '            }\n', '            if(c >= 97 && c <= 122) {\n', '                result = result * 16 + (c - 87);\n', '            }\n', '        }\n', '        return address(result);\n', '    }\n', '\n', '    function setDayQualitys(address dayQualitys) public onlyOwner {\n', '        dayQualitysContract = DayQualitys(dayQualitys);\n', '    }\n', '\n', '    function getMyDeployAt(uint32 area, uint32 hour) public view returns (uint32[3]) {\n', '        return userAreaHourDeployed[msg.sender].hour[hour][area];\n', '    }\n', '\n', '    function getMyMinersAt(uint32 area, uint32 hour) public view returns (uint32) {\n', '        return _getUserMinersAt(msg.sender, area, hour);\n', '    }\n', '\n', '    function _getUserMinersAt(address user, uint32 area, uint32 hour) internal view returns(uint32) {\n', "        //now start from start's nearest check point\n", '        uint32 nc = hour/CHECK_POINT_HOUR*CHECK_POINT_HOUR;\n', '        if (userAreaCheckPoints[user].hour[nc][area] == 0 && userAreaCheckPoints[user].hour[nc + CHECK_POINT_HOUR][area] == 0) {\n', '            return 0;\n', '        }\n', '        uint32 h = 0;\n', '        int64 userInc = 0;\n', '        uint32[3] storage ptUser;\n', '        AreaHourDeployed storage _userAreaHourDeployed = userAreaHourDeployed[user];\n', '        \n', '        for (h = nc; h <= hour; ++h) {\n', '            \n', '            \n', '            \n', '            ptUser = _userAreaHourDeployed.hour[h][area];\n', '            userInc += ptUser[0] + ptUser[1] + ptUser[2] - _userAreaHourDeployed.hour[h - 4][area][0] - \n', '                _userAreaHourDeployed.hour[h - 8][area][1] - _userAreaHourDeployed.hour[h - 24][area][2];\n', '        }\n', '        return userAreaCheckPoints[user].hour[nc][area] + uint32(userInc);\n', '    }\n', '\n', '    function getDeployAt(uint32 area, uint32 hour) public view returns (uint32[3]) {\n', '        return areaHourDeployed[hour][area];\n', '    }\n', '\n', '\n', '    function getMinersAt(uint32 area, uint32 hour) public view returns (uint32) {\n', '        return _getMinersAt(area, hour);\n', '    }\n', '\n', '    function _getMinersAt(uint32 area, uint32 hour) internal view returns (uint32) {\n', "        //now start from start's nearest check point\n", '        uint32 nc = hour/CHECK_POINT_HOUR*CHECK_POINT_HOUR;\n', '        uint32 h = 0;\n', '        int64 userInc = 0;\n', '        int64 totalInc = 0;\n', '        uint32[3] storage ptArea;\n', '        \n', '        for (h = nc; h <= hour; ++h) {\n', '            \n', '            \n', '            \n', '            ptArea = areaHourDeployed[h][area];\n', '            totalInc += ptArea[0] + ptArea[1] + ptArea[2] - areaHourDeployed[h - 4][area][0] - areaHourDeployed[h - 8][area][1] - areaHourDeployed[h - 24][area][2];\n', '        }\n', '\n', '        return areaCheckPoints[nc][area] + uint32(totalInc);\n', '    }\n', '\n', '    function updateArea(uint areaId) internal pure returns (uint) {\n', '        \n', '        uint row = areaId / 8;\n', '        uint colum = areaId % 8;\n', '\n', '        uint result = uint(1) << areaId;\n', '        if (row-1 >= 0) {\n', '            result |= uint(1) << ((row-1)*8+colum);\n', '        }\n', '        if (row+1 < 9) {\n', '            result |= uint(1) << ((row+1)*8+colum);\n', '        }\n', '        if (colum-1 >= 0) {\n', '            result |= uint(1) << (row*8+colum-1);\n', '        }\n', '        if (colum+1 < 8) {\n', '            result |= uint(1) << (row*8+colum+1);\n', '        }\n', '        \n', '        return result;\n', '    }\n', '\n', '    function checkArea(uint32[] area, address user) internal {\n', '        if (enableCheckArea) {\n', '            uint[] memory distinctArea = new uint[](area.length);\n', '            uint distinctAreaLength = 0;\n', '        \n', '            for (uint i = 0; i < area.length; i++) {\n', '                bool find = false;\n', '                for (uint j = 0; j < distinctAreaLength; j++) {\n', '                    if (distinctArea[j] == area[i]) {\n', '                        find = true;\n', '                        break;\n', '                    }\n', '                }     \n', '                if (!find) {\n', '                    distinctArea[distinctAreaLength] = area[i];\n', '                    distinctAreaLength += 1;\n', '                }\n', '            }\n', '\n', '            if (activeArea[user] == 0) {\n', '                require(distinctAreaLength == 1);\n', '                activeArea[user] = updateArea(distinctArea[0]);\n', '            } else {\n', '                uint userActiveArea = activeArea[user];\n', '                uint updateActiveArea = userActiveArea;\n', '                for (i = 0; i < distinctAreaLength; i++) {\n', '                    require(userActiveArea & uint(1) << distinctArea[i] > 0);\n', '                    updateActiveArea = updateActiveArea | updateArea(distinctArea[i]);\n', '                }\n', '\n', '                activeArea[user] = updateActiveArea;\n', '            }\n', '        }\n', '    }\n', '\n', '    function deployMiners(address user, uint32[] area, uint32[] period, uint32[] count) public checkWhiteList whenNotPaused payable {\n', '        require(area.length > 0);\n', '        require(area.length == period.length);\n', '        require(area.length == count.length);\n', '        address _user = user;\n', '        if (_user == address(0)) {\n', '            _user = msg.sender;\n', '        }\n', '        \n', '        uint32 _hour = uint32((now - constractDeployTime) * timeScale / 1 hours);\n', '\n', '        checkArea(area, user);\n', '        \n', '        uint payment = _deployMiners(_user, _hour, area, period, count);\n', '        _updateCheckPoints(_user, _hour, area, period, count);\n', '\n', '        require(payment <= msg.value);\n', '        remainEther[msg.sender] += (msg.value - payment);\n', '        if (coldWallet != address(0)) {\n', '            coldWallet.transfer(payment);\n', '        } else {\n', '            amountEther += payment;\n', '        }\n', '        \n', '    }\n', '\n', '    /*function deployMinersTest(uint32 _hour, address user, uint32[] area, uint32[] period, uint32[] count) public checkWhiteList payable {\n', '        require(area.length > 0);\n', '        require(area.length == period.length);\n', '        require(area.length == count.length);\n', '        address _user = user;\n', '        if (_user == address(0)) {\n', '            _user = msg.sender;\n', '        }\n', '        \n', '\n', '        checkArea(area, user);\n', '        \n', '        uint payment = _deployMiners(_user, _hour, area, period, count);\n', '        _updateCheckPoints(_user, _hour, area, period, count);\n', '\n', '        require(payment <= msg.value);\n', '        remainEther[msg.sender] += (msg.value - payment);\n', '        amountEther += payment;\n', '    }*/\n', '\n', '    function _deployMiners(address _user, uint32 _hour, uint32[] memory area, uint32[] memory period, uint32[] memory count) internal returns(uint){\n', '        uint payment = 0;\n', '        uint32 minerCount = 0;\n', '        uint32[3][72] storage _areaDeployed = areaHourDeployed[_hour];\n', '        uint32[3][72] storage _userAreaDeployed = userAreaHourDeployed[_user].hour[_hour];\n', '        \n', '        \n', '        for (uint index = 0; index < area.length; ++index) {\n', '            require (period[index] == 4 || period[index] == 8 || period[index] == 24);\n', '            if (period[index] == 4) {\n', '                _areaDeployed[area[index]][0] += count[index];\n', '                _userAreaDeployed[area[index]][0] += count[index];\n', '                payment += count[index] * MINER_4_HOURS;\n', '            } else if (period[index] == 8) {\n', '                _areaDeployed[area[index]][1] += count[index];\n', '                _userAreaDeployed[area[index]][1] += count[index];\n', '                payment += count[index] * MINER_8_HOURS;\n', '            } else if (period[index] == 24) {\n', '                _areaDeployed[area[index]][2] += count[index];\n', '                _userAreaDeployed[area[index]][2] += count[index];\n', '                payment += count[index] * MINER_24_HOURS;\n', '            }\n', '            minerCount += count[index];\n', '            DeployMiner(_user, area[index], _hour, _hour + period[index], count[index]);\n', '\n', '            adjustDeployRange(area[index], _hour, _hour + period[index]);\n', '        }\n', '        return payment;\n', '    }   \n', '\n', '    function adjustDeployRange(uint area, uint start, uint end) internal {\n', '        uint len = deployRange[msg.sender][area].length;\n', '        if (len == 0) {\n', '            deployRange[msg.sender][area].push(start | (end << 128));\n', '        } else {\n', '            uint s = uint128(deployRange[msg.sender][area][len - 1]);\n', '            uint e = uint128(deployRange[msg.sender][area][len - 1] >> 128);\n', '            \n', '            if (start >= s && start < e) {\n', '                end = e > end ? e : end;\n', '                deployRange[msg.sender][area][len - 1] = s | (end << 128);\n', '            } else {\n', '                deployRange[msg.sender][area].push(start | (end << 128));\n', '            }\n', '        }\n', '    }\n', '\n', '    function getDeployArrayLength(uint area) public view returns (uint) {\n', '        return deployRange[msg.sender][area].length;\n', '    }\n', '    \n', '    function getDeploy(uint area, uint index) public view returns (uint,uint) {\n', '        uint s = uint128(deployRange[msg.sender][area][index]);\n', '        uint e = uint128(deployRange[msg.sender][area][index] >> 128);\n', '        return (s, e);\n', '    }\n', '\n', '    function _updateCheckPoints(address _user, uint32 _hour, uint32[] memory area, uint32[] memory period, uint32[] memory count) internal {\n', '        uint32 _area = 0;\n', '        uint32 _count = 0;\n', '        uint32 ce4 = _hour + 4;\n', '        uint32 ce8 = _hour + 8;\n', '        uint32 ce24 = _hour + 24;\n', '        uint32 cs = (_hour/CHECK_POINT_HOUR+1)*CHECK_POINT_HOUR;\n', '        AreaCheckPoint storage _userAreaCheckPoints = userAreaCheckPoints[_user];\n', '        uint32 cp = 0;\n', '        for (uint index = 0; index < area.length; ++index) {\n', '            _area = area[index];\n', '            _count = count[index];\n', '            if (period[index] == 4) {\n', '                for (cp = cs; cp <= ce4; cp += CHECK_POINT_HOUR) {\n', '                    areaCheckPoints[cp][_area] += _count;\n', '                    _userAreaCheckPoints.hour[cp][_area] += _count;\n', '                }\n', '            } else if (period[index] == 8) {\n', '                for (cp = cs; cp <= ce8; cp += CHECK_POINT_HOUR) {\n', '                    areaCheckPoints[cp][_area] += _count;\n', '                    _userAreaCheckPoints.hour[cp][_area] += _count;\n', '                }\n', '            } else if (period[index] == 24) {\n', '                for (cp = cs; cp <= ce24; cp += CHECK_POINT_HOUR) {\n', '                    areaCheckPoints[cp][_area] += _count;\n', '                    _userAreaCheckPoints.hour[cp][_area] += _count;\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    \n', '\n', '    event DeployMiner(address addr, uint32 area, uint32 start, uint32 end, uint32 count);\n', '\n', '    event Collect(address addr, uint32 area, uint32 start, uint32 end, uint areaCount);\n', '\n', '    function getMyLastCollectHour(uint32 area) public view returns (uint32){\n', '        return userAreaHourDeployed[msg.sender].lastCollectHour[area];\n', '    }\n', '\n', '    \n', '    \n', '    function collect(address user, uint32[] area) public  checkWhiteList whenNotPaused {\n', '        require(address(dayQualitysContract) != address(0));\n', '        uint32 current = uint32((now - constractDeployTime) * timeScale / 1 hours);\n', '        require(area.length > 0);\n', '        address _user = user;\n', '        if (_user == address(0)) {\n', '            _user = msg.sender;\n', '        }\n', '        uint total = 0;\n', '        \n', '        for (uint a = 0; a < area.length; ++a) {\n', '            uint len = deployRange[msg.sender][area[a]].length;\n', '            bool finish = true;\n', '            for (uint i = 0; i < len; i += 1) {\n', '                uint s = uint128(deployRange[msg.sender][area[a]][i]);\n', '                uint e = uint128(deployRange[msg.sender][area[a]][i] >> 128);\n', '                if (current < e && current >= s ) {\n', '                    total += _collect(_user, uint32(s), current, area[a]);\n', '                    \n', '                    deployRange[msg.sender][area[a]][i] = current | (e << 128);\n', '                    finish = false;\n', '                } else if (current >= e) {\n', '                    total += _collect(_user, uint32(s), uint32(e), area[a]);\n', '                }\n', '            }\n', '            \n', '            if (finish) {\n', '                deployRange[msg.sender][area[a]].length = 0;\n', '            } else {\n', '                deployRange[msg.sender][area[a]][0] = deployRange[msg.sender][area[a]][len - 1];\n', '                deployRange[msg.sender][area[a]].length = 1;\n', '            }\n', '        }    \n', '\n', '        ERC20(this).transfer(_user, total);\n', '    }\n', '\n', '    function _collect(address _user, uint32 start, uint32 end, uint32 area) internal returns (uint) {\n', '        uint result = 0;\n', '        uint32 writeCount = 1;\n', '        uint income = 0;\n', '        uint32[] memory totalMiners = new uint32[](CHECK_POINT_HOUR);\n', '        uint32[] memory userMiners = new uint32[](CHECK_POINT_HOUR);\n', '        uint32 ps = start/CHECK_POINT_HOUR*CHECK_POINT_HOUR+CHECK_POINT_HOUR;\n', '        if (ps >= end) {\n', '            \n', '            (income, writeCount) = _collectMinersByCheckPoints(_user, area, start, end, totalMiners, userMiners, writeCount);\n', '            result += income;\n', '        } else {\n', '            \n', '            (income, writeCount) = _collectMinersByCheckPoints(_user, area, start, ps, totalMiners, userMiners, writeCount);\n', '            result += income;\n', '\n', '            while (ps < end) {\n', '                (income, writeCount) = _collectMinersByCheckPoints(_user, area, ps, uint32(Math.min64(end, ps + CHECK_POINT_HOUR)), totalMiners, userMiners, writeCount);\n', '                result += income;\n', '\n', '                ps += CHECK_POINT_HOUR;\n', '            }\n', '        }\n', '        Collect(_user, area, start, end, result);\n', '        return result;\n', '    }\n', '\n', '    function _collectMinersByCheckPoints(address _user, uint32 area, uint32 start, uint32 end, uint32[] memory totalMiners, uint32[] memory userMiners, uint32 _writeCount) internal returns (uint income, uint32 writeCount) {\n', "        //now start from start's nearest check point\n", '        writeCount = _writeCount;\n', '        income = 0;\n', '        \n', '        \n', '        if (userAreaCheckPoints[_user].hour[start/CHECK_POINT_HOUR*CHECK_POINT_HOUR][area] == 0 && userAreaCheckPoints[_user].hour[start/CHECK_POINT_HOUR*CHECK_POINT_HOUR + CHECK_POINT_HOUR][area] == 0) {\n', '            return;\n', '        }\n', '        _getMinersByCheckPoints(_user, area, start, end, totalMiners, userMiners);\n', '        uint ao = dayAverageOutput[start / 24];\n', '        if (ao == 0) {\n', '            uint32 d = start / 24;\n', '            for (; d >= 0; --d) {\n', '                if (dayAverageOutput[d] != 0) {\n', '                    break;\n', '                }\n', '            } \n', '            ao = dayAverageOutput[d];\n', '            for (d = d+1; d <= start / 24; ++d) {\n', '                ao = ao*9996/10000;\n', '                if ((start / 24 - d) < writeCount) {\n', '                    dayAverageOutput[d] = ao;\n', '                }\n', '            }\n', '            if (writeCount > (start / 24 - d - 1)) {\n', '                writeCount = writeCount - (start / 24 - d - 1);\n', '            } else {\n', '                writeCount = 0;\n', '            }\n', '        }\n', '\n', '        uint week = dayQualitysContract.getAreaQualityByDay(uint32(start * 1 hours + constractDeployTime), area);\n', '        require(week > 0);\n', '\n', '        ao = week * ao / 10 / 24 / 72;\n', '        \n', '        income = _getTotalIncomeAt(end - start, userMiners, totalMiners, ao, week);\n', '\n', '        if (week == 10) { \n', '            income = income * 8 / 10;\n', '        } else if (week == 5) { \n', '            income = income * 6 / 10;\n', '        } \n', '    }\n', '\n', '    function _getTotalIncomeAt(uint32 hourLength, uint32[] memory userMiners, uint32[] memory totalMiners, uint areaOutput, uint week) internal view returns(uint) {\n', '        uint income = 0;\n', '        for (uint i = 0; i < hourLength; ++i) {\n', '            if (userMiners[i] != 0 && totalMiners[i] != 0) {\n', '                income += (Math.min256(10 ** uint256(decimals), areaOutput / totalMiners[i]) * userMiners[i]);\n', '            }\n', '        }\n', '        return income;\n', '    } \n', '\n', '    function _getMinersByCheckPoints(address _user, uint32 area, uint32 start, uint32 end, uint32[] memory totalMiners, uint32[] memory userMiners) internal view {\n', '        require((end - start) <= CHECK_POINT_HOUR);\n', "        //now start from start's nearest check point\n", '        uint32 h = 0;\n', '        int64 userInc = 0;\n', '        int64 totalInc = 0;\n', '        uint32[3] storage ptUser;\n', '        uint32[3] storage ptArea;\n', '        AreaHourDeployed storage _userAreaHourDeployed = userAreaHourDeployed[_user];\n', '        \n', '        for (h = start/CHECK_POINT_HOUR*CHECK_POINT_HOUR; h <= start; ++h) {\n', '            \n', '            \n', '            \n', '            ptUser = _userAreaHourDeployed.hour[h][area];\n', '            ptArea = areaHourDeployed[h][area];\n', '            totalInc += ptArea[0] + ptArea[1] + ptArea[2] - areaHourDeployed[h - 4][area][0] - areaHourDeployed[h - 8][area][1] - areaHourDeployed[h - 24][area][2];\n', '            userInc += ptUser[0] + ptUser[1] + ptUser[2] - _userAreaHourDeployed.hour[h - 4][area][0] - _userAreaHourDeployed.hour[h - 8][area][1] - _userAreaHourDeployed.hour[h - 24][area][2];\n', '        }\n', '\n', '        totalMiners[0] = areaCheckPoints[start/CHECK_POINT_HOUR*CHECK_POINT_HOUR][area] + uint32(totalInc);\n', '        userMiners[0] = userAreaCheckPoints[_user].hour[start/CHECK_POINT_HOUR*CHECK_POINT_HOUR][area] + uint32(userInc);\n', '\n', '        uint32 i = 1;\n', '        for (h = start + 1; h < end; ++h) {\n', '            \n', '            \n', '            \n', '            ptUser = _userAreaHourDeployed.hour[h][area];\n', '            ptArea = areaHourDeployed[h][area];\n', '            totalMiners[i] = totalMiners[i-1] + ptArea[0] + ptArea[1] + ptArea[2] - areaHourDeployed[h - 4][area][0] - areaHourDeployed[h - 8][area][1] - areaHourDeployed[h - 24][area][2];\n', '            userMiners[i] = userMiners[i-1] + ptUser[0] + ptUser[1] + ptUser[2] - _userAreaHourDeployed.hour[h - 4][area][0] - _userAreaHourDeployed.hour[h - 8][area][1] - _userAreaHourDeployed.hour[h - 24][area][2];\n', '            ++i;\n', '        }\n', '    }\n', '\n', '    \n', '    function withdraw() public {\n', '        uint remain = remainEther[msg.sender]; \n', '        require(remain > 0);\n', '        remainEther[msg.sender] = 0;\n', '\n', '        msg.sender.transfer(remain);\n', '    }\n', '\n', '    \n', '    function withdrawMinerFee() public onlyOwner {\n', '        require(amountEther > 0);\n', '        owner.transfer(amountEther);\n', '        amountEther = 0;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function setJewelContract(address jewel) public onlyOwner {\n', '        jewelContract = Jewel(jewel);\n', '    }\n', '\n', '    function incise(uint256 value) public returns (uint) {\n', '        require(jewelContract != address(0));\n', '\n', '        uint256 balance = balances[msg.sender];\n', '        require(balance >= value);\n', '        uint256 count = (value / (10 ** uint256(decimals)));\n', '        require(count >= 1);\n', '\n', '        uint ret = jewelContract.incise(msg.sender, count);\n', '\n', '        burn(count * 10 ** uint256(decimals));\n', '\n', '        return ret;\n', '    }\n', '}']