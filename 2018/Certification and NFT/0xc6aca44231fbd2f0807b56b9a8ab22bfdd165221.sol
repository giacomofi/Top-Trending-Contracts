['pragma solidity ^0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', '// EnsSubdomainFactory - allows creating and configuring custom ENS subdomains with one contract call.\n', '//\n', '// (c) Radek Ostrowski / https://startonchain.com - The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '/**\n', '* @title EnsRegistry\n', '* @dev Extract of the interface for ENS Registry\n', '*/\n', 'contract EnsRegistry {\n', '\tfunction setOwner(bytes32 node, address owner) public;\n', '\tfunction setSubnodeOwner(bytes32 node, bytes32 label, address owner) public;\n', '\tfunction setResolver(bytes32 node, address resolver) public;\n', '}\n', '\n', '/**\n', '* @title EnsResolver\n', '* @dev Extract of the interface for ENS Resolver\n', '*/\n', 'contract EnsResolver {\n', '\tfunction setAddr(bytes32 node, address addr) public;\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a new owner.\n', '   * @param _owner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _owner) public onlyOwner {\n', '    require(_owner != address(0));\n', '    owner = _owner;\n', '    emit OwnershipTransferred(owner, _owner);\n', '  }\n', '}\n', '\n', '/**\n', '* @title EnsSubdomainFactory\n', '* @dev Allows to create and configure a subdomain for Ethereum ENS in one call.\n', '* After deploying this contract, change the owner of the top level domain you want to use\n', '* to this deployed contract address.\n', '*/\n', 'contract EnsSubdomainFactory is Ownable {\n', '\tEnsRegistry public registry = EnsRegistry(0x314159265dD8dbb310642f98f50C066173C1259b);\n', '\tEnsResolver public resolver = EnsResolver(0x5FfC014343cd971B7eb70732021E26C35B744cc4);\n', '\n', '\tevent SubdomainCreated(bytes32 indexed subdomain, address indexed owner);\n', '\n', '\tconstructor() public {\n', '\t\towner = msg.sender;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev The owner can take away the ownership of any top level domain owned by this contract.\n', '\t*/\n', '\tfunction setDomainOwner(bytes32 _node, address _owner) onlyOwner public {\n', '\t\tregistry.setOwner(_node, _owner);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Allows to create a subdomain, set its resolver and set its target address\n', '\t* @param _node - namehash of parent domain name e.g. namehash("startonchain.eth")\n', '\t* @param _subnode - namehash of sub with parent domain name e.g. namehash("radek.startonchain.eth")\n', '\t* @param _label - hash of subdomain name only e.g. "radek"\n', '\t* @param _owner - address that will become owner of this new subdomain\n', '\t* @param _target - address that this new domain will resolve to\n', '\t*/\n', '\tfunction newSubdomain(bytes32 _node, bytes32 _subnode, bytes32 _label, address _owner, address _target) public {\n', '\t\t//create new subdomain, temporarily this smartcontract is the owner\n', '\t\tregistry.setSubnodeOwner(_node, _label, address(this));\n', '\t\t//set public resolver for this domain\n', '\t\tregistry.setResolver(_subnode, resolver);\n', '\t\t//set the destination address\n', '\t\tresolver.setAddr(_subnode, _target);\n', '\t\t//change the ownership back to requested owner\n', '\t\tregistry.setOwner(_subnode, _owner);\n', '\t\temit SubdomainCreated(_label, _owner);\n', '\t}\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', '// EnsSubdomainFactory - allows creating and configuring custom ENS subdomains with one contract call.\n', '//\n', '// (c) Radek Ostrowski / https://startonchain.com - The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '/**\n', '* @title EnsRegistry\n', '* @dev Extract of the interface for ENS Registry\n', '*/\n', 'contract EnsRegistry {\n', '\tfunction setOwner(bytes32 node, address owner) public;\n', '\tfunction setSubnodeOwner(bytes32 node, bytes32 label, address owner) public;\n', '\tfunction setResolver(bytes32 node, address resolver) public;\n', '}\n', '\n', '/**\n', '* @title EnsResolver\n', '* @dev Extract of the interface for ENS Resolver\n', '*/\n', 'contract EnsResolver {\n', '\tfunction setAddr(bytes32 node, address addr) public;\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a new owner.\n', '   * @param _owner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _owner) public onlyOwner {\n', '    require(_owner != address(0));\n', '    owner = _owner;\n', '    emit OwnershipTransferred(owner, _owner);\n', '  }\n', '}\n', '\n', '/**\n', '* @title EnsSubdomainFactory\n', '* @dev Allows to create and configure a subdomain for Ethereum ENS in one call.\n', '* After deploying this contract, change the owner of the top level domain you want to use\n', '* to this deployed contract address.\n', '*/\n', 'contract EnsSubdomainFactory is Ownable {\n', '\tEnsRegistry public registry = EnsRegistry(0x314159265dD8dbb310642f98f50C066173C1259b);\n', '\tEnsResolver public resolver = EnsResolver(0x5FfC014343cd971B7eb70732021E26C35B744cc4);\n', '\n', '\tevent SubdomainCreated(bytes32 indexed subdomain, address indexed owner);\n', '\n', '\tconstructor() public {\n', '\t\towner = msg.sender;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev The owner can take away the ownership of any top level domain owned by this contract.\n', '\t*/\n', '\tfunction setDomainOwner(bytes32 _node, address _owner) onlyOwner public {\n', '\t\tregistry.setOwner(_node, _owner);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Allows to create a subdomain, set its resolver and set its target address\n', '\t* @param _node - namehash of parent domain name e.g. namehash("startonchain.eth")\n', '\t* @param _subnode - namehash of sub with parent domain name e.g. namehash("radek.startonchain.eth")\n', '\t* @param _label - hash of subdomain name only e.g. "radek"\n', '\t* @param _owner - address that will become owner of this new subdomain\n', '\t* @param _target - address that this new domain will resolve to\n', '\t*/\n', '\tfunction newSubdomain(bytes32 _node, bytes32 _subnode, bytes32 _label, address _owner, address _target) public {\n', '\t\t//create new subdomain, temporarily this smartcontract is the owner\n', '\t\tregistry.setSubnodeOwner(_node, _label, address(this));\n', '\t\t//set public resolver for this domain\n', '\t\tregistry.setResolver(_subnode, resolver);\n', '\t\t//set the destination address\n', '\t\tresolver.setAddr(_subnode, _target);\n', '\t\t//change the ownership back to requested owner\n', '\t\tregistry.setOwner(_subnode, _owner);\n', '\t\temit SubdomainCreated(_label, _owner);\n', '\t}\n', '}']
