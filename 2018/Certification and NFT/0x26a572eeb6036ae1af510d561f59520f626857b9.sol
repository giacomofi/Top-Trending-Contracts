['pragma solidity 0.4.24;\n', '// produced by the Solididy File Flattener (c) David Appleton 2018\n', '// contact : <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="9bfffaedfedbfaf0f4f6f9fab5f8f4f6">[email&#160;protected]</a>\n', '// released under Apache 2.0 licence\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Relay is Ownable {\n', '    address public licenseSalesContractAddress;\n', '    address public registryContractAddress;\n', '    address public apiRegistryContractAddress;\n', '    address public apiCallsContractAddress;\n', '    uint public version;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor, establishes ownership because contract is owned\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        version = 4;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens (just in case)\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Sets the license sales contract address\n', '    // ------------------------------------------------------------------------\n', '    function setLicenseSalesContractAddress(address newAddress) public onlyOwner {\n', '        require(newAddress != address(0));\n', '        licenseSalesContractAddress = newAddress;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Sets the registry contract address\n', '    // ------------------------------------------------------------------------\n', '    function setRegistryContractAddress(address newAddress) public onlyOwner {\n', '        require(newAddress != address(0));\n', '        registryContractAddress = newAddress;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Sets the api registry contract address\n', '    // ------------------------------------------------------------------------\n', '    function setApiRegistryContractAddress(address newAddress) public onlyOwner {\n', '        require(newAddress != address(0));\n', '        apiRegistryContractAddress = newAddress;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Sets the api calls contract address\n', '    // ------------------------------------------------------------------------\n', '    function setApiCallsContractAddress(address newAddress) public onlyOwner {\n', '        require(newAddress != address(0));\n', '        apiCallsContractAddress = newAddress;\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '// produced by the Solididy File Flattener (c) David Appleton 2018\n', '// contact : dave@akomba.com\n', '// released under Apache 2.0 licence\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Relay is Ownable {\n', '    address public licenseSalesContractAddress;\n', '    address public registryContractAddress;\n', '    address public apiRegistryContractAddress;\n', '    address public apiCallsContractAddress;\n', '    uint public version;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor, establishes ownership because contract is owned\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        version = 4;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens (just in case)\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Sets the license sales contract address\n', '    // ------------------------------------------------------------------------\n', '    function setLicenseSalesContractAddress(address newAddress) public onlyOwner {\n', '        require(newAddress != address(0));\n', '        licenseSalesContractAddress = newAddress;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Sets the registry contract address\n', '    // ------------------------------------------------------------------------\n', '    function setRegistryContractAddress(address newAddress) public onlyOwner {\n', '        require(newAddress != address(0));\n', '        registryContractAddress = newAddress;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Sets the api registry contract address\n', '    // ------------------------------------------------------------------------\n', '    function setApiRegistryContractAddress(address newAddress) public onlyOwner {\n', '        require(newAddress != address(0));\n', '        apiRegistryContractAddress = newAddress;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Sets the api calls contract address\n', '    // ------------------------------------------------------------------------\n', '    function setApiCallsContractAddress(address newAddress) public onlyOwner {\n', '        require(newAddress != address(0));\n', '        apiCallsContractAddress = newAddress;\n', '    }\n', '}']
