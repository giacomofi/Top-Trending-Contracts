['//\n', '//                    %(/************/#&\n', '//               (**,                 ,**/#\n', '//            %/*,                        **(&\n', '//          (*,                              //%\n', '//        %*,                                  /(\n', '//       (*      ,************************/      /*%\n', '//      //         /(                  (/,        ,/%\n', '//     (*           //(               //            /%\n', '//    //             */%             //             //\n', '//    /*         (((((///(((( ((((((//(((((,         /(\n', '//    /           ,/%   //        (/    /*           //\n', '//    /             //   //(    %//   (/*            ,/\n', '//    /              //   ,/%   //   (/,             (/\n', '//    /             %(//%   / //    ///(             //\n', '//    //          %(/, ,/(   /   %//  //(           /(\n', '//    (/         (//     /#      (/,     //(        (/\n', '//     ((     %(/,        (/    (/,        //(      /,\n', '//      ((    /,           *(*#(/            /*   %/,\n', '//      /((                 /*((                 ((/\n', '//        *(%                                  #(\n', '//          ((%                              #(,\n', '//            *((%                        #((,\n', '//               (((%                   ((/\n', '//                   *(((###*#&%###((((*\n', '//\n', '//\n', '//                       GORGONA.IO\n', '//\n', '// Earn on investment 3% daily!\n', '// Receive your 3% cash-back when invest with referrer!\n', '// Earn 3% from each referral deposit!\n', '//\n', '//\n', '// HOW TO TAKE PARTICIPANT:\n', '// Just send ETH to contract address (min. 0.01 ETH)\n', '//\n', '//\n', '// HOW TO RECEIVE MY DIVIDENDS?\n', '// Send 0 ETH to contract. No limits.\n', '//\n', '//\n', '// INTEREST\n', '// IF contract balance > 0 ETH = 3% per day\n', '// IF contract balance > 1000 ETH = 2% per day\n', '// IF contract balance > 4000 ETH = 1% per day\n', '//\n', '//\n', '// DO NOT HOLD YOUR DIVIDENDS ON CONTRACT ACCOUNT!\n', '// Max one-time payout is your dividends for 3 days of work.\n', '// It would be better if your will request your dividends each day.\n', '//\n', '// For more information visit https://gorgona.io/\n', '//\n', '// Telegram chat (ru): https://t.me/gorgona_io\n', '// Telegram chat (en): https://t.me/gorgona_io_en\n', '//\n', '// For support and requests telegram: @alex_gorgona_io\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '// service which controls amount of investments per day\n', '// this service does not allow fast grow!\n', 'library GrowingControl {\n', '    using GrowingControl for data;\n', '\n', '    // base structure for control investments per day\n', '    struct data {\n', '        uint min;\n', '        uint max;\n', '\n', '        uint startAt;\n', '        uint maxAmountPerDay;\n', '        mapping(uint => uint) investmentsPerDay;\n', '    }\n', '\n', '    // increase day investments\n', '    function addInvestment(data storage control, uint amount) internal\n', '    {\n', '        control.investmentsPerDay[getCurrentDay()] += amount;\n', '    }\n', '\n', '    // get today current max investment\n', '    function getMaxInvestmentToday(data storage control) internal view returns (uint)\n', '    {\n', '        if (control.startAt == 0) {\n', '            return 10000 ether; // disabled controlling, allow 10000 eth\n', '        }\n', '\n', '        if (control.startAt > now) {\n', '            return 10000 ether; // not started, allow 10000 eth\n', '        }\n', '\n', '        return control.maxAmountPerDay - control.getTodayInvestment();\n', '    }\n', '\n', '    function getCurrentDay() internal view returns (uint)\n', '    {\n', '        return now / 24 hours;\n', '    }\n', '\n', '    // get amount of today investments\n', '    function getTodayInvestment(data storage control) internal view returns (uint)\n', '    {\n', '        return control.investmentsPerDay[getCurrentDay()];\n', '    }\n', '}\n', '\n', '\n', '// in the first days investments are allowed only for investors from Gorgona.v1\n', '// if you was a member of Gorgona.v1, you can invest\n', 'library PreEntrance {\n', '    using PreEntrance for data;\n', '\n', '    struct data {\n', '        mapping(address => bool) members;\n', '\n', '        uint from;\n', '        uint to;\n', '        uint cnt;\n', '    }\n', '\n', '    function isActive(data storage preEntrance) internal view returns (bool)\n', '    {\n', '        if (now < preEntrance.from) {\n', '            return false;\n', '        }\n', '\n', '        if (now > preEntrance.to) {\n', '            return false;\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    // add new allowed to invest member\n', '    function add(data storage preEntrance, address[] addr) internal\n', '    {\n', '        for (uint i = 0; i < addr.length; i++) {\n', '            preEntrance.members[addr[i]] = true;\n', '            preEntrance.cnt ++;\n', '        }\n', '    }\n', '\n', '    // check that addr is a member\n', '    function isMember(data storage preEntrance, address addr) internal view returns (bool)\n', '    {\n', '        return preEntrance.members[addr];\n', '    }\n', '}\n', '\n', 'contract Gorgona {\n', '    using GrowingControl for GrowingControl.data;\n', '    using PreEntrance for PreEntrance.data;\n', '\n', '    // contract owner, must be 0x0000000000000000000,\n', '    // use Read Contract tab to check it!\n', '    address public owner;\n', '\n', '    uint constant public MINIMUM_INVEST = 10000000000000000 wei;\n', '\n', '    // current interest\n', '    uint public currentInterest = 3;\n', '\n', '    // total deposited eth\n', '    uint public depositAmount;\n', '\n', '    // total paid out eth\n', '    uint public paidAmount;\n', '\n', '    // current round (restart)\n', '    uint public round = 1;\n', '\n', '    // last investment date\n', '    uint public lastPaymentDate;\n', '\n', '    // fee for advertising purposes\n', '    uint public advertFee = 10;\n', '\n', '    // project admins fee\n', '    uint public devFee = 5;\n', '\n', '    // maximum profit per investor (x2)\n', '    uint public profitThreshold = 2;\n', '\n', '    // addr of project admins (not owner of the contract)\n', '    address public devAddr;\n', '\n', '    // advert addr\n', '    address public advertAddr;\n', '\n', '    // investors addresses\n', '    address[] public addresses;\n', '\n', '    // mapping address to Investor\n', '    mapping(address => Investor) public investors;\n', '\n', '    // currently on restart phase or not?\n', '    bool public pause;\n', '\n', '    // Perseus structure\n', '    struct Perseus {\n', '        address addr;\n', '        uint deposit;\n', '        uint from;\n', '    }\n', '\n', '    // Investor structure\n', '    struct Investor\n', '    {\n', '        uint id;\n', '        uint deposit; // deposit amount\n', '        uint deposits; // deposits count\n', '        uint paidOut; // total paid out\n', '        uint date; // last date of investment or paid out\n', '        address referrer;\n', '    }\n', '\n', '    event Invest(address indexed addr, uint amount, address referrer);\n', '    event Payout(address indexed addr, uint amount, string eventType, address from);\n', '    event NextRoundStarted(uint indexed round, uint date, uint deposit);\n', '    event PerseusUpdate(address addr, string eventType);\n', '\n', '    Perseus public perseus;\n', '    GrowingControl.data private growingControl;\n', '    PreEntrance.data private preEntrance;\n', '\n', '    // only contract creator access\n', '    modifier onlyOwner {if (msg.sender == owner) _;}\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        devAddr = msg.sender;\n', '\n', '        addresses.length = 1;\n', '\n', '        // set bounces for growingControl service\n', '        growingControl.min = 30 ether;\n', '        growingControl.max = 500 ether;\n', '    }\n', '\n', '    // change advert address, only admin access (works before ownership resignation)\n', '    function setAdvertAddr(address addr) onlyOwner public {\n', '        advertAddr = addr;\n', '    }\n', '\n', '    // change owner, only admin access (works before ownership resignation)\n', '    function transferOwnership(address addr) onlyOwner public {\n', '        owner = addr;\n', '    }\n', '\n', '    // set date which enables control of growing function (limitation of investments per day)\n', '    function setGrowingControlStartAt(uint startAt) onlyOwner public {\n', '        growingControl.startAt = startAt;\n', '    }\n', '\n', '    function getGrowingControlStartAt() public view returns (uint) {\n', '        return growingControl.startAt;\n', '    }\n', '\n', '    // set max of investments per day. Only devAddr have access to this function\n', '    function setGrowingMaxPerDay(uint maxAmountPerDay) public {\n', '        require(maxAmountPerDay >= growingControl.min && maxAmountPerDay <= growingControl.max, "incorrect amount");\n', '        require(msg.sender == devAddr, "Only dev team have access to this function");\n', '        growingControl.maxAmountPerDay = maxAmountPerDay;\n', '    }\n', '\n', '    // add members to  PreEntrance, only these addresses will be allowed to invest in the first days\n', '    function addPreEntranceMembers(address[] addr, uint from, uint to) onlyOwner public\n', '    {\n', '        preEntrance.from = from;\n', '        preEntrance.to = to;\n', '        preEntrance.add(addr);\n', '    }\n', '\n', '    function getPreEntranceFrom() public view returns (uint)\n', '    {\n', '        return preEntrance.from;\n', '    }\n', '\n', '    function getPreEntranceTo() public view returns (uint)\n', '    {\n', '        return preEntrance.to;\n', '    }\n', '\n', '    function getPreEntranceMemberCount() public view returns (uint)\n', '    {\n', '        return preEntrance.cnt;\n', '    }\n', '\n', '    // main function, which accept new investments and do dividends payouts\n', '    // if you send 0 ETH to this function, you will receive your dividends\n', '    function() payable public {\n', '\n', '        // ensure that payment not from contract\n', '        if (isContract()) {\n', '            revert();\n', '        }\n', '\n', '        // if contract is on restarting phase - do some work before restart\n', '        if (pause) {\n', '            doRestart();\n', '            msg.sender.transfer(msg.value); // return all money to sender\n', '\n', '            return;\n', '        }\n', '\n', '        if (0 == msg.value) {\n', '            payDividends(); // do pay out\n', '            return;\n', '        }\n', '\n', '        // if it is currently preEntrance phase\n', '        if (preEntrance.isActive()) {\n', '            require(preEntrance.isMember(msg.sender), "Only predefined members can make deposit");\n', '        }\n', '\n', '        require(msg.value >= MINIMUM_INVEST, "Too small amount, minimum 0.01 ether");\n', '        Investor storage user = investors[msg.sender];\n', '\n', '        if (user.id == 0) { // if no saved address, save it\n', '            user.id = addresses.push(msg.sender);\n', '            user.date = now;\n', '\n', '            // check referrer\n', '            address referrer = bytesToAddress(msg.data);\n', '            if (investors[referrer].deposit > 0 && referrer != msg.sender) {\n', '                user.referrer = referrer;\n', '            }\n', '        } else {\n', '            payDividends(); // else pay dividends before reinvest\n', '        }\n', '\n', '        // get max investment amount for the current day, according to sent amount\n', '        // all excesses will be returned to sender later\n', '        uint investment = min(growingControl.getMaxInvestmentToday(), msg.value);\n', '        require(investment > 0, "Too much investments today");\n', '\n', '        // update investor\n', '        user.deposit += investment;\n', '        user.deposits += 1;\n', '\n', '        emit Invest(msg.sender, investment, user.referrer);\n', '\n', '        depositAmount += investment;\n', '        lastPaymentDate = now;\n', '\n', '\n', '        if (devAddr.send(investment / 100 * devFee)) {\n', '            // project fee\n', '        }\n', '\n', '        if (advertAddr.send(investment / 100 * advertFee)) {\n', '            // advert fee\n', '        }\n', '\n', '        // referrer commission for all deposits\n', '        uint bonusAmount = investment / 100 * currentInterest;\n', '\n', '        // user have referrer\n', '        if (user.referrer > 0x0) {\n', '            if (user.referrer.send(bonusAmount)) { // pay referrer commission\n', '                emit Payout(user.referrer, bonusAmount, "referral", msg.sender);\n', '            }\n', '\n', '            if (user.deposits == 1) { // only the first deposit cashback\n', '                if (msg.sender.send(bonusAmount)) {\n', '                    emit Payout(msg.sender, bonusAmount, "cash-back", 0);\n', '                }\n', '            }\n', '        } else if (perseus.addr > 0x0 && perseus.from + 24 hours > now) { // if investor does not have referrer, Perseus takes the bonus\n', '            // also check Perseus is active\n', '            if (perseus.addr.send(bonusAmount)) { // pay bonus to current Perseus\n', '                emit Payout(perseus.addr, bonusAmount, "perseus", msg.sender);\n', '            }\n', '        }\n', '\n', '        // check and maybe update current interest rate\n', '        considerCurrentInterest();\n', '        // add investment to the growingControl service\n', '        growingControl.addInvestment(investment);\n', '        // Perseus has changed? do some checks\n', '        considerPerseus(investment);\n', '\n', '        // return excess eth (if growingControl is active)\n', '        if (msg.value > investment) {\n', '            msg.sender.transfer(msg.value - investment);\n', '        }\n', '    }\n', '\n', '    function getTodayInvestment() view public returns (uint)\n', '    {\n', '        return growingControl.getTodayInvestment();\n', '    }\n', '\n', '    function getMaximumInvestmentPerDay() view public returns (uint)\n', '    {\n', '        return growingControl.maxAmountPerDay;\n', '    }\n', '\n', '    function payDividends() private {\n', '        require(investors[msg.sender].id > 0, "Investor not found");\n', '        uint amount = getInvestorDividendsAmount(msg.sender);\n', '\n', '        if (amount == 0) {\n', '            return;\n', '        }\n', '\n', '        // save last paid out date\n', '        investors[msg.sender].date = now;\n', '\n', '        // save total paid out for investor\n', '        investors[msg.sender].paidOut += amount;\n', '\n', '        // save total paid out for contract\n', '        paidAmount += amount;\n', '\n', '        uint balance = address(this).balance;\n', '\n', '        // check contract balance, if not enough - do restart\n', '        if (balance < amount) {\n', '            pause = true;\n', '            amount = balance;\n', '        }\n', '\n', '        msg.sender.transfer(amount);\n', '        emit Payout(msg.sender, amount, "payout", 0);\n', '\n', '        // if investor has reached the limit (x2 profit) - delete him\n', '        if (investors[msg.sender].paidOut >= investors[msg.sender].deposit * profitThreshold) {\n', '            delete investors[msg.sender];\n', '        }\n', '    }\n', '\n', '    // remove all investors and prepare data for the new round!\n', '    function doRestart() private {\n', '        uint txs;\n', '\n', '        for (uint i = addresses.length - 1; i > 0; i--) {\n', '            delete investors[addresses[i]]; // remove investor\n', '            addresses.length -= 1; // decrease addr length\n', '            if (txs++ == 150) { // stop on 150 investors (to prevent out of gas exception)\n', '                return;\n', '            }\n', '        }\n', '\n', '        emit NextRoundStarted(round, now, depositAmount);\n', '        pause = false; // stop pause, play\n', '        round += 1; // increase round number\n', '        depositAmount = 0;\n', '        paidAmount = 0;\n', '        lastPaymentDate = now;\n', '    }\n', '\n', '    function getInvestorCount() public view returns (uint) {\n', '        return addresses.length - 1;\n', '    }\n', '\n', '    function considerCurrentInterest() internal\n', '    {\n', '        uint interest;\n', '\n', '        // if balance is over 4k ETH - set interest rate for 1%\n', '        if (depositAmount >= 4000 ether) {\n', '            interest = 1;\n', '        } else if (depositAmount >= 1000 ether) { // if balance is more than 1k ETH - set interest rate for 2%\n', '            interest = 2;\n', '        } else {\n', '            interest = 3; // base = 3%\n', '        }\n', '\n', '        // if interest has not changed, return\n', '        if (interest >= currentInterest) {\n', '            return;\n', '        }\n', '\n', '        currentInterest = interest;\n', '    }\n', '\n', '    // Perseus!\n', '    // make the biggest investment today - and receive ref-commissions from ALL investors who not have a referrer in the next 24h\n', '    function considerPerseus(uint amount) internal {\n', '        // if current Perseus dead, delete him\n', '        if (perseus.addr > 0x0 && perseus.from + 24 hours < now) {\n', '            perseus.addr = 0x0;\n', '            perseus.deposit = 0;\n', '            emit PerseusUpdate(msg.sender, "expired");\n', '        }\n', '\n', '        // if the investment bigger than current Perseus made - change Perseus\n', '        if (amount > perseus.deposit) {\n', '            perseus = Perseus(msg.sender, amount, now);\n', '            emit PerseusUpdate(msg.sender, "change");\n', '        }\n', '    }\n', '\n', '    // calculate total dividends for investor from the last investment/payout date\n', '    // be careful  - max. one-time amount can cover 3 days of work\n', '    function getInvestorDividendsAmount(address addr) public view returns (uint) {\n', '        uint time = min(now - investors[addr].date, 3 days);\n', '        return investors[addr].deposit / 100 * currentInterest * time / 1 days;\n', '    }\n', '\n', '    function bytesToAddress(bytes bys) private pure returns (address addr) {\n', '        assembly {\n', '            addr := mload(add(bys, 20))\n', '        }\n', '    }\n', '\n', '    // check that there is no contract in the middle\n', '    function isContract() internal view returns (bool) {\n', '        return msg.sender != tx.origin;\n', '    }\n', '\n', '    // get min value from a and b\n', '    function min(uint a, uint b) public pure returns (uint) {\n', '        if (a < b) return a;\n', '        else return b;\n', '    }\n', '}']