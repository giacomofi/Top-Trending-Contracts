['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20NoReturn {\n', '    uint256 public decimals;\n', '    string public name;\n', '    string public symbol;\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public;\n', '    function approve(address spender, uint tokens) public;\n', '    function transferFrom(address from, address to, uint tokens) public;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract ERC20Extended is ERC20 {\n', '    uint256 public decimals;\n', '    string public name;\n', '    string public symbol;\n', '\n', '}\n', '\n', 'contract OlympusExchangeAdapterManagerInterface is Ownable {\n', '    function pickExchange(ERC20Extended _token, uint _amount, uint _rate, bool _isBuying) public view returns (bytes32 exchangeId);\n', '    function supportsTradingPair(address _srcAddress, address _destAddress, bytes32 _exchangeId) external view returns(bool supported);\n', '    function getExchangeAdapter(bytes32 _exchangeId) external view returns(address);\n', '    function isValidAdapter(address _adapter) external view returns(bool);\n', '    function getPrice(ERC20Extended _sourceAddress, ERC20Extended _destAddress, uint _amount, bytes32 _exchangeId)\n', '        external view returns(uint expectedRate, uint slippageRate);\n', '}\n', '\n', 'library Utils {\n', '\n', '    uint  constant PRECISION = (10**18);\n', '    uint  constant MAX_DECIMALS = 18;\n', '\n', '    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        if( dstDecimals >= srcDecimals ) {\n', '            require((dstDecimals-srcDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate * (10**(dstDecimals-srcDecimals))) / PRECISION;\n', '        } else {\n', '            require((srcDecimals-dstDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate) / (PRECISION * (10**(srcDecimals-dstDecimals)));\n', '        }\n', '    }\n', '\n', '    // function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '    //     if( srcDecimals >= dstDecimals ) {\n', '    //         require((srcDecimals-dstDecimals) <= MAX_DECIMALS);\n', '    //         return (PRECISION * dstQty * (10**(srcDecimals - dstDecimals))) / rate;\n', '    //     } else {\n', '    //         require((dstDecimals-srcDecimals) <= MAX_DECIMALS);\n', '    //         return (PRECISION * dstQty) / (rate * (10**(dstDecimals - srcDecimals)));\n', '    //     }\n', '    // }\n', '}\n', '\n', 'contract ComponentInterface {\n', '    string public name;\n', '    string public description;\n', '    string public category;\n', '    string public version;\n', '}\n', '\n', 'contract ExchangeInterface is ComponentInterface {\n', '    /*\n', '     * @dev Checks if a trading pair is available\n', '     * For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n', '     * @param address _sourceAddress The token to sell for the destAddress.\n', '     * @param address _destAddress The token to buy with the source token.\n', '     * @param bytes32 _exchangeId The exchangeId to choose. If it&#39;s an empty string, then the exchange will be chosen automatically.\n', '     * @return boolean whether or not the trading pair is supported by this exchange provider\n', '     */\n', '    function supportsTradingPair(address _srcAddress, address _destAddress, bytes32 _exchangeId)\n', '        external view returns(bool supported);\n', '\n', '    /*\n', '     * @dev Buy a single token with ETH.\n', '     * @param ERC20Extended _token The token to buy, should be an ERC20Extended address.\n', '     * @param uint _amount Amount of ETH used to buy this token. Make sure the value sent to this function is the same as the _amount.\n', '     * @param uint _minimumRate The minimum amount of tokens to receive for 1 ETH.\n', '     * @param address _depositAddress The address to send the bought tokens to.\n', '     * @param bytes32 _exchangeId The exchangeId to choose. If it&#39;s an empty string, then the exchange will be chosen automatically.\n', '     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here.\n', '     * @return boolean whether or not the trade succeeded.\n', '     */\n', '    function buyToken\n', '        (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress, bytes32 _exchangeId, address _partnerId\n', '        ) external payable returns(bool success);\n', '\n', '    /*\n', '     * @dev Sell a single token for ETH. Make sure the token is approved beforehand.\n', '     * @param ERC20Extended _token The token to sell, should be an ERC20Extended address.\n', '     * @param uint _amount Amount of tokens to sell.\n', '     * @param uint _minimumRate The minimum amount of ETH to receive for 1 ERC20Extended token.\n', '     * @param address _depositAddress The address to send the bought tokens to.\n', '     * @param bytes32 _exchangeId The exchangeId to choose. If it&#39;s an empty string, then the exchange will be chosen automatically.\n', '     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here\n', '     * @return boolean boolean whether or not the trade succeeded.\n', '     */\n', '    function sellToken\n', '        (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress, bytes32 _exchangeId, address _partnerId\n', '        ) external returns(bool success);\n', '}\n', '\n', 'contract KyberNetworkInterface {\n', '\n', '    function getExpectedRate(ERC20Extended src, ERC20Extended dest, uint srcQty)\n', '        external view returns (uint expectedRate, uint slippageRate);\n', '\n', '    function trade(\n', '        ERC20Extended source,\n', '        uint srcAmount,\n', '        ERC20Extended dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId)\n', '        external payable returns(uint);\n', '}\n', '\n', 'contract OlympusExchangeAdapterInterface is Ownable {\n', '\n', '    function supportsTradingPair(address _srcAddress, address _destAddress)\n', '        external view returns(bool supported);\n', '\n', '    function getPrice(ERC20Extended _sourceAddress, ERC20Extended _destAddress, uint _amount)\n', '        external view returns(uint expectedRate, uint slippageRate);\n', '\n', '    function sellToken\n', '        (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress\n', '        ) external returns(bool success);\n', '\n', '    function buyToken\n', '        (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress\n', '        ) external payable returns(bool success);\n', '\n', '    function enable() external returns(bool);\n', '    function disable() external returns(bool);\n', '    function isEnabled() external view returns (bool success);\n', '\n', '    function setExchangeDetails(bytes32 _id, bytes32 _name) external returns(bool success);\n', '    function getExchangeDetails() external view returns(bytes32 _name, bool _enabled);\n', '\n', '}\n', '\n', 'contract PriceProviderInterface is ComponentInterface {\n', '    /*\n', '     * @dev Returns the expected price for 1 of sourceAddress.\n', '     * For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n', '     * @param address _sourceAddress The token to sell for the destAddress.\n', '     * @param address _destAddress The token to buy with the source token.\n', '     * @param uint _amount The amount of tokens which is wanted to buy.\n', '     * @param bytes32 _exchangeId The exchangeId to choose. If it&#39;s an empty string, then the exchange will be chosen automatically.\n', '     * @return returns the expected and slippage rate for the specified conversion\n', '     */\n', '    function getPrice(ERC20Extended _sourceAddress, ERC20Extended _destAddress, uint _amount, bytes32 _exchangeId)\n', '        external view returns(uint expectedRate, uint slippageRate);\n', '}\n', '\n', 'contract OlympusExchangeInterface is ExchangeInterface, PriceProviderInterface, Ownable {\n', '    /*\n', '     * @dev Buy multiple tokens at once with ETH.\n', '     * @param ERC20Extended[] _tokens The tokens to buy, should be an array of ERC20Extended addresses.\n', '     * @param uint[] _amounts Amount of ETH used to buy this token. Make sure the value sent to this function is the same as the sum of this array.\n', '     * @param uint[] _minimumRates The minimum amount of tokens to receive for 1 ETH.\n', '     * @param address _depositAddress The address to send the bought tokens to.\n', '     * @param bytes32 _exchangeId The exchangeId to choose. If it&#39;s an empty string, then the exchange will be chosen automatically.\n', '     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here\n', '     * @return boolean boolean whether or not the trade succeeded.\n', '     */\n', '    function buyTokens\n', '        (\n', '        ERC20Extended[] _tokens, uint[] _amounts, uint[] _minimumRates,\n', '        address _depositAddress, bytes32 _exchangeId, address _partnerId\n', '        ) external payable returns(bool success);\n', '\n', '    /*\n', '     * @dev Sell multiple tokens at once with ETH, make sure all of the tokens are approved to be transferred beforehand with the Olympus Exchange address.\n', '     * @param ERC20Extended[] _tokens The tokens to sell, should be an array of ERC20Extended addresses.\n', '     * @param uint[] _amounts Amount of tokens to sell this token. Make sure the value sent to this function is the same as the sum of this array.\n', '     * @param uint[] _minimumRates The minimum amount of ETH to receive for 1 specified ERC20Extended token.\n', '     * @param address _depositAddress The address to send the bought tokens to.\n', '     * @param bytes32 _exchangeId The exchangeId to choose. If it&#39;s an empty string, then the exchange will be chosen automatically.\n', '     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here\n', '     * @return boolean boolean whether or not the trade succeeded.\n', '     */\n', '    function sellTokens\n', '        (\n', '        ERC20Extended[] _tokens, uint[] _amounts, uint[] _minimumRates,\n', '        address _depositAddress, bytes32 _exchangeId, address _partnerId\n', '        ) external returns(bool success);\n', '}\n', '\n', 'contract ComponentContainerInterface {\n', '    mapping (string => address) components;\n', '\n', '    event ComponentUpdated (string _name, address _componentAddress);\n', '\n', '    function setComponent(string _name, address _providerAddress) internal returns (bool success);\n', '    function getComponentByName(string name) public view returns (address);\n', '\n', '}\n', '\n', 'contract DerivativeInterface is ERC20Extended, Ownable, ComponentContainerInterface {\n', '\n', '    enum DerivativeStatus { New, Active, Paused, Closed }\n', '    enum DerivativeType { Index, Fund }\n', '\n', '    string public description;\n', '    string public category;\n', '    string public version;\n', '    DerivativeType public fundType;\n', '\n', '    address[] public tokens;\n', '    DerivativeStatus public status;\n', '\n', '    // invest, withdraw is done in transfer.\n', '    function invest() public payable returns(bool success);\n', '    function changeStatus(DerivativeStatus _status) public returns(bool);\n', '    function getPrice() public view returns(uint);\n', '}\n', '\n', 'contract FeeChargerInterface {\n', '    // TODO: change this to mainnet MOT address before deployment.\n', '    // solhint-disable-next-line\n', '    ERC20Extended public MOT = ERC20Extended(0x263c618480DBe35C300D8d5EcDA19bbB986AcaeD);\n', '    // kovan MOT: 0x41Dee9F481a1d2AA74a3f1d0958C1dB6107c686A\n', '}\n', '\n', 'contract FeeCharger is Ownable, FeeChargerInterface {\n', '    using SafeMath for uint256;\n', '\n', '    FeeMode public feeMode = FeeMode.ByCalls;\n', '    uint public feePercentage = 0;\n', '    uint public feeAmount = 0;\n', '    uint constant public FEE_CHARGER_DENOMINATOR = 10000;\n', '    address private olympusWallet = 0x09227deaeE08a5Ba9D6Eb057F922aDfAd191c36c;\n', '    bool private isPaying = false;\n', '\n', '    enum FeeMode {\n', '        ByTransactionAmount,\n', '        ByCalls\n', '    }\n', '\n', '    modifier feePayable(uint _amount) {\n', '      uint fee = calculateFee(_amount);\n', '      DerivativeInterface derivative = DerivativeInterface(msg.sender);\n', '      // take money directly from the derivative.\n', '      require(MOT.balanceOf(address(derivative)) >= fee);\n', '      require(MOT.allowance(address(derivative), address(this)) >= fee);\n', '      _;\n', '    }\n', '\n', '    function calculateFee(uint _amount) public view returns (uint amount) {\n', '        uint fee;\n', '        if (feeMode == FeeMode.ByTransactionAmount) {\n', '            fee = _amount * feePercentage / FEE_CHARGER_DENOMINATOR;\n', '        } else if (feeMode == FeeMode.ByCalls) {\n', '            fee = feeAmount;\n', '        } else {\n', '          revert("Unsupported fee mode.");\n', '        }\n', '\n', '        return fee;\n', '    }    \n', '\n', '    function adjustFeeMode(FeeMode _newMode) external onlyOwner returns (bool success) {\n', '        feeMode = _newMode;\n', '        return true;\n', '    }\n', '\n', '    function adjustFeeAmount(uint _newAmount) external onlyOwner returns (bool success) {\n', '        feeAmount = _newAmount;\n', '        return true;\n', '    }    \n', '\n', '    function adjustFeePercentage(uint _newPercentage) external onlyOwner returns (bool success) {\n', '        require(_newPercentage <= FEE_CHARGER_DENOMINATOR);\n', '        feePercentage = _newPercentage;\n', '        return true;\n', '    }    \n', '\n', '    function setWalletId(address _newWallet) external onlyOwner returns (bool success) {\n', '        require(_newWallet != 0x0);\n', '        olympusWallet = _newWallet;\n', '        return true;\n', '    }\n', '\n', '    function setMotAddress(address _motAddress) external onlyOwner returns (bool success) {\n', '        require(_motAddress != 0x0);\n', '        require(_motAddress != address(MOT));\n', '        MOT = ERC20Extended(_motAddress);\n', '        // this is only and will always be MOT.\n', '        require(keccak256(abi.encodePacked(MOT.symbol())) == keccak256(abi.encodePacked("MOT")));\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    /*\n', '     * @dev Pay the fee for the call / transaction.\n', '     * Depending on the component itself, the fee is paid differently.\n', '     * @param uint _amountinMot The base amount in MOT, calculation should be one outside. \n', '     * this is only used when the fee mode is by transaction amount. leave it to zero if fee mode is\n', '     * by calls.\n', '     * @return boolean whether or not the fee is paid.\n', '     */\n', '    function payFee(uint _amountInMOT) internal feePayable(calculateFee(_amountInMOT)) returns (bool success) {\n', '        uint _feeAmount = calculateFee(_amountInMOT);\n', '\n', '        DerivativeInterface derivative = DerivativeInterface(msg.sender);\n', '\n', '        uint balanceBefore = MOT.balanceOf(olympusWallet);\n', '        require(!isPaying);\n', '        isPaying = true;\n', '        MOT.transferFrom(address(derivative), olympusWallet, _feeAmount);\n', '        isPaying = false;\n', '        uint balanceAfter = MOT.balanceOf(olympusWallet);\n', '\n', '        require(balanceAfter == balanceBefore + _feeAmount);   \n', '        return true;     \n', '    }        \n', '}\n', '\n', 'contract ExchangeProvider is FeeCharger, OlympusExchangeInterface {\n', '    using SafeMath for uint256;\n', '    string public name = "OlympusExchangeProvider";\n', '    string public description =\n', '    "Exchange provider of Olympus Labs, which additionally supports buy\\and sellTokens for multiple tokens at the same time";\n', '    string public category = "exchange";\n', '    string public version = "v1.0";\n', '    ERC20Extended private constant ETH  = ERC20Extended(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '\n', '    OlympusExchangeAdapterManagerInterface private exchangeAdapterManager;\n', '\n', '    constructor(address _exchangeManager) public {\n', '        exchangeAdapterManager = OlympusExchangeAdapterManagerInterface(_exchangeManager);\n', '        feeMode = FeeMode.ByTransactionAmount;\n', '    }\n', '\n', '    modifier checkAllowance(ERC20Extended _token, uint _amount) {\n', '        require(_token.allowance(msg.sender, address(this)) >= _amount, "Not enough tokens approved");\n', '        _;\n', '    }\n', '\n', '    function setExchangeAdapterManager(address _exchangeManager) external onlyOwner {\n', '        exchangeAdapterManager = OlympusExchangeAdapterManagerInterface(_exchangeManager);\n', '    }\n', '\n', '    function buyToken\n', '        (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress, bytes32 _exchangeId, address /* _partnerId */\n', '        ) external payable returns(bool success) {\n', '\n', '        require(msg.value == _amount);\n', '\n', '        OlympusExchangeAdapterInterface adapter;\n', '        // solhint-disable-next-line\n', '        bytes32 exchangeId = _exchangeId == "" ? exchangeAdapterManager.pickExchange(_token, _amount, _minimumRate, true) : _exchangeId;\n', '        if(exchangeId == 0){\n', '            revert("No suitable exchange found");\n', '        }\n', '\n', '        require(payFee(msg.value * getMotPrice(exchangeId) / 10 ** 18));\n', '        adapter = OlympusExchangeAdapterInterface(exchangeAdapterManager.getExchangeAdapter(exchangeId));\n', '        require(\n', '            adapter.buyToken.value(msg.value)(\n', '                _token,\n', '                _amount,\n', '                _minimumRate,\n', '                _depositAddress)\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function sellToken\n', '        (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress, bytes32 _exchangeId, address /* _partnerId */\n', '        ) checkAllowance(_token, _amount) external returns(bool success) {\n', '\n', '        OlympusExchangeAdapterInterface adapter;\n', '        bytes32 exchangeId = _exchangeId == "" ? exchangeAdapterManager.pickExchange(_token, _amount, _minimumRate, false) : _exchangeId;\n', '        if(exchangeId == 0){\n', '            revert("No suitable exchange found");\n', '        }\n', '\n', '        uint tokenPrice;\n', '        (tokenPrice,) = exchangeAdapterManager.getPrice(_token, ETH, _amount, exchangeId);\n', '        require(payFee(tokenPrice  * _amount * getMotPrice(exchangeId) / 10 ** _token.decimals() / 10 ** 18));\n', '\n', '        adapter = OlympusExchangeAdapterInterface(exchangeAdapterManager.getExchangeAdapter(exchangeId));\n', '\n', '        ERC20NoReturn(_token).transferFrom(msg.sender, address(adapter), _amount);\n', '\n', '        require(\n', '            adapter.sellToken(\n', '                _token,\n', '                _amount,\n', '                _minimumRate,\n', '                _depositAddress)\n', '            );\n', '        return true;\n', '    }\n', '\n', '    function getMotPrice(bytes32 _exchangeId) private view returns (uint price) {\n', '        (price,) = exchangeAdapterManager.getPrice(ETH, MOT, msg.value, _exchangeId);\n', '    }\n', '\n', '    function buyTokens\n', '        (\n', '        ERC20Extended[] _tokens, uint[] _amounts, uint[] _minimumRates,\n', '        address _depositAddress, bytes32 _exchangeId, address /* _partnerId */\n', '        ) external payable returns(bool success) {\n', '        require(_tokens.length == _amounts.length && _amounts.length == _minimumRates.length, "Arrays are not the same lengths");\n', '        require(payFee(msg.value * getMotPrice(_exchangeId) / 10 ** 18));\n', '        uint totalValue;\n', '        uint i;\n', '        for(i = 0; i < _amounts.length; i++ ) {\n', '            totalValue += _amounts[i];\n', '        }\n', '        require(totalValue == msg.value, "msg.value is not the same as total value");\n', '\n', '        for (i = 0; i < _tokens.length; i++ ) {\n', '            bytes32 exchangeId = _exchangeId == "" ?\n', '            exchangeAdapterManager.pickExchange(_tokens[i], _amounts[i], _minimumRates[i], true) : _exchangeId;\n', '            if (exchangeId == 0) {\n', '                revert("No suitable exchange found");\n', '            }\n', '            require(\n', '                OlympusExchangeAdapterInterface(exchangeAdapterManager.getExchangeAdapter(exchangeId)).buyToken.value(_amounts[i])(\n', '                    _tokens[i],\n', '                    _amounts[i],\n', '                    _minimumRates[i],\n', '                    _depositAddress)\n', '            );\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function sellTokens\n', '        (\n', '        ERC20Extended[] _tokens, uint[] _amounts, uint[] _minimumRates,\n', '        address _depositAddress, bytes32 _exchangeId, address /* _partnerId */\n', '        ) external returns(bool success) {\n', '        require(_tokens.length == _amounts.length && _amounts.length == _minimumRates.length, "Arrays are not the same lengths");\n', '        OlympusExchangeAdapterInterface adapter;\n', '\n', '        uint[] memory prices = new uint[](3); // 0 tokenPrice, 1 MOT price, 3 totalValueInMOT\n', '        for (uint i = 0; i < _tokens.length; i++ ) {\n', '            bytes32 exchangeId = _exchangeId == bytes32("") ?\n', '            exchangeAdapterManager.pickExchange(_tokens[i], _amounts[i], _minimumRates[i], false) : _exchangeId;\n', '            if(exchangeId == 0){\n', '                revert("No suitable exchange found");\n', '            }\n', '\n', '            (prices[0],) = exchangeAdapterManager.getPrice(_tokens[i], ETH, _amounts[i], exchangeId);\n', '            (prices[1],) = exchangeAdapterManager.getPrice(ETH, MOT, prices[0] * _amounts[i], exchangeId);\n', '            prices[2] += prices[0] * _amounts[i] * prices[1] / 10 ** _tokens[i].decimals() / 10 ** 18;\n', '\n', '            adapter = OlympusExchangeAdapterInterface(exchangeAdapterManager.getExchangeAdapter(exchangeId));\n', '            require(_tokens[i].allowance(msg.sender, address(this)) >= _amounts[i], "Not enough tokens approved");\n', '            ERC20NoReturn(_tokens[i]).transferFrom(msg.sender, address(adapter), _amounts[i]);\n', '            require(\n', '                adapter.sellToken(\n', '                    _tokens[i],\n', '                    _amounts[i],\n', '                    _minimumRates[i],\n', '                    _depositAddress)\n', '            );\n', '        }\n', '\n', '        require(payFee(prices[2]));\n', '\n', '        return true;\n', '    }\n', '\n', '    function supportsTradingPair(address _srcAddress, address _destAddress, bytes32 _exchangeId) external view returns (bool){\n', '        return exchangeAdapterManager.supportsTradingPair(_srcAddress, _destAddress, _exchangeId);\n', '    }\n', '\n', '    function getPrice(ERC20Extended _sourceAddress, ERC20Extended _destAddress, uint _amount, bytes32 _exchangeId)\n', '        external view returns(uint expectedRate, uint slippageRate) {\n', '        return exchangeAdapterManager.getPrice(_sourceAddress, _destAddress, _amount, _exchangeId);\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20NoReturn {\n', '    uint256 public decimals;\n', '    string public name;\n', '    string public symbol;\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public;\n', '    function approve(address spender, uint tokens) public;\n', '    function transferFrom(address from, address to, uint tokens) public;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract ERC20Extended is ERC20 {\n', '    uint256 public decimals;\n', '    string public name;\n', '    string public symbol;\n', '\n', '}\n', '\n', 'contract OlympusExchangeAdapterManagerInterface is Ownable {\n', '    function pickExchange(ERC20Extended _token, uint _amount, uint _rate, bool _isBuying) public view returns (bytes32 exchangeId);\n', '    function supportsTradingPair(address _srcAddress, address _destAddress, bytes32 _exchangeId) external view returns(bool supported);\n', '    function getExchangeAdapter(bytes32 _exchangeId) external view returns(address);\n', '    function isValidAdapter(address _adapter) external view returns(bool);\n', '    function getPrice(ERC20Extended _sourceAddress, ERC20Extended _destAddress, uint _amount, bytes32 _exchangeId)\n', '        external view returns(uint expectedRate, uint slippageRate);\n', '}\n', '\n', 'library Utils {\n', '\n', '    uint  constant PRECISION = (10**18);\n', '    uint  constant MAX_DECIMALS = 18;\n', '\n', '    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        if( dstDecimals >= srcDecimals ) {\n', '            require((dstDecimals-srcDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate * (10**(dstDecimals-srcDecimals))) / PRECISION;\n', '        } else {\n', '            require((srcDecimals-dstDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate) / (PRECISION * (10**(srcDecimals-dstDecimals)));\n', '        }\n', '    }\n', '\n', '    // function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '    //     if( srcDecimals >= dstDecimals ) {\n', '    //         require((srcDecimals-dstDecimals) <= MAX_DECIMALS);\n', '    //         return (PRECISION * dstQty * (10**(srcDecimals - dstDecimals))) / rate;\n', '    //     } else {\n', '    //         require((dstDecimals-srcDecimals) <= MAX_DECIMALS);\n', '    //         return (PRECISION * dstQty) / (rate * (10**(dstDecimals - srcDecimals)));\n', '    //     }\n', '    // }\n', '}\n', '\n', 'contract ComponentInterface {\n', '    string public name;\n', '    string public description;\n', '    string public category;\n', '    string public version;\n', '}\n', '\n', 'contract ExchangeInterface is ComponentInterface {\n', '    /*\n', '     * @dev Checks if a trading pair is available\n', '     * For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n', '     * @param address _sourceAddress The token to sell for the destAddress.\n', '     * @param address _destAddress The token to buy with the source token.\n', "     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\n", '     * @return boolean whether or not the trading pair is supported by this exchange provider\n', '     */\n', '    function supportsTradingPair(address _srcAddress, address _destAddress, bytes32 _exchangeId)\n', '        external view returns(bool supported);\n', '\n', '    /*\n', '     * @dev Buy a single token with ETH.\n', '     * @param ERC20Extended _token The token to buy, should be an ERC20Extended address.\n', '     * @param uint _amount Amount of ETH used to buy this token. Make sure the value sent to this function is the same as the _amount.\n', '     * @param uint _minimumRate The minimum amount of tokens to receive for 1 ETH.\n', '     * @param address _depositAddress The address to send the bought tokens to.\n', "     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\n", '     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here.\n', '     * @return boolean whether or not the trade succeeded.\n', '     */\n', '    function buyToken\n', '        (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress, bytes32 _exchangeId, address _partnerId\n', '        ) external payable returns(bool success);\n', '\n', '    /*\n', '     * @dev Sell a single token for ETH. Make sure the token is approved beforehand.\n', '     * @param ERC20Extended _token The token to sell, should be an ERC20Extended address.\n', '     * @param uint _amount Amount of tokens to sell.\n', '     * @param uint _minimumRate The minimum amount of ETH to receive for 1 ERC20Extended token.\n', '     * @param address _depositAddress The address to send the bought tokens to.\n', "     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\n", '     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here\n', '     * @return boolean boolean whether or not the trade succeeded.\n', '     */\n', '    function sellToken\n', '        (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress, bytes32 _exchangeId, address _partnerId\n', '        ) external returns(bool success);\n', '}\n', '\n', 'contract KyberNetworkInterface {\n', '\n', '    function getExpectedRate(ERC20Extended src, ERC20Extended dest, uint srcQty)\n', '        external view returns (uint expectedRate, uint slippageRate);\n', '\n', '    function trade(\n', '        ERC20Extended source,\n', '        uint srcAmount,\n', '        ERC20Extended dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId)\n', '        external payable returns(uint);\n', '}\n', '\n', 'contract OlympusExchangeAdapterInterface is Ownable {\n', '\n', '    function supportsTradingPair(address _srcAddress, address _destAddress)\n', '        external view returns(bool supported);\n', '\n', '    function getPrice(ERC20Extended _sourceAddress, ERC20Extended _destAddress, uint _amount)\n', '        external view returns(uint expectedRate, uint slippageRate);\n', '\n', '    function sellToken\n', '        (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress\n', '        ) external returns(bool success);\n', '\n', '    function buyToken\n', '        (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress\n', '        ) external payable returns(bool success);\n', '\n', '    function enable() external returns(bool);\n', '    function disable() external returns(bool);\n', '    function isEnabled() external view returns (bool success);\n', '\n', '    function setExchangeDetails(bytes32 _id, bytes32 _name) external returns(bool success);\n', '    function getExchangeDetails() external view returns(bytes32 _name, bool _enabled);\n', '\n', '}\n', '\n', 'contract PriceProviderInterface is ComponentInterface {\n', '    /*\n', '     * @dev Returns the expected price for 1 of sourceAddress.\n', '     * For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n', '     * @param address _sourceAddress The token to sell for the destAddress.\n', '     * @param address _destAddress The token to buy with the source token.\n', '     * @param uint _amount The amount of tokens which is wanted to buy.\n', "     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\n", '     * @return returns the expected and slippage rate for the specified conversion\n', '     */\n', '    function getPrice(ERC20Extended _sourceAddress, ERC20Extended _destAddress, uint _amount, bytes32 _exchangeId)\n', '        external view returns(uint expectedRate, uint slippageRate);\n', '}\n', '\n', 'contract OlympusExchangeInterface is ExchangeInterface, PriceProviderInterface, Ownable {\n', '    /*\n', '     * @dev Buy multiple tokens at once with ETH.\n', '     * @param ERC20Extended[] _tokens The tokens to buy, should be an array of ERC20Extended addresses.\n', '     * @param uint[] _amounts Amount of ETH used to buy this token. Make sure the value sent to this function is the same as the sum of this array.\n', '     * @param uint[] _minimumRates The minimum amount of tokens to receive for 1 ETH.\n', '     * @param address _depositAddress The address to send the bought tokens to.\n', "     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\n", '     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here\n', '     * @return boolean boolean whether or not the trade succeeded.\n', '     */\n', '    function buyTokens\n', '        (\n', '        ERC20Extended[] _tokens, uint[] _amounts, uint[] _minimumRates,\n', '        address _depositAddress, bytes32 _exchangeId, address _partnerId\n', '        ) external payable returns(bool success);\n', '\n', '    /*\n', '     * @dev Sell multiple tokens at once with ETH, make sure all of the tokens are approved to be transferred beforehand with the Olympus Exchange address.\n', '     * @param ERC20Extended[] _tokens The tokens to sell, should be an array of ERC20Extended addresses.\n', '     * @param uint[] _amounts Amount of tokens to sell this token. Make sure the value sent to this function is the same as the sum of this array.\n', '     * @param uint[] _minimumRates The minimum amount of ETH to receive for 1 specified ERC20Extended token.\n', '     * @param address _depositAddress The address to send the bought tokens to.\n', "     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\n", '     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here\n', '     * @return boolean boolean whether or not the trade succeeded.\n', '     */\n', '    function sellTokens\n', '        (\n', '        ERC20Extended[] _tokens, uint[] _amounts, uint[] _minimumRates,\n', '        address _depositAddress, bytes32 _exchangeId, address _partnerId\n', '        ) external returns(bool success);\n', '}\n', '\n', 'contract ComponentContainerInterface {\n', '    mapping (string => address) components;\n', '\n', '    event ComponentUpdated (string _name, address _componentAddress);\n', '\n', '    function setComponent(string _name, address _providerAddress) internal returns (bool success);\n', '    function getComponentByName(string name) public view returns (address);\n', '\n', '}\n', '\n', 'contract DerivativeInterface is ERC20Extended, Ownable, ComponentContainerInterface {\n', '\n', '    enum DerivativeStatus { New, Active, Paused, Closed }\n', '    enum DerivativeType { Index, Fund }\n', '\n', '    string public description;\n', '    string public category;\n', '    string public version;\n', '    DerivativeType public fundType;\n', '\n', '    address[] public tokens;\n', '    DerivativeStatus public status;\n', '\n', '    // invest, withdraw is done in transfer.\n', '    function invest() public payable returns(bool success);\n', '    function changeStatus(DerivativeStatus _status) public returns(bool);\n', '    function getPrice() public view returns(uint);\n', '}\n', '\n', 'contract FeeChargerInterface {\n', '    // TODO: change this to mainnet MOT address before deployment.\n', '    // solhint-disable-next-line\n', '    ERC20Extended public MOT = ERC20Extended(0x263c618480DBe35C300D8d5EcDA19bbB986AcaeD);\n', '    // kovan MOT: 0x41Dee9F481a1d2AA74a3f1d0958C1dB6107c686A\n', '}\n', '\n', 'contract FeeCharger is Ownable, FeeChargerInterface {\n', '    using SafeMath for uint256;\n', '\n', '    FeeMode public feeMode = FeeMode.ByCalls;\n', '    uint public feePercentage = 0;\n', '    uint public feeAmount = 0;\n', '    uint constant public FEE_CHARGER_DENOMINATOR = 10000;\n', '    address private olympusWallet = 0x09227deaeE08a5Ba9D6Eb057F922aDfAd191c36c;\n', '    bool private isPaying = false;\n', '\n', '    enum FeeMode {\n', '        ByTransactionAmount,\n', '        ByCalls\n', '    }\n', '\n', '    modifier feePayable(uint _amount) {\n', '      uint fee = calculateFee(_amount);\n', '      DerivativeInterface derivative = DerivativeInterface(msg.sender);\n', '      // take money directly from the derivative.\n', '      require(MOT.balanceOf(address(derivative)) >= fee);\n', '      require(MOT.allowance(address(derivative), address(this)) >= fee);\n', '      _;\n', '    }\n', '\n', '    function calculateFee(uint _amount) public view returns (uint amount) {\n', '        uint fee;\n', '        if (feeMode == FeeMode.ByTransactionAmount) {\n', '            fee = _amount * feePercentage / FEE_CHARGER_DENOMINATOR;\n', '        } else if (feeMode == FeeMode.ByCalls) {\n', '            fee = feeAmount;\n', '        } else {\n', '          revert("Unsupported fee mode.");\n', '        }\n', '\n', '        return fee;\n', '    }    \n', '\n', '    function adjustFeeMode(FeeMode _newMode) external onlyOwner returns (bool success) {\n', '        feeMode = _newMode;\n', '        return true;\n', '    }\n', '\n', '    function adjustFeeAmount(uint _newAmount) external onlyOwner returns (bool success) {\n', '        feeAmount = _newAmount;\n', '        return true;\n', '    }    \n', '\n', '    function adjustFeePercentage(uint _newPercentage) external onlyOwner returns (bool success) {\n', '        require(_newPercentage <= FEE_CHARGER_DENOMINATOR);\n', '        feePercentage = _newPercentage;\n', '        return true;\n', '    }    \n', '\n', '    function setWalletId(address _newWallet) external onlyOwner returns (bool success) {\n', '        require(_newWallet != 0x0);\n', '        olympusWallet = _newWallet;\n', '        return true;\n', '    }\n', '\n', '    function setMotAddress(address _motAddress) external onlyOwner returns (bool success) {\n', '        require(_motAddress != 0x0);\n', '        require(_motAddress != address(MOT));\n', '        MOT = ERC20Extended(_motAddress);\n', '        // this is only and will always be MOT.\n', '        require(keccak256(abi.encodePacked(MOT.symbol())) == keccak256(abi.encodePacked("MOT")));\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    /*\n', '     * @dev Pay the fee for the call / transaction.\n', '     * Depending on the component itself, the fee is paid differently.\n', '     * @param uint _amountinMot The base amount in MOT, calculation should be one outside. \n', '     * this is only used when the fee mode is by transaction amount. leave it to zero if fee mode is\n', '     * by calls.\n', '     * @return boolean whether or not the fee is paid.\n', '     */\n', '    function payFee(uint _amountInMOT) internal feePayable(calculateFee(_amountInMOT)) returns (bool success) {\n', '        uint _feeAmount = calculateFee(_amountInMOT);\n', '\n', '        DerivativeInterface derivative = DerivativeInterface(msg.sender);\n', '\n', '        uint balanceBefore = MOT.balanceOf(olympusWallet);\n', '        require(!isPaying);\n', '        isPaying = true;\n', '        MOT.transferFrom(address(derivative), olympusWallet, _feeAmount);\n', '        isPaying = false;\n', '        uint balanceAfter = MOT.balanceOf(olympusWallet);\n', '\n', '        require(balanceAfter == balanceBefore + _feeAmount);   \n', '        return true;     \n', '    }        \n', '}\n', '\n', 'contract ExchangeProvider is FeeCharger, OlympusExchangeInterface {\n', '    using SafeMath for uint256;\n', '    string public name = "OlympusExchangeProvider";\n', '    string public description =\n', '    "Exchange provider of Olympus Labs, which additionally supports buy\\and sellTokens for multiple tokens at the same time";\n', '    string public category = "exchange";\n', '    string public version = "v1.0";\n', '    ERC20Extended private constant ETH  = ERC20Extended(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '\n', '    OlympusExchangeAdapterManagerInterface private exchangeAdapterManager;\n', '\n', '    constructor(address _exchangeManager) public {\n', '        exchangeAdapterManager = OlympusExchangeAdapterManagerInterface(_exchangeManager);\n', '        feeMode = FeeMode.ByTransactionAmount;\n', '    }\n', '\n', '    modifier checkAllowance(ERC20Extended _token, uint _amount) {\n', '        require(_token.allowance(msg.sender, address(this)) >= _amount, "Not enough tokens approved");\n', '        _;\n', '    }\n', '\n', '    function setExchangeAdapterManager(address _exchangeManager) external onlyOwner {\n', '        exchangeAdapterManager = OlympusExchangeAdapterManagerInterface(_exchangeManager);\n', '    }\n', '\n', '    function buyToken\n', '        (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress, bytes32 _exchangeId, address /* _partnerId */\n', '        ) external payable returns(bool success) {\n', '\n', '        require(msg.value == _amount);\n', '\n', '        OlympusExchangeAdapterInterface adapter;\n', '        // solhint-disable-next-line\n', '        bytes32 exchangeId = _exchangeId == "" ? exchangeAdapterManager.pickExchange(_token, _amount, _minimumRate, true) : _exchangeId;\n', '        if(exchangeId == 0){\n', '            revert("No suitable exchange found");\n', '        }\n', '\n', '        require(payFee(msg.value * getMotPrice(exchangeId) / 10 ** 18));\n', '        adapter = OlympusExchangeAdapterInterface(exchangeAdapterManager.getExchangeAdapter(exchangeId));\n', '        require(\n', '            adapter.buyToken.value(msg.value)(\n', '                _token,\n', '                _amount,\n', '                _minimumRate,\n', '                _depositAddress)\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function sellToken\n', '        (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress, bytes32 _exchangeId, address /* _partnerId */\n', '        ) checkAllowance(_token, _amount) external returns(bool success) {\n', '\n', '        OlympusExchangeAdapterInterface adapter;\n', '        bytes32 exchangeId = _exchangeId == "" ? exchangeAdapterManager.pickExchange(_token, _amount, _minimumRate, false) : _exchangeId;\n', '        if(exchangeId == 0){\n', '            revert("No suitable exchange found");\n', '        }\n', '\n', '        uint tokenPrice;\n', '        (tokenPrice,) = exchangeAdapterManager.getPrice(_token, ETH, _amount, exchangeId);\n', '        require(payFee(tokenPrice  * _amount * getMotPrice(exchangeId) / 10 ** _token.decimals() / 10 ** 18));\n', '\n', '        adapter = OlympusExchangeAdapterInterface(exchangeAdapterManager.getExchangeAdapter(exchangeId));\n', '\n', '        ERC20NoReturn(_token).transferFrom(msg.sender, address(adapter), _amount);\n', '\n', '        require(\n', '            adapter.sellToken(\n', '                _token,\n', '                _amount,\n', '                _minimumRate,\n', '                _depositAddress)\n', '            );\n', '        return true;\n', '    }\n', '\n', '    function getMotPrice(bytes32 _exchangeId) private view returns (uint price) {\n', '        (price,) = exchangeAdapterManager.getPrice(ETH, MOT, msg.value, _exchangeId);\n', '    }\n', '\n', '    function buyTokens\n', '        (\n', '        ERC20Extended[] _tokens, uint[] _amounts, uint[] _minimumRates,\n', '        address _depositAddress, bytes32 _exchangeId, address /* _partnerId */\n', '        ) external payable returns(bool success) {\n', '        require(_tokens.length == _amounts.length && _amounts.length == _minimumRates.length, "Arrays are not the same lengths");\n', '        require(payFee(msg.value * getMotPrice(_exchangeId) / 10 ** 18));\n', '        uint totalValue;\n', '        uint i;\n', '        for(i = 0; i < _amounts.length; i++ ) {\n', '            totalValue += _amounts[i];\n', '        }\n', '        require(totalValue == msg.value, "msg.value is not the same as total value");\n', '\n', '        for (i = 0; i < _tokens.length; i++ ) {\n', '            bytes32 exchangeId = _exchangeId == "" ?\n', '            exchangeAdapterManager.pickExchange(_tokens[i], _amounts[i], _minimumRates[i], true) : _exchangeId;\n', '            if (exchangeId == 0) {\n', '                revert("No suitable exchange found");\n', '            }\n', '            require(\n', '                OlympusExchangeAdapterInterface(exchangeAdapterManager.getExchangeAdapter(exchangeId)).buyToken.value(_amounts[i])(\n', '                    _tokens[i],\n', '                    _amounts[i],\n', '                    _minimumRates[i],\n', '                    _depositAddress)\n', '            );\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function sellTokens\n', '        (\n', '        ERC20Extended[] _tokens, uint[] _amounts, uint[] _minimumRates,\n', '        address _depositAddress, bytes32 _exchangeId, address /* _partnerId */\n', '        ) external returns(bool success) {\n', '        require(_tokens.length == _amounts.length && _amounts.length == _minimumRates.length, "Arrays are not the same lengths");\n', '        OlympusExchangeAdapterInterface adapter;\n', '\n', '        uint[] memory prices = new uint[](3); // 0 tokenPrice, 1 MOT price, 3 totalValueInMOT\n', '        for (uint i = 0; i < _tokens.length; i++ ) {\n', '            bytes32 exchangeId = _exchangeId == bytes32("") ?\n', '            exchangeAdapterManager.pickExchange(_tokens[i], _amounts[i], _minimumRates[i], false) : _exchangeId;\n', '            if(exchangeId == 0){\n', '                revert("No suitable exchange found");\n', '            }\n', '\n', '            (prices[0],) = exchangeAdapterManager.getPrice(_tokens[i], ETH, _amounts[i], exchangeId);\n', '            (prices[1],) = exchangeAdapterManager.getPrice(ETH, MOT, prices[0] * _amounts[i], exchangeId);\n', '            prices[2] += prices[0] * _amounts[i] * prices[1] / 10 ** _tokens[i].decimals() / 10 ** 18;\n', '\n', '            adapter = OlympusExchangeAdapterInterface(exchangeAdapterManager.getExchangeAdapter(exchangeId));\n', '            require(_tokens[i].allowance(msg.sender, address(this)) >= _amounts[i], "Not enough tokens approved");\n', '            ERC20NoReturn(_tokens[i]).transferFrom(msg.sender, address(adapter), _amounts[i]);\n', '            require(\n', '                adapter.sellToken(\n', '                    _tokens[i],\n', '                    _amounts[i],\n', '                    _minimumRates[i],\n', '                    _depositAddress)\n', '            );\n', '        }\n', '\n', '        require(payFee(prices[2]));\n', '\n', '        return true;\n', '    }\n', '\n', '    function supportsTradingPair(address _srcAddress, address _destAddress, bytes32 _exchangeId) external view returns (bool){\n', '        return exchangeAdapterManager.supportsTradingPair(_srcAddress, _destAddress, _exchangeId);\n', '    }\n', '\n', '    function getPrice(ERC20Extended _sourceAddress, ERC20Extended _destAddress, uint _amount, bytes32 _exchangeId)\n', '        external view returns(uint expectedRate, uint slippageRate) {\n', '        return exchangeAdapterManager.getPrice(_sourceAddress, _destAddress, _amount, _exchangeId);\n', '    }\n', '}']
