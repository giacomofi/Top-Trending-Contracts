['pragma solidity ^0.4.21;\n', '\n', 'contract BlackjackTipJar {\n', '\n', '    address public pitboss;\n', '    uint256 public deployedOn;\n', '\n', '    uint8 public dealer_cut = 95; // percent\n', '    uint256 public overflow_upper = 0.25 ether;\n', '    uint256 public overflow_lower = 0.15 ether;\n', '\n', '    mapping(address => uint256) public bankrolls;\n', '    mapping(address => address) public beneficiaries;\n', '    \n', '    event Deposit(address indexed _dealer, address indexed _from, uint256 _value);\n', '    event Cashout(address indexed _dealer, address indexed _to, uint256 _value);\n', '    event Overflow(address indexed _dealer, uint256 _value);\n', '\n', '    modifier auth() {\n', '      require(msg.sender == pitboss);\n', '      _;\n', '    }\n', '\n', '    function BlackjackTipJar() public payable {\n', '      pitboss = msg.sender;\n', '      deployedOn = block.number;\n', '      bankrolls[pitboss] = msg.value;\n', '    }\n', '\n', '    function () public payable {\n', '      bankrolls[pitboss] += msg.value;\n', '      emit Deposit(pitboss, msg.sender, msg.value);\n', '    }\n', '\n', '\n', '    // To be called by players\n', '    function deposit(address dealer) public payable {\n', '      bankrolls[dealer] = bankrolls[dealer] + msg.value;\n', '      emit Deposit(dealer, msg.sender, msg.value);\n', '    }\n', '\n', '\n', '    // To be called by dealers\n', '    function cashout(address winner, uint256 amount) public {\n', '\n', '      uint256 dealerBankroll = bankrolls[msg.sender];\n', '      uint256 value = amount;\n', '      if (value > dealerBankroll) {\n', '        value = dealerBankroll;\n', '      }\n', '\n', '      bankrolls[msg.sender] -= value;\n', '      winner.transfer(value);\n', '      emit Cashout(msg.sender, winner, value);\n', '\n', '      // Has our cup runneth over? Let us collect our profits\n', '      dealerBankroll = bankrolls[msg.sender];\n', '      if (dealerBankroll > overflow_upper) {\n', '\n', '        uint256 overflow_amt = dealerBankroll - overflow_lower;\n', '        bankrolls[msg.sender] -= overflow_amt;\n', '\n', '        value = overflow_amt;\n', '        if (msg.sender != pitboss) {\n', '          value = overflow_amt * dealer_cut / 100;\n', '          pitboss.transfer(overflow_amt - value);\n', '        }\n', '\n', '        address beneficiary = msg.sender;\n', '        address sender_beneficiary = beneficiaries[msg.sender];\n', '        if (sender_beneficiary > 0) { beneficiary = sender_beneficiary; }\n', '\n', '        beneficiary.transfer(value);\n', '        emit Overflow(msg.sender, value);\n', '\n', '      }\n', '    }\n', '\n', '    // To be called by dealers\n', '    function setBeneficiary(address beneficiary) public {\n', '      beneficiaries[msg.sender] = beneficiary;\n', '    }\n', '\n', '    // To be called by the pitboss\n', '    function setDealerCut(uint8 cut) public auth {\n', '      require(cut <= 100 && cut >= 1);\n', '      dealer_cut = cut;\n', '    }\n', '\n', '    // To be called by the pitboss\n', '    function setOverflowBounds(uint256 upper, uint256 lower) public auth {\n', '      require(lower > 0 && upper > lower);\n', '      overflow_upper = upper;\n', '      overflow_lower = lower;\n', '    }\n', '\n', '    function kill() public auth {\n', '      selfdestruct(pitboss);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract BlackjackTipJar {\n', '\n', '    address public pitboss;\n', '    uint256 public deployedOn;\n', '\n', '    uint8 public dealer_cut = 95; // percent\n', '    uint256 public overflow_upper = 0.25 ether;\n', '    uint256 public overflow_lower = 0.15 ether;\n', '\n', '    mapping(address => uint256) public bankrolls;\n', '    mapping(address => address) public beneficiaries;\n', '    \n', '    event Deposit(address indexed _dealer, address indexed _from, uint256 _value);\n', '    event Cashout(address indexed _dealer, address indexed _to, uint256 _value);\n', '    event Overflow(address indexed _dealer, uint256 _value);\n', '\n', '    modifier auth() {\n', '      require(msg.sender == pitboss);\n', '      _;\n', '    }\n', '\n', '    function BlackjackTipJar() public payable {\n', '      pitboss = msg.sender;\n', '      deployedOn = block.number;\n', '      bankrolls[pitboss] = msg.value;\n', '    }\n', '\n', '    function () public payable {\n', '      bankrolls[pitboss] += msg.value;\n', '      emit Deposit(pitboss, msg.sender, msg.value);\n', '    }\n', '\n', '\n', '    // To be called by players\n', '    function deposit(address dealer) public payable {\n', '      bankrolls[dealer] = bankrolls[dealer] + msg.value;\n', '      emit Deposit(dealer, msg.sender, msg.value);\n', '    }\n', '\n', '\n', '    // To be called by dealers\n', '    function cashout(address winner, uint256 amount) public {\n', '\n', '      uint256 dealerBankroll = bankrolls[msg.sender];\n', '      uint256 value = amount;\n', '      if (value > dealerBankroll) {\n', '        value = dealerBankroll;\n', '      }\n', '\n', '      bankrolls[msg.sender] -= value;\n', '      winner.transfer(value);\n', '      emit Cashout(msg.sender, winner, value);\n', '\n', '      // Has our cup runneth over? Let us collect our profits\n', '      dealerBankroll = bankrolls[msg.sender];\n', '      if (dealerBankroll > overflow_upper) {\n', '\n', '        uint256 overflow_amt = dealerBankroll - overflow_lower;\n', '        bankrolls[msg.sender] -= overflow_amt;\n', '\n', '        value = overflow_amt;\n', '        if (msg.sender != pitboss) {\n', '          value = overflow_amt * dealer_cut / 100;\n', '          pitboss.transfer(overflow_amt - value);\n', '        }\n', '\n', '        address beneficiary = msg.sender;\n', '        address sender_beneficiary = beneficiaries[msg.sender];\n', '        if (sender_beneficiary > 0) { beneficiary = sender_beneficiary; }\n', '\n', '        beneficiary.transfer(value);\n', '        emit Overflow(msg.sender, value);\n', '\n', '      }\n', '    }\n', '\n', '    // To be called by dealers\n', '    function setBeneficiary(address beneficiary) public {\n', '      beneficiaries[msg.sender] = beneficiary;\n', '    }\n', '\n', '    // To be called by the pitboss\n', '    function setDealerCut(uint8 cut) public auth {\n', '      require(cut <= 100 && cut >= 1);\n', '      dealer_cut = cut;\n', '    }\n', '\n', '    // To be called by the pitboss\n', '    function setOverflowBounds(uint256 upper, uint256 lower) public auth {\n', '      require(lower > 0 && upper > lower);\n', '      overflow_upper = upper;\n', '      overflow_lower = lower;\n', '    }\n', '\n', '    function kill() public auth {\n', '      selfdestruct(pitboss);\n', '    }\n', '\n', '}']
