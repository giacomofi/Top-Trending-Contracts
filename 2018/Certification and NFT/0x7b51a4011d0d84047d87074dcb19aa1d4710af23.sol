['// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract IVenaCoin{\n', '    function buyToken(address to, uint tokens) public returns (bool success);\n', '}\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '  // Interface takes an address of the existing contract as parameter\n', '  IVenaCoin token = IVenaCoin(0xb12ff864749a8eef9a93246ae883bdf37e49a068); \n', '  //VenaCoin token =  VenaCoin (0x8c1ed7e19abaa9f23c476da86dc1577f1ef401f5);\n', '  // Address where funds are collected\n', '  address public wallet = 0xd2a60240df3133b48d23e358a09efa8eb8de91a0;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate = 518;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '  \n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  \n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '    \n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '    _forwardFunds();\n', '    \n', '  }\n', '  \n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '  \n', '  function _getTokenAmount(uint256 _weiAmount) public view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '  \n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.buyToken(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '  \n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '  \n', '}']