['pragma solidity ^0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/rbac/Roles.sol\n', '\n', '/**\n', ' * @title Roles\n', ' * @author Francisco Giordano (@frangio)\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' *      See RBAC.sol for example usage.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an address access to this role\n', '   */\n', '  function add(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address&#39; access to this role\n', '   */\n', '  function remove(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * // reverts\n', '   */\n', '  function check(Role storage role, address addr)\n', '    view\n', '    internal\n', '  {\n', '    require(has(role, addr));\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address addr)\n', '    view\n', '    internal\n', '    returns (bool)\n', '  {\n', '    return role.bearer[addr];\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/rbac/RBAC.sol\n', '\n', '/**\n', ' * @title RBAC (Role-Based Access Control)\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev Stores and provides setters and getters for roles and addresses.\n', ' *      Supports unlimited numbers of roles and addresses.\n', ' *      See //contracts/mocks/RBACMock.sol for an example of usage.\n', ' * This RBAC method uses strings to key roles. It may be beneficial\n', ' *  for you to write your own implementation of this interface using Enums or similar.\n', ' * It&#39;s also recommended that you define constants in the contract, like ROLE_ADMIN below,\n', ' *  to avoid typos.\n', ' */\n', 'contract RBAC {\n', '  using Roles for Roles.Role;\n', '\n', '  mapping (string => Roles.Role) private roles;\n', '\n', '  event RoleAdded(address addr, string roleName);\n', '  event RoleRemoved(address addr, string roleName);\n', '\n', '  /**\n', '   * A constant role name for indicating admins.\n', '   */\n', '  string public constant ROLE_ADMIN = "admin";\n', '\n', '  /**\n', '   * @dev constructor. Sets msg.sender as admin by default\n', '   */\n', '  function RBAC()\n', '    public\n', '  {\n', '    addRole(msg.sender, ROLE_ADMIN);\n', '  }\n', '\n', '  /**\n', '   * @dev reverts if addr does not have role\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   * // reverts\n', '   */\n', '  function checkRole(address addr, string roleName)\n', '    view\n', '    public\n', '  {\n', '    roles[roleName].check(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev determine if addr has role\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   * @return bool\n', '   */\n', '  function hasRole(address addr, string roleName)\n', '    view\n', '    public\n', '    returns (bool)\n', '  {\n', '    return roles[roleName].has(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function adminAddRole(address addr, string roleName)\n', '    onlyAdmin\n', '    public\n', '  {\n', '    addRole(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function adminRemoveRole(address addr, string roleName)\n', '    onlyAdmin\n', '    public\n', '  {\n', '    removeRole(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function addRole(address addr, string roleName)\n', '    internal\n', '  {\n', '    roles[roleName].add(addr);\n', '    RoleAdded(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function removeRole(address addr, string roleName)\n', '    internal\n', '  {\n', '    roles[roleName].remove(addr);\n', '    RoleRemoved(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '   * @param roleName the name of the role\n', '   * // reverts\n', '   */\n', '  modifier onlyRole(string roleName)\n', '  {\n', '    checkRole(msg.sender, roleName);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to admins\n', '   * // reverts\n', '   */\n', '  modifier onlyAdmin()\n', '  {\n', '    checkRole(msg.sender, ROLE_ADMIN);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n', '   * @param roleNames the names of the roles to scope access to\n', '   * // reverts\n', '   *\n', '   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n', '   *  see: https://github.com/ethereum/solidity/issues/2467\n', '   */\n', '  // modifier onlyRoles(string[] roleNames) {\n', '  //     bool hasAnyRole = false;\n', '  //     for (uint8 i = 0; i < roleNames.length; i++) {\n', '  //         if (hasRole(msg.sender, roleNames[i])) {\n', '  //             hasAnyRole = true;\n', '  //             break;\n', '  //         }\n', '  //     }\n', '\n', '  //     require(hasAnyRole);\n', '\n', '  //     _;\n', '  // }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/PausableToken.sol\n', '\n', 'contract PausableToken is StandardToken, Pausable, RBAC {\n', '\n', '    string public constant ROLE_ADMINISTRATOR = "administrator";\n', '\n', '    modifier whenNotPausedOrAuthorized() {\n', '        require(!paused || hasRole(msg.sender, ROLE_ADMINISTRATOR));\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Add an address that can administer the token even when paused.\n', '     * @param _administrator Address of the given administrator.\n', '     * @return True if the administrator has been added, false if the address was already an administrator.\n', '     */\n', '    function addAdministrator(address _administrator) onlyOwner public returns (bool) {\n', '        if (isAdministrator(_administrator)) {\n', '            return false;\n', '        } else {\n', '            addRole(_administrator, ROLE_ADMINISTRATOR);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Remove an administrator.\n', '     * @param _administrator Address of the administrator to be removed.\n', '     * @return True if the administrator has been removed,\n', '     *  false if the address wasn&#39;t an administrator in the first place.\n', '     */\n', '    function removeAdministrator(address _administrator) onlyOwner public returns (bool) {\n', '        if (isAdministrator(_administrator)) {\n', '            removeRole(_administrator, ROLE_ADMINISTRATOR);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Determine if address is an administrator.\n', '     * @param _administrator Address of the administrator to be checked.\n', '     */\n', '    function isAdministrator(address _administrator) public view returns (bool) {\n', '        return hasRole(_administrator, ROLE_ADMINISTRATOR);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address with pause feature for administrator.\n', '    * @dev Only applies when the transfer is allowed by the owner.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public whenNotPausedOrAuthorized returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another with pause feature for administrator.\n', '    * @dev Only applies when the transfer is allowed by the owner.\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPausedOrAuthorized returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '}\n', '\n', '// File: contracts/CurrentToken.sol\n', '\n', 'contract CurrentToken is PausableToken {\n', '    string constant public name = "CurrentCoin";\n', '    string constant public symbol = "CUR";\n', '    uint8 constant public decimals = 18;\n', '\n', '    uint256 constant public INITIAL_TOTAL_SUPPLY = 1e11 * (uint256(10) ** decimals);\n', '\n', '    /**\n', '    * @dev Create CurrentToken contract and set pause\n', '    */\n', '    function CurrentToken() public {\n', '        totalSupply_ = totalSupply_.add(INITIAL_TOTAL_SUPPLY);\n', '        balances[msg.sender] = totalSupply_;\n', '        Transfer(address(0), msg.sender, totalSupply_);\n', '\n', '        pause();\n', '    }\n', '}\n', '\n', '// File: contracts/VariableTimeBonusRate.sol\n', '\n', '/**\n', ' * @title VariableTimeRate\n', ' * @dev Contract with time dependent token distribution rate variable.\n', ' */\n', 'contract VariableTimeBonusRate {\n', '    using SafeMath for uint256;\n', '\n', '    // Struct specifying the stages of rate modification.\n', '    struct RateModifier {\n', '        // Percentage by which the rate should be modified.\n', '        uint256 ratePermilles;\n', '\n', '        // start time for a given rate\n', '        uint256 start;\n', '    }\n', '\n', '    RateModifier[] private modifiers;\n', '\n', '    /**\n', '     * @dev Finds currently applicable rate modifier.\n', '     * @return Current rate modifier percentage.\n', '     */\n', '    function currentModifier() public view returns (uint256 rateModifier) {\n', '        // solium-disable-next-line security/no-block-members\n', '        uint256 comparisonVariable = now;\n', '        for (uint i = 0; i < modifiers.length; i++) {\n', '            if (comparisonVariable >= modifiers[i].start) {\n', '                rateModifier = modifiers[i].ratePermilles;\n', '            }\n', '        }\n', '    }\n', '\n', '    function getRateModifierInPermilles() public view returns (uint256) {\n', '        return currentModifier();\n', '    }\n', '\n', '    /**\n', '     * @dev Adds rate modifier checking not to add one with a start smaller than the previous.\n', '     * @param _rateModifier RateModifier struct.\n', '     */\n', '    function pushModifier(RateModifier _rateModifier) internal {\n', '        require(modifiers.length == 0 || _rateModifier.start > modifiers[modifiers.length - 1].start);\n', '        modifiers.push(_rateModifier);\n', '    }\n', '}\n', '\n', '// File: contracts/TokenRate.sol\n', '\n', 'contract TokenRate is VariableTimeBonusRate {\n', '\n', '    uint256 constant public REFERRED_BONUS_PERMILLE  = 5;\n', '    uint256 constant public REFERRAL_BONUS_PERMILLE = 50;\n', '\n', '    uint256 public rate;\n', '\n', '    function TokenRate(uint256 _rate) public {\n', '        rate = _rate;\n', '    }\n', '\n', '    function getCurrentBuyerRateInPermilles(bool isReferred) view public returns (uint256) {\n', '        uint256 permillesRate = VariableTimeBonusRate.getRateModifierInPermilles();\n', '        if (isReferred) {\n', '            permillesRate = permillesRate.add(REFERRED_BONUS_PERMILLE);\n', '        }\n', '        return permillesRate.add(1000);\n', '    }\n', '\n', '    /**\n', '     * @dev amount for given wei calculation based on rate modifier percentage.\n', '     * @param _weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmountForBuyer(uint256 _weiAmount, bool isReferred) internal view returns (uint256) {\n', '        return _weiAmount.mul(rate).mul(getCurrentBuyerRateInPermilles(isReferred)).div(1000);\n', '    }\n', '\n', '    function _getTokenAmountForReferral(uint256 _weiAmount, bool isReferred) internal view returns (uint256) {\n', '        if (isReferred) {\n', '            return _weiAmount.mul(rate).mul(REFERRAL_BONUS_PERMILLE).div(1000);\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev amount of wei to pay for tokens - calculation based on rate modifier percentage.\n', '     * @param _tokensLeft Value in tokens to be converted into wei\n', '     * @return Number of wei that you must pay (bonus rate is taken into account)\n', '     */\n', '    function _getWeiValueOfTokens(uint256 _tokensLeft, bool isReferred) internal view returns (uint256) {\n', '        uint256 permillesRate = getCurrentBuyerRateInPermilles(isReferred);\n', '        if (isReferred) {\n', '            permillesRate = permillesRate.add(REFERRAL_BONUS_PERMILLE);\n', '        }\n', '        uint256 tokensToBuy = _tokensLeft.mul(1000).div(permillesRate);\n', '        return tokensToBuy.div(rate);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/Whitelist.sol\n', '\n', '/**\n', ' * @title Whitelist contract\n', ' * @dev Whitelist for wallets.\n', '*/\n', 'contract Whitelist is Ownable {\n', '    mapping(address => bool) whitelist;\n', '\n', '    uint256 public whitelistLength = 0;\n', '\n', '    /**\n', '    * @dev Add wallet to whitelist.\n', '    * @dev Accept request from the owner only.\n', '    * @param _wallet The address of wallet to add.\n', '    */  \n', '    function addWallet(address _wallet) onlyOwner public {\n', '        require(_wallet != address(0));\n', '        require(!isWhitelisted(_wallet));\n', '        whitelist[_wallet] = true;\n', '        whitelistLength++;\n', '    }\n', '\n', '    /**\n', '    * @dev Remove wallet from whitelist.\n', '    * @dev Accept request from the owner only.\n', '    * @param _wallet The address of whitelisted wallet to remove.\n', '    */  \n', '    function removeWallet(address _wallet) onlyOwner public {\n', '        require(_wallet != address(0));\n', '        require(isWhitelisted(_wallet));\n', '        whitelist[_wallet] = false;\n', '        whitelistLength--;\n', '    }\n', '\n', '    /**\n', '    * @dev Check the specified wallet whether it is in the whitelist.\n', '    * @param _wallet The address of wallet to check.\n', '    */ \n', '    function isWhitelisted(address _wallet) constant public returns (bool) {\n', '        return whitelist[_wallet];\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/CurrentCrowdsale.sol\n', '\n', 'contract CurrentCrowdsale is Pausable, TokenRate {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant private DECIMALS = 18;\n', '    uint256 constant public HARDCAP_TOKENS_PRE_ICO = 100e6 * (10 ** DECIMALS);\n', '    uint256 constant public HARDCAP_TOKENS_ICO = 499e8 * (10 ** DECIMALS);\n', '\n', '    uint256 public startPhase1 = 0;\n', '    uint256 public startPhase2 = 0;\n', '    uint256 public startPhase3 = 0;\n', '    uint256 public endOfPhase3 = 0;\n', '\n', '    uint256 public maxcap = 0;\n', '\n', '    uint256 public tokensSoldIco = 0;\n', '    uint256 public tokensRemainingIco = HARDCAP_TOKENS_ICO;\n', '    uint256 public tokensSoldTotal = 0;\n', '\n', '    uint256 public weiRaisedIco = 0;\n', '    uint256 public weiRaisedTotal = 0;\n', '\n', '    address private withdrawalWallet;\n', '\n', '    CurrentToken public token;\n', '    Whitelist public whitelist;\n', '\n', '    modifier beforeReachingHardCap() {\n', '        require(tokensRemainingIco > 0 && weiRaisedIco < maxcap);\n', '        _;\n', '    }\n', '\n', '    modifier whenWhitelisted(address _wallet) {\n', '        require(whitelist.isWhitelisted(_wallet));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Constructor for CurrentCrowdsale contract.\n', '    * @dev Set the owner who can manage whitelist and token.\n', '    * @param _maxcap The maxcap value.\n', '    * @param _startPhase1 The phase1 ICO start time.\n', '    * @param _startPhase2 The phase2 ICO start time.\n', '    * @param _startPhase3 The phase3 ICO start time.\n', '    * @param _endOfPhase3 The end time of ICO.\n', '    * @param _withdrawalWallet The address to which raised funds will be withdrawn.\n', '    * @param _rate exchange rate for ico.\n', '    * @param _token address of token used for ico.\n', '    * @param _whitelist address of whitelist contract used for ico.\n', '    */\n', '    function CurrentCrowdsale(\n', '        uint256 _maxcap,\n', '        uint256 _startPhase1,\n', '        uint256 _startPhase2,\n', '        uint256 _startPhase3,\n', '        uint256 _endOfPhase3,\n', '        address _withdrawalWallet,\n', '        uint256 _rate,\n', '        CurrentToken _token,\n', '        Whitelist _whitelist\n', '    )  TokenRate(_rate) public\n', '    {\n', '        require(_withdrawalWallet != address(0));\n', '        require(_token != address(0) && _whitelist != address(0));\n', '        require(_startPhase1 >= now);\n', '        require(_endOfPhase3 > _startPhase3);\n', '        require(_maxcap > 0);\n', '\n', '        token = _token;\n', '        whitelist = _whitelist;\n', '\n', '        startPhase1 = _startPhase1;\n', '        startPhase2 = _startPhase2;\n', '        startPhase3 = _startPhase3;\n', '        endOfPhase3 = _endOfPhase3;\n', '\n', '        withdrawalWallet = _withdrawalWallet;\n', '\n', '        maxcap = _maxcap;\n', '        tokensSoldTotal = HARDCAP_TOKENS_PRE_ICO;\n', '        weiRaisedTotal = tokensSoldTotal.div(_rate.mul(2));\n', '\n', '        pushModifier(RateModifier(200, startPhase1));\n', '        pushModifier(RateModifier(150, startPhase2));\n', '        pushModifier(RateModifier(100, startPhase3));\n', '    }\n', '\n', '    /**\n', '    * @dev Fallback function can be used to buy tokens.\n', '    */\n', '    function() public payable {\n', '        if (isIco()) {\n', '            sellTokensIco();\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Check whether the ICO is active at the moment.\n', '    */\n', '    function isIco() public constant returns (bool) {\n', '        return now >= startPhase1 && now <= endOfPhase3;\n', '    }\n', '\n', '    function sellTokensIco() beforeReachingHardCap whenWhitelisted(msg.sender) whenNotPaused public payable {\n', '        sellTokens(address(0));\n', '    }\n', '\n', '    function sellTokensIcoWithReferal(address referral) beforeReachingHardCap whenWhitelisted(msg.sender) whenNotPaused public payable {\n', '        if (referral != msg.sender && whitelist.isWhitelisted(referral)) {\n', '            sellTokens(referral);\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Manual send tokens to the specified address.\n', '    * @param _beneficiary The address of a investor.\n', '    * @param _tokensAmount Amount of tokens.\n', '    */\n', '    function manualSendTokens(address _beneficiary, uint256 _tokensAmount) public  onlyOwner {\n', '        require(_beneficiary != address(0));\n', '        require(_tokensAmount > 0);\n', '\n', '        token.transfer(_beneficiary, _tokensAmount);\n', '        tokensSoldIco = tokensSoldIco.add(_tokensAmount);\n', '        tokensSoldTotal = tokensSoldTotal.add(_tokensAmount);\n', '        tokensRemainingIco = tokensRemainingIco.sub(_tokensAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Sell tokens during ICO with referral.\n', '    */\n', '    function sellTokens(address referral) beforeReachingHardCap whenWhitelisted(msg.sender) whenNotPaused internal {\n', '        require(isIco());\n', '        require(msg.value > 0);\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 excessiveFunds = 0;\n', '\n', '        uint256 plannedWeiTotal = weiRaisedIco.add(weiAmount);\n', '\n', '        if (plannedWeiTotal > maxcap) {\n', '            excessiveFunds = plannedWeiTotal.sub(maxcap);\n', '            weiAmount = maxcap.sub(weiRaisedIco);\n', '        }\n', '        bool isReferred = referral != address(0);\n', '        uint256 tokensForUser = _getTokenAmountForBuyer(weiAmount, isReferred);\n', '        uint256 tokensForReferral = _getTokenAmountForReferral(weiAmount, isReferred);\n', '        uint256 tokensAmount = tokensForUser.add(tokensForReferral);\n', '\n', '        if (tokensAmount > tokensRemainingIco) {\n', '            uint256 weiToAccept = _getWeiValueOfTokens(tokensRemainingIco, isReferred);\n', '            tokensForReferral = _getTokenAmountForReferral(weiToAccept, isReferred);\n', '            tokensForUser = tokensRemainingIco.sub(tokensForReferral);\n', '            excessiveFunds = excessiveFunds.add(weiAmount.sub(weiToAccept));\n', '\n', '            tokensAmount = tokensRemainingIco;\n', '            weiAmount = weiToAccept;\n', '        }\n', '\n', '        tokensSoldIco = tokensSoldIco.add(tokensAmount);\n', '        tokensSoldTotal = tokensSoldTotal.add(tokensAmount);\n', '        tokensRemainingIco = tokensRemainingIco.sub(tokensAmount);\n', '\n', '        weiRaisedIco = weiRaisedIco.add(weiAmount);\n', '        weiRaisedTotal = weiRaisedTotal.add(weiAmount);\n', '\n', '        token.transfer(msg.sender, tokensForUser);\n', '        if (isReferred) {\n', '            token.transfer(referral, tokensForReferral);\n', '        }\n', '\n', '        if (excessiveFunds > 0) {\n', '            msg.sender.transfer(excessiveFunds);\n', '        }\n', '\n', '        withdrawalWallet.transfer(this.balance);\n', '    }\n', '}']