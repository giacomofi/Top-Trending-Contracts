['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Roles\n', ' * @author Francisco Giordano (@frangio)\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' * See RBAC.sol for example usage.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an address access to this role\n', '   */\n', '  function add(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an address' access to this role\n", '   */\n', '  function remove(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * // reverts\n', '   */\n', '  function check(Role storage role, address addr)\n', '    view\n', '    internal\n', '  {\n', '    require(has(role, addr));\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address addr)\n', '    view\n', '    internal\n', '    returns (bool)\n', '  {\n', '    return role.bearer[addr];\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract Time {\n', '    /**\n', '    * @dev Current time getter\n', '    * @return Current time in seconds\n', '    */\n', '    function _currentTime() internal view returns (uint256) {\n', '        return block.timestamp;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title RBAC (Role-Based Access Control)\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev Stores and provides setters and getters for roles and addresses.\n', ' * Supports unlimited numbers of roles and addresses.\n', ' * See //contracts/mocks/RBACMock.sol for an example of usage.\n', ' * This RBAC method uses strings to key roles. It may be beneficial\n', ' * for you to write your own implementation of this interface using Enums or similar.\n', " * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\n", ' * to avoid typos.\n', ' */\n', 'contract RBAC {\n', '  using Roles for Roles.Role;\n', '\n', '  mapping (string => Roles.Role) private roles;\n', '\n', '  event RoleAdded(address indexed operator, string role);\n', '  event RoleRemoved(address indexed operator, string role);\n', '\n', '  /**\n', '   * @dev reverts if addr does not have role\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   * // reverts\n', '   */\n', '  function checkRole(address _operator, string _role)\n', '    view\n', '    public\n', '  {\n', '    roles[_role].check(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev determine if addr has role\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   * @return bool\n', '   */\n', '  function hasRole(address _operator, string _role)\n', '    view\n', '    public\n', '    returns (bool)\n', '  {\n', '    return roles[_role].has(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   */\n', '  function addRole(address _operator, string _role)\n', '    internal\n', '  {\n', '    roles[_role].add(_operator);\n', '    emit RoleAdded(_operator, _role);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   */\n', '  function removeRole(address _operator, string _role)\n', '    internal\n', '  {\n', '    roles[_role].remove(_operator);\n', '    emit RoleRemoved(_operator, _role);\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '   * @param _role the name of the role\n', '   * // reverts\n', '   */\n', '  modifier onlyRole(string _role)\n', '  {\n', '    checkRole(msg.sender, _role);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n', '   * @param _roles the names of the roles to scope access to\n', '   * // reverts\n', '   *\n', '   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n', '   *  see: https://github.com/ethereum/solidity/issues/2467\n', '   */\n', '  // modifier onlyRoles(string[] _roles) {\n', '  //     bool hasAnyRole = false;\n', '  //     for (uint8 i = 0; i < _roles.length; i++) {\n', '  //         if (hasRole(msg.sender, _roles[i])) {\n', '  //             hasAnyRole = true;\n', '  //             break;\n', '  //         }\n', '  //     }\n', '\n', '  //     require(hasAnyRole);\n', '\n', '  //     _;\n', '  // }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract Lockable {\n', '    // locked values specified by address\n', '    mapping(address => uint256) public lockedValues;\n', '\n', '    /**\n', '    * @dev Method to lock specified value by specified address\n', '    * @param _for Address for which the value will be locked\n', '    * @param _value Value that be locked\n', '    */\n', '    function _lock(address _for, uint256 _value) internal {\n', '        require(_for != address(0) && _value > 0, "Invalid lock operation configuration.");\n', '\n', '        if (_value != lockedValues[_for]) {\n', '            lockedValues[_for] = _value;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Method to unlock (reset) locked value\n', '    * @param _for Address for which the value will be unlocked\n', '    */\n', '    function _unlock(address _for) internal {\n', '        require(_for != address(0), "Invalid unlock operation configuration.");\n', '        \n', '        if (lockedValues[_for] != 0) {\n', '            lockedValues[_for] = 0;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Operable is Ownable, RBAC {\n', '    // role key\n', '    string public constant ROLE_OPERATOR = "operator";\n', '\n', '    /**\n', '     * @dev Reverts in case account is not Owner or Operator role\n', '     */\n', '    modifier hasOwnerOrOperatePermission() {\n', '        require(msg.sender == owner || hasRole(msg.sender, ROLE_OPERATOR), "Access denied.");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Getter to determine if address is in whitelist\n', '     */\n', '    function operator(address _operator) public view returns (bool) {\n', '        return hasRole(_operator, ROLE_OPERATOR);\n', '    }\n', '\n', '    /**\n', '     * @dev Method to add accounts with Operator role\n', '     * @param _operator Address that will receive Operator role access\n', '     */\n', '    function addOperator(address _operator) public onlyOwner {\n', '        addRole(_operator, ROLE_OPERATOR);\n', '    }\n', '\n', '    /**\n', '     * @dev Method to remove accounts with Operator role\n', '     * @param _operator Address that will loose Operator role access\n', '     */\n', '    function removeOperator(address _operator) public onlyOwner {\n', '        removeRole(_operator, ROLE_OPERATOR);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Withdrawal is Ownable {\n', '    // Address to which funds will be withdrawn\n', '    address public withdrawWallet;\n', '\n', '    /**\n', '    * Event for withdraw logging\n', '    * @param value Value that was withdrawn\n', '    */\n', '    event WithdrawLog(uint256 value);\n', '\n', '    /**\n', '    * @param _withdrawWallet Address to which funds will be withdrawn\n', '    */\n', '    constructor(address _withdrawWallet) public {\n', '        require(_withdrawWallet != address(0), "Invalid funds holder wallet.");\n', '\n', '        withdrawWallet = _withdrawWallet;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers funds from the contract to the specified withdraw wallet address\n', '    */\n', '    function withdrawAll() external onlyOwner {\n', '        uint256 weiAmount = address(this).balance;\n', '      \n', '        withdrawWallet.transfer(weiAmount);\n', '        emit WithdrawLog(weiAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers a part of the funds from the contract to the specified withdraw wallet address\n', '    * @param _weiAmount Part of the funds to be withdrawn\n', '    */\n', '    function withdraw(uint256 _weiAmount) external onlyOwner {\n', '        require(_weiAmount <= address(this).balance, "Not enough funds.");\n', '\n', '        withdrawWallet.transfer(_weiAmount);\n', '        emit WithdrawLog(_weiAmount);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract PriceStrategy is Time, Operable {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '    * Describes stage parameters\n', '    * @param start Stage start date\n', '    * @param end Stage end date\n', '    * @param volume Number of tokens available for the stage\n', '    * @param priceInCHF Token price in CHF for the stage\n', '    * @param minBonusVolume The minimum number of tokens after which the bonus tokens is added\n', '    * @param bonus Percentage of bonus tokens\n', '    */\n', '    struct Stage {\n', '        uint256 start;\n', '        uint256 end;\n', '        uint256 volume;\n', '        uint256 priceInCHF;\n', '        uint256 minBonusVolume;\n', '        uint256 bonus;\n', '        bool lock;\n', '    }\n', '\n', '    /**\n', '    * Describes lockup period parameters\n', '    * @param periodInSec Lockup period in seconds\n', '    * @param bonus Lockup bonus tokens percentage\n', '    */\n', '    struct LockupPeriod {\n', '        uint256 expires;\n', '        uint256 bonus;\n', '    }\n', '\n', '    // describes stages available for ICO lifetime\n', '    Stage[] public stages;\n', '\n', '    // lockup periods specified by the period in month\n', '    mapping(uint256 => LockupPeriod) public lockupPeriods;\n', '\n', '    // number of decimals supported by CHF rates\n', '    uint256 public constant decimalsCHF = 18;\n', '\n', '    // minimum allowed investment in CHF (decimals 1e+18)\n', '    uint256 public minInvestmentInCHF;\n', '\n', '    // ETH rate in CHF\n', '    uint256 public rateETHtoCHF;\n', '\n', '    /**\n', '    * Event for ETH to CHF rate changes logging\n', '    * @param newRate New rate value\n', '    */\n', '    event RateChangedLog(uint256 newRate);\n', '\n', '    /**\n', '    * @param _rateETHtoCHF Cost of ETH in CHF\n', '    * @param _minInvestmentInCHF Minimal allowed investment in CHF\n', '    */\n', '    constructor(uint256 _rateETHtoCHF, uint256 _minInvestmentInCHF) public {\n', '        require(_minInvestmentInCHF > 0, "Minimum investment can not be set to 0.");        \n', '        minInvestmentInCHF = _minInvestmentInCHF;\n', '\n', '        setETHtoCHFrate(_rateETHtoCHF);\n', '\n', '        // PRE-ICO\n', '        stages.push(Stage({\n', '            start: 1536969600, // 15th Sep, 2018 00:00:00\n', '            end: 1542239999, // 14th Nov, 2018 23:59:59\n', '            volume: uint256(25000000000).mul(10 ** 18), // (twenty five billion)\n', '            priceInCHF: uint256(2).mul(10 ** 14), // CHF 0.00020\n', '            minBonusVolume: 0,\n', '            bonus: 0,\n', '            lock: false\n', '        }));\n', '\n', '        // ICO\n', '        stages.push(Stage({\n', '            start: 1542240000, // 15th Nov, 2018 00:00:00\n', '            end: 1550188799, // 14th Feb, 2019 23:59:59\n', '            volume: uint256(65000000000).mul(10 ** 18), // (forty billion)\n', '            priceInCHF: uint256(4).mul(10 ** 14), // CHF 0.00040\n', '            minBonusVolume: uint256(400000000).mul(10 ** 18), // (four hundred million)\n', '            bonus: 2000, // 20% bonus tokens\n', '            lock: true\n', '        }));\n', '\n', '        _setLockupPeriod(1550188799, 18, 3000); // 18 months after the end of the ICO / 30%\n', '        _setLockupPeriod(1550188799, 12, 2000); // 12 months after the end of the ICO / 20%\n', '        _setLockupPeriod(1550188799, 6, 1000); // 6 months after the end of the ICO / 10%\n', '    }\n', '\n', '    /**\n', '    * @dev Updates ETH to CHF rate\n', '    * @param _rateETHtoCHF Cost of ETH in CHF\n', '    */\n', '    function setETHtoCHFrate(uint256 _rateETHtoCHF) public hasOwnerOrOperatePermission {\n', '        require(_rateETHtoCHF > 0, "Rate can not be set to 0.");        \n', '        rateETHtoCHF = _rateETHtoCHF;\n', '        emit RateChangedLog(rateETHtoCHF);\n', '    }\n', '\n', '    /**\n', '    * @dev Tokens amount based on investment value in wei\n', '    * @param _wei Investment value in wei\n', '    * @param _lockup Lockup period in months\n', '    * @param _sold Number of tokens sold by the moment\n', '    * @return Amount of tokens and bonuses\n', '    */\n', '    function getTokensAmount(uint256 _wei, uint256 _lockup, uint256 _sold) public view returns (uint256 tokens, uint256 bonus) { \n', '        uint256 chfAmount = _wei.mul(rateETHtoCHF).div(10 ** decimalsCHF);\n', '        require(chfAmount >= minInvestmentInCHF, "Investment value is below allowed minimum.");\n', '\n', '        Stage memory currentStage = _getCurrentStage();\n', '        require(currentStage.priceInCHF > 0, "Invalid price value.");        \n', '\n', '        tokens = chfAmount.mul(10 ** decimalsCHF).div(currentStage.priceInCHF);\n', '\n', '        uint256 bonusSize;\n', '        if (tokens >= currentStage.minBonusVolume) {\n', '            bonusSize = currentStage.bonus.add(lockupPeriods[_lockup].bonus);\n', '        } else {\n', '            bonusSize = lockupPeriods[_lockup].bonus;\n', '        }\n', '\n', '        bonus = tokens.mul(bonusSize).div(10 ** 4);\n', '\n', '        uint256 total = tokens.add(bonus);\n', '        require(currentStage.volume > _sold.add(total), "Not enough tokens available.");\n', '    }    \n', '\n', '    /**\n', '    * @dev Finds current stage parameters according to the rules and current date and time\n', '    * @return Current stage parameters (available volume of tokens and price in CHF)\n', '    */\n', '    function _getCurrentStage() internal view returns (Stage) {\n', '        uint256 index = 0;\n', '        uint256 time = _currentTime();\n', '\n', '        Stage memory result;\n', '\n', '        while (index < stages.length) {\n', '            Stage memory stage = stages[index];\n', '\n', '            if ((time >= stage.start && time <= stage.end)) {\n', '                result = stage;\n', '                break;\n', '            }\n', '\n', '            index++;\n', '        }\n', '\n', '        return result;\n', '    } \n', '\n', '    /**\n', '    * @dev Sets bonus for specified lockup period. Allowed only for contract owner\n', '    * @param _startPoint Lock start point (is seconds)\n', '    * @param _period Lockup period (in months)\n', '    * @param _bonus Percentage of bonus tokens\n', '    */\n', '    function _setLockupPeriod(uint256 _startPoint, uint256 _period, uint256 _bonus) private {\n', '        uint256 expires = _startPoint.add(_period.mul(2628000));\n', '        lockupPeriods[_period] = LockupPeriod({\n', '            expires: expires,\n', '            bonus: _bonus\n', '        });\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract BaseCrowdsale {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for CosquareToken;\n', '\n', '    // The token being sold\n', '    CosquareToken public token;\n', '    // Total amount of tokens sold\n', '    uint256 public tokensSold;\n', '\n', '    /**\n', '    * @dev Event for tokens purchase logging\n', '    * @param purchaseType Who paid for the tokens\n', '    * @param beneficiary Who got the tokens\n', '    * @param value Value paid for purchase\n', '    * @param tokens Amount of tokens purchased\n', '    * @param bonuses Amount of bonuses received\n', '    */\n', '    event TokensPurchaseLog(string purchaseType, address indexed beneficiary, uint256 value, uint256 tokens, uint256 bonuses);\n', '\n', '    /**\n', '    * @param _token Address of the token being sold\n', '    */\n', '    constructor(CosquareToken _token) public {\n', '        require(_token != address(0), "Invalid token address.");\n', '        token = _token;\n', '    }\n', '\n', '    /**\n', '    * @dev fallback function ***DO NOT OVERRIDE***\n', '    */\n', '    function () external payable {\n', '        require(msg.data.length == 0, "Should not accept data.");\n', '        _buyTokens(msg.sender, msg.value, "ETH");\n', '    }\n', '\n', '    /**\n', '    * @dev low level token purchase ***DO NOT OVERRIDE***\n', '    * @param _beneficiary Address performing the token purchase\n', '    */\n', '    function buyTokens(address _beneficiary) external payable {\n', '        _buyTokens(_beneficiary, msg.value, "ETH");\n', '    }\n', '\n', '    /**\n', '    * @dev Tokens purchase for wei investments\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _amount Amount of tokens purchased\n', '    * @param _investmentType Investment channel string\n', '    */\n', '    function _buyTokens(address _beneficiary, uint256 _amount, string _investmentType) internal {\n', '        _preValidatePurchase(_beneficiary, _amount);\n', '\n', '        (uint256 tokensAmount, uint256 tokenBonus) = _getTokensAmount(_beneficiary, _amount);\n', '\n', '        uint256 totalAmount = tokensAmount.add(tokenBonus);\n', '\n', '        _processPurchase(_beneficiary, totalAmount);\n', '        emit TokensPurchaseLog(_investmentType, _beneficiary, _amount, tokensAmount, tokenBonus);        \n', '        \n', '        _postPurchaseUpdate(_beneficiary, totalAmount);\n', '    }  \n', '\n', '    /**\n', '    * @dev Validation of an executed purchase\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _weiAmount Value in wei involved in the purchase\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        require(_beneficiary != address(0), "Invalid beneficiary address.");\n', '        require(_weiAmount > 0, "Invalid investment value.");\n', '    }\n', '\n', '    /**\n', '    * @dev Abstract function to count the number of tokens depending on the funds deposited\n', '    * @param _beneficiary Address for which to get the tokens amount\n', '    * @param _weiAmount Value in wei involved in the purchase\n', '    * @return Number of tokens\n', '    */\n', '    function _getTokensAmount(address _beneficiary, uint256 _weiAmount) internal view returns (uint256 tokens, uint256 bonus);\n', '\n', '    /**\n', '    * @dev Executed when a purchase is ready to be executed\n', '    * @param _beneficiary Address receiving the tokens\n', '    * @param _tokensAmount Number of tokens to be purchased\n', '    */\n', '    function _processPurchase(address _beneficiary, uint256 _tokensAmount) internal {\n', '        _deliverTokens(_beneficiary, _tokensAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Deliver tokens to investor\n', '    * @param _beneficiary Address receiving the tokens\n', '    * @param _tokensAmount Number of tokens to be purchased\n', '    */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokensAmount) internal {\n', '        token.safeTransfer(_beneficiary, _tokensAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Changes the contract state after purchase\n', '    * @param _beneficiary Address received the tokens\n', '    * @param _tokensAmount The number of tokens that were purchased\n', '    */\n', '    function _postPurchaseUpdate(address _beneficiary, uint256 _tokensAmount) internal {\n', '        tokensSold = tokensSold.add(_tokensAmount);\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract LockableCrowdsale is Time, Lockable, Operable, PriceStrategy, BaseCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '    * @dev Locks the next purchase for the provision of bonus tokens\n', '    * @param _beneficiary Address for which the next purchase will be locked\n', '    * @param _lockupPeriod The period to which tokens will be locked from the next purchase\n', '    */\n', '    function lockNextPurchase(address _beneficiary, uint256 _lockupPeriod) external hasOwnerOrOperatePermission {\n', '        require(_lockupPeriod == 6 || _lockupPeriod == 12 || _lockupPeriod == 18, "Invalid lock interval");\n', '        Stage memory currentStage = _getCurrentStage();\n', '        require(currentStage.lock, "Lock operation is not allowed.");\n', '        _lock(_beneficiary, _lockupPeriod);      \n', '    }\n', '\n', '    /**\n', '    * @dev Executed when a purchase is ready to be executed\n', '    * @param _beneficiary Address receiving the tokens\n', '    * @param _tokensAmount Number of tokens to be purchased\n', '    */\n', '    function _processPurchase(address _beneficiary, uint256 _tokensAmount) internal {\n', '        super._processPurchase(_beneficiary, _tokensAmount);\n', '        uint256 lockedValue = lockedValues[_beneficiary];\n', '\n', '        if (lockedValue > 0) {\n', '            uint256 expires = lockupPeriods[lockedValue].expires;\n', '            token.lock(_beneficiary, _tokensAmount, expires);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Counts the number of tokens depending on the funds deposited\n', '    * @param _beneficiary Address for which to get the tokens amount\n', '    * @param _weiAmount Value in wei involved in the purchase\n', '    * @return Number of tokens\n', '    */\n', '    function _getTokensAmount(address _beneficiary, uint256 _weiAmount) internal view returns (uint256 tokens, uint256 bonus) { \n', '        (tokens, bonus) = getTokensAmount(_weiAmount, lockedValues[_beneficiary], tokensSold);\n', '    }\n', '\n', '    /**\n', '    * @dev Changes the contract state after purchase\n', '    * @param _beneficiary Address received the tokens\n', '    * @param _tokensAmount The number of tokens that were purchased\n', '    */\n', '    function _postPurchaseUpdate(address _beneficiary, uint256 _tokensAmount) internal {\n', '        super._postPurchaseUpdate(_beneficiary, _tokensAmount);\n', '\n', '        _unlock(_beneficiary);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Whitelist is RBAC, Operable {\n', '    // role key\n', '    string public constant ROLE_WHITELISTED = "whitelist";\n', '\n', '    /**\n', '    * @dev Throws if operator is not whitelisted.\n', '    * @param _operator Operator address\n', '    */\n', '    modifier onlyIfWhitelisted(address _operator) {\n', '        checkRole(_operator, ROLE_WHITELISTED);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Add an address to the whitelist\n', '    * @param _operator Operator address\n', '    */\n', '    function addAddressToWhitelist(address _operator) public hasOwnerOrOperatePermission {\n', '        addRole(_operator, ROLE_WHITELISTED);\n', '    }\n', '\n', '    /**\n', '    * @dev Getter to determine if address is in whitelist\n', '    * @param _operator The address to be added to the whitelist\n', '    * @return True if the address is in the whitelist\n', '    */\n', '    function whitelist(address _operator) public view returns (bool) {\n', '        return hasRole(_operator, ROLE_WHITELISTED);\n', '    }\n', '\n', '    /**\n', '    * @dev Add addresses to the whitelist\n', '    * @param _operators Operators addresses\n', '    */\n', '    function addAddressesToWhitelist(address[] _operators) public hasOwnerOrOperatePermission {\n', '        for (uint256 i = 0; i < _operators.length; i++) {\n', '            addAddressToWhitelist(_operators[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Remove an address from the whitelist\n', '    * @param _operator Operator address\n', '    */\n', '    function removeAddressFromWhitelist(address _operator) public hasOwnerOrOperatePermission {\n', '        removeRole(_operator, ROLE_WHITELISTED);\n', '    }\n', '\n', '    /**\n', '    * @dev Remove addresses from the whitelist\n', '    * @param _operators Operators addresses\n', '    */\n', '    function removeAddressesFromWhitelist(address[] _operators) public hasOwnerOrOperatePermission {\n', '        for (uint256 i = 0; i < _operators.length; i++) {\n', '            removeAddressFromWhitelist(_operators[i]);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract WhitelistedCrowdsale is Whitelist, BaseCrowdsale {\n', '    /**\n', '    * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n', '    * @param _beneficiary Token beneficiary\n', '    * @param _weiAmount Amount of wei contributed\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyIfWhitelisted(_beneficiary) {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', 'contract PausableCrowdsale is Pausable, BaseCrowdsale {\n', '    /**\n', '    * @dev Extend parent behavior requiring contract not to be paused\n', '    * @param _beneficiary Token beneficiary\n', '    * @param _weiAmount Amount of wei contributed\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal whenNotPaused {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title DetailedERC20 token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract CosquareToken is Time, StandardToken, DetailedERC20, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '    * Describes locked balance\n', '    * @param expires Time when tokens will be unlocked\n', '    * @param value Amount of the tokens is locked\n', '    */\n', '    struct LockedBalance {\n', '        uint256 expires;\n', '        uint256 value;\n', '    }\n', '\n', '    // locked balances specified be the address\n', '    mapping(address => LockedBalance[]) public lockedBalances;\n', '\n', '    // sale wallet (65%)\n', '    address public saleWallet;\n', '    // reserve wallet (15%)\n', '    address public reserveWallet;\n', '    // team wallet (15%)\n', '    address public teamWallet;\n', '    // strategic wallet (5%)\n', '    address public strategicWallet;\n', '\n', '    // end point, after which all tokens will be unlocked\n', '    uint256 public lockEndpoint;\n', '\n', '    /**\n', '    * Event for lock logging\n', '    * @param who The address on which part of the tokens is locked\n', '    * @param value Amount of the tokens is locked\n', '    * @param expires Time when tokens will be unlocked\n', '    */\n', '    event LockLog(address indexed who, uint256 value, uint256 expires);\n', '\n', '    /**\n', '    * @param _saleWallet Sale wallet\n', '    * @param _reserveWallet Reserve wallet\n', '    * @param _teamWallet Team wallet\n', '    * @param _strategicWallet Strategic wallet\n', '    * @param _lockEndpoint End point, after which all tokens will be unlocked\n', '    */\n', '    constructor(address _saleWallet, address _reserveWallet, address _teamWallet, address _strategicWallet, uint256 _lockEndpoint) \n', '      DetailedERC20("cosquare", "CSQ", 18) public {\n', '        require(_lockEndpoint > 0, "Invalid global lock end date.");\n', '        lockEndpoint = _lockEndpoint;\n', '\n', '        _configureWallet(_saleWallet, 65000000000000000000000000000); // 6.5e+28\n', '        saleWallet = _saleWallet;\n', '        _configureWallet(_reserveWallet, 15000000000000000000000000000); // 1.5e+28\n', '        reserveWallet = _reserveWallet;\n', '        _configureWallet(_teamWallet, 15000000000000000000000000000); // 1.5e+28\n', '        teamWallet = _teamWallet;\n', '        _configureWallet(_strategicWallet, 5000000000000000000000000000); // 0.5e+28\n', '        strategicWallet = _strategicWallet;\n', '    }\n', '\n', '    /**\n', '    * @dev Setting the initial value of the tokens to the wallet\n', '    * @param _wallet Address to be set up\n', '    * @param _amount The number of tokens to be assigned to this address\n', '    */\n', '    function _configureWallet(address _wallet, uint256 _amount) private {\n', '        require(_wallet != address(0), "Invalid wallet address.");\n', '\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_wallet] = _amount;\n', '        emit Transfer(address(0), _wallet, _amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if the address does not have enough not locked balance\n', '    * @param _who The address to transfer from\n', '    * @param _value The amount to be transferred\n', '    */\n', '    modifier notLocked(address _who, uint256 _value) {\n', '        uint256 time = _currentTime();\n', '\n', '        if (lockEndpoint > time) {\n', '            uint256 index = 0;\n', '            uint256 locked = 0;\n', '            while (index < lockedBalances[_who].length) {\n', '                if (lockedBalances[_who][index].expires > time) {\n', '                    locked = locked.add(lockedBalances[_who][index].value);\n', '                }\n', '\n', '                index++;\n', '            }\n', '\n', '            require(_value <= balances[_who].sub(locked), "Not enough unlocked tokens");\n', '        }        \n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Overridden to check whether enough not locked balance\n', '    * @param _from The address which you want to send tokens from\n', '    * @param _to The address which you want to transfer to\n', '    * @param _value The amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public notLocked(_from, _value) returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Overridden to check whether enough not locked balance\n', '    * @param _to The address to transfer to\n', '    * @param _value The amount to be transferred\n', '    */\n', '    function transfer(address _to, uint256 _value) public notLocked(msg.sender, _value) returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the locked balance of the specified address\n', '    * @param _owner The address to query the locked balance of\n', '    * @param _expires Time of expiration of the lock (If equals to 0 - returns all locked tokens at this moment)\n', '    * @return An uint256 representing the amount of locked balance by the passed address\n', '    */\n', '    function lockedBalanceOf(address _owner, uint256 _expires) external view returns (uint256) {\n', '        uint256 time = _currentTime();\n', '        uint256 index = 0;\n', '        uint256 locked = 0;\n', '\n', '        if (lockEndpoint > time) {       \n', '            while (index < lockedBalances[_owner].length) {\n', '                if (_expires > 0) {\n', '                    if (lockedBalances[_owner][index].expires == _expires) {\n', '                        locked = locked.add(lockedBalances[_owner][index].value);\n', '                    }\n', '                } else {\n', '                    if (lockedBalances[_owner][index].expires >= time) {\n', '                        locked = locked.add(lockedBalances[_owner][index].value);\n', '                    }\n', '                }\n', '\n', '                index++;\n', '            }\n', '        }\n', '\n', '        return locked;\n', '    }\n', '\n', '    /**\n', '    * @dev Locks part of the balance for the specified address and for a certain period (3 periods expected)\n', '    * @param _who The address of which will be locked part of the balance\n', '    * @param _value The amount of tokens to be locked\n', '    * @param _expires Time of expiration of the lock\n', '    */\n', '    function lock(address _who, uint256 _value, uint256 _expires) public onlyOwner {\n', '        uint256 time = _currentTime();\n', '        require(_who != address(0) && _value <= balances[_who] && _expires > time, "Invalid lock configuration.");\n', '\n', '        uint256 index = 0;\n', '        bool exist = false;\n', '        while (index < lockedBalances[_who].length) {\n', '            if (lockedBalances[_who][index].expires == _expires) {\n', '                exist = true;\n', '                break;\n', '            }\n', '\n', '            index++;\n', '        }\n', '\n', '        if (exist) {\n', '            lockedBalances[_who][index].value = lockedBalances[_who][index].value.add(_value);\n', '        } else {\n', '            lockedBalances[_who].push(LockedBalance({\n', '                expires: _expires,\n', '                value: _value\n', '            }));\n', '        }\n', '\n', '        emit LockLog(_who, _value, _expires);\n', '    }\n', '}\n', '\n', '\n', 'contract Crowdsale is Lockable, Operable, Withdrawal, PriceStrategy, LockableCrowdsale, WhitelistedCrowdsale, PausableCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '    * @param _rateETHtoCHF Cost of ETH in CHF\n', '    * @param _minInvestmentInCHF Minimal allowed investment in CHF\n', '    * @param _withdrawWallet Address to which funds will be withdrawn\n', '    * @param _token Address of the token being sold\n', '    */\n', '    constructor(uint256 _rateETHtoCHF, uint256 _minInvestmentInCHF, address _withdrawWallet, CosquareToken _token)\n', '        PriceStrategy(_rateETHtoCHF, _minInvestmentInCHF)\n', '        Withdrawal(_withdrawWallet)\n', '        BaseCrowdsale(_token) public {\n', '    }  \n', '\n', '    /**\n', '    * @dev Distributes tokens for wei investments\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _ethAmount Investment value in ETH\n', '    * @param _type Type of investment channel\n', '    */\n', '    function distributeTokensForInvestment(address _beneficiary, uint256 _ethAmount, string _type) public hasOwnerOrOperatePermission {\n', '        _buyTokens(_beneficiary, _ethAmount, _type);\n', '    }\n', '\n', '    /**\n', '    * @dev Distributes tokens manually\n', '    * @param _beneficiary Address performing the tokens distribution\n', '    * @param _tokensAmount Amount of tokens distribution\n', '    */\n', '    function distributeTokensManual(address _beneficiary, uint256 _tokensAmount) external hasOwnerOrOperatePermission {\n', '        _preValidatePurchase(_beneficiary, _tokensAmount);\n', '\n', '        _deliverTokens(_beneficiary, _tokensAmount);\n', '        emit TokensPurchaseLog("MANUAL", _beneficiary, 0, _tokensAmount, 0);\n', '\n', '        _postPurchaseUpdate(_beneficiary, _tokensAmount);\n', '    }\n', '}']