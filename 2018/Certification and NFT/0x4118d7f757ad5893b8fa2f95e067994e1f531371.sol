['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract BitGuildToken {\n', '    // Public variables of the token\n', '    string public name = "BitGuild PLAT";\n', '    string public symbol = "PLAT";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 10000000000 * 10 ** uint256(decimals); // 10 billion tokens;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constructor function\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function BitGuildToken() public {\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title BitGuildWhitelist\n', ' * A small smart contract to provide whitelist functionality and storage\n', ' */\n', 'contract BitGuildWhitelist {\n', '\n', '  address admin;\n', '\n', '  mapping (address => bool) public whitelist;\n', '  uint256 public totalWhitelisted = 0;\n', '\n', '  event AddressWhitelisted(address indexed user, bool whitelisted);\n', '\n', '  function BitGuildWhitelist() public {\n', '    admin = msg.sender;\n', '  }\n', '\n', '  // Doesn&#39;t accept eth\n', '  function () external payable {\n', '    revert();\n', '  }\n', '\n', '  // Allows an admin to update whitelist\n', '  function whitelistAddress(address[] _users, bool _whitelisted) public {\n', '    require(msg.sender == admin);\n', '    for (uint i = 0; i < _users.length; i++) {\n', '      if (whitelist[_users[i]] == _whitelisted) continue;\n', '      if (_whitelisted) {\n', '        totalWhitelisted++;\n', '      } else {\n', '        if (totalWhitelisted > 0) {\n', '          totalWhitelisted--;\n', '        }\n', '      }\n', '      AddressWhitelisted(_users[i], _whitelisted);\n', '      whitelist[_users[i]] = _whitelisted;\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title BitGuildCrowdsale\n', ' * Capped crowdsale with a stard/end date\n', ' */\n', 'contract BitGuildCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // Token being sold\n', '  BitGuildToken public token;\n', '\n', '  // Whitelist being used\n', '  BitGuildWhitelist public whitelist;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // Crowdsale cap (how much can be raised total)\n', '  uint256 public cap = 14062.5 ether;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // Predefined rate of PLAT to Ethereum (1/rate = crowdsale price)\n', '  uint256 public rate = 80000;\n', '\n', '  // Min/max purchase\n', '  uint256 public minContribution = 0.5 ether;\n', '  uint256 public maxContribution = 1500 ether;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  mapping (address => uint256) public contributions;\n', '\n', '  // Finalization flag for when we want to withdraw the remaining tokens after the end\n', '  bool public crowdsaleFinalized = false;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function BitGuildCrowdsale(uint256 _startTime, uint256 _endTime, address _token, address _wallet, address _whitelist) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_token != address(0));\n', '    require(_wallet != address(0));\n', '    require(_whitelist != address(0));\n', '\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    token = BitGuildToken(_token);\n', '    wallet = _wallet;\n', '    whitelist = BitGuildWhitelist(_whitelist);\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(whitelist.whitelist(beneficiary));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '    // update total and individual contributions\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    contributions[beneficiary] = contributions[beneficiary].add(weiAmount);\n', '\n', '    // Send tokens\n', '    token.transfer(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    // Send funds\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // Returns true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    bool endTimeReached = now > endTime;\n', '    return capReached || endTimeReached || crowdsaleFinalized;\n', '  }\n', '\n', '  // Bonuses for larger purchases (in hundredths of percent)\n', '  function bonusPercentForWeiAmount(uint256 weiAmount) public pure returns(uint256) {\n', '    if (weiAmount >= 500 ether) return 1000; // 10%\n', '    if (weiAmount >= 250 ether) return 750;  // 7.5%\n', '    if (weiAmount >= 100 ether) return 500;  // 5%\n', '    if (weiAmount >= 50 ether) return 375;   // 3.75%\n', '    if (weiAmount >= 15 ether) return 250;   // 2.5%\n', '    if (weiAmount >= 5 ether) return 125;    // 1.25%\n', '    return 0; // 0% bonus if lower than 5 eth\n', '  }\n', '\n', '  // Returns you how much tokens do you get for the wei passed\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    uint256 tokens = weiAmount.mul(rate);\n', '    uint256 bonus = bonusPercentForWeiAmount(weiAmount);\n', '    tokens = tokens.mul(10000 + bonus).div(10000);\n', '    return tokens;\n', '  }\n', '\n', '  // Returns true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool moreThanMinPurchase = msg.value >= minContribution;\n', '    bool lessThanMaxPurchase = contributions[msg.sender] + msg.value <= maxContribution;\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '\n', '    return withinPeriod && moreThanMinPurchase && lessThanMaxPurchase && withinCap && !crowdsaleFinalized;\n', '  }\n', '\n', '  // Escape hatch in case the sale needs to be urgently stopped\n', '  function finalizeCrowdsale() public {\n', '    require(msg.sender == wallet);\n', '    crowdsaleFinalized = true;\n', '    // send remaining tokens back to the admin\n', '    uint256 tokensLeft = token.balanceOf(this);\n', '    token.transfer(wallet, tokensLeft);\n', '  }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract BitGuildToken {\n', '    // Public variables of the token\n', '    string public name = "BitGuild PLAT";\n', '    string public symbol = "PLAT";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 10000000000 * 10 ** uint256(decimals); // 10 billion tokens;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constructor function\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function BitGuildToken() public {\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title BitGuildWhitelist\n', ' * A small smart contract to provide whitelist functionality and storage\n', ' */\n', 'contract BitGuildWhitelist {\n', '\n', '  address admin;\n', '\n', '  mapping (address => bool) public whitelist;\n', '  uint256 public totalWhitelisted = 0;\n', '\n', '  event AddressWhitelisted(address indexed user, bool whitelisted);\n', '\n', '  function BitGuildWhitelist() public {\n', '    admin = msg.sender;\n', '  }\n', '\n', "  // Doesn't accept eth\n", '  function () external payable {\n', '    revert();\n', '  }\n', '\n', '  // Allows an admin to update whitelist\n', '  function whitelistAddress(address[] _users, bool _whitelisted) public {\n', '    require(msg.sender == admin);\n', '    for (uint i = 0; i < _users.length; i++) {\n', '      if (whitelist[_users[i]] == _whitelisted) continue;\n', '      if (_whitelisted) {\n', '        totalWhitelisted++;\n', '      } else {\n', '        if (totalWhitelisted > 0) {\n', '          totalWhitelisted--;\n', '        }\n', '      }\n', '      AddressWhitelisted(_users[i], _whitelisted);\n', '      whitelist[_users[i]] = _whitelisted;\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title BitGuildCrowdsale\n', ' * Capped crowdsale with a stard/end date\n', ' */\n', 'contract BitGuildCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // Token being sold\n', '  BitGuildToken public token;\n', '\n', '  // Whitelist being used\n', '  BitGuildWhitelist public whitelist;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // Crowdsale cap (how much can be raised total)\n', '  uint256 public cap = 14062.5 ether;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // Predefined rate of PLAT to Ethereum (1/rate = crowdsale price)\n', '  uint256 public rate = 80000;\n', '\n', '  // Min/max purchase\n', '  uint256 public minContribution = 0.5 ether;\n', '  uint256 public maxContribution = 1500 ether;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  mapping (address => uint256) public contributions;\n', '\n', '  // Finalization flag for when we want to withdraw the remaining tokens after the end\n', '  bool public crowdsaleFinalized = false;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function BitGuildCrowdsale(uint256 _startTime, uint256 _endTime, address _token, address _wallet, address _whitelist) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_token != address(0));\n', '    require(_wallet != address(0));\n', '    require(_whitelist != address(0));\n', '\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    token = BitGuildToken(_token);\n', '    wallet = _wallet;\n', '    whitelist = BitGuildWhitelist(_whitelist);\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(whitelist.whitelist(beneficiary));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '    // update total and individual contributions\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    contributions[beneficiary] = contributions[beneficiary].add(weiAmount);\n', '\n', '    // Send tokens\n', '    token.transfer(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    // Send funds\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // Returns true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    bool endTimeReached = now > endTime;\n', '    return capReached || endTimeReached || crowdsaleFinalized;\n', '  }\n', '\n', '  // Bonuses for larger purchases (in hundredths of percent)\n', '  function bonusPercentForWeiAmount(uint256 weiAmount) public pure returns(uint256) {\n', '    if (weiAmount >= 500 ether) return 1000; // 10%\n', '    if (weiAmount >= 250 ether) return 750;  // 7.5%\n', '    if (weiAmount >= 100 ether) return 500;  // 5%\n', '    if (weiAmount >= 50 ether) return 375;   // 3.75%\n', '    if (weiAmount >= 15 ether) return 250;   // 2.5%\n', '    if (weiAmount >= 5 ether) return 125;    // 1.25%\n', '    return 0; // 0% bonus if lower than 5 eth\n', '  }\n', '\n', '  // Returns you how much tokens do you get for the wei passed\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    uint256 tokens = weiAmount.mul(rate);\n', '    uint256 bonus = bonusPercentForWeiAmount(weiAmount);\n', '    tokens = tokens.mul(10000 + bonus).div(10000);\n', '    return tokens;\n', '  }\n', '\n', '  // Returns true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool moreThanMinPurchase = msg.value >= minContribution;\n', '    bool lessThanMaxPurchase = contributions[msg.sender] + msg.value <= maxContribution;\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '\n', '    return withinPeriod && moreThanMinPurchase && lessThanMaxPurchase && withinCap && !crowdsaleFinalized;\n', '  }\n', '\n', '  // Escape hatch in case the sale needs to be urgently stopped\n', '  function finalizeCrowdsale() public {\n', '    require(msg.sender == wallet);\n', '    crowdsaleFinalized = true;\n', '    // send remaining tokens back to the admin\n', '    uint256 tokensLeft = token.balanceOf(this);\n', '    token.transfer(wallet, tokensLeft);\n', '  }\n', '}']
