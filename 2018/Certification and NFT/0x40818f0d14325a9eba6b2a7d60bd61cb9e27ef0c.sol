['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', 'interface AddressRegistry {\n', '    function getAddr(string name) external view returns(address);\n', '}\n', '\n', 'interface Kyber {\n', '    function trade(\n', '        address src,\n', '        uint srcAmount,\n', '        address dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId\n', '    ) external payable returns (uint);\n', '\n', '    function getExpectedRate(\n', '        address src,\n', '        address dest,\n', '        uint srcQty\n', '    ) external view returns (uint, uint);\n', '}\n', '\n', '\n', 'contract Registry {\n', '    address public addressRegistry;\n', '    modifier onlyAdmin() {\n', '        require(\n', '            msg.sender == getAddress("admin"),\n', '            "Permission Denied"\n', '        );\n', '        _;\n', '    }\n', '    function getAddress(string name) internal view returns(address) {\n', '        AddressRegistry addrReg = AddressRegistry(addressRegistry);\n', '        return addrReg.getAddr(name);\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Trade is Registry {\n', '\n', '    using SafeMath for uint;\n', '    using SafeMath for uint256;\n', '\n', '    event KyberTrade(\n', '        address src,\n', '        uint srcAmt,\n', '        address dest,\n', '        uint destAmt,\n', '        address beneficiary,\n', '        uint minConversionRate,\n', '        address affiliate\n', '    );\n', '\n', '    function executeTrade(\n', '        address src,\n', '        address dest,\n', '        uint srcAmt,\n', '        uint minConversionRate\n', '    ) public payable returns (uint destAmt)\n', '    {\n', '        address protocolAdmin = getAddress("admin");\n', '        uint ethQty;\n', '\n', '        // fetch token & deduct fees\n', '        IERC20 tokenFunctions = IERC20(src);\n', '        if (src == getAddress("eth")) {\n', '            require(msg.value == srcAmt, "Invalid Operation");\n', '            ethQty = srcAmt;\n', '        } else {\n', '            tokenFunctions.transferFrom(msg.sender, address(this), srcAmt);\n', '        }\n', '\n', '        Kyber kyberFunctions = Kyber(getAddress("kyber"));\n', '        destAmt = kyberFunctions.trade.value(ethQty)(\n', '            src,\n', '            srcAmt,\n', '            dest,\n', '            msg.sender,\n', '            2**256 - 1,\n', '            minConversionRate,\n', '            protocolAdmin\n', '        );\n', '\n', '        emit KyberTrade(\n', '            src,\n', '            srcAmt,\n', '            dest,\n', '            destAmt,\n', '            msg.sender,\n', '            minConversionRate,\n', '            protocolAdmin\n', '        );\n', '\n', '    }\n', '\n', '    function getExpectedPrice(\n', '        address src,\n', '        address dest,\n', '        uint srcAmt\n', '    ) public view returns (uint, uint) \n', '    {\n', '        Kyber kyberFunctions = Kyber(getAddress("kyber"));\n', '        return kyberFunctions.getExpectedRate(\n', '            src,\n', '            dest,\n', '            srcAmt\n', '        );\n', '    }\n', '\n', '    function approveKyber(address[] tokenArr) public {\n', '        for (uint i = 0; i < tokenArr.length; i++) {\n', '            IERC20 tokenFunctions = IERC20(tokenArr[i]);\n', '            tokenFunctions.approve(getAddress("kyber"), 2**256 - 1);\n', '        }\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract MoatKyber is Trade {\n', '\n', '    event AssetsCollected(address name, uint addr);\n', '\n', '    constructor(address rAddr) public {\n', '        addressRegistry = rAddr;\n', '    }\n', '\n', '    function () public payable {}\n', '\n', '    function collectAsset(address tokenAddress, uint amount) public onlyAdmin {\n', '        if (tokenAddress == getAddress("eth")) {\n', '            msg.sender.transfer(amount);\n', '        } else {\n', '            IERC20 tokenFunctions = IERC20(tokenAddress);\n', '            tokenFunctions.transfer(msg.sender, amount);\n', '        }\n', '        emit AssetsCollected(tokenAddress, amount);\n', '    }\n', '\n', '}']