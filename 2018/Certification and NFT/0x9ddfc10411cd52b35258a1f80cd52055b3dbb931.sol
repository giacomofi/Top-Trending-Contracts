['pragma solidity ^0.4.21;\n', '\n', '\n', '// Problem Statement\n', '// ***1) User A Creates A contract with fields Contract Title Document Title, Version,\n', '//  description (Max 32 Characters) Owner (Your Name or Your organization Name) \n', '// ParticipantID(with public address) Consent_Details (Max 32 Characters)\n', '// ***2) User B Signs the contract\n', '// ***3) User A can Verify\n', 'contract Agreement {\n', '    address private owner;\n', '\n', '// A struct named Contract is requred to hold objects\n', '    struct Contract {\n', '        uint id; //0\n', '        bytes32 contractTitle; //1\n', '        bytes32 documentTitle; //2\n', '        bytes32 version; //3\n', '        bytes32 description; //4\n', '        address participant; //5\n', '        bytes32 consent; //6\n', '        bool isSigned; //7\n', '    }\n', '\n', '// we need mapping so for contract listing \n', '    mapping (uint => Contract) public contracts;\n', '\n', '// Contract Count holder\n', '    uint public contractCount;\n', '    \n', '    function Agreement () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '// Event when new contract is created to notifiy all clients\n', '    event ContractCreated(uint contractId, address participantId);\n', '// Event when a contract is signed\n', '    event ContractSigned(uint contractId);\n', '    \n', '// A contract can be only added by owner and user must exist;\n', '    function addContract(\n', '        bytes32 contractTitle, bytes32 documentTitle, bytes32 version,\n', '        bytes32 description, address participant, bytes32 consent\n', '        ) public {\n', '        require(owner == msg.sender);\n', '        contractCount += 1;\n', '        contracts[contractCount] = \n', '        Contract(contractCount, contractTitle, documentTitle, version, description, participant, consent, false);\n', '        emit ContractCreated(contractCount, participant);\n', '    }\n', '    \n', '    function addMultipleContracts(\n', '        bytes32 contractTitle, bytes32 documentTitle, bytes32 version,\n', '        bytes32 description, address[] _participant, bytes32 consent\n', '        ) public {\n', '        require(owner == msg.sender);\n', '        uint arrayLength = _participant.length;\n', '        for (uint i=0; i < arrayLength; i++) {\n', '            contractCount += 1;\n', '            contracts[contractCount] = Contract(\n', '            contractCount, contractTitle, documentTitle,\n', '            version, description, _participant[i], consent, false);\n', '            emit ContractCreated(contractCount, _participant[i]);\n', '        }\n', '    }\n', '\n', '// To sign contract id needs to be valid and contract should assigned to participant and should not be signed already\n', '    function signContract( uint id) public {\n', '        require(id > 0 && id <= contractCount);\n', '        require(contracts[id].participant == msg.sender);\n', '        require(!contracts[id].isSigned);\n', '        contracts[id].isSigned = true;\n', '        emit ContractSigned(id);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '\n', '// Problem Statement\n', '// ***1) User A Creates A contract with fields Contract Title Document Title, Version,\n', '//  description (Max 32 Characters) Owner (Your Name or Your organization Name) \n', '// ParticipantID(with public address) Consent_Details (Max 32 Characters)\n', '// ***2) User B Signs the contract\n', '// ***3) User A can Verify\n', 'contract Agreement {\n', '    address private owner;\n', '\n', '// A struct named Contract is requred to hold objects\n', '    struct Contract {\n', '        uint id; //0\n', '        bytes32 contractTitle; //1\n', '        bytes32 documentTitle; //2\n', '        bytes32 version; //3\n', '        bytes32 description; //4\n', '        address participant; //5\n', '        bytes32 consent; //6\n', '        bool isSigned; //7\n', '    }\n', '\n', '// we need mapping so for contract listing \n', '    mapping (uint => Contract) public contracts;\n', '\n', '// Contract Count holder\n', '    uint public contractCount;\n', '    \n', '    function Agreement () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '// Event when new contract is created to notifiy all clients\n', '    event ContractCreated(uint contractId, address participantId);\n', '// Event when a contract is signed\n', '    event ContractSigned(uint contractId);\n', '    \n', '// A contract can be only added by owner and user must exist;\n', '    function addContract(\n', '        bytes32 contractTitle, bytes32 documentTitle, bytes32 version,\n', '        bytes32 description, address participant, bytes32 consent\n', '        ) public {\n', '        require(owner == msg.sender);\n', '        contractCount += 1;\n', '        contracts[contractCount] = \n', '        Contract(contractCount, contractTitle, documentTitle, version, description, participant, consent, false);\n', '        emit ContractCreated(contractCount, participant);\n', '    }\n', '    \n', '    function addMultipleContracts(\n', '        bytes32 contractTitle, bytes32 documentTitle, bytes32 version,\n', '        bytes32 description, address[] _participant, bytes32 consent\n', '        ) public {\n', '        require(owner == msg.sender);\n', '        uint arrayLength = _participant.length;\n', '        for (uint i=0; i < arrayLength; i++) {\n', '            contractCount += 1;\n', '            contracts[contractCount] = Contract(\n', '            contractCount, contractTitle, documentTitle,\n', '            version, description, _participant[i], consent, false);\n', '            emit ContractCreated(contractCount, _participant[i]);\n', '        }\n', '    }\n', '\n', '// To sign contract id needs to be valid and contract should assigned to participant and should not be signed already\n', '    function signContract( uint id) public {\n', '        require(id > 0 && id <= contractCount);\n', '        require(contracts[id].participant == msg.sender);\n', '        require(!contracts[id].isSigned);\n', '        contracts[id].isSigned = true;\n', '        emit ContractSigned(id);\n', '    }\n', '}']
