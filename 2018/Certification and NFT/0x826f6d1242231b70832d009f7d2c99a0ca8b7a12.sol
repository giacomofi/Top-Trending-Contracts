['pragma solidity ^0.4.18; \n', '\n', '\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', 'contract ERC721 {\n', '  // Required methods\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function implementsERC721() public pure returns (bool);\n', '  function ownerOf(uint256 _tokenId) public view returns (address addr);\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '\n', '  // Optional\n', '  // function name() public view returns (string name);\n', '  // function symbol() public view returns (string symbol);\n', '  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n', '  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n', '}\n', '\n', '\n', 'contract CryptoPoosToken is ERC721 {\n', '\n', '  // Modified CryptoCelebs contract\n', '  /*** EVENTS ***/\n', '\n', '  /// @dev The Birth event is fired whenever a new poo comes into existence.\n', '  event Birth(uint256 tokenId, string name, address owner);\n', '\n', '  /// @dev The TokenSold event is fired whenever a token is sold.\n', '  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\n', '\n', '  /// @dev Transfer event as defined in current draft of ERC721. \n', '  ///  ownership is assigned, including births.\n', '  event Transfer(address from, address to, uint256 tokenId);\n', '\n', '  // Triggered on toilet flush\n', '  event ToiletPotChange();\n', '\n', '  /*** CONSTANTS ***/\n', '\n', '  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '  string public constant NAME = "CryptoPoos"; // solhint-disable-line\n', '  string public constant SYMBOL = "CryptoPoosToken"; // solhint-disable-line\n', '\n', '  uint256 private startingPrice = 0.005 ether;\n', '  uint256 private constant PROMO_CREATION_LIMIT = 5000;\n', '  \n', '  // Min price to flush the toilet\n', '  uint256 private minFlushPrice = 0.002 ether;\n', '\n', '\n', '  /*** STORAGE ***/\n', '\n', '  /// @dev A mapping from poo IDs to the address that owns them. All poos have\n', '  ///  some valid owner address.\n', '  mapping (uint256 => address) public pooIndexToOwner;\n', '\n', '  // @dev A mapping from owner address to count of tokens that address owns.\n', '  //  Used internally inside balanceOf() to resolve ownership count.\n', '  mapping (address => uint256) private ownershipTokenCount;\n', '\n', '  /// @dev A mapping from PooIDs to an address that has been approved to call\n', '  ///  transferFrom(). Each poo can only have one approved address for transfer\n', '  ///  at any time. A zero value means no approval is outstanding.\n', '  mapping (uint256 => address) public pooIndexToApproved;\n', '\n', '  // @dev A mapping from PooIDs to the price of the token.\n', '  mapping (uint256 => uint256) private pooIndexToPrice;\n', '  \n', '  // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '  address public ceoAddress;\n', '  address public cooAddress;\n', '  \n', '  uint256 roundCounter;\n', '  address lastFlusher;   // Person that flushed\n', '  uint256 flushedTokenId;   // Poo that got flushed\n', '  uint256 lastPotSize; //Stores last pot size obviously\n', '  uint256 goldenPooId; // Current golden poo id\n', '  uint public lastPurchaseTime; // Tracks time since last purchase\n', '\n', '  /*** DATATYPES ***/\n', '  struct Poo {\n', '    string name;\n', '  }\n', '\n', '  Poo[] private poos;\n', '\n', '  /*** ACCESS MODIFIERS ***/\n', '  /// @dev Access modifier for CEO-only functionality\n', '  modifier onlyCEO() {\n', '    require(msg.sender == ceoAddress);\n', '    _;\n', '  }\n', '\n', '  /// @dev Access modifier for COO-only functionality\n', '  modifier onlyCOO() {\n', '    require(msg.sender == cooAddress);\n', '    _;\n', '  }\n', '\n', '  /// Access modifier for contract owner only functionality\n', '  modifier onlyCLevel() {\n', '    require(\n', '      msg.sender == ceoAddress ||\n', '      msg.sender == cooAddress\n', '    );\n', '    _;\n', '  }\n', '\n', '  /*** CONSTRUCTOR ***/\n', '  function CryptoPoosToken() public {\n', '    ceoAddress = msg.sender;\n', '    cooAddress = msg.sender;\n', '\t\n', '\tcreateContractPoo("1");\n', '\tcreateContractPoo("2");\n', '\tcreateContractPoo("3");\n', '\tcreateContractPoo("4");\n', '\tcreateContractPoo("5");\n', '\tcreateContractPoo("6");\n', '\troundCounter = 1;\n', '  }\n', '\n', '  /*** PUBLIC FUNCTIONS ***/\n', '  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n', '  /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '  ///  clear all approvals.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function approve(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    // Caller must own token.\n', '    require(_owns(msg.sender, _tokenId));\n', '\n', '    pooIndexToApproved[_tokenId] = _to;\n', '\n', '    Approval(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// For querying balance of a particular account\n', '  /// @param _owner The address for balance query\n', '  /// @dev Required for ERC-721 compliance.\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return ownershipTokenCount[_owner];\n', '  }\n', '\n', '  /// @dev Creates a new poo with the given name.\n', '  function createContractPoo(string _name) public onlyCOO {\n', '    _createPoo(_name, address(this), startingPrice);\n', '  }\n', '\n', '  /// @notice Returns all the relevant information about a specific poo.\n', '  /// @param _tokenId The tokenId of the poo of interest.\n', '  function getPoo(uint256 _tokenId) public view returns (\n', '    string pooName,\n', '    uint256 sellingPrice,\n', '    address owner\n', '  ) {\n', '    Poo storage poo = poos[_tokenId];\n', '    pooName = poo.name;\n', '    sellingPrice = pooIndexToPrice[_tokenId];\n', '    owner = pooIndexToOwner[_tokenId];\n', '  }\n', '\n', '  function getRoundDetails() public view returns (\n', '    uint256 currentRound,\n', '\tuint256 currentBalance,\n', '\tuint256 currentGoldenPoo,\n', '\tuint256 lastRoundReward,\n', '    uint256 lastFlushedTokenId,\n', '    address lastRoundFlusher,\n', '\tbool bonusWinChance,\n', '\tuint256 lowestFlushPrice\n', '  ) {\n', '\tcurrentRound = roundCounter;\n', '\tcurrentBalance = this.balance;\n', '\tcurrentGoldenPoo = goldenPooId;\n', '\tlastRoundReward = lastPotSize;\n', '\tlastFlushedTokenId = flushedTokenId;\n', '\tlastRoundFlusher = lastFlusher;\n', '\tbonusWinChance = _increaseWinPotChance();\n', '\tlowestFlushPrice = minFlushPrice;\n', '  }\n', '\n', '  function implementsERC721() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function name() public pure returns (string) {\n', '    return NAME;\n', '  }\n', '\n', '  /// For querying owner of token\n', '  /// @param _tokenId The tokenID for owner inquiry\n', '  /// @dev Required for ERC-721 compliance.\n', '  function ownerOf(uint256 _tokenId)\n', '    public\n', '    view\n', '    returns (address owner)\n', '  {\n', '    owner = pooIndexToOwner[_tokenId];\n', '    require(owner != address(0));\n', '  }\n', '\n', '   function donate() public payable {\n', '\trequire(msg.value >= 0.001 ether);\n', '   }\n', '\n', '\n', '  // Allows someone to send ether and obtain the token\n', '  function purchase(uint256 _tokenId) public payable {\n', '    address oldOwner = pooIndexToOwner[_tokenId];\n', '    address newOwner = msg.sender;\n', '\n', '    uint256 sellingPrice = pooIndexToPrice[_tokenId];\n', '\n', '    // Making sure token owner is not sending to self\n', '    require(oldOwner != newOwner);\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Making sure sent amount is greater than or equal to the sellingPrice\n', '    require(msg.value >= sellingPrice);\n', '\n', '    // 62% to previous owner\n', '    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 62), 100));\n', '  \n', '    // 8% to the jew\n', '    ceoAddress.transfer(uint256(SafeMath.div(SafeMath.mul(sellingPrice, 8), 100)));\n', '\n', '\t// 30% goes to the pot\n', '\n', '    // Next token price is double\n', '     pooIndexToPrice[_tokenId] = uint256(SafeMath.mul(sellingPrice, 2));\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '\t\n', '    // Pay previous tokenOwner if owner is not contract\n', '    if (oldOwner != address(this)) {\n', '      oldOwner.transfer(payment); \n', '    }\n', '\n', '    _checkToiletFlush(false, _tokenId); \n', '\tlastPurchaseTime = now;\n', '\tToiletPotChange();\n', '  }\n', '  \n', '  // User is trying to flush the toilet. See if they succeed\n', '  function tryFlush() public payable {\n', '\n', '        // Make sure they are sending min flush price\n', '        require(msg.value >= minFlushPrice);\n', '\n', '\t\t// Jew takes 10% of manual flush attempt. Stops dat spam....\n', '\t\tceoAddress.transfer(uint256(SafeMath.div(SafeMath.mul(msg.value, 10), 100)));\n', '\n', '        _checkToiletFlush(true, 0);\n', '\t\tlastPurchaseTime = now;\n', '\t\tToiletPotChange();\n', '  }\n', '  \n', '  // If manual flush attempt, the user has a chance to flush their own poo\n', ' function _checkToiletFlush(bool _manualFlush, uint256 _purchasedTokenId) private {\n', '     \n', '    uint256 winningChance = 25;\n', '\n', '\t// We are calling manual flush option, so the chance of winning is less\n', '\tif(_manualFlush){\n', '\t\twinningChance = 50;\n', '\t}else if(_purchasedTokenId == goldenPooId){\n', '\t\t// If buying golden poo, and is not a manual flush, increase chance of winning!\n', '\t\twinningChance = uint256(SafeMath.div(SafeMath.mul(winningChance, 90), 100));\n', '\t}\n', '\n', '\t// Check if we are trippling chance to win on next flush attempt/poop purchase\n', '\tif(_increaseWinPotChance()){\n', '\t\twinningChance = uint256(SafeMath.div(winningChance,3));\n', '\t}\n', '     \n', '    // Check if owner owns a poo. If not, their chance of winning is lower\n', '    if(ownershipTokenCount[msg.sender] == 0){\n', '        winningChance = uint256(SafeMath.mul(winningChance,2));\n', '    }\n', '     \n', '    uint256 flushPooIndex = rand(winningChance);\n', '    \n', '    if( (flushPooIndex < 6) && (flushPooIndex != goldenPooId) &&  (msg.sender != pooIndexToOwner[flushPooIndex])  ){\n', '      lastFlusher = msg.sender;\n', '\t  flushedTokenId = flushPooIndex;\n', '      \n', '      _transfer(pooIndexToOwner[flushPooIndex],address(this),flushPooIndex);\n', '      pooIndexToPrice[flushPooIndex] = startingPrice;\n', '      \n', '      // Leave 5% behind for next pot\n', '\t  uint256 reward = uint256(SafeMath.div(SafeMath.mul(this.balance, 95), 100));\n', '\t  lastPotSize = reward;\n', '\n', '      msg.sender.transfer(reward); // Send reward to purchaser\n', '\t  goldenPooId = rand(6);// There is a new golden poo in town.\n', '\n', '\t  roundCounter += 1; // Keeps track of how many flushes\n', '    }\n', '  }\n', '\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\n', '    return pooIndexToPrice[_tokenId];\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '  /// @param _newCEO The address of the new CEO\n', '  function setCEO(address _newCEO) public onlyCEO {\n', '    require(_newCEO != address(0));\n', '\n', '    ceoAddress = _newCEO;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\n', '  /// @param _newCOO The address of the new COO\n', '  function setCOO(address _newCOO) public onlyCEO {\n', '    require(_newCOO != address(0));\n', '\n', '    cooAddress = _newCOO;\n', '  }\n', '\n', '  // If 2 hours elapsed since last purchase, increase chance of winning pot.\n', '  function _increaseWinPotChance() constant private returns (bool) {\n', '    if (now >= lastPurchaseTime + 120 minutes) {\n', '        // 120 minutes has elapsed from last purchased time\n', '        return true;\n', '    }\n', '    return false;\n', '}\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function symbol() public pure returns (string) {\n', '    return SYMBOL;\n', '  }\n', '\n', '  /// @notice Allow pre-approved user to take ownership of a token\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    address newOwner = msg.sender;\n', '    address oldOwner = pooIndexToOwner[_tokenId];\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Making sure transfer is approved\n', '    require(_approved(newOwner, _tokenId));\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '  }\n', '\n', '  /// @param _owner The owner whose social media tokens we are interested in.\n', '  /// @dev This method MUST NEVER be called by smart contract code. First, it&#39;s fairly\n', '  ///  expensive (it walks the entire poos array looking for poos belonging to owner),\n', '  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '  ///  not contract-to-contract calls.\n', '  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\n', '    uint256 tokenCount = balanceOf(_owner);\n', '    if (tokenCount == 0) {\n', '        // Return an empty array\n', '      return new uint256[](0);\n', '    } else {\n', '      uint256[] memory result = new uint256[](tokenCount);\n', '      uint256 totalPoos = totalSupply();\n', '      uint256 resultIndex = 0;\n', '\n', '      uint256 pooId;\n', '      for (pooId = 0; pooId <= totalPoos; pooId++) {\n', '        if (pooIndexToOwner[pooId] == _owner) {\n', '          result[resultIndex] = pooId;\n', '          resultIndex++;\n', '        }\n', '      }\n', '      return result;\n', '    }\n', '  }\n', '\n', '  /// For querying totalSupply of token\n', '  /// @dev Required for ERC-721 compliance.\n', '  function totalSupply() public view returns (uint256 total) {\n', '    return poos.length;\n', '  }\n', '\n', '  /// Owner initates the transfer of the token to another account\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transfer(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    require(_owns(msg.sender, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// Third-party initiates transfer of token from address _from to address _to\n', '  /// @param _from The address for the token to be transferred from.\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    require(_owns(_from, _tokenId));\n', '    require(_approved(_to, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /*** PRIVATE FUNCTIONS ***/\n', '  /// Safety check on _to address to prevent against an unexpected 0x0 default.\n', '  function _addressNotNull(address _to) private pure returns (bool) {\n', '    return _to != address(0);\n', '  }\n', '\n', '  /// For checking approval of transfer for address _to\n', '  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n', '    return pooIndexToApproved[_tokenId] == _to;\n', '  }\n', '\n', '  /// For creating Poo\n', '  function _createPoo(string _name, address _owner, uint256 _price) private {\n', '    Poo memory _poo = Poo({\n', '      name: _name\n', '    });\n', '    uint256 newPooId = poos.push(_poo) - 1;\n', '\n', '    // It&#39;s probably never going to happen, 4 billion tokens are A LOT, but\n', '    // let&#39;s just be 100% sure we never let this happen.\n', '    require(newPooId == uint256(uint32(newPooId)));\n', '\n', '    Birth(newPooId, _name, _owner);\n', '\n', '    pooIndexToPrice[newPooId] = _price;\n', '\n', '    // This will assign ownership, and also emit the Transfer event as\n', '    // per ERC721 draft\n', '    _transfer(address(0), _owner, newPooId);\n', '  }\n', '\n', '  /// Check for token ownership\n', '  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\n', '    return claimant == pooIndexToOwner[_tokenId];\n', '  }\n', '\n', '  /// @dev Assigns ownership of a specific Poo to an address.\n', '  function _transfer(address _from, address _to, uint256 _tokenId) private {\n', '    // Since the number of poos is capped to 2^32 we can&#39;t overflow this\n', '    ownershipTokenCount[_to]++;\n', '    //transfer ownership\n', '    pooIndexToOwner[_tokenId] = _to;\n', '\n', '    // When creating new poos _from is 0x0, but we can&#39;t account that address.\n', '    if (_from != address(0)) {\n', '      ownershipTokenCount[_from]--;\n', '      // clear any previously approved ownership exchange\n', '      delete pooIndexToApproved[_tokenId];\n', '    }\n', '\n', '    // Emit the transfer event.\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '  \n', '    //Generate random number between 0 & max\n', '    uint256 constant private FACTOR =  1157920892373161954235709850086879078532699846656405640394575840079131296399;\n', '    function rand(uint max) constant private returns (uint256 result){\n', '        uint256 factor = FACTOR * 100 / max;\n', '        uint256 lastBlockNumber = block.number - 1;\n', '        uint256 hashVal = uint256(block.blockhash(lastBlockNumber));\n', '    \n', '        return uint256((uint256(hashVal) / factor)) % max;\n', '    }\n', '  \n', '}\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.18; \n', '\n', '\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', 'contract ERC721 {\n', '  // Required methods\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function implementsERC721() public pure returns (bool);\n', '  function ownerOf(uint256 _tokenId) public view returns (address addr);\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '\n', '  // Optional\n', '  // function name() public view returns (string name);\n', '  // function symbol() public view returns (string symbol);\n', '  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n', '  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n', '}\n', '\n', '\n', 'contract CryptoPoosToken is ERC721 {\n', '\n', '  // Modified CryptoCelebs contract\n', '  /*** EVENTS ***/\n', '\n', '  /// @dev The Birth event is fired whenever a new poo comes into existence.\n', '  event Birth(uint256 tokenId, string name, address owner);\n', '\n', '  /// @dev The TokenSold event is fired whenever a token is sold.\n', '  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\n', '\n', '  /// @dev Transfer event as defined in current draft of ERC721. \n', '  ///  ownership is assigned, including births.\n', '  event Transfer(address from, address to, uint256 tokenId);\n', '\n', '  // Triggered on toilet flush\n', '  event ToiletPotChange();\n', '\n', '  /*** CONSTANTS ***/\n', '\n', '  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '  string public constant NAME = "CryptoPoos"; // solhint-disable-line\n', '  string public constant SYMBOL = "CryptoPoosToken"; // solhint-disable-line\n', '\n', '  uint256 private startingPrice = 0.005 ether;\n', '  uint256 private constant PROMO_CREATION_LIMIT = 5000;\n', '  \n', '  // Min price to flush the toilet\n', '  uint256 private minFlushPrice = 0.002 ether;\n', '\n', '\n', '  /*** STORAGE ***/\n', '\n', '  /// @dev A mapping from poo IDs to the address that owns them. All poos have\n', '  ///  some valid owner address.\n', '  mapping (uint256 => address) public pooIndexToOwner;\n', '\n', '  // @dev A mapping from owner address to count of tokens that address owns.\n', '  //  Used internally inside balanceOf() to resolve ownership count.\n', '  mapping (address => uint256) private ownershipTokenCount;\n', '\n', '  /// @dev A mapping from PooIDs to an address that has been approved to call\n', '  ///  transferFrom(). Each poo can only have one approved address for transfer\n', '  ///  at any time. A zero value means no approval is outstanding.\n', '  mapping (uint256 => address) public pooIndexToApproved;\n', '\n', '  // @dev A mapping from PooIDs to the price of the token.\n', '  mapping (uint256 => uint256) private pooIndexToPrice;\n', '  \n', '  // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '  address public ceoAddress;\n', '  address public cooAddress;\n', '  \n', '  uint256 roundCounter;\n', '  address lastFlusher;   // Person that flushed\n', '  uint256 flushedTokenId;   // Poo that got flushed\n', '  uint256 lastPotSize; //Stores last pot size obviously\n', '  uint256 goldenPooId; // Current golden poo id\n', '  uint public lastPurchaseTime; // Tracks time since last purchase\n', '\n', '  /*** DATATYPES ***/\n', '  struct Poo {\n', '    string name;\n', '  }\n', '\n', '  Poo[] private poos;\n', '\n', '  /*** ACCESS MODIFIERS ***/\n', '  /// @dev Access modifier for CEO-only functionality\n', '  modifier onlyCEO() {\n', '    require(msg.sender == ceoAddress);\n', '    _;\n', '  }\n', '\n', '  /// @dev Access modifier for COO-only functionality\n', '  modifier onlyCOO() {\n', '    require(msg.sender == cooAddress);\n', '    _;\n', '  }\n', '\n', '  /// Access modifier for contract owner only functionality\n', '  modifier onlyCLevel() {\n', '    require(\n', '      msg.sender == ceoAddress ||\n', '      msg.sender == cooAddress\n', '    );\n', '    _;\n', '  }\n', '\n', '  /*** CONSTRUCTOR ***/\n', '  function CryptoPoosToken() public {\n', '    ceoAddress = msg.sender;\n', '    cooAddress = msg.sender;\n', '\t\n', '\tcreateContractPoo("1");\n', '\tcreateContractPoo("2");\n', '\tcreateContractPoo("3");\n', '\tcreateContractPoo("4");\n', '\tcreateContractPoo("5");\n', '\tcreateContractPoo("6");\n', '\troundCounter = 1;\n', '  }\n', '\n', '  /*** PUBLIC FUNCTIONS ***/\n', '  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n', '  /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '  ///  clear all approvals.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function approve(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    // Caller must own token.\n', '    require(_owns(msg.sender, _tokenId));\n', '\n', '    pooIndexToApproved[_tokenId] = _to;\n', '\n', '    Approval(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// For querying balance of a particular account\n', '  /// @param _owner The address for balance query\n', '  /// @dev Required for ERC-721 compliance.\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return ownershipTokenCount[_owner];\n', '  }\n', '\n', '  /// @dev Creates a new poo with the given name.\n', '  function createContractPoo(string _name) public onlyCOO {\n', '    _createPoo(_name, address(this), startingPrice);\n', '  }\n', '\n', '  /// @notice Returns all the relevant information about a specific poo.\n', '  /// @param _tokenId The tokenId of the poo of interest.\n', '  function getPoo(uint256 _tokenId) public view returns (\n', '    string pooName,\n', '    uint256 sellingPrice,\n', '    address owner\n', '  ) {\n', '    Poo storage poo = poos[_tokenId];\n', '    pooName = poo.name;\n', '    sellingPrice = pooIndexToPrice[_tokenId];\n', '    owner = pooIndexToOwner[_tokenId];\n', '  }\n', '\n', '  function getRoundDetails() public view returns (\n', '    uint256 currentRound,\n', '\tuint256 currentBalance,\n', '\tuint256 currentGoldenPoo,\n', '\tuint256 lastRoundReward,\n', '    uint256 lastFlushedTokenId,\n', '    address lastRoundFlusher,\n', '\tbool bonusWinChance,\n', '\tuint256 lowestFlushPrice\n', '  ) {\n', '\tcurrentRound = roundCounter;\n', '\tcurrentBalance = this.balance;\n', '\tcurrentGoldenPoo = goldenPooId;\n', '\tlastRoundReward = lastPotSize;\n', '\tlastFlushedTokenId = flushedTokenId;\n', '\tlastRoundFlusher = lastFlusher;\n', '\tbonusWinChance = _increaseWinPotChance();\n', '\tlowestFlushPrice = minFlushPrice;\n', '  }\n', '\n', '  function implementsERC721() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function name() public pure returns (string) {\n', '    return NAME;\n', '  }\n', '\n', '  /// For querying owner of token\n', '  /// @param _tokenId The tokenID for owner inquiry\n', '  /// @dev Required for ERC-721 compliance.\n', '  function ownerOf(uint256 _tokenId)\n', '    public\n', '    view\n', '    returns (address owner)\n', '  {\n', '    owner = pooIndexToOwner[_tokenId];\n', '    require(owner != address(0));\n', '  }\n', '\n', '   function donate() public payable {\n', '\trequire(msg.value >= 0.001 ether);\n', '   }\n', '\n', '\n', '  // Allows someone to send ether and obtain the token\n', '  function purchase(uint256 _tokenId) public payable {\n', '    address oldOwner = pooIndexToOwner[_tokenId];\n', '    address newOwner = msg.sender;\n', '\n', '    uint256 sellingPrice = pooIndexToPrice[_tokenId];\n', '\n', '    // Making sure token owner is not sending to self\n', '    require(oldOwner != newOwner);\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Making sure sent amount is greater than or equal to the sellingPrice\n', '    require(msg.value >= sellingPrice);\n', '\n', '    // 62% to previous owner\n', '    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 62), 100));\n', '  \n', '    // 8% to the jew\n', '    ceoAddress.transfer(uint256(SafeMath.div(SafeMath.mul(sellingPrice, 8), 100)));\n', '\n', '\t// 30% goes to the pot\n', '\n', '    // Next token price is double\n', '     pooIndexToPrice[_tokenId] = uint256(SafeMath.mul(sellingPrice, 2));\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '\t\n', '    // Pay previous tokenOwner if owner is not contract\n', '    if (oldOwner != address(this)) {\n', '      oldOwner.transfer(payment); \n', '    }\n', '\n', '    _checkToiletFlush(false, _tokenId); \n', '\tlastPurchaseTime = now;\n', '\tToiletPotChange();\n', '  }\n', '  \n', '  // User is trying to flush the toilet. See if they succeed\n', '  function tryFlush() public payable {\n', '\n', '        // Make sure they are sending min flush price\n', '        require(msg.value >= minFlushPrice);\n', '\n', '\t\t// Jew takes 10% of manual flush attempt. Stops dat spam....\n', '\t\tceoAddress.transfer(uint256(SafeMath.div(SafeMath.mul(msg.value, 10), 100)));\n', '\n', '        _checkToiletFlush(true, 0);\n', '\t\tlastPurchaseTime = now;\n', '\t\tToiletPotChange();\n', '  }\n', '  \n', '  // If manual flush attempt, the user has a chance to flush their own poo\n', ' function _checkToiletFlush(bool _manualFlush, uint256 _purchasedTokenId) private {\n', '     \n', '    uint256 winningChance = 25;\n', '\n', '\t// We are calling manual flush option, so the chance of winning is less\n', '\tif(_manualFlush){\n', '\t\twinningChance = 50;\n', '\t}else if(_purchasedTokenId == goldenPooId){\n', '\t\t// If buying golden poo, and is not a manual flush, increase chance of winning!\n', '\t\twinningChance = uint256(SafeMath.div(SafeMath.mul(winningChance, 90), 100));\n', '\t}\n', '\n', '\t// Check if we are trippling chance to win on next flush attempt/poop purchase\n', '\tif(_increaseWinPotChance()){\n', '\t\twinningChance = uint256(SafeMath.div(winningChance,3));\n', '\t}\n', '     \n', '    // Check if owner owns a poo. If not, their chance of winning is lower\n', '    if(ownershipTokenCount[msg.sender] == 0){\n', '        winningChance = uint256(SafeMath.mul(winningChance,2));\n', '    }\n', '     \n', '    uint256 flushPooIndex = rand(winningChance);\n', '    \n', '    if( (flushPooIndex < 6) && (flushPooIndex != goldenPooId) &&  (msg.sender != pooIndexToOwner[flushPooIndex])  ){\n', '      lastFlusher = msg.sender;\n', '\t  flushedTokenId = flushPooIndex;\n', '      \n', '      _transfer(pooIndexToOwner[flushPooIndex],address(this),flushPooIndex);\n', '      pooIndexToPrice[flushPooIndex] = startingPrice;\n', '      \n', '      // Leave 5% behind for next pot\n', '\t  uint256 reward = uint256(SafeMath.div(SafeMath.mul(this.balance, 95), 100));\n', '\t  lastPotSize = reward;\n', '\n', '      msg.sender.transfer(reward); // Send reward to purchaser\n', '\t  goldenPooId = rand(6);// There is a new golden poo in town.\n', '\n', '\t  roundCounter += 1; // Keeps track of how many flushes\n', '    }\n', '  }\n', '\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\n', '    return pooIndexToPrice[_tokenId];\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '  /// @param _newCEO The address of the new CEO\n', '  function setCEO(address _newCEO) public onlyCEO {\n', '    require(_newCEO != address(0));\n', '\n', '    ceoAddress = _newCEO;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\n', '  /// @param _newCOO The address of the new COO\n', '  function setCOO(address _newCOO) public onlyCEO {\n', '    require(_newCOO != address(0));\n', '\n', '    cooAddress = _newCOO;\n', '  }\n', '\n', '  // If 2 hours elapsed since last purchase, increase chance of winning pot.\n', '  function _increaseWinPotChance() constant private returns (bool) {\n', '    if (now >= lastPurchaseTime + 120 minutes) {\n', '        // 120 minutes has elapsed from last purchased time\n', '        return true;\n', '    }\n', '    return false;\n', '}\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function symbol() public pure returns (string) {\n', '    return SYMBOL;\n', '  }\n', '\n', '  /// @notice Allow pre-approved user to take ownership of a token\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    address newOwner = msg.sender;\n', '    address oldOwner = pooIndexToOwner[_tokenId];\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Making sure transfer is approved\n', '    require(_approved(newOwner, _tokenId));\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '  }\n', '\n', '  /// @param _owner The owner whose social media tokens we are interested in.\n', "  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n", '  ///  expensive (it walks the entire poos array looking for poos belonging to owner),\n', '  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '  ///  not contract-to-contract calls.\n', '  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\n', '    uint256 tokenCount = balanceOf(_owner);\n', '    if (tokenCount == 0) {\n', '        // Return an empty array\n', '      return new uint256[](0);\n', '    } else {\n', '      uint256[] memory result = new uint256[](tokenCount);\n', '      uint256 totalPoos = totalSupply();\n', '      uint256 resultIndex = 0;\n', '\n', '      uint256 pooId;\n', '      for (pooId = 0; pooId <= totalPoos; pooId++) {\n', '        if (pooIndexToOwner[pooId] == _owner) {\n', '          result[resultIndex] = pooId;\n', '          resultIndex++;\n', '        }\n', '      }\n', '      return result;\n', '    }\n', '  }\n', '\n', '  /// For querying totalSupply of token\n', '  /// @dev Required for ERC-721 compliance.\n', '  function totalSupply() public view returns (uint256 total) {\n', '    return poos.length;\n', '  }\n', '\n', '  /// Owner initates the transfer of the token to another account\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transfer(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    require(_owns(msg.sender, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// Third-party initiates transfer of token from address _from to address _to\n', '  /// @param _from The address for the token to be transferred from.\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    require(_owns(_from, _tokenId));\n', '    require(_approved(_to, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /*** PRIVATE FUNCTIONS ***/\n', '  /// Safety check on _to address to prevent against an unexpected 0x0 default.\n', '  function _addressNotNull(address _to) private pure returns (bool) {\n', '    return _to != address(0);\n', '  }\n', '\n', '  /// For checking approval of transfer for address _to\n', '  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n', '    return pooIndexToApproved[_tokenId] == _to;\n', '  }\n', '\n', '  /// For creating Poo\n', '  function _createPoo(string _name, address _owner, uint256 _price) private {\n', '    Poo memory _poo = Poo({\n', '      name: _name\n', '    });\n', '    uint256 newPooId = poos.push(_poo) - 1;\n', '\n', "    // It's probably never going to happen, 4 billion tokens are A LOT, but\n", "    // let's just be 100% sure we never let this happen.\n", '    require(newPooId == uint256(uint32(newPooId)));\n', '\n', '    Birth(newPooId, _name, _owner);\n', '\n', '    pooIndexToPrice[newPooId] = _price;\n', '\n', '    // This will assign ownership, and also emit the Transfer event as\n', '    // per ERC721 draft\n', '    _transfer(address(0), _owner, newPooId);\n', '  }\n', '\n', '  /// Check for token ownership\n', '  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\n', '    return claimant == pooIndexToOwner[_tokenId];\n', '  }\n', '\n', '  /// @dev Assigns ownership of a specific Poo to an address.\n', '  function _transfer(address _from, address _to, uint256 _tokenId) private {\n', "    // Since the number of poos is capped to 2^32 we can't overflow this\n", '    ownershipTokenCount[_to]++;\n', '    //transfer ownership\n', '    pooIndexToOwner[_tokenId] = _to;\n', '\n', "    // When creating new poos _from is 0x0, but we can't account that address.\n", '    if (_from != address(0)) {\n', '      ownershipTokenCount[_from]--;\n', '      // clear any previously approved ownership exchange\n', '      delete pooIndexToApproved[_tokenId];\n', '    }\n', '\n', '    // Emit the transfer event.\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '  \n', '    //Generate random number between 0 & max\n', '    uint256 constant private FACTOR =  1157920892373161954235709850086879078532699846656405640394575840079131296399;\n', '    function rand(uint max) constant private returns (uint256 result){\n', '        uint256 factor = FACTOR * 100 / max;\n', '        uint256 lastBlockNumber = block.number - 1;\n', '        uint256 hashVal = uint256(block.blockhash(lastBlockNumber));\n', '    \n', '        return uint256((uint256(hashVal) / factor)) % max;\n', '    }\n', '  \n', '}\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
