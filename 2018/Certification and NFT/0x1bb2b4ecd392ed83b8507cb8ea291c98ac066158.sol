['// ---Trixchain Powered by POA Network---\n', 'pragma solidity ^0.4.11;\n', '/*\n', 'Name         : Trixchain\n', 'Symbol       : TRIX\n', 'Total Supply : 1.000.000.000.000 TRIX\n', 'Decimals     : 18 \n', 'Contract     : 0x1bb2b4ecd392ed83b8507cb8ea291c98ac066158\n', '\n', 'Chat Group   : https://t.me/joinchat/Jc2Vrkb0C11mxRmFnVploQ\n', 'Channel      : https://t.me/trixchainchannel\n', '\n', 'TOKENSALE DETAILS\n', '\n', 'Total Supply ---------: 1.000.000.000.000 TRIX\n', 'Tokensale             : 250.000.000.000 TRIX\n', 'Future Project -------: 250.000.000.000 TRIX\n', 'Foundation            : 75.000.000.000 TRIX \n', 'Team -----------------: 25.000.000.000 TRIX \n', 'Monthly Holder Reward : 400.000.000.000 TRIX \n', '\n', '*With Our Mecanism , All TRIX Holder will get monthly reward for more than 20 Years* \n', 'After Tokensale Finished TRIX will list on exchange, our first target TRIX will list on Okex , Hotbit , Cryptopia , Mercatox , idex \n', '\n', 'Official website , Official twitter and official twitter will launch on December 2018 \n', '-----------------------------\n', 'TOKENSALE PHASE 1 \n', 'TOKENSALE CONTRACT ADDRESS for PHASE 1 \n', '"  0x5df18eF4055c807082797b44A09323e31e66AeF6  "\n', '\n', 'DATE : Oct 3,2018  to  Nov 3,2018\n', 'Rate 1 ETH = 50.000.000 TRIX + Bonus 100%\n', 'No Minimum Contribution\n', 'How to Contribute : \n', 'Use Myetherwallet :\n', 'Send ETH to TOKENSALE CONTRACT ADDRESS for PHASE 1 \n', 'Example : Send 1 ETH to 0x5df18eF4055c807082797b44A09323e31e66AeF6 \n', 'Gas Price always check on ethgasstation.info\n', 'Gas Limits : 150.000\n', 'Data : 0xa6f2ae3a\n', 'Warning You Should input the Data "0xa6f2ae3a" or you will fail send the transaction \n', 'Use Metamask :\n', 'Open Your Metamask and access the link below :\n', 'https://wizard.oracles.org/invest?addr=0x5df18eF4055c807082797b44A09323e31e66AeF6&networkID=1\n', '\n', '------------------------------\n', '\n', 'TOKENSALE PHASE 2\n', 'TOKENSALE CONTRACT ADDRESS for PHASE 2 \n', '"  0xba2D53ef55876F2247FBAA669c10bf9F2800D61E  "\n', '\n', 'DATE : Nov 4,2018 to Dec 15,2018 \n', 'Rate 1 ETH = 50.000.000 TRIX + Bonus 50%\n', 'No Minimum Contribution\n', 'How to Contribute : \n', 'Use Myetherwallet :\n', 'Send ETH to TOKENSALE CONTRACT ADDRESS for PHASE 2 \n', 'Example : Send 1 ETH to 0xba2D53ef55876F2247FBAA669c10bf9F2800D61E \n', 'Gas Price always check on ethgasstation.info\n', 'Gas Limits : 150.000\n', 'Data : 0xa6f2ae3a\n', 'Warning You Should input the Data "0xa6f2ae3a" or you will fail send the transaction \n', 'Use Metamask :\n', 'Open Your Metamask and access the link below :\n', 'https://wizard.oracles.org/invest?addr=0xba2D53ef55876F2247FBAA669c10bf9F2800D61E&networkID=1\n', '\n', '------------------------------\n', '\n', 'TOKENSALE PHASE 3 \n', 'TOKENSALE CONTRACT ADDRESS for PHASE 3 \n', '"  0x1e1B917E8F1F882f481A1c7CFB0a5b1C75946Cef  "\n', '\n', 'DATE : Dec 16,2018  to  Jan 30,2019\n', 'Rate 1 ETH = 50.000.000 TRIX (no bonus)\n', 'No Minimum Contribution\n', 'How to Contribute : \n', 'Use Myetherwallet :\n', 'Send ETH to TOKENSALE CONTRACT ADDRESS for PHASE 3 \n', 'Example : Send 1 ETH to 0x1e1B917E8F1F882f481A1c7CFB0a5b1C75946Cef \n', 'Gas Price always check on ethgasstation.info\n', 'Gas Limits : 150.000\n', 'Data : 0xa6f2ae3a\n', 'Warning You Should input the Data "0xa6f2ae3a" or you will fail send the transaction \n', 'Use Metamask :\n', 'Open Your Metamask and access the link below :\n', 'https://wizard.oracles.org/invest?addr=0x1e1B917E8F1F882f481A1c7CFB0a5b1C75946Cef&networkID=1\n', '\n', '------------------------------\n', '\n', '*/\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, SafeMath {\n', '\n', '  /* Token supply got increased and a new owner received these tokens */\n', '  event Minted(address receiver, uint amount);\n', '\n', '  /* Actual balances of token holders */\n', '  mapping(address => uint) balances;\n', '\n', '  /* approve() allowances */\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  /* Interface declaration */\n', '  function isToken() public constant returns (bool weAre) {\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '    uint _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    balances[_from] = safeSub(balances[_from], _value);\n', '    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint _value) returns (bool success) {\n', '\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract UpgradeAgent {\n', '\n', '  uint public originalSupply;\n', '\n', '  function isUpgradeAgent() public constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function upgradeFrom(address _from, uint256 _value) public;\n', '\n', '}\n', '\n', '\n', '/**\n', ' * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n', ' *\n', ' * First envisioned by Golem and Lunyr projects.\n', ' */\n', 'contract UpgradeableToken is StandardToken {\n', '\n', '  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n', '  address public upgradeMaster;\n', '\n', '  /** The next contract where the tokens will be migrated. */\n', '  UpgradeAgent public upgradeAgent;\n', '\n', '  /** How many tokens we have upgraded by now. */\n', '  uint256 public totalUpgraded;\n', '\n', '  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n', '\n', '  /**\n', '   * Somebody has upgraded some of his tokens.\n', '   */\n', '  event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  /**\n', '   * New upgrade agent available.\n', '   */\n', '  event UpgradeAgentSet(address agent);\n', '\n', '  /**\n', '   * Do not allow construction without upgrade master set.\n', '   */\n', '  function UpgradeableToken(address _upgradeMaster) {\n', '    upgradeMaster = _upgradeMaster;\n', '  }\n', '\n', '  /**\n', '   * Allow the token holder to upgrade some of their tokens to a new contract.\n', '   */\n', '  function upgrade(uint256 value) public {\n', '\n', '      UpgradeState state = getUpgradeState();\n', '      if(!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {\n', '        // Called in a bad state\n', '        throw;\n', '      }\n', '\n', '      // Validate input value.\n', '      if (value == 0) throw;\n', '\n', '      balances[msg.sender] = safeSub(balances[msg.sender], value);\n', '\n', '      // Take tokens out from circulation\n', '      totalSupply = safeSub(totalSupply, value);\n', '      totalUpgraded = safeAdd(totalUpgraded, value);\n', '\n', '      // Upgrade agent reissues the tokens\n', '      upgradeAgent.upgradeFrom(msg.sender, value);\n', '      Upgrade(msg.sender, upgradeAgent, value);\n', '  }\n', '\n', '  /**\n', '   * Set an upgrade agent that handles\n', '   */\n', '  function setUpgradeAgent(address agent) external {\n', '\n', '      if(!canUpgrade()) {\n', '        // The token is not yet in a state that we could think upgrading\n', '        throw;\n', '      }\n', '\n', '      if (agent == 0x0) throw;\n', '      // Only a master can designate the next agent\n', '      if (msg.sender != upgradeMaster) throw;\n', '      // Upgrade has already begun for an agent\n', '      if (getUpgradeState() == UpgradeState.Upgrading) throw;\n', '\n', '      upgradeAgent = UpgradeAgent(agent);\n', '\n', '      // Bad interface\n', '      if(!upgradeAgent.isUpgradeAgent()) throw;\n', '      // Make sure that token supplies match in source and target\n', '      if (upgradeAgent.originalSupply() != totalSupply) throw;\n', '\n', '      UpgradeAgentSet(upgradeAgent);\n', '  }\n', '\n', '  /**\n', '   * Get the state of the token upgrade.\n', '   */\n', '  function getUpgradeState() public constant returns(UpgradeState) {\n', '    if(!canUpgrade()) return UpgradeState.NotAllowed;\n', '    else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n', '    else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n', '    else return UpgradeState.Upgrading;\n', '  }\n', '\n', '  /**\n', '   * Change the upgrade master.\n', '   *\n', '   * This allows us to set a new owner for the upgrade mechanism.\n', '   */\n', '  function setUpgradeMaster(address master) public {\n', '      if (master == 0x0) throw;\n', '      if (msg.sender != upgradeMaster) throw;\n', '      upgradeMaster = master;\n', '  }\n', '\n', '  /**\n', '   * Child contract can enable to provide the condition when the upgrade can begun.\n', '   */\n', '  function canUpgrade() public constant returns(bool) {\n', '     return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * Define interface for releasing the token transfer after a successful crowdsale.\n', ' */\n', 'contract ReleasableToken is ERC20, Ownable {\n', '\n', '  /* The finalizer contract that allows unlift the transfer limits on this token */\n', '  address public releaseAgent;\n', '\n', '  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n', '  bool public released = false;\n', '\n', '  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n', '  mapping (address => bool) public transferAgents;\n', '\n', '  /**\n', '   * Limit token transfer until the crowdsale is over.\n', '   *\n', '   */\n', '  modifier canTransfer(address _sender) {\n', '\n', '    if(!released) {\n', '        if(!transferAgents[_sender]) {\n', '            throw;\n', '        }\n', '    }\n', '\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Set the contract that can call release and make the token transferable.\n', '   *\n', '   * Design choice. Allow reset the release agent to fix fat finger mistakes.\n', '   */\n', '  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n', '\n', '    releaseAgent = addr;\n', '  }\n', '\n', '  /**\n', '   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n', '   */\n', '  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n', '    transferAgents[addr] = state;\n', '  }\n', '\n', '  /**\n', '   * One way function to release the tokens to the wild.\n', '   *\n', '   * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\n', '   */\n', '  function releaseTokenTransfer() public onlyReleaseAgent {\n', '    released = true;\n', '  }\n', '\n', '  /** The function can be called only before or after the tokens have been releasesd */\n', '  modifier inReleaseState(bool releaseState) {\n', '    if(releaseState != released) {\n', '        throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '  /** The function can be called only by a whitelisted release agent. */\n', '  modifier onlyReleaseAgent() {\n', '    if(msg.sender != releaseAgent) {\n', '        throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {\n', '    // Call StandardToken.transfer()\n', '   return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {\n', '    // Call StandardToken.transferForm()\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '}\n', '\n', 'library SafeMathLibExt {\n', '\n', '  function times(uint a, uint b) returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function divides(uint a, uint b) returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function minus(uint a, uint b) returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function plus(uint a, uint b) returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * A token that can increase its supply by another contract.\n', ' *\n', ' * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\n', ' * Only mint agents, contracts whitelisted by owner, can mint new tokens.\n', ' *\n', ' */\n', 'contract MintableTokenExt is StandardToken, Ownable {\n', '\n', '  using SafeMathLibExt for uint;\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  /** List of agents that are allowed to create new tokens */\n', '  mapping (address => bool) public mintAgents;\n', '\n', '  event MintingAgentChanged(address addr, bool state  );\n', '\n', '  /** inPercentageUnit is percents of tokens multiplied to 10 up to percents decimals.\n', '  * For example, for reserved tokens in percents 2.54%\n', '  * inPercentageUnit = 254\n', '  * inPercentageDecimals = 2\n', '  */\n', '  struct ReservedTokensData {\n', '    uint inTokens;\n', '    uint inPercentageUnit;\n', '    uint inPercentageDecimals;\n', '    bool isReserved;\n', '    bool isDistributed;\n', '  }\n', '\n', '  mapping (address => ReservedTokensData) public reservedTokensList;\n', '  address[] public reservedTokensDestinations;\n', '  uint public reservedTokensDestinationsLen = 0;\n', '  bool reservedTokensDestinationsAreSet = false;\n', '\n', '  modifier onlyMintAgent() {\n', '    // Only crowdsale contracts are allowed to mint new tokens\n', '    if(!mintAgents[msg.sender]) {\n', '        throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '  /** Make sure we are not done yet. */\n', '  modifier canMint() {\n', '    if(mintingFinished) throw;\n', '    _;\n', '  }\n', '\n', '  function finalizeReservedAddress(address addr) public onlyMintAgent canMint {\n', '    ReservedTokensData storage reservedTokensData = reservedTokensList[addr];\n', '    reservedTokensData.isDistributed = true;\n', '  }\n', '\n', '  function isAddressReserved(address addr) public constant returns (bool isReserved) {\n', '    return reservedTokensList[addr].isReserved;\n', '  }\n', '\n', '  function areTokensDistributedForAddress(address addr) public constant returns (bool isDistributed) {\n', '    return reservedTokensList[addr].isDistributed;\n', '  }\n', '\n', '  function getReservedTokens(address addr) public constant returns (uint inTokens) {\n', '    return reservedTokensList[addr].inTokens;\n', '  }\n', '\n', '  function getReservedPercentageUnit(address addr) public constant returns (uint inPercentageUnit) {\n', '    return reservedTokensList[addr].inPercentageUnit;\n', '  }\n', '\n', '  function getReservedPercentageDecimals(address addr) public constant returns (uint inPercentageDecimals) {\n', '    return reservedTokensList[addr].inPercentageDecimals;\n', '  }\n', '\n', '  function setReservedTokensListMultiple(\n', '    address[] addrs, \n', '    uint[] inTokens, \n', '    uint[] inPercentageUnit, \n', '    uint[] inPercentageDecimals\n', '  ) public canMint onlyOwner {\n', '    assert(!reservedTokensDestinationsAreSet);\n', '    assert(addrs.length == inTokens.length);\n', '    assert(inTokens.length == inPercentageUnit.length);\n', '    assert(inPercentageUnit.length == inPercentageDecimals.length);\n', '    for (uint iterator = 0; iterator < addrs.length; iterator++) {\n', '      if (addrs[iterator] != address(0)) {\n', '        setReservedTokensList(addrs[iterator], inTokens[iterator], inPercentageUnit[iterator], inPercentageDecimals[iterator]);\n', '      }\n', '    }\n', '    reservedTokensDestinationsAreSet = true;\n', '  }\n', '\n', '  /**\n', '   * Create new tokens and allocate them to an address..\n', '   *\n', '   * Only callably by a crowdsale contract (mint agent).\n', '   */\n', '  function mint(address receiver, uint amount) onlyMintAgent canMint public {\n', '    totalSupply = totalSupply.plus(amount);\n', '    balances[receiver] = balances[receiver].plus(amount);\n', '\n', '    // This will make the mint transaction apper in EtherScan.io\n', '    // We can remove this after there is a standardized minting event\n', '    Transfer(0, receiver, amount);\n', '  }\n', '\n', '  /**\n', '   * Owner can allow a crowdsale contract to mint new tokens.\n', '   */\n', '  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n', '    mintAgents[addr] = state;\n', '    MintingAgentChanged(addr, state);\n', '  }\n', '\n', '  function setReservedTokensList(address addr, uint inTokens, uint inPercentageUnit, uint inPercentageDecimals) private canMint onlyOwner {\n', '    assert(addr != address(0));\n', '    if (!isAddressReserved(addr)) {\n', '      reservedTokensDestinations.push(addr);\n', '      reservedTokensDestinationsLen++;\n', '    }\n', '\n', '    reservedTokensList[addr] = ReservedTokensData({\n', '      inTokens: inTokens, \n', '      inPercentageUnit: inPercentageUnit, \n', '      inPercentageDecimals: inPercentageDecimals,\n', '      isReserved: true,\n', '      isDistributed: false\n', '    });\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * A crowdsaled token.\n', ' *\n', ' * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\n', ' *\n', ' * - The token transfer() is disabled until the crowdsale is over\n', ' * - The token contract gives an opt-in upgrade path to a new contract\n', ' * - The same token can be part of several crowdsales through approve() mechanism\n', ' * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\n', ' *\n', ' */\n', 'contract CrowdsaleTokenExt is ReleasableToken, MintableTokenExt, UpgradeableToken {\n', '\n', '  /** Name and symbol were updated. */\n', '  event UpdatedTokenInformation(string newName, string newSymbol);\n', '\n', '  event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '\n', '  string public name;\n', '\n', '  string public symbol;\n', '\n', '  uint public decimals;\n', '\n', '  /* Minimum ammount of tokens every buyer can buy. */\n', '  uint public minCap;\n', '\n', '  /**\n', '   * Construct the token.\n', '   *\n', '   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\n', '   *\n', '   * @param _name Token name\n', '   * @param _symbol Token symbol - should be all caps\n', '   * @param _initialSupply How many tokens we start with\n', '   * @param _decimals Number of decimal places\n', '   * @param _mintable Are new tokens created over the crowdsale or do we distribute only the initial supply? Note that when the token becomes transferable the minting always ends.\n', '   */\n', '  function CrowdsaleTokenExt(string _name, string _symbol, uint _initialSupply, uint _decimals, bool _mintable, uint _globalMinCap)\n', '    UpgradeableToken(msg.sender) {\n', '\n', '    // Create any address, can be transferred\n', '    // to team multisig via changeOwner(),\n', '    // also remember to call setUpgradeMaster()\n', '    owner = msg.sender;\n', '\n', '    name = _name;\n', '    symbol = _symbol;\n', '\n', '    totalSupply = _initialSupply;\n', '\n', '    decimals = _decimals;\n', '\n', '    minCap = _globalMinCap;\n', '\n', '    // Create initially all balance on the team multisig\n', '    balances[owner] = totalSupply;\n', '\n', '    if(totalSupply > 0) {\n', '      Minted(owner, totalSupply);\n', '    }\n', '\n', '    // No more new supply allowed after the token creation\n', '    if(!_mintable) {\n', '      mintingFinished = true;\n', '      if(totalSupply == 0) {\n', '        throw; // Cannot create a token without supply and no minting\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * When token is released to be transferable, enforce no new tokens can be created.\n', '   */\n', '  function releaseTokenTransfer() public onlyReleaseAgent {\n', '    mintingFinished = true;\n', '    super.releaseTokenTransfer();\n', '  }\n', '\n', '  /**\n', '   * Allow upgrade agent functionality kick in only if the crowdsale was success.\n', '   */\n', '  function canUpgrade() public constant returns(bool) {\n', '    return released && super.canUpgrade();\n', '  }\n', '\n', '  /**\n', '   * Owner can update token information here.\n', '   *\n', '   * It is often useful to conceal the actual token association, until\n', '   * the token operations, like central issuance or reissuance have been completed.\n', '   *\n', '   * This function allows the token owner to rename the token after the operations\n', '   * have been completed and then point the audience to use the token contract.\n', '   */\n', '  function setTokenInformation(string _name, string _symbol) onlyOwner {\n', '    name = _name;\n', '    symbol = _symbol;\n', '\n', '    UpdatedTokenInformation(name, symbol);\n', '  }\n', '\n', '  /**\n', '   * Claim tokens that were accidentally sent to this contract.\n', '   *\n', '   * @param _token The address of the token contract that you want to recover.\n', '   */\n', '  function claimTokens(address _token) public onlyOwner {\n', '    require(_token != address(0));\n', '\n', '    ERC20 token = ERC20(_token);\n', '    uint balance = token.balanceOf(this);\n', '    token.transfer(owner, balance);\n', '\n', '    ClaimedTokens(_token, owner, balance);\n', '  }\n', '\n', '}']
['// ---Trixchain Powered by POA Network---\n', 'pragma solidity ^0.4.11;\n', '/*\n', 'Name         : Trixchain\n', 'Symbol       : TRIX\n', 'Total Supply : 1.000.000.000.000 TRIX\n', 'Decimals     : 18 \n', 'Contract     : 0x1bb2b4ecd392ed83b8507cb8ea291c98ac066158\n', '\n', 'Chat Group   : https://t.me/joinchat/Jc2Vrkb0C11mxRmFnVploQ\n', 'Channel      : https://t.me/trixchainchannel\n', '\n', 'TOKENSALE DETAILS\n', '\n', 'Total Supply ---------: 1.000.000.000.000 TRIX\n', 'Tokensale             : 250.000.000.000 TRIX\n', 'Future Project -------: 250.000.000.000 TRIX\n', 'Foundation            : 75.000.000.000 TRIX \n', 'Team -----------------: 25.000.000.000 TRIX \n', 'Monthly Holder Reward : 400.000.000.000 TRIX \n', '\n', '*With Our Mecanism , All TRIX Holder will get monthly reward for more than 20 Years* \n', 'After Tokensale Finished TRIX will list on exchange, our first target TRIX will list on Okex , Hotbit , Cryptopia , Mercatox , idex \n', '\n', 'Official website , Official twitter and official twitter will launch on December 2018 \n', '-----------------------------\n', 'TOKENSALE PHASE 1 \n', 'TOKENSALE CONTRACT ADDRESS for PHASE 1 \n', '"  0x5df18eF4055c807082797b44A09323e31e66AeF6  "\n', '\n', 'DATE : Oct 3,2018  to  Nov 3,2018\n', 'Rate 1 ETH = 50.000.000 TRIX + Bonus 100%\n', 'No Minimum Contribution\n', 'How to Contribute : \n', 'Use Myetherwallet :\n', 'Send ETH to TOKENSALE CONTRACT ADDRESS for PHASE 1 \n', 'Example : Send 1 ETH to 0x5df18eF4055c807082797b44A09323e31e66AeF6 \n', 'Gas Price always check on ethgasstation.info\n', 'Gas Limits : 150.000\n', 'Data : 0xa6f2ae3a\n', 'Warning You Should input the Data "0xa6f2ae3a" or you will fail send the transaction \n', 'Use Metamask :\n', 'Open Your Metamask and access the link below :\n', 'https://wizard.oracles.org/invest?addr=0x5df18eF4055c807082797b44A09323e31e66AeF6&networkID=1\n', '\n', '------------------------------\n', '\n', 'TOKENSALE PHASE 2\n', 'TOKENSALE CONTRACT ADDRESS for PHASE 2 \n', '"  0xba2D53ef55876F2247FBAA669c10bf9F2800D61E  "\n', '\n', 'DATE : Nov 4,2018 to Dec 15,2018 \n', 'Rate 1 ETH = 50.000.000 TRIX + Bonus 50%\n', 'No Minimum Contribution\n', 'How to Contribute : \n', 'Use Myetherwallet :\n', 'Send ETH to TOKENSALE CONTRACT ADDRESS for PHASE 2 \n', 'Example : Send 1 ETH to 0xba2D53ef55876F2247FBAA669c10bf9F2800D61E \n', 'Gas Price always check on ethgasstation.info\n', 'Gas Limits : 150.000\n', 'Data : 0xa6f2ae3a\n', 'Warning You Should input the Data "0xa6f2ae3a" or you will fail send the transaction \n', 'Use Metamask :\n', 'Open Your Metamask and access the link below :\n', 'https://wizard.oracles.org/invest?addr=0xba2D53ef55876F2247FBAA669c10bf9F2800D61E&networkID=1\n', '\n', '------------------------------\n', '\n', 'TOKENSALE PHASE 3 \n', 'TOKENSALE CONTRACT ADDRESS for PHASE 3 \n', '"  0x1e1B917E8F1F882f481A1c7CFB0a5b1C75946Cef  "\n', '\n', 'DATE : Dec 16,2018  to  Jan 30,2019\n', 'Rate 1 ETH = 50.000.000 TRIX (no bonus)\n', 'No Minimum Contribution\n', 'How to Contribute : \n', 'Use Myetherwallet :\n', 'Send ETH to TOKENSALE CONTRACT ADDRESS for PHASE 3 \n', 'Example : Send 1 ETH to 0x1e1B917E8F1F882f481A1c7CFB0a5b1C75946Cef \n', 'Gas Price always check on ethgasstation.info\n', 'Gas Limits : 150.000\n', 'Data : 0xa6f2ae3a\n', 'Warning You Should input the Data "0xa6f2ae3a" or you will fail send the transaction \n', 'Use Metamask :\n', 'Open Your Metamask and access the link below :\n', 'https://wizard.oracles.org/invest?addr=0x1e1B917E8F1F882f481A1c7CFB0a5b1C75946Cef&networkID=1\n', '\n', '------------------------------\n', '\n', '*/\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, SafeMath {\n', '\n', '  /* Token supply got increased and a new owner received these tokens */\n', '  event Minted(address receiver, uint amount);\n', '\n', '  /* Actual balances of token holders */\n', '  mapping(address => uint) balances;\n', '\n', '  /* approve() allowances */\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  /* Interface declaration */\n', '  function isToken() public constant returns (bool weAre) {\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '    uint _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    balances[_from] = safeSub(balances[_from], _value);\n', '    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint _value) returns (bool success) {\n', '\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract UpgradeAgent {\n', '\n', '  uint public originalSupply;\n', '\n', '  function isUpgradeAgent() public constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function upgradeFrom(address _from, uint256 _value) public;\n', '\n', '}\n', '\n', '\n', '/**\n', ' * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n', ' *\n', ' * First envisioned by Golem and Lunyr projects.\n', ' */\n', 'contract UpgradeableToken is StandardToken {\n', '\n', '  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n', '  address public upgradeMaster;\n', '\n', '  /** The next contract where the tokens will be migrated. */\n', '  UpgradeAgent public upgradeAgent;\n', '\n', '  /** How many tokens we have upgraded by now. */\n', '  uint256 public totalUpgraded;\n', '\n', '  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n', '\n', '  /**\n', '   * Somebody has upgraded some of his tokens.\n', '   */\n', '  event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  /**\n', '   * New upgrade agent available.\n', '   */\n', '  event UpgradeAgentSet(address agent);\n', '\n', '  /**\n', '   * Do not allow construction without upgrade master set.\n', '   */\n', '  function UpgradeableToken(address _upgradeMaster) {\n', '    upgradeMaster = _upgradeMaster;\n', '  }\n', '\n', '  /**\n', '   * Allow the token holder to upgrade some of their tokens to a new contract.\n', '   */\n', '  function upgrade(uint256 value) public {\n', '\n', '      UpgradeState state = getUpgradeState();\n', '      if(!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {\n', '        // Called in a bad state\n', '        throw;\n', '      }\n', '\n', '      // Validate input value.\n', '      if (value == 0) throw;\n', '\n', '      balances[msg.sender] = safeSub(balances[msg.sender], value);\n', '\n', '      // Take tokens out from circulation\n', '      totalSupply = safeSub(totalSupply, value);\n', '      totalUpgraded = safeAdd(totalUpgraded, value);\n', '\n', '      // Upgrade agent reissues the tokens\n', '      upgradeAgent.upgradeFrom(msg.sender, value);\n', '      Upgrade(msg.sender, upgradeAgent, value);\n', '  }\n', '\n', '  /**\n', '   * Set an upgrade agent that handles\n', '   */\n', '  function setUpgradeAgent(address agent) external {\n', '\n', '      if(!canUpgrade()) {\n', '        // The token is not yet in a state that we could think upgrading\n', '        throw;\n', '      }\n', '\n', '      if (agent == 0x0) throw;\n', '      // Only a master can designate the next agent\n', '      if (msg.sender != upgradeMaster) throw;\n', '      // Upgrade has already begun for an agent\n', '      if (getUpgradeState() == UpgradeState.Upgrading) throw;\n', '\n', '      upgradeAgent = UpgradeAgent(agent);\n', '\n', '      // Bad interface\n', '      if(!upgradeAgent.isUpgradeAgent()) throw;\n', '      // Make sure that token supplies match in source and target\n', '      if (upgradeAgent.originalSupply() != totalSupply) throw;\n', '\n', '      UpgradeAgentSet(upgradeAgent);\n', '  }\n', '\n', '  /**\n', '   * Get the state of the token upgrade.\n', '   */\n', '  function getUpgradeState() public constant returns(UpgradeState) {\n', '    if(!canUpgrade()) return UpgradeState.NotAllowed;\n', '    else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n', '    else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n', '    else return UpgradeState.Upgrading;\n', '  }\n', '\n', '  /**\n', '   * Change the upgrade master.\n', '   *\n', '   * This allows us to set a new owner for the upgrade mechanism.\n', '   */\n', '  function setUpgradeMaster(address master) public {\n', '      if (master == 0x0) throw;\n', '      if (msg.sender != upgradeMaster) throw;\n', '      upgradeMaster = master;\n', '  }\n', '\n', '  /**\n', '   * Child contract can enable to provide the condition when the upgrade can begun.\n', '   */\n', '  function canUpgrade() public constant returns(bool) {\n', '     return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * Define interface for releasing the token transfer after a successful crowdsale.\n', ' */\n', 'contract ReleasableToken is ERC20, Ownable {\n', '\n', '  /* The finalizer contract that allows unlift the transfer limits on this token */\n', '  address public releaseAgent;\n', '\n', '  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n', '  bool public released = false;\n', '\n', '  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n', '  mapping (address => bool) public transferAgents;\n', '\n', '  /**\n', '   * Limit token transfer until the crowdsale is over.\n', '   *\n', '   */\n', '  modifier canTransfer(address _sender) {\n', '\n', '    if(!released) {\n', '        if(!transferAgents[_sender]) {\n', '            throw;\n', '        }\n', '    }\n', '\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Set the contract that can call release and make the token transferable.\n', '   *\n', '   * Design choice. Allow reset the release agent to fix fat finger mistakes.\n', '   */\n', '  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n', '\n', '    releaseAgent = addr;\n', '  }\n', '\n', '  /**\n', '   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n', '   */\n', '  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n', '    transferAgents[addr] = state;\n', '  }\n', '\n', '  /**\n', '   * One way function to release the tokens to the wild.\n', '   *\n', '   * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\n', '   */\n', '  function releaseTokenTransfer() public onlyReleaseAgent {\n', '    released = true;\n', '  }\n', '\n', '  /** The function can be called only before or after the tokens have been releasesd */\n', '  modifier inReleaseState(bool releaseState) {\n', '    if(releaseState != released) {\n', '        throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '  /** The function can be called only by a whitelisted release agent. */\n', '  modifier onlyReleaseAgent() {\n', '    if(msg.sender != releaseAgent) {\n', '        throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {\n', '    // Call StandardToken.transfer()\n', '   return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {\n', '    // Call StandardToken.transferForm()\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '}\n', '\n', 'library SafeMathLibExt {\n', '\n', '  function times(uint a, uint b) returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function divides(uint a, uint b) returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function minus(uint a, uint b) returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function plus(uint a, uint b) returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * A token that can increase its supply by another contract.\n', ' *\n', ' * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\n', ' * Only mint agents, contracts whitelisted by owner, can mint new tokens.\n', ' *\n', ' */\n', 'contract MintableTokenExt is StandardToken, Ownable {\n', '\n', '  using SafeMathLibExt for uint;\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  /** List of agents that are allowed to create new tokens */\n', '  mapping (address => bool) public mintAgents;\n', '\n', '  event MintingAgentChanged(address addr, bool state  );\n', '\n', '  /** inPercentageUnit is percents of tokens multiplied to 10 up to percents decimals.\n', '  * For example, for reserved tokens in percents 2.54%\n', '  * inPercentageUnit = 254\n', '  * inPercentageDecimals = 2\n', '  */\n', '  struct ReservedTokensData {\n', '    uint inTokens;\n', '    uint inPercentageUnit;\n', '    uint inPercentageDecimals;\n', '    bool isReserved;\n', '    bool isDistributed;\n', '  }\n', '\n', '  mapping (address => ReservedTokensData) public reservedTokensList;\n', '  address[] public reservedTokensDestinations;\n', '  uint public reservedTokensDestinationsLen = 0;\n', '  bool reservedTokensDestinationsAreSet = false;\n', '\n', '  modifier onlyMintAgent() {\n', '    // Only crowdsale contracts are allowed to mint new tokens\n', '    if(!mintAgents[msg.sender]) {\n', '        throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '  /** Make sure we are not done yet. */\n', '  modifier canMint() {\n', '    if(mintingFinished) throw;\n', '    _;\n', '  }\n', '\n', '  function finalizeReservedAddress(address addr) public onlyMintAgent canMint {\n', '    ReservedTokensData storage reservedTokensData = reservedTokensList[addr];\n', '    reservedTokensData.isDistributed = true;\n', '  }\n', '\n', '  function isAddressReserved(address addr) public constant returns (bool isReserved) {\n', '    return reservedTokensList[addr].isReserved;\n', '  }\n', '\n', '  function areTokensDistributedForAddress(address addr) public constant returns (bool isDistributed) {\n', '    return reservedTokensList[addr].isDistributed;\n', '  }\n', '\n', '  function getReservedTokens(address addr) public constant returns (uint inTokens) {\n', '    return reservedTokensList[addr].inTokens;\n', '  }\n', '\n', '  function getReservedPercentageUnit(address addr) public constant returns (uint inPercentageUnit) {\n', '    return reservedTokensList[addr].inPercentageUnit;\n', '  }\n', '\n', '  function getReservedPercentageDecimals(address addr) public constant returns (uint inPercentageDecimals) {\n', '    return reservedTokensList[addr].inPercentageDecimals;\n', '  }\n', '\n', '  function setReservedTokensListMultiple(\n', '    address[] addrs, \n', '    uint[] inTokens, \n', '    uint[] inPercentageUnit, \n', '    uint[] inPercentageDecimals\n', '  ) public canMint onlyOwner {\n', '    assert(!reservedTokensDestinationsAreSet);\n', '    assert(addrs.length == inTokens.length);\n', '    assert(inTokens.length == inPercentageUnit.length);\n', '    assert(inPercentageUnit.length == inPercentageDecimals.length);\n', '    for (uint iterator = 0; iterator < addrs.length; iterator++) {\n', '      if (addrs[iterator] != address(0)) {\n', '        setReservedTokensList(addrs[iterator], inTokens[iterator], inPercentageUnit[iterator], inPercentageDecimals[iterator]);\n', '      }\n', '    }\n', '    reservedTokensDestinationsAreSet = true;\n', '  }\n', '\n', '  /**\n', '   * Create new tokens and allocate them to an address..\n', '   *\n', '   * Only callably by a crowdsale contract (mint agent).\n', '   */\n', '  function mint(address receiver, uint amount) onlyMintAgent canMint public {\n', '    totalSupply = totalSupply.plus(amount);\n', '    balances[receiver] = balances[receiver].plus(amount);\n', '\n', '    // This will make the mint transaction apper in EtherScan.io\n', '    // We can remove this after there is a standardized minting event\n', '    Transfer(0, receiver, amount);\n', '  }\n', '\n', '  /**\n', '   * Owner can allow a crowdsale contract to mint new tokens.\n', '   */\n', '  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n', '    mintAgents[addr] = state;\n', '    MintingAgentChanged(addr, state);\n', '  }\n', '\n', '  function setReservedTokensList(address addr, uint inTokens, uint inPercentageUnit, uint inPercentageDecimals) private canMint onlyOwner {\n', '    assert(addr != address(0));\n', '    if (!isAddressReserved(addr)) {\n', '      reservedTokensDestinations.push(addr);\n', '      reservedTokensDestinationsLen++;\n', '    }\n', '\n', '    reservedTokensList[addr] = ReservedTokensData({\n', '      inTokens: inTokens, \n', '      inPercentageUnit: inPercentageUnit, \n', '      inPercentageDecimals: inPercentageDecimals,\n', '      isReserved: true,\n', '      isDistributed: false\n', '    });\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * A crowdsaled token.\n', ' *\n', ' * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\n', ' *\n', ' * - The token transfer() is disabled until the crowdsale is over\n', ' * - The token contract gives an opt-in upgrade path to a new contract\n', ' * - The same token can be part of several crowdsales through approve() mechanism\n', ' * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\n', ' *\n', ' */\n', 'contract CrowdsaleTokenExt is ReleasableToken, MintableTokenExt, UpgradeableToken {\n', '\n', '  /** Name and symbol were updated. */\n', '  event UpdatedTokenInformation(string newName, string newSymbol);\n', '\n', '  event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '\n', '  string public name;\n', '\n', '  string public symbol;\n', '\n', '  uint public decimals;\n', '\n', '  /* Minimum ammount of tokens every buyer can buy. */\n', '  uint public minCap;\n', '\n', '  /**\n', '   * Construct the token.\n', '   *\n', '   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\n', '   *\n', '   * @param _name Token name\n', '   * @param _symbol Token symbol - should be all caps\n', '   * @param _initialSupply How many tokens we start with\n', '   * @param _decimals Number of decimal places\n', '   * @param _mintable Are new tokens created over the crowdsale or do we distribute only the initial supply? Note that when the token becomes transferable the minting always ends.\n', '   */\n', '  function CrowdsaleTokenExt(string _name, string _symbol, uint _initialSupply, uint _decimals, bool _mintable, uint _globalMinCap)\n', '    UpgradeableToken(msg.sender) {\n', '\n', '    // Create any address, can be transferred\n', '    // to team multisig via changeOwner(),\n', '    // also remember to call setUpgradeMaster()\n', '    owner = msg.sender;\n', '\n', '    name = _name;\n', '    symbol = _symbol;\n', '\n', '    totalSupply = _initialSupply;\n', '\n', '    decimals = _decimals;\n', '\n', '    minCap = _globalMinCap;\n', '\n', '    // Create initially all balance on the team multisig\n', '    balances[owner] = totalSupply;\n', '\n', '    if(totalSupply > 0) {\n', '      Minted(owner, totalSupply);\n', '    }\n', '\n', '    // No more new supply allowed after the token creation\n', '    if(!_mintable) {\n', '      mintingFinished = true;\n', '      if(totalSupply == 0) {\n', '        throw; // Cannot create a token without supply and no minting\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * When token is released to be transferable, enforce no new tokens can be created.\n', '   */\n', '  function releaseTokenTransfer() public onlyReleaseAgent {\n', '    mintingFinished = true;\n', '    super.releaseTokenTransfer();\n', '  }\n', '\n', '  /**\n', '   * Allow upgrade agent functionality kick in only if the crowdsale was success.\n', '   */\n', '  function canUpgrade() public constant returns(bool) {\n', '    return released && super.canUpgrade();\n', '  }\n', '\n', '  /**\n', '   * Owner can update token information here.\n', '   *\n', '   * It is often useful to conceal the actual token association, until\n', '   * the token operations, like central issuance or reissuance have been completed.\n', '   *\n', '   * This function allows the token owner to rename the token after the operations\n', '   * have been completed and then point the audience to use the token contract.\n', '   */\n', '  function setTokenInformation(string _name, string _symbol) onlyOwner {\n', '    name = _name;\n', '    symbol = _symbol;\n', '\n', '    UpdatedTokenInformation(name, symbol);\n', '  }\n', '\n', '  /**\n', '   * Claim tokens that were accidentally sent to this contract.\n', '   *\n', '   * @param _token The address of the token contract that you want to recover.\n', '   */\n', '  function claimTokens(address _token) public onlyOwner {\n', '    require(_token != address(0));\n', '\n', '    ERC20 token = ERC20(_token);\n', '    uint balance = token.balanceOf(this);\n', '    token.transfer(owner, balance);\n', '\n', '    ClaimedTokens(_token, owner, balance);\n', '  }\n', '\n', '}']
