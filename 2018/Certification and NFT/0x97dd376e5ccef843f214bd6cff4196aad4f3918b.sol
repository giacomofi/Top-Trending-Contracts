['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'interface TokenInterface {\n', '     function totalSupply() external constant returns (uint);\n', '     function balanceOf(address tokenOwner) external constant returns (uint balance);\n', '     function allowance(address tokenOwner, address spender) external constant returns (uint remaining);\n', '     function transfer(address to, uint tokens) external returns (bool success);\n', '     function approve(address spender, uint tokens) external returns (bool success);\n', '     function transferFrom(address from, address to, uint tokens) external returns (bool success);\n', '     function burn(uint256 _value) external; \n', '     event Transfer(address indexed from, address indexed to, uint tokens);\n', '     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '     event Burn(address indexed burner, uint256 value);\n', '}\n', '\n', ' contract URUNCrowdsale is Ownable{\n', '  using SafeMath for uint256;\n', ' \n', '  // The token being sold\n', '  TokenInterface public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public ratePerWei = 800;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  uint256 public TOKENS_SOLD;\n', '  uint256 public TOKENS_BOUGHT;\n', '  \n', '  uint256 public minimumContributionPhase1;\n', '  uint256 public minimumContributionPhase2;\n', '  uint256 public minimumContributionPhase3;\n', '  uint256 public minimumContributionPhase4;\n', '  uint256 public minimumContributionPhase5;\n', '  uint256 public minimumContributionPhase6;\n', '  \n', '  uint256 public maxTokensToSaleInClosedPreSale;\n', '  \n', '  uint256 public bonusInPhase1;\n', '  uint256 public bonusInPhase2;\n', '  uint256 public bonusInPhase3;\n', '  uint256 public bonusInPhase4;\n', '  uint256 public bonusInPhase5;\n', '  uint256 public bonusInPhase6;\n', '  \n', '  \n', '  bool public isCrowdsalePaused = false;\n', '  \n', '  uint256 public totalDurationInDays = 123 days;\n', '  \n', '  \n', '  struct userInformation {\n', '      address userAddress;\n', '      uint tokensToBeSent;\n', '      uint ethersToBeSent;\n', '      bool isKYCApproved;\n', '      bool recurringBuyer;\n', '  }\n', '  \n', '  event usersAwaitingTokens(address[] users);\n', '  mapping(address=>userInformation) usersBuyingInformation;\n', '  address[] allUsers;\n', '  address[] u;\n', '  userInformation info;\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '   \n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  constructor(uint256 _startTime, address _wallet, address _tokenAddress) public \n', '  {\n', '    require(_wallet != 0x0);\n', '    require(_startTime >=now);\n', '    startTime = _startTime;  \n', '    endTime = startTime + totalDurationInDays;\n', '    require(endTime >= startTime);\n', '   \n', '    owner = _wallet;\n', '    \n', '    bonusInPhase1 = 30;\n', '    bonusInPhase2 = 20;\n', '    bonusInPhase3 = 15;\n', '    bonusInPhase4 = 10;\n', '    bonusInPhase5 = 75;\n', '    bonusInPhase6 = 5;\n', '    \n', '    minimumContributionPhase1 = uint(3).mul(10 ** 17); //0.3 eth is the minimum contribution in presale phase 1\n', '    minimumContributionPhase2 = uint(5).mul(10 ** 16); //0.05 eth is the minimum contribution in presale phase 2\n', '    minimumContributionPhase3 = uint(5).mul(10 ** 16); //0.05 eth is the minimum contribution in presale phase 3\n', '    minimumContributionPhase4 = uint(5).mul(10 ** 16); //0.05 eth is the minimum contribution in presale phase 4\n', '    minimumContributionPhase5 = uint(5).mul(10 ** 16); //0.05 eth is the minimum contribution in presale phase 5\n', '    minimumContributionPhase6 = uint(5).mul(10 ** 16); //0.05 eth is the minimum contribution in presale phase 6\n', '    \n', '    token = TokenInterface(_tokenAddress);\n', '  }\n', '  \n', '  \n', '   // fallback function can be used to buy tokens\n', '   function () public  payable {\n', '     buyTokens(msg.sender);\n', '    }\n', '    \n', '    function determineBonus(uint tokens, uint ethersSent) internal view returns (uint256 bonus) \n', '    {\n', '        uint256 timeElapsed = now - startTime;\n', '        uint256 timeElapsedInDays = timeElapsed.div(1 days);\n', '        \n', '        //phase 1 (16 days)\n', '        if (timeElapsedInDays <16)\n', '        {\n', '            require(ethersSent>=minimumContributionPhase1);\n', '            bonus = tokens.mul(bonusInPhase1); \n', '            bonus = bonus.div(100);\n', '        }\n', '        //phase 2 (31 days)\n', '        else if (timeElapsedInDays >=16 && timeElapsedInDays <47)\n', '        {\n', '            require(ethersSent>=minimumContributionPhase2);\n', '            bonus = tokens.mul(bonusInPhase2); \n', '            bonus = bonus.div(100);\n', '        }\n', '         //phase 3 (15 days)\n', '        else if (timeElapsedInDays >=47 && timeElapsedInDays <62)\n', '        {\n', '            require(ethersSent>=minimumContributionPhase3);\n', '            bonus = tokens.mul(bonusInPhase3); \n', '            bonus = bonus.div(100);\n', '        }\n', '        //(16 days) -- break\n', '        else if (timeElapsedInDays >=62 && timeElapsedInDays <78)\n', '        {\n', '           revert();\n', '        }\n', '        //phase 5 (15 days) \n', '        else if (timeElapsedInDays >=78 && timeElapsedInDays <93)\n', '        {\n', '            require(ethersSent>=minimumContributionPhase4);\n', '            bonus = tokens.mul(bonusInPhase4); \n', '            bonus = bonus.div(100);\n', '        }\n', '        //phase 6 (15 days)\n', '        else if (timeElapsedInDays >=93 && timeElapsedInDays <108)\n', '        {\n', '            require(ethersSent>=minimumContributionPhase5);\n', '            bonus = tokens.mul(bonusInPhase5); \n', '            bonus = bonus.div(10);  //to cater for the 7.5 figure\n', '            bonus = bonus.div(100);\n', '        }\n', '         //phase 7 (15 days) \n', '        else if (timeElapsedInDays >=108 && timeElapsedInDays <123)\n', '        {\n', '            require(ethersSent>=minimumContributionPhase6);\n', '            bonus = tokens.mul(bonusInPhase6); \n', '            bonus = bonus.div(100);\n', '        }\n', '        else \n', '        {\n', '            bonus = 0;\n', '        }\n', '    }\n', '\n', '  // low level token purchase function\n', '  \n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(isCrowdsalePaused == false);\n', '    require(validPurchase());\n', '    uint256 weiAmount = msg.value;\n', '    \n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(ratePerWei);\n', '    uint256 bonus = determineBonus(tokens,weiAmount);\n', '    tokens = tokens.add(bonus);\n', '    \n', '    //if the user is first time buyer, add his entries\n', '    if (usersBuyingInformation[beneficiary].recurringBuyer == false)\n', '    {\n', '        info = userInformation ({ userAddress: beneficiary, tokensToBeSent:tokens, ethersToBeSent:weiAmount, isKYCApproved:false,\n', '                                recurringBuyer:true});\n', '        usersBuyingInformation[beneficiary] = info;\n', '        allUsers.push(beneficiary);\n', '    }\n', '    //if the user is has bought with the same address before too, update his entries\n', '    else \n', '    {\n', '        info = usersBuyingInformation[beneficiary];\n', '        info.tokensToBeSent = info.tokensToBeSent.add(tokens);\n', '        info.ethersToBeSent = info.ethersToBeSent.add(weiAmount);\n', '        usersBuyingInformation[beneficiary] = info;\n', '    }\n', '    TOKENS_BOUGHT = TOKENS_BOUGHT.add(tokens);\n', '    emit TokenPurchase(owner, beneficiary, weiAmount, tokens);\n', '    \n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '  \n', '    /**\n', '    * function to change the end time and start time of the ICO\n', '    * can only be called by owner wallet\n', '    **/\n', '    function changeStartAndEndDate (uint256 startTimeUnixTimestamp, uint256 endTimeUnixTimestamp) public onlyOwner\n', '    {\n', '        require (startTimeUnixTimestamp!=0 && endTimeUnixTimestamp!=0);\n', '        require(endTimeUnixTimestamp>startTimeUnixTimestamp);\n', '        require(endTimeUnixTimestamp.sub(startTimeUnixTimestamp) >=totalDurationInDays);\n', '        startTime = startTimeUnixTimestamp;\n', '        endTime = endTimeUnixTimestamp;\n', '    }\n', '    \n', '    /**\n', '    * function to change the rate of tokens\n', '    * can only be called by owner wallet\n', '    **/\n', '    function setPriceRate(uint256 newPrice) public onlyOwner {\n', '        ratePerWei = newPrice;\n', '    }\n', '    \n', '    /**\n', '     * function to pause the crowdsale \n', '     * can only be called from owner wallet\n', '     **/\n', '    function pauseCrowdsale() public onlyOwner {\n', '        isCrowdsalePaused = true;\n', '    }\n', '\n', '    /**\n', '     * function to resume the crowdsale if it is paused\n', '     * can only be called from owner wallet\n', '     **/ \n', '    function resumeCrowdsale() public onlyOwner {\n', '        isCrowdsalePaused = false;\n', '    }\n', '    \n', '   \n', '     /**\n', '      * function through which owner can take back the tokens from the contract\n', '      **/ \n', '     function takeTokensBack() public onlyOwner\n', '     {\n', '         uint remainingTokensInTheContract = token.balanceOf(address(this));\n', '         token.transfer(owner,remainingTokensInTheContract);\n', '     }\n', '     \n', '     /**\n', '      * function through which owner can transfer the tokens to any address\n', '      * use this which to properly display the tokens that have been sold via ether or other payments\n', '      **/ \n', '     function manualTokenTransfer(address receiver, uint value) public onlyOwner\n', '     {\n', '         token.transfer(receiver,value);\n', '         TOKENS_SOLD = TOKENS_SOLD.add(value);\n', '         TOKENS_BOUGHT = TOKENS_BOUGHT.add(value);\n', '     }\n', '     \n', '     /**\n', '      * function to approve a single user which means the user has passed all KYC checks\n', '      * can only be called by the owner\n', '      **/ \n', '     function approveSingleUser(address user) public onlyOwner {\n', '        usersBuyingInformation[user].isKYCApproved = true;    \n', '     }\n', '     \n', '     /**\n', '      * function to disapprove a single user which means the user has failed the KYC checks\n', '      * can only be called by the owner\n', '      **/\n', '     function disapproveSingleUser(address user) public onlyOwner {\n', '         usersBuyingInformation[user].isKYCApproved = false;  \n', '     }\n', '     \n', '     /**\n', '      * function to approve multiple users at once \n', '      * can only be called by the owner\n', '      **/\n', '     function approveMultipleUsers(address[] users) public onlyOwner {\n', '         \n', '         for (uint i=0;i<users.length;i++)\n', '         {\n', '            usersBuyingInformation[users[i]].isKYCApproved = true;    \n', '         }\n', '     }\n', '     \n', '     /**\n', '      * function to distribute the tokens to approved users\n', '      * can only be called by the owner\n', '      **/\n', '     function distributeTokensToApprovedUsers() public onlyOwner {\n', '        for(uint i=0;i<allUsers.length;i++)\n', '        {\n', '            if (usersBuyingInformation[allUsers[i]].isKYCApproved == true && usersBuyingInformation[allUsers[i]].tokensToBeSent>0)\n', '            {\n', '                address to = allUsers[i];\n', '                uint tokens = usersBuyingInformation[to].tokensToBeSent;\n', '                token.transfer(to,tokens);\n', '                if (usersBuyingInformation[allUsers[i]].ethersToBeSent>0)\n', '                    owner.transfer(usersBuyingInformation[allUsers[i]].ethersToBeSent);\n', '                TOKENS_SOLD = TOKENS_SOLD.add(usersBuyingInformation[allUsers[i]].tokensToBeSent);\n', '                weiRaised = weiRaised.add(usersBuyingInformation[allUsers[i]].ethersToBeSent);\n', '                usersBuyingInformation[allUsers[i]].tokensToBeSent = 0;\n', '                usersBuyingInformation[allUsers[i]].ethersToBeSent = 0;\n', '            }\n', '        }\n', '     }\n', '     \n', '      /**\n', '      * function to distribute the tokens to all users whether approved or unapproved\n', '      * can only be called by the owner\n', '      **/\n', '     function distributeTokensToAllUsers() public onlyOwner {\n', '        for(uint i=0;i<allUsers.length;i++)\n', '        {\n', '            if (usersBuyingInformation[allUsers[i]].tokensToBeSent>0)\n', '            {\n', '                address to = allUsers[i];\n', '                uint tokens = usersBuyingInformation[to].tokensToBeSent;\n', '                token.transfer(to,tokens);\n', '                if (usersBuyingInformation[allUsers[i]].ethersToBeSent>0)\n', '                    owner.transfer(usersBuyingInformation[allUsers[i]].ethersToBeSent);\n', '                TOKENS_SOLD = TOKENS_SOLD.add(usersBuyingInformation[allUsers[i]].tokensToBeSent);\n', '                weiRaised = weiRaised.add(usersBuyingInformation[allUsers[i]].ethersToBeSent);\n', '                usersBuyingInformation[allUsers[i]].tokensToBeSent = 0;\n', '                usersBuyingInformation[allUsers[i]].ethersToBeSent = 0;\n', '            }\n', '        }\n', '     }\n', '     \n', '     /**\n', '      * function to refund a single user in case he hasnt passed the KYC checks\n', '      * can only be called by the owner\n', '      **/\n', '     function refundSingleUser(address user) public onlyOwner {\n', '         require(usersBuyingInformation[user].ethersToBeSent > 0 );\n', '         user.transfer(usersBuyingInformation[user].ethersToBeSent);\n', '         usersBuyingInformation[user].tokensToBeSent = 0;\n', '         usersBuyingInformation[user].ethersToBeSent = 0;\n', '     }\n', '     \n', '     /**\n', '      * function to refund to multiple users in case they havent passed the KYC checks\n', '      * can only be called by the owner\n', '      **/\n', '     function refundMultipleUsers(address[] users) public onlyOwner {\n', '         for (uint i=0;i<users.length;i++)\n', '         {\n', '            require(usersBuyingInformation[users[i]].ethersToBeSent >0);\n', '            users[i].transfer(usersBuyingInformation[users[i]].ethersToBeSent);\n', '            usersBuyingInformation[users[i]].tokensToBeSent = 0;\n', '            usersBuyingInformation[users[i]].ethersToBeSent = 0;\n', '         }\n', '     }\n', '     /**\n', '      * function to transfer out all ethers present in the contract\n', '      * after calling this function all refunds would need to be done manually\n', '      * would use this function as a last resort\n', '      * can only be called by owner wallet\n', '      **/ \n', '     function transferOutAllEthers() public onlyOwner {\n', '         owner.transfer(address(this).balance);\n', '     }\n', '     \n', '     /**\n', '      * function to get the top 150 users who are awaiting the transfer of tokens\n', '      * can only be called by the owner\n', '      * this function would work in read mode\n', '      **/ \n', '     function getUsersAwaitingForTokensTop150(bool fetch) public constant returns (address[150])  {\n', '          address[150] memory awaiting;\n', '         uint k = 0;\n', '         for (uint i=0;i<allUsers.length;i++)\n', '         {\n', '             if (usersBuyingInformation[allUsers[i]].isKYCApproved == true && usersBuyingInformation[allUsers[i]].tokensToBeSent>0)\n', '             {\n', '                 awaiting[k] = allUsers[i];\n', '                 k = k.add(1);\n', '                 if (k==150)\n', '                    return awaiting;\n', '             }\n', '         }\n', '         return awaiting;\n', '     }\n', '     \n', '     /**\n', '      * function to get the users who are awaiting the transfer of tokens\n', '      * can only be called by the owner\n', '      * this function would work in write mode\n', '      **/ \n', '     function getUsersAwaitingForTokens() public onlyOwner returns (address[])  {\n', '         delete u;\n', '         for (uint i=0;i<allUsers.length;i++)\n', '         {\n', '             if (usersBuyingInformation[allUsers[i]].isKYCApproved == true && usersBuyingInformation[allUsers[i]].tokensToBeSent>0)\n', '             {\n', '                 u.push(allUsers[i]);\n', '             }\n', '         }\n', '         emit usersAwaitingTokens(u);\n', '         return u;\n', '     }\n', '     \n', '     /**\n', '      * function to return the information of a single user\n', '      **/ \n', '     function getUserInfo(address userAddress) public constant returns(uint _ethers, uint _tokens, bool _isApproved)\n', '     {\n', '         _ethers = usersBuyingInformation[userAddress].ethersToBeSent;\n', '         _tokens = usersBuyingInformation[userAddress].tokensToBeSent;\n', '         _isApproved = usersBuyingInformation[userAddress].isKYCApproved;\n', '         return(_ethers,_tokens,_isApproved);\n', '         \n', '     }\n', '     \n', '     /**\n', '      * function to clear all payables/receivables of a user\n', '      * can only be called by owner \n', '      **/\n', '      function closeUser(address userAddress) public onlyOwner \n', '      {\n', '          //instead of deleting the user from the system we are just clearing the payables/receivables\n', '          //if this user buys again, his entry would be updated\n', '          uint ethersByTheUser =  usersBuyingInformation[userAddress].ethersToBeSent;\n', '          usersBuyingInformation[userAddress].isKYCApproved = false;\n', '          usersBuyingInformation[userAddress].ethersToBeSent = 0;\n', '          usersBuyingInformation[userAddress].tokensToBeSent = 0;\n', '          usersBuyingInformation[userAddress].recurringBuyer = true;\n', '          owner.transfer(ethersByTheUser);\n', '      } \n', '      \n', '     /**\n', '      * function to get a list of top 150 users that are unapproved\n', '      * can only be called by owner\n', '      * this function would work in read mode\n', '      **/\n', '      function getUnapprovedUsersTop150(bool fetch) public constant returns (address[150]) \n', '      {\n', '         address[150] memory unapprove;\n', '         uint k = 0;\n', '         for (uint i=0;i<allUsers.length;i++)\n', '         {\n', '             if (usersBuyingInformation[allUsers[i]].isKYCApproved == false)\n', '             {\n', '                 unapprove[k] = allUsers[i];\n', '                 k = k.add(1);\n', '                 if (k==150)\n', '                    return unapprove;\n', '             }\n', '         }\n', '         return unapprove;\n', '      } \n', '      \n', '       /**\n', '      * function to get a list of all users that are unapproved\n', '      * can only be called by owner\n', '      * this function would work in write mode\n', '      **/\n', '      function getUnapprovedUsers() public onlyOwner returns (address[]) \n', '      {\n', '         delete u;\n', '         for (uint i=0;i<allUsers.length;i++)\n', '         {\n', '             if (usersBuyingInformation[allUsers[i]].isKYCApproved == false)\n', '             {\n', '                 u.push(allUsers[i]);\n', '             }\n', '         }\n', '         emit usersAwaitingTokens(u);\n', '         return u;\n', '      } \n', '      \n', '      /**\n', '      * function to return all the users\n', '      **/\n', '      function getAllUsers(bool fetch) public constant returns (address[]) \n', '      {\n', '          return allUsers;\n', '      } \n', '      \n', '      /**\n', '       * function to change the address of a user\n', '       * this function would be used in situations where user made the transaction from one wallet\n', '       * but wants to receive tokens in another wallet\n', '       * so owner should be able to update the address\n', '       **/ \n', '      function changeUserEthAddress(address oldEthAddress, address newEthAddress) public onlyOwner \n', '      {\n', '          usersBuyingInformation[newEthAddress] = usersBuyingInformation[oldEthAddress];\n', '          for (uint i=0;i<allUsers.length;i++)\n', '          {\n', '              if (allUsers[i] == oldEthAddress)\n', '                allUsers[i] = newEthAddress;\n', '          }\n', '          delete usersBuyingInformation[oldEthAddress];\n', '      }\n', '      \n', '      /**\n', '       * Add a user that has paid with BTC or other payment methods\n', '       **/ \n', '      function addUser(address userAddr, uint tokens) public onlyOwner \n', '      {\n', '            // if first time buyer, add his details in the mapping\n', '            if (usersBuyingInformation[userAddr].recurringBuyer == false)\n', '            {\n', '                info = userInformation ({ userAddress: userAddr, tokensToBeSent:tokens, ethersToBeSent:0, isKYCApproved:false,\n', '                                recurringBuyer:true});\n', '                usersBuyingInformation[userAddr] = info;\n', '                allUsers.push(userAddr);\n', '            }\n', '            //if recurring buyer, update his mappings\n', '            else \n', '            {\n', '                info = usersBuyingInformation[userAddr];\n', '                info.tokensToBeSent = info.tokensToBeSent.add(tokens);\n', '                usersBuyingInformation[userAddr] = info;\n', '            }\n', '            TOKENS_BOUGHT = TOKENS_BOUGHT.add(tokens);\n', '      }\n', '      \n', '      /**\n', '       * Set the tokens bought\n', '       **/ \n', '      function setTokensBought(uint tokensBought) public onlyOwner \n', '      {\n', '          TOKENS_BOUGHT = tokensBought;\n', '      }\n', '      \n', '      /**\n', '       * Returns the number of tokens who have been sold  \n', '       **/ \n', '      function getTokensBought() public constant returns(uint) \n', '      {\n', '          return TOKENS_BOUGHT;\n', '      }\n', '      \n', '}']
['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'interface TokenInterface {\n', '     function totalSupply() external constant returns (uint);\n', '     function balanceOf(address tokenOwner) external constant returns (uint balance);\n', '     function allowance(address tokenOwner, address spender) external constant returns (uint remaining);\n', '     function transfer(address to, uint tokens) external returns (bool success);\n', '     function approve(address spender, uint tokens) external returns (bool success);\n', '     function transferFrom(address from, address to, uint tokens) external returns (bool success);\n', '     function burn(uint256 _value) external; \n', '     event Transfer(address indexed from, address indexed to, uint tokens);\n', '     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '     event Burn(address indexed burner, uint256 value);\n', '}\n', '\n', ' contract URUNCrowdsale is Ownable{\n', '  using SafeMath for uint256;\n', ' \n', '  // The token being sold\n', '  TokenInterface public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public ratePerWei = 800;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  uint256 public TOKENS_SOLD;\n', '  uint256 public TOKENS_BOUGHT;\n', '  \n', '  uint256 public minimumContributionPhase1;\n', '  uint256 public minimumContributionPhase2;\n', '  uint256 public minimumContributionPhase3;\n', '  uint256 public minimumContributionPhase4;\n', '  uint256 public minimumContributionPhase5;\n', '  uint256 public minimumContributionPhase6;\n', '  \n', '  uint256 public maxTokensToSaleInClosedPreSale;\n', '  \n', '  uint256 public bonusInPhase1;\n', '  uint256 public bonusInPhase2;\n', '  uint256 public bonusInPhase3;\n', '  uint256 public bonusInPhase4;\n', '  uint256 public bonusInPhase5;\n', '  uint256 public bonusInPhase6;\n', '  \n', '  \n', '  bool public isCrowdsalePaused = false;\n', '  \n', '  uint256 public totalDurationInDays = 123 days;\n', '  \n', '  \n', '  struct userInformation {\n', '      address userAddress;\n', '      uint tokensToBeSent;\n', '      uint ethersToBeSent;\n', '      bool isKYCApproved;\n', '      bool recurringBuyer;\n', '  }\n', '  \n', '  event usersAwaitingTokens(address[] users);\n', '  mapping(address=>userInformation) usersBuyingInformation;\n', '  address[] allUsers;\n', '  address[] u;\n', '  userInformation info;\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '   \n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  constructor(uint256 _startTime, address _wallet, address _tokenAddress) public \n', '  {\n', '    require(_wallet != 0x0);\n', '    require(_startTime >=now);\n', '    startTime = _startTime;  \n', '    endTime = startTime + totalDurationInDays;\n', '    require(endTime >= startTime);\n', '   \n', '    owner = _wallet;\n', '    \n', '    bonusInPhase1 = 30;\n', '    bonusInPhase2 = 20;\n', '    bonusInPhase3 = 15;\n', '    bonusInPhase4 = 10;\n', '    bonusInPhase5 = 75;\n', '    bonusInPhase6 = 5;\n', '    \n', '    minimumContributionPhase1 = uint(3).mul(10 ** 17); //0.3 eth is the minimum contribution in presale phase 1\n', '    minimumContributionPhase2 = uint(5).mul(10 ** 16); //0.05 eth is the minimum contribution in presale phase 2\n', '    minimumContributionPhase3 = uint(5).mul(10 ** 16); //0.05 eth is the minimum contribution in presale phase 3\n', '    minimumContributionPhase4 = uint(5).mul(10 ** 16); //0.05 eth is the minimum contribution in presale phase 4\n', '    minimumContributionPhase5 = uint(5).mul(10 ** 16); //0.05 eth is the minimum contribution in presale phase 5\n', '    minimumContributionPhase6 = uint(5).mul(10 ** 16); //0.05 eth is the minimum contribution in presale phase 6\n', '    \n', '    token = TokenInterface(_tokenAddress);\n', '  }\n', '  \n', '  \n', '   // fallback function can be used to buy tokens\n', '   function () public  payable {\n', '     buyTokens(msg.sender);\n', '    }\n', '    \n', '    function determineBonus(uint tokens, uint ethersSent) internal view returns (uint256 bonus) \n', '    {\n', '        uint256 timeElapsed = now - startTime;\n', '        uint256 timeElapsedInDays = timeElapsed.div(1 days);\n', '        \n', '        //phase 1 (16 days)\n', '        if (timeElapsedInDays <16)\n', '        {\n', '            require(ethersSent>=minimumContributionPhase1);\n', '            bonus = tokens.mul(bonusInPhase1); \n', '            bonus = bonus.div(100);\n', '        }\n', '        //phase 2 (31 days)\n', '        else if (timeElapsedInDays >=16 && timeElapsedInDays <47)\n', '        {\n', '            require(ethersSent>=minimumContributionPhase2);\n', '            bonus = tokens.mul(bonusInPhase2); \n', '            bonus = bonus.div(100);\n', '        }\n', '         //phase 3 (15 days)\n', '        else if (timeElapsedInDays >=47 && timeElapsedInDays <62)\n', '        {\n', '            require(ethersSent>=minimumContributionPhase3);\n', '            bonus = tokens.mul(bonusInPhase3); \n', '            bonus = bonus.div(100);\n', '        }\n', '        //(16 days) -- break\n', '        else if (timeElapsedInDays >=62 && timeElapsedInDays <78)\n', '        {\n', '           revert();\n', '        }\n', '        //phase 5 (15 days) \n', '        else if (timeElapsedInDays >=78 && timeElapsedInDays <93)\n', '        {\n', '            require(ethersSent>=minimumContributionPhase4);\n', '            bonus = tokens.mul(bonusInPhase4); \n', '            bonus = bonus.div(100);\n', '        }\n', '        //phase 6 (15 days)\n', '        else if (timeElapsedInDays >=93 && timeElapsedInDays <108)\n', '        {\n', '            require(ethersSent>=minimumContributionPhase5);\n', '            bonus = tokens.mul(bonusInPhase5); \n', '            bonus = bonus.div(10);  //to cater for the 7.5 figure\n', '            bonus = bonus.div(100);\n', '        }\n', '         //phase 7 (15 days) \n', '        else if (timeElapsedInDays >=108 && timeElapsedInDays <123)\n', '        {\n', '            require(ethersSent>=minimumContributionPhase6);\n', '            bonus = tokens.mul(bonusInPhase6); \n', '            bonus = bonus.div(100);\n', '        }\n', '        else \n', '        {\n', '            bonus = 0;\n', '        }\n', '    }\n', '\n', '  // low level token purchase function\n', '  \n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(isCrowdsalePaused == false);\n', '    require(validPurchase());\n', '    uint256 weiAmount = msg.value;\n', '    \n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(ratePerWei);\n', '    uint256 bonus = determineBonus(tokens,weiAmount);\n', '    tokens = tokens.add(bonus);\n', '    \n', '    //if the user is first time buyer, add his entries\n', '    if (usersBuyingInformation[beneficiary].recurringBuyer == false)\n', '    {\n', '        info = userInformation ({ userAddress: beneficiary, tokensToBeSent:tokens, ethersToBeSent:weiAmount, isKYCApproved:false,\n', '                                recurringBuyer:true});\n', '        usersBuyingInformation[beneficiary] = info;\n', '        allUsers.push(beneficiary);\n', '    }\n', '    //if the user is has bought with the same address before too, update his entries\n', '    else \n', '    {\n', '        info = usersBuyingInformation[beneficiary];\n', '        info.tokensToBeSent = info.tokensToBeSent.add(tokens);\n', '        info.ethersToBeSent = info.ethersToBeSent.add(weiAmount);\n', '        usersBuyingInformation[beneficiary] = info;\n', '    }\n', '    TOKENS_BOUGHT = TOKENS_BOUGHT.add(tokens);\n', '    emit TokenPurchase(owner, beneficiary, weiAmount, tokens);\n', '    \n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '  \n', '    /**\n', '    * function to change the end time and start time of the ICO\n', '    * can only be called by owner wallet\n', '    **/\n', '    function changeStartAndEndDate (uint256 startTimeUnixTimestamp, uint256 endTimeUnixTimestamp) public onlyOwner\n', '    {\n', '        require (startTimeUnixTimestamp!=0 && endTimeUnixTimestamp!=0);\n', '        require(endTimeUnixTimestamp>startTimeUnixTimestamp);\n', '        require(endTimeUnixTimestamp.sub(startTimeUnixTimestamp) >=totalDurationInDays);\n', '        startTime = startTimeUnixTimestamp;\n', '        endTime = endTimeUnixTimestamp;\n', '    }\n', '    \n', '    /**\n', '    * function to change the rate of tokens\n', '    * can only be called by owner wallet\n', '    **/\n', '    function setPriceRate(uint256 newPrice) public onlyOwner {\n', '        ratePerWei = newPrice;\n', '    }\n', '    \n', '    /**\n', '     * function to pause the crowdsale \n', '     * can only be called from owner wallet\n', '     **/\n', '    function pauseCrowdsale() public onlyOwner {\n', '        isCrowdsalePaused = true;\n', '    }\n', '\n', '    /**\n', '     * function to resume the crowdsale if it is paused\n', '     * can only be called from owner wallet\n', '     **/ \n', '    function resumeCrowdsale() public onlyOwner {\n', '        isCrowdsalePaused = false;\n', '    }\n', '    \n', '   \n', '     /**\n', '      * function through which owner can take back the tokens from the contract\n', '      **/ \n', '     function takeTokensBack() public onlyOwner\n', '     {\n', '         uint remainingTokensInTheContract = token.balanceOf(address(this));\n', '         token.transfer(owner,remainingTokensInTheContract);\n', '     }\n', '     \n', '     /**\n', '      * function through which owner can transfer the tokens to any address\n', '      * use this which to properly display the tokens that have been sold via ether or other payments\n', '      **/ \n', '     function manualTokenTransfer(address receiver, uint value) public onlyOwner\n', '     {\n', '         token.transfer(receiver,value);\n', '         TOKENS_SOLD = TOKENS_SOLD.add(value);\n', '         TOKENS_BOUGHT = TOKENS_BOUGHT.add(value);\n', '     }\n', '     \n', '     /**\n', '      * function to approve a single user which means the user has passed all KYC checks\n', '      * can only be called by the owner\n', '      **/ \n', '     function approveSingleUser(address user) public onlyOwner {\n', '        usersBuyingInformation[user].isKYCApproved = true;    \n', '     }\n', '     \n', '     /**\n', '      * function to disapprove a single user which means the user has failed the KYC checks\n', '      * can only be called by the owner\n', '      **/\n', '     function disapproveSingleUser(address user) public onlyOwner {\n', '         usersBuyingInformation[user].isKYCApproved = false;  \n', '     }\n', '     \n', '     /**\n', '      * function to approve multiple users at once \n', '      * can only be called by the owner\n', '      **/\n', '     function approveMultipleUsers(address[] users) public onlyOwner {\n', '         \n', '         for (uint i=0;i<users.length;i++)\n', '         {\n', '            usersBuyingInformation[users[i]].isKYCApproved = true;    \n', '         }\n', '     }\n', '     \n', '     /**\n', '      * function to distribute the tokens to approved users\n', '      * can only be called by the owner\n', '      **/\n', '     function distributeTokensToApprovedUsers() public onlyOwner {\n', '        for(uint i=0;i<allUsers.length;i++)\n', '        {\n', '            if (usersBuyingInformation[allUsers[i]].isKYCApproved == true && usersBuyingInformation[allUsers[i]].tokensToBeSent>0)\n', '            {\n', '                address to = allUsers[i];\n', '                uint tokens = usersBuyingInformation[to].tokensToBeSent;\n', '                token.transfer(to,tokens);\n', '                if (usersBuyingInformation[allUsers[i]].ethersToBeSent>0)\n', '                    owner.transfer(usersBuyingInformation[allUsers[i]].ethersToBeSent);\n', '                TOKENS_SOLD = TOKENS_SOLD.add(usersBuyingInformation[allUsers[i]].tokensToBeSent);\n', '                weiRaised = weiRaised.add(usersBuyingInformation[allUsers[i]].ethersToBeSent);\n', '                usersBuyingInformation[allUsers[i]].tokensToBeSent = 0;\n', '                usersBuyingInformation[allUsers[i]].ethersToBeSent = 0;\n', '            }\n', '        }\n', '     }\n', '     \n', '      /**\n', '      * function to distribute the tokens to all users whether approved or unapproved\n', '      * can only be called by the owner\n', '      **/\n', '     function distributeTokensToAllUsers() public onlyOwner {\n', '        for(uint i=0;i<allUsers.length;i++)\n', '        {\n', '            if (usersBuyingInformation[allUsers[i]].tokensToBeSent>0)\n', '            {\n', '                address to = allUsers[i];\n', '                uint tokens = usersBuyingInformation[to].tokensToBeSent;\n', '                token.transfer(to,tokens);\n', '                if (usersBuyingInformation[allUsers[i]].ethersToBeSent>0)\n', '                    owner.transfer(usersBuyingInformation[allUsers[i]].ethersToBeSent);\n', '                TOKENS_SOLD = TOKENS_SOLD.add(usersBuyingInformation[allUsers[i]].tokensToBeSent);\n', '                weiRaised = weiRaised.add(usersBuyingInformation[allUsers[i]].ethersToBeSent);\n', '                usersBuyingInformation[allUsers[i]].tokensToBeSent = 0;\n', '                usersBuyingInformation[allUsers[i]].ethersToBeSent = 0;\n', '            }\n', '        }\n', '     }\n', '     \n', '     /**\n', '      * function to refund a single user in case he hasnt passed the KYC checks\n', '      * can only be called by the owner\n', '      **/\n', '     function refundSingleUser(address user) public onlyOwner {\n', '         require(usersBuyingInformation[user].ethersToBeSent > 0 );\n', '         user.transfer(usersBuyingInformation[user].ethersToBeSent);\n', '         usersBuyingInformation[user].tokensToBeSent = 0;\n', '         usersBuyingInformation[user].ethersToBeSent = 0;\n', '     }\n', '     \n', '     /**\n', '      * function to refund to multiple users in case they havent passed the KYC checks\n', '      * can only be called by the owner\n', '      **/\n', '     function refundMultipleUsers(address[] users) public onlyOwner {\n', '         for (uint i=0;i<users.length;i++)\n', '         {\n', '            require(usersBuyingInformation[users[i]].ethersToBeSent >0);\n', '            users[i].transfer(usersBuyingInformation[users[i]].ethersToBeSent);\n', '            usersBuyingInformation[users[i]].tokensToBeSent = 0;\n', '            usersBuyingInformation[users[i]].ethersToBeSent = 0;\n', '         }\n', '     }\n', '     /**\n', '      * function to transfer out all ethers present in the contract\n', '      * after calling this function all refunds would need to be done manually\n', '      * would use this function as a last resort\n', '      * can only be called by owner wallet\n', '      **/ \n', '     function transferOutAllEthers() public onlyOwner {\n', '         owner.transfer(address(this).balance);\n', '     }\n', '     \n', '     /**\n', '      * function to get the top 150 users who are awaiting the transfer of tokens\n', '      * can only be called by the owner\n', '      * this function would work in read mode\n', '      **/ \n', '     function getUsersAwaitingForTokensTop150(bool fetch) public constant returns (address[150])  {\n', '          address[150] memory awaiting;\n', '         uint k = 0;\n', '         for (uint i=0;i<allUsers.length;i++)\n', '         {\n', '             if (usersBuyingInformation[allUsers[i]].isKYCApproved == true && usersBuyingInformation[allUsers[i]].tokensToBeSent>0)\n', '             {\n', '                 awaiting[k] = allUsers[i];\n', '                 k = k.add(1);\n', '                 if (k==150)\n', '                    return awaiting;\n', '             }\n', '         }\n', '         return awaiting;\n', '     }\n', '     \n', '     /**\n', '      * function to get the users who are awaiting the transfer of tokens\n', '      * can only be called by the owner\n', '      * this function would work in write mode\n', '      **/ \n', '     function getUsersAwaitingForTokens() public onlyOwner returns (address[])  {\n', '         delete u;\n', '         for (uint i=0;i<allUsers.length;i++)\n', '         {\n', '             if (usersBuyingInformation[allUsers[i]].isKYCApproved == true && usersBuyingInformation[allUsers[i]].tokensToBeSent>0)\n', '             {\n', '                 u.push(allUsers[i]);\n', '             }\n', '         }\n', '         emit usersAwaitingTokens(u);\n', '         return u;\n', '     }\n', '     \n', '     /**\n', '      * function to return the information of a single user\n', '      **/ \n', '     function getUserInfo(address userAddress) public constant returns(uint _ethers, uint _tokens, bool _isApproved)\n', '     {\n', '         _ethers = usersBuyingInformation[userAddress].ethersToBeSent;\n', '         _tokens = usersBuyingInformation[userAddress].tokensToBeSent;\n', '         _isApproved = usersBuyingInformation[userAddress].isKYCApproved;\n', '         return(_ethers,_tokens,_isApproved);\n', '         \n', '     }\n', '     \n', '     /**\n', '      * function to clear all payables/receivables of a user\n', '      * can only be called by owner \n', '      **/\n', '      function closeUser(address userAddress) public onlyOwner \n', '      {\n', '          //instead of deleting the user from the system we are just clearing the payables/receivables\n', '          //if this user buys again, his entry would be updated\n', '          uint ethersByTheUser =  usersBuyingInformation[userAddress].ethersToBeSent;\n', '          usersBuyingInformation[userAddress].isKYCApproved = false;\n', '          usersBuyingInformation[userAddress].ethersToBeSent = 0;\n', '          usersBuyingInformation[userAddress].tokensToBeSent = 0;\n', '          usersBuyingInformation[userAddress].recurringBuyer = true;\n', '          owner.transfer(ethersByTheUser);\n', '      } \n', '      \n', '     /**\n', '      * function to get a list of top 150 users that are unapproved\n', '      * can only be called by owner\n', '      * this function would work in read mode\n', '      **/\n', '      function getUnapprovedUsersTop150(bool fetch) public constant returns (address[150]) \n', '      {\n', '         address[150] memory unapprove;\n', '         uint k = 0;\n', '         for (uint i=0;i<allUsers.length;i++)\n', '         {\n', '             if (usersBuyingInformation[allUsers[i]].isKYCApproved == false)\n', '             {\n', '                 unapprove[k] = allUsers[i];\n', '                 k = k.add(1);\n', '                 if (k==150)\n', '                    return unapprove;\n', '             }\n', '         }\n', '         return unapprove;\n', '      } \n', '      \n', '       /**\n', '      * function to get a list of all users that are unapproved\n', '      * can only be called by owner\n', '      * this function would work in write mode\n', '      **/\n', '      function getUnapprovedUsers() public onlyOwner returns (address[]) \n', '      {\n', '         delete u;\n', '         for (uint i=0;i<allUsers.length;i++)\n', '         {\n', '             if (usersBuyingInformation[allUsers[i]].isKYCApproved == false)\n', '             {\n', '                 u.push(allUsers[i]);\n', '             }\n', '         }\n', '         emit usersAwaitingTokens(u);\n', '         return u;\n', '      } \n', '      \n', '      /**\n', '      * function to return all the users\n', '      **/\n', '      function getAllUsers(bool fetch) public constant returns (address[]) \n', '      {\n', '          return allUsers;\n', '      } \n', '      \n', '      /**\n', '       * function to change the address of a user\n', '       * this function would be used in situations where user made the transaction from one wallet\n', '       * but wants to receive tokens in another wallet\n', '       * so owner should be able to update the address\n', '       **/ \n', '      function changeUserEthAddress(address oldEthAddress, address newEthAddress) public onlyOwner \n', '      {\n', '          usersBuyingInformation[newEthAddress] = usersBuyingInformation[oldEthAddress];\n', '          for (uint i=0;i<allUsers.length;i++)\n', '          {\n', '              if (allUsers[i] == oldEthAddress)\n', '                allUsers[i] = newEthAddress;\n', '          }\n', '          delete usersBuyingInformation[oldEthAddress];\n', '      }\n', '      \n', '      /**\n', '       * Add a user that has paid with BTC or other payment methods\n', '       **/ \n', '      function addUser(address userAddr, uint tokens) public onlyOwner \n', '      {\n', '            // if first time buyer, add his details in the mapping\n', '            if (usersBuyingInformation[userAddr].recurringBuyer == false)\n', '            {\n', '                info = userInformation ({ userAddress: userAddr, tokensToBeSent:tokens, ethersToBeSent:0, isKYCApproved:false,\n', '                                recurringBuyer:true});\n', '                usersBuyingInformation[userAddr] = info;\n', '                allUsers.push(userAddr);\n', '            }\n', '            //if recurring buyer, update his mappings\n', '            else \n', '            {\n', '                info = usersBuyingInformation[userAddr];\n', '                info.tokensToBeSent = info.tokensToBeSent.add(tokens);\n', '                usersBuyingInformation[userAddr] = info;\n', '            }\n', '            TOKENS_BOUGHT = TOKENS_BOUGHT.add(tokens);\n', '      }\n', '      \n', '      /**\n', '       * Set the tokens bought\n', '       **/ \n', '      function setTokensBought(uint tokensBought) public onlyOwner \n', '      {\n', '          TOKENS_BOUGHT = tokensBought;\n', '      }\n', '      \n', '      /**\n', '       * Returns the number of tokens who have been sold  \n', '       **/ \n', '      function getTokensBought() public constant returns(uint) \n', '      {\n', '          return TOKENS_BOUGHT;\n', '      }\n', '      \n', '}']
