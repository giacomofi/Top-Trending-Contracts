['pragma solidity ^0.4.24;\n', '\n', '// File: contracts\\zeppelin\\ownership\\Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts\\zeppelin\\math\\SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts\\zeppelin\\token\\ERC20\\ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts\\zeppelin\\token\\ERC20\\BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: contracts\\zeppelin\\token\\ERC20\\ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: contracts\\zeppelin\\token\\ERC20\\StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts\\zeppelin\\token\\ERC20\\MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts\\zeppelin\\token\\ERC20\\CappedToken.sol\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  constructor(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    onlyOwner\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts\\zeppelin\\lifecycle\\Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: contracts\\zeppelin\\token\\ERC20\\PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts\\DroneMadnessToken.sol\n', '\n', '/**\n', ' * @title Drone Madness Token\n', ' * @dev Drone Madness Token - Token code for the Drone Madness Project\n', ' * This is a standard ERC20 token with:\n', ' * - a cap\n', ' * - ability to pause transfers\n', ' */\n', 'contract DroneMadnessToken is CappedToken, PausableToken {\n', '\n', '    string public constant name                 = "Drone Madness Token";\n', '    string public constant symbol               = "DRNMD";\n', '    uint public constant decimals               = 18;\n', '\n', '    constructor(uint256 _totalSupply) \n', '        CappedToken(_totalSupply) public {\n', '        paused = true;\n', '    }\n', '}\n', '\n', '// File: contracts\\zeppelin\\token\\ERC20\\SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: contracts\\TokenPool.sol\n', '\n', '/**\n', ' * @title TokenPool \n', ' * @dev Token Pool contract used to store tokens for special purposes\n', ' * The pool can receive tokens and can transfer tokens to multiple beneficiaries.\n', ' * It can be used for airdrops or similar cases.\n', ' */\n', 'contract TokenPool is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    ERC20Basic public token;\n', '    uint256 public cap;\n', '    uint256 public totalAllocated;\n', '\n', '    /**\n', '     * @dev Contract constructor\n', '     * @param _token address token that will be stored in the pool\n', '     * @param _cap uint256 predefined cap of the pool\n', '     */\n', '    constructor(address _token, uint256 _cap) public {\n', '        token = ERC20Basic(_token);\n', '        cap = _cap;\n', '        totalAllocated = 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer different amounts of tokens to multiple beneficiaries \n', '     * @param _beneficiaries addresses of the beneficiaries\n', '     * @param _amounts uint256[] amounts for each beneficiary\n', '     */\n', '    function allocate(address[] _beneficiaries, uint256[] _amounts) public onlyOwner {\n', '        for (uint256 i = 0; i < _beneficiaries.length; i ++) {\n', '            require(totalAllocated.add(_amounts[i]) <= cap);\n', '            token.safeTransfer(_beneficiaries[i], _amounts[i]);\n', '            totalAllocated.add(_amounts[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer the same amount of tokens to multiple beneficiaries \n', '     * @param _beneficiaries addresses of the beneficiaries\n', '     * @param _amounts uint256[] amounts for each beneficiary\n', '     */\n', '    function allocateEqual(address[] _beneficiaries, uint256 _amounts) public onlyOwner {\n', '        uint256 totalAmount = _amounts.mul(_beneficiaries.length);\n', '        require(totalAllocated.add(totalAmount) <= cap);\n', '        require(token.balanceOf(this) >= totalAmount);\n', '\n', '        for (uint256 i = 0; i < _beneficiaries.length; i ++) {\n', '            token.safeTransfer(_beneficiaries[i], _amounts);\n', '            totalAllocated.add(_amounts);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\zeppelin\\crowdsale\\Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', ' * the methods to add functionality. Consider using &#39;super&#39; where appropiate to concatenate\n', ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n', '  // 1 wei will give you 1 unit, or 0.001 TOK.\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', '// File: contracts\\zeppelin\\crowdsale\\validation\\TimedCrowdsale.sol\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '    onlyWhileOpen\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts\\zeppelin\\crowdsale\\distribution\\FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '\n', '}\n', '\n', '// File: contracts\\zeppelin\\crowdsale\\distribution\\utils\\RefundVault.sol\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  /**\n', '   * @param _wallet Vault address\n', '   */\n', '  constructor(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    emit Closed();\n', '    wallet.transfer(address(this).balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    emit RefundsEnabled();\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    emit Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '// File: contracts\\zeppelin\\crowdsale\\distribution\\RefundableCrowdsale.sol\n', '\n', '/**\n', ' * @title RefundableCrowdsale\n', ' * @dev Extension of Crowdsale contract that adds a funding goal, and\n', ' * the possibility of users getting a refund if goal is not met.\n', ' * Uses a RefundVault as the crowdsale&#39;s vault.\n', ' */\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault public vault;\n', '\n', '  /**\n', '   * @dev Constructor, creates RefundVault.\n', '   * @param _goal Funding goal\n', '   */\n', '  constructor(uint256 _goal) public {\n', '    require(_goal > 0);\n', '    vault = new RefundVault(wallet);\n', '    goal = _goal;\n', '  }\n', '\n', '  /**\n', '   * @dev Investors can claim refunds here if crowdsale is unsuccessful\n', '   */\n', '  function claimRefund() public {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether funding goal was reached.\n', '   * @return Whether funding goal was reached\n', '   */\n', '  function goalReached() public view returns (bool) {\n', '    return weiRaised >= goal;\n', '  }\n', '\n', '  /**\n', '   * @dev vault finalization task, called when owner calls finalize()\n', '   */\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '\n', '    super.finalization();\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides Crowdsale fund forwarding, sending funds to vault.\n', '   */\n', '  function _forwardFunds() internal {\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts\\zeppelin\\crowdsale\\emission\\MintedCrowdsale.sol\n', '\n', '/**\n', ' * @title MintedCrowdsale\n', ' * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n', ' * Token ownership should be transferred to MintedCrowdsale for minting.\n', ' */\n', 'contract MintedCrowdsale is Crowdsale {\n', '\n', '  /**\n', '   * @dev Overrides delivery by minting tokens upon purchase.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Number of tokens to be minted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    require(MintableToken(token).mint(_beneficiary, _tokenAmount));\n', '  }\n', '}\n', '\n', '// File: contracts\\zeppelin\\crowdsale\\validation\\CappedCrowdsale.sol\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Crowdsale with a limit for total contributions.\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  /**\n', '   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n', '   * @param _cap Max amount of wei to be contributed\n', '   */\n', '  constructor(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the cap has been reached.\n', '   * @return Whether the cap was reached\n', '   */\n', '  function capReached() public view returns (bool) {\n', '    return weiRaised >= cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring purchase to respect the funding cap.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    require(weiRaised.add(_weiAmount) <= cap);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts\\zeppelin\\crowdsale\\validation\\WhitelistedCrowdsale.sol\n', '\n', '/**\n', ' * @title WhitelistedCrowdsale\n', ' * @dev Crowdsale in which only whitelisted users can contribute.\n', ' */\n', 'contract WhitelistedCrowdsale is Crowdsale, Ownable {\n', '\n', '  mapping(address => bool) public whitelist;\n', '\n', '  /**\n', '   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '   */\n', '  modifier isWhitelisted(address _beneficiary) {\n', '    require(whitelist[_beneficiary]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '  function addToWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelist[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Removes single address from whitelist.\n', '   * @param _beneficiary Address to be removed to the whitelist\n', '   */\n', '  function removeFromWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n', '   * @param _beneficiary Token beneficiary\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '    isWhitelisted(_beneficiary)\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts\\zeppelin\\token\\ERC20\\TokenTimelock.sol\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  constructor(\n', '    ERC20Basic _token,\n', '    address _beneficiary,\n', '    uint256 _releaseTime\n', '  )\n', '    public\n', '  {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_releaseTime > block.timestamp);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', '// File: contracts\\DroneMadnessCrowdsale.sol\n', '\n', '/**\n', ' * @title Drone Madness Crowdsale Contract\n', ' * @dev Drone Madness Crowdsale Contract\n', ' * The contract is for the crowdsale of the Drone Madness token. It is:\n', ' * - With a hard cap in ETH\n', ' * - With a soft cap in ETH\n', ' * - Limited in time (start/end date)\n', ' * - Only for whitelisted participants to purchase tokens\n', ' * - Ether is securely stored in RefundVault until the end of the crowdsale\n', ' * - At the end of the crowdsale if the goal is reached funds can be used\n', ' * ...otherwise the participants can refund their investments\n', ' * - Tokens are minted on each purchase\n', ' * - Sale can be paused if needed by the admin\n', ' */\n', 'contract DroneMadnessCrowdsale is \n', '    MintedCrowdsale,\n', '    CappedCrowdsale,\n', '    TimedCrowdsale,\n', '    FinalizableCrowdsale,\n', '    WhitelistedCrowdsale, \n', '    RefundableCrowdsale,\n', '    Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    // Initial distribution\n', '    uint256 public constant SALE_TOKENS    = 60; // 60% from totalSupply\n', '    uint256 public constant TEAM_TOKENS    = 10; // 10% from totalSupply\n', '    uint256 public constant PRIZE_TOKENS   = 10; // 10% from totalSupply\n', '    uint256 public constant ADVISOR_TOKENS = 10; // 10% from totalSupply\n', '    uint256 public constant AIRDROP_TOKENS = 5;  // 5% from totalSupply\n', '    uint256 public constant RESERVE_TOKENS = 5;  // 5% from totalSupply\n', '\n', '    uint256 public constant TEAM_LOCK_TIME    = 15770000; // 6 months in seconds\n', '    uint256 public constant RESERVE_LOCK_TIME = 31540000; // 1 year in seconds\n', '\n', '    // Rate bonuses\n', '    uint256 public initialRate;\n', '    uint256[4] public bonuses = [30,20,10,0];\n', '    uint256[4] public stages = [\n', '        1535792400, // 1st of Sep - 30rd of Sep -> 30% Bonus\n', '        1538384400, // 1st of Oct - 31st of Oct -> 20% Bonus\n', '        1541066400, // 1st of Nov - 30rd of Oct -> 10% Bonus\n', '        1543658400  // 1st of Dec - 31st of Dec -> 0% Bonus\n', '    ];\n', '    \n', '    // Min investment\n', '    uint256 public minInvestmentInWei;\n', '    // Max individual investment\n', '    uint256 public maxInvestmentInWei;\n', '    \n', '    mapping (address => uint256) internal invested;\n', '\n', '    TokenTimelock public teamWallet;\n', '    TokenTimelock public reservePool;\n', '    TokenPool public advisorPool;\n', '    TokenPool public airdropPool;\n', '\n', '    // Events for this contract\n', '\n', '    /**\n', '     * Event triggered when changing the current rate on different stages\n', '     * @param rate new rate\n', '     */\n', '    event CurrentRateChange(uint256 rate);\n', '\n', '    /**\n', '     * @dev Contract constructor\n', '     * @param _cap uint256 hard cap of the crowdsale\n', '     * @param _goal uint256 soft cap of the crowdsale\n', '     * @param _openingTime uint256 crowdsale start date/time\n', '     * @param _closingTime uint256 crowdsale end date/time\n', '     * @param _rate uint256 initial rate DRNMD for 1 ETH\n', '     * @param _minInvestmentInWei uint256 minimum investment amount\n', '     * @param _maxInvestmentInWei uint256 maximum individual investment amount\n', '     * @param _wallet address address where the collected funds will be transferred\n', '     * @param _token DroneMadnessToken our token\n', '     */\n', '    constructor(\n', '        uint256 _cap, \n', '        uint256 _goal, \n', '        uint256 _openingTime, \n', '        uint256 _closingTime, \n', '        uint256 _rate, \n', '        uint256 _minInvestmentInWei,\n', '        uint256 _maxInvestmentInWei,\n', '        address _wallet,\n', '        DroneMadnessToken _token) \n', '        Crowdsale(_rate, _wallet, _token)\n', '        CappedCrowdsale(_cap)\n', '        TimedCrowdsale(_openingTime, _closingTime)\n', '        RefundableCrowdsale(_goal) public {\n', '        require(_goal <= _cap);\n', '        initialRate = _rate;\n', '        minInvestmentInWei = _minInvestmentInWei;\n', '        maxInvestmentInWei = _maxInvestmentInWei;\n', '    }\n', '\n', '    /**\n', '     * @dev Perform the initial token distribution according to the Drone Madness crowdsale rules\n', '     * @param _teamAddress address address for the team tokens\n', '     * @param _prizePoolAddress address address for the prize pool\n', '     * @param _reservePoolAdddress address address for the reserve pool\n', '     */\n', '    function doInitialDistribution(\n', '        address _teamAddress,\n', '        address _prizePoolAddress,\n', '        address _reservePoolAdddress) external onlyOwner {\n', '\n', '        // Create locks for team and reserve pools        \n', '        teamWallet = new TokenTimelock(token, _teamAddress, closingTime.add(TEAM_LOCK_TIME));\n', '        reservePool = new TokenTimelock(token, _reservePoolAdddress, closingTime.add(RESERVE_LOCK_TIME));\n', '        \n', '        // Perform initial distribution\n', '        uint256 tokenCap = CappedToken(token).cap();\n', '\n', '        // Create airdrop and advisor pools\n', '        advisorPool = new TokenPool(token, tokenCap.mul(ADVISOR_TOKENS).div(100));\n', '        airdropPool = new TokenPool(token, tokenCap.mul(AIRDROP_TOKENS).div(100));\n', '\n', '        // Distribute tokens to pools\n', '        MintableToken(token).mint(teamWallet, tokenCap.mul(TEAM_TOKENS).div(100));\n', '        MintableToken(token).mint(_prizePoolAddress, tokenCap.mul(PRIZE_TOKENS).div(100));\n', '        MintableToken(token).mint(advisorPool, tokenCap.mul(ADVISOR_TOKENS).div(100));\n', '        MintableToken(token).mint(airdropPool, tokenCap.mul(AIRDROP_TOKENS).div(100));\n', '        MintableToken(token).mint(reservePool, tokenCap.mul(RESERVE_TOKENS).div(100));\n', '\n', '        // Ensure that only sale tokens left\n', '        assert(tokenCap.sub(token.totalSupply()) == tokenCap.mul(SALE_TOKENS).div(100));\n', '    }\n', '\n', '    /**\n', '    * @dev Update the current rate based on the scheme\n', '    * 1st of Sep - 30rd of Sep -> 30% Bonus\n', '    * 1st of Oct - 31st of Oct -> 20% Bonus\n', '    * 1st of Nov - 30rd of Oct -> 10% Bonus\n', '    * 1st of Dec - 31st of Dec -> 0% Bonus\n', '    */\n', '    function updateRate() external onlyOwner {\n', '        uint256 i = stages.length;\n', '        while (i-- > 0) {\n', '            if (block.timestamp >= stages[i]) {\n', '                rate = initialRate.add(initialRate.mul(bonuses[i]).div(100));\n', '                emit CurrentRateChange(rate);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Perform an airdrop from the airdrop pool to multiple beneficiaries\n', '    * @param _beneficiaries address[] list of beneficiaries\n', '    * @param _amount uint256 amount to airdrop\n', '    */\n', '    function airdropTokens(address[] _beneficiaries, uint256 _amount) external onlyOwner {\n', '        PausableToken(token).unpause();\n', '        airdropPool.allocateEqual(_beneficiaries, _amount);\n', '        PausableToken(token).pause();\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens to advisors from the advisor&#39;s pool\n', '    * @param _beneficiaries address[] list of beneficiaries\n', '    * @param _amounts uint256[] amounts to airdrop\n', '    */\n', '    function allocateAdvisorTokens(address[] _beneficiaries, uint256[] _amounts) external onlyOwner {\n', '        PausableToken(token).unpause();\n', '        advisorPool.allocate(_beneficiaries, _amounts);\n', '        PausableToken(token).pause();\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer the ownership of the token conctract \n', '    * @param _newOwner address the new owner of the token\n', '    */\n', '    function transferTokenOwnership(address _newOwner) onlyOwner public { \n', '        Ownable(token).transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', '    * @dev Validate min and max amounts and other purchase conditions\n', '    * @param _beneficiary address token purchaser\n', '    * @param _weiAmount uint256 amount of wei contributed\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '        require(_weiAmount >= minInvestmentInWei);\n', '        require(invested[_beneficiary].add(_weiAmount) <= maxInvestmentInWei);\n', '        require(!paused);\n', '    }\n', '\n', '    /**\n', '    * @dev Update invested amount\n', '    * @param _beneficiary address receiving the tokens\n', '    * @param _weiAmount uint256 value in wei involved in the purchase\n', '    */\n', '    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '        super._updatePurchasingState(_beneficiary, _weiAmount);\n', '        invested[_beneficiary] = invested[_beneficiary].add(_weiAmount);\n', '    }\n', '\n', '     /**\n', '    * @dev Perform crowdsale finalization. \n', '    * - Finish token minting\n', '    * - Enable transfers\n', '    * - Give back the token ownership to the admin\n', '    */\n', '    function finalization() internal {\n', '        DroneMadnessToken dmToken = DroneMadnessToken(token);\n', '        dmToken.finishMinting();\n', '        dmToken.unpause();\n', '        super.finalization();\n', '        transferTokenOwnership(owner);\n', '        airdropPool.transferOwnership(owner);\n', '        advisorPool.transferOwnership(owner);\n', '    }\n', '}\n', '\n', '// File: contracts\\DroneMadnessPresale.sol\n', '\n', '/**\n', ' * @title Drone Madness Presale Contract\n', ' * @dev Drone Madness Presale Contract\n', ' * The contract is for the private sale of the Drone Madness token. It is:\n', ' * - With a hard cap in ETH\n', ' * - Limited in time (start/end date)\n', ' * - Only for whitelisted participants to purchase tokens\n', ' * - Tokens are minted on each purchase\n', ' */\n', 'contract DroneMadnessPresale is \n', '    MintedCrowdsale,\n', '    CappedCrowdsale,\n', '    TimedCrowdsale,\n', '    WhitelistedCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // Min investment\n', '    uint256 public minInvestmentInWei;\n', '    \n', '    // Investments\n', '    mapping (address => uint256) internal invested;\n', '\n', '    /**\n', '     * @dev Contract constructor\n', '     * @param _cap uint256 hard cap of the crowdsale\n', '     * @param _openingTime uint256 crowdsale start date/time\n', '     * @param _closingTime uint256 crowdsale end date/time\n', '     * @param _rate uint256 initial rate DRNMD for 1 ETH\n', '     * @param _wallet address address where the collected funds will be transferred\n', '     * @param _token DroneMadnessToken our token\n', '     */\n', '    constructor(\n', '        uint256 _cap, \n', '        uint256 _openingTime, \n', '        uint256 _closingTime, \n', '        uint256 _rate, \n', '        uint256 _minInvestmentInWei,\n', '        address _wallet, \n', '        DroneMadnessToken _token) \n', '        Crowdsale(_rate, _wallet, _token)\n', '        CappedCrowdsale(_cap)\n', '        TimedCrowdsale(_openingTime, _closingTime) public {\n', '        minInvestmentInWei = _minInvestmentInWei;\n', '    }\n', '\n', '    /**\n', '    * @dev Validate min investment amount\n', '    * @param _beneficiary address token purchaser\n', '    * @param _weiAmount uint256 amount of wei contributed\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '        require(_weiAmount >= minInvestmentInWei);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer the ownership of the token conctract \n', '    * @param _newOwner address the new owner of the token\n', '    */\n', '    function transferTokenOwnership(address _newOwner) onlyOwner public { \n', '        Ownable(token).transferOwnership(_newOwner);\n', '    }\n', '}']