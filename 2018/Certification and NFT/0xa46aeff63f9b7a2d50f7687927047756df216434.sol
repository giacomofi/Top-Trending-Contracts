['pragma solidity ^0.4.18;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC721 {\n', '    function implementsERC721() public pure returns (bool);\n', '    function totalSupply() public view returns (uint256 total);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function ownerOf(uint256 _tokenId) public view returns (address owner);\n', '    function approve(address _to, uint256 _tokenId) public;\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '    function transfer(address _to, uint256 _tokenId) public;\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '}\n', '\n', 'contract SampleStorage is Ownable {\n', '    \n', '    struct Sample {\n', '        string ipfsHash;\n', '        uint rarity;\n', '    }\n', '    \n', '    mapping (uint => Sample) sampleTypes;\n', '    \n', '    uint public numOfSampleTypes;\n', '    \n', '    uint public numOfCommon;\n', '    uint public numOfRare;\n', '    uint public numOfLegendary;\n', '    uint public numOfMythical;\n', '    \n', '    function addNewSampleType(string _ipfsHash, uint _rarityType) public onlyOwner {\n', '        \n', '        if (_rarityType == 0) {\n', '            numOfCommon++;\n', '        } else if (_rarityType == 1) {\n', '            numOfRare++;\n', '        } else if(_rarityType == 2) {\n', '            numOfLegendary++;\n', '        } else if(_rarityType == 3) {\n', '            numOfMythical++;\n', '        }\n', '        \n', '        sampleTypes[numOfSampleTypes] = Sample({\n', '           ipfsHash: _ipfsHash,\n', '           rarity: _rarityType\n', '        });\n', '        \n', '        numOfSampleTypes++;\n', '    }\n', '    \n', '    function getType(uint _randomNum) public view returns (uint) {\n', '        uint range = 0;\n', '        \n', '        if (_randomNum > 0 && _randomNum < 600) {\n', '            range = 600 / numOfCommon;\n', '            return _randomNum / range;\n', '            \n', '        } else if(_randomNum >= 600 && _randomNum < 900) {\n', '            range = 300 / numOfRare;\n', '            return _randomNum / range;\n', '        } else {\n', '            range = 100 / numOfLegendary;\n', '            return _randomNum / range;\n', '        }\n', '    }\n', '    \n', '}\n', '\n', 'contract Jingle is Ownable, ERC721 {\n', '    \n', '    struct MetaInfo {\n', '        string name;\n', '        string author;\n', '    }\n', '    \n', '    mapping (uint => address) internal tokensForOwner;\n', '    mapping (uint => address) internal tokensForApproved;\n', '    mapping (address => uint[]) internal tokensOwned;\n', '    mapping (uint => uint) internal tokenPosInArr;\n', '    \n', '    mapping(uint => uint[]) internal samplesInJingle;\n', '    mapping(uint => MetaInfo) public jinglesInfo;\n', '    \n', '    mapping(bytes32 => bool) public uniqueJingles;\n', '    \n', '    mapping(uint => uint[]) public soundEffects;\n', '    \n', '    uint public numOfJingles;\n', '    \n', '    address public cryptoJingles;\n', '    Marketplace public marketplaceContract;\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '    event EffectAdded(uint indexed jingleId, uint[] effectParams);\n', '    event Composed(uint indexed jingleId, address indexed owner, \n', '                uint[5] samples, uint[5] jingleTypes, string name, string author);\n', '    \n', '    modifier onlyCryptoJingles() {\n', '        require(msg.sender == cryptoJingles);\n', '        _;\n', '    }\n', '    \n', '    function Jingle() public {\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _jingleId) public {\n', '        require(tokensForOwner[_jingleId] != 0x0);\n', '        require(tokensForOwner[_jingleId] == msg.sender);\n', '        \n', '        tokensForApproved[_jingleId] = 0x0;\n', '        \n', '        removeJingle(msg.sender, _jingleId);\n', '        addJingle(_to, _jingleId);\n', '        \n', '        Approval(msg.sender, 0, _jingleId);\n', '        Transfer(msg.sender, _to, _jingleId);\n', '    }\n', '    \n', '    \n', '    function approve(address _to, uint256 _jingleId) public {\n', '        require(tokensForOwner[_jingleId] != 0x0);\n', '        require(ownerOf(_jingleId) == msg.sender);\n', '        require(_to != msg.sender);\n', '        \n', '        if (_getApproved(_jingleId) != 0x0 || _to != 0x0) {\n', '            tokensForApproved[_jingleId] = _to;\n', '            Approval(msg.sender, _to, _jingleId);\n', '        }\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _jingleId) public {\n', '        require(tokensForOwner[_jingleId] != 0x0);\n', '        require(_getApproved(_jingleId) == msg.sender);\n', '        require(ownerOf(_jingleId) == _from);\n', '        require(_to != 0x0);\n', '        \n', '        tokensForApproved[_jingleId] = 0x0;\n', '        \n', '        removeJingle(_from, _jingleId);\n', '        addJingle(_to, _jingleId);\n', '        \n', '        Approval(_from, 0, _jingleId);\n', '        Transfer(_from, _to, _jingleId);\n', '        \n', '    }\n', '    \n', '    function approveAndSell(uint _jingleId, uint _amount) public {\n', '        approve(address(marketplaceContract), _jingleId);\n', '        \n', '        marketplaceContract.sell(msg.sender, _jingleId, _amount);\n', '    }\n', '    \n', '    function composeJingle(address _owner, uint[5] jingles, \n', '            uint[5] jingleTypes, string name, string author) public onlyCryptoJingles {\n', '        \n', '        uint _jingleId = numOfJingles;\n', '        \n', '        uniqueJingles[keccak256(jingles)] = true;\n', '        \n', '        tokensForOwner[_jingleId] = _owner;\n', '        \n', '        tokensOwned[_owner].push(_jingleId);\n', '        \n', '        samplesInJingle[_jingleId] = jingles;\n', '        \n', '        tokenPosInArr[_jingleId] = tokensOwned[_owner].length - 1;\n', '        \n', '        if (bytes(author).length == 0) {\n', '            author = "Soundtoshi Nakajingles";\n', '        }\n', '        \n', '        jinglesInfo[numOfJingles] = MetaInfo({\n', '            name: name,\n', '            author: author\n', '        });\n', '        \n', '        Composed(numOfJingles, _owner, jingles, jingleTypes, name, author);\n', '        \n', '        numOfJingles++;\n', '    }\n', '    \n', '    function addSoundEffect(uint _jingleId, uint[] _effectParams) external {\n', '        require(msg.sender == ownerOf(_jingleId));\n', '        \n', '        soundEffects[_jingleId] = _effectParams;\n', '        \n', '        EffectAdded(_jingleId, _effectParams);\n', '    }\n', '    \n', '    function implementsERC721() public pure returns (bool) {\n', '        return true;\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return numOfJingles;\n', '    }\n', '    \n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return tokensOwned[_owner].length;\n', '    }\n', '    \n', '    function ownerOf(uint256 _jingleId) public view returns (address) {\n', '        return tokensForOwner[_jingleId];\n', '    }\n', '    \n', '    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n', '        return tokensOwned[_owner][_index];\n', '    }\n', '    \n', '    function getSamplesForJingle(uint _jingleId) external view returns(uint[]) {\n', '        return samplesInJingle[_jingleId];\n', '    }\n', '    \n', '    function getAllJingles(address _owner) external view returns(uint[]) {\n', '        return tokensOwned[_owner];\n', '    }\n', '    \n', '    function getMetaInfo(uint _jingleId) external view returns(string, string) {\n', '        return (jinglesInfo[_jingleId].name, jinglesInfo[_jingleId].author);\n', '    }\n', '    \n', '    function _getApproved(uint _jingleId) internal view returns (address) {\n', '        return tokensForApproved[_jingleId];\n', '    }\n', '    \n', '     // Internal functions of the contract\n', '    \n', '    function addJingle(address _owner, uint _jingleId) internal {\n', '        tokensForOwner[_jingleId] = _owner;\n', '        \n', '        tokensOwned[_owner].push(_jingleId);\n', '        \n', '        tokenPosInArr[_jingleId] = tokensOwned[_owner].length - 1;\n', '    }\n', '    \n', '    // find who owns that jingle and at what position is it in the owners arr \n', '    // Swap that token with the last one in arr and delete the end of arr\n', '    function removeJingle(address _owner, uint _jingleId) internal {\n', '        uint length = tokensOwned[_owner].length;\n', '        uint index = tokenPosInArr[_jingleId];\n', '        uint swapToken = tokensOwned[_owner][length - 1];\n', '\n', '        tokensOwned[_owner][index] = swapToken;\n', '        tokenPosInArr[swapToken] = index;\n', '\n', '        delete tokensOwned[_owner][length - 1];\n', '        tokensOwned[_owner].length--;\n', '    }\n', '    \n', '    // Owner functions \n', '    function setCryptoJinglesContract(address _cryptoJingles) public onlyOwner {\n', '        require(cryptoJingles == 0x0);\n', '        \n', '        cryptoJingles = _cryptoJingles;\n', '    }\n', '    \n', '    function setMarketplaceContract(address _marketplace) public onlyOwner {\n', '        require(address(marketplaceContract) == 0x0);\n', '        \n', '        marketplaceContract = Marketplace(_marketplace);\n', '    }\n', '}\n', '\n', 'contract Sample is Ownable {\n', '    \n', '    mapping (uint => address) internal tokensForOwner;\n', '    mapping (address => uint[]) internal tokensOwned;\n', '    mapping (uint => uint) internal tokenPosInArr;\n', '    \n', '    mapping (uint => uint) public tokenType;\n', '    \n', '    uint public numOfSamples;\n', '    \n', '    address public cryptoJingles;\n', '\n', '    SampleStorage public sampleStorage;\n', '    \n', '    event Mint(address indexed _to, uint256 indexed _tokenId);\n', '    \n', '    modifier onlyCryptoJingles() {\n', '        require(msg.sender == cryptoJingles);\n', '        _;\n', '    }\n', '    \n', '    function Sample(address _sampleStorage) public {\n', '        sampleStorage = SampleStorage(_sampleStorage);\n', '    }\n', '    \n', '    function mint(address _owner, uint _randomNum) public onlyCryptoJingles {\n', '        \n', '        uint sampleType = sampleStorage.getType(_randomNum);\n', '        \n', '        addSample(_owner, sampleType, numOfSamples);\n', '        \n', '        Mint(_owner, numOfSamples);\n', '        \n', '        numOfSamples++;\n', '    }\n', '    \n', '    //TODO: check this again\n', '    // find who owns that sample and at what position is it in the owners arr \n', '    // Swap that token with the last one in arr and delete the end of arr\n', '    function removeSample(address _owner, uint _sampleId) public onlyCryptoJingles {\n', '        uint length = tokensOwned[_owner].length;\n', '        uint index = tokenPosInArr[_sampleId];\n', '        uint swapToken = tokensOwned[_owner][length - 1];\n', '\n', '        tokensOwned[_owner][index] = swapToken;\n', '        tokenPosInArr[swapToken] = index;\n', '\n', '        delete tokensOwned[_owner][length - 1];\n', '        tokensOwned[_owner].length--;\n', '        \n', '        tokensForOwner[_sampleId] = 0x0;\n', '        \n', '    }\n', '    \n', '    function getSamplesForOwner(address _owner) public constant returns (uint[]) {\n', '        return tokensOwned[_owner];\n', '    }\n', '    \n', '    function getTokenType(uint _sampleId) public constant returns (uint) {\n', '        return tokenType[_sampleId];\n', '    }\n', '    \n', '    function isTokenOwner(uint _tokenId, address _user) public constant returns(bool) {\n', '        return tokensForOwner[_tokenId] == _user;\n', '    }\n', '    \n', '    function getAllSamplesForOwner(address _owner) public constant returns(uint[]) {\n', '        uint[] memory samples = tokensOwned[_owner];\n', '        \n', '        uint[] memory usersSamples = new uint[](samples.length * 2);\n', '        \n', '        uint j = 0;\n', '        \n', '        for(uint i = 0; i < samples.length; ++i) {\n', '            usersSamples[j] = samples[i];\n', '            usersSamples[j + 1] = tokenType[samples[i]];\n', '            j += 2;\n', '        }\n', '        \n', '        return usersSamples;\n', '    }\n', '    \n', '    // Internal functions of the contract\n', '    \n', '    function addSample(address _owner, uint _sampleType, uint _sampleId) internal {\n', '        tokensForOwner[_sampleId] = _owner;\n', '        \n', '        tokensOwned[_owner].push(_sampleId);\n', '        \n', '        tokenType[_sampleId] = _sampleType;\n', '        \n', '        tokenPosInArr[_sampleId] = tokensOwned[_owner].length - 1;\n', '    }\n', '    \n', '     // Owner functions \n', '    // Set the crypto jingles contract can \n', '    function setCryptoJinglesContract(address _cryptoJingles) public onlyOwner {\n', '        require(cryptoJingles == 0x0);\n', '        \n', '        cryptoJingles = _cryptoJingles;\n', '    }\n', '}\n', '\n', 'contract CryptoJingles is Ownable {\n', '    \n', '    struct Purchase {\n', '        address user;\n', '        uint blockNumber;\n', '        bool revealed;\n', '        uint numSamples;\n', '        bool exists;\n', '    }\n', '    \n', '    event Purchased(address indexed user, uint blockNumber, uint numJingles, uint numOfPurchases);\n', '    event JinglesOpened(address byWhom, address jingleOwner, uint currBlockNumber);\n', '    \n', '    mapping (uint => bool) public isAlreadyUsed;\n', '    \n', '    mapping(address => string) public authors;\n', '\n', '    uint numOfPurchases;\n', '    \n', '    uint MAX_SAMPLES_PER_PURCHASE = 15;\n', '    uint SAMPLE_PRICE = 10 ** 15;\n', '    uint SAMPLES_PER_JINGLE = 5;\n', '    uint NUM_SAMPLE_RANGE = 1000;\n', '    \n', '    Sample public sampleContract;\n', '    Jingle public jingleContract;\n', '    \n', '    function CryptoJingles(address _sample, address _jingle) public {\n', '        numOfPurchases = 0;\n', '        sampleContract = Sample(_sample);\n', '        jingleContract = Jingle(_jingle);\n', '    }\n', '    \n', '    function buySamples(uint _numSamples, address _to) public payable {\n', '        require(_numSamples <= MAX_SAMPLES_PER_PURCHASE);\n', '        require(msg.value >= (SAMPLE_PRICE * _numSamples));\n', '        \n', '         for (uint i = 0; i < _numSamples; ++i) {\n', '            \n', '            bytes32 blockHash = block.blockhash(block.number - 1);\n', '            \n', '            uint randomNum = randomGen(blockHash, i);\n', '            sampleContract.mint(_to, randomNum);\n', '        }\n', '        \n', '        Purchased(_to, block.number, _numSamples, numOfPurchases);\n', '        \n', '        numOfPurchases++;\n', '    }\n', '    \n', '    function composeJingle(string name, uint[5] samples) public {\n', '        require(jingleContract.uniqueJingles(keccak256(samples)) == false);\n', '        \n', '        //check if you own all the 5 samples \n', '        for (uint i = 0; i < SAMPLES_PER_JINGLE; ++i) {\n', '            bool isOwner = sampleContract.isTokenOwner(samples[i], msg.sender);\n', '            \n', '            require(isOwner == true && isAlreadyUsed[samples[i]] == false);\n', '            \n', '            isAlreadyUsed[samples[i]] = true;\n', '        }\n', '        \n', '        uint[5] memory sampleTypes;\n', '        \n', '        // remove all the samples from your Ownership\n', '        for (uint j = 0; j < SAMPLES_PER_JINGLE; ++j) {\n', '            sampleTypes[j] = sampleContract.tokenType(samples[j]);\n', '            sampleContract.removeSample(msg.sender, samples[j]);\n', '        }\n', '        \n', '        //create a new jingle containing those 5 samples\n', '        jingleContract.composeJingle(msg.sender, samples, sampleTypes, name, authors[msg.sender]);\n', '    }\n', '    \n', '    // Addresses can set their name when composing jingles\n', '    function setAuthorName(string _name) public {\n', '        authors[msg.sender] = _name;\n', '    }\n', '    \n', '    function randomGen(bytes32 blockHash, uint seed) constant public returns (uint randomNumber) {\n', '        return (uint(keccak256(blockHash, block.timestamp, numOfPurchases, seed )) % NUM_SAMPLE_RANGE);\n', '    }\n', '    \n', '    // The only ether kept on this contract are owner money for samples\n', '    function withdraw(uint _amount) public onlyOwner {\n', '        require(_amount <= this.balance);\n', '        \n', '        msg.sender.transfer(_amount);\n', '    }\n', '    \n', '}\n', '\n', 'contract Marketplace is Ownable {\n', '    \n', '    modifier onlyJingle() {\n', '        require(msg.sender == address(jingleContract));\n', '        _;\n', '    }\n', '    \n', '    struct Order {\n', '        uint price;\n', '        address seller;\n', '        uint timestamp;\n', '        bool exists;\n', '    }\n', '    \n', '    event SellOrder(address owner, uint jingleId, uint price);\n', '    event Bought(uint jingleId, address buyer, uint price);\n', '    event Canceled(address owner, uint jingleId);\n', '    \n', '    uint public numOrders;\n', '    uint public ownerBalance;\n', '    \n', '    uint OWNERS_CUT = 3; // 3 percent of every sale goes to owner\n', '    \n', '    mapping (uint => Order) public sellOrders;\n', '    mapping(uint => uint) public positionOfJingle;\n', '    \n', '    uint[] public jinglesOnSale;\n', '    \n', '    Jingle public jingleContract;\n', '    \n', '    function Marketplace(address _jingle) public {\n', '        jingleContract = Jingle(_jingle);\n', '        ownerBalance = 0;\n', '    }\n', '\n', '    function sell(address _owner, uint _jingleId, uint _amount) public onlyJingle {\n', '        require(_amount > 100);\n', '        require(sellOrders[_jingleId].exists == false);\n', '        \n', '        sellOrders[_jingleId] = Order({\n', '           price: _amount,\n', '           seller: _owner,\n', '           timestamp: now,\n', '           exists: true\n', '        });\n', '        \n', '        numOrders++;\n', '        \n', '        // set for iterating\n', '        jinglesOnSale.push(_jingleId);\n', '        positionOfJingle[_jingleId] = jinglesOnSale.length - 1;\n', '        \n', '        //transfer ownership \n', '        jingleContract.transferFrom(_owner, this, _jingleId);\n', '        \n', '        //Fire an sell event\n', '        SellOrder(_owner, _jingleId, _amount);\n', '    }\n', '    \n', '    function buy(uint _jingleId) public payable {\n', '        require(sellOrders[_jingleId].exists == true);\n', '        require(msg.value >= sellOrders[_jingleId].price);\n', '        \n', '        sellOrders[_jingleId].exists = false;\n', '        \n', '        numOrders--;\n', '        \n', '        //delete stuff for iterating \n', '        removeOrder(_jingleId);\n', '        \n', '        //transfer ownership \n', '        jingleContract.transfer(msg.sender, _jingleId);\n', '        \n', '        // transfer money to seller\n', '        uint price = sellOrders[_jingleId].price;\n', '        \n', '        uint threePercent = (price / 100) * OWNERS_CUT;\n', '        \n', '        sellOrders[_jingleId].seller.transfer(price - threePercent);\n', '        \n', '        ownerBalance += threePercent;\n', '        \n', '        //fire and event\n', '        Bought(_jingleId, msg.sender, msg.value);\n', '    }\n', '    \n', '    function cancel(uint _jingleId) public {\n', '        require(sellOrders[_jingleId].exists == true);\n', '        require(sellOrders[_jingleId].seller == msg.sender);\n', '        \n', '        sellOrders[_jingleId].exists = false;\n', '        \n', '        numOrders--;\n', '        \n', '        //delete stuff for iterating \n', '        removeOrder(_jingleId);\n', '        \n', '        jingleContract.transfer(msg.sender, _jingleId);\n', '        \n', '        //fire and event\n', '        Canceled(msg.sender, _jingleId);\n', '    }\n', '    \n', '    function removeOrder(uint _jingleId) internal {\n', '        uint length = jinglesOnSale.length;\n', '        uint index = positionOfJingle[_jingleId];\n', '        uint lastOne = jinglesOnSale[length - 1];\n', '\n', '        jinglesOnSale[index] = lastOne;\n', '        positionOfJingle[lastOne] = index;\n', '\n', '        delete jinglesOnSale[length - 1];\n', '        jinglesOnSale.length--;\n', '    }\n', '    \n', '    //Owners functions \n', '    function withdraw(uint _amount) public onlyOwner {\n', '        require(_amount <= ownerBalance);\n', '        \n', '        msg.sender.transfer(_amount);\n', '    }\n', '    \n', '}']