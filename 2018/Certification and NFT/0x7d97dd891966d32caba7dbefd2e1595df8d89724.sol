['pragma solidity ^0.4.16;\n', '\n', 'interface CCCRCoin {\n', '    function transfer(address receiver, uint amount);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  address public manager;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '    manager = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '  \n', '  modifier onlyManager() {\n', '    require(msg.sender == manager || msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferManagment(address newManager) public onlyOwner {\n', '    require(newManager != address(0));\n', '    manager = newManager;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '\n', '  bool public paused = false;\n', '  bool public finished = false;\n', '  \n', '  modifier whenSaleNotFinish() {\n', '    require(!finished);\n', '    _;\n', '  }\n', '\n', '  modifier whenSaleFinish() {\n', '    require(finished);\n', '    _;\n', '  }\n', '\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '  }\n', '\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '  }\n', '}\n', '\n', 'contract CCCRSale is Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    address public investWallet = 0xbb2efFab932a4c2f77Fc1617C1a563738D71B0a7;\n', '    CCCRCoin public tokenReward; \n', '    uint256 public tokenPrice = 723; // 1ETH / 1$\n', '    uint256 zeroAmount = 10000000000; // 10 zero\n', '    uint256 startline = 1510736400; // 15.11.17 12:00\n', '    uint256 public minCap = 300000000000000;\n', '    uint256 public totalRaised = 207038943697300;\n', '    uint256 public etherOne = 1000000000000000000;\n', '    uint256 public minimumTokens = 10;\n', '\n', '    function CCCRSale(address _tokenReward) {\n', '        tokenReward = CCCRCoin(_tokenReward);\n', '    }\n', '\n', '    function bytesToAddress(bytes source) internal pure returns(address) {\n', '        uint result;\n', '        uint mul = 1;\n', '        for(uint i = 20; i > 0; i--) {\n', '            result += uint8(source[i-1])*mul;\n', '            mul = mul*256;\n', '        }\n', '        return address(result);\n', '    }\n', '\n', '    function () whenNotPaused whenSaleNotFinish payable {\n', '\n', '      require(msg.value >= etherOne.div(tokenPrice).mul(minimumTokens));\n', '        \n', '      uint256 amountWei = msg.value;        \n', '      uint256 amount = amountWei.div(zeroAmount);\n', '      uint256 tokens = amount.mul(getRate());\n', '      \n', '      if(msg.data.length == 20) {\n', '          address referer = bytesToAddress(bytes(msg.data));\n', '          require(referer != msg.sender);\n', '          referer.transfer(amountWei.div(100).mul(20));\n', '      }\n', '      \n', '      tokenReward.transfer(msg.sender, tokens);\n', '      investWallet.transfer(this.balance);\n', '      totalRaised = totalRaised.add(tokens);\n', '\n', '      if (totalRaised >= minCap) {\n', '          finished = true;\n', '      }\n', '    }\n', '\n', '    function getRate() constant internal returns (uint256) {\n', '        if      (block.timestamp < startline + 19 days) return tokenPrice.mul(138).div(100);\n', '        else if (block.timestamp <= startline + 46 days) return tokenPrice.mul(123).div(100);\n', '        else if (block.timestamp <= startline + 60 days) return tokenPrice.mul(115).div(100);\n', '        else if (block.timestamp <= startline + 74 days) return tokenPrice.mul(109).div(100);\n', '        return tokenPrice;\n', '    }\n', '\n', '    function updatePrice(uint256 _tokenPrice) external onlyManager {\n', '        tokenPrice = _tokenPrice;\n', '    }\n', '\n', '    function transferTokens(uint256 _tokens) external onlyManager {\n', '        tokenReward.transfer(msg.sender, _tokens); \n', '    }\n', '\n', '    function newMinimumTokens(uint256 _minimumTokens) external onlyManager {\n', '        minimumTokens = _minimumTokens; \n', '    }\n', '\n', '    function getWei(uint256 _etherAmount) external onlyManager {\n', '        uint256 etherAmount = _etherAmount.mul(etherOne);\n', '        investWallet.transfer(etherAmount); \n', '    }\n', '\n', '    function airdrop(address[] _array1, uint256[] _array2) external whenSaleNotFinish onlyManager {\n', '       address[] memory arrayAddress = _array1;\n', '       uint256[] memory arrayAmount = _array2;\n', '       uint256 arrayLength = arrayAddress.length.sub(1);\n', '       uint256 i = 0;\n', '       \n', '      while (i <= arrayLength) {\n', '           tokenReward.transfer(arrayAddress[i], arrayAmount[i]);\n', '           i = i.add(1);\n', '      }  \n', '    }\n', '\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'interface CCCRCoin {\n', '    function transfer(address receiver, uint amount);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  address public manager;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '    manager = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '  \n', '  modifier onlyManager() {\n', '    require(msg.sender == manager || msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferManagment(address newManager) public onlyOwner {\n', '    require(newManager != address(0));\n', '    manager = newManager;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '\n', '  bool public paused = false;\n', '  bool public finished = false;\n', '  \n', '  modifier whenSaleNotFinish() {\n', '    require(!finished);\n', '    _;\n', '  }\n', '\n', '  modifier whenSaleFinish() {\n', '    require(finished);\n', '    _;\n', '  }\n', '\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '  }\n', '\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '  }\n', '}\n', '\n', 'contract CCCRSale is Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    address public investWallet = 0xbb2efFab932a4c2f77Fc1617C1a563738D71B0a7;\n', '    CCCRCoin public tokenReward; \n', '    uint256 public tokenPrice = 723; // 1ETH / 1$\n', '    uint256 zeroAmount = 10000000000; // 10 zero\n', '    uint256 startline = 1510736400; // 15.11.17 12:00\n', '    uint256 public minCap = 300000000000000;\n', '    uint256 public totalRaised = 207038943697300;\n', '    uint256 public etherOne = 1000000000000000000;\n', '    uint256 public minimumTokens = 10;\n', '\n', '    function CCCRSale(address _tokenReward) {\n', '        tokenReward = CCCRCoin(_tokenReward);\n', '    }\n', '\n', '    function bytesToAddress(bytes source) internal pure returns(address) {\n', '        uint result;\n', '        uint mul = 1;\n', '        for(uint i = 20; i > 0; i--) {\n', '            result += uint8(source[i-1])*mul;\n', '            mul = mul*256;\n', '        }\n', '        return address(result);\n', '    }\n', '\n', '    function () whenNotPaused whenSaleNotFinish payable {\n', '\n', '      require(msg.value >= etherOne.div(tokenPrice).mul(minimumTokens));\n', '        \n', '      uint256 amountWei = msg.value;        \n', '      uint256 amount = amountWei.div(zeroAmount);\n', '      uint256 tokens = amount.mul(getRate());\n', '      \n', '      if(msg.data.length == 20) {\n', '          address referer = bytesToAddress(bytes(msg.data));\n', '          require(referer != msg.sender);\n', '          referer.transfer(amountWei.div(100).mul(20));\n', '      }\n', '      \n', '      tokenReward.transfer(msg.sender, tokens);\n', '      investWallet.transfer(this.balance);\n', '      totalRaised = totalRaised.add(tokens);\n', '\n', '      if (totalRaised >= minCap) {\n', '          finished = true;\n', '      }\n', '    }\n', '\n', '    function getRate() constant internal returns (uint256) {\n', '        if      (block.timestamp < startline + 19 days) return tokenPrice.mul(138).div(100);\n', '        else if (block.timestamp <= startline + 46 days) return tokenPrice.mul(123).div(100);\n', '        else if (block.timestamp <= startline + 60 days) return tokenPrice.mul(115).div(100);\n', '        else if (block.timestamp <= startline + 74 days) return tokenPrice.mul(109).div(100);\n', '        return tokenPrice;\n', '    }\n', '\n', '    function updatePrice(uint256 _tokenPrice) external onlyManager {\n', '        tokenPrice = _tokenPrice;\n', '    }\n', '\n', '    function transferTokens(uint256 _tokens) external onlyManager {\n', '        tokenReward.transfer(msg.sender, _tokens); \n', '    }\n', '\n', '    function newMinimumTokens(uint256 _minimumTokens) external onlyManager {\n', '        minimumTokens = _minimumTokens; \n', '    }\n', '\n', '    function getWei(uint256 _etherAmount) external onlyManager {\n', '        uint256 etherAmount = _etherAmount.mul(etherOne);\n', '        investWallet.transfer(etherAmount); \n', '    }\n', '\n', '    function airdrop(address[] _array1, uint256[] _array2) external whenSaleNotFinish onlyManager {\n', '       address[] memory arrayAddress = _array1;\n', '       uint256[] memory arrayAmount = _array2;\n', '       uint256 arrayLength = arrayAddress.length.sub(1);\n', '       uint256 i = 0;\n', '       \n', '      while (i <= arrayLength) {\n', '           tokenReward.transfer(arrayAddress[i], arrayAmount[i]);\n', '           i = i.add(1);\n', '      }  \n', '    }\n', '\n', '}']
