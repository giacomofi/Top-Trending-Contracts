['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title KYC\n', ' * @dev KYC contract handles the white list for PLCCrowdsale contract\n', ' * Only accounts registered in KYC contract can buy PLC token.\n', ' * Admins can register account, and the reason why\n', ' */\n', 'contract KYC is Ownable {\n', '  // check the address is registered for token sale\n', '  mapping (address => bool) public registeredAddress;\n', '\n', '  // check the address is admin of kyc contract\n', '  mapping (address => bool) public admin;\n', '\n', '  event Registered(address indexed _addr);\n', '  event Unregistered(address indexed _addr);\n', '  event SetAdmin(address indexed _addr, bool indexed _isAdmin);\n', '\n', '  /**\n', '   * @dev check whether the msg.sender is admin or not\n', '   */\n', '  modifier onlyAdmin() {\n', '    require(admin[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  function KYC() public {\n', '    admin[msg.sender] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev set new admin as admin of KYC contract\n', '   * @param _addr address The address to set as admin of KYC contract\n', '   */\n', '  function setAdmin(address _addr, bool _isAdmin)\n', '    public\n', '    onlyOwner\n', '  {\n', '    require(_addr != address(0));\n', '    admin[_addr] = _isAdmin;\n', '\n', '    emit SetAdmin(_addr, _isAdmin);\n', '  }\n', '\n', '  /**\n', '   * @dev register the address for token sale\n', '   * @param _addr address The address to register for token sale\n', '   */\n', '  function register(address _addr)\n', '    public\n', '    onlyAdmin\n', '  {\n', '    require(_addr != address(0));\n', '\n', '    registeredAddress[_addr] = true;\n', '\n', '    emit Registered(_addr);\n', '  }\n', '\n', '  /**\n', '   * @dev register the addresses for token sale\n', '   * @param _addrs address[] The addresses to register for token sale\n', '   */\n', '  function registerByList(address[] _addrs)\n', '    public\n', '    onlyAdmin\n', '  {\n', '    for(uint256 i = 0; i < _addrs.length; i++) {\n', '      require(_addrs[i] != address(0));\n', '\n', '      registeredAddress[_addrs[i]] = true;\n', '\n', '      emit Registered(_addrs[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev unregister the registered address\n', '   * @param _addr address The address to unregister for token sale\n', '   */\n', '  function unregister(address _addr)\n', '    public\n', '    onlyAdmin\n', '  {\n', '    registeredAddress[_addr] = false;\n', '\n', '    emit Unregistered(_addr);\n', '  }\n', '\n', '  /**\n', '   * @dev unregister the registered addresses\n', '   * @param _addrs address[] The addresses to unregister for token sale\n', '   */\n', '  function unregisterByList(address[] _addrs)\n', '    public\n', '    onlyAdmin\n', '  {\n', '    for(uint256 i = 0; i < _addrs.length; i++) {\n', '      registeredAddress[_addrs[i]] = false;\n', '\n', '      emit Unregistered(_addrs[i]);\n', '    }\n', '  }\n', '}']