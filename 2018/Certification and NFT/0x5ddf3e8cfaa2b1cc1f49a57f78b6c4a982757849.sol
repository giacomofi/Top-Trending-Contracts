['pragma solidity 0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Moneda {\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function burn() public;\n', '}\n', '\n', 'contract MonedaICO {\n', '    using SafeMath for uint256;\n', '    \n', '    struct DateRate {\n', '        uint256 date;\n', '        uint256 rate;\n', '    }\n', '\n', '    // PreICO\n', '    uint256 constant public preICOLimit = 20000000e18; // Pre-ICO limit 5%, 20mil\n', '    DateRate public preICO = DateRate(1525132799, 6750); // Monday, April 30, 2018 11:59:59 PM --- 35% Bonus\n', '    uint256 public pre_tokensSold = 0;\n', '    \n', '    // ICO\n', '    DateRate public icoStarts = DateRate(1526342400, 5750); // Tuesday, May 15, 2018 12:00:00 AM --- 15% Bonus\n', '    DateRate public icoEndOfStageA = DateRate(1529020800, 5500); // Friday, June 15, 2018 12:00:00 AM --- 10% Bonus\n', '    DateRate public icoEndOfStageB = DateRate(1530316800, 5250); // Saturday, June 30, 2018 12:00:00 AM --- 5% Bonus\n', '    DateRate public icoEnds = DateRate(1531699199, 5000); // Sunday, July 15, 2018 11:59:59 PM --- 0% Bonus\n', '    uint256 constant public icoLimit = 250000000e18; // ICO limit 62.5%, 250mil\n', '    uint256 public tokensSold = 0;\n', '\n', '    // If the funding goal is not reached, token holders may withdraw their funds\n', '    uint constant public fundingGoal = 10000000e18; // 10mil\n', '    // How much has been raised by crowdale (in ETH)\n', '    uint public amountRaised;\n', '    // The balances (in ETH) of all token holders\n', '    mapping(address => uint) public balances;\n', '    // Indicates if the crowdsale has been ended already\n', '    bool public crowdsaleEnded = false;\n', '    // Tokens will be transfered from this address\n', '    address public tokenOwner;\n', '    // The address of the token contract\n', '    Moneda public tokenReward;\n', '    // The wallet on which the funds will be stored\n', '    address public wallet;\n', '    // Notifying transfers and the success of the crowdsale\n', '    event GoalReached(address tokenOwner, uint amountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution, uint amountRaised);\n', '    \n', '    function MonedaICO(Moneda token, address walletAddr, address tokenOwnerAddr) public {\n', '        tokenReward = token;\n', '        wallet = walletAddr;\n', '        tokenOwner = tokenOwnerAddr;\n', '    }\n', '\n', '    function () external payable {\n', '        require(msg.sender != wallet);\n', '        exchange(msg.sender);\n', '    }\n', '\n', '    function exchange(address receiver) public payable {\n', '        uint256 amount = msg.value;\n', '        uint256 price = getRate();\n', '        uint256 numTokens = amount.mul(price);\n', '        \n', '        bool isPreICO = (now <= preICO.date);\n', '        bool isICO = (now >= icoStarts.date && now <= icoEnds.date);\n', '        \n', '        require(isPreICO || isICO);\n', '        require(numTokens > 500);\n', '        \n', '        if (isPreICO) {\n', '            require(!crowdsaleEnded && pre_tokensSold.add(numTokens) <= preICOLimit);\n', '            require(numTokens <= 5000000e18);\n', '        }\n', '        \n', '        if (isICO) {\n', '            require(!crowdsaleEnded && tokensSold.add(numTokens) <= icoLimit);\n', '        }\n', '\n', '        wallet.transfer(amount);\n', '        balances[receiver] = balances[receiver].add(amount);\n', '        amountRaised = amountRaised.add(amount);\n', '\n', '        if (isPreICO)\n', '            pre_tokensSold = pre_tokensSold.add(numTokens);\n', '        if (isICO)\n', '            tokensSold = tokensSold.add(numTokens);\n', '        \n', '        assert(tokenReward.transferFrom(tokenOwner, receiver, numTokens));\n', '        emit FundTransfer(receiver, amount, true, amountRaised);\n', '    }\n', '\n', '    function getRate() public view returns (uint256) {\n', '        if (now <= preICO.date)\n', '            return preICO.rate;\n', '            \n', '        if (now < icoEndOfStageA.date)\n', '            return icoStarts.rate;\n', '            \n', '        if (now < icoEndOfStageB.date)\n', '            return icoEndOfStageA.rate;\n', '            \n', '        if (now < icoEnds.date)\n', '            return icoEndOfStageB.rate;\n', '        \n', '        return icoEnds.rate;\n', '    }\n', '    \n', '    // Checks if the goal or time limit has been reached and ends the campaign\n', '    function checkGoalReached() public {\n', '        require(now >= icoEnds.date);\n', '        if (pre_tokensSold.add(tokensSold) >= fundingGoal){\n', '            tokenReward.burn(); // Burn remaining tokens but the reserved ones\n', '            emit GoalReached(tokenOwner, amountRaised);\n', '        }\n', '        crowdsaleEnded = true;\n', '    }\n', '    \n', '    // Allows the funders to withdraw their funds if the goal has not been reached.\n', '    // Only works after funds have been returned from the wallet.\n', '    function safeWithdrawal() public {\n', '        require(now >= icoEnds.date);\n', '        uint amount = balances[msg.sender];\n', '        if (address(this).balance >= amount) {\n', '            balances[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                msg.sender.transfer(amount);\n', '                emit FundTransfer(msg.sender, amount, false, amountRaised);\n', '            }\n', '        }\n', '    }\n', '}']
['pragma solidity 0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Moneda {\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function burn() public;\n', '}\n', '\n', 'contract MonedaICO {\n', '    using SafeMath for uint256;\n', '    \n', '    struct DateRate {\n', '        uint256 date;\n', '        uint256 rate;\n', '    }\n', '\n', '    // PreICO\n', '    uint256 constant public preICOLimit = 20000000e18; // Pre-ICO limit 5%, 20mil\n', '    DateRate public preICO = DateRate(1525132799, 6750); // Monday, April 30, 2018 11:59:59 PM --- 35% Bonus\n', '    uint256 public pre_tokensSold = 0;\n', '    \n', '    // ICO\n', '    DateRate public icoStarts = DateRate(1526342400, 5750); // Tuesday, May 15, 2018 12:00:00 AM --- 15% Bonus\n', '    DateRate public icoEndOfStageA = DateRate(1529020800, 5500); // Friday, June 15, 2018 12:00:00 AM --- 10% Bonus\n', '    DateRate public icoEndOfStageB = DateRate(1530316800, 5250); // Saturday, June 30, 2018 12:00:00 AM --- 5% Bonus\n', '    DateRate public icoEnds = DateRate(1531699199, 5000); // Sunday, July 15, 2018 11:59:59 PM --- 0% Bonus\n', '    uint256 constant public icoLimit = 250000000e18; // ICO limit 62.5%, 250mil\n', '    uint256 public tokensSold = 0;\n', '\n', '    // If the funding goal is not reached, token holders may withdraw their funds\n', '    uint constant public fundingGoal = 10000000e18; // 10mil\n', '    // How much has been raised by crowdale (in ETH)\n', '    uint public amountRaised;\n', '    // The balances (in ETH) of all token holders\n', '    mapping(address => uint) public balances;\n', '    // Indicates if the crowdsale has been ended already\n', '    bool public crowdsaleEnded = false;\n', '    // Tokens will be transfered from this address\n', '    address public tokenOwner;\n', '    // The address of the token contract\n', '    Moneda public tokenReward;\n', '    // The wallet on which the funds will be stored\n', '    address public wallet;\n', '    // Notifying transfers and the success of the crowdsale\n', '    event GoalReached(address tokenOwner, uint amountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution, uint amountRaised);\n', '    \n', '    function MonedaICO(Moneda token, address walletAddr, address tokenOwnerAddr) public {\n', '        tokenReward = token;\n', '        wallet = walletAddr;\n', '        tokenOwner = tokenOwnerAddr;\n', '    }\n', '\n', '    function () external payable {\n', '        require(msg.sender != wallet);\n', '        exchange(msg.sender);\n', '    }\n', '\n', '    function exchange(address receiver) public payable {\n', '        uint256 amount = msg.value;\n', '        uint256 price = getRate();\n', '        uint256 numTokens = amount.mul(price);\n', '        \n', '        bool isPreICO = (now <= preICO.date);\n', '        bool isICO = (now >= icoStarts.date && now <= icoEnds.date);\n', '        \n', '        require(isPreICO || isICO);\n', '        require(numTokens > 500);\n', '        \n', '        if (isPreICO) {\n', '            require(!crowdsaleEnded && pre_tokensSold.add(numTokens) <= preICOLimit);\n', '            require(numTokens <= 5000000e18);\n', '        }\n', '        \n', '        if (isICO) {\n', '            require(!crowdsaleEnded && tokensSold.add(numTokens) <= icoLimit);\n', '        }\n', '\n', '        wallet.transfer(amount);\n', '        balances[receiver] = balances[receiver].add(amount);\n', '        amountRaised = amountRaised.add(amount);\n', '\n', '        if (isPreICO)\n', '            pre_tokensSold = pre_tokensSold.add(numTokens);\n', '        if (isICO)\n', '            tokensSold = tokensSold.add(numTokens);\n', '        \n', '        assert(tokenReward.transferFrom(tokenOwner, receiver, numTokens));\n', '        emit FundTransfer(receiver, amount, true, amountRaised);\n', '    }\n', '\n', '    function getRate() public view returns (uint256) {\n', '        if (now <= preICO.date)\n', '            return preICO.rate;\n', '            \n', '        if (now < icoEndOfStageA.date)\n', '            return icoStarts.rate;\n', '            \n', '        if (now < icoEndOfStageB.date)\n', '            return icoEndOfStageA.rate;\n', '            \n', '        if (now < icoEnds.date)\n', '            return icoEndOfStageB.rate;\n', '        \n', '        return icoEnds.rate;\n', '    }\n', '    \n', '    // Checks if the goal or time limit has been reached and ends the campaign\n', '    function checkGoalReached() public {\n', '        require(now >= icoEnds.date);\n', '        if (pre_tokensSold.add(tokensSold) >= fundingGoal){\n', '            tokenReward.burn(); // Burn remaining tokens but the reserved ones\n', '            emit GoalReached(tokenOwner, amountRaised);\n', '        }\n', '        crowdsaleEnded = true;\n', '    }\n', '    \n', '    // Allows the funders to withdraw their funds if the goal has not been reached.\n', '    // Only works after funds have been returned from the wallet.\n', '    function safeWithdrawal() public {\n', '        require(now >= icoEnds.date);\n', '        uint amount = balances[msg.sender];\n', '        if (address(this).balance >= amount) {\n', '            balances[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                msg.sender.transfer(amount);\n', '                emit FundTransfer(msg.sender, amount, false, amountRaised);\n', '            }\n', '        }\n', '    }\n', '}']
