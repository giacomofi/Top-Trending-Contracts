['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract WhiteListRegistry is Ownable {\n', '\n', '    mapping (address => WhiteListInfo) public whitelist;\n', '    using SafeMath for uint;\n', '\n', '    struct WhiteListInfo {\n', '        bool whiteListed;\n', '        uint minCap;\n', '        uint maxCap;\n', '    }\n', '\n', '    event AddedToWhiteList(\n', '        address contributor,\n', '        uint minCap,\n', '        uint maxCap\n', '    );\n', '\n', '    event RemovedFromWhiteList(\n', '        address _contributor\n', '    );\n', '\n', '    function addToWhiteList(address _contributor, uint _minCap, uint _maxCap) public onlyOwner {\n', '        require(_contributor != address(0));\n', '        whitelist[_contributor] = WhiteListInfo(true, _minCap, _maxCap);\n', '        AddedToWhiteList(_contributor, _minCap, _maxCap);\n', '    }\n', '\n', '    function removeFromWhiteList(address _contributor) public onlyOwner {\n', '        require(_contributor != address(0));\n', '        delete whitelist[_contributor];\n', '        RemovedFromWhiteList(_contributor);\n', '    }\n', '\n', '    function isWhiteListed(address _contributor) public view returns(bool) {\n', '        return whitelist[_contributor].whiteListed;\n', '    }\n', '\n', '    function isAmountAllowed(address _contributor, uint _amount) public view returns(bool) {\n', '       return whitelist[_contributor].maxCap >= _amount && whitelist[_contributor].minCap <= _amount && isWhiteListed(_contributor);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract WhiteListRegistry is Ownable {\n', '\n', '    mapping (address => WhiteListInfo) public whitelist;\n', '    using SafeMath for uint;\n', '\n', '    struct WhiteListInfo {\n', '        bool whiteListed;\n', '        uint minCap;\n', '        uint maxCap;\n', '    }\n', '\n', '    event AddedToWhiteList(\n', '        address contributor,\n', '        uint minCap,\n', '        uint maxCap\n', '    );\n', '\n', '    event RemovedFromWhiteList(\n', '        address _contributor\n', '    );\n', '\n', '    function addToWhiteList(address _contributor, uint _minCap, uint _maxCap) public onlyOwner {\n', '        require(_contributor != address(0));\n', '        whitelist[_contributor] = WhiteListInfo(true, _minCap, _maxCap);\n', '        AddedToWhiteList(_contributor, _minCap, _maxCap);\n', '    }\n', '\n', '    function removeFromWhiteList(address _contributor) public onlyOwner {\n', '        require(_contributor != address(0));\n', '        delete whitelist[_contributor];\n', '        RemovedFromWhiteList(_contributor);\n', '    }\n', '\n', '    function isWhiteListed(address _contributor) public view returns(bool) {\n', '        return whitelist[_contributor].whiteListed;\n', '    }\n', '\n', '    function isAmountAllowed(address _contributor, uint _amount) public view returns(bool) {\n', '       return whitelist[_contributor].maxCap >= _amount && whitelist[_contributor].minCap <= _amount && isWhiteListed(_contributor);\n', '    }\n', '\n', '}']
