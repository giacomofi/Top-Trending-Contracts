['/**\n', ' * Crypto Bunny Factory\n', ' * Buy,sell,trade and mate crypto based digital bunnies\n', ' * \n', ' * Developer Team\n', ' * Check on CryptoBunnies.com\n', ' * \n', ' **/\n', ' \n', 'pragma solidity ^0.4.23;\n', '\n', ' \n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', ' function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// The ERC-721 Interface to reference the animal factory token\n', 'interface ERC721Interface {\n', '     function totalSupply() public view returns (uint256);\n', '     function safeTransferFrom(address _from, address _to, uint256 _tokenId);\n', '     function burnToken(address tokenOwner, uint256 tid) ;\n', '     function sendToken(address sendTo, uint tid, string tmeta) ;\n', '     function getTotalTokensAgainstAddress(address ownerAddress) public constant returns (uint totalAnimals);\n', '     function getAnimalIdAgainstAddress(address ownerAddress) public constant returns (uint[] listAnimals);\n', '     function balanceOf(address _owner) public view returns (uint256 _balance);\n', '     function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '     function setAnimalMeta(uint tid, string tmeta);\n', '}\n', '\n', '\n', 'contract AnimalFactory is Ownable\n', '{\n', '    //The structure defining a single animal\n', '    struct AnimalProperties\n', '    {\n', '        uint id;\n', '        string name;\n', '        string desc;\n', '        bool upForSale;\n', '        uint priceForSale;\n', '        bool upForMating;\n', '        bool eggPhase;\n', '        uint priceForMating;\n', '        bool isBornByMating;\n', '        uint parentId1;\n', '        uint parentId2;\n', '        uint birthdate;\n', '        uint costumeId;\n', '        uint generationId;\n', '\t\tbool isSpecial;\n', '    }\n', '    \n', '    using SafeMath for uint256;\n', ' \n', '    // The token being sold\n', '    ERC721Interface public token;\n', '    \n', '    \n', '    //sequentially generated ids for the animals\n', '    uint uniqueAnimalId=0;\n', '\n', '    //mapping to show all the animal properties against a single id\n', '    mapping(uint=>AnimalProperties)  animalAgainstId;\n', '    \n', '    //mapping to show how many children does a single animal has\n', '    mapping(uint=>uint[])  childrenIdAgainstAnimalId;\n', '    \n', '    //the animals that have been advertised for mating\n', '    uint[] upForMatingList;\n', '\n', '    //the animals that have been advertised for selling\n', '    uint[] upForSaleList;\n', '    \n', '    //the list of addresses that can remove animals from egg phase \n', '    address[] memberAddresses;\n', '\n', '    //animal object to be used in various functions as an intermediate variable\n', '    AnimalProperties  animalObject;\n', '\n', '    //The owner percentages from mating and selling transactions\n', '    uint public ownerPerThousandShareForMating = 35;\n', '    uint public ownerPerThousandShareForBuying = 35;\n', '\n', '    //the number of free animals an address can claim\n', '    uint public freeAnimalsLimit = 4;\n', '    \n', '    //variable to show whether the contract has been paused or not\n', '    bool public isContractPaused;\n', '\n', '    //the fees for advertising an animal for sale and mate\n', '    uint public priceForMateAdvertisement;\n', '    uint public priceForSaleAdvertisement;\n', '    \n', '    uint public priceForBuyingCostume;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    // Total no of bunnies created\n', '    uint256 public totalBunniesCreated=0;\n', '\n', '    //rate of each animal\n', '    uint256 public weiPerAnimal = 1*10**18;\n', '    uint[] eggPhaseAnimalIds;\n', '    uint[] animalIdsWithPendingCostumes;\n', '\n', '    /**\n', '     * event for animals purchase logging\n', '     * @param purchaser who paid for the animals\n', '     * @param beneficiary who got the animals\n', '     * @param value weis paid for purchase\n', '     * @param amount of animals purchased\n', '    */\n', '    event AnimalsPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  \n', '   function AnimalFactory(address _walletOwner,address _tokenAddress) public \n', '   { \n', '        require(_walletOwner != 0x0);\n', '        owner = _walletOwner;\n', '        isContractPaused = false;\n', '        priceForMateAdvertisement = 1 * 10 ** 16;\n', '        priceForSaleAdvertisement = 1 * 10 ** 16;\n', '        priceForBuyingCostume = 1 * 10 ** 16;\n', '        token = ERC721Interface(_tokenAddress);\n', '    }\n', '\n', '    /**\n', '     * function to get animal details by id\n', '     **/ \n', '    \n', '    function getAnimalById(uint aid) public constant returns \n', '    (string, string,uint,uint ,uint, uint,uint)\n', '    {\n', '        if(animalAgainstId[aid].eggPhase==true)\n', '        {\n', '            return(animalAgainstId[aid].name,\n', '            animalAgainstId[aid].desc,\n', '            2**256 - 1,\n', '            animalAgainstId[aid].priceForSale,\n', '            animalAgainstId[aid].priceForMating,\n', '            animalAgainstId[aid].parentId1,\n', '            animalAgainstId[aid].parentId2\n', '            );\n', '        }\n', '        else \n', '        {\n', '            return(animalAgainstId[aid].name,\n', '            animalAgainstId[aid].desc,\n', '            animalAgainstId[aid].id,\n', '            animalAgainstId[aid].priceForSale,\n', '            animalAgainstId[aid].priceForMating,\n', '            animalAgainstId[aid].parentId1,\n', '            animalAgainstId[aid].parentId2\n', '            );\n', '        }\n', '    }\n', '    function getAnimalByIdVisibility(uint aid) public constant \n', '    returns (bool upforsale,bool upformating,bool eggphase,bool isbornbymating, \n', '    uint birthdate, uint costumeid, uint generationid)\n', '    {\n', '        return(\n', '            animalAgainstId[aid].upForSale,\n', '            animalAgainstId[aid].upForMating,\n', '            animalAgainstId[aid].eggPhase,\n', '            animalAgainstId[aid].isBornByMating,\n', '            animalAgainstId[aid].birthdate,\n', '            animalAgainstId[aid].costumeId,\n', '            animalAgainstId[aid].generationId\n', '\n', '\t\t\t\n', '            );\n', '    }\n', '    \n', '     function getOwnerByAnimalId(uint aid) public constant \n', '    returns (address)\n', '    {\n', '        return token.ownerOf(aid);\n', '            \n', '    }\n', '    \n', '    /**\n', '     * function to get all animals against an address\n', '     **/ \n', '    function getAllAnimalsByAddress(address ad) public constant returns (uint[] listAnimals)\n', '    {\n', '        require (!isContractPaused);\n', '        return token.getAnimalIdAgainstAddress(ad);\n', '    }\n', '\n', '    /**\n', '     * claim an animal from animal factory\n', '     **/ \n', '    function claimFreeAnimalFromAnimalFactory( string animalName, string animalDesc) public\n', '    {\n', '        require(msg.sender != 0x0);\n', '        require (!isContractPaused);\n', '        uint gId=0;\n', '        //owner can claim as many free animals as he or she wants\n', '        if (msg.sender!=owner)\n', '        {\n', '            require(token.getTotalTokensAgainstAddress(msg.sender)<freeAnimalsLimit);\n', '            gId=1;\n', '        }\n', '\n', '        //sequentially generated animal id   \n', '        uniqueAnimalId++;\n', '        \n', '        //Generating an Animal Record\n', '        animalObject = AnimalProperties({\n', '            id:uniqueAnimalId,\n', '            name:animalName,\n', '            desc:animalDesc,\n', '            upForSale: false,\n', '            eggPhase: false,\n', '            priceForSale:0,\n', '            upForMating: false,\n', '            priceForMating:0,\n', '            isBornByMating: false,\n', '            parentId1:0,\n', '            parentId2:0,\n', '            birthdate:now,\n', '            costumeId:0, \n', '            generationId:gId,\n', '\t\t\tisSpecial:false\n', '        });\n', '        token.sendToken(msg.sender, uniqueAnimalId,animalName);\n', '        \n', '        //updating the mappings to store animal information  \n', '        animalAgainstId[uniqueAnimalId]=animalObject;\n', '        totalBunniesCreated++;\n', '    }\n', '  \n', '    /**\n', '     * Function to buy animals from the factory in exchange for ethers\n', '     **/ \n', '    function buyAnimalsFromAnimalFactory(string animalName, string animalDesc) public payable \n', '    {\n', '        require (!isContractPaused);\n', '        require(validPurchase());\n', '        require(msg.sender != 0x0);\n', '    \n', '        uint gId=0;\n', '        //owner can claim as many free animals as he or she wants\n', '        if (msg.sender!=owner)\n', '        {\n', '            gId=1;\n', '        }\n', '\n', '    \n', '        uint256 weiAmount = msg.value;\n', '        \n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.div(weiPerAnimal);\n', '        \n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '    \n', '        uniqueAnimalId++;\n', '        //Generating Animal Record\n', '        animalObject = AnimalProperties({\n', '            id:uniqueAnimalId,\n', '            name:animalName,\n', '            desc:animalDesc,\n', '            upForSale: false,\n', '            priceForSale:0,\n', '            upForMating: false,\n', '            eggPhase: false,\n', '            priceForMating:0,\n', '            isBornByMating:false,\n', '            parentId1:0,\n', '            parentId2:0,\n', '            birthdate:now,\n', '            costumeId:0,\n', '            generationId:gId,\n', '\t\t\tisSpecial:false\n', '        });\n', '          \n', '          \n', '        //transferring the token\n', '        token.sendToken(msg.sender, uniqueAnimalId,animalName); \n', '        emit AnimalsPurchased(msg.sender, owner, weiAmount, tokens);\n', '        \n', '        //updating the mappings to store animal records\n', '        animalAgainstId[uniqueAnimalId]=animalObject;\n', '        \n', '        \n', '        totalBunniesCreated++;\n', '        \n', '        //transferring the ethers to the owner of the contract\n', '        owner.transfer(msg.value);\n', '    }\n', '  \n', '    /** \n', '     * Buying animals from a user \n', '     **/ \n', '    function buyAnimalsFromUser(uint animalId) public payable \n', '    {\n', '        require (!isContractPaused);\n', '        require(msg.sender != 0x0);\n', '        address prevOwner=token.ownerOf(animalId);\n', '        \n', '        //checking that a user is not trying to buy an animal from himself\n', '        require(prevOwner!=msg.sender);\n', '        \n', '        //the price of sale\n', '        uint price=animalAgainstId[animalId].priceForSale;\n', '\n', '        //the percentage of owner         \n', '        uint OwnerPercentage=animalAgainstId[animalId].priceForSale.mul(ownerPerThousandShareForBuying);\n', '        OwnerPercentage=OwnerPercentage.div(1000);\n', '        uint priceWithOwnerPercentage = animalAgainstId[animalId].priceForSale.add(OwnerPercentage);\n', '        \n', '        //funds sent should be enough to cover the selling price plus the owner fees\n', '        require(msg.value>=priceWithOwnerPercentage); \n', '\n', '        // transfer token only\n', '       // token.mint(prevOwner,msg.sender,1); \n', '    // transfer token here\n', '        token.safeTransferFrom(prevOwner,msg.sender,animalId);\n', '\n', '        // change mapping in animalAgainstId\n', '        animalAgainstId[animalId].upForSale=false;\n', '        animalAgainstId[animalId].priceForSale=0;\n', '\n', '        //remove from for sale list\n', '        for (uint j=0;j<upForSaleList.length;j++)\n', '        {\n', '          if (upForSaleList[j] == animalId)\n', '            delete upForSaleList[j];\n', '        }      \n', '        \n', '        //transfer of money from buyer to beneficiary\n', '        prevOwner.transfer(price);\n', '        \n', '        //transfer of percentage money to ownerWallet\n', '        owner.transfer(OwnerPercentage);\n', '        \n', '        // return extra funds if sent by mistake\n', '        if(msg.value>priceWithOwnerPercentage)\n', '        {\n', '            msg.sender.transfer(msg.value.sub(priceWithOwnerPercentage));\n', '        }\n', '    }\n', '  \n', '    /**\n', '     * function to accept a mate offer by offering one of your own animals \n', '     * and paying ethers ofcourse\n', '     **/ \n', '    function mateAnimal(uint parent1Id, uint parent2Id, string animalName,string animalDesc) public payable \n', '    {\n', '        require (!isContractPaused);\n', '        require(msg.sender != 0x0);\n', '        \n', '        //the requester is actually the owner of the animal which he or she is offering for mating\n', '        require (token.ownerOf(parent2Id) == msg.sender);\n', '        \n', '        //a user cannot mate two of his own animals\n', '        require(token.ownerOf(parent2Id)!=token.ownerOf(parent1Id));\n', '        \n', '        //the animal id given was actually advertised for mating\n', '        require(animalAgainstId[parent1Id].upForMating==true);\n', '\t\t\n', '\t\trequire(animalAgainstId[parent1Id].isSpecial==false);\n', '\t\trequire(animalAgainstId[parent2Id].isSpecial==false);\n', '\t\t\n', '\n', '        // the price requested for mating\n', '        uint price=animalAgainstId[parent1Id].priceForMating;\n', '        \n', '        // the owner fees \n', '        uint OwnerPercentage=animalAgainstId[parent1Id].priceForMating.mul(ownerPerThousandShareForMating);\n', '        OwnerPercentage=OwnerPercentage.div(1000);\n', '        \n', '        uint priceWithOwnerPercentage = animalAgainstId[parent1Id].priceForMating.add(OwnerPercentage);\n', '        \n', '        // the ethers sent should be enough to cover the mating price and the owner fees\n', '        require(msg.value>=priceWithOwnerPercentage);\n', '        uint generationnum = 1;\n', '\n', '        if(animalAgainstId[parent1Id].generationId >= animalAgainstId[parent2Id].generationId)\n', '        {\n', '        generationnum = animalAgainstId[parent1Id].generationId+1;\n', '        }\n', '        else{\n', '        generationnum = animalAgainstId[parent2Id].generationId+1;\n', '        \n', '        }\n', '        // sequentially generated id for animal\n', '         uniqueAnimalId++;\n', '\n', '        //Adding Saving Animal Record\n', '        animalObject = AnimalProperties({\n', '            id:uniqueAnimalId,\n', '            name:animalName,\n', '            desc:animalDesc,\n', '            upForSale: false,\n', '            priceForSale:0,\n', '            upForMating: false,\n', '            eggPhase: true,     \n', '            priceForMating:0,\n', '            isBornByMating:true,\n', '            parentId1: parent1Id,\n', '            parentId2: parent2Id,\n', '            birthdate:now,\n', '            costumeId:0,\n', '            generationId:generationnum,\n', '\t\t\tisSpecial:false\n', '          });\n', '        // transfer token only\n', '        token.sendToken(msg.sender,uniqueAnimalId,animalName);\n', '        //updating the mappings to store animal information\n', '        animalAgainstId[uniqueAnimalId]=animalObject;\n', '        //adding the generated animal to egg phase list\n', '        eggPhaseAnimalIds.push(uniqueAnimalId);\n', '        \n', '        //adding this animal as a child to the parents who mated to produce this offspring\n', '        childrenIdAgainstAnimalId[parent1Id].push(uniqueAnimalId);\n', '        childrenIdAgainstAnimalId[parent2Id].push(uniqueAnimalId);\n', '\n', '        //remove from for mate list\n', '        for (uint i=0;i<upForMatingList.length;i++)\n', '        {\n', '            if (upForMatingList[i]==parent1Id)\n', '                delete upForMatingList[i];   \n', '        }\n', '        \n', '        //remove the parent animal from mating advertisment      \n', '        animalAgainstId[parent1Id].upForMating = false;\n', '        animalAgainstId[parent1Id].priceForMating = 0;\n', '        \n', '        //transfer of money from beneficiary to mate owner\n', '        token.ownerOf(parent1Id).transfer(price);\n', '        \n', '        //transfer of percentage money to ownerWallet\n', '        owner.transfer(OwnerPercentage);\n', '        \n', '        // return extra funds if sent by mistake\n', '        if(msg.value>priceWithOwnerPercentage)\n', '        {\n', '            msg.sender.transfer(msg.value.sub(priceWithOwnerPercentage));\n', '        }\n', '        \n', '    }\n', '\n', '    /**\n', '     * function to transfer an animal to another user\n', '     * direct token cannot be passed as we have disabled the transfer feature\n', '     * all animal transfers should occur through this function\n', '     **/ \n', '    function TransferAnimalToAnotherUser(uint animalId,address to) public \n', '    {\n', '        require (!isContractPaused);\n', '        require(msg.sender != 0x0);\n', '        \n', '        //the requester of the transfer is actually the owner of the animal id provided\n', '        require(token.ownerOf(animalId)==msg.sender);\n', '        \n', '        //if an animal has to be transferred, it shouldnt be up for sale or mate\n', '        require(animalAgainstId[animalId].upForSale == false);\n', '        require(animalAgainstId[animalId].upForMating == false);\n', '        token.safeTransferFrom(msg.sender, to, animalId);\n', '\n', '        }\n', '    \n', '    /**\n', '     * Advertise your animal for selling in exchange for ethers\n', '     **/ \n', '    function putSaleRequest(uint animalId, uint salePrice) public payable\n', '    {\n', '        require (!isContractPaused);\n', '        //everyone except owner has to pay the adertisement fees\n', '        if (msg.sender!=owner)\n', '        {\n', '            require(msg.value>=priceForSaleAdvertisement);  \n', '        }\n', '        \n', '        //the advertiser is actually the owner of the animal id provided\n', '        require(token.ownerOf(animalId)==msg.sender);\n', '        \n', '        //you cannot advertise an animal for sale which is in egg phase\n', '        require(animalAgainstId[animalId].eggPhase==false);\n', '\n', '        // you cannot advertise an animal for sale which is already on sale\n', '        require(animalAgainstId[animalId].upForSale==false);\n', '\n', '        //you cannot put an animal for sale and mate simultaneously\n', '        require(animalAgainstId[animalId].upForMating==false);\n', '        \n', '        //putting up the flag for sale \n', '        animalAgainstId[animalId].upForSale=true;\n', '        animalAgainstId[animalId].priceForSale=salePrice;\n', '        upForSaleList.push(animalId);\n', '        \n', '        //transferring the sale advertisement price to the owner\n', '        owner.transfer(msg.value);\n', '    }\n', '    \n', '    /**\n', '     * function to withdraw a sale advertisement that was put earlier\n', '     **/ \n', '    function withdrawSaleRequest(uint animalId) public\n', '    {\n', '        require (!isContractPaused);\n', '        \n', '        // the animal id actually belongs to the requester\n', '        require(token.ownerOf(animalId)==msg.sender);\n', '        \n', '        // the animal in question is still up for sale\n', '        require(animalAgainstId[animalId].upForSale==true);\n', '\n', '        // change the animal state to not be on sale\n', '        animalAgainstId[animalId].upForSale=false;\n', '        animalAgainstId[animalId].priceForSale=0;\n', '\n', '        // remove the animal from sale list\n', '        for (uint i=0;i<upForSaleList.length;i++)\n', '        {\n', '            if (upForSaleList[i]==animalId)\n', '                delete upForSaleList[i];     \n', '        }\n', '    }\n', '\n', '    /**\n', '     * function to put mating request in exchange for ethers\n', '     **/ \n', '    function putMatingRequest(uint animalId, uint matePrice) public payable\n', '    {\n', '        require(!isContractPaused);\n', '\t\t\n', '\t\trequire(animalAgainstId[animalId].isSpecial==false);\n', '\n', '        // the owner of the contract does not need to pay the mate advertisement fees\n', '        if (msg.sender!=owner)\n', '        {\n', '            require(msg.value>=priceForMateAdvertisement);\n', '        }\n', '    \n', '        require(token.ownerOf(animalId)==msg.sender);\n', '\n', '        // an animal in egg phase cannot be put for mating\n', '        require(animalAgainstId[animalId].eggPhase==false);\n', '        \n', '        // an animal on sale cannot be put for mating\n', '        require(animalAgainstId[animalId].upForSale==false);\n', '        \n', '        // an animal already up for mating cannot be put for mating again\n', '        require(animalAgainstId[animalId].upForMating==false);\n', '        animalAgainstId[animalId].upForMating=true;\n', '        animalAgainstId[animalId].priceForMating=matePrice;\n', '        upForMatingList.push(animalId);\n', '\n', '        // transfer the mating advertisement charges to owner\n', '        owner.transfer(msg.value);\n', '    }\n', '    \n', '    /**\n', '     * withdraw the mating request that was put earlier\n', '     **/ \n', '    function withdrawMatingRequest(uint animalId) public\n', '    {\n', '        require(!isContractPaused);\n', '        require(token.ownerOf(animalId)==msg.sender);\n', '        require(animalAgainstId[animalId].upForMating==true);\n', '        animalAgainstId[animalId].upForMating=false;\n', '        animalAgainstId[animalId].priceForMating=0;\n', '        for (uint i=0;i<upForMatingList.length;i++)\n', '        {\n', '            if (upForMatingList[i]==animalId)\n', '                delete upForMatingList[i];    \n', '        }\n', '    }\n', '  \n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase() internal constant returns (bool) \n', '    {\n', '        // check validity of purchase\n', '        if(msg.value.div(weiPerAnimal)<1)\n', '            return false;\n', '    \n', '        uint quotient=msg.value.div(weiPerAnimal); \n', '   \n', '        uint actualVal=quotient.mul(weiPerAnimal);\n', '   \n', '        if(msg.value>actualVal)\n', '            return false;\n', '        else \n', '            return true;\n', '    }\n', '\n', '    /**\n', '     * function to show how many animals does an address have\n', '     **/\n', '    function showMyAnimalBalance() public view returns (uint256 tokenBalance) \n', '    {\n', '        tokenBalance = token.balanceOf(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * function to set the new price \n', '     * can only be called from owner wallet\n', '     **/ \n', '    function setPriceRate(uint256 newPrice) public onlyOwner returns (bool) \n', '    {\n', '        weiPerAnimal = newPrice;\n', '    }\n', '    \n', '     /**\n', '     * function to set the mate advertisement price \n', '     * can only be called from owner wallet\n', '     **/ \n', '    function setMateAdvertisementRate(uint256 newPrice) public onlyOwner returns (bool) \n', '    {\n', '        priceForMateAdvertisement = newPrice;\n', '    }\n', '    \n', '     /**\n', '     * function to set the sale advertisement price\n', '     * can only be called from owner wallet\n', '     **/ \n', '    function setSaleAdvertisementRate(uint256 newPrice) public onlyOwner returns (bool) \n', '    {\n', '        priceForSaleAdvertisement = newPrice;\n', '    }\n', '    \n', '     /**\n', '     * function to set the sale advertisement price\n', '     * can only be called from owner wallet\n', '     **/ \n', '    function setBuyingCostumeRate(uint256 newPrice) public onlyOwner returns (bool) \n', '    {\n', '        priceForBuyingCostume = newPrice;\n', '    }\n', '    \n', '    \n', '     /**\n', '     * function to get all mating animal ids\n', '     **/ \n', '    function getAllMatingAnimals() public constant returns (uint[]) \n', '    {\n', '        return upForMatingList;\n', '    }\n', '    \n', '     /**\n', '     * function to get all sale animals ids\n', '     **/ \n', '    function getAllSaleAnimals() public constant returns (uint[]) \n', '    {\n', '        return upForSaleList;\n', '    }\n', '    \n', '     /**\n', '     * function to change the free animals limit for each user\n', '     * can only be called from owner wallet\n', '     **/ \n', '    function changeFreeAnimalsLimit(uint limit) public onlyOwner\n', '    {\n', '        freeAnimalsLimit = limit;\n', '    }\n', '\n', '     /**\n', '     * function to change the owner share on buying transactions\n', '     * can only be called from owner wallet\n', '     **/    \n', '    function changeOwnerSharePerThousandForBuying(uint buyshare) public onlyOwner\n', '    {\n', '        ownerPerThousandShareForBuying = buyshare;\n', '    }\n', '    \n', '    /**\n', '     * function to change the owner share on mating transactions\n', '     * can only be called from owner wallet\n', '     **/  \n', '    function changeOwnerSharePerThousandForMating(uint mateshare) public onlyOwner\n', '    {\n', '        ownerPerThousandShareForMating = mateshare;\n', '    }\n', '    \n', '    /**\n', '     * function to pause the contract\n', '     * can only be called from owner wallet\n', '     **/  \n', '    function pauseContract(bool isPaused) public onlyOwner\n', '    {\n', '        isContractPaused = isPaused;\n', '    }\n', '  \n', '    /**\n', '     * function to remove an animal from egg phase\n', '     * can be called from anyone in the member addresses list\n', '     **/  \n', '    function removeFromEggPhase(uint animalId) public\n', '    {\n', '        for (uint i=0;i<memberAddresses.length;i++)\n', '        {\n', '            if (memberAddresses[i]==msg.sender)\n', '            {\n', '                for (uint j=0;j<eggPhaseAnimalIds.length;j++)\n', '                {\n', '                    if (eggPhaseAnimalIds[j]==animalId)\n', '                    {\n', '                        delete eggPhaseAnimalIds[j];\n', '                    }\n', '                }\n', '                animalAgainstId[animalId].eggPhase = false;\n', '            }\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * function to get all children ids of an animal\n', '     **/  \n', '    function getChildrenAgainstAnimalId(uint id) public constant returns (uint[]) \n', '    {\n', '        return childrenIdAgainstAnimalId[id];\n', '    }\n', '    \n', '    /**\n', '     * function to get all animals in the egg phase list\n', '     **/  \n', '    function getEggPhaseList() public constant returns (uint[]) \n', '    {\n', '        return eggPhaseAnimalIds;\n', '    }\n', '    \n', '    \n', '     /**\n', '     * function to get all animals in costume not yet approved list\n', '     **/  \n', '    function getAnimalIdsWithPendingCostume() public constant returns (uint[]) \n', '    {\n', '        return animalIdsWithPendingCostumes;\n', '    }\n', '    \n', '       /**\n', '     * function to request to buy costume\n', '     **/  \n', '    function buyCostume(uint cId, uint aId) public payable \n', '    {\n', '        require(msg.value>=priceForBuyingCostume);\n', '        require(!isContractPaused);\n', '        require(token.ownerOf(aId)==msg.sender);\n', '        require(animalAgainstId[aId].costumeId==0);\n', '        animalAgainstId[aId].costumeId=cId;\n', '        animalIdsWithPendingCostumes.push(aId);\n', '        // transfer the mating advertisement charges to owner\n', '        owner.transfer(msg.value);\n', '    }\n', '    \n', '    \n', '    /**\n', '     * function to approve a pending costume\n', '     * can be called from anyone in the member addresses list\n', '     **/  \n', '    function approvePendingCostume(uint animalId) public\n', '    {\n', '        for (uint i=0;i<memberAddresses.length;i++)\n', '        {\n', '            if (memberAddresses[i]==msg.sender)\n', '            {\n', '                for (uint j=0;j<animalIdsWithPendingCostumes.length;j++)\n', '                {\n', '                    if (animalIdsWithPendingCostumes[j]==animalId)\n', '                    {\n', '                        delete animalIdsWithPendingCostumes[j];\n', '                    }\n', '                }\n', '            }\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * function to add a member that could remove animals from egg phase\n', '     * can only be called from owner wallet\n', '     **/  \n', '    function addMember(address member) public onlyOwner \n', '    { \n', '        memberAddresses.push(member);\n', '    }\n', '  \n', '    /**\n', '     * function to return the members that could remove an animal from egg phase\n', '     **/  \n', '    function listMembers() public constant returns (address[]) \n', '    { \n', '        return memberAddresses;\n', '    }\n', '    \n', '    /**\n', '     * function to delete a member from the list that could remove an animal from egg phase\n', '     * can only be called from owner wallet\n', '     **/  \n', '    function deleteMember(address member) public onlyOwner \n', '    { \n', '        for (uint i=0;i<memberAddresses.length;i++)\n', '        {\n', '            if (memberAddresses[i]==member)\n', '            {\n', '                delete memberAddresses[i];\n', '            }\n', '        }\n', '    }\n', '    /**\n', '     * function to update an animal\n', '     * can only be called from owner wallet\n', '     **/  \n', '    function updateAnimal(uint animalId, string name, string desc) public  \n', '    { \n', '        require(msg.sender==token.ownerOf(animalId));\n', '        animalAgainstId[animalId].name=name;\n', '        animalAgainstId[animalId].desc=desc;\n', '        token.setAnimalMeta(animalId, name);\n', '    }\n', '\t\n', '\t    /**\n', '     * function to update an animal\n', '     * can only be called from owner wallet\n', '     **/  \n', '    function updateAnimalSpecial(uint animalId, bool isSpecial) public onlyOwner \n', '    { \n', '        require(msg.sender==token.ownerOf(animalId));\n', '        animalAgainstId[animalId].isSpecial=isSpecial;\n', '        \n', '    }\n', '   \n', '}']