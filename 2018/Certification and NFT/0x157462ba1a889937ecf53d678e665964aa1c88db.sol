['pragma solidity >=0.4.22 <0.6.0;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;       \n', '    }       \n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract OwnerHelper\n', '{\n', '    address public owner;\n', '    \n', '    modifier onlyOwner\n', '    {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function OwnerHelper() public\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '    function transferOwnership(address _to, uint _value) public returns (bool)\n', '    {\n', '        require(_to != owner);\n', '        require(_to != address(0x0));\n', '        owner = _to;\n', '        //OwnerTransferPropose(owner, _to);\n', '\n', '    }\n', '}\n', '\n', 'contract Crowdsale is OwnerHelper {\n', '    using SafeMath for uint;\n', '    \n', '    uint public saleEthCount = 0;\n', '    uint public maxSaleEth = 2 ether;\n', '    uint constant public minEth = 1;\n', '    uint constant public maxEth = 10;\n', '\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    \n', '\n', '    function () payable public\n', '    {\n', '        //require(msg.value.div(1) == 0);\n', '        require(msg.value >= minEth && msg.value <= maxEth);\n', '        require(msg.value.add(saleEthCount) <= maxSaleEth);\n', '   \n', '        saleEthCount = saleEthCount.add(msg.value);\n', '    }\n', '\n', '    function withdraw() public onlyOwner {\n', '        \n', '        owner.transfer(saleEthCount);\n', '        \n', '    }\n', '\n', '}']