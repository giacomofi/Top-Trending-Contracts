['pragma solidity ^0.4.19;\n', '\n', '// File: zeppelin\\ownership\\Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin\\math\\SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin\\token\\ERC20\\ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin\\token\\ERC20\\BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin\\token\\ERC20\\ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin\\token\\ERC20\\StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin\\token\\ERC20\\MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts\\GMRToken.sol\n', '\n', '/**\n', '* @title Gimmer Token Smart Contract\n', '* @author <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="44283127253704232d292921366a2a2130">[email&#160;protected]</a>, <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="63090a17060d07110223000b0a17170c07024d000c0e">[email&#160;protected]</a>\n', '*/\n', 'contract GMRToken is MintableToken {\n', '    // Constants\n', '    string public constant name = "GimmerToken";\n', '    string public constant symbol = "GMR";\n', '    uint8 public constant decimals = 18;\n', '\n', '    /**\n', '    * @dev Modifier to only allow transfers after the token sale has finished\n', '    */\n', '    modifier onlyWhenTransferEnabled() {\n', '        require(mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to not allow transfers\n', '    * to 0x0 and to this contract\n', '    */\n', '    modifier validDestination(address _to) {\n', '        require(_to != address(0x0));\n', '        require(_to != address(this));\n', '        _;\n', '    }\n', '\n', '    function GMRToken() public {\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public\n', '        onlyWhenTransferEnabled\n', '        validDestination(_to)\n', '        returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        onlyWhenTransferEnabled\n', '        returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval (address _spender, uint _addedValue) public\n', '        onlyWhenTransferEnabled\n', '        returns (bool) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) public\n', '        onlyWhenTransferEnabled\n', '        returns (bool) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public\n', '        onlyWhenTransferEnabled\n', '        validDestination(_to)\n', '        returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '}\n', '\n', '// File: zeppelin\\lifecycle\\Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: contracts\\GimmerToken.sol\n', '\n', '/**\n', '* @title Gimmer Token Smart Contract\n', '* @author <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="660a1305071526010f0b0b031448080312">[email&#160;protected]</a>, <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="8be1e2ffeee5eff9eacbe8e3e2ffffe4efeaa5e8e4e6">[email&#160;protected]</a>\n', '*/\n', 'contract GimmerToken is MintableToken {\n', '    // Constants\n', '    string public constant name = "GimmerToken";\n', '    string public constant symbol = "GMR";\n', '    uint8 public constant decimals = 18;\n', '\n', '    /**\n', '    * @dev Modifier to only allow transfers after the minting has been done\n', '    */\n', '    modifier onlyWhenTransferEnabled() {\n', '        require(mintingFinished);\n', '        _;\n', '    }\n', '\n', '    modifier validDestination(address _to) {\n', '        require(_to != address(0x0));\n', '        require(_to != address(this));\n', '        _;\n', '    }\n', '\n', '    function GimmerToken() public {\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public\n', '        onlyWhenTransferEnabled\n', '        validDestination(_to)\n', '        returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        onlyWhenTransferEnabled\n', '        returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval (address _spender, uint _addedValue) public\n', '        onlyWhenTransferEnabled\n', '        returns (bool) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) public\n', '        onlyWhenTransferEnabled\n', '        returns (bool) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public\n', '        onlyWhenTransferEnabled\n', '        validDestination(_to)\n', '        returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '}\n', '\n', '// File: contracts\\GimmerTokenSale.sol\n', '\n', '/**\n', '* @title Gimmer Token Sale Smart Contract\n', '* @author <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c2aeb7a1a3b182">[email&#160;protected]</a>gimmer.net, <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="afc5c6dbcac1cbddceefccc7c6dbdbc0cbce81ccc0c2">[email&#160;protected]</a>\n', '*/\n', 'contract GimmerTokenSale is Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '    * @dev Supporter structure, which allows us to track\n', '    * how much the user has bought so far, and if he&#39;s flagged as known\n', '    */\n', '    struct Supporter {\n', '        uint256 weiSpent; // the total amount of Wei this address has sent to this contract\n', '        bool hasKYC; // if the user has KYC flagged\n', '    }\n', '\n', '    // Variables\n', '    mapping(address => Supporter) public supportersMap; // Mapping with all the campaign supporters\n', '    GimmerToken public token; // ERC20 GMR Token contract address\n', '    address public fundWallet; // Wallet address to forward all Ether to\n', '    address public kycManagerWallet; // Wallet address that manages the approval of KYC\n', '    address public currentAddress; // Wallet address that manages the approval of KYC\n', '    uint256 public tokensSold; // How many tokens sold have been sold in total\n', '    uint256 public weiRaised; // Total amount of raised money in Wei\n', '    uint256 public maxTxGas; // Maximum transaction gas price allowed for fair-chance transactions\n', '    uint256 public saleWeiLimitWithoutKYC; // The maximum amount of Wei an address can spend here without needing KYC approval during CrowdSale\n', '    bool public finished; // Flag denoting the owner has invoked finishContract()\n', '\n', '    uint256 public constant ONE_MILLION = 1000000; // One million for token cap calculation reference\n', '    uint256 public constant PRE_SALE_GMR_TOKEN_CAP = 15 * ONE_MILLION * 1 ether; // Maximum amount that can be sold during the Pre Sale period\n', '    uint256 public constant GMR_TOKEN_SALE_CAP = 100 * ONE_MILLION * 1 ether; // Maximum amount of tokens that can be sold by this contract\n', '    uint256 public constant MIN_ETHER = 0.1 ether; // Minimum ETH Contribution allowed during the crowd sale\n', '\n', '    /* Allowed Contribution in Ether */\n', '    uint256 public constant PRE_SALE_30_ETH = 30 ether; // Minimum 30 Ether to get 25% Bonus Tokens\n', '    uint256 public constant PRE_SALE_300_ETH = 300 ether; // Minimum 300 Ether to get 30% Bonus Tokens\n', '    uint256 public constant PRE_SALE_1000_ETH = 1000 ether; // Minimum 3000 Ether to get 40% Bonus Tokens\n', '\n', '    /* Bonus Tokens based on the ETH Contributed in single transaction */\n', '    uint256 public constant TOKEN_RATE_BASE_RATE = 2500; // Base Price for reference only\n', '    uint256 public constant TOKEN_RATE_05_PERCENT_BONUS = 2625; // 05% Bonus Tokens During Crowd Sale&#39;s Week 4\n', '    uint256 public constant TOKEN_RATE_10_PERCENT_BONUS = 2750; // 10% Bonus Tokens During Crowd Sale&#39;s Week 3\n', '    uint256 public constant TOKEN_RATE_15_PERCENT_BONUS = 2875; // 15% Bonus Tokens During Crowd Sale&#39;sWeek 2\n', '    uint256 public constant TOKEN_RATE_20_PERCENT_BONUS = 3000; // 20% Bonus Tokens During Crowd Sale&#39;sWeek 1\n', '    uint256 public constant TOKEN_RATE_25_PERCENT_BONUS = 3125; // 25% Bonus Tokens, During PreSale when >= 30 ETH & < 300 ETH\n', '    uint256 public constant TOKEN_RATE_30_PERCENT_BONUS = 3250; // 30% Bonus Tokens, During PreSale when >= 300 ETH & < 3000 ETH\n', '    uint256 public constant TOKEN_RATE_40_PERCENT_BONUS = 3500; // 40% Bonus Tokens, During PreSale when >= 3000 ETH\n', '\n', '    /* Timestamps where investments are allowed */\n', '    uint256 public constant PRE_SALE_START_TIME = 1525176000; // PreSale Start Time : UTC: Wednesday, 17 January 2018 12:00:00\n', '    uint256 public constant PRE_SALE_END_TIME = 1525521600; // PreSale End Time : UTC: Wednesday, 31 January 2018 12:00:00\n', '    uint256 public constant START_WEEK_1 = 1525608000; // CrowdSale Start Week-1 : UTC: Thursday, 1 February 2018 12:00:00\n', '    uint256 public constant START_WEEK_2 = 1526040000; // CrowdSale Start Week-2 : UTC: Thursday, 8 February 2018 12:00:00\n', '    uint256 public constant START_WEEK_3 = 1526472000; // CrowdSale Start Week-3 : UTC: Thursday, 15 February 2018 12:00:00\n', '    uint256 public constant START_WEEK_4 = 1526904000; // CrowdSale Start Week-4 : UTC: Thursday, 22 February 2018 12:00:00\n', '    uint256 public constant SALE_END_TIME = 1527336000; // CrowdSale End Time : UTC: Thursday, 1 March 2018 12:00:00\n', '\n', '    /**\n', '    * @dev Modifier to only allow KYCManager Wallet\n', '    * to execute a function\n', '    */\n', '    modifier onlyKycManager() {\n', '        require(msg.sender == kycManagerWallet);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * Event for token purchase logging\n', '    * @param purchaser The wallet address that bought the tokens\n', '    * @param value How many Weis were paid for the purchase\n', '    * @param amount The amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * Event for kyc status change logging\n', '     * @param user User who has had his KYC status changed\n', '     * @param isApproved A boolean representing the KYC approval the user has been changed to\n', '     */\n', '    event KYC(address indexed user, bool isApproved);\n', '\n', '    /**\n', '     * Constructor\n', '     * @param _fundWallet Address to forward all received Ethers to\n', '     * @param _kycManagerWallet KYC Manager wallet to approve / disapprove user&#39;s KYC\n', '     * @param _saleWeiLimitWithoutKYC Maximum amount of Wei an address can spend in the contract without KYC during the crowdsale\n', '     * @param _maxTxGas Maximum gas price a transaction can have before being reverted\n', '     */\n', '    function GimmerTokenSale(\n', '        address _fundWallet,\n', '        address _kycManagerWallet,\n', '        uint256 _saleWeiLimitWithoutKYC,\n', '        uint256 _maxTxGas\n', '    )\n', '    public\n', '    {\n', '        require(_fundWallet != address(0));\n', '        require(_kycManagerWallet != address(0));\n', '        require(_saleWeiLimitWithoutKYC > 0);\n', '        require(_maxTxGas > 0);\n', '\n', '        currentAddress = this;\n', '\n', '        fundWallet = _fundWallet;\n', '        kycManagerWallet = _kycManagerWallet;\n', '        saleWeiLimitWithoutKYC = _saleWeiLimitWithoutKYC;\n', '        maxTxGas = _maxTxGas;\n', '\n', '        token = new GimmerToken();\n', '    }\n', '\n', '    /* fallback function can be used to buy tokens */\n', '    function () public payable {\n', '        buyTokens();\n', '    }\n', '\n', '    /* low level token purchase function */\n', '    function buyTokens() public payable whenNotPaused {\n', '        // Do not allow if gasprice is bigger than the maximum\n', '        // This is for fair-chance for all contributors, so no one can\n', '        // set a too-high transaction price and be able to buy earlier\n', '        require(tx.gasprice <= maxTxGas);\n', '        // valid purchase identifies which stage the contract is at (PreState/Token Sale)\n', '        // making sure were inside the contribution period and the user\n', '        // is sending enough Wei for the stage&#39;s rules\n', '        require(validPurchase());\n', '\n', '        address sender = msg.sender;\n', '        uint256 weiAmountSent = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 rate = getRate(weiAmountSent);\n', '        uint256 newTokens = weiAmountSent.mul(rate);\n', '\n', '        // look if we have not yet reached the cap\n', '        uint256 totalTokensSold = tokensSold.add(newTokens);\n', '        if (isCrowdSaleRunning()) {\n', '            require(totalTokensSold <= GMR_TOKEN_SALE_CAP);\n', '        } else if (isPreSaleRunning()) {\n', '            require(totalTokensSold <= PRE_SALE_GMR_TOKEN_CAP);\n', '        }\n', '\n', '        // update supporter state\n', '        Supporter storage sup = supportersMap[sender];\n', '        uint256 totalWei = sup.weiSpent.add(weiAmountSent);\n', '        sup.weiSpent = totalWei;\n', '\n', '        // update contract state\n', '        weiRaised = weiRaised.add(weiAmountSent);\n', '        tokensSold = totalTokensSold;\n', '\n', '        // mint the coins\n', '        token.mint(sender, newTokens);\n', '        TokenPurchase(sender, weiAmountSent, newTokens);\n', '\n', '        // forward the funds to the wallet\n', '        fundWallet.transfer(msg.value);\n', '    }\n', '\n', '    /**\n', '    * @dev Ends the operation of the contract\n', '    */\n', '    function finishContract() public onlyOwner {\n', '        // make sure the contribution period has ended\n', '        require(now > SALE_END_TIME);\n', '        require(!finished);\n', '\n', '        finished = true;\n', '\n', '        // send the 10% commission to Gimmer&#39;s fund wallet\n', '        uint256 tenPC = tokensSold.div(10);\n', '        token.mint(fundWallet, tenPC);\n', '\n', '        // finish the minting of the token, so the system allows transfers\n', '        token.finishMinting();\n', '\n', '        // transfer ownership of the token contract to the fund wallet,\n', '        // so it isn&#39;t locked to be a child of the crowd sale contract\n', '        token.transferOwnership(fundWallet);\n', '    }\n', '\n', '    function setSaleWeiLimitWithoutKYC(uint256 _newSaleWeiLimitWithoutKYC) public onlyKycManager {\n', '        require(_newSaleWeiLimitWithoutKYC > 0);\n', '        saleWeiLimitWithoutKYC = _newSaleWeiLimitWithoutKYC;\n', '    }\n', '\n', '    /**\n', '    * @dev Updates the maximum allowed transaction cost that can be received\n', '    * on the buyTokens() function.\n', '    * @param _newMaxTxGas The new maximum transaction cost\n', '    */\n', '    function updateMaxTxGas(uint256 _newMaxTxGas) public onlyKycManager {\n', '        require(_newMaxTxGas > 0);\n', '        maxTxGas = _newMaxTxGas;\n', '    }\n', '\n', '    /**\n', '    * @dev Flag an user as known\n', '    * @param _user The user to flag as known\n', '    */\n', '    function approveUserKYC(address _user) onlyKycManager public {\n', '        require(_user != address(0));\n', '\n', '        Supporter storage sup = supportersMap[_user];\n', '        sup.hasKYC = true;\n', '        KYC(_user, true);\n', '    }\n', '\n', '    /**\n', '     * @dev Flag an user as unknown/disapproved\n', '     * @param _user The user to flag as unknown / suspecious\n', '     */\n', '    function disapproveUserKYC(address _user) onlyKycManager public {\n', '        require(_user != address(0));\n', '\n', '        Supporter storage sup = supportersMap[_user];\n', '        sup.hasKYC = false;\n', '        KYC(_user, false);\n', '    }\n', '\n', '    /**\n', '    * @dev Changes the KYC manager to a new address\n', '    * @param _newKYCManagerWallet The new address that will be managing KYC approval\n', '    */\n', '    function setKYCManager(address _newKYCManagerWallet) onlyOwner public {\n', '        require(_newKYCManagerWallet != address(0));\n', '        kycManagerWallet = _newKYCManagerWallet;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns true if any of the token sale stages are currently running\n', '    * @return A boolean representing the state of this contract\n', '    */\n', '    function isTokenSaleRunning() public constant returns (bool) {\n', '        return (isPreSaleRunning() || isCrowdSaleRunning());\n', '    }\n', '\n', '    /**\n', '    * @dev Returns true if the presale sale is currently running\n', '    * @return A boolean representing the state of the presale\n', '    */\n', '    function isPreSaleRunning() public constant returns (bool) {\n', '        return (now >= PRE_SALE_START_TIME && now < PRE_SALE_END_TIME);\n', '    }\n', '\n', '    /**\n', '    * @dev Returns true if the public sale is currently running\n', '    * @return A boolean representing the state of the crowd sale\n', '    */\n', '    function isCrowdSaleRunning() public constant returns (bool) {\n', '        return (now >= START_WEEK_1 && now <= SALE_END_TIME);\n', '    }\n', '\n', '    /**\n', '    * @dev Returns true if the public sale has ended\n', '    * @return A boolean representing if we are past the contribution date for this contract\n', '    */\n', '    function hasEnded() public constant returns (bool) {\n', '        return now > SALE_END_TIME;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns true if the pre sale has ended\n', '    * @return A boolean representing if we are past the pre sale contribution dates\n', '    */\n', '    function hasPreSaleEnded() public constant returns (bool) {\n', '        return now > PRE_SALE_END_TIME;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns if an user has KYC approval or not\n', '    * @return A boolean representing the user&#39;s KYC status\n', '    */\n', '    function userHasKYC(address _user) public constant returns (bool) {\n', '        return supportersMap[_user].hasKYC;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the weiSpent of a user\n', '     */\n', '    function userWeiSpent(address _user) public constant returns (uint256) {\n', '        return supportersMap[_user].weiSpent;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the rate the user will be paying at,\n', '     * based on the amount of Wei sent to the contract, and the current time\n', '     * @return An uint256 representing the rate the user will pay for the GMR tokens\n', '     */\n', '    function getRate(uint256 _weiAmount) internal constant returns (uint256) {\n', '        if (isCrowdSaleRunning()) {\n', '            if (now >= START_WEEK_4) { return TOKEN_RATE_05_PERCENT_BONUS; }\n', '            else if (now >= START_WEEK_3) { return TOKEN_RATE_10_PERCENT_BONUS; }\n', '            else if (now >= START_WEEK_2) { return TOKEN_RATE_15_PERCENT_BONUS; }\n', '            else if (now >= START_WEEK_1) { return TOKEN_RATE_20_PERCENT_BONUS; }\n', '        }\n', '        else if (isPreSaleRunning()) {\n', '            if (_weiAmount >= PRE_SALE_1000_ETH) { return TOKEN_RATE_40_PERCENT_BONUS; }\n', '            else if (_weiAmount >= PRE_SALE_300_ETH) { return TOKEN_RATE_30_PERCENT_BONUS; }\n', '            else if (_weiAmount >= PRE_SALE_30_ETH) { return TOKEN_RATE_25_PERCENT_BONUS; }\n', '        }\n', '    }\n', '\n', '    /* @return true if the transaction can buy tokens, otherwise false */\n', '    function validPurchase() internal constant returns (bool) {\n', '        bool userHasKyc = userHasKYC(msg.sender);\n', '\n', '        if (isCrowdSaleRunning()) {\n', '            // crowdsale restrictions (KYC only needed after wei limit, minimum of 0.1 ETH tx)\n', '            if(!userHasKyc) {\n', '                Supporter storage sup = supportersMap[msg.sender];\n', '                uint256 ethContribution = sup.weiSpent.add(msg.value);\n', '                if (ethContribution > saleWeiLimitWithoutKYC) {\n', '                    return false;\n', '                }\n', '            }\n', '            return msg.value >= MIN_ETHER;\n', '        }\n', '        else if (isPreSaleRunning()) {\n', '            // presale restrictions (at least 30 eth, always KYC)\n', '            return userHasKyc && msg.value >= PRE_SALE_30_ETH;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\GMRTokenManager.sol\n', '\n', '/**\n', '* @title Gimmer Token Sale Manager Smart Contract\n', '* @author <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e78b92848694a7808e8a8a8295c9898293">[email&#160;protected]</a>, <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="43292a37262d27312203202b2a37372c27226d202c2e">[email&#160;protected]</a>\n', '*/\n', 'contract GMRTokenManager is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    /* Contracts */\n', '    GMRToken public token;\n', '    GimmerTokenSale public oldTokenSale;\n', '\n', '    /* Flags for tracking contract usage */\n', '    bool public finishedMigration;\n', '\n', '    /* Constants */\n', '    uint256 public constant TOKEN_BONUS_RATE = 8785; // The rate for the bonus given to precontract contributors\n', '\n', '    /**\n', '     * Constructor\n', '     * @param _oldTokenSaleAddress Old Token Sale contract address\n', '     */\n', '    function GMRTokenManager(address _oldTokenSaleAddress) public {\n', '        // access the old token sale\n', '        oldTokenSale = GimmerTokenSale(_oldTokenSaleAddress);\n', '\n', '        // deploy the token contract\n', '        token = new GMRToken();\n', '    }\n', '\n', '    /**\n', '     * Prepopulates the specified wallet\n', '     * @param _wallet Wallet to mint the reserve tokens to\n', '     */\n', '    function prepopulate(address _wallet) public onlyOwner {\n', '        require(!finishedMigration);\n', '        require(_wallet != address(0));\n', '\n', '        // get the balance the user spent in the last sale\n', '        uint256 spent = oldTokenSale.userWeiSpent(_wallet);\n', '        require(spent != 0);\n', '\n', '        // make sure we have not prepopulated already\n', '        uint256 balance = token.balanceOf(_wallet);\n', '        require(balance == 0);\n', '\n', '        // calculate the new balance with bonus\n', '        uint256 tokens = spent.mul(TOKEN_BONUS_RATE);\n', '\n', '        // mint the coins\n', '        token.mint(_wallet, tokens);\n', '    }\n', '\n', '    /**\n', '     * Ends the migration process by giving the token\n', '     * contract back to the owner\n', '     */\n', '    function endMigration() public onlyOwner {\n', '        require(!finishedMigration);\n', '        finishedMigration = true;\n', '\n', '        token.transferOwnership(owner);\n', '    }\n', '}']