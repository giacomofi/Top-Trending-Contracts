['pragma solidity ^0.4.19;\n', '\n', '/* Adapted from strings.sol created by Nick Johnson <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="43223122202b2d2a27032d2c37272c376d2d2637">[email&#160;protected]</a>>\n', ' * Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\n', ' * @title String & slice utility library for Solidity contracts.\n', ' * @author Nick Johnson <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="83e2f1e2e0ebedeae7c3edecf7e7ecf7adede6f7">[email&#160;protected]</a>>\n', ' */\n', 'library strings {\n', '    \n', '    struct slice {\n', '        uint _len;\n', '        uint _ptr;\n', '    }\n', '\n', '    /*\n', '     * @dev Returns a slice containing the entire string.\n', '     * @param self The string to make a slice from.\n', '     * @return A newly allocated slice containing the entire string.\n', '     */\n', '    function toSlice(string self) internal pure returns (slice) {\n', '        uint ptr;\n', '        assembly {\n', '            ptr := add(self, 0x20)\n', '        }\n', '        return slice(bytes(self).length, ptr);\n', '    }\n', '\n', '    function memcpy(uint dest, uint src, uint len) private pure {\n', '        // Copy word-length chunks while possible\n', '        for(; len >= 32; len -= 32) {\n', '            assembly {\n', '                mstore(dest, mload(src))\n', '            }\n', '            dest += 32;\n', '            src += 32;\n', '        }\n', '\n', '        // Copy remaining bytes\n', '        uint mask = 256 ** (32 - len) - 1;\n', '        assembly {\n', '            let srcpart := and(mload(src), not(mask))\n', '            let destpart := and(mload(dest), mask)\n', '            mstore(dest, or(destpart, srcpart))\n', '        }\n', '    }\n', '\n', '    \n', '    function concat(slice self, slice other) internal returns (string) {\n', '        var ret = new string(self._len + other._len);\n', '        uint retptr;\n', '        assembly { retptr := add(ret, 32) }\n', '        memcpy(retptr, self._ptr, self._len);\n', '        memcpy(retptr + self._len, other._ptr, other._len);\n', '        return ret;\n', '    }\n', '\n', '    /*\n', '     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\n', '     * @param self The slice to search.\n', '     * @param needle The text to search for in `self`.\n', '     * @return The number of occurrences of `needle` found in `self`.\n', '     */\n', '    function count(slice self, slice needle) internal returns (uint cnt) {\n', '        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\n', '        while (ptr <= self._ptr + self._len) {\n', '            cnt++;\n', '            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\n', '        }\n', '    }\n', '\n', '    // Returns the memory address of the first byte of the first occurrence of\n', '    // `needle` in `self`, or the first byte after `self` if not found.\n', '    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {\n', '        uint ptr;\n', '        uint idx;\n', '\n', '        if (needlelen <= selflen) {\n', '            if (needlelen <= 32) {\n', '                // Optimized assembly for 68 gas per byte on short strings\n', '                assembly {\n', '                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\n', '                    let needledata := and(mload(needleptr), mask)\n', '                    let end := add(selfptr, sub(selflen, needlelen))\n', '                    ptr := selfptr\n', '                    loop:\n', '                    jumpi(exit, eq(and(mload(ptr), mask), needledata))\n', '                    ptr := add(ptr, 1)\n', '                    jumpi(loop, lt(sub(ptr, 1), end))\n', '                    ptr := add(selfptr, selflen)\n', '                    exit:\n', '                }\n', '                return ptr;\n', '            } else {\n', '                // For long needles, use hashing\n', '                bytes32 hash;\n', '                assembly { hash := sha3(needleptr, needlelen) }\n', '                ptr = selfptr;\n', '                for (idx = 0; idx <= selflen - needlelen; idx++) {\n', '                    bytes32 testHash;\n', '                    assembly { testHash := sha3(ptr, needlelen) }\n', '                    if (hash == testHash)\n', '                        return ptr;\n', '                    ptr += 1;\n', '                }\n', '            }\n', '        }\n', '        return selfptr + selflen;\n', '    }\n', '\n', '    /*\n', '     * @dev Splits the slice, setting `self` to everything after the first\n', '     *      occurrence of `needle`, and `token` to everything before it. If\n', '     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n', '     *      and `token` is set to the entirety of `self`.\n', '     * @param self The slice to split.\n', '     * @param needle The text to search for in `self`.\n', '     * @param token An output parameter to which the first token is written.\n', '     * @return `token`.\n', '     */\n', '    function split(slice self, slice needle, slice token) internal returns (slice) {\n', '        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n', '        token._ptr = self._ptr;\n', '        token._len = ptr - self._ptr;\n', '        if (ptr == self._ptr + self._len) {\n', '            // Not found\n', '            self._len = 0;\n', '        } else {\n', '            self._len -= token._len + needle._len;\n', '            self._ptr = ptr + needle._len;\n', '        }\n', '        return token;\n', '    }\n', '\n', '     /*\n', '     * @dev Splits the slice, setting `self` to everything after the first\n', '     *      occurrence of `needle`, and returning everything before it. If\n', '     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n', '     *      and the entirety of `self` is returned.\n', '     * @param self The slice to split.\n', '     * @param needle The text to search for in `self`.\n', '     * @return The part of `self` up to the first occurrence of `delim`.\n', '     */\n', '    function split(slice self, slice needle) internal returns (slice token) {\n', '        split(self, needle, token);\n', '    }\n', '\n', '    /*\n', '     * @dev Copies a slice to a new string.\n', '     * @param self The slice to copy.\n', '     * @return A newly allocated string containing the slice&#39;s text.\n', '     */\n', '    function toString(slice self) internal pure returns (string) {\n', '        var ret = new string(self._len);\n', '        uint retptr;\n', '        assembly { retptr := add(ret, 32) }\n', '\n', '        memcpy(retptr, self._ptr, self._len);\n', '        return ret;\n', '    }\n', '\n', '}\n', '\n', '/* Helper String Functions for Game Manager Contract\n', ' * @title String Healpers\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' */\n', 'contract StringHelpers {\n', '    using strings for *;\n', '    \n', '    function stringToBytes32(string memory source) internal returns (bytes32 result) {\n', '        bytes memory tempEmptyStringTest = bytes(source);\n', '        if (tempEmptyStringTest.length == 0) {\n', '            return 0x0;\n', '        }\n', '    \n', '        assembly {\n', '            result := mload(add(source, 32))\n', '        }\n', '    }\n', '\n', '    function bytes32ToString(bytes32 x) constant internal returns (string) {\n', '        bytes memory bytesString = new bytes(32);\n', '        uint charCount = 0;\n', '        for (uint j = 0; j < 32; j++) {\n', '            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n', '            if (char != 0) {\n', '                bytesString[charCount] = char;\n', '                charCount++;\n', '            }\n', '        }\n', '        bytes memory bytesStringTrimmed = new bytes(charCount);\n', '        for (j = 0; j < charCount; j++) {\n', '            bytesStringTrimmed[j] = bytesString[j];\n', '        }\n', '        return string(bytesStringTrimmed);\n', '    }\n', '}\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="debabbaabb9ebfa6b7b1b3a4bbb0f0bdb1">[email&#160;protected]</a>> (https://github.com/dete)\n', 'contract ERC721 {\n', '  // Required methods\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address owner);\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function implementsERC721() public pure returns (bool);\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '\n', '  // Optional\n', '  // function name() public view returns (string name);\n', '  // function symbol() public view returns (string symbol);\n', '  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n', '  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n', '\n', '  // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n', '  function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n', '}\n', '\n', '/* Controls state and access rights for contract functions\n', ' * @title Operational Control\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' * Inspired and adapted from contract created by OpenZeppelin\n', ' * Ref: https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract OperationalControl {\n', '    // Facilitates access & control for the game.\n', '    // Roles:\n', '    //  -The Managers (Primary/Secondary): Has universal control of all elements (No ability to withdraw)\n', '    //  -The Banker: The Bank can withdraw funds and adjust fees / prices.\n', '\n', '    /// @dev Emited when contract is upgraded\n', '    event ContractUpgrade(address newContract);\n', '\n', '    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '    address public managerPrimary;\n', '    address public managerSecondary;\n', '    address public bankManager;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '\n', '    // @dev Keeps track whether the contract erroredOut. When that is true, most actions are blocked & refund can be claimed\n', '    bool public error = false;\n', '\n', '    /// @dev Operation modifiers for limiting access\n', '    modifier onlyManager() {\n', '        require(msg.sender == managerPrimary || msg.sender == managerSecondary);\n', '        _;\n', '    }\n', '\n', '    modifier onlyBanker() {\n', '        require(msg.sender == bankManager);\n', '        _;\n', '    }\n', '\n', '    modifier anyOperator() {\n', '        require(\n', '            msg.sender == managerPrimary ||\n', '            msg.sender == managerSecondary ||\n', '            msg.sender == bankManager\n', '        );\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Primary Manager.\n', '    function setPrimaryManager(address _newGM) external onlyManager {\n', '        require(_newGM != address(0));\n', '\n', '        managerPrimary = _newGM;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Secondary Manager.\n', '    function setSecondaryManager(address _newGM) external onlyManager {\n', '        require(_newGM != address(0));\n', '\n', '        managerSecondary = _newGM;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Banker.\n', '    function setBanker(address _newBK) external onlyManager {\n', '        require(_newBK != address(0));\n', '\n', '        bankManager = _newBK;\n', '    }\n', '\n', '    /*** Pausable functionality adapted from OpenZeppelin ***/\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract has Error\n', '    modifier whenError {\n', '        require(error);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any Operator role to pause the contract.\n', '    /// Used only if a bug or exploit is discovered (Here to limit losses / damage)\n', '    function pause() external onlyManager whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function unpause() public onlyManager whenPaused {\n', '        // can&#39;t unpause if contract was upgraded\n', '        paused = false;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function hasError() public onlyManager whenPaused {\n', '        error = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function noError() public onlyManager whenPaused {\n', '        error = false;\n', '    }\n', '}\n', '\n', 'contract CSCPreSaleItemBase is ERC721, OperationalControl, StringHelpers {\n', '\n', '    /*** EVENTS ***/\n', '    /// @dev The Created event is fired whenever a new collectible comes into existence.\n', '    event CollectibleCreated(address owner, uint256 globalId, uint256 collectibleType, uint256 collectibleClass, uint256 sequenceId, bytes32 collectibleName);\n', '    \n', '    /*** CONSTANTS ***/\n', '    \n', '    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '    string public constant NAME = "CSCPreSaleFactory";\n', '    string public constant SYMBOL = "CSCPF";\n', '    bytes4 constant InterfaceSignature_ERC165 = bytes4(keccak256(&#39;supportsInterface(bytes4)&#39;));\n', '    bytes4 constant InterfaceSignature_ERC721 =\n', '        bytes4(keccak256(&#39;name()&#39;)) ^\n', '        bytes4(keccak256(&#39;symbol()&#39;)) ^\n', '        bytes4(keccak256(&#39;totalSupply()&#39;)) ^\n', '        bytes4(keccak256(&#39;balanceOf(address)&#39;)) ^\n', '        bytes4(keccak256(&#39;ownerOf(uint256)&#39;)) ^\n', '        bytes4(keccak256(&#39;approve(address,uint256)&#39;)) ^\n', '        bytes4(keccak256(&#39;transfer(address,uint256)&#39;)) ^\n', '        bytes4(keccak256(&#39;transferFrom(address,address,uint256)&#39;)) ^\n', '        bytes4(keccak256(&#39;tokensOfOwner(address)&#39;)) ^\n', '        bytes4(keccak256(&#39;tokenMetadata(uint256,string)&#39;));\n', '    \n', '    /// @dev CSC Pre Sale Struct, having details of the collectible\n', '    struct CSCPreSaleItem {\n', '    \n', '        /// @dev sequence ID i..e Local Index\n', '        uint256 sequenceId;\n', '        \n', '        /// @dev name of the collectible stored in bytes\n', '        bytes32 collectibleName;\n', '        \n', '        /// @dev Collectible Type\n', '        uint256 collectibleType;\n', '        \n', '        /// @dev Collectible Class\n', '        uint256 collectibleClass;\n', '        \n', '        /// @dev owner address\n', '        address owner;\n', '        \n', '        /// @dev redeemed flag (to help whether it got redeemed or not)\n', '        bool isRedeemed;\n', '    }\n', '    \n', '    /// @dev array of CSCPreSaleItem type holding information on the Collectibles Created\n', '    CSCPreSaleItem[] allPreSaleItems;\n', '    \n', '    /// @dev Max Count for preSaleItem type -> preSaleItem class -> max. limit\n', '    mapping(uint256 => mapping(uint256 => uint256)) public preSaleItemTypeToClassToMaxLimit;\n', '    \n', '    /// @dev Map from preSaleItem type -> preSaleItem class -> max. limit set (bool)\n', '    mapping(uint256 => mapping(uint256 => bool)) public preSaleItemTypeToClassToMaxLimitSet;\n', '\n', '    /// @dev Map from preSaleItem type -> preSaleItem class -> Name (string / bytes32)\n', '    mapping(uint256 => mapping(uint256 => bytes32)) public preSaleItemTypeToClassToName;\n', '    \n', '    // @dev mapping which holds all the possible addresses which are allowed to interact with the contract\n', '    mapping (address => bool) approvedAddressList;\n', '    \n', '    // @dev mapping holds the preSaleItem -> owner details\n', '    mapping (uint256 => address) public preSaleItemIndexToOwner;\n', '    \n', '    // @dev A mapping from owner address to count of tokens that address owns.\n', '    //  Used internally inside balanceOf() to resolve ownership count.\n', '    mapping (address => uint256) private ownershipTokenCount;\n', '    \n', '    /// @dev A mapping from preSaleItem to an address that has been approved to call\n', '    ///  transferFrom(). Each Collectible can only have one approved address for transfer\n', '    ///  at any time. A zero value means no approval is outstanding.\n', '    mapping (uint256 => address) public preSaleItemIndexToApproved;\n', '    \n', '    /// @dev A mapping of preSaleItem Type to Type Sequence Number to Collectible\n', '    mapping (uint256 => mapping (uint256 => mapping ( uint256 => uint256 ) ) ) public preSaleItemTypeToSequenceIdToCollectible;\n', '    \n', '    /// @dev A mapping from Pre Sale Item Type IDs to the Sequqence Number .\n', '    mapping (uint256 => mapping ( uint256 => uint256 ) ) public preSaleItemTypeToCollectibleCount;\n', '\n', '    /// @dev Token Starting Index taking into account the old presaleContract total assets that can be generated\n', '    uint256 public STARTING_ASSET_BASE = 3000;\n', '    \n', '    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n', '    ///  Returns true for any standardized interfaces implemented by this contract. We implement\n', '    ///  ERC-165 (obviously!) and ERC-721.\n', '    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n', '    {\n', '        // DEBUG ONLY\n', '        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\n', '        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n', '    }\n', '    \n', '    function setMaxLimit(string _collectibleName, uint256 _collectibleType, uint256 _collectibleClass, uint256 _maxLimit) external onlyManager whenNotPaused {\n', '        require(_maxLimit > 0);\n', '        require(_collectibleType >= 0 && _collectibleClass >= 0);\n', '        require(stringToBytes32(_collectibleName) != stringToBytes32(""));\n', '\n', '        require(!preSaleItemTypeToClassToMaxLimitSet[_collectibleType][_collectibleClass]);\n', '        preSaleItemTypeToClassToMaxLimit[_collectibleType][_collectibleClass] = _maxLimit;\n', '        preSaleItemTypeToClassToMaxLimitSet[_collectibleType][_collectibleClass] = true;\n', '        preSaleItemTypeToClassToName[_collectibleType][_collectibleClass] = stringToBytes32(_collectibleName);\n', '    }\n', '    \n', '    /// @dev Method to fetch collectible details\n', '    function getCollectibleDetails(uint256 _tokenId) external view returns(uint256 assetId, uint256 sequenceId, uint256 collectibleType, uint256 collectibleClass, string collectibleName, bool isRedeemed, address owner) {\n', '\n', '        require (_tokenId > STARTING_ASSET_BASE);\n', '        uint256 generatedCollectibleId = _tokenId - STARTING_ASSET_BASE;\n', '        \n', '        CSCPreSaleItem memory _Obj = allPreSaleItems[generatedCollectibleId];\n', '        assetId = _tokenId;\n', '        sequenceId = _Obj.sequenceId;\n', '        collectibleType = _Obj.collectibleType;\n', '        collectibleClass = _Obj.collectibleClass;\n', '        collectibleName = bytes32ToString(_Obj.collectibleName);\n', '        owner = _Obj.owner;\n', '        isRedeemed = _Obj.isRedeemed;\n', '    }\n', '    \n', '    /*** PUBLIC FUNCTIONS ***/\n', '    /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n', '    /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '    ///  clear all approvals.\n', '    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function approve(address _to, uint256 _tokenId) public {\n', '        // Caller must own token.\n', '        require (_tokenId > STARTING_ASSET_BASE);\n', '        \n', '        require(_owns(msg.sender, _tokenId));\n', '        preSaleItemIndexToApproved[_tokenId] = _to;\n', '        \n', '        Approval(msg.sender, _to, _tokenId);\n', '    }\n', '    \n', '    /// For querying balance of a particular account\n', '    /// @param _owner The address for balance query\n', '    /// @dev Required for ERC-721 compliance.\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return ownershipTokenCount[_owner];\n', '    }\n', '    \n', '    function implementsERC721() public pure returns (bool) {\n', '        return true;\n', '    }\n', '    \n', '    /// For querying owner of token\n', '    /// @param _tokenId The tokenID for owner inquiry\n', '    /// @dev Required for ERC-721 compliance.\n', '    function ownerOf(uint256 _tokenId) public view returns (address owner) {\n', '        require (_tokenId > STARTING_ASSET_BASE);\n', '\n', '        owner = preSaleItemIndexToOwner[_tokenId];\n', '        require(owner != address(0));\n', '    }\n', '    \n', '    /// @dev Required for ERC-721 compliance.\n', '    function symbol() public pure returns (string) {\n', '        return SYMBOL;\n', '    }\n', '    \n', '    /// @notice Allow pre-approved user to take ownership of a token\n', '    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function takeOwnership(uint256 _tokenId) public {\n', '        require (_tokenId > STARTING_ASSET_BASE);\n', '\n', '        address newOwner = msg.sender;\n', '        address oldOwner = preSaleItemIndexToOwner[_tokenId];\n', '        \n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_addressNotNull(newOwner));\n', '        \n', '        // Making sure transfer is approved\n', '        require(_approved(newOwner, _tokenId));\n', '        \n', '        _transfer(oldOwner, newOwner, _tokenId);\n', '    }\n', '    \n', '    /// @param _owner The owner whose collectibles tokens we are interested in.\n', '    /// @dev This method MUST NEVER be called by smart contract code. First, it&#39;s fairly\n', '    ///  expensive (it walks the entire CSCPreSaleItem array looking for collectibles belonging to owner),\n', '    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '    ///  not contract-to-contract calls.\n', '    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n', '        uint256 tokenCount = balanceOf(_owner);\n', '        \n', '        if (tokenCount == 0) {\n', '            // Return an empty array\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](tokenCount);\n', '            uint256 totalCount = totalSupply() + 1 + STARTING_ASSET_BASE;\n', '            uint256 resultIndex = 0;\n', '        \n', '            // We count on the fact that all LS PreSaleItems have IDs starting at 0 and increasing\n', '            // sequentially up to the total count.\n', '            uint256 _tokenId;\n', '        \n', '            for (_tokenId = STARTING_ASSET_BASE; _tokenId < totalCount; _tokenId++) {\n', '                if (preSaleItemIndexToOwner[_tokenId] == _owner) {\n', '                    result[resultIndex] = _tokenId;\n', '                    resultIndex++;\n', '                }\n', '            }\n', '        \n', '            return result;\n', '        }\n', '    }\n', '    \n', '    /// For querying totalSupply of token\n', '    /// @dev Required for ERC-721 compliance.\n', '    function totalSupply() public view returns (uint256 total) {\n', '        return allPreSaleItems.length - 1; //Removed 0 index\n', '    }\n', '    \n', '    /// Owner initates the transfer of the token to another account\n', '    /// @param _to The address for the token to be transferred to.\n', '    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transfer(address _to, uint256 _tokenId) public {\n', '\n', '        require (_tokenId > STARTING_ASSET_BASE);\n', '        \n', '        require(_addressNotNull(_to));\n', '        require(_owns(msg.sender, _tokenId));\n', '        \n', '        _transfer(msg.sender, _to, _tokenId);\n', '    }\n', '    \n', '    /// Third-party initiates transfer of token from address _from to address _to\n', '    /// @param _from The address for the token to be transferred from.\n', '    /// @param _to The address for the token to be transferred to.\n', '    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public {\n', '        require (_tokenId > STARTING_ASSET_BASE);\n', '\n', '        require(_owns(_from, _tokenId));\n', '        require(_approved(_to, _tokenId));\n', '        require(_addressNotNull(_to));\n', '        \n', '        _transfer(_from, _to, _tokenId);\n', '    }\n', '    \n', '    /*** PRIVATE FUNCTIONS ***/\n', '    /// @dev  Safety check on _to address to prevent against an unexpected 0x0 default.\n', '    function _addressNotNull(address _to) internal pure returns (bool) {\n', '        return _to != address(0);\n', '    }\n', '    \n', '    /// @dev  For checking approval of transfer for address _to\n', '    function _approved(address _to, uint256 _tokenId) internal view returns (bool) {\n', '        return preSaleItemIndexToApproved[_tokenId] == _to;\n', '    }\n', '    \n', '    /// @dev For creating CSC Collectible\n', '    function _createCollectible(bytes32 _collectibleName, uint256 _collectibleType, uint256 _collectibleClass) internal returns(uint256) {\n', '        uint256 _sequenceId = uint256(preSaleItemTypeToCollectibleCount[_collectibleType][_collectibleClass]) + 1;\n', '        \n', '        // These requires are not strictly necessary, our calling code should make\n', '        // sure that these conditions are never broken.\n', '        require(_sequenceId == uint256(uint32(_sequenceId)));\n', '        \n', '        CSCPreSaleItem memory _collectibleObj = CSCPreSaleItem(\n', '          _sequenceId,\n', '          _collectibleName,\n', '          _collectibleType,\n', '          _collectibleClass,\n', '          address(0),\n', '          false\n', '        );\n', '        \n', '        uint256 generatedCollectibleId = allPreSaleItems.push(_collectibleObj) - 1;\n', '        uint256 collectibleIndex = generatedCollectibleId + STARTING_ASSET_BASE;\n', '        \n', '        preSaleItemTypeToSequenceIdToCollectible[_collectibleType][_collectibleClass][_sequenceId] = collectibleIndex;\n', '        preSaleItemTypeToCollectibleCount[_collectibleType][_collectibleClass] = _sequenceId;\n', '        \n', '        // emit Created event\n', '        // CollectibleCreated(address owner, uint256 globalId, uint256 collectibleType, uint256 collectibleClass, uint256 sequenceId, bytes32 collectibleName);\n', '        CollectibleCreated(address(this), collectibleIndex, _collectibleType, _collectibleClass, _sequenceId, _collectibleObj.collectibleName);\n', '        \n', '        // This will assign ownership, and also emit the Transfer event as\n', '        // per ERC721 draft\n', '        _transfer(address(0), address(this), collectibleIndex);\n', '        \n', '        return collectibleIndex;\n', '    }\n', '    \n', '    /// @dev Check for token ownership\n', '    function _owns(address claimant, uint256 _tokenId) internal view returns (bool) {\n', '        return claimant == preSaleItemIndexToOwner[_tokenId];\n', '    }\n', '    \n', '    /// @dev Assigns ownership of a specific preSaleItem to an address.\n', '    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n', '        uint256 generatedCollectibleId = _tokenId - STARTING_ASSET_BASE;\n', '\n', '        // Updating the owner details of the collectible\n', '        CSCPreSaleItem memory _Obj = allPreSaleItems[generatedCollectibleId];\n', '        _Obj.owner = _to;\n', '        allPreSaleItems[generatedCollectibleId] = _Obj;\n', '        \n', '        // Since the number of preSaleItem is capped to 2^32 we can&#39;t overflow this\n', '        ownershipTokenCount[_to]++;\n', '        \n', '        //transfer ownership\n', '        preSaleItemIndexToOwner[_tokenId] = _to;\n', '        \n', '        // When creating new collectibles _from is 0x0, but we can&#39;t account that address.\n', '        if (_from != address(0)) {\n', '          ownershipTokenCount[_from]--;\n', '          // clear any previously approved ownership exchange\n', '          delete preSaleItemIndexToApproved[_tokenId];\n', '        }\n', '        \n', '        // Emit the transfer event.\n', '        Transfer(_from, _to, _tokenId);\n', '    }\n', '    \n', '    /// @dev Checks if a given address currently has transferApproval for a particular CSCPreSaleItem.\n', '    /// 0 is a valid value as it will be the starter\n', '    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n', '        require(_tokenId > STARTING_ASSET_BASE);\n', '\n', '        return preSaleItemIndexToApproved[_tokenId] == _claimant;\n', '    }\n', '}\n', '\n', '/* Lucid Sight, Inc. ERC-721 Collectibles Manager. \n', ' * @title LSPreSaleManager - Lucid Sight, Inc. Non-Fungible Token\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' */\n', 'contract CSCPreSaleManager is CSCPreSaleItemBase {\n', '\n', '    event RefundClaimed(address owner, uint256 refundValue);\n', '\n', '    /// @dev defines if preSaleItem type -> preSaleItem class -> Vending Machine to set limit (bool)\n', '    mapping(uint256 => mapping(uint256 => bool)) public preSaleItemTypeToClassToCanBeVendingMachine;\n', '\n', '    /// @dev defines if preSaleItem type -> preSaleItem class -> Vending Machine Fee\n', '    mapping(uint256 => mapping(uint256 => uint256)) public preSaleItemTypeToClassToVendingFee;\n', '\n', '    /// @dev Mapping created store the amount of value a wallet address used to buy assets\n', '    mapping(address => uint256) public addressToValue;\n', '    \n', '    bool CSCPreSaleInit = false;\n', '    /// @dev Constructor creates a reference to the NFT (ERC721) ownership contract\n', '    function CSCPreSaleManager() public {\n', '        require(msg.sender != address(0));\n', '        paused = true;\n', '        error = false;\n', '        managerPrimary = msg.sender;\n', '    }\n', '\n', '    /// @dev allows the contract to accept ETH\n', '    function() external payable {\n', '    }\n', '    \n', '    /// @dev Function to add approved address to the \n', '    /// approved address list\n', '    function addToApprovedAddress (address _newAddr) onlyManager whenNotPaused {\n', '        require(_newAddr != address(0));\n', '        require(!approvedAddressList[_newAddr]);\n', '        approvedAddressList[_newAddr] = true;\n', '    }\n', '    \n', '    /// @dev Function to remove an approved address from the \n', '    /// approved address list\n', '    function removeFromApprovedAddress (address _newAddr) onlyManager whenNotPaused {\n', '        require(_newAddr != address(0));\n', '        require(approvedAddressList[_newAddr]);\n', '        approvedAddressList[_newAddr] = false;\n', '    }\n', '\n', '    /// @dev Function toggle vending for collectible\n', '    function toggleVending (uint256 _collectibleType, uint256 _collectibleClass) external onlyManager {\n', '        if(preSaleItemTypeToClassToCanBeVendingMachine[_collectibleType][_collectibleClass] == false) {\n', '            preSaleItemTypeToClassToCanBeVendingMachine[_collectibleType][_collectibleClass] = true;\n', '        } else {\n', '            preSaleItemTypeToClassToCanBeVendingMachine[_collectibleType][_collectibleClass] = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Function toggle vending for collectible\n', '    function setVendingFee (uint256 _collectibleType, uint256 _collectibleClass, uint fee) external onlyManager {\n', '        preSaleItemTypeToClassToVendingFee[_collectibleType][_collectibleClass] = fee;\n', '    }\n', '    \n', '    /// @dev This helps in creating a collectible and then \n', '    /// transfer it _toAddress\n', '    function createCollectible(uint256 _collectibleType, uint256 _collectibleClass, address _toAddress) onlyManager external whenNotPaused {\n', '        require(msg.sender != address(0));\n', '        require(msg.sender != address(this));\n', '        \n', '        require(_toAddress != address(0));\n', '        require(_toAddress != address(this));\n', '        \n', '        require(preSaleItemTypeToClassToMaxLimitSet[_collectibleType][_collectibleClass]);\n', '        require(preSaleItemTypeToCollectibleCount[_collectibleType][_collectibleClass] < preSaleItemTypeToClassToMaxLimit[_collectibleType][_collectibleClass]);\n', '        \n', '        uint256 _tokenId = _createCollectible(preSaleItemTypeToClassToName[_collectibleType][_collectibleClass], _collectibleType, _collectibleClass);\n', '        \n', '        _transfer(address(this), _toAddress, _tokenId);\n', '    }\n', '\n', '\n', '    /// @dev This helps in creating a collectible and then \n', '    /// transfer it _toAddress\n', '    function vendingCreateCollectible(uint256 _collectibleType, uint256 _collectibleClass, address _toAddress) payable external whenNotPaused {\n', '        \n', '        //Only if Vending is Allowed for this Asset\n', '        require(preSaleItemTypeToClassToCanBeVendingMachine[_collectibleType][_collectibleClass]);\n', '\n', '        require(msg.value >= preSaleItemTypeToClassToVendingFee[_collectibleType][_collectibleClass]);\n', '\n', '        require(msg.sender != address(0));\n', '        require(msg.sender != address(this));\n', '        \n', '        require(_toAddress != address(0));\n', '        require(_toAddress != address(this));\n', '        \n', '        require(preSaleItemTypeToClassToMaxLimitSet[_collectibleType][_collectibleClass]);\n', '        require(preSaleItemTypeToCollectibleCount[_collectibleType][_collectibleClass] < preSaleItemTypeToClassToMaxLimit[_collectibleType][_collectibleClass]);\n', '        \n', '        uint256 _tokenId = _createCollectible(preSaleItemTypeToClassToName[_collectibleType][_collectibleClass], _collectibleType, _collectibleClass);\n', '        uint256 excessBid = msg.value - preSaleItemTypeToClassToVendingFee[_collectibleType][_collectibleClass];\n', '        \n', '        if(excessBid > 0) {\n', '            msg.sender.transfer(excessBid);\n', '        }\n', '\n', '        addressToValue[msg.sender] += preSaleItemTypeToClassToVendingFee[_collectibleType][_collectibleClass];\n', '        \n', '        _transfer(address(this), _toAddress, _tokenId);\n', '    }\n', '\n', '    \n', '    \n', '    /// @dev Override unpause so it requires all external contract addresses\n', '    ///  to be set before contract can be unpaused. Also, we can&#39;t have\n', '    ///  newContractAddress set either, because then the contract was upgraded.\n', '    /// @notice This is public rather than external so we can call super.unpause\n', '    ///  without using an expensive CALL.\n', '    function unpause() public onlyManager whenPaused {\n', '        // Actually unpause the contract.\n', '        super.unpause();\n', '    }\n', '\n', '    /// @dev Override unpause so it requires all external contract addresses\n', '    ///  to be set before contract can be unpaused. Also, we can&#39;t have\n', '    ///  newContractAddress set either, because then the contract was upgraded.\n', '    /// @notice This is public rather than external so we can call super.unpause\n', '    ///  without using an expensive CALL.\n', '    function hasError() public onlyManager whenPaused {\n', '        // Actually error out the contract.\n', '        super.hasError();\n', '    }\n', '    \n', '    /// @dev Function does the init step and thus allow\n', '    /// to create a Dummy 0th colelctible\n', '    function preSaleInit() onlyManager {\n', '        require(!CSCPreSaleInit);\n', '        require(allPreSaleItems.length == 0);\n', '        \n', '        CSCPreSaleInit = true;\n', '        \n', '        //Fill in index 0 to null requests\n', '        CSCPreSaleItem memory _Obj = CSCPreSaleItem(0, stringToBytes32("DummyAsset"), 0, 0, address(this), true);\n', '        allPreSaleItems.push(_Obj);\n', '    }\n', '\n', '    /// @dev Remove all Ether from the contract, which is the owner&#39;s cuts\n', '    ///  as well as any Ether sent directly to the contract address.\n', '    ///  Always transfers to the NFT (ERC721) contract, but can be called either by\n', '    ///  the owner or the NFT (ERC721) contract.\n', '    function withdrawBalance() onlyBanker {\n', '        // We are using this boolean method to make sure that even if one fails it will still work\n', '        bankManager.transfer(this.balance);\n', '    }\n', '\n', '    // @dev a function to claim refund if and only if theres an error in the contract\n', '    function claimRefund(address _ownerAddress) whenError {\n', '        uint256 refundValue = addressToValue[_ownerAddress];\n', '\n', '        require (refundValue > 0);\n', '        \n', '        addressToValue[_ownerAddress] = 0;\n', '\n', '        _ownerAddress.transfer(refundValue);\n', '        RefundClaimed(_ownerAddress, refundValue);\n', '    }\n', '    \n', '\n', '    /// @dev Function used to set the flag isRedeemed to true\n', '    /// can be called by addresses in the approvedAddressList\n', '    function isRedeemed(uint256 _tokenId) {\n', '        require(approvedAddressList[msg.sender]);\n', '        require(_tokenId > STARTING_ASSET_BASE);\n', '        uint256 generatedCollectibleId = _tokenId - STARTING_ASSET_BASE;\n', '        \n', '        CSCPreSaleItem memory _Obj = allPreSaleItems[generatedCollectibleId];\n', '        _Obj.isRedeemed = true;\n', '        \n', '        allPreSaleItems[generatedCollectibleId] = _Obj;\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '/* Adapted from strings.sol created by Nick Johnson <arachnid@notdot.net>\n', ' * Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\n', ' * @title String & slice utility library for Solidity contracts.\n', ' * @author Nick Johnson <arachnid@notdot.net>\n', ' */\n', 'library strings {\n', '    \n', '    struct slice {\n', '        uint _len;\n', '        uint _ptr;\n', '    }\n', '\n', '    /*\n', '     * @dev Returns a slice containing the entire string.\n', '     * @param self The string to make a slice from.\n', '     * @return A newly allocated slice containing the entire string.\n', '     */\n', '    function toSlice(string self) internal pure returns (slice) {\n', '        uint ptr;\n', '        assembly {\n', '            ptr := add(self, 0x20)\n', '        }\n', '        return slice(bytes(self).length, ptr);\n', '    }\n', '\n', '    function memcpy(uint dest, uint src, uint len) private pure {\n', '        // Copy word-length chunks while possible\n', '        for(; len >= 32; len -= 32) {\n', '            assembly {\n', '                mstore(dest, mload(src))\n', '            }\n', '            dest += 32;\n', '            src += 32;\n', '        }\n', '\n', '        // Copy remaining bytes\n', '        uint mask = 256 ** (32 - len) - 1;\n', '        assembly {\n', '            let srcpart := and(mload(src), not(mask))\n', '            let destpart := and(mload(dest), mask)\n', '            mstore(dest, or(destpart, srcpart))\n', '        }\n', '    }\n', '\n', '    \n', '    function concat(slice self, slice other) internal returns (string) {\n', '        var ret = new string(self._len + other._len);\n', '        uint retptr;\n', '        assembly { retptr := add(ret, 32) }\n', '        memcpy(retptr, self._ptr, self._len);\n', '        memcpy(retptr + self._len, other._ptr, other._len);\n', '        return ret;\n', '    }\n', '\n', '    /*\n', '     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\n', '     * @param self The slice to search.\n', '     * @param needle The text to search for in `self`.\n', '     * @return The number of occurrences of `needle` found in `self`.\n', '     */\n', '    function count(slice self, slice needle) internal returns (uint cnt) {\n', '        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\n', '        while (ptr <= self._ptr + self._len) {\n', '            cnt++;\n', '            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\n', '        }\n', '    }\n', '\n', '    // Returns the memory address of the first byte of the first occurrence of\n', '    // `needle` in `self`, or the first byte after `self` if not found.\n', '    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {\n', '        uint ptr;\n', '        uint idx;\n', '\n', '        if (needlelen <= selflen) {\n', '            if (needlelen <= 32) {\n', '                // Optimized assembly for 68 gas per byte on short strings\n', '                assembly {\n', '                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))\n', '                    let needledata := and(mload(needleptr), mask)\n', '                    let end := add(selfptr, sub(selflen, needlelen))\n', '                    ptr := selfptr\n', '                    loop:\n', '                    jumpi(exit, eq(and(mload(ptr), mask), needledata))\n', '                    ptr := add(ptr, 1)\n', '                    jumpi(loop, lt(sub(ptr, 1), end))\n', '                    ptr := add(selfptr, selflen)\n', '                    exit:\n', '                }\n', '                return ptr;\n', '            } else {\n', '                // For long needles, use hashing\n', '                bytes32 hash;\n', '                assembly { hash := sha3(needleptr, needlelen) }\n', '                ptr = selfptr;\n', '                for (idx = 0; idx <= selflen - needlelen; idx++) {\n', '                    bytes32 testHash;\n', '                    assembly { testHash := sha3(ptr, needlelen) }\n', '                    if (hash == testHash)\n', '                        return ptr;\n', '                    ptr += 1;\n', '                }\n', '            }\n', '        }\n', '        return selfptr + selflen;\n', '    }\n', '\n', '    /*\n', '     * @dev Splits the slice, setting `self` to everything after the first\n', '     *      occurrence of `needle`, and `token` to everything before it. If\n', '     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n', '     *      and `token` is set to the entirety of `self`.\n', '     * @param self The slice to split.\n', '     * @param needle The text to search for in `self`.\n', '     * @param token An output parameter to which the first token is written.\n', '     * @return `token`.\n', '     */\n', '    function split(slice self, slice needle, slice token) internal returns (slice) {\n', '        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n', '        token._ptr = self._ptr;\n', '        token._len = ptr - self._ptr;\n', '        if (ptr == self._ptr + self._len) {\n', '            // Not found\n', '            self._len = 0;\n', '        } else {\n', '            self._len -= token._len + needle._len;\n', '            self._ptr = ptr + needle._len;\n', '        }\n', '        return token;\n', '    }\n', '\n', '     /*\n', '     * @dev Splits the slice, setting `self` to everything after the first\n', '     *      occurrence of `needle`, and returning everything before it. If\n', '     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n', '     *      and the entirety of `self` is returned.\n', '     * @param self The slice to split.\n', '     * @param needle The text to search for in `self`.\n', '     * @return The part of `self` up to the first occurrence of `delim`.\n', '     */\n', '    function split(slice self, slice needle) internal returns (slice token) {\n', '        split(self, needle, token);\n', '    }\n', '\n', '    /*\n', '     * @dev Copies a slice to a new string.\n', '     * @param self The slice to copy.\n', "     * @return A newly allocated string containing the slice's text.\n", '     */\n', '    function toString(slice self) internal pure returns (string) {\n', '        var ret = new string(self._len);\n', '        uint retptr;\n', '        assembly { retptr := add(ret, 32) }\n', '\n', '        memcpy(retptr, self._ptr, self._len);\n', '        return ret;\n', '    }\n', '\n', '}\n', '\n', '/* Helper String Functions for Game Manager Contract\n', ' * @title String Healpers\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' */\n', 'contract StringHelpers {\n', '    using strings for *;\n', '    \n', '    function stringToBytes32(string memory source) internal returns (bytes32 result) {\n', '        bytes memory tempEmptyStringTest = bytes(source);\n', '        if (tempEmptyStringTest.length == 0) {\n', '            return 0x0;\n', '        }\n', '    \n', '        assembly {\n', '            result := mload(add(source, 32))\n', '        }\n', '    }\n', '\n', '    function bytes32ToString(bytes32 x) constant internal returns (string) {\n', '        bytes memory bytesString = new bytes(32);\n', '        uint charCount = 0;\n', '        for (uint j = 0; j < 32; j++) {\n', '            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n', '            if (char != 0) {\n', '                bytesString[charCount] = char;\n', '                charCount++;\n', '            }\n', '        }\n', '        bytes memory bytesStringTrimmed = new bytes(charCount);\n', '        for (j = 0; j < charCount; j++) {\n', '            bytesStringTrimmed[j] = bytesString[j];\n', '        }\n', '        return string(bytesStringTrimmed);\n', '    }\n', '}\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\n', 'contract ERC721 {\n', '  // Required methods\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address owner);\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function implementsERC721() public pure returns (bool);\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '\n', '  // Optional\n', '  // function name() public view returns (string name);\n', '  // function symbol() public view returns (string symbol);\n', '  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n', '  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n', '\n', '  // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n', '  function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n', '}\n', '\n', '/* Controls state and access rights for contract functions\n', ' * @title Operational Control\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' * Inspired and adapted from contract created by OpenZeppelin\n', ' * Ref: https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract OperationalControl {\n', '    // Facilitates access & control for the game.\n', '    // Roles:\n', '    //  -The Managers (Primary/Secondary): Has universal control of all elements (No ability to withdraw)\n', '    //  -The Banker: The Bank can withdraw funds and adjust fees / prices.\n', '\n', '    /// @dev Emited when contract is upgraded\n', '    event ContractUpgrade(address newContract);\n', '\n', '    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '    address public managerPrimary;\n', '    address public managerSecondary;\n', '    address public bankManager;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '\n', '    // @dev Keeps track whether the contract erroredOut. When that is true, most actions are blocked & refund can be claimed\n', '    bool public error = false;\n', '\n', '    /// @dev Operation modifiers for limiting access\n', '    modifier onlyManager() {\n', '        require(msg.sender == managerPrimary || msg.sender == managerSecondary);\n', '        _;\n', '    }\n', '\n', '    modifier onlyBanker() {\n', '        require(msg.sender == bankManager);\n', '        _;\n', '    }\n', '\n', '    modifier anyOperator() {\n', '        require(\n', '            msg.sender == managerPrimary ||\n', '            msg.sender == managerSecondary ||\n', '            msg.sender == bankManager\n', '        );\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Primary Manager.\n', '    function setPrimaryManager(address _newGM) external onlyManager {\n', '        require(_newGM != address(0));\n', '\n', '        managerPrimary = _newGM;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Secondary Manager.\n', '    function setSecondaryManager(address _newGM) external onlyManager {\n', '        require(_newGM != address(0));\n', '\n', '        managerSecondary = _newGM;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Banker.\n', '    function setBanker(address _newBK) external onlyManager {\n', '        require(_newBK != address(0));\n', '\n', '        bankManager = _newBK;\n', '    }\n', '\n', '    /*** Pausable functionality adapted from OpenZeppelin ***/\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract has Error\n', '    modifier whenError {\n', '        require(error);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any Operator role to pause the contract.\n', '    /// Used only if a bug or exploit is discovered (Here to limit losses / damage)\n', '    function pause() external onlyManager whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function unpause() public onlyManager whenPaused {\n', "        // can't unpause if contract was upgraded\n", '        paused = false;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function hasError() public onlyManager whenPaused {\n', '        error = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function noError() public onlyManager whenPaused {\n', '        error = false;\n', '    }\n', '}\n', '\n', 'contract CSCPreSaleItemBase is ERC721, OperationalControl, StringHelpers {\n', '\n', '    /*** EVENTS ***/\n', '    /// @dev The Created event is fired whenever a new collectible comes into existence.\n', '    event CollectibleCreated(address owner, uint256 globalId, uint256 collectibleType, uint256 collectibleClass, uint256 sequenceId, bytes32 collectibleName);\n', '    \n', '    /*** CONSTANTS ***/\n', '    \n', '    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '    string public constant NAME = "CSCPreSaleFactory";\n', '    string public constant SYMBOL = "CSCPF";\n', "    bytes4 constant InterfaceSignature_ERC165 = bytes4(keccak256('supportsInterface(bytes4)'));\n", '    bytes4 constant InterfaceSignature_ERC721 =\n', "        bytes4(keccak256('name()')) ^\n", "        bytes4(keccak256('symbol()')) ^\n", "        bytes4(keccak256('totalSupply()')) ^\n", "        bytes4(keccak256('balanceOf(address)')) ^\n", "        bytes4(keccak256('ownerOf(uint256)')) ^\n", "        bytes4(keccak256('approve(address,uint256)')) ^\n", "        bytes4(keccak256('transfer(address,uint256)')) ^\n", "        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n", "        bytes4(keccak256('tokensOfOwner(address)')) ^\n", "        bytes4(keccak256('tokenMetadata(uint256,string)'));\n", '    \n', '    /// @dev CSC Pre Sale Struct, having details of the collectible\n', '    struct CSCPreSaleItem {\n', '    \n', '        /// @dev sequence ID i..e Local Index\n', '        uint256 sequenceId;\n', '        \n', '        /// @dev name of the collectible stored in bytes\n', '        bytes32 collectibleName;\n', '        \n', '        /// @dev Collectible Type\n', '        uint256 collectibleType;\n', '        \n', '        /// @dev Collectible Class\n', '        uint256 collectibleClass;\n', '        \n', '        /// @dev owner address\n', '        address owner;\n', '        \n', '        /// @dev redeemed flag (to help whether it got redeemed or not)\n', '        bool isRedeemed;\n', '    }\n', '    \n', '    /// @dev array of CSCPreSaleItem type holding information on the Collectibles Created\n', '    CSCPreSaleItem[] allPreSaleItems;\n', '    \n', '    /// @dev Max Count for preSaleItem type -> preSaleItem class -> max. limit\n', '    mapping(uint256 => mapping(uint256 => uint256)) public preSaleItemTypeToClassToMaxLimit;\n', '    \n', '    /// @dev Map from preSaleItem type -> preSaleItem class -> max. limit set (bool)\n', '    mapping(uint256 => mapping(uint256 => bool)) public preSaleItemTypeToClassToMaxLimitSet;\n', '\n', '    /// @dev Map from preSaleItem type -> preSaleItem class -> Name (string / bytes32)\n', '    mapping(uint256 => mapping(uint256 => bytes32)) public preSaleItemTypeToClassToName;\n', '    \n', '    // @dev mapping which holds all the possible addresses which are allowed to interact with the contract\n', '    mapping (address => bool) approvedAddressList;\n', '    \n', '    // @dev mapping holds the preSaleItem -> owner details\n', '    mapping (uint256 => address) public preSaleItemIndexToOwner;\n', '    \n', '    // @dev A mapping from owner address to count of tokens that address owns.\n', '    //  Used internally inside balanceOf() to resolve ownership count.\n', '    mapping (address => uint256) private ownershipTokenCount;\n', '    \n', '    /// @dev A mapping from preSaleItem to an address that has been approved to call\n', '    ///  transferFrom(). Each Collectible can only have one approved address for transfer\n', '    ///  at any time. A zero value means no approval is outstanding.\n', '    mapping (uint256 => address) public preSaleItemIndexToApproved;\n', '    \n', '    /// @dev A mapping of preSaleItem Type to Type Sequence Number to Collectible\n', '    mapping (uint256 => mapping (uint256 => mapping ( uint256 => uint256 ) ) ) public preSaleItemTypeToSequenceIdToCollectible;\n', '    \n', '    /// @dev A mapping from Pre Sale Item Type IDs to the Sequqence Number .\n', '    mapping (uint256 => mapping ( uint256 => uint256 ) ) public preSaleItemTypeToCollectibleCount;\n', '\n', '    /// @dev Token Starting Index taking into account the old presaleContract total assets that can be generated\n', '    uint256 public STARTING_ASSET_BASE = 3000;\n', '    \n', '    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n', '    ///  Returns true for any standardized interfaces implemented by this contract. We implement\n', '    ///  ERC-165 (obviously!) and ERC-721.\n', '    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n', '    {\n', '        // DEBUG ONLY\n', '        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\n', '        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n', '    }\n', '    \n', '    function setMaxLimit(string _collectibleName, uint256 _collectibleType, uint256 _collectibleClass, uint256 _maxLimit) external onlyManager whenNotPaused {\n', '        require(_maxLimit > 0);\n', '        require(_collectibleType >= 0 && _collectibleClass >= 0);\n', '        require(stringToBytes32(_collectibleName) != stringToBytes32(""));\n', '\n', '        require(!preSaleItemTypeToClassToMaxLimitSet[_collectibleType][_collectibleClass]);\n', '        preSaleItemTypeToClassToMaxLimit[_collectibleType][_collectibleClass] = _maxLimit;\n', '        preSaleItemTypeToClassToMaxLimitSet[_collectibleType][_collectibleClass] = true;\n', '        preSaleItemTypeToClassToName[_collectibleType][_collectibleClass] = stringToBytes32(_collectibleName);\n', '    }\n', '    \n', '    /// @dev Method to fetch collectible details\n', '    function getCollectibleDetails(uint256 _tokenId) external view returns(uint256 assetId, uint256 sequenceId, uint256 collectibleType, uint256 collectibleClass, string collectibleName, bool isRedeemed, address owner) {\n', '\n', '        require (_tokenId > STARTING_ASSET_BASE);\n', '        uint256 generatedCollectibleId = _tokenId - STARTING_ASSET_BASE;\n', '        \n', '        CSCPreSaleItem memory _Obj = allPreSaleItems[generatedCollectibleId];\n', '        assetId = _tokenId;\n', '        sequenceId = _Obj.sequenceId;\n', '        collectibleType = _Obj.collectibleType;\n', '        collectibleClass = _Obj.collectibleClass;\n', '        collectibleName = bytes32ToString(_Obj.collectibleName);\n', '        owner = _Obj.owner;\n', '        isRedeemed = _Obj.isRedeemed;\n', '    }\n', '    \n', '    /*** PUBLIC FUNCTIONS ***/\n', '    /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n', '    /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '    ///  clear all approvals.\n', '    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function approve(address _to, uint256 _tokenId) public {\n', '        // Caller must own token.\n', '        require (_tokenId > STARTING_ASSET_BASE);\n', '        \n', '        require(_owns(msg.sender, _tokenId));\n', '        preSaleItemIndexToApproved[_tokenId] = _to;\n', '        \n', '        Approval(msg.sender, _to, _tokenId);\n', '    }\n', '    \n', '    /// For querying balance of a particular account\n', '    /// @param _owner The address for balance query\n', '    /// @dev Required for ERC-721 compliance.\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return ownershipTokenCount[_owner];\n', '    }\n', '    \n', '    function implementsERC721() public pure returns (bool) {\n', '        return true;\n', '    }\n', '    \n', '    /// For querying owner of token\n', '    /// @param _tokenId The tokenID for owner inquiry\n', '    /// @dev Required for ERC-721 compliance.\n', '    function ownerOf(uint256 _tokenId) public view returns (address owner) {\n', '        require (_tokenId > STARTING_ASSET_BASE);\n', '\n', '        owner = preSaleItemIndexToOwner[_tokenId];\n', '        require(owner != address(0));\n', '    }\n', '    \n', '    /// @dev Required for ERC-721 compliance.\n', '    function symbol() public pure returns (string) {\n', '        return SYMBOL;\n', '    }\n', '    \n', '    /// @notice Allow pre-approved user to take ownership of a token\n', '    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function takeOwnership(uint256 _tokenId) public {\n', '        require (_tokenId > STARTING_ASSET_BASE);\n', '\n', '        address newOwner = msg.sender;\n', '        address oldOwner = preSaleItemIndexToOwner[_tokenId];\n', '        \n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_addressNotNull(newOwner));\n', '        \n', '        // Making sure transfer is approved\n', '        require(_approved(newOwner, _tokenId));\n', '        \n', '        _transfer(oldOwner, newOwner, _tokenId);\n', '    }\n', '    \n', '    /// @param _owner The owner whose collectibles tokens we are interested in.\n', "    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n", '    ///  expensive (it walks the entire CSCPreSaleItem array looking for collectibles belonging to owner),\n', '    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '    ///  not contract-to-contract calls.\n', '    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n', '        uint256 tokenCount = balanceOf(_owner);\n', '        \n', '        if (tokenCount == 0) {\n', '            // Return an empty array\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](tokenCount);\n', '            uint256 totalCount = totalSupply() + 1 + STARTING_ASSET_BASE;\n', '            uint256 resultIndex = 0;\n', '        \n', '            // We count on the fact that all LS PreSaleItems have IDs starting at 0 and increasing\n', '            // sequentially up to the total count.\n', '            uint256 _tokenId;\n', '        \n', '            for (_tokenId = STARTING_ASSET_BASE; _tokenId < totalCount; _tokenId++) {\n', '                if (preSaleItemIndexToOwner[_tokenId] == _owner) {\n', '                    result[resultIndex] = _tokenId;\n', '                    resultIndex++;\n', '                }\n', '            }\n', '        \n', '            return result;\n', '        }\n', '    }\n', '    \n', '    /// For querying totalSupply of token\n', '    /// @dev Required for ERC-721 compliance.\n', '    function totalSupply() public view returns (uint256 total) {\n', '        return allPreSaleItems.length - 1; //Removed 0 index\n', '    }\n', '    \n', '    /// Owner initates the transfer of the token to another account\n', '    /// @param _to The address for the token to be transferred to.\n', '    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transfer(address _to, uint256 _tokenId) public {\n', '\n', '        require (_tokenId > STARTING_ASSET_BASE);\n', '        \n', '        require(_addressNotNull(_to));\n', '        require(_owns(msg.sender, _tokenId));\n', '        \n', '        _transfer(msg.sender, _to, _tokenId);\n', '    }\n', '    \n', '    /// Third-party initiates transfer of token from address _from to address _to\n', '    /// @param _from The address for the token to be transferred from.\n', '    /// @param _to The address for the token to be transferred to.\n', '    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public {\n', '        require (_tokenId > STARTING_ASSET_BASE);\n', '\n', '        require(_owns(_from, _tokenId));\n', '        require(_approved(_to, _tokenId));\n', '        require(_addressNotNull(_to));\n', '        \n', '        _transfer(_from, _to, _tokenId);\n', '    }\n', '    \n', '    /*** PRIVATE FUNCTIONS ***/\n', '    /// @dev  Safety check on _to address to prevent against an unexpected 0x0 default.\n', '    function _addressNotNull(address _to) internal pure returns (bool) {\n', '        return _to != address(0);\n', '    }\n', '    \n', '    /// @dev  For checking approval of transfer for address _to\n', '    function _approved(address _to, uint256 _tokenId) internal view returns (bool) {\n', '        return preSaleItemIndexToApproved[_tokenId] == _to;\n', '    }\n', '    \n', '    /// @dev For creating CSC Collectible\n', '    function _createCollectible(bytes32 _collectibleName, uint256 _collectibleType, uint256 _collectibleClass) internal returns(uint256) {\n', '        uint256 _sequenceId = uint256(preSaleItemTypeToCollectibleCount[_collectibleType][_collectibleClass]) + 1;\n', '        \n', '        // These requires are not strictly necessary, our calling code should make\n', '        // sure that these conditions are never broken.\n', '        require(_sequenceId == uint256(uint32(_sequenceId)));\n', '        \n', '        CSCPreSaleItem memory _collectibleObj = CSCPreSaleItem(\n', '          _sequenceId,\n', '          _collectibleName,\n', '          _collectibleType,\n', '          _collectibleClass,\n', '          address(0),\n', '          false\n', '        );\n', '        \n', '        uint256 generatedCollectibleId = allPreSaleItems.push(_collectibleObj) - 1;\n', '        uint256 collectibleIndex = generatedCollectibleId + STARTING_ASSET_BASE;\n', '        \n', '        preSaleItemTypeToSequenceIdToCollectible[_collectibleType][_collectibleClass][_sequenceId] = collectibleIndex;\n', '        preSaleItemTypeToCollectibleCount[_collectibleType][_collectibleClass] = _sequenceId;\n', '        \n', '        // emit Created event\n', '        // CollectibleCreated(address owner, uint256 globalId, uint256 collectibleType, uint256 collectibleClass, uint256 sequenceId, bytes32 collectibleName);\n', '        CollectibleCreated(address(this), collectibleIndex, _collectibleType, _collectibleClass, _sequenceId, _collectibleObj.collectibleName);\n', '        \n', '        // This will assign ownership, and also emit the Transfer event as\n', '        // per ERC721 draft\n', '        _transfer(address(0), address(this), collectibleIndex);\n', '        \n', '        return collectibleIndex;\n', '    }\n', '    \n', '    /// @dev Check for token ownership\n', '    function _owns(address claimant, uint256 _tokenId) internal view returns (bool) {\n', '        return claimant == preSaleItemIndexToOwner[_tokenId];\n', '    }\n', '    \n', '    /// @dev Assigns ownership of a specific preSaleItem to an address.\n', '    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n', '        uint256 generatedCollectibleId = _tokenId - STARTING_ASSET_BASE;\n', '\n', '        // Updating the owner details of the collectible\n', '        CSCPreSaleItem memory _Obj = allPreSaleItems[generatedCollectibleId];\n', '        _Obj.owner = _to;\n', '        allPreSaleItems[generatedCollectibleId] = _Obj;\n', '        \n', "        // Since the number of preSaleItem is capped to 2^32 we can't overflow this\n", '        ownershipTokenCount[_to]++;\n', '        \n', '        //transfer ownership\n', '        preSaleItemIndexToOwner[_tokenId] = _to;\n', '        \n', "        // When creating new collectibles _from is 0x0, but we can't account that address.\n", '        if (_from != address(0)) {\n', '          ownershipTokenCount[_from]--;\n', '          // clear any previously approved ownership exchange\n', '          delete preSaleItemIndexToApproved[_tokenId];\n', '        }\n', '        \n', '        // Emit the transfer event.\n', '        Transfer(_from, _to, _tokenId);\n', '    }\n', '    \n', '    /// @dev Checks if a given address currently has transferApproval for a particular CSCPreSaleItem.\n', '    /// 0 is a valid value as it will be the starter\n', '    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n', '        require(_tokenId > STARTING_ASSET_BASE);\n', '\n', '        return preSaleItemIndexToApproved[_tokenId] == _claimant;\n', '    }\n', '}\n', '\n', '/* Lucid Sight, Inc. ERC-721 Collectibles Manager. \n', ' * @title LSPreSaleManager - Lucid Sight, Inc. Non-Fungible Token\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' */\n', 'contract CSCPreSaleManager is CSCPreSaleItemBase {\n', '\n', '    event RefundClaimed(address owner, uint256 refundValue);\n', '\n', '    /// @dev defines if preSaleItem type -> preSaleItem class -> Vending Machine to set limit (bool)\n', '    mapping(uint256 => mapping(uint256 => bool)) public preSaleItemTypeToClassToCanBeVendingMachine;\n', '\n', '    /// @dev defines if preSaleItem type -> preSaleItem class -> Vending Machine Fee\n', '    mapping(uint256 => mapping(uint256 => uint256)) public preSaleItemTypeToClassToVendingFee;\n', '\n', '    /// @dev Mapping created store the amount of value a wallet address used to buy assets\n', '    mapping(address => uint256) public addressToValue;\n', '    \n', '    bool CSCPreSaleInit = false;\n', '    /// @dev Constructor creates a reference to the NFT (ERC721) ownership contract\n', '    function CSCPreSaleManager() public {\n', '        require(msg.sender != address(0));\n', '        paused = true;\n', '        error = false;\n', '        managerPrimary = msg.sender;\n', '    }\n', '\n', '    /// @dev allows the contract to accept ETH\n', '    function() external payable {\n', '    }\n', '    \n', '    /// @dev Function to add approved address to the \n', '    /// approved address list\n', '    function addToApprovedAddress (address _newAddr) onlyManager whenNotPaused {\n', '        require(_newAddr != address(0));\n', '        require(!approvedAddressList[_newAddr]);\n', '        approvedAddressList[_newAddr] = true;\n', '    }\n', '    \n', '    /// @dev Function to remove an approved address from the \n', '    /// approved address list\n', '    function removeFromApprovedAddress (address _newAddr) onlyManager whenNotPaused {\n', '        require(_newAddr != address(0));\n', '        require(approvedAddressList[_newAddr]);\n', '        approvedAddressList[_newAddr] = false;\n', '    }\n', '\n', '    /// @dev Function toggle vending for collectible\n', '    function toggleVending (uint256 _collectibleType, uint256 _collectibleClass) external onlyManager {\n', '        if(preSaleItemTypeToClassToCanBeVendingMachine[_collectibleType][_collectibleClass] == false) {\n', '            preSaleItemTypeToClassToCanBeVendingMachine[_collectibleType][_collectibleClass] = true;\n', '        } else {\n', '            preSaleItemTypeToClassToCanBeVendingMachine[_collectibleType][_collectibleClass] = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Function toggle vending for collectible\n', '    function setVendingFee (uint256 _collectibleType, uint256 _collectibleClass, uint fee) external onlyManager {\n', '        preSaleItemTypeToClassToVendingFee[_collectibleType][_collectibleClass] = fee;\n', '    }\n', '    \n', '    /// @dev This helps in creating a collectible and then \n', '    /// transfer it _toAddress\n', '    function createCollectible(uint256 _collectibleType, uint256 _collectibleClass, address _toAddress) onlyManager external whenNotPaused {\n', '        require(msg.sender != address(0));\n', '        require(msg.sender != address(this));\n', '        \n', '        require(_toAddress != address(0));\n', '        require(_toAddress != address(this));\n', '        \n', '        require(preSaleItemTypeToClassToMaxLimitSet[_collectibleType][_collectibleClass]);\n', '        require(preSaleItemTypeToCollectibleCount[_collectibleType][_collectibleClass] < preSaleItemTypeToClassToMaxLimit[_collectibleType][_collectibleClass]);\n', '        \n', '        uint256 _tokenId = _createCollectible(preSaleItemTypeToClassToName[_collectibleType][_collectibleClass], _collectibleType, _collectibleClass);\n', '        \n', '        _transfer(address(this), _toAddress, _tokenId);\n', '    }\n', '\n', '\n', '    /// @dev This helps in creating a collectible and then \n', '    /// transfer it _toAddress\n', '    function vendingCreateCollectible(uint256 _collectibleType, uint256 _collectibleClass, address _toAddress) payable external whenNotPaused {\n', '        \n', '        //Only if Vending is Allowed for this Asset\n', '        require(preSaleItemTypeToClassToCanBeVendingMachine[_collectibleType][_collectibleClass]);\n', '\n', '        require(msg.value >= preSaleItemTypeToClassToVendingFee[_collectibleType][_collectibleClass]);\n', '\n', '        require(msg.sender != address(0));\n', '        require(msg.sender != address(this));\n', '        \n', '        require(_toAddress != address(0));\n', '        require(_toAddress != address(this));\n', '        \n', '        require(preSaleItemTypeToClassToMaxLimitSet[_collectibleType][_collectibleClass]);\n', '        require(preSaleItemTypeToCollectibleCount[_collectibleType][_collectibleClass] < preSaleItemTypeToClassToMaxLimit[_collectibleType][_collectibleClass]);\n', '        \n', '        uint256 _tokenId = _createCollectible(preSaleItemTypeToClassToName[_collectibleType][_collectibleClass], _collectibleType, _collectibleClass);\n', '        uint256 excessBid = msg.value - preSaleItemTypeToClassToVendingFee[_collectibleType][_collectibleClass];\n', '        \n', '        if(excessBid > 0) {\n', '            msg.sender.transfer(excessBid);\n', '        }\n', '\n', '        addressToValue[msg.sender] += preSaleItemTypeToClassToVendingFee[_collectibleType][_collectibleClass];\n', '        \n', '        _transfer(address(this), _toAddress, _tokenId);\n', '    }\n', '\n', '    \n', '    \n', '    /// @dev Override unpause so it requires all external contract addresses\n', "    ///  to be set before contract can be unpaused. Also, we can't have\n", '    ///  newContractAddress set either, because then the contract was upgraded.\n', '    /// @notice This is public rather than external so we can call super.unpause\n', '    ///  without using an expensive CALL.\n', '    function unpause() public onlyManager whenPaused {\n', '        // Actually unpause the contract.\n', '        super.unpause();\n', '    }\n', '\n', '    /// @dev Override unpause so it requires all external contract addresses\n', "    ///  to be set before contract can be unpaused. Also, we can't have\n", '    ///  newContractAddress set either, because then the contract was upgraded.\n', '    /// @notice This is public rather than external so we can call super.unpause\n', '    ///  without using an expensive CALL.\n', '    function hasError() public onlyManager whenPaused {\n', '        // Actually error out the contract.\n', '        super.hasError();\n', '    }\n', '    \n', '    /// @dev Function does the init step and thus allow\n', '    /// to create a Dummy 0th colelctible\n', '    function preSaleInit() onlyManager {\n', '        require(!CSCPreSaleInit);\n', '        require(allPreSaleItems.length == 0);\n', '        \n', '        CSCPreSaleInit = true;\n', '        \n', '        //Fill in index 0 to null requests\n', '        CSCPreSaleItem memory _Obj = CSCPreSaleItem(0, stringToBytes32("DummyAsset"), 0, 0, address(this), true);\n', '        allPreSaleItems.push(_Obj);\n', '    }\n', '\n', "    /// @dev Remove all Ether from the contract, which is the owner's cuts\n", '    ///  as well as any Ether sent directly to the contract address.\n', '    ///  Always transfers to the NFT (ERC721) contract, but can be called either by\n', '    ///  the owner or the NFT (ERC721) contract.\n', '    function withdrawBalance() onlyBanker {\n', '        // We are using this boolean method to make sure that even if one fails it will still work\n', '        bankManager.transfer(this.balance);\n', '    }\n', '\n', '    // @dev a function to claim refund if and only if theres an error in the contract\n', '    function claimRefund(address _ownerAddress) whenError {\n', '        uint256 refundValue = addressToValue[_ownerAddress];\n', '\n', '        require (refundValue > 0);\n', '        \n', '        addressToValue[_ownerAddress] = 0;\n', '\n', '        _ownerAddress.transfer(refundValue);\n', '        RefundClaimed(_ownerAddress, refundValue);\n', '    }\n', '    \n', '\n', '    /// @dev Function used to set the flag isRedeemed to true\n', '    /// can be called by addresses in the approvedAddressList\n', '    function isRedeemed(uint256 _tokenId) {\n', '        require(approvedAddressList[msg.sender]);\n', '        require(_tokenId > STARTING_ASSET_BASE);\n', '        uint256 generatedCollectibleId = _tokenId - STARTING_ASSET_BASE;\n', '        \n', '        CSCPreSaleItem memory _Obj = allPreSaleItems[generatedCollectibleId];\n', '        _Obj.isRedeemed = true;\n', '        \n', '        allPreSaleItems[generatedCollectibleId] = _Obj;\n', '    }\n', '}']
