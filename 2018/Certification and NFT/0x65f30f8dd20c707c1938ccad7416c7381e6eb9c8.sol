['pragma solidity 0.4.24;\n', '\n', '// File: contracts/generic/Restricted.sol\n', '\n', '/*\n', '    Generic contract to authorise calls to certain functions only from a given address.\n', '    The address authorised must be a contract (multisig or not, depending on the permission), except for local test\n', '\n', '    deployment works as:\n', '           1. contract deployer account deploys contracts\n', '           2. constructor grants "PermissionGranter" permission to deployer account\n', '           3. deployer account executes initial setup (no multiSig)\n', '           4. deployer account grants PermissionGranter permission for the MultiSig contract\n', '                (e.g. StabilityBoardProxy or PreTokenProxy)\n', '           5. deployer account revokes its own PermissionGranter permission\n', '*/\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', 'contract Restricted {\n', '\n', "    // NB: using bytes32 rather than the string type because it's cheaper gas-wise:\n", '    mapping (address => mapping (bytes32 => bool)) public permissions;\n', '\n', '    event PermissionGranted(address indexed agent, bytes32 grantedPermission);\n', '    event PermissionRevoked(address indexed agent, bytes32 revokedPermission);\n', '\n', '    modifier restrict(bytes32 requiredPermission) {\n', '        require(permissions[msg.sender][requiredPermission], "msg.sender must have permission");\n', '        _;\n', '    }\n', '\n', '    constructor(address permissionGranterContract) public {\n', '        require(permissionGranterContract != address(0), "permissionGranterContract must be set");\n', '        permissions[permissionGranterContract]["PermissionGranter"] = true;\n', '        emit PermissionGranted(permissionGranterContract, "PermissionGranter");\n', '    }\n', '\n', '    function grantPermission(address agent, bytes32 requiredPermission) public {\n', '        require(permissions[msg.sender]["PermissionGranter"],\n', '            "msg.sender must have PermissionGranter permission");\n', '        permissions[agent][requiredPermission] = true;\n', '        emit PermissionGranted(agent, requiredPermission);\n', '    }\n', '\n', '    function grantMultiplePermissions(address agent, bytes32[] requiredPermissions) public {\n', '        require(permissions[msg.sender]["PermissionGranter"],\n', '            "msg.sender must have PermissionGranter permission");\n', '        uint256 length = requiredPermissions.length;\n', '        for (uint256 i = 0; i < length; i++) {\n', '            grantPermission(agent, requiredPermissions[i]);\n', '        }\n', '    }\n', '\n', '    function revokePermission(address agent, bytes32 requiredPermission) public {\n', '        require(permissions[msg.sender]["PermissionGranter"],\n', '            "msg.sender must have PermissionGranter permission");\n', '        permissions[agent][requiredPermission] = false;\n', '        emit PermissionRevoked(agent, requiredPermission);\n', '    }\n', '\n', '    function revokeMultiplePermissions(address agent, bytes32[] requiredPermissions) public {\n', '        uint256 length = requiredPermissions.length;\n', '        for (uint256 i = 0; i < length; i++) {\n', '            revokePermission(agent, requiredPermissions[i]);\n', '        }\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/generic/SafeMath.sol\n', '\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that throw on error\n', '\n', '    TODO: check against ds-math: https://blog.dapphub.com/ds-math/\n', '    TODO: move roundedDiv to a sep lib? (eg. Math.sol)\n', '    TODO: more unit tests!\n', '*/\n', 'pragma solidity 0.4.24;\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        require(a == 0 || c / a == b, "mul overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "div by 0"); // Solidity automatically throws for div by 0 but require to emit reason\n', '        uint256 c = a / b;\n', "        // require(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "sub underflow");\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "add overflow");\n', '        return c;\n', '    }\n', '\n', '    // Division, round to nearest integer, round half up\n', '    function roundedDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "div by 0"); // Solidity automatically throws for div by 0 but require to emit reason\n', '        uint256 halfB = (b % 2 == 0) ? (b / 2) : (b / 2 + 1);\n', '        return (a % b >= halfB) ? (a / b + 1) : (a / b);\n', '    }\n', '\n', '    // Division, always rounds up\n', '    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "div by 0"); // Solidity automatically throws for div by 0 but require to emit reason\n', '        return (a % b != 0) ? (a / b + 1) : (a / b);\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? b : a;\n', '    }    \n', '}\n', '\n', '// File: contracts/interfaces/TransferFeeInterface.sol\n', '\n', '/*\n', ' *  transfer fee calculation interface\n', ' *\n', ' */\n', 'pragma solidity 0.4.24;\n', '\n', '\n', 'interface TransferFeeInterface {\n', '    function calculateTransferFee(address from, address to, uint amount) external view returns (uint256 fee);\n', '}\n', '\n', '// File: contracts/interfaces/ERC20Interface.sol\n', '\n', '/*\n', ' * ERC20 interface\n', ' * see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'pragma solidity 0.4.24;\n', '\n', '\n', 'interface ERC20Interface {\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '    event Transfer(address indexed from, address indexed to, uint amount);\n', '\n', '    function transfer(address to, uint value) external returns (bool); // solhint-disable-line no-simple-event-func-name\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function balanceOf(address who) external view returns (uint);\n', '    function allowance(address _owner, address _spender) external view returns (uint remaining);\n', '\n', '}\n', '\n', '// File: contracts/interfaces/TokenReceiver.sol\n', '\n', '/*\n', ' *  receiver contract interface\n', ' * see https://github.com/ethereum/EIPs/issues/677\n', ' */\n', 'pragma solidity 0.4.24;\n', '\n', '\n', 'interface TokenReceiver {\n', '    function transferNotification(address from, uint256 amount, uint data) external;\n', '}\n', '\n', '// File: contracts/interfaces/AugmintTokenInterface.sol\n', '\n', '/* Augmint Token interface (abstract contract)\n', '\n', 'TODO: overload transfer() & transferFrom() instead of transferWithNarrative() & transferFromWithNarrative()\n', '      when this fix available in web3& truffle also uses that web3: https://github.com/ethereum/web3.js/pull/1185\n', 'TODO: shall we use bytes for narrative?\n', ' */\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract AugmintTokenInterface is Restricted, ERC20Interface {\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    bytes32 public peggedSymbol;\n', '    uint8 public decimals;\n', '\n', '    uint public totalSupply;\n', '    mapping(address => uint256) public balances; // Balances for each account\n', '    mapping(address => mapping (address => uint256)) public allowed; // allowances added with approve()\n', '\n', '    TransferFeeInterface public feeAccount;\n', '    mapping(bytes32 => bool) public delegatedTxHashesUsed; // record txHashes used by delegatedTransfer\n', '\n', '    event TransferFeesChanged(uint transferFeePt, uint transferFeeMin, uint transferFeeMax);\n', '    event Transfer(address indexed from, address indexed to, uint amount);\n', '    event AugmintTransfer(address indexed from, address indexed to, uint amount, string narrative, uint fee);\n', '    event TokenIssued(uint amount);\n', '    event TokenBurned(uint amount);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function transfer(address to, uint value) external returns (bool); // solhint-disable-line no-simple-event-func-name\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '    function approve(address spender, uint value) external returns (bool);\n', '\n', '    function delegatedTransfer(address from, address to, uint amount, string narrative,\n', '                                    uint maxExecutorFeeInToken, /* client provided max fee for executing the tx */\n', '                                    bytes32 nonce, /* random nonce generated by client */\n', '                                    /* ^^^^ end of signed data ^^^^ */\n', '                                    bytes signature,\n', '                                    uint requestedExecutorFeeInToken /* the executor can decide to request lower fee */\n', '                                ) external;\n', '\n', '    function delegatedTransferAndNotify(address from, TokenReceiver target, uint amount, uint data,\n', '                                    uint maxExecutorFeeInToken, /* client provided max fee for executing the tx */\n', '                                    bytes32 nonce, /* random nonce generated by client */\n', '                                    /* ^^^^ end of signed data ^^^^ */\n', '                                    bytes signature,\n', '                                    uint requestedExecutorFeeInToken /* the executor can decide to request lower fee */\n', '                                ) external;\n', '\n', '    function increaseApproval(address spender, uint addedValue) external;\n', '    function decreaseApproval(address spender, uint subtractedValue) external;\n', '\n', '    function issueTo(address to, uint amount) external; // restrict it to "MonetarySupervisor" in impl.;\n', '    function burn(uint amount) external;\n', '\n', '    function transferAndNotify(TokenReceiver target, uint amount, uint data) external;\n', '\n', '    function transferWithNarrative(address to, uint256 amount, string narrative) external;\n', '    function transferFromWithNarrative(address from, address to, uint256 amount, string narrative) external;\n', '\n', '    function setName(string _name) external;\n', '    function setSymbol(string _symbol) external;\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256 remaining);\n', '\n', '    function balanceOf(address who) external view returns (uint);\n', '\n', '\n', '}\n', '\n', '// File: contracts/generic/ECRecovery.sol\n', '\n', '/**\n', ' * @title Eliptic curve signature operations\n', ' *\n', ' * @dev Based on https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ECRecovery.sol\n', ' *\n', ' * TODO Remove this library once solidity supports passing a signature to ecrecover.\n', ' * See https://github.com/ethereum/solidity/issues/864\n', ' *\n', ' */\n', '\n', 'library ECRecovery {\n', '\n', '  /**\n', '   * @dev Recover signer address from a message by using their signature\n', '   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n', '   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n', '   */\n', '  function recover(bytes32 hash, bytes sig)\n', '    internal\n', '    pure\n', '    returns (address)\n', '  {\n', '    bytes32 r;\n', '    bytes32 s;\n', '    uint8 v;\n', '\n', '    // Check the signature length\n', '    if (sig.length != 65) {\n', '      return (address(0));\n', '    }\n', '\n', '    // Divide the signature in r, s and v variables\n', '    // ecrecover takes the signature parameters, and the only way to get them\n', '    // currently is to use assembly.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly {\n', '      r := mload(add(sig, 32))\n', '      s := mload(add(sig, 64))\n', '      v := byte(0, mload(add(sig, 96)))\n', '    }\n', '\n', '    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '    if (v < 27) {\n', '      v += 27;\n', '    }\n', '\n', '    // If the version is correct return the signer address\n', '    if (v != 27 && v != 28) {\n', '      return (address(0));\n', '    } else {\n', '      // solium-disable-next-line arg-overflow\n', '      return ecrecover(hash, v, r, s);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * toEthSignedMessageHash\n', '   * @dev prefix a bytes32 value with "\\x19Ethereum Signed Message:"\n', '   * @dev and hash the result\n', '   */\n', '  function toEthSignedMessageHash(bytes32 hash)\n', '    internal\n', '    pure\n', '    returns (bytes32)\n', '  {\n', '    // 32 is the length in bytes of hash,\n', '    // enforced by the type signature above\n', '    return keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash));\n', '  }\n', '}\n', '\n', '// File: contracts/generic/AugmintToken.sol\n', '\n', '/* Generic Augmint Token implementation (ERC20 token)\n', '    This contract manages:\n', '        * Balances of Augmint holders and transactions between them\n', '        * Issues/burns tokens\n', '\n', '    TODO:\n', '        - reconsider delegatedTransfer and how to structure it\n', '        - shall we allow change of txDelegator?\n', '        - consider generic bytes arg instead of uint for transferAndNotify\n', '        - consider separate transfer fee params and calculation to separate contract (to feeAccount?)\n', '*/\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract AugmintToken is AugmintTokenInterface {\n', '\n', '    event FeeAccountChanged(TransferFeeInterface newFeeAccount);\n', '\n', '    constructor(address permissionGranterContract, string _name, string _symbol, bytes32 _peggedSymbol, uint8 _decimals, TransferFeeInterface _feeAccount)\n', '    public Restricted(permissionGranterContract) {\n', '        require(_feeAccount != address(0), "feeAccount must be set");\n', '        require(bytes(_name).length > 0, "name must be set");\n', '        require(bytes(_symbol).length > 0, "symbol must be set");\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '        peggedSymbol = _peggedSymbol;\n', '        decimals = _decimals;\n', '\n', '        feeAccount = _feeAccount;\n', '\n', '    }\n', '\n', '    function transfer(address to, uint256 amount) external returns (bool) {\n', '        _transfer(msg.sender, to, amount, "");\n', '        return true;\n', '    }\n', '\n', '    /* Transfers based on an offline signed transfer instruction. */\n', '    function delegatedTransfer(address from, address to, uint amount, string narrative,\n', '                                     uint maxExecutorFeeInToken, /* client provided max fee for executing the tx */\n', '                                     bytes32 nonce, /* random nonce generated by client */\n', '                                     /* ^^^^ end of signed data ^^^^ */\n', '                                     bytes signature,\n', '                                     uint requestedExecutorFeeInToken /* the executor can decide to request lower fee */\n', '                                     )\n', '    external {\n', '        bytes32 txHash = keccak256(abi.encodePacked(this, from, to, amount, narrative, maxExecutorFeeInToken, nonce));\n', '\n', '        _checkHashAndTransferExecutorFee(txHash, signature, from, maxExecutorFeeInToken, requestedExecutorFeeInToken);\n', '\n', '        _transfer(from, to, amount, narrative);\n', '    }\n', '\n', '    function approve(address _spender, uint256 amount) external returns (bool) {\n', '        require(_spender != 0x0, "spender must be set");\n', '        allowed[msg.sender][_spender] = amount;\n', '        emit Approval(msg.sender, _spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     ERC20 transferFrom attack protection: https://github.com/DecentLabs/dcm-poc/issues/57\n', '     approve should be called when allowed[_spender] == 0. To increment allowed value is better\n', '     to use this function to avoid 2 calls (and wait until the first transaction is mined)\n', '     Based on MonolithDAO Token.sol */\n', '    function increaseApproval(address _spender, uint _addedValue) external {\n', '        require(_spender != 0x0, "spender must be set");\n', '        mapping (address => uint256) allowances = allowed[msg.sender];\n', '        uint newValue = allowances[_spender].add(_addedValue);\n', '        allowances[_spender] = newValue;\n', '        emit Approval(msg.sender, _spender, newValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) external {\n', '        require(_spender != 0x0, "spender must be set");\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 amount) external returns (bool) {\n', '        _transferFrom(from, to, amount, "");\n', '        return true;\n', '    }\n', '\n', '    // Issue tokens. See MonetarySupervisor but as a rule of thumb issueTo is only allowed:\n', '    //      - on new loan (by trusted Lender contracts)\n', '    //      - when converting old tokens using MonetarySupervisor\n', '    //      - strictly to reserve by Stability Board (via MonetarySupervisor)\n', '    function issueTo(address to, uint amount) external restrict("MonetarySupervisor") {\n', '        balances[to] = balances[to].add(amount);\n', '        totalSupply = totalSupply.add(amount);\n', '        emit Transfer(0x0, to, amount);\n', '        emit AugmintTransfer(0x0, to, amount, "", 0);\n', '    }\n', '\n', '    // Burn tokens. Anyone can burn from its own account. YOLO.\n', '    // Used by to burn from Augmint reserve or by Lender contract after loan repayment\n', '    function burn(uint amount) external {\n', '        require(balances[msg.sender] >= amount, "balance must be >= amount");\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '        totalSupply = totalSupply.sub(amount);\n', '        emit Transfer(msg.sender, 0x0, amount);\n', '        emit AugmintTransfer(msg.sender, 0x0, amount, "", 0);\n', '    }\n', '\n', '    /* to upgrade feeAccount (eg. for fee calculation changes) */\n', '    function setFeeAccount(TransferFeeInterface newFeeAccount) external restrict("StabilityBoard") {\n', '        feeAccount = newFeeAccount;\n', '        emit FeeAccountChanged(newFeeAccount);\n', '    }\n', '\n', '    /*  transferAndNotify can be used by contracts which require tokens to have only 1 tx (instead of approve + call)\n', '        Eg. repay loan, lock funds, token sell order on exchange\n', '        Reverts on failue:\n', '            - transfer fails\n', '            - if transferNotification fails (callee must revert on failure)\n', "            - if targetContract is an account or targetContract doesn't have neither transferNotification or fallback fx\n", '        TODO: make data param generic bytes (see receiver code attempt in Locker.transferNotification)\n', '    */\n', '    function transferAndNotify(TokenReceiver target, uint amount, uint data) external {\n', '        _transfer(msg.sender, target, amount, "");\n', '\n', '        target.transferNotification(msg.sender, amount, data);\n', '    }\n', '\n', '    /* transferAndNotify based on an  instruction signed offline  */\n', '    function delegatedTransferAndNotify(address from, TokenReceiver target, uint amount, uint data,\n', '                                     uint maxExecutorFeeInToken, /* client provided max fee for executing the tx */\n', '                                     bytes32 nonce, /* random nonce generated by client */\n', '                                     /* ^^^^ end of signed data ^^^^ */\n', '                                     bytes signature,\n', '                                     uint requestedExecutorFeeInToken /* the executor can decide to request lower fee */\n', '                                     )\n', '    external {\n', '        bytes32 txHash = keccak256(abi.encodePacked(this, from, target, amount, data, maxExecutorFeeInToken, nonce));\n', '\n', '        _checkHashAndTransferExecutorFee(txHash, signature, from, maxExecutorFeeInToken, requestedExecutorFeeInToken);\n', '\n', '        _transfer(from, target, amount, "");\n', '        target.transferNotification(from, amount, data);\n', '    }\n', '\n', '\n', '    function transferWithNarrative(address to, uint256 amount, string narrative) external {\n', '        _transfer(msg.sender, to, amount, narrative);\n', '    }\n', '\n', '    function transferFromWithNarrative(address from, address to, uint256 amount, string narrative) external {\n', '        _transferFrom(from, to, amount, narrative);\n', '    }\n', '\n', '    /* Allow Stability Board to change the name when a new token contract version\n', '       is deployed and ready for production use. So that older token contracts\n', '       are identifiable in 3rd party apps. */\n', '    function setName(string _name) external restrict("StabilityBoard") {\n', '        name = _name;\n', '    }\n', '\n', '    /* Allow Stability Board to change the symbol when a new token contract version\n', '       is deployed and ready for production use. So that older token contracts\n', '       are identifiable in 3rd party apps. */\n', '    function setSymbol(string _symbol) external restrict("StabilityBoard") {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function balanceOf(address _owner) external view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function _checkHashAndTransferExecutorFee(bytes32 txHash, bytes signature, address signer,\n', '                                                uint maxExecutorFeeInToken, uint requestedExecutorFeeInToken) private {\n', '        require(requestedExecutorFeeInToken <= maxExecutorFeeInToken, "requestedExecutorFee must be <= maxExecutorFee");\n', '        require(!delegatedTxHashesUsed[txHash], "txHash already used");\n', '        delegatedTxHashesUsed[txHash] = true;\n', '\n', '        address recovered = ECRecovery.recover(ECRecovery.toEthSignedMessageHash(txHash), signature);\n', '        require(recovered == signer, "invalid signature");\n', '\n', '        _transfer(signer, msg.sender, requestedExecutorFeeInToken, "Delegated transfer fee", 0);\n', '    }\n', '\n', '    function _transferFrom(address from, address to, uint256 amount, string narrative) private {\n', '        uint fee = feeAccount.calculateTransferFee(from, to, amount);\n', '        uint amountWithFee = amount.add(fee);\n', '\n', '        /* NB: fee is deducted from owner, so transferFrom could fail\n', '            if amount + fee is not available on owner balance, or allowance */\n', '        require(balances[from] >= amountWithFee, "balance must be >= amount + fee");\n', '        require(allowed[from][msg.sender] >= amountWithFee, "allowance must be >= amount + fee");\n', '\n', '        _transfer(from, to, amount, narrative, fee);\n', '\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(amountWithFee);\n', '    }\n', '\n', '    function _transfer(address from, address to, uint transferAmount, string narrative) private {\n', '        uint fee = feeAccount.calculateTransferFee(from, to, transferAmount);\n', '        _transfer(from, to, transferAmount, narrative, fee);\n', '    }\n', '\n', '    function _transfer(address from, address to, uint transferAmount, string narrative, uint fee) private {\n', '        require(to != 0x0, "to must be set");\n', '        uint amountWithFee = transferAmount.add(fee);\n', '        // to emit proper reason instead of failing on from.sub()\n', '        require(balances[from] >= amountWithFee, "balance must be >= amount + transfer fee");\n', '\n', '        balances[from] = balances[from].sub(amountWithFee);\n', '        balances[to] = balances[to].add(transferAmount);\n', '\n', '        emit Transfer(from, to, transferAmount);\n', '\n', '        if (fee > 0) {\n', '            balances[feeAccount] = balances[feeAccount].add(fee);\n', '            emit Transfer(from, feeAccount, fee);\n', '        }\n', '\n', '        emit AugmintTransfer(from, to, transferAmount, narrative, fee);\n', '    }\n', '}\n', '\n', '// File: contracts/generic/SystemAccount.sol\n', '\n', '/* Contract to collect fees from system */\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', 'contract SystemAccount is Restricted {\n', '    event WithdrawFromSystemAccount(address tokenAddress, address to, uint tokenAmount, uint weiAmount,\n', '                                    string narrative);\n', '\n', '    constructor(address permissionGranterContract)\n', '    public Restricted(permissionGranterContract) {} // solhint-disable-line no-empty-blocks\n', '\n', '    function withdraw(AugmintToken tokenAddress, address to, uint tokenAmount, uint weiAmount, string narrative)\n', '    external restrict("StabilityBoard") {\n', '        tokenAddress.transferWithNarrative(to, tokenAmount, narrative);\n', '        if (weiAmount > 0) {\n', '            to.transfer(weiAmount);\n', '        }\n', '        emit WithdrawFromSystemAccount(tokenAddress, to, tokenAmount, weiAmount, narrative);\n', '    }\n', '}\n', '\n', '// File: contracts/AugmintReserves.sol\n', '\n', '/* Contract to hold Augmint reserves (ETH & Token)\n', '    - ETH as regular ETH balance of the contract\n', '    - ERC20 token reserve (stored as regular Token balance under the contract address)\n', '\n', 'NB: reserves are held under the contract address, therefore any transaction on the reserve is limited to the\n', '    tx-s defined here (i.e. transfer is not allowed even by the contract owner or StabilityBoard or MonetarySupervisor)\n', '\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', 'contract AugmintReserves is Restricted {\n', '\n', '    event ReserveMigration(address to, uint weiAmount);\n', '\n', '    constructor(address permissionGranterContract)\n', '    public Restricted(permissionGranterContract) {} // solhint-disable-line no-empty-blocks\n', '\n', '    function () external payable { // solhint-disable-line no-empty-blocks\n', "        // to accept ETH sent into reserve (from defaulted loan's collateral )\n", '    }\n', '\n', '    function burn(AugmintTokenInterface augmintToken, uint amount)\n', '    external restrict("MonetarySupervisor") {\n', '        augmintToken.burn(amount);\n', '    }\n', '\n', '    function migrate(address to, uint weiAmount)\n', '    external restrict("StabilityBoard") {\n', '        if (weiAmount > 0) {\n', '            to.transfer(weiAmount);\n', '        }\n', '        emit ReserveMigration(to, weiAmount);\n', '    }\n', '}']