['pragma solidity ^0.4.21;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() internal {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to. \n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * Interface for the standard token.\n', ' * Based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', ' */\n', 'interface EIP20Token {\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function transfer(address to, uint256 value) external returns (bool success);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool success);\n', '  function approve(address spender, uint256 value) external returns (bool success);\n', '  function allowance(address owner, address spender) external view returns (uint256 remaining);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// The owner of this contract should be an externally owned account\n', 'contract Wibson2Purchase is Ownable {\n', '\n', '  // Address of the target contract\n', '  address public purchase_address = 0x40AF356665E9E067139D6c0d135be2B607e01Ab3;\n', '  // First partner address\n', '  address public first_partner_address = 0xeAf654f12F33939f765F0Ef3006563A196A1a569;\n', '  // Second partner address\n', '  address public second_partner_address = 0x1B78C30171A45CA627889356cf74f77d872682c2;\n', '  // Additional gas used for transfers. This is added to the standard 2300 gas for value transfers.\n', '  uint public gas = 1000;\n', '\n', '  // Payments to this contract require a bit of gas. 100k should be enough.\n', '  function() payable public {\n', '    execute_transfer(msg.value);\n', '  }\n', '\n', '  // Transfer some funds to the target purchase address.\n', '  function execute_transfer(uint transfer_amount) internal {\n', '    // First partner fee is 2.5 for each 100\n', '    uint first_fee = transfer_amount * 25 / 1000;\n', '    // Second partner fee is 2.5 for each 100\n', '    uint second_fee = transfer_amount * 25 / 1000;\n', '\n', '    transfer_with_extra_gas(first_partner_address, first_fee);\n', '    transfer_with_extra_gas(second_partner_address, second_fee);\n', '\n', '    // Send the rest\n', '    uint purchase_amount = transfer_amount - first_fee - second_fee;\n', '    transfer_with_extra_gas(purchase_address, purchase_amount);\n', '  }\n', '\n', '  // Transfer with additional gas.\n', '  function transfer_with_extra_gas(address destination, uint transfer_amount) internal {\n', '    require(destination.call.gas(gas).value(transfer_amount)());\n', '  }\n', '\n', '  // Sets the amount of additional gas allowed to addresses called\n', '  // @dev This allows transfers to multisigs that use more than 2300 gas in their fallback function.\n', '  function set_transfer_gas(uint transfer_gas) public onlyOwner {\n', '    gas = transfer_gas;\n', '  }\n', '\n', '  // We can use this function to move unwanted tokens in the contract\n', '  function approve_unwanted_tokens(EIP20Token token, address dest, uint value) public onlyOwner {\n', '    token.approve(dest, value);\n', '  }\n', '\n', '  // This contract is designed to have no balance.\n', '  // However, we include this function to avoid stuck value by some unknown mishap.\n', '  function emergency_withdraw() public onlyOwner {\n', '    transfer_with_extra_gas(msg.sender, address(this).balance);\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() internal {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to. \n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * Interface for the standard token.\n', ' * Based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', ' */\n', 'interface EIP20Token {\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function transfer(address to, uint256 value) external returns (bool success);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool success);\n', '  function approve(address spender, uint256 value) external returns (bool success);\n', '  function allowance(address owner, address spender) external view returns (uint256 remaining);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// The owner of this contract should be an externally owned account\n', 'contract Wibson2Purchase is Ownable {\n', '\n', '  // Address of the target contract\n', '  address public purchase_address = 0x40AF356665E9E067139D6c0d135be2B607e01Ab3;\n', '  // First partner address\n', '  address public first_partner_address = 0xeAf654f12F33939f765F0Ef3006563A196A1a569;\n', '  // Second partner address\n', '  address public second_partner_address = 0x1B78C30171A45CA627889356cf74f77d872682c2;\n', '  // Additional gas used for transfers. This is added to the standard 2300 gas for value transfers.\n', '  uint public gas = 1000;\n', '\n', '  // Payments to this contract require a bit of gas. 100k should be enough.\n', '  function() payable public {\n', '    execute_transfer(msg.value);\n', '  }\n', '\n', '  // Transfer some funds to the target purchase address.\n', '  function execute_transfer(uint transfer_amount) internal {\n', '    // First partner fee is 2.5 for each 100\n', '    uint first_fee = transfer_amount * 25 / 1000;\n', '    // Second partner fee is 2.5 for each 100\n', '    uint second_fee = transfer_amount * 25 / 1000;\n', '\n', '    transfer_with_extra_gas(first_partner_address, first_fee);\n', '    transfer_with_extra_gas(second_partner_address, second_fee);\n', '\n', '    // Send the rest\n', '    uint purchase_amount = transfer_amount - first_fee - second_fee;\n', '    transfer_with_extra_gas(purchase_address, purchase_amount);\n', '  }\n', '\n', '  // Transfer with additional gas.\n', '  function transfer_with_extra_gas(address destination, uint transfer_amount) internal {\n', '    require(destination.call.gas(gas).value(transfer_amount)());\n', '  }\n', '\n', '  // Sets the amount of additional gas allowed to addresses called\n', '  // @dev This allows transfers to multisigs that use more than 2300 gas in their fallback function.\n', '  function set_transfer_gas(uint transfer_gas) public onlyOwner {\n', '    gas = transfer_gas;\n', '  }\n', '\n', '  // We can use this function to move unwanted tokens in the contract\n', '  function approve_unwanted_tokens(EIP20Token token, address dest, uint value) public onlyOwner {\n', '    token.approve(dest, value);\n', '  }\n', '\n', '  // This contract is designed to have no balance.\n', '  // However, we include this function to avoid stuck value by some unknown mishap.\n', '  function emergency_withdraw() public onlyOwner {\n', '    transfer_with_extra_gas(msg.sender, address(this).balance);\n', '  }\n', '\n', '}']
