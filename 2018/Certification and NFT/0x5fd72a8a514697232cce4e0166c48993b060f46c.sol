['pragma solidity ^0.4.19;\n', '\n', '/**\n', '* Contract for Vanity URL on SpringRole\n', '* Go to beta.springrole.com to try this out!\n', '*/\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of “user permissions”.\n', ' */\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title VanityURL\n', ' * @dev The VanityURL contract provides functionality to reserve vanity URLs.\n', ' * Go to https://beta.springrole.com to reserve.\n', ' */\n', '\n', '\n', 'contract VanityURL is Ownable,Pausable {\n', '\n', '  // This declares a state variable that mapping for vanityURL to address\n', '  mapping (string => address) vanity_address_mapping;\n', '  // This declares a state variable that mapping for address to vanityURL\n', '  mapping (address => string ) address_vanity_mapping;\n', '  /*\n', '    constructor function to set token address & Pricing for reserving and token transfer address\n', '   */\n', '  function VanityURL(){\n', '  }\n', '\n', '  event VanityReserved(address _to, string _vanity_url);\n', '  event VanityTransfered(address _to,address _from, string _vanity_url);\n', '  event VanityReleased(string _vanity_url);\n', '\n', '  /* function to retrive wallet address from vanity url */\n', '  function retrieveWalletForVanity(string _vanity_url) constant public returns (address) {\n', '    return vanity_address_mapping[_vanity_url];\n', '  }\n', '\n', '  /* function to retrive vanity url from address */\n', '  function retrieveVanityForWallet(address _address) constant public returns (string) {\n', '    return address_vanity_mapping[_address];\n', '  }\n', '\n', '  /*\n', '    function to reserve vanityURL\n', '    1. Checks if vanity is check is valid\n', '    2. Checks if address has already a vanity url\n', '    3. check if vanity url is used by any other or not\n', '    4. Check if vanity url is present in reserved keyword\n', '    5. Transfer the token\n', '    6. Update the mapping variables\n', '  */\n', '  function reserve(string _vanity_url) whenNotPaused public {\n', '    _vanity_url = _toLower(_vanity_url);\n', '    require(checkForValidity(_vanity_url));\n', '    require(vanity_address_mapping[_vanity_url]  == address(0x0));\n', '    require(bytes(address_vanity_mapping[msg.sender]).length == 0);\n', '    vanity_address_mapping[_vanity_url] = msg.sender;\n', '    address_vanity_mapping[msg.sender] = _vanity_url;\n', '    VanityReserved(msg.sender, _vanity_url);\n', '  }\n', '\n', '  /*\n', '  function to make lowercase\n', '  */\n', '\n', '  function _toLower(string str) internal returns (string) {\n', '\t\tbytes memory bStr = bytes(str);\n', '\t\tbytes memory bLower = new bytes(bStr.length);\n', '\t\tfor (uint i = 0; i < bStr.length; i++) {\n', '\t\t\t// Uppercase character...\n', '\t\t\tif ((bStr[i] >= 65) && (bStr[i] <= 90)) {\n', '\t\t\t\t// So we add 32 to make it lowercase\n', '\t\t\t\tbLower[i] = bytes1(int(bStr[i]) + 32);\n', '\t\t\t} else {\n', '\t\t\t\tbLower[i] = bStr[i];\n', '\t\t\t}\n', '\t\t}\n', '\t\treturn string(bLower);\n', '\t}\n', '\n', '  /*\n', '  function to verify vanityURL\n', '  1. Minimum length 4\n', '  2.Maximum lenght 200\n', '  3.Vanity url is only alphanumeric\n', '   */\n', '  function checkForValidity(string _vanity_url) returns (bool) {\n', '    uint length =  bytes(_vanity_url).length;\n', '    require(length >= 4 && length <= 200);\n', '    for (uint i =0; i< length; i++){\n', '      var c = bytes(_vanity_url)[i];\n', '      if ((c < 48 ||  c > 122 || (c > 57 && c < 65) || (c > 90 && c < 97 )) && (c != 95))\n', '        return false;\n', '    }\n', '    return true;\n', '  }\n', '\n', '  /*\n', '  function to change Vanity URL\n', '    1. Checks whether vanity URL is check is valid\n', '    2. Checks if address has already a vanity url\n', '    3. check if vanity url is used by any other or not\n', '    4. Check if vanity url is present in reserved keyword\n', '    5. Update the mapping variables\n', '  */\n', '\n', '  function changeVanityURL(string _vanity_url) whenNotPaused public {\n', '    require(bytes(address_vanity_mapping[msg.sender]).length != 0);\n', '    _vanity_url = _toLower(_vanity_url);\n', '    require(checkForValidity(_vanity_url));\n', '    require(vanity_address_mapping[_vanity_url]  == address(0x0));\n', '    vanity_address_mapping[_vanity_url] = msg.sender;\n', '    address_vanity_mapping[msg.sender] = _vanity_url;\n', '    VanityReserved(msg.sender, _vanity_url);\n', '  }\n', '\n', '  /*\n', '  function to transfer ownership for Vanity URL\n', '  */\n', '  function transferOwnershipForVanityURL(address _to) whenNotPaused public {\n', '    require(bytes(address_vanity_mapping[_to]).length == 0);\n', '    require(bytes(address_vanity_mapping[msg.sender]).length != 0);\n', '    address_vanity_mapping[_to] = address_vanity_mapping[msg.sender];\n', '    vanity_address_mapping[address_vanity_mapping[msg.sender]] = _to;\n', '    VanityTransfered(msg.sender,_to,address_vanity_mapping[msg.sender]);\n', '    delete(address_vanity_mapping[msg.sender]);\n', '  }\n', '\n', '  /*\n', '  function to transfer ownership for Vanity URL by Owner\n', '  */\n', '  function reserveVanityURLByOwner(address _to,string _vanity_url) whenNotPaused onlyOwner public {\n', '      _vanity_url = _toLower(_vanity_url);\n', '      require(checkForValidity(_vanity_url));\n', '      /* check if vanity url is being used by anyone */\n', '      if(vanity_address_mapping[_vanity_url]  != address(0x0))\n', '      {\n', '        /* Sending Vanity Transfered Event */\n', '        VanityTransfered(vanity_address_mapping[_vanity_url],_to,_vanity_url);\n', '        /* delete from address mapping */\n', '        delete(address_vanity_mapping[vanity_address_mapping[_vanity_url]]);\n', '        /* delete from vanity mapping */\n', '        delete(vanity_address_mapping[_vanity_url]);\n', '      }\n', '      else\n', '      {\n', '        /* sending VanityReserved event */\n', '        VanityReserved(_to, _vanity_url);\n', '      }\n', '      /* add new address to mapping */\n', '      vanity_address_mapping[_vanity_url] = _to;\n', '      address_vanity_mapping[_to] = _vanity_url;\n', '  }\n', '\n', '  /*\n', '  function to release a Vanity URL by Owner\n', '  */\n', '  function releaseVanityUrl(string _vanity_url) whenNotPaused onlyOwner public {\n', '    require(vanity_address_mapping[_vanity_url]  != address(0x0));\n', '    /* delete from address mapping */\n', '    delete(address_vanity_mapping[vanity_address_mapping[_vanity_url]]);\n', '    /* delete from vanity mapping */\n', '    delete(vanity_address_mapping[_vanity_url]);\n', '    /* sending VanityReleased event */\n', '    VanityReleased(_vanity_url);\n', '  }\n', '\n', '  /*\n', '    function to kill contract\n', '  */\n', '\n', '  function kill() onlyOwner {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  /*\n', '    transfer eth recived to owner account if any\n', '  */\n', '  function() payable {\n', '    owner.transfer(msg.value);\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '/**\n', '* Contract for Vanity URL on SpringRole\n', '* Go to beta.springrole.com to try this out!\n', '*/\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of “user permissions”.\n', ' */\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title VanityURL\n', ' * @dev The VanityURL contract provides functionality to reserve vanity URLs.\n', ' * Go to https://beta.springrole.com to reserve.\n', ' */\n', '\n', '\n', 'contract VanityURL is Ownable,Pausable {\n', '\n', '  // This declares a state variable that mapping for vanityURL to address\n', '  mapping (string => address) vanity_address_mapping;\n', '  // This declares a state variable that mapping for address to vanityURL\n', '  mapping (address => string ) address_vanity_mapping;\n', '  /*\n', '    constructor function to set token address & Pricing for reserving and token transfer address\n', '   */\n', '  function VanityURL(){\n', '  }\n', '\n', '  event VanityReserved(address _to, string _vanity_url);\n', '  event VanityTransfered(address _to,address _from, string _vanity_url);\n', '  event VanityReleased(string _vanity_url);\n', '\n', '  /* function to retrive wallet address from vanity url */\n', '  function retrieveWalletForVanity(string _vanity_url) constant public returns (address) {\n', '    return vanity_address_mapping[_vanity_url];\n', '  }\n', '\n', '  /* function to retrive vanity url from address */\n', '  function retrieveVanityForWallet(address _address) constant public returns (string) {\n', '    return address_vanity_mapping[_address];\n', '  }\n', '\n', '  /*\n', '    function to reserve vanityURL\n', '    1. Checks if vanity is check is valid\n', '    2. Checks if address has already a vanity url\n', '    3. check if vanity url is used by any other or not\n', '    4. Check if vanity url is present in reserved keyword\n', '    5. Transfer the token\n', '    6. Update the mapping variables\n', '  */\n', '  function reserve(string _vanity_url) whenNotPaused public {\n', '    _vanity_url = _toLower(_vanity_url);\n', '    require(checkForValidity(_vanity_url));\n', '    require(vanity_address_mapping[_vanity_url]  == address(0x0));\n', '    require(bytes(address_vanity_mapping[msg.sender]).length == 0);\n', '    vanity_address_mapping[_vanity_url] = msg.sender;\n', '    address_vanity_mapping[msg.sender] = _vanity_url;\n', '    VanityReserved(msg.sender, _vanity_url);\n', '  }\n', '\n', '  /*\n', '  function to make lowercase\n', '  */\n', '\n', '  function _toLower(string str) internal returns (string) {\n', '\t\tbytes memory bStr = bytes(str);\n', '\t\tbytes memory bLower = new bytes(bStr.length);\n', '\t\tfor (uint i = 0; i < bStr.length; i++) {\n', '\t\t\t// Uppercase character...\n', '\t\t\tif ((bStr[i] >= 65) && (bStr[i] <= 90)) {\n', '\t\t\t\t// So we add 32 to make it lowercase\n', '\t\t\t\tbLower[i] = bytes1(int(bStr[i]) + 32);\n', '\t\t\t} else {\n', '\t\t\t\tbLower[i] = bStr[i];\n', '\t\t\t}\n', '\t\t}\n', '\t\treturn string(bLower);\n', '\t}\n', '\n', '  /*\n', '  function to verify vanityURL\n', '  1. Minimum length 4\n', '  2.Maximum lenght 200\n', '  3.Vanity url is only alphanumeric\n', '   */\n', '  function checkForValidity(string _vanity_url) returns (bool) {\n', '    uint length =  bytes(_vanity_url).length;\n', '    require(length >= 4 && length <= 200);\n', '    for (uint i =0; i< length; i++){\n', '      var c = bytes(_vanity_url)[i];\n', '      if ((c < 48 ||  c > 122 || (c > 57 && c < 65) || (c > 90 && c < 97 )) && (c != 95))\n', '        return false;\n', '    }\n', '    return true;\n', '  }\n', '\n', '  /*\n', '  function to change Vanity URL\n', '    1. Checks whether vanity URL is check is valid\n', '    2. Checks if address has already a vanity url\n', '    3. check if vanity url is used by any other or not\n', '    4. Check if vanity url is present in reserved keyword\n', '    5. Update the mapping variables\n', '  */\n', '\n', '  function changeVanityURL(string _vanity_url) whenNotPaused public {\n', '    require(bytes(address_vanity_mapping[msg.sender]).length != 0);\n', '    _vanity_url = _toLower(_vanity_url);\n', '    require(checkForValidity(_vanity_url));\n', '    require(vanity_address_mapping[_vanity_url]  == address(0x0));\n', '    vanity_address_mapping[_vanity_url] = msg.sender;\n', '    address_vanity_mapping[msg.sender] = _vanity_url;\n', '    VanityReserved(msg.sender, _vanity_url);\n', '  }\n', '\n', '  /*\n', '  function to transfer ownership for Vanity URL\n', '  */\n', '  function transferOwnershipForVanityURL(address _to) whenNotPaused public {\n', '    require(bytes(address_vanity_mapping[_to]).length == 0);\n', '    require(bytes(address_vanity_mapping[msg.sender]).length != 0);\n', '    address_vanity_mapping[_to] = address_vanity_mapping[msg.sender];\n', '    vanity_address_mapping[address_vanity_mapping[msg.sender]] = _to;\n', '    VanityTransfered(msg.sender,_to,address_vanity_mapping[msg.sender]);\n', '    delete(address_vanity_mapping[msg.sender]);\n', '  }\n', '\n', '  /*\n', '  function to transfer ownership for Vanity URL by Owner\n', '  */\n', '  function reserveVanityURLByOwner(address _to,string _vanity_url) whenNotPaused onlyOwner public {\n', '      _vanity_url = _toLower(_vanity_url);\n', '      require(checkForValidity(_vanity_url));\n', '      /* check if vanity url is being used by anyone */\n', '      if(vanity_address_mapping[_vanity_url]  != address(0x0))\n', '      {\n', '        /* Sending Vanity Transfered Event */\n', '        VanityTransfered(vanity_address_mapping[_vanity_url],_to,_vanity_url);\n', '        /* delete from address mapping */\n', '        delete(address_vanity_mapping[vanity_address_mapping[_vanity_url]]);\n', '        /* delete from vanity mapping */\n', '        delete(vanity_address_mapping[_vanity_url]);\n', '      }\n', '      else\n', '      {\n', '        /* sending VanityReserved event */\n', '        VanityReserved(_to, _vanity_url);\n', '      }\n', '      /* add new address to mapping */\n', '      vanity_address_mapping[_vanity_url] = _to;\n', '      address_vanity_mapping[_to] = _vanity_url;\n', '  }\n', '\n', '  /*\n', '  function to release a Vanity URL by Owner\n', '  */\n', '  function releaseVanityUrl(string _vanity_url) whenNotPaused onlyOwner public {\n', '    require(vanity_address_mapping[_vanity_url]  != address(0x0));\n', '    /* delete from address mapping */\n', '    delete(address_vanity_mapping[vanity_address_mapping[_vanity_url]]);\n', '    /* delete from vanity mapping */\n', '    delete(vanity_address_mapping[_vanity_url]);\n', '    /* sending VanityReleased event */\n', '    VanityReleased(_vanity_url);\n', '  }\n', '\n', '  /*\n', '    function to kill contract\n', '  */\n', '\n', '  function kill() onlyOwner {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  /*\n', '    transfer eth recived to owner account if any\n', '  */\n', '  function() payable {\n', '    owner.transfer(msg.value);\n', '  }\n', '\n', '}']
