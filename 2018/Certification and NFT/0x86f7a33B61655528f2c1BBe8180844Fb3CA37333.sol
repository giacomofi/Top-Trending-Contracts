['pragma solidity ^0.4.23;\n', '\n', 'contract DSAuthority {\n', '    function canCall(\n', '        address src, address dst, bytes4 sig\n', '    ) public view returns (bool);\n', '}\n', '\n', 'contract DSAuthEvents {\n', '    event LogSetAuthority (address indexed authority);\n', '    event LogSetOwner     (address indexed owner);\n', '}\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority  public  authority;\n', '    address      public  owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_)\n', '        public\n', '        auth\n', '    {\n', '        owner = owner_;\n', '        emit LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_)\n', '        public\n', '        auth\n', '    {\n', '        authority = authority_;\n', '        emit LogSetAuthority(authority);\n', '    }\n', '\n', '    modifier auth {\n', '        require(isAuthorized(msg.sender, msg.sig));\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, this, sig);\n', '        }\n', '    }\n', '}\n', '\n', 'contract DSNote {\n', '    event LogNote(\n', '        bytes4   indexed  sig,\n', '        address  indexed  guy,\n', '        bytes32  indexed  foo,\n', '        bytes32  indexed  bar,\n', '        uint              wad,\n', '        bytes             fax\n', '    ) anonymous;\n', '\n', '    modifier note {\n', '        bytes32 foo;\n', '        bytes32 bar;\n', '\n', '        assembly {\n', '            foo := calldataload(4)\n', '            bar := calldataload(36)\n', '        }\n', '\n', '        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n', '\n', '        _;\n', '    }\n', '}\n', '\n', 'contract DSStop is DSNote, DSAuth {\n', '\n', '    bool public stopped;\n', '\n', '    modifier stoppable {\n', '        require(!stopped);\n', '        _;\n', '    }\n', '    function stop() public auth note {\n', '        stopped = true;\n', '    }\n', '    function start() public auth note {\n', '        stopped = false;\n', '    }\n', '\n', '}\n', '\n', 'contract DSMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '\n', '    function min(uint x, uint y) internal pure returns (uint z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint x, uint y) internal pure returns (uint z) {\n', '        return x >= y ? x : y;\n', '    }\n', '    function imin(int x, int y) internal pure returns (int z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int x, int y) internal pure returns (int z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    uint constant WAD = 10 ** 18;\n', '    uint constant RAY = 10 ** 27;\n', '\n', '    function wmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '    function rmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '    function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '    function rdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    // This famous algorithm is called "exponentiation by squaring"\n', '    // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '    //\n', "    // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '    //\n', '    // These facts are why it works:\n', '    //\n', '    //  If n is even, then x^n = (x^2)^(n/2).\n', '    //  If n is odd,  then x^n = x * x^(n-1),\n', '    //   and applying the equation for even x gives\n', '    //    x^n = x * (x^2)^((n-1) / 2).\n', '    //\n', '    //  Also, EVM division is flooring and\n', '    //    floor[(n-1) / 2] = floor[n / 2].\n', '    //\n', '    function rpow(uint x, uint n) internal pure returns (uint z) {\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'contract ERC20Events {\n', '    event Approval(address indexed src, address indexed guy, uint wad);\n', '    event Transfer(address indexed src, address indexed dst, uint wad);\n', '}\n', '\n', 'contract ERC20 is ERC20Events {\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address guy) public view returns (uint);\n', '    function allowance(address src, address guy) public view returns (uint);\n', '\n', '    function approve(address guy, uint wad) public returns (bool);\n', '    function transfer(address dst, uint wad) public returns (bool);\n', '    function transferFrom(\n', '        address src, address dst, uint wad\n', '    ) public returns (bool);\n', '}\n', '\n', 'contract IOVTokenBase is ERC20, DSMath {\n', '    uint256                                            _supply;\n', '    mapping (address => uint256)                       _balances;\n', '    mapping (address => mapping (address => uint256))  _approvals;\n', '\n', '    uint256  public  airdropBSupply = 5*10**6*10**8; // airdrop total supply = 500W\n', '    uint256  public  currentAirdropAmount = 0;\n', '    uint256  airdropNum  =  10*10**8;                // 10IOV each time for airdrop\n', '    mapping (address => bool) touched;               //records whether an address has received an airdrop;\n', '\n', '    constructor(uint supply) public {\n', '        _balances[msg.sender] = sub(supply, airdropBSupply);\n', '        _supply = supply;\n', '        emit Transfer(0x0, msg.sender, _balances[msg.sender]);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return _supply;\n', '    }\n', '    function balanceOf(address src) public view returns (uint) {\n', '        return getBalance(src);\n', '    }\n', '    function allowance(address src, address guy) public view returns (uint) {\n', '        return _approvals[src][guy];\n', '    }\n', '\n', '    function transfer(address dst, uint wad) public returns (bool) {\n', '        return transferFrom(msg.sender, dst, wad);\n', '    }\n', '\n', '    function transferFrom(address src, address dst, uint wad)\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_balances[src] >= wad);\n', '\n', '        if (src != msg.sender) {\n', '            require(_approvals[src][msg.sender] >= wad);\n', '            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n', '        }\n', '\n', '        _balances[src] = sub(_balances[src], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '\n', '        emit Transfer(src, dst, wad);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address guy, uint wad) public returns (bool) {\n', '        _approvals[msg.sender][guy] = wad;\n', '\n', '        emit Approval(msg.sender, guy, wad);\n', '\n', '        return true;\n', '    }\n', '\n', '    //\n', '    function getBalance(address src) internal constant returns(uint) {\n', '        if( currentAirdropAmount < airdropBSupply && !touched[src]) {\n', '            return add(_balances[src], airdropNum);\n', '        } else {\n', '            return _balances[src];\n', '        }\n', '    }\n', '}\n', '\n', 'contract ContractLock is DSStop {\n', '\n', '    uint  public  unlockTime;         // Start time for token transferring\n', '    mapping (address => bool) public isAdmin;  // Admin accounts\n', '\n', '    event LogAddAdmin(address whoAdded, address newAdmin);\n', '    event LogRemoveAdmin(address whoRemoved, address admin);\n', '\n', '    constructor(uint _unlockTime) public {\n', '        unlockTime = _unlockTime;\n', '        isAdmin[msg.sender] = true;\n', '        emit LogAddAdmin(msg.sender, msg.sender);\n', '    }\n', '\n', '    function addAdmin(address admin) public auth returns (bool) {\n', '        if(isAdmin[admin] == false) {\n', '            isAdmin[admin] = true;\n', '            emit LogAddAdmin(msg.sender, admin);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function removeAdmin(address admin) public auth returns (bool) {\n', '        if(isAdmin[admin] == true) {\n', '            isAdmin[admin] = false;\n', '            emit LogRemoveAdmin(msg.sender, admin);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function setOwner(address owner_)\n', '        public\n', '        auth\n', '    {\n', '        removeAdmin(owner);\n', '        owner = owner_;\n', '        addAdmin(owner);\n', '        emit LogSetOwner(owner);\n', '\n', '    }\n', '\n', '\n', '    modifier onlyAdmin {\n', '        require (isAdmin[msg.sender]);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier isUnlocked {\n', '        require( now > unlockTime || isAdmin[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function setUnlockTime(uint unlockTime_) public auth {\n', '        unlockTime = unlockTime_;\n', '    }\n', '\n', '}\n', '\n', 'contract IOVToken is IOVTokenBase(10*10**9*10**8), ContractLock(1527782400) {\n', '\n', '    string  public  symbol;\n', '    uint256  public  decimals = 8; // standard token precision. override to customize\n', '\n', '    constructor(string symbol_) public {\n', '        symbol = symbol_;\n', '    }\n', '\n', '    function approve(address guy) public stoppable returns (bool) {\n', '        return super.approve(guy, uint(-1));\n', '    }\n', '\n', '    function approve(address guy, uint wad) public stoppable returns (bool) {\n', '        return super.approve(guy, wad);\n', '    }\n', '\n', '    function transferFrom(address src, address dst, uint wad) public stoppable isUnlocked returns (bool)\n', '    {\n', '        require(_balances[src] >= wad);\n', '\n', '        if(!touched[src] && currentAirdropAmount < airdropBSupply) {\n', '            _balances[src] = add( _balances[src], airdropNum );\n', '            touched[src] = true;\n', '            currentAirdropAmount = add(currentAirdropAmount, airdropNum);\n', '        }\n', '\n', '        if (src != msg.sender && _approvals[src][msg.sender] != uint(-1)) {\n', '            require(_approvals[src][msg.sender] >= wad);\n', '            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n', '        }\n', '\n', '        _balances[src] = sub(_balances[src], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '\n', '        emit Transfer(src, dst, wad);\n', '\n', '        return true;\n', '    }\n', '\n', '    function push(address dst, uint wad) public {\n', '        transferFrom(msg.sender, dst, wad);\n', '    }\n', '    function pull(address src, uint wad) public {\n', '        transferFrom(src, msg.sender, wad);\n', '    }\n', '    function move(address src, address dst, uint wad) public {\n', '        transferFrom(src, dst, wad);\n', '    }\n', '\n', '    // Optional token name\n', '    string   public  name = "CarLive Chain";\n', '\n', '    function setName(string name_) public auth {\n', '        name = name_;\n', '    }\n', '\n', '    //\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract IOVTokenVesting is DSAuth, DSMath {\n', '\n', '  event LogNewAllocation(address indexed _recipient, uint256 _totalAllocated);\n', '  event LogIOVClaimed(address indexed _recipient, uint256 _amountClaimed);\n', '  event LogDisable(address indexed _recipient, bool _disable);\n', '\n', '  event LogAddVestingAdmin(address whoAdded, address indexed newAdmin);\n', '  event LogRemoveVestingAdmin(address whoRemoved, address indexed admin);\n', '\n', '  //Allocation with vesting information\n', '  struct Allocation {\n', '    uint256  start;          // Start time of vesting contract\n', '    uint256  cliff;          // cliff time in which tokens will begin to vest\n', '    uint256  periods;        // Periods for vesting\n', '    uint256  totalAllocated; // Total tokens allocated\n', '    uint256  amountClaimed;  // Total tokens claimed\n', '    bool     disable;        // allocation disabled or not.\n', '  }\n', '\n', '  IOVToken  public  IOV;\n', '  mapping (address => Allocation) public beneficiaries;\n', '  mapping (address => bool) public isVestingAdmin;  // community Admin accounts\n', '\n', '  // constructor function\n', '  constructor(IOVToken iov) public {\n', '    assert(address(IOV) == address(0));\n', '    IOV = iov;\n', '  }\n', '\n', '  // Contract admin related functions\n', '  function addVestingAdmin(address admin) public auth returns (bool) {\n', '      if(isVestingAdmin[admin] == false) {\n', '          isVestingAdmin[admin] = true;\n', '          emit LogAddVestingAdmin(msg.sender, admin);\n', '      }\n', '      return true;\n', '  }\n', '\n', '  function removeVestingAdmin(address admin) public auth returns (bool) {\n', '      if(isVestingAdmin[admin] == true) {\n', '          isVestingAdmin[admin] = false;\n', '          emit LogRemoveVestingAdmin(msg.sender, admin);\n', '      }\n', '      return true;\n', '  }\n', '\n', '  modifier onlyVestingAdmin {\n', '      require ( msg.sender == owner || isVestingAdmin[msg.sender] );\n', '      _;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  function totalUnClaimed() public view returns (uint256) {\n', '    return IOV.balanceOf(this);\n', '  }\n', '\n', '  /**\n', '  * @dev Allow the owner of the contract to assign a new allocation\n', '  * @param _recipient The recipient of the allocation\n', '  * @param _totalAllocated The total amount of IOV allocated to the receipient (after vesting)\n', '  * @param _start Start time of vesting contract\n', '  * @param _cliff cliff time in which tokens will begin to vest\n', '  * @param _period Periods for vesting\n', '  */\n', '  function setAllocation(address _recipient, uint256 _totalAllocated, uint256 _start, uint256 _cliff, uint256 _period) public onlyVestingAdmin {\n', '    require(_recipient != address(0));\n', '    require(beneficiaries[_recipient].totalAllocated == 0 && _totalAllocated > 0);\n', '    require(_start > 0 && _start < 32503680000);\n', '    require(_cliff >= _start);\n', '    require(_period > 0);\n', '\n', '    beneficiaries[_recipient] = Allocation(_start, _cliff, _period, _totalAllocated, 0, false);\n', '    emit LogNewAllocation(_recipient, _totalAllocated);\n', '  }\n', '\n', '  function setDisable(address _recipient, bool disable) public onlyVestingAdmin {\n', '    require(beneficiaries[_recipient].totalAllocated > 0);\n', '    beneficiaries[_recipient].disable = disable;\n', '    emit LogDisable(_recipient, disable);\n', '  }\n', '\n', '  /**\n', '   * @notice Transfer a recipients available allocation to their address.\n', '   * @param _recipient The address to withdraw tokens for\n', '   */\n', '  function transferTokens(address _recipient) public {\n', '    require(beneficiaries[_recipient].amountClaimed < beneficiaries[_recipient].totalAllocated);\n', '    require( now >= beneficiaries[_recipient].cliff );\n', '    require(!beneficiaries[_recipient].disable);\n', '\n', '    uint256 unreleased = releasableAmount(_recipient);\n', '    require( unreleased > 0);\n', '\n', '    IOV.transfer(_recipient, unreleased);\n', '\n', '    beneficiaries[_recipient].amountClaimed = vestedAmount(_recipient);\n', '\n', '    emit LogIOVClaimed(_recipient, unreleased);\n', '  }\n', '\n', '\n', '  /**\n', "   * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '   * @param _recipient The address which is being vested\n', '   */\n', '  function releasableAmount(address _recipient) public view returns (uint256) {\n', '    require( vestedAmount(_recipient) >= beneficiaries[_recipient].amountClaimed );\n', '    require( vestedAmount(_recipient) <= beneficiaries[_recipient].totalAllocated );\n', '    return sub( vestedAmount(_recipient), beneficiaries[_recipient].amountClaimed );\n', '  }\n', '\n', '  // /**\n', '  //  * @dev Calculates the amount that has already vested.\n', '  //  * @param _recipient The address which is being vested\n', '  //  */\n', '  // function vestedAmount(address _recipient) public view returns (uint256) {\n', '  //   if( block.timestamp < add(beneficiaries[_recipient].start, beneficiaries[_recipient].cliff) ) {\n', '  //     return 0;\n', '  //   } else if( block.timestamp >= add( beneficiaries[_recipient].start, beneficiaries[_recipient].duration) ) {\n', '  //     return beneficiaries[_recipient].totalAllocated;\n', '  //   } else {\n', '  //     return div( mul(beneficiaries[_recipient].totalAllocated, sub(block.timestamp, beneficiaries[_recipient].start)), beneficiaries[_recipient].duration );\n', '  //   }\n', '  // }\n', '\n', '    /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param _recipient The address which is being vested\n', '   */\n', '  function vestedAmount(address _recipient) public view returns (uint256) {\n', '    if( block.timestamp < beneficiaries[_recipient].cliff ) {\n', '      return 0;\n', '    }else if( block.timestamp >= add( beneficiaries[_recipient].cliff, (30 days)*beneficiaries[_recipient].periods ) ) {\n', '      return beneficiaries[_recipient].totalAllocated;\n', '    }else {\n', '      for(uint i = 0; i < beneficiaries[_recipient].periods; i++) {\n', '        if( block.timestamp >= add( beneficiaries[_recipient].cliff, (30 days)*i ) && block.timestamp < add( beneficiaries[_recipient].cliff, (30 days)*(i+1) ) ) {\n', '          return div( mul(i, beneficiaries[_recipient].totalAllocated), beneficiaries[_recipient].periods );\n', '        }\n', '      }\n', '    }\n', '  }\n', '}']