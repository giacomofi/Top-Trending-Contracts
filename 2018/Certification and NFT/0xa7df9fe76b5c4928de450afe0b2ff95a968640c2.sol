['pragma solidity ^0.4.17;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable()public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner)public onlyOwner {\n', '        require(newOwner != address(0));      \n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', '* @title ERC20Basic\n', '* @dev Simpler version of ERC20 interface\n', '* @dev https://github.com/ethereum/EIPs/issues/179\n', '*/\n', 'contract ERC20Basic is Ownable {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value)public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', '* @title ERC20 interface\n', '* @dev https://github.com/ethereum/EIPs/issues/20\n', '*/\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value)public returns(bool);\n', '    function approve(address spender, uint256 value)public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '    \n', '    function sub(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    function add(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    bool freeze = false;\n', '    \n', '    mapping(address => uint256) balances;\n', '    \n', '    uint endOfICO = 1527681600; // 05.30.2018 12:00\n', '    \n', '    /**\n', '    * @dev Sets the date of the ICO end.\n', '    * @param ICO_end The date of the ICO end.\n', '    */\n', '    function setEndOfICO(uint ICO_end) public onlyOwner {\n', '        endOfICO = ICO_end;\n', '    }\n', '    \n', '    /**\n', '    * @dev Throws if called before the end of ICO.\n', '    */\n', '    modifier restrictionOnUse() {\n', '        require(now > endOfICO);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '    * @dev Transfers tokens to a specified address.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public restrictionOnUse isNotFrozen returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Changes the value of freeze variable.\n', '    */\n', '    function freezeToken()public onlyOwner {\n', '        freeze = !freeze;\n', '    }\n', '    \n', '    /**\n', '    * @dev Throws if called when contract is frozen.\n', '    */\n', '    modifier isNotFrozen(){\n', '        require(!freeze);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the balance of.\n', '    */\n', '    function balanceOf(address _owner)public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    /**\n', '    * @dev Transfers tokens from one address to another.\n', '    * @param _from The address which you want to send tokens from.\n', '    * @param _to The address which you want to transfer to.\n', '    * @param _value The amount of tokens to be transfered.\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public restrictionOnUse isNotFrozen returns(bool) {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        var _allowance = allowed[_from][msg.sender];\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Approves the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public restrictionOnUse isNotFrozen returns (bool) {\n', '        require((_value > 0)&&(_value <= balances[msg.sender]));\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner The address which owns the funds.\n', '    * @param _spender The address which will spend the funds.\n', '    */\n', '    function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken {\n', '    \n', '    event Mint(address indexed to, uint256 amount);\n', '    \n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '    \n', '    /**\n', '    * @dev Throws if called when minting is finished.\n', '    */\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will recieve the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    */\n', '    function mint(address _to, uint256 _amount) internal canMint returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    */\n', '    function finishMinting() public onlyOwner returns (bool) {\n', '        mintingFinished = !mintingFinished;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is MintableToken {\n', '    \n', '    using SafeMath for uint;\n', '    \n', '    /**\n', '    * @dev Burns a specific amount of tokens.\n', '    * @param _value The amount of token to be burned.\n', '    */\n', '    function burn(uint _value) restrictionOnUse isNotFrozen public returns (bool success) {\n', '        require((_value > 0) && (_value <= balances[msg.sender]));\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', ' \n', '    /**\n', '    * @dev Burns a specific amount of tokens from another address.\n', '    * @param _value The amount of tokens to be burned.\n', '    * @param _from The address which you want to burn tokens from.\n', '    */\n', '    function burnFrom(address _from, uint _value) restrictionOnUse isNotFrozen public returns (bool success) {\n', '        require((balances[_from] > _value) && (_value <= allowed[_from][msg.sender]));\n', '        var _allowance = allowed[_from][msg.sender];\n', '        balances[_from] = balances[_from].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    event Burn(address indexed burner, uint indexed value);\n', '}\n', '\n', '/**\n', ' * @title SimpleTokenCoin\n', ' * @dev SimpleToken is a standard ERC20 token with some additional functionality\n', ' */\n', 'contract SimpleTokenCoin is BurnableToken {\n', '    \n', '    address public forBounty = 0xdd5Aea206449d610A9e0c45B6b3fdAc684e0c8bD;\n', '    address public forTeamCOT = 0x3FFeEcc08Dc94Fd5089A8C377a6e7Bf15F0D2f8d;\n', '    address public forTeamETH = 0x619E27C6BfEbc196BA048Fb79B397314cfA82d89;\n', '    address public forFund = 0x7b7c6d8ce28923e39611dD14A68DA6Af63c63FF7;\n', '    address public forLoyalty = 0x22152A186AaD84b0eaadAD00e3F19547C30CcB02;\n', '    \n', '    string public constant name = "CoinTour";\n', '    \n', '    string public constant symbol = "COT";\n', '    \n', '    uint32 public constant decimals = 8;\n', '    \n', '    address private contractAddress;\n', '    \n', '    /**\n', '    * @dev Sets the address of approveAndCall contract.\n', '    * @param _address The address of approveAndCall contract.\n', '    */\n', '    function setContractAddress (address _address) public onlyOwner {\n', '        contractAddress = _address;\n', '    }\n', '    \n', '    /**\n', '    * @dev The SimpleTokenCoin constructor mints tokens to four addresses.\n', '    */\n', '    function SimpleTokenCoin()public {\n', '        mint(forBounty, 4000000 * 10**8);\n', '        mint(forTeamCOT, 10000000 * 10**8); \n', '        mint(forFund, 10000000 * 10**8);\n', '        mint(forLoyalty, 2000000 * 10**8);\n', '    }\n', '    \n', '    /**\n', '    * @dev Function to send ETH from contract address to team ETH address.\n', '    */\n', '    function sendETHfromContract() public onlyOwner {\n', '        forTeamETH.transfer(this.balance);\n', '    }\n', '    \n', '    /**\n', '     * @dev Sends to multiple addresses using two arrays which\n', '     * include the address and the amount of tokens.\n', '     * @param users Array of addresses to send to.\n', '     * @param bonus Array of amount of tokens to send.\n', '     */\n', '    function multisend(address[] users, uint[] bonus) public {\n', '        for (uint i = 0; i < users.length; i++) {\n', '            transfer(users[i], bonus[i]);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev Token owner can approve for spender to execute another function.\n', '     * @param tokens Amount of tokens to execute function.\n', '     * @param data Additional data.\n', '     */\n', '    function approveAndCall(uint tokens, bytes data) public restrictionOnUse returns (bool success) {\n', '        approve(contractAddress, tokens);\n', '        ApproveAndCallFallBack(contractAddress).receiveApproval(msg.sender, tokens, data);\n', '        return true;\n', '    }\n', '}\n', '\n', 'interface ApproveAndCallFallBack { function receiveApproval(address from, uint256 tokens, bytes data) external; }\n', '\n', '/**\n', ' * @title Crowdsale \n', ' * @dev Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n', ' */\n', 'contract Crowdsale is SimpleTokenCoin {\n', '    \n', '    using SafeMath for uint;\n', '    \n', '    uint public startPreICO;\n', '    \n', '    uint public startICO;\n', '    \n', '    uint public periodPreICO;\n', '    \n', '    uint public firstPeriodOfICO;\n', '    \n', '    uint public secondPeriodOfICO;\n', '    \n', '    uint public thirdPeriodOfICO;\n', '\n', '    uint public hardcap;\n', '\n', '    uint public rate;\n', '    \n', '    uint public softcap;\n', '    \n', '    uint public maxTokensAmount;\n', '    \n', '    uint public availableTokensAmount;\n', '    \n', '    mapping(address => uint) ethBalance;\n', '    \n', '    /**\n', '    * @dev Data type to save bonus system&#39;s information.\n', '    */\n', '    struct BonusSystem {\n', '        //Period number\n', '        uint period;\n', '        // UNIX timestamp of period start\n', '        uint start;\n', '        // UNIX timestamp of period finish\n', '        uint end;\n', '        //Amount of tokens available per period\n', '        uint tokensPerPeriod;\n', '        //Sold tokens Amount\n', '        uint soldTokens;\n', '        // How many % tokens will add\n', '        uint bonus;\n', '    }\n', '    \n', '    BonusSystem[] public bonus;\n', '    \n', '    /**\n', '    * @dev Function to change bonus system.\n', '    * @param percentageOfTokens Percentage of tokens for each period.\n', '    * @param bonuses Percentage of bonus for each period.\n', '    */\n', '    function changeBonusSystem(uint[] percentageOfTokens, uint[] bonuses) public onlyOwner{\n', '        for (uint i = 0; i < bonus.length; i++) {\n', '            bonus[i].tokensPerPeriod = availableTokensAmount / 100 * percentageOfTokens[i];\n', '            bonus[i].bonus = bonuses[i];\n', '        }\n', '    }\n', '    \n', '    /**\n', '    * @dev Function to set bonus system.\n', '    * @param preICOtokens , firstPeriodTokens, secondPeriodTokens, thirdPeriodTokens Percentage of tokens for each period.\n', '    * @param preICObonus , firstPeriodBonus, secondPeriodBonus, thirdPeriodBonus Percentage of bonus for each period.\n', '    */\n', '    function setBonusSystem(uint preICOtokens, uint preICObonus, uint firstPeriodTokens, uint firstPeriodBonus, \n', '                            uint secondPeriodTokens, uint secondPeriodBonus, uint thirdPeriodTokens, uint thirdPeriodBonus) private {\n', '        bonus.push(BonusSystem(0, startPreICO, startPreICO + periodPreICO * 1 days, availableTokensAmount / 100 * preICOtokens, 0, preICObonus));\n', '        bonus.push(BonusSystem(1, startICO, startICO + firstPeriodOfICO * 1 days, availableTokensAmount / 100 * firstPeriodTokens, 0, firstPeriodBonus));\n', '        bonus.push(BonusSystem(2, startICO + firstPeriodOfICO * 1 days, startICO + (firstPeriodOfICO + secondPeriodOfICO) * 1 days, availableTokensAmount / 100 * secondPeriodTokens, 0, secondPeriodBonus));\n', '        bonus.push(BonusSystem(3, startICO + (firstPeriodOfICO + secondPeriodOfICO) * 1 days, startICO + (firstPeriodOfICO + secondPeriodOfICO + thirdPeriodOfICO) * 1 days, availableTokensAmount / 100 * thirdPeriodTokens, 0, thirdPeriodBonus));\n', '    }\n', '    \n', '    /**\n', '    * @dev Gets current bonus system.\n', '    */\n', '    function getCurrentBonusSystem() public constant returns (BonusSystem) {\n', '      for (uint i = 0; i < bonus.length; i++) {\n', '        if (bonus[i].start <= now && bonus[i].end >= now) {\n', '          return bonus[i];\n', '        }\n', '      }\n', '    }\n', '\n', '    /**\n', '    * @dev Sets values of periods.\n', '    * @param PreICO_start The value of pre ICO start.\n', '    * @param PreICO_period The duration of pre ICO period.\n', '    * @param ICO_firstPeriod , ICO_secondPeriod, ICO_thirdPeriod The duration of each period.\n', '    */\n', '    function setPeriods(uint PreICO_start, uint PreICO_period, uint ICO_start, uint ICO_firstPeriod, uint ICO_secondPeriod, uint ICO_thirdPeriod) public onlyOwner {\n', '        startPreICO = PreICO_start;\n', '        periodPreICO = PreICO_period;\n', '        startICO = ICO_start;\n', '        firstPeriodOfICO = ICO_firstPeriod;\n', '        secondPeriodOfICO = ICO_secondPeriod;\n', '        thirdPeriodOfICO = ICO_thirdPeriod;\n', '        bonus[0].start = PreICO_start;\n', '        bonus[0].end = PreICO_start + PreICO_period * 1 days;\n', '        bonus[1].start = ICO_start;\n', '        bonus[1].end = ICO_start + ICO_firstPeriod * 1 days;\n', '        bonus[2].start = bonus[1].end;\n', '        bonus[2].end = bonus[2].start + ICO_secondPeriod * 1 days;\n', '        bonus[3].start = bonus[2].end;\n', '        bonus[3].end = bonus[2].end + ICO_thirdPeriod * 1 days;\n', '    }\n', '    \n', '    /**\n', '    * @dev Sets the rate of COT.\n', '    */\n', '    function setRate (uint _rate) public onlyOwner {\n', '        rate = _rate * 10**8 ;\n', '    }\n', '    \n', '    /**\n', '    * @dev The Crowdsale constructor sets the first values to variables.\n', '    */\n', '    function Crowdsale() public{\n', '        rate = 16000 * 10**8 ;\n', '        startPreICO = 1522065600; // 03.26.2018 12:00\n', '        periodPreICO = 14;\n', '        startICO = 1525089600; // 04.30.2018 12:00\n', '        firstPeriodOfICO = secondPeriodOfICO = thirdPeriodOfICO = 10;\n', '        hardcap = 59694 * 10**17;\n', '        softcap = 400 * 10**18;\n', '        maxTokensAmount = 100000000 * 10**8;\n', '        availableTokensAmount = maxTokensAmount - totalSupply;\n', '        setBonusSystem(20, 40, 25, 25, 25, 15, 30, 0);\n', '    }\n', '    \n', '    /**\n', '    * @dev Throws if called when the period or tokens are over.\n', '    */\n', '    modifier isUnderPeriodLimit() {\n', '        require(getCurrentBonusSystem().start <= now && getCurrentBonusSystem().end >= now && getCurrentBonusSystem().tokensPerPeriod - getCurrentBonusSystem().soldTokens > 0);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens.\n', '    * @param _to The address that will recieve the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    */\n', '    function buyTokens(address _to, uint256 _amount) internal canMint isNotFrozen returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        bonus[getCurrentBonusSystem().period].soldTokens = getCurrentBonusSystem().soldTokens.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Refund &#39;msg.sender&#39; in the case the Token Sale didn&#39;t \n', '    * reach the minimum funding goal.\n', '    */\n', '    function refund() restrictionOnUse isNotFrozen public {\n', '        require(this.balance < softcap);\n', '        uint value = ethBalance[msg.sender]; \n', '        ethBalance[msg.sender] = 0; \n', '        msg.sender.transfer(value); \n', '    }\n', '    \n', '    /**\n', '    * @dev Сalculates the required amount of tokens to be minted. \n', '    */\n', '    function createTokens()private isUnderPeriodLimit isNotFrozen {\n', '        uint tokens = rate.mul(msg.value).div(1 ether);\n', '        uint bonusTokens = tokens / 100 * getCurrentBonusSystem().bonus;\n', '        tokens += bonusTokens;\n', '        if (msg.value < 10 finney || (tokens > getCurrentBonusSystem().tokensPerPeriod.sub(getCurrentBonusSystem().soldTokens))) {\n', '            msg.sender.transfer(msg.value);\n', '        }\n', '        else {\n', '            forTeamETH.transfer(msg.value);\n', '            buyTokens(msg.sender, tokens);\n', '            ethBalance[msg.sender] = ethBalance[msg.sender].add(msg.value);\n', '        }\n', '    }\n', '    \n', '    /**\n', '    * Called when ETH comes to the contract.\n', '    */\n', '    function() external payable {\n', '        createTokens();\n', '    }\n', '}']
['pragma solidity ^0.4.17;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable()public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner)public onlyOwner {\n', '        require(newOwner != address(0));      \n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', '* @title ERC20Basic\n', '* @dev Simpler version of ERC20 interface\n', '* @dev https://github.com/ethereum/EIPs/issues/179\n', '*/\n', 'contract ERC20Basic is Ownable {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value)public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', '* @title ERC20 interface\n', '* @dev https://github.com/ethereum/EIPs/issues/20\n', '*/\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value)public returns(bool);\n', '    function approve(address spender, uint256 value)public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '    \n', '    function sub(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    function add(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    bool freeze = false;\n', '    \n', '    mapping(address => uint256) balances;\n', '    \n', '    uint endOfICO = 1527681600; // 05.30.2018 12:00\n', '    \n', '    /**\n', '    * @dev Sets the date of the ICO end.\n', '    * @param ICO_end The date of the ICO end.\n', '    */\n', '    function setEndOfICO(uint ICO_end) public onlyOwner {\n', '        endOfICO = ICO_end;\n', '    }\n', '    \n', '    /**\n', '    * @dev Throws if called before the end of ICO.\n', '    */\n', '    modifier restrictionOnUse() {\n', '        require(now > endOfICO);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '    * @dev Transfers tokens to a specified address.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public restrictionOnUse isNotFrozen returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Changes the value of freeze variable.\n', '    */\n', '    function freezeToken()public onlyOwner {\n', '        freeze = !freeze;\n', '    }\n', '    \n', '    /**\n', '    * @dev Throws if called when contract is frozen.\n', '    */\n', '    modifier isNotFrozen(){\n', '        require(!freeze);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the balance of.\n', '    */\n', '    function balanceOf(address _owner)public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    /**\n', '    * @dev Transfers tokens from one address to another.\n', '    * @param _from The address which you want to send tokens from.\n', '    * @param _to The address which you want to transfer to.\n', '    * @param _value The amount of tokens to be transfered.\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public restrictionOnUse isNotFrozen returns(bool) {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        var _allowance = allowed[_from][msg.sender];\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Approves the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public restrictionOnUse isNotFrozen returns (bool) {\n', '        require((_value > 0)&&(_value <= balances[msg.sender]));\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner The address which owns the funds.\n', '    * @param _spender The address which will spend the funds.\n', '    */\n', '    function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken {\n', '    \n', '    event Mint(address indexed to, uint256 amount);\n', '    \n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '    \n', '    /**\n', '    * @dev Throws if called when minting is finished.\n', '    */\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will recieve the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    */\n', '    function mint(address _to, uint256 _amount) internal canMint returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    */\n', '    function finishMinting() public onlyOwner returns (bool) {\n', '        mintingFinished = !mintingFinished;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is MintableToken {\n', '    \n', '    using SafeMath for uint;\n', '    \n', '    /**\n', '    * @dev Burns a specific amount of tokens.\n', '    * @param _value The amount of token to be burned.\n', '    */\n', '    function burn(uint _value) restrictionOnUse isNotFrozen public returns (bool success) {\n', '        require((_value > 0) && (_value <= balances[msg.sender]));\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', ' \n', '    /**\n', '    * @dev Burns a specific amount of tokens from another address.\n', '    * @param _value The amount of tokens to be burned.\n', '    * @param _from The address which you want to burn tokens from.\n', '    */\n', '    function burnFrom(address _from, uint _value) restrictionOnUse isNotFrozen public returns (bool success) {\n', '        require((balances[_from] > _value) && (_value <= allowed[_from][msg.sender]));\n', '        var _allowance = allowed[_from][msg.sender];\n', '        balances[_from] = balances[_from].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    event Burn(address indexed burner, uint indexed value);\n', '}\n', '\n', '/**\n', ' * @title SimpleTokenCoin\n', ' * @dev SimpleToken is a standard ERC20 token with some additional functionality\n', ' */\n', 'contract SimpleTokenCoin is BurnableToken {\n', '    \n', '    address public forBounty = 0xdd5Aea206449d610A9e0c45B6b3fdAc684e0c8bD;\n', '    address public forTeamCOT = 0x3FFeEcc08Dc94Fd5089A8C377a6e7Bf15F0D2f8d;\n', '    address public forTeamETH = 0x619E27C6BfEbc196BA048Fb79B397314cfA82d89;\n', '    address public forFund = 0x7b7c6d8ce28923e39611dD14A68DA6Af63c63FF7;\n', '    address public forLoyalty = 0x22152A186AaD84b0eaadAD00e3F19547C30CcB02;\n', '    \n', '    string public constant name = "CoinTour";\n', '    \n', '    string public constant symbol = "COT";\n', '    \n', '    uint32 public constant decimals = 8;\n', '    \n', '    address private contractAddress;\n', '    \n', '    /**\n', '    * @dev Sets the address of approveAndCall contract.\n', '    * @param _address The address of approveAndCall contract.\n', '    */\n', '    function setContractAddress (address _address) public onlyOwner {\n', '        contractAddress = _address;\n', '    }\n', '    \n', '    /**\n', '    * @dev The SimpleTokenCoin constructor mints tokens to four addresses.\n', '    */\n', '    function SimpleTokenCoin()public {\n', '        mint(forBounty, 4000000 * 10**8);\n', '        mint(forTeamCOT, 10000000 * 10**8); \n', '        mint(forFund, 10000000 * 10**8);\n', '        mint(forLoyalty, 2000000 * 10**8);\n', '    }\n', '    \n', '    /**\n', '    * @dev Function to send ETH from contract address to team ETH address.\n', '    */\n', '    function sendETHfromContract() public onlyOwner {\n', '        forTeamETH.transfer(this.balance);\n', '    }\n', '    \n', '    /**\n', '     * @dev Sends to multiple addresses using two arrays which\n', '     * include the address and the amount of tokens.\n', '     * @param users Array of addresses to send to.\n', '     * @param bonus Array of amount of tokens to send.\n', '     */\n', '    function multisend(address[] users, uint[] bonus) public {\n', '        for (uint i = 0; i < users.length; i++) {\n', '            transfer(users[i], bonus[i]);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev Token owner can approve for spender to execute another function.\n', '     * @param tokens Amount of tokens to execute function.\n', '     * @param data Additional data.\n', '     */\n', '    function approveAndCall(uint tokens, bytes data) public restrictionOnUse returns (bool success) {\n', '        approve(contractAddress, tokens);\n', '        ApproveAndCallFallBack(contractAddress).receiveApproval(msg.sender, tokens, data);\n', '        return true;\n', '    }\n', '}\n', '\n', 'interface ApproveAndCallFallBack { function receiveApproval(address from, uint256 tokens, bytes data) external; }\n', '\n', '/**\n', ' * @title Crowdsale \n', ' * @dev Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n', ' */\n', 'contract Crowdsale is SimpleTokenCoin {\n', '    \n', '    using SafeMath for uint;\n', '    \n', '    uint public startPreICO;\n', '    \n', '    uint public startICO;\n', '    \n', '    uint public periodPreICO;\n', '    \n', '    uint public firstPeriodOfICO;\n', '    \n', '    uint public secondPeriodOfICO;\n', '    \n', '    uint public thirdPeriodOfICO;\n', '\n', '    uint public hardcap;\n', '\n', '    uint public rate;\n', '    \n', '    uint public softcap;\n', '    \n', '    uint public maxTokensAmount;\n', '    \n', '    uint public availableTokensAmount;\n', '    \n', '    mapping(address => uint) ethBalance;\n', '    \n', '    /**\n', "    * @dev Data type to save bonus system's information.\n", '    */\n', '    struct BonusSystem {\n', '        //Period number\n', '        uint period;\n', '        // UNIX timestamp of period start\n', '        uint start;\n', '        // UNIX timestamp of period finish\n', '        uint end;\n', '        //Amount of tokens available per period\n', '        uint tokensPerPeriod;\n', '        //Sold tokens Amount\n', '        uint soldTokens;\n', '        // How many % tokens will add\n', '        uint bonus;\n', '    }\n', '    \n', '    BonusSystem[] public bonus;\n', '    \n', '    /**\n', '    * @dev Function to change bonus system.\n', '    * @param percentageOfTokens Percentage of tokens for each period.\n', '    * @param bonuses Percentage of bonus for each period.\n', '    */\n', '    function changeBonusSystem(uint[] percentageOfTokens, uint[] bonuses) public onlyOwner{\n', '        for (uint i = 0; i < bonus.length; i++) {\n', '            bonus[i].tokensPerPeriod = availableTokensAmount / 100 * percentageOfTokens[i];\n', '            bonus[i].bonus = bonuses[i];\n', '        }\n', '    }\n', '    \n', '    /**\n', '    * @dev Function to set bonus system.\n', '    * @param preICOtokens , firstPeriodTokens, secondPeriodTokens, thirdPeriodTokens Percentage of tokens for each period.\n', '    * @param preICObonus , firstPeriodBonus, secondPeriodBonus, thirdPeriodBonus Percentage of bonus for each period.\n', '    */\n', '    function setBonusSystem(uint preICOtokens, uint preICObonus, uint firstPeriodTokens, uint firstPeriodBonus, \n', '                            uint secondPeriodTokens, uint secondPeriodBonus, uint thirdPeriodTokens, uint thirdPeriodBonus) private {\n', '        bonus.push(BonusSystem(0, startPreICO, startPreICO + periodPreICO * 1 days, availableTokensAmount / 100 * preICOtokens, 0, preICObonus));\n', '        bonus.push(BonusSystem(1, startICO, startICO + firstPeriodOfICO * 1 days, availableTokensAmount / 100 * firstPeriodTokens, 0, firstPeriodBonus));\n', '        bonus.push(BonusSystem(2, startICO + firstPeriodOfICO * 1 days, startICO + (firstPeriodOfICO + secondPeriodOfICO) * 1 days, availableTokensAmount / 100 * secondPeriodTokens, 0, secondPeriodBonus));\n', '        bonus.push(BonusSystem(3, startICO + (firstPeriodOfICO + secondPeriodOfICO) * 1 days, startICO + (firstPeriodOfICO + secondPeriodOfICO + thirdPeriodOfICO) * 1 days, availableTokensAmount / 100 * thirdPeriodTokens, 0, thirdPeriodBonus));\n', '    }\n', '    \n', '    /**\n', '    * @dev Gets current bonus system.\n', '    */\n', '    function getCurrentBonusSystem() public constant returns (BonusSystem) {\n', '      for (uint i = 0; i < bonus.length; i++) {\n', '        if (bonus[i].start <= now && bonus[i].end >= now) {\n', '          return bonus[i];\n', '        }\n', '      }\n', '    }\n', '\n', '    /**\n', '    * @dev Sets values of periods.\n', '    * @param PreICO_start The value of pre ICO start.\n', '    * @param PreICO_period The duration of pre ICO period.\n', '    * @param ICO_firstPeriod , ICO_secondPeriod, ICO_thirdPeriod The duration of each period.\n', '    */\n', '    function setPeriods(uint PreICO_start, uint PreICO_period, uint ICO_start, uint ICO_firstPeriod, uint ICO_secondPeriod, uint ICO_thirdPeriod) public onlyOwner {\n', '        startPreICO = PreICO_start;\n', '        periodPreICO = PreICO_period;\n', '        startICO = ICO_start;\n', '        firstPeriodOfICO = ICO_firstPeriod;\n', '        secondPeriodOfICO = ICO_secondPeriod;\n', '        thirdPeriodOfICO = ICO_thirdPeriod;\n', '        bonus[0].start = PreICO_start;\n', '        bonus[0].end = PreICO_start + PreICO_period * 1 days;\n', '        bonus[1].start = ICO_start;\n', '        bonus[1].end = ICO_start + ICO_firstPeriod * 1 days;\n', '        bonus[2].start = bonus[1].end;\n', '        bonus[2].end = bonus[2].start + ICO_secondPeriod * 1 days;\n', '        bonus[3].start = bonus[2].end;\n', '        bonus[3].end = bonus[2].end + ICO_thirdPeriod * 1 days;\n', '    }\n', '    \n', '    /**\n', '    * @dev Sets the rate of COT.\n', '    */\n', '    function setRate (uint _rate) public onlyOwner {\n', '        rate = _rate * 10**8 ;\n', '    }\n', '    \n', '    /**\n', '    * @dev The Crowdsale constructor sets the first values to variables.\n', '    */\n', '    function Crowdsale() public{\n', '        rate = 16000 * 10**8 ;\n', '        startPreICO = 1522065600; // 03.26.2018 12:00\n', '        periodPreICO = 14;\n', '        startICO = 1525089600; // 04.30.2018 12:00\n', '        firstPeriodOfICO = secondPeriodOfICO = thirdPeriodOfICO = 10;\n', '        hardcap = 59694 * 10**17;\n', '        softcap = 400 * 10**18;\n', '        maxTokensAmount = 100000000 * 10**8;\n', '        availableTokensAmount = maxTokensAmount - totalSupply;\n', '        setBonusSystem(20, 40, 25, 25, 25, 15, 30, 0);\n', '    }\n', '    \n', '    /**\n', '    * @dev Throws if called when the period or tokens are over.\n', '    */\n', '    modifier isUnderPeriodLimit() {\n', '        require(getCurrentBonusSystem().start <= now && getCurrentBonusSystem().end >= now && getCurrentBonusSystem().tokensPerPeriod - getCurrentBonusSystem().soldTokens > 0);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens.\n', '    * @param _to The address that will recieve the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    */\n', '    function buyTokens(address _to, uint256 _amount) internal canMint isNotFrozen returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        bonus[getCurrentBonusSystem().period].soldTokens = getCurrentBonusSystem().soldTokens.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', "    * @dev Refund 'msg.sender' in the case the Token Sale didn't \n", '    * reach the minimum funding goal.\n', '    */\n', '    function refund() restrictionOnUse isNotFrozen public {\n', '        require(this.balance < softcap);\n', '        uint value = ethBalance[msg.sender]; \n', '        ethBalance[msg.sender] = 0; \n', '        msg.sender.transfer(value); \n', '    }\n', '    \n', '    /**\n', '    * @dev Сalculates the required amount of tokens to be minted. \n', '    */\n', '    function createTokens()private isUnderPeriodLimit isNotFrozen {\n', '        uint tokens = rate.mul(msg.value).div(1 ether);\n', '        uint bonusTokens = tokens / 100 * getCurrentBonusSystem().bonus;\n', '        tokens += bonusTokens;\n', '        if (msg.value < 10 finney || (tokens > getCurrentBonusSystem().tokensPerPeriod.sub(getCurrentBonusSystem().soldTokens))) {\n', '            msg.sender.transfer(msg.value);\n', '        }\n', '        else {\n', '            forTeamETH.transfer(msg.value);\n', '            buyTokens(msg.sender, tokens);\n', '            ethBalance[msg.sender] = ethBalance[msg.sender].add(msg.value);\n', '        }\n', '    }\n', '    \n', '    /**\n', '    * Called when ETH comes to the contract.\n', '    */\n', '    function() external payable {\n', '        createTokens();\n', '    }\n', '}']
