['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '    function allowance(address _owner, address _spender) external view returns (uint256);\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '    function approve(address _spender, uint256 _value) external returns (bool);\n', '    function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool);\n', '    function increaseApproval(address _spender, uint _addedValue) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Interface that every module contract should implement\n', ' */\n', 'interface IModule {\n', '\n', '    /**\n', '     * @notice This function returns the signature of configure function\n', '     */\n', '    function getInitFunction() external pure returns (bytes4);\n', '\n', '    /**\n', '     * @notice Return the permission flags that are associated with a module\n', '     */\n', '    function getPermissions() external view returns(bytes32[]);\n', '\n', '    /**\n', '     * @notice Used to withdraw the fee by the factory owner\n', '     */\n', '    function takeFee(uint256 _amount) external returns(bool);\n', '\n', '}\n', '\n', '/**\n', ' * @title Interface that every module factory contract should implement\n', ' */\n', 'interface IModuleFactory {\n', '\n', '    event ChangeFactorySetupFee(uint256 _oldSetupCost, uint256 _newSetupCost, address _moduleFactory);\n', '    event ChangeFactoryUsageFee(uint256 _oldUsageCost, uint256 _newUsageCost, address _moduleFactory);\n', '    event ChangeFactorySubscriptionFee(uint256 _oldSubscriptionCost, uint256 _newMonthlySubscriptionCost, address _moduleFactory);\n', '    event GenerateModuleFromFactory(\n', '        address _module,\n', '        bytes32 indexed _moduleName,\n', '        address indexed _moduleFactory,\n', '        address _creator,\n', '        uint256 _setupCost,\n', '        uint256 _timestamp\n', '    );\n', '    event ChangeSTVersionBound(string _boundType, uint8 _major, uint8 _minor, uint8 _patch);\n', '\n', '    //Should create an instance of the Module, or throw\n', '    function deploy(bytes _data) external returns(address);\n', '\n', '    /**\n', '     * @notice Type of the Module factory\n', '     */\n', '    function getTypes() external view returns(uint8[]);\n', '\n', '    /**\n', '     * @notice Get the name of the Module\n', '     */\n', '    function getName() external view returns(bytes32);\n', '\n', '    /**\n', '     * @notice Returns the instructions associated with the module\n', '     */\n', '    function getInstructions() external view returns (string);\n', '\n', '    /**\n', '     * @notice Get the tags related to the module factory\n', '     */\n', '    function getTags() external view returns (bytes32[]);\n', '\n', '    /**\n', '     * @notice Used to change the setup fee\n', '     * @param _newSetupCost New setup fee\n', '     */\n', '    function changeFactorySetupFee(uint256 _newSetupCost) external;\n', '\n', '    /**\n', '     * @notice Used to change the usage fee\n', '     * @param _newUsageCost New usage fee\n', '     */\n', '    function changeFactoryUsageFee(uint256 _newUsageCost) external;\n', '\n', '    /**\n', '     * @notice Used to change the subscription fee\n', '     * @param _newSubscriptionCost New subscription fee\n', '     */\n', '    function changeFactorySubscriptionFee(uint256 _newSubscriptionCost) external;\n', '\n', '    /**\n', '     * @notice Function use to change the lower and upper bound of the compatible version st\n', '     * @param _boundType Type of bound\n', '     * @param _newVersion New version array\n', '     */\n', '    function changeSTVersionBounds(string _boundType, uint8[] _newVersion) external;\n', '\n', '   /**\n', '     * @notice Get the setup cost of the module\n', '     */\n', '    function getSetupCost() external view returns (uint256);\n', '\n', '    /**\n', '     * @notice Used to get the lower bound\n', '     * @return Lower bound\n', '     */\n', '    function getLowerSTVersionBounds() external view returns(uint8[]);\n', '\n', '     /**\n', '     * @notice Used to get the upper bound\n', '     * @return Upper bound\n', '     */\n', '    function getUpperSTVersionBounds() external view returns(uint8[]);\n', '\n', '}\n', '\n', '/**\n', ' * @title Interface for the Polymath Module Registry contract\n', ' */\n', 'interface IModuleRegistry {\n', '\n', '    /**\n', '     * @notice Called by a security token to notify the registry it is using a module\n', '     * @param _moduleFactory is the address of the relevant module factory\n', '     */\n', '    function useModule(address _moduleFactory) external;\n', '\n', '    /**\n', '     * @notice Called by the ModuleFactory owner to register new modules for SecurityToken to use\n', '     * @param _moduleFactory is the address of the module factory to be registered\n', '     */\n', '    function registerModule(address _moduleFactory) external;\n', '\n', '    /**\n', '     * @notice Called by the ModuleFactory owner or registry curator to delete a ModuleFactory\n', '     * @param _moduleFactory is the address of the module factory to be deleted\n', '     */\n', '    function removeModule(address _moduleFactory) external;\n', '\n', '    /**\n', '    * @notice Called by Polymath to verify modules for SecurityToken to use.\n', '    * @notice A module can not be used by an ST unless first approved/verified by Polymath\n', '    * @notice (The only exception to this is that the author of the module is the owner of the ST - Only if enabled by the FeatureRegistry)\n', '    * @param _moduleFactory is the address of the module factory to be registered\n', '    */\n', '    function verifyModule(address _moduleFactory, bool _verified) external;\n', '\n', '    /**\n', '     * @notice Used to get the reputation of a Module Factory\n', '     * @param _factoryAddress address of the Module Factory\n', "     * @return address array which has the list of securityToken's uses that module factory\n", '     */\n', '    function getReputationByFactory(address _factoryAddress) external view returns(address[]);\n', '\n', '    /**\n', '     * @notice Returns all the tags related to the a module type which are valid for the given token\n', '     * @param _moduleType is the module type\n', '     * @param _securityToken is the token\n', '     * @return list of tags\n', '     * @return corresponding list of module factories\n', '     */\n', '    function getTagsByTypeAndToken(uint8 _moduleType, address _securityToken) external view returns(bytes32[], address[]);\n', '\n', '    /**\n', '     * @notice Returns all the tags related to the a module type which are valid for the given token\n', '     * @param _moduleType is the module type\n', '     * @return list of tags\n', '     * @return corresponding list of module factories\n', '     */\n', '    function getTagsByType(uint8 _moduleType) external view returns(bytes32[], address[]);\n', '\n', '    /**\n', '     * @notice Returns the list of addresses of Module Factory of a particular type\n', '     * @param _moduleType Type of Module\n', '     * @return address array that contains the list of addresses of module factory contracts.\n', '     */\n', '    function getModulesByType(uint8 _moduleType) external view returns(address[]);\n', '\n', '    /**\n', '     * @notice Returns the list of available Module factory addresses of a particular type for a given token.\n', '     * @param _moduleType is the module type to look for\n', '     * @param _securityToken is the address of SecurityToken\n', '     * @return address array that contains the list of available addresses of module factory contracts.\n', '     */\n', '    function getModulesByTypeAndToken(uint8 _moduleType, address _securityToken) external view returns (address[]);\n', '\n', '    /**\n', '     * @notice Use to get the latest contract address of the regstries\n', '     */\n', '    function updateFromRegistry() external;\n', '\n', '    /**\n', '     * @notice Get the owner of the contract\n', '     * @return address owner\n', '     */\n', '    function owner() external view returns(address);\n', '\n', '    /**\n', '     * @notice Check whether the contract operations is paused or not\n', '     * @return bool \n', '     */\n', '    function isPaused() external view returns(bool);\n', '\n', '}\n', '\n', '/**\n', ' * @title Interface for managing polymath feature switches\n', ' */\n', 'interface IFeatureRegistry {\n', '\n', '    /**\n', '     * @notice Get the status of a feature\n', '     * @param _nameKey is the key for the feature status mapping\n', '     * @return bool\n', '     */\n', '    function getFeatureStatus(string _nameKey) external view returns(bool);\n', '\n', '}\n', '\n', '/**\n', ' * @title Utility contract to allow pausing and unpausing of certain functions\n', ' */\n', 'contract Pausable {\n', '\n', '    event Pause(uint256 _timestammp);\n', '    event Unpause(uint256 _timestamp);\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '    * @notice Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused, "Contract is paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused, "Contract is not paused");\n', '        _;\n', '    }\n', '\n', '   /**\n', '    * @notice Called by the owner to pause, triggers stopped state\n', '    */\n', '    function _pause() internal whenNotPaused {\n', '        paused = true;\n', '        /*solium-disable-next-line security/no-block-members*/\n', '        emit Pause(now);\n', '    }\n', '\n', '    /**\n', '    * @notice Called by the owner to unpause, returns to normal state\n', '    */\n', '    function _unpause() internal whenPaused {\n', '        paused = false;\n', '        /*solium-disable-next-line security/no-block-members*/\n', '        emit Unpause(now);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Interface for all security tokens\n', ' */\n', 'interface ISecurityToken {\n', '\n', '    // Standard ERC20 interface\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '    function allowance(address _owner, address _spender) external view returns (uint256);\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '    function approve(address _spender, uint256 _value) external returns (bool);\n', '    function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool);\n', '    function increaseApproval(address _spender, uint _addedValue) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    //transfer, transferFrom must respect the result of verifyTransfer\n', '    function verifyTransfer(address _from, address _to, uint256 _value) external returns (bool success);\n', '\n', '    /**\n', '     * @notice Mints new tokens and assigns them to the target _investor.\n', "     * Can only be called by the STO attached to the token (Or by the ST owner if there's no STO attached yet)\n", '     * @param _investor Address the tokens will be minted to\n', '     * @param _value is the amount of tokens that will be minted to the investor\n', '     */\n', '    function mint(address _investor, uint256 _value) external returns (bool success);\n', '\n', '    /**\n', '     * @notice Mints new tokens and assigns them to the target _investor.\n', "     * Can only be called by the STO attached to the token (Or by the ST owner if there's no STO attached yet)\n", '     * @param _investor Address the tokens will be minted to\n', '     * @param _value is The amount of tokens that will be minted to the investor\n', '     * @param _data Data to indicate validation\n', '     */\n', '    function mintWithData(address _investor, uint256 _value, bytes _data) external returns (bool success);\n', '\n', '    /**\n', '     * @notice Used to burn the securityToken on behalf of someone else\n', '     * @param _from Address for whom to burn tokens\n', '     * @param _value No. of tokens to be burned\n', '     * @param _data Data to indicate validation\n', '     */\n', '    function burnFromWithData(address _from, uint256 _value, bytes _data) external;\n', '\n', '    /**\n', '     * @notice Used to burn the securityToken\n', '     * @param _value No. of tokens to be burned\n', '     * @param _data Data to indicate validation\n', '     */\n', '    function burnWithData(uint256 _value, bytes _data) external;\n', '\n', '    event Minted(address indexed _to, uint256 _value);\n', '    event Burnt(address indexed _burner, uint256 _value);\n', '\n', '    // Permissions this to a Permission module, which has a key of 1\n', '    // If no Permission return false - note that IModule withPerm will allow ST owner all permissions anyway\n', '    // this allows individual modules to override this logic if needed (to not allow ST owner all permissions)\n', '    function checkPermission(address _delegate, address _module, bytes32 _perm) external view returns (bool);\n', '\n', '    /**\n', '     * @notice Returns module list for a module type\n', '     * @param _module Address of the module\n', '     * @return bytes32 Name\n', '     * @return address Module address\n', '     * @return address Module factory address\n', '     * @return bool Module archived\n', '     * @return uint8 Module type\n', '     * @return uint256 Module index\n', '     * @return uint256 Name index\n', '\n', '     */\n', '    function getModule(address _module) external view returns(bytes32, address, address, bool, uint8, uint256, uint256);\n', '\n', '    /**\n', '     * @notice Returns module list for a module name\n', '     * @param _name Name of the module\n', '     * @return address[] List of modules with this name\n', '     */\n', '    function getModulesByName(bytes32 _name) external view returns (address[]);\n', '\n', '    /**\n', '     * @notice Returns module list for a module type\n', '     * @param _type Type of the module\n', '     * @return address[] List of modules with this type\n', '     */\n', '    function getModulesByType(uint8 _type) external view returns (address[]);\n', '\n', '    /**\n', '     * @notice Queries totalSupply at a specified checkpoint\n', '     * @param _checkpointId Checkpoint ID to query as of\n', '     */\n', '    function totalSupplyAt(uint256 _checkpointId) external view returns (uint256);\n', '\n', '    /**\n', '     * @notice Queries balance at a specified checkpoint\n', '     * @param _investor Investor to query balance for\n', '     * @param _checkpointId Checkpoint ID to query as of\n', '     */\n', '    function balanceOfAt(address _investor, uint256 _checkpointId) external view returns (uint256);\n', '\n', '    /**\n', '     * @notice Creates a checkpoint that can be used to query historical balances / totalSuppy\n', '     */\n', '    function createCheckpoint() external returns (uint256);\n', '\n', '    /**\n', '     * @notice Gets length of investors array\n', '     * NB - this length may differ from investorCount if the list has not been pruned of zero-balance investors\n', '     * @return Length\n', '     */\n', '    function getInvestors() external view returns (address[]);\n', '\n', '    /**\n', '     * @notice returns an array of investors at a given checkpoint\n', '     * NB - this length may differ from investorCount as it contains all investors that ever held tokens\n', '     * @param _checkpointId Checkpoint id at which investor list is to be populated\n', '     * @return list of investors\n', '     */\n', '    function getInvestorsAt(uint256 _checkpointId) external view returns(address[]);\n', '\n', '    /**\n', '     * @notice generates subset of investors\n', '     * NB - can be used in batches if investor list is large\n', '     * @param _start Position of investor to start iteration from\n', '     * @param _end Position of investor to stop iteration at\n', '     * @return list of investors\n', '     */\n', '    function iterateInvestors(uint256 _start, uint256 _end) external view returns(address[]);\n', '    \n', '    /**\n', '     * @notice Gets current checkpoint ID\n', '     * @return Id\n', '     */\n', '    function currentCheckpointId() external view returns (uint256);\n', '\n', '    /**\n', '    * @notice Gets an investor at a particular index\n', '    * @param _index Index to return address from\n', '    * @return Investor address\n', '    */\n', '    function investors(uint256 _index) external view returns (address);\n', '\n', '   /**\n', '    * @notice Allows the owner to withdraw unspent POLY stored by them on the ST or any ERC20 token.\n', '    * @dev Owner can transfer POLY to the ST which will be used to pay for modules that require a POLY fee.\n', '    * @param _tokenContract Address of the ERC20Basic compliance token\n', '    * @param _value Amount of POLY to withdraw\n', '    */\n', '    function withdrawERC20(address _tokenContract, uint256 _value) external;\n', '\n', '    /**\n', '    * @notice Allows owner to approve more POLY to one of the modules\n', '    * @param _module Module address\n', '    * @param _budget New budget\n', '    */\n', '    function changeModuleBudget(address _module, uint256 _budget) external;\n', '\n', '    /**\n', '     * @notice Changes the tokenDetails\n', '     * @param _newTokenDetails New token details\n', '     */\n', '    function updateTokenDetails(string _newTokenDetails) external;\n', '\n', '    /**\n', '    * @notice Allows the owner to change token granularity\n', '    * @param _granularity Granularity level of the token\n', '    */\n', '    function changeGranularity(uint256 _granularity) external;\n', '\n', '    /**\n', '    * @notice Removes addresses with zero balances from the investors list\n', '    * @param _start Index in investors list at which to start removing zero balances\n', '    * @param _iters Max number of iterations of the for loop\n', '    * NB - pruning this list will mean you may not be able to iterate over investors on-chain as of a historical checkpoint\n', '    */\n', '    function pruneInvestors(uint256 _start, uint256 _iters) external;\n', '\n', '    /**\n', '     * @notice Freezes all the transfers\n', '     */\n', '    function freezeTransfers() external;\n', '\n', '    /**\n', '     * @notice Un-freezes all the transfers\n', '     */\n', '    function unfreezeTransfers() external;\n', '\n', '    /**\n', '     * @notice Ends token minting period permanently\n', '     */\n', '    function freezeMinting() external;\n', '\n', '    /**\n', '     * @notice Mints new tokens and assigns them to the target investors.\n', '     * Can only be called by the STO attached to the token or by the Issuer (Security Token contract owner)\n', '     * @param _investors A list of addresses to whom the minted tokens will be delivered\n', '     * @param _values A list of the amount of tokens to mint to corresponding addresses from _investor[] list\n', '     * @return Success\n', '     */\n', '    function mintMulti(address[] _investors, uint256[] _values) external returns (bool success);\n', '\n', '    /**\n', '     * @notice Function used to attach a module to the security token\n', '     * @dev  E.G.: On deployment (through the STR) ST gets a TransferManager module attached to it\n', '     * @dev to control restrictions on transfers.\n', '     * @dev You are allowed to add a new moduleType if:\n', '     * @dev - there is no existing module of that type yet added\n', '     * @dev - the last member of the module list is replacable\n', '     * @param _moduleFactory is the address of the module factory to be added\n', '     * @param _data is data packed into bytes used to further configure the module (See STO usage)\n', '     * @param _maxCost max amount of POLY willing to pay to module. (WIP)\n', '     */\n', '    function addModule(\n', '        address _moduleFactory,\n', '        bytes _data,\n', '        uint256 _maxCost,\n', '        uint256 _budget\n', '    ) external;\n', '\n', '    /**\n', '    * @notice Archives a module attached to the SecurityToken\n', '    * @param _module address of module to archive\n', '    */\n', '    function archiveModule(address _module) external;\n', '\n', '    /**\n', '    * @notice Unarchives a module attached to the SecurityToken\n', '    * @param _module address of module to unarchive\n', '    */\n', '    function unarchiveModule(address _module) external;\n', '\n', '    /**\n', '    * @notice Removes a module attached to the SecurityToken\n', '    * @param _module address of module to archive\n', '    */\n', '    function removeModule(address _module) external;\n', '\n', '    /**\n', '     * @notice Used by the issuer to set the controller addresses\n', '     * @param _controller address of the controller\n', '     */\n', '    function setController(address _controller) external;\n', '\n', '    /**\n', '     * @notice Used by a controller to execute a forced transfer\n', '     * @param _from address from which to take tokens\n', '     * @param _to address where to send tokens\n', '     * @param _value amount of tokens to transfer\n', '     * @param _data data to indicate validation\n', '     * @param _log data attached to the transfer by controller to emit in event\n', '     */\n', '    function forceTransfer(address _from, address _to, uint256 _value, bytes _data, bytes _log) external;\n', '\n', '    /**\n', '     * @notice Used by a controller to execute a foced burn\n', '     * @param _from address from which to take tokens\n', '     * @param _value amount of tokens to transfer\n', '     * @param _data data to indicate validation\n', '     * @param _log data attached to the transfer by controller to emit in event\n', '     */\n', '    function forceBurn(address _from, uint256 _value, bytes _data, bytes _log) external;\n', '\n', '    /**\n', '     * @notice Used by the issuer to permanently disable controller functionality\n', '     * @dev enabled via feature switch "disableControllerAllowed"\n', '     */\n', '     function disableController() external;\n', '\n', '     /**\n', '     * @notice Used to get the version of the securityToken\n', '     */\n', '     function getVersion() external view returns(uint8[]);\n', '\n', '     /**\n', '     * @notice Gets the investor count\n', '     */\n', '     function getInvestorCount() external view returns(uint256);\n', '\n', '     /**\n', '      * @notice Overloaded version of the transfer function\n', '      * @param _to receiver of transfer\n', '      * @param _value value of transfer\n', '      * @param _data data to indicate validation\n', '      * @return bool success\n', '      */\n', '     function transferWithData(address _to, uint256 _value, bytes _data) external returns (bool success);\n', '\n', '     /**\n', '      * @notice Overloaded version of the transferFrom function\n', '      * @param _from sender of transfer\n', '      * @param _to receiver of transfer\n', '      * @param _value value of transfer\n', '      * @param _data data to indicate validation\n', '      * @return bool success\n', '      */\n', '     function transferFromWithData(address _from, address _to, uint256 _value, bytes _data) external returns(bool);\n', '\n', '     /**\n', '      * @notice Provides the granularity of the token\n', '      * @return uint256\n', '      */\n', '     function granularity() external view returns(uint256);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Interface that any module contract should implement\n', ' * @notice Contract is abstract\n', ' */\n', 'contract Module is IModule {\n', '\n', '    address public factory;\n', '\n', '    address public securityToken;\n', '\n', '    bytes32 public constant FEE_ADMIN = "FEE_ADMIN";\n', '\n', '    IERC20 public polyToken;\n', '\n', '    /**\n', '     * @notice Constructor\n', '     * @param _securityToken Address of the security token\n', '     * @param _polyAddress Address of the polytoken\n', '     */\n', '    constructor (address _securityToken, address _polyAddress) public {\n', '        securityToken = _securityToken;\n', '        factory = msg.sender;\n', '        polyToken = IERC20(_polyAddress);\n', '    }\n', '\n', '    //Allows owner, factory or permissioned delegate\n', '    modifier withPerm(bytes32 _perm) {\n', '        bool isOwner = msg.sender == Ownable(securityToken).owner();\n', '        bool isFactory = msg.sender == factory;\n', '        require(isOwner||isFactory||ISecurityToken(securityToken).checkPermission(msg.sender, address(this), _perm), "Permission check failed");\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == Ownable(securityToken).owner(), "Sender is not owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyFactory {\n', '        require(msg.sender == factory, "Sender is not factory");\n', '        _;\n', '    }\n', '\n', '    modifier onlyFactoryOwner {\n', '        require(msg.sender == Ownable(factory).owner(), "Sender is not factory owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyFactoryOrOwner {\n', '        require((msg.sender == Ownable(securityToken).owner()) || (msg.sender == factory), "Sender is not factory or owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice used to withdraw the fee by the factory owner\n', '     */\n', '    function takeFee(uint256 _amount) public withPerm(FEE_ADMIN) returns(bool) {\n', '        require(polyToken.transferFrom(securityToken, Ownable(factory).owner(), _amount), "Unable to take fee");\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Interface to be implemented by all Transfer Manager modules\n', ' * @dev abstract contract\n', ' */\n', 'contract ITransferManager is Module, Pausable {\n', '\n', '    //If verifyTransfer returns:\n', '    //  FORCE_VALID, the transaction will always be valid, regardless of other TM results\n', '    //  INVALID, then the transfer should not be allowed regardless of other TM results\n', '    //  VALID, then the transfer is valid for this TM\n', '    //  NA, then the result from this TM is ignored\n', '    enum Result {INVALID, NA, VALID, FORCE_VALID}\n', '\n', '    function verifyTransfer(address _from, address _to, uint256 _amount, bytes _data, bool _isTransfer) public returns(Result);\n', '\n', '    function unpause() public onlyOwner {\n', '        super._unpause();\n', '    }\n', '\n', '    function pause() public onlyOwner {\n', '        super._pause();\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Utility contract to allow owner to retreive any ERC20 sent to the contract\n', ' */\n', 'contract ReclaimTokens is Ownable {\n', '\n', '    /**\n', '    * @notice Reclaim all ERC20Basic compatible tokens\n', '    * @param _tokenContract The address of the token contract\n', '    */\n', '    function reclaimERC20(address _tokenContract) external onlyOwner {\n', '        require(_tokenContract != address(0), "Invalid address");\n', '        IERC20 token = IERC20(_tokenContract);\n', '        uint256 balance = token.balanceOf(address(this));\n', '        require(token.transfer(owner, balance), "Transfer failed");\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Core functionality for registry upgradability\n', ' */\n', 'contract PolymathRegistry is ReclaimTokens {\n', '\n', '    mapping (bytes32 => address) public storedAddresses;\n', '\n', '    event ChangeAddress(string _nameKey, address indexed _oldAddress, address indexed _newAddress);\n', '\n', '    /**\n', '     * @notice Gets the contract address\n', '     * @param _nameKey is the key for the contract address mapping\n', '     * @return address\n', '     */\n', '    function getAddress(string _nameKey) external view returns(address) {\n', '        bytes32 key = keccak256(bytes(_nameKey));\n', '        require(storedAddresses[key] != address(0), "Invalid address key");\n', '        return storedAddresses[key];\n', '    }\n', '\n', '    /**\n', '     * @notice Changes the contract address\n', '     * @param _nameKey is the key for the contract address mapping\n', '     * @param _newAddress is the new contract address\n', '     */\n', '    function changeAddress(string _nameKey, address _newAddress) external onlyOwner {\n', '        bytes32 key = keccak256(bytes(_nameKey));\n', '        emit ChangeAddress(_nameKey, storedAddresses[key], _newAddress);\n', '        storedAddresses[key] = _newAddress;\n', '    }\n', '\n', '\n', '}\n', '\n', 'contract RegistryUpdater is Ownable {\n', '\n', '    address public polymathRegistry;\n', '    address public moduleRegistry;\n', '    address public securityTokenRegistry;\n', '    address public featureRegistry;\n', '    address public polyToken;\n', '\n', '    constructor (address _polymathRegistry) public {\n', '        require(_polymathRegistry != address(0), "Invalid address");\n', '        polymathRegistry = _polymathRegistry;\n', '    }\n', '\n', '    function updateFromRegistry() public onlyOwner {\n', '        moduleRegistry = PolymathRegistry(polymathRegistry).getAddress("ModuleRegistry");\n', '        securityTokenRegistry = PolymathRegistry(polymathRegistry).getAddress("SecurityTokenRegistry");\n', '        featureRegistry = PolymathRegistry(polymathRegistry).getAddress("FeatureRegistry");\n', '        polyToken = PolymathRegistry(polymathRegistry).getAddress("PolyToken");\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Utility contract for reusable code\n', ' */\n', 'library Util {\n', '\n', '   /**\n', '    * @notice Changes a string to upper case\n', '    * @param _base String to change\n', '    */\n', '    function upper(string _base) internal pure returns (string) {\n', '        bytes memory _baseBytes = bytes(_base);\n', '        for (uint i = 0; i < _baseBytes.length; i++) {\n', '            bytes1 b1 = _baseBytes[i];\n', '            if (b1 >= 0x61 && b1 <= 0x7A) {\n', '                b1 = bytes1(uint8(b1)-32);\n', '            }\n', '            _baseBytes[i] = b1;\n', '        }\n', '        return string(_baseBytes);\n', '    }\n', '\n', '    /**\n', '     * @notice Changes the string into bytes32\n', '     * @param _source String that need to convert into bytes32\n', '     */\n', '    /// Notice - Maximum Length for _source will be 32 chars otherwise returned bytes32 value will have lossy value.\n', '    function stringToBytes32(string memory _source) internal pure returns (bytes32) {\n', '        return bytesToBytes32(bytes(_source), 0);\n', '    }\n', '\n', '    /**\n', '     * @notice Changes bytes into bytes32\n', '     * @param _b Bytes that need to convert into bytes32\n', '     * @param _offset Offset from which to begin conversion\n', '     */\n', '    /// Notice - Maximum length for _source will be 32 chars otherwise returned bytes32 value will have lossy value.\n', '    function bytesToBytes32(bytes _b, uint _offset) internal pure returns (bytes32) {\n', '        bytes32 result;\n', '\n', '        for (uint i = 0; i < _b.length; i++) {\n', '            result |= bytes32(_b[_offset + i] & 0xFF) >> (i * 8);\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @notice Changes the bytes32 into string\n', '     * @param _source that need to convert into string\n', '     */\n', '    function bytes32ToString(bytes32 _source) internal pure returns (string result) {\n', '        bytes memory bytesString = new bytes(32);\n', '        uint charCount = 0;\n', '        for (uint j = 0; j < 32; j++) {\n', '            byte char = byte(bytes32(uint(_source) * 2 ** (8 * j)));\n', '            if (char != 0) {\n', '                bytesString[charCount] = char;\n', '                charCount++;\n', '            }\n', '        }\n', '        bytes memory bytesStringTrimmed = new bytes(charCount);\n', '        for (j = 0; j < charCount; j++) {\n', '            bytesStringTrimmed[j] = bytesString[j];\n', '        }\n', '        return string(bytesStringTrimmed);\n', '    }\n', '\n', '    /**\n', '     * @notice Gets function signature from _data\n', '     * @param _data Passed data\n', '     * @return bytes4 sig\n', '     */\n', '    function getSig(bytes _data) internal pure returns (bytes4 sig) {\n', '        uint len = _data.length < 4 ? _data.length : 4;\n', '        for (uint i = 0; i < len; i++) {\n', '            sig = bytes4(uint(sig) + uint(_data[i]) * (2 ** (8 * (len - 1 - i))));\n', '        }\n', '    }\n', '\n', '\n', '}\n', '\n', '/**\n', ' * @title Helps contracts guard agains reentrancy attacks.\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @notice If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private reentrancyLock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!reentrancyLock);\n', '    reentrancyLock = true;\n', '    _;\n', '    reentrancyLock = false;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title DetailedERC20 token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Interface to be implemented by all permission manager modules\n', ' */\n', 'interface IPermissionManager {\n', '\n', '    /**\n', '    * @notice Used to check the permission on delegate corresponds to module contract address\n', '    * @param _delegate Ethereum address of the delegate\n', '    * @param _module Ethereum contract address of the module\n', '    * @param _perm Permission flag\n', '    * @return bool\n', '    */\n', '    function checkPermission(address _delegate, address _module, bytes32 _perm) external view returns(bool);\n', '\n', '    /**\n', '    * @notice Used to add a delegate\n', '    * @param _delegate Ethereum address of the delegate\n', '    * @param _details Details about the delegate i.e `Belongs to financial firm`\n', '    */\n', '    function addDelegate(address _delegate, bytes32 _details) external;\n', '\n', '    /**\n', '    * @notice Used to delete a delegate\n', '    * @param _delegate Ethereum address of the delegate\n', '    */\n', '    function deleteDelegate(address _delegate) external;\n', '\n', '    /**\n', '    * @notice Used to check if an address is a delegate or not\n', '    * @param _potentialDelegate the address of potential delegate\n', '    * @return bool\n', '    */\n', '    function checkDelegate(address _potentialDelegate) external view returns(bool);\n', '\n', '    /**\n', '    * @notice Used to provide/change the permission to the delegate corresponds to the module contract\n', '    * @param _delegate Ethereum address of the delegate\n', '    * @param _module Ethereum contract address of the module\n', '    * @param _perm Permission flag\n', '    * @param _valid Bool flag use to switch on/off the permission\n', '    * @return bool\n', '    */\n', '    function changePermission(\n', '        address _delegate,\n', '        address _module,\n', '        bytes32 _perm,\n', '        bool _valid\n', '    )\n', '    external;\n', '\n', '    /**\n', '    * @notice Used to change one or more permissions for a single delegate at once\n', '    * @param _delegate Ethereum address of the delegate\n', '    * @param _modules Multiple module matching the multiperms, needs to be same length\n', '    * @param _perms Multiple permission flag needs to be changed\n', '    * @param _valids Bool array consist the flag to switch on/off the permission\n', '    * @return nothing\n', '    */\n', '    function changePermissionMulti(\n', '        address _delegate,\n', '        address[] _modules,\n', '        bytes32[] _perms,\n', '        bool[] _valids\n', '    )\n', '    external;\n', '\n', '    /**\n', '    * @notice Used to return all delegates with a given permission and module\n', '    * @param _module Ethereum contract address of the module\n', '    * @param _perm Permission flag\n', '    * @return address[]\n', '    */\n', '    function getAllDelegatesWithPerm(address _module, bytes32 _perm) external view returns(address[]);\n', '\n', '     /**\n', '    * @notice Used to return all permission of a single or multiple module\n', '    * @dev possible that function get out of gas is there are lot of modules and perm related to them\n', '    * @param _delegate Ethereum address of the delegate\n', '    * @param _types uint8[] of types\n', '    * @return address[] the address array of Modules this delegate has permission\n', '    * @return bytes32[] the permission array of the corresponding Modules\n', '    */\n', '    function getAllModulesAndPermsFromTypes(address _delegate, uint8[] _types) external view returns(address[], bytes32[]);\n', '\n', '    /**\n', '    * @notice Used to get the Permission flag related the `this` contract\n', '    * @return Array of permission flags\n', '    */\n', '    function getPermissions() external view returns(bytes32[]);\n', '\n', '    /**\n', '    * @notice Used to get all delegates\n', '    * @return address[]\n', '    */\n', '    function getAllDelegates() external view returns(address[]);\n', '\n', '}\n', '\n', 'library TokenLib {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // Struct for module data\n', '    struct ModuleData {\n', '        bytes32 name;\n', '        address module;\n', '        address moduleFactory;\n', '        bool isArchived;\n', '        uint8[] moduleTypes;\n', '        uint256[] moduleIndexes;\n', '        uint256 nameIndex;\n', '    }\n', '\n', '    // Structures to maintain checkpoints of balances for governance / dividends\n', '    struct Checkpoint {\n', '        uint256 checkpointId;\n', '        uint256 value;\n', '    }\n', '\n', '    struct InvestorDataStorage {\n', '        // List of investors who have ever held a non-zero token balance\n', '        mapping (address => bool) investorListed;\n', '        // List of token holders\n', '        address[] investors;\n', '        // Total number of non-zero token holders\n', '        uint256 investorCount;\n', '    }\n', '\n', '    // Emit when Module is archived from the SecurityToken\n', '    event ModuleArchived(uint8[] _types, address _module, uint256 _timestamp);\n', '    // Emit when Module is unarchived from the SecurityToken\n', '    event ModuleUnarchived(uint8[] _types, address _module, uint256 _timestamp);\n', '\n', '    /**\n', '    * @notice Archives a module attached to the SecurityToken\n', '    * @param _moduleData Storage data\n', '    * @param _module Address of module to archive\n', '    */\n', '    function archiveModule(ModuleData storage _moduleData, address _module) public {\n', '        require(!_moduleData.isArchived, "Module archived");\n', '        require(_moduleData.module != address(0), "Module missing");\n', '        /*solium-disable-next-line security/no-block-members*/\n', '        emit ModuleArchived(_moduleData.moduleTypes, _module, now);\n', '        _moduleData.isArchived = true;\n', '    }\n', '\n', '    /**\n', '    * @notice Unarchives a module attached to the SecurityToken\n', '    * @param _moduleData Storage data\n', '    * @param _module Address of module to unarchive\n', '    */\n', '    function unarchiveModule(ModuleData storage _moduleData, address _module) public {\n', '        require(_moduleData.isArchived, "Module unarchived");\n', '        /*solium-disable-next-line security/no-block-members*/\n', '        emit ModuleUnarchived(_moduleData.moduleTypes, _module, now);\n', '        _moduleData.isArchived = false;\n', '    }\n', '\n', '    /**\n', "     * @notice Validates permissions with PermissionManager if it exists. If there's no permission return false\n", '     * @dev Note that IModule withPerm will allow ST owner all permissions by default\n', '     * @dev this allows individual modules to override this logic if needed (to not allow ST owner all permissions)\n', '     * @param _modules is the modules to check permissions on\n', '     * @param _delegate is the address of the delegate\n', '     * @param _module is the address of the PermissionManager module\n', '     * @param _perm is the permissions data\n', '     * @return success\n', '     */\n', '    function checkPermission(address[] storage _modules, address _delegate, address _module, bytes32 _perm) public view returns(bool) {\n', '        if (_modules.length == 0) {\n', '            return false;\n', '        }\n', '\n', '        for (uint8 i = 0; i < _modules.length; i++) {\n', '            if (IPermissionManager(_modules[i]).checkPermission(_delegate, _module, _perm)) {\n', '                return true;\n', '            }\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @notice Queries a value at a defined checkpoint\n', '     * @param _checkpoints is array of Checkpoint objects\n', '     * @param _checkpointId is the Checkpoint ID to query\n', '     * @param _currentValue is the Current value of checkpoint\n', '     * @return uint256\n', '     */\n', '    function getValueAt(Checkpoint[] storage _checkpoints, uint256 _checkpointId, uint256 _currentValue) public view returns(uint256) {\n', '        //Checkpoint id 0 is when the token is first created - everyone has a zero balance\n', '        if (_checkpointId == 0) {\n', '            return 0;\n', '        }\n', '        if (_checkpoints.length == 0) {\n', '            return _currentValue;\n', '        }\n', '        if (_checkpoints[0].checkpointId >= _checkpointId) {\n', '            return _checkpoints[0].value;\n', '        }\n', '        if (_checkpoints[_checkpoints.length - 1].checkpointId < _checkpointId) {\n', '            return _currentValue;\n', '        }\n', '        if (_checkpoints[_checkpoints.length - 1].checkpointId == _checkpointId) {\n', '            return _checkpoints[_checkpoints.length - 1].value;\n', '        }\n', '        uint256 min = 0;\n', '        uint256 max = _checkpoints.length - 1;\n', '        while (max > min) {\n', '            uint256 mid = (max + min) / 2;\n', '            if (_checkpoints[mid].checkpointId == _checkpointId) {\n', '                max = mid;\n', '                break;\n', '            }\n', '            if (_checkpoints[mid].checkpointId < _checkpointId) {\n', '                min = mid + 1;\n', '            } else {\n', '                max = mid;\n', '            }\n', '        }\n', '        return _checkpoints[max].value;\n', '    }\n', '\n', '    /**\n', '     * @notice Stores the changes to the checkpoint objects\n', '     * @param _checkpoints is the affected checkpoint object array\n', '     * @param _newValue is the new value that needs to be stored\n', '     */\n', '    function adjustCheckpoints(TokenLib.Checkpoint[] storage _checkpoints, uint256 _newValue, uint256 _currentCheckpointId) public {\n', '        //No checkpoints set yet\n', '        if (_currentCheckpointId == 0) {\n', '            return;\n', '        }\n', '        //No new checkpoints since last update\n', '        if ((_checkpoints.length > 0) && (_checkpoints[_checkpoints.length - 1].checkpointId == _currentCheckpointId)) {\n', '            return;\n', '        }\n', '        //New checkpoint, so record balance\n', '        _checkpoints.push(\n', '            TokenLib.Checkpoint({\n', '                checkpointId: _currentCheckpointId,\n', '                value: _newValue\n', '            })\n', '        );\n', '    }\n', '\n', '    /**\n', '    * @notice Keeps track of the number of non-zero token holders\n', '    * @param _investorData Date releated to investor metrics\n', '    * @param _from Sender of transfer\n', '    * @param _to Receiver of transfer\n', '    * @param _value Value of transfer\n', '    * @param _balanceTo Balance of the _to address\n', '    * @param _balanceFrom Balance of the _from address\n', '    */\n', '    function adjustInvestorCount(\n', '        InvestorDataStorage storage _investorData,\n', '        address _from,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _balanceTo,\n', '        uint256 _balanceFrom\n', '        ) public  {\n', '        if ((_value == 0) || (_from == _to)) {\n', '            return;\n', '        }\n', '        // Check whether receiver is a new token holder\n', '        if ((_balanceTo == 0) && (_to != address(0))) {\n', '            _investorData.investorCount = (_investorData.investorCount).add(1);\n', '        }\n', '        // Check whether sender is moving all of their tokens\n', '        if (_value == _balanceFrom) {\n', '            _investorData.investorCount = (_investorData.investorCount).sub(1);\n', '        }\n', '        //Also adjust investor list\n', '        if (!_investorData.investorListed[_to] && (_to != address(0))) {\n', '            _investorData.investors.push(_to);\n', '            _investorData.investorListed[_to] = true;\n', '        }\n', '\n', '    }\n', '\n', '}\n', '\n', '/**\n', '* @title Security Token contract\n', '* @notice SecurityToken is an ERC20 token with added capabilities:\n', '* @notice - Implements the ST-20 Interface\n', '* @notice - Transfers are restricted\n', '* @notice - Modules can be attached to it to control its behaviour\n', '* @notice - ST should not be deployed directly, but rather the SecurityTokenRegistry should be used\n', '* @notice - ST does not inherit from ISecurityToken due to:\n', '* @notice - https://github.com/ethereum/solidity/issues/4847\n', '*/\n', 'contract SecurityToken is StandardToken, DetailedERC20, ReentrancyGuard, RegistryUpdater {\n', '    using SafeMath for uint256;\n', '\n', '    TokenLib.InvestorDataStorage investorData;\n', '\n', '    // Used to hold the semantic version data\n', '    struct SemanticVersion {\n', '        uint8 major;\n', '        uint8 minor;\n', '        uint8 patch;\n', '    }\n', '\n', '    SemanticVersion securityTokenVersion;\n', '\n', '    // off-chain data\n', '    string public tokenDetails;\n', '\n', '    uint8 constant PERMISSION_KEY = 1;\n', '    uint8 constant TRANSFER_KEY = 2;\n', '    uint8 constant MINT_KEY = 3;\n', '    uint8 constant CHECKPOINT_KEY = 4;\n', '    uint8 constant BURN_KEY = 5;\n', '\n', '    uint256 public granularity;\n', '\n', '    // Value of current checkpoint\n', '    uint256 public currentCheckpointId;\n', '\n', '    // Used to temporarily halt all transactions\n', '    bool public transfersFrozen;\n', '\n', '    // Used to permanently halt all minting\n', '    bool public mintingFrozen;\n', '\n', '    // Used to permanently halt controller actions\n', '    bool public controllerDisabled;\n', '\n', '    // Address whitelisted by issuer as controller\n', '    address public controller;\n', '\n', '    // Records added modules - module list should be order agnostic!\n', '    mapping (uint8 => address[]) modules;\n', '\n', '    // Records information about the module\n', '    mapping (address => TokenLib.ModuleData) modulesToData;\n', '\n', '    // Records added module names - module list should be order agnostic!\n', '    mapping (bytes32 => address[]) names;\n', '\n', '    // Map each investor to a series of checkpoints\n', '    mapping (address => TokenLib.Checkpoint[]) checkpointBalances;\n', '\n', '    // List of checkpoints that relate to total supply\n', '    TokenLib.Checkpoint[] checkpointTotalSupply;\n', '\n', '    // Times at which each checkpoint was created\n', '    uint256[] checkpointTimes;\n', '\n', '    // Emit at the time when module get added\n', '    event ModuleAdded(\n', '        uint8[] _types,\n', '        bytes32 _name,\n', '        address _moduleFactory,\n', '        address _module,\n', '        uint256 _moduleCost,\n', '        uint256 _budget,\n', '        uint256 _timestamp\n', '    );\n', '\n', '    // Emit when the token details get updated\n', '    event UpdateTokenDetails(string _oldDetails, string _newDetails);\n', '    // Emit when the granularity get changed\n', '    event GranularityChanged(uint256 _oldGranularity, uint256 _newGranularity);\n', '    // Emit when Module get archived from the securityToken\n', '    event ModuleArchived(uint8[] _types, address _module, uint256 _timestamp);\n', '    // Emit when Module get unarchived from the securityToken\n', '    event ModuleUnarchived(uint8[] _types, address _module, uint256 _timestamp);\n', '    // Emit when Module get removed from the securityToken\n', '    event ModuleRemoved(uint8[] _types, address _module, uint256 _timestamp);\n', '    // Emit when the budget allocated to a module is changed\n', '    event ModuleBudgetChanged(uint8[] _moduleTypes, address _module, uint256 _oldBudget, uint256 _budget);\n', '    // Emit when transfers are frozen or unfrozen\n', '    event FreezeTransfers(bool _status, uint256 _timestamp);\n', '    // Emit when new checkpoint created\n', '    event CheckpointCreated(uint256 indexed _checkpointId, uint256 _timestamp);\n', '    // Emit when is permanently frozen by the issuer\n', '    event FreezeMinting(uint256 _timestamp);\n', '    // Events to log minting and burning\n', '    event Minted(address indexed _to, uint256 _value);\n', '    event Burnt(address indexed _from, uint256 _value);\n', '\n', '    // Events to log controller actions\n', '    event SetController(address indexed _oldController, address indexed _newController);\n', '    event ForceTransfer(\n', '        address indexed _controller,\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint256 _value,\n', '        bool _verifyTransfer,\n', '        bytes _data\n', '    );\n', '    event ForceBurn(\n', '        address indexed _controller,\n', '        address indexed _from,\n', '        uint256 _value,\n', '        bool _verifyTransfer,\n', '        bytes _data\n', '    );\n', '    event DisableController(uint256 _timestamp);\n', '\n', '    function _isModule(address _module, uint8 _type) internal view returns (bool) {\n', '        require(modulesToData[_module].module == _module, "Wrong address");\n', '        require(!modulesToData[_module].isArchived, "Module archived");\n', '        for (uint256 i = 0; i < modulesToData[_module].moduleTypes.length; i++) {\n', '            if (modulesToData[_module].moduleTypes[i] == _type) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    // Require msg.sender to be the specified module type\n', '    modifier onlyModule(uint8 _type) {\n', '        require(_isModule(msg.sender, _type));\n', '        _;\n', '    }\n', '\n', '    // Require msg.sender to be the specified module type or the owner of the token\n', '    modifier onlyModuleOrOwner(uint8 _type) {\n', '        if (msg.sender == owner) {\n', '            _;\n', '        } else {\n', '            require(_isModule(msg.sender, _type));\n', '            _;\n', '        }\n', '    }\n', '\n', '    modifier checkGranularity(uint256 _value) {\n', '        require(_value % granularity == 0, "Invalid granularity");\n', '        _;\n', '    }\n', '\n', '    modifier isMintingAllowed() {\n', '        require(!mintingFrozen, "Minting frozen");\n', '        _;\n', '    }\n', '\n', '    modifier isEnabled(string _nameKey) {\n', '        require(IFeatureRegistry(featureRegistry).getFeatureStatus(_nameKey));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice Revert if called by an account which is not a controller\n', '     */\n', '    modifier onlyController() {\n', '        require(msg.sender == controller, "Not controller");\n', '        require(!controllerDisabled, "Controller disabled");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice Constructor\n', '     * @param _name Name of the SecurityToken\n', '     * @param _symbol Symbol of the Token\n', '     * @param _decimals Decimals for the securityToken\n', '     * @param _granularity granular level of the token\n', '     * @param _tokenDetails Details of the token that are stored off-chain\n', '     * @param _polymathRegistry Contract address of the polymath registry\n', '     */\n', '    constructor (\n', '        string _name,\n', '        string _symbol,\n', '        uint8 _decimals,\n', '        uint256 _granularity,\n', '        string _tokenDetails,\n', '        address _polymathRegistry\n', '    )\n', '    public\n', '    DetailedERC20(_name, _symbol, _decimals)\n', '    RegistryUpdater(_polymathRegistry)\n', '    {\n', '        //When it is created, the owner is the STR\n', '        updateFromRegistry();\n', '        tokenDetails = _tokenDetails;\n', '        granularity = _granularity;\n', '        securityTokenVersion = SemanticVersion(2,0,0);\n', '    }\n', '\n', '    /**\n', '     * @notice Attachs a module to the SecurityToken\n', '     * @dev  E.G.: On deployment (through the STR) ST gets a TransferManager module attached to it\n', '     * @dev to control restrictions on transfers.\n', '     * @param _moduleFactory is the address of the module factory to be added\n', '     * @param _data is data packed into bytes used to further configure the module (See STO usage)\n', '     * @param _maxCost max amount of POLY willing to pay to the module.\n', '     * @param _budget max amount of ongoing POLY willing to assign to the module.\n', '     */\n', '    function addModule(\n', '        address _moduleFactory,\n', '        bytes _data,\n', '        uint256 _maxCost,\n', '        uint256 _budget\n', '    ) external onlyOwner nonReentrant {\n', '        //Check that the module factory exists in the ModuleRegistry - will throw otherwise\n', '        IModuleRegistry(moduleRegistry).useModule(_moduleFactory);\n', '        IModuleFactory moduleFactory = IModuleFactory(_moduleFactory);\n', '        uint8[] memory moduleTypes = moduleFactory.getTypes();\n', '        uint256 moduleCost = moduleFactory.getSetupCost();\n', '        require(moduleCost <= _maxCost, "Invalid cost");\n', '        //Approve fee for module\n', '        ERC20(polyToken).approve(_moduleFactory, moduleCost);\n', '        //Creates instance of module from factory\n', '        address module = moduleFactory.deploy(_data);\n', '        require(modulesToData[module].module == address(0), "Module exists");\n', '        //Approve ongoing budget\n', '        ERC20(polyToken).approve(module, _budget);\n', '        //Add to SecurityToken module map\n', '        bytes32 moduleName = moduleFactory.getName();\n', '        uint256[] memory moduleIndexes = new uint256[](moduleTypes.length);\n', '        uint256 i;\n', '        for (i = 0; i < moduleTypes.length; i++) {\n', '            moduleIndexes[i] = modules[moduleTypes[i]].length;\n', '            modules[moduleTypes[i]].push(module);\n', '        }\n', '        modulesToData[module] = TokenLib.ModuleData(\n', '            moduleName, module, _moduleFactory, false, moduleTypes, moduleIndexes, names[moduleName].length\n', '        );\n', '        names[moduleName].push(module);\n', '        //Emit log event\n', '        /*solium-disable-next-line security/no-block-members*/\n', '        emit ModuleAdded(moduleTypes, moduleName, _moduleFactory, module, moduleCost, _budget, now);\n', '    }\n', '\n', '    /**\n', '    * @notice Archives a module attached to the SecurityToken\n', '    * @param _module address of module to archive\n', '    */\n', '    function archiveModule(address _module) external onlyOwner {\n', '        TokenLib.archiveModule(modulesToData[_module], _module);\n', '    }\n', '\n', '    /**\n', '    * @notice Unarchives a module attached to the SecurityToken\n', '    * @param _module address of module to unarchive\n', '    */\n', '    function unarchiveModule(address _module) external onlyOwner {\n', '        TokenLib.unarchiveModule(modulesToData[_module], _module);\n', '    }\n', '\n', '    /**\n', '    * @notice Removes a module attached to the SecurityToken\n', '    * @param _module address of module to unarchive\n', '    */\n', '    function removeModule(address _module) external onlyOwner {\n', '        require(modulesToData[_module].isArchived, "Not archived");\n', '        require(modulesToData[_module].module != address(0), "Module missing");\n', '        /*solium-disable-next-line security/no-block-members*/\n', '        emit ModuleRemoved(modulesToData[_module].moduleTypes, _module, now);\n', '        // Remove from module type list\n', '        uint8[] memory moduleTypes = modulesToData[_module].moduleTypes;\n', '        for (uint256 i = 0; i < moduleTypes.length; i++) {\n', '            _removeModuleWithIndex(moduleTypes[i], modulesToData[_module].moduleIndexes[i]);\n', '            /* modulesToData[_module].moduleType[moduleTypes[i]] = false; */\n', '        }\n', '        // Remove from module names list\n', '        uint256 index = modulesToData[_module].nameIndex;\n', '        bytes32 name = modulesToData[_module].name;\n', '        uint256 length = names[name].length;\n', '        names[name][index] = names[name][length - 1];\n', '        names[name].length = length - 1;\n', '        if ((length - 1) != index) {\n', '            modulesToData[names[name][index]].nameIndex = index;\n', '        }\n', '        // Remove from modulesToData\n', '        delete modulesToData[_module];\n', '    }\n', '\n', '    /**\n', '    * @notice Internal - Removes a module attached to the SecurityToken by index\n', '    */\n', '    function _removeModuleWithIndex(uint8 _type, uint256 _index) internal {\n', '        uint256 length = modules[_type].length;\n', '        modules[_type][_index] = modules[_type][length - 1];\n', '        modules[_type].length = length - 1;\n', '\n', '        if ((length - 1) != _index) {\n', '            //Need to find index of _type in moduleTypes of module we are moving\n', '            uint8[] memory newTypes = modulesToData[modules[_type][_index]].moduleTypes;\n', '            for (uint256 i = 0; i < newTypes.length; i++) {\n', '                if (newTypes[i] == _type) {\n', '                    modulesToData[modules[_type][_index]].moduleIndexes[i] = _index;\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Returns the data associated to a module\n', '     * @param _module address of the module\n', '     * @return bytes32 name\n', '     * @return address module address\n', '     * @return address module factory address\n', '     * @return bool module archived\n', '     * @return uint8 module type\n', '     */\n', '    function getModule(address _module) external view returns (bytes32, address, address, bool, uint8[]) {\n', '        return (modulesToData[_module].name,\n', '        modulesToData[_module].module,\n', '        modulesToData[_module].moduleFactory,\n', '        modulesToData[_module].isArchived,\n', '        modulesToData[_module].moduleTypes);\n', '    }\n', '\n', '    /**\n', '     * @notice Returns a list of modules that match the provided name\n', '     * @param _name name of the module\n', '     * @return address[] list of modules with this name\n', '     */\n', '    function getModulesByName(bytes32 _name) external view returns (address[]) {\n', '        return names[_name];\n', '    }\n', '\n', '    /**\n', '     * @notice Returns a list of modules that match the provided module type\n', '     * @param _type type of the module\n', '     * @return address[] list of modules with this type\n', '     */\n', '    function getModulesByType(uint8 _type) external view returns (address[]) {\n', '        return modules[_type];\n', '    }\n', '\n', '   /**\n', '    * @notice Allows the owner to withdraw unspent POLY stored by them on the ST or any ERC20 token.\n', '    * @dev Owner can transfer POLY to the ST which will be used to pay for modules that require a POLY fee.\n', '    * @param _tokenContract Address of the ERC20Basic compliance token\n', '    * @param _value amount of POLY to withdraw\n', '    */\n', '    function withdrawERC20(address _tokenContract, uint256 _value) external onlyOwner {\n', '        require(_tokenContract != address(0));\n', '        IERC20 token = IERC20(_tokenContract);\n', '        require(token.transfer(owner, _value));\n', '    }\n', '\n', '    /**\n', '\n', '    * @notice allows owner to increase/decrease POLY approval of one of the modules\n', '    * @param _module module address\n', '    * @param _change change in allowance\n', '    * @param _increase true if budget has to be increased, false if decrease\n', '    */\n', '    function changeModuleBudget(address _module, uint256 _change, bool _increase) external onlyOwner {\n', '        require(modulesToData[_module].module != address(0), "Module missing");\n', '        uint256 currentAllowance = IERC20(polyToken).allowance(address(this), _module);\n', '        uint256 newAllowance;\n', '        if (_increase) {\n', '            require(IERC20(polyToken).increaseApproval(_module, _change), "IncreaseApproval fail");\n', '            newAllowance = currentAllowance.add(_change);\n', '        } else {\n', '            require(IERC20(polyToken).decreaseApproval(_module, _change), "Insufficient allowance");\n', '            newAllowance = currentAllowance.sub(_change);\n', '        }\n', '        emit ModuleBudgetChanged(modulesToData[_module].moduleTypes, _module, currentAllowance, newAllowance);\n', '    }\n', '\n', '    /**\n', '     * @notice updates the tokenDetails associated with the token\n', '     * @param _newTokenDetails New token details\n', '     */\n', '    function updateTokenDetails(string _newTokenDetails) external onlyOwner {\n', '        emit UpdateTokenDetails(tokenDetails, _newTokenDetails);\n', '        tokenDetails = _newTokenDetails;\n', '    }\n', '\n', '    /**\n', '    * @notice Allows owner to change token granularity\n', '    * @param _granularity granularity level of the token\n', '    */\n', '    function changeGranularity(uint256 _granularity) external onlyOwner {\n', '        require(_granularity != 0, "Invalid granularity");\n', '        emit GranularityChanged(granularity, _granularity);\n', '        granularity = _granularity;\n', '    }\n', '\n', '    /**\n', '    * @notice Keeps track of the number of non-zero token holders\n', '    * @param _from sender of transfer\n', '    * @param _to receiver of transfer\n', '    * @param _value value of transfer\n', '    */\n', '    function _adjustInvestorCount(address _from, address _to, uint256 _value) internal {\n', '        TokenLib.adjustInvestorCount(investorData, _from, _to, _value, balanceOf(_to), balanceOf(_from));\n', '    }\n', '\n', '    /**\n', '     * @notice returns an array of investors\n', '     * NB - this length may differ from investorCount as it contains all investors that ever held tokens\n', '     * @return list of addresses\n', '     */\n', '    function getInvestors() external view returns(address[]) {\n', '        return investorData.investors;\n', '    }\n', '\n', '    /**\n', '     * @notice returns an array of investors at a given checkpoint\n', '     * NB - this length may differ from investorCount as it contains all investors that ever held tokens\n', '     * @param _checkpointId Checkpoint id at which investor list is to be populated\n', '     * @return list of investors\n', '     */\n', '    function getInvestorsAt(uint256 _checkpointId) external view returns(address[]) {\n', '        uint256 count = 0;\n', '        uint256 i;\n', '        for (i = 0; i < investorData.investors.length; i++) {\n', '            if (balanceOfAt(investorData.investors[i], _checkpointId) > 0) {\n', '                count++;\n', '            }\n', '        }\n', '        address[] memory investors = new address[](count);\n', '        count = 0;\n', '        for (i = 0; i < investorData.investors.length; i++) {\n', '            if (balanceOfAt(investorData.investors[i], _checkpointId) > 0) {\n', '                investors[count] = investorData.investors[i];\n', '                count++;\n', '            }\n', '        }\n', '        return investors;\n', '    }\n', '\n', '    /**\n', '     * @notice generates subset of investors\n', '     * NB - can be used in batches if investor list is large\n', '     * @param _start Position of investor to start iteration from\n', '     * @param _end Position of investor to stop iteration at\n', '     * @return list of investors\n', '     */\n', '    function iterateInvestors(uint256 _start, uint256 _end) external view returns(address[]) {\n', '        require(_end <= investorData.investors.length, "Invalid end");\n', '        address[] memory investors = new address[](_end.sub(_start));\n', '        uint256 index = 0;\n', '        for (uint256 i = _start; i < _end; i++) {\n', '            investors[index] = investorData.investors[i];\n', '            index++;\n', '        }\n', '        return investors;\n', '    }\n', '\n', '    /**\n', '     * @notice Returns the investor count\n', '     * @return Investor count\n', '     */\n', '    function getInvestorCount() external view returns(uint256) {\n', '        return investorData.investorCount;\n', '    }\n', '\n', '    /**\n', '     * @notice freezes transfers\n', '     */\n', '    function freezeTransfers() external onlyOwner {\n', '        require(!transfersFrozen, "Already frozen");\n', '        transfersFrozen = true;\n', '        /*solium-disable-next-line security/no-block-members*/\n', '        emit FreezeTransfers(true, now);\n', '    }\n', '\n', '    /**\n', '     * @notice Unfreeze transfers\n', '     */\n', '    function unfreezeTransfers() external onlyOwner {\n', '        require(transfersFrozen, "Not frozen");\n', '        transfersFrozen = false;\n', '        /*solium-disable-next-line security/no-block-members*/\n', '        emit FreezeTransfers(false, now);\n', '    }\n', '\n', '    /**\n', '     * @notice Internal - adjusts totalSupply at checkpoint after minting or burning tokens\n', '     */\n', '    function _adjustTotalSupplyCheckpoints() internal {\n', '        TokenLib.adjustCheckpoints(checkpointTotalSupply, totalSupply(), currentCheckpointId);\n', '    }\n', '\n', '    /**\n', '     * @notice Internal - adjusts token holder balance at checkpoint after a token transfer\n', '     * @param _investor address of the token holder affected\n', '     */\n', '    function _adjustBalanceCheckpoints(address _investor) internal {\n', '        TokenLib.adjustCheckpoints(checkpointBalances[_investor], balanceOf(_investor), currentCheckpointId);\n', '    }\n', '\n', '    /**\n', '     * @notice Overloaded version of the transfer function\n', '     * @param _to receiver of transfer\n', '     * @param _value value of transfer\n', '     * @return bool success\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        return transferWithData(_to, _value, "");\n', '    }\n', '\n', '    /**\n', '     * @notice Overloaded version of the transfer function\n', '     * @param _to receiver of transfer\n', '     * @param _value value of transfer\n', '     * @param _data data to indicate validation\n', '     * @return bool success\n', '     */\n', '    function transferWithData(address _to, uint256 _value, bytes _data) public returns (bool success) {\n', '        require(_updateTransfer(msg.sender, _to, _value, _data), "Transfer invalid");\n', '        require(super.transfer(_to, _value));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Overloaded version of the transferFrom function\n', '     * @param _from sender of transfer\n', '     * @param _to receiver of transfer\n', '     * @param _value value of transfer\n', '     * @return bool success\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '        return transferFromWithData(_from, _to, _value, "");\n', '    }\n', '\n', '    /**\n', '     * @notice Overloaded version of the transferFrom function\n', '     * @param _from sender of transfer\n', '     * @param _to receiver of transfer\n', '     * @param _value value of transfer\n', '     * @param _data data to indicate validation\n', '     * @return bool success\n', '     */\n', '    function transferFromWithData(address _from, address _to, uint256 _value, bytes _data) public returns(bool) {\n', '        require(_updateTransfer(_from, _to, _value, _data), "Transfer invalid");\n', '        require(super.transferFrom(_from, _to, _value));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Updates internal variables when performing a transfer\n', '     * @param _from sender of transfer\n', '     * @param _to receiver of transfer\n', '     * @param _value value of transfer\n', '     * @param _data data to indicate validation\n', '     * @return bool success\n', '     */\n', '    function _updateTransfer(address _from, address _to, uint256 _value, bytes _data) internal nonReentrant returns(bool) {\n', '        // NB - the ordering in this function implies the following:\n', '        //  - investor counts are updated before transfer managers are called - i.e. transfer managers will see\n', '        //investor counts including the current transfer.\n', '        //  - checkpoints are updated after the transfer managers are called. This allows TMs to create\n', '        //checkpoints as though they have been created before the current transactions,\n', '        //  - to avoid the situation where a transfer manager transfers tokens, and this function is called recursively,\n', '        //the function is marked as nonReentrant. This means that no TM can transfer (or mint / burn) tokens.\n', '        _adjustInvestorCount(_from, _to, _value);\n', '        bool verified = _verifyTransfer(_from, _to, _value, _data, true);\n', '        _adjustBalanceCheckpoints(_from);\n', '        _adjustBalanceCheckpoints(_to);\n', '        return verified;\n', '    }\n', '\n', '    /**\n', '     * @notice Validate transfer with TransferManager module if it exists\n', '     * @dev TransferManager module has a key of 2\n', '     * @dev _isTransfer boolean flag is the deciding factor for whether the\n', '     * state variables gets modified or not within the different modules. i.e isTransfer = true\n', '     * leads to change in the modules environment otherwise _verifyTransfer() works as a read-only\n', '     * function (no change in the state).\n', '     * @param _from sender of transfer\n', '     * @param _to receiver of transfer\n', '     * @param _value value of transfer\n', '     * @param _data data to indicate validation\n', '     * @param _isTransfer whether transfer is being executed\n', '     * @return bool\n', '     */\n', '    function _verifyTransfer(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value,\n', '        bytes _data,\n', '        bool _isTransfer\n', '    ) internal checkGranularity(_value) returns (bool) {\n', '        if (!transfersFrozen) {\n', '            bool isInvalid = false;\n', '            bool isValid = false;\n', '            bool isForceValid = false;\n', '            bool unarchived = false;\n', '            address module;\n', '            for (uint256 i = 0; i < modules[TRANSFER_KEY].length; i++) {\n', '                module = modules[TRANSFER_KEY][i];\n', '                if (!modulesToData[module].isArchived) {\n', '                    unarchived = true;\n', '                    ITransferManager.Result valid = ITransferManager(module).verifyTransfer(_from, _to, _value, _data, _isTransfer);\n', '                    if (valid == ITransferManager.Result.INVALID) {\n', '                        isInvalid = true;\n', '                    } else if (valid == ITransferManager.Result.VALID) {\n', '                        isValid = true;\n', '                    } else if (valid == ITransferManager.Result.FORCE_VALID) {\n', '                        isForceValid = true;\n', '                    }\n', '                }\n', '            }\n', '            // If no unarchived modules, return true by default\n', '            return unarchived ? (isForceValid ? true : (isInvalid ? false : isValid)) : true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @notice Validates a transfer with a TransferManager module if it exists\n', '     * @dev TransferManager module has a key of 2\n', '     * @param _from sender of transfer\n', '     * @param _to receiver of transfer\n', '     * @param _value value of transfer\n', '     * @param _data data to indicate validation\n', '     * @return bool\n', '     */\n', '    function verifyTransfer(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n', '        return _verifyTransfer(_from, _to, _value, _data, false);\n', '    }\n', '\n', '    /**\n', '     * @notice Permanently freeze minting of this security token.\n', '     * @dev It MUST NOT be possible to increase `totalSuppy` after this function is called.\n', '     */\n', '    function freezeMinting() external isMintingAllowed() isEnabled("freezeMintingAllowed") onlyOwner {\n', '        mintingFrozen = true;\n', '        /*solium-disable-next-line security/no-block-members*/\n', '        emit FreezeMinting(now);\n', '    }\n', '\n', '    /**\n', '     * @notice Mints new tokens and assigns them to the target _investor.\n', '     * @dev Can only be called by the issuer or STO attached to the token\n', '     * @param _investor Address where the minted tokens will be delivered\n', '     * @param _value Number of tokens be minted\n', '     * @return success\n', '     */\n', '    function mint(address _investor, uint256 _value) public returns (bool success) {\n', '        return mintWithData(_investor, _value, "");\n', '    }\n', '\n', '    /**\n', '     * @notice mints new tokens and assigns them to the target _investor.\n', '     * @dev Can only be called by the issuer or STO attached to the token\n', '     * @param _investor Address where the minted tokens will be delivered\n', '     * @param _value Number of tokens be minted\n', '     * @param _data data to indicate validation\n', '     * @return success\n', '     */\n', '    function mintWithData(\n', '        address _investor,\n', '        uint256 _value,\n', '        bytes _data\n', '        ) public onlyModuleOrOwner(MINT_KEY) isMintingAllowed() returns (bool success) {\n', '        require(_investor != address(0), "Investor is 0");\n', '        require(_updateTransfer(address(0), _investor, _value, _data), "Transfer invalid");\n', '        _adjustTotalSupplyCheckpoints();\n', '        totalSupply_ = totalSupply_.add(_value);\n', '        balances[_investor] = balances[_investor].add(_value);\n', '        emit Minted(_investor, _value);\n', '        emit Transfer(address(0), _investor, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Mints new tokens and assigns them to the target _investor.\n', '     * @dev Can only be called by the issuer or STO attached to the token.\n', '     * @param _investors A list of addresses to whom the minted tokens will be dilivered\n', '     * @param _values A list of number of tokens get minted and transfer to corresponding address of the investor from _investor[] list\n', '     * @return success\n', '     */\n', '    function mintMulti(address[] _investors, uint256[] _values) external returns (bool success) {\n', '        require(_investors.length == _values.length, "Incorrect inputs");\n', '        for (uint256 i = 0; i < _investors.length; i++) {\n', '            mint(_investors[i], _values[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Validate permissions with PermissionManager if it exists, If no Permission return false\n', '     * @dev Note that IModule withPerm will allow ST owner all permissions anyway\n', '     * @dev this allows individual modules to override this logic if needed (to not allow ST owner all permissions)\n', '     * @param _delegate address of delegate\n', '     * @param _module address of PermissionManager module\n', '     * @param _perm the permissions\n', '     * @return success\n', '     */\n', '    function checkPermission(address _delegate, address _module, bytes32 _perm) public view returns(bool) {\n', '        for (uint256 i = 0; i < modules[PERMISSION_KEY].length; i++) {\n', '            if (!modulesToData[modules[PERMISSION_KEY][i]].isArchived)\n', '                return TokenLib.checkPermission(modules[PERMISSION_KEY], _delegate, _module, _perm);\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function _burn(address _from, uint256 _value, bytes _data) internal returns(bool) {\n', '        require(_value <= balances[_from], "Value too high");\n', '        bool verified = _updateTransfer(_from, address(0), _value, _data);\n', '        _adjustTotalSupplyCheckpoints();\n', '        balances[_from] = balances[_from].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burnt(_from, _value);\n', '        emit Transfer(_from, address(0), _value);\n', '        return verified;\n', '    }\n', '\n', '    /**\n', '     * @notice Burn function used to burn the securityToken\n', '     * @param _value No. of tokens that get burned\n', '     * @param _data data to indicate validation\n', '     */\n', '    function burnWithData(uint256 _value, bytes _data) public onlyModule(BURN_KEY) {\n', '        require(_burn(msg.sender, _value, _data), "Burn invalid");\n', '    }\n', '\n', '    /**\n', '     * @notice Burn function used to burn the securityToken on behalf of someone else\n', '     * @param _from Address for whom to burn tokens\n', '     * @param _value No. of tokens that get burned\n', '     * @param _data data to indicate validation\n', '     */\n', '    function burnFromWithData(address _from, uint256 _value, bytes _data) public onlyModule(BURN_KEY) {\n', '        require(_value <= allowed[_from][msg.sender], "Value too high");\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        require(_burn(_from, _value, _data), "Burn invalid");\n', '    }\n', '\n', '    /**\n', '     * @notice Creates a checkpoint that can be used to query historical balances / totalSuppy\n', '     * @return uint256\n', '     */\n', '    function createCheckpoint() external onlyModuleOrOwner(CHECKPOINT_KEY) returns(uint256) {\n', '        require(currentCheckpointId < 2**256 - 1);\n', '        currentCheckpointId = currentCheckpointId + 1;\n', '        /*solium-disable-next-line security/no-block-members*/\n', '        checkpointTimes.push(now);\n', '        /*solium-disable-next-line security/no-block-members*/\n', '        emit CheckpointCreated(currentCheckpointId, now);\n', '        return currentCheckpointId;\n', '    }\n', '\n', '    /**\n', '     * @notice Gets list of times that checkpoints were created\n', '     * @return List of checkpoint times\n', '     */\n', '    function getCheckpointTimes() external view returns(uint256[]) {\n', '        return checkpointTimes;\n', '    }\n', '\n', '    /**\n', '     * @notice Queries totalSupply as of a defined checkpoint\n', '     * @param _checkpointId Checkpoint ID to query\n', '     * @return uint256\n', '     */\n', '    function totalSupplyAt(uint256 _checkpointId) external view returns(uint256) {\n', '        require(_checkpointId <= currentCheckpointId);\n', '        return TokenLib.getValueAt(checkpointTotalSupply, _checkpointId, totalSupply());\n', '    }\n', '\n', '    /**\n', '     * @notice Queries balances as of a defined checkpoint\n', '     * @param _investor Investor to query balance for\n', '     * @param _checkpointId Checkpoint ID to query as of\n', '     */\n', '    function balanceOfAt(address _investor, uint256 _checkpointId) public view returns(uint256) {\n', '        require(_checkpointId <= currentCheckpointId);\n', '        return TokenLib.getValueAt(checkpointBalances[_investor], _checkpointId, balanceOf(_investor));\n', '    }\n', '\n', '    /**\n', '     * @notice Used by the issuer to set the controller addresses\n', '     * @param _controller address of the controller\n', '     */\n', '    function setController(address _controller) public onlyOwner {\n', '        require(!controllerDisabled);\n', '        emit SetController(controller, _controller);\n', '        controller = _controller;\n', '    }\n', '\n', '    /**\n', '     * @notice Used by the issuer to permanently disable controller functionality\n', '     * @dev enabled via feature switch "disableControllerAllowed"\n', '     */\n', '    function disableController() external isEnabled("disableControllerAllowed") onlyOwner {\n', '        require(!controllerDisabled);\n', '        controllerDisabled = true;\n', '        delete controller;\n', '        /*solium-disable-next-line security/no-block-members*/\n', '        emit DisableController(now);\n', '    }\n', '\n', '    /**\n', '     * @notice Used by a controller to execute a forced transfer\n', '     * @param _from address from which to take tokens\n', '     * @param _to address where to send tokens\n', '     * @param _value amount of tokens to transfer\n', '     * @param _data data to indicate validation\n', '     * @param _log data attached to the transfer by controller to emit in event\n', '     */\n', '    function forceTransfer(address _from, address _to, uint256 _value, bytes _data, bytes _log) public onlyController {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        bool verified = _updateTransfer(_from, _to, _value, _data);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit ForceTransfer(msg.sender, _from, _to, _value, verified, _log);\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @notice Used by a controller to execute a forced burn\n', '     * @param _from address from which to take tokens\n', '     * @param _value amount of tokens to transfer\n', '     * @param _data data to indicate validation\n', '     * @param _log data attached to the transfer by controller to emit in event\n', '     */\n', '    function forceBurn(address _from, uint256 _value, bytes _data, bytes _log) public onlyController {\n', '        bool verified = _burn(_from, _value, _data);\n', '        emit ForceBurn(msg.sender, _from, _value, verified, _log);\n', '    }\n', '\n', '    /**\n', '     * @notice Returns the version of the SecurityToken\n', '     */\n', '    function getVersion() external view returns(uint8[]) {\n', '        uint8[] memory _version = new uint8[](3);\n', '        _version[0] = securityTokenVersion.major;\n', '        _version[1] = securityTokenVersion.minor;\n', '        _version[2] = securityTokenVersion.patch;\n', '        return _version;\n', '    }\n', '\n', '}']