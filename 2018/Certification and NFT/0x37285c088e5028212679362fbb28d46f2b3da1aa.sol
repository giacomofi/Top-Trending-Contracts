['pragma solidity 0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/Restricted.sol\n', '\n', '/** @title Restricted\n', ' *  Exposes onlyMonetha modifier\n', ' */\n', 'contract Restricted is Ownable {\n', '\n', '    //MonethaAddress set event\n', '    event MonethaAddressSet(\n', '        address _address,\n', '        bool _isMonethaAddress\n', '    );\n', '\n', '    mapping (address => bool) public isMonethaAddress;\n', '\n', '    /**\n', '     *  Restrict methods in such way, that they can be invoked only by monethaAddress account.\n', '     */\n', '    modifier onlyMonetha() {\n', '        require(isMonethaAddress[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     *  Allows owner to set new monetha address\n', '     */\n', '    function setMonethaAddress(address _address, bool _isMonethaAddress) onlyOwner public {\n', '        isMonethaAddress[_address] = _isMonethaAddress;\n', '\n', '        MonethaAddressSet(_address, _isMonethaAddress);\n', '    }\n', '}\n', '\n', '// File: contracts/SafeDestructible.sol\n', '\n', '/**\n', ' * @title SafeDestructible\n', ' * Base contract that can be destroyed by owner.\n', ' * Can be destructed if there are no funds on contract balance.\n', ' */\n', 'contract SafeDestructible is Ownable {\n', '    function destroy() onlyOwner public {\n', '        require(this.balance == 0);\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Contactable.sol\n', '\n', '/**\n', ' * @title Contactable token\n', ' * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\n', ' * contact information.\n', ' */\n', 'contract Contactable is Ownable{\n', '\n', '    string public contactInformation;\n', '\n', '    /**\n', '     * @dev Allows the owner to set a string with their contact information.\n', '     * @param info The contact information to attach to the contract.\n', '     */\n', '    function setContactInformation(string info) onlyOwner public {\n', '         contactInformation = info;\n', '     }\n', '}\n', '\n', '// File: contracts/MerchantWallet.sol\n', '\n', '/**\n', ' *  @title MerchantWallet\n', ' *  Serves as a public Merchant profile with merchant profile info,\n', ' *      payment settings and latest reputation value.\n', ' *  Also MerchantWallet accepts payments for orders.\n', ' */\n', '\n', 'contract MerchantWallet is Pausable, SafeDestructible, Contactable, Restricted {\n', '\n', '    string constant VERSION = "0.3";\n', '\n', '    /// Address of merchant&#39;s account, that can withdraw from wallet\n', '    address public merchantAccount;\n', '\n', '    /// Unique Merchant identifier hash\n', '    bytes32 public merchantIdHash;\n', '\n', '    /// profileMap stores general information about the merchant\n', '    mapping (string=>string) profileMap;\n', '\n', '    /// paymentSettingsMap stores payment and order settings for the merchant\n', '    mapping (string=>string) paymentSettingsMap;\n', '\n', '    /// compositeReputationMap stores composite reputation, that compraises from several metrics\n', '    mapping (string=>uint32) compositeReputationMap;\n', '\n', '    /// number of last digits in compositeReputation for fractional part\n', '    uint8 public constant REPUTATION_DECIMALS = 4;\n', '\n', '    modifier onlyMerchant() {\n', '        require(msg.sender == merchantAccount);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     *  @param _merchantAccount Address of merchant&#39;s account, that can withdraw from wallet\n', '     *  @param _merchantId Merchant identifier\n', '     */\n', '    function MerchantWallet(address _merchantAccount, string _merchantId) public {\n', '        require(_merchantAccount != 0x0);\n', '        require(bytes(_merchantId).length > 0);\n', '\n', '        merchantAccount = _merchantAccount;\n', '        merchantIdHash = keccak256(_merchantId);\n', '    }\n', '\n', '    /**\n', '     *  Accept payment from MonethaGateway\n', '     */\n', '    function () external payable {\n', '    }\n', '\n', '    /**\n', '     *  @return profile info by string key\n', '     */\n', '    function profile(string key) external constant returns (string) {\n', '        return profileMap[key];\n', '    }\n', '\n', '    /**\n', '     *  @return payment setting by string key\n', '     */\n', '    function paymentSettings(string key) external constant returns (string) {\n', '        return paymentSettingsMap[key];\n', '    }\n', '\n', '    /**\n', '     *  @return composite reputation value by string key\n', '     */\n', '    function compositeReputation(string key) external constant returns (uint32) {\n', '        return compositeReputationMap[key];\n', '    }\n', '\n', '    /**\n', '     *  Set profile info by string key\n', '     */\n', '    function setProfile(\n', '        string profileKey,\n', '        string profileValue,\n', '        string repKey,\n', '        uint32 repValue\n', '    ) external onlyOwner\n', '    {\n', '        profileMap[profileKey] = profileValue;\n', '\n', '        if (bytes(repKey).length != 0) {\n', '            compositeReputationMap[repKey] = repValue;\n', '        }\n', '    }\n', '\n', '    /**\n', '     *  Set payment setting by string key\n', '     */\n', '    function setPaymentSettings(string key, string value) external onlyOwner {\n', '        paymentSettingsMap[key] = value;\n', '    }\n', '\n', '    /**\n', '     *  Set composite reputation value by string key\n', '     */\n', '    function setCompositeReputation(string key, uint32 value) external onlyMonetha {\n', '        compositeReputationMap[key] = value;\n', '    }\n', '\n', '    /**\n', '     *  Allows withdrawal of funds to beneficiary address\n', '     */\n', '    function doWithdrawal(address beneficiary, uint amount) private {\n', '        require(beneficiary != 0x0);\n', '        beneficiary.transfer(amount);\n', '    }\n', '\n', '    /**\n', '     *  Allows merchant to withdraw funds to beneficiary address\n', '     */\n', '    function withdrawTo(address beneficiary, uint amount) public onlyMerchant whenNotPaused {\n', '        doWithdrawal(beneficiary, amount);\n', '    }\n', '\n', '    /**\n', '     *  Allows merchant to withdraw funds to it&#39;s own account\n', '     */\n', '    function withdraw(uint amount) external {\n', '        withdrawTo(msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '     *  Allows merchant to withdraw funds to beneficiary address with a transaction\n', '     */\n', '    function sendTo(address beneficiary, uint amount) external onlyMerchant whenNotPaused {\n', '        doWithdrawal(beneficiary, amount);\n', '    }\n', '\n', '    /**\n', '     *  Allows merchant to change it&#39;s account address\n', '     */\n', '    function changeMerchantAccount(address newAccount) external onlyMerchant whenNotPaused {\n', '        merchantAccount = newAccount;\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Destructible.sol\n', '\n', '/**\n', ' * @title Destructible\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n', ' */\n', 'contract Destructible is Ownable {\n', '\n', '  function Destructible() payable { }\n', '\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner public {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/MonethaGateway.sol\n', '\n', '/**\n', ' *  @title MonethaGateway\n', ' *\n', ' *  MonethaGateway forward funds from order payment to merchant&#39;s wallet and collects Monetha fee.\n', ' */\n', 'contract MonethaGateway is Pausable, Contactable, Destructible, Restricted {\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    string constant VERSION = "0.4";\n', '\n', '    /**\n', '     *  Fee permille of Monetha fee.\n', '     *  1 permille (‰) = 0.1 percent (%)\n', '     *  15‰ = 1.5%\n', '     */\n', '    uint public constant FEE_PERMILLE = 15;\n', '    \n', '    /**\n', '     *  Address of Monetha Vault for fee collection\n', '     */\n', '    address public monethaVault;\n', '\n', '    /**\n', '     *  Account for permissions managing\n', '     */\n', '    address public admin;\n', '\n', '    event PaymentProcessed(address merchantWallet, uint merchantIncome, uint monethaIncome);\n', '\n', '    /**\n', '     *  @param _monethaVault Address of Monetha Vault\n', '     */\n', '    function MonethaGateway(address _monethaVault, address _admin) public {\n', '        require(_monethaVault != 0x0);\n', '        monethaVault = _monethaVault;\n', '        \n', '        setAdmin(_admin);\n', '    }\n', '    \n', '    /**\n', '     *  acceptPayment accept payment from PaymentAcceptor, forwards it to merchant&#39;s wallet\n', '     *      and collects Monetha fee.\n', '     *  @param _merchantWallet address of merchant&#39;s wallet for fund transfer\n', '     *  @param _monethaFee is a fee collected by Monetha\n', '     */\n', '    function acceptPayment(address _merchantWallet, uint _monethaFee) external payable onlyMonetha whenNotPaused {\n', '        require(_merchantWallet != 0x0);\n', '        require(_monethaFee >= 0 && _monethaFee <= FEE_PERMILLE.mul(msg.value).div(1000)); // Monetha fee cannot be greater than 1.5% of payment\n', '\n', '        uint merchantIncome = msg.value.sub(_monethaFee);\n', '\n', '        _merchantWallet.transfer(merchantIncome);\n', '        monethaVault.transfer(_monethaFee);\n', '\n', '        PaymentProcessed(_merchantWallet, merchantIncome, _monethaFee);\n', '    }\n', '\n', '    /**\n', '     *  changeMonethaVault allows owner to change address of Monetha Vault.\n', '     *  @param newVault New address of Monetha Vault\n', '     */\n', '    function changeMonethaVault(address newVault) external onlyOwner whenNotPaused {\n', '        monethaVault = newVault;\n', '    }\n', '\n', '    /**\n', '     *  Allows other monetha account or contract to set new monetha address\n', '     */\n', '    function setMonethaAddress(address _address, bool _isMonethaAddress) public {\n', '        require(msg.sender == admin || msg.sender == owner);\n', '\n', '        isMonethaAddress[_address] = _isMonethaAddress;\n', '\n', '        MonethaAddressSet(_address, _isMonethaAddress);\n', '    }\n', '\n', '    /**\n', '     *  setAdmin allows owner to change address of admin.\n', '     *  @param _admin New address of admin\n', '     */\n', '    function setAdmin(address _admin) public onlyOwner {\n', '        require(_admin != 0x0);\n', '        admin = _admin;\n', '    }\n', '}\n', '\n', '// File: contracts/PrivatePaymentProcessor.sol\n', '\n', 'contract PrivatePaymentProcessor is Pausable, Destructible, Contactable, Restricted {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string constant VERSION = "0.4";\n', '\n', '    // Order paid event\n', '    event OrderPaid(\n', '        uint indexed _orderId,\n', '        address indexed _originAddress,\n', '        uint _price,\n', '        uint _monethaFee\n', '    );\n', '\n', '    // Payments have been processed event\n', '    event PaymentsProcessed(\n', '        address indexed _merchantAddress,\n', '        uint _amount,\n', '        uint _fee\n', '    );\n', '\n', '    // PaymentRefunding is an event when refunding initialized\n', '    event PaymentRefunding(\n', '         uint indexed _orderId,\n', '         address indexed _clientAddress,\n', '         uint _amount,\n', '         string _refundReason);\n', '\n', '    // PaymentWithdrawn event is fired when payment is withdrawn\n', '    event PaymentWithdrawn(\n', '        uint indexed _orderId,\n', '        address indexed _clientAddress,\n', '        uint amount);\n', '\n', '    /// MonethaGateway contract for payment processing\n', '    MonethaGateway public monethaGateway;\n', '\n', '    /// Address of MerchantWallet, where merchant reputation and funds are stored\n', '    MerchantWallet public merchantWallet;\n', '\n', '    /// Merchant identifier hash, that associates with the acceptor\n', '    bytes32 public merchantIdHash;\n', '\n', '    enum WithdrawState {Null, Pending, Withdrawn}\n', '\n', '    struct Withdraw {\n', '        WithdrawState state;\n', '        uint amount;\n', '        address clientAddress;\n', '    }\n', '\n', '    mapping (uint=>Withdraw) public withdrawals;\n', '\n', '    /**\n', '     *  Private Payment Processor sets Monetha Gateway and Merchant Wallet.\n', '     *  @param _merchantId Merchant of the acceptor\n', '     *  @param _monethaGateway Address of MonethaGateway contract for payment processing\n', '     *  @param _merchantWallet Address of MerchantWallet, where merchant reputation and funds are stored\n', '     */\n', '    function PrivatePaymentProcessor(\n', '        string _merchantId,\n', '        MonethaGateway _monethaGateway,\n', '        MerchantWallet _merchantWallet\n', '    ) public\n', '    {\n', '        require(bytes(_merchantId).length > 0);\n', '\n', '        merchantIdHash = keccak256(_merchantId);\n', '\n', '        setMonethaGateway(_monethaGateway);\n', '        setMerchantWallet(_merchantWallet);\n', '    }\n', '\n', '    /**\n', '     *  payForOrder is used by order wallet/client to pay for the order\n', '     *  @param _orderId Identifier of the order\n', '     *  @param _originAddress buyer address\n', '     *  @param _monethaFee is fee collected by Monetha\n', '     */\n', '    function payForOrder(\n', '        uint _orderId,\n', '        address _originAddress,\n', '        uint _monethaFee\n', '    ) external payable whenNotPaused\n', '    {\n', '        require(_orderId > 0);\n', '        require(_originAddress != 0x0);\n', '        require(msg.value > 0);\n', '\n', '        monethaGateway.acceptPayment.value(msg.value)(merchantWallet, _monethaFee);\n', '\n', '        // log payment event\n', '        OrderPaid(_orderId, _originAddress, msg.value, _monethaFee);\n', '    }\n', '\n', '    /**\n', '     *  refundPayment used in case order cannot be processed and funds need to be returned\n', '     *  This function initiate process of funds refunding to the client.\n', '     *  @param _orderId Identifier of the order\n', '     *  @param _clientAddress is an address of client\n', '     *  @param _refundReason Order refund reason\n', '     */\n', '    function refundPayment(\n', '        uint _orderId,\n', '        address _clientAddress,\n', '        string _refundReason\n', '    ) external payable onlyMonetha whenNotPaused\n', '    {\n', '        require(_orderId > 0);\n', '        require(_clientAddress != 0x0);\n', '        require(msg.value > 0);\n', '        require(WithdrawState.Null == withdrawals[_orderId].state);\n', '\n', '        // create withdraw\n', '        withdrawals[_orderId] = Withdraw({\n', '            state: WithdrawState.Pending,\n', '            amount: msg.value,\n', '            clientAddress: _clientAddress\n', '            });\n', '\n', '        // log refunding\n', '        PaymentRefunding(_orderId, _clientAddress, msg.value, _refundReason);\n', '    }\n', '\n', '    /**\n', '     *  withdrawRefund performs fund transfer to the client&#39;s account.\n', '     *  @param _orderId Identifier of the order\n', '     */\n', '    function withdrawRefund(uint _orderId)\n', '    external whenNotPaused\n', '    {\n', '        Withdraw storage withdraw = withdrawals[_orderId];\n', '        require(WithdrawState.Pending == withdraw.state);\n', '\n', '        address clientAddress = withdraw.clientAddress;\n', '        uint amount = withdraw.amount;\n', '\n', '        // changing withdraw state before transfer\n', '        withdraw.state = WithdrawState.Withdrawn;\n', '\n', '        // transfer fund to clients account\n', '        clientAddress.transfer(amount);\n', '\n', '        // log withdrawn\n', '        PaymentWithdrawn(_orderId, clientAddress, amount);\n', '    }\n', '\n', '    /**\n', '     *  setMonethaGateway allows owner to change address of MonethaGateway.\n', '     *  @param _newGateway Address of new MonethaGateway contract\n', '     */\n', '    function setMonethaGateway(MonethaGateway _newGateway) public onlyOwner {\n', '        require(address(_newGateway) != 0x0);\n', '\n', '        monethaGateway = _newGateway;\n', '    }\n', '\n', '    /**\n', '     *  setMerchantWallet allows owner to change address of MerchantWallet.\n', '     *  @param _newWallet Address of new MerchantWallet contract\n', '     */\n', '    function setMerchantWallet(MerchantWallet _newWallet) public onlyOwner {\n', '        require(address(_newWallet) != 0x0);\n', '        require(_newWallet.merchantIdHash() == merchantIdHash);\n', '\n', '        merchantWallet = _newWallet;\n', '    }\n', '}']
['pragma solidity 0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/Restricted.sol\n', '\n', '/** @title Restricted\n', ' *  Exposes onlyMonetha modifier\n', ' */\n', 'contract Restricted is Ownable {\n', '\n', '    //MonethaAddress set event\n', '    event MonethaAddressSet(\n', '        address _address,\n', '        bool _isMonethaAddress\n', '    );\n', '\n', '    mapping (address => bool) public isMonethaAddress;\n', '\n', '    /**\n', '     *  Restrict methods in such way, that they can be invoked only by monethaAddress account.\n', '     */\n', '    modifier onlyMonetha() {\n', '        require(isMonethaAddress[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     *  Allows owner to set new monetha address\n', '     */\n', '    function setMonethaAddress(address _address, bool _isMonethaAddress) onlyOwner public {\n', '        isMonethaAddress[_address] = _isMonethaAddress;\n', '\n', '        MonethaAddressSet(_address, _isMonethaAddress);\n', '    }\n', '}\n', '\n', '// File: contracts/SafeDestructible.sol\n', '\n', '/**\n', ' * @title SafeDestructible\n', ' * Base contract that can be destroyed by owner.\n', ' * Can be destructed if there are no funds on contract balance.\n', ' */\n', 'contract SafeDestructible is Ownable {\n', '    function destroy() onlyOwner public {\n', '        require(this.balance == 0);\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Contactable.sol\n', '\n', '/**\n', ' * @title Contactable token\n', ' * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\n', ' * contact information.\n', ' */\n', 'contract Contactable is Ownable{\n', '\n', '    string public contactInformation;\n', '\n', '    /**\n', '     * @dev Allows the owner to set a string with their contact information.\n', '     * @param info The contact information to attach to the contract.\n', '     */\n', '    function setContactInformation(string info) onlyOwner public {\n', '         contactInformation = info;\n', '     }\n', '}\n', '\n', '// File: contracts/MerchantWallet.sol\n', '\n', '/**\n', ' *  @title MerchantWallet\n', ' *  Serves as a public Merchant profile with merchant profile info,\n', ' *      payment settings and latest reputation value.\n', ' *  Also MerchantWallet accepts payments for orders.\n', ' */\n', '\n', 'contract MerchantWallet is Pausable, SafeDestructible, Contactable, Restricted {\n', '\n', '    string constant VERSION = "0.3";\n', '\n', "    /// Address of merchant's account, that can withdraw from wallet\n", '    address public merchantAccount;\n', '\n', '    /// Unique Merchant identifier hash\n', '    bytes32 public merchantIdHash;\n', '\n', '    /// profileMap stores general information about the merchant\n', '    mapping (string=>string) profileMap;\n', '\n', '    /// paymentSettingsMap stores payment and order settings for the merchant\n', '    mapping (string=>string) paymentSettingsMap;\n', '\n', '    /// compositeReputationMap stores composite reputation, that compraises from several metrics\n', '    mapping (string=>uint32) compositeReputationMap;\n', '\n', '    /// number of last digits in compositeReputation for fractional part\n', '    uint8 public constant REPUTATION_DECIMALS = 4;\n', '\n', '    modifier onlyMerchant() {\n', '        require(msg.sender == merchantAccount);\n', '        _;\n', '    }\n', '\n', '    /**\n', "     *  @param _merchantAccount Address of merchant's account, that can withdraw from wallet\n", '     *  @param _merchantId Merchant identifier\n', '     */\n', '    function MerchantWallet(address _merchantAccount, string _merchantId) public {\n', '        require(_merchantAccount != 0x0);\n', '        require(bytes(_merchantId).length > 0);\n', '\n', '        merchantAccount = _merchantAccount;\n', '        merchantIdHash = keccak256(_merchantId);\n', '    }\n', '\n', '    /**\n', '     *  Accept payment from MonethaGateway\n', '     */\n', '    function () external payable {\n', '    }\n', '\n', '    /**\n', '     *  @return profile info by string key\n', '     */\n', '    function profile(string key) external constant returns (string) {\n', '        return profileMap[key];\n', '    }\n', '\n', '    /**\n', '     *  @return payment setting by string key\n', '     */\n', '    function paymentSettings(string key) external constant returns (string) {\n', '        return paymentSettingsMap[key];\n', '    }\n', '\n', '    /**\n', '     *  @return composite reputation value by string key\n', '     */\n', '    function compositeReputation(string key) external constant returns (uint32) {\n', '        return compositeReputationMap[key];\n', '    }\n', '\n', '    /**\n', '     *  Set profile info by string key\n', '     */\n', '    function setProfile(\n', '        string profileKey,\n', '        string profileValue,\n', '        string repKey,\n', '        uint32 repValue\n', '    ) external onlyOwner\n', '    {\n', '        profileMap[profileKey] = profileValue;\n', '\n', '        if (bytes(repKey).length != 0) {\n', '            compositeReputationMap[repKey] = repValue;\n', '        }\n', '    }\n', '\n', '    /**\n', '     *  Set payment setting by string key\n', '     */\n', '    function setPaymentSettings(string key, string value) external onlyOwner {\n', '        paymentSettingsMap[key] = value;\n', '    }\n', '\n', '    /**\n', '     *  Set composite reputation value by string key\n', '     */\n', '    function setCompositeReputation(string key, uint32 value) external onlyMonetha {\n', '        compositeReputationMap[key] = value;\n', '    }\n', '\n', '    /**\n', '     *  Allows withdrawal of funds to beneficiary address\n', '     */\n', '    function doWithdrawal(address beneficiary, uint amount) private {\n', '        require(beneficiary != 0x0);\n', '        beneficiary.transfer(amount);\n', '    }\n', '\n', '    /**\n', '     *  Allows merchant to withdraw funds to beneficiary address\n', '     */\n', '    function withdrawTo(address beneficiary, uint amount) public onlyMerchant whenNotPaused {\n', '        doWithdrawal(beneficiary, amount);\n', '    }\n', '\n', '    /**\n', "     *  Allows merchant to withdraw funds to it's own account\n", '     */\n', '    function withdraw(uint amount) external {\n', '        withdrawTo(msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '     *  Allows merchant to withdraw funds to beneficiary address with a transaction\n', '     */\n', '    function sendTo(address beneficiary, uint amount) external onlyMerchant whenNotPaused {\n', '        doWithdrawal(beneficiary, amount);\n', '    }\n', '\n', '    /**\n', "     *  Allows merchant to change it's account address\n", '     */\n', '    function changeMerchantAccount(address newAccount) external onlyMerchant whenNotPaused {\n', '        merchantAccount = newAccount;\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Destructible.sol\n', '\n', '/**\n', ' * @title Destructible\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n', ' */\n', 'contract Destructible is Ownable {\n', '\n', '  function Destructible() payable { }\n', '\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner public {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/MonethaGateway.sol\n', '\n', '/**\n', ' *  @title MonethaGateway\n', ' *\n', " *  MonethaGateway forward funds from order payment to merchant's wallet and collects Monetha fee.\n", ' */\n', 'contract MonethaGateway is Pausable, Contactable, Destructible, Restricted {\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    string constant VERSION = "0.4";\n', '\n', '    /**\n', '     *  Fee permille of Monetha fee.\n', '     *  1 permille (‰) = 0.1 percent (%)\n', '     *  15‰ = 1.5%\n', '     */\n', '    uint public constant FEE_PERMILLE = 15;\n', '    \n', '    /**\n', '     *  Address of Monetha Vault for fee collection\n', '     */\n', '    address public monethaVault;\n', '\n', '    /**\n', '     *  Account for permissions managing\n', '     */\n', '    address public admin;\n', '\n', '    event PaymentProcessed(address merchantWallet, uint merchantIncome, uint monethaIncome);\n', '\n', '    /**\n', '     *  @param _monethaVault Address of Monetha Vault\n', '     */\n', '    function MonethaGateway(address _monethaVault, address _admin) public {\n', '        require(_monethaVault != 0x0);\n', '        monethaVault = _monethaVault;\n', '        \n', '        setAdmin(_admin);\n', '    }\n', '    \n', '    /**\n', "     *  acceptPayment accept payment from PaymentAcceptor, forwards it to merchant's wallet\n", '     *      and collects Monetha fee.\n', "     *  @param _merchantWallet address of merchant's wallet for fund transfer\n", '     *  @param _monethaFee is a fee collected by Monetha\n', '     */\n', '    function acceptPayment(address _merchantWallet, uint _monethaFee) external payable onlyMonetha whenNotPaused {\n', '        require(_merchantWallet != 0x0);\n', '        require(_monethaFee >= 0 && _monethaFee <= FEE_PERMILLE.mul(msg.value).div(1000)); // Monetha fee cannot be greater than 1.5% of payment\n', '\n', '        uint merchantIncome = msg.value.sub(_monethaFee);\n', '\n', '        _merchantWallet.transfer(merchantIncome);\n', '        monethaVault.transfer(_monethaFee);\n', '\n', '        PaymentProcessed(_merchantWallet, merchantIncome, _monethaFee);\n', '    }\n', '\n', '    /**\n', '     *  changeMonethaVault allows owner to change address of Monetha Vault.\n', '     *  @param newVault New address of Monetha Vault\n', '     */\n', '    function changeMonethaVault(address newVault) external onlyOwner whenNotPaused {\n', '        monethaVault = newVault;\n', '    }\n', '\n', '    /**\n', '     *  Allows other monetha account or contract to set new monetha address\n', '     */\n', '    function setMonethaAddress(address _address, bool _isMonethaAddress) public {\n', '        require(msg.sender == admin || msg.sender == owner);\n', '\n', '        isMonethaAddress[_address] = _isMonethaAddress;\n', '\n', '        MonethaAddressSet(_address, _isMonethaAddress);\n', '    }\n', '\n', '    /**\n', '     *  setAdmin allows owner to change address of admin.\n', '     *  @param _admin New address of admin\n', '     */\n', '    function setAdmin(address _admin) public onlyOwner {\n', '        require(_admin != 0x0);\n', '        admin = _admin;\n', '    }\n', '}\n', '\n', '// File: contracts/PrivatePaymentProcessor.sol\n', '\n', 'contract PrivatePaymentProcessor is Pausable, Destructible, Contactable, Restricted {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string constant VERSION = "0.4";\n', '\n', '    // Order paid event\n', '    event OrderPaid(\n', '        uint indexed _orderId,\n', '        address indexed _originAddress,\n', '        uint _price,\n', '        uint _monethaFee\n', '    );\n', '\n', '    // Payments have been processed event\n', '    event PaymentsProcessed(\n', '        address indexed _merchantAddress,\n', '        uint _amount,\n', '        uint _fee\n', '    );\n', '\n', '    // PaymentRefunding is an event when refunding initialized\n', '    event PaymentRefunding(\n', '         uint indexed _orderId,\n', '         address indexed _clientAddress,\n', '         uint _amount,\n', '         string _refundReason);\n', '\n', '    // PaymentWithdrawn event is fired when payment is withdrawn\n', '    event PaymentWithdrawn(\n', '        uint indexed _orderId,\n', '        address indexed _clientAddress,\n', '        uint amount);\n', '\n', '    /// MonethaGateway contract for payment processing\n', '    MonethaGateway public monethaGateway;\n', '\n', '    /// Address of MerchantWallet, where merchant reputation and funds are stored\n', '    MerchantWallet public merchantWallet;\n', '\n', '    /// Merchant identifier hash, that associates with the acceptor\n', '    bytes32 public merchantIdHash;\n', '\n', '    enum WithdrawState {Null, Pending, Withdrawn}\n', '\n', '    struct Withdraw {\n', '        WithdrawState state;\n', '        uint amount;\n', '        address clientAddress;\n', '    }\n', '\n', '    mapping (uint=>Withdraw) public withdrawals;\n', '\n', '    /**\n', '     *  Private Payment Processor sets Monetha Gateway and Merchant Wallet.\n', '     *  @param _merchantId Merchant of the acceptor\n', '     *  @param _monethaGateway Address of MonethaGateway contract for payment processing\n', '     *  @param _merchantWallet Address of MerchantWallet, where merchant reputation and funds are stored\n', '     */\n', '    function PrivatePaymentProcessor(\n', '        string _merchantId,\n', '        MonethaGateway _monethaGateway,\n', '        MerchantWallet _merchantWallet\n', '    ) public\n', '    {\n', '        require(bytes(_merchantId).length > 0);\n', '\n', '        merchantIdHash = keccak256(_merchantId);\n', '\n', '        setMonethaGateway(_monethaGateway);\n', '        setMerchantWallet(_merchantWallet);\n', '    }\n', '\n', '    /**\n', '     *  payForOrder is used by order wallet/client to pay for the order\n', '     *  @param _orderId Identifier of the order\n', '     *  @param _originAddress buyer address\n', '     *  @param _monethaFee is fee collected by Monetha\n', '     */\n', '    function payForOrder(\n', '        uint _orderId,\n', '        address _originAddress,\n', '        uint _monethaFee\n', '    ) external payable whenNotPaused\n', '    {\n', '        require(_orderId > 0);\n', '        require(_originAddress != 0x0);\n', '        require(msg.value > 0);\n', '\n', '        monethaGateway.acceptPayment.value(msg.value)(merchantWallet, _monethaFee);\n', '\n', '        // log payment event\n', '        OrderPaid(_orderId, _originAddress, msg.value, _monethaFee);\n', '    }\n', '\n', '    /**\n', '     *  refundPayment used in case order cannot be processed and funds need to be returned\n', '     *  This function initiate process of funds refunding to the client.\n', '     *  @param _orderId Identifier of the order\n', '     *  @param _clientAddress is an address of client\n', '     *  @param _refundReason Order refund reason\n', '     */\n', '    function refundPayment(\n', '        uint _orderId,\n', '        address _clientAddress,\n', '        string _refundReason\n', '    ) external payable onlyMonetha whenNotPaused\n', '    {\n', '        require(_orderId > 0);\n', '        require(_clientAddress != 0x0);\n', '        require(msg.value > 0);\n', '        require(WithdrawState.Null == withdrawals[_orderId].state);\n', '\n', '        // create withdraw\n', '        withdrawals[_orderId] = Withdraw({\n', '            state: WithdrawState.Pending,\n', '            amount: msg.value,\n', '            clientAddress: _clientAddress\n', '            });\n', '\n', '        // log refunding\n', '        PaymentRefunding(_orderId, _clientAddress, msg.value, _refundReason);\n', '    }\n', '\n', '    /**\n', "     *  withdrawRefund performs fund transfer to the client's account.\n", '     *  @param _orderId Identifier of the order\n', '     */\n', '    function withdrawRefund(uint _orderId)\n', '    external whenNotPaused\n', '    {\n', '        Withdraw storage withdraw = withdrawals[_orderId];\n', '        require(WithdrawState.Pending == withdraw.state);\n', '\n', '        address clientAddress = withdraw.clientAddress;\n', '        uint amount = withdraw.amount;\n', '\n', '        // changing withdraw state before transfer\n', '        withdraw.state = WithdrawState.Withdrawn;\n', '\n', '        // transfer fund to clients account\n', '        clientAddress.transfer(amount);\n', '\n', '        // log withdrawn\n', '        PaymentWithdrawn(_orderId, clientAddress, amount);\n', '    }\n', '\n', '    /**\n', '     *  setMonethaGateway allows owner to change address of MonethaGateway.\n', '     *  @param _newGateway Address of new MonethaGateway contract\n', '     */\n', '    function setMonethaGateway(MonethaGateway _newGateway) public onlyOwner {\n', '        require(address(_newGateway) != 0x0);\n', '\n', '        monethaGateway = _newGateway;\n', '    }\n', '\n', '    /**\n', '     *  setMerchantWallet allows owner to change address of MerchantWallet.\n', '     *  @param _newWallet Address of new MerchantWallet contract\n', '     */\n', '    function setMerchantWallet(MerchantWallet _newWallet) public onlyOwner {\n', '        require(address(_newWallet) != 0x0);\n', '        require(_newWallet.merchantIdHash() == merchantIdHash);\n', '\n', '        merchantWallet = _newWallet;\n', '    }\n', '}']
