['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'contract MultiEthSender {\n', '    using SafeMath for uint256;\n', '    address public owner;\n', '\n', '    event Send(uint256 _amount, address indexed _receiver);\n', '\n', '    modifier onlyOwner () {\n', '        if (msg.sender == owner) _;\n', '    }\n', '\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function multiSendEth(uint256 amount, address[] list) public payable onlyOwner returns (bool) {\n', '        uint256 balance = address(this).balance;\n', '        uint256 total = amount.mul(uint256(list.length));\n', '        if (total > balance) {\n', '            return false;\n', '        }\n', '        for (uint i = 0; i < list.length; i++) {\n', '            list[i].transfer(amount);\n', '            // emit Send(amount, list[i]);\n', '            // another way to write log\n', '            bytes32 _id = 0x5ce4017cdf5be6a02f39ba5d91777cf13a304b9e024d038bca26189d148feeb9;\n', '            log2(\n', '                bytes32(amount),\n', '                _id,\n', '                bytes32(list[i])\n', '            );\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function () public payable {}\n', '}']