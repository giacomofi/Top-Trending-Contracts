['contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokensНу \n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '            if (balances[msg.sender] >= _value && _value > 0) {\n', '                balances[msg.sender] -= _value;\n', '                balances[_to] += _value;\n', '                Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } \n', '        else\n', '         { return false; }\n', '\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', ' \n', '\n', '\n', 'contract erc20GST is StandardToken {\n', '    using SafeMath for uint256;\n', '    \n', '    uint startPreICO =1525338000;\n', '    uint stopPreICO =1525942800;\n', '    uint start1Week =1525942800;\n', '    uint stop1Week =1527411600;\n', '    uint start2Week =1527411600;\n', '    uint stop2Week =1528880400;\n', '    uint start3Week =1528880400;\n', '    uint stop3Week =1530349200;\n', '    address storeETH = 0xcaAc6e94dAEFC3BB81CA692a8AE9d5C73f54A024;\n', '    address admin =0x4eebcc25cD79CDA7845B6aDD99885348bcbFd04A;\n', '    address tokenSaleStore = 0x02d105f68AbF0Cb98416fD018a25230e80974AbF;\n', '    address tokenPreIcoStore = 0x1714bA62AEcD1D0fdc8c3b10e1d6076A97BA4CBc;\n', '    address tokenStore = 0x58258A4cF4514f6379D320ddC5BcB24A315df0d8;\n', '    uint256 public exchangeRates = 19657;\n', '    uint256 BonusPercent=0;\n', '    address storeAddress;\n', '    \n', '    \n', '    \n', '    function() external payable {\n', '        if(msg.value>=10000000000000000)\n', '        {\n', '            \n', '            if(now < stopPreICO  && now > startPreICO){\n', '                if(msg.value<1000000000000000000){\n', '                     throw;\n', '                }\n', '                if(msg.value>1000000000000000000 && msg.value <= 10000000000000000000){\n', '                    BonusPercent =  35;\n', '                }\n', '                if(msg.value>10000000000000000000 && msg.value <= 50000000000000000000){\n', '                    BonusPercent =  40;\n', '                }\n', '                 if(msg.value>50000000000000000000){\n', '                    BonusPercent = 50; \n', '                }\n', '                storeAddress = tokenPreIcoStore;\n', '            }\n', '            if(now > start1Week && now < stop1Week)\n', '            {\n', '                BonusPercent = 30; \n', '                storeAddress = tokenSaleStore;\n', '            }\n', '            if(now > start2Week && now < stop2Week)\n', '            {\n', '                BonusPercent = 20; \n', '                 storeAddress = tokenSaleStore;\n', '            }\n', '            if(now > start3Week && now < stop3Week)\n', '            {\n', '                BonusPercent = 10; \n', '                 storeAddress = tokenSaleStore;\n', '            }\n', '                uint256 value = msg.value.mul(exchangeRates);\n', '                uint256 bonus = value.div(100).mul(BonusPercent);\n', '                value = value.add(bonus);\n', '            if(balances[storeAddress] >= value && value > 0) {\n', '                storeETH.transfer(msg.value);\n', '                if(balances[storeAddress] >= value && value > 0) {\n', '                    balances[storeAddress] -= value;\n', '                    balances[msg.sender] += value;\n', '                    Transfer(storeAddress, msg.sender,  value);\n', '                }\n', '            }\n', '            else {\n', '                throw;\n', '            }\n', '            \n', '        }\n', '        else {\n', '              throw;\n', '        }\n', '    }\n', '    function setExchangeRates(uint256 _value){\n', '        if(msg.sender==admin){\n', '            if(_value >0){\n', '            exchangeRates = _value;\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    string public name;                   \n', '    uint8 public decimals;                \n', '    string public symbol;                 \n', '    string public version = &#39;gst.01&#39;;  \n', '\n', '    function erc20GST(\n', '        uint8 _decimalUnits \n', '        ) {\n', '        balances[tokenSaleStore] = 300000000000000000000000000;               // Give the creator all initial tokens\n', '        balances[tokenPreIcoStore] = 25000000000000000000000000;  \n', '        balances[tokenStore] = 175000000000000000000000000;     \n', '        totalSupply = 500000000000000000000000000;                        // Update total supply\n', '        name = "GAMESTARS TOKEN";                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = "GST";                               // Set the symbol for display purposes\n', '    }\n', '\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']
['contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokensНу \n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '            if (balances[msg.sender] >= _value && _value > 0) {\n', '                balances[msg.sender] -= _value;\n', '                balances[_to] += _value;\n', '                Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } \n', '        else\n', '         { return false; }\n', '\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', ' \n', '\n', '\n', 'contract erc20GST is StandardToken {\n', '    using SafeMath for uint256;\n', '    \n', '    uint startPreICO =1525338000;\n', '    uint stopPreICO =1525942800;\n', '    uint start1Week =1525942800;\n', '    uint stop1Week =1527411600;\n', '    uint start2Week =1527411600;\n', '    uint stop2Week =1528880400;\n', '    uint start3Week =1528880400;\n', '    uint stop3Week =1530349200;\n', '    address storeETH = 0xcaAc6e94dAEFC3BB81CA692a8AE9d5C73f54A024;\n', '    address admin =0x4eebcc25cD79CDA7845B6aDD99885348bcbFd04A;\n', '    address tokenSaleStore = 0x02d105f68AbF0Cb98416fD018a25230e80974AbF;\n', '    address tokenPreIcoStore = 0x1714bA62AEcD1D0fdc8c3b10e1d6076A97BA4CBc;\n', '    address tokenStore = 0x58258A4cF4514f6379D320ddC5BcB24A315df0d8;\n', '    uint256 public exchangeRates = 19657;\n', '    uint256 BonusPercent=0;\n', '    address storeAddress;\n', '    \n', '    \n', '    \n', '    function() external payable {\n', '        if(msg.value>=10000000000000000)\n', '        {\n', '            \n', '            if(now < stopPreICO  && now > startPreICO){\n', '                if(msg.value<1000000000000000000){\n', '                     throw;\n', '                }\n', '                if(msg.value>1000000000000000000 && msg.value <= 10000000000000000000){\n', '                    BonusPercent =  35;\n', '                }\n', '                if(msg.value>10000000000000000000 && msg.value <= 50000000000000000000){\n', '                    BonusPercent =  40;\n', '                }\n', '                 if(msg.value>50000000000000000000){\n', '                    BonusPercent = 50; \n', '                }\n', '                storeAddress = tokenPreIcoStore;\n', '            }\n', '            if(now > start1Week && now < stop1Week)\n', '            {\n', '                BonusPercent = 30; \n', '                storeAddress = tokenSaleStore;\n', '            }\n', '            if(now > start2Week && now < stop2Week)\n', '            {\n', '                BonusPercent = 20; \n', '                 storeAddress = tokenSaleStore;\n', '            }\n', '            if(now > start3Week && now < stop3Week)\n', '            {\n', '                BonusPercent = 10; \n', '                 storeAddress = tokenSaleStore;\n', '            }\n', '                uint256 value = msg.value.mul(exchangeRates);\n', '                uint256 bonus = value.div(100).mul(BonusPercent);\n', '                value = value.add(bonus);\n', '            if(balances[storeAddress] >= value && value > 0) {\n', '                storeETH.transfer(msg.value);\n', '                if(balances[storeAddress] >= value && value > 0) {\n', '                    balances[storeAddress] -= value;\n', '                    balances[msg.sender] += value;\n', '                    Transfer(storeAddress, msg.sender,  value);\n', '                }\n', '            }\n', '            else {\n', '                throw;\n', '            }\n', '            \n', '        }\n', '        else {\n', '              throw;\n', '        }\n', '    }\n', '    function setExchangeRates(uint256 _value){\n', '        if(msg.sender==admin){\n', '            if(_value >0){\n', '            exchangeRates = _value;\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    string public name;                   \n', '    uint8 public decimals;                \n', '    string public symbol;                 \n', "    string public version = 'gst.01';  \n", '\n', '    function erc20GST(\n', '        uint8 _decimalUnits \n', '        ) {\n', '        balances[tokenSaleStore] = 300000000000000000000000000;               // Give the creator all initial tokens\n', '        balances[tokenPreIcoStore] = 25000000000000000000000000;  \n', '        balances[tokenStore] = 175000000000000000000000000;     \n', '        totalSupply = 500000000000000000000000000;                        // Update total supply\n', '        name = "GAMESTARS TOKEN";                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = "GST";                               // Set the symbol for display purposes\n', '    }\n', '\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']
