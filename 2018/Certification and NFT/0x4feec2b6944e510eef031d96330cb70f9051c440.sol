['pragma solidity ^0.4.23;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    require(c / a == b, "Overflow - Multiplication");\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a, "Underflow - Subtraction");\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    require(c >= a, "Overflow - Addition");\n', '    return c;\n', '  }\n', '}\n', '\n', 'library Contract {\n', '\n', '  using SafeMath for uint;\n', '\n', '  // Modifiers: //\n', '\n', '  // Runs two functions before and after a function -\n', '  modifier conditions(function () pure first, function () pure last) {\n', '    first();\n', '    _;\n', '    last();\n', '  }\n', '\n', '  bytes32 internal constant EXEC_PERMISSIONS = keccak256(&#39;script_exec_permissions&#39;);\n', '\n', '  // Sets up contract execution - reads execution id and sender from storage and\n', '  // places in memory, creating getters. Calling this function should be the first\n', '  // action an application does as part of execution, as it sets up memory for\n', '  // execution. Additionally, application functions in the main file should be\n', '  // external, so that memory is not touched prior to calling this function.\n', '  // The 3rd slot allocated will hold a pointer to a storage buffer, which will\n', '  // be reverted to abstract storage to store data, emit events, and forward\n', '  // wei on behalf of the application.\n', '  function authorize(address _script_exec) internal view {\n', '    // Initialize memory\n', '    initialize();\n', '\n', '    // Check that the sender is authorized as a script exec contract for this exec id\n', '    bytes32 perms = EXEC_PERMISSIONS;\n', '    bool authorized;\n', '    assembly {\n', '      // Place the script exec address at 0, and the exec permissions seed after it\n', '      mstore(0, _script_exec)\n', '      mstore(0x20, perms)\n', '      // Hash the resulting 0x34 bytes, and place back into memory at 0\n', '      mstore(0, keccak256(0x0c, 0x34))\n', '      // Place the exec id after the hash -\n', '      mstore(0x20, mload(0x80))\n', '      // Hash the previous hash with the execution id, and check the result\n', '      authorized := sload(keccak256(0, 0x40))\n', '    }\n', '    if (!authorized)\n', '      revert("Sender is not authorized as a script exec address");\n', '  }\n', '\n', '  // Sets up contract execution when initializing an instance of the application\n', '  // First, reads execution id and sender from storage (execution id should be 0xDEAD),\n', '  // then places them in memory, creating getters. Calling this function should be the first\n', '  // action an application does as part of execution, as it sets up memory for\n', '  // execution. Additionally, application functions in the main file should be\n', '  // external, so that memory is not touched prior to calling this function.\n', '  // The 3rd slot allocated will hold a pointer to a storage buffer, which will\n', '  // be reverted to abstract storage to store data, emit events, and forward\n', '  // wei on behalf of the application.\n', '  function initialize() internal view {\n', '    // No memory should have been allocated yet - expect the free memory pointer\n', '    // to point to 0x80 - and throw if it does not\n', '    require(freeMem() == 0x80, "Memory allocated prior to execution");\n', '    // Next, set up memory for execution\n', '    assembly {\n', '      mstore(0x80, sload(0))     // Execution id, read from storage\n', '      mstore(0xa0, sload(1))     // Original sender address, read from storage\n', '      mstore(0xc0, 0)            // Pointer to storage buffer\n', '      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n', '      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n', '      mstore(0x120, 0)           // Number of storage slots written to in buffer\n', '      mstore(0x140, 0)           // Number of events pushed to buffer\n', '      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n', '\n', '      // Update free memory pointer -\n', '      mstore(0x40, 0x180)\n', '    }\n', '    // Ensure that the sender and execution id returned from storage are expected values -\n', '    assert(execID() != bytes32(0) && sender() != address(0));\n', '  }\n', '\n', '  // Calls the passed-in function, performing a memory state check before and after the check\n', '  // is executed.\n', '  function checks(function () view _check) conditions(validState, validState) internal view {\n', '    _check();\n', '  }\n', '\n', '  // Calls the passed-in function, performing a memory state check before and after the check\n', '  // is executed.\n', '  function checks(function () pure _check) conditions(validState, validState) internal pure {\n', '    _check();\n', '  }\n', '\n', '  // Ensures execution completed successfully, and reverts the created storage buffer\n', '  // back to the sender.\n', '  function commit() conditions(validState, none) internal pure {\n', '    // Check value of storage buffer pointer - should be at least 0x180\n', '    bytes32 ptr = buffPtr();\n', '    require(ptr >= 0x180, "Invalid buffer pointer");\n', '\n', '    assembly {\n', '      // Get the size of the buffer\n', '      let size := mload(add(0x20, ptr))\n', '      mstore(ptr, 0x20) // Place dynamic data offset before buffer\n', '      // Revert to storage\n', '      revert(ptr, add(0x40, size))\n', '    }\n', '  }\n', '\n', '  // Helpers: //\n', '\n', '  // Checks to ensure the application was correctly executed -\n', '  function validState() private pure {\n', '    if (freeMem() < 0x180)\n', '      revert(&#39;Expected Contract.execute()&#39;);\n', '\n', '    if (buffPtr() != 0 && buffPtr() < 0x180)\n', '      revert(&#39;Invalid buffer pointer&#39;);\n', '\n', '    assert(execID() != bytes32(0) && sender() != address(0));\n', '  }\n', '\n', '  // Returns a pointer to the execution storage buffer -\n', '  function buffPtr() private pure returns (bytes32 ptr) {\n', '    assembly { ptr := mload(0xc0) }\n', '  }\n', '\n', '  // Returns the location pointed to by the free memory pointer -\n', '  function freeMem() private pure returns (bytes32 ptr) {\n', '    assembly { ptr := mload(0x40) }\n', '  }\n', '\n', '  // Returns the current storage action\n', '  function currentAction() private pure returns (bytes4 action) {\n', '    if (buffPtr() == bytes32(0))\n', '      return bytes4(0);\n', '\n', '    assembly { action := mload(0xe0) }\n', '  }\n', '\n', '  // If the current action is not storing, reverts\n', '  function isStoring() private pure {\n', '    if (currentAction() != STORES)\n', '      revert(&#39;Invalid current action - expected STORES&#39;);\n', '  }\n', '\n', '  // If the current action is not emitting, reverts\n', '  function isEmitting() private pure {\n', '    if (currentAction() != EMITS)\n', '      revert(&#39;Invalid current action - expected EMITS&#39;);\n', '  }\n', '\n', '  // If the current action is not paying, reverts\n', '  function isPaying() private pure {\n', '    if (currentAction() != PAYS)\n', '      revert(&#39;Invalid current action - expected PAYS&#39;);\n', '  }\n', '\n', '  // Initializes a storage buffer in memory -\n', '  function startBuffer() private pure {\n', '    assembly {\n', '      // Get a pointer to free memory, and place at 0xc0 (storage buffer pointer)\n', '      let ptr := msize()\n', '      mstore(0xc0, ptr)\n', '      // Clear bytes at pointer -\n', '      mstore(ptr, 0)            // temp ptr\n', '      mstore(add(0x20, ptr), 0) // buffer length\n', '      // Update free memory pointer -\n', '      mstore(0x40, add(0x40, ptr))\n', '      // Set expected next function to &#39;NONE&#39; -\n', '      mstore(0x100, 1)\n', '    }\n', '  }\n', '\n', '  // Checks whether or not it is valid to create a STORES action request -\n', '  function validStoreBuff() private pure {\n', '    // Get pointer to current buffer - if zero, create a new buffer -\n', '    if (buffPtr() == bytes32(0))\n', '      startBuffer();\n', '\n', '    // Ensure that the current action is not &#39;storing&#39;, and that the buffer has not already\n', '    // completed a STORES action -\n', '    if (stored() != 0 || currentAction() == STORES)\n', '      revert(&#39;Duplicate request - stores&#39;);\n', '  }\n', '\n', '  // Checks whether or not it is valid to create an EMITS action request -\n', '  function validEmitBuff() private pure {\n', '    // Get pointer to current buffer - if zero, create a new buffer -\n', '    if (buffPtr() == bytes32(0))\n', '      startBuffer();\n', '\n', '    // Ensure that the current action is not &#39;emitting&#39;, and that the buffer has not already\n', '    // completed an EMITS action -\n', '    if (emitted() != 0 || currentAction() == EMITS)\n', '      revert(&#39;Duplicate request - emits&#39;);\n', '  }\n', '\n', '  // Checks whether or not it is valid to create a PAYS action request -\n', '  function validPayBuff() private pure {\n', '    // Get pointer to current buffer - if zero, create a new buffer -\n', '    if (buffPtr() == bytes32(0))\n', '      startBuffer();\n', '\n', '    // Ensure that the current action is not &#39;paying&#39;, and that the buffer has not already\n', '    // completed an PAYS action -\n', '    if (paid() != 0 || currentAction() == PAYS)\n', '      revert(&#39;Duplicate request - pays&#39;);\n', '  }\n', '\n', '  // Placeholder function when no pre or post condition for a function is needed\n', '  function none() private pure { }\n', '\n', '  // Runtime getters: //\n', '\n', '  // Returns the execution id from memory -\n', '  function execID() internal pure returns (bytes32 exec_id) {\n', '    assembly { exec_id := mload(0x80) }\n', '    require(exec_id != bytes32(0), "Execution id overwritten, or not read");\n', '  }\n', '\n', '  // Returns the original sender from memory -\n', '  function sender() internal pure returns (address addr) {\n', '    assembly { addr := mload(0xa0) }\n', '    require(addr != address(0), "Sender address overwritten, or not read");\n', '  }\n', '\n', '  // Reading from storage: //\n', '\n', '  // Reads from storage, resolving the passed-in location to its true location in storage\n', '  // by hashing with the exec id. Returns the data read from that location\n', '  function read(bytes32 _location) internal view returns (bytes32 data) {\n', '    data = keccak256(_location, execID());\n', '    assembly { data := sload(data) }\n', '  }\n', '\n', '  // Storing data, emitting events, and forwarding payments: //\n', '\n', '  bytes4 internal constant EMITS = bytes4(keccak256(&#39;Emit((bytes32[],bytes)[])&#39;));\n', '  bytes4 internal constant STORES = bytes4(keccak256(&#39;Store(bytes32[])&#39;));\n', '  bytes4 internal constant PAYS = bytes4(keccak256(&#39;Pay(bytes32[])&#39;));\n', '  bytes4 internal constant THROWS = bytes4(keccak256(&#39;Error(string)&#39;));\n', '\n', '  // Function enums -\n', '  enum NextFunction {\n', '    INVALID, NONE, STORE_DEST, VAL_SET, VAL_INC, VAL_DEC, EMIT_LOG, PAY_DEST, PAY_AMT\n', '  }\n', '\n', '  // Checks that a call pushing a storage destination to the buffer is expected and valid\n', '  function validStoreDest() private pure {\n', '    // Ensure that the next function expected pushes a storage destination -\n', '    if (expected() != NextFunction.STORE_DEST)\n', '      revert(&#39;Unexpected function order - expected storage destination to be pushed&#39;);\n', '\n', '    // Ensure that the current buffer is pushing STORES actions -\n', '    isStoring();\n', '  }\n', '\n', '  // Checks that a call pushing a storage value to the buffer is expected and valid\n', '  function validStoreVal() private pure {\n', '    // Ensure that the next function expected pushes a storage value -\n', '    if (\n', '      expected() != NextFunction.VAL_SET &&\n', '      expected() != NextFunction.VAL_INC &&\n', '      expected() != NextFunction.VAL_DEC\n', '    ) revert(&#39;Unexpected function order - expected storage value to be pushed&#39;);\n', '\n', '    // Ensure that the current buffer is pushing STORES actions -\n', '    isStoring();\n', '  }\n', '\n', '  // Checks that a call pushing a payment destination to the buffer is expected and valid\n', '  function validPayDest() private pure {\n', '    // Ensure that the next function expected pushes a payment destination -\n', '    if (expected() != NextFunction.PAY_DEST)\n', '      revert(&#39;Unexpected function order - expected payment destination to be pushed&#39;);\n', '\n', '    // Ensure that the current buffer is pushing PAYS actions -\n', '    isPaying();\n', '  }\n', '\n', '  // Checks that a call pushing a payment amount to the buffer is expected and valid\n', '  function validPayAmt() private pure {\n', '    // Ensure that the next function expected pushes a payment amount -\n', '    if (expected() != NextFunction.PAY_AMT)\n', '      revert(&#39;Unexpected function order - expected payment amount to be pushed&#39;);\n', '\n', '    // Ensure that the current buffer is pushing PAYS actions -\n', '    isPaying();\n', '  }\n', '\n', '  // Checks that a call pushing an event to the buffer is expected and valid\n', '  function validEvent() private pure {\n', '    // Ensure that the next function expected pushes an event -\n', '    if (expected() != NextFunction.EMIT_LOG)\n', '      revert(&#39;Unexpected function order - expected event to be pushed&#39;);\n', '\n', '    // Ensure that the current buffer is pushing EMITS actions -\n', '    isEmitting();\n', '  }\n', '\n', '  // Begins creating a storage buffer - values and locations pushed will be committed\n', '  // to storage at the end of execution\n', '  function storing() conditions(validStoreBuff, isStoring) internal pure {\n', '    bytes4 action_req = STORES;\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push requestor to the end of buffer, as well as to the &#39;current action&#39; slot -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n', '      // Push &#39;0&#39; to the end of the 4 bytes just pushed - this will be the length of the STORES action\n', '      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n', '      // Increment buffer length - 0x24 plus the previous length\n', '      mstore(ptr, add(0x24, mload(ptr)))\n', '      // Set the current action being executed (STORES) -\n', '      mstore(0xe0, action_req)\n', '      // Set the expected next function - STORE_DEST\n', '      mstore(0x100, 2)\n', '      // Set a pointer to the length of the current request within the buffer\n', '      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Sets a passed in location to a value passed in via &#39;to&#39;\n', '  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage destination to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - VAL_SET\n', '      mstore(0x100, 3)\n', '      // Increment STORES action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of storage slots pushed to -\n', '      mstore(0x120, add(1, mload(0x120)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '    return _field;\n', '  }\n', '\n', '  // Sets a previously-passed-in destination in storage to the value\n', '  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage value to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _val)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - STORE_DEST\n', '      mstore(0x100, 2)\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Sets a previously-passed-in destination in storage to the value\n', '  function to(bytes32 _field, uint _val) internal pure {\n', '    to(_field, bytes32(_val));\n', '  }\n', '\n', '  // Sets a previously-passed-in destination in storage to the value\n', '  function to(bytes32 _field, address _val) internal pure {\n', '    to(_field, bytes32(_val));\n', '  }\n', '\n', '  // Sets a previously-passed-in destination in storage to the value\n', '  function to(bytes32 _field, bool _val) internal pure {\n', '    to(\n', '      _field,\n', '      _val ? bytes32(1) : bytes32(0)\n', '    );\n', '  }\n', '\n', '  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n', '    // Read value stored at the location in storage -\n', '    val = keccak256(_field, execID());\n', '    assembly {\n', '      val := sload(val)\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage destination to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - VAL_INC\n', '      mstore(0x100, 4)\n', '      // Increment STORES action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of storage slots pushed to -\n', '      mstore(0x120, add(1, mload(0x120)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '    return val;\n', '  }\n', '\n', '  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n', '    // Read value stored at the location in storage -\n', '    val = keccak256(_field, execID());\n', '    assembly {\n', '      val := sload(val)\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage destination to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - VAL_DEC\n', '      mstore(0x100, 5)\n', '      // Increment STORES action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of storage slots pushed to -\n', '      mstore(0x120, add(1, mload(0x120)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '    return val;\n', '  }\n', '\n', '  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n', '    // Check the expected function type - if it is VAL_INC, perform safe-add on the value\n', '    // If it is VAL_DEC, perform safe-sub on the value\n', '    if (expected() == NextFunction.VAL_INC)\n', '      _amt = _amt.add(uint(_val));\n', '    else if (expected() == NextFunction.VAL_DEC)\n', '      _amt = uint(_val).sub(_amt);\n', '    else\n', '      revert(&#39;Expected VAL_INC or VAL_DEC&#39;);\n', '\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage value to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - STORE_DEST\n', '      mstore(0x100, 2)\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Decreases the value at some field by a maximum amount, and sets it to 0 if there will be underflow\n', '  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n', '    // Check the expected function type - if it is VAL_DEC, set the new amount to the difference of\n', '    // _val and _amt, to a minimum of 0\n', '    if (expected() == NextFunction.VAL_DEC) {\n', '      if (_amt >= uint(_val))\n', '        _amt = 0;\n', '      else\n', '        _amt = uint(_val).sub(_amt);\n', '    } else {\n', '      revert(&#39;Expected VAL_DEC&#39;);\n', '    }\n', '\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage value to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - STORE_DEST\n', '      mstore(0x100, 2)\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Begins creating an event log buffer - topics and data pushed will be emitted by\n', '  // storage at the end of execution\n', '  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n', '    bytes4 action_req = EMITS;\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push requestor to the end of buffer, as well as to the &#39;current action&#39; slot -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n', '      // Push &#39;0&#39; to the end of the 4 bytes just pushed - this will be the length of the EMITS action\n', '      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n', '      // Increment buffer length - 0x24 plus the previous length\n', '      mstore(ptr, add(0x24, mload(ptr)))\n', '      // Set the current action being executed (EMITS) -\n', '      mstore(0xe0, action_req)\n', '      // Set the expected next function - EMIT_LOG\n', '      mstore(0x100, 6)\n', '      // Set a pointer to the length of the current request within the buffer\n', '      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push 0 to the end of the buffer - event will have 0 topics\n', '      mstore(add(0x20, add(ptr, mload(ptr))), 0)\n', '      // If _data is zero, set data size to 0 in buffer and push -\n', '      if eq(_data, 0) {\n', '        mstore(add(0x40, add(ptr, mload(ptr))), 0)\n', '        // Increment buffer length - 0x40 plus the original length\n', '        mstore(ptr, add(0x40, mload(ptr)))\n', '      }\n', '      // If _data is not zero, set size to 0x20 and push to buffer -\n', '      if iszero(eq(_data, 0)) {\n', '        // Push data size (0x20) to the end of the buffer\n', '        mstore(add(0x40, add(ptr, mload(ptr))), 0x20)\n', '        // Push data to the end of the buffer\n', '        mstore(add(0x60, add(ptr, mload(ptr))), _data)\n', '        // Increment buffer length - 0x60 plus the original length\n', '        mstore(ptr, add(0x60, mload(ptr)))\n', '      }\n', '      // Increment EMITS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of events pushed to buffer -\n', '      mstore(0x140, add(1, mload(0x140)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push 1 to the end of the buffer - event will have 1 topic\n', '      mstore(add(0x20, add(ptr, mload(ptr))), 1)\n', '      // Push topic to end of buffer\n', '      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n', '      // If _data is zero, set data size to 0 in buffer and push -\n', '      if eq(_data, 0) {\n', '        mstore(add(0x60, add(ptr, mload(ptr))), 0)\n', '        // Increment buffer length - 0x60 plus the original length\n', '        mstore(ptr, add(0x60, mload(ptr)))\n', '      }\n', '      // If _data is not zero, set size to 0x20 and push to buffer -\n', '      if iszero(eq(_data, 0)) {\n', '        // Push data size (0x20) to the end of the buffer\n', '        mstore(add(0x60, add(ptr, mload(ptr))), 0x20)\n', '        // Push data to the end of the buffer\n', '        mstore(add(0x80, add(ptr, mload(ptr))), _data)\n', '        // Increment buffer length - 0x80 plus the original length\n', '        mstore(ptr, add(0x80, mload(ptr)))\n', '      }\n', '      // Increment EMITS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of events pushed to buffer -\n', '      mstore(0x140, add(1, mload(0x140)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push 2 to the end of the buffer - event will have 2 topics\n', '      mstore(add(0x20, add(ptr, mload(ptr))), 2)\n', '      // Push topics to end of buffer\n', '      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n', '      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n', '      // If _data is zero, set data size to 0 in buffer and push -\n', '      if eq(_data, 0) {\n', '        mstore(add(0x80, add(ptr, mload(ptr))), 0)\n', '        // Increment buffer length - 0x80 plus the original length\n', '        mstore(ptr, add(0x80, mload(ptr)))\n', '      }\n', '      // If _data is not zero, set size to 0x20 and push to buffer -\n', '      if iszero(eq(_data, 0)) {\n', '        // Push data size (0x20) to the end of the buffer\n', '        mstore(add(0x80, add(ptr, mload(ptr))), 0x20)\n', '        // Push data to the end of the buffer\n', '        mstore(add(0xa0, add(ptr, mload(ptr))), _data)\n', '        // Increment buffer length - 0xa0 plus the original length\n', '        mstore(ptr, add(0xa0, mload(ptr)))\n', '      }\n', '      // Increment EMITS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of events pushed to buffer -\n', '      mstore(0x140, add(1, mload(0x140)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push 3 to the end of the buffer - event will have 3 topics\n', '      mstore(add(0x20, add(ptr, mload(ptr))), 3)\n', '      // Push topics to end of buffer\n', '      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n', '      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n', '      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n', '      // If _data is zero, set data size to 0 in buffer and push -\n', '      if eq(_data, 0) {\n', '        mstore(add(0xa0, add(ptr, mload(ptr))), 0)\n', '        // Increment buffer length - 0xa0 plus the original length\n', '        mstore(ptr, add(0xa0, mload(ptr)))\n', '      }\n', '      // If _data is not zero, set size to 0x20 and push to buffer -\n', '      if iszero(eq(_data, 0)) {\n', '        // Push data size (0x20) to the end of the buffer\n', '        mstore(add(0xa0, add(ptr, mload(ptr))), 0x20)\n', '        // Push data to the end of the buffer\n', '        mstore(add(0xc0, add(ptr, mload(ptr))), _data)\n', '        // Increment buffer length - 0xc0 plus the original length\n', '        mstore(ptr, add(0xc0, mload(ptr)))\n', '      }\n', '      // Increment EMITS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of events pushed to buffer -\n', '      mstore(0x140, add(1, mload(0x140)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push 4 to the end of the buffer - event will have 4 topics\n', '      mstore(add(0x20, add(ptr, mload(ptr))), 4)\n', '      // Push topics to end of buffer\n', '      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n', '      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n', '      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n', '      mstore(add(0xa0, add(ptr, mload(ptr))), mload(add(0x60, _topics)))\n', '      // If _data is zero, set data size to 0 in buffer and push -\n', '      if eq(_data, 0) {\n', '        mstore(add(0xc0, add(ptr, mload(ptr))), 0)\n', '        // Increment buffer length - 0xc0 plus the original length\n', '        mstore(ptr, add(0xc0, mload(ptr)))\n', '      }\n', '      // If _data is not zero, set size to 0x20 and push to buffer -\n', '      if iszero(eq(_data, 0)) {\n', '        // Push data size (0x20) to the end of the buffer\n', '        mstore(add(0xc0, add(ptr, mload(ptr))), 0x20)\n', '        // Push data to the end of the buffer\n', '        mstore(add(0xe0, add(ptr, mload(ptr))), _data)\n', '        // Increment buffer length - 0xe0 plus the original length\n', '        mstore(ptr, add(0xe0, mload(ptr)))\n', '      }\n', '      // Increment EMITS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of events pushed to buffer -\n', '      mstore(0x140, add(1, mload(0x140)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Begins creating a storage buffer - destinations entered will be forwarded wei\n', '  // before the end of execution\n', '  function paying() conditions(validPayBuff, isPaying) internal pure {\n', '    bytes4 action_req = PAYS;\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push requestor to the end of buffer, as well as to the &#39;current action&#39; slot -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n', '      // Push &#39;0&#39; to the end of the 4 bytes just pushed - this will be the length of the PAYS action\n', '      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n', '      // Increment buffer length - 0x24 plus the previous length\n', '      mstore(ptr, add(0x24, mload(ptr)))\n', '      // Set the current action being executed (PAYS) -\n', '      mstore(0xe0, action_req)\n', '      // Set the expected next function - PAY_AMT\n', '      mstore(0x100, 8)\n', '      // Set a pointer to the length of the current request within the buffer\n', '      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Pushes an amount of wei to forward to the buffer\n', '  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push payment amount to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _amount)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - PAY_DEST\n', '      mstore(0x100, 7)\n', '      // Increment PAYS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of payment destinations to be pushed to -\n', '      mstore(0x160, add(1, mload(0x160)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '    return _amount;\n', '  }\n', '\n', '  // Push an address to forward wei to, to the buffer\n', '  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push payment destination to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _dest)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - PAY_AMT\n', '      mstore(0x100, 8)\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Sets the free memory pointer to point beyond all accessed memory\n', '  function setFreeMem() private pure {\n', '    assembly { mstore(0x40, msize) }\n', '  }\n', '\n', '  // Returns the enum representing the next expected function to be called -\n', '  function expected() private pure returns (NextFunction next) {\n', '    assembly { next := mload(0x100) }\n', '  }\n', '\n', '  // Returns the number of events pushed to the storage buffer -\n', '  function emitted() internal pure returns (uint num_emitted) {\n', '    if (buffPtr() == bytes32(0))\n', '      return 0;\n', '\n', '    // Load number emitted from buffer -\n', '    assembly { num_emitted := mload(0x140) }\n', '  }\n', '\n', '  // Returns the number of storage slots pushed to the storage buffer -\n', '  function stored() internal pure returns (uint num_stored) {\n', '    if (buffPtr() == bytes32(0))\n', '      return 0;\n', '\n', '    // Load number stored from buffer -\n', '    assembly { num_stored := mload(0x120) }\n', '  }\n', '\n', '  // Returns the number of payment destinations and amounts pushed to the storage buffer -\n', '  function paid() internal pure returns (uint num_paid) {\n', '    if (buffPtr() == bytes32(0))\n', '      return 0;\n', '\n', '    // Load number paid from buffer -\n', '    assembly { num_paid := mload(0x160) }\n', '  }\n', '}\n', '\n', 'library ManageTokens {\n', '\n', '  using Contract for *;\n', '  using SafeMath for uint;\n', '\n', '  /// EVENTS ///\n', '\n', '  // event TransferAgentStatusUpdate(bytes32 indexed exec_id, address indexed agent, bool current_status)\n', '  bytes32 internal constant TRANSFER_AGENT_STATUS = keccak256(&#39;TransferAgentStatusUpdate(bytes32,address,bool)&#39;);\n', '  // event CrowdsaleFinalized(bytes32 indexed exec_id)\n', '  bytes32 internal constant FINAL_SEL = keccak256(&#39;CrowdsaleFinalized(bytes32)&#39;);\n', '  // event TokenConfigured(bytes32 indexed exec_id, bytes32 indexed name, bytes32 indexed symbol, uint decimals)\n', '  bytes32 private constant TOKEN_CONFIGURED = keccak256("TokenConfigured(bytes32,bytes32,bytes32,uint256)");\n', '\n', '  // Returns the topics for a transfer agent status update event -\n', '  function AGENT_STATUS(bytes32 _exec_id, address _agent) private pure returns (bytes32[3] memory)\n', '    { return [TRANSFER_AGENT_STATUS, _exec_id, bytes32(_agent)]; }\n', '\n', '  // Returns the topics for a crowdsale finalization event -\n', '  function FINALIZE(bytes32 _exec_id) private pure returns (bytes32[2] memory)\n', '    { return [FINAL_SEL, _exec_id]; }\n', '\n', '  // Returns the topics for a token initialization event -\n', '  function TOKEN_INIT(bytes32 _exec_id, bytes32 _name, bytes32 _symbol) private pure returns (bytes32[4] memory)\n', '    { return [TOKEN_CONFIGURED, _exec_id, _name, _symbol]; }\n', '\n', '  // Checks input and then creates storage buffer for token initialization\n', '  function initCrowdsaleToken(bytes32 _name, bytes32 _symbol, uint _decimals) internal pure {\n', '    // Ensure valid input\n', '    if (_name == 0 || _symbol == 0 || _decimals > 18)\n', '      revert("Improper token initialization");\n', '\n', '    // Set up STORES action requests -\n', '    Contract.storing();\n', '\n', '    // Store token name, symbol, and decimals\n', '    Contract.set(TokenManager.tokenName()).to(_name);\n', '    Contract.set(TokenManager.tokenSymbol()).to(_symbol);\n', '    Contract.set(TokenManager.tokenDecimals()).to(_decimals);\n', '\n', '    Contract.emitting();\n', '\n', '    // Log token initialization event -\n', '    Contract.log(\n', '      TOKEN_INIT(Contract.execID(), _name, _symbol), bytes32(_decimals)\n', '    );\n', '  }\n', '\n', '  // Checks input and then creates storage buffer for transfer agent updating\n', '  function setTransferAgentStatus(address _agent, bool _is_agent) internal pure {\n', '    // Ensure valid input\n', '    if (_agent == 0)\n', '      revert(&#39;invalid transfer agent&#39;);\n', '\n', '    Contract.storing();\n', '\n', '    // Store new transfer agent status\n', '    Contract.set(TokenManager.transferAgents(_agent)).to(_is_agent);\n', '\n', '    // Set up EMITS action requests -\n', '    Contract.emitting();\n', '\n', '    // Add TransferAgentStatusUpdate signature and topics\n', '    Contract.log(\n', '      AGENT_STATUS(Contract.execID(), _agent), _is_agent ? bytes32(1) : bytes32(0)\n', '    );\n', '  }\n', '\n', '  // Checks input and then creates storage buffer for reserved token updating\n', '  function updateMultipleReservedTokens(\n', '    address[] _destinations,\n', '    uint[] _num_tokens,\n', '    uint[] _num_percents,\n', '    uint[] _percent_decimals\n', '  ) internal view {\n', '    // Ensure valid input\n', '    if (\n', '      _destinations.length != _num_tokens.length\n', '      || _num_tokens.length != _num_percents.length\n', '      || _num_percents.length != _percent_decimals.length\n', '      || _destinations.length == 0\n', '    ) revert(&#39;invalid input length&#39;);\n', '\n', '    // Add crowdsale destinations list length location to buffer\n', '    uint num_destinations = uint(Contract.read(TokenManager.reservedDestinations()));\n', '\n', '    Contract.storing();\n', '\n', '    // Loop over read_values and input arrays - for each address which is unique within the passed-in destinations list,\n', '    // place its reservation information in the storage buffer. Ignore duplicates in passed-in array.\n', '    // For every address which is not a local duplicate, and also does not exist yet in the crowdsale storage reserved destination list,\n', '    // push it to the end of the list and increment list length (in storage buffer)\n', '\n', '    for (uint i = 0; i < _destinations.length; i++) {\n', '      address to_add = _destinations[i];\n', '      if (to_add == 0)\n', '        revert(&#39;invalid destination&#39;);\n', '\n', '      // Check if the destination is unique in storage\n', '      if (Contract.read(TokenManager.destIndex(_destinations[i])) == 0) {\n', '        // Now, check the passed-in destinations list to see if this address is listed multiple times in the input, as we only want to store information on unique addresses\n', '        for (uint j = _destinations.length - 1; j > i; j--) {\n', '          // address is not unique locally - found the same address in destinations\n', '          if (_destinations[j] == to_add) {\n', '            to_add = address(0);\n', '            break;\n', '          }\n', '        }\n', '\n', '        // If to_add is zero, this address is not unique within the passed-in list - skip any additions to storage buffer\n', '        if (to_add == 0)\n', '          continue;\n', '\n', '        // Increment length\n', '        num_destinations = num_destinations.add(1);\n', '        // Ensure reserved destination amount does not exceed 20\n', '        if (num_destinations > 20)\n', '          revert(&#39;too many reserved destinations&#39;);\n', '        // Push address to reserved destination list\n', '        Contract.set(\n', '          bytes32(32 * num_destinations + uint(TokenManager.reservedDestinations()))\n', '        ).to(to_add);\n', '        // Store reservation index\n', '        Contract.set(TokenManager.destIndex(to_add)).to(num_destinations);\n', '      }\n', '\n', '      // Store reservation info -\n', '      // Number of tokens to reserve\n', '      Contract.set(TokenManager.destTokens(to_add)).to(_num_tokens[i]);\n', '      // Percentage of total tokens sold to reserve\n', '      Contract.set(TokenManager.destPercent(to_add)).to(_num_percents[i]);\n', '      // Precision of percent\n', '      Contract.set(TokenManager.destPrecision(to_add)).to(_percent_decimals[i]);\n', '    }\n', '    // Finally, update array length\n', '    Contract.set(TokenManager.reservedDestinations()).to(num_destinations);\n', '  }\n', '\n', '  // Checks input and then creates storage buffer for reserved token removal\n', '  function removeReservedTokens(address _destination) internal view {\n', '    // Ensure valid input\n', '    if (_destination == 0)\n', '      revert(&#39;invalid destination&#39;);\n', '\n', '    Contract.storing();\n', '\n', '    // Get reservation list length\n', '    uint reservation_len = uint(Contract.read(TokenManager.reservedDestinations()));\n', '    // Get index of passed-in destination. If zero, sender is not in reserved list - revert\n', '    uint to_remove = uint(Contract.read(TokenManager.destIndex(_destination)));\n', '    // Ensure that to_remove is less than or equal to reservation list length (stored indices are offset by 1)\n', '    if (to_remove > reservation_len || to_remove == 0)\n', '      revert(&#39;removing too many reservations&#39;);\n', '\n', '    if (to_remove != reservation_len) {\n', '      // Execute read from storage, and store return in buffer\n', '      address last_index =\n', '        address(Contract.read(\n', '          bytes32(32 * reservation_len + uint(TokenManager.reservedDestinations()))\n', '        ));\n', '\n', '      // Update index\n', '      Contract.set(TokenManager.destIndex(last_index)).to(to_remove);\n', '      // Push last index address to correct spot in reservedDestinations() list\n', '      Contract.set(\n', '        bytes32((32 * to_remove) + uint(TokenManager.reservedDestinations()))\n', '      ).to(last_index);\n', '    }\n', '    // Update destination list length\n', '    Contract.decrease(TokenManager.reservedDestinations()).by(1);\n', '    // Update removed address index\n', '    Contract.set(TokenManager.destIndex(_destination)).to(uint(0));\n', '  }\n', '\n', '  // Checks input and then creates storage buffer for reserved token distribution\n', '  function distributeReservedTokens(uint _num_destinations) internal view {\n', '    // Ensure valid input\n', '    if (_num_destinations == 0)\n', '      revert(&#39;invalid number of destinations&#39;);\n', '\n', '    // Get total tokens sold, total token supply, and reserved destinations list length\n', '    uint total_sold = uint(Contract.read(TokenManager.tokensSold()));\n', '    uint total_supply = uint(Contract.read(TokenManager.tokenTotalSupply()));\n', '    uint reserved_len = uint(Contract.read(TokenManager.reservedDestinations()));\n', '\n', '    Contract.storing();\n', '\n', '    // If no destinations remain to be distributed to, revert\n', '    if (reserved_len == 0)\n', '      revert(&#39;no remaining destinations&#39;);\n', '\n', '    // If num_destinations is greater than the reserved destinations list length, set amt equal to the list length\n', '    if (_num_destinations > reserved_len)\n', '      _num_destinations = reserved_len;\n', '\n', '    // Update reservedDestinations list length\n', '    Contract.decrease(TokenManager.reservedDestinations()).by(_num_destinations);\n', '\n', '    // For each address, get their new balance and add to storage buffer\n', '    for (uint i = 0; i < _num_destinations; i++) {\n', '      // Get the reserved destination address\n', '      address addr =\n', '        address(Contract.read(\n', '          bytes32(32 * (_num_destinations - i) + uint(TokenManager.reservedDestinations()))\n', '        ));\n', '\n', '      // Get percent reserved and precision\n', '      uint to_add = uint(Contract.read(TokenManager.destPercent(addr)));\n', '\n', '      // Two points of precision are added to ensure at least a percent out of 100\n', '      uint precision = uint(Contract.read(TokenManager.destPrecision(addr))).add(2);\n', '\n', '      // Get percent divisor\n', '      precision = 10 ** precision;\n', '\n', '      // Get number of tokens to add from total_sold and precent reserved\n', '      to_add = total_sold.mul(to_add).div(precision);\n', '\n', '      // Add number of tokens reserved\n', '      to_add = to_add.add(uint(Contract.read(TokenManager.destTokens(addr))));\n', '\n', '      // Increment total supply\n', '      total_supply = total_supply.add(to_add);\n', '\n', '      // Increase destination token balance -\n', '      Contract.increase(TokenManager.balances(addr)).by(to_add);\n', '    }\n', '\n', '    // Update total supply\n', '    Contract.set(TokenManager.tokenTotalSupply()).to(total_supply);\n', '  }\n', '\n', '  // Checks input and then creates storage buffer for crowdsale finalization\n', '  function finalizeCrowdsaleAndToken() internal view {\n', '    // Get reserved token distribution from distributeAndUnlockTokens\n', '    distributeAndUnlockTokens();\n', '\n', '    // Finalize crowdsale\n', '    Contract.set(TokenManager.isFinished()).to(true);\n', '\n', '    Contract.emitting();\n', '\n', '    // Add CrowdsaleFinalized signature and topics\n', '    Contract.log(\n', '      FINALIZE(Contract.execID()), bytes32(0)\n', '    );\n', '  }\n', '\n', '  // Gets number of tokens to distribute -\n', '  function distributeAndUnlockTokens() internal view {\n', '\n', '    // Get total tokens sold, total token supply, and reserved destinations list length\n', '    uint total_sold = uint(Contract.read(TokenManager.tokensSold()));\n', '    uint total_supply = uint(Contract.read(TokenManager.tokenTotalSupply()));\n', '    uint num_destinations = uint(Contract.read(TokenManager.reservedDestinations()));\n', '\n', '    Contract.storing();\n', '\n', '    // If there are no reserved destinations, simply create a storage buffer to unlock token transfers -\n', '    if (num_destinations == 0) {\n', '      // Unlock tokens\n', '      Contract.set(TokenManager.tokensUnlocked()).to(true);\n', '      return;\n', '    }\n', '\n', '    // Set new reserved destination list length\n', '    Contract.set(TokenManager.reservedDestinations()).to(uint(0));\n', '\n', '    // For each address, get their new balance and add to storage buffer\n', '    for (uint i = 0; i < num_destinations; i++) {\n', '\n', '      address addr =\n', '        address(Contract.read(\n', '          bytes32(32 + (32 * i) + uint(TokenManager.reservedDestinations()))\n', '        ));\n', '      // Get percent reserved and precision\n', '      uint to_add = uint(Contract.read(TokenManager.destPercent(addr)));\n', '      // Two points of precision are added to ensure at least a percent out of 100\n', '      uint precision = uint(Contract.read(TokenManager.destPrecision(addr))).add(2);\n', '\n', '      // Get percent divisor\n', '      precision = 10 ** precision;\n', '\n', '      // Get number of tokens to add from total_sold and precent reserved\n', '      to_add = total_sold.mul(to_add).div(precision);\n', '\n', '      // Add number of tokens reserved\n', '      to_add = to_add.add(uint(Contract.read(TokenManager.destTokens(addr))));\n', '\n', '      // Increment total supply\n', '      total_supply = total_supply.add(to_add);\n', '\n', '      // Increase destination token balance -\n', '      Contract.increase(TokenManager.balances(addr)).by(to_add);\n', '    }\n', '    // Update total supply\n', '    Contract.set(TokenManager.tokenTotalSupply()).to(total_supply);\n', '    // Unlock tokens\n', '    Contract.set(TokenManager.tokensUnlocked()).to(true);\n', '  }\n', '\n', '  // Checks input and then creates storage buffer for token distribution\n', '  function finalizeAndDistributeToken() internal view {\n', '    distributeAndUnlockTokens();\n', '  }\n', '}\n', '\n', 'library TokenManager {\n', '\n', '  using Contract for *;\n', '\n', '  /// SALE ///\n', '\n', '  // Storage location of crowdsale admin address\n', '  function admin() internal pure returns (bytes32)\n', '    { return keccak256(&#39;sale_admin&#39;); }\n', '\n', '  // Whether the crowdsale and token are configured, and the sale is ready to run\n', '  function isConfigured() internal pure returns (bytes32)\n', '    { return keccak256("sale_is_configured"); }\n', '\n', '  // Whether or not the crowdsale is post-purchase\n', '  function isFinished() internal pure returns (bytes32)\n', '    { return keccak256("sale_is_completed"); }\n', '\n', '  // Storage location of the amount of tokens sold in the crowdsale so far. Does not include reserved tokens\n', '  function tokensSold() internal pure returns (bytes32)\n', '    { return keccak256("sale_tokens_sold"); }\n', '\n', '  /// TOKEN ///\n', '\n', '  // Storage location for token name\n', '  function tokenName() internal pure returns (bytes32)\n', '    { return keccak256("token_name"); }\n', '\n', '  // Storage location for token ticker symbol\n', '  function tokenSymbol() internal pure returns (bytes32)\n', '    { return keccak256("token_symbol"); }\n', '\n', '  // Storage location for token decimals\n', '  function tokenDecimals() internal pure returns (bytes32)\n', '    { return keccak256("token_decimals"); }\n', '\n', '  // Storage location for token totalSupply\n', '  function tokenTotalSupply() internal pure returns (bytes32)\n', '    { return keccak256("token_total_supply"); }\n', '\n', '  // Storage seed for user balances mapping\n', '  bytes32 internal constant TOKEN_BALANCES = keccak256("token_balances");\n', '\n', '  function balances(address _owner) internal pure returns (bytes32)\n', '    { return keccak256(_owner, TOKEN_BALANCES); }\n', '\n', '  // Storage seed for token &#39;transfer agent&#39; status for any address\n', '  // Transfer agents can transfer tokens, even if the crowdsale has not yet been finalized\n', '  bytes32 internal constant TOKEN_TRANSFER_AGENTS = keccak256("token_transfer_agents");\n', '\n', '  function transferAgents(address _agent) internal pure returns (bytes32)\n', '    { return keccak256(_agent, TOKEN_TRANSFER_AGENTS); }\n', '\n', '  // Whether or not the token is unlocked for transfers\n', '  function tokensUnlocked() internal pure returns (bytes32)\n', '    { return keccak256(&#39;sale_tokens_unlocked&#39;); }\n', '\n', '  /// RESERVED TOKENS ///\n', '\n', '  // Stores the number of addresses for which tokens are reserved\n', '  function reservedDestinations() internal pure returns (bytes32)\n', '    { return keccak256("reserved_token_dest_list"); }\n', '\n', '  // Stores the index of an address in the reservedDestinations list (1-indexed)\n', '  function destIndex(address _destination) internal pure returns (bytes32)\n', '    { return keccak256(_destination, "index", reservedDestinations()); }\n', '\n', '  // Stores the number of tokens reserved for a destination\n', '  function destTokens(address _destination) internal pure returns (bytes32)\n', '    { return keccak256(_destination, "numtokens", reservedDestinations()); }\n', '\n', '  // Stores the number of percent of tokens sold reserved for a destination\n', '  function destPercent(address _destination) internal pure returns (bytes32)\n', '    { return keccak256(_destination, "numpercent", reservedDestinations()); }\n', '\n', '  // Stores the number of decimals in the previous percentage (2 are added by default)\n', '  function destPrecision(address _destination) internal pure returns (bytes32)\n', '    { return keccak256(_destination, "precision", reservedDestinations()); }\n', '\n', '  /// CHECKS ///\n', '\n', '  // Ensures the sale is finalized\n', '  function saleFinalized() internal view {\n', '    if (Contract.read(isFinished()) == 0)\n', '      revert(&#39;sale must be finalized&#39;);\n', '  }\n', '\n', '  // Ensures that the sender is the admin address\n', '  function onlyAdmin() internal view {\n', '    if (address(Contract.read(admin())) != Contract.sender())\n', '      revert(&#39;sender is not admin&#39;);\n', '  }\n', '\n', '  // Ensures that the sender is the admin address, and the sale is not initialized\n', '  function onlyAdminAndNotInit() internal view {\n', '    if (address(Contract.read(admin())) != Contract.sender())\n', '      revert(&#39;sender is not admin&#39;);\n', '\n', '    if (Contract.read(isConfigured()) != 0)\n', '      revert(&#39;sale has already been initialized&#39;);\n', '  }\n', '\n', '  // Ensures both storage and events have been pushed to the buffer\n', '  function emitAndStore() internal pure {\n', '    if (Contract.emitted() == 0 || Contract.stored() == 0)\n', '      revert(&#39;invalid state change&#39;);\n', '  }\n', '\n', '  // Ensures the pending state change will only store\n', '  function onlyStores() internal pure {\n', '    if (Contract.paid() != 0 || Contract.emitted() != 0)\n', '      revert(&#39;expected only storage&#39;);\n', '\n', '    if (Contract.stored() == 0)\n', '      revert(&#39;expected storage&#39;);\n', '  }\n', '\n', '  // Ensures the sender is the admin, the sale is initialized, and the sale is not finalized\n', '  function senderAdminAndSaleNotFinal() internal view {\n', '    if (Contract.sender() != address(Contract.read(admin())))\n', '      revert(&#39;sender is not admin&#39;);\n', '\n', '    if (Contract.read(isConfigured()) == 0 || Contract.read(isFinished()) != 0)\n', '      revert(&#39;invalid sale state&#39;);\n', '  }\n', '\n', '  /// FUNCTIONS ///\n', '\n', '  /*\n', '  Initializes the token to be sold during the crowdsale -\n', '\n', '  @param _name: The name of the token to be sold\n', '  @param _symbol: The symbol of the token to be sold\n', '  @param _decimals: The number of decimals the token will have\n', '  */\n', '  function initCrowdsaleToken(bytes32 _name, bytes32 _symbol, uint _decimals) external view {\n', '    // Begin execution - reads execution id and original sender address from storage\n', '    // and authorizes the sender as script exec\n', '    Contract.authorize(msg.sender);\n', '    // Check that the sender is the sale admin and the sale is not initialized -\n', '    Contract.checks(onlyAdminAndNotInit);\n', '    // Execute token initialization function -\n', '    ManageTokens.initCrowdsaleToken(_name, _symbol, _decimals);\n', '    // Ensures state change will only affect storage and events -\n', '    Contract.checks(emitAndStore);\n', '    // Commit state changes to storage -\n', '    Contract.commit();\n', '  }\n', '\n', '  /*\n', '  Sets the status of an account as a transfer agent. Transfer agents are allowed to transfer tokens at any time\n', '\n', '  @param _agent: The address whose status will be updated\n', '  @param _is_agent: Whether or not the agent is a transfer agent\n', '  */\n', '  function setTransferAgentStatus(address _agent, bool _is_agent) external view {\n', '    // Begin execution - reads execution id and original sender address from storage\n', '    Contract.authorize(msg.sender);\n', '    // Check that the sender is the sale admin -\n', '    Contract.checks(onlyAdmin);\n', '    // Execute function -\n', '    ManageTokens.setTransferAgentStatus(_agent, _is_agent);\n', '    // Ensures state change will only affect storage and log events -\n', '    Contract.checks(emitAndStore);\n', '    // Commit state changes to storage -\n', '    Contract.commit();\n', '  }\n', '\n', '  /*\n', '  Updates multiple reserved token listings\n', '\n', '  @param _destinations: The addresses for which listings will be updated\n', '  @param _num_tokens: The number of tokens each destination will have reserved\n', '  @param _num_percents: The decimal number of percents of total tokens sold each destination will be reserved\n', '  @param _percent_decimals: The number of decimals in each of the percent figures\n', '  */\n', '  function updateMultipleReservedTokens(\n', '    address[] _destinations,\n', '    uint[] _num_tokens,\n', '    uint[] _num_percents,\n', '    uint[] _percent_decimals\n', '  ) external view {\n', '    // Begin execution - reads execution id and original sender address from storage\n', '    Contract.authorize(msg.sender);\n', '    // Check that the sender is the sale admin and the sale is not initialized -\n', '    Contract.checks(onlyAdminAndNotInit);\n', '    // Execute function -\n', '    ManageTokens.updateMultipleReservedTokens(_destinations, _num_tokens, _num_percents, _percent_decimals);\n', '    // Ensures state change will only affect storage -\n', '    Contract.checks(onlyStores);\n', '    // Commit state changes to storage -\n', '    Contract.commit();\n', '  }\n', '\n', '  /*\n', '  Removes a reserved token listing\n', '\n', '  @param _destination: The addresses for which listings will be removed\n', '  */\n', '  function removeReservedTokens(address _destination) external view {\n', '    // Begin execution - reads execution id and original sender address from storage\n', '    Contract.authorize(msg.sender);\n', '    // Check that the sender is the sale admin and the sale is not initialized -\n', '    Contract.checks(onlyAdminAndNotInit);\n', '    // Execute function -\n', '    ManageTokens.removeReservedTokens(_destination);\n', '    // Ensures state change will only affect storage -\n', '    Contract.checks(onlyStores);\n', '    // Commit state changes to storage -\n', '    Contract.commit();\n', '  }\n', '\n', '  /*\n', '  Allows anyone to distribute reserved tokens, assuming the sale is finalized\n', '\n', '  @param _num_destinations: The number of reserved destinations to distribute for\n', '  */\n', '  function distributeReservedTokens(uint _num_destinations) external view {\n', '    // Begin execution - reads execution id and original sender address from storage\n', '    Contract.authorize(msg.sender);\n', '    // Checks that the sale is finalized -\n', '    Contract.checks(saleFinalized);\n', '    // Execute approval function -\n', '    ManageTokens.distributeReservedTokens(_num_destinations);\n', '    // Ensures state change will only affect storage -\n', '    Contract.checks(onlyStores);\n', '    // Commit state changes to storage -\n', '    Contract.commit();\n', '  }\n', '\n', '  // Allows the admin to finalize the crowdsale, distribute reserved tokens, and unlock the token for transfer\n', '  function finalizeCrowdsaleAndToken() external view {\n', '    // Begin execution - reads execution id and original sender address from storage\n', '    Contract.authorize(msg.sender);\n', '    // Check that the sender is the admin, the sale is initialized, and the sale is not finalized -\n', '    Contract.checks(senderAdminAndSaleNotFinal);\n', '    // Execute approval function -\n', '    ManageTokens.finalizeCrowdsaleAndToken();\n', '    // Ensures state change will only affect storage -\n', '    Contract.checks(emitAndStore);\n', '    // Commit state changes to storage -\n', '    Contract.commit();\n', '  }\n', '\n', '  // Allows anyone to unlock token transfers and distribute reserved tokens, as long as the sale is finalized\n', '  function finalizeAndDistributeToken() external view {\n', '    // Begin execution - reads execution id and original sender address from storage\n', '    Contract.authorize(msg.sender);\n', '    // Ensure the sale is finalized\n', '    Contract.checks(saleFinalized);\n', '    // Execute approval function -\n', '    ManageTokens.finalizeAndDistributeToken();\n', '    // Ensures state change will only affect storage -\n', '    Contract.checks(onlyStores);\n', '    // Commit state changes to storage -\n', '    Contract.commit();\n', '  }\n', '}']