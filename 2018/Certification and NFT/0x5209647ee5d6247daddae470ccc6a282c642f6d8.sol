['/*\n', '  8888888 .d8888b.   .d88888b.   .d8888b.  888                     888                 888      \n', '    888  d88P  Y88b d88P" "Y88b d88P  Y88b 888                     888                 888      \n', '    888  888    888 888     888 Y88b.      888                     888                 888      \n', '    888  888        888     888  "Y888b.   888888  8888b.  888d888 888888      .d8888b 88888b.  \n', '    888  888        888     888     "Y88b. 888        "88b 888P"   888        d88P"    888 "88b \n', '    888  888    888 888     888       "888 888    .d888888 888     888        888      888  888 \n', '    888  Y88b  d88P Y88b. .d88P Y88b  d88P Y88b.  888  888 888     Y88b.  d8b Y88b.    888  888 \n', '  8888888 "Y8888P"   "Y88888P"   "Y8888P"   "Y888 "Y888888 888      "Y888 Y8P  "Y8888P 888  888 \n', '\n', '  Rocket startup for your ICO\n', '\n', '  The innovative platform to create your initial coin offering (ICO) simply, safely and professionally.\n', '  All the services your project needs: KYC, AI Audit, Smart contract wizard, Legal template,\n', '  Master Nodes management, on a single SaaS platform!\n', '*/\n', 'pragma solidity ^0.4.21;\n', '\n', '// File: contracts\\ICOStartPromo.sol\n', '\n', 'contract ICOStartPromo {\n', '\n', '  string public url = "https://icostart.ch/token-sale";\n', '  string public name = "icostart.ch/promo";\n', '  string public symbol = "ICHP";\n', '  uint8 public decimals = 18;\n', '  uint256 public totalSupply = 1000000 ether;\n', '\n', '  address private owner;\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function ICOStartPromo() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function setName(string _name) onlyOwner public {\n', '    name = _name;\n', '  }\n', '\n', '  function setSymbol(string _symbol) onlyOwner public {\n', '    symbol = _symbol;\n', '  }\n', '\n', '  function setUrl(string _url) onlyOwner public {\n', '    url = _url;\n', '  }\n', '\n', '  function balanceOf(address /*_owner*/) public view returns (uint256) {\n', '    return 1000 ether;\n', '  }\n', '\n', '  function transfer(address /*_to*/, uint256 /*_value*/) public returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address /*_from*/, address /*_to*/, uint256 /*_value*/) public returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function approve(address /*_spender*/, uint256 /*_value*/) public returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function allowance(address /*_owner*/, address /*_spender*/) public view returns (uint256) {\n', '    return 0;\n', '  }\n', '\n', '  function airdrop(address[] _recipients) public onlyOwner {\n', '    require(_recipients.length > 0);\n', '    require(_recipients.length <= 200);\n', '    for (uint256 i = 0; i < _recipients.length; i++) {\n', '      emit Transfer(address(this), _recipients[i], 1000 ether);\n', '    }\n', '  }\n', '\n', '  function() public payable {\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '}']
['/*\n', '  8888888 .d8888b.   .d88888b.   .d8888b.  888                     888                 888      \n', '    888  d88P  Y88b d88P" "Y88b d88P  Y88b 888                     888                 888      \n', '    888  888    888 888     888 Y88b.      888                     888                 888      \n', '    888  888        888     888  "Y888b.   888888  8888b.  888d888 888888      .d8888b 88888b.  \n', '    888  888        888     888     "Y88b. 888        "88b 888P"   888        d88P"    888 "88b \n', '    888  888    888 888     888       "888 888    .d888888 888     888        888      888  888 \n', '    888  Y88b  d88P Y88b. .d88P Y88b  d88P Y88b.  888  888 888     Y88b.  d8b Y88b.    888  888 \n', '  8888888 "Y8888P"   "Y88888P"   "Y8888P"   "Y888 "Y888888 888      "Y888 Y8P  "Y8888P 888  888 \n', '\n', '  Rocket startup for your ICO\n', '\n', '  The innovative platform to create your initial coin offering (ICO) simply, safely and professionally.\n', '  All the services your project needs: KYC, AI Audit, Smart contract wizard, Legal template,\n', '  Master Nodes management, on a single SaaS platform!\n', '*/\n', 'pragma solidity ^0.4.21;\n', '\n', '// File: contracts\\ICOStartPromo.sol\n', '\n', 'contract ICOStartPromo {\n', '\n', '  string public url = "https://icostart.ch/token-sale";\n', '  string public name = "icostart.ch/promo";\n', '  string public symbol = "ICHP";\n', '  uint8 public decimals = 18;\n', '  uint256 public totalSupply = 1000000 ether;\n', '\n', '  address private owner;\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function ICOStartPromo() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function setName(string _name) onlyOwner public {\n', '    name = _name;\n', '  }\n', '\n', '  function setSymbol(string _symbol) onlyOwner public {\n', '    symbol = _symbol;\n', '  }\n', '\n', '  function setUrl(string _url) onlyOwner public {\n', '    url = _url;\n', '  }\n', '\n', '  function balanceOf(address /*_owner*/) public view returns (uint256) {\n', '    return 1000 ether;\n', '  }\n', '\n', '  function transfer(address /*_to*/, uint256 /*_value*/) public returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address /*_from*/, address /*_to*/, uint256 /*_value*/) public returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function approve(address /*_spender*/, uint256 /*_value*/) public returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function allowance(address /*_owner*/, address /*_spender*/) public view returns (uint256) {\n', '    return 0;\n', '  }\n', '\n', '  function airdrop(address[] _recipients) public onlyOwner {\n', '    require(_recipients.length > 0);\n', '    require(_recipients.length <= 200);\n', '    for (uint256 i = 0; i < _recipients.length; i++) {\n', '      emit Transfer(address(this), _recipients[i], 1000 ether);\n', '    }\n', '  }\n', '\n', '  function() public payable {\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '}']
