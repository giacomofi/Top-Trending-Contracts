['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract ERC223Receiver {\n', '  function tokenFallback(address _sender, uint _value, bytes _data) external returns (bool ok);\n', '}\n', '\n', 'contract TalkToExpertPayment is ERC223Receiver, Ownable {\n', '\n', '  address public tokenContract;\n', '  uint256[][] public payments;\n', '\n', '  event TokenFallback(uint256 userId, uint256 value);\n', '\n', '  constructor(address _tokenContract) public Ownable() {\n', '    tokenContract = _tokenContract;\n', '  }\n', '\n', '  function tokenFallback(address _sender, uint256 _value, bytes _extraData) external returns (bool ok) {\n', '    require(msg.sender == tokenContract);\n', '    uint256 userId = convertData(_extraData);\n', '    payments.push([userId, _value]);\n', '    emit TokenFallback(userId, _value);\n', '    return true;\n', '  }\n', '\n', '  function convertData(bytes _data) internal pure returns (uint256) {\n', '    uint256 payloadSize;\n', '    uint256 payload;\n', '    assembly {\n', '      payloadSize := mload(_data)\n', '      payload := mload(add(_data, 0x20))\n', '    }\n', '    payload = payload >> 8*(32 - payloadSize);\n', '    return payload;\n', '  }\n', '\n', '  function getPaymentsLength() public constant returns (uint256) {\n', '    return payments.length;\n', '  }\n', '\n', '   function getPayment(uint256 i) public constant returns (uint256[]) {\n', '     return payments[i];\n', '   }\n', '\n', '  function withdrawal() public onlyOwner returns (bool) {\n', '    ERC20Basic token = ERC20Basic(tokenContract);\n', '    uint256 balance = token.balanceOf(this);\n', '    token.transfer(msg.sender, balance);\n', '    return true;\n', '  }\n', '}']