['/**\n', ' * Copyright (c) 2018 blockimmo AG <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="55393c36303b26301537393a363e3c38383a7b363d">[email&#160;protected]</a>\n', ' * Non-Profit Open Software License 3.0 (NPOSL-3.0)\n', ' * https://opensource.org/licenses/NPOSL-3.0\n', ' */\n', '\n', '\n', 'pragma solidity 0.4.25;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() public onlyPendingOwner {\n', '    emit OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title LandRegistry\n', ' * @dev A minimal, simple database mapping properties to their on-chain representation (`TokenizedProperty`).\n', ' *\n', ' * The purpose of this contract is not to be official or replace the existing (off-chain) land registry.\n', ' * Its purpose is to map entries in the official registry to their on-chain representation.\n', ' * This mapping / bridging process is enabled by our legal framework, which works in-sync with and relies on this database.\n', ' *\n', ' * `this.landRegistry` is the single source of truth for on-chain properties verified legitimate by blockimmo.\n', ' * Any property not indexed in `this.landRegistry` is NOT verified legitimate by blockimmo.\n', ' *\n', ' * `TokenizedProperty` references `this` to only allow tokens of verified properties to be transferred.\n', ' * Any (unmodified) `TokenizedProperty`&#39;s tokens will be transferable if and only if it is indexed in `this.landRegistry` (otherwise locked).\n', ' *\n', ' * `LandRegistryProxy` enables `this` to be easily and reliably upgraded if absolutely necessary.\n', ' * `LandRegistryProxy` and `this` are controlled by a centralized entity.\n', ' * This centralization provides an extra layer of control / security until our contracts are time and battle tested.\n', ' * We intend to work towards full decentralization in small, precise, confident steps by transferring ownership\n', ' * of these contracts when appropriate and necessary.\n', ' */\n', 'contract LandRegistry is Claimable {\n', '  mapping(string => address) private landRegistry;\n', '\n', '  event Tokenized(string eGrid, address indexed property);\n', '  event Untokenized(string eGrid, address indexed property);\n', '\n', '  /**\n', '   * this function&#39;s abi should never change and always maintain backwards compatibility\n', '   */\n', '  function getProperty(string _eGrid) public view returns (address property) {\n', '    property = landRegistry[_eGrid];\n', '  }\n', '\n', '  function tokenizeProperty(string _eGrid, address _property) public onlyOwner {\n', '    require(bytes(_eGrid).length > 0, "eGrid must be non-empty string");\n', '    require(_property != address(0), "property address must be non-null");\n', '    require(landRegistry[_eGrid] == address(0), "property must not already exist in land registry");\n', '\n', '    landRegistry[_eGrid] = _property;\n', '    emit Tokenized(_eGrid, _property);\n', '  }\n', '\n', '  function untokenizeProperty(string _eGrid) public onlyOwner {\n', '    address property = getProperty(_eGrid);\n', '    require(property != address(0), "property must exist in land registry");\n', '\n', '    landRegistry[_eGrid] = address(0);\n', '    emit Untokenized(_eGrid, property);\n', '  }\n', '}']
['/**\n', ' * Copyright (c) 2018 blockimmo AG license@blockimmo.ch\n', ' * Non-Profit Open Software License 3.0 (NPOSL-3.0)\n', ' * https://opensource.org/licenses/NPOSL-3.0\n', ' */\n', '\n', '\n', 'pragma solidity 0.4.25;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() public onlyPendingOwner {\n', '    emit OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title LandRegistry\n', ' * @dev A minimal, simple database mapping properties to their on-chain representation (`TokenizedProperty`).\n', ' *\n', ' * The purpose of this contract is not to be official or replace the existing (off-chain) land registry.\n', ' * Its purpose is to map entries in the official registry to their on-chain representation.\n', ' * This mapping / bridging process is enabled by our legal framework, which works in-sync with and relies on this database.\n', ' *\n', ' * `this.landRegistry` is the single source of truth for on-chain properties verified legitimate by blockimmo.\n', ' * Any property not indexed in `this.landRegistry` is NOT verified legitimate by blockimmo.\n', ' *\n', ' * `TokenizedProperty` references `this` to only allow tokens of verified properties to be transferred.\n', " * Any (unmodified) `TokenizedProperty`'s tokens will be transferable if and only if it is indexed in `this.landRegistry` (otherwise locked).\n", ' *\n', ' * `LandRegistryProxy` enables `this` to be easily and reliably upgraded if absolutely necessary.\n', ' * `LandRegistryProxy` and `this` are controlled by a centralized entity.\n', ' * This centralization provides an extra layer of control / security until our contracts are time and battle tested.\n', ' * We intend to work towards full decentralization in small, precise, confident steps by transferring ownership\n', ' * of these contracts when appropriate and necessary.\n', ' */\n', 'contract LandRegistry is Claimable {\n', '  mapping(string => address) private landRegistry;\n', '\n', '  event Tokenized(string eGrid, address indexed property);\n', '  event Untokenized(string eGrid, address indexed property);\n', '\n', '  /**\n', "   * this function's abi should never change and always maintain backwards compatibility\n", '   */\n', '  function getProperty(string _eGrid) public view returns (address property) {\n', '    property = landRegistry[_eGrid];\n', '  }\n', '\n', '  function tokenizeProperty(string _eGrid, address _property) public onlyOwner {\n', '    require(bytes(_eGrid).length > 0, "eGrid must be non-empty string");\n', '    require(_property != address(0), "property address must be non-null");\n', '    require(landRegistry[_eGrid] == address(0), "property must not already exist in land registry");\n', '\n', '    landRegistry[_eGrid] = _property;\n', '    emit Tokenized(_eGrid, _property);\n', '  }\n', '\n', '  function untokenizeProperty(string _eGrid) public onlyOwner {\n', '    address property = getProperty(_eGrid);\n', '    require(property != address(0), "property must exist in land registry");\n', '\n', '    landRegistry[_eGrid] = address(0);\n', '    emit Untokenized(_eGrid, property);\n', '  }\n', '}']
