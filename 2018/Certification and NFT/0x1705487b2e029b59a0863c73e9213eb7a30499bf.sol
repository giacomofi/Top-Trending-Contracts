['pragma solidity ^0.4.21;\n', '// import &#39;./bonbon.sol&#39;;\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'interface AirdropToken {\n', '  function transfer(address _to, uint256 _value) external returns (bool);\n', '  function balanceOf(address _owner) constant external returns (uint256);\n', '  function decimals() constant external returns (uint256);\n', '}\n', '\n', 'contract ICOAirCenter is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  address public airdroptoken;\n', '  uint256 public decimals;\n', '  uint256 public rate;\n', '  uint256 public weiRaised;\n', '  AirdropToken internal token;\n', '  AirdropToken internal tmptoken;\n', '  AirdropToken internal icotoken;\n', '\n', '  event TransferredToken(address indexed to, uint256 value);\n', '  event FailedTransfer(address indexed to, uint256 value);\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  modifier whenDropIsActive() {\n', '    assert(isActive());\n', '    _;\n', '  }\n', '\n', '  constructor() public {\n', '    // initial token\n', '    airdroptoken = 0x6EA3bA628a73D22E924924dF3661843e53e5c3AA;\n', '    token = AirdropToken(airdroptoken);\n', '    tmptoken = AirdropToken(airdroptoken);\n', '    icotoken = AirdropToken(airdroptoken);\n', '    decimals = getDecimals();\n', '    rate = 10000; // 1 eth for 10000 bbt\n', '  }\n', '\n', '  function () external payable{\n', '    getTokens(msg.sender);\n', '  }\n', '\n', '  function getTokens(address _beneficiary) public payable{\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '    uint256 tokenbalance = icotoken.balanceOf(this);\n', '    require(tokenbalance >= tokens);\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender,_beneficiary,weiAmount,tokens);\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // begin buy token related functions \n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal pure {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal pure {\n', '    // optional override\n', '  }\n', '\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    icotoken.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal pure{\n', '    // optional override\n', '  }\n', '\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  // end\n', '\n', '  function isActive() public constant returns (bool) {\n', '    return (\n', '      tokensAvailable() > 0 // Tokens must be available to send\n', '      );\n', '  }\n', '\n', '  function getDecimals() public constant returns (uint256){\n', '    return token.decimals();\n', '  }\n', '\n', '\n', '  function setToken(address tokenaddress) onlyOwner external{\n', '    require(tokenaddress != address(0));\n', '    token = AirdropToken(tokenaddress);\n', '    airdroptoken = tokenaddress;\n', '    decimals = getDecimals();\n', '  }\n', '\n', '  //below function can be used when you want to send every recipeint with different number of tokens\n', '  function sendTokens(address tokenaddress,address[] dests, uint256[] values) whenDropIsActive onlyOwner external {\n', '    require(dests.length == values.length);\n', '    require(tokenaddress == airdroptoken);\n', '    uint256 i = 0;\n', '    while (i < dests.length) {\n', '      uint256 toSend = values[i].mul(10**decimals);\n', '      sendInternally(dests[i] , toSend, values[i]);\n', '      i++;\n', '    }\n', '  }\n', '\n', '  // this function can be used when you want to send same number of tokens to all the recipients\n', '  function sendTokensSingleValue(address tokenaddress,address[] dests, uint256 value) whenDropIsActive onlyOwner external {\n', '    require(tokenaddress == airdroptoken);\n', '    \n', '    uint256 i = 0;\n', '    uint256 toSend = value.mul(10**decimals);\n', '    while (i < dests.length) {\n', '      sendInternally(dests[i] , toSend, value);\n', '      i++;\n', '    }\n', '  }  \n', '\n', '  function sendInternally(address recipient, uint256 tokensToSend, uint256 valueToPresent) internal {\n', '    if(recipient == address(0)) return;\n', '\n', '    if(tokensAvailable() >= tokensToSend) {\n', '      token.transfer(recipient, tokensToSend);\n', '      emit TransferredToken(recipient, valueToPresent);\n', '    }else {\n', '        emit FailedTransfer(recipient, valueToPresent);\n', '    }\n', '  }\n', '\n', '  function tokensAvailable() public constant returns (uint256) {\n', '    return token.balanceOf(this);\n', '  }\n', '\n', '  // fund retrieval related functions\n', '  function retrieveToken(address tokenaddress) public onlyOwner{\n', '    tmptoken = AirdropToken(tokenaddress);\n', '    uint256 balance = tmptoken.balanceOf(this);\n', '    require (balance > 0);\n', '    tmptoken.transfer(owner,balance);\n', '  }\n', '\n', '  function retrieveEth(uint256 value) public onlyOwner{\n', '    uint256 ethamount = value.mul(10**18);\n', '    uint256 balance = address(this).balance;\n', '    require (balance > 0 && ethamount<= balance);\n', '    owner.transfer(ethamount);\n', '  }\n', '\n', '  function destroy() public onlyOwner {\n', '    uint256 balance = tokensAvailable();\n', '    require (balance > 0);\n', '    token.transfer(owner, balance);\n', '    selfdestruct(owner);\n', '  }\n', '}']
['pragma solidity ^0.4.21;\n', "// import './bonbon.sol';\n", 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'interface AirdropToken {\n', '  function transfer(address _to, uint256 _value) external returns (bool);\n', '  function balanceOf(address _owner) constant external returns (uint256);\n', '  function decimals() constant external returns (uint256);\n', '}\n', '\n', 'contract ICOAirCenter is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  address public airdroptoken;\n', '  uint256 public decimals;\n', '  uint256 public rate;\n', '  uint256 public weiRaised;\n', '  AirdropToken internal token;\n', '  AirdropToken internal tmptoken;\n', '  AirdropToken internal icotoken;\n', '\n', '  event TransferredToken(address indexed to, uint256 value);\n', '  event FailedTransfer(address indexed to, uint256 value);\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  modifier whenDropIsActive() {\n', '    assert(isActive());\n', '    _;\n', '  }\n', '\n', '  constructor() public {\n', '    // initial token\n', '    airdroptoken = 0x6EA3bA628a73D22E924924dF3661843e53e5c3AA;\n', '    token = AirdropToken(airdroptoken);\n', '    tmptoken = AirdropToken(airdroptoken);\n', '    icotoken = AirdropToken(airdroptoken);\n', '    decimals = getDecimals();\n', '    rate = 10000; // 1 eth for 10000 bbt\n', '  }\n', '\n', '  function () external payable{\n', '    getTokens(msg.sender);\n', '  }\n', '\n', '  function getTokens(address _beneficiary) public payable{\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '    uint256 tokenbalance = icotoken.balanceOf(this);\n', '    require(tokenbalance >= tokens);\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender,_beneficiary,weiAmount,tokens);\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // begin buy token related functions \n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal pure {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal pure {\n', '    // optional override\n', '  }\n', '\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    icotoken.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal pure{\n', '    // optional override\n', '  }\n', '\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  // end\n', '\n', '  function isActive() public constant returns (bool) {\n', '    return (\n', '      tokensAvailable() > 0 // Tokens must be available to send\n', '      );\n', '  }\n', '\n', '  function getDecimals() public constant returns (uint256){\n', '    return token.decimals();\n', '  }\n', '\n', '\n', '  function setToken(address tokenaddress) onlyOwner external{\n', '    require(tokenaddress != address(0));\n', '    token = AirdropToken(tokenaddress);\n', '    airdroptoken = tokenaddress;\n', '    decimals = getDecimals();\n', '  }\n', '\n', '  //below function can be used when you want to send every recipeint with different number of tokens\n', '  function sendTokens(address tokenaddress,address[] dests, uint256[] values) whenDropIsActive onlyOwner external {\n', '    require(dests.length == values.length);\n', '    require(tokenaddress == airdroptoken);\n', '    uint256 i = 0;\n', '    while (i < dests.length) {\n', '      uint256 toSend = values[i].mul(10**decimals);\n', '      sendInternally(dests[i] , toSend, values[i]);\n', '      i++;\n', '    }\n', '  }\n', '\n', '  // this function can be used when you want to send same number of tokens to all the recipients\n', '  function sendTokensSingleValue(address tokenaddress,address[] dests, uint256 value) whenDropIsActive onlyOwner external {\n', '    require(tokenaddress == airdroptoken);\n', '    \n', '    uint256 i = 0;\n', '    uint256 toSend = value.mul(10**decimals);\n', '    while (i < dests.length) {\n', '      sendInternally(dests[i] , toSend, value);\n', '      i++;\n', '    }\n', '  }  \n', '\n', '  function sendInternally(address recipient, uint256 tokensToSend, uint256 valueToPresent) internal {\n', '    if(recipient == address(0)) return;\n', '\n', '    if(tokensAvailable() >= tokensToSend) {\n', '      token.transfer(recipient, tokensToSend);\n', '      emit TransferredToken(recipient, valueToPresent);\n', '    }else {\n', '        emit FailedTransfer(recipient, valueToPresent);\n', '    }\n', '  }\n', '\n', '  function tokensAvailable() public constant returns (uint256) {\n', '    return token.balanceOf(this);\n', '  }\n', '\n', '  // fund retrieval related functions\n', '  function retrieveToken(address tokenaddress) public onlyOwner{\n', '    tmptoken = AirdropToken(tokenaddress);\n', '    uint256 balance = tmptoken.balanceOf(this);\n', '    require (balance > 0);\n', '    tmptoken.transfer(owner,balance);\n', '  }\n', '\n', '  function retrieveEth(uint256 value) public onlyOwner{\n', '    uint256 ethamount = value.mul(10**18);\n', '    uint256 balance = address(this).balance;\n', '    require (balance > 0 && ethamount<= balance);\n', '    owner.transfer(ethamount);\n', '  }\n', '\n', '  function destroy() public onlyOwner {\n', '    uint256 balance = tokensAvailable();\n', '    require (balance > 0);\n', '    token.transfer(owner, balance);\n', '    selfdestruct(owner);\n', '  }\n', '}']
