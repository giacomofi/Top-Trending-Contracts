['pragma solidity ^0.4.11;\n', '\n', '\n', 'contract ERC20 {\n', '\n', '  function balanceOf(address who) constant public returns (uint);\n', '  function allowance(address owner, address spender) constant public returns (uint);\n', '\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) public returns (bool ok);\n', '  function approve(address spender, uint value) public returns (bool ok);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '// Controller for Token interface\n', '// Taken from https://github.com/Giveth/minime/blob/master/contracts/MiniMeToken.sol\n', '\n', '/// @dev The token controller contract must implement these functions\n', 'contract TokenController {\n', '    /// @notice Called when `_owner` sends ether to the Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) payable public returns(bool);\n', '\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n', '\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount) public\n', '        returns(bool);\n', '}\n', '\n', '\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { require(msg.sender == controller); _; }\n', '\n', '    address public controller;\n', '\n', '    function Controlled() public { controller = msg.sender;}\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) onlyController public {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', '\n', 'contract ControlledToken is ERC20, Controlled {\n', '\n', '    uint256 constant MAX_UINT256 = 2**256 - 1;\n', '\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '\n', '    /* Public variables of the token */\n', '\n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string public name;                   //fancy name: eg Simon Bucks\n', "    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n", '    string public symbol;                 //An identifier: eg SBX\n', "    string public version = '1.0';       //human 0.1 standard. Just an arbitrary versioning scheme.\n", '    uint256 public totalSupply;\n', '\n', '    function ControlledToken(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '        ) {\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        //require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        require(balances[msg.sender] >= _value);\n', '\n', '        if (isContract(controller)) {\n', '            require(TokenController(controller).onTransfer(msg.sender, _to, _value));\n', '        }\n', '\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        // Alerts the token controller of the transfer\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '\n', '        if (isContract(controller)) {\n', '            require(TokenController(controller).onTransfer(_from, _to, _value));\n', '        }\n', '\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '\n', '        // Alerts the token controller of the approve function call\n', '        if (isContract(controller)) {\n', '            require(TokenController(controller).onApprove(msg.sender, _spender, _value));\n', '        }\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    ////////////////\n', '// Generate and destroy tokens\n', '////////////////\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function generateTokens(address _owner, uint _amount ) onlyController returns (bool) {\n', '        uint curTotalSupply = totalSupply;\n', '        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n', '        uint previousBalanceTo = balanceOf(_owner);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        totalSupply = curTotalSupply + _amount;\n', '        balances[_owner]  = previousBalanceTo + _amount;\n', '        Transfer(0, _owner, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _owner The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function destroyTokens(address _owner, uint _amount\n', '    ) onlyController returns (bool) {\n', '        uint curTotalSupply = totalSupply;\n', '        require(curTotalSupply >= _amount);\n', '        uint previousBalanceFrom = balanceOf(_owner);\n', '        require(previousBalanceFrom >= _amount);\n', '        totalSupply = curTotalSupply - _amount;\n', '        balances[_owner] = previousBalanceFrom - _amount;\n', '        Transfer(_owner, 0, _amount);\n', '        return true;\n', '    }\n', '\n', "    /// @notice The fallback function: If the contract's controller has not been\n", '    ///  set to 0, then the `proxyPayment` method is called which relays the\n', '    ///  ether and creates tokens as described in the token controller contract\n', '    function ()  payable {\n', '        require(isContract(controller));\n', '        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        if (_addr == 0) return false;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size>0;\n', '    }\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address _token) onlyController {\n', '        if (_token == 0x0) {\n', '            controller.transfer(this.balance);\n', '            return;\n', '        }\n', '\n', '        ControlledToken token = ControlledToken(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(controller, balance);\n', '        ClaimedTokens(_token, controller, balance);\n', '    }\n', '\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '}\n', '\n', '\n', '\n', '/// `Owned` is a base level contract that assigns an `owner` that can be later changed\n', 'contract Owned {\n', '    /// @dev `owner` is the only address that can call a function with this\n', '    /// modifier\n', '    modifier onlyOwner { require (msg.sender == owner); _; }\n', '\n', '    address public owner;\n', '\n', '    /// @notice The Constructor assigns the message sender to be `owner`\n', '    function Owned() { owner = msg.sender;}\n', '\n', '    /// @notice `owner` can step down and assign some other address to this role\n', '    /// @param _newOwner The address of the new owner. 0x0 can be used to create\n', '    ///  an unowned neutral vault, however that cannot be undone\n', '    function changeOwner(address _newOwner)  onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' *\n', ' */\n', 'contract SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract TokenSaleAfterSplit is TokenController, Owned, SafeMath {\n', '\n', '\n', '    uint public startFundingTime;           // In UNIX Time Format\n', '    uint public endFundingTime;             // In UNIX Time Format\n', '\n', '    uint public tokenCap;                   // Maximum amount of tokens to be distributed\n', '    uint public totalTokenCount;            // Actual amount of tokens distributed\n', '\n', '    uint public totalCollected;             // In wei\n', '    ControlledToken public tokenContract;   // The new token for this TokenSale\n', '    address public vaultAddress;            // The address to hold the funds donated\n', '    bool public transfersAllowed;           // If the token transfers are allowed\n', '    uint256 public exchangeRate;            // USD/ETH rate * 100\n', '    uint public exchangeRateAt;             // Block number when exchange rate was set\n', '\n', "    /// @notice 'TokenSale()' initiates the TokenSale by setting its funding\n", '    /// parameters\n', '    /// @dev There are several checks to make sure the parameters are acceptable\n', '    /// @param _startFundingTime The UNIX time that the TokenSale will be able to\n', '    /// start receiving funds\n', '    /// @param _endFundingTime The UNIX time that the TokenSale will stop being able\n', '    /// to receive funds\n', '    /// @param _tokenCap Maximum amount of tokens to be sold\n', '    /// @param _vaultAddress The address that will store the donated funds\n', '    /// @param _tokenAddress Address of the token contract this contract controls\n', '    /// @param _transfersAllowed if token transfers are allowed\n', '    /// @param _exchangeRate USD/ETH rate * 100\n', '    function TokenSaleAfterSplit (\n', '        uint _startFundingTime,\n', '        uint _endFundingTime,\n', '        uint _tokenCap,\n', '        address _vaultAddress,\n', '        address _tokenAddress,\n', '        bool _transfersAllowed,\n', '        uint256 _exchangeRate\n', '    ) public {\n', '        require ((_endFundingTime >= now) &&           // Cannot end in the past\n', '            (_endFundingTime > _startFundingTime) &&\n', '            (_vaultAddress != 0));                    // To prevent burning ETH\n', '        startFundingTime = _startFundingTime;\n', '        endFundingTime = _endFundingTime;\n', '        tokenCap = _tokenCap;\n', '        tokenContract = ControlledToken(_tokenAddress);// The Deployed Token Contract\n', '        vaultAddress = _vaultAddress;\n', '        transfersAllowed = _transfersAllowed;\n', '        exchangeRate = _exchangeRate;\n', '        exchangeRateAt = block.number;\n', '    }\n', '\n', '    /// @dev The fallback function is called when ether is sent to the contract, it\n', '    /// simply calls `doPayment()` with the address that sent the ether as the\n', '    /// `_owner`. Payable is a required solidity modifier for functions to receive\n', '    /// ether, without this modifier functions will throw if ether is sent to them\n', '    function ()  payable public {\n', '        doPayment(msg.sender);\n', '    }\n', '\n', '\n', '    /// @dev `doPayment()` is an internal function that sends the ether that this\n', '    ///  contract receives to the `vault` and creates tokens in the address of the\n', '    ///  `_owner` assuming the TokenSale is still accepting funds\n', '    /// @param _owner The address that will hold the newly created tokens\n', '\n', '    function doPayment(address _owner) internal {\n', '\n', '        // First check that the TokenSale is allowed to receive this donation\n', '        require ((now >= startFundingTime) &&\n', '            (now <= endFundingTime) &&\n', '            (tokenContract.controller() != 0) &&\n', '            (msg.value != 0) );\n', '\n', '        uint256 tokensAmount = mul(msg.value, exchangeRate);\n', '\n', '        require( totalTokenCount + tokensAmount <= tokenCap );\n', '\n', '        //Track how much the TokenSale has collected\n', '        totalCollected += msg.value;\n', '\n', '        //Send the ether to the vault\n', '        require (vaultAddress.call.gas(28000).value(msg.value)());\n', '\n', '        // Creates an  amount of tokens base on ether sent and exchange rate. The new tokens are created\n', '        //  in the `_owner` address\n', '        require (tokenContract.generateTokens(_owner, tokensAmount));\n', '\n', '        totalTokenCount += tokensAmount;\n', '\n', '        return;\n', '    }\n', '\n', '    function distributeTokens(address[] _owners, uint256[] _tokens) onlyOwner public {\n', '\n', '        require( _owners.length == _tokens.length );\n', '        for(uint i=0;i<_owners.length;i++){\n', '            require (tokenContract.generateTokens(_owners[i], _tokens[i]));\n', '        }\n', '\n', '    }\n', '\n', '\n', '    /// @notice `onlyOwner` changes the location that ether is sent\n', '    /// @param _newVaultAddress The address that will receive the ether sent to this token sale\n', '    function setVault(address _newVaultAddress) onlyOwner public{\n', '        vaultAddress = _newVaultAddress;\n', '    }\n', '\n', '    /// @notice `onlyOwner` changes the setting to allow transfer tokens\n', '    /// @param _allow  allowing to transfer tokens\n', '    function setTransfersAllowed(bool _allow) onlyOwner public{\n', '        transfersAllowed = _allow;\n', '    }\n', '\n', '    /// @notice `onlyOwner` changes the exchange rate of token to ETH\n', '    /// @param _exchangeRate USD/ETH rate * 100\n', '    function setExchangeRate(uint256 _exchangeRate) onlyOwner public{\n', '        exchangeRate = _exchangeRate;\n', '        exchangeRateAt = block.number;\n', '    }\n', '\n', '    /// @notice `onlyOwner` changes the controller of the tokenContract\n', '    /// @param _newController - controller to be used with token\n', '    function changeController(address _newController) onlyOwner public {\n', '        tokenContract.changeController(_newController);\n', '    }\n', '\n', '    /////////////////\n', '    // TokenController interface\n', '    /////////////////\n', '\n', '    /// @notice `proxyPayment()` allows the caller to send ether to the TokenSale and\n', '    /// have the tokens created in an address of their choosing\n', '    /// @param _owner The address that will hold the newly created tokens\n', '\n', '    function proxyPayment(address _owner) payable public returns(bool) {\n', '        doPayment(_owner);\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '    /// @notice Notifies the controller about a transfer, for this TokenSale all\n', '    ///  transfers are allowed by default and no extra notifications are needed\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) public returns(bool) {\n', '        return transfersAllowed;\n', '    }\n', '\n', '    /// @notice Notifies the controller about an approval, for this TokenSale all\n', '    ///  approvals are allowed by default and no extra notifications are needed\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount) public\n', '        returns(bool)\n', '    {\n', '        return transfersAllowed;\n', '    }\n', '\n', '\n', '}']