['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract BFEXMini is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  // Start and end timestamps\n', '  uint public startTime;\n', '  /* uint public endTime; */\n', '\n', '  // BFEX Address where funds are collected\n', '  address public wallet;\n', '  address public feeWallet;\n', '\n', '  // Whitelist Enable\n', '  bool public whitelistEnable;\n', '\n', '  // timeLimitEnable Enable\n', '  bool public timeLimitEnable;\n', '\n', '  mapping (address => bool) public whitelist;\n', '  mapping (address => uint256) public bfexAmount; // 18 digits\n', '  mapping (address => uint256) public weiParticipate;\n', '  mapping (address => uint256) public balances;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised = 0;\n', '\n', '  // BFEX price pair with ETH\n', '  uint256 public rate;\n', '  uint256 public rateSecondTier;\n', '\n', '  // Minimum ETH to participate\n', '  uint256 public minimum;\n', '\n', '  // number of contributor\n', '  uint256 public contributor;\n', '\n', '  // Maximun number of contributor\n', '  uint256 public maxContributor;\n', '\n', '  event BFEXParticipate(\n', '    address sender,\n', '    uint256 amount\n', '  );\n', '\n', '  event WhitelistState(\n', '    address beneficiary,\n', '    bool whitelistState\n', '  );\n', '\n', '  event LogWithdrawal(\n', '    address receiver,\n', '    uint amount\n', '  );\n', '\n', '  /* solhint-disable */\n', '  constructor(address _wallet, address _feeWallet, uint256 _rate, uint256 _rateSecondTier, uint256 _minimum) public {\n', '\n', '    require(_wallet != address(0));\n', '\n', '    wallet = _wallet;\n', '    feeWallet = _feeWallet;\n', '    rate = _rate;\n', '    rateSecondTier = _rateSecondTier;\n', '    minimum = _minimum;\n', '    whitelistEnable = true;\n', '    timeLimitEnable = true;\n', '    contributor = 0;\n', '    maxContributor = 10001;\n', '    startTime = 1528625400; // 06/10/2018 @ 10:10am (UTC)\n', '  }\n', '  /* solhint-enable */\n', '\n', '  /**\n', '   * @dev Fallback function that can be used to participate in token generation event.\n', '   */\n', '  function() external payable {\n', '    getBFEX(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev set rate of Token per 1 ETH\n', '   * @param _rate of Token per 1 ETH\n', '   */\n', '  function setRate(uint _rate) public onlyOwner {\n', '    rate = _rate;\n', '  }\n', '\n', '  /**\n', '   * @dev setMinimum amount to participate\n', '   * @param _minimum minimum amount in wei\n', '   */\n', '  function setMinimum(uint256 _minimum) public onlyOwner {\n', '    minimum = _minimum;\n', '  }\n', '\n', '  /**\n', '   * @dev setMinimum amount to participate\n', '   * @param _max Maximum contributor allowed\n', '   */\n', '  function setMaxContributor(uint256 _max) public onlyOwner {\n', '    maxContributor = _max;\n', '  }\n', '\n', '  /**\n', '   * @dev Add single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '  function addToWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = true;\n', '    emit WhitelistState(_beneficiary, true);\n', '  }\n', '\n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelist[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Remove single address from whitelist.\n', '   * @param _beneficiary Address to be removed from the whitelist\n', '   */\n', '  function removeFromWhiteList(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = false;\n', '    emit WhitelistState(_beneficiary, false);\n', '  }\n', '\n', '  function isWhitelist(address _beneficiary) public view returns (bool whitelisted) {\n', '    return whitelist[_beneficiary];\n', '  }\n', '\n', '  function checkBenefit(address _beneficiary) public view returns (uint256 bfex) {\n', '    return bfexAmount[_beneficiary];\n', '  }\n', '\n', '  function checkContribution(address _beneficiary) public view returns (uint256 weiContribute) {\n', '    return weiParticipate[_beneficiary];\n', '  }\n', '  /**\n', '  * @dev getBfex function\n', '  * @param _participant Address performing the bfex token participate\n', '  */\n', '  function getBFEX(address _participant) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    _preApprove(_participant);\n', '    require(_participant != address(0));\n', '    require(weiAmount >= minimum);\n', '\n', '    // calculate bfex token _participant will recieve\n', '    uint256 bfexToken = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    // update ETH balance\n', '    uint256 raise = weiAmount.div(1000).mul(955);\n', '    uint256 fee = weiAmount.div(1000).mul(45);\n', '    // update contributor count\n', '    contributor += 1;\n', '\n', '    balances[wallet] = balances[wallet].add(raise);\n', '    balances[feeWallet] = balances[feeWallet].add(fee);\n', '\n', '    bfexAmount[_participant] = bfexAmount[_participant].add(bfexToken);\n', '    weiParticipate[_participant] = weiParticipate[_participant].add(weiAmount);\n', '\n', '    emit BFEXParticipate(_participant, weiAmount);\n', '  }\n', '\n', '  /**\n', '  * @dev calculate token amont\n', '  * @param _weiAmount wei amont user are participate\n', '  */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    uint256 _rate;\n', '    if (_weiAmount >= 0.1 ether && _weiAmount < 1 ether ) {\n', '      _rate = rate;\n', '    } else if (_weiAmount >= 1 ether ) {\n', '      _rate = rateSecondTier;\n', '    }\n', '    uint256 bfex = _weiAmount.mul(_rate);\n', '    /* bfex = bfex.div(1 ether); */\n', '    return bfex;\n', '  }\n', '\n', '  /**\n', '  * @dev check if address is on the whitelist\n', '  * @param _participant address\n', '  */\n', '  function _preApprove(address _participant) internal view {\n', '    require (maxContributor >= contributor);\n', '    if (timeLimitEnable == true) {\n', '      require (now >= startTime && now <= startTime + 1 days);\n', '    }\n', '    if (whitelistEnable == true) {\n', '      require(isWhitelist(_participant));\n', '      return;\n', '    } else {\n', '      return;\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev disable whitelist state\n', '  *\n', '  */\n', '  function disableWhitelist() public onlyOwner returns (bool whitelistState) {\n', '    whitelistEnable = false;\n', '    emit WhitelistState(msg.sender, whitelistEnable);\n', '    return whitelistEnable;\n', '  }\n', '\n', '  /**\n', '  * @dev enable whitelist state\n', '  *\n', '  */\n', '  function enableWhitelist() public onlyOwner returns (bool whitelistState) {\n', '    whitelistEnable = true;\n', '    emit WhitelistState(msg.sender, whitelistEnable);\n', '    return whitelistEnable;\n', '  }\n', '\n', '  function withdraw(uint _value) public returns (bool success) {\n', '    require(balances[msg.sender] <= _value);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    msg.sender.transfer(_value);\n', '    emit LogWithdrawal(msg.sender, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  function checkBalance(address _account) public view returns (uint256 balance)  {\n', '    return balances[_account];\n', '  }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract BFEXMini is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  // Start and end timestamps\n', '  uint public startTime;\n', '  /* uint public endTime; */\n', '\n', '  // BFEX Address where funds are collected\n', '  address public wallet;\n', '  address public feeWallet;\n', '\n', '  // Whitelist Enable\n', '  bool public whitelistEnable;\n', '\n', '  // timeLimitEnable Enable\n', '  bool public timeLimitEnable;\n', '\n', '  mapping (address => bool) public whitelist;\n', '  mapping (address => uint256) public bfexAmount; // 18 digits\n', '  mapping (address => uint256) public weiParticipate;\n', '  mapping (address => uint256) public balances;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised = 0;\n', '\n', '  // BFEX price pair with ETH\n', '  uint256 public rate;\n', '  uint256 public rateSecondTier;\n', '\n', '  // Minimum ETH to participate\n', '  uint256 public minimum;\n', '\n', '  // number of contributor\n', '  uint256 public contributor;\n', '\n', '  // Maximun number of contributor\n', '  uint256 public maxContributor;\n', '\n', '  event BFEXParticipate(\n', '    address sender,\n', '    uint256 amount\n', '  );\n', '\n', '  event WhitelistState(\n', '    address beneficiary,\n', '    bool whitelistState\n', '  );\n', '\n', '  event LogWithdrawal(\n', '    address receiver,\n', '    uint amount\n', '  );\n', '\n', '  /* solhint-disable */\n', '  constructor(address _wallet, address _feeWallet, uint256 _rate, uint256 _rateSecondTier, uint256 _minimum) public {\n', '\n', '    require(_wallet != address(0));\n', '\n', '    wallet = _wallet;\n', '    feeWallet = _feeWallet;\n', '    rate = _rate;\n', '    rateSecondTier = _rateSecondTier;\n', '    minimum = _minimum;\n', '    whitelistEnable = true;\n', '    timeLimitEnable = true;\n', '    contributor = 0;\n', '    maxContributor = 10001;\n', '    startTime = 1528625400; // 06/10/2018 @ 10:10am (UTC)\n', '  }\n', '  /* solhint-enable */\n', '\n', '  /**\n', '   * @dev Fallback function that can be used to participate in token generation event.\n', '   */\n', '  function() external payable {\n', '    getBFEX(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev set rate of Token per 1 ETH\n', '   * @param _rate of Token per 1 ETH\n', '   */\n', '  function setRate(uint _rate) public onlyOwner {\n', '    rate = _rate;\n', '  }\n', '\n', '  /**\n', '   * @dev setMinimum amount to participate\n', '   * @param _minimum minimum amount in wei\n', '   */\n', '  function setMinimum(uint256 _minimum) public onlyOwner {\n', '    minimum = _minimum;\n', '  }\n', '\n', '  /**\n', '   * @dev setMinimum amount to participate\n', '   * @param _max Maximum contributor allowed\n', '   */\n', '  function setMaxContributor(uint256 _max) public onlyOwner {\n', '    maxContributor = _max;\n', '  }\n', '\n', '  /**\n', '   * @dev Add single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '  function addToWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = true;\n', '    emit WhitelistState(_beneficiary, true);\n', '  }\n', '\n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelist[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Remove single address from whitelist.\n', '   * @param _beneficiary Address to be removed from the whitelist\n', '   */\n', '  function removeFromWhiteList(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = false;\n', '    emit WhitelistState(_beneficiary, false);\n', '  }\n', '\n', '  function isWhitelist(address _beneficiary) public view returns (bool whitelisted) {\n', '    return whitelist[_beneficiary];\n', '  }\n', '\n', '  function checkBenefit(address _beneficiary) public view returns (uint256 bfex) {\n', '    return bfexAmount[_beneficiary];\n', '  }\n', '\n', '  function checkContribution(address _beneficiary) public view returns (uint256 weiContribute) {\n', '    return weiParticipate[_beneficiary];\n', '  }\n', '  /**\n', '  * @dev getBfex function\n', '  * @param _participant Address performing the bfex token participate\n', '  */\n', '  function getBFEX(address _participant) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    _preApprove(_participant);\n', '    require(_participant != address(0));\n', '    require(weiAmount >= minimum);\n', '\n', '    // calculate bfex token _participant will recieve\n', '    uint256 bfexToken = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    // update ETH balance\n', '    uint256 raise = weiAmount.div(1000).mul(955);\n', '    uint256 fee = weiAmount.div(1000).mul(45);\n', '    // update contributor count\n', '    contributor += 1;\n', '\n', '    balances[wallet] = balances[wallet].add(raise);\n', '    balances[feeWallet] = balances[feeWallet].add(fee);\n', '\n', '    bfexAmount[_participant] = bfexAmount[_participant].add(bfexToken);\n', '    weiParticipate[_participant] = weiParticipate[_participant].add(weiAmount);\n', '\n', '    emit BFEXParticipate(_participant, weiAmount);\n', '  }\n', '\n', '  /**\n', '  * @dev calculate token amont\n', '  * @param _weiAmount wei amont user are participate\n', '  */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    uint256 _rate;\n', '    if (_weiAmount >= 0.1 ether && _weiAmount < 1 ether ) {\n', '      _rate = rate;\n', '    } else if (_weiAmount >= 1 ether ) {\n', '      _rate = rateSecondTier;\n', '    }\n', '    uint256 bfex = _weiAmount.mul(_rate);\n', '    /* bfex = bfex.div(1 ether); */\n', '    return bfex;\n', '  }\n', '\n', '  /**\n', '  * @dev check if address is on the whitelist\n', '  * @param _participant address\n', '  */\n', '  function _preApprove(address _participant) internal view {\n', '    require (maxContributor >= contributor);\n', '    if (timeLimitEnable == true) {\n', '      require (now >= startTime && now <= startTime + 1 days);\n', '    }\n', '    if (whitelistEnable == true) {\n', '      require(isWhitelist(_participant));\n', '      return;\n', '    } else {\n', '      return;\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev disable whitelist state\n', '  *\n', '  */\n', '  function disableWhitelist() public onlyOwner returns (bool whitelistState) {\n', '    whitelistEnable = false;\n', '    emit WhitelistState(msg.sender, whitelistEnable);\n', '    return whitelistEnable;\n', '  }\n', '\n', '  /**\n', '  * @dev enable whitelist state\n', '  *\n', '  */\n', '  function enableWhitelist() public onlyOwner returns (bool whitelistState) {\n', '    whitelistEnable = true;\n', '    emit WhitelistState(msg.sender, whitelistEnable);\n', '    return whitelistEnable;\n', '  }\n', '\n', '  function withdraw(uint _value) public returns (bool success) {\n', '    require(balances[msg.sender] <= _value);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    msg.sender.transfer(_value);\n', '    emit LogWithdrawal(msg.sender, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  function checkBalance(address _account) public view returns (uint256 balance)  {\n', '    return balances[_account];\n', '  }\n', '}']
