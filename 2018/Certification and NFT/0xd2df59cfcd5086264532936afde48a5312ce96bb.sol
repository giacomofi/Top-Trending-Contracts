['pragma solidity ^0.4.25;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '    \n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '    );\n', '    \n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        _owner = msg.sender;\n', '    }\n', '    \n', '    /**\n', '    * @return the address of the owner.\n', '    */\n', '    function owner() public view returns(address) {\n', '        return _owner;\n', '    }\n', '    \n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier contract_onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '    }\n', '    \n', '    /**\n', '    * @return true if `msg.sender` is the owner of the contract.\n', '    */\n', '    function isOwner() public view returns(bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '    \n', '    /**\n', '    * @dev Allows the current owner to relinquish control of the contract.\n', '    * @notice Renouncing to ownership will leave the contract without an owner.\n', '    * It will not be possible to call the functions with the `onlyOwner`\n', '    * modifier anymore.\n', '    */\n', '    function renounceOwnership() public contract_onlyOwner {\n', '        emit OwnershipRenounced(_owner);\n', '        _owner = address(0);\n', '    }\n', '    \n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public contract_onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '    \n', '    /**\n', '    * @dev Transfers control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that revert on error\n', '*/\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '        return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract Auction is Ownable {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    event bidPlaced(uint bid, address _address);\n', '    event etherTransfered(uint amount, address _address);\n', '    \n', '    string _itemName;\n', '    \n', '    address _highestBidder;\n', '    uint _highestBid;\n', '    uint _minStep;\n', '    uint _end;\n', '    uint _start;\n', '    \n', '    constructor() public {\n', '        \n', "        _itemName = 'Pumpkinhead 1';\n", '        _highestBid = 0;\n', '        _highestBidder = address(this);\n', '        \n', '    \t\t\t\t// \t\t\t\t\t    end\n', '        // 23.10. 23:59pm UTC Pumpkinhead 1\t1540339140\n', '        // 27.10. 23:59pm UTC Pumpkinhead 2\t1540684740\n', '        // 31.10. 23:30pm UTC Pumpkinhead 3\t1541028600\n', '        // 31.10. 23:59pm UTC Frankie  \t\t1541030340\n', '        \n', '        _end = 1540339140;\n', '        _start = _end - 3 days;\n', '\n', '        _minStep = 10000000000000000;\n', '\n', '    }\n', '    \n', '    function queryBid() public view returns (string, uint, uint, address, uint, uint) {\n', '        return (_itemName, _start, _highestBid, _highestBidder, _end, _highestBid+_minStep);\n', '    }\n', '    \n', '    function placeBid() payable public returns (bool) {\n', "        require(block.timestamp > _start, 'Auction not started');\n", "        require(block.timestamp < _end, 'Auction ended');\n", "        require(msg.value >= _highestBid.add(_minStep), 'Amount too low');\n", '\n', '        uint _payout = _highestBid;\n', '        _highestBid = msg.value;\n', '        \n', '        address _oldHighestBidder = _highestBidder;\n', '        _highestBidder = msg.sender;\n', '        \n', '        if(_oldHighestBidder.send(_payout) == true) {\n', '            emit etherTransfered(_payout, _oldHighestBidder);\n', '        }\n', '        \n', '        emit bidPlaced(_highestBid, _highestBidder);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function queryBalance() public view returns (uint) {\n', '        return address(this).balance;\n', '    }\n', '    \n', '    function weiToOwner(address _address) public contract_onlyOwner returns (bool success) {\n', "        require(block.timestamp > _end, 'Auction not ended');\n", '\n', '        _address.transfer(address(this).balance);\n', '        \n', '        return true;\n', '    }\n', '}']