['pragma solidity 0.4.23;\n', '\n', 'contract ERC20BasicInterface {\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '}\n', '\n', '/**\n', ' * @title ERC20Lock\n', ' *\n', ' * This contract keeps particular token till the unlock date and sends it to predefined destination.\n', ' */\n', 'contract DLSDLockBounty3 {\n', '    ERC20BasicInterface constant TOKEN = ERC20BasicInterface(0x8458d484572cEB89ce70EEBBe17Dc84707b241eD);\n', '    address constant OWNER = 0x603F65F7Fc4f650c2F025800F882CFb62BF23580;\n', '    address constant DESTINATION = 0x3135081dE9aEf677b3d7445e6C44Bb385cBD3E6a;\n', '    uint constant UNLOCK_DATE = 1548547199; // Saturday, January 26, 2019 11:59:59 PM\n', '\n', '    function unlock() public returns(bool) {\n', "        require(now > UNLOCK_DATE, 'Tokens are still locked');\n", '        return TOKEN.transfer(DESTINATION, TOKEN.balanceOf(address(this)));\n', '    }\n', '\n', '    function recoverTokens(ERC20BasicInterface _token, address _to, uint _value) public returns(bool) {\n', "        require(msg.sender == OWNER, 'Access denied');\n", '        // This token meant to be recovered by calling unlock().\n', "        require(address(_token) != address(TOKEN), 'Can not recover this token');\n", '        return _token.transfer(_to, _value);\n', '    }\n', '}']