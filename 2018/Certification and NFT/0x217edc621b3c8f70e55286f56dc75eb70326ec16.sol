['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract TimeLockedWallet {\n', '\n', '    address public creator;\n', '    address public owner;\n', '    uint public unlockDate;\n', '    uint public createdAt;\n', '\n', '    event Received(address from, uint amount);\n', '    event Withdrew(address to, uint amount);\n', '    event WithdrewTokens(address tokenContract, address to, uint amount);\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    constructor (\n', '        address _owner,\n', '        uint _unlockDate\n', '    ) public {\n', '        creator = msg.sender;\n', '        owner = _owner;\n', '        unlockDate = _unlockDate;\n', '        createdAt = now;\n', '    }\n', '\n', '    // keep all the ether sent to this address\n', '    function() payable public { \n', '        emit Received(msg.sender, msg.value);\n', '    }\n', '\n', '    // callable by owner only, after specified time\n', '    function withdraw() onlyOwner public {\n', '       require(now >= unlockDate);\n', '       //now send all the balance\n', '       uint256 balance = address(this).balance;\n', '       msg.sender.transfer(balance);\n', '       emit Withdrew(msg.sender, balance);\n', '    }\n', '\n', '    // callable by owner only, after specified time, only for Tokens implementing ERC20\n', '    function withdrawTokens(address _tokenContract) onlyOwner public {\n', '       require(now >= unlockDate);\n', '       ERC20 token = ERC20(_tokenContract);\n', '       //now send all the token balance\n', '       uint tokenBalance = token.balanceOf(this);\n', '       token.transfer(owner, tokenBalance);\n', '       emit WithdrewTokens(_tokenContract, msg.sender, tokenBalance);\n', '    }\n', '\n', '    function info() public view returns(address _creator, address _owner, uint _unlockDate, uint _now, uint _createdAt, uint _balance) {\n', '        return (creator, owner, unlockDate, now, createdAt, address(this).balance);\n', '    }\n', '    \n', '    function isLocked() public view returns(bool _isLocked) {\n', '        \n', '        return now < unlockDate;\n', '    }\n', '    \n', '    function tokenBalance(address _tokenContract) public view returns(uint _balance) {\n', '        \n', '        ERC20 token = ERC20(_tokenContract);\n', '       //now send all the token balance\n', '       uint balance = token.balanceOf(this);\n', '       return balance;\n', '    }\n', ' \n', '   \n', '}']
['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract TimeLockedWallet {\n', '\n', '    address public creator;\n', '    address public owner;\n', '    uint public unlockDate;\n', '    uint public createdAt;\n', '\n', '    event Received(address from, uint amount);\n', '    event Withdrew(address to, uint amount);\n', '    event WithdrewTokens(address tokenContract, address to, uint amount);\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    constructor (\n', '        address _owner,\n', '        uint _unlockDate\n', '    ) public {\n', '        creator = msg.sender;\n', '        owner = _owner;\n', '        unlockDate = _unlockDate;\n', '        createdAt = now;\n', '    }\n', '\n', '    // keep all the ether sent to this address\n', '    function() payable public { \n', '        emit Received(msg.sender, msg.value);\n', '    }\n', '\n', '    // callable by owner only, after specified time\n', '    function withdraw() onlyOwner public {\n', '       require(now >= unlockDate);\n', '       //now send all the balance\n', '       uint256 balance = address(this).balance;\n', '       msg.sender.transfer(balance);\n', '       emit Withdrew(msg.sender, balance);\n', '    }\n', '\n', '    // callable by owner only, after specified time, only for Tokens implementing ERC20\n', '    function withdrawTokens(address _tokenContract) onlyOwner public {\n', '       require(now >= unlockDate);\n', '       ERC20 token = ERC20(_tokenContract);\n', '       //now send all the token balance\n', '       uint tokenBalance = token.balanceOf(this);\n', '       token.transfer(owner, tokenBalance);\n', '       emit WithdrewTokens(_tokenContract, msg.sender, tokenBalance);\n', '    }\n', '\n', '    function info() public view returns(address _creator, address _owner, uint _unlockDate, uint _now, uint _createdAt, uint _balance) {\n', '        return (creator, owner, unlockDate, now, createdAt, address(this).balance);\n', '    }\n', '    \n', '    function isLocked() public view returns(bool _isLocked) {\n', '        \n', '        return now < unlockDate;\n', '    }\n', '    \n', '    function tokenBalance(address _tokenContract) public view returns(uint _balance) {\n', '        \n', '        ERC20 token = ERC20(_tokenContract);\n', '       //now send all the token balance\n', '       uint balance = token.balanceOf(this);\n', '       return balance;\n', '    }\n', ' \n', '   \n', '}']
