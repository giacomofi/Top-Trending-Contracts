['pragma solidity ^0.4.22;\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic \n', '{\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath \n', '{\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) \n', '    {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c  / a == b);\n', '        return c;\n', '    }\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) \n', '    {\n', '        return a  / b;\n', '    }\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) \n', '    {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) \n', '    {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', 'pragma solidity ^0.4.22;\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic \n', '{\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract Owner\n', '{\n', '    address internal owner;\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function changeOwner(address newOwner) public onlyOwner returns(bool)\n', '    {\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '}\n', 'pragma solidity ^0.4.22;\n', 'contract TkgPlus is Owner \n', '{\n', '    mapping(address => uint256) internal balances;\n', '    function parse2wei(uint _value) internal pure returns(uint)\n', '    {\n', '        uint decimals = 18;\n', '        return _value * (10 ** uint256(decimals));\n', '    }\n', '\n', '    address public ADDR_TKG_ORG;\n', '    address public ADDR_TKG_TECH_FUND;\n', '    address public ADDR_TKG_ASSOCIATION;\n', '    address public ADDR_TKG_VC;\n', '    address public ADDR_TKG_NODE;\n', '    address public ADDR_TKG_CHARITY;\n', '    address public ADDR_TKG_TEAM;\n', '    struct IcoRule\n', '    {\n', '        uint startTime;\n', '        uint endTime;\n', '        uint rate;\n', '        uint shareRuleGroupId;\n', '        address[] addrList;\n', '        bool canceled;\n', '    }\n', '    IcoRule[] icoRuleList;\n', '    mapping (address => uint[] ) addr2icoRuleIdList;\n', '    event GetIcoRule(uint startTime, uint endTime, uint rate, uint shareRuleGroupId, bool canceled);\n', '    function icoRuleAdd(uint startTime, uint endTime, uint rate, uint shareRuleGroupId) public onlyOwner returns (bool) \n', '    {\n', '        address[] memory addr;\n', '        bool canceled = false;\n', '        IcoRule memory item = IcoRule(startTime, endTime, rate, shareRuleGroupId, addr, canceled);\n', '        icoRuleList.push(item);\n', '        return true;\n', '    }\n', '    function icoRuleUpdate(uint index, uint startTime, uint endTime, uint rate, uint shareRuleGroupId) public onlyOwner returns (bool) \n', '    {\n', '        require(icoRuleList.length > index);\n', '        if (startTime > 0) {\n', '            icoRuleList[index].startTime = startTime;\n', '        }\n', '        if (endTime > 0) {\n', '            icoRuleList[index].endTime = endTime;\n', '        }\n', '        if (rate > 0) {\n', '            icoRuleList[index].rate = rate;\n', '        }\n', '        icoRuleList[index].shareRuleGroupId = shareRuleGroupId;\n', '        return true;\n', '    }\n', '    function icoPushAddr(uint index, address addr) internal returns (bool) \n', '    {\n', '        icoRuleList[index].addrList.push(addr);\n', '        return true;\n', '    }\n', '    function icoRuleCancel(uint index) public onlyOwner returns (bool) \n', '    {\n', '        require(icoRuleList.length > index);\n', '        icoRuleList[index].canceled = true;\n', '        return true;\n', '    }\n', '    function getIcoRuleList() public returns (uint count) \n', '    {\n', '        count = icoRuleList.length;\n', '        for (uint i = 0; i < count ; i++)\n', '        {\n', '            emit GetIcoRule(icoRuleList[i].startTime, icoRuleList[i].endTime, icoRuleList[i].rate, icoRuleList[i].shareRuleGroupId, \n', '            icoRuleList[i].canceled);\n', '        }\n', '    }\n', '    function getIcoAddrCount(uint icoRuleId) public view onlyOwner returns (uint count) \n', '    {\n', '        count = icoRuleList[icoRuleId - 1].addrList.length;\n', '    }\n', '    function getIcoAddrListByIcoRuleId(uint icoRuleId, uint index) public view onlyOwner returns (address addr) \n', '    {\n', '        addr = icoRuleList[icoRuleId - 1].addrList[index];\n', '    }\n', '    function initIcoRule() internal returns(bool) \n', '    {\n', '        icoRuleAdd(1529251201, 1530374399, 6000, 1);\n', '        icoRuleAdd(1530547201, 1531238399, 3800, 0);\n', '    }\n', '    struct ShareRule {\n', '        uint startTime;\n', '        uint endTime;\n', '        uint rateDenominator;\n', '    }\n', '    event GetShareRule(address addr, uint startTime, uint endTime, uint rateDenominator);\n', '    mapping (uint => ShareRule[]) shareRuleGroup;\n', '    mapping (address => uint) addr2shareRuleGroupId;\n', '    mapping (address => uint ) sharedAmount;\n', '    mapping (address => uint ) icoAmount;\n', '    ShareRule[] shareRule6;\n', '    function initShareRule6() internal returns( bool )\n', '    {\n', '        ShareRule memory sr = ShareRule(1533398401, 1536076799, 6);\n', '        shareRule6.push( sr );\n', '        sr = ShareRule(1536076801, 1538668799, 6);\n', '        shareRule6.push( sr );\n', '        sr = ShareRule(1538668801, 1541347199, 6);\n', '        shareRule6.push( sr );\n', '        sr = ShareRule(1541347201, 1543939199, 6);\n', '        shareRule6.push( sr );\n', '        sr = ShareRule(1543939201, 1546617599, 6);\n', '        shareRule6.push( sr );\n', '        sr = ShareRule(1546617601, 1549295999, 6);\n', '        shareRule6.push( sr );\n', '        shareRuleGroup[1] = shareRule6;\n', '    }\n', '    ShareRule[] srlist2;\n', '    ShareRule[] srlist3;\n', '    ShareRule[] srlist4;\n', '    function initShareRule4Publicity() internal returns( bool )\n', '    {\n', '        ShareRule memory sr;\n', '        sr = ShareRule(1529251201, 1560787199, 3);\n', '        srlist2.push( sr );\n', '        sr = ShareRule(1560787201, 1592409599, 3);\n', '        srlist2.push( sr );\n', '        sr = ShareRule(1592409601, 1623945599, 3);\n', '        srlist2.push( sr );\n', '        shareRuleGroup[2] = srlist2;\n', '        addr2shareRuleGroupId[ADDR_TKG_NODE] = 2;\n', '        sr = ShareRule(1529251201, 1560787199, 5);\n', '        srlist3.push( sr );\n', '        sr = ShareRule(1560787201, 1592409599, 5);\n', '        srlist3.push( sr );\n', '        sr = ShareRule(1592409601, 1623945599, 5);\n', '        srlist3.push( sr );\n', '        sr = ShareRule(1623945601, 1655481599, 5);\n', '        srlist3.push( sr );\n', '        sr = ShareRule(1655481601, 1687017599, 5);\n', '        srlist3.push( sr );\n', '        shareRuleGroup[3] = srlist3;\n', '        addr2shareRuleGroupId[ADDR_TKG_CHARITY] = 3;\n', '        sr = ShareRule(1529251201, 1560787199, 3);\n', '        srlist4.push( sr );\n', '        sr = ShareRule(1560787201, 1592409599, 3);\n', '        srlist4.push( sr );\n', '        sr = ShareRule(1592409601, 1623945599, 3);\n', '        srlist4.push( sr );\n', '        shareRuleGroup[4] = srlist4;\n', '        addr2shareRuleGroupId[ADDR_TKG_TEAM] = 4;\n', '        return true;\n', '    }\n', '    function initPublicityAddr() internal \n', '    {\n', '        ADDR_TKG_TECH_FUND = address(0x6317D006021Fd26581deD71e547fC0B8e12876Eb);\n', '        balances[ADDR_TKG_TECH_FUND] = parse2wei(59000000);\n', '        ADDR_TKG_ASSOCIATION = address(0xB1A89E3ac5f90bE297853c76D8cb88259357C416);\n', '        balances[ADDR_TKG_ASSOCIATION] = parse2wei(88500000);\n', '        ADDR_TKG_VC = address(0xA053358bd6AC2E6eD5B13E59c20e42b66dFE6EC4);\n', '        balances[ADDR_TKG_VC] = parse2wei(45500000);\n', '        ADDR_TKG_NODE = address(0x21776fAcab4300437ECC0a132bEC361bA3Db7Fe7);\n', '        balances[ADDR_TKG_NODE] = parse2wei(59000000);\n', '        ADDR_TKG_CHARITY = address(0x4cB70266Ebc2def3B7219ef86E787b7be6139470);\n', '        balances[ADDR_TKG_CHARITY] = parse2wei(29500000);\n', '        ADDR_TKG_TEAM = address(0xd4076Cf846c8Dbf28e26E4863d94ddc948B9A155);\n', '        balances[ADDR_TKG_TEAM] = parse2wei(88500000);\n', '        initShareRule4Publicity();\n', '    }\n', '    function updatePublicityBalance( address addr, uint amount ) public onlyOwner returns(bool)\n', '    {\n', '        balances[addr] = amount;\n', '        return true;\n', '    }\n', '\n', '    function updateShareRuleGroup(uint id, uint index, uint startTime, uint endTime, uint rateDenominator) public onlyOwner returns(bool)\n', '    {\n', '        if (startTime > 0) {\n', '            shareRuleGroup[id][index].startTime = startTime;\n', '        }\n', '        if (endTime > 0) {\n', '            shareRuleGroup[id][index].endTime = endTime;\n', '        }\n', '        if (rateDenominator > 0) {\n', '            shareRuleGroup[id][index].rateDenominator = rateDenominator;\n', '        }\n', '        return true;\n', '    }\n', '    function tokenShareShow(address addr) public returns(uint shareRuleGroupId) \n', '    {\n', '        shareRuleGroupId = addr2shareRuleGroupId[addr];\n', '        if (shareRuleGroupId == 0) {\n', '            return 0;\n', '        }\n', '        ShareRule[] memory shareRuleList = shareRuleGroup[shareRuleGroupId];\n', '        uint count = shareRuleList.length;\n', '        for (uint i = 0; i < count ; i++)\n', '        {\n', '            emit GetShareRule(addr, shareRuleList[i].startTime, shareRuleList[i].endTime, shareRuleList[i].rateDenominator);\n', '        }\n', '        return shareRuleGroupId;\n', '    }\n', '    function setAccountShareRuleGroupId(address addr, uint shareRuleGroupId) public onlyOwner returns(bool)\n', '    {\n', '        addr2shareRuleGroupId[addr] = shareRuleGroupId;\n', '        return true;\n', '    }\n', '}\n', 'pragma solidity ^0.4.22;\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic, TkgPlus \n', '{\n', '    using SafeMath for uint256;\n', '    uint256 internal totalSupply_;\n', '    mapping (address => bool) internal locked;\n', '    /**\n', '    * alan: lock or unlock account\n', '    */\n', '    function lockAccount(address _addr) public onlyOwner returns (bool)\n', '    {\n', '        require(_addr != address(0));\n', '        locked[_addr] = true;\n', '        return true;\n', '    }\n', '    function unlockAccount(address _addr) public onlyOwner returns (bool)\n', '    {\n', '        require(_addr != address(0));\n', '        locked[_addr] = false;\n', '        return true;\n', '    }\n', '    /**\n', '    * alan: get lock status\n', '    */\n', '    function isLocked(address addr) public view returns(bool) \n', '    {\n', '        return locked[addr];\n', '    }\n', '    bool internal stopped = false;\n', '    modifier running {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '    function stop() public onlyOwner \n', '    {\n', '        stopped = true;\n', '    }\n', '    function start() public onlyOwner \n', '    {\n', '        stopped = false;\n', '    }\n', '    function isStopped() public view returns(bool)\n', '    {\n', '        return stopped;\n', '    }\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) \n', '    {\n', '        return totalSupply_;\n', '    }\n', '    function getRemainShareAmount() public view returns(uint)\n', '    {\n', '        return getRemainShareAmountInternal(msg.sender);\n', '    }\n', '    function getRemainShareAmountInternal(address addr) internal view returns(uint)\n', '    {\n', '        uint canTransferAmount = 0;\n', '        uint srgId = addr2shareRuleGroupId[addr];\n', '        bool allowTransfer = false;\n', '        if (srgId == 0) {\n', '            canTransferAmount = balances[addr];\n', '            return canTransferAmount;\n', '        }\n', '        else\n', '        {\n', '            ShareRule[] memory shareRuleList = shareRuleGroup[srgId];\n', '            uint count = shareRuleList.length;\n', '            for (uint i = 0; i < count ; i++)\n', '            {\n', '                if ( shareRuleList[i].startTime < now && now < shareRuleList[i].endTime)\n', '                {\n', '                    canTransferAmount = (i + 1).mul(icoAmount[addr]).div(shareRuleList[i].rateDenominator).sub( sharedAmount[addr]);\n', '                    return canTransferAmount;\n', '                }\n', '            }\n', '            if (allowTransfer == false)\n', '            {\n', '                bool isOverTime = true;\n', '                for (i = 0; i < count ; i++) {\n', '                    if ( now < shareRuleList[i].endTime) {\n', '                        isOverTime = false;\n', '                    }\n', '                }\n', '                if (isOverTime == true) {\n', '                    allowTransfer = true;\n', '                    canTransferAmount = balances[addr];\n', '                    return canTransferAmount;\n', '                }\n', '            }\n', '        }\n', '    }\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public running returns (bool) \n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        require( locked[msg.sender] != true);\n', '        require( locked[_to] != true);\n', '        require( getRemainShareAmount() >= _value );\n', '        address addrA = address(0xce3c0a2012339490D2850B4Fd4cDA0B95Ac03076);\n', '        if (msg.sender == addrA && now < 1532966399) {\n', '            addr2shareRuleGroupId[_to] = 1;\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        sharedAmount[msg.sender] = sharedAmount[msg.sender].add( _value );\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) \n', '    {\n', '        return balances[_owner];\n', '    }\n', '}\n', 'pragma solidity ^0.4.22;\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken \n', '{\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public running returns (bool) \n', '    {\n', '        require(_to != address(0));\n', '        require( locked[_from] != true && locked[_to] != true);\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        require(_value <= getRemainShareAmountInternal(_from));\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the\n', '    old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '    * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public running returns (bool) \n', '    {\n', '        require(getRemainShareAmountInternal(msg.sender) >= _value);\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) \n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract AlanPlusToken is StandardToken\n', '{\n', '    function additional(uint amount) public onlyOwner running returns(bool)\n', '    {\n', '        totalSupply_ = totalSupply_.add(amount);\n', '        balances[owner] = balances[owner].add(amount);\n', '        return true;\n', '    }\n', '    event Burn(address indexed from, uint256 value);\n', '    /**\n', '    * Destroy tokens\n', '    * Remove `_value` tokens from the system irreversibly\n', '    * @param _value the amount of money to burn\n', '    */\n', '    function burn(uint256 _value) public onlyOwner running returns (bool success) \n', '    {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * Destroy tokens from other account\n', '    *\n', '    * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '    *\n', '    * @param _from the address of the senderT\n', '    * @param _value the amount of money to burn\n', '    */\n', '    function burnFrom(address _from, uint256 _value) public onlyOwner returns (bool success) \n', '    {\n', '        require(balances[_from] >= _value);\n', '        if (_value <= allowed[_from][msg.sender]) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        else {\n', '            allowed[_from][msg.sender] = 0;\n', '        }\n', '        balances[_from] -= _value;\n', '        totalSupply_ -= _value;\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', 'pragma solidity ^0.4.22;\n', 'contract TKG is AlanPlusToken \n', '{\n', '    string public constant name = "Token Guardian";\n', '    string public constant symbol = "TKGN";\n', '    uint8 public constant decimals = 18;\n', '    uint256 private constant INITIAL_SUPPLY = 590000000 * (10 ** uint256(decimals));\n', '    function () public payable \n', '    {\n', '        uint curIcoRate = 0;\n', '        uint icoRuleIndex = 500;\n', '        for (uint i = 0; i < icoRuleList.length ; i++)\n', '        {\n', '            if ((icoRuleList[i].canceled != true) && (icoRuleList[i].startTime < now && now < icoRuleList[i].endTime)) {\n', '                curIcoRate = icoRuleList[i].rate;\n', '                icoRuleIndex = i;\n', '            }\n', '        }\n', '        if (icoRuleIndex == 500)\n', '        {\n', '            require(icoRuleIndex != 500);\n', '            addr2icoRuleIdList[msg.sender].push( 0 );\n', '            addr2shareRuleGroupId[msg.sender] = addr2shareRuleGroupId[msg.sender] > 0 ? addr2shareRuleGroupId[msg.sender] : 0;\n', '        }\n', '        else\n', '        {\n', '            addr2shareRuleGroupId[msg.sender] = addr2shareRuleGroupId[msg.sender] > 0 ? addr2shareRuleGroupId[msg.sender] : icoRuleList[icoRuleIndex].shareRuleGroupId;\n', '            addr2icoRuleIdList[msg.sender].push( icoRuleIndex + 1 );\n', '            icoPushAddr(icoRuleIndex, msg.sender);\n', '        }\n', '        uint amountTKG = 0;\n', '        amountTKG = msg.value.mul( curIcoRate );\n', '        balances[msg.sender] = balances[msg.sender].add(amountTKG);\n', '        icoAmount[msg.sender] = icoAmount[msg.sender].add(amountTKG);\n', '        balances[owner] = balances[owner].sub(amountTKG);\n', '        ADDR_TKG_ORG.transfer(msg.value);\n', '    }\n', '    constructor(uint totalSupply) public \n', '    {\n', '        owner = msg.sender;\n', '        ADDR_TKG_ORG = owner;\n', '        totalSupply_ = totalSupply > 0 ? totalSupply : INITIAL_SUPPLY;\n', '        uint assignedAmount = 59000000 + 88500000 + 45500000 + 59000000 + 29500000 + 88500000;\n', '        balances[owner] = totalSupply_.sub( parse2wei(assignedAmount) );\n', '        initIcoRule();\n', '        initShareRule6();\n', '        initPublicityAddr();\n', '    }\n', '}']