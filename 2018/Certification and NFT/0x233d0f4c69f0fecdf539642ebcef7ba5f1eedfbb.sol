['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = _a * _b;\n', '        assert(c / _a == _b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        return _a / _b;\n', '    }\n', '\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        assert(_b <= _a);\n', '        return _a - _b;\n', '    }\n', '\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '        c = _a + _b;\n', '        assert(c >= _a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract BaseCHIPSale {\n', '    using SafeMath for uint256;\n', '\n', '    address public owner;\n', '    bool public paused = false;\n', '    // The beneficiary is the future recipient of the funds\n', '    address public beneficiary;\n', '\n', '    // The crowdsale has a funding goal, cap, deadline, and minimum contribution\n', '    uint public fundingGoal;\n', '    uint public fundingCap;\n', '    //uint public minContribution;\n', '    bool public fundingGoalReached = false;\n', '    bool public fundingCapReached = false;\n', '    bool public saleClosed = false;\n', '\n', '    // Time period of sale (UNIX timestamps)\n', '    uint public startTime;\n', '    uint public endTime;\n', '\n', '    // Keeps track of the amount of wei raised\n', '    uint public amountRaised;\n', '\n', '    // Refund amount, should it be required\n', '    uint public refundAmount;\n', '\n', '    // The ratio of CHP to Ether\n', '    uint public rate = 10000;\n', '    uint public withdrawRate = 10000;\n', '\n', '    // prevent certain functions from being recursively called\n', '    bool private rentrancy_lock = false;\n', '\n', '    // A map that tracks the amount of wei contributed by address\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    // Events\n', '    event GoalReached(address _beneficiary, uint _amountRaised);\n', '    event CapReached(address _beneficiary, uint _amountRaised);\n', '    event FundTransfer(address _backer, uint _amount, bool _isContribution);\n', '    event Pause();\n', '    event Unpause();\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    // Modifiers\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner,"Only the owner is allowed to call this."); \n', '        _; \n', '    }\n', '\n', '    // Modifiers\n', '    modifier beforeDeadline(){\n', '        require (currentTime() < endTime, "Validation: Before endtime");\n', '        _;\n', '    }\n', '    modifier afterDeadline(){\n', '        require (currentTime() >= endTime, "Validation: After endtime"); \n', '        _;\n', '    }\n', '    modifier afterStartTime(){\n', '        require (currentTime() >= startTime, "Validation: After starttime"); \n', '        _;\n', '    }\n', '\n', '    modifier saleNotClosed(){\n', '        require (!saleClosed, "Sale is not yet ended"); \n', '        _;\n', '    }\n', '\n', '    modifier nonReentrant() {\n', '        require(!rentrancy_lock, "Validation: Reentrancy");\n', '        rentrancy_lock = true;\n', '        _;\n', '        rentrancy_lock = false;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused, "You are not allowed to access this time.");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused, "You are not allowed to access this time.");\n', '        _;\n', '    }\n', '\n', '    constructor() public{\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0), "Owner cannot be 0 address.");\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '\n', '    /**\n', '     * Returns the current time.\n', '     * Useful to abstract calls to "now" for tests.\n', '    */\n', '    function currentTime() public view returns (uint _currentTime) {\n', '        return block.timestamp;\n', '    }\n', '\n', '    /**\n', '     * The owner can terminate the crowdsale at any time.\n', '     */\n', '    function terminate() external onlyOwner {\n', '        saleClosed = true;\n', '    }\n', '\n', '    /**\n', '     * The owner can update the rate (CHP to ETH).\n', '     *\n', '     * @param _rate  the new rate for converting CHP to ETH\n', '     */\n', '    function setRate(uint _rate) public onlyOwner {\n', '        //require(_rate >= LOW_RANGE_RATE && _rate <= HIGH_RANGE_RATE);\n', '        rate = _rate;\n', '    }\n', '\n', '    function setWithdrawRate(uint _rate) public onlyOwner {\n', '        //require(_rate >= LOW_RANGE_RATE && _rate <= HIGH_RANGE_RATE);\n', '        withdrawRate = _rate;\n', '    }\n', '\n', '    /**\n', '     * The owner can unlock the fund with this function. The use-\n', '     * case for this is when the owner decides after the deadline\n', '     * to allow contributors to be refunded their contributions.\n', '     * Note that the fund would be automatically unlocked if the\n', '     * minimum funding goal were not reached.\n', '     */\n', '    function ownerUnlockFund() external afterDeadline onlyOwner {\n', '        fundingGoalReached = false;\n', '    }\n', '\n', '    /**\n', '     * Checks if the funding goal has been reached. If it has, then\n', '     * the GoalReached event is triggered.\n', '     */\n', '    function checkFundingGoal() internal {\n', '        if (!fundingGoalReached) {\n', '            if (amountRaised >= fundingGoal) {\n', '                fundingGoalReached = true;\n', '                emit GoalReached(beneficiary, amountRaised);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Checks if the funding cap has been reached. If it has, then\n', '     * the CapReached event is triggered.\n', '     */\n', '    function checkFundingCap() internal {\n', '        if (!fundingCapReached) {\n', '            if (amountRaised >= fundingCap) {\n', '                fundingCapReached = true;\n', '                saleClosed = true;\n', '                emit CapReached(beneficiary, amountRaised);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * These helper functions are exposed for changing the start and end time dynamically   \n', '     */\n', '    function changeStartTime(uint256 _startTime) external onlyOwner {startTime = _startTime;}\n', '    function changeEndTime(uint256 _endTime) external onlyOwner {endTime = _endTime;}\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract BaseCHIPToken {\n', '    using SafeMath for uint256;\n', '\n', '    // Globals\n', '    address public owner;\n', '    mapping(address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    uint256 internal totalSupply_;\n', '\n', '    // Events\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Burn(address indexed burner, uint256 value);\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    // Modifiers\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner,"Only the owner is allowed to call this."); \n', '        _; \n', '    }\n', '\n', '    constructor() public{\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= balances[msg.sender], "You do not have sufficient balance.");\n', '        require(_to != address(0), "You cannot send tokens to 0 address");\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\n', '        require(_value <= balances[_from], "You do not have sufficient balance.");\n', '        require(_value <= allowed[_from][msg.sender], "You do not have allowance.");\n', '        require(_to != address(0), "You cannot send tokens to 0 address");\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '    * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256){\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool){\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool){\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Burns a specific amount of tokens.\n', '    * @param _value The amount of token to be burned.\n', '    */\n', '    function burn(uint256 _value) public {\n', '        _burn(msg.sender, _value);\n', '    }\n', '\n', '    function _burn(address _who, uint256 _value) internal {\n', '        require(_value <= balances[_who], "Insufficient balance of tokens");\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _value uint256 The amount of token to be burned\n', '    */\n', '    function burnFrom(address _from, uint256 _value) public {\n', '        require(_value <= allowed[_from][msg.sender], "Insufficient allowance to burn tokens.");\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        _burn(_from, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0), "Owner cannot be 0 address.");\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) public onlyOwner returns (bool){\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract CHIPToken is BaseCHIPToken {\n', '    \n', '    // Constants\n', '    string  public constant name = "Chips";\n', '    string  public constant symbol = "CHP";\n', '    uint8   public constant decimals = 18;\n', '\n', '    uint256 public constant INITIAL_SUPPLY      =  2000000000 * (10 ** uint256(decimals));\n', '    uint256 public constant CROWDSALE_ALLOWANCE =  1000000000 * (10 ** uint256(decimals));\n', '    uint256 public constant ADMIN_ALLOWANCE     =  1000000000 * (10 ** uint256(decimals));\n', '    \n', '    // Properties\n', '    //uint256 public totalSupply;\n', '    uint256 public crowdSaleAllowance;      // the number of tokens available for crowdsales\n', '    uint256 public adminAllowance;          // the number of tokens available for the administrator\n', '    address public crowdSaleAddr;           // the address of a crowdsale currently selling this token\n', '    address public adminAddr;               // the address of a crowdsale currently selling this token\n', '    //bool    public transferEnabled = false; // indicates if transferring tokens is enabled or not\n', '    bool    public transferEnabled = true;  // Enables everyone to transfer tokens\n', '\n', '    /**\n', '     * The listed addresses are not valid recipients of tokens.\n', '     *\n', '     * 0x0           - the zero address is not valid\n', '     * this          - the contract itself should not receive tokens\n', '     * owner         - the owner has all the initial tokens, but cannot receive any back\n', '     * adminAddr     - the admin has an allowance of tokens to transfer, but does not receive any\n', '     * crowdSaleAddr - the crowdsale has an allowance of tokens to transfer, but does not receive any\n', '     */\n', '    modifier validDestination(address _to) {\n', '        require(_to != address(0x0), "Cannot send to 0 address");\n', '        require(_to != address(this), "Cannot send to contract address");\n', '        //require(_to != owner, "Cannot send to the owner");\n', '        //require(_to != address(adminAddr), "Cannot send to admin address");\n', '        require(_to != address(crowdSaleAddr), "Cannot send to crowdsale address");\n', '        _;\n', '    }\n', '\n', '    modifier onlyCrowdsale {\n', '        require(msg.sender == crowdSaleAddr, "Only crowdsale contract can call this");\n', '        _;\n', '    }\n', '\n', '    constructor(address _admin) public {\n', '        require(msg.sender != _admin, "Owner and admin cannot be the same");\n', '\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        crowdSaleAllowance = CROWDSALE_ALLOWANCE;\n', '        adminAllowance = ADMIN_ALLOWANCE;\n', '\n', '        // mint all tokens\n', '        balances[msg.sender] = totalSupply_.sub(adminAllowance);\n', '        emit Transfer(address(0x0), msg.sender, totalSupply_.sub(adminAllowance));\n', '\n', '        balances[_admin] = adminAllowance;\n', '        emit Transfer(address(0x0), _admin, adminAllowance);\n', '\n', '        adminAddr = _admin;\n', '        approve(adminAddr, adminAllowance);\n', '    }\n', '\n', '    /**\n', '     * Overrides ERC20 transfer function with modifier that prevents the\n', '     * ability to transfer tokens until after transfers have been enabled.\n', '     */\n', '    function transfer(address _to, uint256 _value) public validDestination(_to) returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * Overrides ERC20 transferFrom function with modifier that prevents the\n', '     * ability to transfer tokens until after transfers have been enabled.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public validDestination(_to) returns (bool) {\n', '        bool result = super.transferFrom(_from, _to, _value);\n', '        if (result) {\n', '            if (msg.sender == crowdSaleAddr)\n', '                crowdSaleAllowance = crowdSaleAllowance.sub(_value);\n', '            if (msg.sender == adminAddr)\n', '                adminAllowance = adminAllowance.sub(_value);\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * Associates this token with a current crowdsale, giving the crowdsale\n', '     * an allowance of tokens from the crowdsale supply. This gives the\n', '     * crowdsale the ability to call transferFrom to transfer tokens to\n', '     * whomever has purchased them.\n', '     *\n', '     * Note that if _amountForSale is 0, then it is assumed that the full\n', '     * remaining crowdsale supply is made available to the crowdsale.\n', '     *\n', '     * @param _crowdSaleAddr The address of a crowdsale contract that will sell this token\n', '     * @param _amountForSale The supply of tokens provided to the crowdsale\n', '     */\n', '    function setCrowdsale(address _crowdSaleAddr, uint256 _amountForSale) external onlyOwner {\n', '        require(_amountForSale <= crowdSaleAllowance, "Sale amount should be less than the crowdsale allowance limits.");\n', '\n', '        // if 0, then full available crowdsale supply is assumed\n', '        uint amount = (_amountForSale == 0) ? crowdSaleAllowance : _amountForSale;\n', '\n', '        // Clear allowance of old, and set allowance of new\n', '        approve(crowdSaleAddr, 0);\n', '        approve(_crowdSaleAddr, amount);\n', '\n', '        crowdSaleAddr = _crowdSaleAddr;\n', '    }\n', '\n', '    function setAllowanceBeforeWithdrawal(address _from, address _to, uint _value) public onlyCrowdsale returns (bool) {\n', '        allowed[_from][_to] = _value;\n', '        emit Approval(_from, _to, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract CHIPSale is BaseCHIPSale {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    CHIPToken public tokenReward;\n', '\n', '    /**\n', '     * Constructor for a crowdsale of CHPToken tokens.\n', '     *\n', '     * @param ifSuccessfulSendTo            the beneficiary of the fund\n', '     * @param fundingGoalInEthers           the minimum goal to be reached\n', '     * @param fundingCapInEthers            the cap (maximum) size of the fund\n', '     * @param start                         the start time (UNIX timestamp)\n', '     * @param end                           the end time (UNIX timestamp)\n', '     * @param rateCHPToEther                 the conversion rate from CHP to Ether\n', '     * @param addressOfTokenUsedAsReward    address of the token being sold\n', '     */\n', '    constructor(\n', '        address ifSuccessfulSendTo,\n', '        uint fundingGoalInEthers,\n', '        uint fundingCapInEthers,\n', '        //uint minimumContributionInWei,\n', '        uint start,\n', '        uint end,\n', '        uint rateCHPToEther,\n', '        address addressOfTokenUsedAsReward\n', '    ) public {\n', '        require(ifSuccessfulSendTo != address(0) && ifSuccessfulSendTo != address(this), "Beneficiary cannot be 0 address");\n', '        require(addressOfTokenUsedAsReward != address(0) && addressOfTokenUsedAsReward != address(this), "Token address cannot be 0 address");\n', '        require(fundingGoalInEthers <= fundingCapInEthers, "Funding goal should be less that funding cap.");\n', '        require(end > 0, "Endtime cannot be 0");\n', '        beneficiary = ifSuccessfulSendTo;\n', '        fundingGoal = fundingGoalInEthers * 1 ether;\n', '        fundingCap = fundingCapInEthers * 1 ether;\n', '        //minContribution = minimumContributionInWei;\n', '        startTime = start;\n', '        endTime = end; // TODO double check\n', '        rate = rateCHPToEther;\n', '        withdrawRate = rateCHPToEther;\n', '        tokenReward = CHIPToken(addressOfTokenUsedAsReward);\n', '    }\n', '\n', '    /**\n', '     * This fallback function is called whenever Ether is sent to the\n', '     * smart contract. It can only be executed when the crowdsale is\n', '     * not paused, not closed, and before the deadline has been reached.\n', '     *\n', '     * This function will update state variables for whether or not the\n', '     * funding goal or cap have been reached. It also ensures that the\n', '     * tokens are transferred to the sender, and that the correct\n', '     * number of tokens are sent according to the current rate.\n', '     */\n', '    function () public payable whenNotPaused beforeDeadline afterStartTime saleNotClosed nonReentrant {\n', '        //require(msg.value >= minContribution, "Value should be greater than minimum contribution");\n', '\n', '        // Update the sender&#39;s balance of wei contributed and the amount raised\n', '        uint amount = msg.value;\n', '        uint currentBalance = balanceOf[msg.sender];\n', '        balanceOf[msg.sender] = currentBalance.add(amount);\n', '        amountRaised = amountRaised.add(amount);\n', '\n', '        // Compute the number of tokens to be rewarded to the sender\n', '        // Note: it&#39;s important for this calculation that both wei\n', '        // and CHP have the same number of decimal places (18)\n', '        uint numTokens = amount.mul(rate);\n', '\n', '        // Transfer the tokens from the crowdsale supply to the sender\n', '        if (tokenReward.transferFrom(tokenReward.owner(), msg.sender, numTokens)) {\n', '            emit FundTransfer(msg.sender, amount, true);\n', '            //contributions[msg.sender] = contributions[msg.sender].add(amount);\n', '            // Following code is to automatically transfer ETH to beneficiary\n', '            //uint balanceToSend = this.balance;\n', '            //beneficiary.transfer(balanceToSend);\n', '            //FundTransfer(beneficiary, balanceToSend, false);\n', '            // Check if the funding goal or cap have been reached\n', '            // TODO check impact on gas cost\n', '            checkFundingGoal();\n', '            checkFundingCap();\n', '        }\n', '        else {\n', '            revert("Transaction Failed. Please try again later.");\n', '        }\n', '    }\n', '\n', '    // Any users can call this function to send their tokens and get Ethers\n', '    function withdrawToken(uint tokensToWithdraw) public {\n', '        uint tokensInWei = convertToMini(tokensToWithdraw);\n', '        require(\n', '            tokensInWei <= tokenReward.balanceOf(msg.sender), \n', '            "You do not have sufficient balance to withdraw"\n', '        );\n', '        uint ethToGive = tokensInWei.div(withdrawRate);\n', '        require(ethToGive <= address(this).balance, "Insufficient ethers.");\n', '        //tokenReward.increaseApproval(address(this),tokensInWei);\n', '        tokenReward.setAllowanceBeforeWithdrawal(msg.sender, address(this), tokensInWei);\n', '        tokenReward.transferFrom(msg.sender, tokenReward.owner(), tokensInWei);\n', '        msg.sender.transfer(ethToGive);\n', '        emit FundTransfer(this.owner(), ethToGive, true);\n', '    }\n', '\n', '    /**\n', '     * The owner can allocate the specified amount of tokens from the\n', '     * crowdsale allowance to the recipient (_to).\n', '     *\n', '     * NOTE: be extremely careful to get the amounts correct, which\n', '     * are in units of wei and mini-CHP. Every digit counts.\n', '     *\n', '     * @param _to            the recipient of the tokens\n', '     * @param amountWei     the amount contributed in wei\n', '     * @param amountMiniCHP the amount of tokens transferred in mini-CHP (18 decimals)\n', '     */\n', '    function ownerAllocateTokens(address _to, uint amountWei, uint amountMiniCHP) public\n', '            onlyOwner nonReentrant\n', '    {\n', '        if (!tokenReward.transferFrom(tokenReward.owner(), _to, amountMiniCHP)) {\n', '            revert("Transfer failed. Please check allowance");\n', '        }\n', '        balanceOf[_to] = balanceOf[_to].add(amountWei);\n', '        amountRaised = amountRaised.add(amountWei);\n', '        emit FundTransfer(_to, amountWei, true);\n', '        checkFundingGoal();\n', '        checkFundingCap();\n', '    }\n', '\n', '    /**\n', '     * The owner can call this function to withdraw the funds that\n', '     * have been sent to this contract for the crowdsale subject to\n', '     * the funding goal having been reached. The funds will be sent\n', '     * to the beneficiary specified when the crowdsale was created.\n', '     */\n', '    function ownerSafeWithdrawal() public onlyOwner nonReentrant {\n', '        require(fundingGoalReached, "Check funding goal");\n', '        uint balanceToSend = address(this).balance;\n', '        beneficiary.transfer(balanceToSend);\n', '        emit FundTransfer(beneficiary, balanceToSend, false);\n', '    }\n', '\n', '    /**\n', '     * This function permits anybody to withdraw the funds they have\n', '     * contributed if and only if the deadline has passed and the\n', '     * funding goal was not reached.\n', '     */\n', '    function safeWithdrawal() public afterDeadline nonReentrant {\n', '        if (!fundingGoalReached) {\n', '            uint amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                msg.sender.transfer(amount);\n', '                emit FundTransfer(msg.sender, amount, false);\n', '                refundAmount = refundAmount.add(amount);\n', '            }\n', '        }\n', '    }\n', '    \n', '    function convertToMini(uint amount) internal view returns (uint) {\n', '        return amount * (10 ** uint(tokenReward.decimals()));\n', '    }    \n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = _a * _b;\n', '        assert(c / _a == _b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        return _a / _b;\n', '    }\n', '\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        assert(_b <= _a);\n', '        return _a - _b;\n', '    }\n', '\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '        c = _a + _b;\n', '        assert(c >= _a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract BaseCHIPSale {\n', '    using SafeMath for uint256;\n', '\n', '    address public owner;\n', '    bool public paused = false;\n', '    // The beneficiary is the future recipient of the funds\n', '    address public beneficiary;\n', '\n', '    // The crowdsale has a funding goal, cap, deadline, and minimum contribution\n', '    uint public fundingGoal;\n', '    uint public fundingCap;\n', '    //uint public minContribution;\n', '    bool public fundingGoalReached = false;\n', '    bool public fundingCapReached = false;\n', '    bool public saleClosed = false;\n', '\n', '    // Time period of sale (UNIX timestamps)\n', '    uint public startTime;\n', '    uint public endTime;\n', '\n', '    // Keeps track of the amount of wei raised\n', '    uint public amountRaised;\n', '\n', '    // Refund amount, should it be required\n', '    uint public refundAmount;\n', '\n', '    // The ratio of CHP to Ether\n', '    uint public rate = 10000;\n', '    uint public withdrawRate = 10000;\n', '\n', '    // prevent certain functions from being recursively called\n', '    bool private rentrancy_lock = false;\n', '\n', '    // A map that tracks the amount of wei contributed by address\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    // Events\n', '    event GoalReached(address _beneficiary, uint _amountRaised);\n', '    event CapReached(address _beneficiary, uint _amountRaised);\n', '    event FundTransfer(address _backer, uint _amount, bool _isContribution);\n', '    event Pause();\n', '    event Unpause();\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    // Modifiers\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner,"Only the owner is allowed to call this."); \n', '        _; \n', '    }\n', '\n', '    // Modifiers\n', '    modifier beforeDeadline(){\n', '        require (currentTime() < endTime, "Validation: Before endtime");\n', '        _;\n', '    }\n', '    modifier afterDeadline(){\n', '        require (currentTime() >= endTime, "Validation: After endtime"); \n', '        _;\n', '    }\n', '    modifier afterStartTime(){\n', '        require (currentTime() >= startTime, "Validation: After starttime"); \n', '        _;\n', '    }\n', '\n', '    modifier saleNotClosed(){\n', '        require (!saleClosed, "Sale is not yet ended"); \n', '        _;\n', '    }\n', '\n', '    modifier nonReentrant() {\n', '        require(!rentrancy_lock, "Validation: Reentrancy");\n', '        rentrancy_lock = true;\n', '        _;\n', '        rentrancy_lock = false;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused, "You are not allowed to access this time.");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused, "You are not allowed to access this time.");\n', '        _;\n', '    }\n', '\n', '    constructor() public{\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0), "Owner cannot be 0 address.");\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '\n', '    /**\n', '     * Returns the current time.\n', '     * Useful to abstract calls to "now" for tests.\n', '    */\n', '    function currentTime() public view returns (uint _currentTime) {\n', '        return block.timestamp;\n', '    }\n', '\n', '    /**\n', '     * The owner can terminate the crowdsale at any time.\n', '     */\n', '    function terminate() external onlyOwner {\n', '        saleClosed = true;\n', '    }\n', '\n', '    /**\n', '     * The owner can update the rate (CHP to ETH).\n', '     *\n', '     * @param _rate  the new rate for converting CHP to ETH\n', '     */\n', '    function setRate(uint _rate) public onlyOwner {\n', '        //require(_rate >= LOW_RANGE_RATE && _rate <= HIGH_RANGE_RATE);\n', '        rate = _rate;\n', '    }\n', '\n', '    function setWithdrawRate(uint _rate) public onlyOwner {\n', '        //require(_rate >= LOW_RANGE_RATE && _rate <= HIGH_RANGE_RATE);\n', '        withdrawRate = _rate;\n', '    }\n', '\n', '    /**\n', '     * The owner can unlock the fund with this function. The use-\n', '     * case for this is when the owner decides after the deadline\n', '     * to allow contributors to be refunded their contributions.\n', '     * Note that the fund would be automatically unlocked if the\n', '     * minimum funding goal were not reached.\n', '     */\n', '    function ownerUnlockFund() external afterDeadline onlyOwner {\n', '        fundingGoalReached = false;\n', '    }\n', '\n', '    /**\n', '     * Checks if the funding goal has been reached. If it has, then\n', '     * the GoalReached event is triggered.\n', '     */\n', '    function checkFundingGoal() internal {\n', '        if (!fundingGoalReached) {\n', '            if (amountRaised >= fundingGoal) {\n', '                fundingGoalReached = true;\n', '                emit GoalReached(beneficiary, amountRaised);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Checks if the funding cap has been reached. If it has, then\n', '     * the CapReached event is triggered.\n', '     */\n', '    function checkFundingCap() internal {\n', '        if (!fundingCapReached) {\n', '            if (amountRaised >= fundingCap) {\n', '                fundingCapReached = true;\n', '                saleClosed = true;\n', '                emit CapReached(beneficiary, amountRaised);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * These helper functions are exposed for changing the start and end time dynamically   \n', '     */\n', '    function changeStartTime(uint256 _startTime) external onlyOwner {startTime = _startTime;}\n', '    function changeEndTime(uint256 _endTime) external onlyOwner {endTime = _endTime;}\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract BaseCHIPToken {\n', '    using SafeMath for uint256;\n', '\n', '    // Globals\n', '    address public owner;\n', '    mapping(address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    uint256 internal totalSupply_;\n', '\n', '    // Events\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Burn(address indexed burner, uint256 value);\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    // Modifiers\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner,"Only the owner is allowed to call this."); \n', '        _; \n', '    }\n', '\n', '    constructor() public{\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= balances[msg.sender], "You do not have sufficient balance.");\n', '        require(_to != address(0), "You cannot send tokens to 0 address");\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\n', '        require(_value <= balances[_from], "You do not have sufficient balance.");\n', '        require(_value <= allowed[_from][msg.sender], "You do not have allowance.");\n', '        require(_to != address(0), "You cannot send tokens to 0 address");\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256){\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool){\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool){\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Burns a specific amount of tokens.\n', '    * @param _value The amount of token to be burned.\n', '    */\n', '    function burn(uint256 _value) public {\n', '        _burn(msg.sender, _value);\n', '    }\n', '\n', '    function _burn(address _who, uint256 _value) internal {\n', '        require(_value <= balances[_who], "Insufficient balance of tokens");\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _value uint256 The amount of token to be burned\n', '    */\n', '    function burnFrom(address _from, uint256 _value) public {\n', '        require(_value <= allowed[_from][msg.sender], "Insufficient allowance to burn tokens.");\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        _burn(_from, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0), "Owner cannot be 0 address.");\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) public onlyOwner returns (bool){\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract CHIPToken is BaseCHIPToken {\n', '    \n', '    // Constants\n', '    string  public constant name = "Chips";\n', '    string  public constant symbol = "CHP";\n', '    uint8   public constant decimals = 18;\n', '\n', '    uint256 public constant INITIAL_SUPPLY      =  2000000000 * (10 ** uint256(decimals));\n', '    uint256 public constant CROWDSALE_ALLOWANCE =  1000000000 * (10 ** uint256(decimals));\n', '    uint256 public constant ADMIN_ALLOWANCE     =  1000000000 * (10 ** uint256(decimals));\n', '    \n', '    // Properties\n', '    //uint256 public totalSupply;\n', '    uint256 public crowdSaleAllowance;      // the number of tokens available for crowdsales\n', '    uint256 public adminAllowance;          // the number of tokens available for the administrator\n', '    address public crowdSaleAddr;           // the address of a crowdsale currently selling this token\n', '    address public adminAddr;               // the address of a crowdsale currently selling this token\n', '    //bool    public transferEnabled = false; // indicates if transferring tokens is enabled or not\n', '    bool    public transferEnabled = true;  // Enables everyone to transfer tokens\n', '\n', '    /**\n', '     * The listed addresses are not valid recipients of tokens.\n', '     *\n', '     * 0x0           - the zero address is not valid\n', '     * this          - the contract itself should not receive tokens\n', '     * owner         - the owner has all the initial tokens, but cannot receive any back\n', '     * adminAddr     - the admin has an allowance of tokens to transfer, but does not receive any\n', '     * crowdSaleAddr - the crowdsale has an allowance of tokens to transfer, but does not receive any\n', '     */\n', '    modifier validDestination(address _to) {\n', '        require(_to != address(0x0), "Cannot send to 0 address");\n', '        require(_to != address(this), "Cannot send to contract address");\n', '        //require(_to != owner, "Cannot send to the owner");\n', '        //require(_to != address(adminAddr), "Cannot send to admin address");\n', '        require(_to != address(crowdSaleAddr), "Cannot send to crowdsale address");\n', '        _;\n', '    }\n', '\n', '    modifier onlyCrowdsale {\n', '        require(msg.sender == crowdSaleAddr, "Only crowdsale contract can call this");\n', '        _;\n', '    }\n', '\n', '    constructor(address _admin) public {\n', '        require(msg.sender != _admin, "Owner and admin cannot be the same");\n', '\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        crowdSaleAllowance = CROWDSALE_ALLOWANCE;\n', '        adminAllowance = ADMIN_ALLOWANCE;\n', '\n', '        // mint all tokens\n', '        balances[msg.sender] = totalSupply_.sub(adminAllowance);\n', '        emit Transfer(address(0x0), msg.sender, totalSupply_.sub(adminAllowance));\n', '\n', '        balances[_admin] = adminAllowance;\n', '        emit Transfer(address(0x0), _admin, adminAllowance);\n', '\n', '        adminAddr = _admin;\n', '        approve(adminAddr, adminAllowance);\n', '    }\n', '\n', '    /**\n', '     * Overrides ERC20 transfer function with modifier that prevents the\n', '     * ability to transfer tokens until after transfers have been enabled.\n', '     */\n', '    function transfer(address _to, uint256 _value) public validDestination(_to) returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * Overrides ERC20 transferFrom function with modifier that prevents the\n', '     * ability to transfer tokens until after transfers have been enabled.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public validDestination(_to) returns (bool) {\n', '        bool result = super.transferFrom(_from, _to, _value);\n', '        if (result) {\n', '            if (msg.sender == crowdSaleAddr)\n', '                crowdSaleAllowance = crowdSaleAllowance.sub(_value);\n', '            if (msg.sender == adminAddr)\n', '                adminAllowance = adminAllowance.sub(_value);\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * Associates this token with a current crowdsale, giving the crowdsale\n', '     * an allowance of tokens from the crowdsale supply. This gives the\n', '     * crowdsale the ability to call transferFrom to transfer tokens to\n', '     * whomever has purchased them.\n', '     *\n', '     * Note that if _amountForSale is 0, then it is assumed that the full\n', '     * remaining crowdsale supply is made available to the crowdsale.\n', '     *\n', '     * @param _crowdSaleAddr The address of a crowdsale contract that will sell this token\n', '     * @param _amountForSale The supply of tokens provided to the crowdsale\n', '     */\n', '    function setCrowdsale(address _crowdSaleAddr, uint256 _amountForSale) external onlyOwner {\n', '        require(_amountForSale <= crowdSaleAllowance, "Sale amount should be less than the crowdsale allowance limits.");\n', '\n', '        // if 0, then full available crowdsale supply is assumed\n', '        uint amount = (_amountForSale == 0) ? crowdSaleAllowance : _amountForSale;\n', '\n', '        // Clear allowance of old, and set allowance of new\n', '        approve(crowdSaleAddr, 0);\n', '        approve(_crowdSaleAddr, amount);\n', '\n', '        crowdSaleAddr = _crowdSaleAddr;\n', '    }\n', '\n', '    function setAllowanceBeforeWithdrawal(address _from, address _to, uint _value) public onlyCrowdsale returns (bool) {\n', '        allowed[_from][_to] = _value;\n', '        emit Approval(_from, _to, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract CHIPSale is BaseCHIPSale {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    CHIPToken public tokenReward;\n', '\n', '    /**\n', '     * Constructor for a crowdsale of CHPToken tokens.\n', '     *\n', '     * @param ifSuccessfulSendTo            the beneficiary of the fund\n', '     * @param fundingGoalInEthers           the minimum goal to be reached\n', '     * @param fundingCapInEthers            the cap (maximum) size of the fund\n', '     * @param start                         the start time (UNIX timestamp)\n', '     * @param end                           the end time (UNIX timestamp)\n', '     * @param rateCHPToEther                 the conversion rate from CHP to Ether\n', '     * @param addressOfTokenUsedAsReward    address of the token being sold\n', '     */\n', '    constructor(\n', '        address ifSuccessfulSendTo,\n', '        uint fundingGoalInEthers,\n', '        uint fundingCapInEthers,\n', '        //uint minimumContributionInWei,\n', '        uint start,\n', '        uint end,\n', '        uint rateCHPToEther,\n', '        address addressOfTokenUsedAsReward\n', '    ) public {\n', '        require(ifSuccessfulSendTo != address(0) && ifSuccessfulSendTo != address(this), "Beneficiary cannot be 0 address");\n', '        require(addressOfTokenUsedAsReward != address(0) && addressOfTokenUsedAsReward != address(this), "Token address cannot be 0 address");\n', '        require(fundingGoalInEthers <= fundingCapInEthers, "Funding goal should be less that funding cap.");\n', '        require(end > 0, "Endtime cannot be 0");\n', '        beneficiary = ifSuccessfulSendTo;\n', '        fundingGoal = fundingGoalInEthers * 1 ether;\n', '        fundingCap = fundingCapInEthers * 1 ether;\n', '        //minContribution = minimumContributionInWei;\n', '        startTime = start;\n', '        endTime = end; // TODO double check\n', '        rate = rateCHPToEther;\n', '        withdrawRate = rateCHPToEther;\n', '        tokenReward = CHIPToken(addressOfTokenUsedAsReward);\n', '    }\n', '\n', '    /**\n', '     * This fallback function is called whenever Ether is sent to the\n', '     * smart contract. It can only be executed when the crowdsale is\n', '     * not paused, not closed, and before the deadline has been reached.\n', '     *\n', '     * This function will update state variables for whether or not the\n', '     * funding goal or cap have been reached. It also ensures that the\n', '     * tokens are transferred to the sender, and that the correct\n', '     * number of tokens are sent according to the current rate.\n', '     */\n', '    function () public payable whenNotPaused beforeDeadline afterStartTime saleNotClosed nonReentrant {\n', '        //require(msg.value >= minContribution, "Value should be greater than minimum contribution");\n', '\n', "        // Update the sender's balance of wei contributed and the amount raised\n", '        uint amount = msg.value;\n', '        uint currentBalance = balanceOf[msg.sender];\n', '        balanceOf[msg.sender] = currentBalance.add(amount);\n', '        amountRaised = amountRaised.add(amount);\n', '\n', '        // Compute the number of tokens to be rewarded to the sender\n', "        // Note: it's important for this calculation that both wei\n", '        // and CHP have the same number of decimal places (18)\n', '        uint numTokens = amount.mul(rate);\n', '\n', '        // Transfer the tokens from the crowdsale supply to the sender\n', '        if (tokenReward.transferFrom(tokenReward.owner(), msg.sender, numTokens)) {\n', '            emit FundTransfer(msg.sender, amount, true);\n', '            //contributions[msg.sender] = contributions[msg.sender].add(amount);\n', '            // Following code is to automatically transfer ETH to beneficiary\n', '            //uint balanceToSend = this.balance;\n', '            //beneficiary.transfer(balanceToSend);\n', '            //FundTransfer(beneficiary, balanceToSend, false);\n', '            // Check if the funding goal or cap have been reached\n', '            // TODO check impact on gas cost\n', '            checkFundingGoal();\n', '            checkFundingCap();\n', '        }\n', '        else {\n', '            revert("Transaction Failed. Please try again later.");\n', '        }\n', '    }\n', '\n', '    // Any users can call this function to send their tokens and get Ethers\n', '    function withdrawToken(uint tokensToWithdraw) public {\n', '        uint tokensInWei = convertToMini(tokensToWithdraw);\n', '        require(\n', '            tokensInWei <= tokenReward.balanceOf(msg.sender), \n', '            "You do not have sufficient balance to withdraw"\n', '        );\n', '        uint ethToGive = tokensInWei.div(withdrawRate);\n', '        require(ethToGive <= address(this).balance, "Insufficient ethers.");\n', '        //tokenReward.increaseApproval(address(this),tokensInWei);\n', '        tokenReward.setAllowanceBeforeWithdrawal(msg.sender, address(this), tokensInWei);\n', '        tokenReward.transferFrom(msg.sender, tokenReward.owner(), tokensInWei);\n', '        msg.sender.transfer(ethToGive);\n', '        emit FundTransfer(this.owner(), ethToGive, true);\n', '    }\n', '\n', '    /**\n', '     * The owner can allocate the specified amount of tokens from the\n', '     * crowdsale allowance to the recipient (_to).\n', '     *\n', '     * NOTE: be extremely careful to get the amounts correct, which\n', '     * are in units of wei and mini-CHP. Every digit counts.\n', '     *\n', '     * @param _to            the recipient of the tokens\n', '     * @param amountWei     the amount contributed in wei\n', '     * @param amountMiniCHP the amount of tokens transferred in mini-CHP (18 decimals)\n', '     */\n', '    function ownerAllocateTokens(address _to, uint amountWei, uint amountMiniCHP) public\n', '            onlyOwner nonReentrant\n', '    {\n', '        if (!tokenReward.transferFrom(tokenReward.owner(), _to, amountMiniCHP)) {\n', '            revert("Transfer failed. Please check allowance");\n', '        }\n', '        balanceOf[_to] = balanceOf[_to].add(amountWei);\n', '        amountRaised = amountRaised.add(amountWei);\n', '        emit FundTransfer(_to, amountWei, true);\n', '        checkFundingGoal();\n', '        checkFundingCap();\n', '    }\n', '\n', '    /**\n', '     * The owner can call this function to withdraw the funds that\n', '     * have been sent to this contract for the crowdsale subject to\n', '     * the funding goal having been reached. The funds will be sent\n', '     * to the beneficiary specified when the crowdsale was created.\n', '     */\n', '    function ownerSafeWithdrawal() public onlyOwner nonReentrant {\n', '        require(fundingGoalReached, "Check funding goal");\n', '        uint balanceToSend = address(this).balance;\n', '        beneficiary.transfer(balanceToSend);\n', '        emit FundTransfer(beneficiary, balanceToSend, false);\n', '    }\n', '\n', '    /**\n', '     * This function permits anybody to withdraw the funds they have\n', '     * contributed if and only if the deadline has passed and the\n', '     * funding goal was not reached.\n', '     */\n', '    function safeWithdrawal() public afterDeadline nonReentrant {\n', '        if (!fundingGoalReached) {\n', '            uint amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                msg.sender.transfer(amount);\n', '                emit FundTransfer(msg.sender, amount, false);\n', '                refundAmount = refundAmount.add(amount);\n', '            }\n', '        }\n', '    }\n', '    \n', '    function convertToMini(uint amount) internal view returns (uint) {\n', '        return amount * (10 ** uint(tokenReward.decimals()));\n', '    }    \n', '}']
