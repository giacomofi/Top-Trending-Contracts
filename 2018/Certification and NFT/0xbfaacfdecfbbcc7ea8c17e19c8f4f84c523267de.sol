['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/NokuPricingPlan.sol\n', '\n', '/**\n', '* @dev The NokuPricingPlan contract defines the responsibilities of a Noku pricing plan.\n', '*/\n', 'contract NokuPricingPlan {\n', '    /**\n', '    * @dev Pay the fee for the service identified by the specified name.\n', '    * The fee amount shall already be approved by the client.\n', '    * @param serviceName The name of the target service.\n', '    * @param multiplier The multiplier of the base service fee to apply.\n', '    * @param client The client of the target service.\n', '    * @return true if fee has been paid.\n', '    */\n', '    function payFee(bytes32 serviceName, uint256 multiplier, address client) public returns(bool paid);\n', '\n', '    /**\n', '    * @dev Get the usage fee for the service identified by the specified name.\n', '    * The returned fee amount shall be approved before using #payFee method.\n', '    * @param serviceName The name of the target service.\n', '    * @param multiplier The multiplier of the base service fee to apply.\n', '    * @return The amount to approve before really paying such fee.\n', '    */\n', '    function usageFee(bytes32 serviceName, uint256 multiplier) public constant returns(uint fee);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/NokuTokenBurner.sol\n', '\n', 'contract BurnableERC20 is ERC20 {\n', '    function burn(uint256 amount) public returns (bool burned);\n', '}\n', '\n', '/**\n', '* @dev The NokuTokenBurner contract has the responsibility to burn the configured fraction of received\n', '* ERC20-compliant tokens and distribute the remainder to the configured wallet.\n', '*/\n', 'contract NokuTokenBurner is Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    event LogNokuTokenBurnerCreated(address indexed caller, address indexed wallet);\n', '    event LogBurningPercentageChanged(address indexed caller, uint256 indexed burningPercentage);\n', '\n', '    // The wallet receiving the unburnt tokens.\n', '    address public wallet;\n', '\n', '    // The percentage of tokens to burn after being received (range [0, 100])\n', '    uint256 public burningPercentage;\n', '\n', '    // The cumulative amount of burnt tokens.\n', '    uint256 public burnedTokens;\n', '\n', '    // The cumulative amount of tokens transferred back to the wallet.\n', '    uint256 public transferredTokens;\n', '\n', '    /**\n', '    * @dev Create a new NokuTokenBurner with predefined burning fraction.\n', '    * @param _wallet The wallet receiving the unburnt tokens.\n', '    */\n', '    constructor(address _wallet) public {\n', '        require(_wallet != address(0), "_wallet is zero");\n', '        \n', '        wallet = _wallet;\n', '        burningPercentage = 100;\n', '\n', '        emit LogNokuTokenBurnerCreated(msg.sender, _wallet);\n', '    }\n', '\n', '    /**\n', '    * @dev Change the percentage of tokens to burn after being received.\n', '    * @param _burningPercentage The percentage of tokens to be burnt.\n', '    */\n', '    function setBurningPercentage(uint256 _burningPercentage) public onlyOwner {\n', '        require(0 <= _burningPercentage && _burningPercentage <= 100, "_burningPercentage not in [0, 100]");\n', '        require(_burningPercentage != burningPercentage, "_burningPercentage equal to current one");\n', '        \n', '        burningPercentage = _burningPercentage;\n', '\n', '        emit LogBurningPercentageChanged(msg.sender, _burningPercentage);\n', '    }\n', '\n', '    /**\n', '    * @dev Called after burnable tokens has been transferred for burning.\n', '    * @param _token THe extended ERC20 interface supported by the sent tokens.\n', '    * @param _amount The amount of burnable tokens just arrived ready for burning.\n', '    */\n', '    function tokenReceived(address _token, uint256 _amount) public whenNotPaused {\n', '        require(_token != address(0), "_token is zero");\n', '        require(_amount > 0, "_amount is zero");\n', '\n', '        uint256 amountToBurn = _amount.mul(burningPercentage).div(100);\n', '        if (amountToBurn > 0) {\n', '            assert(BurnableERC20(_token).burn(amountToBurn));\n', '            \n', '            burnedTokens = burnedTokens.add(amountToBurn);\n', '        }\n', '\n', '        uint256 amountToTransfer = _amount.sub(amountToBurn);\n', '        if (amountToTransfer > 0) {\n', '            assert(BurnableERC20(_token).transfer(wallet, amountToTransfer));\n', '\n', '            transferredTokens = transferredTokens.add(amountToTransfer);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/NokuConsumptionPlan.sol\n', '\n', '/**\n', '* @dev The NokuConsumptionPlan contract implements a flexible pricing plan, manageable by the contract owner, which can be:\n', '* - extended by inserting a new service with its associated fee\n', '* - modified by updating an existing service fee\n', '* - reduced by removing an existing service with its associated fee\n', '* - queried to obtain the count of services\n', '* The service [name, fee] association is maintained using an index in order to make the data traversable.\n', '*/\n', 'contract NokuConsumptionPlan is NokuPricingPlan, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    event LogNokuConsumptionPlanCreated(address indexed caller, address indexed nokuMasterToken, address indexed tokenBurner);\n', '    event LogServiceAdded(bytes32 indexed serviceName, uint indexed index, uint indexed serviceFee);\n', '    event LogServiceChanged(bytes32 indexed serviceName, uint indexed index, uint indexed serviceFee);\n', '    event LogServiceRemoved(bytes32 indexed serviceName, uint indexed index);\n', '    \n', '    struct NokuService {\n', '        uint serviceFee;\n', '        uint index;\n', '    }\n', '\n', '    bytes32[] private serviceIndex;\n', '\n', '    mapping(bytes32 => NokuService) private services;\n', '\n', '    // The NOKU utility token used for paying fee  \n', '    address public nokuMasterToken;\n', '\n', '    // The contract responsible for burning the NOKU tokens paid as service fee\n', '    address public tokenBurner;\n', '\n', '    constructor(address _nokuMasterToken, address _tokenBurner) public {\n', '        require(_nokuMasterToken != 0, "_nokuMasterToken is zero");\n', '        require(_tokenBurner != 0, "_tokenBurner is zero");\n', '\n', '        nokuMasterToken = _nokuMasterToken;\n', '        tokenBurner = _tokenBurner;\n', '\n', '        emit LogNokuConsumptionPlanCreated(msg.sender, _nokuMasterToken, _tokenBurner);\n', '    }\n', '\n', '    function isService(bytes32 _serviceName) public constant returns(bool isIndeed) {\n', '        require(_serviceName != 0, "_serviceName is zero");\n', '\n', '        if (serviceIndex.length == 0)\n', '            return false;\n', '        else\n', '            return (serviceIndex[services[_serviceName].index] == _serviceName);\n', '    }\n', '\n', '    function addService(bytes32 _serviceName, uint _serviceFee) public onlyOwner returns(uint index) {\n', '        require(!isService(_serviceName), "_serviceName already present");\n', '\n', '        services[_serviceName].serviceFee = _serviceFee;\n', '        services[_serviceName].index = serviceIndex.push(_serviceName)-1;\n', '\n', '        emit LogServiceAdded(_serviceName, serviceIndex.length-1, _serviceFee);\n', '\n', '        return serviceIndex.length-1;\n', '    }\n', '\n', '    function removeService(bytes32 _serviceName) public onlyOwner returns(uint index) {\n', '        require(isService(_serviceName), "_serviceName not present");\n', '\n', '        uint rowToDelete = services[_serviceName].index;\n', '        bytes32 keyToMove = serviceIndex[serviceIndex.length-1];\n', '        serviceIndex[rowToDelete] = keyToMove;\n', '        services[keyToMove].index = rowToDelete; \n', '        serviceIndex.length--;\n', '\n', '        emit LogServiceRemoved(_serviceName,  rowToDelete);\n', '        emit LogServiceChanged(keyToMove, rowToDelete, services[keyToMove].serviceFee);\n', '\n', '        return rowToDelete;\n', '    }\n', '\n', '    function updateServiceFee(bytes32 _serviceName, uint _serviceFee) public onlyOwner returns(bool success) {\n', '        require(isService(_serviceName), "_serviceName not present");\n', '\n', '        services[_serviceName].serviceFee = _serviceFee;\n', '\n', '        emit LogServiceChanged(_serviceName, services[_serviceName].index, _serviceFee);\n', '\n', '        return true;\n', '    }\n', '\n', '    function payFee(bytes32 _serviceName, uint256 _amount, address _client) public returns(bool paid) {\n', '        //require(isService(_serviceName)); // Already checked by #usageFee\n', '        //require(_amount != 0); // Already checked by #usageFee\n', '        require(_client != 0, "_client is zero");\n', '\n', '        uint256 fee = usageFee(_serviceName, _amount);\n', '        if (fee == 0) return true;\n', '\n', '        require(ERC20(nokuMasterToken).transferFrom(_client, tokenBurner, fee), "NOKU fee payment failed");\n', '\n', '        NokuTokenBurner(tokenBurner).tokenReceived(nokuMasterToken, fee);\n', '\n', '        return true;\n', '    }\n', '\n', '    function usageFee(bytes32 _serviceName, uint256 _amount) public constant returns(uint fee) {\n', '        require(isService(_serviceName), "_serviceName not present");\n', '        require(_amount != 0, "_amount is zero");\n', '        \n', '        // Assume fee are represented in 18-decimals notation\n', '        return _amount.mul(services[_serviceName].serviceFee).div(10**18);\n', '    }\n', '\n', '    function serviceCount() public constant returns(uint count) {\n', '        return serviceIndex.length;\n', '    }\n', '\n', '    function serviceAtIndex(uint _index) public constant returns(bytes32 serviceName) {\n', '        return serviceIndex[_index];\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/NokuPricingPlan.sol\n', '\n', '/**\n', '* @dev The NokuPricingPlan contract defines the responsibilities of a Noku pricing plan.\n', '*/\n', 'contract NokuPricingPlan {\n', '    /**\n', '    * @dev Pay the fee for the service identified by the specified name.\n', '    * The fee amount shall already be approved by the client.\n', '    * @param serviceName The name of the target service.\n', '    * @param multiplier The multiplier of the base service fee to apply.\n', '    * @param client The client of the target service.\n', '    * @return true if fee has been paid.\n', '    */\n', '    function payFee(bytes32 serviceName, uint256 multiplier, address client) public returns(bool paid);\n', '\n', '    /**\n', '    * @dev Get the usage fee for the service identified by the specified name.\n', '    * The returned fee amount shall be approved before using #payFee method.\n', '    * @param serviceName The name of the target service.\n', '    * @param multiplier The multiplier of the base service fee to apply.\n', '    * @return The amount to approve before really paying such fee.\n', '    */\n', '    function usageFee(bytes32 serviceName, uint256 multiplier) public constant returns(uint fee);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/NokuTokenBurner.sol\n', '\n', 'contract BurnableERC20 is ERC20 {\n', '    function burn(uint256 amount) public returns (bool burned);\n', '}\n', '\n', '/**\n', '* @dev The NokuTokenBurner contract has the responsibility to burn the configured fraction of received\n', '* ERC20-compliant tokens and distribute the remainder to the configured wallet.\n', '*/\n', 'contract NokuTokenBurner is Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    event LogNokuTokenBurnerCreated(address indexed caller, address indexed wallet);\n', '    event LogBurningPercentageChanged(address indexed caller, uint256 indexed burningPercentage);\n', '\n', '    // The wallet receiving the unburnt tokens.\n', '    address public wallet;\n', '\n', '    // The percentage of tokens to burn after being received (range [0, 100])\n', '    uint256 public burningPercentage;\n', '\n', '    // The cumulative amount of burnt tokens.\n', '    uint256 public burnedTokens;\n', '\n', '    // The cumulative amount of tokens transferred back to the wallet.\n', '    uint256 public transferredTokens;\n', '\n', '    /**\n', '    * @dev Create a new NokuTokenBurner with predefined burning fraction.\n', '    * @param _wallet The wallet receiving the unburnt tokens.\n', '    */\n', '    constructor(address _wallet) public {\n', '        require(_wallet != address(0), "_wallet is zero");\n', '        \n', '        wallet = _wallet;\n', '        burningPercentage = 100;\n', '\n', '        emit LogNokuTokenBurnerCreated(msg.sender, _wallet);\n', '    }\n', '\n', '    /**\n', '    * @dev Change the percentage of tokens to burn after being received.\n', '    * @param _burningPercentage The percentage of tokens to be burnt.\n', '    */\n', '    function setBurningPercentage(uint256 _burningPercentage) public onlyOwner {\n', '        require(0 <= _burningPercentage && _burningPercentage <= 100, "_burningPercentage not in [0, 100]");\n', '        require(_burningPercentage != burningPercentage, "_burningPercentage equal to current one");\n', '        \n', '        burningPercentage = _burningPercentage;\n', '\n', '        emit LogBurningPercentageChanged(msg.sender, _burningPercentage);\n', '    }\n', '\n', '    /**\n', '    * @dev Called after burnable tokens has been transferred for burning.\n', '    * @param _token THe extended ERC20 interface supported by the sent tokens.\n', '    * @param _amount The amount of burnable tokens just arrived ready for burning.\n', '    */\n', '    function tokenReceived(address _token, uint256 _amount) public whenNotPaused {\n', '        require(_token != address(0), "_token is zero");\n', '        require(_amount > 0, "_amount is zero");\n', '\n', '        uint256 amountToBurn = _amount.mul(burningPercentage).div(100);\n', '        if (amountToBurn > 0) {\n', '            assert(BurnableERC20(_token).burn(amountToBurn));\n', '            \n', '            burnedTokens = burnedTokens.add(amountToBurn);\n', '        }\n', '\n', '        uint256 amountToTransfer = _amount.sub(amountToBurn);\n', '        if (amountToTransfer > 0) {\n', '            assert(BurnableERC20(_token).transfer(wallet, amountToTransfer));\n', '\n', '            transferredTokens = transferredTokens.add(amountToTransfer);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/NokuConsumptionPlan.sol\n', '\n', '/**\n', '* @dev The NokuConsumptionPlan contract implements a flexible pricing plan, manageable by the contract owner, which can be:\n', '* - extended by inserting a new service with its associated fee\n', '* - modified by updating an existing service fee\n', '* - reduced by removing an existing service with its associated fee\n', '* - queried to obtain the count of services\n', '* The service [name, fee] association is maintained using an index in order to make the data traversable.\n', '*/\n', 'contract NokuConsumptionPlan is NokuPricingPlan, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    event LogNokuConsumptionPlanCreated(address indexed caller, address indexed nokuMasterToken, address indexed tokenBurner);\n', '    event LogServiceAdded(bytes32 indexed serviceName, uint indexed index, uint indexed serviceFee);\n', '    event LogServiceChanged(bytes32 indexed serviceName, uint indexed index, uint indexed serviceFee);\n', '    event LogServiceRemoved(bytes32 indexed serviceName, uint indexed index);\n', '    \n', '    struct NokuService {\n', '        uint serviceFee;\n', '        uint index;\n', '    }\n', '\n', '    bytes32[] private serviceIndex;\n', '\n', '    mapping(bytes32 => NokuService) private services;\n', '\n', '    // The NOKU utility token used for paying fee  \n', '    address public nokuMasterToken;\n', '\n', '    // The contract responsible for burning the NOKU tokens paid as service fee\n', '    address public tokenBurner;\n', '\n', '    constructor(address _nokuMasterToken, address _tokenBurner) public {\n', '        require(_nokuMasterToken != 0, "_nokuMasterToken is zero");\n', '        require(_tokenBurner != 0, "_tokenBurner is zero");\n', '\n', '        nokuMasterToken = _nokuMasterToken;\n', '        tokenBurner = _tokenBurner;\n', '\n', '        emit LogNokuConsumptionPlanCreated(msg.sender, _nokuMasterToken, _tokenBurner);\n', '    }\n', '\n', '    function isService(bytes32 _serviceName) public constant returns(bool isIndeed) {\n', '        require(_serviceName != 0, "_serviceName is zero");\n', '\n', '        if (serviceIndex.length == 0)\n', '            return false;\n', '        else\n', '            return (serviceIndex[services[_serviceName].index] == _serviceName);\n', '    }\n', '\n', '    function addService(bytes32 _serviceName, uint _serviceFee) public onlyOwner returns(uint index) {\n', '        require(!isService(_serviceName), "_serviceName already present");\n', '\n', '        services[_serviceName].serviceFee = _serviceFee;\n', '        services[_serviceName].index = serviceIndex.push(_serviceName)-1;\n', '\n', '        emit LogServiceAdded(_serviceName, serviceIndex.length-1, _serviceFee);\n', '\n', '        return serviceIndex.length-1;\n', '    }\n', '\n', '    function removeService(bytes32 _serviceName) public onlyOwner returns(uint index) {\n', '        require(isService(_serviceName), "_serviceName not present");\n', '\n', '        uint rowToDelete = services[_serviceName].index;\n', '        bytes32 keyToMove = serviceIndex[serviceIndex.length-1];\n', '        serviceIndex[rowToDelete] = keyToMove;\n', '        services[keyToMove].index = rowToDelete; \n', '        serviceIndex.length--;\n', '\n', '        emit LogServiceRemoved(_serviceName,  rowToDelete);\n', '        emit LogServiceChanged(keyToMove, rowToDelete, services[keyToMove].serviceFee);\n', '\n', '        return rowToDelete;\n', '    }\n', '\n', '    function updateServiceFee(bytes32 _serviceName, uint _serviceFee) public onlyOwner returns(bool success) {\n', '        require(isService(_serviceName), "_serviceName not present");\n', '\n', '        services[_serviceName].serviceFee = _serviceFee;\n', '\n', '        emit LogServiceChanged(_serviceName, services[_serviceName].index, _serviceFee);\n', '\n', '        return true;\n', '    }\n', '\n', '    function payFee(bytes32 _serviceName, uint256 _amount, address _client) public returns(bool paid) {\n', '        //require(isService(_serviceName)); // Already checked by #usageFee\n', '        //require(_amount != 0); // Already checked by #usageFee\n', '        require(_client != 0, "_client is zero");\n', '\n', '        uint256 fee = usageFee(_serviceName, _amount);\n', '        if (fee == 0) return true;\n', '\n', '        require(ERC20(nokuMasterToken).transferFrom(_client, tokenBurner, fee), "NOKU fee payment failed");\n', '\n', '        NokuTokenBurner(tokenBurner).tokenReceived(nokuMasterToken, fee);\n', '\n', '        return true;\n', '    }\n', '\n', '    function usageFee(bytes32 _serviceName, uint256 _amount) public constant returns(uint fee) {\n', '        require(isService(_serviceName), "_serviceName not present");\n', '        require(_amount != 0, "_amount is zero");\n', '        \n', '        // Assume fee are represented in 18-decimals notation\n', '        return _amount.mul(services[_serviceName].serviceFee).div(10**18);\n', '    }\n', '\n', '    function serviceCount() public constant returns(uint count) {\n', '        return serviceIndex.length;\n', '    }\n', '\n', '    function serviceAtIndex(uint _index) public constant returns(bytes32 serviceName) {\n', '        return serviceIndex[_index];\n', '    }\n', '}']
