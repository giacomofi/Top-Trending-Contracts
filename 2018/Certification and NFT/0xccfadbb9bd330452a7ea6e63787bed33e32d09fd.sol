['pragma solidity ^0.4.19;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '\n', '/// @dev Implements access control to the DWorld contract.\n', 'contract BurnupGameAccessControl is Claimable, Pausable, CanReclaimToken {\n', '    mapping (address => bool) public cfo;\n', '    \n', '    function BurnupGameAccessControl() public {\n', '        // The creator of the contract is a CFO.\n', '        cfo[msg.sender] = true;\n', '    }\n', '    \n', '    /// @dev Access modifier for CFO-only functionality.\n', '    modifier onlyCFO() {\n', '        require(cfo[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns or removes an address to act as a CFO. Only available to the current contract owner.\n', '    /// @param addr The address to set or unset as CFO.\n', '    /// @param set Whether to set or unset the address as CFO.\n', '    function setCFO(address addr, bool set) external onlyOwner {\n', '        require(addr != address(0));\n', '\n', '        if (!set) {\n', '            delete cfo[addr];\n', '        } else {\n', '            cfo[addr] = true;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/// @dev Defines base data structures for DWorld.\n', 'contract BurnupGameBase is BurnupGameAccessControl {\n', '    using SafeMath for uint256;\n', '    \n', '    event ActiveTimes(uint256[] from, uint256[] to);\n', '    event AllowStart(bool allowStart);\n', '    event NextGame(\n', '        uint256 rows,\n', '        uint256 cols,\n', '        uint256 initialActivityTimer,\n', '        uint256 finalActivityTimer,\n', '        uint256 numberOfFlipsToFinalActivityTimer,\n', '        uint256 timeoutBonusTime,\n', '        uint256 unclaimedTilePrice,\n', '        uint256 buyoutReferralBonusPercentage,\n', '        uint256 firstBuyoutPrizePoolPercentage,\n', '        uint256 buyoutPrizePoolPercentage,\n', '        uint256 buyoutDividendPercentage,\n', '        uint256 buyoutFeePercentage,\n', '        uint256 buyoutPriceIncreasePercentage\n', '    );\n', '    event Start(\n', '        uint256 indexed gameIndex,\n', '        address indexed starter,\n', '        uint256 timestamp,\n', '        uint256 prizePool\n', '    );\n', '    event End(uint256 indexed gameIndex, address indexed winner, uint256 indexed identifier, uint256 x, uint256 y, uint256 timestamp, uint256 prize);\n', '    event Buyout(\n', '        uint256 indexed gameIndex,\n', '        address indexed player,\n', '        uint256 indexed identifier,\n', '        uint256 x,\n', '        uint256 y,\n', '        uint256 timestamp,\n', '        uint256 timeoutTimestamp,\n', '        uint256 newPrice,\n', '        uint256 newPrizePool\n', '    );\n', '    event LastTile(\n', '        uint256 indexed gameIndex,\n', '        uint256 indexed identifier,\n', '        uint256 x,\n', '        uint256 y\n', '    );\n', '    event PenultimateTileTimeout(\n', '        uint256 indexed gameIndex,\n', '        uint256 timeoutTimestamp\n', '    );\n', '    event SpiceUpPrizePool(uint256 indexed gameIndex, address indexed spicer, uint256 spiceAdded, string message, uint256 newPrizePool);\n', '    \n', '    /// @dev Struct to hold game settings.\n', '    struct GameSettings {\n', '        uint256 rows; // 5\n', '        uint256 cols; // 8\n', '        \n', '        /// @dev Initial time after last trade after which tiles become inactive.\n', '        uint256 initialActivityTimer; // 600\n', '        \n', '        /// @dev Final time after last trade after which tiles become inactive.\n', '        uint256 finalActivityTimer; // 300\n', '        \n', '        /// @dev Number of flips for the activity timer to move from the initial\n', '        /// activity timer to the final activity timer.\n', '        uint256 numberOfFlipsToFinalActivityTimer; // 80\n', '        \n', '        /// @dev The timeout bonus time in seconds per tile owned by the player.\n', '        uint256 timeoutBonusTime; // 30\n', '        \n', '        /// @dev Base price for unclaimed tiles.\n', '        uint256 unclaimedTilePrice; // 0.01 ether\n', '        \n', '        /// @dev Percentage of the buyout price that goes towards the referral\n', '        /// bonus. In 1/1000th of a percentage.\n', '        uint256 buyoutReferralBonusPercentage; // 750\n', '        \n', '        /// @dev For the initial buyout of a tile: percentage of the buyout price\n', '        /// that goes towards the prize pool. In 1/1000th of a percentage.\n', '        uint256 firstBuyoutPrizePoolPercentage; // 40000\n', '        \n', '        /// @dev Percentage of the buyout price that goes towards the prize\n', '        /// pool. In 1/1000th of a percentage.\n', '        uint256 buyoutPrizePoolPercentage; // 10000\n', '    \n', '        /// @dev Percentage of the buyout price that goes towards dividends\n', '        /// surrounding the tile that is bought out. In in 1/1000th of\n', '        /// a percentage.\n', '        uint256 buyoutDividendPercentage; // 5000\n', '    \n', '        /// @dev Buyout fee in 1/1000th of a percentage.\n', '        uint256 buyoutFeePercentage; // 2500\n', '        \n', '        /// @dev Buyout price increase in 1/1000th of a percentage. \n', '        uint256 buyoutPriceIncreasePercentage;\n', '    }\n', '    \n', '    /// @dev Struct to hold game state.\n', '    struct GameState {\n', '        /// @dev Boolean indicating whether the game is live.\n', '        bool gameStarted;\n', '    \n', '        /// @dev Time at which the game started.\n', '        uint256 gameStartTimestamp;\n', '    \n', '        /// @dev Keep track of tile ownership.\n', '        mapping (uint256 => address) identifierToOwner;\n', '        \n', '        /// @dev Keep track of the timestamp at which a tile was flipped last.\n', '        mapping (uint256 => uint256) identifierToTimeoutTimestamp;\n', '        \n', '        /// @dev Current tile price.\n', '        mapping (uint256 => uint256) identifierToBuyoutPrice;\n', '        \n', '        /// @dev The number of tiles owned by an address.\n', '        mapping (address => uint256) addressToNumberOfTiles;\n', '        \n', '        /// @dev The number of tile flips performed.\n', '        uint256 numberOfTileFlips;\n', '        \n', '        /// @dev Keep track of the tile that will become inactive last.\n', '        uint256 lastTile;\n', '        \n', '        /// @dev Keep track of the timeout of the penultimate tile.\n', '        uint256 penultimateTileTimeout;\n', '        \n', '        /// @dev The prize pool.\n', '        uint256 prizePool;\n', '    }\n', '    \n', '    /// @notice Mapping from game indices to game states.\n', '    mapping (uint256 => GameState) public gameStates;\n', '    \n', '    /// @notice The index of the current game.\n', '    uint256 public gameIndex = 0;\n', '    \n', '    /// @notice Current game settings.\n', '    GameSettings public gameSettings;\n', '    \n', '    /// @dev Settings for the next game\n', '    GameSettings public nextGameSettings;\n', '    \n', '    /// @notice Time windows in seconds from the start of the week\n', '    /// when new games can be started.\n', '    uint256[] public activeTimesFrom;\n', '    uint256[] public activeTimesTo;\n', '    \n', '    /// @notice Whether the game can start once outside of active times.\n', '    bool public allowStart;\n', '    \n', '    function BurnupGameBase() public {\n', '        // Initial settings.\n', '        setNextGameSettings(\n', '            4, // rows\n', '            5, // cols\n', '            300, // initialActivityTimer // todo set to 600\n', '            150, // finalActivityTimer // todo set to 150\n', '            5, // numberOfFlipsToFinalActivityTimer // todo set to 80\n', '            30, // timeoutBonusTime\n', '            0.01 ether, // unclaimedTilePrice\n', '            750, // buyoutReferralBonusPercentage\n', '            40000, // firstBuyoutPrizePoolPercentage\n', '            10000, // buyoutPrizePoolPercentage\n', '            5000, // buyoutDividendPercentage\n', '            2500, // buyoutFeePercentage\n', '            150000 // buyoutPriceIncreasePercentage\n', '        );\n', '    }\n', '    \n', '    /// @dev Test whether the coordinate is valid.\n', '    /// @param x The x-part of the coordinate to test.\n', '    /// @param y The y-part of the coordinate to test.\n', '    function validCoordinate(uint256 x, uint256 y) public view returns(bool) {\n', '        return x < gameSettings.cols && y < gameSettings.rows;\n', '    }\n', '    \n', '    /// @dev Represent a 2D coordinate as a single uint.\n', '    /// @param x The x-coordinate.\n', '    /// @param y The y-coordinate.\n', '    function coordinateToIdentifier(uint256 x, uint256 y) public view returns(uint256) {\n', '        require(validCoordinate(x, y));\n', '        \n', '        return (y * gameSettings.cols) + x + 1;\n', '    }\n', '    \n', '    /// @dev Turn a single uint representation of a coordinate into its x and y parts.\n', '    /// @param identifier The uint representation of a coordinate.\n', '    /// Assumes the identifier is valid.\n', '    function identifierToCoordinate(uint256 identifier) public view returns(uint256 x, uint256 y) {\n', '        y = (identifier - 1) / gameSettings.cols;\n', '        x = (identifier - 1) - (y * gameSettings.cols);\n', '    }\n', '    \n', '    /// @notice Sets the settings for the next game.\n', '    function setNextGameSettings(\n', '        uint256 rows,\n', '        uint256 cols,\n', '        uint256 initialActivityTimer,\n', '        uint256 finalActivityTimer,\n', '        uint256 numberOfFlipsToFinalActivityTimer,\n', '        uint256 timeoutBonusTime,\n', '        uint256 unclaimedTilePrice,\n', '        uint256 buyoutReferralBonusPercentage,\n', '        uint256 firstBuyoutPrizePoolPercentage,\n', '        uint256 buyoutPrizePoolPercentage,\n', '        uint256 buyoutDividendPercentage,\n', '        uint256 buyoutFeePercentage,\n', '        uint256 buyoutPriceIncreasePercentage\n', '    )\n', '        public\n', '        onlyCFO\n', '    {\n', '        // Buyout dividend must be 2% at the least.\n', '        // Buyout dividend percentage may be 12.5% at the most.\n', '        require(2000 <= buyoutDividendPercentage && buyoutDividendPercentage <= 12500);\n', '        \n', '        // Buyout fee may be 5% at the most.\n', '        require(buyoutFeePercentage <= 5000);\n', '        \n', '        if (numberOfFlipsToFinalActivityTimer == 0) {\n', '            require(initialActivityTimer == finalActivityTimer);\n', '        }\n', '        \n', '        nextGameSettings = GameSettings({\n', '            rows: rows,\n', '            cols: cols,\n', '            initialActivityTimer: initialActivityTimer,\n', '            finalActivityTimer: finalActivityTimer,\n', '            numberOfFlipsToFinalActivityTimer: numberOfFlipsToFinalActivityTimer,\n', '            timeoutBonusTime: timeoutBonusTime,\n', '            unclaimedTilePrice: unclaimedTilePrice,\n', '            buyoutReferralBonusPercentage: buyoutReferralBonusPercentage,\n', '            firstBuyoutPrizePoolPercentage: firstBuyoutPrizePoolPercentage,\n', '            buyoutPrizePoolPercentage: buyoutPrizePoolPercentage,\n', '            buyoutDividendPercentage: buyoutDividendPercentage,\n', '            buyoutFeePercentage: buyoutFeePercentage,\n', '            buyoutPriceIncreasePercentage: buyoutPriceIncreasePercentage\n', '        });\n', '        \n', '        NextGame(\n', '            rows,\n', '            cols,\n', '            initialActivityTimer,\n', '            finalActivityTimer,\n', '            numberOfFlipsToFinalActivityTimer,\n', '            timeoutBonusTime,\n', '            unclaimedTilePrice,\n', '            buyoutReferralBonusPercentage, \n', '            firstBuyoutPrizePoolPercentage,\n', '            buyoutPrizePoolPercentage,\n', '            buyoutDividendPercentage,\n', '            buyoutFeePercentage,\n', '            buyoutPriceIncreasePercentage\n', '        );\n', '    }\n', '    \n', '    /// @notice Set the active times.\n', '    function setActiveTimes(uint256[] _from, uint256[] _to) external onlyCFO {\n', '        require(_from.length == _to.length);\n', '    \n', '        activeTimesFrom = _from;\n', '        activeTimesTo = _to;\n', '        \n', '        // Emit event.\n', '        ActiveTimes(_from, _to);\n', '    }\n', '    \n', '    /// @notice Allow the game to start once outside of active times.\n', '    function setAllowStart(bool _allowStart) external onlyCFO {\n', '        allowStart = _allowStart;\n', '        \n', '        // Emit event.\n', '        AllowStart(_allowStart);\n', '    }\n', '    \n', '    /// @notice A boolean indicating whether a new game can start,\n', '    /// based on the active times.\n', '    function canStart() public view returns (bool) {\n', '        // Get the time of the week in seconds.\n', '        // There are 7 * 24 * 60 * 60 = 604800 seconds in a week,\n', '        // and unix timestamps started counting from a Thursday,\n', '        // so subtract 4 * 24 * 60 * 60 = 345600 seconds, as\n', '        // (0 - 345600) % 604800 = 259200, i.e. the number of\n', '        // seconds in a week until Thursday 00:00:00.\n', '        uint256 timeOfWeek = (block.timestamp - 345600) % 604800;\n', '        \n', '        uint256 windows = activeTimesFrom.length;\n', '        \n', '        if (windows == 0) {\n', '            // No start times configured, any time is allowed.\n', '            return true;\n', '        }\n', '        \n', '        for (uint256 i = 0; i < windows; i++) {\n', '            if (timeOfWeek >= activeTimesFrom[i] && timeOfWeek <= activeTimesTo[i]) {\n', '                return true;\n', '            }\n', '        }\n', '        \n', '        return false;\n', '    }\n', '    \n', '    /// @notice Calculate the current game&#39;s base timeout.\n', '    function calculateBaseTimeout() public view returns(uint256) {\n', '        uint256 _numberOfTileFlips = gameStates[gameIndex].numberOfTileFlips;\n', '    \n', '        if (_numberOfTileFlips >= gameSettings.numberOfFlipsToFinalActivityTimer || gameSettings.numberOfFlipsToFinalActivityTimer == 0) {\n', '            return gameSettings.finalActivityTimer;\n', '        } else {\n', '            if (gameSettings.finalActivityTimer <= gameSettings.initialActivityTimer) {\n', '                // The activity timer decreases over time.\n', '            \n', '                // This cannot underflow, as initialActivityTimer is guaranteed to be\n', '                // greater than or equal to finalActivityTimer.\n', '                uint256 difference = gameSettings.initialActivityTimer - gameSettings.finalActivityTimer;\n', '                \n', '                // Calculate the decrease in activity timer, based on the number of wagers performed.\n', '                uint256 decrease = difference.mul(_numberOfTileFlips).div(gameSettings.numberOfFlipsToFinalActivityTimer);\n', '                \n', '                // This subtraction cannot underflow, as decrease is guaranteed to be less than or equal to initialActivityTimer.            \n', '                return (gameSettings.initialActivityTimer - decrease);\n', '            } else {\n', '                // The activity timer increases over time.\n', '            \n', '                // This cannot underflow, as initialActivityTimer is guaranteed to be\n', '                // smaller than finalActivityTimer.\n', '                difference = gameSettings.finalActivityTimer - gameSettings.initialActivityTimer;\n', '                \n', '                // Calculate the increase in activity timer, based on the number of wagers performed.\n', '                uint256 increase = difference.mul(_numberOfTileFlips).div(gameSettings.numberOfFlipsToFinalActivityTimer);\n', '                \n', '                // This addition cannot overflow, as initialActivityTimer + increase is guaranteed to be less than or equal to finalActivityTimer.\n', '                return (gameSettings.initialActivityTimer + increase);\n', '            }\n', '        }\n', '    }\n', '    \n', '    /// @notice Get the new timeout timestamp for a tile.\n', '    /// @param identifier The identifier of the tile being flipped.\n', '    /// @param player The address of the player flipping the tile.\n', '    function tileTimeoutTimestamp(uint256 identifier, address player) public view returns (uint256) {\n', '        uint256 bonusTime = gameSettings.timeoutBonusTime.mul(gameStates[gameIndex].addressToNumberOfTiles[player]);\n', '        uint256 timeoutTimestamp = block.timestamp.add(calculateBaseTimeout()).add(bonusTime);\n', '        \n', '        uint256 currentTimeoutTimestamp = gameStates[gameIndex].identifierToTimeoutTimestamp[identifier];\n', '        if (currentTimeoutTimestamp == 0) {\n', '            // Tile has never been flipped before.\n', '            currentTimeoutTimestamp = gameStates[gameIndex].gameStartTimestamp.add(gameSettings.initialActivityTimer);\n', '        }\n', '        \n', '        if (timeoutTimestamp >= currentTimeoutTimestamp) {\n', '            return timeoutTimestamp;\n', '        } else {\n', '            return currentTimeoutTimestamp;\n', '        }\n', '    }\n', '    \n', '    /// @dev Set the current game settings.\n', '    function _setGameSettings() internal {\n', '        if (gameSettings.rows != nextGameSettings.rows) {\n', '            gameSettings.rows = nextGameSettings.rows;\n', '        }\n', '        \n', '        if (gameSettings.cols != nextGameSettings.cols) {\n', '            gameSettings.cols = nextGameSettings.cols;\n', '        }\n', '        \n', '        if (gameSettings.initialActivityTimer != nextGameSettings.initialActivityTimer) {\n', '            gameSettings.initialActivityTimer = nextGameSettings.initialActivityTimer;\n', '        }\n', '        \n', '        if (gameSettings.finalActivityTimer != nextGameSettings.finalActivityTimer) {\n', '            gameSettings.finalActivityTimer = nextGameSettings.finalActivityTimer;\n', '        }\n', '        \n', '        if (gameSettings.numberOfFlipsToFinalActivityTimer != nextGameSettings.numberOfFlipsToFinalActivityTimer) {\n', '            gameSettings.numberOfFlipsToFinalActivityTimer = nextGameSettings.numberOfFlipsToFinalActivityTimer;\n', '        }\n', '        \n', '        if (gameSettings.timeoutBonusTime != nextGameSettings.timeoutBonusTime) {\n', '            gameSettings.timeoutBonusTime = nextGameSettings.timeoutBonusTime;\n', '        }\n', '        \n', '        if (gameSettings.unclaimedTilePrice != nextGameSettings.unclaimedTilePrice) {\n', '            gameSettings.unclaimedTilePrice = nextGameSettings.unclaimedTilePrice;\n', '        }\n', '        \n', '        if (gameSettings.buyoutReferralBonusPercentage != nextGameSettings.buyoutReferralBonusPercentage) {\n', '            gameSettings.buyoutReferralBonusPercentage = nextGameSettings.buyoutReferralBonusPercentage;\n', '        }\n', '        \n', '        if (gameSettings.firstBuyoutPrizePoolPercentage != nextGameSettings.firstBuyoutPrizePoolPercentage) {\n', '            gameSettings.firstBuyoutPrizePoolPercentage = nextGameSettings.firstBuyoutPrizePoolPercentage;\n', '        }\n', '        \n', '        if (gameSettings.buyoutPrizePoolPercentage != nextGameSettings.buyoutPrizePoolPercentage) {\n', '            gameSettings.buyoutPrizePoolPercentage = nextGameSettings.buyoutPrizePoolPercentage;\n', '        }\n', '        \n', '        if (gameSettings.buyoutDividendPercentage != nextGameSettings.buyoutDividendPercentage) {\n', '            gameSettings.buyoutDividendPercentage = nextGameSettings.buyoutDividendPercentage;\n', '        }\n', '        \n', '        if (gameSettings.buyoutFeePercentage != nextGameSettings.buyoutFeePercentage) {\n', '            gameSettings.buyoutFeePercentage = nextGameSettings.buyoutFeePercentage;\n', '        }\n', '        \n', '        if (gameSettings.buyoutPriceIncreasePercentage != nextGameSettings.buyoutPriceIncreasePercentage) {\n', '            gameSettings.buyoutPriceIncreasePercentage = nextGameSettings.buyoutPriceIncreasePercentage;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/// @dev Holds ownership functionality such as transferring.\n', 'contract BurnupGameOwnership is BurnupGameBase {\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 indexed deedId);\n', '    \n', '    /// @notice Name of the collection of deeds (non-fungible token), as defined in ERC721Metadata.\n', '    function name() public pure returns (string _deedName) {\n', '        _deedName = "Burnup Tiles";\n', '    }\n', '    \n', '    /// @notice Symbol of the collection of deeds (non-fungible token), as defined in ERC721Metadata.\n', '    function symbol() public pure returns (string _deedSymbol) {\n', '        _deedSymbol = "BURN";\n', '    }\n', '    \n', '    /// @dev Checks if a given address owns a particular tile.\n', '    /// @param _owner The address of the owner to check for.\n', '    /// @param _identifier The tile identifier to check for.\n', '    function _owns(address _owner, uint256 _identifier) internal view returns (bool) {\n', '        return gameStates[gameIndex].identifierToOwner[_identifier] == _owner;\n', '    }\n', '    \n', '    /// @dev Assigns ownership of a specific deed to an address.\n', '    /// @param _from The address to transfer the deed from.\n', '    /// @param _to The address to transfer the deed to.\n', '    /// @param _identifier The identifier of the deed to transfer.\n', '    function _transfer(address _from, address _to, uint256 _identifier) internal {\n', '        // Transfer ownership.\n', '        gameStates[gameIndex].identifierToOwner[_identifier] = _to;\n', '        \n', '        if (_from != 0x0) {\n', '            gameStates[gameIndex].addressToNumberOfTiles[_from] = gameStates[gameIndex].addressToNumberOfTiles[_from].sub(1);\n', '        }\n', '        \n', '        gameStates[gameIndex].addressToNumberOfTiles[_to] = gameStates[gameIndex].addressToNumberOfTiles[_to].add(1);\n', '        \n', '        // Emit the transfer event.\n', '        Transfer(_from, _to, _identifier);\n', '    }\n', '    \n', '    /// @notice Returns the address currently assigned ownership of a given deed.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function ownerOf(uint256 _identifier) external view returns (address _owner) {\n', '        _owner = gameStates[gameIndex].identifierToOwner[_identifier];\n', '\n', '        require(_owner != address(0));\n', '    }\n', '    \n', '    /// @notice Transfer a deed to another address. If transferring to a smart\n', '    /// contract be VERY CAREFUL to ensure that it is aware of ERC-721, or your\n', '    /// deed may be lost forever.\n', '    /// @param _to The address of the recipient, can be a user or contract.\n', '    /// @param _identifier The identifier of the deed to transfer.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transfer(address _to, uint256 _identifier) external whenNotPaused {\n', '        // One can only transfer their own deeds.\n', '        require(_owns(msg.sender, _identifier));\n', '        \n', '        // Transfer ownership\n', '        _transfer(msg.sender, _to, _identifier);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title PullPayment\n', ' * @dev Base contract supporting async send for pull payments. Inherit from this\n', ' * contract and use asyncSend instead of send.\n', ' */\n', 'contract PullPayment {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) public payments;\n', '  uint256 public totalPayments;\n', '\n', '  /**\n', '  * @dev withdraw accumulated balance, called by payee.\n', '  */\n', '  function withdrawPayments() public {\n', '    address payee = msg.sender;\n', '    uint256 payment = payments[payee];\n', '\n', '    require(payment != 0);\n', '    require(this.balance >= payment);\n', '\n', '    totalPayments = totalPayments.sub(payment);\n', '    payments[payee] = 0;\n', '\n', '    assert(payee.send(payment));\n', '  }\n', '\n', '  /**\n', '  * @dev Called by the payer to store the sent amount as credit to be pulled.\n', '  * @param dest The destination address of the funds.\n', '  * @param amount The amount to transfer.\n', '  */\n', '  function asyncSend(address dest, uint256 amount) internal {\n', '    payments[dest] = payments[dest].add(amount);\n', '    totalPayments = totalPayments.add(amount);\n', '  }\n', '}\n', '\n', '\n', '/// @dev Implements access control to the BurnUp wallet.\n', 'contract BurnupHoldingAccessControl is Claimable, Pausable, CanReclaimToken {\n', '    address public cfoAddress;\n', '    \n', '    /// Boolean indicating whether an address is a BurnUp Game contract.\n', '    mapping (address => bool) burnupGame;\n', '\n', '    function BurnupHoldingAccessControl() public {\n', '        // The creator of the contract is the initial CFO.\n', '        cfoAddress = msg.sender;\n', '    }\n', '    \n', '    /// @dev Access modifier for CFO-only functionality.\n', '    modifier onlyCFO() {\n', '        require(msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '    \n', '    /// @dev Access modifier for functionality that may only be called by a BurnUp game.\n', '    modifier onlyBurnupGame() {\n', '        // The sender must be a recognized BurnUp game address.\n', '        require(burnupGame[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the CFO. Only available to the current contract owner.\n', '    /// @param _newCFO The address of the new CFO.\n', '    function setCFO(address _newCFO) external onlyOwner {\n', '        require(_newCFO != address(0));\n', '\n', '        cfoAddress = _newCFO;\n', '    }\n', '    \n', '    /// @dev Add a Burnup game contract address.\n', '    /// @param addr The address of the Burnup game contract.\n', '    function addBurnupGame(address addr) external onlyOwner {\n', '        burnupGame[addr] = true;\n', '    }\n', '    \n', '    /// @dev Remove a Burnup game contract address.\n', '    /// @param addr The address of the Burnup game contract.\n', '    function removeBurnupGame(address addr) external onlyOwner {\n', '        delete burnupGame[addr];\n', '    }\n', '}\n', '\n', '\n', '/// @dev Implements the BurnUp wallet.\n', 'contract BurnupHoldingReferral is BurnupHoldingAccessControl {\n', '\n', '    event SetReferrer(address indexed referral, address indexed referrer);\n', '\n', '    /// Referrer of player.\n', '    mapping (address => address) addressToReferrerAddress;\n', '    \n', '    /// Get the referrer of a player.\n', '    /// @param player The address of the player to get the referrer of.\n', '    function referrerOf(address player) public view returns (address) {\n', '        return addressToReferrerAddress[player];\n', '    }\n', '    \n', '    /// Set the referrer for a player.\n', '    /// @param playerAddr The address of the player to set the referrer for.\n', '    /// @param referrerAddr The address of the referrer to set.\n', '    function _setReferrer(address playerAddr, address referrerAddr) internal {\n', '        addressToReferrerAddress[playerAddr] = referrerAddr;\n', '        \n', '        // Emit event.\n', '        SetReferrer(playerAddr, referrerAddr);\n', '    }\n', '}\n', '\n', '\n', '/// @dev Implements the BurnUp wallet.\n', 'contract BurnupHoldingCore is BurnupHoldingReferral, PullPayment {\n', '    using SafeMath for uint256;\n', '    \n', '    address public beneficiary1;\n', '    address public beneficiary2;\n', '    \n', '    function BurnupHoldingCore(address _beneficiary1, address _beneficiary2) public {\n', '        // The creator of the contract is the initial CFO.\n', '        cfoAddress = msg.sender;\n', '        \n', '        // Set the two beneficiaries.\n', '        beneficiary1 = _beneficiary1;\n', '        beneficiary2 = _beneficiary2;\n', '    }\n', '    \n', '    /// Pay the two beneficiaries. Sends both beneficiaries\n', '    /// a halve of the payment.\n', '    function payBeneficiaries() external payable {\n', '        uint256 paymentHalve = msg.value.div(2);\n', '        \n', '        // We do not want a single wei to get stuck.\n', '        uint256 otherPaymentHalve = msg.value.sub(paymentHalve);\n', '        \n', '        // Send payment for manual withdrawal.\n', '        asyncSend(beneficiary1, paymentHalve);\n', '        asyncSend(beneficiary2, otherPaymentHalve);\n', '    }\n', '    \n', '    /// Sets a new address for Beneficiary one.\n', '    /// @param addr The new address.\n', '    function setBeneficiary1(address addr) external onlyCFO {\n', '        beneficiary1 = addr;\n', '    }\n', '    \n', '    /// Sets a new address for Beneficiary two.\n', '    /// @param addr The new address.\n', '    function setBeneficiary2(address addr) external onlyCFO {\n', '        beneficiary2 = addr;\n', '    }\n', '    \n', '    /// Set a referrer.\n', '    /// @param playerAddr The address to set the referrer for.\n', '    /// @param referrerAddr The address of the referrer to set.\n', '    function setReferrer(address playerAddr, address referrerAddr) external onlyBurnupGame whenNotPaused returns(bool) {\n', '        if (referrerOf(playerAddr) == address(0x0) && playerAddr != referrerAddr) {\n', '            // Set the referrer, if no referrer has been set yet, and the player\n', '            // and referrer are not the same address.\n', '            _setReferrer(playerAddr, referrerAddr);\n', '            \n', '            // Indicate success.\n', '            return true;\n', '        }\n', '        \n', '        // Indicate failure.\n', '        return false;\n', '    }\n', '}\n', '\n', '\n', '/// @dev Holds functionality for finance related to tiles.\n', 'contract BurnupGameFinance is BurnupGameOwnership, PullPayment {\n', '    /// Address of Burnup wallet\n', '    BurnupHoldingCore burnupHolding;\n', '    \n', '    function BurnupGameFinance(address burnupHoldingAddress) public {\n', '        burnupHolding = BurnupHoldingCore(burnupHoldingAddress);\n', '    }\n', '    \n', '    /// @dev Find the _claimed_ tiles surrounding a tile.\n', '    /// @param _deedId The identifier of the tile to get the surrounding tiles for.\n', '    function _claimedSurroundingTiles(uint256 _deedId) internal view returns (uint256[] memory) {\n', '        var (x, y) = identifierToCoordinate(_deedId);\n', '        \n', '        // Find all claimed surrounding tiles.\n', '        uint256 claimed = 0;\n', '        \n', '        // Create memory buffer capable of holding all tiles.\n', '        uint256[] memory _tiles = new uint256[](8);\n', '        \n', '        // Loop through all neighbors.\n', '        for (int256 dx = -1; dx <= 1; dx++) {\n', '            for (int256 dy = -1; dy <= 1; dy++) {\n', '                if (dx == 0 && dy == 0) {\n', '                    // Skip the center (i.e., the tile itself).\n', '                    continue;\n', '                }\n', '                \n', '                uint256 nx = uint256(int256(x) + dx);\n', '                uint256 ny = uint256(int256(y) + dy);\n', '                \n', '                if (nx >= gameSettings.cols || ny >= gameSettings.rows) {\n', '                    // This coordinate is outside the game bounds.\n', '                    continue;\n', '                }\n', '                \n', '                // Get the coordinates of this neighboring identifier.\n', '                uint256 neighborIdentifier = coordinateToIdentifier(\n', '                    nx,\n', '                    ny\n', '                );\n', '                \n', '                if (gameStates[gameIndex].identifierToOwner[neighborIdentifier] != address(0x0)) {\n', '                    _tiles[claimed] = neighborIdentifier;\n', '                    claimed++;\n', '                }\n', '            }\n', '        }\n', '        \n', '        // Memory arrays cannot be resized, so copy all\n', '        // tiles from the buffer to the tile array.\n', '        uint256[] memory tiles = new uint256[](claimed);\n', '        \n', '        for (uint256 i = 0; i < claimed; i++) {\n', '            tiles[i] = _tiles[i];\n', '        }\n', '        \n', '        return tiles;\n', '    }\n', '    \n', '    /// @dev Calculate the next buyout price given the current total buyout cost.\n', '    /// @param price The current buyout price.\n', '    function nextBuyoutPrice(uint256 price) public view returns (uint256) {\n', '        if (price < 0.02 ether) {\n', '            return price.mul(200).div(100); // * 2.0\n', '        } else {\n', '            return price.mul(gameSettings.buyoutPriceIncreasePercentage).div(100000);\n', '        }\n', '    }\n', '    \n', '    /// @dev Assign the proceeds of the buyout.\n', '    function _assignBuyoutProceeds(\n', '        address currentOwner,\n', '        uint256[] memory claimedSurroundingTiles,\n', '        uint256 fee,\n', '        uint256 currentOwnerWinnings,\n', '        uint256 totalDividendPerBeneficiary,\n', '        uint256 referralBonus,\n', '        uint256 prizePoolFunds\n', '    )\n', '        internal\n', '    {\n', '    \n', '        if (currentOwner != 0x0) {\n', '            // Send the current owner&#39;s winnings.\n', '            _sendFunds(currentOwner, currentOwnerWinnings);\n', '        } else {\n', '            // There is no current owner. Split the winnings to the prize pool and fees.\n', '            uint256 prizePoolPart = currentOwnerWinnings.mul(gameSettings.firstBuyoutPrizePoolPercentage).div(100000);\n', '            \n', '            prizePoolFunds = prizePoolFunds.add(prizePoolPart);\n', '            fee = fee.add(currentOwnerWinnings.sub(prizePoolPart));\n', '        }\n', '        \n', '        // Assign dividends to owners of surrounding tiles.\n', '        for (uint256 i = 0; i < claimedSurroundingTiles.length; i++) {\n', '            address beneficiary = gameStates[gameIndex].identifierToOwner[claimedSurroundingTiles[i]];\n', '            _sendFunds(beneficiary, totalDividendPerBeneficiary);\n', '        }\n', '        \n', '        /// Distribute the referral bonuses (if any) for an address.\n', '        address referrer1 = burnupHolding.referrerOf(msg.sender);\n', '        if (referrer1 != 0x0) {\n', '            _sendFunds(referrer1, referralBonus);\n', '        \n', '            address referrer2 = burnupHolding.referrerOf(referrer1);\n', '            if (referrer2 != 0x0) {\n', '                _sendFunds(referrer2, referralBonus);\n', '            } else {\n', '                // There is no second-level referrer.\n', '                fee = fee.add(referralBonus);\n', '            }\n', '        } else {\n', '            // There are no first and second-level referrers.\n', '            fee = fee.add(referralBonus.mul(2));\n', '        }\n', '        \n', '        // Send the fee to the holding contract.\n', '        burnupHolding.payBeneficiaries.value(fee)();\n', '        \n', '        // Increase the prize pool.\n', '        gameStates[gameIndex].prizePool = gameStates[gameIndex].prizePool.add(prizePoolFunds);\n', '    }\n', '    \n', '    /// @notice Get the price for the given tile.\n', '    /// @param _deedId The identifier of the tile to get the price for.\n', '    function currentPrice(uint256 _deedId) public view returns (uint256 price) {\n', '        address currentOwner = gameStates[gameIndex].identifierToOwner[_deedId];\n', '    \n', '        if (currentOwner == 0x0) {\n', '            price = gameSettings.unclaimedTilePrice;\n', '        } else {\n', '            price = gameStates[gameIndex].identifierToBuyoutPrice[_deedId];\n', '        }\n', '    }\n', '    \n', '    /// @dev Calculate and assign the proceeds from the buyout.\n', '    /// @param currentOwner The current owner of the tile that is being bought out.\n', '    /// @param price The price of the tile that is being bought out.\n', '    /// @param claimedSurroundingTiles The surrounding tiles that have been claimed.\n', '    function _calculateAndAssignBuyoutProceeds(address currentOwner, uint256 price, uint256[] memory claimedSurroundingTiles)\n', '        internal\n', '    {\n', '        // Calculate the variable dividends based on the buyout price\n', '        // (only to be paid if there are surrounding tiles).\n', '        uint256 variableDividends = price.mul(gameSettings.buyoutDividendPercentage).div(100000);\n', '        \n', '        // Calculate fees, referral bonus, and prize pool funds.\n', '        uint256 fee            = price.mul(gameSettings.buyoutFeePercentage).div(100000);\n', '        uint256 referralBonus  = price.mul(gameSettings.buyoutReferralBonusPercentage).div(100000);\n', '        uint256 prizePoolFunds = price.mul(gameSettings.buyoutPrizePoolPercentage).div(100000);\n', '        \n', '        // Calculate and assign buyout proceeds.\n', '        uint256 currentOwnerWinnings = price.sub(fee).sub(referralBonus.mul(2)).sub(prizePoolFunds);\n', '        \n', '        uint256 totalDividendPerBeneficiary;\n', '        if (claimedSurroundingTiles.length > 0) {\n', '            // If there are surrounding tiles, variable dividend is to be paid\n', '            // based on the buyout price.\n', '            // Calculate the dividend per surrounding tile.\n', '            totalDividendPerBeneficiary = variableDividends / claimedSurroundingTiles.length;\n', '            \n', '            // currentOwnerWinnings = currentOwnerWinnings.sub(variableDividends);\n', '            currentOwnerWinnings = currentOwnerWinnings.sub(totalDividendPerBeneficiary * claimedSurroundingTiles.length);\n', '        }\n', '        \n', '        _assignBuyoutProceeds(\n', '            currentOwner,\n', '            claimedSurroundingTiles,\n', '            fee,\n', '            currentOwnerWinnings,\n', '            totalDividendPerBeneficiary,\n', '            referralBonus,\n', '            prizePoolFunds\n', '        );\n', '    }\n', '    \n', '    /// @dev Send funds to a beneficiary. If sending fails, assign\n', '    /// funds to the beneficiary&#39;s balance for manual withdrawal.\n', '    /// @param beneficiary The beneficiary&#39;s address to send funds to\n', '    /// @param amount The amount to send.\n', '    function _sendFunds(address beneficiary, uint256 amount) internal {\n', '        if (!beneficiary.send(amount)) {\n', '            // Failed to send funds. This can happen due to a failure in\n', '            // fallback code of the beneficiary, or because of callstack\n', '            // depth.\n', '            // Send funds asynchronously for manual withdrawal by the\n', '            // beneficiary.\n', '            asyncSend(beneficiary, amount);\n', '        }\n', '    }\n', '}\n', '\n', '/// @dev Holds core game functionality.\n', 'contract BurnupGameCore is BurnupGameFinance {\n', '    \n', '    function BurnupGameCore(address burnupHoldingAddress) public BurnupGameFinance(burnupHoldingAddress) {}\n', '    \n', '    /// @notice Buy the current owner out of the tile.\n', '    /// @param _gameIndex The index of the game to play on.\n', '    /// @param startNewGameIfIdle Start a new game if the current game is idle.\n', '    /// @param x The x-coordinate of the tile to buy.\n', '    /// @param y The y-coordinate of the tile to buy.\n', '    function buyout(uint256 _gameIndex, bool startNewGameIfIdle, uint256 x, uint256 y) public payable {\n', '        // Check to see if the game should end. Process payment.\n', '        _processGameEnd();\n', '        \n', '        if (!gameStates[gameIndex].gameStarted) {\n', '            // If the game is not started, the contract must not be paused.\n', '            require(!paused);\n', '            \n', '            if (allowStart) {\n', '                // We&#39;re allowed to start once outside of active times.\n', '                allowStart = false;\n', '            } else {\n', '                // This must be an active time.\n', '                require(canStart());\n', '            }\n', '            \n', '            // If the game is not started, the player must be willing to start\n', '            // a new game.\n', '            require(startNewGameIfIdle);\n', '            \n', '            _setGameSettings();\n', '            \n', '            // Start the game.\n', '            gameStates[gameIndex].gameStarted = true;\n', '            \n', '            // Set game started timestamp.\n', '            gameStates[gameIndex].gameStartTimestamp = block.timestamp;\n', '            \n', '            // Set the initial game board timeout.\n', '            gameStates[gameIndex].penultimateTileTimeout = block.timestamp + gameSettings.initialActivityTimer;\n', '            \n', '            Start(\n', '                gameIndex,\n', '                msg.sender,\n', '                block.timestamp,\n', '                gameStates[gameIndex].prizePool\n', '            );\n', '            \n', '            PenultimateTileTimeout(gameIndex, gameStates[gameIndex].penultimateTileTimeout);\n', '        }\n', '    \n', '        // Check the game index.\n', '        if (startNewGameIfIdle) {\n', '            // The given game index must be the current game index, or the previous\n', '            // game index.\n', '            require(_gameIndex == gameIndex || _gameIndex.add(1) == gameIndex);\n', '        } else {\n', '            // Only play on the game indicated by the player.\n', '            require(_gameIndex == gameIndex);\n', '        }\n', '        \n', '        uint256 identifier = coordinateToIdentifier(x, y);\n', '        \n', '        address currentOwner = gameStates[gameIndex].identifierToOwner[identifier];\n', '        \n', '        // Tile must be unowned, or active.\n', '        if (currentOwner == address(0x0)) {\n', '            // Tile must still be flippable.\n', '            require(gameStates[gameIndex].gameStartTimestamp.add(gameSettings.initialActivityTimer) >= block.timestamp);\n', '        } else {\n', '            // Tile must be active.\n', '            require(gameStates[gameIndex].identifierToTimeoutTimestamp[identifier] >= block.timestamp);\n', '        }\n', '        \n', '        // Enough Ether must be supplied.\n', '        uint256 price = currentPrice(identifier);\n', '        require(msg.value >= price);\n', '        \n', '        // Get existing surrounding tiles.\n', '        uint256[] memory claimedSurroundingTiles = _claimedSurroundingTiles(identifier);\n', '        \n', '        // Assign the buyout proceeds and retrieve the total cost.\n', '        _calculateAndAssignBuyoutProceeds(currentOwner, price, claimedSurroundingTiles);\n', '        \n', '        // Set the timeout timestamp.\n', '        uint256 timeout = tileTimeoutTimestamp(identifier, msg.sender);\n', '        gameStates[gameIndex].identifierToTimeoutTimestamp[identifier] = timeout;\n', '        \n', '        // Keep track of the last and penultimate tiles.\n', '        if (gameStates[gameIndex].lastTile == 0 || timeout >= gameStates[gameIndex].identifierToTimeoutTimestamp[gameStates[gameIndex].lastTile]) {\n', '            if (gameStates[gameIndex].lastTile != identifier) {\n', '                if (gameStates[gameIndex].lastTile != 0) {\n', '                    // Previous last tile to become inactive is now the penultimate tile.\n', '                    gameStates[gameIndex].penultimateTileTimeout = gameStates[gameIndex].identifierToTimeoutTimestamp[gameStates[gameIndex].lastTile];\n', '                    PenultimateTileTimeout(gameIndex, gameStates[gameIndex].penultimateTileTimeout);\n', '                }\n', '            \n', '                gameStates[gameIndex].lastTile = identifier;\n', '                LastTile(gameIndex, identifier, x, y);\n', '            }\n', '        } else if (timeout > gameStates[gameIndex].penultimateTileTimeout) {\n', '            gameStates[gameIndex].penultimateTileTimeout = timeout;\n', '            \n', '            PenultimateTileTimeout(gameIndex, timeout);\n', '        }\n', '        \n', '        // Transfer the tile.\n', '        _transfer(currentOwner, msg.sender, identifier);\n', '        \n', '        // Calculate and set the new tile price.\n', '        gameStates[gameIndex].identifierToBuyoutPrice[identifier] = nextBuyoutPrice(price);\n', '        \n', '        // Increment the number of tile flips.\n', '        gameStates[gameIndex].numberOfTileFlips++;\n', '        \n', '        // Emit event\n', '        Buyout(gameIndex, msg.sender, identifier, x, y, block.timestamp, timeout, gameStates[gameIndex].identifierToBuyoutPrice[identifier], gameStates[gameIndex].prizePool);\n', '        \n', '        // Calculate the excess Ether sent.\n', '        // msg.value is greater than or equal to price,\n', '        // so this cannot underflow.\n', '        uint256 excess = msg.value - price;\n', '        \n', '        if (excess > 0) {\n', '            // Refund any excess Ether (not susceptible to re-entry attack, as\n', '            // the owner is assigned before the transfer takes place).\n', '            msg.sender.transfer(excess);\n', '        }\n', '    }\n', '    \n', '    /// @notice Buy the current owner out of the tile. Set the player&#39;s referrer.\n', '    /// @param _gameIndex The index of the game to play on.\n', '    /// @param startNewGameIfIdle Start a new game if the current game is idle.\n', '    /// @param x The x-coordinate of the tile to buy.\n', '    /// @param y The y-coordinate of the tile to buy.\n', '    function buyoutAndSetReferrer(uint256 _gameIndex, bool startNewGameIfIdle, uint256 x, uint256 y, address referrerAddress) external payable {\n', '        // Set the referrer.\n', '        burnupHolding.setReferrer(msg.sender, referrerAddress);\n', '    \n', '        // Play.\n', '        buyout(_gameIndex, startNewGameIfIdle, x, y);\n', '    }\n', '    \n', '    /// @notice Spice up the prize pool.\n', '    /// @param _gameIndex The index of the game to add spice to.\n', '    /// @param message An optional message to be sent along with the spice.\n', '    function spiceUp(uint256 _gameIndex, string message) external payable {\n', '        // Check to see if the game should end. Process payment.\n', '        _processGameEnd();\n', '        \n', '        // Check the game index.\n', '        require(_gameIndex == gameIndex);\n', '    \n', '        // Game must be live or unpaused.\n', '        require(gameStates[gameIndex].gameStarted || !paused);\n', '        \n', '        // Funds must be sent.\n', '        require(msg.value > 0);\n', '        \n', '        // Add funds to the prize pool.\n', '        gameStates[gameIndex].prizePool = gameStates[gameIndex].prizePool.add(msg.value);\n', '        \n', '        // Emit event.\n', '        SpiceUpPrizePool(gameIndex, msg.sender, msg.value, message, gameStates[gameIndex].prizePool);\n', '    }\n', '    \n', '    /// @notice End the game. Pay prize.\n', '    function endGame() external {\n', '        require(_processGameEnd());\n', '    }\n', '    \n', '    /// @dev End the game. Pay prize.\n', '    function _processGameEnd() internal returns(bool) {\n', '        // The game must be started.\n', '        if (!gameStates[gameIndex].gameStarted) {\n', '            return false;\n', '        }\n', '        \n', '        address currentOwner = gameStates[gameIndex].identifierToOwner[gameStates[gameIndex].lastTile];\n', '    \n', '        // The last flipped tile must be owned (i.e. there has been at\n', '        // least one flip).\n', '        if (currentOwner == address(0x0)) {\n', '            return false;\n', '        }\n', '        \n', '        // The penultimate tile must have become inactive.\n', '        if (gameStates[gameIndex].penultimateTileTimeout >= block.timestamp) {\n', '            return false;\n', '        }\n', '        \n', '        // Assign prize pool to the owner of the last-flipped tile.\n', '        if (gameStates[gameIndex].prizePool > 0) {\n', '            _sendFunds(currentOwner, gameStates[gameIndex].prizePool);\n', '        }\n', '        \n', '        // Get coordinates of last flipped tile.\n', '        var (x, y) = identifierToCoordinate(gameStates[gameIndex].lastTile);\n', '        \n', '        // Emit event.\n', '        End(gameIndex, currentOwner, gameStates[gameIndex].lastTile, x, y, gameStates[gameIndex].identifierToTimeoutTimestamp[gameStates[gameIndex].lastTile], gameStates[gameIndex].prizePool);\n', '        \n', '        // Increment the game index. This won&#39;t overflow before the heat death of the universe.\n', '        gameIndex++;\n', '        \n', '        // Indicate ending the game was successful.\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '\n', '/// @dev Implements access control to the DWorld contract.\n', 'contract BurnupGameAccessControl is Claimable, Pausable, CanReclaimToken {\n', '    mapping (address => bool) public cfo;\n', '    \n', '    function BurnupGameAccessControl() public {\n', '        // The creator of the contract is a CFO.\n', '        cfo[msg.sender] = true;\n', '    }\n', '    \n', '    /// @dev Access modifier for CFO-only functionality.\n', '    modifier onlyCFO() {\n', '        require(cfo[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns or removes an address to act as a CFO. Only available to the current contract owner.\n', '    /// @param addr The address to set or unset as CFO.\n', '    /// @param set Whether to set or unset the address as CFO.\n', '    function setCFO(address addr, bool set) external onlyOwner {\n', '        require(addr != address(0));\n', '\n', '        if (!set) {\n', '            delete cfo[addr];\n', '        } else {\n', '            cfo[addr] = true;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/// @dev Defines base data structures for DWorld.\n', 'contract BurnupGameBase is BurnupGameAccessControl {\n', '    using SafeMath for uint256;\n', '    \n', '    event ActiveTimes(uint256[] from, uint256[] to);\n', '    event AllowStart(bool allowStart);\n', '    event NextGame(\n', '        uint256 rows,\n', '        uint256 cols,\n', '        uint256 initialActivityTimer,\n', '        uint256 finalActivityTimer,\n', '        uint256 numberOfFlipsToFinalActivityTimer,\n', '        uint256 timeoutBonusTime,\n', '        uint256 unclaimedTilePrice,\n', '        uint256 buyoutReferralBonusPercentage,\n', '        uint256 firstBuyoutPrizePoolPercentage,\n', '        uint256 buyoutPrizePoolPercentage,\n', '        uint256 buyoutDividendPercentage,\n', '        uint256 buyoutFeePercentage,\n', '        uint256 buyoutPriceIncreasePercentage\n', '    );\n', '    event Start(\n', '        uint256 indexed gameIndex,\n', '        address indexed starter,\n', '        uint256 timestamp,\n', '        uint256 prizePool\n', '    );\n', '    event End(uint256 indexed gameIndex, address indexed winner, uint256 indexed identifier, uint256 x, uint256 y, uint256 timestamp, uint256 prize);\n', '    event Buyout(\n', '        uint256 indexed gameIndex,\n', '        address indexed player,\n', '        uint256 indexed identifier,\n', '        uint256 x,\n', '        uint256 y,\n', '        uint256 timestamp,\n', '        uint256 timeoutTimestamp,\n', '        uint256 newPrice,\n', '        uint256 newPrizePool\n', '    );\n', '    event LastTile(\n', '        uint256 indexed gameIndex,\n', '        uint256 indexed identifier,\n', '        uint256 x,\n', '        uint256 y\n', '    );\n', '    event PenultimateTileTimeout(\n', '        uint256 indexed gameIndex,\n', '        uint256 timeoutTimestamp\n', '    );\n', '    event SpiceUpPrizePool(uint256 indexed gameIndex, address indexed spicer, uint256 spiceAdded, string message, uint256 newPrizePool);\n', '    \n', '    /// @dev Struct to hold game settings.\n', '    struct GameSettings {\n', '        uint256 rows; // 5\n', '        uint256 cols; // 8\n', '        \n', '        /// @dev Initial time after last trade after which tiles become inactive.\n', '        uint256 initialActivityTimer; // 600\n', '        \n', '        /// @dev Final time after last trade after which tiles become inactive.\n', '        uint256 finalActivityTimer; // 300\n', '        \n', '        /// @dev Number of flips for the activity timer to move from the initial\n', '        /// activity timer to the final activity timer.\n', '        uint256 numberOfFlipsToFinalActivityTimer; // 80\n', '        \n', '        /// @dev The timeout bonus time in seconds per tile owned by the player.\n', '        uint256 timeoutBonusTime; // 30\n', '        \n', '        /// @dev Base price for unclaimed tiles.\n', '        uint256 unclaimedTilePrice; // 0.01 ether\n', '        \n', '        /// @dev Percentage of the buyout price that goes towards the referral\n', '        /// bonus. In 1/1000th of a percentage.\n', '        uint256 buyoutReferralBonusPercentage; // 750\n', '        \n', '        /// @dev For the initial buyout of a tile: percentage of the buyout price\n', '        /// that goes towards the prize pool. In 1/1000th of a percentage.\n', '        uint256 firstBuyoutPrizePoolPercentage; // 40000\n', '        \n', '        /// @dev Percentage of the buyout price that goes towards the prize\n', '        /// pool. In 1/1000th of a percentage.\n', '        uint256 buyoutPrizePoolPercentage; // 10000\n', '    \n', '        /// @dev Percentage of the buyout price that goes towards dividends\n', '        /// surrounding the tile that is bought out. In in 1/1000th of\n', '        /// a percentage.\n', '        uint256 buyoutDividendPercentage; // 5000\n', '    \n', '        /// @dev Buyout fee in 1/1000th of a percentage.\n', '        uint256 buyoutFeePercentage; // 2500\n', '        \n', '        /// @dev Buyout price increase in 1/1000th of a percentage. \n', '        uint256 buyoutPriceIncreasePercentage;\n', '    }\n', '    \n', '    /// @dev Struct to hold game state.\n', '    struct GameState {\n', '        /// @dev Boolean indicating whether the game is live.\n', '        bool gameStarted;\n', '    \n', '        /// @dev Time at which the game started.\n', '        uint256 gameStartTimestamp;\n', '    \n', '        /// @dev Keep track of tile ownership.\n', '        mapping (uint256 => address) identifierToOwner;\n', '        \n', '        /// @dev Keep track of the timestamp at which a tile was flipped last.\n', '        mapping (uint256 => uint256) identifierToTimeoutTimestamp;\n', '        \n', '        /// @dev Current tile price.\n', '        mapping (uint256 => uint256) identifierToBuyoutPrice;\n', '        \n', '        /// @dev The number of tiles owned by an address.\n', '        mapping (address => uint256) addressToNumberOfTiles;\n', '        \n', '        /// @dev The number of tile flips performed.\n', '        uint256 numberOfTileFlips;\n', '        \n', '        /// @dev Keep track of the tile that will become inactive last.\n', '        uint256 lastTile;\n', '        \n', '        /// @dev Keep track of the timeout of the penultimate tile.\n', '        uint256 penultimateTileTimeout;\n', '        \n', '        /// @dev The prize pool.\n', '        uint256 prizePool;\n', '    }\n', '    \n', '    /// @notice Mapping from game indices to game states.\n', '    mapping (uint256 => GameState) public gameStates;\n', '    \n', '    /// @notice The index of the current game.\n', '    uint256 public gameIndex = 0;\n', '    \n', '    /// @notice Current game settings.\n', '    GameSettings public gameSettings;\n', '    \n', '    /// @dev Settings for the next game\n', '    GameSettings public nextGameSettings;\n', '    \n', '    /// @notice Time windows in seconds from the start of the week\n', '    /// when new games can be started.\n', '    uint256[] public activeTimesFrom;\n', '    uint256[] public activeTimesTo;\n', '    \n', '    /// @notice Whether the game can start once outside of active times.\n', '    bool public allowStart;\n', '    \n', '    function BurnupGameBase() public {\n', '        // Initial settings.\n', '        setNextGameSettings(\n', '            4, // rows\n', '            5, // cols\n', '            300, // initialActivityTimer // todo set to 600\n', '            150, // finalActivityTimer // todo set to 150\n', '            5, // numberOfFlipsToFinalActivityTimer // todo set to 80\n', '            30, // timeoutBonusTime\n', '            0.01 ether, // unclaimedTilePrice\n', '            750, // buyoutReferralBonusPercentage\n', '            40000, // firstBuyoutPrizePoolPercentage\n', '            10000, // buyoutPrizePoolPercentage\n', '            5000, // buyoutDividendPercentage\n', '            2500, // buyoutFeePercentage\n', '            150000 // buyoutPriceIncreasePercentage\n', '        );\n', '    }\n', '    \n', '    /// @dev Test whether the coordinate is valid.\n', '    /// @param x The x-part of the coordinate to test.\n', '    /// @param y The y-part of the coordinate to test.\n', '    function validCoordinate(uint256 x, uint256 y) public view returns(bool) {\n', '        return x < gameSettings.cols && y < gameSettings.rows;\n', '    }\n', '    \n', '    /// @dev Represent a 2D coordinate as a single uint.\n', '    /// @param x The x-coordinate.\n', '    /// @param y The y-coordinate.\n', '    function coordinateToIdentifier(uint256 x, uint256 y) public view returns(uint256) {\n', '        require(validCoordinate(x, y));\n', '        \n', '        return (y * gameSettings.cols) + x + 1;\n', '    }\n', '    \n', '    /// @dev Turn a single uint representation of a coordinate into its x and y parts.\n', '    /// @param identifier The uint representation of a coordinate.\n', '    /// Assumes the identifier is valid.\n', '    function identifierToCoordinate(uint256 identifier) public view returns(uint256 x, uint256 y) {\n', '        y = (identifier - 1) / gameSettings.cols;\n', '        x = (identifier - 1) - (y * gameSettings.cols);\n', '    }\n', '    \n', '    /// @notice Sets the settings for the next game.\n', '    function setNextGameSettings(\n', '        uint256 rows,\n', '        uint256 cols,\n', '        uint256 initialActivityTimer,\n', '        uint256 finalActivityTimer,\n', '        uint256 numberOfFlipsToFinalActivityTimer,\n', '        uint256 timeoutBonusTime,\n', '        uint256 unclaimedTilePrice,\n', '        uint256 buyoutReferralBonusPercentage,\n', '        uint256 firstBuyoutPrizePoolPercentage,\n', '        uint256 buyoutPrizePoolPercentage,\n', '        uint256 buyoutDividendPercentage,\n', '        uint256 buyoutFeePercentage,\n', '        uint256 buyoutPriceIncreasePercentage\n', '    )\n', '        public\n', '        onlyCFO\n', '    {\n', '        // Buyout dividend must be 2% at the least.\n', '        // Buyout dividend percentage may be 12.5% at the most.\n', '        require(2000 <= buyoutDividendPercentage && buyoutDividendPercentage <= 12500);\n', '        \n', '        // Buyout fee may be 5% at the most.\n', '        require(buyoutFeePercentage <= 5000);\n', '        \n', '        if (numberOfFlipsToFinalActivityTimer == 0) {\n', '            require(initialActivityTimer == finalActivityTimer);\n', '        }\n', '        \n', '        nextGameSettings = GameSettings({\n', '            rows: rows,\n', '            cols: cols,\n', '            initialActivityTimer: initialActivityTimer,\n', '            finalActivityTimer: finalActivityTimer,\n', '            numberOfFlipsToFinalActivityTimer: numberOfFlipsToFinalActivityTimer,\n', '            timeoutBonusTime: timeoutBonusTime,\n', '            unclaimedTilePrice: unclaimedTilePrice,\n', '            buyoutReferralBonusPercentage: buyoutReferralBonusPercentage,\n', '            firstBuyoutPrizePoolPercentage: firstBuyoutPrizePoolPercentage,\n', '            buyoutPrizePoolPercentage: buyoutPrizePoolPercentage,\n', '            buyoutDividendPercentage: buyoutDividendPercentage,\n', '            buyoutFeePercentage: buyoutFeePercentage,\n', '            buyoutPriceIncreasePercentage: buyoutPriceIncreasePercentage\n', '        });\n', '        \n', '        NextGame(\n', '            rows,\n', '            cols,\n', '            initialActivityTimer,\n', '            finalActivityTimer,\n', '            numberOfFlipsToFinalActivityTimer,\n', '            timeoutBonusTime,\n', '            unclaimedTilePrice,\n', '            buyoutReferralBonusPercentage, \n', '            firstBuyoutPrizePoolPercentage,\n', '            buyoutPrizePoolPercentage,\n', '            buyoutDividendPercentage,\n', '            buyoutFeePercentage,\n', '            buyoutPriceIncreasePercentage\n', '        );\n', '    }\n', '    \n', '    /// @notice Set the active times.\n', '    function setActiveTimes(uint256[] _from, uint256[] _to) external onlyCFO {\n', '        require(_from.length == _to.length);\n', '    \n', '        activeTimesFrom = _from;\n', '        activeTimesTo = _to;\n', '        \n', '        // Emit event.\n', '        ActiveTimes(_from, _to);\n', '    }\n', '    \n', '    /// @notice Allow the game to start once outside of active times.\n', '    function setAllowStart(bool _allowStart) external onlyCFO {\n', '        allowStart = _allowStart;\n', '        \n', '        // Emit event.\n', '        AllowStart(_allowStart);\n', '    }\n', '    \n', '    /// @notice A boolean indicating whether a new game can start,\n', '    /// based on the active times.\n', '    function canStart() public view returns (bool) {\n', '        // Get the time of the week in seconds.\n', '        // There are 7 * 24 * 60 * 60 = 604800 seconds in a week,\n', '        // and unix timestamps started counting from a Thursday,\n', '        // so subtract 4 * 24 * 60 * 60 = 345600 seconds, as\n', '        // (0 - 345600) % 604800 = 259200, i.e. the number of\n', '        // seconds in a week until Thursday 00:00:00.\n', '        uint256 timeOfWeek = (block.timestamp - 345600) % 604800;\n', '        \n', '        uint256 windows = activeTimesFrom.length;\n', '        \n', '        if (windows == 0) {\n', '            // No start times configured, any time is allowed.\n', '            return true;\n', '        }\n', '        \n', '        for (uint256 i = 0; i < windows; i++) {\n', '            if (timeOfWeek >= activeTimesFrom[i] && timeOfWeek <= activeTimesTo[i]) {\n', '                return true;\n', '            }\n', '        }\n', '        \n', '        return false;\n', '    }\n', '    \n', "    /// @notice Calculate the current game's base timeout.\n", '    function calculateBaseTimeout() public view returns(uint256) {\n', '        uint256 _numberOfTileFlips = gameStates[gameIndex].numberOfTileFlips;\n', '    \n', '        if (_numberOfTileFlips >= gameSettings.numberOfFlipsToFinalActivityTimer || gameSettings.numberOfFlipsToFinalActivityTimer == 0) {\n', '            return gameSettings.finalActivityTimer;\n', '        } else {\n', '            if (gameSettings.finalActivityTimer <= gameSettings.initialActivityTimer) {\n', '                // The activity timer decreases over time.\n', '            \n', '                // This cannot underflow, as initialActivityTimer is guaranteed to be\n', '                // greater than or equal to finalActivityTimer.\n', '                uint256 difference = gameSettings.initialActivityTimer - gameSettings.finalActivityTimer;\n', '                \n', '                // Calculate the decrease in activity timer, based on the number of wagers performed.\n', '                uint256 decrease = difference.mul(_numberOfTileFlips).div(gameSettings.numberOfFlipsToFinalActivityTimer);\n', '                \n', '                // This subtraction cannot underflow, as decrease is guaranteed to be less than or equal to initialActivityTimer.            \n', '                return (gameSettings.initialActivityTimer - decrease);\n', '            } else {\n', '                // The activity timer increases over time.\n', '            \n', '                // This cannot underflow, as initialActivityTimer is guaranteed to be\n', '                // smaller than finalActivityTimer.\n', '                difference = gameSettings.finalActivityTimer - gameSettings.initialActivityTimer;\n', '                \n', '                // Calculate the increase in activity timer, based on the number of wagers performed.\n', '                uint256 increase = difference.mul(_numberOfTileFlips).div(gameSettings.numberOfFlipsToFinalActivityTimer);\n', '                \n', '                // This addition cannot overflow, as initialActivityTimer + increase is guaranteed to be less than or equal to finalActivityTimer.\n', '                return (gameSettings.initialActivityTimer + increase);\n', '            }\n', '        }\n', '    }\n', '    \n', '    /// @notice Get the new timeout timestamp for a tile.\n', '    /// @param identifier The identifier of the tile being flipped.\n', '    /// @param player The address of the player flipping the tile.\n', '    function tileTimeoutTimestamp(uint256 identifier, address player) public view returns (uint256) {\n', '        uint256 bonusTime = gameSettings.timeoutBonusTime.mul(gameStates[gameIndex].addressToNumberOfTiles[player]);\n', '        uint256 timeoutTimestamp = block.timestamp.add(calculateBaseTimeout()).add(bonusTime);\n', '        \n', '        uint256 currentTimeoutTimestamp = gameStates[gameIndex].identifierToTimeoutTimestamp[identifier];\n', '        if (currentTimeoutTimestamp == 0) {\n', '            // Tile has never been flipped before.\n', '            currentTimeoutTimestamp = gameStates[gameIndex].gameStartTimestamp.add(gameSettings.initialActivityTimer);\n', '        }\n', '        \n', '        if (timeoutTimestamp >= currentTimeoutTimestamp) {\n', '            return timeoutTimestamp;\n', '        } else {\n', '            return currentTimeoutTimestamp;\n', '        }\n', '    }\n', '    \n', '    /// @dev Set the current game settings.\n', '    function _setGameSettings() internal {\n', '        if (gameSettings.rows != nextGameSettings.rows) {\n', '            gameSettings.rows = nextGameSettings.rows;\n', '        }\n', '        \n', '        if (gameSettings.cols != nextGameSettings.cols) {\n', '            gameSettings.cols = nextGameSettings.cols;\n', '        }\n', '        \n', '        if (gameSettings.initialActivityTimer != nextGameSettings.initialActivityTimer) {\n', '            gameSettings.initialActivityTimer = nextGameSettings.initialActivityTimer;\n', '        }\n', '        \n', '        if (gameSettings.finalActivityTimer != nextGameSettings.finalActivityTimer) {\n', '            gameSettings.finalActivityTimer = nextGameSettings.finalActivityTimer;\n', '        }\n', '        \n', '        if (gameSettings.numberOfFlipsToFinalActivityTimer != nextGameSettings.numberOfFlipsToFinalActivityTimer) {\n', '            gameSettings.numberOfFlipsToFinalActivityTimer = nextGameSettings.numberOfFlipsToFinalActivityTimer;\n', '        }\n', '        \n', '        if (gameSettings.timeoutBonusTime != nextGameSettings.timeoutBonusTime) {\n', '            gameSettings.timeoutBonusTime = nextGameSettings.timeoutBonusTime;\n', '        }\n', '        \n', '        if (gameSettings.unclaimedTilePrice != nextGameSettings.unclaimedTilePrice) {\n', '            gameSettings.unclaimedTilePrice = nextGameSettings.unclaimedTilePrice;\n', '        }\n', '        \n', '        if (gameSettings.buyoutReferralBonusPercentage != nextGameSettings.buyoutReferralBonusPercentage) {\n', '            gameSettings.buyoutReferralBonusPercentage = nextGameSettings.buyoutReferralBonusPercentage;\n', '        }\n', '        \n', '        if (gameSettings.firstBuyoutPrizePoolPercentage != nextGameSettings.firstBuyoutPrizePoolPercentage) {\n', '            gameSettings.firstBuyoutPrizePoolPercentage = nextGameSettings.firstBuyoutPrizePoolPercentage;\n', '        }\n', '        \n', '        if (gameSettings.buyoutPrizePoolPercentage != nextGameSettings.buyoutPrizePoolPercentage) {\n', '            gameSettings.buyoutPrizePoolPercentage = nextGameSettings.buyoutPrizePoolPercentage;\n', '        }\n', '        \n', '        if (gameSettings.buyoutDividendPercentage != nextGameSettings.buyoutDividendPercentage) {\n', '            gameSettings.buyoutDividendPercentage = nextGameSettings.buyoutDividendPercentage;\n', '        }\n', '        \n', '        if (gameSettings.buyoutFeePercentage != nextGameSettings.buyoutFeePercentage) {\n', '            gameSettings.buyoutFeePercentage = nextGameSettings.buyoutFeePercentage;\n', '        }\n', '        \n', '        if (gameSettings.buyoutPriceIncreasePercentage != nextGameSettings.buyoutPriceIncreasePercentage) {\n', '            gameSettings.buyoutPriceIncreasePercentage = nextGameSettings.buyoutPriceIncreasePercentage;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/// @dev Holds ownership functionality such as transferring.\n', 'contract BurnupGameOwnership is BurnupGameBase {\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 indexed deedId);\n', '    \n', '    /// @notice Name of the collection of deeds (non-fungible token), as defined in ERC721Metadata.\n', '    function name() public pure returns (string _deedName) {\n', '        _deedName = "Burnup Tiles";\n', '    }\n', '    \n', '    /// @notice Symbol of the collection of deeds (non-fungible token), as defined in ERC721Metadata.\n', '    function symbol() public pure returns (string _deedSymbol) {\n', '        _deedSymbol = "BURN";\n', '    }\n', '    \n', '    /// @dev Checks if a given address owns a particular tile.\n', '    /// @param _owner The address of the owner to check for.\n', '    /// @param _identifier The tile identifier to check for.\n', '    function _owns(address _owner, uint256 _identifier) internal view returns (bool) {\n', '        return gameStates[gameIndex].identifierToOwner[_identifier] == _owner;\n', '    }\n', '    \n', '    /// @dev Assigns ownership of a specific deed to an address.\n', '    /// @param _from The address to transfer the deed from.\n', '    /// @param _to The address to transfer the deed to.\n', '    /// @param _identifier The identifier of the deed to transfer.\n', '    function _transfer(address _from, address _to, uint256 _identifier) internal {\n', '        // Transfer ownership.\n', '        gameStates[gameIndex].identifierToOwner[_identifier] = _to;\n', '        \n', '        if (_from != 0x0) {\n', '            gameStates[gameIndex].addressToNumberOfTiles[_from] = gameStates[gameIndex].addressToNumberOfTiles[_from].sub(1);\n', '        }\n', '        \n', '        gameStates[gameIndex].addressToNumberOfTiles[_to] = gameStates[gameIndex].addressToNumberOfTiles[_to].add(1);\n', '        \n', '        // Emit the transfer event.\n', '        Transfer(_from, _to, _identifier);\n', '    }\n', '    \n', '    /// @notice Returns the address currently assigned ownership of a given deed.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function ownerOf(uint256 _identifier) external view returns (address _owner) {\n', '        _owner = gameStates[gameIndex].identifierToOwner[_identifier];\n', '\n', '        require(_owner != address(0));\n', '    }\n', '    \n', '    /// @notice Transfer a deed to another address. If transferring to a smart\n', '    /// contract be VERY CAREFUL to ensure that it is aware of ERC-721, or your\n', '    /// deed may be lost forever.\n', '    /// @param _to The address of the recipient, can be a user or contract.\n', '    /// @param _identifier The identifier of the deed to transfer.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transfer(address _to, uint256 _identifier) external whenNotPaused {\n', '        // One can only transfer their own deeds.\n', '        require(_owns(msg.sender, _identifier));\n', '        \n', '        // Transfer ownership\n', '        _transfer(msg.sender, _to, _identifier);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title PullPayment\n', ' * @dev Base contract supporting async send for pull payments. Inherit from this\n', ' * contract and use asyncSend instead of send.\n', ' */\n', 'contract PullPayment {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) public payments;\n', '  uint256 public totalPayments;\n', '\n', '  /**\n', '  * @dev withdraw accumulated balance, called by payee.\n', '  */\n', '  function withdrawPayments() public {\n', '    address payee = msg.sender;\n', '    uint256 payment = payments[payee];\n', '\n', '    require(payment != 0);\n', '    require(this.balance >= payment);\n', '\n', '    totalPayments = totalPayments.sub(payment);\n', '    payments[payee] = 0;\n', '\n', '    assert(payee.send(payment));\n', '  }\n', '\n', '  /**\n', '  * @dev Called by the payer to store the sent amount as credit to be pulled.\n', '  * @param dest The destination address of the funds.\n', '  * @param amount The amount to transfer.\n', '  */\n', '  function asyncSend(address dest, uint256 amount) internal {\n', '    payments[dest] = payments[dest].add(amount);\n', '    totalPayments = totalPayments.add(amount);\n', '  }\n', '}\n', '\n', '\n', '/// @dev Implements access control to the BurnUp wallet.\n', 'contract BurnupHoldingAccessControl is Claimable, Pausable, CanReclaimToken {\n', '    address public cfoAddress;\n', '    \n', '    /// Boolean indicating whether an address is a BurnUp Game contract.\n', '    mapping (address => bool) burnupGame;\n', '\n', '    function BurnupHoldingAccessControl() public {\n', '        // The creator of the contract is the initial CFO.\n', '        cfoAddress = msg.sender;\n', '    }\n', '    \n', '    /// @dev Access modifier for CFO-only functionality.\n', '    modifier onlyCFO() {\n', '        require(msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '    \n', '    /// @dev Access modifier for functionality that may only be called by a BurnUp game.\n', '    modifier onlyBurnupGame() {\n', '        // The sender must be a recognized BurnUp game address.\n', '        require(burnupGame[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the CFO. Only available to the current contract owner.\n', '    /// @param _newCFO The address of the new CFO.\n', '    function setCFO(address _newCFO) external onlyOwner {\n', '        require(_newCFO != address(0));\n', '\n', '        cfoAddress = _newCFO;\n', '    }\n', '    \n', '    /// @dev Add a Burnup game contract address.\n', '    /// @param addr The address of the Burnup game contract.\n', '    function addBurnupGame(address addr) external onlyOwner {\n', '        burnupGame[addr] = true;\n', '    }\n', '    \n', '    /// @dev Remove a Burnup game contract address.\n', '    /// @param addr The address of the Burnup game contract.\n', '    function removeBurnupGame(address addr) external onlyOwner {\n', '        delete burnupGame[addr];\n', '    }\n', '}\n', '\n', '\n', '/// @dev Implements the BurnUp wallet.\n', 'contract BurnupHoldingReferral is BurnupHoldingAccessControl {\n', '\n', '    event SetReferrer(address indexed referral, address indexed referrer);\n', '\n', '    /// Referrer of player.\n', '    mapping (address => address) addressToReferrerAddress;\n', '    \n', '    /// Get the referrer of a player.\n', '    /// @param player The address of the player to get the referrer of.\n', '    function referrerOf(address player) public view returns (address) {\n', '        return addressToReferrerAddress[player];\n', '    }\n', '    \n', '    /// Set the referrer for a player.\n', '    /// @param playerAddr The address of the player to set the referrer for.\n', '    /// @param referrerAddr The address of the referrer to set.\n', '    function _setReferrer(address playerAddr, address referrerAddr) internal {\n', '        addressToReferrerAddress[playerAddr] = referrerAddr;\n', '        \n', '        // Emit event.\n', '        SetReferrer(playerAddr, referrerAddr);\n', '    }\n', '}\n', '\n', '\n', '/// @dev Implements the BurnUp wallet.\n', 'contract BurnupHoldingCore is BurnupHoldingReferral, PullPayment {\n', '    using SafeMath for uint256;\n', '    \n', '    address public beneficiary1;\n', '    address public beneficiary2;\n', '    \n', '    function BurnupHoldingCore(address _beneficiary1, address _beneficiary2) public {\n', '        // The creator of the contract is the initial CFO.\n', '        cfoAddress = msg.sender;\n', '        \n', '        // Set the two beneficiaries.\n', '        beneficiary1 = _beneficiary1;\n', '        beneficiary2 = _beneficiary2;\n', '    }\n', '    \n', '    /// Pay the two beneficiaries. Sends both beneficiaries\n', '    /// a halve of the payment.\n', '    function payBeneficiaries() external payable {\n', '        uint256 paymentHalve = msg.value.div(2);\n', '        \n', '        // We do not want a single wei to get stuck.\n', '        uint256 otherPaymentHalve = msg.value.sub(paymentHalve);\n', '        \n', '        // Send payment for manual withdrawal.\n', '        asyncSend(beneficiary1, paymentHalve);\n', '        asyncSend(beneficiary2, otherPaymentHalve);\n', '    }\n', '    \n', '    /// Sets a new address for Beneficiary one.\n', '    /// @param addr The new address.\n', '    function setBeneficiary1(address addr) external onlyCFO {\n', '        beneficiary1 = addr;\n', '    }\n', '    \n', '    /// Sets a new address for Beneficiary two.\n', '    /// @param addr The new address.\n', '    function setBeneficiary2(address addr) external onlyCFO {\n', '        beneficiary2 = addr;\n', '    }\n', '    \n', '    /// Set a referrer.\n', '    /// @param playerAddr The address to set the referrer for.\n', '    /// @param referrerAddr The address of the referrer to set.\n', '    function setReferrer(address playerAddr, address referrerAddr) external onlyBurnupGame whenNotPaused returns(bool) {\n', '        if (referrerOf(playerAddr) == address(0x0) && playerAddr != referrerAddr) {\n', '            // Set the referrer, if no referrer has been set yet, and the player\n', '            // and referrer are not the same address.\n', '            _setReferrer(playerAddr, referrerAddr);\n', '            \n', '            // Indicate success.\n', '            return true;\n', '        }\n', '        \n', '        // Indicate failure.\n', '        return false;\n', '    }\n', '}\n', '\n', '\n', '/// @dev Holds functionality for finance related to tiles.\n', 'contract BurnupGameFinance is BurnupGameOwnership, PullPayment {\n', '    /// Address of Burnup wallet\n', '    BurnupHoldingCore burnupHolding;\n', '    \n', '    function BurnupGameFinance(address burnupHoldingAddress) public {\n', '        burnupHolding = BurnupHoldingCore(burnupHoldingAddress);\n', '    }\n', '    \n', '    /// @dev Find the _claimed_ tiles surrounding a tile.\n', '    /// @param _deedId The identifier of the tile to get the surrounding tiles for.\n', '    function _claimedSurroundingTiles(uint256 _deedId) internal view returns (uint256[] memory) {\n', '        var (x, y) = identifierToCoordinate(_deedId);\n', '        \n', '        // Find all claimed surrounding tiles.\n', '        uint256 claimed = 0;\n', '        \n', '        // Create memory buffer capable of holding all tiles.\n', '        uint256[] memory _tiles = new uint256[](8);\n', '        \n', '        // Loop through all neighbors.\n', '        for (int256 dx = -1; dx <= 1; dx++) {\n', '            for (int256 dy = -1; dy <= 1; dy++) {\n', '                if (dx == 0 && dy == 0) {\n', '                    // Skip the center (i.e., the tile itself).\n', '                    continue;\n', '                }\n', '                \n', '                uint256 nx = uint256(int256(x) + dx);\n', '                uint256 ny = uint256(int256(y) + dy);\n', '                \n', '                if (nx >= gameSettings.cols || ny >= gameSettings.rows) {\n', '                    // This coordinate is outside the game bounds.\n', '                    continue;\n', '                }\n', '                \n', '                // Get the coordinates of this neighboring identifier.\n', '                uint256 neighborIdentifier = coordinateToIdentifier(\n', '                    nx,\n', '                    ny\n', '                );\n', '                \n', '                if (gameStates[gameIndex].identifierToOwner[neighborIdentifier] != address(0x0)) {\n', '                    _tiles[claimed] = neighborIdentifier;\n', '                    claimed++;\n', '                }\n', '            }\n', '        }\n', '        \n', '        // Memory arrays cannot be resized, so copy all\n', '        // tiles from the buffer to the tile array.\n', '        uint256[] memory tiles = new uint256[](claimed);\n', '        \n', '        for (uint256 i = 0; i < claimed; i++) {\n', '            tiles[i] = _tiles[i];\n', '        }\n', '        \n', '        return tiles;\n', '    }\n', '    \n', '    /// @dev Calculate the next buyout price given the current total buyout cost.\n', '    /// @param price The current buyout price.\n', '    function nextBuyoutPrice(uint256 price) public view returns (uint256) {\n', '        if (price < 0.02 ether) {\n', '            return price.mul(200).div(100); // * 2.0\n', '        } else {\n', '            return price.mul(gameSettings.buyoutPriceIncreasePercentage).div(100000);\n', '        }\n', '    }\n', '    \n', '    /// @dev Assign the proceeds of the buyout.\n', '    function _assignBuyoutProceeds(\n', '        address currentOwner,\n', '        uint256[] memory claimedSurroundingTiles,\n', '        uint256 fee,\n', '        uint256 currentOwnerWinnings,\n', '        uint256 totalDividendPerBeneficiary,\n', '        uint256 referralBonus,\n', '        uint256 prizePoolFunds\n', '    )\n', '        internal\n', '    {\n', '    \n', '        if (currentOwner != 0x0) {\n', "            // Send the current owner's winnings.\n", '            _sendFunds(currentOwner, currentOwnerWinnings);\n', '        } else {\n', '            // There is no current owner. Split the winnings to the prize pool and fees.\n', '            uint256 prizePoolPart = currentOwnerWinnings.mul(gameSettings.firstBuyoutPrizePoolPercentage).div(100000);\n', '            \n', '            prizePoolFunds = prizePoolFunds.add(prizePoolPart);\n', '            fee = fee.add(currentOwnerWinnings.sub(prizePoolPart));\n', '        }\n', '        \n', '        // Assign dividends to owners of surrounding tiles.\n', '        for (uint256 i = 0; i < claimedSurroundingTiles.length; i++) {\n', '            address beneficiary = gameStates[gameIndex].identifierToOwner[claimedSurroundingTiles[i]];\n', '            _sendFunds(beneficiary, totalDividendPerBeneficiary);\n', '        }\n', '        \n', '        /// Distribute the referral bonuses (if any) for an address.\n', '        address referrer1 = burnupHolding.referrerOf(msg.sender);\n', '        if (referrer1 != 0x0) {\n', '            _sendFunds(referrer1, referralBonus);\n', '        \n', '            address referrer2 = burnupHolding.referrerOf(referrer1);\n', '            if (referrer2 != 0x0) {\n', '                _sendFunds(referrer2, referralBonus);\n', '            } else {\n', '                // There is no second-level referrer.\n', '                fee = fee.add(referralBonus);\n', '            }\n', '        } else {\n', '            // There are no first and second-level referrers.\n', '            fee = fee.add(referralBonus.mul(2));\n', '        }\n', '        \n', '        // Send the fee to the holding contract.\n', '        burnupHolding.payBeneficiaries.value(fee)();\n', '        \n', '        // Increase the prize pool.\n', '        gameStates[gameIndex].prizePool = gameStates[gameIndex].prizePool.add(prizePoolFunds);\n', '    }\n', '    \n', '    /// @notice Get the price for the given tile.\n', '    /// @param _deedId The identifier of the tile to get the price for.\n', '    function currentPrice(uint256 _deedId) public view returns (uint256 price) {\n', '        address currentOwner = gameStates[gameIndex].identifierToOwner[_deedId];\n', '    \n', '        if (currentOwner == 0x0) {\n', '            price = gameSettings.unclaimedTilePrice;\n', '        } else {\n', '            price = gameStates[gameIndex].identifierToBuyoutPrice[_deedId];\n', '        }\n', '    }\n', '    \n', '    /// @dev Calculate and assign the proceeds from the buyout.\n', '    /// @param currentOwner The current owner of the tile that is being bought out.\n', '    /// @param price The price of the tile that is being bought out.\n', '    /// @param claimedSurroundingTiles The surrounding tiles that have been claimed.\n', '    function _calculateAndAssignBuyoutProceeds(address currentOwner, uint256 price, uint256[] memory claimedSurroundingTiles)\n', '        internal\n', '    {\n', '        // Calculate the variable dividends based on the buyout price\n', '        // (only to be paid if there are surrounding tiles).\n', '        uint256 variableDividends = price.mul(gameSettings.buyoutDividendPercentage).div(100000);\n', '        \n', '        // Calculate fees, referral bonus, and prize pool funds.\n', '        uint256 fee            = price.mul(gameSettings.buyoutFeePercentage).div(100000);\n', '        uint256 referralBonus  = price.mul(gameSettings.buyoutReferralBonusPercentage).div(100000);\n', '        uint256 prizePoolFunds = price.mul(gameSettings.buyoutPrizePoolPercentage).div(100000);\n', '        \n', '        // Calculate and assign buyout proceeds.\n', '        uint256 currentOwnerWinnings = price.sub(fee).sub(referralBonus.mul(2)).sub(prizePoolFunds);\n', '        \n', '        uint256 totalDividendPerBeneficiary;\n', '        if (claimedSurroundingTiles.length > 0) {\n', '            // If there are surrounding tiles, variable dividend is to be paid\n', '            // based on the buyout price.\n', '            // Calculate the dividend per surrounding tile.\n', '            totalDividendPerBeneficiary = variableDividends / claimedSurroundingTiles.length;\n', '            \n', '            // currentOwnerWinnings = currentOwnerWinnings.sub(variableDividends);\n', '            currentOwnerWinnings = currentOwnerWinnings.sub(totalDividendPerBeneficiary * claimedSurroundingTiles.length);\n', '        }\n', '        \n', '        _assignBuyoutProceeds(\n', '            currentOwner,\n', '            claimedSurroundingTiles,\n', '            fee,\n', '            currentOwnerWinnings,\n', '            totalDividendPerBeneficiary,\n', '            referralBonus,\n', '            prizePoolFunds\n', '        );\n', '    }\n', '    \n', '    /// @dev Send funds to a beneficiary. If sending fails, assign\n', "    /// funds to the beneficiary's balance for manual withdrawal.\n", "    /// @param beneficiary The beneficiary's address to send funds to\n", '    /// @param amount The amount to send.\n', '    function _sendFunds(address beneficiary, uint256 amount) internal {\n', '        if (!beneficiary.send(amount)) {\n', '            // Failed to send funds. This can happen due to a failure in\n', '            // fallback code of the beneficiary, or because of callstack\n', '            // depth.\n', '            // Send funds asynchronously for manual withdrawal by the\n', '            // beneficiary.\n', '            asyncSend(beneficiary, amount);\n', '        }\n', '    }\n', '}\n', '\n', '/// @dev Holds core game functionality.\n', 'contract BurnupGameCore is BurnupGameFinance {\n', '    \n', '    function BurnupGameCore(address burnupHoldingAddress) public BurnupGameFinance(burnupHoldingAddress) {}\n', '    \n', '    /// @notice Buy the current owner out of the tile.\n', '    /// @param _gameIndex The index of the game to play on.\n', '    /// @param startNewGameIfIdle Start a new game if the current game is idle.\n', '    /// @param x The x-coordinate of the tile to buy.\n', '    /// @param y The y-coordinate of the tile to buy.\n', '    function buyout(uint256 _gameIndex, bool startNewGameIfIdle, uint256 x, uint256 y) public payable {\n', '        // Check to see if the game should end. Process payment.\n', '        _processGameEnd();\n', '        \n', '        if (!gameStates[gameIndex].gameStarted) {\n', '            // If the game is not started, the contract must not be paused.\n', '            require(!paused);\n', '            \n', '            if (allowStart) {\n', "                // We're allowed to start once outside of active times.\n", '                allowStart = false;\n', '            } else {\n', '                // This must be an active time.\n', '                require(canStart());\n', '            }\n', '            \n', '            // If the game is not started, the player must be willing to start\n', '            // a new game.\n', '            require(startNewGameIfIdle);\n', '            \n', '            _setGameSettings();\n', '            \n', '            // Start the game.\n', '            gameStates[gameIndex].gameStarted = true;\n', '            \n', '            // Set game started timestamp.\n', '            gameStates[gameIndex].gameStartTimestamp = block.timestamp;\n', '            \n', '            // Set the initial game board timeout.\n', '            gameStates[gameIndex].penultimateTileTimeout = block.timestamp + gameSettings.initialActivityTimer;\n', '            \n', '            Start(\n', '                gameIndex,\n', '                msg.sender,\n', '                block.timestamp,\n', '                gameStates[gameIndex].prizePool\n', '            );\n', '            \n', '            PenultimateTileTimeout(gameIndex, gameStates[gameIndex].penultimateTileTimeout);\n', '        }\n', '    \n', '        // Check the game index.\n', '        if (startNewGameIfIdle) {\n', '            // The given game index must be the current game index, or the previous\n', '            // game index.\n', '            require(_gameIndex == gameIndex || _gameIndex.add(1) == gameIndex);\n', '        } else {\n', '            // Only play on the game indicated by the player.\n', '            require(_gameIndex == gameIndex);\n', '        }\n', '        \n', '        uint256 identifier = coordinateToIdentifier(x, y);\n', '        \n', '        address currentOwner = gameStates[gameIndex].identifierToOwner[identifier];\n', '        \n', '        // Tile must be unowned, or active.\n', '        if (currentOwner == address(0x0)) {\n', '            // Tile must still be flippable.\n', '            require(gameStates[gameIndex].gameStartTimestamp.add(gameSettings.initialActivityTimer) >= block.timestamp);\n', '        } else {\n', '            // Tile must be active.\n', '            require(gameStates[gameIndex].identifierToTimeoutTimestamp[identifier] >= block.timestamp);\n', '        }\n', '        \n', '        // Enough Ether must be supplied.\n', '        uint256 price = currentPrice(identifier);\n', '        require(msg.value >= price);\n', '        \n', '        // Get existing surrounding tiles.\n', '        uint256[] memory claimedSurroundingTiles = _claimedSurroundingTiles(identifier);\n', '        \n', '        // Assign the buyout proceeds and retrieve the total cost.\n', '        _calculateAndAssignBuyoutProceeds(currentOwner, price, claimedSurroundingTiles);\n', '        \n', '        // Set the timeout timestamp.\n', '        uint256 timeout = tileTimeoutTimestamp(identifier, msg.sender);\n', '        gameStates[gameIndex].identifierToTimeoutTimestamp[identifier] = timeout;\n', '        \n', '        // Keep track of the last and penultimate tiles.\n', '        if (gameStates[gameIndex].lastTile == 0 || timeout >= gameStates[gameIndex].identifierToTimeoutTimestamp[gameStates[gameIndex].lastTile]) {\n', '            if (gameStates[gameIndex].lastTile != identifier) {\n', '                if (gameStates[gameIndex].lastTile != 0) {\n', '                    // Previous last tile to become inactive is now the penultimate tile.\n', '                    gameStates[gameIndex].penultimateTileTimeout = gameStates[gameIndex].identifierToTimeoutTimestamp[gameStates[gameIndex].lastTile];\n', '                    PenultimateTileTimeout(gameIndex, gameStates[gameIndex].penultimateTileTimeout);\n', '                }\n', '            \n', '                gameStates[gameIndex].lastTile = identifier;\n', '                LastTile(gameIndex, identifier, x, y);\n', '            }\n', '        } else if (timeout > gameStates[gameIndex].penultimateTileTimeout) {\n', '            gameStates[gameIndex].penultimateTileTimeout = timeout;\n', '            \n', '            PenultimateTileTimeout(gameIndex, timeout);\n', '        }\n', '        \n', '        // Transfer the tile.\n', '        _transfer(currentOwner, msg.sender, identifier);\n', '        \n', '        // Calculate and set the new tile price.\n', '        gameStates[gameIndex].identifierToBuyoutPrice[identifier] = nextBuyoutPrice(price);\n', '        \n', '        // Increment the number of tile flips.\n', '        gameStates[gameIndex].numberOfTileFlips++;\n', '        \n', '        // Emit event\n', '        Buyout(gameIndex, msg.sender, identifier, x, y, block.timestamp, timeout, gameStates[gameIndex].identifierToBuyoutPrice[identifier], gameStates[gameIndex].prizePool);\n', '        \n', '        // Calculate the excess Ether sent.\n', '        // msg.value is greater than or equal to price,\n', '        // so this cannot underflow.\n', '        uint256 excess = msg.value - price;\n', '        \n', '        if (excess > 0) {\n', '            // Refund any excess Ether (not susceptible to re-entry attack, as\n', '            // the owner is assigned before the transfer takes place).\n', '            msg.sender.transfer(excess);\n', '        }\n', '    }\n', '    \n', "    /// @notice Buy the current owner out of the tile. Set the player's referrer.\n", '    /// @param _gameIndex The index of the game to play on.\n', '    /// @param startNewGameIfIdle Start a new game if the current game is idle.\n', '    /// @param x The x-coordinate of the tile to buy.\n', '    /// @param y The y-coordinate of the tile to buy.\n', '    function buyoutAndSetReferrer(uint256 _gameIndex, bool startNewGameIfIdle, uint256 x, uint256 y, address referrerAddress) external payable {\n', '        // Set the referrer.\n', '        burnupHolding.setReferrer(msg.sender, referrerAddress);\n', '    \n', '        // Play.\n', '        buyout(_gameIndex, startNewGameIfIdle, x, y);\n', '    }\n', '    \n', '    /// @notice Spice up the prize pool.\n', '    /// @param _gameIndex The index of the game to add spice to.\n', '    /// @param message An optional message to be sent along with the spice.\n', '    function spiceUp(uint256 _gameIndex, string message) external payable {\n', '        // Check to see if the game should end. Process payment.\n', '        _processGameEnd();\n', '        \n', '        // Check the game index.\n', '        require(_gameIndex == gameIndex);\n', '    \n', '        // Game must be live or unpaused.\n', '        require(gameStates[gameIndex].gameStarted || !paused);\n', '        \n', '        // Funds must be sent.\n', '        require(msg.value > 0);\n', '        \n', '        // Add funds to the prize pool.\n', '        gameStates[gameIndex].prizePool = gameStates[gameIndex].prizePool.add(msg.value);\n', '        \n', '        // Emit event.\n', '        SpiceUpPrizePool(gameIndex, msg.sender, msg.value, message, gameStates[gameIndex].prizePool);\n', '    }\n', '    \n', '    /// @notice End the game. Pay prize.\n', '    function endGame() external {\n', '        require(_processGameEnd());\n', '    }\n', '    \n', '    /// @dev End the game. Pay prize.\n', '    function _processGameEnd() internal returns(bool) {\n', '        // The game must be started.\n', '        if (!gameStates[gameIndex].gameStarted) {\n', '            return false;\n', '        }\n', '        \n', '        address currentOwner = gameStates[gameIndex].identifierToOwner[gameStates[gameIndex].lastTile];\n', '    \n', '        // The last flipped tile must be owned (i.e. there has been at\n', '        // least one flip).\n', '        if (currentOwner == address(0x0)) {\n', '            return false;\n', '        }\n', '        \n', '        // The penultimate tile must have become inactive.\n', '        if (gameStates[gameIndex].penultimateTileTimeout >= block.timestamp) {\n', '            return false;\n', '        }\n', '        \n', '        // Assign prize pool to the owner of the last-flipped tile.\n', '        if (gameStates[gameIndex].prizePool > 0) {\n', '            _sendFunds(currentOwner, gameStates[gameIndex].prizePool);\n', '        }\n', '        \n', '        // Get coordinates of last flipped tile.\n', '        var (x, y) = identifierToCoordinate(gameStates[gameIndex].lastTile);\n', '        \n', '        // Emit event.\n', '        End(gameIndex, currentOwner, gameStates[gameIndex].lastTile, x, y, gameStates[gameIndex].identifierToTimeoutTimestamp[gameStates[gameIndex].lastTile], gameStates[gameIndex].prizePool);\n', '        \n', "        // Increment the game index. This won't overflow before the heat death of the universe.\n", '        gameIndex++;\n', '        \n', '        // Indicate ending the game was successful.\n', '        return true;\n', '    }\n', '}']
