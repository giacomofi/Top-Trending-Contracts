['pragma solidity 0.4.24;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\taddress public owner;\n', '\n', '\n', '\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '\t/**\n', '\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '\t * account.\n', '\t */\n', '\tfunction Ownable() public {\n', '\t\towner = msg.sender;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Throws if called by any account other than the owner.\n', '\t */\n', '\tmodifier onlyOwner() {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '\t* @param newOwner The address to transfer ownership to.\n', '\t\t*/\n', '\tfunction transferOwnership(address newOwner) public onlyOwner {\n', '\t\trequire(newOwner != address(0));\n', '\t\temit OwnershipTransferred(owner, newOwner);\n', '\t\towner = newOwner;\n', '\t}\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '\t/**\n', '\t * @dev Multiplies two numbers, throws on overflow.\n', '\t */\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\tc = a * b;\n', '\t\tassert(c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Integer division of two numbers, truncating the quotient.\n', '\t */\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n', '\t\t// uint256 c = a / b;\n', '\t\t// assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\t\treturn a / b;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '\t */\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Adds two numbers, throws on overflow.\n', '\t */\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\tc = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '\tfunction totalSupply() public view returns (uint256);\n', '\tfunction balanceOf(address who) public view returns (uint256);\n', '\tfunction transfer(address to, uint256 value) public returns (bool);\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '\tusing SafeMath for uint256;\n', '\n', '\tmapping(address => uint256) balances;\n', '\n', '\tuint256 totalSupply_;\n', '\n', '\t/**\n', '\t* @dev total number of tokens in existence\n', '\t*/\n', '\tfunction totalSupply() public view returns (uint256) {\n', '\t\treturn totalSupply_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev transfer token for a specified address\n', '\t* @param _to The address to transfer to.\n', '\t\t* @param _value The amount to be transferred.\n', '\t\t\t*/\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[msg.sender]);\n', '\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\temit Transfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Gets the balance of the specified address.\n', '\t* @param _owner The address to query the the balance of.\n', '\t\t* @return An uint256 representing the amount owned by the passed address.\n', '\t\t*/\n', '\tfunction balanceOf(address _owner) public view returns (uint256) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '\tfunction allowance(address owner, address spender) public view returns (uint256);\n', '\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\tfunction approve(address spender, uint256 value) public returns (bool);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '\tmapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '\t/**\n', '\t* @dev Transfer tokens from one address to another\n', '\t* @param _from address The address which you want to send tokens from\n', '\t* @param _to address The address which you want to transfer to\n', '\t* @param _value uint256 the amount of tokens to be transferred\n', '\t*/\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[_from]);\n', '\t\trequire(_value <= allowed[_from][msg.sender]);\n', '\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\temit Transfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '\t *\n', '\t * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '\t * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '\t * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _value The amount of tokens to be spent.\n', '\t */\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\temit Approval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '\t * @param _owner address The address which owns the funds.\n', '\t * @param _spender address The address which will spend the funds.\n', '\t * @return A uint256 specifying the amount of tokens still available for the spender.\n', '\t */\n', '\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '\t *\n', '\t * approve should be called when allowed[_spender] == 0. To increment\n', '\t * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t * the first transaction is mined)\n', '\t * From MonolithDAO Token.sol\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _addedValue The amount of tokens to increase the allowance by.\n', '\t */\n', '\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '\t *\n', '\t * approve should be called when allowed[_spender] == 0. To decrement\n', '\t * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t * the first transaction is mined)\n', '\t * From MonolithDAO Token.sol\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '\t */\n', '\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '\t\tuint oldValue = allowed[msg.sender][_spender];\n', '\t\tif (_subtractedValue > oldValue) {\n', '\t\t\tallowed[msg.sender][_spender] = 0;\n', '\t\t} else {\n', '\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\t\t}\n', '\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '}\n', '\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '\tevent Pause();\n', '\tevent Unpause();\n', '\n', '\tbool public paused = false;\n', '\n', '\n', '\t/**\n', '\t* @dev Modifier to make a function callable only when the contract is not paused.\n', '\t*/\n', '\tmodifier whenNotPaused() {\n', '\t\trequire(!paused);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Modifier to make a function callable only when the contract is paused.\n', '\t*/\n', '\tmodifier whenPaused() {\n', '\t\trequire(paused);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev called by the owner to pause, triggers stopped state\n', '\t*/\n', '\tfunction pause() onlyOwner whenNotPaused public {\n', '\t\tpaused = true;\n', '\t\temit Pause();\n', '\t}\n', '\n', '\t/**\n', '\t* @dev called by the owner to unpause, returns to normal state\n', '\t*/\n', '\tfunction unpause() onlyOwner whenPaused public {\n', '\t\tpaused = false;\n', '\t\temit Unpause();\n', '\t}\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', ' * the methods to add functionality. Consider using &#39;super&#39; where appropiate to concatenate\n', ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '\tusing SafeMath for uint256;\n', '\n', '\t// The token being sold\n', '\tERC20 public token;\n', '\n', '\t// Address where funds are collected\n', '\taddress public wallet;\n', '\n', '\t// How many token units a buyer gets per wei\n', '\tuint256 public rate;\n', '\n', '\t// Amount of wei raised\n', '\tuint256 public weiRaised;\n', '\n', '\t/**\n', '\t* Event for token purchase logging\n', '\t* @param purchaser who paid for the tokens\n', '\t\t* @param beneficiary who got the tokens\n', '\t* @param value weis paid for purchase\n', '\t\t* @param amount amount of tokens purchased\n', '\t*/\n', '\tevent TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\t/**\n', '\t* @param _rate Number of token units a buyer gets per wei\n', '\t* @param _wallet Address where collected funds will be forwarded to\n', '\t* @param _token Address of the token being sold\n', '\t*/\n', '\tfunction Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\n', '\t\trequire(_rate > 0);\n', '\t\trequire(_wallet != address(0));\n', '\t\trequire(_token != address(0));\n', '\n', '\t\trate = _rate;\n', '\t\twallet = _wallet;\n', '\t\ttoken = _token;\n', '\t}\n', '\n', '\t// -----------------------------------------\n', '\t// Crowdsale external interface\n', '\t// -----------------------------------------\n', '\n', '\t/**\n', '\t* @dev fallback function ***DO NOT OVERRIDE***\n', '\t*/\n', '\tfunction () external payable {\n', '\t\tbuyTokens(msg.sender);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev low level token purchase ***DO NOT OVERRIDE***\n', '\t* @param _beneficiary Address performing the token purchase\n', '\t*/\n', '\tfunction buyTokens(address _beneficiary) public payable {\n', '\n', '\t\tuint256 weiAmount = msg.value;\n', '\t\t_preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '\t\t// calculate token amount to be created\n', '\t\tuint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '\t\t// update state\n', '\t\tweiRaised = weiRaised.add(weiAmount);\n', '\n', '\t\t_processPurchase(_beneficiary, tokens);\n', '\t\temit TokenPurchase(\n', '\t\t\tmsg.sender,\n', '\t\t\t_beneficiary,\n', '\t\t\tweiAmount,\n', '\t\t\ttokens\n', '\t\t);\n', '\n', '\t\t_updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '\t\t_forwardFunds();\n', '\t\t_postValidatePurchase(_beneficiary, weiAmount);\n', '\t}\n', '\n', '\t// -----------------------------------------\n', '\t// Internal interface (extensible)\n', '\t// -----------------------------------------\n', '\n', '\t/**\n', '\t* @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '\t* @param _beneficiary Address performing the token purchase\n', '\t* @param _weiAmount Value in wei involved in the purchase\n', '\t*/\n', '\tfunction _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '\t\trequire(_beneficiary != address(0));\n', '\t\trequire(_weiAmount != 0);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '\t* @param _beneficiary Address performing the token purchase\n', '\t* @param _weiAmount Value in wei involved in the purchase\n', '\t*/\n', '\tfunction _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '\t\t// optional override\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '\t* @param _beneficiary Address performing the token purchase\n', '\t* @param _tokenAmount Number of tokens to be emitted\n', '\t*/\n', '\tfunction _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '\t\ttoken.transfer(_beneficiary, _tokenAmount);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '\t* @param _beneficiary Address receiving the tokens\n', '\t* @param _tokenAmount Number of tokens to be purchased\n', '\t*/\n', '\tfunction _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '\t\t_deliverTokens(_beneficiary, _tokenAmount);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '\t* @param _beneficiary Address receiving the tokens\n', '\t* @param _weiAmount Value in wei involved in the purchase\n', '\t*/\n', '\tfunction _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '\t\t// optional override\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Override to extend the way in which ether is converted to tokens.\n', '\t* @param _weiAmount Value in wei to be converted into tokens\n', '\t* @return Number of tokens that can be purchased with the specified _weiAmount\n', '\t*/\n', '\tfunction _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '\t\treturn _weiAmount.mul(66666667).div(5000);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Determines how ETH is stored/forwarded on purchases.\n', '\t*/\n', '\tfunction _forwardFunds() internal {\n', '\t\twallet.transfer(msg.value);\n', '\t}\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Crowdsale with a limit for total contributions.\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '\tusing SafeMath for uint256;\n', '\n', '\tuint256 public cap;\n', '\n', '\t/**\n', '\t* @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n', '\t* @param _cap Max amount of wei to be contributed\n', '\t*/\n', '\tfunction CappedCrowdsale(uint256 _cap) public {\n', '\t\trequire(_cap > 0);\n', '\t\tcap = _cap;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Checks whether the cap has been reached. \n', '\t* @return Whether the cap was reached\n', '\t*/\n', '\tfunction capReached() public view returns (bool) {\n', '\t\treturn weiRaised >= cap;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Extend parent behavior requiring purchase to respect the funding cap.\n', '\t* @param _beneficiary Token purchaser\n', '\t* @param _weiAmount Amount of wei contributed\n', '\t*/\n', '\tfunction _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '\t\tsuper._preValidatePurchase(_beneficiary, _weiAmount);\n', '\t\trequire(weiRaised.add(_weiAmount) <= cap);\n', '\t}\n', '\n', '}\n', '\n', 'contract AmountLimitCrowdsale is Crowdsale, Ownable {\n', '\tusing SafeMath for uint256;\n', '\n', '\tuint256 public min;\n', '\tuint256 public max;\n', '\n', '\tmapping(address => uint256) public contributions;\n', '\n', '\tfunction AmountLimitCrowdsale(uint256 _min, uint256 _max) public {\n', '\t\trequire(_min > 0);\n', '\t\trequire(_max > _min);\n', '\t\t// each person should contribute between min-max amount of wei\n', '\t\tmin = _min;\n', '\t\tmax = _max;\n', '\t}\n', '\n', '\tfunction getUserContribution(address _beneficiary) public view returns (uint256) {\n', '\t\treturn contributions[_beneficiary];\n', '\t}\n', '\n', '\tfunction _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '\t\tsuper._preValidatePurchase(_beneficiary, _weiAmount);\n', '\t\trequire(contributions[_beneficiary].add(_weiAmount) <= max);\n', '\t\trequire(contributions[_beneficiary].add(_weiAmount) >= min);\n', '\t}\n', '\n', '\tfunction _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '\t\tsuper._updatePurchasingState(_beneficiary, _weiAmount);\n', '\t\t// update total contribution\n', '\t\tcontributions[_beneficiary] = contributions[_beneficiary].add(_weiAmount);\n', '\t}\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '\tusing SafeMath for uint256;\n', '\n', '\tuint256 public openingTime;\n', '\tuint256 public closingTime;\n', '\n', '\t/**\n', '\t* @dev Reverts if not in crowdsale time range.\n', '\t*/\n', '\tmodifier onlyWhileOpen {\n', '\t\t// solium-disable-next-line security/no-block-members\n', '\t\trequire(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Constructor, takes crowdsale opening and closing times.\n', '\t* @param _openingTime Crowdsale opening time\n', '\t* @param _closingTime Crowdsale closing time\n', '\t*/\n', '\tfunction TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\n', '\t\t// solium-disable-next-line security/no-block-members\n', '\t\trequire(_openingTime >= block.timestamp);\n', '\t\trequire(_closingTime >= _openingTime);\n', '\n', '\t\topeningTime = _openingTime;\n', '\t\tclosingTime = _closingTime;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '\t* @return Whether crowdsale period has elapsed\n', '\t*/\n', '\tfunction hasClosed() public view returns (bool) {\n', '\t\t// solium-disable-next-line security/no-block-members\n', '\t\treturn block.timestamp > closingTime;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Extend parent behavior requiring to be within contributing period\n', '\t* @param _beneficiary Token purchaser\n', '\t* @param _weiAmount Amount of wei contributed\n', '\t*/\n', '\tfunction _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '\t\tsuper._preValidatePurchase(_beneficiary, _weiAmount);\n', '\t}\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/validation/WhitelistedCrowdsale.sol\n', '\n', '/**\n', ' * @title WhitelistedCrowdsale\n', ' * @dev Crowdsale in which only whitelisted users can contribute.\n', ' */\n', 'contract WhitelistedCrowdsale is Crowdsale, Ownable {\n', '\n', '\tmapping(address => bool) public whitelist;\n', '\n', '\t/**\n', '\t* @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '\t*/\n', '\tmodifier isWhitelisted(address _beneficiary) {\n', '\t\trequire(whitelist[_beneficiary]);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Adds single address to whitelist.\n', '\t* @param _beneficiary Address to be added to the whitelist\n', '\t*/\n', '\tfunction addToWhitelist(address _beneficiary) external onlyOwner {\n', '\t\twhitelist[_beneficiary] = true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '\t* @param _beneficiaries Addresses to be added to the whitelist\n', '\t*/\n', '\tfunction addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '\t\tfor (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '\t\t\twhitelist[_beneficiaries[i]] = true;\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Removes single address from whitelist.\n', '\t* @param _beneficiary Address to be removed to the whitelist\n', '\t*/\n', '\tfunction removeFromWhitelist(address _beneficiary) external onlyOwner {\n', '\t\twhitelist[_beneficiary] = false;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Extend parent behavior requiring beneficiary to be in whitelist.\n', '\t* @param _beneficiary Token beneficiary\n', '\t* @param _weiAmount Amount of wei contributed\n', '\t*/\n', '\tfunction _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\n', '\t\tsuper._preValidatePurchase(_beneficiary, _weiAmount);\n', '\t}\n', '\n', '}\n', '\n', 'contract T2TCrowdsale is WhitelistedCrowdsale, AmountLimitCrowdsale, CappedCrowdsale,\n', 'TimedCrowdsale, Pausable {\n', '\tusing SafeMath for uint256;\n', '\n', '\tuint256 public distributeTime;\n', '\tmapping(address => uint256) public balances;\n', '\n', '\tfunction T2TCrowdsale(uint256 rate, \n', '\t\tuint256 openTime, \n', '\t\tuint256 closeTime, \n', '\t\tuint256 totalCap,\n', '\t\tuint256 userMin,\n', '\t\tuint256 userMax,\n', '\t\tuint256 _distributeTime,\n', '\t\taddress account,\n', '\t\tStandardToken token)\n', '\t\tCrowdsale(rate, account, token)\n', '\t\tTimedCrowdsale(openTime, closeTime)\n', '\t\tCappedCrowdsale(totalCap)\n', '\t\tAmountLimitCrowdsale(userMin, userMax) public {\n', '\t  distributeTime = _distributeTime;\n', '\t}\n', '\n', '\tfunction withdrawTokens(address _beneficiary) public {\n', '\t  require(block.timestamp > distributeTime);\n', '\t  uint256 amount = balances[_beneficiary];\n', '\t  require(amount > 0);\n', '\t  balances[_beneficiary] = 0;\n', '\t  _deliverTokens(_beneficiary, amount);\n', '\t}\n', '\n', '\tfunction distributeTokens(address[] _beneficiaries) external onlyOwner {\n', '\t\tfor (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '\t\t\trequire(block.timestamp > distributeTime);\n', '\t\t\taddress _beneficiary = _beneficiaries[i];\n', '\t\t\tuint256 amount = balances[_beneficiary];\n', '\t\t\tif(amount > 0) {\n', '\t\t\t\tbalances[_beneficiary] = 0;\n', '\t\t\t\t_deliverTokens(_beneficiary, amount);\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '\n', '\tfunction returnTokens(address _beneficiary, uint256 amount) external onlyOwner {\n', '\t\t_deliverTokens(_beneficiary, amount);\n', '\t}\n', '\n', '\tfunction _processPurchase(\n', '\t  address _beneficiary,\n', '\t  uint256 _tokenAmount\n', '\t)\n', '\tinternal {\n', '\t  balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\n', '\t}\n', '\n', '\tfunction buyTokens(address beneficiary) public payable whenNotPaused {\n', '\t  super.buyTokens(beneficiary);\n', '\t}\n', '}']
['pragma solidity 0.4.24;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\taddress public owner;\n', '\n', '\n', '\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '\t/**\n', '\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '\t * account.\n', '\t */\n', '\tfunction Ownable() public {\n', '\t\towner = msg.sender;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Throws if called by any account other than the owner.\n', '\t */\n', '\tmodifier onlyOwner() {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '\t* @param newOwner The address to transfer ownership to.\n', '\t\t*/\n', '\tfunction transferOwnership(address newOwner) public onlyOwner {\n', '\t\trequire(newOwner != address(0));\n', '\t\temit OwnershipTransferred(owner, newOwner);\n', '\t\towner = newOwner;\n', '\t}\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '\t/**\n', '\t * @dev Multiplies two numbers, throws on overflow.\n', '\t */\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\tc = a * b;\n', '\t\tassert(c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Integer division of two numbers, truncating the quotient.\n', '\t */\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n', '\t\t// uint256 c = a / b;\n', "\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\t\treturn a / b;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '\t */\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Adds two numbers, throws on overflow.\n', '\t */\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\tc = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '\tfunction totalSupply() public view returns (uint256);\n', '\tfunction balanceOf(address who) public view returns (uint256);\n', '\tfunction transfer(address to, uint256 value) public returns (bool);\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '\tusing SafeMath for uint256;\n', '\n', '\tmapping(address => uint256) balances;\n', '\n', '\tuint256 totalSupply_;\n', '\n', '\t/**\n', '\t* @dev total number of tokens in existence\n', '\t*/\n', '\tfunction totalSupply() public view returns (uint256) {\n', '\t\treturn totalSupply_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev transfer token for a specified address\n', '\t* @param _to The address to transfer to.\n', '\t\t* @param _value The amount to be transferred.\n', '\t\t\t*/\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[msg.sender]);\n', '\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\temit Transfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Gets the balance of the specified address.\n', '\t* @param _owner The address to query the the balance of.\n', '\t\t* @return An uint256 representing the amount owned by the passed address.\n', '\t\t*/\n', '\tfunction balanceOf(address _owner) public view returns (uint256) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '\tfunction allowance(address owner, address spender) public view returns (uint256);\n', '\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\tfunction approve(address spender, uint256 value) public returns (bool);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '\tmapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '\t/**\n', '\t* @dev Transfer tokens from one address to another\n', '\t* @param _from address The address which you want to send tokens from\n', '\t* @param _to address The address which you want to transfer to\n', '\t* @param _value uint256 the amount of tokens to be transferred\n', '\t*/\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[_from]);\n', '\t\trequire(_value <= allowed[_from][msg.sender]);\n', '\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\temit Transfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '\t *\n', '\t * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '\t * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "\t * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _value The amount of tokens to be spent.\n', '\t */\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\temit Approval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '\t * @param _owner address The address which owns the funds.\n', '\t * @param _spender address The address which will spend the funds.\n', '\t * @return A uint256 specifying the amount of tokens still available for the spender.\n', '\t */\n', '\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '\t *\n', '\t * approve should be called when allowed[_spender] == 0. To increment\n', '\t * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t * the first transaction is mined)\n', '\t * From MonolithDAO Token.sol\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _addedValue The amount of tokens to increase the allowance by.\n', '\t */\n', '\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '\t *\n', '\t * approve should be called when allowed[_spender] == 0. To decrement\n', '\t * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t * the first transaction is mined)\n', '\t * From MonolithDAO Token.sol\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '\t */\n', '\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '\t\tuint oldValue = allowed[msg.sender][_spender];\n', '\t\tif (_subtractedValue > oldValue) {\n', '\t\t\tallowed[msg.sender][_spender] = 0;\n', '\t\t} else {\n', '\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\t\t}\n', '\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '}\n', '\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '\tevent Pause();\n', '\tevent Unpause();\n', '\n', '\tbool public paused = false;\n', '\n', '\n', '\t/**\n', '\t* @dev Modifier to make a function callable only when the contract is not paused.\n', '\t*/\n', '\tmodifier whenNotPaused() {\n', '\t\trequire(!paused);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Modifier to make a function callable only when the contract is paused.\n', '\t*/\n', '\tmodifier whenPaused() {\n', '\t\trequire(paused);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev called by the owner to pause, triggers stopped state\n', '\t*/\n', '\tfunction pause() onlyOwner whenNotPaused public {\n', '\t\tpaused = true;\n', '\t\temit Pause();\n', '\t}\n', '\n', '\t/**\n', '\t* @dev called by the owner to unpause, returns to normal state\n', '\t*/\n', '\tfunction unpause() onlyOwner whenPaused public {\n', '\t\tpaused = false;\n', '\t\temit Unpause();\n', '\t}\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n", ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '\tusing SafeMath for uint256;\n', '\n', '\t// The token being sold\n', '\tERC20 public token;\n', '\n', '\t// Address where funds are collected\n', '\taddress public wallet;\n', '\n', '\t// How many token units a buyer gets per wei\n', '\tuint256 public rate;\n', '\n', '\t// Amount of wei raised\n', '\tuint256 public weiRaised;\n', '\n', '\t/**\n', '\t* Event for token purchase logging\n', '\t* @param purchaser who paid for the tokens\n', '\t\t* @param beneficiary who got the tokens\n', '\t* @param value weis paid for purchase\n', '\t\t* @param amount amount of tokens purchased\n', '\t*/\n', '\tevent TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\t/**\n', '\t* @param _rate Number of token units a buyer gets per wei\n', '\t* @param _wallet Address where collected funds will be forwarded to\n', '\t* @param _token Address of the token being sold\n', '\t*/\n', '\tfunction Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\n', '\t\trequire(_rate > 0);\n', '\t\trequire(_wallet != address(0));\n', '\t\trequire(_token != address(0));\n', '\n', '\t\trate = _rate;\n', '\t\twallet = _wallet;\n', '\t\ttoken = _token;\n', '\t}\n', '\n', '\t// -----------------------------------------\n', '\t// Crowdsale external interface\n', '\t// -----------------------------------------\n', '\n', '\t/**\n', '\t* @dev fallback function ***DO NOT OVERRIDE***\n', '\t*/\n', '\tfunction () external payable {\n', '\t\tbuyTokens(msg.sender);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev low level token purchase ***DO NOT OVERRIDE***\n', '\t* @param _beneficiary Address performing the token purchase\n', '\t*/\n', '\tfunction buyTokens(address _beneficiary) public payable {\n', '\n', '\t\tuint256 weiAmount = msg.value;\n', '\t\t_preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '\t\t// calculate token amount to be created\n', '\t\tuint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '\t\t// update state\n', '\t\tweiRaised = weiRaised.add(weiAmount);\n', '\n', '\t\t_processPurchase(_beneficiary, tokens);\n', '\t\temit TokenPurchase(\n', '\t\t\tmsg.sender,\n', '\t\t\t_beneficiary,\n', '\t\t\tweiAmount,\n', '\t\t\ttokens\n', '\t\t);\n', '\n', '\t\t_updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '\t\t_forwardFunds();\n', '\t\t_postValidatePurchase(_beneficiary, weiAmount);\n', '\t}\n', '\n', '\t// -----------------------------------------\n', '\t// Internal interface (extensible)\n', '\t// -----------------------------------------\n', '\n', '\t/**\n', '\t* @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '\t* @param _beneficiary Address performing the token purchase\n', '\t* @param _weiAmount Value in wei involved in the purchase\n', '\t*/\n', '\tfunction _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '\t\trequire(_beneficiary != address(0));\n', '\t\trequire(_weiAmount != 0);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '\t* @param _beneficiary Address performing the token purchase\n', '\t* @param _weiAmount Value in wei involved in the purchase\n', '\t*/\n', '\tfunction _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '\t\t// optional override\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '\t* @param _beneficiary Address performing the token purchase\n', '\t* @param _tokenAmount Number of tokens to be emitted\n', '\t*/\n', '\tfunction _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '\t\ttoken.transfer(_beneficiary, _tokenAmount);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '\t* @param _beneficiary Address receiving the tokens\n', '\t* @param _tokenAmount Number of tokens to be purchased\n', '\t*/\n', '\tfunction _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '\t\t_deliverTokens(_beneficiary, _tokenAmount);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '\t* @param _beneficiary Address receiving the tokens\n', '\t* @param _weiAmount Value in wei involved in the purchase\n', '\t*/\n', '\tfunction _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '\t\t// optional override\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Override to extend the way in which ether is converted to tokens.\n', '\t* @param _weiAmount Value in wei to be converted into tokens\n', '\t* @return Number of tokens that can be purchased with the specified _weiAmount\n', '\t*/\n', '\tfunction _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '\t\treturn _weiAmount.mul(66666667).div(5000);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Determines how ETH is stored/forwarded on purchases.\n', '\t*/\n', '\tfunction _forwardFunds() internal {\n', '\t\twallet.transfer(msg.value);\n', '\t}\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Crowdsale with a limit for total contributions.\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '\tusing SafeMath for uint256;\n', '\n', '\tuint256 public cap;\n', '\n', '\t/**\n', '\t* @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n', '\t* @param _cap Max amount of wei to be contributed\n', '\t*/\n', '\tfunction CappedCrowdsale(uint256 _cap) public {\n', '\t\trequire(_cap > 0);\n', '\t\tcap = _cap;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Checks whether the cap has been reached. \n', '\t* @return Whether the cap was reached\n', '\t*/\n', '\tfunction capReached() public view returns (bool) {\n', '\t\treturn weiRaised >= cap;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Extend parent behavior requiring purchase to respect the funding cap.\n', '\t* @param _beneficiary Token purchaser\n', '\t* @param _weiAmount Amount of wei contributed\n', '\t*/\n', '\tfunction _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '\t\tsuper._preValidatePurchase(_beneficiary, _weiAmount);\n', '\t\trequire(weiRaised.add(_weiAmount) <= cap);\n', '\t}\n', '\n', '}\n', '\n', 'contract AmountLimitCrowdsale is Crowdsale, Ownable {\n', '\tusing SafeMath for uint256;\n', '\n', '\tuint256 public min;\n', '\tuint256 public max;\n', '\n', '\tmapping(address => uint256) public contributions;\n', '\n', '\tfunction AmountLimitCrowdsale(uint256 _min, uint256 _max) public {\n', '\t\trequire(_min > 0);\n', '\t\trequire(_max > _min);\n', '\t\t// each person should contribute between min-max amount of wei\n', '\t\tmin = _min;\n', '\t\tmax = _max;\n', '\t}\n', '\n', '\tfunction getUserContribution(address _beneficiary) public view returns (uint256) {\n', '\t\treturn contributions[_beneficiary];\n', '\t}\n', '\n', '\tfunction _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '\t\tsuper._preValidatePurchase(_beneficiary, _weiAmount);\n', '\t\trequire(contributions[_beneficiary].add(_weiAmount) <= max);\n', '\t\trequire(contributions[_beneficiary].add(_weiAmount) >= min);\n', '\t}\n', '\n', '\tfunction _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '\t\tsuper._updatePurchasingState(_beneficiary, _weiAmount);\n', '\t\t// update total contribution\n', '\t\tcontributions[_beneficiary] = contributions[_beneficiary].add(_weiAmount);\n', '\t}\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '\tusing SafeMath for uint256;\n', '\n', '\tuint256 public openingTime;\n', '\tuint256 public closingTime;\n', '\n', '\t/**\n', '\t* @dev Reverts if not in crowdsale time range.\n', '\t*/\n', '\tmodifier onlyWhileOpen {\n', '\t\t// solium-disable-next-line security/no-block-members\n', '\t\trequire(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Constructor, takes crowdsale opening and closing times.\n', '\t* @param _openingTime Crowdsale opening time\n', '\t* @param _closingTime Crowdsale closing time\n', '\t*/\n', '\tfunction TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\n', '\t\t// solium-disable-next-line security/no-block-members\n', '\t\trequire(_openingTime >= block.timestamp);\n', '\t\trequire(_closingTime >= _openingTime);\n', '\n', '\t\topeningTime = _openingTime;\n', '\t\tclosingTime = _closingTime;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '\t* @return Whether crowdsale period has elapsed\n', '\t*/\n', '\tfunction hasClosed() public view returns (bool) {\n', '\t\t// solium-disable-next-line security/no-block-members\n', '\t\treturn block.timestamp > closingTime;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Extend parent behavior requiring to be within contributing period\n', '\t* @param _beneficiary Token purchaser\n', '\t* @param _weiAmount Amount of wei contributed\n', '\t*/\n', '\tfunction _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '\t\tsuper._preValidatePurchase(_beneficiary, _weiAmount);\n', '\t}\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/validation/WhitelistedCrowdsale.sol\n', '\n', '/**\n', ' * @title WhitelistedCrowdsale\n', ' * @dev Crowdsale in which only whitelisted users can contribute.\n', ' */\n', 'contract WhitelistedCrowdsale is Crowdsale, Ownable {\n', '\n', '\tmapping(address => bool) public whitelist;\n', '\n', '\t/**\n', '\t* @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '\t*/\n', '\tmodifier isWhitelisted(address _beneficiary) {\n', '\t\trequire(whitelist[_beneficiary]);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Adds single address to whitelist.\n', '\t* @param _beneficiary Address to be added to the whitelist\n', '\t*/\n', '\tfunction addToWhitelist(address _beneficiary) external onlyOwner {\n', '\t\twhitelist[_beneficiary] = true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '\t* @param _beneficiaries Addresses to be added to the whitelist\n', '\t*/\n', '\tfunction addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '\t\tfor (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '\t\t\twhitelist[_beneficiaries[i]] = true;\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Removes single address from whitelist.\n', '\t* @param _beneficiary Address to be removed to the whitelist\n', '\t*/\n', '\tfunction removeFromWhitelist(address _beneficiary) external onlyOwner {\n', '\t\twhitelist[_beneficiary] = false;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Extend parent behavior requiring beneficiary to be in whitelist.\n', '\t* @param _beneficiary Token beneficiary\n', '\t* @param _weiAmount Amount of wei contributed\n', '\t*/\n', '\tfunction _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\n', '\t\tsuper._preValidatePurchase(_beneficiary, _weiAmount);\n', '\t}\n', '\n', '}\n', '\n', 'contract T2TCrowdsale is WhitelistedCrowdsale, AmountLimitCrowdsale, CappedCrowdsale,\n', 'TimedCrowdsale, Pausable {\n', '\tusing SafeMath for uint256;\n', '\n', '\tuint256 public distributeTime;\n', '\tmapping(address => uint256) public balances;\n', '\n', '\tfunction T2TCrowdsale(uint256 rate, \n', '\t\tuint256 openTime, \n', '\t\tuint256 closeTime, \n', '\t\tuint256 totalCap,\n', '\t\tuint256 userMin,\n', '\t\tuint256 userMax,\n', '\t\tuint256 _distributeTime,\n', '\t\taddress account,\n', '\t\tStandardToken token)\n', '\t\tCrowdsale(rate, account, token)\n', '\t\tTimedCrowdsale(openTime, closeTime)\n', '\t\tCappedCrowdsale(totalCap)\n', '\t\tAmountLimitCrowdsale(userMin, userMax) public {\n', '\t  distributeTime = _distributeTime;\n', '\t}\n', '\n', '\tfunction withdrawTokens(address _beneficiary) public {\n', '\t  require(block.timestamp > distributeTime);\n', '\t  uint256 amount = balances[_beneficiary];\n', '\t  require(amount > 0);\n', '\t  balances[_beneficiary] = 0;\n', '\t  _deliverTokens(_beneficiary, amount);\n', '\t}\n', '\n', '\tfunction distributeTokens(address[] _beneficiaries) external onlyOwner {\n', '\t\tfor (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '\t\t\trequire(block.timestamp > distributeTime);\n', '\t\t\taddress _beneficiary = _beneficiaries[i];\n', '\t\t\tuint256 amount = balances[_beneficiary];\n', '\t\t\tif(amount > 0) {\n', '\t\t\t\tbalances[_beneficiary] = 0;\n', '\t\t\t\t_deliverTokens(_beneficiary, amount);\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '\n', '\tfunction returnTokens(address _beneficiary, uint256 amount) external onlyOwner {\n', '\t\t_deliverTokens(_beneficiary, amount);\n', '\t}\n', '\n', '\tfunction _processPurchase(\n', '\t  address _beneficiary,\n', '\t  uint256 _tokenAmount\n', '\t)\n', '\tinternal {\n', '\t  balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\n', '\t}\n', '\n', '\tfunction buyTokens(address beneficiary) public payable whenNotPaused {\n', '\t  super.buyTokens(beneficiary);\n', '\t}\n', '}']
