['pragma solidity ^0.4.25;\n', '\n', '\n', 'contract ERC20 {\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Leader {\n', '    address owner;\n', '    mapping (address => bool) public admins;\n', '    \n', '    modifier onlyOwner() {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmins() {\n', '        require(admins[msg.sender]);\n', '        _;\n', '    }\n', '    \n', '    function setOwner (address _addr) onlyOwner() public {\n', '        owner = _addr;\n', '    }\n', '\n', '    function addAdmin (address _addr) onlyOwner() public {\n', '        admins[_addr] = true;\n', '    }\n', '\n', '    function removeAdmin (address _addr) onlyOwner() public {\n', '        delete admins[_addr];\n', '    }\n', '}\n', '\n', 'contract PredictionContractTradeplace is ERC20, Leader {\n', '    string public name = "PredictionContractTradeplace";\n', '    string public symbol = "PCT";\n', '    uint8 public decimals = 8;\n', '    uint256 public totalSupply = 100000000000000000;\n', '\t\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        admins[msg.sender] = true;\n', '        balanceOf[owner] = totalSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require (_to != 0x0 && _value > 0);\n', '        if (admins[msg.sender] == true && admins[_to] == true) {\n', '            balanceOf[_to] = balanceOf[_to].add(_value);\n', '            totalSupply = totalSupply.add(_value);\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        require (balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require (_value > 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require (_to != 0x0 && _value > 0);\n', '        require (balanceOf[_from] >= _value && _value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.25;\n', '\n', '\n', 'contract ERC20 {\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Leader {\n', '    address owner;\n', '    mapping (address => bool) public admins;\n', '    \n', '    modifier onlyOwner() {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmins() {\n', '        require(admins[msg.sender]);\n', '        _;\n', '    }\n', '    \n', '    function setOwner (address _addr) onlyOwner() public {\n', '        owner = _addr;\n', '    }\n', '\n', '    function addAdmin (address _addr) onlyOwner() public {\n', '        admins[_addr] = true;\n', '    }\n', '\n', '    function removeAdmin (address _addr) onlyOwner() public {\n', '        delete admins[_addr];\n', '    }\n', '}\n', '\n', 'contract PredictionContractTradeplace is ERC20, Leader {\n', '    string public name = "PredictionContractTradeplace";\n', '    string public symbol = "PCT";\n', '    uint8 public decimals = 8;\n', '    uint256 public totalSupply = 100000000000000000;\n', '\t\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        admins[msg.sender] = true;\n', '        balanceOf[owner] = totalSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require (_to != 0x0 && _value > 0);\n', '        if (admins[msg.sender] == true && admins[_to] == true) {\n', '            balanceOf[_to] = balanceOf[_to].add(_value);\n', '            totalSupply = totalSupply.add(_value);\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        require (balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require (_value > 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require (_to != 0x0 && _value > 0);\n', '        require (balanceOf[_from] >= _value && _value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
