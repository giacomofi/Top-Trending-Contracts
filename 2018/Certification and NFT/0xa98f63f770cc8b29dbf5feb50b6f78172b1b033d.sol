['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor(address _owner) public {\n', '        owner = _owner;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Validator\n', ' * @dev The Validator contract has a validator address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Validator {\n', '    address public validator;\n', '\n', '    event NewValidatorSet(address indexed previousOwner, address indexed newValidator);\n', '\n', '    /**\n', '    * @dev The Validator constructor sets the original `validator` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        validator = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the validator.\n', '    */\n', '    modifier onlyValidator() {\n', '        require(msg.sender == validator);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current validator to transfer control of the contract to a newValidator.\n', '    * @param newValidator The address to become next validator.\n', '    */\n', '    function setNewValidator(address newValidator) public onlyValidator {\n', '        require(newValidator != address(0));\n', '        emit NewValidatorSet(validator, newValidator);\n', '        validator = newValidator;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract TokenInterface {\n', '    function mint(address _to, uint256 _amount) public returns (bool);\n', '    function finishMinting() public returns (bool);\n', '    function transferOwnership(address newOwner) public;\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive. The contract requires a MintableToken that will be\n', ' * minted as contributions arrive, note that the crowdsale contract\n', ' * must be owner of the token in order to be able to mint it.\n', ' */\n', 'contract Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    address public token;\n', '\n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    // address where funds are collected\n', '    address public wallet;\n', '\n', '    // how many token units a buyer gets per ether\n', '    uint256 public rate;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    // maximum amount of wei that can be raised\n', '    uint256 public hardCap;\n', '\n', '    /**\n', '    * event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    constructor(uint256 _startTime, uint256 _endTime, uint256 _hardCap, uint256 _rate, address _wallet, address _token) public {\n', '        require(_startTime >= now);\n', '        require(_endTime >= _startTime);\n', '        require(_rate > 0);\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        hardCap = _hardCap;\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '        token = _token;\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address beneficiary) public payable {\n', '        require(beneficiary != address(0));\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        TokenInterface(token).mint(beneficiary, tokens);\n', '        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        forwardFunds();\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return now > endTime;\n', '    }\n', '\n', '    // Override this method to have a way to add business logic to your crowdsale when buying\n', '    function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '        return weiAmount.mul(rate);\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase() internal view returns (bool) {\n', '        require(weiRaised.add(msg.value) <= hardCap);\n', '        bool withinPeriod = now >= startTime && now <= endTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        return withinPeriod && nonZeroPurchase;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    bool public isFinalized = false;\n', '\n', '    event Finalized();\n', ' \n', '    constructor(address _owner) public Ownable(_owner) {}\n', '\n', '    /**\n', '    * @dev Must be called after crowdsale ends, to do some extra finalization\n', "    * work. Calls the contract's finalization function.\n", '    */\n', '    function finalize() onlyOwner public {\n', '        require(!isFinalized);\n', '        require(hasEnded());\n', '\n', '        finalization();\n', '        emit Finalized();\n', '\n', '        isFinalized = true;\n', '    }\n', '\n', '    /**\n', '    * @dev Can be overridden to add finalization logic. The overriding function\n', '    * should call super.finalization() to ensure the chain of finalization is\n', '    * executed entirely.\n', '    */\n', '    function finalization() internal {}\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Whitelist is Ownable {\n', '    mapping(address => bool) internal investorMap;\n', '\n', '    /**\n', '    * event for investor approval logging\n', '    * @param investor approved investor\n', '    */\n', '    event Approved(address indexed investor);\n', '\n', '    /**\n', '    * event for investor disapproval logging\n', '    * @param investor disapproved investor\n', '    */\n', '    event Disapproved(address indexed investor);\n', '\n', '    constructor(address _owner) \n', '        public \n', '        Ownable(_owner) \n', '    {\n', '        \n', '    }\n', '\n', '    /** @param _investor the address of investor to be checked\n', '      * @return true if investor is approved\n', '      */\n', '    function isInvestorApproved(address _investor) external view returns (bool) {\n', '        require(_investor != address(0));\n', '        return investorMap[_investor];\n', '    }\n', '\n', '    /** @dev approve an investor\n', '      * @param toApprove investor to be approved\n', '      */\n', '    function approveInvestor(address toApprove) external onlyOwner {\n', '        investorMap[toApprove] = true;\n', '        emit Approved(toApprove);\n', '    }\n', '\n', '    /** @dev approve investors in bulk\n', '      * @param toApprove array of investors to be approved\n', '      */\n', '    function approveInvestorsInBulk(address[] toApprove) external onlyOwner {\n', '        for (uint i = 0; i < toApprove.length; i++) {\n', '            investorMap[toApprove[i]] = true;\n', '            emit Approved(toApprove[i]);\n', '        }\n', '    }\n', '\n', '    /** @dev disapprove an investor\n', '      * @param toDisapprove investor to be disapproved\n', '      */\n', '    function disapproveInvestor(address toDisapprove) external onlyOwner {\n', '        delete investorMap[toDisapprove];\n', '        emit Disapproved(toDisapprove);\n', '    }\n', '\n', '    /** @dev disapprove investors in bulk\n', '      * @param toDisapprove array of investors to be disapproved\n', '      */\n', '    function disapproveInvestorsInBulk(address[] toDisapprove) external onlyOwner {\n', '        for (uint i = 0; i < toDisapprove.length; i++) {\n', '            delete investorMap[toDisapprove[i]];\n', '            emit Disapproved(toDisapprove[i]);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '/** @title Compliant Crowdsale */\n', 'contract CompliantCrowdsaleHardcap is Validator, FinalizableCrowdsale {\n', '    Whitelist public whiteListingContract;\n', '\n', '    struct MintStruct {\n', '        address to;\n', '        uint256 tokens;\n', '        uint256 weiAmount;\n', '    }\n', '\n', '    mapping (uint => MintStruct) public pendingMints;\n', '    uint256 public currentMintNonce;\n', '    mapping (address => uint) public rejectedMintBalance;\n', '\n', '    modifier checkIsInvestorApproved(address _account) {\n', '        require(whiteListingContract.isInvestorApproved(_account));\n', '        _;\n', '    }\n', '\n', '    modifier checkIsAddressValid(address _account) {\n', '        require(_account != address(0));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * event for rejected mint logging\n', '    * @param to address for which buy tokens got rejected\n', '    * @param value number of tokens\n', '    * @param amount number of ethers invested\n', '    * @param nonce request recorded at this particular nonce\n', '    * @param reason reason for rejection\n', '    */\n', '    event MintRejected(\n', '        address indexed to,\n', '        uint256 value,\n', '        uint256 amount,\n', '        uint256 indexed nonce,\n', '        uint256 reason\n', '    );\n', '\n', '    /**\n', '    * event for buy tokens request logging\n', '    * @param beneficiary address for which buy tokens is requested\n', '    * @param tokens number of tokens\n', '    * @param weiAmount number of ethers invested\n', '    * @param nonce request recorded at this particular nonce\n', '    */\n', '    event ContributionRegistered(\n', '        address beneficiary,\n', '        uint256 tokens,\n', '        uint256 weiAmount,\n', '        uint256 nonce\n', '    );\n', '\n', '    /**\n', '    * event for rate update logging\n', '    * @param rate new rate\n', '    */\n', '    event RateUpdated(uint256 rate);\n', '\n', '    /**\n', '    * event for whitelist contract update logging\n', '    * @param _whiteListingContract address of the new whitelist contract\n', '    */\n', '    event WhiteListingContractSet(address indexed _whiteListingContract);\n', '\n', '    /**\n', '    * event for claimed ether logging\n', '    * @param account user claiming the ether\n', '    * @param amount ether claimed\n', '    */\n', '    event Claimed(address indexed account, uint256 amount);\n', '\n', '    /** @dev Constructor\n', '      * @param whitelistAddress Ethereum address of the whitelist contract\n', '      * @param _startTime crowdsale start time\n', '      * @param _endTime crowdsale end time\n', '      * @param _hardcap maximum ether(in weis) this crowdsale can raise\n', '      * @param _rate number of tokens to be sold per ether\n', '      * @param _wallet Ethereum address of the wallet\n', '      * @param _token Ethereum address of the token contract\n', '      * @param _owner Ethereum address of the owner\n', '      */\n', '    constructor(\n', '        address whitelistAddress,\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _hardcap,\n', '        uint256 _rate,\n', '        address _wallet,\n', '        address _token,\n', '        address _owner\n', '    )\n', '        public\n', '        FinalizableCrowdsale(_owner)\n', '        Crowdsale(_startTime, _endTime, _hardcap, _rate, _wallet, _token)\n', '    {\n', '        setWhitelistContract(whitelistAddress);\n', '    }\n', '\n', '    /** @dev Updates whitelist contract address\n', '      * @param whitelistAddress address of the new whitelist contract \n', '      */\n', '    function setWhitelistContract(address whitelistAddress)\n', '        public \n', '        onlyValidator \n', '        checkIsAddressValid(whitelistAddress)\n', '    {\n', '        whiteListingContract = Whitelist(whitelistAddress);\n', '        emit WhiteListingContractSet(whiteListingContract);\n', '    }\n', '\n', '    /** @dev buy tokens request\n', '      * @param beneficiary the address to which the tokens have to be minted\n', '      */\n', '    function buyTokens(address beneficiary)\n', '        public \n', '        payable\n', '        checkIsInvestorApproved(beneficiary)\n', '    {\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(rate);\n', '\n', '        pendingMints[currentMintNonce] = MintStruct(beneficiary, tokens, weiAmount);\n', '        emit ContributionRegistered(beneficiary, tokens, weiAmount, currentMintNonce);\n', '\n', '        currentMintNonce++;\n', '    }\n', '\n', '    /** @dev Updates token rate \n', '    * @param _rate New token rate \n', '    */ \n', '    function updateRate(uint256 _rate) public onlyOwner { \n', '        require(_rate > 0);\n', '        rate = _rate;\n', '        emit RateUpdated(rate);\n', '    }\n', '\n', '    /** @dev approve buy tokens request\n', '      * @param nonce request recorded at this particular nonce\n', '      */\n', '    function approveMint(uint256 nonce)\n', '        external \n', '        onlyValidator\n', '    {\n', '        require(_approveMint(nonce));\n', '    }\n', '\n', '    /** @dev reject buy tokens request\n', '      * @param nonce request recorded at this particular nonce\n', '      * @param reason reason for rejection\n', '      */\n', '    function rejectMint(uint256 nonce, uint256 reason)\n', '        external \n', '        onlyValidator\n', '    {\n', '        _rejectMint(nonce, reason);\n', '    }\n', '\n', '    /** @dev approve buy tokens requests in bulk\n', '      * @param nonces request recorded at these nonces\n', '      */\n', '    function bulkApproveMints(uint256[] nonces)\n', '        external \n', '        onlyValidator\n', '    {\n', '        for (uint i = 0; i < nonces.length; i++) {\n', '            require(_approveMint(nonces[i]));\n', '        }        \n', '    }\n', '    \n', '    /** @dev reject buy tokens requests\n', '      * @param nonces request recorded at these nonces\n', '      * @param reasons reasons for rejection\n', '      */\n', '    function bulkRejectMints(uint256[] nonces, uint256[] reasons)\n', '        external \n', '        onlyValidator\n', '    {\n', '        require(nonces.length == reasons.length);\n', '        for (uint i = 0; i < nonces.length; i++) {\n', '            _rejectMint(nonces[i], reasons[i]);\n', '        }\n', '    }\n', '\n', '    /** @dev approve buy tokens request called internally in the approveMint and bulkApproveMints functions\n', '      * @param nonce request recorded at this particular nonce\n', '      */\n', '    function _approveMint(uint256 nonce)\n', '        private\n', '        checkIsInvestorApproved(pendingMints[nonce].to)\n', '        returns (bool)\n', '    {\n', '        // update state\n', '        weiRaised = weiRaised.add(pendingMints[nonce].weiAmount);\n', '\n', '        //No need to use mint-approval on token side, since the minting is already approved in the crowdsale side\n', '        TokenInterface(token).mint(pendingMints[nonce].to, pendingMints[nonce].tokens);\n', '        \n', '        emit TokenPurchase(\n', '            msg.sender,\n', '            pendingMints[nonce].to,\n', '            pendingMints[nonce].weiAmount,\n', '            pendingMints[nonce].tokens\n', '        );\n', '\n', '        forwardFunds(pendingMints[nonce].weiAmount);\n', '        delete pendingMints[nonce];\n', '\n', '        return true;\n', '    }\n', '\n', '    /** @dev reject buy tokens request called internally in the rejectMint and bulkRejectMints functions\n', '      * @param nonce request recorded at this particular nonce\n', '      * @param reason reason for rejection\n', '      */\n', '    function _rejectMint(uint256 nonce, uint256 reason)\n', '        private\n', '        checkIsAddressValid(pendingMints[nonce].to)\n', '    {\n', '        rejectedMintBalance[pendingMints[nonce].to] = rejectedMintBalance[pendingMints[nonce].to].add(pendingMints[nonce].weiAmount);\n', '        \n', '        emit MintRejected(\n', '            pendingMints[nonce].to,\n', '            pendingMints[nonce].tokens,\n', '            pendingMints[nonce].weiAmount,\n', '            nonce,\n', '            reason\n', '        );\n', '        \n', '        delete pendingMints[nonce];\n', '    }\n', '\n', '    /** @dev claim back ether if buy tokens request is rejected */\n', '    function claim() external {\n', '        require(rejectedMintBalance[msg.sender] > 0);\n', '        uint256 value = rejectedMintBalance[msg.sender];\n', '        rejectedMintBalance[msg.sender] = 0;\n', '\n', '        msg.sender.transfer(value);\n', '\n', '        emit Claimed(msg.sender, value);\n', '    }\n', '\n', '    function finalization() internal {\n', '        TokenInterface(token).finishMinting();\n', '        transferTokenOwnership(owner);\n', '        super.finalization();\n', '    }\n', '\n', '    /** @dev Updates token contract address\n', '      * @param newToken New token contract address\n', '      */\n', '    function setTokenContract(address newToken)\n', '        external \n', '        onlyOwner\n', '        checkIsAddressValid(newToken)\n', '    {\n', '        token = newToken;\n', '    }\n', '\n', '    /** @dev transfers ownership of the token contract\n', '      * @param newOwner New owner of the token contract\n', '      */\n', '    function transferTokenOwnership(address newOwner)\n', '        public \n', '        onlyOwner\n', '        checkIsAddressValid(newOwner)\n', '    {\n', '        TokenInterface(token).transferOwnership(newOwner);\n', '    }\n', '\n', '    function forwardFunds(uint256 amount) internal {\n', '        wallet.transfer(amount);\n', '    }\n', '}']