['pragma solidity 0.4.23;\n', '\n', 'contract Asset {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function totalSupply() public view returns (uint256 supply);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '}\n', '\n', 'contract Owned {\n', '    bool public isConstructedOwned;\n', '    address public contractOwner;\n', '    address public pendingContractOwner;\n', '\n', '    constructor() public {\n', '        constructOwned();\n', '    }\n', '\n', '    function constructOwned() public returns(bool) {\n', '        if (isConstructedOwned) {\n', '            return false;\n', '        }\n', '        isConstructedOwned = true;\n', '        contractOwner = msg.sender;\n', '        return true;\n', '    }\n', '\n', '    modifier onlyContractOwner() {\n', '        if (contractOwner == msg.sender) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    function changeContractOwnership(address _to) public onlyContractOwner() returns(bool) {\n', '        pendingContractOwner = _to;\n', '        return true;\n', '    }\n', '\n', '    function claimContractOwnership() public returns(bool) {\n', '        if (pendingContractOwner != msg.sender) {\n', '            return false;\n', '        }\n', '        contractOwner = pendingContractOwner;\n', '        delete pendingContractOwner;\n', '        return true;\n', '    }\n', '\n', '    function forceChangeContractOwnership(address _to) public onlyContractOwner() returns(bool) {\n', '        contractOwner = _to;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Graceful {\n', '    event Error(bytes32 message);\n', '\n', '    // Only for functions that return bool success before any changes made.\n', '    function _softRequire(bool _condition, bytes32 _message) internal {\n', '        if (_condition) {\n', '            return;\n', '        }\n', '        emit Error(_message);\n', '        bool result = false;\n', '        assembly {\n', '            return(result, 32)\n', '        }\n', '    }\n', '\n', '    // Generic substitution for require().\n', '    function _hardRequire(bool _condition, bytes32 _message) internal pure {\n', '        if (_condition) {\n', '            return;\n', '        }\n', '        assembly {\n', '            revert(_message, 32)\n', '        }\n', '    }\n', '\n', '    function _not(bool _condition) internal pure returns(bool) {\n', '        return !_condition;\n', '    }\n', '}\n', '\n', 'contract ERC20MigrationTestable is Graceful, Owned {\n', '    Asset public oldToken;\n', '    Asset public newToken;\n', '\n', '    event Migrated(address user, uint value);\n', '\n', '    constructor(Asset _oldToken, Asset _newToken) public {\n', '        require(address(_oldToken) != 0x0);\n', '        require(address(_newToken) != 0x0);\n', '\n', '        oldToken = _oldToken;\n', '        newToken = _newToken;\n', '    }\n', '\n', '    function migrate(uint _value) public returns(bool) {\n', "        _softRequire(oldToken.transferFrom(msg.sender, address(this), _value), 'Old token transfer failed');\n", "        _hardRequire(newToken.transfer(msg.sender, _value), 'New token transfer failed');\n", '        emit Migrated(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function migrateAll() public returns(bool) {\n', '        return migrate(oldToken.balanceOf(msg.sender));\n', '    }\n', '\n', '    function withdrawAllFundsFromContract() public onlyContractOwner() returns(bool) {\n', '        msg.sender.transfer(address(this).balance);\n', '        return true;\n', '    }\n', '\n', '    function withdrawAllTokensFromContract(Asset _contract) public onlyContractOwner() returns(bool) {\n', '        return _contract.transfer(msg.sender, _contract.balanceOf(address(this)));\n', '    }\n', '}']