['pragma solidity ^0.4.21;\n', '\n', '// Project: MOBU.io\n', '// v12, 2018-08-24\n', '// This code is the property of CryptoB2B.io\n', '// Copying in whole or in part is prohibited.\n', '// Authors: Ivan Fedorov and Dmitry Borodin\n', '// Do you want the same TokenSale platform? www.cryptob2b.io\n', '\n', 'contract GuidedByRoles {\n', '    IRightAndRoles public rightAndRoles;\n', '    function GuidedByRoles(IRightAndRoles _rightAndRoles) public {\n', '        rightAndRoles = _rightAndRoles;\n', '    }\n', '}\n', '\n', 'contract IToken{\n', '    function setUnpausedWallet(address _wallet, bool mode) public;\n', '    function mint(address _to, uint256 _amount) public returns (bool);\n', '    function totalSupply() public view returns (uint256);\n', '    function setPause(bool mode) public;\n', '    function setMigrationAgent(address _migrationAgent) public;\n', '    function migrateAll(address[] _holders) public;\n', '    function markTokens(address _beneficiary, uint256 _value) public;\n', '    function freezedTokenOf(address _beneficiary) public view returns (uint256 amount);\n', '    function defrostDate(address _beneficiary) public view returns (uint256 Date);\n', '    function freezeTokens(address _beneficiary, uint256 _amount, uint256 _when) public;\n', '}\n', '\n', 'contract IRightAndRoles {\n', '    address[][] public wallets;\n', '    mapping(address => uint16) public roles;\n', '\n', '    event WalletChanged(address indexed newWallet, address indexed oldWallet, uint8 indexed role);\n', '    event CloneChanged(address indexed wallet, uint8 indexed role, bool indexed mod);\n', '\n', '    function changeWallet(address _wallet, uint8 _role) external;\n', '    function setManagerPowerful(bool _mode) external;\n', '    function onlyRoles(address _sender, uint16 _roleMask) view external returns(bool);\n', '}\n', '\n', 'contract ERC20Provider is GuidedByRoles {\n', '    function transferTokens(ERC20Basic _token, address _to, uint256 _value) public returns (bool){\n', '        require(rightAndRoles.onlyRoles(msg.sender,2));\n', '        return _token.transfer(_to,_value);\n', '    }\n', '}\n', '\n', 'contract Crowdsale is GuidedByRoles, ERC20Provider{\n', '// (A1)\n', '// The main contract for the sale and management of rounds.\n', '// 0000000000000000000000000000000000000000000000000000000000000000\n', '\n', '    uint256 constant USER_UNPAUSE_TOKEN_TIMEOUT =  30 days;\n', '    uint256 constant FORCED_REFUND_TIMEOUT1     = 400 days;\n', '    uint256 constant FORCED_REFUND_TIMEOUT2     = 600 days;\n', '    uint256 constant ROUND_PROLONGATE           =  60 days;\n', '    //uint256 constant KYC_PERIOD                 =  90 days;\n', '\n', '    using SafeMath for uint256;\n', '\n', '    enum TokenSaleType {round1, round2}\n', '    TokenSaleType public TokenSale = TokenSaleType.round1;\n', '\n', '\n', '    ICreator public creator;\n', '    bool isBegin=false;\n', '\n', '    IToken public token;\n', '    IAllocation public allocation;\n', '    IFinancialStrategy public financialStrategy;\n', '\n', '    bool public isFinalized;\n', '    bool public isInitialized;\n', '    bool public isPausedCrowdsale;\n', '    bool public chargeBonuses;\n', '    bool public canFirstMint=true;\n', '\n', '    struct Bonus {\n', '        uint256 value;\n', '        uint256 procent;\n', '        uint256 freezeTime;\n', '    }\n', '\n', '    struct Profit {\n', '        uint256 percent;\n', '        uint256 duration;\n', '    }\n', '\n', '    struct Freezed {\n', '        uint256 value;\n', '        uint256 dateTo;\n', '    }\n', '\n', '    mapping (address => bool) public promo;\n', '\n', '    Bonus[] public bonuses;\n', '    Profit[] public profits;\n', '\n', '\n', '    uint256 public startTime;  \n', '    uint256 public endTime; \n', '    uint256 public renewal;\n', '\n', '    // How many tokens (excluding the bonus) are transferred to the investor in exchange for 1 ETH\n', '    // **THOUSANDS** 10^18 for human, *10**18 for Solidity, 1e18 for MyEtherWallet (MEW).\n', '    // Example: if 1ETH = 40.5 Token ==> use 40500 finney\n', '    uint256 public rate; \n', '\n', '    // ETH/USD rate in US$\n', '    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: ETH/USD=$1000 ==> use 1000*10**18 (Solidity) or 1000 ether or 1000e18 (MEW)\n', '    uint256 public exchange;\n', '\n', '    // If the round does not attain this value before the closing date, the round is recognized as a\n', '    // failure and investors take the money back (the founders will not interfere in any way).\n', '    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: softcap=15ETH ==> use 15*10**18 (Solidity) or 15e18 (MEW)\n', '    uint256 public softCap;\n', '\n', '    // The maximum possible amount of income\n', '    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: hardcap=123.45ETH ==> use 123450*10**15 (Solidity) or 12345e15 (MEW)\n', '    uint256 public hardCap;\n', '\n', '    // If the last payment is slightly higher than the hardcap, then the usual contracts do\n', '    // not accept it, because it goes beyond the hardcap. However it is more reasonable to accept the\n', '    // last payment, very slightly raising the hardcap. The value indicates by how many ETH the\n', '    // last payment can exceed the hardcap to allow it to be paid. Immediately after this payment, the\n', '    // round closes. The funders should write here a small number, not more than 1% of the CAP.\n', '    // Can be equal to zero, to cancel.\n', '    // **QUINTILLIONS** 10^18 / *10**18 / 1e18\n', '    uint256 public overLimit;\n', '\n', '    // The minimum possible payment from an investor in ETH. Payments below this value will be rejected.\n', '    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: minPay=0.1ETH ==> use 100*10**15 (Solidity) or 100e15 (MEW)\n', '    uint256 public minPay;\n', '\n', '    uint256 public maxAllProfit; // max time bonus=20%, max value bonus=10%, maxAll=10%+20%\n', '\n', '    uint256 public ethWeiRaised;\n', '    uint256 public nonEthWeiRaised;\n', '    uint256 public weiRound1;\n', '    uint256 public tokenReserved;\n', '\n', '    uint256 public totalSaledToken;\n', '\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    event Finalized();\n', '    event Initialized();\n', '\n', '    event PaymentedInOtherCurrency(uint256 token, uint256 value);\n', '    event ExchangeChanged(uint256 indexed oldExchange, uint256 indexed newExchange);\n', '\n', '    function Crowdsale(ICreator _creator,IToken _token) GuidedByRoles(_creator.getRightAndRoles()) public\n', '    {\n', '        creator=_creator;\n', '        token = _token;\n', '    }\n', '\n', '    function updateInfo(uint256 _ETHUSD,uint256 _token, uint256 _value) public {\n', '//        if(_ETHUSD > 0){\n', '//            changeExchange(_ETHUSD);\n', '//        }\n', '        if(_token > 0 && _value > 0){\n', '            paymentsInOtherCurrency(_token,_value);\n', '        }\n', '    }\n', '\n', '    // Setting the current rate ETH/USD         \n', '    //    function changeExchange(uint256 _ETHUSD) internal {\n', '    //        - skip -\n', '    //    }\n', '\n', '    function setPromo(address[] _investors, uint8[] _mod) public {\n', '        require(rightAndRoles.onlyRoles(msg.sender,18));\n', '        for(uint256 i = 0; i < _investors.length; i++){\n', '            promo[_investors[i]] = _mod[i] > 0;\n', '        }\n', '    }\n', '\n', '    // Setting of basic parameters, analog of class constructor\n', '    // @ Do I have to use the function      see your scenario\n', '    // @ When it is possible to call        before Round 1/2\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function begin() public\n', '    {\n', '\n', '        require(rightAndRoles.onlyRoles(msg.sender,22));\n', '        if (isBegin) return;\n', '        isBegin=true;\n', '\n', '        // This setting only for Round #1 (pre-ICO), not for both rounds.\n', '        startTime   = 1535799600;   // 1.09.18\n', '        endTime     = 1538391599;   // 1.10.18\n', '        rate        = 2000 ether;   // 1 ETH -> 2000 tokens (ETH/USD $300)\n', '        exchange    = 300 ether;    // ETH/USD\n', '        softCap     = 0 ether;     \n', '        hardCap     = 58333 ether;  // $20 000 000 (ETH/USD $300)\n', '        overLimit   = 20 ether;  \n', '        minPay      = 1000 finney;  // 1 ETH =~ $300 (ETH/USD $300)\n', '        maxAllProfit= 55;           // 55%\n', '\n', '        financialStrategy = creator.createFinancialStrategy();\n', '\n', '        token.setUnpausedWallet(rightAndRoles.wallets(1,0), true);\n', '        token.setUnpausedWallet(rightAndRoles.wallets(3,0), true);\n', '        token.setUnpausedWallet(rightAndRoles.wallets(4,0), true);\n', '        token.setUnpausedWallet(rightAndRoles.wallets(5,0), true);\n', '        token.setUnpausedWallet(rightAndRoles.wallets(6,0), true);\n', '\n', '        bonuses.push(Bonus(33 ether, 10,0));   // value >$10000 is +10% bonus   (ETH/USD $300)\n', '        bonuses.push(Bonus(333 ether, 20,0));  // value >$100000 is +20% bonus\n', '\n', '        profits.push(Profit(25,100 days));\n', '    }\n', '\n', '\n', '\n', '    // Issue of tokens for the zero round, it is usually called: private pre-sale (Round 0)\n', '    // @ Do I have to use the function      may be\n', '    // @ When it is possible to call        before Round 1/2\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function firstMintRound0(uint256 _amount /* QUINTILLIONS! */) public {\n', '        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '        require(canFirstMint);\n', '        begin();\n', '        token.mint(rightAndRoles.wallets(3,0),_amount);\n', '        totalSaledToken = totalSaledToken.add(_amount);\n', '    }\n', '\n', '    function firstMintRound0For(address[] _to, uint256[] _amount, uint8[] _setAsUnpaused) public {\n', '        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '        require(canFirstMint);\n', '        begin();\n', '        require(_to.length == _amount.length && _to.length == _setAsUnpaused.length);\n', '        for(uint256 i = 0; i < _to.length; i++){\n', '            token.mint(_to[i],_amount[i]);\n', '            totalSaledToken = totalSaledToken.add(_amount[i]);\n', '            if(_setAsUnpaused[i]>0){\n', '                token.setUnpausedWallet(_to[i], true);\n', '            }\n', '        }\n', '    }\n', '\n', '    // info\n', '    function totalSupply() external view returns (uint256){\n', '        return token.totalSupply();\n', '    }\n', '\n', '    function isPromo(address _address) public view returns (bool){\n', '       return promo[_address];\n', '    }\n', '\n', '    // Transfers the funds of the investor to the contract of return of funds. Internal.\n', '    function forwardFunds(address _beneficiary) internal {\n', '        financialStrategy.deposit.value(msg.value)(_beneficiary);\n', '    }\n', '\n', '    // Check for the possibility of buying tokens. Inside. Constant.\n', '    function validPurchase() internal view returns (bool) {\n', '\n', '        // The round started and did not end\n', '        bool withinPeriod = (now > startTime && now < endTime.add(renewal));\n', '\n', '        // Rate is greater than or equal to the minimum\n', '        bool nonZeroPurchase = msg.value >= minPay;\n', '\n', '        // hardCap is not reached, and in the event of a transaction, it will not be exceeded by more than OverLimit\n', '        bool withinCap = msg.value <= hardCap.sub(weiRaised()).add(overLimit);\n', '\n', '        // round is initialized and no "Pause of trading" is set\n', '        return withinPeriod && nonZeroPurchase && withinCap && isInitialized && !isFinalized && !isPausedCrowdsale;\n', '    }\n', '\n', '    // Check for the ability to finalize the round. Constant.\n', '    function hasEnded() public view returns (bool) {\n', '        bool isAdmin = rightAndRoles.onlyRoles(msg.sender,6);\n', '\n', '        bool timeReached = now > endTime.add(renewal);\n', '\n', '        bool capReached = weiRaised() >= hardCap;\n', '\n', '        return (timeReached || capReached || (isAdmin && goalReached())) && isInitialized && !isFinalized;\n', '    }\n', '\n', '    // Finalize. Only available to the Manager and the Beneficiary. If the round failed, then\n', '    // anyone can call the finalization to unlock the return of funds to investors\n', '    // You must call a function to finalize each round (after the Round1 & after the Round2)\n', '    // @ Do I have to use the function      yes\n', '    // @ When it is possible to call        after end of Round1 & Round2\n', '    // @ When it is launched automatically  no\n', '    // @ Who can call the function          admins or anybody (if round is failed)\n', '    function finalize() public {\n', '        require(hasEnded());\n', '\n', '        isFinalized = true;\n', '        finalization();\n', '        emit Finalized();\n', '    }\n', '\n', '    // The logic of finalization. Internal\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        -\n', '    // @ When it is launched automatically  after end of round\n', '    // @ Who can call the function          -\n', '    function finalization() internal {\n', '        bytes32[] memory params = new bytes32[](0);\n', '        // If the goal of the achievement\n', '        if (goalReached()) {\n', '\n', '            financialStrategy.setup(1,params);\n', '\n', '            // if there is anything to give\n', '            if (tokenReserved > 0) {\n', '\n', '                token.mint(rightAndRoles.wallets(3,0),tokenReserved);\n', '                totalSaledToken = totalSaledToken.add(tokenReserved);\n', '\n', '                // Reset the counter\n', '                tokenReserved = 0;\n', '            }\n', '\n', '            // If the finalization is Round 1\n', '            if (TokenSale == TokenSaleType.round1) {\n', '\n', '                // Reset settings\n', '                isInitialized = false;\n', '                isFinalized = false;\n', '                if(financialStrategy.freeCash() == 0){\n', '                    rightAndRoles.setManagerPowerful(true);\n', '                }\n', '\n', '                // Switch to the second round (to Round2)\n', '                TokenSale = TokenSaleType.round2;\n', '\n', '                // Reset the collection counter\n', '                weiRound1 = weiRaised();\n', '                ethWeiRaised = 0;\n', '                nonEthWeiRaised = 0;\n', '\n', '\n', '\n', '            }\n', '            else // If the second round is finalized\n', '            {\n', '\n', '                // Permission to collect tokens to those who can pick them up\n', '                chargeBonuses = true;\n', '\n', '                //totalSaledToken = token.totalSupply();\n', '                //partners = true;\n', '\n', '            }\n', '\n', '        }\n', '        else // If they failed round\n', '        {\n', '            financialStrategy.setup(3,params);\n', '        }\n', '    }\n', '\n', '    // The Manager freezes the tokens for the Team.\n', '    // You must call a function to finalize Round 2 (only after the Round2)\n', '    // @ Do I have to use the function      yes\n', '    // @ When it is possible to call        Round2\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function finalize2() public {\n', '        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '        require(chargeBonuses);\n', '        chargeBonuses = false;\n', '\n', '        allocation = creator.createAllocation(token, now + 1 years /* stage N1 */,0/* not need*/);\n', '        token.setUnpausedWallet(allocation, true);\n', '        // Team = %, Founders = %, Fund = %    TOTAL = %\n', '        allocation.addShare(rightAndRoles.wallets(7,0),100,100); // all 100% - first year\n', '\n', '        // 2% - bounty wallet\n', '        token.mint(rightAndRoles.wallets(5,0), totalSaledToken.mul(8).div(80));\n', '\n', '        // 10% - company\n', '        //token.mint(rightAndRoles.wallets(6,0), totalSaledToken.mul(10).div(77));\n', '\n', '        // 13% - team\n', '        token.mint(allocation, totalSaledToken.mul(12).div(80));\n', '    }\n', '\n', '\n', '\n', '    // Initializing the round. Available to the manager. After calling the function,\n', '    // the Manager loses all rights: Manager can not change the settings (setup), change\n', '    // wallets, prevent the beginning of the round, etc. You must call a function after setup\n', '    // for the initial round (before the Round1 and before the Round2)\n', '    // @ Do I have to use the function      yes\n', '    // @ When it is possible to call        before each round\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function initialize() public {\n', '        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '        // If not yet initialized\n', '        require(!isInitialized);\n', '        begin();\n', '\n', '\n', '        // And the specified start time has not yet come\n', '        // If initialization return an error, check the start date!\n', '        require(now <= startTime);\n', '\n', '        initialization();\n', '\n', '        emit Initialized();\n', '\n', '        renewal = 0;\n', '\n', '        isInitialized = true;\n', '\n', '        if(TokenSale == TokenSaleType.round2) canFirstMint = false;\n', '    }\n', '\n', '    function initialization() internal {\n', '        bytes32[] memory params = new bytes32[](0);\n', '        rightAndRoles.setManagerPowerful(false);\n', '        if (financialStrategy.state() != IFinancialStrategy.State.Active){\n', '            financialStrategy.setup(2,params);\n', '        }\n', '    }\n', '\n', '    // \n', '    // @ Do I have to use the function      \n', '    // @ When it is possible to call        \n', '    // @ When it is launched automatically  \n', '    // @ Who can call the function          \n', '    function getPartnerCash(uint8 _user, bool _calc) external {\n', '        if(_calc)\n', '            calcFin();\n', '        financialStrategy.getPartnerCash(_user, msg.sender);\n', '    }\n', '\n', '    function getBeneficiaryCash(bool _calc) public {\n', '        require(rightAndRoles.onlyRoles(msg.sender,22));\n', '        if(_calc)\n', '            calcFin();\n', '        financialStrategy.getBeneficiaryCash();\n', '        if(!isInitialized && financialStrategy.freeCash() == 0)\n', '            rightAndRoles.setManagerPowerful(true);\n', '    }\n', '\n', '    function claimRefund() external{\n', '        financialStrategy.refund(msg.sender);\n', '    }\n', '\n', '    function calcFin() public {\n', '        bytes32[] memory params = new bytes32[](2);\n', '        params[0] = bytes32(weiTotalRaised());\n', '        params[1] = bytes32(msg.sender);\n', '        financialStrategy.setup(4,params);\n', '    }\n', '\n', '    function calcAndGet() public {\n', '        require(rightAndRoles.onlyRoles(msg.sender,22));\n', '        getBeneficiaryCash(true);\n', '        for (uint8 i=0; i<0; i++) { // <-- TODO check financialStrategy.wallets.length\n', '            financialStrategy.getPartnerCash(i, msg.sender);\n', '        }\n', '    }\n', '\n', '    // We check whether we collected the necessary minimum funds. Constant.\n', '    function goalReached() public view returns (bool) {\n', '        return weiRaised() >= softCap;\n', '    }\n', '\n', '\n', '    // Customize. The arguments are described in the constructor above.\n', '    // @ Do I have to use the function      yes\n', '    // @ When it is possible to call        before each rond\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function setup(uint256 _startTime, uint256 _endTime, uint256 _softCap, uint256 _hardCap,\n', '        uint256 _rate, uint256 _exchange,\n', '        uint256 _maxAllProfit, uint256 _overLimit, uint256 _minPay,\n', '        uint256[] _durationTB , uint256[] _percentTB, uint256[] _valueVB, uint256[] _percentVB, uint256[] _freezeTimeVB) public\n', '    {\n', '\n', '        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '        require(!isInitialized);\n', '\n', '        begin();\n', '\n', '        // Date and time are correct\n', '        require(now <= _startTime);\n', '        require(_startTime < _endTime);\n', '\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '\n', '        // The parameters are correct\n', '        require(_softCap <= _hardCap);\n', '\n', '        softCap = _softCap;\n', '        hardCap = _hardCap;\n', '\n', '        require(_rate > 0);\n', '\n', '        rate = _rate;\n', '\n', '        overLimit = _overLimit;\n', '        minPay = _minPay;\n', '        exchange = _exchange;\n', '\n', '        maxAllProfit = _maxAllProfit;\n', '\n', '        require(_valueVB.length == _percentVB.length && _valueVB.length == _freezeTimeVB.length);\n', '        bonuses.length = _valueVB.length;\n', '        for(uint256 i = 0; i < _valueVB.length; i++){\n', '            bonuses[i] = Bonus(_valueVB[i],_percentVB[i],_freezeTimeVB[i]);\n', '        }\n', '\n', '        require(_percentTB.length == _durationTB.length);\n', '        profits.length = _percentTB.length;\n', '        for( i = 0; i < _percentTB.length; i++){\n', '            profits[i] = Profit(_percentTB[i],_durationTB[i]);\n', '        }\n', '\n', '    }\n', '\n', '    // Collected funds for the current round. Constant.\n', '    function weiRaised() public constant returns(uint256){\n', '        return ethWeiRaised.add(nonEthWeiRaised);\n', '    }\n', '\n', '    // Returns the amount of fees for both phases. Constant.\n', '    function weiTotalRaised() public constant returns(uint256){\n', '        return weiRound1.add(weiRaised());\n', '    }\n', '\n', '    // Returns the percentage of the bonus on the current date. Constant.\n', '    function getProfitPercent() public constant returns (uint256){\n', '        return getProfitPercentForData(now);\n', '    }\n', '\n', '    // Returns the percentage of the bonus on the given date. Constant.\n', '    function getProfitPercentForData(uint256 _timeNow) public constant returns (uint256){\n', '        uint256 allDuration;\n', '        for(uint8 i = 0; i < profits.length; i++){\n', '            allDuration = allDuration.add(profits[i].duration);\n', '            if(_timeNow < startTime.add(allDuration)){\n', '                return profits[i].percent;\n', '            }\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function getBonuses(uint256 _value) public constant returns (uint256,uint256,uint256){\n', '        if(bonuses.length == 0 || bonuses[0].value > _value){\n', '            return (0,0,0);\n', '        }\n', '        uint16 i = 1;\n', '        for(i; i < bonuses.length; i++){\n', '            if(bonuses[i].value > _value){\n', '                break;\n', '            }\n', '        }\n', '        return (bonuses[i-1].value,bonuses[i-1].procent,bonuses[i-1].freezeTime);\n', '    }\n', '\n', '\n', '    // Remove the "Pause of exchange". Available to the manager at any time. If the\n', '    // manager refuses to remove the pause, then 30-120 days after the successful\n', '    // completion of the TokenSale, anyone can remove a pause and allow the exchange to continue.\n', '    // The manager does not interfere and will not be able to delay the term.\n', '    // He can only cancel the pause before the appointed time.\n', '    // @ Do I have to use the function      YES YES YES\n', '    // @ When it is possible to call        after end of ICO\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins or anybody\n', '    function tokenUnpause() external {\n', '\n', '        require(rightAndRoles.onlyRoles(msg.sender,2)\n', '        || (now > endTime.add(renewal).add(USER_UNPAUSE_TOKEN_TIMEOUT) && TokenSale == TokenSaleType.round2 && isFinalized && goalReached()));\n', '        token.setPause(false);\n', '    }\n', '\n', '    // Enable the "Pause of exchange". Available to the manager until the TokenSale is completed.\n', '    // The manager cannot turn on the pause, for example, 3 years after the end of the TokenSale.\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        while Round2 not ended\n', '    // @ When it is launched automatically  before any rounds\n', '    // @ Who can call the function          admins\n', '    function tokenPause() public {\n', '        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '        require(!isFinalized);\n', '        token.setPause(true);\n', '    }\n', '\n', '    // Pause of sale. Available to the manager.\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        during active rounds\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function setCrowdsalePause(bool mode) public {\n', '        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '        isPausedCrowdsale = mode;\n', '    }\n', '\n', '    // For example - After 5 years of the project&#39;s existence, all of us suddenly decided collectively\n', '    // (company + investors) that it would be more profitable for everyone to switch to another smart\n', '    // contract responsible for tokens. The company then prepares a new token, investors\n', '    // disassemble, study, discuss, etc. \n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        only after ICO!\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '//    function moveTokens(address _migrationAgent) public {\n', '//        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '//        token.setMigrationAgent(_migrationAgent);\n', '//    }\n', '\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        only after ICO!\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '//    function migrateAll(address[] _holders) public {\n', '//        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '//        token.migrateAll(_holders);\n', '//    }\n', '\n', '\n', '    // For people who ignore the KYC/AML procedure during 30 days after payment (KYC_PERIOD): money back and zeroing tokens.\n', '    // ***CHECK***SCENARIO***\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        any time\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admin\n', '//    function invalidPayments(address[] _beneficiary, uint256[] _value) external {\n', '//        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '//        require(endTime.add(renewal).add(KYC_PERIOD) > now);\n', '//        require(_beneficiary.length == _value.length);\n', '//        for(uint16 i; i<_beneficiary.length; i++) {\n', '//            token.markTokens(_beneficiary[i],_value[i]);\n', '//        }\n', '//    }\n', '\n', '    // Extend the round time, if provided by the script. Extend the round only for\n', '    // a limited number of days - ROUND_PROLONGATE\n', '    // ***CHECK***SCENARIO***\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        during active round\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function prolong(uint256 _duration) external {\n', '        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '        require(now > startTime && now < endTime.add(renewal) && isInitialized && !isFinalized);\n', '        renewal = renewal.add(_duration);\n', '        require(renewal <= ROUND_PROLONGATE);\n', '\n', '    }\n', '    // If a little more than a year has elapsed (Round2 start date + 400 days), a smart contract\n', '    // will allow you to send all the money to the Beneficiary, if any money is present. This is\n', '    // possible if you mistakenly launch the Round2 for 30 years (not 30 days), investors will transfer\n', '    // money there and you will not be able to pick them up within a reasonable time. It is also\n', '    // possible that in our checked script someone will make unforeseen mistakes, spoiling the\n', '    // finalization. Without finalization, money cannot be returned. This is a rescue option to\n', '    // get around this problem, but available only after a year (400 days).\n', '\n', '    // Another reason - the TokenSale was a failure, but not all ETH investors took their money during the year after.\n', '    // Some investors may have lost a wallet key, for example.\n', '\n', '    // The method works equally with the Round1 and Round2. When the Round1 starts, the time for unlocking\n', '    // the distructVault begins. If the TokenSale is then started, then the term starts anew from the first day of the TokenSale.\n', '\n', '    // Next, act independently, in accordance with obligations to investors.\n', '\n', '    // Within 400 days (FORCED_REFUND_TIMEOUT1) of the start of the Round, if it fails only investors can take money. After\n', '    // the deadline this can also include the company as well as investors, depending on who is the first to use the method.\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        -\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          beneficiary & manager\n', '    function distructVault() public {\n', '        bytes32[] memory params = new bytes32[](1);\n', '        params[0] = bytes32(msg.sender);\n', '        if (rightAndRoles.onlyRoles(msg.sender,4) && (now > startTime.add(FORCED_REFUND_TIMEOUT1))) {\n', '            financialStrategy.setup(0,params);\n', '        }\n', '        if (rightAndRoles.onlyRoles(msg.sender,2) && (now > startTime.add(FORCED_REFUND_TIMEOUT2))) {\n', '            financialStrategy.setup(0,params);\n', '        }\n', '    }\n', '\n', '\n', '    // We accept payments other than Ethereum (ETH) and other currencies, for example, Bitcoin (BTC).\n', '    // Perhaps other types of cryptocurrency - see the original terms in the white paper and on the TokenSale website.\n', '\n', '    // We release tokens on Ethereum. During the Round1 and Round2 with a smart contract, you directly transfer\n', '    // the tokens there and immediately, with the same transaction, receive tokens in your wallet.\n', '\n', '    // When paying in any other currency, for example in BTC, we accept your money via one common wallet.\n', '    // Our manager fixes the amount received for the bitcoin wallet and calls the method of the smart\n', '    // contract paymentsInOtherCurrency to inform him how much foreign currency has been received - on a daily basis.\n', '    // The smart contract pins the number of accepted ETH directly and the number of BTC. Smart contract\n', '    // monitors softcap and hardcap, so as not to go beyond this framework.\n', '\n', '    // In theory, it is possible that when approaching hardcap, we will receive a transfer (one or several\n', '    // transfers) to the wallet of BTC, that together with previously received money will exceed the hardcap in total.\n', '    // In this case, we will refund all the amounts above, in order not to exceed the hardcap.\n', '\n', '    // Collection of money in BTC will be carried out via one common wallet. The wallet&#39;s address will be published\n', '    // everywhere (in a white paper, on the TokenSale website, on Telegram, on Bitcointalk, in this code, etc.)\n', '    // Anyone interested can check that the administrator of the smart contract writes down exactly the amount\n', '    // in ETH (in equivalent for BTC) there. In theory, the ability to bypass a smart contract to accept money in\n', '    // BTC and not register them in ETH creates a possibility for manipulation by the company. Thanks to\n', '    // paymentsInOtherCurrency however, this threat is leveled.\n', '\n', '    // Any user can check the amounts in BTC and the variable of the smart contract that accounts for this\n', '    // (paymentsInOtherCurrency method). Any user can easily check the incoming transactions in a smart contract\n', '    // on a daily basis. Any hypothetical tricks on the part of the company can be exposed and panic during the TokenSale,\n', '    // simply pointing out the incompatibility of paymentsInOtherCurrency (ie, the amount of ETH + BTC collection)\n', '    // and the actual transactions in BTC. The company strictly adheres to the described principles of openness.\n', '\n', '    // The company administrator is required to synchronize paymentsInOtherCurrency every working day (but you\n', '    // cannot synchronize if there are no new BTC payments). In the case of unforeseen problems, such as\n', '    // brakes on the Ethereum network, this operation may be difficult. You should only worry if the\n', '    // administrator does not synchronize the amount for more than 96 hours in a row, and the BTC wallet\n', '    // receives significant amounts.\n', '\n', '    // This scenario ensures that for the sum of all fees in all currencies this value does not exceed hardcap.\n', '\n', '    // ** QUINTILLIONS ** 10^18 / 1**18 / 1e18\n', '\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        during active rounds\n', '    // @ When it is launched automatically  every day from cryptob2b token software\n', '    // @ Who can call the function          admins + observer\n', '    function paymentsInOtherCurrency(uint256 _token, uint256 _value) internal {\n', '\n', '        // **For audit**\n', '        // BTC Wallet:             38kYRf1Ent74d77H8F4ZJCyngtRTJFPdhj\n', '        // BCH Wallet:             qpyjy2urvjhwz4emw0hfrlm39gmu3shvngy7aa673l\n', '        // DASH Wallet:            XrouPiHyXwfB2uajja1RALuAvHaDEUNPw7\n', '        // LTC Wallet:             MJxPYAeMbvYBoFsoNnF9WwiUqnLSUR8yVc\n', '        require(rightAndRoles.onlyRoles(msg.sender,18));\n', '        bool withinPeriod = (now >= startTime && now <= endTime.add(renewal));\n', '        bool withinCap = _value.add(ethWeiRaised) <= hardCap.add(overLimit);\n', '        require(withinPeriod && withinCap && isInitialized && !isFinalized);\n', '        emit PaymentedInOtherCurrency(_token,_value);\n', '        nonEthWeiRaised = _value;\n', '        tokenReserved = _token;\n', '\n', '    }\n', '\n', '    function lokedMint(address _beneficiary, uint256 _value, uint256 _freezeTime) internal {\n', '        if(_freezeTime > 0){\n', '\n', '            uint256 totalBloked = token.freezedTokenOf(_beneficiary).add(_value);\n', '            uint256 pastDateUnfreeze = token.defrostDate(_beneficiary);\n', '            uint256 newDateUnfreeze = _freezeTime.add(now);\n', '            newDateUnfreeze = (pastDateUnfreeze > newDateUnfreeze ) ? pastDateUnfreeze : newDateUnfreeze;\n', '\n', '            token.freezeTokens(_beneficiary,totalBloked,newDateUnfreeze);\n', '        }\n', '        token.mint(_beneficiary,_value);\n', '        totalSaledToken = totalSaledToken.add(_value);\n', '    }\n', '\n', '\n', '    // The function for obtaining smart contract funds in ETH. If all the checks are true, the token is\n', '    // transferred to the buyer, taking into account the current bonus.\n', '    function buyTokens(address _beneficiary) public payable {\n', '        require(_beneficiary != 0x0);\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        uint256 ProfitProcent = getProfitPercent();\n', '\n', '        uint256 value;\n', '        uint256 percent;\n', '        uint256 freezeTime;\n', '\n', '        (value,\n', '        percent,\n', '        freezeTime) = getBonuses(weiAmount);\n', '\n', '        Bonus memory curBonus = Bonus(value,percent,freezeTime);\n', '\n', '        uint256 bonus = curBonus.procent;\n', '\n', '\n', '        // --------------------------------------------------------------------------------------------\n', '        // *** Scenario 1 - select max from all bonuses + check maxAllProfit\n', '        //uint256 totalProfit = (ProfitProcent < bonus) ? bonus : ProfitProcent;\n', '        // *** Scenario 2 - sum both bonuses + check maxAllProfit\n', '        uint256 totalProfit = bonus.add(ProfitProcent);\n', '        if(isPromo(_beneficiary)){\n', '            totalProfit = totalProfit.add(10);\n', '        }\n', '        // --------------------------------------------------------------------------------------------\n', '        totalProfit = (totalProfit > maxAllProfit) ? maxAllProfit : totalProfit;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(rate).mul(totalProfit.add(100)).div(100 ether);\n', '\n', '        // update state\n', '        ethWeiRaised = ethWeiRaised.add(weiAmount);\n', '\n', '        lokedMint(_beneficiary, tokens, curBonus.freezeTime);\n', '\n', '        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '        forwardFunds(_beneficiary);//forwardFunds(msg.sender);\n', '    }\n', '\n', '    // buyTokens alias\n', '    function () public payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '    function minus(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (b>=a) return 0;\n', '        return a - b;\n', '    }\n', '}\n', '\n', 'contract IFinancialStrategy{\n', '\n', '    enum State { Active, Refunding, Closed }\n', '    State public state = State.Active;\n', '\n', '    event Deposited(address indexed beneficiary, uint256 weiAmount);\n', '    event Receive(address indexed beneficiary, uint256 weiAmount);\n', '    event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '    event Started();\n', '    event Closed();\n', '    event RefundsEnabled();\n', '    function freeCash() view public returns(uint256);\n', '    function deposit(address _beneficiary) external payable;\n', '    function refund(address _investor) external;\n', '    function setup(uint8 _state, bytes32[] _params) external;\n', '    function getBeneficiaryCash() external;\n', '    function getPartnerCash(uint8 _user, address _msgsender) external;\n', '}\n', '\n', 'contract IAllocation {\n', '    function addShare(address _beneficiary, uint256 _proportion, uint256 _percenForFirstPart) external;\n', '}\n', '\n', 'contract ICreator{\n', '    IRightAndRoles public rightAndRoles;\n', '    function createAllocation(IToken _token, uint256 _unlockPart1, uint256 _unlockPart2) external returns (IAllocation);\n', '    function createFinancialStrategy() external returns(IFinancialStrategy);\n', '    function getRightAndRoles() external returns(IRightAndRoles);\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '// Project: MOBU.io\n', '// v12, 2018-08-24\n', '// This code is the property of CryptoB2B.io\n', '// Copying in whole or in part is prohibited.\n', '// Authors: Ivan Fedorov and Dmitry Borodin\n', '// Do you want the same TokenSale platform? www.cryptob2b.io\n', '\n', 'contract GuidedByRoles {\n', '    IRightAndRoles public rightAndRoles;\n', '    function GuidedByRoles(IRightAndRoles _rightAndRoles) public {\n', '        rightAndRoles = _rightAndRoles;\n', '    }\n', '}\n', '\n', 'contract IToken{\n', '    function setUnpausedWallet(address _wallet, bool mode) public;\n', '    function mint(address _to, uint256 _amount) public returns (bool);\n', '    function totalSupply() public view returns (uint256);\n', '    function setPause(bool mode) public;\n', '    function setMigrationAgent(address _migrationAgent) public;\n', '    function migrateAll(address[] _holders) public;\n', '    function markTokens(address _beneficiary, uint256 _value) public;\n', '    function freezedTokenOf(address _beneficiary) public view returns (uint256 amount);\n', '    function defrostDate(address _beneficiary) public view returns (uint256 Date);\n', '    function freezeTokens(address _beneficiary, uint256 _amount, uint256 _when) public;\n', '}\n', '\n', 'contract IRightAndRoles {\n', '    address[][] public wallets;\n', '    mapping(address => uint16) public roles;\n', '\n', '    event WalletChanged(address indexed newWallet, address indexed oldWallet, uint8 indexed role);\n', '    event CloneChanged(address indexed wallet, uint8 indexed role, bool indexed mod);\n', '\n', '    function changeWallet(address _wallet, uint8 _role) external;\n', '    function setManagerPowerful(bool _mode) external;\n', '    function onlyRoles(address _sender, uint16 _roleMask) view external returns(bool);\n', '}\n', '\n', 'contract ERC20Provider is GuidedByRoles {\n', '    function transferTokens(ERC20Basic _token, address _to, uint256 _value) public returns (bool){\n', '        require(rightAndRoles.onlyRoles(msg.sender,2));\n', '        return _token.transfer(_to,_value);\n', '    }\n', '}\n', '\n', 'contract Crowdsale is GuidedByRoles, ERC20Provider{\n', '// (A1)\n', '// The main contract for the sale and management of rounds.\n', '// 0000000000000000000000000000000000000000000000000000000000000000\n', '\n', '    uint256 constant USER_UNPAUSE_TOKEN_TIMEOUT =  30 days;\n', '    uint256 constant FORCED_REFUND_TIMEOUT1     = 400 days;\n', '    uint256 constant FORCED_REFUND_TIMEOUT2     = 600 days;\n', '    uint256 constant ROUND_PROLONGATE           =  60 days;\n', '    //uint256 constant KYC_PERIOD                 =  90 days;\n', '\n', '    using SafeMath for uint256;\n', '\n', '    enum TokenSaleType {round1, round2}\n', '    TokenSaleType public TokenSale = TokenSaleType.round1;\n', '\n', '\n', '    ICreator public creator;\n', '    bool isBegin=false;\n', '\n', '    IToken public token;\n', '    IAllocation public allocation;\n', '    IFinancialStrategy public financialStrategy;\n', '\n', '    bool public isFinalized;\n', '    bool public isInitialized;\n', '    bool public isPausedCrowdsale;\n', '    bool public chargeBonuses;\n', '    bool public canFirstMint=true;\n', '\n', '    struct Bonus {\n', '        uint256 value;\n', '        uint256 procent;\n', '        uint256 freezeTime;\n', '    }\n', '\n', '    struct Profit {\n', '        uint256 percent;\n', '        uint256 duration;\n', '    }\n', '\n', '    struct Freezed {\n', '        uint256 value;\n', '        uint256 dateTo;\n', '    }\n', '\n', '    mapping (address => bool) public promo;\n', '\n', '    Bonus[] public bonuses;\n', '    Profit[] public profits;\n', '\n', '\n', '    uint256 public startTime;  \n', '    uint256 public endTime; \n', '    uint256 public renewal;\n', '\n', '    // How many tokens (excluding the bonus) are transferred to the investor in exchange for 1 ETH\n', '    // **THOUSANDS** 10^18 for human, *10**18 for Solidity, 1e18 for MyEtherWallet (MEW).\n', '    // Example: if 1ETH = 40.5 Token ==> use 40500 finney\n', '    uint256 public rate; \n', '\n', '    // ETH/USD rate in US$\n', '    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: ETH/USD=$1000 ==> use 1000*10**18 (Solidity) or 1000 ether or 1000e18 (MEW)\n', '    uint256 public exchange;\n', '\n', '    // If the round does not attain this value before the closing date, the round is recognized as a\n', '    // failure and investors take the money back (the founders will not interfere in any way).\n', '    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: softcap=15ETH ==> use 15*10**18 (Solidity) or 15e18 (MEW)\n', '    uint256 public softCap;\n', '\n', '    // The maximum possible amount of income\n', '    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: hardcap=123.45ETH ==> use 123450*10**15 (Solidity) or 12345e15 (MEW)\n', '    uint256 public hardCap;\n', '\n', '    // If the last payment is slightly higher than the hardcap, then the usual contracts do\n', '    // not accept it, because it goes beyond the hardcap. However it is more reasonable to accept the\n', '    // last payment, very slightly raising the hardcap. The value indicates by how many ETH the\n', '    // last payment can exceed the hardcap to allow it to be paid. Immediately after this payment, the\n', '    // round closes. The funders should write here a small number, not more than 1% of the CAP.\n', '    // Can be equal to zero, to cancel.\n', '    // **QUINTILLIONS** 10^18 / *10**18 / 1e18\n', '    uint256 public overLimit;\n', '\n', '    // The minimum possible payment from an investor in ETH. Payments below this value will be rejected.\n', '    // **QUINTILLIONS** 10^18 / *10**18 / 1e18. Example: minPay=0.1ETH ==> use 100*10**15 (Solidity) or 100e15 (MEW)\n', '    uint256 public minPay;\n', '\n', '    uint256 public maxAllProfit; // max time bonus=20%, max value bonus=10%, maxAll=10%+20%\n', '\n', '    uint256 public ethWeiRaised;\n', '    uint256 public nonEthWeiRaised;\n', '    uint256 public weiRound1;\n', '    uint256 public tokenReserved;\n', '\n', '    uint256 public totalSaledToken;\n', '\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    event Finalized();\n', '    event Initialized();\n', '\n', '    event PaymentedInOtherCurrency(uint256 token, uint256 value);\n', '    event ExchangeChanged(uint256 indexed oldExchange, uint256 indexed newExchange);\n', '\n', '    function Crowdsale(ICreator _creator,IToken _token) GuidedByRoles(_creator.getRightAndRoles()) public\n', '    {\n', '        creator=_creator;\n', '        token = _token;\n', '    }\n', '\n', '    function updateInfo(uint256 _ETHUSD,uint256 _token, uint256 _value) public {\n', '//        if(_ETHUSD > 0){\n', '//            changeExchange(_ETHUSD);\n', '//        }\n', '        if(_token > 0 && _value > 0){\n', '            paymentsInOtherCurrency(_token,_value);\n', '        }\n', '    }\n', '\n', '    // Setting the current rate ETH/USD         \n', '    //    function changeExchange(uint256 _ETHUSD) internal {\n', '    //        - skip -\n', '    //    }\n', '\n', '    function setPromo(address[] _investors, uint8[] _mod) public {\n', '        require(rightAndRoles.onlyRoles(msg.sender,18));\n', '        for(uint256 i = 0; i < _investors.length; i++){\n', '            promo[_investors[i]] = _mod[i] > 0;\n', '        }\n', '    }\n', '\n', '    // Setting of basic parameters, analog of class constructor\n', '    // @ Do I have to use the function      see your scenario\n', '    // @ When it is possible to call        before Round 1/2\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function begin() public\n', '    {\n', '\n', '        require(rightAndRoles.onlyRoles(msg.sender,22));\n', '        if (isBegin) return;\n', '        isBegin=true;\n', '\n', '        // This setting only for Round #1 (pre-ICO), not for both rounds.\n', '        startTime   = 1535799600;   // 1.09.18\n', '        endTime     = 1538391599;   // 1.10.18\n', '        rate        = 2000 ether;   // 1 ETH -> 2000 tokens (ETH/USD $300)\n', '        exchange    = 300 ether;    // ETH/USD\n', '        softCap     = 0 ether;     \n', '        hardCap     = 58333 ether;  // $20 000 000 (ETH/USD $300)\n', '        overLimit   = 20 ether;  \n', '        minPay      = 1000 finney;  // 1 ETH =~ $300 (ETH/USD $300)\n', '        maxAllProfit= 55;           // 55%\n', '\n', '        financialStrategy = creator.createFinancialStrategy();\n', '\n', '        token.setUnpausedWallet(rightAndRoles.wallets(1,0), true);\n', '        token.setUnpausedWallet(rightAndRoles.wallets(3,0), true);\n', '        token.setUnpausedWallet(rightAndRoles.wallets(4,0), true);\n', '        token.setUnpausedWallet(rightAndRoles.wallets(5,0), true);\n', '        token.setUnpausedWallet(rightAndRoles.wallets(6,0), true);\n', '\n', '        bonuses.push(Bonus(33 ether, 10,0));   // value >$10000 is +10% bonus   (ETH/USD $300)\n', '        bonuses.push(Bonus(333 ether, 20,0));  // value >$100000 is +20% bonus\n', '\n', '        profits.push(Profit(25,100 days));\n', '    }\n', '\n', '\n', '\n', '    // Issue of tokens for the zero round, it is usually called: private pre-sale (Round 0)\n', '    // @ Do I have to use the function      may be\n', '    // @ When it is possible to call        before Round 1/2\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function firstMintRound0(uint256 _amount /* QUINTILLIONS! */) public {\n', '        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '        require(canFirstMint);\n', '        begin();\n', '        token.mint(rightAndRoles.wallets(3,0),_amount);\n', '        totalSaledToken = totalSaledToken.add(_amount);\n', '    }\n', '\n', '    function firstMintRound0For(address[] _to, uint256[] _amount, uint8[] _setAsUnpaused) public {\n', '        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '        require(canFirstMint);\n', '        begin();\n', '        require(_to.length == _amount.length && _to.length == _setAsUnpaused.length);\n', '        for(uint256 i = 0; i < _to.length; i++){\n', '            token.mint(_to[i],_amount[i]);\n', '            totalSaledToken = totalSaledToken.add(_amount[i]);\n', '            if(_setAsUnpaused[i]>0){\n', '                token.setUnpausedWallet(_to[i], true);\n', '            }\n', '        }\n', '    }\n', '\n', '    // info\n', '    function totalSupply() external view returns (uint256){\n', '        return token.totalSupply();\n', '    }\n', '\n', '    function isPromo(address _address) public view returns (bool){\n', '       return promo[_address];\n', '    }\n', '\n', '    // Transfers the funds of the investor to the contract of return of funds. Internal.\n', '    function forwardFunds(address _beneficiary) internal {\n', '        financialStrategy.deposit.value(msg.value)(_beneficiary);\n', '    }\n', '\n', '    // Check for the possibility of buying tokens. Inside. Constant.\n', '    function validPurchase() internal view returns (bool) {\n', '\n', '        // The round started and did not end\n', '        bool withinPeriod = (now > startTime && now < endTime.add(renewal));\n', '\n', '        // Rate is greater than or equal to the minimum\n', '        bool nonZeroPurchase = msg.value >= minPay;\n', '\n', '        // hardCap is not reached, and in the event of a transaction, it will not be exceeded by more than OverLimit\n', '        bool withinCap = msg.value <= hardCap.sub(weiRaised()).add(overLimit);\n', '\n', '        // round is initialized and no "Pause of trading" is set\n', '        return withinPeriod && nonZeroPurchase && withinCap && isInitialized && !isFinalized && !isPausedCrowdsale;\n', '    }\n', '\n', '    // Check for the ability to finalize the round. Constant.\n', '    function hasEnded() public view returns (bool) {\n', '        bool isAdmin = rightAndRoles.onlyRoles(msg.sender,6);\n', '\n', '        bool timeReached = now > endTime.add(renewal);\n', '\n', '        bool capReached = weiRaised() >= hardCap;\n', '\n', '        return (timeReached || capReached || (isAdmin && goalReached())) && isInitialized && !isFinalized;\n', '    }\n', '\n', '    // Finalize. Only available to the Manager and the Beneficiary. If the round failed, then\n', '    // anyone can call the finalization to unlock the return of funds to investors\n', '    // You must call a function to finalize each round (after the Round1 & after the Round2)\n', '    // @ Do I have to use the function      yes\n', '    // @ When it is possible to call        after end of Round1 & Round2\n', '    // @ When it is launched automatically  no\n', '    // @ Who can call the function          admins or anybody (if round is failed)\n', '    function finalize() public {\n', '        require(hasEnded());\n', '\n', '        isFinalized = true;\n', '        finalization();\n', '        emit Finalized();\n', '    }\n', '\n', '    // The logic of finalization. Internal\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        -\n', '    // @ When it is launched automatically  after end of round\n', '    // @ Who can call the function          -\n', '    function finalization() internal {\n', '        bytes32[] memory params = new bytes32[](0);\n', '        // If the goal of the achievement\n', '        if (goalReached()) {\n', '\n', '            financialStrategy.setup(1,params);\n', '\n', '            // if there is anything to give\n', '            if (tokenReserved > 0) {\n', '\n', '                token.mint(rightAndRoles.wallets(3,0),tokenReserved);\n', '                totalSaledToken = totalSaledToken.add(tokenReserved);\n', '\n', '                // Reset the counter\n', '                tokenReserved = 0;\n', '            }\n', '\n', '            // If the finalization is Round 1\n', '            if (TokenSale == TokenSaleType.round1) {\n', '\n', '                // Reset settings\n', '                isInitialized = false;\n', '                isFinalized = false;\n', '                if(financialStrategy.freeCash() == 0){\n', '                    rightAndRoles.setManagerPowerful(true);\n', '                }\n', '\n', '                // Switch to the second round (to Round2)\n', '                TokenSale = TokenSaleType.round2;\n', '\n', '                // Reset the collection counter\n', '                weiRound1 = weiRaised();\n', '                ethWeiRaised = 0;\n', '                nonEthWeiRaised = 0;\n', '\n', '\n', '\n', '            }\n', '            else // If the second round is finalized\n', '            {\n', '\n', '                // Permission to collect tokens to those who can pick them up\n', '                chargeBonuses = true;\n', '\n', '                //totalSaledToken = token.totalSupply();\n', '                //partners = true;\n', '\n', '            }\n', '\n', '        }\n', '        else // If they failed round\n', '        {\n', '            financialStrategy.setup(3,params);\n', '        }\n', '    }\n', '\n', '    // The Manager freezes the tokens for the Team.\n', '    // You must call a function to finalize Round 2 (only after the Round2)\n', '    // @ Do I have to use the function      yes\n', '    // @ When it is possible to call        Round2\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function finalize2() public {\n', '        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '        require(chargeBonuses);\n', '        chargeBonuses = false;\n', '\n', '        allocation = creator.createAllocation(token, now + 1 years /* stage N1 */,0/* not need*/);\n', '        token.setUnpausedWallet(allocation, true);\n', '        // Team = %, Founders = %, Fund = %    TOTAL = %\n', '        allocation.addShare(rightAndRoles.wallets(7,0),100,100); // all 100% - first year\n', '\n', '        // 2% - bounty wallet\n', '        token.mint(rightAndRoles.wallets(5,0), totalSaledToken.mul(8).div(80));\n', '\n', '        // 10% - company\n', '        //token.mint(rightAndRoles.wallets(6,0), totalSaledToken.mul(10).div(77));\n', '\n', '        // 13% - team\n', '        token.mint(allocation, totalSaledToken.mul(12).div(80));\n', '    }\n', '\n', '\n', '\n', '    // Initializing the round. Available to the manager. After calling the function,\n', '    // the Manager loses all rights: Manager can not change the settings (setup), change\n', '    // wallets, prevent the beginning of the round, etc. You must call a function after setup\n', '    // for the initial round (before the Round1 and before the Round2)\n', '    // @ Do I have to use the function      yes\n', '    // @ When it is possible to call        before each round\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function initialize() public {\n', '        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '        // If not yet initialized\n', '        require(!isInitialized);\n', '        begin();\n', '\n', '\n', '        // And the specified start time has not yet come\n', '        // If initialization return an error, check the start date!\n', '        require(now <= startTime);\n', '\n', '        initialization();\n', '\n', '        emit Initialized();\n', '\n', '        renewal = 0;\n', '\n', '        isInitialized = true;\n', '\n', '        if(TokenSale == TokenSaleType.round2) canFirstMint = false;\n', '    }\n', '\n', '    function initialization() internal {\n', '        bytes32[] memory params = new bytes32[](0);\n', '        rightAndRoles.setManagerPowerful(false);\n', '        if (financialStrategy.state() != IFinancialStrategy.State.Active){\n', '            financialStrategy.setup(2,params);\n', '        }\n', '    }\n', '\n', '    // \n', '    // @ Do I have to use the function      \n', '    // @ When it is possible to call        \n', '    // @ When it is launched automatically  \n', '    // @ Who can call the function          \n', '    function getPartnerCash(uint8 _user, bool _calc) external {\n', '        if(_calc)\n', '            calcFin();\n', '        financialStrategy.getPartnerCash(_user, msg.sender);\n', '    }\n', '\n', '    function getBeneficiaryCash(bool _calc) public {\n', '        require(rightAndRoles.onlyRoles(msg.sender,22));\n', '        if(_calc)\n', '            calcFin();\n', '        financialStrategy.getBeneficiaryCash();\n', '        if(!isInitialized && financialStrategy.freeCash() == 0)\n', '            rightAndRoles.setManagerPowerful(true);\n', '    }\n', '\n', '    function claimRefund() external{\n', '        financialStrategy.refund(msg.sender);\n', '    }\n', '\n', '    function calcFin() public {\n', '        bytes32[] memory params = new bytes32[](2);\n', '        params[0] = bytes32(weiTotalRaised());\n', '        params[1] = bytes32(msg.sender);\n', '        financialStrategy.setup(4,params);\n', '    }\n', '\n', '    function calcAndGet() public {\n', '        require(rightAndRoles.onlyRoles(msg.sender,22));\n', '        getBeneficiaryCash(true);\n', '        for (uint8 i=0; i<0; i++) { // <-- TODO check financialStrategy.wallets.length\n', '            financialStrategy.getPartnerCash(i, msg.sender);\n', '        }\n', '    }\n', '\n', '    // We check whether we collected the necessary minimum funds. Constant.\n', '    function goalReached() public view returns (bool) {\n', '        return weiRaised() >= softCap;\n', '    }\n', '\n', '\n', '    // Customize. The arguments are described in the constructor above.\n', '    // @ Do I have to use the function      yes\n', '    // @ When it is possible to call        before each rond\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function setup(uint256 _startTime, uint256 _endTime, uint256 _softCap, uint256 _hardCap,\n', '        uint256 _rate, uint256 _exchange,\n', '        uint256 _maxAllProfit, uint256 _overLimit, uint256 _minPay,\n', '        uint256[] _durationTB , uint256[] _percentTB, uint256[] _valueVB, uint256[] _percentVB, uint256[] _freezeTimeVB) public\n', '    {\n', '\n', '        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '        require(!isInitialized);\n', '\n', '        begin();\n', '\n', '        // Date and time are correct\n', '        require(now <= _startTime);\n', '        require(_startTime < _endTime);\n', '\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '\n', '        // The parameters are correct\n', '        require(_softCap <= _hardCap);\n', '\n', '        softCap = _softCap;\n', '        hardCap = _hardCap;\n', '\n', '        require(_rate > 0);\n', '\n', '        rate = _rate;\n', '\n', '        overLimit = _overLimit;\n', '        minPay = _minPay;\n', '        exchange = _exchange;\n', '\n', '        maxAllProfit = _maxAllProfit;\n', '\n', '        require(_valueVB.length == _percentVB.length && _valueVB.length == _freezeTimeVB.length);\n', '        bonuses.length = _valueVB.length;\n', '        for(uint256 i = 0; i < _valueVB.length; i++){\n', '            bonuses[i] = Bonus(_valueVB[i],_percentVB[i],_freezeTimeVB[i]);\n', '        }\n', '\n', '        require(_percentTB.length == _durationTB.length);\n', '        profits.length = _percentTB.length;\n', '        for( i = 0; i < _percentTB.length; i++){\n', '            profits[i] = Profit(_percentTB[i],_durationTB[i]);\n', '        }\n', '\n', '    }\n', '\n', '    // Collected funds for the current round. Constant.\n', '    function weiRaised() public constant returns(uint256){\n', '        return ethWeiRaised.add(nonEthWeiRaised);\n', '    }\n', '\n', '    // Returns the amount of fees for both phases. Constant.\n', '    function weiTotalRaised() public constant returns(uint256){\n', '        return weiRound1.add(weiRaised());\n', '    }\n', '\n', '    // Returns the percentage of the bonus on the current date. Constant.\n', '    function getProfitPercent() public constant returns (uint256){\n', '        return getProfitPercentForData(now);\n', '    }\n', '\n', '    // Returns the percentage of the bonus on the given date. Constant.\n', '    function getProfitPercentForData(uint256 _timeNow) public constant returns (uint256){\n', '        uint256 allDuration;\n', '        for(uint8 i = 0; i < profits.length; i++){\n', '            allDuration = allDuration.add(profits[i].duration);\n', '            if(_timeNow < startTime.add(allDuration)){\n', '                return profits[i].percent;\n', '            }\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function getBonuses(uint256 _value) public constant returns (uint256,uint256,uint256){\n', '        if(bonuses.length == 0 || bonuses[0].value > _value){\n', '            return (0,0,0);\n', '        }\n', '        uint16 i = 1;\n', '        for(i; i < bonuses.length; i++){\n', '            if(bonuses[i].value > _value){\n', '                break;\n', '            }\n', '        }\n', '        return (bonuses[i-1].value,bonuses[i-1].procent,bonuses[i-1].freezeTime);\n', '    }\n', '\n', '\n', '    // Remove the "Pause of exchange". Available to the manager at any time. If the\n', '    // manager refuses to remove the pause, then 30-120 days after the successful\n', '    // completion of the TokenSale, anyone can remove a pause and allow the exchange to continue.\n', '    // The manager does not interfere and will not be able to delay the term.\n', '    // He can only cancel the pause before the appointed time.\n', '    // @ Do I have to use the function      YES YES YES\n', '    // @ When it is possible to call        after end of ICO\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins or anybody\n', '    function tokenUnpause() external {\n', '\n', '        require(rightAndRoles.onlyRoles(msg.sender,2)\n', '        || (now > endTime.add(renewal).add(USER_UNPAUSE_TOKEN_TIMEOUT) && TokenSale == TokenSaleType.round2 && isFinalized && goalReached()));\n', '        token.setPause(false);\n', '    }\n', '\n', '    // Enable the "Pause of exchange". Available to the manager until the TokenSale is completed.\n', '    // The manager cannot turn on the pause, for example, 3 years after the end of the TokenSale.\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        while Round2 not ended\n', '    // @ When it is launched automatically  before any rounds\n', '    // @ Who can call the function          admins\n', '    function tokenPause() public {\n', '        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '        require(!isFinalized);\n', '        token.setPause(true);\n', '    }\n', '\n', '    // Pause of sale. Available to the manager.\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        during active rounds\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function setCrowdsalePause(bool mode) public {\n', '        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '        isPausedCrowdsale = mode;\n', '    }\n', '\n', "    // For example - After 5 years of the project's existence, all of us suddenly decided collectively\n", '    // (company + investors) that it would be more profitable for everyone to switch to another smart\n', '    // contract responsible for tokens. The company then prepares a new token, investors\n', '    // disassemble, study, discuss, etc. \n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        only after ICO!\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '//    function moveTokens(address _migrationAgent) public {\n', '//        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '//        token.setMigrationAgent(_migrationAgent);\n', '//    }\n', '\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        only after ICO!\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '//    function migrateAll(address[] _holders) public {\n', '//        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '//        token.migrateAll(_holders);\n', '//    }\n', '\n', '\n', '    // For people who ignore the KYC/AML procedure during 30 days after payment (KYC_PERIOD): money back and zeroing tokens.\n', '    // ***CHECK***SCENARIO***\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        any time\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admin\n', '//    function invalidPayments(address[] _beneficiary, uint256[] _value) external {\n', '//        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '//        require(endTime.add(renewal).add(KYC_PERIOD) > now);\n', '//        require(_beneficiary.length == _value.length);\n', '//        for(uint16 i; i<_beneficiary.length; i++) {\n', '//            token.markTokens(_beneficiary[i],_value[i]);\n', '//        }\n', '//    }\n', '\n', '    // Extend the round time, if provided by the script. Extend the round only for\n', '    // a limited number of days - ROUND_PROLONGATE\n', '    // ***CHECK***SCENARIO***\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        during active round\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          admins\n', '    function prolong(uint256 _duration) external {\n', '        require(rightAndRoles.onlyRoles(msg.sender,6));\n', '        require(now > startTime && now < endTime.add(renewal) && isInitialized && !isFinalized);\n', '        renewal = renewal.add(_duration);\n', '        require(renewal <= ROUND_PROLONGATE);\n', '\n', '    }\n', '    // If a little more than a year has elapsed (Round2 start date + 400 days), a smart contract\n', '    // will allow you to send all the money to the Beneficiary, if any money is present. This is\n', '    // possible if you mistakenly launch the Round2 for 30 years (not 30 days), investors will transfer\n', '    // money there and you will not be able to pick them up within a reasonable time. It is also\n', '    // possible that in our checked script someone will make unforeseen mistakes, spoiling the\n', '    // finalization. Without finalization, money cannot be returned. This is a rescue option to\n', '    // get around this problem, but available only after a year (400 days).\n', '\n', '    // Another reason - the TokenSale was a failure, but not all ETH investors took their money during the year after.\n', '    // Some investors may have lost a wallet key, for example.\n', '\n', '    // The method works equally with the Round1 and Round2. When the Round1 starts, the time for unlocking\n', '    // the distructVault begins. If the TokenSale is then started, then the term starts anew from the first day of the TokenSale.\n', '\n', '    // Next, act independently, in accordance with obligations to investors.\n', '\n', '    // Within 400 days (FORCED_REFUND_TIMEOUT1) of the start of the Round, if it fails only investors can take money. After\n', '    // the deadline this can also include the company as well as investors, depending on who is the first to use the method.\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        -\n', '    // @ When it is launched automatically  -\n', '    // @ Who can call the function          beneficiary & manager\n', '    function distructVault() public {\n', '        bytes32[] memory params = new bytes32[](1);\n', '        params[0] = bytes32(msg.sender);\n', '        if (rightAndRoles.onlyRoles(msg.sender,4) && (now > startTime.add(FORCED_REFUND_TIMEOUT1))) {\n', '            financialStrategy.setup(0,params);\n', '        }\n', '        if (rightAndRoles.onlyRoles(msg.sender,2) && (now > startTime.add(FORCED_REFUND_TIMEOUT2))) {\n', '            financialStrategy.setup(0,params);\n', '        }\n', '    }\n', '\n', '\n', '    // We accept payments other than Ethereum (ETH) and other currencies, for example, Bitcoin (BTC).\n', '    // Perhaps other types of cryptocurrency - see the original terms in the white paper and on the TokenSale website.\n', '\n', '    // We release tokens on Ethereum. During the Round1 and Round2 with a smart contract, you directly transfer\n', '    // the tokens there and immediately, with the same transaction, receive tokens in your wallet.\n', '\n', '    // When paying in any other currency, for example in BTC, we accept your money via one common wallet.\n', '    // Our manager fixes the amount received for the bitcoin wallet and calls the method of the smart\n', '    // contract paymentsInOtherCurrency to inform him how much foreign currency has been received - on a daily basis.\n', '    // The smart contract pins the number of accepted ETH directly and the number of BTC. Smart contract\n', '    // monitors softcap and hardcap, so as not to go beyond this framework.\n', '\n', '    // In theory, it is possible that when approaching hardcap, we will receive a transfer (one or several\n', '    // transfers) to the wallet of BTC, that together with previously received money will exceed the hardcap in total.\n', '    // In this case, we will refund all the amounts above, in order not to exceed the hardcap.\n', '\n', "    // Collection of money in BTC will be carried out via one common wallet. The wallet's address will be published\n", '    // everywhere (in a white paper, on the TokenSale website, on Telegram, on Bitcointalk, in this code, etc.)\n', '    // Anyone interested can check that the administrator of the smart contract writes down exactly the amount\n', '    // in ETH (in equivalent for BTC) there. In theory, the ability to bypass a smart contract to accept money in\n', '    // BTC and not register them in ETH creates a possibility for manipulation by the company. Thanks to\n', '    // paymentsInOtherCurrency however, this threat is leveled.\n', '\n', '    // Any user can check the amounts in BTC and the variable of the smart contract that accounts for this\n', '    // (paymentsInOtherCurrency method). Any user can easily check the incoming transactions in a smart contract\n', '    // on a daily basis. Any hypothetical tricks on the part of the company can be exposed and panic during the TokenSale,\n', '    // simply pointing out the incompatibility of paymentsInOtherCurrency (ie, the amount of ETH + BTC collection)\n', '    // and the actual transactions in BTC. The company strictly adheres to the described principles of openness.\n', '\n', '    // The company administrator is required to synchronize paymentsInOtherCurrency every working day (but you\n', '    // cannot synchronize if there are no new BTC payments). In the case of unforeseen problems, such as\n', '    // brakes on the Ethereum network, this operation may be difficult. You should only worry if the\n', '    // administrator does not synchronize the amount for more than 96 hours in a row, and the BTC wallet\n', '    // receives significant amounts.\n', '\n', '    // This scenario ensures that for the sum of all fees in all currencies this value does not exceed hardcap.\n', '\n', '    // ** QUINTILLIONS ** 10^18 / 1**18 / 1e18\n', '\n', '    // @ Do I have to use the function      no\n', '    // @ When it is possible to call        during active rounds\n', '    // @ When it is launched automatically  every day from cryptob2b token software\n', '    // @ Who can call the function          admins + observer\n', '    function paymentsInOtherCurrency(uint256 _token, uint256 _value) internal {\n', '\n', '        // **For audit**\n', '        // BTC Wallet:             38kYRf1Ent74d77H8F4ZJCyngtRTJFPdhj\n', '        // BCH Wallet:             qpyjy2urvjhwz4emw0hfrlm39gmu3shvngy7aa673l\n', '        // DASH Wallet:            XrouPiHyXwfB2uajja1RALuAvHaDEUNPw7\n', '        // LTC Wallet:             MJxPYAeMbvYBoFsoNnF9WwiUqnLSUR8yVc\n', '        require(rightAndRoles.onlyRoles(msg.sender,18));\n', '        bool withinPeriod = (now >= startTime && now <= endTime.add(renewal));\n', '        bool withinCap = _value.add(ethWeiRaised) <= hardCap.add(overLimit);\n', '        require(withinPeriod && withinCap && isInitialized && !isFinalized);\n', '        emit PaymentedInOtherCurrency(_token,_value);\n', '        nonEthWeiRaised = _value;\n', '        tokenReserved = _token;\n', '\n', '    }\n', '\n', '    function lokedMint(address _beneficiary, uint256 _value, uint256 _freezeTime) internal {\n', '        if(_freezeTime > 0){\n', '\n', '            uint256 totalBloked = token.freezedTokenOf(_beneficiary).add(_value);\n', '            uint256 pastDateUnfreeze = token.defrostDate(_beneficiary);\n', '            uint256 newDateUnfreeze = _freezeTime.add(now);\n', '            newDateUnfreeze = (pastDateUnfreeze > newDateUnfreeze ) ? pastDateUnfreeze : newDateUnfreeze;\n', '\n', '            token.freezeTokens(_beneficiary,totalBloked,newDateUnfreeze);\n', '        }\n', '        token.mint(_beneficiary,_value);\n', '        totalSaledToken = totalSaledToken.add(_value);\n', '    }\n', '\n', '\n', '    // The function for obtaining smart contract funds in ETH. If all the checks are true, the token is\n', '    // transferred to the buyer, taking into account the current bonus.\n', '    function buyTokens(address _beneficiary) public payable {\n', '        require(_beneficiary != 0x0);\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        uint256 ProfitProcent = getProfitPercent();\n', '\n', '        uint256 value;\n', '        uint256 percent;\n', '        uint256 freezeTime;\n', '\n', '        (value,\n', '        percent,\n', '        freezeTime) = getBonuses(weiAmount);\n', '\n', '        Bonus memory curBonus = Bonus(value,percent,freezeTime);\n', '\n', '        uint256 bonus = curBonus.procent;\n', '\n', '\n', '        // --------------------------------------------------------------------------------------------\n', '        // *** Scenario 1 - select max from all bonuses + check maxAllProfit\n', '        //uint256 totalProfit = (ProfitProcent < bonus) ? bonus : ProfitProcent;\n', '        // *** Scenario 2 - sum both bonuses + check maxAllProfit\n', '        uint256 totalProfit = bonus.add(ProfitProcent);\n', '        if(isPromo(_beneficiary)){\n', '            totalProfit = totalProfit.add(10);\n', '        }\n', '        // --------------------------------------------------------------------------------------------\n', '        totalProfit = (totalProfit > maxAllProfit) ? maxAllProfit : totalProfit;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(rate).mul(totalProfit.add(100)).div(100 ether);\n', '\n', '        // update state\n', '        ethWeiRaised = ethWeiRaised.add(weiAmount);\n', '\n', '        lokedMint(_beneficiary, tokens, curBonus.freezeTime);\n', '\n', '        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '        forwardFunds(_beneficiary);//forwardFunds(msg.sender);\n', '    }\n', '\n', '    // buyTokens alias\n', '    function () public payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '    function minus(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (b>=a) return 0;\n', '        return a - b;\n', '    }\n', '}\n', '\n', 'contract IFinancialStrategy{\n', '\n', '    enum State { Active, Refunding, Closed }\n', '    State public state = State.Active;\n', '\n', '    event Deposited(address indexed beneficiary, uint256 weiAmount);\n', '    event Receive(address indexed beneficiary, uint256 weiAmount);\n', '    event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '    event Started();\n', '    event Closed();\n', '    event RefundsEnabled();\n', '    function freeCash() view public returns(uint256);\n', '    function deposit(address _beneficiary) external payable;\n', '    function refund(address _investor) external;\n', '    function setup(uint8 _state, bytes32[] _params) external;\n', '    function getBeneficiaryCash() external;\n', '    function getPartnerCash(uint8 _user, address _msgsender) external;\n', '}\n', '\n', 'contract IAllocation {\n', '    function addShare(address _beneficiary, uint256 _proportion, uint256 _percenForFirstPart) external;\n', '}\n', '\n', 'contract ICreator{\n', '    IRightAndRoles public rightAndRoles;\n', '    function createAllocation(IToken _token, uint256 _unlockPart1, uint256 _unlockPart2) external returns (IAllocation);\n', '    function createFinancialStrategy() external returns(IFinancialStrategy);\n', '    function getRightAndRoles() external returns(IRightAndRoles);\n', '}']
