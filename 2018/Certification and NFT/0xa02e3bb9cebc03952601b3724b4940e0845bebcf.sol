['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract BethereumToken is MintableToken, PausableToken {\n', '    string public constant name = "Bethereum";\n', '    string public constant symbol = "BTHR";\n', '    uint256 public constant decimals = 18;\n', '\n', '    function BethereumToken(){\n', '        pause();\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    MintableToken public token;\n', '\n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    // address where funds are collected\n', '    address public wallet;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '    function Crowdsale(uint256 _endTime, address _wallet) {\n', '\n', '        require(_endTime >= now);\n', '        require(_wallet != 0x0);\n', '\n', '        token = createTokenContract();\n', '        endTime = _endTime;\n', '        wallet = _wallet;\n', '    }\n', '\n', '    // creates the token to be sold.\n', '    // override this method to have crowdsale of a specific mintable token.\n', '    function createTokenContract() internal returns (BethereumToken) {\n', '        return new BethereumToken();\n', '    }\n', '\n', '\n', '    // fallback function can be used to buy tokens\n', '    function () payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address beneficiary) public payable {  }\n', '\n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase() internal constant returns (bool) {\n', '        bool withinPeriod = now >= startTime && now <= endTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        return withinPeriod && nonZeroPurchase;\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public constant returns (bool) {\n', '        return now > endTime;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    bool public isFinalized = false;\n', '    \n', '    bool public weiCapReached = false;\n', '\n', '    event Finalized();\n', '\n', '    /**\n', '     * @dev Must be called after crowdsale ends, to do some extra finalization\n', '     * work. Calls the contract&#39;s finalization function.\n', '     */\n', '    function finalize() onlyOwner public {\n', '        require(!isFinalized);\n', '        \n', '        finalization();\n', '        Finalized();\n', '\n', '        isFinalized = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Can be overridden to add finalization logic. The overriding function\n', '     * should call super.finalization() to ensure the chain of finalization is\n', '     * executed entirely.\n', '     */\n', '    function finalization() internal {\n', '    }\n', '}\n', '\n', 'contract BTHRTokenSale is FinalizableCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // Define sale\n', '    uint public constant RATE = 17500;\n', '    uint public constant TOKEN_SALE_LIMIT = 25000 * 1000000000000000000;\n', '\n', '    uint256 public constant TOKENS_FOR_OPERATIONS = 400000000*(10**18);\n', '    uint256 public constant TOKENS_FOR_SALE = 600000000*(10**18);\n', '\n', '    uint public constant TOKENS_FOR_PRESALE = 315000000*(1 ether / 1 wei);\n', '\n', '    uint public constant FRST_CRWDSALE_RATIO = TOKENS_FOR_PRESALE + 147875000*(1 ether / 1 wei);//30% bonus\n', '    uint public constant SCND_CRWDSALE_RATIO = FRST_CRWDSALE_RATIO + 110687500*(1 ether / 1 wei);//15% bonus\n', '\n', '    enum Phase {\n', '        Created,//Inital phase after deploy\n', '        PresaleRunning, //Presale phase\n', '        Paused, //Pause phase between pre-sale and main token sale or emergency pause function\n', '        ICORunning, //Crowdsale phase\n', '        FinishingICO //Final phase when crowdsale is closed and time is up\n', '    }\n', '\n', '    Phase public currentPhase = Phase.Created;\n', '\n', '    event LogPhaseSwitch(Phase phase);\n', '\n', '    // Constructor\n', '    function BTHRTokenSale(uint256 _end, address _wallet)\n', '    FinalizableCrowdsale()\n', '    Crowdsale(_end, _wallet) {\n', '    }\n', '\n', '    /// @dev Lets buy you some tokens.\n', '    function buyTokens(address _buyer) public payable {\n', '        // Available only if presale or crowdsale is running.\n', '        require((currentPhase == Phase.PresaleRunning) || (currentPhase == Phase.ICORunning));\n', '        require(_buyer != address(0));\n', '        require(msg.value > 0);\n', '        require(validPurchase());\n', '\n', '        uint tokensWouldAddTo = 0;\n', '        uint weiWouldAddTo = 0;\n', '        \n', '        uint256 weiAmount = msg.value;\n', '        \n', '        uint newTokens = msg.value.mul(RATE);\n', '        \n', '        weiWouldAddTo = weiRaised.add(weiAmount);\n', '        \n', '        require(weiWouldAddTo <= TOKEN_SALE_LIMIT);\n', '\n', '        newTokens = addBonusTokens(token.totalSupply(), newTokens);\n', '        \n', '        tokensWouldAddTo = newTokens.add(token.totalSupply());\n', '        require(tokensWouldAddTo <= TOKENS_FOR_SALE);\n', '        \n', '        token.mint(_buyer, newTokens);\n', '        TokenPurchase(msg.sender, _buyer, weiAmount, newTokens);\n', '        \n', '        weiRaised = weiWouldAddTo;\n', '        forwardFunds();\n', '        if (weiRaised == TOKENS_FOR_SALE){\n', '            weiCapReached = true;\n', '        }\n', '    }\n', '\n', '    // @dev Adds bonus tokens by token supply bought by user\n', '    // @param _totalSupply total supply of token bought during pre-sale/crowdsale\n', '    // @param _newTokens tokens currently bought by user\n', '    function addBonusTokens(uint256 _totalSupply, uint256 _newTokens) internal view returns (uint256) {\n', '\n', '        uint returnTokens = 0;\n', '        uint tokensToAdd = 0;\n', '        uint tokensLeft = _newTokens;\n', '\n', '        if(currentPhase == Phase.PresaleRunning){\n', '            if(_totalSupply < TOKENS_FOR_PRESALE){\n', '                if(_totalSupply + tokensLeft + tokensLeft.mul(50).div(100) > TOKENS_FOR_PRESALE){\n', '                    tokensToAdd = TOKENS_FOR_PRESALE.sub(_totalSupply);\n', '                    tokensToAdd = tokensToAdd.mul(100).div(150);\n', '                    \n', '                    returnTokens = returnTokens.add(tokensToAdd);\n', '                    returnTokens = returnTokens.add(tokensToAdd.mul(50).div(100));\n', '                    tokensLeft = tokensLeft.sub(tokensToAdd);\n', '                    _totalSupply = _totalSupply.add(tokensToAdd.add(tokensToAdd.mul(50).div(100)));\n', '                } else { \n', '                    returnTokens = returnTokens.add(tokensLeft).add(tokensLeft.mul(50).div(100));\n', '                    tokensLeft = tokensLeft.sub(tokensLeft);\n', '                }\n', '            }\n', '        } \n', '        \n', '        if (tokensLeft > 0 && _totalSupply < FRST_CRWDSALE_RATIO) {\n', '            \n', '            if(_totalSupply + tokensLeft + tokensLeft.mul(30).div(100)> FRST_CRWDSALE_RATIO){\n', '                tokensToAdd = FRST_CRWDSALE_RATIO.sub(_totalSupply);\n', '                tokensToAdd = tokensToAdd.mul(100).div(130);\n', '                returnTokens = returnTokens.add(tokensToAdd).add(tokensToAdd.mul(30).div(100));\n', '                tokensLeft = tokensLeft.sub(tokensToAdd);\n', '                _totalSupply = _totalSupply.add(tokensToAdd.add(tokensToAdd.mul(30).div(100)));\n', '                \n', '            } else { \n', '                returnTokens = returnTokens.add(tokensLeft);\n', '                returnTokens = returnTokens.add(tokensLeft.mul(30).div(100));\n', '                tokensLeft = tokensLeft.sub(tokensLeft);\n', '            }\n', '        }\n', '        \n', '        if (tokensLeft > 0 && _totalSupply < SCND_CRWDSALE_RATIO) {\n', '            \n', '            if(_totalSupply + tokensLeft + tokensLeft.mul(15).div(100) > SCND_CRWDSALE_RATIO){\n', '\n', '                tokensToAdd = SCND_CRWDSALE_RATIO.sub(_totalSupply);\n', '                tokensToAdd = tokensToAdd.mul(100).div(115);\n', '                returnTokens = returnTokens.add(tokensToAdd).add(tokensToAdd.mul(15).div(100));\n', '                tokensLeft = tokensLeft.sub(tokensToAdd);\n', '                _totalSupply = _totalSupply.add(tokensToAdd.add(tokensToAdd.mul(15).div(100)));\n', '            } else { \n', '                returnTokens = returnTokens.add(tokensLeft);\n', '                returnTokens = returnTokens.add(tokensLeft.mul(15).div(100));\n', '                tokensLeft = tokensLeft.sub(tokensLeft);\n', '            }\n', '        }\n', '        \n', '        if (tokensLeft > 0)  {\n', '            returnTokens = returnTokens.add(tokensLeft);\n', '            tokensLeft = tokensLeft.sub(tokensLeft);\n', '        }\n', '        return returnTokens;\n', '    }\n', '\n', '    function validPurchase() internal view returns (bool) {\n', '        bool withinPeriod = now <= endTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        bool isRunning = ((currentPhase == Phase.ICORunning) || (currentPhase == Phase.PresaleRunning));\n', '        return withinPeriod && nonZeroPurchase && isRunning;\n', '    }\n', '\n', '    function setSalePhase(Phase _nextPhase) public onlyOwner {\n', '    \n', '        bool canSwitchPhase\n', '        =  (currentPhase == Phase.Created && _nextPhase == Phase.PresaleRunning)\n', '        || (currentPhase == Phase.PresaleRunning && _nextPhase == Phase.Paused)\n', '        || ((currentPhase == Phase.PresaleRunning || currentPhase == Phase.Paused)\n', '        && _nextPhase == Phase.ICORunning)\n', '        || (currentPhase == Phase.ICORunning && _nextPhase == Phase.Paused)\n', '        || (currentPhase == Phase.Paused && _nextPhase == Phase.PresaleRunning)\n', '        || (currentPhase == Phase.Paused && _nextPhase == Phase.FinishingICO)\n', '        || (currentPhase == Phase.ICORunning && _nextPhase == Phase.FinishingICO);\n', '\n', '        require(canSwitchPhase);\n', '        currentPhase = _nextPhase;\n', '        LogPhaseSwitch(_nextPhase);\n', '    }\n', '\n', '    // Finalize\n', '    function finalization() internal {\n', '        uint256 toMint = TOKENS_FOR_OPERATIONS;\n', '        token.mint(wallet, toMint);\n', '        token.finishMinting();\n', '        token.transferOwnership(wallet);\n', '    }\n', '}']