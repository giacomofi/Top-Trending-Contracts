['pragma solidity ^0.4.24;\n', '\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount) public;\n', '    function burn(uint256 _value) public returns (bool success);\n', '}\n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '    function Constrctor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '}\n', '\n', 'contract UnicornCrowdsale is Ownable {\n', '    \n', '    uint256 public constant EXCHANGE_RATE = 1000;\n', '    \n', '    uint256 availableTokens;\n', '    address addressToSendEthereum;\n', '    \n', '    uint public amountRaised;\n', '    uint public price;\n', '    token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function UnicornCrowdsale (\n', '        address _addressOfTokenUsedAsReward,\n', '        address _addressToSendEthereum\n', '    ) public {\n', '        availableTokens = 100000000 * 10 ** 18;\n', '        addressToSendEthereum = _addressToSendEthereum;\n', '        tokenReward = token(_addressOfTokenUsedAsReward);\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () public payable {\n', '        uint256 amount = msg.value;\n', '        uint256 tokens = amount * EXCHANGE_RATE;\n', '        balanceOf[msg.sender] += tokens;\n', '        amountRaised += tokens;\n', '        availableTokens -= tokens;\n', '        tokenReward.transfer(msg.sender, msg.value * EXCHANGE_RATE);\n', '        addressToSendEthereum.transfer(amount);\n', '    }\n', '    \n', '    \n', '    function sellForOtherCoins(address _address,uint amount)  public payable onlyOwner\n', '    {\n', '        uint256 tokens = amount;\n', '        availableTokens -= tokens;\n', '        tokenReward.transfer(_address, tokens);\n', '    }\n', '    \n', '    function burnAfterIco() public onlyOwner returns (bool success){\n', '        uint256 balance = availableTokens;\n', '        tokenReward.burn(balance);\n', '        availableTokens = 0;\n', '        return true;\n', '    }\n', '\n', '    function tokensAvailable() public constant returns (uint256) {\n', '        return availableTokens;\n', '    }\n', '\n', '}']