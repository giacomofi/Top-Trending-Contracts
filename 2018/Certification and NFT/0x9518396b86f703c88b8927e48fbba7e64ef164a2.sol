['pragma solidity ^0.4.16;\n', '\n', '  contract SafeMath{\n', '\n', '  // math operations with safety checks that throw on error\n', '  // small gas improvement\n', '\n', '  function safeMul(uint256 a, uint256 b) internal returns (uint256){\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  \n', '  function safeDiv(uint256 a, uint256 b) internal returns (uint256){\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '  \n', '  function safeSub(uint256 a, uint256 b) internal returns (uint256){\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  \n', '  function safeAdd(uint256 a, uint256 b) internal returns (uint256){\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  // mitigate short address attack\n', '  // https://github.com/numerai/contract/blob/c182465f82e50ced8dacb3977ec374a892f5fa8c/contracts/Safe.sol#L30-L34\n', '  modifier onlyPayloadSize(uint numWords){\n', '     assert(msg.data.length >= numWords * 32 + 4);\n', '     _;\n', '  }\n', '\n', '}\n', '\n', '  contract Token{\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  \tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '  \tfunction balanceOf(address _owner) constant returns (uint256 balance);\n', '  \tfunction transfer(address _to, uint256 _value) returns (bool success);\n', '  \tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '  \tfunction approve(address _spender, uint256 _value) returns (bool success);\n', '  \tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '  }\n', '\n', '   contract grantVestedEDEX is SafeMath{\n', '\n', '  \tuint256 public icoEndBlock;\n', '  \taddress public beneficiary;\n', '\n', '    // withdraw first token supply after ICO\n', '  \tbool private initialTeamWithdrawal = false;\n', '\n', '    // withdraw tokens periodically \n', '  \tuint256 public firstTeamWithdrawal;\n', '  \tuint256 public secondTeamWithdrawal;\n', '  \tuint256 public thirdTeamWithdrawal;\n', '  \tuint256 public fourthTeamWithdrawal;\n', '  \tuint256 public fifthTeamWithdrawal;\n', '  \tuint256 public sixthTeamWithdrawal;\n', '  \tuint256 public seventhTeamWithdrawal;\n', '  \tuint256 public eighthTeamWithdrawal;\n', '  \t\n', '  \t// check periodic withdrawals\n', '    bool private firstWithdrawalFinished = false;\n', '    bool private secondWithdrawalFinished = false;\n', '    bool private thirdWithdrawalFinished = false;\n', '    bool private fourthWithdrawalFinished = false;\n', '    bool private fifthWithdrawalFinished = false;\n', '    bool private sixthWithdrawalFinished = false;\n', '    bool private seventhWithdrawalFinished = false;\n', '    bool private eighthWithdrawalFinished = false;\n', '    \n', '  \tToken public ERC20Token;\n', '\n', '  \tenum Phases{\n', '      \tinitialTeamWithdrawal,\n', '      \tfirstTeamWithdrawal,\n', '      \tsecondTeamWithdrawal,\n', '      \tthirdTeamWithdrawal,\n', '      \tfourthTeamWithdrawal,\n', '      \tfifthTeamWithdrawal,\n', '      \tsixthTeamWithdrawal,\n', '      \tseventhTeamWithdrawal,\n', '      \teighthTeamWithdrawal\n', '  \t}\n', '\n', '  \tPhases public phase = Phases.initialTeamWithdrawal;\n', '\n', '  \tmodifier atPhase(Phases _phase){\n', '      \tif(phase == _phase) _;\n', '  \t}\n', '\n', '  \tfunction grantVestedEDEX(address _token, uint256 icoEndBlockInput){\n', '      \trequire(_token != address(0));\n', '      \tbeneficiary = msg.sender;\n', '      \ticoEndBlock = icoEndBlockInput;\n', '      \tERC20Token = Token(_token);\n', '  \t}\n', '\n', '  \tfunction changeBeneficiary(address newBeneficiary) external{\n', '      \trequire(newBeneficiary != address(0));\n', '      \trequire(msg.sender == beneficiary);\n', '      \tbeneficiary = newBeneficiary;\n', '  \t}\n', '\n', '  \tfunction changeIcoEndBlock(uint256 newIcoEndBlock){\n', '      \trequire(msg.sender == beneficiary);\n', '      \trequire(block.number < icoEndBlock);\n', '      \trequire(block.number < newIcoEndBlock);\n', '      \ticoEndBlock = newIcoEndBlock;\n', '  \t}\n', '\n', '  \tfunction checkBalance() constant returns (uint256 tokenBalance){\n', '      \treturn ERC20Token.balanceOf(this);\n', '  \t}\n', '\n', '  \tfunction withdrawal() external{\n', '      \trequire(msg.sender == beneficiary);\n', '      \trequire(block.number > icoEndBlock);\n', '      \tuint256 balance = ERC20Token.balanceOf(this);\n', '      \teighth_withdrawal(balance);\n', '      \tseventh_withdrawal(balance);\n', '      \tsixth_withdrawal(balance);\n', '      \tfifth_withdrawal(balance);\n', '      \tfourth_withdrawal(balance);\n', '      \tthird_withdrawal(balance);\n', '      \tsecond_withdrawal(balance);\n', '      \tfirst_withdrawal(balance);\n', '      \tinitial_withdrawal(balance);\n', '  \t}\n', '\n', '  \tfunction nextPhase() private{\n', '      \tphase = Phases(uint256(phase) + 1);\n', '  \t}\n', '\n', '    // initial_withdrawal releases 60% of tokens\n', '  \tfunction initial_withdrawal(uint256 balance) private atPhase(Phases.initialTeamWithdrawal){\n', '      \tfirstTeamWithdrawal = now + 13 weeks;\n', '      \tsecondTeamWithdrawal = firstTeamWithdrawal + 13 weeks;\n', '      \tthirdTeamWithdrawal = secondTeamWithdrawal + 13 weeks;\n', '      \tfourthTeamWithdrawal = thirdTeamWithdrawal + 13 weeks;\n', '      \tfifthTeamWithdrawal = fourthTeamWithdrawal + 13 weeks;\n', '      \tsixthTeamWithdrawal = fifthTeamWithdrawal + 13 weeks;\n', '      \tseventhTeamWithdrawal = sixthTeamWithdrawal + 13 weeks;\n', '      \teighthTeamWithdrawal = seventhTeamWithdrawal + 13 weeks;\n', '      \tuint256 amountToTransfer = safeDiv(safeMul(balance, 6), 10);\n', '      \tERC20Token.transfer(beneficiary, amountToTransfer);\n', '      \tnextPhase();\n', '  \t}\n', ' \t \n', '  \tfunction first_withdrawal(uint256 balance) private atPhase(Phases.firstTeamWithdrawal){\n', '      \trequire(now > firstTeamWithdrawal);\n', '      \tuint256 amountToTransfer = balance / 8;\n', '      \tERC20Token.transfer(beneficiary, amountToTransfer);\n', '      \tnextPhase();\n', '  \t}\n', ' \t \n', '  \tfunction second_withdrawal(uint256 balance) private atPhase(Phases.secondTeamWithdrawal){\n', '      \trequire(now > secondTeamWithdrawal);\n', '      \tuint256 amountToTransfer = balance / 7;\n', '      \tERC20Token.transfer(beneficiary, amountToTransfer);\n', '      \tnextPhase();\n', '  \t}\n', ' \t \n', '  \tfunction third_withdrawal(uint256 balance) private atPhase(Phases.thirdTeamWithdrawal){\n', '      \trequire(now > thirdTeamWithdrawal);\n', '      \tuint256 amountToTransfer = balance / 6;\n', '      \tERC20Token.transfer(beneficiary, amountToTransfer);\n', '      \tnextPhase();\n', '  \t}\n', '  \t\n', '  \tfunction fourth_withdrawal(uint256 balance) private atPhase(Phases.fourthTeamWithdrawal){\n', '      \trequire(now > fourthTeamWithdrawal);\n', '      \tuint256 amountToTransfer = balance / 5;\n', '      \tERC20Token.transfer(beneficiary, amountToTransfer);\n', '      \tnextPhase();\n', '  \t}\n', '  \t\n', '  \tfunction fifth_withdrawal(uint256 balance) private atPhase(Phases.fifthTeamWithdrawal){\n', '      \trequire(now > fifthTeamWithdrawal);\n', '      \tuint256 amountToTransfer = balance / 4;\n', '      \tERC20Token.transfer(beneficiary, amountToTransfer);\n', '      \tnextPhase();\n', '  \t}\n', '  \t\n', '  \tfunction sixth_withdrawal(uint256 balance) private atPhase(Phases.sixthTeamWithdrawal){\n', '      \trequire(now > sixthTeamWithdrawal);\n', '      \tuint256 amountToTransfer = balance / 3;\n', '      \tERC20Token.transfer(beneficiary, amountToTransfer);\n', '      \tnextPhase();\n', '  \t}\n', '  \t\n', '  \tfunction seventh_withdrawal(uint256 balance) private atPhase(Phases.seventhTeamWithdrawal){\n', '      \trequire(now > seventhTeamWithdrawal);\n', '      \tuint256 amountToTransfer = balance / 2;\n', '      \tERC20Token.transfer(beneficiary, amountToTransfer);\n', '      \tnextPhase();\n', '  \t}\n', '  \t\n', '  \tfunction eighth_withdrawal(uint256 balance) private atPhase(Phases.eighthTeamWithdrawal){\n', '      \trequire(now > eighthTeamWithdrawal);\n', '      \tERC20Token.transfer(beneficiary, balance);\n', '  \t}\n', '\n', '  \tfunction withdrawOtherEDEX(address _token) external{\n', '      \trequire(msg.sender == beneficiary);\n', '      \trequire(_token != address(0));\n', '      \tToken token = Token(_token);\n', '      \trequire(token != ERC20Token);\n', '      \tuint256 balance = token.balanceOf(this);\n', '      \ttoken.transfer(beneficiary, balance);\n', '   \t}\n', ' }']