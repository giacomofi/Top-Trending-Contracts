['pragma solidity ^0.4.4;\n', '\n', 'contract Token\n', '{\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);    \n', '}\n', '\n', 'contract StandardToken is Token\n', '{\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success)\n', '    {\n', '        if (balances[msg.sender] >= _value && _value > 0)\n', '        {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success)\n', '    {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0)\n', '        {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining)\n', '    {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', '\n', 'contract Riccoin is StandardToken\n', '{\n', '\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', "    string public version = 'H1.0';\n", '    \n', '    address public beneficiary;\n', '    address public creator;\n', '    uint public fundingGoal;\n', '    uint public starttime;\n', '    uint public deadline;\n', '    uint public amountRaised;\n', '    uint256 public unitsOneEthCanBuy;\n', '    bool public fundingGoalReached = false;\n', '    bool public crowdsaleClosed = false;\n', '\n', '    event GoalReached(address recipient, uint totalAmountRaised);\n', '    \n', '    function Riccoin(string tokenName, string tokenSymbol, uint256 initialSupply, address sendEtherTo, uint fundingGoalInEther, uint durationInMinutes, uint256 tokenInOneEther)\n', '    {\n', '        name = tokenName; \n', '        symbol = tokenSymbol; \n', '        decimals = 18;\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);\n', '        beneficiary = sendEtherTo;\n', '        creator = msg.sender;\n', '        balances[beneficiary] = totalSupply;\n', '        fundingGoal = fundingGoalInEther * 1 ether;\n', '        starttime = now;\n', '        deadline = now + durationInMinutes * 1 minutes;\n', '        unitsOneEthCanBuy = tokenInOneEther;\n', '    }\n', '\n', '    function() payable\n', '    {\n', '        require(!crowdsaleClosed);\n', '        uint256 amount = msg.value * unitsOneEthCanBuy;\n', '        \n', '        \n', '        if((now - starttime) <= (deadline - starttime) / 20)\n', '            amount = 23 * (amount/20);\n', '        else if((now - starttime) <= 9 * ((deadline - starttime) / 20) )\n', '            amount = 11 * (amount/10);\n', '\n', '        require(balances[beneficiary] >= amount);\n', '        \n', '        amountRaised += msg.value;\n', '        balances[beneficiary] = balances[beneficiary] - amount;\n', '        balances[msg.sender] = balances[msg.sender] + amount;\n', '        beneficiary.transfer(msg.value);\n', '        Transfer(beneficiary, msg.sender, amount); \n', '    }\n', '\n', '    modifier afterDeadline()\n', '    { if (now >= deadline) _; }\n', '\n', '    function checkGoalReached() afterDeadline\n', '    {\n', '        if (amountRaised >= fundingGoal)\n', '        {\n', '            fundingGoalReached = true;\n', '            GoalReached(beneficiary, amountRaised);\n', '        }\n', '        crowdsaleClosed = true;\n', '    }\n', '\n', '    function updateRate(uint256 tokenInOneEther) external\n', '    {\n', '        require(msg.sender == creator);\n', '        require(!crowdsaleClosed);\n', '        unitsOneEthCanBuy = tokenInOneEther;\n', '    }\n', '\n', '    function changeCreator(address _creator) external\n', '    {\n', '        require(msg.sender == creator);\n', '        creator = _creator;\n', '    }\n', '\n', '    function updateBeneficiary(address _beneficiary) external\n', '    {\n', '        require(msg.sender == creator);\n', '        beneficiary = _beneficiary;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData))\n', '            { throw; }\n', '        return true;\n', '    }\n', '}']