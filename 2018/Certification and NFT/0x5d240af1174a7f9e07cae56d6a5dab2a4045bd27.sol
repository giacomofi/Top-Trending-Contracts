['pragma solidity ^0.4.18;\n', '\n', '/// @title DepositWalletInterface\n', '///\n', '/// Defines an interface for a wallet that can be deposited/withdrawn by 3rd contract\n', 'contract DepositWalletInterface {\n', '    function deposit(address _asset, address _from, uint256 amount) public returns (uint);\n', '    function withdraw(address _asset, address _to, uint256 amount) public returns (uint);\n', '}\n', '\n', '/**\n', ' * @title Owned contract with safe ownership pass.\n', ' *\n', ' * Note: all the non constant functions return false instead of throwing in case if state change\n', ' * didn&#39;t happen yet.\n', ' */\n', 'contract Owned {\n', '    /**\n', '     * Contract owner address\n', '     */\n', '    address public contractOwner;\n', '\n', '    /**\n', '     * Contract owner address\n', '     */\n', '    address public pendingContractOwner;\n', '\n', '    function Owned() {\n', '        contractOwner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Owner check modifier\n', '    */\n', '    modifier onlyContractOwner() {\n', '        if (contractOwner == msg.sender) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Destroy contract and scrub a data\n', '     * @notice Only owner can call it\n', '     */\n', '    function destroy() onlyContractOwner {\n', '        suicide(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * Prepares ownership pass.\n', '     *\n', '     * Can only be called by current owner.\n', '     *\n', '     * @param _to address of the next owner. 0x0 is not allowed.\n', '     *\n', '     * @return success.\n', '     */\n', '    function changeContractOwnership(address _to) onlyContractOwner() returns(bool) {\n', '        if (_to  == 0x0) {\n', '            return false;\n', '        }\n', '\n', '        pendingContractOwner = _to;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Finalize ownership pass.\n', '     *\n', '     * Can only be called by pending owner.\n', '     *\n', '     * @return success.\n', '     */\n', '    function claimContractOwnership() returns(bool) {\n', '        if (pendingContractOwner != msg.sender) {\n', '            return false;\n', '        }\n', '\n', '        contractOwner = pendingContractOwner;\n', '        delete pendingContractOwner;\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed from, address indexed spender, uint256 value);\n', '    string public symbol;\n', '\n', '    function totalSupply() constant returns (uint256 supply);\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '}\n', '\n', '/**\n', ' * @title Generic owned destroyable contract\n', ' */\n', 'contract Object is Owned {\n', '    /**\n', '    *  Common result code. Means everything is fine.\n', '    */\n', '    uint constant OK = 1;\n', '    uint constant OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER = 8;\n', '\n', '    function withdrawnTokens(address[] tokens, address _to) onlyContractOwner returns(uint) {\n', '        for(uint i=0;i<tokens.length;i++) {\n', '            address token = tokens[i];\n', '            uint balance = ERC20Interface(token).balanceOf(this);\n', '            if(balance != 0)\n', '                ERC20Interface(token).transfer(_to,balance);\n', '        }\n', '        return OK;\n', '    }\n', '\n', '    function checkOnlyContractOwner() internal constant returns(uint) {\n', '        if (contractOwner == msg.sender) {\n', '            return OK;\n', '        }\n', '\n', '        return OWNED_ACCESS_DENIED_ONLY_CONTRACT_OWNER;\n', '    }\n', '}\n', '\n', 'contract BaseWallet is Object, DepositWalletInterface {\n', '\n', '    uint constant CUSTOMER_WALLET_SCOPE = 60000;\n', '    uint constant CUSTOMER_WALLET_NOT_OK = CUSTOMER_WALLET_SCOPE + 1;\n', '\n', '    address public customer;\n', '\n', '    modifier onlyCustomer() {\n', '        if (msg.sender != customer) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    function() public payable {\n', '        revert();\n', '    }\n', '\n', '    /// Init contract by setting Emission ProviderWallet address\n', '    /// that can be associated and have an account for this contract\n', '    ///\n', '    /// @dev Allowed only for contract owner\n', '    ///\n', '    /// @param _customer Emission Provider address\n', '    ///\n', '    /// @return  code\n', '    function init(address _customer) public onlyContractOwner returns (uint code) {\n', '        require(_customer != 0x0);\n', '        customer = _customer;\n', '        return OK;\n', '    }\n', '\n', '    /// Call `selfdestruct` when contract is not needed anymore. Also takes a list of tokens\n', '    /// that can be associated and have an account for this contract\n', '    ///\n', '    /// @dev Allowed only for contract owner\n', '    ///\n', '    /// @param tokens an array of tokens addresses\n', '    function destroy(address[] tokens) public onlyContractOwner {\n', '        withdrawnTokens(tokens, msg.sender);\n', '        selfdestruct(msg.sender);\n', '    }\n', '\n', '    /// @dev Call destroy(address[] tokens) instead\n', '    function destroy() public onlyContractOwner {\n', '        revert();\n', '    }\n', '\n', '    /// Deposits some amount of tokens on wallet&#39;s account using ERC20 tokens\n', '    ///\n', '    /// @dev Allowed only for rewards\n', '    ///\n', '    /// @param _asset an address of token\n', '    /// @param _from an address of a sender who is willing to transfer her resources\n', '    /// @param _amount an amount of tokens (resources) a sender wants to transfer\n', '    ///\n', '    /// @return code\n', '    function deposit(address _asset, address _from, uint256 _amount) public onlyCustomer returns (uint) {\n', '        if (!ERC20Interface(_asset).transferFrom(_from, this, _amount)) {\n', '            return CUSTOMER_WALLET_NOT_OK;\n', '        }\n', '        return OK;\n', '    }\n', '\n', '    /// Withdraws some amount of tokens from wallet&#39;s account using ERC20 tokens\n', '    ///\n', '    /// @dev Allowed only for rewards\n', '    ///\n', '    /// @param _asset an address of token\n', '    /// @param _to an address of a receiver who is willing to get stored resources\n', '    /// @param _amount an amount of tokens (resources) a receiver wants to get\n', '    ///\n', '    /// @return  code\n', '    function withdraw(address _asset, address _to, uint256 _amount) public onlyCustomer returns (uint) {\n', '        if (!ERC20Interface(_asset).transfer(_to, _amount)) {\n', '            return CUSTOMER_WALLET_NOT_OK;\n', '        }\n', '        return OK;\n', '    }\n', '\n', '    /// Approve some amount of tokens from wallet&#39;s account using ERC20 tokens\n', '    ///\n', '    /// @dev Allowed only for rewards\n', '    ///\n', '    /// @param _asset an address of token\n', '    /// @param _to an address of a receiver who is willing to get stored resources\n', '    /// @param _amount an amount of tokens (resources) a receiver wants to get\n', '    ///\n', '    /// @return  code\n', '    function approve(address _asset, address _to, uint256 _amount) public onlyCustomer returns (uint) {\n', '        if (!ERC20Interface(_asset).approve(_to, _amount)) {\n', '            return CUSTOMER_WALLET_NOT_OK;\n', '        }\n', '        return OK;\n', '    }\n', '}\n', '\n', 'contract ProfiteroleWallet is BaseWallet {\n', '\t\n', '}']