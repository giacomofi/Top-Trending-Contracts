['pragma solidity 0.4.24;\n', ' \n', '\n', 'interface IArbitrage {\n', '    function executeArbitrage(\n', '      address token,\n', '      uint256 amount,\n', '      address dest,\n', '      bytes data\n', '    )\n', '      external\n', '      returns (bool);\n', '}\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', 'contract IBank {\n', '    function totalSupplyOf(address token) public view returns (uint256 balance);\n', '    function borrowFor(address token, address borrower, uint256 amount) public;\n', '    function repay(address token, uint256 amount) external payable;\n', '}\n', '\n', '\n', '/**\n', ' * @title Helps contracts guard agains reentrancy attacks.\n', ' * @author Remco Bloemen <remco@2Ï€.com>\n', ' * @notice If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private reentrancyLock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!reentrancyLock);\n', '    reentrancyLock = true;\n', '    _;\n', '    reentrancyLock = false;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '/*\n', '\n', '  Copyright 2018 Contra Labs Inc.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '// @title FlashLender: Borrow from the bank and enforce repayment by the end of transaction execution.\n', '// @author Rich McAteer <rich@marble.org>, Max Wolff <max@marble.org>\n', 'contract FlashLender is ReentrancyGuard, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    string public version = &#39;0.1&#39;;\n', '    address public bank;\n', '    uint256 public fee;\n', '    \n', '    /**\n', '    * @dev Verify that the borrowed tokens are returned to the bank plus a fee by the end of transaction execution.\n', '    * @param token Address of the token to for arbitrage. 0x0 for Ether.\n', '    * @param amount Amount borrowed.\n', '    */\n', '    modifier isArbitrage(address token, uint256 amount) {\n', '        uint256 balance = IBank(bank).totalSupplyOf(token);\n', '        uint256 feeAmount = amount.mul(fee).div(10 ** 18); \n', '        _;\n', '        require(IBank(bank).totalSupplyOf(token) >= (balance.add(feeAmount)));\n', '    }\n', '\n', '    constructor(address _bank, uint256 _fee) public {\n', '        bank = _bank;\n', '        fee = _fee;\n', '    }\n', '\n', '    /**\n', '    * @dev Borrow from the bank on behalf of an arbitrage contract and execute the arbitrage contract&#39;s callback function.\n', '    * @param token Address of the token to borrow. 0x0 for Ether.\n', '    * @param amount Amount to borrow.\n', '    * @param dest Address of the account to receive arbitrage profits.\n', '    * @param data The data to execute the arbitrage trade.\n', '    */\n', '    function borrow(\n', '        address token,\n', '        uint256 amount,\n', '        address dest,\n', '        bytes data\n', '    )\n', '        external\n', '        nonReentrant\n', '        isArbitrage(token, amount)\n', '        returns (bool)\n', '    {\n', '        // Borrow from the bank and send to the arbitrageur.\n', '        IBank(bank).borrowFor(token, msg.sender, amount);\n', '        // Call the arbitrageur&#39;s execute arbitrage method.\n', '        return IArbitrage(msg.sender).executeArbitrage(token, amount, dest, data);\n', '    }\n', '\n', '    /**\n', '    * @dev Allow the owner to set the bank address.\n', '    * @param _bank Address of the bank.\n', '    */\n', '    function setBank(address _bank) external onlyOwner {\n', '        bank = _bank;\n', '    }\n', '\n', '    /**\n', '    * @dev Allow the owner to set the fee.\n', '    * @param _fee Fee to borrow, as a percentage of principal borrowed. 18 decimals of precision (e.g., 10^18 = 100% fee).\n', '    */\n', '    function setFee(uint256 _fee) external onlyOwner {\n', '        fee = _fee;\n', '    }\n', '\n', '}']
['pragma solidity 0.4.24;\n', ' \n', '\n', 'interface IArbitrage {\n', '    function executeArbitrage(\n', '      address token,\n', '      uint256 amount,\n', '      address dest,\n', '      bytes data\n', '    )\n', '      external\n', '      returns (bool);\n', '}\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', 'contract IBank {\n', '    function totalSupplyOf(address token) public view returns (uint256 balance);\n', '    function borrowFor(address token, address borrower, uint256 amount) public;\n', '    function repay(address token, uint256 amount) external payable;\n', '}\n', '\n', '\n', '/**\n', ' * @title Helps contracts guard agains reentrancy attacks.\n', ' * @author Remco Bloemen <remco@2Ï€.com>\n', ' * @notice If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private reentrancyLock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!reentrancyLock);\n', '    reentrancyLock = true;\n', '    _;\n', '    reentrancyLock = false;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '/*\n', '\n', '  Copyright 2018 Contra Labs Inc.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '// @title FlashLender: Borrow from the bank and enforce repayment by the end of transaction execution.\n', '// @author Rich McAteer <rich@marble.org>, Max Wolff <max@marble.org>\n', 'contract FlashLender is ReentrancyGuard, Ownable {\n', '    using SafeMath for uint256;\n', '\n', "    string public version = '0.1';\n", '    address public bank;\n', '    uint256 public fee;\n', '    \n', '    /**\n', '    * @dev Verify that the borrowed tokens are returned to the bank plus a fee by the end of transaction execution.\n', '    * @param token Address of the token to for arbitrage. 0x0 for Ether.\n', '    * @param amount Amount borrowed.\n', '    */\n', '    modifier isArbitrage(address token, uint256 amount) {\n', '        uint256 balance = IBank(bank).totalSupplyOf(token);\n', '        uint256 feeAmount = amount.mul(fee).div(10 ** 18); \n', '        _;\n', '        require(IBank(bank).totalSupplyOf(token) >= (balance.add(feeAmount)));\n', '    }\n', '\n', '    constructor(address _bank, uint256 _fee) public {\n', '        bank = _bank;\n', '        fee = _fee;\n', '    }\n', '\n', '    /**\n', "    * @dev Borrow from the bank on behalf of an arbitrage contract and execute the arbitrage contract's callback function.\n", '    * @param token Address of the token to borrow. 0x0 for Ether.\n', '    * @param amount Amount to borrow.\n', '    * @param dest Address of the account to receive arbitrage profits.\n', '    * @param data The data to execute the arbitrage trade.\n', '    */\n', '    function borrow(\n', '        address token,\n', '        uint256 amount,\n', '        address dest,\n', '        bytes data\n', '    )\n', '        external\n', '        nonReentrant\n', '        isArbitrage(token, amount)\n', '        returns (bool)\n', '    {\n', '        // Borrow from the bank and send to the arbitrageur.\n', '        IBank(bank).borrowFor(token, msg.sender, amount);\n', "        // Call the arbitrageur's execute arbitrage method.\n", '        return IArbitrage(msg.sender).executeArbitrage(token, amount, dest, data);\n', '    }\n', '\n', '    /**\n', '    * @dev Allow the owner to set the bank address.\n', '    * @param _bank Address of the bank.\n', '    */\n', '    function setBank(address _bank) external onlyOwner {\n', '        bank = _bank;\n', '    }\n', '\n', '    /**\n', '    * @dev Allow the owner to set the fee.\n', '    * @param _fee Fee to borrow, as a percentage of principal borrowed. 18 decimals of precision (e.g., 10^18 = 100% fee).\n', '    */\n', '    function setFee(uint256 _fee) external onlyOwner {\n', '        fee = _fee;\n', '    }\n', '\n', '}']
