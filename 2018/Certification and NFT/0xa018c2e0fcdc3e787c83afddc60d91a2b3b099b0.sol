['pragma solidity ^0.4.17;\n', '\n', '/*\n', '\n', ' * source       https://github.com/blockbitsio/\n', '\n', ' * @name        Application Entity Generic Contract\n', ' * @package     BlockBitsIO\n', ' * @author      Micky Socaci <micky@nowlive.ro>\n', '\n', '    Used for the ABI interface when assets need to call Application Entity.\n', '\n', '    This is required, otherwise we end up loading the assets themselves when we load the ApplicationEntity contract\n', '    and end up in a loop\n', '*/\n', '\n', '\n', '\n', 'contract ApplicationEntityABI {\n', '\n', '    address public ProposalsEntity;\n', '    address public FundingEntity;\n', '    address public MilestonesEntity;\n', '    address public MeetingsEntity;\n', '    address public BountyManagerEntity;\n', '    address public TokenManagerEntity;\n', '    address public ListingContractEntity;\n', '    address public FundingManagerEntity;\n', '    address public NewsContractEntity;\n', '\n', '    bool public _initialized = false;\n', '    bool public _locked = false;\n', '    uint8 public CurrentEntityState;\n', '    uint8 public AssetCollectionNum;\n', '    address public GatewayInterfaceAddress;\n', '    address public deployerAddress;\n', '    address testAddressAllowUpgradeFrom;\n', '    mapping (bytes32 => uint8) public EntityStates;\n', '    mapping (bytes32 => address) public AssetCollection;\n', '    mapping (uint8 => bytes32) public AssetCollectionIdToName;\n', '    mapping (bytes32 => uint256) public BylawsUint256;\n', '    mapping (bytes32 => bytes32) public BylawsBytes32;\n', '\n', '    function ApplicationEntity() public;\n', '    function getEntityState(bytes32 name) public view returns (uint8);\n', '    function linkToGateway( address _GatewayInterfaceAddress, bytes32 _sourceCodeUrl ) external;\n', '    function setUpgradeState(uint8 state) public ;\n', '    function addAssetProposals(address _assetAddresses) external;\n', '    function addAssetFunding(address _assetAddresses) external;\n', '    function addAssetMilestones(address _assetAddresses) external;\n', '    function addAssetMeetings(address _assetAddresses) external;\n', '    function addAssetBountyManager(address _assetAddresses) external;\n', '    function addAssetTokenManager(address _assetAddresses) external;\n', '    function addAssetFundingManager(address _assetAddresses) external;\n', '    function addAssetListingContract(address _assetAddresses) external;\n', '    function addAssetNewsContract(address _assetAddresses) external;\n', '    function getAssetAddressByName(bytes32 _name) public view returns (address);\n', '    function setBylawUint256(bytes32 name, uint256 value) public;\n', '    function getBylawUint256(bytes32 name) public view returns (uint256);\n', '    function setBylawBytes32(bytes32 name, bytes32 value) public;\n', '    function getBylawBytes32(bytes32 name) public view returns (bytes32);\n', '    function initialize() external returns (bool);\n', '    function getParentAddress() external view returns(address);\n', '    function createCodeUpgradeProposal( address _newAddress, bytes32 _sourceCodeUrl ) external returns (uint256);\n', '    function acceptCodeUpgradeProposal(address _newAddress) external;\n', '    function initializeAssetsToThisApplication() external returns (bool);\n', '    function transferAssetsToNewApplication(address _newAddress) external returns (bool);\n', '    function lock() external returns (bool);\n', '    function canInitiateCodeUpgrade(address _sender) public view returns(bool);\n', '    function doStateChanges() public;\n', '    function hasRequiredStateChanges() public view returns (bool);\n', '    function anyAssetHasChanges() public view returns (bool);\n', '    function extendedAnyAssetHasChanges() internal view returns (bool);\n', '    function getRequiredStateChanges() public view returns (uint8, uint8);\n', '    function getTimestamp() view public returns (uint256);\n', '\n', '}\n', '\n', '/*\n', '\n', ' * source       https://github.com/blockbitsio/\n', '\n', ' * @name        Token Contract\n', ' * @package     BlockBitsIO\n', ' * @author      Micky Socaci <micky@nowlive.ro>\n', '\n', ' Zeppelin ERC20 Standard Token\n', '\n', '*/\n', '\n', '\n', '\n', 'contract ABIToken {\n', '\n', '    string public  symbol;\n', '    string public  name;\n', '    uint8 public   decimals;\n', '    uint256 public totalSupply;\n', '    string public  version;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    address public manager;\n', '    address public deployer;\n', '    bool public mintingFinished = false;\n', '    bool public initialized = false;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool success);\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success);\n', '    function mint(address _to, uint256 _amount) public returns (bool);\n', '    function finishMinting() public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 indexed value);\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '}\n', '\n', '/*\n', '\n', ' * source       https://github.com/blockbitsio/\n', '\n', ' * @name        Application Asset Contract ABI\n', ' * @package     BlockBitsIO\n', ' * @author      Micky Socaci <micky@nowlive.ro>\n', '\n', ' Any contract inheriting this will be usable as an Asset in the Application Entity\n', '\n', '*/\n', '\n', '\n', '\n', 'contract ABIApplicationAsset {\n', '\n', '    bytes32 public assetName;\n', '    uint8 public CurrentEntityState;\n', '    uint8 public RecordNum;\n', '    bool public _initialized;\n', '    bool public _settingsApplied;\n', '    address public owner;\n', '    address public deployerAddress;\n', '    mapping (bytes32 => uint8) public EntityStates;\n', '    mapping (bytes32 => uint8) public RecordStates;\n', '\n', '    function setInitialApplicationAddress(address _ownerAddress) public;\n', '    function setInitialOwnerAndName(bytes32 _name) external returns (bool);\n', '    function getRecordState(bytes32 name) public view returns (uint8);\n', '    function getEntityState(bytes32 name) public view returns (uint8);\n', '    function applyAndLockSettings() public returns(bool);\n', '    function transferToNewOwner(address _newOwner) public returns (bool);\n', '    function getApplicationAssetAddressByName(bytes32 _name) public returns(address);\n', '    function getApplicationState() public view returns (uint8);\n', '    function getApplicationEntityState(bytes32 name) public view returns (uint8);\n', '    function getAppBylawUint256(bytes32 name) public view returns (uint256);\n', '    function getAppBylawBytes32(bytes32 name) public view returns (bytes32);\n', '    function getTimestamp() view public returns (uint256);\n', '\n', '\n', '}\n', '\n', '/*\n', '\n', ' * source       https://github.com/blockbitsio/\n', '\n', ' * @name        Funding Contract ABI\n', ' * @package     BlockBitsIO\n', ' * @author      Micky Socaci <micky@nowlive.ro>\n', '\n', ' Contains the Funding Contract code deployed and linked to the Application Entity\n', '\n', '\n', '    !!! Links directly to Milestones\n', '\n', '*/\n', '\n', '\n', '\n', '\n', '\n', 'contract ABIFunding is ABIApplicationAsset {\n', '\n', '    address public multiSigOutputAddress;\n', '    address public DirectInput;\n', '    address public MilestoneInput;\n', '    address public TokenManagerEntity;\n', '    address public FundingManagerEntity;\n', '\n', '    struct FundingStage {\n', '        bytes32 name;\n', '        uint8   state;\n', '        uint256 time_start;\n', '        uint256 time_end;\n', '        uint256 amount_cap_soft;            // 0 = not enforced\n', '        uint256 amount_cap_hard;            // 0 = not enforced\n', '        uint256 amount_raised;              // 0 = not enforced\n', '        // funding method settings\n', '        uint256 minimum_entry;\n', '        uint8   methods;                    // FundingMethodIds\n', '        // token settings\n', '        uint256 fixed_tokens;\n', '        uint8   price_addition_percentage;  //\n', '        uint8   token_share_percentage;\n', '        uint8   index;\n', '    }\n', '\n', '    mapping (uint8 => FundingStage) public Collection;\n', '    uint8 public FundingStageNum;\n', '    uint8 public currentFundingStage;\n', '    uint256 public AmountRaised;\n', '    uint256 public MilestoneAmountRaised;\n', '    uint256 public GlobalAmountCapSoft;\n', '    uint256 public GlobalAmountCapHard;\n', '    uint8 public TokenSellPercentage;\n', '    uint256 public Funding_Setting_funding_time_start;\n', '    uint256 public Funding_Setting_funding_time_end;\n', '    uint256 public Funding_Setting_cashback_time_start;\n', '    uint256 public Funding_Setting_cashback_time_end;\n', '    uint256 public Funding_Setting_cashback_before_start_wait_duration;\n', '    uint256 public Funding_Setting_cashback_duration;\n', '\n', '\n', '    function addFundingStage(\n', '        bytes32 _name,\n', '        uint256 _time_start,\n', '        uint256 _time_end,\n', '        uint256 _amount_cap_soft,\n', '        uint256 _amount_cap_hard,   // required > 0\n', '        uint8   _methods,\n', '        uint256 _minimum_entry,\n', '        uint256 _fixed_tokens,\n', '        uint8   _price_addition_percentage,\n', '        uint8   _token_share_percentage\n', '    )\n', '    public;\n', '\n', '    function addSettings(address _outputAddress, uint256 soft_cap, uint256 hard_cap, uint8 sale_percentage, address _direct, address _milestone ) public;\n', '    function getStageAmount(uint8 StageId) public view returns ( uint256 );\n', '    function allowedPaymentMethod(uint8 _payment_method) public pure returns (bool);\n', '    function receivePayment(address _sender, uint8 _payment_method) payable public returns(bool);\n', '    function canAcceptPayment(uint256 _amount) public view returns (bool);\n', '    function getValueOverCurrentCap(uint256 _amount) public view returns (uint256);\n', '    function isFundingStageUpdateAllowed(uint8 _new_state ) public view returns (bool);\n', '    function getRecordStateRequiredChanges() public view returns (uint8);\n', '    function doStateChanges() public;\n', '    function hasRequiredStateChanges() public view returns (bool);\n', '    function getRequiredStateChanges() public view returns (uint8, uint8, uint8);\n', '\n', '}\n', '\n', '/*\n', '\n', ' * source       https://github.com/blockbitsio/\n', '\n', ' * @name        Milestones Contract\n', ' * @package     BlockBitsIO\n', ' * @author      Micky Socaci <micky@nowlive.ro>\n', '\n', ' Contains the Milestones Contract code deployed and linked to the Application Entity\n', '\n', '*/\n', '\n', '\n', '\n', '\n', '\n', 'contract ABIMilestones is ABIApplicationAsset {\n', '\n', '    struct Record {\n', '        bytes32 name;\n', '        string description;                     // will change to hash pointer ( external storage )\n', '        uint8 state;\n', '        uint256 duration;\n', '        uint256 time_start;                     // start at unixtimestamp\n', '        uint256 last_state_change_time;         // time of last state change\n', '        uint256 time_end;                       // estimated end time >> can be increased by proposal\n', '        uint256 time_ended;                     // actual end time\n', '        uint256 meeting_time;\n', '        uint8 funding_percentage;\n', '        uint8 index;\n', '    }\n', '\n', '    uint8 public currentRecord;\n', '    uint256 public MilestoneCashBackTime = 0;\n', '    mapping (uint8 => Record) public Collection;\n', '    mapping (bytes32 => bool) public MilestonePostponingHash;\n', '    mapping (bytes32 => uint256) public ProposalIdByHash;\n', '\n', '    function getBylawsProjectDevelopmentStart() public view returns (uint256);\n', '    function getBylawsMinTimeInTheFutureForMeetingCreation() public view returns (uint256);\n', '    function getBylawsCashBackVoteRejectedDuration() public view returns (uint256);\n', '    function addRecord( bytes32 _name, string _description, uint256 _duration, uint8 _perc ) public;\n', '    function getMilestoneFundingPercentage(uint8 recordId) public view returns (uint8);\n', '    function doStateChanges() public;\n', '    function getRecordStateRequiredChanges() public view returns (uint8);\n', '    function hasRequiredStateChanges() public view returns (bool);\n', '    function afterVoteNoCashBackTime() public view returns ( bool );\n', '    function getHash(uint8 actionType, bytes32 arg1, bytes32 arg2) public pure returns ( bytes32 );\n', '    function getCurrentHash() public view returns ( bytes32 );\n', '    function getCurrentProposalId() internal view returns ( uint256 );\n', '    function setCurrentMilestoneMeetingTime(uint256 _meeting_time) public;\n', '    function isRecordUpdateAllowed(uint8 _new_state ) public view returns (bool);\n', '    function getRequiredStateChanges() public view returns (uint8, uint8, uint8);\n', '    function ApplicationIsInDevelopment() public view returns(bool);\n', '    function MeetingTimeSetFailure() public view returns (bool);\n', '\n', '}\n', '\n', '/*\n', '\n', ' * source       https://github.com/blockbitsio/\n', '\n', ' * @name        Proposals Contract\n', ' * @package     BlockBitsIO\n', ' * @author      Micky Socaci <micky@nowlive.ro>\n', '\n', ' Contains the Proposals Contract code deployed and linked to the Application Entity\n', '\n', '*/\n', '\n', '\n', '\n', '\n', '\n', 'contract ABIProposals is ABIApplicationAsset {\n', '\n', '    address public Application;\n', '    address public ListingContractEntity;\n', '    address public FundingEntity;\n', '    address public FundingManagerEntity;\n', '    address public TokenManagerEntity;\n', '    address public TokenEntity;\n', '    address public MilestonesEntity;\n', '\n', '    struct ProposalRecord {\n', '        address creator;\n', '        bytes32 name;\n', '        uint8 actionType;\n', '        uint8 state;\n', '        bytes32 hash;                       // action name + args hash\n', '        address addr;\n', '        bytes32 sourceCodeUrl;\n', '        uint256 extra;\n', '        uint256 time_start;\n', '        uint256 time_end;\n', '        uint256 index;\n', '    }\n', '\n', '    struct VoteStruct {\n', '        address voter;\n', '        uint256 time;\n', '        bool    vote;\n', '        uint256 power;\n', '        bool    annulled;\n', '        uint256 index;\n', '    }\n', '\n', '    struct ResultRecord {\n', '        uint256 totalAvailable;\n', '        uint256 requiredForResult;\n', '        uint256 totalSoFar;\n', '        uint256 yes;\n', '        uint256 no;\n', '        bool    requiresCounting;\n', '    }\n', '\n', '    uint8 public ActiveProposalNum;\n', '    uint256 public VoteCountPerProcess;\n', '    bool public EmergencyFundingReleaseApproved;\n', '\n', '    mapping (bytes32 => uint8) public ActionTypes;\n', '    mapping (uint8 => uint256) public ActiveProposalIds;\n', '    mapping (uint256 => bool) public ExpiredProposalIds;\n', '    mapping (uint256 => ProposalRecord) public ProposalsById;\n', '    mapping (bytes32 => uint256) public ProposalIdByHash;\n', '    mapping (uint256 => mapping (uint256 => VoteStruct) ) public VotesByProposalId;\n', '    mapping (uint256 => mapping (address => VoteStruct) ) public VotesByCaster;\n', '    mapping (uint256 => uint256) public VotesNumByProposalId;\n', '    mapping (uint256 => ResultRecord ) public ResultsByProposalId;\n', '    mapping (uint256 => uint256) public lastProcessedVoteIdByProposal;\n', '    mapping (uint256 => uint256) public ProcessedVotesByProposal;\n', '    mapping (uint256 => uint256) public VoteCountAtProcessingStartByProposal;\n', '\n', '    function getRecordState(bytes32 name) public view returns (uint8);\n', '    function getActionType(bytes32 name) public view returns (uint8);\n', '    function getProposalState(uint256 _proposalId) public view returns (uint8);\n', '    function getBylawsProposalVotingDuration() public view returns (uint256);\n', '    function getBylawsMilestoneMinPostponing() public view returns (uint256);\n', '    function getBylawsMilestoneMaxPostponing() public view returns (uint256);\n', '    function getHash(uint8 actionType, bytes32 arg1, bytes32 arg2) public pure returns ( bytes32 );\n', '    function process() public;\n', '    function hasRequiredStateChanges() public view returns (bool);\n', '    function getRequiredStateChanges() public view returns (uint8);\n', '    function addCodeUpgradeProposal(address _addr, bytes32 _sourceCodeUrl) external returns (uint256);\n', '    function createMilestoneAcceptanceProposal() external returns (uint256);\n', '    function createMilestonePostponingProposal(uint256 _duration) external returns (uint256);\n', '    function getCurrentMilestonePostponingProposalDuration() public view returns (uint256);\n', '    function getCurrentMilestoneProposalStatusForType(uint8 _actionType ) public view returns (uint8);\n', '    function createEmergencyFundReleaseProposal() external returns (uint256);\n', '    function createDelistingProposal(uint256 _projectId) external returns (uint256);\n', '    function RegisterVote(uint256 _proposalId, bool _myVote) public;\n', '    function hasPreviousVote(uint256 _proposalId, address _voter) public view returns (bool);\n', '    function getTotalTokenVotingPower(address _voter) public view returns ( uint256 );\n', '    function getVotingPower(uint256 _proposalId, address _voter) public view returns ( uint256 );\n', '    function setVoteCountPerProcess(uint256 _perProcess) external;\n', '    function ProcessVoteTotals(uint256 _proposalId, uint256 length) public;\n', '    function canEndVoting(uint256 _proposalId) public view returns (bool);\n', '    function getProposalType(uint256 _proposalId) public view returns (uint8);\n', '    function expiryChangesState(uint256 _proposalId) public view returns (bool);\n', '    function needsProcessing(uint256 _proposalId) public view returns (bool);\n', '    function getMyVoteForCurrentMilestoneRelease(address _voter) public view returns (bool);\n', '    function getHasVoteForCurrentMilestoneRelease(address _voter) public view returns (bool);\n', '    function getMyVote(uint256 _proposalId, address _voter) public view returns (bool);\n', '\n', '}\n', '\n', '/*\n', '\n', ' * source       https://github.com/blockbitsio/\n', '\n', ' * @name        Token Manager Contract\n', ' * @package     BlockBitsIO\n', ' * @author      Micky Socaci <micky@nowlive.ro>\n', '\n', '*/\n', '\n', '\n', '\n', '\n', '\n', 'contract ABITokenManager is ABIApplicationAsset {\n', '\n', '    address public TokenSCADAEntity;\n', '    address public TokenEntity;\n', '    address public MarketingMethodAddress;\n', '    bool OwnerTokenBalancesReleased = false;\n', '\n', '    function addSettings(address _scadaAddress, address _tokenAddress, address _marketing ) public;\n', '    function getTokenSCADARequiresHardCap() public view returns (bool);\n', '    function mint(address _to, uint256 _amount) public returns (bool);\n', '    function finishMinting() public returns (bool);\n', '    function mintForMarketingPool(address _to, uint256 _amount) external returns (bool);\n', '    function ReleaseOwnersLockedTokens(address _multiSigOutputAddress) public returns (bool);\n', '\n', '}\n', '\n', '/*\n', '\n', ' * source       https://github.com/blockbitsio/\n', '\n', ' * @name        Funding Contract ABI\n', ' * @package     BlockBitsIO\n', ' * @author      Micky Socaci <micky@nowlive.ro>\n', '\n', ' Contains the Funding Contract code deployed and linked to the Application Entity\n', '\n', '*/\n', '\n', '\n', '\n', '\n', '\n', 'contract ABIFundingManager is ABIApplicationAsset {\n', '\n', '    bool public fundingProcessed;\n', '    bool FundingPoolBalancesAllocated;\n', '    uint8 public VaultCountPerProcess;\n', '    uint256 public lastProcessedVaultId;\n', '    uint256 public vaultNum;\n', '    uint256 public LockedVotingTokens;\n', '    bytes32 public currentTask;\n', '    mapping (bytes32 => bool) public taskByHash;\n', '    mapping  (address => address) public vaultList;\n', '    mapping  (uint256 => address) public vaultById;\n', '\n', '    function receivePayment(address _sender, uint8 _payment_method, uint8 _funding_stage) payable public returns(bool);\n', '    function getMyVaultAddress(address _sender) public view returns (address);\n', '    function setVaultCountPerProcess(uint8 _perProcess) external;\n', '    function getHash(bytes32 actionType, bytes32 arg1) public pure returns ( bytes32 );\n', '    function getCurrentMilestoneProcessed() public view returns (bool);\n', '    function processFundingFailedFinished() public view returns (bool);\n', '    function processFundingSuccessfulFinished() public view returns (bool);\n', '    function getCurrentMilestoneIdHash() internal view returns (bytes32);\n', '    function processMilestoneFinished() public view returns (bool);\n', '    function processEmergencyFundReleaseFinished() public view returns (bool);\n', '    function getAfterTransferLockedTokenBalances(address vaultAddress, bool excludeCurrent) public view returns (uint256);\n', '    function VaultRequestedUpdateForLockedVotingTokens(address owner) public;\n', '    function doStateChanges() public;\n', '    function hasRequiredStateChanges() public view returns (bool);\n', '    function getRequiredStateChanges() public view returns (uint8, uint8);\n', '    function ApplicationInFundingOrDevelopment() public view returns(bool);\n', '\n', '}\n', '\n', '/*\n', '\n', ' * source       https://github.com/blockbitsio/\n', '\n', ' * @name        Token Stake Calculation And Distribution Algorithm - Type 3 - Sell a variable amount of tokens for a fixed price\n', ' * @package     BlockBitsIO\n', ' * @author      Micky Socaci <micky@nowlive.ro>\n', '\n', '\n', '    Inputs:\n', '\n', '    Defined number of tokens per wei ( X Tokens = 1 wei )\n', '    Received amount of ETH\n', '    Generates:\n', '\n', '    Total Supply of tokens available in Funding Phase respectively Project\n', '    Observations:\n', '\n', '    Will sell the whole supply of Tokens available to Current Funding Phase\n', '    Use cases:\n', '\n', '    Any Funding Phase where you want the first Funding Phase to determine the token supply of the whole Project\n', '\n', '*/\n', '\n', '\n', '\n', '\n', 'contract ABITokenSCADAVariable {\n', '    bool public SCADA_requires_hard_cap = true;\n', '    bool public initialized;\n', '    address public deployerAddress;\n', '    function addSettings(address _fundingContract) public;\n', '    function requiresHardCap() public view returns (bool);\n', '    function getTokensForValueInCurrentStage(uint256 _value) public view returns (uint256);\n', '    function getTokensForValueInStage(uint8 _stage, uint256 _value) public view returns (uint256);\n', '    function getBoughtTokens( address _vaultAddress, bool _direct ) public view returns (uint256);\n', '}\n', '\n', '/*\n', '\n', ' * source       https://github.com/blockbitsio/\n', '\n', ' * @name        Funding Vault\n', ' * @package     BlockBitsIO\n', ' * @author      Micky Socaci <micky@nowlive.ro>\n', '\n', '    each purchase creates a separate funding vault contract\n', '*/\n', '\n', '\n', 'contract FundingVault {\n', '\n', '    /* Asset initialised or not */\n', '    bool public _initialized = false;\n', '\n', '    /*\n', '        Addresses:\n', '        vaultOwner - the address of the wallet that stores purchases in this vault ( investor address )\n', '        outputAddress - address where funds go upon successful funding or successful milestone release\n', '        managerAddress - address of the "FundingManager"\n', '    */\n', '    address public vaultOwner ;\n', '    address public outputAddress;\n', '    address public managerAddress;\n', '\n', '    /*\n', '        Lock and BlackHole settings\n', '    */\n', '\n', '    bool public allFundingProcessed = false;\n', '    bool public DirectFundingProcessed = false;\n', '\n', '    /*\n', '        Assets\n', '    */\n', '    // ApplicationEntityABI public ApplicationEntity;\n', '    ABIFunding FundingEntity;\n', '    ABIFundingManager FundingManagerEntity;\n', '    ABIMilestones MilestonesEntity;\n', '    ABIProposals ProposalsEntity;\n', '    ABITokenSCADAVariable TokenSCADAEntity;\n', '    ABIToken TokenEntity ;\n', '\n', '    /*\n', '        Globals\n', '    */\n', '    uint256 public amount_direct = 0;\n', '    uint256 public amount_milestone = 0;\n', '\n', '    // bylaws\n', '    bool public emergencyFundReleased = false;\n', '    uint8 emergencyFundPercentage = 0;\n', '    uint256 BylawsCashBackOwnerMiaDuration;\n', '    uint256 BylawsCashBackVoteRejectedDuration;\n', '    uint256 BylawsProposalVotingDuration;\n', '\n', '    struct PurchaseStruct {\n', '        uint256 unix_time;\n', '        uint8 payment_method;\n', '        uint256 amount;\n', '        uint8 funding_stage;\n', '        uint16 index;\n', '    }\n', '\n', '    mapping(uint16 => PurchaseStruct) public purchaseRecords;\n', '    uint16 public purchaseRecordsNum;\n', '\n', '    event EventPaymentReceived(uint8 indexed _payment_method, uint256 indexed _amount, uint16 indexed _index );\n', '    event VaultInitialized(address indexed _owner);\n', '\n', '    function initialize(\n', '        address _owner,\n', '        address _output,\n', '        address _fundingAddress,\n', '        address _milestoneAddress,\n', '        address _proposalsAddress\n', '    )\n', '        public\n', '        requireNotInitialised\n', '        returns(bool)\n', '    {\n', '        VaultInitialized(_owner);\n', '\n', '        outputAddress = _output;\n', '        vaultOwner = _owner;\n', '\n', '        // whomever creates this contract is the manager.\n', '        managerAddress = msg.sender;\n', '\n', '        // assets\n', '        FundingEntity = ABIFunding(_fundingAddress);\n', '        FundingManagerEntity = ABIFundingManager(managerAddress);\n', '        MilestonesEntity = ABIMilestones(_milestoneAddress);\n', '        ProposalsEntity = ABIProposals(_proposalsAddress);\n', '\n', '        address TokenManagerAddress = FundingEntity.getApplicationAssetAddressByName("TokenManager");\n', '        ABITokenManager TokenManagerEntity = ABITokenManager(TokenManagerAddress);\n', '\n', '        address TokenAddress = TokenManagerEntity.TokenEntity();\n', '        TokenEntity = ABIToken(TokenAddress);\n', '\n', '        address TokenSCADAAddress = TokenManagerEntity.TokenSCADAEntity();\n', '        TokenSCADAEntity = ABITokenSCADAVariable(TokenSCADAAddress);\n', '\n', '        // set Emergency Fund Percentage if available.\n', '        address ApplicationEntityAddress = TokenManagerEntity.owner();\n', '        ApplicationEntityABI ApplicationEntity = ApplicationEntityABI(ApplicationEntityAddress);\n', '\n', '        // get Application Bylaws\n', '        emergencyFundPercentage             = uint8( ApplicationEntity.getBylawUint256("emergency_fund_percentage") );\n', '        BylawsCashBackOwnerMiaDuration      = ApplicationEntity.getBylawUint256("cashback_owner_mia_dur") ;\n', '        BylawsCashBackVoteRejectedDuration  = ApplicationEntity.getBylawUint256("cashback_investor_no") ;\n', '        BylawsProposalVotingDuration        = ApplicationEntity.getBylawUint256("proposal_voting_duration") ;\n', '\n', '        // init\n', '        _initialized = true;\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '    /*\n', "        The funding contract decides if a vault should receive payments or not, since it's the one that creates them,\n", "        no point in creating one if you can't accept payments.\n", '    */\n', '\n', '    mapping (uint8 => uint256) public stageAmounts;\n', '    mapping (uint8 => uint256) public stageAmountsDirect;\n', '\n', '    function addPayment(\n', '        uint8 _payment_method,\n', '        uint8 _funding_stage\n', '    )\n', '        public\n', '        payable\n', '        requireInitialised\n', '        onlyManager\n', '        returns (bool)\n', '    {\n', '        if(msg.value > 0 && FundingEntity.allowedPaymentMethod(_payment_method)) {\n', '\n', '            // store payment\n', '            PurchaseStruct storage purchase = purchaseRecords[++purchaseRecordsNum];\n', '                purchase.unix_time = now;\n', '                purchase.payment_method = _payment_method;\n', '                purchase.amount = msg.value;\n', '                purchase.funding_stage = _funding_stage;\n', '                purchase.index = purchaseRecordsNum;\n', '\n', '            // assign payment to direct or milestone\n', '            if(_payment_method == 1) {\n', '                amount_direct+= purchase.amount;\n', '                stageAmountsDirect[_funding_stage]+=purchase.amount;\n', '            }\n', '\n', '            if(_payment_method == 2) {\n', '                amount_milestone+= purchase.amount;\n', '            }\n', '\n', '            // in order to not iterate through purchase records, we just increase funding stage amount.\n', '            // issue with iterating over them, while processing vaults, would be that someone could create a large\n', '            // number of payments, which would result in an "out of gas" / stack overflow issue, that would lock\n', "            // our contract, so we don't really want to do that.\n", '            // doing it this way also saves some gas\n', '            stageAmounts[_funding_stage]+=purchase.amount;\n', '\n', '            EventPaymentReceived( purchase.payment_method, purchase.amount, purchase.index );\n', '            return true;\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function getBoughtTokens() public view returns (uint256) {\n', '        return TokenSCADAEntity.getBoughtTokens( address(this), false );\n', '    }\n', '\n', '    function getDirectBoughtTokens() public view returns (uint256) {\n', '        return TokenSCADAEntity.getBoughtTokens( address(this), true );\n', '    }\n', '\n', '\n', '    mapping (uint8 => uint256) public etherBalances;\n', '    mapping (uint8 => uint256) public tokenBalances;\n', '    uint8 public BalanceNum = 0;\n', '\n', '    bool public BalancesInitialised = false;\n', '    function initMilestoneTokenAndEtherBalances() internal\n', '    {\n', '        if(BalancesInitialised == false) {\n', '\n', '            uint256 milestoneTokenBalance = TokenEntity.balanceOf(address(this));\n', '            uint256 milestoneEtherBalance = this.balance;\n', '\n', "            // no need to worry about fractions because at the last milestone, we send everything that's left.\n", '\n', "            // emergency fund takes it's percentage from initial balances.\n", '            if(emergencyFundPercentage > 0) {\n', '                tokenBalances[0] = milestoneTokenBalance / 100 * emergencyFundPercentage;\n', '                etherBalances[0] = milestoneEtherBalance / 100 * emergencyFundPercentage;\n', '\n', '                milestoneTokenBalance-=tokenBalances[0];\n', '                milestoneEtherBalance-=etherBalances[0];\n', '            }\n', '\n', "            // milestones percentages are then taken from what's left.\n", '            for(uint8 i = 1; i <= MilestonesEntity.RecordNum(); i++) {\n', '\n', '                uint8 perc = MilestonesEntity.getMilestoneFundingPercentage(i);\n', '                tokenBalances[i] = milestoneTokenBalance / 100 * perc;\n', '                etherBalances[i] = milestoneEtherBalance / 100 * perc;\n', '            }\n', '\n', '            BalanceNum = i;\n', '            BalancesInitialised = true;\n', '        }\n', '    }\n', '\n', '    function ReleaseFundsAndTokens()\n', '        public\n', '        requireInitialised\n', '        onlyManager\n', '        returns (bool)\n', '    {\n', "        // first make sure cashback is not possible, and that we've not processed everything in this vault\n", '        if(!canCashBack() && allFundingProcessed == false) {\n', '\n', '            if(FundingManagerEntity.CurrentEntityState() == FundingManagerEntity.getEntityState("FUNDING_SUCCESSFUL_PROGRESS")) {\n', '\n', '                // case 1, direct funding only\n', '                if(amount_direct > 0 && amount_milestone == 0) {\n', '\n', '                    // if we have direct funding and no milestone balance, transfer everything and lock vault\n', '                    // to save gas in future processing runs.\n', '\n', '                    // transfer tokens to the investor\n', '                    TokenEntity.transfer(vaultOwner, TokenEntity.balanceOf( address(this) ) );\n', '\n', "                    // transfer ether to the owner's wallet\n", '                    outputAddress.transfer(this.balance);\n', '\n', '                    // lock vault.. and enable black hole methods\n', '                    allFundingProcessed = true;\n', '\n', '                } else {\n', '                // case 2 and 3, direct funding only\n', '\n', '                    if(amount_direct > 0 && DirectFundingProcessed == false ) {\n', '                        TokenEntity.transfer(vaultOwner, getDirectBoughtTokens() );\n', '                        // transfer "direct funding" ether to the owner\'s wallet\n', '                        outputAddress.transfer(amount_direct);\n', '                        DirectFundingProcessed = true;\n', '                    }\n', '\n', '                    // process and initialize milestone balances, emergency fund, etc, once\n', '                    initMilestoneTokenAndEtherBalances();\n', '                }\n', '                return true;\n', '\n', '            } else if(FundingManagerEntity.CurrentEntityState() == FundingManagerEntity.getEntityState("MILESTONE_PROCESS_PROGRESS")) {\n', '\n', '                // get current milestone so we know which one we need to release funds for.\n', '                uint8 milestoneId = MilestonesEntity.currentRecord();\n', '\n', '                uint256 transferTokens = tokenBalances[milestoneId];\n', '                uint256 transferEther = etherBalances[milestoneId];\n', '\n', '                if(milestoneId == BalanceNum - 1) {\n', "                    // we're processing the last milestone and balance, this means we're transferring everything left.\n", '                    // this is done to make sure we\'ve transferred everything, even "ether that got mistakenly sent to this address"\n', '                    // as well as the emergency fund if it has not been used.\n', '                    transferTokens = TokenEntity.balanceOf(address(this));\n', '                    transferEther = this.balance;\n', '                }\n', '\n', "                // set balances to 0 so we can't transfer multiple times.\n", '                // tokenBalances[milestoneId] = 0;\n', '                // etherBalances[milestoneId] = 0;\n', '\n', '                // transfer tokens to the investor\n', '                TokenEntity.transfer(vaultOwner, transferTokens );\n', '\n', "                // transfer ether to the owner's wallet\n", '                outputAddress.transfer(transferEther);\n', '\n', '                if(milestoneId == BalanceNum - 1) {\n', '                    // lock vault.. and enable black hole methods\n', '                    allFundingProcessed = true;\n', '                }\n', '\n', '                return true;\n', '            }\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '\n', '    function releaseTokensAndEtherForEmergencyFund()\n', '        public\n', '        requireInitialised\n', '        onlyManager\n', '        returns (bool)\n', '    {\n', '        if( emergencyFundReleased == false && emergencyFundPercentage > 0) {\n', '\n', '            // transfer tokens to the investor\n', '            TokenEntity.transfer(vaultOwner, tokenBalances[0] );\n', '\n', "            // transfer ether to the owner's wallet\n", '            outputAddress.transfer(etherBalances[0]);\n', '\n', '            emergencyFundReleased = true;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function ReleaseFundsToInvestor()\n', '        public\n', '        requireInitialised\n', '        isOwner\n', '    {\n', '        if(canCashBack()) {\n', '\n', "            // IF we're doing a cashback\n", '            // transfer vault tokens back to owner address\n', '            // send all ether to wallet owner\n', '\n', '            // get token balance\n', '            uint256 myBalance = TokenEntity.balanceOf(address(this));\n', '            // transfer all vault tokens to owner\n', '            if(myBalance > 0) {\n', '                TokenEntity.transfer(outputAddress, myBalance );\n', '            }\n', '\n', '            // now transfer all remaining ether back to investor address\n', '            vaultOwner.transfer(this.balance);\n', '\n', "            // update FundingManager Locked Token Amount, so we don't break voting\n", '            FundingManagerEntity.VaultRequestedUpdateForLockedVotingTokens( vaultOwner );\n', '\n', "            // disallow further processing, so we don't break Funding Manager.\n", '            // this method can still be called to collect future black hole ether to this vault.\n', '            allFundingProcessed = true;\n', '        }\n', '    }\n', '\n', '    /*\n', '        1 - if the funding of the project Failed, allows investors to claim their locked ether back.\n', '        2 - if the Investor votes NO to a Development Milestone Completion Proposal, where the majority\n', '            also votes NO allows investors to claim their locked ether back.\n', '        3 - project owner misses to set the time for a Development Milestone Completion Meeting allows investors\n', '        to claim their locked ether back.\n', '    */\n', '    function canCashBack() public view requireInitialised returns (bool) {\n', '\n', '        // case 1\n', '        if(checkFundingStateFailed()) {\n', '            return true;\n', '        }\n', '        // case 2\n', '        if(checkMilestoneStateInvestorVotedNoVotingEndedNo()) {\n', '            return true;\n', '        }\n', '        // case 3\n', '        if(checkOwnerFailedToSetTimeOnMeeting()) {\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function checkFundingStateFailed() public view returns (bool) {\n', '        if(FundingEntity.CurrentEntityState() == FundingEntity.getEntityState("FAILED_FINAL") ) {\n', '            return true;\n', '        }\n', '\n', '        // also check if funding period ended, and 7 days have passed and no processing was done.\n', '        if( FundingEntity.getTimestamp() >= FundingEntity.Funding_Setting_cashback_time_start() ) {\n', '\n', '            // should only be possible if funding entity has been stuck in processing for more than 7 days.\n', '            if( FundingEntity.CurrentEntityState() != FundingEntity.getEntityState("SUCCESSFUL_FINAL") ) {\n', '                return true;\n', '            }\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function checkMilestoneStateInvestorVotedNoVotingEndedNo() public view returns (bool) {\n', '        if(MilestonesEntity.CurrentEntityState() == MilestonesEntity.getEntityState("VOTING_ENDED_NO") ) {\n', '            // first we need to make sure we actually voted.\n', '            if( ProposalsEntity.getHasVoteForCurrentMilestoneRelease(vaultOwner) == true) {\n', '                // now make sure we voted NO, and if so return true\n', '                if( ProposalsEntity.getMyVoteForCurrentMilestoneRelease( vaultOwner ) == false) {\n', '                    return true;\n', '                }\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function checkOwnerFailedToSetTimeOnMeeting() public view returns (bool) {\n', '        // Looks like the project owner is missing in action\n', '        // they only have to do 1 thing, which is set the meeting time 7 days before the end of the milestone so that\n', '        // investors know when they need to show up for a progress report meeting\n', '\n', '        // as they did not, we consider them missing in action and allow investors to retrieve their locked ether back\n', '        if( MilestonesEntity.CurrentEntityState() == MilestonesEntity.getEntityState("DEADLINE_MEETING_TIME_FAILED") ) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '\n', '    modifier isOwner() {\n', '        require(msg.sender == vaultOwner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyManager() {\n', '        require(msg.sender == managerAddress);\n', '        _;\n', '    }\n', '\n', '    modifier requireInitialised() {\n', '        require(_initialized == true);\n', '        _;\n', '    }\n', '\n', '    modifier requireNotInitialised() {\n', '        require(_initialized == false);\n', '        _;\n', '    }\n', '}']