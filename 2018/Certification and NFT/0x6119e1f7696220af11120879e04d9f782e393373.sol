['// our mirrors:\n', '// ftec.io\n', '// ftec.ai \n', '// our official Telegram group:\n', '// t.me/FTECofficial\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract MultiOwnable {\n', '\n', '    mapping (address => bool) public isOwner;\n', '    address[] public ownerHistory;\n', '\n', '    event OwnerAddedEvent(address indexed _newOwner);\n', '    event OwnerRemovedEvent(address indexed _oldOwner);\n', '\n', '    function MultiOwnable() public {\n', '        // Add default owner\n', '        address owner = msg.sender;\n', '        ownerHistory.push(owner);\n', '        isOwner[owner] = true;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner[msg.sender]);\n', '        _;\n', '    }\n', '    \n', '    function ownerHistoryCount() public view returns (uint) {\n', '        return ownerHistory.length;\n', '    }\n', '\n', '    /** Add extra owner. */\n', '    function addOwner(address owner) onlyOwner public {\n', '        require(owner != address(0));\n', '        require(!isOwner[owner]);\n', '        ownerHistory.push(owner);\n', '        isOwner[owner] = true;\n', '        OwnerAddedEvent(owner);\n', '    }\n', '\n', '    /** Remove extra owner. */\n', '    function removeOwner(address owner) onlyOwner public {\n', '        require(isOwner[owner]);\n', '        isOwner[owner] = false;\n', '        OwnerRemovedEvent(owner);\n', '    }\n', '}\n', '\n', 'contract Pausable is MultiOwnable {\n', '\n', '    bool public paused;\n', '\n', '    modifier ifNotPaused {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier ifPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    // Called by the owner on emergency, triggers paused state\n', '    function pause() external onlyOwner ifNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    // Called by the owner on end of emergency, returns to normal state\n', '    function resume() external onlyOwner ifPaused {\n', '        paused = false;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is ERC20 {\n', '    \n', '    using SafeMath for uint;\n', '\n', '    mapping(address => uint256) balances;\n', '    \n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n', '    /// @param _from Address from where tokens are withdrawn.\n', '    /// @param _to Address to where tokens are sent.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        \n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Sets approved amount of tokens for spender. Returns success.\n', '    /// @param _spender Address of allowed account.\n', '    /// @param _value Number of approved tokens.\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Returns number of allowed tokens for given address.\n', '    /// @param _owner Address of token owner.\n', '    /// @param _spender Address of token spender.\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract CommonToken is StandardToken, MultiOwnable {\n', '    \n', '    string public constant name   = &#39;FTEC&#39;;\n', '    string public constant symbol = &#39;FTEC&#39;;\n', '    uint8 public constant decimals = 18;\n', '    \n', '    uint256 public saleLimit;   // 85% of tokens for sale.\n', '    uint256 public teamTokens;  // 7% of tokens goes to the team and will be locked for 1 year.\n', '    // 8% of the rest tokens will be used for bounty, advisors, and airdrops.\n', '    \n', '    // 7% of team tokens will be locked at this address for 1 year.\n', '    address public teamWallet; // Team address.\n', '    \n', '    uint public unlockTeamTokensTime = now + 1 years;\n', '\n', '    // The main account that holds all tokens at the beginning and during tokensale.\n', '    address public seller; // Seller address (main holder of tokens)\n', '\n', '    uint256 public tokensSold; // (e18) Number of tokens sold through all tiers or tokensales.\n', '    uint256 public totalSales; // Total number of sales (including external sales) made through all tiers or tokensales.\n', '\n', '    // Lock the transfer functions during tokensales to prevent price speculations.\n', '    bool public locked = true;\n', '    \n', '    event SellEvent(address indexed _seller, address indexed _buyer, uint256 _value);\n', '    event ChangeSellerEvent(address indexed _oldSeller, address indexed _newSeller);\n', '    event Burn(address indexed _burner, uint256 _value);\n', '    event Unlock();\n', '\n', '    function CommonToken(\n', '        address _seller,\n', '        address _teamWallet\n', '    ) MultiOwnable() public {\n', '        \n', '        totalSupply = 998400000 ether;\n', '        saleLimit   = 848640000 ether;\n', '        teamTokens  =  69888000 ether;\n', '\n', '        seller = _seller;\n', '        teamWallet = _teamWallet;\n', '\n', '        uint sellerTokens = totalSupply - teamTokens;\n', '        balances[seller] = sellerTokens;\n', '        Transfer(0x0, seller, sellerTokens);\n', '        \n', '        balances[teamWallet] = teamTokens;\n', '        Transfer(0x0, teamWallet, teamTokens);\n', '    }\n', '    \n', '    modifier ifUnlocked(address _from) {\n', '        require(!locked);\n', '        \n', '        // If requested a transfer from the team wallet:\n', '        if (_from == teamWallet) {\n', '            require(now >= unlockTeamTokensTime);\n', '        }\n', '        \n', '        _;\n', '    }\n', '    \n', '    /** Can be called once by super owner. */\n', '    function unlock() onlyOwner public {\n', '        require(locked);\n', '        locked = false;\n', '        Unlock();\n', '    }\n', '\n', '    /**\n', '     * An address can become a new seller only in case it has no tokens.\n', '     * This is required to prevent stealing of tokens  from newSeller via \n', '     * 2 calls of this function.\n', '     */\n', '    function changeSeller(address newSeller) onlyOwner public returns (bool) {\n', '        require(newSeller != address(0));\n', '        require(seller != newSeller);\n', '        \n', '        // To prevent stealing of tokens from newSeller via 2 calls of changeSeller:\n', '        require(balances[newSeller] == 0);\n', '\n', '        address oldSeller = seller;\n', '        uint256 unsoldTokens = balances[oldSeller];\n', '        balances[oldSeller] = 0;\n', '        balances[newSeller] = unsoldTokens;\n', '        Transfer(oldSeller, newSeller, unsoldTokens);\n', '\n', '        seller = newSeller;\n', '        ChangeSellerEvent(oldSeller, newSeller);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * User-friendly alternative to sell() function.\n', '     */\n', '    function sellNoDecimals(address _to, uint256 _value) public returns (bool) {\n', '        return sell(_to, _value * 1e18);\n', '    }\n', '\n', '    function sell(address _to, uint256 _value) onlyOwner public returns (bool) {\n', '\n', '        // Check that we are not out of limit and still can sell tokens:\n', '        require(tokensSold.add(_value) <= saleLimit);\n', '\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '        require(_value <= balances[seller]);\n', '\n', '        balances[seller] = balances[seller].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(seller, _to, _value);\n', '\n', '        totalSales++;\n', '        tokensSold = tokensSold.add(_value);\n', '        SellEvent(seller, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * Until all tokens are sold, tokens can be transfered to/from owner&#39;s accounts.\n', '     */\n', '    function transfer(address _to, uint256 _value) ifUnlocked(msg.sender) public returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * Until all tokens are sold, tokens can be transfered to/from owner&#39;s accounts.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) ifUnlocked(_from) public returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool) {\n', '        require(_value > 0);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Transfer(msg.sender, 0x0, _value);\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract CommonTokensale is MultiOwnable, Pausable {\n', '    \n', '    using SafeMath for uint;\n', '    \n', '    address public beneficiary1;\n', '    address public beneficiary2;\n', '    address public beneficiary3;\n', '    \n', '    // Balances of beneficiaries:\n', '    uint public balance1;\n', '    uint public balance2;\n', '    uint public balance3;\n', '    \n', '    // Token contract reference.\n', '    CommonToken public token;\n', '\n', '    uint public minPaymentWei = 0.1 ether;\n', '    \n', '    uint public minCapWei;\n', '    uint public maxCapWei;\n', '\n', '    uint public startTime;\n', '    uint public endTime;\n', '    \n', '    // Stats for current tokensale:\n', '    \n', '    uint public totalTokensSold;  // Total amount of tokens sold during this tokensale.\n', '    uint public totalWeiReceived; // Total amount of wei received during this tokensale.\n', '    \n', '    // This mapping stores info on how many ETH (wei) have been sent to this tokensale from specific address.\n', '    mapping (address => uint256) public buyerToSentWei;\n', '    \n', '    event ReceiveEthEvent(address indexed _buyer, uint256 _amountWei);\n', '    \n', '    function CommonTokensale(\n', '        address _token,\n', '        address _beneficiary1,\n', '        address _beneficiary2,\n', '        address _beneficiary3,\n', '        uint _startTime,\n', '        uint _endTime\n', '    ) MultiOwnable() public {\n', '\n', '        require(_token != address(0));\n', '        token = CommonToken(_token);\n', '\n', '        beneficiary1 = _beneficiary1;\n', '        beneficiary2 = _beneficiary2;\n', '        beneficiary3 = _beneficiary3;\n', '\n', '        startTime = _startTime;\n', '        endTime   = _endTime;\n', '    }\n', '\n', '    /** The fallback function corresponds to a donation in ETH. */\n', '    function() public payable {\n', '        sellTokensForEth(msg.sender, msg.value);\n', '    }\n', '    \n', '    function sellTokensForEth(\n', '        address _buyer, \n', '        uint256 _amountWei\n', '    ) ifNotPaused internal {\n', '        \n', '        require(startTime <= now && now <= endTime);\n', '        require(_amountWei >= minPaymentWei);\n', '        require(totalWeiReceived.add(_amountWei) <= maxCapWei);\n', '\n', '        uint tokensE18 = weiToTokens(_amountWei);\n', '        // Transfer tokens to buyer.\n', '        require(token.sell(_buyer, tokensE18));\n', '        \n', '        // Update total stats:\n', '        totalTokensSold = totalTokensSold.add(tokensE18);\n', '        totalWeiReceived = totalWeiReceived.add(_amountWei);\n', '        buyerToSentWei[_buyer] = buyerToSentWei[_buyer].add(_amountWei);\n', '        ReceiveEthEvent(_buyer, _amountWei);\n', '        \n', '        // Split received amount between balances of three beneficiaries.\n', '        uint part = _amountWei / 3;\n', '        balance1 = balance1.add(_amountWei - part * 2);\n', '        balance2 = balance2.add(part);\n', '        balance3 = balance3.add(part);\n', '    }\n', '    \n', '    /** Calc how much tokens you can buy at current time. */\n', '    function weiToTokens(uint _amountWei) public view returns (uint) {\n', '        return _amountWei.mul(tokensPerWei(_amountWei));\n', '    }\n', '    \n', '    function tokensPerWei(uint _amountWei) public view returns (uint256) {\n', '        uint expectedTotal = totalWeiReceived.add(_amountWei);\n', '        \n', '        // Presale pricing rules:\n', '        if (expectedTotal <  1000 ether) return 39960;\n', '        if (expectedTotal <  2000 ether) return 37480;\n', '        if (expectedTotal <  4000 ether) return 35270;\n', '        \n', '        // Public sale pricing rules:\n', '        if (expectedTotal <  6000 ether) return 33300; \n', '        if (expectedTotal <  8000 ether) return 32580;\n', '        if (expectedTotal < 11000 ether) return 31880;\n', '        if (expectedTotal < 15500 ether) return 31220;\n', '        if (expectedTotal < 20500 ether) return 30590;\n', '        if (expectedTotal < 26500 ether) return 29970;\n', '        \n', '        return 29970; // Default token price with no bonuses.\n', '    }\n', '    \n', '    function canWithdraw() public view returns (bool);\n', '    \n', '    function withdraw1(address _to) public {\n', '        require(canWithdraw());\n', '        require(msg.sender == beneficiary1);\n', '        require(balance1 > 0);\n', '        \n', '        uint bal = balance1;\n', '        balance1 = 0;\n', '        _to.transfer(bal);\n', '    }\n', '    \n', '    function withdraw2(address _to) public {\n', '        require(canWithdraw());\n', '        require(msg.sender == beneficiary2);\n', '        require(balance2 > 0);\n', '        \n', '        uint bal = balance2;\n', '        balance2 = 0;\n', '        _to.transfer(bal);\n', '    }\n', '    \n', '    function withdraw3(address _to) public {\n', '        require(canWithdraw());\n', '        require(msg.sender == beneficiary3);\n', '        require(balance3 > 0);\n', '        \n', '        uint bal = balance3;\n', '        balance3 = 0;\n', '        _to.transfer(bal);\n', '    }\n', '}\n', '\n', 'contract Presale is CommonTokensale {\n', '    \n', '    // In case min (soft) cap is not reached, token buyers will be able to \n', '    // refund their contributions during 3 months after presale is finished.\n', '    uint public refundDeadlineTime;\n', '\n', '    // Total amount of wei refunded if min (soft) cap is not reached.\n', '    uint public totalWeiRefunded;\n', '    \n', '    event RefundEthEvent(address indexed _buyer, uint256 _amountWei);\n', '    \n', '    function Presale(\n', '        address _token,\n', '        address _beneficiary1,\n', '        address _beneficiary2,\n', '        address _beneficiary3,\n', '        uint _startTime,\n', '        uint _endTime\n', '    ) CommonTokensale(\n', '        _token,\n', '        _beneficiary1,\n', '        _beneficiary2,\n', '        _beneficiary3,\n', '        _startTime,\n', '        _endTime\n', '    ) public {\n', '        minCapWei = 2000 ether;\n', '        maxCapWei = 4000 ether;\n', '        refundDeadlineTime = _endTime + 3 * 30 days;\n', '    }\n', '\n', '    /** \n', '     * During presale it will be possible to withdraw only in two cases:\n', '     * min cap reached OR refund period expired.\n', '     */\n', '    function canWithdraw() public view returns (bool) {\n', '        return totalWeiReceived >= minCapWei || now > refundDeadlineTime;\n', '    }\n', '    \n', '    /** \n', '     * It will be possible to refund only if min (soft) cap is not reached and \n', '     * refund requested during 3 months after presale finished.\n', '     */\n', '    function canRefund() public view returns (bool) {\n', '        return totalWeiReceived < minCapWei && endTime < now && now <= refundDeadlineTime;\n', '    }\n', '\n', '    function refund() public {\n', '        require(canRefund());\n', '        \n', '        address buyer = msg.sender;\n', '        uint amount = buyerToSentWei[buyer];\n', '        require(amount > 0);\n', '        \n', '        // Redistribute left balance between three beneficiaries.\n', '        uint newBal = this.balance.sub(amount);\n', '        uint part = newBal / 3;\n', '        balance1 = newBal - part * 2;\n', '        balance2 = part;\n', '        balance3 = part;\n', '        \n', '        RefundEthEvent(buyer, amount);\n', '        buyerToSentWei[buyer] = 0;\n', '        totalWeiRefunded = totalWeiRefunded.add(amount);\n', '        buyer.transfer(amount);\n', '    }\n', '}\n', '\n', 'contract PublicSale is CommonTokensale {\n', '    \n', '    function PublicSale(\n', '        address _token,\n', '        address _beneficiary1,\n', '        address _beneficiary2,\n', '        address _beneficiary3,\n', '        uint _startTime,\n', '        uint _endTime,\n', '        uint _presaleCapEth\n', '    ) CommonTokensale(\n', '        _token,\n', '        _beneficiary1,\n', '        _beneficiary2,\n', '        _beneficiary3,\n', '        _startTime,\n', '        _endTime\n', '    ) public {\n', '        maxCapWei = 26500 ether;\n', '        uint presaleCapWei = _presaleCapEth * 1e18;\n', '        totalWeiReceived = totalWeiReceived.add(presaleCapWei);\n', '    }\n', '\n', '    /** \n', '     * During public sale it is possinble to withdraw at any time.\n', '     */\n', '    function canWithdraw() public view returns (bool) {\n', '        return true;\n', '    }\n', '}\n', '\n', '// Will be deployed after ProdPresale capmaign ended successfully.\n', 'contract ProdPublicSale is PublicSale {\n', '    function ProdPublicSale() PublicSale(\n', '        0x6BeC54E4fEa5d541fB14de96993b8E11d81159b2, // TODO Set token address\n', '        0xe4478843d1f28a31748E0b0e862a360A34b0d575, // TODO Set beneficiary1 address\n', '        0x827d1C65d19cf7382161346F90d3C1b43260f4c3, // TODO Set beneficiary2 address\n', '        0x850F8b608efe73966d55f3380845015C467E9086, // TODO Set beneficiary3 address\n', '        1529503200, // 2018-06-20 14:00 - startTime\n', '        1531922400, // 2018-07-18 14:00 - endTime\n', '        2028      // TODO Set presale cap in ETH (how much was rised during presale?)\n', '    ) public {}\n', '}']
['// our mirrors:\n', '// ftec.io\n', '// ftec.ai \n', '// our official Telegram group:\n', '// t.me/FTECofficial\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract MultiOwnable {\n', '\n', '    mapping (address => bool) public isOwner;\n', '    address[] public ownerHistory;\n', '\n', '    event OwnerAddedEvent(address indexed _newOwner);\n', '    event OwnerRemovedEvent(address indexed _oldOwner);\n', '\n', '    function MultiOwnable() public {\n', '        // Add default owner\n', '        address owner = msg.sender;\n', '        ownerHistory.push(owner);\n', '        isOwner[owner] = true;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner[msg.sender]);\n', '        _;\n', '    }\n', '    \n', '    function ownerHistoryCount() public view returns (uint) {\n', '        return ownerHistory.length;\n', '    }\n', '\n', '    /** Add extra owner. */\n', '    function addOwner(address owner) onlyOwner public {\n', '        require(owner != address(0));\n', '        require(!isOwner[owner]);\n', '        ownerHistory.push(owner);\n', '        isOwner[owner] = true;\n', '        OwnerAddedEvent(owner);\n', '    }\n', '\n', '    /** Remove extra owner. */\n', '    function removeOwner(address owner) onlyOwner public {\n', '        require(isOwner[owner]);\n', '        isOwner[owner] = false;\n', '        OwnerRemovedEvent(owner);\n', '    }\n', '}\n', '\n', 'contract Pausable is MultiOwnable {\n', '\n', '    bool public paused;\n', '\n', '    modifier ifNotPaused {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier ifPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    // Called by the owner on emergency, triggers paused state\n', '    function pause() external onlyOwner ifNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    // Called by the owner on end of emergency, returns to normal state\n', '    function resume() external onlyOwner ifPaused {\n', '        paused = false;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is ERC20 {\n', '    \n', '    using SafeMath for uint;\n', '\n', '    mapping(address => uint256) balances;\n', '    \n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n', '    /// @param _from Address from where tokens are withdrawn.\n', '    /// @param _to Address to where tokens are sent.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        \n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Sets approved amount of tokens for spender. Returns success.\n', '    /// @param _spender Address of allowed account.\n', '    /// @param _value Number of approved tokens.\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Returns number of allowed tokens for given address.\n', '    /// @param _owner Address of token owner.\n', '    /// @param _spender Address of token spender.\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract CommonToken is StandardToken, MultiOwnable {\n', '    \n', "    string public constant name   = 'FTEC';\n", "    string public constant symbol = 'FTEC';\n", '    uint8 public constant decimals = 18;\n', '    \n', '    uint256 public saleLimit;   // 85% of tokens for sale.\n', '    uint256 public teamTokens;  // 7% of tokens goes to the team and will be locked for 1 year.\n', '    // 8% of the rest tokens will be used for bounty, advisors, and airdrops.\n', '    \n', '    // 7% of team tokens will be locked at this address for 1 year.\n', '    address public teamWallet; // Team address.\n', '    \n', '    uint public unlockTeamTokensTime = now + 1 years;\n', '\n', '    // The main account that holds all tokens at the beginning and during tokensale.\n', '    address public seller; // Seller address (main holder of tokens)\n', '\n', '    uint256 public tokensSold; // (e18) Number of tokens sold through all tiers or tokensales.\n', '    uint256 public totalSales; // Total number of sales (including external sales) made through all tiers or tokensales.\n', '\n', '    // Lock the transfer functions during tokensales to prevent price speculations.\n', '    bool public locked = true;\n', '    \n', '    event SellEvent(address indexed _seller, address indexed _buyer, uint256 _value);\n', '    event ChangeSellerEvent(address indexed _oldSeller, address indexed _newSeller);\n', '    event Burn(address indexed _burner, uint256 _value);\n', '    event Unlock();\n', '\n', '    function CommonToken(\n', '        address _seller,\n', '        address _teamWallet\n', '    ) MultiOwnable() public {\n', '        \n', '        totalSupply = 998400000 ether;\n', '        saleLimit   = 848640000 ether;\n', '        teamTokens  =  69888000 ether;\n', '\n', '        seller = _seller;\n', '        teamWallet = _teamWallet;\n', '\n', '        uint sellerTokens = totalSupply - teamTokens;\n', '        balances[seller] = sellerTokens;\n', '        Transfer(0x0, seller, sellerTokens);\n', '        \n', '        balances[teamWallet] = teamTokens;\n', '        Transfer(0x0, teamWallet, teamTokens);\n', '    }\n', '    \n', '    modifier ifUnlocked(address _from) {\n', '        require(!locked);\n', '        \n', '        // If requested a transfer from the team wallet:\n', '        if (_from == teamWallet) {\n', '            require(now >= unlockTeamTokensTime);\n', '        }\n', '        \n', '        _;\n', '    }\n', '    \n', '    /** Can be called once by super owner. */\n', '    function unlock() onlyOwner public {\n', '        require(locked);\n', '        locked = false;\n', '        Unlock();\n', '    }\n', '\n', '    /**\n', '     * An address can become a new seller only in case it has no tokens.\n', '     * This is required to prevent stealing of tokens  from newSeller via \n', '     * 2 calls of this function.\n', '     */\n', '    function changeSeller(address newSeller) onlyOwner public returns (bool) {\n', '        require(newSeller != address(0));\n', '        require(seller != newSeller);\n', '        \n', '        // To prevent stealing of tokens from newSeller via 2 calls of changeSeller:\n', '        require(balances[newSeller] == 0);\n', '\n', '        address oldSeller = seller;\n', '        uint256 unsoldTokens = balances[oldSeller];\n', '        balances[oldSeller] = 0;\n', '        balances[newSeller] = unsoldTokens;\n', '        Transfer(oldSeller, newSeller, unsoldTokens);\n', '\n', '        seller = newSeller;\n', '        ChangeSellerEvent(oldSeller, newSeller);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * User-friendly alternative to sell() function.\n', '     */\n', '    function sellNoDecimals(address _to, uint256 _value) public returns (bool) {\n', '        return sell(_to, _value * 1e18);\n', '    }\n', '\n', '    function sell(address _to, uint256 _value) onlyOwner public returns (bool) {\n', '\n', '        // Check that we are not out of limit and still can sell tokens:\n', '        require(tokensSold.add(_value) <= saleLimit);\n', '\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '        require(_value <= balances[seller]);\n', '\n', '        balances[seller] = balances[seller].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(seller, _to, _value);\n', '\n', '        totalSales++;\n', '        tokensSold = tokensSold.add(_value);\n', '        SellEvent(seller, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', "     * Until all tokens are sold, tokens can be transfered to/from owner's accounts.\n", '     */\n', '    function transfer(address _to, uint256 _value) ifUnlocked(msg.sender) public returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', "     * Until all tokens are sold, tokens can be transfered to/from owner's accounts.\n", '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) ifUnlocked(_from) public returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool) {\n', '        require(_value > 0);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Transfer(msg.sender, 0x0, _value);\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract CommonTokensale is MultiOwnable, Pausable {\n', '    \n', '    using SafeMath for uint;\n', '    \n', '    address public beneficiary1;\n', '    address public beneficiary2;\n', '    address public beneficiary3;\n', '    \n', '    // Balances of beneficiaries:\n', '    uint public balance1;\n', '    uint public balance2;\n', '    uint public balance3;\n', '    \n', '    // Token contract reference.\n', '    CommonToken public token;\n', '\n', '    uint public minPaymentWei = 0.1 ether;\n', '    \n', '    uint public minCapWei;\n', '    uint public maxCapWei;\n', '\n', '    uint public startTime;\n', '    uint public endTime;\n', '    \n', '    // Stats for current tokensale:\n', '    \n', '    uint public totalTokensSold;  // Total amount of tokens sold during this tokensale.\n', '    uint public totalWeiReceived; // Total amount of wei received during this tokensale.\n', '    \n', '    // This mapping stores info on how many ETH (wei) have been sent to this tokensale from specific address.\n', '    mapping (address => uint256) public buyerToSentWei;\n', '    \n', '    event ReceiveEthEvent(address indexed _buyer, uint256 _amountWei);\n', '    \n', '    function CommonTokensale(\n', '        address _token,\n', '        address _beneficiary1,\n', '        address _beneficiary2,\n', '        address _beneficiary3,\n', '        uint _startTime,\n', '        uint _endTime\n', '    ) MultiOwnable() public {\n', '\n', '        require(_token != address(0));\n', '        token = CommonToken(_token);\n', '\n', '        beneficiary1 = _beneficiary1;\n', '        beneficiary2 = _beneficiary2;\n', '        beneficiary3 = _beneficiary3;\n', '\n', '        startTime = _startTime;\n', '        endTime   = _endTime;\n', '    }\n', '\n', '    /** The fallback function corresponds to a donation in ETH. */\n', '    function() public payable {\n', '        sellTokensForEth(msg.sender, msg.value);\n', '    }\n', '    \n', '    function sellTokensForEth(\n', '        address _buyer, \n', '        uint256 _amountWei\n', '    ) ifNotPaused internal {\n', '        \n', '        require(startTime <= now && now <= endTime);\n', '        require(_amountWei >= minPaymentWei);\n', '        require(totalWeiReceived.add(_amountWei) <= maxCapWei);\n', '\n', '        uint tokensE18 = weiToTokens(_amountWei);\n', '        // Transfer tokens to buyer.\n', '        require(token.sell(_buyer, tokensE18));\n', '        \n', '        // Update total stats:\n', '        totalTokensSold = totalTokensSold.add(tokensE18);\n', '        totalWeiReceived = totalWeiReceived.add(_amountWei);\n', '        buyerToSentWei[_buyer] = buyerToSentWei[_buyer].add(_amountWei);\n', '        ReceiveEthEvent(_buyer, _amountWei);\n', '        \n', '        // Split received amount between balances of three beneficiaries.\n', '        uint part = _amountWei / 3;\n', '        balance1 = balance1.add(_amountWei - part * 2);\n', '        balance2 = balance2.add(part);\n', '        balance3 = balance3.add(part);\n', '    }\n', '    \n', '    /** Calc how much tokens you can buy at current time. */\n', '    function weiToTokens(uint _amountWei) public view returns (uint) {\n', '        return _amountWei.mul(tokensPerWei(_amountWei));\n', '    }\n', '    \n', '    function tokensPerWei(uint _amountWei) public view returns (uint256) {\n', '        uint expectedTotal = totalWeiReceived.add(_amountWei);\n', '        \n', '        // Presale pricing rules:\n', '        if (expectedTotal <  1000 ether) return 39960;\n', '        if (expectedTotal <  2000 ether) return 37480;\n', '        if (expectedTotal <  4000 ether) return 35270;\n', '        \n', '        // Public sale pricing rules:\n', '        if (expectedTotal <  6000 ether) return 33300; \n', '        if (expectedTotal <  8000 ether) return 32580;\n', '        if (expectedTotal < 11000 ether) return 31880;\n', '        if (expectedTotal < 15500 ether) return 31220;\n', '        if (expectedTotal < 20500 ether) return 30590;\n', '        if (expectedTotal < 26500 ether) return 29970;\n', '        \n', '        return 29970; // Default token price with no bonuses.\n', '    }\n', '    \n', '    function canWithdraw() public view returns (bool);\n', '    \n', '    function withdraw1(address _to) public {\n', '        require(canWithdraw());\n', '        require(msg.sender == beneficiary1);\n', '        require(balance1 > 0);\n', '        \n', '        uint bal = balance1;\n', '        balance1 = 0;\n', '        _to.transfer(bal);\n', '    }\n', '    \n', '    function withdraw2(address _to) public {\n', '        require(canWithdraw());\n', '        require(msg.sender == beneficiary2);\n', '        require(balance2 > 0);\n', '        \n', '        uint bal = balance2;\n', '        balance2 = 0;\n', '        _to.transfer(bal);\n', '    }\n', '    \n', '    function withdraw3(address _to) public {\n', '        require(canWithdraw());\n', '        require(msg.sender == beneficiary3);\n', '        require(balance3 > 0);\n', '        \n', '        uint bal = balance3;\n', '        balance3 = 0;\n', '        _to.transfer(bal);\n', '    }\n', '}\n', '\n', 'contract Presale is CommonTokensale {\n', '    \n', '    // In case min (soft) cap is not reached, token buyers will be able to \n', '    // refund their contributions during 3 months after presale is finished.\n', '    uint public refundDeadlineTime;\n', '\n', '    // Total amount of wei refunded if min (soft) cap is not reached.\n', '    uint public totalWeiRefunded;\n', '    \n', '    event RefundEthEvent(address indexed _buyer, uint256 _amountWei);\n', '    \n', '    function Presale(\n', '        address _token,\n', '        address _beneficiary1,\n', '        address _beneficiary2,\n', '        address _beneficiary3,\n', '        uint _startTime,\n', '        uint _endTime\n', '    ) CommonTokensale(\n', '        _token,\n', '        _beneficiary1,\n', '        _beneficiary2,\n', '        _beneficiary3,\n', '        _startTime,\n', '        _endTime\n', '    ) public {\n', '        minCapWei = 2000 ether;\n', '        maxCapWei = 4000 ether;\n', '        refundDeadlineTime = _endTime + 3 * 30 days;\n', '    }\n', '\n', '    /** \n', '     * During presale it will be possible to withdraw only in two cases:\n', '     * min cap reached OR refund period expired.\n', '     */\n', '    function canWithdraw() public view returns (bool) {\n', '        return totalWeiReceived >= minCapWei || now > refundDeadlineTime;\n', '    }\n', '    \n', '    /** \n', '     * It will be possible to refund only if min (soft) cap is not reached and \n', '     * refund requested during 3 months after presale finished.\n', '     */\n', '    function canRefund() public view returns (bool) {\n', '        return totalWeiReceived < minCapWei && endTime < now && now <= refundDeadlineTime;\n', '    }\n', '\n', '    function refund() public {\n', '        require(canRefund());\n', '        \n', '        address buyer = msg.sender;\n', '        uint amount = buyerToSentWei[buyer];\n', '        require(amount > 0);\n', '        \n', '        // Redistribute left balance between three beneficiaries.\n', '        uint newBal = this.balance.sub(amount);\n', '        uint part = newBal / 3;\n', '        balance1 = newBal - part * 2;\n', '        balance2 = part;\n', '        balance3 = part;\n', '        \n', '        RefundEthEvent(buyer, amount);\n', '        buyerToSentWei[buyer] = 0;\n', '        totalWeiRefunded = totalWeiRefunded.add(amount);\n', '        buyer.transfer(amount);\n', '    }\n', '}\n', '\n', 'contract PublicSale is CommonTokensale {\n', '    \n', '    function PublicSale(\n', '        address _token,\n', '        address _beneficiary1,\n', '        address _beneficiary2,\n', '        address _beneficiary3,\n', '        uint _startTime,\n', '        uint _endTime,\n', '        uint _presaleCapEth\n', '    ) CommonTokensale(\n', '        _token,\n', '        _beneficiary1,\n', '        _beneficiary2,\n', '        _beneficiary3,\n', '        _startTime,\n', '        _endTime\n', '    ) public {\n', '        maxCapWei = 26500 ether;\n', '        uint presaleCapWei = _presaleCapEth * 1e18;\n', '        totalWeiReceived = totalWeiReceived.add(presaleCapWei);\n', '    }\n', '\n', '    /** \n', '     * During public sale it is possinble to withdraw at any time.\n', '     */\n', '    function canWithdraw() public view returns (bool) {\n', '        return true;\n', '    }\n', '}\n', '\n', '// Will be deployed after ProdPresale capmaign ended successfully.\n', 'contract ProdPublicSale is PublicSale {\n', '    function ProdPublicSale() PublicSale(\n', '        0x6BeC54E4fEa5d541fB14de96993b8E11d81159b2, // TODO Set token address\n', '        0xe4478843d1f28a31748E0b0e862a360A34b0d575, // TODO Set beneficiary1 address\n', '        0x827d1C65d19cf7382161346F90d3C1b43260f4c3, // TODO Set beneficiary2 address\n', '        0x850F8b608efe73966d55f3380845015C467E9086, // TODO Set beneficiary3 address\n', '        1529503200, // 2018-06-20 14:00 - startTime\n', '        1531922400, // 2018-07-18 14:00 - endTime\n', '        2028      // TODO Set presale cap in ETH (how much was rised during presale?)\n', '    ) public {}\n', '}']
