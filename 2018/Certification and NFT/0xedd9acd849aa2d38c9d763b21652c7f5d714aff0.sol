['pragma solidity ^0.4.25;\n', '\n', 'contract token {\n', '    function transfer(address receiver, uint256 amount) public;\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function burnFrom(address from, uint256 value) public;\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', 'contract owned {\n', '        address public owner;\n', '\n', '        constructor() public {\n', '            owner = 0x953600669b794BB7a2E0Bc6C5a7f5fA96c3c1928;\n', '        }\n', '\n', '        modifier onlyOwner {\n', '            require(msg.sender == owner);\n', '            _;\n', '        }\n', '\n', '        function transferOwnership(address newOwner) onlyOwner public {\n', '            owner = newOwner;\n', '        }\n', '}\n', '\n', 'contract EzyStayzCrowdsale is owned{\n', '    using SafeMath for uint256;\n', '    \n', '    address public beneficiary;\n', '    uint256 public SoftCap;\n', '    uint256 public HardCap;\n', '    uint256 public amountRaised;\n', '    uint256 public preSaleStartdate;\n', '    uint256 public preSaleDeadline;\n', '    uint256 public mainSaleStartdate;\n', '    uint256 public mainSaleDeadline;\n', '    uint256 public price;\n', '    uint256 public fundTransferred;\n', '    uint256 public tokenSold;\n', '    token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '    bool crowdsaleClosed = false;\n', '    bool returnFunds = false;\n', '\t\n', '\tevent GoalReached(address recipient, uint totalAmountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    constructor() public {\n', '        beneficiary = 0x953600669b794BB7a2E0Bc6C5a7f5fA96c3c1928;\n', '        SoftCap = 15000 ether;\n', '        HardCap = 150000 ether;\n', '        preSaleStartdate = 1541030400;\n', '        preSaleDeadline = 1543622399;\n', '        mainSaleStartdate = 1543622400;\n', '        mainSaleDeadline = 1551398399;\n', '        price = 0.0004 ether;\n', '        tokenReward = token(0x49246EF0e2eF35CD7523072BE75bC857B9eC63d9);\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable public {\n', '        require(!crowdsaleClosed);\n', '        uint256 bonus = 0;\n', '        uint256 amount;\n', '        uint256 ethamount = msg.value;\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].add(ethamount);\n', '        amountRaised = amountRaised.add(ethamount);\n', '        \n', '        //add bounus for funders\n', '        if(now >= preSaleStartdate && now <= preSaleDeadline){\n', '            amount =  ethamount.div(price);\n', '            bonus = amount * 33 / 100;\n', '            amount = amount.add(bonus);\n', '        }\n', '        else if(now >= mainSaleStartdate && now <= mainSaleStartdate + 30 days){\n', '            amount =  ethamount.div(price);\n', '            bonus = amount * 25/100;\n', '            amount = amount.add(bonus);\n', '        }\n', '        else if(now >= mainSaleStartdate + 30 days && now <= mainSaleStartdate + 45 days){\n', '            amount =  ethamount.div(price);\n', '            bonus = amount * 15/100;\n', '            amount = amount.add(bonus);\n', '        }\n', '        else if(now >= mainSaleStartdate + 45 days && now <= mainSaleStartdate + 60 days){\n', '            amount =  ethamount.div(price);\n', '            bonus = amount * 10/100;\n', '            amount = amount.add(bonus);\n', '        } else {\n', '            amount =  ethamount.div(price);\n', '            bonus = amount * 7/100;\n', '            amount = amount.add(bonus);\n', '        }\n', '        \n', '        amount = amount.mul(100000000000000);\n', '        tokenReward.transfer(msg.sender, amount);\n', '        tokenSold = tokenSold.add(amount);\n', '\t\temit FundTransfer(msg.sender, ethamount, true);\n', '    }\n', '\n', '    modifier afterDeadline() { if (now >= mainSaleDeadline) _; }\n', '\n', '    /**\n', '     *ends the campaign after deadline\n', '     */\n', '     \n', '    function endCrowdsale() public afterDeadline  onlyOwner {\n', '          crowdsaleClosed = true;\n', '    }\n', '    \n', '    function EnableReturnFunds() public onlyOwner {\n', '          returnFunds = true;\n', '    }\n', '    \n', '    function DisableReturnFunds() public onlyOwner {\n', '          returnFunds = false;\n', '    }\n', '\t\n', '\tfunction ChangePrice(uint256 _price) public onlyOwner {\n', '\t\t  price = _price;\t\n', '\t}\n', '\t\n', '\tfunction ChangeBeneficiary(address _beneficiary) public onlyOwner {\n', '\t\t  beneficiary = _beneficiary;\t\n', '\t}\n', '\t \n', '    function ChangePreSaleDates(uint256 _preSaleStartdate, uint256 _preSaleDeadline) onlyOwner public{\n', '          if(_preSaleStartdate != 0){\n', '               preSaleStartdate = _preSaleStartdate;\n', '          }\n', '          if(_preSaleDeadline != 0){\n', '               preSaleDeadline = _preSaleDeadline;\n', '          }\n', '\t\t  \n', '\t\t  if(crowdsaleClosed == true){\n', '\t\t\t crowdsaleClosed = false;\n', '\t\t  }\n', '    }\n', '    \n', '    function ChangeMainSaleDates(uint256 _mainSaleStartdate, uint256 _mainSaleDeadline) onlyOwner public{\n', '          if(_mainSaleStartdate != 0){\n', '               mainSaleStartdate = _mainSaleStartdate;\n', '          }\n', '          if(_mainSaleDeadline != 0){\n', '               mainSaleDeadline = _mainSaleDeadline; \n', '          }\n', '\t\t  \n', '\t\t  if(crowdsaleClosed == true){\n', '\t\t\t crowdsaleClosed = false;\n', '\t\t  }\n', '    }\n', '    \n', '    function getTokensBack() onlyOwner public{\n', '        uint256 remaining = tokenReward.balanceOf(this);\n', '        tokenReward.transfer(beneficiary, remaining);\n', '    }\n', '    \n', '    function safeWithdrawal() public afterDeadline {\n', '\t   if (returnFunds) {\n', '\t\t\tuint amount = balanceOf[msg.sender];\n', '\t\t\tif (amount > 0) {\n', '\t\t\t\tif (msg.sender.send(amount)) {\n', '\t\t\t\t   emit FundTransfer(msg.sender, amount, false);\n', '\t\t\t\t   balanceOf[msg.sender] = 0;\n', '\t\t\t\t   fundTransferred = fundTransferred.add(amount);\n', '\t\t\t\t} \n', '\t\t\t}\n', '\t\t}\n', '\n', '\t\tif (returnFunds == false && beneficiary == msg.sender) {\n', '\t\t    uint256 ethToSend = amountRaised - fundTransferred;\n', '\t\t\tif (beneficiary.send(ethToSend)) {\n', '\t\t\t  fundTransferred = fundTransferred.add(ethToSend);\n', '\t\t\t} \n', '\t\t}\n', '    }\n', '}']