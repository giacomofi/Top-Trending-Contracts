['pragma solidity 0.4.24;\n', '\n', '\n', '/// @title A contract for enforcing a treasure hunt\n', '/// @author John Fitzpatrick\n', '/// @author Sam Pullman\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract TreasureHunt is Ownable {\n', '    \n', '    /// Cost of verifying a single location\n', '    uint public cost;\n', '\n', '    /// Balance of the treausure hunt reward pool\n', '    uint public pot;\n', '\n', '    /// @notice Balance of administrator&#39;s fee\n', '    uint public ownersBalance;\n', '\n', '    /// Marks the time of victory\n', '    uint public timeOfWin;\n', '\n', '    /// Address of the winner\n', '    address public winner;\n', '\n', '    /// True during the grace period (when the winner can collect the pot)\n', '    bool public grace;\n', '\n', '    /// List of unique location keys\n', '    uint[] public locations;\n', '\n', '    /// Container for submitted location info\n', '    struct KeyLog {\n', '        /// Location key XOR&#39;d with a user password\n', '        uint encryptKey;\n', '        /// Block number of submission\n', '        uint block;\n', '    }\n', '\n', '    /// Record of each hunter&#39;s progress\n', '    mapping(address => mapping(uint => KeyLog)) public hunters;\n', '    \n', '    /// @notice Triggered when a hunter has won and the hunt is over\n', '    /// @param winner The address of the victor\n', '    event WonEvent(address winner);\n', '\n', '    /// @notice Number of locations in the hunt\n', '    /// @dev Useful for testing, since public arrays don&#39;t expose length\n', '    /// @return length of locations array\n', '    function locationsLength() public view returns (uint) {\n', '        return locations.length;\n', '    }\n', '\n', '    /// @notice Admin function for updating all locations\n', '    /// @param _locations Array of location keys\n', '    function setAllLocations(uint[] _locations) onlyOwner public {\n', '        locations = _locations;\n', '    }\n', '\n', '    /// @notice Admin function to update the location at `index`\n', '    /// @dev Throws if index is >= locations.length\n', '    /// @param index The index of the location to update\n', '    /// @param _location The new location\n', '    function setLocation(uint index, uint _location) onlyOwner public {\n', '        require(index < locations.length);\n', '        locations[index] = _location;\n', '    }\n', '\n', '    /// @notice Admin function to add a location\n', '    /// @param _location The new location\n', '    function addLocation(uint _location) onlyOwner public {\n', '        locations.push(_location);\n', '    }\n', '\n', '    /// @notice Admin function to set the price of submitting a location\n', '    /// @param _cost The new cost\n', '    function setCost(uint _cost) onlyOwner public {\n', '        cost = _cost;\n', '    }\n', '\n', '    /// @notice Submit a location key XOR&#39;d with a password for later verification\n', '    /// @notice The message value must be greater than `cost`\n', '    /// @param encryptKey A location key encrypted with a user password\n', '    /// @param locationNumber The index of the location\n', '    function submitLocation(uint encryptKey, uint8 locationNumber) public payable {\n', '\n', '        require(encryptKey != 0);\n', '        require(locationNumber < locations.length);\n', '\n', '        if (!grace) {\n', '            require(msg.value >= cost);\n', '            uint contribution = cost - cost / 10; // avoid integer rounding issues\n', '            ownersBalance += cost - contribution;\n', '            pot += contribution;\n', '        }\n', '        hunters[msg.sender][locationNumber] = KeyLog(encryptKey, block.number);\n', '    }\n', '\n', '    /// @notice Sets the message sender as the winner if they have completed the hunt\n', '    /// @dev Location order should be enforced offline, checks here are to ward against cheaters\n', '    /// @param decryptKeys Array of user passwords corresponding to original submissions \n', '    function checkWin(uint[] decryptKeys) public {\n', '        require(!grace);\n', '        require(decryptKeys.length == locations.length);\n', '\n', '        uint lastBlock = 0;\n', '        bool won = true;\n', '        for (uint i; i < locations.length; i++) {\n', '            \n', '            // Make sure locations were visited in order\n', '            require(hunters[msg.sender][i].block > lastBlock);\n', '            lastBlock = hunters[msg.sender][i].block;\n', '\n', '            // Skip removed locations\n', '            if (locations[i] != 0) {\n', '                uint storedVal = uint(keccak256(abi.encodePacked(hunters[msg.sender][i].encryptKey ^ decryptKeys[i])));\n', '                \n', '                won = won && (locations[i] == storedVal);\n', '            }\n', '        }\n', '\n', '        require(won);\n', '\n', '        if (won) {\n', '            timeOfWin = now;\n', '            winner = msg.sender;\n', '            grace = true;\n', '            emit WonEvent(winner);\n', '        }\n', '    }\n', '\n', '    /// @notice Donate the message value to the pot\n', '    function increasePot() public payable {\n', '        pot += msg.value;\n', '    }\n', '\n', '    /// @notice Funds sent to the contract are added to the pot\n', '    function() public payable {\n', '        increasePot();\n', '    }\n', '    \n', '    /// @notice Reset the hunt if the grace period is over\n', '    function resetWinner() public {\n', '        require(grace);\n', '        require(now > timeOfWin + 30 days);\n', '        grace = false;\n', '        winner = 0;\n', '        ownersBalance = 0;\n', '        pot = address(this).balance;\n', '    }\n', '\n', '    /// @notice Withdrawal function for winner and admin\n', '    function withdraw() public returns (bool) {\n', '        uint amount;\n', '        if (msg.sender == owner) {\n', '            amount = ownersBalance;\n', '            ownersBalance = 0;\n', '        } else if (msg.sender == winner) {\n', '            amount = pot;\n', '            pot = 0;\n', '        }\n', '        msg.sender.transfer(amount);\n', '    }\n', '\n', '    /// @notice Admin failsafe for destroying the contract\n', '    function kill() onlyOwner public {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '}']
['pragma solidity 0.4.24;\n', '\n', '\n', '/// @title A contract for enforcing a treasure hunt\n', '/// @author John Fitzpatrick\n', '/// @author Sam Pullman\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract TreasureHunt is Ownable {\n', '    \n', '    /// Cost of verifying a single location\n', '    uint public cost;\n', '\n', '    /// Balance of the treausure hunt reward pool\n', '    uint public pot;\n', '\n', "    /// @notice Balance of administrator's fee\n", '    uint public ownersBalance;\n', '\n', '    /// Marks the time of victory\n', '    uint public timeOfWin;\n', '\n', '    /// Address of the winner\n', '    address public winner;\n', '\n', '    /// True during the grace period (when the winner can collect the pot)\n', '    bool public grace;\n', '\n', '    /// List of unique location keys\n', '    uint[] public locations;\n', '\n', '    /// Container for submitted location info\n', '    struct KeyLog {\n', "        /// Location key XOR'd with a user password\n", '        uint encryptKey;\n', '        /// Block number of submission\n', '        uint block;\n', '    }\n', '\n', "    /// Record of each hunter's progress\n", '    mapping(address => mapping(uint => KeyLog)) public hunters;\n', '    \n', '    /// @notice Triggered when a hunter has won and the hunt is over\n', '    /// @param winner The address of the victor\n', '    event WonEvent(address winner);\n', '\n', '    /// @notice Number of locations in the hunt\n', "    /// @dev Useful for testing, since public arrays don't expose length\n", '    /// @return length of locations array\n', '    function locationsLength() public view returns (uint) {\n', '        return locations.length;\n', '    }\n', '\n', '    /// @notice Admin function for updating all locations\n', '    /// @param _locations Array of location keys\n', '    function setAllLocations(uint[] _locations) onlyOwner public {\n', '        locations = _locations;\n', '    }\n', '\n', '    /// @notice Admin function to update the location at `index`\n', '    /// @dev Throws if index is >= locations.length\n', '    /// @param index The index of the location to update\n', '    /// @param _location The new location\n', '    function setLocation(uint index, uint _location) onlyOwner public {\n', '        require(index < locations.length);\n', '        locations[index] = _location;\n', '    }\n', '\n', '    /// @notice Admin function to add a location\n', '    /// @param _location The new location\n', '    function addLocation(uint _location) onlyOwner public {\n', '        locations.push(_location);\n', '    }\n', '\n', '    /// @notice Admin function to set the price of submitting a location\n', '    /// @param _cost The new cost\n', '    function setCost(uint _cost) onlyOwner public {\n', '        cost = _cost;\n', '    }\n', '\n', "    /// @notice Submit a location key XOR'd with a password for later verification\n", '    /// @notice The message value must be greater than `cost`\n', '    /// @param encryptKey A location key encrypted with a user password\n', '    /// @param locationNumber The index of the location\n', '    function submitLocation(uint encryptKey, uint8 locationNumber) public payable {\n', '\n', '        require(encryptKey != 0);\n', '        require(locationNumber < locations.length);\n', '\n', '        if (!grace) {\n', '            require(msg.value >= cost);\n', '            uint contribution = cost - cost / 10; // avoid integer rounding issues\n', '            ownersBalance += cost - contribution;\n', '            pot += contribution;\n', '        }\n', '        hunters[msg.sender][locationNumber] = KeyLog(encryptKey, block.number);\n', '    }\n', '\n', '    /// @notice Sets the message sender as the winner if they have completed the hunt\n', '    /// @dev Location order should be enforced offline, checks here are to ward against cheaters\n', '    /// @param decryptKeys Array of user passwords corresponding to original submissions \n', '    function checkWin(uint[] decryptKeys) public {\n', '        require(!grace);\n', '        require(decryptKeys.length == locations.length);\n', '\n', '        uint lastBlock = 0;\n', '        bool won = true;\n', '        for (uint i; i < locations.length; i++) {\n', '            \n', '            // Make sure locations were visited in order\n', '            require(hunters[msg.sender][i].block > lastBlock);\n', '            lastBlock = hunters[msg.sender][i].block;\n', '\n', '            // Skip removed locations\n', '            if (locations[i] != 0) {\n', '                uint storedVal = uint(keccak256(abi.encodePacked(hunters[msg.sender][i].encryptKey ^ decryptKeys[i])));\n', '                \n', '                won = won && (locations[i] == storedVal);\n', '            }\n', '        }\n', '\n', '        require(won);\n', '\n', '        if (won) {\n', '            timeOfWin = now;\n', '            winner = msg.sender;\n', '            grace = true;\n', '            emit WonEvent(winner);\n', '        }\n', '    }\n', '\n', '    /// @notice Donate the message value to the pot\n', '    function increasePot() public payable {\n', '        pot += msg.value;\n', '    }\n', '\n', '    /// @notice Funds sent to the contract are added to the pot\n', '    function() public payable {\n', '        increasePot();\n', '    }\n', '    \n', '    /// @notice Reset the hunt if the grace period is over\n', '    function resetWinner() public {\n', '        require(grace);\n', '        require(now > timeOfWin + 30 days);\n', '        grace = false;\n', '        winner = 0;\n', '        ownersBalance = 0;\n', '        pot = address(this).balance;\n', '    }\n', '\n', '    /// @notice Withdrawal function for winner and admin\n', '    function withdraw() public returns (bool) {\n', '        uint amount;\n', '        if (msg.sender == owner) {\n', '            amount = ownersBalance;\n', '            ownersBalance = 0;\n', '        } else if (msg.sender == winner) {\n', '            amount = pot;\n', '            pot = 0;\n', '        }\n', '        msg.sender.transfer(amount);\n', '    }\n', '\n', '    /// @notice Admin failsafe for destroying the contract\n', '    function kill() onlyOwner public {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '}']
