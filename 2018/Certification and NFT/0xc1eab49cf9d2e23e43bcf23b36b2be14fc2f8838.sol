['pragma solidity 0.4.24;\n', 'pragma experimental "v0.5.0";\n', '/******************************************************************************\\\n', '*..................................Mokens......................................*\n', '*.....................General purpose cryptocollectibles.......................*\n', '*..............................................................................*\n', '/******************************************************************************/\n', '\n', '/******************************************************************************\\\n', '* Author: Nick Mudge, nick@mokens.io\n', '* Copyright (c) 2018\n', '* Mokens\n', '*\n', '* The Mokens contract is a proxy contract that delegates all functionality\n', '* to delegate contracts. This design enables new functionality and improvements\n', '* to be added to the Mokens contract over time.\n', '*\n', '* Changes to the Mokens contract are transparent and visible. To make changes\n', '* easier to monitor the ContractUpdated event is emitted any time a function is\n', '* added, removed or updated. The ContractUpdated event exists in the\n', '* MokenUpdates delegate contract\n', '*\n', '* The source code for all delegate contracts used by the Mokens contract can be\n', '* found online and inspected.\n', '*\n', '* The Mokens contract is reflective or self inspecting. It contains functions\n', '* for inspecting what delegate contracts it has and what functions they have.\n', '* Specifically, the QueryMokenDelegates delegate contract contains functions for\n', '* querying delegate contracts and functions.\n', '*\n', '*    Here are some of the other delegate contracts:\n', '*\n', '*  - MokenERC721: Implements the ERC721 standard for mokens.\n', '*  - MokenERC721Batch: Implements batch transfers and approvals.\n', '*  - MokenERC998ERC721TopDown: Implements ERC998 composable functionality.\n', '*  - MokenERC998ERC20TopDown: Implements ERC998 composable functionality.\n', '*  - MokenERC998ERC721BottomUp: Implements ERC998 composable functionality.\n', '*  - MokenMinting: Implements moken minting functionality.\n', '*  - MokenEras: Implements moken era functionality.\n', '*  - QueryMokenData: Implements functions to query info about mokens.\n', '/******************************************************************************/\n', '//////////////////////////////////////\n', '//////////////////////////////////////\n', 'contract Storage0 {\n', '    // funcId => delegate contract\n', '    mapping(bytes4 => address) internal delegates;\n', '}\n', '\n', 'contract Mokens is Storage0 {\n', '    constructor(address mokenUpdates) public {\n', '        //0x584fc325 == "initializeMokensContract()"\n', '        bytes memory calldata = abi.encodeWithSelector(0x584fc325,mokenUpdates);\n', '        assembly {\n', '            let callSuccess := delegatecall(gas, mokenUpdates, add(calldata, 0x20), mload(calldata), 0, 0)\n', '            let size := returndatasize\n', '            returndatacopy(calldata, 0, size)\n', '            if eq(callSuccess,0) {revert(calldata, size)}\n', '        }\n', '    }\n', '    function() external payable {\n', '        address delegate = delegates[msg.sig];\n', '        require(delegate != address(0), "Mokens function does not exist.");\n', '        assembly {\n', '            let ptr := mload(0x40)\n', '            calldatacopy(ptr, 0, calldatasize)\n', '            let result := delegatecall(gas, delegate, ptr, calldatasize, 0, 0)\n', '            let size := returndatasize\n', '            returndatacopy(ptr, 0, size)\n', '            switch result\n', '            case 0 {revert(ptr, size)}\n', '            default {return (ptr, size)}\n', '        }\n', '    }\n', '}']