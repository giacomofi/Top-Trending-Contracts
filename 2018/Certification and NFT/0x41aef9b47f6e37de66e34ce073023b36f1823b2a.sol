['pragma solidity ^0.4.18;\n', '\n', '\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '\n', ' \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  \n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', ' \n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', ' \n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', ' \n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', ' \n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', ' \n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', ' \n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract IChain is StandardToken {\n', '  string public name = &#39;I Chain&#39;;\n', '  string public symbol = &#39;ISC&#39;;\n', '  uint8 public decimals = 18;\n', '  uint public totalSupply = 1000000000 ether;\n', '  \n', '   address public beneficiary;  \n', '   address public owner; \n', '   \n', '    uint256 public fundingGoal ;   \n', '\t\n', '    uint256 public amountRaised ;   \n', '\t\n', '\tuint256 public amountRaisedIsc ;  \n', '  \n', '  \n', '  uint256 public price;\n', '  \n', '  uint256 public totalDistributed = 800000000 ether;\n', '  \n', '  uint256 public totalRemaining;\n', '\n', '  \n', '  uint256 public tokenReward = totalSupply.sub(totalDistributed);\n', '\n', '     bool public fundingGoalReached = false;  \n', '     bool public crowdsaleClosed = false;  \n', '  \n', '    \n', '    event GoalReached(address recipient, uint totalAmountRaised);\n', '    event FundTransfer(address backer, uint amounteth, bool isContribution);\n', '  \n', '  function IChain(address ifSuccessfulSendTo,\n', '        uint fundingGoalInEthers,\n', '\t\tuint _price\n', '         ) public {\n', '\t\t\n', '\t\t\tbeneficiary = ifSuccessfulSendTo;\n', '            fundingGoal = fundingGoalInEthers * 1 ether;       \n', '            price = _price;          \n', '\t\t\towner = msg.sender;\n', '\t\t\tbalances[msg.sender] = totalDistributed;\n', '\t\t\t\n', '  }\n', ' \n', '    modifier canDistr() {\n', '        require(!crowdsaleClosed);\n', '        _;\n', '    }\n', '\t  modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '   \n', '\t\n', '\t\n', '   function () external payable {\n', '\t\t\n', '\t\trequire(!crowdsaleClosed);\n', '\t\trequire(!fundingGoalReached);\n', '        getTokens();\n', '     }\t \n', '\t\n', '\t\n', '\t\n', '  function finishDistribution() onlyOwner canDistr  public returns (bool) {\n', '\t\t\n', '\t\t\n', '        crowdsaleClosed = true;\n', '\t\t\n', '\t\tuint256 amount = tokenReward.sub(amountRaisedIsc);\n', '\t\t\n', '\t\tbalances[beneficiary] = balances[beneficiary].add(amount);\t\n', '\t\t\n', '\t\t\n', '\t\trequire(msg.sender.call.value(amountRaised)());\t\n', '\t\t\t\t\n', '        return true;\n', '    }\t\n', ' \n', '  function extractTokenEth(uint amount) onlyOwner  public returns (bool) {\t \n', '\t\trequire(msg.sender.call.value(amount)());\t\t\t\n', '        return true;\n', '    }\t\t\n', '\n', '\t\n', '  function getTokens() payable{\n', '\t\t\t\n', '\t\tif (amountRaised >= fundingGoal) {\n', '            fundingGoalReached = true;\n', '\t\t\treturn;\n', '        } \t\t\t\n', '        address investor = msg.sender; \n', '\t\tuint amount = msg.value;\n', '        distr(investor,amount);\t\n', '    }\n', '\t\n', '\t \n', '    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n', '\t\t\n', '\t\tamountRaised += _amount;\t\t\n', '\t\t\n', '\t\t_amount=_amount.mul(price);\n', '\t \t\n', '\t\tamountRaisedIsc += _amount;\n', '\t\t\n', '        balances[_to] = balances[_to].add(_amount);\t\t\n', '        FundTransfer(msg.sender,_amount,true);\n', '\t\t  \t\t\n', '        return true;           \n', '\t\t\n', '    }\n', '\n', '  \n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '\n', ' \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  \n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', ' \n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', ' \n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', ' \n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', ' \n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', ' \n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', ' \n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract IChain is StandardToken {\n', "  string public name = 'I Chain';\n", "  string public symbol = 'ISC';\n", '  uint8 public decimals = 18;\n', '  uint public totalSupply = 1000000000 ether;\n', '  \n', '   address public beneficiary;  \n', '   address public owner; \n', '   \n', '    uint256 public fundingGoal ;   \n', '\t\n', '    uint256 public amountRaised ;   \n', '\t\n', '\tuint256 public amountRaisedIsc ;  \n', '  \n', '  \n', '  uint256 public price;\n', '  \n', '  uint256 public totalDistributed = 800000000 ether;\n', '  \n', '  uint256 public totalRemaining;\n', '\n', '  \n', '  uint256 public tokenReward = totalSupply.sub(totalDistributed);\n', '\n', '     bool public fundingGoalReached = false;  \n', '     bool public crowdsaleClosed = false;  \n', '  \n', '    \n', '    event GoalReached(address recipient, uint totalAmountRaised);\n', '    event FundTransfer(address backer, uint amounteth, bool isContribution);\n', '  \n', '  function IChain(address ifSuccessfulSendTo,\n', '        uint fundingGoalInEthers,\n', '\t\tuint _price\n', '         ) public {\n', '\t\t\n', '\t\t\tbeneficiary = ifSuccessfulSendTo;\n', '            fundingGoal = fundingGoalInEthers * 1 ether;       \n', '            price = _price;          \n', '\t\t\towner = msg.sender;\n', '\t\t\tbalances[msg.sender] = totalDistributed;\n', '\t\t\t\n', '  }\n', ' \n', '    modifier canDistr() {\n', '        require(!crowdsaleClosed);\n', '        _;\n', '    }\n', '\t  modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '   \n', '\t\n', '\t\n', '   function () external payable {\n', '\t\t\n', '\t\trequire(!crowdsaleClosed);\n', '\t\trequire(!fundingGoalReached);\n', '        getTokens();\n', '     }\t \n', '\t\n', '\t\n', '\t\n', '  function finishDistribution() onlyOwner canDistr  public returns (bool) {\n', '\t\t\n', '\t\t\n', '        crowdsaleClosed = true;\n', '\t\t\n', '\t\tuint256 amount = tokenReward.sub(amountRaisedIsc);\n', '\t\t\n', '\t\tbalances[beneficiary] = balances[beneficiary].add(amount);\t\n', '\t\t\n', '\t\t\n', '\t\trequire(msg.sender.call.value(amountRaised)());\t\n', '\t\t\t\t\n', '        return true;\n', '    }\t\n', ' \n', '  function extractTokenEth(uint amount) onlyOwner  public returns (bool) {\t \n', '\t\trequire(msg.sender.call.value(amount)());\t\t\t\n', '        return true;\n', '    }\t\t\n', '\n', '\t\n', '  function getTokens() payable{\n', '\t\t\t\n', '\t\tif (amountRaised >= fundingGoal) {\n', '            fundingGoalReached = true;\n', '\t\t\treturn;\n', '        } \t\t\t\n', '        address investor = msg.sender; \n', '\t\tuint amount = msg.value;\n', '        distr(investor,amount);\t\n', '    }\n', '\t\n', '\t \n', '    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n', '\t\t\n', '\t\tamountRaised += _amount;\t\t\n', '\t\t\n', '\t\t_amount=_amount.mul(price);\n', '\t \t\n', '\t\tamountRaisedIsc += _amount;\n', '\t\t\n', '        balances[_to] = balances[_to].add(_amount);\t\t\n', '        FundTransfer(msg.sender,_amount,true);\n', '\t\t  \t\t\n', '        return true;           \n', '\t\t\n', '    }\n', '\n', '  \n', '}']
