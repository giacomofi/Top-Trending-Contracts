['pragma solidity ^0.4.23;\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic \n', '{\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath \n', '{\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) \n', '    {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c  / a == b);\n', '        return c;\n', '    }\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) \n', '    {\n', '        return a  / b;\n', '    }\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) \n', '    {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) \n', '    {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', 'pragma solidity ^0.4.23;\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic \n', '{\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract Owner\n', '{\n', '    address internal owner;\n', '    mapping(address => bool) internal admins;\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    modifier onlyAdmin {\n', '        require(admins[msg.sender] == true || msg.sender == owner);\n', '        _;\n', '    }\n', '    function changeOwner(address newOwner) public onlyOwner returns(bool)\n', '    {\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '    function setAdmin(address addr) public onlyOwner returns(bool) \n', '    {\n', '        admins[addr] = true;\n', '        return true;\n', '    }\n', '    function delAdmin(address addr) public onlyOwner returns(bool) \n', '    {\n', '        admins[addr] = false;\n', '        return true;\n', '    }\n', '}\n', 'pragma solidity ^0.4.23;\n', 'contract MayaPlus is Owner \n', '{\n', '    mapping(address => uint256) internal balances;\n', '    function parse2wei(uint _value) internal pure returns(uint)\n', '    {\n', '        uint decimals = 18;\n', '        return _value * (10 ** uint256(decimals));\n', '    }\n', '    address public ADDR_MAYA_ORG;\n', '    address public ADDR_MAYA_MARKETING ;\n', '    address public ADDR_MAYA_TEAM;\n', '    address public ADDR_MAYA_ASSOCIATION;\n', '    struct IcoRule\n', '    {\n', '        uint startTime;\n', '        uint endTime;\n', '        uint rate;\n', '        uint shareRuleGroupId;\n', '        address[] addrList;\n', '        bool canceled;\n', '    }\n', '    IcoRule[] icoRuleList;\n', '    mapping (address => uint[] ) addr2icoRuleIdList;\n', '    event GetIcoRule(uint startTime, uint endTime, uint rate, uint shareRuleGroupId, bool canceled);\n', '    function icoRuleAdd(uint startTime, uint endTime, uint rate, uint shareRuleGroupId) public onlyOwner returns (bool) \n', '    {\n', '        address[] memory addr;\n', '        bool canceled = false;\n', '        IcoRule memory item = IcoRule(startTime, endTime, rate, shareRuleGroupId, addr, canceled);\n', '        icoRuleList.push(item);\n', '        return true;\n', '    }\n', '    function icoRuleUpdate(uint index, uint startTime, uint endTime, uint rate, uint shareRuleGroupId) public onlyOwner returns (bool) \n', '    {\n', '        require(icoRuleList.length > index);\n', '        if (startTime > 0) {\n', '            icoRuleList[index].startTime = startTime;\n', '        }\n', '        if (endTime > 0) {\n', '            icoRuleList[index].endTime = endTime;\n', '        }\n', '        if (rate > 0) {\n', '            icoRuleList[index].rate = rate;\n', '        }\n', '        icoRuleList[index].shareRuleGroupId = shareRuleGroupId;\n', '        return true;\n', '    }\n', '    function icoPushAddr(uint index, address addr) internal returns (bool) \n', '    {\n', '        icoRuleList[index].addrList.push(addr);\n', '        return true;\n', '    }\n', '    function icoRuleCancel(uint index) public onlyOwner returns (bool) \n', '    {\n', '        require(icoRuleList.length > index);\n', '        icoRuleList[index].canceled = true;\n', '        return true;\n', '    }\n', '    function getIcoRuleList() public returns (uint count) \n', '    {\n', '        count = icoRuleList.length;\n', '        for (uint i = 0; i < count ; i++)\n', '        {\n', '            emit GetIcoRule(icoRuleList[i].startTime, icoRuleList[i].endTime, icoRuleList[i].rate, icoRuleList[i].shareRuleGroupId, \n', '            icoRuleList[i].canceled);\n', '        }\n', '    }\n', '    function getIcoAddrCount(uint icoRuleId) public view onlyOwner returns (uint count) \n', '    {\n', '        count = icoRuleList[icoRuleId - 1].addrList.length;\n', '    }\n', '    function getIcoAddrListByIcoRuleId(uint icoRuleId, uint index) public view onlyOwner returns (address addr) \n', '    {\n', '        addr = icoRuleList[icoRuleId - 1].addrList[index];\n', '    }\n', '    function initIcoRule() internal returns(bool) \n', '    {\n', '        icoRuleAdd(1529424001, 1532275199, 2600, 0);\n', '        icoRuleAdd(1532275201, 1533484799, 2100, 0);\n', '        icoRuleAdd(1533484801, 1534694399, 1700, 0);\n', '        icoRuleAdd(1534694401, 1535903999, 1400, 0);\n', '        icoRuleAdd(1535904001, 1537113599, 1100, 0);\n', '    }\n', '    struct ShareRule {\n', '        uint startTime;\n', '        uint endTime;\n', '        uint rateDenominator;\n', '    }\n', '    event GetShareRule(address addr, uint startTime, uint endTime, uint rateDenominator);\n', '    mapping (uint => ShareRule[]) shareRuleGroup;\n', '    mapping (address => uint) addr2shareRuleGroupId;\n', '    mapping (address => uint ) sharedAmount;\n', '    mapping (address => uint ) icoAmount;\n', '    ShareRule[] srlist_Team;\n', '    function initShareRule4Publicity() internal returns( bool )\n', '    {\n', '        ShareRule memory sr;\n', '        sr = ShareRule(1548432001, 1579967999, 5);\n', '        srlist_Team.push( sr );\n', '        sr = ShareRule(1579968001, 1611590399, 5);\n', '        srlist_Team.push( sr );\n', '        sr = ShareRule(1611590401, 1643126399, 5);\n', '        srlist_Team.push( sr );\n', '        sr = ShareRule(1643126401, 1674662399, 5);\n', '        srlist_Team.push( sr );\n', '        sr = ShareRule(1674662401, 1706198399, 5);\n', '        srlist_Team.push( sr );\n', '        shareRuleGroup[2] = srlist_Team;\n', '        addr2shareRuleGroupId[ADDR_MAYA_TEAM] = 2;\n', '        return true;\n', '    }\n', '    function initPublicityAddr() internal \n', '    {\n', '        ADDR_MAYA_MARKETING = address(0xb92863581E6C3Ba7eDC78fFa45CdbBa59A4aD03C);\n', '        balances[ADDR_MAYA_MARKETING] = parse2wei(50000000);\n', '        ADDR_MAYA_ASSOCIATION = address(0xff849bf00Fd77C357A7B9A09E572a1510ff7C0dC);\n', '        balances[ADDR_MAYA_ASSOCIATION] = parse2wei(500000000);\n', '        ADDR_MAYA_TEAM = address(0xb391e1b2186DB3b8d2F3D0968F30AB456F1eCa57);\n', '        balances[ADDR_MAYA_TEAM] = parse2wei(100000000);\n', '        initShareRule4Publicity();\n', '    }\n', '    function updateShareRuleGroup(uint id, uint index, uint startTime, uint endTime, uint rateDenominator) public onlyOwner returns(bool)\n', '    {\n', '        if (startTime > 0) {\n', '            shareRuleGroup[id][index].startTime = startTime;\n', '        }\n', '        if (endTime > 0) {\n', '            shareRuleGroup[id][index].endTime = endTime;\n', '        }\n', '        if (rateDenominator > 0) {\n', '            shareRuleGroup[id][index].rateDenominator = rateDenominator;\n', '        }\n', '        return true;\n', '    }\n', '    function tokenShareShow(address addr) public returns(uint shareRuleGroupId) \n', '    {\n', '        shareRuleGroupId = addr2shareRuleGroupId[addr];\n', '        if (shareRuleGroupId == 0) {\n', '            return 0;\n', '        }\n', '        ShareRule[] memory shareRuleList = shareRuleGroup[shareRuleGroupId];\n', '        uint count = shareRuleList.length;\n', '        for (uint i = 0; i < count ; i++)\n', '        {\n', '            emit GetShareRule(addr, shareRuleList[i].startTime, shareRuleList[i].endTime, shareRuleList[i].rateDenominator);\n', '        }\n', '        return shareRuleGroupId;\n', '    }\n', '    function setAccountShareRuleGroupId(address addr, uint shareRuleGroupId) public onlyOwner returns(bool)\n', '    {\n', '        addr2shareRuleGroupId[addr] = shareRuleGroupId;\n', '        return true;\n', '    }\n', '}\n', 'pragma solidity ^0.4.23;\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic, MayaPlus \n', '{\n', '    using SafeMath for uint256;\n', '    uint256 internal totalSupply_;\n', '    mapping (address => bool) internal locked;\n', '    mapping (address => bool) internal isAgent;\n', '    mapping (address => uint) internal agentRate;\n', '    function setAgentRate(address addr, uint rate) public onlyAdmin returns(bool)\n', '    {\n', '        require( addr != address(0) );\n', '        agentRate[addr] = rate;\n', '        return true;\n', '    }\n', '    /**\n', '    * alan: lock or unlock account\n', '    */\n', '    function lockAccount(address _addr) public onlyAdmin returns (bool)\n', '    {\n', '        require(_addr != address(0));\n', '        locked[_addr] = true;\n', '        return true;\n', '    }\n', '    function unlockAccount(address _addr) public onlyAdmin returns (bool)\n', '    {\n', '        require(_addr != address(0));\n', '        locked[_addr] = false;\n', '        return true;\n', '    }\n', '    /**\n', '    * alan: get lock status\n', '    */\n', '    function isLocked(address addr) public view returns(bool) \n', '    {\n', '        return locked[addr];\n', '    }\n', '    bool internal stopped = false;\n', '    modifier running {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '    function stop() public onlyOwner \n', '    {\n', '        stopped = true;\n', '    }\n', '    function start() public onlyOwner \n', '    {\n', '        stopped = false;\n', '    }\n', '    function isStopped() public view returns(bool)\n', '    {\n', '        return stopped;\n', '    }\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) \n', '    {\n', '        return totalSupply_;\n', '    }\n', '    function getRemainShareAmount() public view returns(uint)\n', '    {\n', '        return getRemainShareAmountInternal(msg.sender);\n', '    }\n', '    function getRemainShareAmountInternal(address addr) internal view returns(uint)\n', '    {\n', '        uint canTransferAmount = 0;\n', '        uint srgId = addr2shareRuleGroupId[addr];\n', '        bool allowTransfer = false;\n', '        if (srgId == 0) {\n', '            canTransferAmount = balances[addr];\n', '            return canTransferAmount;\n', '        }\n', '        else\n', '        {\n', '            ShareRule[] memory shareRuleList = shareRuleGroup[srgId];\n', '            uint count = shareRuleList.length;\n', '            for (uint i = 0; i < count ; i++)\n', '            {\n', '                if ( shareRuleList[i].startTime < now && now < shareRuleList[i].endTime)\n', '                {\n', '                    canTransferAmount = (i + 1).mul(icoAmount[addr]).div(shareRuleList[i].rateDenominator).sub( sharedAmount[addr]);\n', '                    return canTransferAmount;\n', '                }\n', '            }\n', '            if (allowTransfer == false)\n', '            {\n', '                bool isOverTime = true;\n', '                for (i = 0; i < count ; i++) {\n', '                    if ( now < shareRuleList[i].endTime) {\n', '                        isOverTime = false;\n', '                    }\n', '                }\n', '                if (isOverTime == true) {\n', '                    allowTransfer = true;\n', '                    canTransferAmount = balances[addr];\n', '                    return canTransferAmount;\n', '                }\n', '            }\n', '        }\n', '    }\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public running returns (bool) \n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        require( locked[msg.sender] != true);\n', '        require( locked[_to] != true);\n', '        require( getRemainShareAmount() >= _value );\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        sharedAmount[msg.sender] = sharedAmount[msg.sender].add( _value );\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) \n', '    {\n', '        return balances[_owner];\n', '    }\n', '}\n', 'pragma solidity ^0.4.23;\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken \n', '{\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public running returns (bool) \n', '    {\n', '        require(_to != address(0));\n', '        require( locked[_from] != true && locked[_to] != true);\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the\n', '    old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '    * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public running returns (bool) \n', '    {\n', '        require(getRemainShareAmountInternal(msg.sender) >= _value);\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) \n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', 'contract AlanPlusToken is StandardToken\n', '{\n', '    event Burn(address indexed from, uint256 value);\n', '    /**\n', '    * Destroy tokens\n', '    * Remove `_value` tokens from the system irreversibly\n', '    * @param _value the amount of money to burn\n', '    */\n', '    function burn(uint256 _value) public onlyOwner running returns (bool success) \n', '    {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * Destroy tokens from other account\n', '    *\n', '    * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '    *\n', '    * @param _from the address of the senderT\n', '    * @param _value the amount of money to burn\n', '    */\n', '    function burnFrom(address _from, uint256 _value) public onlyOwner returns (bool success) \n', '    {\n', '        require(balances[_from] >= _value);\n', '        if (_value <= allowed[_from][msg.sender]) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        else {\n', '            allowed[_from][msg.sender] = 0;\n', '        }\n', '        balances[_from] -= _value;\n', '        totalSupply_ -= _value;\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', 'pragma solidity ^0.4.23;\n', 'contract MAYA is AlanPlusToken \n', '{\n', '    string public constant name = "Maya";\n', '    string public constant symbol = "MAYA";\n', '    uint8 public constant decimals = 18;\n', '    uint256 private constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n', '    function () public payable \n', '    {\n', '        uint curIcoRate = 0;\n', '        if (agentRate[msg.sender] > 0) {\n', '            curIcoRate = agentRate[msg.sender];\n', '        }\n', '        else \n', '        {\n', '            uint icoRuleIndex = 500;\n', '            for (uint i = 0; i < icoRuleList.length ; i++)\n', '            {\n', '                if ((icoRuleList[i].canceled != true) && (icoRuleList[i].startTime < now && now < icoRuleList[i].endTime)) {\n', '                    curIcoRate = icoRuleList[i].rate;\n', '                    icoRuleIndex = i;\n', '                }\n', '            }\n', '            if (icoRuleIndex == 500)\n', '            {\n', '                require(icoRuleIndex != 500);\n', '                addr2icoRuleIdList[msg.sender].push( 0 );\n', '                addr2shareRuleGroupId[msg.sender] = addr2shareRuleGroupId[msg.sender] > 0 ? addr2shareRuleGroupId[msg.sender] : 0;\n', '            }\n', '            else\n', '            {\n', '                addr2shareRuleGroupId[msg.sender] = addr2shareRuleGroupId[msg.sender] > 0 ? addr2shareRuleGroupId[msg.sender] : icoRuleList[icoRuleIndex].shareRuleGroupId;\n', '                addr2icoRuleIdList[msg.sender].push( icoRuleIndex + 1 );\n', '                icoPushAddr(icoRuleIndex, msg.sender);\n', '            }\n', '        }\n', '        uint amountMAYA = 0;\n', '        amountMAYA = msg.value.mul( curIcoRate );\n', '        balances[msg.sender] = balances[msg.sender].add(amountMAYA);\n', '        icoAmount[msg.sender] = icoAmount[msg.sender].add(amountMAYA);\n', '        balances[owner] = balances[owner].sub(amountMAYA);\n', '        ADDR_MAYA_ORG.transfer(msg.value);\n', '    }\n', '    event AddBalance(address addr, uint amount);\n', '    event SubBalance(address addr, uint amount);\n', '    address addrContractCaller;\n', '    modifier isContractCaller {\n', '        require(msg.sender == addrContractCaller);\n', '        _;\n', '    }\n', '    function addBalance(address addr, uint amount) public isContractCaller returns(bool)\n', '    {\n', '        require(addr != address(0));\n', '        balances[addr] = balances[addr].add(amount);\n', '        emit AddBalance(addr, amount);\n', '        return true;\n', '    }\n', '    function subBalance(address addr, uint amount) public isContractCaller returns(bool)\n', '    {\n', '        require(balances[addr] >= amount);\n', '        balances[addr] = balances[addr].sub(amount);\n', '        emit SubBalance(addr, amount);\n', '        return true;\n', '    }\n', '    function setAddrContractCaller(address addr) onlyOwner public returns(bool)\n', '    {\n', '        require(addr != address(0));\n', '        addrContractCaller = addr;\n', '        return true;\n', '    }\n', '    constructor(uint totalSupply) public \n', '    {\n', '        owner = msg.sender;\n', '        ADDR_MAYA_ORG = owner;\n', '        totalSupply_ = totalSupply > 0 ? totalSupply : INITIAL_SUPPLY;\n', '        uint assignedAmount = 500000000 + 50000000 + 100000000;\n', '        assignedAmount = parse2wei(assignedAmount);\n', '        balances[owner] = totalSupply_.sub( assignedAmount );\n', '        initIcoRule();\n', '        initPublicityAddr();\n', '        lockAccount(ADDR_MAYA_TEAM);\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic \n', '{\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath \n', '{\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) \n', '    {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c  / a == b);\n', '        return c;\n', '    }\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) \n', '    {\n', '        return a  / b;\n', '    }\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) \n', '    {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) \n', '    {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', 'pragma solidity ^0.4.23;\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic \n', '{\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract Owner\n', '{\n', '    address internal owner;\n', '    mapping(address => bool) internal admins;\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    modifier onlyAdmin {\n', '        require(admins[msg.sender] == true || msg.sender == owner);\n', '        _;\n', '    }\n', '    function changeOwner(address newOwner) public onlyOwner returns(bool)\n', '    {\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '    function setAdmin(address addr) public onlyOwner returns(bool) \n', '    {\n', '        admins[addr] = true;\n', '        return true;\n', '    }\n', '    function delAdmin(address addr) public onlyOwner returns(bool) \n', '    {\n', '        admins[addr] = false;\n', '        return true;\n', '    }\n', '}\n', 'pragma solidity ^0.4.23;\n', 'contract MayaPlus is Owner \n', '{\n', '    mapping(address => uint256) internal balances;\n', '    function parse2wei(uint _value) internal pure returns(uint)\n', '    {\n', '        uint decimals = 18;\n', '        return _value * (10 ** uint256(decimals));\n', '    }\n', '    address public ADDR_MAYA_ORG;\n', '    address public ADDR_MAYA_MARKETING ;\n', '    address public ADDR_MAYA_TEAM;\n', '    address public ADDR_MAYA_ASSOCIATION;\n', '    struct IcoRule\n', '    {\n', '        uint startTime;\n', '        uint endTime;\n', '        uint rate;\n', '        uint shareRuleGroupId;\n', '        address[] addrList;\n', '        bool canceled;\n', '    }\n', '    IcoRule[] icoRuleList;\n', '    mapping (address => uint[] ) addr2icoRuleIdList;\n', '    event GetIcoRule(uint startTime, uint endTime, uint rate, uint shareRuleGroupId, bool canceled);\n', '    function icoRuleAdd(uint startTime, uint endTime, uint rate, uint shareRuleGroupId) public onlyOwner returns (bool) \n', '    {\n', '        address[] memory addr;\n', '        bool canceled = false;\n', '        IcoRule memory item = IcoRule(startTime, endTime, rate, shareRuleGroupId, addr, canceled);\n', '        icoRuleList.push(item);\n', '        return true;\n', '    }\n', '    function icoRuleUpdate(uint index, uint startTime, uint endTime, uint rate, uint shareRuleGroupId) public onlyOwner returns (bool) \n', '    {\n', '        require(icoRuleList.length > index);\n', '        if (startTime > 0) {\n', '            icoRuleList[index].startTime = startTime;\n', '        }\n', '        if (endTime > 0) {\n', '            icoRuleList[index].endTime = endTime;\n', '        }\n', '        if (rate > 0) {\n', '            icoRuleList[index].rate = rate;\n', '        }\n', '        icoRuleList[index].shareRuleGroupId = shareRuleGroupId;\n', '        return true;\n', '    }\n', '    function icoPushAddr(uint index, address addr) internal returns (bool) \n', '    {\n', '        icoRuleList[index].addrList.push(addr);\n', '        return true;\n', '    }\n', '    function icoRuleCancel(uint index) public onlyOwner returns (bool) \n', '    {\n', '        require(icoRuleList.length > index);\n', '        icoRuleList[index].canceled = true;\n', '        return true;\n', '    }\n', '    function getIcoRuleList() public returns (uint count) \n', '    {\n', '        count = icoRuleList.length;\n', '        for (uint i = 0; i < count ; i++)\n', '        {\n', '            emit GetIcoRule(icoRuleList[i].startTime, icoRuleList[i].endTime, icoRuleList[i].rate, icoRuleList[i].shareRuleGroupId, \n', '            icoRuleList[i].canceled);\n', '        }\n', '    }\n', '    function getIcoAddrCount(uint icoRuleId) public view onlyOwner returns (uint count) \n', '    {\n', '        count = icoRuleList[icoRuleId - 1].addrList.length;\n', '    }\n', '    function getIcoAddrListByIcoRuleId(uint icoRuleId, uint index) public view onlyOwner returns (address addr) \n', '    {\n', '        addr = icoRuleList[icoRuleId - 1].addrList[index];\n', '    }\n', '    function initIcoRule() internal returns(bool) \n', '    {\n', '        icoRuleAdd(1529424001, 1532275199, 2600, 0);\n', '        icoRuleAdd(1532275201, 1533484799, 2100, 0);\n', '        icoRuleAdd(1533484801, 1534694399, 1700, 0);\n', '        icoRuleAdd(1534694401, 1535903999, 1400, 0);\n', '        icoRuleAdd(1535904001, 1537113599, 1100, 0);\n', '    }\n', '    struct ShareRule {\n', '        uint startTime;\n', '        uint endTime;\n', '        uint rateDenominator;\n', '    }\n', '    event GetShareRule(address addr, uint startTime, uint endTime, uint rateDenominator);\n', '    mapping (uint => ShareRule[]) shareRuleGroup;\n', '    mapping (address => uint) addr2shareRuleGroupId;\n', '    mapping (address => uint ) sharedAmount;\n', '    mapping (address => uint ) icoAmount;\n', '    ShareRule[] srlist_Team;\n', '    function initShareRule4Publicity() internal returns( bool )\n', '    {\n', '        ShareRule memory sr;\n', '        sr = ShareRule(1548432001, 1579967999, 5);\n', '        srlist_Team.push( sr );\n', '        sr = ShareRule(1579968001, 1611590399, 5);\n', '        srlist_Team.push( sr );\n', '        sr = ShareRule(1611590401, 1643126399, 5);\n', '        srlist_Team.push( sr );\n', '        sr = ShareRule(1643126401, 1674662399, 5);\n', '        srlist_Team.push( sr );\n', '        sr = ShareRule(1674662401, 1706198399, 5);\n', '        srlist_Team.push( sr );\n', '        shareRuleGroup[2] = srlist_Team;\n', '        addr2shareRuleGroupId[ADDR_MAYA_TEAM] = 2;\n', '        return true;\n', '    }\n', '    function initPublicityAddr() internal \n', '    {\n', '        ADDR_MAYA_MARKETING = address(0xb92863581E6C3Ba7eDC78fFa45CdbBa59A4aD03C);\n', '        balances[ADDR_MAYA_MARKETING] = parse2wei(50000000);\n', '        ADDR_MAYA_ASSOCIATION = address(0xff849bf00Fd77C357A7B9A09E572a1510ff7C0dC);\n', '        balances[ADDR_MAYA_ASSOCIATION] = parse2wei(500000000);\n', '        ADDR_MAYA_TEAM = address(0xb391e1b2186DB3b8d2F3D0968F30AB456F1eCa57);\n', '        balances[ADDR_MAYA_TEAM] = parse2wei(100000000);\n', '        initShareRule4Publicity();\n', '    }\n', '    function updateShareRuleGroup(uint id, uint index, uint startTime, uint endTime, uint rateDenominator) public onlyOwner returns(bool)\n', '    {\n', '        if (startTime > 0) {\n', '            shareRuleGroup[id][index].startTime = startTime;\n', '        }\n', '        if (endTime > 0) {\n', '            shareRuleGroup[id][index].endTime = endTime;\n', '        }\n', '        if (rateDenominator > 0) {\n', '            shareRuleGroup[id][index].rateDenominator = rateDenominator;\n', '        }\n', '        return true;\n', '    }\n', '    function tokenShareShow(address addr) public returns(uint shareRuleGroupId) \n', '    {\n', '        shareRuleGroupId = addr2shareRuleGroupId[addr];\n', '        if (shareRuleGroupId == 0) {\n', '            return 0;\n', '        }\n', '        ShareRule[] memory shareRuleList = shareRuleGroup[shareRuleGroupId];\n', '        uint count = shareRuleList.length;\n', '        for (uint i = 0; i < count ; i++)\n', '        {\n', '            emit GetShareRule(addr, shareRuleList[i].startTime, shareRuleList[i].endTime, shareRuleList[i].rateDenominator);\n', '        }\n', '        return shareRuleGroupId;\n', '    }\n', '    function setAccountShareRuleGroupId(address addr, uint shareRuleGroupId) public onlyOwner returns(bool)\n', '    {\n', '        addr2shareRuleGroupId[addr] = shareRuleGroupId;\n', '        return true;\n', '    }\n', '}\n', 'pragma solidity ^0.4.23;\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic, MayaPlus \n', '{\n', '    using SafeMath for uint256;\n', '    uint256 internal totalSupply_;\n', '    mapping (address => bool) internal locked;\n', '    mapping (address => bool) internal isAgent;\n', '    mapping (address => uint) internal agentRate;\n', '    function setAgentRate(address addr, uint rate) public onlyAdmin returns(bool)\n', '    {\n', '        require( addr != address(0) );\n', '        agentRate[addr] = rate;\n', '        return true;\n', '    }\n', '    /**\n', '    * alan: lock or unlock account\n', '    */\n', '    function lockAccount(address _addr) public onlyAdmin returns (bool)\n', '    {\n', '        require(_addr != address(0));\n', '        locked[_addr] = true;\n', '        return true;\n', '    }\n', '    function unlockAccount(address _addr) public onlyAdmin returns (bool)\n', '    {\n', '        require(_addr != address(0));\n', '        locked[_addr] = false;\n', '        return true;\n', '    }\n', '    /**\n', '    * alan: get lock status\n', '    */\n', '    function isLocked(address addr) public view returns(bool) \n', '    {\n', '        return locked[addr];\n', '    }\n', '    bool internal stopped = false;\n', '    modifier running {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '    function stop() public onlyOwner \n', '    {\n', '        stopped = true;\n', '    }\n', '    function start() public onlyOwner \n', '    {\n', '        stopped = false;\n', '    }\n', '    function isStopped() public view returns(bool)\n', '    {\n', '        return stopped;\n', '    }\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) \n', '    {\n', '        return totalSupply_;\n', '    }\n', '    function getRemainShareAmount() public view returns(uint)\n', '    {\n', '        return getRemainShareAmountInternal(msg.sender);\n', '    }\n', '    function getRemainShareAmountInternal(address addr) internal view returns(uint)\n', '    {\n', '        uint canTransferAmount = 0;\n', '        uint srgId = addr2shareRuleGroupId[addr];\n', '        bool allowTransfer = false;\n', '        if (srgId == 0) {\n', '            canTransferAmount = balances[addr];\n', '            return canTransferAmount;\n', '        }\n', '        else\n', '        {\n', '            ShareRule[] memory shareRuleList = shareRuleGroup[srgId];\n', '            uint count = shareRuleList.length;\n', '            for (uint i = 0; i < count ; i++)\n', '            {\n', '                if ( shareRuleList[i].startTime < now && now < shareRuleList[i].endTime)\n', '                {\n', '                    canTransferAmount = (i + 1).mul(icoAmount[addr]).div(shareRuleList[i].rateDenominator).sub( sharedAmount[addr]);\n', '                    return canTransferAmount;\n', '                }\n', '            }\n', '            if (allowTransfer == false)\n', '            {\n', '                bool isOverTime = true;\n', '                for (i = 0; i < count ; i++) {\n', '                    if ( now < shareRuleList[i].endTime) {\n', '                        isOverTime = false;\n', '                    }\n', '                }\n', '                if (isOverTime == true) {\n', '                    allowTransfer = true;\n', '                    canTransferAmount = balances[addr];\n', '                    return canTransferAmount;\n', '                }\n', '            }\n', '        }\n', '    }\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public running returns (bool) \n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        require( locked[msg.sender] != true);\n', '        require( locked[_to] != true);\n', '        require( getRemainShareAmount() >= _value );\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        sharedAmount[msg.sender] = sharedAmount[msg.sender].add( _value );\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) \n', '    {\n', '        return balances[_owner];\n', '    }\n', '}\n', 'pragma solidity ^0.4.23;\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken \n', '{\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public running returns (bool) \n', '    {\n', '        require(_to != address(0));\n', '        require( locked[_from] != true && locked[_to] != true);\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the\n', '    old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public running returns (bool) \n', '    {\n', '        require(getRemainShareAmountInternal(msg.sender) >= _value);\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) \n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', 'contract AlanPlusToken is StandardToken\n', '{\n', '    event Burn(address indexed from, uint256 value);\n', '    /**\n', '    * Destroy tokens\n', '    * Remove `_value` tokens from the system irreversibly\n', '    * @param _value the amount of money to burn\n', '    */\n', '    function burn(uint256 _value) public onlyOwner running returns (bool success) \n', '    {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * Destroy tokens from other account\n', '    *\n', '    * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '    *\n', '    * @param _from the address of the senderT\n', '    * @param _value the amount of money to burn\n', '    */\n', '    function burnFrom(address _from, uint256 _value) public onlyOwner returns (bool success) \n', '    {\n', '        require(balances[_from] >= _value);\n', '        if (_value <= allowed[_from][msg.sender]) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        else {\n', '            allowed[_from][msg.sender] = 0;\n', '        }\n', '        balances[_from] -= _value;\n', '        totalSupply_ -= _value;\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', 'pragma solidity ^0.4.23;\n', 'contract MAYA is AlanPlusToken \n', '{\n', '    string public constant name = "Maya";\n', '    string public constant symbol = "MAYA";\n', '    uint8 public constant decimals = 18;\n', '    uint256 private constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n', '    function () public payable \n', '    {\n', '        uint curIcoRate = 0;\n', '        if (agentRate[msg.sender] > 0) {\n', '            curIcoRate = agentRate[msg.sender];\n', '        }\n', '        else \n', '        {\n', '            uint icoRuleIndex = 500;\n', '            for (uint i = 0; i < icoRuleList.length ; i++)\n', '            {\n', '                if ((icoRuleList[i].canceled != true) && (icoRuleList[i].startTime < now && now < icoRuleList[i].endTime)) {\n', '                    curIcoRate = icoRuleList[i].rate;\n', '                    icoRuleIndex = i;\n', '                }\n', '            }\n', '            if (icoRuleIndex == 500)\n', '            {\n', '                require(icoRuleIndex != 500);\n', '                addr2icoRuleIdList[msg.sender].push( 0 );\n', '                addr2shareRuleGroupId[msg.sender] = addr2shareRuleGroupId[msg.sender] > 0 ? addr2shareRuleGroupId[msg.sender] : 0;\n', '            }\n', '            else\n', '            {\n', '                addr2shareRuleGroupId[msg.sender] = addr2shareRuleGroupId[msg.sender] > 0 ? addr2shareRuleGroupId[msg.sender] : icoRuleList[icoRuleIndex].shareRuleGroupId;\n', '                addr2icoRuleIdList[msg.sender].push( icoRuleIndex + 1 );\n', '                icoPushAddr(icoRuleIndex, msg.sender);\n', '            }\n', '        }\n', '        uint amountMAYA = 0;\n', '        amountMAYA = msg.value.mul( curIcoRate );\n', '        balances[msg.sender] = balances[msg.sender].add(amountMAYA);\n', '        icoAmount[msg.sender] = icoAmount[msg.sender].add(amountMAYA);\n', '        balances[owner] = balances[owner].sub(amountMAYA);\n', '        ADDR_MAYA_ORG.transfer(msg.value);\n', '    }\n', '    event AddBalance(address addr, uint amount);\n', '    event SubBalance(address addr, uint amount);\n', '    address addrContractCaller;\n', '    modifier isContractCaller {\n', '        require(msg.sender == addrContractCaller);\n', '        _;\n', '    }\n', '    function addBalance(address addr, uint amount) public isContractCaller returns(bool)\n', '    {\n', '        require(addr != address(0));\n', '        balances[addr] = balances[addr].add(amount);\n', '        emit AddBalance(addr, amount);\n', '        return true;\n', '    }\n', '    function subBalance(address addr, uint amount) public isContractCaller returns(bool)\n', '    {\n', '        require(balances[addr] >= amount);\n', '        balances[addr] = balances[addr].sub(amount);\n', '        emit SubBalance(addr, amount);\n', '        return true;\n', '    }\n', '    function setAddrContractCaller(address addr) onlyOwner public returns(bool)\n', '    {\n', '        require(addr != address(0));\n', '        addrContractCaller = addr;\n', '        return true;\n', '    }\n', '    constructor(uint totalSupply) public \n', '    {\n', '        owner = msg.sender;\n', '        ADDR_MAYA_ORG = owner;\n', '        totalSupply_ = totalSupply > 0 ? totalSupply : INITIAL_SUPPLY;\n', '        uint assignedAmount = 500000000 + 50000000 + 100000000;\n', '        assignedAmount = parse2wei(assignedAmount);\n', '        balances[owner] = totalSupply_.sub( assignedAmount );\n', '        initIcoRule();\n', '        initPublicityAddr();\n', '        lockAccount(ADDR_MAYA_TEAM);\n', '    }\n', '}']
