['pragma solidity ^0.4.24;\n', '\n', '// AddrSet is an address set based on http://solidity.readthedocs.io/en/develop/contracts.html#libraries\n', 'library AddrSet {\n', '    // We define a new struct datatype that will be used to\n', '    // hold its data in the calling contract.\n', '    struct Data { mapping(address => bool) flags; }\n', '\n', '    // Note that the first parameter is of type "storage\n', '    // reference" and thus only its storage address and not\n', '    // its contents is passed as part of the call.  This is a\n', '    // special feature of library functions.  It is idiomatic\n', '    // to call the first parameter `self`, if the function can\n', '    // be seen as a method of that object.\n', '    function insert(Data storage self, address value) internal returns (bool) {\n', '        if (self.flags[value]) {\n', '            return false; // already there\n', '        }\n', '        self.flags[value] = true;\n', '        return true;\n', '    }\n', '\n', '    function remove(Data storage self, address value) internal returns (bool) {\n', '        if (!self.flags[value]) {\n', '            return false; // not there\n', '        }\n', '        self.flags[value] = false;\n', '        return true;\n', '    }\n', '\n', '    function contains(Data storage self, address value) internal view returns (bool) {\n', '        return self.flags[value];\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '    \n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '// Copyright 2017, 2018 Tensigma Ltd. All rights reserved.\n', '// Use of this source code is governed by Microsoft Reference Source\n', '// License (MS-RSL) that can be found in the LICENSE file.\n', '\n', '// KYC implements "Know Your Customer" storage for identity approvals by KYC providers.\n', 'contract KYC is Owned {\n', '\n', '    // Status corresponding to the state of approvement:\n', '    // * Unknown when an address has not been processed yet;\n', '    // * Approved when an address has been approved by contract owner or 3rd party KYC provider;\n', '    // * Suspended means a temporary or permanent suspension of all operations, any KYC providers may\n', '    // set this status when account needs to be re-verified due to legal events or blocked because of fraud.\n', '    enum Status {\n', '        unknown,\n', '        approved,\n', '        suspended\n', '    }\n', '\n', '    // Events emitted by this contract\n', '    event ProviderAdded(address indexed addr);\n', '    event ProviderRemoved(address indexed addr);\n', '    event AddrApproved(address indexed addr, address indexed by);\n', '    event AddrSuspended(address indexed addr, address indexed by);\n', '\n', '    // Contract state\n', '    AddrSet.Data private kycProviders;\n', '    mapping(address => Status) public kycStatus;\n', '\n', '    // registerProvider adds a new 3rd-party provider that is authorized to perform KYC.\n', '    function registerProvider(address addr) public onlyOwner {\n', '        require(AddrSet.insert(kycProviders, addr));\n', '        emit ProviderAdded(addr);\n', '    }\n', '\n', '    // removeProvider removes a 3rd-party provider that was authorized to perform KYC.\n', '    function removeProvider(address addr) public onlyOwner {\n', '        require(AddrSet.remove(kycProviders, addr));\n', '        emit ProviderRemoved(addr);\n', '    }\n', '\n', '    // isProvider returns true if the given address was authorized to perform KYC.\n', '    function isProvider(address addr) public view returns (bool) {\n', '        return addr == owner || AddrSet.contains(kycProviders, addr);\n', '    }\n', '\n', '    // getStatus returns the KYC status for a given address.\n', '    function getStatus(address addr) public view returns (Status) {\n', '        return kycStatus[addr];\n', '    }\n', '\n', '    // approveAddr sets the address status to Approved, see Status for details.\n', '    // Can be invoked by owner or authorized KYC providers only.\n', '    function approveAddr(address addr) public onlyAuthorized {\n', '        Status status = kycStatus[addr];\n', '        require(status != Status.approved);\n', '        kycStatus[addr] = Status.approved;\n', '        emit AddrApproved(addr, msg.sender);\n', '    }\n', '\n', '    // suspendAddr sets the address status to Suspended, see Status for details.\n', '    // Can be invoked by owner or authorized KYC providers only.\n', '    function suspendAddr(address addr) public onlyAuthorized {\n', '        Status status = kycStatus[addr];\n', '        require(status != Status.suspended);\n', '        kycStatus[addr] = Status.suspended;\n', '        emit AddrSuspended(addr, msg.sender);\n', '    }\n', '\n', '    // onlyAuthorized modifier restricts write access to contract owner and authorized KYC providers.\n', '    modifier onlyAuthorized() {\n', '        require(msg.sender == owner || AddrSet.contains(kycProviders, msg.sender));\n', '        _;\n', '    }\n', '}']