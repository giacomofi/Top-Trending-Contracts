['pragma solidity 0.4.21;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Authorizable\n', ' * @dev The Authorizable contract has authorized addresses, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "multiple user permissions".\n', ' */\n', 'contract Authorizable is Ownable {\n', '    \n', '    mapping(address => bool) public authorized;\n', '    event AuthorizationSet(address indexed addressAuthorized, bool indexed authorization);\n', '\n', '    /**\n', '     * @dev The Authorizable constructor sets the first `authorized` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Authorizable() public {\n', '        authorize(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the authorized.\n', '     */\n', '    modifier onlyAuthorized() {\n', '        require(authorized[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows \n', '     * @param _address The address to change authorization.\n', '     */\n', '    function authorize(address _address) public onlyOwner {\n', '        require(!authorized[_address]);\n', '        emit AuthorizationSet(_address, true);\n', '        authorized[_address] = true;\n', '    }\n', '    /**\n', '     * @dev Disallows\n', '     * @param _address The address to change authorization.\n', '     */\n', '    function deauthorize(address _address) public onlyOwner {\n', '        require(authorized[_address]);\n', '        emit AuthorizationSet(_address, false);\n', '        authorized[_address] = false;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Whitelist interface\n', ' */\n', 'contract Whitelist is Authorizable {\n', '    mapping(address => bool) whitelisted;\n', '    event AddToWhitelist(address _beneficiary);\n', '    event RemoveFromWhitelist(address _beneficiary);\n', '   \n', '    function Whitelist() public {\n', '        addToWhitelist(msg.sender);\n', '    }\n', '    \n', '    \n', '    modifier onlyWhitelisted() {\n', '        require(isWhitelisted(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isWhitelisted(address _address) public view returns (bool) {\n', '        return whitelisted[_address];\n', '    }\n', '\n', ' \n', '    function addToWhitelist(address _beneficiary) public onlyAuthorized {\n', '        require(!whitelisted[_beneficiary]);\n', '        emit AddToWhitelist(_beneficiary);\n', '        whitelisted[_beneficiary] = true;\n', '    }\n', '    \n', '    function removeFromWhitelist(address _beneficiary) public onlyAuthorized {\n', '        require(whitelisted[_beneficiary]);\n', '        emit RemoveFromWhitelist(_beneficiary);\n', '        whitelisted[_beneficiary] = false;\n', '    }\n', '}']