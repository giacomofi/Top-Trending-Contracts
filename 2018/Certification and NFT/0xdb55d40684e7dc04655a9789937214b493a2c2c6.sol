['pragma solidity 0.4.19;\n', '\n', '\n', '/// @title Ethereum Claims Registry - A repository storing claims issued\n', '///        from any Ethereum account to any other Ethereum account.\n', 'contract EthereumClaimsRegistry {\n', '\n', '    mapping(address => mapping(address => mapping(bytes32 => bytes32))) public registry;\n', '\n', '    event ClaimSet(\n', '        address indexed issuer,\n', '        address indexed subject,\n', '        bytes32 indexed key,\n', '        bytes32 value,\n', '        uint updatedAt);\n', '\n', '    event ClaimRemoved(\n', '        address indexed issuer,\n', '        address indexed subject,\n', '        bytes32 indexed key,\n', '        uint removedAt);\n', '\n', '    /// @dev Create or update a claim\n', '    /// @param subject The address the claim is being issued to\n', '    /// @param key The key used to identify the claim\n', '    /// @param value The data associated with the claim\n', '    function setClaim(address subject, bytes32 key, bytes32 value) public {\n', '        registry[msg.sender][subject][key] = value;\n', '        ClaimSet(msg.sender, subject, key, value, now);\n', '    }\n', '\n', '    /// @dev Create or update a claim about yourself\n', '    /// @param key The key used to identify the claim\n', '    /// @param value The data associated with the claim\n', '    function setSelfClaim(bytes32 key, bytes32 value) public {\n', '        setClaim(msg.sender, key, value);\n', '    }\n', '\n', '    /// @dev Allows to retrieve claims from other contracts as well as other off-chain interfaces\n', '    /// @param issuer The address of the issuer of the claim\n', '    /// @param subject The address to which the claim was issued to\n', '    /// @param key The key used to identify the claim\n', '    function getClaim(address issuer, address subject, bytes32 key) public constant returns(bytes32) {\n', '        return registry[issuer][subject][key];\n', '    }\n', '\n', '    /// @dev Allows to remove a claims from the registry.\n', '    ///      This can only be done by the issuer or the subject of the claim.\n', '    /// @param issuer The address of the issuer of the claim\n', '    /// @param subject The address to which the claim was issued to\n', '    /// @param key The key used to identify the claim\n', '    function removeClaim(address issuer, address subject, bytes32 key) public {\n', '        require(msg.sender == issuer || msg.sender == subject);\n', '        require(registry[issuer][subject][key] != 0);\n', '        delete registry[issuer][subject][key];\n', '        ClaimRemoved(msg.sender, subject, key, now);\n', '    }\n', '}']