['pragma solidity ^0.4.19; //\n', '\n', '// EtherVillains.co\n', '\n', '\n', 'contract ERC721 {\n', '  // Required methods\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function implementsERC721() public pure returns (bool);\n', '  function ownerOf(uint256 _tokenId) public view returns (address addr);\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '\n', '  // Optional\n', '  // function name() public view returns (string name);\n', '  // function symbol() public view returns (string symbol);\n', '  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n', '  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n', '}\n', '\n', 'contract EtherVillains is ERC721 {\n', '\n', '  /*** EVENTS ***/\n', '\n', '  /// @dev The Birth event is fired whenever a new villain comes into existence.\n', '  event Birth(uint256 tokenId, string name, address owner);\n', '\n', '  /// @dev The TokenSold event is fired whenever a token is sold.\n', '  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\n', '\n', '  /// @dev Transfer event as defined in current draft of ERC721.\n', '  ///  ownership is assigned, including births.\n', '  event Transfer(address from, address to, uint256 tokenId);\n', '\n', '  /*** CONSTANTS ***/\n', '\n', '  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '  string public constant NAME = "EtherVillains"; //\n', '  string public constant SYMBOL = "EVIL"; //\n', '\n', '  uint256 public precision = 1000000000000; //0.000001 Eth\n', '\n', '  uint256 private zapPrice =  0.001 ether;\n', '  uint256 private pinchPrice =  0.002 ether;\n', '  uint256 private guardPrice =  0.002 ether;\n', '\n', '  uint256 private pinchPercentageReturn = 20; // how much a flip is worth when a villain is flipped.\n', '\n', '  uint256 private defaultStartingPrice = 0.001 ether;\n', '  uint256 private firstStepLimit =  0.05 ether;\n', '  uint256 private secondStepLimit = 0.5 ether;\n', '\n', '  /*** STORAGE ***/\n', '\n', '  /// @dev A mapping from villain IDs to the address that owns them. All villians have\n', '  ///  some valid owner address.\n', '  mapping (uint256 => address) public villainIndexToOwner;\n', '\n', '  // @dev A mapping from owner address to count of tokens that address owns.\n', '  //  Used internally inside balanceOf() to resolve ownership count.\n', '  mapping (address => uint256) private ownershipTokenCount;\n', '\n', '  /// @dev A mapping from Villains to an address that has been approved to call\n', '  ///  transferFrom(). Each Villain can only have one approved address for transfer\n', '  ///  at any time. A zero value means no approval is outstanding.\n', '  mapping (uint256 => address) public villainIndexToApproved;\n', '\n', '  // @dev A mapping from Villains to the price of the token.\n', '  mapping (uint256 => uint256) private villainIndexToPrice;\n', '\n', '  // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '  address public ceoAddress;\n', '  address public cooAddress;\n', '\n', '\n', '  /*** DATATYPES ***/\n', '  struct Villain {\n', '    uint256 id; // needed for gnarly front end\n', '    string name;\n', '    uint256 class; // 0 = Zapper , 1 = Pincher , 2 = Guard\n', '    uint256 level; // 0 for Zapper, 1 - 5 for Pincher, Guard - representing the max active pinches or guards\n', '    uint256 numSkillActive; // the current number of active skill implementations (pinches or guards)\n', '    uint256 state; // 0 = normal , 1 = zapped , 2 = pinched , 3 = guarded\n', '    uint256 zappedExipryTime; // if this villain was disarmed, when does it expire\n', '    uint256 affectedByToken; // token that has affected this token (zapped, pinched, guarded)\n', '    uint256 buyPrice; // the price at which this villain was purchased\n', '  }\n', '\n', '  Villain[] private villains;\n', '\n', '  /*** ACCESS MODIFIERS ***/\n', '  /// @dev Access modifier for CEO-only functionality\n', '  modifier onlyCEO() {\n', '    require(msg.sender == ceoAddress);\n', '    _;\n', '  }\n', '\n', '  /// @dev Access modifier for COO-only functionality\n', '  modifier onlyCOO() {\n', '    require(msg.sender == cooAddress);\n', '    _;\n', '  }\n', '\n', '  /// Access modifier for contract owner only functionality\n', '  modifier onlyCLevel() {\n', '    require(\n', '      msg.sender == ceoAddress ||\n', '      msg.sender == cooAddress\n', '    );\n', '    _;\n', '  }\n', '\n', '  /*** CONSTRUCTOR ***/\n', '  function EtherVillains() public {\n', '    ceoAddress = msg.sender;\n', '    cooAddress = msg.sender;\n', '  }\n', '\n', '  /*** PUBLIC FUNCTIONS ***/\n', '  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n', '  /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '  ///  clear all approvals.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function approve(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    // Caller must own token.\n', '    require(_owns(msg.sender, _tokenId));\n', '\n', '    villainIndexToApproved[_tokenId] = _to;\n', '\n', '    Approval(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// For querying balance of a particular account\n', '  /// @param _owner The address for balance query\n', '  /// @dev Required for ERC-721 compliance.\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return ownershipTokenCount[_owner];\n', '  }\n', '\n', '  /// @dev Creates a new Villain with the given name.\n', '  function createVillain(string _name, uint256 _startPrice, uint256 _class, uint256 _level) public onlyCLevel {\n', '    _createVillain(_name, address(this), _startPrice,_class,_level);\n', '  }\n', '\n', '  /// @notice Returns all the relevant information about a specific villain.\n', '  /// @param _tokenId The tokenId of the villain of interest.\n', '  function getVillain(uint256 _tokenId) public view returns (\n', '    uint256 id,\n', '    string villainName,\n', '    uint256 sellingPrice,\n', '    address owner,\n', '    uint256 class,\n', '    uint256 level,\n', '    uint256 numSkillActive,\n', '    uint256 state,\n', '    uint256 zappedExipryTime,\n', '    uint256 buyPrice,\n', '    uint256 nextPrice,\n', '    uint256 affectedByToken\n', '  ) {\n', '    id = _tokenId;\n', '    Villain storage villain = villains[_tokenId];\n', '    villainName = villain.name;\n', '    sellingPrice =villainIndexToPrice[_tokenId];\n', '    owner = villainIndexToOwner[_tokenId];\n', '    class = villain.class;\n', '    level = villain.level;\n', '    numSkillActive = villain.numSkillActive;\n', '    state = villain.state;\n', '    if (villain.state==1 && now>villain.zappedExipryTime){\n', '        state=0; // time expired so say they are armed\n', '    }\n', '    zappedExipryTime=villain.zappedExipryTime;\n', '    buyPrice=villain.buyPrice;\n', '    nextPrice=calculateNewPrice(_tokenId);\n', '    affectedByToken=villain.affectedByToken;\n', '  }\n', '\n', '  /// zap a villain in preparation for a pinch\n', '  function zapVillain(uint256 _victim  , uint256 _zapper) public payable returns (bool){\n', '    address villanOwner = villainIndexToOwner[_victim];\n', "    require(msg.sender != villanOwner); // it doesn't make sense, but hey\n", '    require(villains[_zapper].class==0); // they must be a zapper class\n', '    require(msg.sender==villainIndexToOwner[_zapper]); // they must be a zapper owner\n', '\n', '    uint256 operationPrice = zapPrice;\n', '    // if the target sale price <0.01 then operation is free\n', '    if (villainIndexToPrice[_victim]<0.01 ether){\n', '      operationPrice=0;\n', '    }\n', '\n', '    // can be used to extend a zapped period\n', '    if (msg.value>=operationPrice && villains[_victim].state<2){\n', '        // zap villain\n', '        villains[_victim].state=1;\n', '        villains[_victim].zappedExipryTime = now + (villains[_zapper].level * 1 minutes);\n', '    }\n', '\n', '  }\n', '\n', '    /// pinch a villain\n', '  function pinchVillain(uint256 _victim, uint256 _pincher) public payable returns (bool){\n', '    address victimOwner = villainIndexToOwner[_victim];\n', "    require(msg.sender != victimOwner); // it doesn't make sense, but hey\n", '    require(msg.sender==villainIndexToOwner[_pincher]);\n', '    require(villains[_pincher].class==1); // they must be a pincher\n', '    require(villains[_pincher].numSkillActive<villains[_pincher].level);\n', '\n', '    uint256 operationPrice = pinchPrice;\n', '    // if the target sale price <0.01 then operation is free\n', '    if (villainIndexToPrice[_victim]<0.01 ether){\n', '      operationPrice=0;\n', '    }\n', '\n', '    // 0 = normal , 1 = zapped , 2 = pinched\n', '    // must be inside the zapped window\n', '    if (msg.value>=operationPrice && villains[_victim].state==1 && now< villains[_victim].zappedExipryTime){\n', '        // squeeze\n', '        villains[_victim].state=2; // squeezed\n', '        villains[_victim].affectedByToken=_pincher;\n', '        villains[_pincher].numSkillActive++;\n', '    }\n', '  }\n', '\n', '  /// guard a villain\n', '  function guardVillain(uint256 _target, uint256 _guard) public payable returns (bool){\n', '    require(msg.sender==villainIndexToOwner[_guard]); // sender must own this token\n', '    require(villains[_guard].numSkillActive<villains[_guard].level);\n', '\n', '    uint256 operationPrice = guardPrice;\n', '    // if the target sale price <0.01 then operation is free\n', '    if (villainIndexToPrice[_target]<0.01 ether){\n', '      operationPrice=0;\n', '    }\n', '\n', '    // 0 = normal , 1 = zapped , 2 = pinched, 3 = guarded\n', '    if (msg.value>=operationPrice && villains[_target].state<2){\n', '        // guard this villain\n', '        villains[_target].state=3;\n', '        villains[_target].affectedByToken=_guard;\n', '        villains[_guard].numSkillActive++;\n', '    }\n', '  }\n', '\n', '\n', '  function implementsERC721() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function name() public pure returns (string) {\n', '    return NAME;\n', '  }\n', '\n', '  /// For querying owner of token\n', '  /// @param _tokenId The tokenID for owner inquiry\n', '  /// @dev Required for ERC-721 compliance.\n', '  function ownerOf(uint256 _tokenId)\n', '    public\n', '    view\n', '    returns (address owner)\n', '  {\n', '    owner = villainIndexToOwner[_tokenId];\n', '    require(owner != address(0));\n', '  }\n', '\n', '  function payout(address _to) public onlyCLevel {\n', '    _payout(_to);\n', '  }\n', '\n', '\n', '\n', '\n', '  // Allows someone to send ether and obtain the token\n', '  function purchase(uint256 _tokenId) public payable {\n', '    address oldOwner = villainIndexToOwner[_tokenId];\n', '    address newOwner = msg.sender;\n', '\n', '    uint256 sellingPrice = villainIndexToPrice[_tokenId];\n', '\n', '    // Making sure token owner is not sending to self\n', '    require(oldOwner != newOwner);\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Making sure sent amount is greater than or equal to the sellingPrice\n', '    require(msg.value >= sellingPrice);\n', '\n', '    uint256 payment = roundIt(uint256(SafeMath.div(SafeMath.mul(sellingPrice, 93), 100))); // taking 7% for the house before any pinches?\n', '    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n', '\n', '\n', "    // HERE'S THE FLIPPING STRATEGY\n", '\n', '    villainIndexToPrice[_tokenId]  = calculateNewPrice(_tokenId);\n', '\n', '\n', '     // we check to see if there is a pinch on this villain\n', '     // if there is, then transfer the pinch percentage to the owner of the pinch token\n', '     if (villains[_tokenId].state==2 && villains[_tokenId].affectedByToken!=0){\n', '         uint256 profit = sellingPrice - villains[_tokenId].buyPrice;\n', '         uint256 pinchPayment = roundIt(SafeMath.mul(SafeMath.div(profit,100),pinchPercentageReturn));\n', '\n', '         // release on of this villans pinch capabilitiesl\n', '         address pincherTokenOwner = villainIndexToOwner[villains[_tokenId].affectedByToken];\n', '         pincherTokenOwner.transfer(pinchPayment);\n', '         payment = SafeMath.sub(payment,pinchPayment); // subtract the pinch fees\n', '     }\n', '\n', '     // free the villan of any pinches or guards as part of this purpose\n', '     if (villains[villains[_tokenId].affectedByToken].numSkillActive>0){\n', '        villains[villains[_tokenId].affectedByToken].numSkillActive--; // reset the pincher or guard affected count\n', '     }\n', '\n', '     villains[_tokenId].state=0;\n', '     villains[_tokenId].affectedByToken=0;\n', '     villains[_tokenId].buyPrice=sellingPrice;\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '\n', '    // Pay previous tokenOwner if owner is not contract\n', '    if (oldOwner != address(this)) {\n', '      oldOwner.transfer(payment); //(1-0.08)\n', '    }\n', '\n', '    TokenSold(_tokenId, sellingPrice, villainIndexToPrice[_tokenId], oldOwner, newOwner, villains[_tokenId].name);\n', '\n', '    msg.sender.transfer(purchaseExcess); // return any additional amount\n', '  }\n', '\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\n', '    return villainIndexToPrice[_tokenId];\n', '  }\n', '\n', '  function nextPrice(uint256 _tokenId) public view returns (uint256 nPrice) {\n', '    return calculateNewPrice(_tokenId);\n', '  }\n', '\n', '\n', '//(note: hard coded value appreciation is 2X from a contract price of 0 ETH to 0.05 ETH, 1.2X from 0.05 to 0.5 and 1.15X from 0.5 ETH and up).\n', '\n', '\n', ' function calculateNewPrice(uint256 _tokenId) internal view returns (uint256 price){\n', '   uint256 sellingPrice = villainIndexToPrice[_tokenId];\n', '   uint256 newPrice;\n', '   // Update prices\n', '   if (sellingPrice < firstStepLimit) {\n', '     // first stage\n', '    newPrice = roundIt(SafeMath.mul(sellingPrice, 2));\n', '   } else if (sellingPrice < secondStepLimit) {\n', '     // second stage\n', '     newPrice = roundIt(SafeMath.div(SafeMath.mul(sellingPrice, 120), 100));\n', '   } else {\n', '     // third stage\n', '     newPrice= roundIt(SafeMath.div(SafeMath.mul(sellingPrice, 115), 100));\n', '   }\n', '   return newPrice;\n', '\n', ' }\n', '\n', '  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '  /// @param _newCEO The address of the new CEO\n', '  function setCEO(address _newCEO) public onlyCEO {\n', '    require(_newCEO != address(0));\n', '\n', '    ceoAddress = _newCEO;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\n', '  /// @param _newCOO The address of the new COO\n', '  function setCOO(address _newCOO) public onlyCEO {\n', '    require(_newCOO != address(0));\n', '\n', '    cooAddress = _newCOO;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function symbol() public pure returns (string) {\n', '    return SYMBOL;\n', '  }\n', '\n', '  /// @notice Allow pre-approved user to take ownership of a token\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    address newOwner = msg.sender;\n', '    address oldOwner = villainIndexToOwner[_tokenId];\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Making sure transfer is approved\n', '    require(_approved(newOwner, _tokenId));\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '  }\n', '\n', '  /// @param _owner The owner whose tokens we are interested in.\n', '  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\n', '    uint256 tokenCount = balanceOf(_owner);\n', '    if (tokenCount == 0) {\n', '        // Return an empty array\n', '      return new uint256[](0);\n', '    } else {\n', '      uint256[] memory result = new uint256[](tokenCount);\n', '      uint256 totalVillains = totalSupply();\n', '      uint256 resultIndex = 0;\n', '\n', '      uint256 villainId;\n', '      for (villainId = 0; villainId <= totalVillains; villainId++) {\n', '        if (villainIndexToOwner[villainId] == _owner) {\n', '          result[resultIndex] = villainId;\n', '          resultIndex++;\n', '        }\n', '      }\n', '      return result;\n', '    }\n', '  }\n', '\n', '  /// For querying totalSupply of token\n', '  /// @dev Required for ERC-721 compliance.\n', '  function totalSupply() public view returns (uint256 total) {\n', '    return villains.length;\n', '  }\n', '\n', '  /// Owner initates the transfer of the token to another account\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transfer(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    require(_owns(msg.sender, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// Third-party initiates transfer of token from address _from to address _to\n', '  /// @param _from The address for the token to be transferred from.\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    require(_owns(_from, _tokenId));\n', '    require(_approved(_to, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /*** PRIVATE FUNCTIONS ***/\n', '  /// Safety check on _to address to prevent against an unexpected 0x0 default.\n', '  function _addressNotNull(address _to) private pure returns (bool) {\n', '    return _to != address(0);\n', '  }\n', '\n', '  /// For checking approval of transfer for address _to\n', '  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n', '    return villainIndexToApproved[_tokenId] == _to;\n', '  }\n', '\n', '\n', '\n', '  /// For creating Villains\n', '  function _createVillain(string _name, address _owner, uint256 _price, uint256 _class, uint256 _level) private {\n', '\n', '    Villain memory _villain = Villain({\n', '      name: _name,\n', '      class: _class,\n', '      level: _level,\n', '      numSkillActive: 0,\n', '      state: 0,\n', '      zappedExipryTime: 0,\n', '      affectedByToken: 0,\n', '      buyPrice: 0,\n', '      id: villains.length-1\n', '    });\n', '    uint256 newVillainId = villains.push(_villain) - 1;\n', '    villains[newVillainId].id=newVillainId;\n', '\n', "    // It's probably never going to happen, 4 billion tokens are A LOT, but\n", "    // let's just be 100% sure we never let this happen.\n", '    require(newVillainId == uint256(uint32(newVillainId)));\n', '\n', '    Birth(newVillainId, _name, _owner);\n', '\n', '    villainIndexToPrice[newVillainId] = _price;\n', '\n', '    // This will assign ownership, and also emit the Transfer event as\n', '    // per ERC721 draft\n', '    _transfer(address(0), _owner, newVillainId);\n', '  }\n', '\n', '  /// Check for token ownership\n', '  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\n', '    return claimant == villainIndexToOwner[_tokenId];\n', '  }\n', '\n', '  /// For paying out balance on contract\n', '  function _payout(address _to) private {\n', '    if (_to == address(0)) {\n', '      ceoAddress.transfer(this.balance);\n', '    } else {\n', '      _to.transfer(this.balance);\n', '    }\n', '  }\n', '\n', '  /// @dev Assigns ownership of a specific Villain to an address.\n', '  function _transfer(address _from, address _to, uint256 _tokenId) private {\n', "    // Since the number of villains is capped to 2^32 we can't overflow this\n", '    ownershipTokenCount[_to]++;\n', '    //transfer ownership\n', '    villainIndexToOwner[_tokenId] = _to;\n', '\n', "    // When creating new villains _from is 0x0, but we can't account that address.\n", '    if (_from != address(0)) {\n', '      ownershipTokenCount[_from]--;\n', '      // clear any previously approved ownership exchange\n', '      delete villainIndexToApproved[_tokenId];\n', '    }\n', '\n', '    // Emit the transfer event.\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '    // utility to round to the game precision\n', '    function roundIt(uint256 amount) internal constant returns (uint256)\n', '    {\n', '        // round down to correct preicision\n', '        uint256 result = (amount/precision)*precision;\n', '        return result;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']