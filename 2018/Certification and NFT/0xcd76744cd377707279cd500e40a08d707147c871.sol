['pragma solidity ^0.4.19;\n', '\n', 'contract TokenInformation {\n', '  function showDemurrageConfigs() public constant returns (uint256 _base, uint256 _rate, address _collector, bool _no_demurrage_fee);\n', '}\n', '\n', '/// @title Digix Gold Token Demurrage Calculator\n', '/// @author Digix Holdings Pte Ltd\n', '/// @notice This contract is meant to be used by exchanges/other parties who want to calculate the DGX demurrage fees, provided an initial balance and the days elapsed\n', 'contract DgxDemurrageCalculator {\n', '  address public TOKEN_ADDRESS;\n', '  address public TOKEN_INFORMATION_ADDRESS;\n', '\n', '  function token_information() internal view returns (TokenInformation _token_information) {\n', '    _token_information = TokenInformation(TOKEN_INFORMATION_ADDRESS);\n', '  }\n', '\n', '  function DgxDemurrageCalculator(address _token_address, address _token_information_address) public {\n', '    TOKEN_ADDRESS = _token_address;\n', '    TOKEN_INFORMATION_ADDRESS = _token_information_address;\n', '  }\n', '\n', '  function calculateDemurrage(uint256 _initial_balance, uint256 _days_elapsed)\n', '           public\n', '           view\n', '           returns (uint256 _demurrage_fees, bool _no_demurrage_fees)\n', '  {\n', '    uint256 _base;\n', '    uint256 _rate;\n', '    (_base, _rate,,_no_demurrage_fees) = token_information().showDemurrageConfigs();\n', '    _demurrage_fees = (_initial_balance * _days_elapsed * _rate) / _base;\n', '  }\n', '}']