['pragma solidity ^0.4.25;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="157170617055746d7c7a786f707b3b767a">[email&#160;protected]</a>> (https://github.com/dete)\n', 'contract ERC721 {\n', '    // Required methods\n', '    function totalSupply() public view returns (uint256 total);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function ownerOf(uint256 _tokenId) external view returns (address owner);\n', '    function approve(address _to, uint256 _tokenId) external;\n', '    function transfer(address _to, uint256 _tokenId) external;\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n', '\n', '    // Events\n', '    event Transfer(address from, address to, uint256 tokenId);\n', '    event Approval(address owner, address approved, uint256 tokenId);\n', '\n', '    // Optional\n', '    // function name() public view returns (string name);\n', '    // function symbol() public view returns (string symbol);\n', '    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n', '    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\n', '\n', '    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n', '    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n', '}\n', '\n', '\n', '// // Auction wrapper functions\n', '\n', '\n', '// Auction wrapper functions\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title A facet of ArtCore that manages special access privileges.\n', '/// @author Axiom Zen (https://www.axiomzen.co)\n', '/// @dev See the ArtCore contract documentation to understand how the various contract facets are arranged.\n', 'contract ArtAccessControl {\n', '    // This facet controls access control for CryptoKitties. There are four roles managed here:\n', '    //\n', '    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart\n', '    //         contracts. It is also the only role that can unpause the smart contract. It is initially\n', '    //         set to the address that created the smart contract in the ArtCore constructor.\n', '    //\n', '    //     - The CFO: The CFO can withdraw funds from ArtCore and its auction contracts.\n', '    //\n', '    //     - The COO: The COO can release gen0 kitties to auction, and mint promo cats.\n', '    //\n', '    // It should be noted that these roles are distinct without overlap in their access abilities, the\n', '    // abilities listed for each role above are exhaustive. In particular, while the CEO can assign any\n', '    // address to any role, the CEO address itself doesn&#39;t have the ability to act in those roles. This\n', '    // restriction is intentional so that we aren&#39;t tempted to use the CEO address frequently out of\n', '    // convenience. The less we use an address, the less likely it is that we somehow compromise the\n', '    // account.\n', '\n', '    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\n', '    event ContractUpgrade(address newContract);\n', '\n', '    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '    address public ceoAddress;\n', '    address public cfoAddress;\n', '    address public cooAddress;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '\n', '    /// @dev Access modifier for CEO-only functionality\n', '    modifier onlyCEO() {\n', '        require(msg.sender == ceoAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Access modifier for CFO-only functionality\n', '    modifier onlyCFO() {\n', '        require(msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Access modifier for COO-only functionality\n', '    modifier onlyCOO() {\n', '        require(msg.sender == cooAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCLevel() {\n', '        require(\n', '            msg.sender == cooAddress ||\n', '            msg.sender == ceoAddress ||\n', '            msg.sender == cfoAddress\n', '        );\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '    /// @param _newCEO The address of the new CEO\n', '    function setCEO(address _newCEO) external onlyCEO {\n', '        require(_newCEO != address(0));\n', '\n', '        ceoAddress = _newCEO;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\n', '    /// @param _newCFO The address of the new CFO\n', '    function setCFO(address _newCFO) external onlyCEO {\n', '        require(_newCFO != address(0));\n', '\n', '        cfoAddress = _newCFO;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\n', '    /// @param _newCOO The address of the new COO\n', '    function setCOO(address _newCOO) external onlyCEO {\n', '        require(_newCOO != address(0));\n', '\n', '        cooAddress = _newCOO;\n', '    }\n', '\n', '    /*** Pausable functionality adapted from OpenZeppelin ***/\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any "C-level" role to pause the contract. Used only when\n', '    ///  a bug or exploit is detected and we need to limit damage.\n', '    function pause() external onlyCLevel whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\n', '    ///  one reason we may pause the contract is when CFO or COO accounts are\n', '    ///  compromised.\n', '    /// @notice This is public rather than external so it can be called by\n', '    ///  derived contracts.\n', '    function unpause() public onlyCEO whenPaused {\n', '        // can&#39;t unpause if contract was upgraded\n', '        paused = false;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '/// @title Base contract for CryptoKitties. Holds all common structs, events and base variables.\n', '/// @author Axiom Zen (https://www.axiomzen.co)\n', '/// @dev See the ArtCore contract documentation to understand how the various contract facets are arranged.\n', 'contract ArtBase is ArtAccessControl {\n', '    /*** EVENTS ***/\n', '\n', '    /// @dev The Birth event is fired whenever a new kitten comes into existence. This obviously\n', '    ///  includes any time a cat is created through the giveBirth method, but it is also called\n', '    ///  when a new gen0 cat is created.\n', '    event Create(address owner, uint256 artId, uint16 generator);\n', '\n', '    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a kitten\n', '    ///  ownership is assigned, including births.\n', '    event Transfer(address from, address to, uint256 tokenId);\n', '\n', '    event Vote(uint16 candidate, uint256 voteCount, uint16 currentGenerator, uint256 currentGeneratorVoteCount);\n', '    event NewRecipient(address recipient, uint256 position);\n', '    event NewGenerator(uint256 position);\n', '\n', '    /*** DATA TYPES ***/\n', '\n', '    /// @dev The main Art struct. Every cat in CryptoKitties is represented by a copy\n', '    ///  of this structure, so great care was taken to ensure that it fits neatly into\n', '    ///  exactly two 256-bit words. Note that the order of the members in this structure\n', '    ///  is important because of the byte-packing rules used by Ethereum.\n', '    ///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html\n', '    struct ArtToken {\n', '        // The timestamp from the block when this cat came into existence.\n', '        uint64 birthTime;\n', '        // The "generator" of this art token.\n', '        uint16 generator;\n', '    }\n', '\n', '    /*** STORAGE ***/\n', '\n', '    /// @dev An array containing the Art struct for all Kitties in existence. The ID\n', '    ///  of each cat is actually an index into this array. Note that ID 0 is a negacat,\n', '    ///  the unArt, the mythical beast that is the parent of all gen0 cats. A bizarre\n', '    ///  creature that is both matron and sire... to itself! Has an invalid genetic code.\n', '    ///  In other words, cat ID 0 is invalid... ;-)\n', '    ArtToken[] artpieces;\n', '\n', '    /// @dev A mapping from cat IDs to the address that owns them. All cats have\n', '    ///  some valid owner address, even gen0 cats are created with a non-zero owner.\n', '    mapping (uint256 => address) public artIndexToOwner;\n', '\n', '    // @dev A mapping from owner address to count of tokens that address owns.\n', '    //  Used internally inside balanceOf() to resolve ownership count.\n', '    mapping (address => uint256) ownershipTokenCount;\n', '\n', '    /// @dev A mapping from ArtIDs to an address that has been approved to call\n', '    ///  transferFrom(). Each Art can only have one approved address for transfer\n', '    ///  at any time. A zero value means no approval is outstanding.\n', '    mapping (uint256 => address) public artIndexToApproved;\n', '\n', '\n', '    /// @dev Assigns ownership of a specific Art to an address.\n', '    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n', '        // Since the number of kittens is capped to 2^32 we can&#39;t overflow this\n', '        ownershipTokenCount[_to]++;\n', '        // transfer ownership\n', '        artIndexToOwner[_tokenId] = _to;\n', '        // When creating new kittens _from is 0x0, but we can&#39;t account that address.\n', '        if (_from != address(0)) {\n', '            ownershipTokenCount[_from]--;\n', '            // clear any previously approved ownership exchange\n', '            delete artIndexToApproved[_tokenId];\n', '        }\n', '        // Emit the transfer event.\n', '        Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /// @dev An internal method that creates a new art and stores it. This\n', '    ///  method doesn&#39;t do any checking and should only be called when the\n', '    ///  input data is known to be valid. Will generate both a Birth event\n', '    ///  and a Transfer event.\n', '    /// @param _generator The generator number of this cat, must be computed by caller.\n', '    /// @param _owner The inital owner of this cat, must be non-zero (except for the unArt, ID 0)\n', '    function _createArt(\n', '        uint256 _generator,\n', '        address _owner\n', '    )\n', '        internal\n', '        returns (uint)\n', '    {\n', '        // These requires are not strictly necessary, our calling code should make\n', '        // sure that these conditions are never broken. However! _createArt() is already\n', '        // an expensive call (for storage), and it doesn&#39;t hurt to be especially careful\n', '        // to ensure our data structures are always valid.\n', '        require(_generator == uint256(uint16(_generator)));\n', '\n', '        ArtToken memory _art = ArtToken({\n', '            birthTime: uint64(now),\n', '            generator: uint16(_generator)\n', '        });\n', '        uint256 newArtId = artpieces.push(_art) - 1;\n', '\n', '        // It&#39;s probably never going to happen, 4 billion cats is A LOT, but\n', '        // let&#39;s just be 100% sure we never let this happen.\n', '        require(newArtId == uint256(uint32(newArtId)));\n', '\n', '        // emit the birth event\n', '        Create(\n', '            _owner,\n', '            newArtId,\n', '            _art.generator\n', '        );\n', '\n', '        // This will assign ownership, and also emit the Transfer event as\n', '        // per ERC721 draft\n', '        _transfer(0, _owner, newArtId);\n', '\n', '        return newArtId;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/// @title The external contract that is responsible for generating metadata for the kitties,\n', '///  it has one function that will return the data as bytes.\n', 'contract ERC721Metadata {\n', '    /// @dev Given a token Id, returns a byte array that is supposed to be converted into string.\n', '    function getMetadata(uint256 _tokenId, string) public view returns (bytes32[4] buffer, uint256 count) {\n', '        if (_tokenId == 1) {\n', '            buffer[0] = "Hello World! :D";\n', '            count = 15;\n', '        } else if (_tokenId == 2) {\n', '            buffer[0] = "I would definitely choose a medi";\n', '            buffer[1] = "um length string.";\n', '            count = 49;\n', '        } else if (_tokenId == 3) {\n', '            buffer[0] = "Lorem ipsum dolor sit amet, mi e";\n', '            buffer[1] = "st accumsan dapibus augue lorem,";\n', '            buffer[2] = " tristique vestibulum id, libero";\n', '            buffer[3] = " suscipit varius sapien aliquam.";\n', '            count = 128;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/// @title The facet of the CryptoKitties core contract that manages ownership, ERC-721 (draft) compliant.\n', '/// @author Axiom Zen (https://www.axiomzen.co)\n', '/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\n', '///  See the ArtCore contract documentation to understand how the various contract facets are arranged.\n', 'contract ArtOwnership is ArtBase, ERC721 {\n', '\n', '    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '    string public constant name = "Future of Trust 2018 Art Token";\n', '    string public constant symbol = "FoT2018";\n', '\n', '    // The contract that will return art metadata\n', '    ERC721Metadata public erc721Metadata;\n', '\n', '    bytes4 constant InterfaceSignature_ERC165 =\n', '        bytes4(keccak256(&#39;supportsInterface(bytes4)&#39;));\n', '\n', '    bytes4 constant InterfaceSignature_ERC721 =\n', '        bytes4(keccak256(&#39;name()&#39;)) ^\n', '        bytes4(keccak256(&#39;symbol()&#39;)) ^\n', '        bytes4(keccak256(&#39;totalSupply()&#39;)) ^\n', '        bytes4(keccak256(&#39;balanceOf(address)&#39;)) ^\n', '        bytes4(keccak256(&#39;ownerOf(uint256)&#39;)) ^\n', '        bytes4(keccak256(&#39;approve(address,uint256)&#39;)) ^\n', '        bytes4(keccak256(&#39;transfer(address,uint256)&#39;)) ^\n', '        bytes4(keccak256(&#39;transferFrom(address,address,uint256)&#39;)) ^\n', '        bytes4(keccak256(&#39;tokensOfOwner(address)&#39;)) ^\n', '        bytes4(keccak256(&#39;tokenMetadata(uint256,string)&#39;));\n', '\n', '    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n', '    ///  Returns true for any standardized interfaces implemented by this contract. We implement\n', '    ///  ERC-165 (obviously!) and ERC-721.\n', '    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n', '    {\n', '        // DEBUG ONLY\n', '        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\n', '\n', '        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n', '    }\n', '\n', '    /// @dev Set the address of the sibling contract that tracks metadata.\n', '    ///  CEO only.\n', '    function setMetadataAddress(address _contractAddress) public onlyCEO {\n', '        erc721Metadata = ERC721Metadata(_contractAddress);\n', '    }\n', '\n', '    // Internal utility functions: These functions all assume that their input arguments\n', '    // are valid. We leave it to public methods to sanitize their inputs and follow\n', '    // the required logic.\n', '\n', '    /// @dev Checks if a given address is the current owner of a particular Art.\n', '    /// @param _claimant the address we are validating against.\n', '    /// @param _tokenId kitten id, only valid when > 0\n', '    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n', '        return artIndexToOwner[_tokenId] == _claimant;\n', '    }\n', '\n', '    /// @dev Checks if a given address currently has transferApproval for a particular Art.\n', '    /// @param _claimant the address we are confirming kitten is approved for.\n', '    /// @param _tokenId kitten id, only valid when > 0\n', '    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n', '        return artIndexToApproved[_tokenId] == _claimant;\n', '    }\n', '\n', '    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\n', '    ///  approval. Setting _approved to address(0) clears all transfer approval.\n', '    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\n', '    ///  _approve() and transferFrom() are used together for putting Kitties on auction, and\n', '    ///  there is no value in spamming the log with Approval events in that case.\n', '    function _approve(uint256 _tokenId, address _approved) internal {\n', '        artIndexToApproved[_tokenId] = _approved;\n', '    }\n', '\n', '    /// @notice Returns the number of Kitties owned by a specific address.\n', '    /// @param _owner The owner address to check.\n', '    /// @dev Required for ERC-721 compliance\n', '    function balanceOf(address _owner) public view returns (uint256 count) {\n', '        return ownershipTokenCount[_owner];\n', '    }\n', '\n', '    /// @notice Transfers a Art to another address. If transferring to a smart\n', '    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\n', '    ///  CryptoKitties specifically) or your Art may be lost forever. Seriously.\n', '    /// @param _to The address of the recipient, can be a user or contract.\n', '    /// @param _tokenId The ID of the Art to transfer.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transfer(\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        external\n', '        whenNotPaused\n', '    {\n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_to != address(0));\n', '        // Disallow transfers to this contract to prevent accidental misuse.\n', '        // The contract should never own any kitties (except very briefly\n', '        // after a gen0 cat is created and before it goes on auction).\n', '        require(_to != address(this));\n', '\n', '        // You can only send your own cat.\n', '        require(_owns(msg.sender, _tokenId));\n', '\n', '        // Reassign ownership, clear pending approvals, emit Transfer event.\n', '        _transfer(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    /// @notice Grant another address the right to transfer a specific Art via\n', '    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\n', '    /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '    ///  clear all approvals.\n', '    /// @param _tokenId The ID of the Art that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function approve(\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        external\n', '        whenNotPaused\n', '    {\n', '        // Only an owner can grant transfer approval.\n', '        require(_owns(msg.sender, _tokenId));\n', '\n', '        // Register the approval (replacing any previous approval).\n', '        _approve(_tokenId, _to);\n', '\n', '        // Emit approval event.\n', '        Approval(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    /// @notice Transfer a Art owned by another address, for which the calling address\n', '    ///  has previously been granted transfer approval by the owner.\n', '    /// @param _from The address that owns the Art to be transfered.\n', '    /// @param _to The address that should take ownership of the Art. Can be any address,\n', '    ///  including the caller.\n', '    /// @param _tokenId The ID of the Art to be transferred.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        external\n', '        whenNotPaused\n', '    {\n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_to != address(0));\n', '        // Disallow transfers to this contract to prevent accidental misuse.\n', '        // The contract should never own any kitties (except very briefly\n', '        // after a gen0 cat is created and before it goes on auction).\n', '        require(_to != address(this));\n', '        // Check for approval and valid ownership\n', '        require(_approvedFor(msg.sender, _tokenId));\n', '        require(_owns(_from, _tokenId));\n', '\n', '        // Reassign ownership (also clears pending approvals and emits Transfer event).\n', '        _transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /// @notice Returns the total number of Kitties currently in existence.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function totalSupply() public view returns (uint) {\n', '        return artpieces.length - 1;\n', '    }\n', '\n', '    /// @notice Returns the address currently assigned ownership of a given Art.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function ownerOf(uint256 _tokenId)\n', '        external\n', '        view\n', '        returns (address owner)\n', '    {\n', '        owner = artIndexToOwner[_tokenId];\n', '\n', '        require(owner != address(0));\n', '    }\n', '\n', '    /// @notice Returns a list of all Art IDs assigned to an address.\n', '    /// @param _owner The owner whose Kitties we are interested in.\n', '    /// @dev This method MUST NEVER be called by smart contract code. First, it&#39;s fairly\n', '    ///  expensive (it walks the entire Art array looking for cats belonging to owner),\n', '    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '    ///  not contract-to-contract calls.\n', '    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n', '        uint256 tokenCount = balanceOf(_owner);\n', '\n', '        if (tokenCount == 0) {\n', '            // Return an empty array\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](tokenCount);\n', '            uint256 totalCats = totalSupply();\n', '            uint256 resultIndex = 0;\n', '\n', '            // We count on the fact that all cats have IDs starting at 1 and increasing\n', '            // sequentially up to the totalCat count.\n', '            uint256 catId;\n', '\n', '            for (catId = 1; catId <= totalCats; catId++) {\n', '                if (artIndexToOwner[catId] == _owner) {\n', '                    result[resultIndex] = catId;\n', '                    resultIndex++;\n', '                }\n', '            }\n', '\n', '            return result;\n', '        }\n', '    }\n', '\n', '    /// @dev Adapted from memcpy() by @arachnid (Nick Johnson <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="58392a393b3036313c1836372c3c372c76363d2c">[email&#160;protected]</a>>)\n', '    ///  This method is licenced under the Apache License.\n', '    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\n', '    function _memcpy(uint _dest, uint _src, uint _len) private view {\n', '        // Copy word-length chunks while possible\n', '        for(; _len >= 32; _len -= 32) {\n', '            assembly {\n', '                mstore(_dest, mload(_src))\n', '            }\n', '            _dest += 32;\n', '            _src += 32;\n', '        }\n', '\n', '        // Copy remaining bytes\n', '        uint256 mask = 256 ** (32 - _len) - 1;\n', '        assembly {\n', '            let srcpart := and(mload(_src), not(mask))\n', '            let destpart := and(mload(_dest), mask)\n', '            mstore(_dest, or(destpart, srcpart))\n', '        }\n', '    }\n', '\n', '    /// @dev Adapted from toString(slice) by @arachnid (Nick Johnson <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d6b7a4b7b5beb8bfb296b8b9a2b2b9a2f8b8b3a2">[email&#160;protected]</a>>)\n', '    ///  This method is licenced under the Apache License.\n', '    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\n', '    function _toString(bytes32[4] _rawBytes, uint256 _stringLength) private view returns (string) {\n', '        var outputString = new string(_stringLength);\n', '        uint256 outputPtr;\n', '        uint256 bytesPtr;\n', '\n', '        assembly {\n', '            outputPtr := add(outputString, 32)\n', '            bytesPtr := _rawBytes\n', '        }\n', '\n', '        _memcpy(outputPtr, bytesPtr, _stringLength);\n', '\n', '        return outputString;\n', '    }\n', '\n', '    /// @notice Returns a URI pointing to a metadata package for this token conforming to\n', '    ///  ERC-721 (https://github.com/ethereum/EIPs/issues/721)\n', '    /// @param _tokenId The ID number of the Art whose metadata should be returned.\n', '    function tokenMetadata(uint256 _tokenId, string _preferredTransport) external view returns (string infoUrl) {\n', '        require(erc721Metadata != address(0));\n', '        bytes32[4] memory buffer;\n', '        uint256 count;\n', '        (buffer, count) = erc721Metadata.getMetadata(_tokenId, _preferredTransport);\n', '\n', '        return _toString(buffer, count);\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title all functions related to creating art tokens\n', 'contract ArtMinting is ArtOwnership {\n', '\n', '    // Limits the number of art tokens the contract owner can ever create.\n', '    uint256 public constant PROMO_CREATION_LIMIT = 300;\n', '\n', '    // Counts the number of cats the contract owner has created.\n', '    uint256 public promoCreatedCount;\n', '\n', '    /// @dev we can create promo kittens, up to a limit. Only callable by COO\n', '    function createPromoArt() external onlyCOO {\n', '        // address artOwner = recipients[promoCreatedCount];\n', '        // if (artOwner == address(0)) {\n', '        //      artOwner = cooAddress;\n', '        // }\n', '        // address artOwner = cooAddress;\n', '        require(promoCreatedCount < PROMO_CREATION_LIMIT);\n', '\n', '        promoCreatedCount++;\n', '        _createArt(curGenerator, cooAddress);\n', '    }\n', '    \n', '    uint256[] public votes;\n', '    uint16 public curGenerator = 0;\n', '    uint16 public maxGenerators = 3;\n', '    \n', '    function castVote(uint _generator) external {\n', '        require(_generator < votes.length);\n', '        votes[_generator] = votes[_generator] + 1;\n', '        if (votes[_generator] > votes[curGenerator]) {\n', '            curGenerator = uint16(_generator);\n', '        }\n', '        Vote(uint16(_generator), votes[_generator], curGenerator, votes[curGenerator]);\n', '    }\n', '    \n', '    function addGenerator() external {\n', '        require(votes.length < maxGenerators);\n', '        uint _id = votes.push(0);\n', '        NewGenerator(_id);\n', '    }\n', '}\n', '\n', '\n', '/// @title CryptoKitties: Collectible, breedable, and oh-so-adorable cats on the Ethereum blockchain.\n', '/// @author Axiom Zen (https://www.axiomzen.co)\n', '/// @dev The main CryptoKitties contract, keeps track of kittens so they don&#39;t wander around and get lost.\n', 'contract ArtCore is ArtMinting {\n', '\n', '    // This is the main CryptoKitties contract. In order to keep our code seperated into logical sections,\n', '    // we&#39;ve broken it up in two ways. First, we have several seperately-instantiated sibling contracts\n', '    // that handle auctions and our super-top-secret genetic combination algorithm. The auctions are\n', '    // seperate since their logic is somewhat complex and there&#39;s always a risk of subtle bugs. By keeping\n', '    // them in their own contracts, we can upgrade them without disrupting the main contract that tracks\n', '    // art ownership. The genetic combination algorithm is kept seperate so we can open-source all of\n', '    // the rest of our code without making it _too_ easy for folks to figure out how the genetics work.\n', '    // Don&#39;t worry, I&#39;m sure someone will reverse engineer it soon enough!\n', '    //\n', '    // Secondly, we break the core contract into multiple files using inheritence, one for each major\n', '    // facet of functionality of CK. This allows us to keep related code bundled together while still\n', '    // avoiding a single giant file with everything in it. The breakdown is as follows:\n', '    //\n', '    //      - ArtBase: This is where we define the most fundamental code shared throughout the core\n', '    //             functionality. This includes our main data storage, constants and data types, plus\n', '    //             internal functions for managing these items.\n', '    //\n', '    //      - ArtAccessControl: This contract manages the various addresses and constraints for operations\n', '    //             that can be executed only by specific roles. Namely CEO, CFO and COO.\n', '    //\n', '    //      - ArtOwnership: This provides the methods required for basic non-fungible token\n', '    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).\n', '    //\n', '    //      - ArtBreeding: This file contains the methods necessary to breed cats together, including\n', '    //             keeping track of siring offers, and relies on an external genetic combination contract.\n', '    //\n', '    //      - ArtAuctions: Here we have the public methods for auctioning or bidding on cats or siring\n', '    //             services. The actual auction functionality is handled in two sibling contracts (one\n', '    //             for sales and one for siring), while auction creation and bidding is mostly mediated\n', '    //             through this facet of the core contract.\n', '    //\n', '    //      - ArtMinting: This final facet contains the functionality we use for creating new gen0 cats.\n', '    //             We can make up to 5000 "promo" cats that can be given away (especially important when\n', '    //             the community is new), and all others can only be created and then immediately put up\n', '    //             for auction via an algorithmically determined starting price. Regardless of how they\n', '    //             are created, there is a hard limit of 50k gen0 cats. After that, it&#39;s all up to the\n', '    //             community to breed, breed, breed!\n', '\n', '    \n', '    /// @notice Creates the main CryptoKitties smart contract instance.\n', '    function ArtCore() public {\n', '        // Starts paused.\n', '        paused = true;\n', '\n', '        // the creator of the contract is the initial CEO\n', '        ceoAddress = msg.sender;\n', '\n', '        // the creator of the contract is also the initial COO\n', '        cooAddress = msg.sender;\n', '\n', '        // start with the mythical kitten 0 - so we don&#39;t have generator-0 parent issues\n', '        _createArt(0, address(0));\n', '    }\n', '\n', '\n', '\n', '    /// @notice No tipping!\n', '    /// @dev Reject all Ether from being sent here, unless it&#39;s from one of the\n', '    ///  two auction contracts. (Hopefully, we can prevent user accidents.)\n', '    function() external payable {\n', '        require(\n', '            msg.sender == address(0)\n', '        );\n', '    }\n', '\n', '    /// @notice Returns all the relevant information about a specific art.\n', '    /// @param _id The ID of the art of interest.\n', '    function getArtToken(uint256 _id)\n', '        external\n', '        view\n', '        returns (\n', '        uint256 birthTime,\n', '        uint256 generator\n', '    ) {\n', '        ArtToken storage art = artpieces[_id];\n', '\n', '        // if this variable is 0 then it&#39;s not gestating\n', '        birthTime = uint256(art.birthTime);\n', '        generator = uint256(art.generator);\n', '    }\n', '\n', '    /// @dev Override unpause so it requires all external contract addresses\n', '    ///  to be set before contract can be unpaused. Also, we can&#39;t have\n', '    ///  newContractAddress set either, because then the contract was upgraded.\n', '    /// @notice This is public rather than external so we can call super.unpause\n', '    ///  without using an expensive CALL.\n', '    function unpause() public onlyCEO whenPaused {\n', '        // Actually unpause the contract.\n', '        super.unpause();\n', '    }\n', '\n', '    // @dev Allows the CFO to capture the balance available to the contract.\n', '    function withdrawBalance() external onlyCFO {\n', '        uint256 balance = this.balance;\n', '        cfoAddress.send(balance);\n', '    }\n', '}']
['pragma solidity ^0.4.25;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\n', 'contract ERC721 {\n', '    // Required methods\n', '    function totalSupply() public view returns (uint256 total);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function ownerOf(uint256 _tokenId) external view returns (address owner);\n', '    function approve(address _to, uint256 _tokenId) external;\n', '    function transfer(address _to, uint256 _tokenId) external;\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n', '\n', '    // Events\n', '    event Transfer(address from, address to, uint256 tokenId);\n', '    event Approval(address owner, address approved, uint256 tokenId);\n', '\n', '    // Optional\n', '    // function name() public view returns (string name);\n', '    // function symbol() public view returns (string symbol);\n', '    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n', '    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\n', '\n', '    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n', '    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n', '}\n', '\n', '\n', '// // Auction wrapper functions\n', '\n', '\n', '// Auction wrapper functions\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title A facet of ArtCore that manages special access privileges.\n', '/// @author Axiom Zen (https://www.axiomzen.co)\n', '/// @dev See the ArtCore contract documentation to understand how the various contract facets are arranged.\n', 'contract ArtAccessControl {\n', '    // This facet controls access control for CryptoKitties. There are four roles managed here:\n', '    //\n', '    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart\n', '    //         contracts. It is also the only role that can unpause the smart contract. It is initially\n', '    //         set to the address that created the smart contract in the ArtCore constructor.\n', '    //\n', '    //     - The CFO: The CFO can withdraw funds from ArtCore and its auction contracts.\n', '    //\n', '    //     - The COO: The COO can release gen0 kitties to auction, and mint promo cats.\n', '    //\n', '    // It should be noted that these roles are distinct without overlap in their access abilities, the\n', '    // abilities listed for each role above are exhaustive. In particular, while the CEO can assign any\n', "    // address to any role, the CEO address itself doesn't have the ability to act in those roles. This\n", "    // restriction is intentional so that we aren't tempted to use the CEO address frequently out of\n", '    // convenience. The less we use an address, the less likely it is that we somehow compromise the\n', '    // account.\n', '\n', '    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\n', '    event ContractUpgrade(address newContract);\n', '\n', '    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '    address public ceoAddress;\n', '    address public cfoAddress;\n', '    address public cooAddress;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '\n', '    /// @dev Access modifier for CEO-only functionality\n', '    modifier onlyCEO() {\n', '        require(msg.sender == ceoAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Access modifier for CFO-only functionality\n', '    modifier onlyCFO() {\n', '        require(msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Access modifier for COO-only functionality\n', '    modifier onlyCOO() {\n', '        require(msg.sender == cooAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCLevel() {\n', '        require(\n', '            msg.sender == cooAddress ||\n', '            msg.sender == ceoAddress ||\n', '            msg.sender == cfoAddress\n', '        );\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '    /// @param _newCEO The address of the new CEO\n', '    function setCEO(address _newCEO) external onlyCEO {\n', '        require(_newCEO != address(0));\n', '\n', '        ceoAddress = _newCEO;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\n', '    /// @param _newCFO The address of the new CFO\n', '    function setCFO(address _newCFO) external onlyCEO {\n', '        require(_newCFO != address(0));\n', '\n', '        cfoAddress = _newCFO;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\n', '    /// @param _newCOO The address of the new COO\n', '    function setCOO(address _newCOO) external onlyCEO {\n', '        require(_newCOO != address(0));\n', '\n', '        cooAddress = _newCOO;\n', '    }\n', '\n', '    /*** Pausable functionality adapted from OpenZeppelin ***/\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any "C-level" role to pause the contract. Used only when\n', '    ///  a bug or exploit is detected and we need to limit damage.\n', '    function pause() external onlyCLevel whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\n', '    ///  one reason we may pause the contract is when CFO or COO accounts are\n', '    ///  compromised.\n', '    /// @notice This is public rather than external so it can be called by\n', '    ///  derived contracts.\n', '    function unpause() public onlyCEO whenPaused {\n', "        // can't unpause if contract was upgraded\n", '        paused = false;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '/// @title Base contract for CryptoKitties. Holds all common structs, events and base variables.\n', '/// @author Axiom Zen (https://www.axiomzen.co)\n', '/// @dev See the ArtCore contract documentation to understand how the various contract facets are arranged.\n', 'contract ArtBase is ArtAccessControl {\n', '    /*** EVENTS ***/\n', '\n', '    /// @dev The Birth event is fired whenever a new kitten comes into existence. This obviously\n', '    ///  includes any time a cat is created through the giveBirth method, but it is also called\n', '    ///  when a new gen0 cat is created.\n', '    event Create(address owner, uint256 artId, uint16 generator);\n', '\n', '    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a kitten\n', '    ///  ownership is assigned, including births.\n', '    event Transfer(address from, address to, uint256 tokenId);\n', '\n', '    event Vote(uint16 candidate, uint256 voteCount, uint16 currentGenerator, uint256 currentGeneratorVoteCount);\n', '    event NewRecipient(address recipient, uint256 position);\n', '    event NewGenerator(uint256 position);\n', '\n', '    /*** DATA TYPES ***/\n', '\n', '    /// @dev The main Art struct. Every cat in CryptoKitties is represented by a copy\n', '    ///  of this structure, so great care was taken to ensure that it fits neatly into\n', '    ///  exactly two 256-bit words. Note that the order of the members in this structure\n', '    ///  is important because of the byte-packing rules used by Ethereum.\n', '    ///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html\n', '    struct ArtToken {\n', '        // The timestamp from the block when this cat came into existence.\n', '        uint64 birthTime;\n', '        // The "generator" of this art token.\n', '        uint16 generator;\n', '    }\n', '\n', '    /*** STORAGE ***/\n', '\n', '    /// @dev An array containing the Art struct for all Kitties in existence. The ID\n', '    ///  of each cat is actually an index into this array. Note that ID 0 is a negacat,\n', '    ///  the unArt, the mythical beast that is the parent of all gen0 cats. A bizarre\n', '    ///  creature that is both matron and sire... to itself! Has an invalid genetic code.\n', '    ///  In other words, cat ID 0 is invalid... ;-)\n', '    ArtToken[] artpieces;\n', '\n', '    /// @dev A mapping from cat IDs to the address that owns them. All cats have\n', '    ///  some valid owner address, even gen0 cats are created with a non-zero owner.\n', '    mapping (uint256 => address) public artIndexToOwner;\n', '\n', '    // @dev A mapping from owner address to count of tokens that address owns.\n', '    //  Used internally inside balanceOf() to resolve ownership count.\n', '    mapping (address => uint256) ownershipTokenCount;\n', '\n', '    /// @dev A mapping from ArtIDs to an address that has been approved to call\n', '    ///  transferFrom(). Each Art can only have one approved address for transfer\n', '    ///  at any time. A zero value means no approval is outstanding.\n', '    mapping (uint256 => address) public artIndexToApproved;\n', '\n', '\n', '    /// @dev Assigns ownership of a specific Art to an address.\n', '    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n', "        // Since the number of kittens is capped to 2^32 we can't overflow this\n", '        ownershipTokenCount[_to]++;\n', '        // transfer ownership\n', '        artIndexToOwner[_tokenId] = _to;\n', "        // When creating new kittens _from is 0x0, but we can't account that address.\n", '        if (_from != address(0)) {\n', '            ownershipTokenCount[_from]--;\n', '            // clear any previously approved ownership exchange\n', '            delete artIndexToApproved[_tokenId];\n', '        }\n', '        // Emit the transfer event.\n', '        Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /// @dev An internal method that creates a new art and stores it. This\n', "    ///  method doesn't do any checking and should only be called when the\n", '    ///  input data is known to be valid. Will generate both a Birth event\n', '    ///  and a Transfer event.\n', '    /// @param _generator The generator number of this cat, must be computed by caller.\n', '    /// @param _owner The inital owner of this cat, must be non-zero (except for the unArt, ID 0)\n', '    function _createArt(\n', '        uint256 _generator,\n', '        address _owner\n', '    )\n', '        internal\n', '        returns (uint)\n', '    {\n', '        // These requires are not strictly necessary, our calling code should make\n', '        // sure that these conditions are never broken. However! _createArt() is already\n', "        // an expensive call (for storage), and it doesn't hurt to be especially careful\n", '        // to ensure our data structures are always valid.\n', '        require(_generator == uint256(uint16(_generator)));\n', '\n', '        ArtToken memory _art = ArtToken({\n', '            birthTime: uint64(now),\n', '            generator: uint16(_generator)\n', '        });\n', '        uint256 newArtId = artpieces.push(_art) - 1;\n', '\n', "        // It's probably never going to happen, 4 billion cats is A LOT, but\n", "        // let's just be 100% sure we never let this happen.\n", '        require(newArtId == uint256(uint32(newArtId)));\n', '\n', '        // emit the birth event\n', '        Create(\n', '            _owner,\n', '            newArtId,\n', '            _art.generator\n', '        );\n', '\n', '        // This will assign ownership, and also emit the Transfer event as\n', '        // per ERC721 draft\n', '        _transfer(0, _owner, newArtId);\n', '\n', '        return newArtId;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/// @title The external contract that is responsible for generating metadata for the kitties,\n', '///  it has one function that will return the data as bytes.\n', 'contract ERC721Metadata {\n', '    /// @dev Given a token Id, returns a byte array that is supposed to be converted into string.\n', '    function getMetadata(uint256 _tokenId, string) public view returns (bytes32[4] buffer, uint256 count) {\n', '        if (_tokenId == 1) {\n', '            buffer[0] = "Hello World! :D";\n', '            count = 15;\n', '        } else if (_tokenId == 2) {\n', '            buffer[0] = "I would definitely choose a medi";\n', '            buffer[1] = "um length string.";\n', '            count = 49;\n', '        } else if (_tokenId == 3) {\n', '            buffer[0] = "Lorem ipsum dolor sit amet, mi e";\n', '            buffer[1] = "st accumsan dapibus augue lorem,";\n', '            buffer[2] = " tristique vestibulum id, libero";\n', '            buffer[3] = " suscipit varius sapien aliquam.";\n', '            count = 128;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/// @title The facet of the CryptoKitties core contract that manages ownership, ERC-721 (draft) compliant.\n', '/// @author Axiom Zen (https://www.axiomzen.co)\n', '/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\n', '///  See the ArtCore contract documentation to understand how the various contract facets are arranged.\n', 'contract ArtOwnership is ArtBase, ERC721 {\n', '\n', '    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '    string public constant name = "Future of Trust 2018 Art Token";\n', '    string public constant symbol = "FoT2018";\n', '\n', '    // The contract that will return art metadata\n', '    ERC721Metadata public erc721Metadata;\n', '\n', '    bytes4 constant InterfaceSignature_ERC165 =\n', "        bytes4(keccak256('supportsInterface(bytes4)'));\n", '\n', '    bytes4 constant InterfaceSignature_ERC721 =\n', "        bytes4(keccak256('name()')) ^\n", "        bytes4(keccak256('symbol()')) ^\n", "        bytes4(keccak256('totalSupply()')) ^\n", "        bytes4(keccak256('balanceOf(address)')) ^\n", "        bytes4(keccak256('ownerOf(uint256)')) ^\n", "        bytes4(keccak256('approve(address,uint256)')) ^\n", "        bytes4(keccak256('transfer(address,uint256)')) ^\n", "        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n", "        bytes4(keccak256('tokensOfOwner(address)')) ^\n", "        bytes4(keccak256('tokenMetadata(uint256,string)'));\n", '\n', '    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n', '    ///  Returns true for any standardized interfaces implemented by this contract. We implement\n', '    ///  ERC-165 (obviously!) and ERC-721.\n', '    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n', '    {\n', '        // DEBUG ONLY\n', '        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\n', '\n', '        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n', '    }\n', '\n', '    /// @dev Set the address of the sibling contract that tracks metadata.\n', '    ///  CEO only.\n', '    function setMetadataAddress(address _contractAddress) public onlyCEO {\n', '        erc721Metadata = ERC721Metadata(_contractAddress);\n', '    }\n', '\n', '    // Internal utility functions: These functions all assume that their input arguments\n', '    // are valid. We leave it to public methods to sanitize their inputs and follow\n', '    // the required logic.\n', '\n', '    /// @dev Checks if a given address is the current owner of a particular Art.\n', '    /// @param _claimant the address we are validating against.\n', '    /// @param _tokenId kitten id, only valid when > 0\n', '    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n', '        return artIndexToOwner[_tokenId] == _claimant;\n', '    }\n', '\n', '    /// @dev Checks if a given address currently has transferApproval for a particular Art.\n', '    /// @param _claimant the address we are confirming kitten is approved for.\n', '    /// @param _tokenId kitten id, only valid when > 0\n', '    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n', '        return artIndexToApproved[_tokenId] == _claimant;\n', '    }\n', '\n', '    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\n', '    ///  approval. Setting _approved to address(0) clears all transfer approval.\n', '    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\n', '    ///  _approve() and transferFrom() are used together for putting Kitties on auction, and\n', '    ///  there is no value in spamming the log with Approval events in that case.\n', '    function _approve(uint256 _tokenId, address _approved) internal {\n', '        artIndexToApproved[_tokenId] = _approved;\n', '    }\n', '\n', '    /// @notice Returns the number of Kitties owned by a specific address.\n', '    /// @param _owner The owner address to check.\n', '    /// @dev Required for ERC-721 compliance\n', '    function balanceOf(address _owner) public view returns (uint256 count) {\n', '        return ownershipTokenCount[_owner];\n', '    }\n', '\n', '    /// @notice Transfers a Art to another address. If transferring to a smart\n', '    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\n', '    ///  CryptoKitties specifically) or your Art may be lost forever. Seriously.\n', '    /// @param _to The address of the recipient, can be a user or contract.\n', '    /// @param _tokenId The ID of the Art to transfer.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transfer(\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        external\n', '        whenNotPaused\n', '    {\n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_to != address(0));\n', '        // Disallow transfers to this contract to prevent accidental misuse.\n', '        // The contract should never own any kitties (except very briefly\n', '        // after a gen0 cat is created and before it goes on auction).\n', '        require(_to != address(this));\n', '\n', '        // You can only send your own cat.\n', '        require(_owns(msg.sender, _tokenId));\n', '\n', '        // Reassign ownership, clear pending approvals, emit Transfer event.\n', '        _transfer(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    /// @notice Grant another address the right to transfer a specific Art via\n', '    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\n', '    /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '    ///  clear all approvals.\n', '    /// @param _tokenId The ID of the Art that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function approve(\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        external\n', '        whenNotPaused\n', '    {\n', '        // Only an owner can grant transfer approval.\n', '        require(_owns(msg.sender, _tokenId));\n', '\n', '        // Register the approval (replacing any previous approval).\n', '        _approve(_tokenId, _to);\n', '\n', '        // Emit approval event.\n', '        Approval(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    /// @notice Transfer a Art owned by another address, for which the calling address\n', '    ///  has previously been granted transfer approval by the owner.\n', '    /// @param _from The address that owns the Art to be transfered.\n', '    /// @param _to The address that should take ownership of the Art. Can be any address,\n', '    ///  including the caller.\n', '    /// @param _tokenId The ID of the Art to be transferred.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        external\n', '        whenNotPaused\n', '    {\n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_to != address(0));\n', '        // Disallow transfers to this contract to prevent accidental misuse.\n', '        // The contract should never own any kitties (except very briefly\n', '        // after a gen0 cat is created and before it goes on auction).\n', '        require(_to != address(this));\n', '        // Check for approval and valid ownership\n', '        require(_approvedFor(msg.sender, _tokenId));\n', '        require(_owns(_from, _tokenId));\n', '\n', '        // Reassign ownership (also clears pending approvals and emits Transfer event).\n', '        _transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /// @notice Returns the total number of Kitties currently in existence.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function totalSupply() public view returns (uint) {\n', '        return artpieces.length - 1;\n', '    }\n', '\n', '    /// @notice Returns the address currently assigned ownership of a given Art.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function ownerOf(uint256 _tokenId)\n', '        external\n', '        view\n', '        returns (address owner)\n', '    {\n', '        owner = artIndexToOwner[_tokenId];\n', '\n', '        require(owner != address(0));\n', '    }\n', '\n', '    /// @notice Returns a list of all Art IDs assigned to an address.\n', '    /// @param _owner The owner whose Kitties we are interested in.\n', "    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n", '    ///  expensive (it walks the entire Art array looking for cats belonging to owner),\n', '    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '    ///  not contract-to-contract calls.\n', '    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n', '        uint256 tokenCount = balanceOf(_owner);\n', '\n', '        if (tokenCount == 0) {\n', '            // Return an empty array\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](tokenCount);\n', '            uint256 totalCats = totalSupply();\n', '            uint256 resultIndex = 0;\n', '\n', '            // We count on the fact that all cats have IDs starting at 1 and increasing\n', '            // sequentially up to the totalCat count.\n', '            uint256 catId;\n', '\n', '            for (catId = 1; catId <= totalCats; catId++) {\n', '                if (artIndexToOwner[catId] == _owner) {\n', '                    result[resultIndex] = catId;\n', '                    resultIndex++;\n', '                }\n', '            }\n', '\n', '            return result;\n', '        }\n', '    }\n', '\n', '    /// @dev Adapted from memcpy() by @arachnid (Nick Johnson <arachnid@notdot.net>)\n', '    ///  This method is licenced under the Apache License.\n', '    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\n', '    function _memcpy(uint _dest, uint _src, uint _len) private view {\n', '        // Copy word-length chunks while possible\n', '        for(; _len >= 32; _len -= 32) {\n', '            assembly {\n', '                mstore(_dest, mload(_src))\n', '            }\n', '            _dest += 32;\n', '            _src += 32;\n', '        }\n', '\n', '        // Copy remaining bytes\n', '        uint256 mask = 256 ** (32 - _len) - 1;\n', '        assembly {\n', '            let srcpart := and(mload(_src), not(mask))\n', '            let destpart := and(mload(_dest), mask)\n', '            mstore(_dest, or(destpart, srcpart))\n', '        }\n', '    }\n', '\n', '    /// @dev Adapted from toString(slice) by @arachnid (Nick Johnson <arachnid@notdot.net>)\n', '    ///  This method is licenced under the Apache License.\n', '    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\n', '    function _toString(bytes32[4] _rawBytes, uint256 _stringLength) private view returns (string) {\n', '        var outputString = new string(_stringLength);\n', '        uint256 outputPtr;\n', '        uint256 bytesPtr;\n', '\n', '        assembly {\n', '            outputPtr := add(outputString, 32)\n', '            bytesPtr := _rawBytes\n', '        }\n', '\n', '        _memcpy(outputPtr, bytesPtr, _stringLength);\n', '\n', '        return outputString;\n', '    }\n', '\n', '    /// @notice Returns a URI pointing to a metadata package for this token conforming to\n', '    ///  ERC-721 (https://github.com/ethereum/EIPs/issues/721)\n', '    /// @param _tokenId The ID number of the Art whose metadata should be returned.\n', '    function tokenMetadata(uint256 _tokenId, string _preferredTransport) external view returns (string infoUrl) {\n', '        require(erc721Metadata != address(0));\n', '        bytes32[4] memory buffer;\n', '        uint256 count;\n', '        (buffer, count) = erc721Metadata.getMetadata(_tokenId, _preferredTransport);\n', '\n', '        return _toString(buffer, count);\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title all functions related to creating art tokens\n', 'contract ArtMinting is ArtOwnership {\n', '\n', '    // Limits the number of art tokens the contract owner can ever create.\n', '    uint256 public constant PROMO_CREATION_LIMIT = 300;\n', '\n', '    // Counts the number of cats the contract owner has created.\n', '    uint256 public promoCreatedCount;\n', '\n', '    /// @dev we can create promo kittens, up to a limit. Only callable by COO\n', '    function createPromoArt() external onlyCOO {\n', '        // address artOwner = recipients[promoCreatedCount];\n', '        // if (artOwner == address(0)) {\n', '        //      artOwner = cooAddress;\n', '        // }\n', '        // address artOwner = cooAddress;\n', '        require(promoCreatedCount < PROMO_CREATION_LIMIT);\n', '\n', '        promoCreatedCount++;\n', '        _createArt(curGenerator, cooAddress);\n', '    }\n', '    \n', '    uint256[] public votes;\n', '    uint16 public curGenerator = 0;\n', '    uint16 public maxGenerators = 3;\n', '    \n', '    function castVote(uint _generator) external {\n', '        require(_generator < votes.length);\n', '        votes[_generator] = votes[_generator] + 1;\n', '        if (votes[_generator] > votes[curGenerator]) {\n', '            curGenerator = uint16(_generator);\n', '        }\n', '        Vote(uint16(_generator), votes[_generator], curGenerator, votes[curGenerator]);\n', '    }\n', '    \n', '    function addGenerator() external {\n', '        require(votes.length < maxGenerators);\n', '        uint _id = votes.push(0);\n', '        NewGenerator(_id);\n', '    }\n', '}\n', '\n', '\n', '/// @title CryptoKitties: Collectible, breedable, and oh-so-adorable cats on the Ethereum blockchain.\n', '/// @author Axiom Zen (https://www.axiomzen.co)\n', "/// @dev The main CryptoKitties contract, keeps track of kittens so they don't wander around and get lost.\n", 'contract ArtCore is ArtMinting {\n', '\n', '    // This is the main CryptoKitties contract. In order to keep our code seperated into logical sections,\n', "    // we've broken it up in two ways. First, we have several seperately-instantiated sibling contracts\n", '    // that handle auctions and our super-top-secret genetic combination algorithm. The auctions are\n', "    // seperate since their logic is somewhat complex and there's always a risk of subtle bugs. By keeping\n", '    // them in their own contracts, we can upgrade them without disrupting the main contract that tracks\n', '    // art ownership. The genetic combination algorithm is kept seperate so we can open-source all of\n', '    // the rest of our code without making it _too_ easy for folks to figure out how the genetics work.\n', "    // Don't worry, I'm sure someone will reverse engineer it soon enough!\n", '    //\n', '    // Secondly, we break the core contract into multiple files using inheritence, one for each major\n', '    // facet of functionality of CK. This allows us to keep related code bundled together while still\n', '    // avoiding a single giant file with everything in it. The breakdown is as follows:\n', '    //\n', '    //      - ArtBase: This is where we define the most fundamental code shared throughout the core\n', '    //             functionality. This includes our main data storage, constants and data types, plus\n', '    //             internal functions for managing these items.\n', '    //\n', '    //      - ArtAccessControl: This contract manages the various addresses and constraints for operations\n', '    //             that can be executed only by specific roles. Namely CEO, CFO and COO.\n', '    //\n', '    //      - ArtOwnership: This provides the methods required for basic non-fungible token\n', '    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).\n', '    //\n', '    //      - ArtBreeding: This file contains the methods necessary to breed cats together, including\n', '    //             keeping track of siring offers, and relies on an external genetic combination contract.\n', '    //\n', '    //      - ArtAuctions: Here we have the public methods for auctioning or bidding on cats or siring\n', '    //             services. The actual auction functionality is handled in two sibling contracts (one\n', '    //             for sales and one for siring), while auction creation and bidding is mostly mediated\n', '    //             through this facet of the core contract.\n', '    //\n', '    //      - ArtMinting: This final facet contains the functionality we use for creating new gen0 cats.\n', '    //             We can make up to 5000 "promo" cats that can be given away (especially important when\n', '    //             the community is new), and all others can only be created and then immediately put up\n', '    //             for auction via an algorithmically determined starting price. Regardless of how they\n', "    //             are created, there is a hard limit of 50k gen0 cats. After that, it's all up to the\n", '    //             community to breed, breed, breed!\n', '\n', '    \n', '    /// @notice Creates the main CryptoKitties smart contract instance.\n', '    function ArtCore() public {\n', '        // Starts paused.\n', '        paused = true;\n', '\n', '        // the creator of the contract is the initial CEO\n', '        ceoAddress = msg.sender;\n', '\n', '        // the creator of the contract is also the initial COO\n', '        cooAddress = msg.sender;\n', '\n', "        // start with the mythical kitten 0 - so we don't have generator-0 parent issues\n", '        _createArt(0, address(0));\n', '    }\n', '\n', '\n', '\n', '    /// @notice No tipping!\n', "    /// @dev Reject all Ether from being sent here, unless it's from one of the\n", '    ///  two auction contracts. (Hopefully, we can prevent user accidents.)\n', '    function() external payable {\n', '        require(\n', '            msg.sender == address(0)\n', '        );\n', '    }\n', '\n', '    /// @notice Returns all the relevant information about a specific art.\n', '    /// @param _id The ID of the art of interest.\n', '    function getArtToken(uint256 _id)\n', '        external\n', '        view\n', '        returns (\n', '        uint256 birthTime,\n', '        uint256 generator\n', '    ) {\n', '        ArtToken storage art = artpieces[_id];\n', '\n', "        // if this variable is 0 then it's not gestating\n", '        birthTime = uint256(art.birthTime);\n', '        generator = uint256(art.generator);\n', '    }\n', '\n', '    /// @dev Override unpause so it requires all external contract addresses\n', "    ///  to be set before contract can be unpaused. Also, we can't have\n", '    ///  newContractAddress set either, because then the contract was upgraded.\n', '    /// @notice This is public rather than external so we can call super.unpause\n', '    ///  without using an expensive CALL.\n', '    function unpause() public onlyCEO whenPaused {\n', '        // Actually unpause the contract.\n', '        super.unpause();\n', '    }\n', '\n', '    // @dev Allows the CFO to capture the balance available to the contract.\n', '    function withdrawBalance() external onlyCFO {\n', '        uint256 balance = this.balance;\n', '        cfoAddress.send(balance);\n', '    }\n', '}']
