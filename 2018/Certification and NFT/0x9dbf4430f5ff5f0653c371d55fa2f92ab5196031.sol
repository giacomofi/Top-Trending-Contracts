['pragma solidity ^0.4.11;\n', '\n', '\n', '/// `Owned` is a base level contract that assigns an `owner` that can be later changed\n', 'contract Owned {\n', '    /// @dev `owner` is the only address that can call a function with this\n', '    /// modifier\n', '    modifier onlyOwner { require (msg.sender == owner); _; }\n', '\n', '    address public owner;\n', '\n', '    /// @notice The Constructor assigns the message sender to be `owner`\n', '    function Owned() public { owner = msg.sender;}\n', '\n', '    /// @notice `owner` can step down and assign some other address to this role\n', '    /// @param _newOwner The address of the new owner. 0x0 can be used to create\n', '    ///  an unowned neutral vault, however that cannot be undone\n', '    function changeOwner(address _newOwner)  onlyOwner public {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '\n', '  function balanceOf(address who) constant public returns (uint);\n', '  function allowance(address owner, address spender) constant public returns (uint);\n', '\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) public returns (bool ok);\n', '  function approve(address spender, uint value) public returns (bool ok);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '}\n', '\n', 'contract TokenDistribution is Owned {\n', '\n', '    ERC20 public tokenContract;\n', '    \n', '    function TokenSale ( address _tokenAddress ) public {\n', '        tokenContract = ERC20(_tokenAddress); // The Deployed Token Contract\n', '     }\n', '          \n', '    function distributeTokens(address[] _owners, uint256[] _tokens) onlyOwner public {\n', '\n', '        require( _owners.length == _tokens.length );\n', '        for(uint i=0;i<_owners.length;i++){\n', '            require (tokenContract.transferFrom(this, _owners[i], _tokens[i]));\n', '        }\n', '\n', '    }\n', '\n', '}']