['pragma solidity ^0.4.20;\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract Sale is Ownable {\n', '  using SafeMath for uint256;\n', '    uint rate = 1;\n', '    uint mincap = 0;\n', '    address tokenAddr;\n', '    bool isActive = false;\n', '    bool onlyWhitelist = false;\n', '\n', '    mapping(address => uint) balance;\n', '    mapping(address => uint) balanceWithdrawn;\n', '    address[] investors;\n', '    mapping(address => bool) whitelist;\n', '\n', '\n', '    function Sale() public{\n', '    }\n', '\n', '    function() payable public{ \n', '      require(isActive);\n', '      require(tokenAddr != address(0));\n', '      require(msg.sender != address(0));\n', '      require(msg.value >=  mincap );\n', '      require(!onlyWhitelist || whitelist[msg.sender]);\n', '      uint256 amt = msg.value.mul(rate);\n', '\n', '      ERC20 token = ERC20(tokenAddr);\n', '      require(token.balanceOf(this) >= amt);\n', '      \n', '      if(balance[msg.sender] == 0){\n', '        investors.push(msg.sender);\n', '      }\n', '      balance[msg.sender] += amt;\n', '    }\n', '    function getRate() public view returns(uint){\n', '        return rate;\n', '    }\n', '    function getCap() public view returns(uint){\n', '        return mincap;\n', '    }\n', '    function getBalance() public view returns(uint256){\n', '      ERC20 token = ERC20(tokenAddr);\n', '      return token.balanceOf(this);\n', '    }\n', '    function changeRate(uint _rate) public onlyOwner{\n', '      rate = _rate;\n', '    }\n', '    function changemincap(uint _mincap) public onlyOwner{\n', '      mincap = _mincap;\n', '    }\n', '    function changeAddr(address _tokenAddr) public onlyOwner{\n', '      tokenAddr = _tokenAddr;\n', '    }\n', '    function addWhitelist(address[] addr_list) public onlyOwner{\n', '      for(uint i=0;i<addr_list.length;i++){\n', '        whitelist[addr_list[i]] = true;\n', '      }\n', '    }\n', '    function setActive() public onlyOwner{\n', '        isActive = !isActive;\n', '    }\n', '    function setActiveWhitelist() public onlyOwner{\n', '        onlyWhitelist = !onlyWhitelist;\n', '    }\n', '    function drainWei() public onlyOwner{\n', '        owner.transfer(this.balance);\n', '    }    \n', '    function drainToken() public onlyOwner{\n', '        uint cantWithdrawAmt = 0;\n', '        for(uint i = 0;i<investors.length;i++){\n', '          cantWithdrawAmt += balance[investors[i]];\n', '        }      \n', '        ERC20 token = ERC20(tokenAddr);\n', '        token.transfer(msg.sender, (token.balanceOf(this)).sub(cantWithdrawAmt) );\n', '    }\n', '    function giveTokens(uint percent) public onlyOwner{\n', '        ERC20 token = ERC20(tokenAddr);\n', '        for(uint i = 0;i<investors.length;i++){\n', '          uint bal = balance[investors[i]];\n', '          uint canWithdrawAmt = (bal.div(100)).mul(percent);\n', '          if(canWithdrawAmt > 0 && balanceWithdrawn[investors[i]] + canWithdrawAmt <= bal){\n', '            balanceWithdrawn[investors[i]] += canWithdrawAmt;\n', '            token.transfer(investors[i], canWithdrawAmt);\n', '          }\n', '        }      \n', '    }        \n', '}']