['pragma solidity ^0.4.18;\n', '\n', '// VikkyToken\n', '// Token name: VikkyToken\n', '// Symbol: VIK\n', '// Decimals: 18\n', '// Telegram community: https://t.me/vikkyglobal\n', '\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) constant public returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface Token { \n', '    function distr(address _to, uint256 _value) external returns (bool);\n', '    function totalSupply() constant external returns (uint256 supply);\n', '    function balanceOf(address _owner) constant external returns (uint256 balance);\n', '}\n', '\n', 'contract VikkyToken is ERC20 {\n', '    \n', '    using SafeMath for uint256;\n', '    address owner = msg.sender;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed; \n', '\n', '    mapping (address => bool) public airdropClaimed;\n', '    mapping (address => bool) public refundClaimed;\n', '    mapping (address => bool) public locked;\n', '\n', '    /* Keep track of Ether contributed and tokens received during Crowdsale */\n', '  \n', '    mapping(address => uint) public icoEtherContributed;\n', '    mapping(address => uint) public icoTokensReceived;\n', '\n', '    string public constant name = "VikkyToken";\n', '    string public constant symbol = "VIK";\n', '    uint public constant decimals = 18;\n', '    \n', '    uint constant E18 = 10**18;\n', '    uint constant E6 = 10**6;\n', '    \n', '    uint public totalSupply = 1000 * E6 * E18;\n', '    uint public totalDistributed = 220 * E6 * E18;   //For team + Founder\n', '    uint public totalRemaining = totalSupply.sub(totalDistributed); //For ICO    \n', '    uint public tokensPerEth = 20000 * E18; \n', '    \n', '    uint public tokensAirdrop = 266 * E18;\n', '    uint public tokensClaimedAirdrop = 0;\n', '    uint public totalDistributedAirdrop = 20 * E6 * E18;   //Airdrop\n', '\n', '    uint public constant MIN_CONTRIBUTION = 1 ether / 100; // 0.01 Ether\n', '    uint public constant MIN_CONTRIBUTION_PRESALE = 1 ether;\n', '    uint public constant MAX_CONTRIBUTION = 100 ether;\n', '    uint public constant MIN_FUNDING_GOAL =  5000 ether; // 5000 ETH\n', '    /* ICO dates */\n', '\n', '    uint public constant DATE_PRESALE_START = 1525244400; // 05/02/2018 @ 7:00am (UTC)\n', '    uint public constant DATE_PRESALE_END   = 1526454000; // 05/16/2018 @ 7:00am (UTC)\n', '\n', '    uint public constant DATE_ICO_START = 1526454060; // 05/16/2018 @ 7:01am (UTC)\n', '    uint public constant DATE_ICO_END   = 1533020400; // 07/31/2018 @ 7:00am (UTC)\n', '\n', '    uint public constant BONUS_PRESALE      = 30;\n', '    uint public constant BONUS_ICO_ROUND1   = 20;\n', '    uint public constant BONUS_ICO_ROUND2   = 10;\n', '    uint public constant BONUS_ICO_ROUND3   = 5;\n', '    \n', '    event TokensPerEthUpdated(uint _tokensPerEth);    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Refund(address indexed _owner, uint _amount, uint _tokens);\n', '    event Distr(address indexed to, uint256 amount);\n', '    event DistrFinished();\n', '    event Airdrop(address indexed _owner, uint _amount, uint _balance);\n', '    event Burn(address indexed burner, uint256 value);\n', '    event LockRemoved(address indexed _participant);\n', '\n', '    bool public distributionFinished = false;\n', '    \n', '    modifier canDistr() {\n', '        require(!distributionFinished);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    \n', '    function VikkyToken () public {\n', '        owner = msg.sender;\n', '        distr(owner, totalDistributed); //Distribute for owner\n', '    }\n', '\n', '    // Information functions ------------\n', '  \n', '    /* What time is it? */\n', '  \n', '    function atNow() public constant returns (uint) {\n', '        return now;\n', '    }\n', '  \n', '     /* Has the minimum threshold been reached? */\n', '  \n', '    function icoThresholdReached() public constant returns (bool thresholdReached) {\n', '        address myAddress = this;\n', '        uint256 etherBalance = myAddress.balance;\n', '        if (etherBalance < MIN_FUNDING_GOAL) return false;\n', '        return true;\n', '    }  \n', '    \n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '\n', '\n', '    function finishDistribution() onlyOwner canDistr public returns (bool) {\n', '        distributionFinished = true;\n', '        emit DistrFinished();\n', '        return true;\n', '    }\n', '    \n', '    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n', '        totalDistributed = totalDistributed.add(_amount);\n', '        totalRemaining = totalRemaining.sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '\n', '        icoTokensReceived[msg.sender] = icoTokensReceived[msg.sender].add(_amount);\n', '            \n', '        // register Ether            \n', '        icoEtherContributed[msg.sender] = icoEtherContributed[msg.sender].add(msg.value);\n', '    \n', '        // locked\n', '        locked[msg.sender] = true;\n', '\n', '        emit Distr(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);        \n', '        \n', '        return true;     \n', '    }\n', '    \n', '    function distribution(address[] addresses, uint256 amount) onlyOwner canDistr public {\n', '                \n', '        require(amount <= totalRemaining);\n', '        \n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            require(amount <= totalRemaining);\n', '            distr(addresses[i], amount);\n', '        }\n', '    \n', '        if (totalDistributed >= totalSupply) {\n', '            distributionFinished = true;\n', '        }\n', '    }\n', '    \n', '    function distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner canDistr public {\n', '        \n', '        require(addresses.length == amounts.length);\n', '        \n', '        for (uint8 i = 0; i < addresses.length; i++) {\n', '            require(amounts[i] <= totalRemaining);\n', '            distr(addresses[i], amounts[i]);\n', '            \n', '            if (totalDistributed >= totalSupply) {\n', '                distributionFinished = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    function doAirdrop(address _participant, uint airdrop) internal {\n', '        \n', '        require( airdrop > 0 );\n', '        require(tokensClaimedAirdrop < totalDistributedAirdrop);\n', '\n', '        // update balances and token issue volume\n', '        airdropClaimed[_participant] = true;\n', '        balances[_participant] = balances[_participant].add(airdrop);\n', '        totalDistributed = totalDistributed.add(airdrop);\n', '        totalRemaining = totalRemaining.sub(airdrop);\n', '        tokensClaimedAirdrop   = tokensClaimedAirdrop.add(airdrop);\n', '    \n', '        // log\n', '        emit Airdrop(_participant, airdrop, balances[_participant]);\n', '        emit Transfer(address(0), _participant, airdrop);\n', '    }\n', '\n', '    function adminClaimAirdrop(address _participant, uint airdrop) external {        \n', '        doAirdrop(_participant, airdrop);\n', '    }\n', '\n', '    function adminClaimAirdropMultiple(address[] _addresses, uint airdrop) external {        \n', '        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], airdrop);\n', '    }\n', '\n', '    function systemClaimAirdropMultiple(address[] _addresses) external {\n', '        uint airdrop = tokensAirdrop;\n', '        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], airdrop);\n', '    }\n', '\n', ' \n', '    /* Change tokensPerEth before ICO start */\n', '  \n', '    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {\n', '        require( atNow() < DATE_PRESALE_START );\n', '        tokensPerEth = _tokensPerEth;\n', '        emit TokensPerEthUpdated(_tokensPerEth);\n', '    }\n', '    \n', '    function () external payable {\n', '        buyTokens();\n', '     }\n', '    \n', '    function buyTokens() payable canDistr public {\n', '        uint ts = atNow();\n', '        bool isPresale = false;\n', '        bool isIco = false;\n', '        uint tokens = 0;\n', '\n', '        // minimum contribution\n', '        require( msg.value >= MIN_CONTRIBUTION );\n', '\n', '        // one address transfer hard cap\n', '        require( icoEtherContributed[msg.sender].add(msg.value) <= MAX_CONTRIBUTION );\n', '\n', '        // check dates for presale or ICO\n', '        if (ts > DATE_PRESALE_START && ts < DATE_PRESALE_END) isPresale = true;  \n', '        if (ts > DATE_ICO_START && ts < DATE_ICO_END) isIco = true;\n', '        require( isPresale || isIco );\n', '\n', '        // presale cap in Ether\n', '        if (isPresale) require( msg.value >= MIN_CONTRIBUTION_PRESALE);\n', '                \n', '        address investor = msg.sender;\n', '        \n', '        // get baseline number of tokens\n', '        tokens = tokensPerEth.mul(msg.value) / 1 ether;\n', '\n', '        // apply bonuses (none for last week)\n', '        if (isPresale) {\n', '            tokens = tokens.mul(100 + BONUS_PRESALE) / 100;\n', '        } else if (ts < DATE_ICO_START + 14 days) {\n', '            // round 1 bonus\n', '            tokens = tokens.mul(100 + BONUS_ICO_ROUND1) / 100;\n', '        } else if (ts < DATE_ICO_START + 28 days) {\n', '            // round 2 bonus\n', '            tokens = tokens.mul(100 + BONUS_ICO_ROUND2) / 100;\n', '        } else if (ts < DATE_ICO_START + 42 days) {\n', '            // round 3 bonus\n', '            tokens = tokens.mul(100 + BONUS_ICO_ROUND3) / 100;\n', '        }\n', '\n', '        // ICO token volume cap\n', '        require( totalDistributed.add(tokens) <= totalRemaining );\n', '        \n', '        if (tokens > 0) {\n', '            distr(investor, tokens);\n', '        }\n', '        \n', '\n', '        if (totalDistributed >= totalSupply) {\n', '            distributionFinished = true;\n', '        }                \n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // mitigates the ERC20 short address attack\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '    // Lock functions -------------------\n', '\n', '    /* Manage locked */\n', '\n', '    function removeLock(address _participant) public {        \n', '        locked[_participant] = false;\n', '        emit LockRemoved(_participant);\n', '    }\n', '\n', '    function removeLockMultiple(address[] _participants) public {        \n', '        for (uint i = 0; i < _participants.length; i++) {\n', '            removeLock(_participants[i]);\n', '        }\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n', '\n', '        require(_to != address(0));\n', '        require(_amount <= balances[msg.sender]);\n', '        require( locked[msg.sender] == false );\n', '        require( locked[_to] == false );\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n', '\n', '        require(_to != address(0));\n', '        require(_amount <= balances[_from]);\n', '        require(_amount <= allowed[_from][msg.sender]);\n', '        require( locked[msg.sender] == false );\n', '        require( locked[_to] == false );\n', '        \n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        // mitigates the ERC20 spend/approval race condition\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant public returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n', '        ForeignToken t = ForeignToken(tokenAddress);\n', '        uint bal = t.balanceOf(who);\n', '        return bal;\n', '    }\n', '    \n', '    function withdraw() onlyOwner public {\n', '        address myAddress = this;\n', '        uint256 etherBalance = myAddress.balance;\n', '        owner.transfer(etherBalance);\n', '    }\n', '    \n', '    function burn(uint256 _value) onlyOwner public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        totalDistributed = totalDistributed.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '    \n', '    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n', '        ForeignToken token = ForeignToken(_tokenContract);\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(owner, amount);\n', '    }\n', '\n', '    // External functions ---------------\n', '\n', '    /* Reclaiming of funds by contributors in case of a failed crowdsale */\n', '    /* (it will fail if account is empty after ownerClawback) */\n', '\n', '    function reclaimFund(address _participant) public {\n', '        uint tokens; // tokens to destroy\n', '        uint amount; // refund amount\n', '\n', '        // ico is finished and was not successful\n', '        require( atNow() > DATE_ICO_END && !icoThresholdReached() );\n', '\n', '        // check if refund has already been claimed\n', '        require( !refundClaimed[_participant] );\n', '\n', '        // check if there is anything to refund\n', '        require( icoEtherContributed[_participant] > 0 );\n', '\n', '        // update variables affected by refund\n', '        tokens = icoTokensReceived[_participant];\n', '        amount = icoEtherContributed[_participant];\n', '\n', '        balances[_participant] = balances[_participant].sub(tokens);\n', '        totalDistributed    = totalDistributed.sub(tokens);\n', '    \n', '        refundClaimed[_participant] = true;\n', '\n', '        _participant.transfer(amount);\n', '\n', '        // log\n', '        emit Transfer(_participant, 0x0, tokens);\n', '        emit Refund(_participant, amount, tokens);\n', '    }\n', '\n', '    function reclaimFundMultiple(address[] _participants) public {        \n', '        for (uint i = 0; i < _participants.length; i++) {\n', '            reclaimFund(_participants[i]);\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// VikkyToken\n', '// Token name: VikkyToken\n', '// Symbol: VIK\n', '// Decimals: 18\n', '// Telegram community: https://t.me/vikkyglobal\n', '\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) constant public returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface Token { \n', '    function distr(address _to, uint256 _value) external returns (bool);\n', '    function totalSupply() constant external returns (uint256 supply);\n', '    function balanceOf(address _owner) constant external returns (uint256 balance);\n', '}\n', '\n', 'contract VikkyToken is ERC20 {\n', '    \n', '    using SafeMath for uint256;\n', '    address owner = msg.sender;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed; \n', '\n', '    mapping (address => bool) public airdropClaimed;\n', '    mapping (address => bool) public refundClaimed;\n', '    mapping (address => bool) public locked;\n', '\n', '    /* Keep track of Ether contributed and tokens received during Crowdsale */\n', '  \n', '    mapping(address => uint) public icoEtherContributed;\n', '    mapping(address => uint) public icoTokensReceived;\n', '\n', '    string public constant name = "VikkyToken";\n', '    string public constant symbol = "VIK";\n', '    uint public constant decimals = 18;\n', '    \n', '    uint constant E18 = 10**18;\n', '    uint constant E6 = 10**6;\n', '    \n', '    uint public totalSupply = 1000 * E6 * E18;\n', '    uint public totalDistributed = 220 * E6 * E18;   //For team + Founder\n', '    uint public totalRemaining = totalSupply.sub(totalDistributed); //For ICO    \n', '    uint public tokensPerEth = 20000 * E18; \n', '    \n', '    uint public tokensAirdrop = 266 * E18;\n', '    uint public tokensClaimedAirdrop = 0;\n', '    uint public totalDistributedAirdrop = 20 * E6 * E18;   //Airdrop\n', '\n', '    uint public constant MIN_CONTRIBUTION = 1 ether / 100; // 0.01 Ether\n', '    uint public constant MIN_CONTRIBUTION_PRESALE = 1 ether;\n', '    uint public constant MAX_CONTRIBUTION = 100 ether;\n', '    uint public constant MIN_FUNDING_GOAL =  5000 ether; // 5000 ETH\n', '    /* ICO dates */\n', '\n', '    uint public constant DATE_PRESALE_START = 1525244400; // 05/02/2018 @ 7:00am (UTC)\n', '    uint public constant DATE_PRESALE_END   = 1526454000; // 05/16/2018 @ 7:00am (UTC)\n', '\n', '    uint public constant DATE_ICO_START = 1526454060; // 05/16/2018 @ 7:01am (UTC)\n', '    uint public constant DATE_ICO_END   = 1533020400; // 07/31/2018 @ 7:00am (UTC)\n', '\n', '    uint public constant BONUS_PRESALE      = 30;\n', '    uint public constant BONUS_ICO_ROUND1   = 20;\n', '    uint public constant BONUS_ICO_ROUND2   = 10;\n', '    uint public constant BONUS_ICO_ROUND3   = 5;\n', '    \n', '    event TokensPerEthUpdated(uint _tokensPerEth);    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Refund(address indexed _owner, uint _amount, uint _tokens);\n', '    event Distr(address indexed to, uint256 amount);\n', '    event DistrFinished();\n', '    event Airdrop(address indexed _owner, uint _amount, uint _balance);\n', '    event Burn(address indexed burner, uint256 value);\n', '    event LockRemoved(address indexed _participant);\n', '\n', '    bool public distributionFinished = false;\n', '    \n', '    modifier canDistr() {\n', '        require(!distributionFinished);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    \n', '    function VikkyToken () public {\n', '        owner = msg.sender;\n', '        distr(owner, totalDistributed); //Distribute for owner\n', '    }\n', '\n', '    // Information functions ------------\n', '  \n', '    /* What time is it? */\n', '  \n', '    function atNow() public constant returns (uint) {\n', '        return now;\n', '    }\n', '  \n', '     /* Has the minimum threshold been reached? */\n', '  \n', '    function icoThresholdReached() public constant returns (bool thresholdReached) {\n', '        address myAddress = this;\n', '        uint256 etherBalance = myAddress.balance;\n', '        if (etherBalance < MIN_FUNDING_GOAL) return false;\n', '        return true;\n', '    }  \n', '    \n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '\n', '\n', '    function finishDistribution() onlyOwner canDistr public returns (bool) {\n', '        distributionFinished = true;\n', '        emit DistrFinished();\n', '        return true;\n', '    }\n', '    \n', '    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n', '        totalDistributed = totalDistributed.add(_amount);\n', '        totalRemaining = totalRemaining.sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '\n', '        icoTokensReceived[msg.sender] = icoTokensReceived[msg.sender].add(_amount);\n', '            \n', '        // register Ether            \n', '        icoEtherContributed[msg.sender] = icoEtherContributed[msg.sender].add(msg.value);\n', '    \n', '        // locked\n', '        locked[msg.sender] = true;\n', '\n', '        emit Distr(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);        \n', '        \n', '        return true;     \n', '    }\n', '    \n', '    function distribution(address[] addresses, uint256 amount) onlyOwner canDistr public {\n', '                \n', '        require(amount <= totalRemaining);\n', '        \n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            require(amount <= totalRemaining);\n', '            distr(addresses[i], amount);\n', '        }\n', '    \n', '        if (totalDistributed >= totalSupply) {\n', '            distributionFinished = true;\n', '        }\n', '    }\n', '    \n', '    function distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner canDistr public {\n', '        \n', '        require(addresses.length == amounts.length);\n', '        \n', '        for (uint8 i = 0; i < addresses.length; i++) {\n', '            require(amounts[i] <= totalRemaining);\n', '            distr(addresses[i], amounts[i]);\n', '            \n', '            if (totalDistributed >= totalSupply) {\n', '                distributionFinished = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    function doAirdrop(address _participant, uint airdrop) internal {\n', '        \n', '        require( airdrop > 0 );\n', '        require(tokensClaimedAirdrop < totalDistributedAirdrop);\n', '\n', '        // update balances and token issue volume\n', '        airdropClaimed[_participant] = true;\n', '        balances[_participant] = balances[_participant].add(airdrop);\n', '        totalDistributed = totalDistributed.add(airdrop);\n', '        totalRemaining = totalRemaining.sub(airdrop);\n', '        tokensClaimedAirdrop   = tokensClaimedAirdrop.add(airdrop);\n', '    \n', '        // log\n', '        emit Airdrop(_participant, airdrop, balances[_participant]);\n', '        emit Transfer(address(0), _participant, airdrop);\n', '    }\n', '\n', '    function adminClaimAirdrop(address _participant, uint airdrop) external {        \n', '        doAirdrop(_participant, airdrop);\n', '    }\n', '\n', '    function adminClaimAirdropMultiple(address[] _addresses, uint airdrop) external {        \n', '        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], airdrop);\n', '    }\n', '\n', '    function systemClaimAirdropMultiple(address[] _addresses) external {\n', '        uint airdrop = tokensAirdrop;\n', '        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], airdrop);\n', '    }\n', '\n', ' \n', '    /* Change tokensPerEth before ICO start */\n', '  \n', '    function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {\n', '        require( atNow() < DATE_PRESALE_START );\n', '        tokensPerEth = _tokensPerEth;\n', '        emit TokensPerEthUpdated(_tokensPerEth);\n', '    }\n', '    \n', '    function () external payable {\n', '        buyTokens();\n', '     }\n', '    \n', '    function buyTokens() payable canDistr public {\n', '        uint ts = atNow();\n', '        bool isPresale = false;\n', '        bool isIco = false;\n', '        uint tokens = 0;\n', '\n', '        // minimum contribution\n', '        require( msg.value >= MIN_CONTRIBUTION );\n', '\n', '        // one address transfer hard cap\n', '        require( icoEtherContributed[msg.sender].add(msg.value) <= MAX_CONTRIBUTION );\n', '\n', '        // check dates for presale or ICO\n', '        if (ts > DATE_PRESALE_START && ts < DATE_PRESALE_END) isPresale = true;  \n', '        if (ts > DATE_ICO_START && ts < DATE_ICO_END) isIco = true;\n', '        require( isPresale || isIco );\n', '\n', '        // presale cap in Ether\n', '        if (isPresale) require( msg.value >= MIN_CONTRIBUTION_PRESALE);\n', '                \n', '        address investor = msg.sender;\n', '        \n', '        // get baseline number of tokens\n', '        tokens = tokensPerEth.mul(msg.value) / 1 ether;\n', '\n', '        // apply bonuses (none for last week)\n', '        if (isPresale) {\n', '            tokens = tokens.mul(100 + BONUS_PRESALE) / 100;\n', '        } else if (ts < DATE_ICO_START + 14 days) {\n', '            // round 1 bonus\n', '            tokens = tokens.mul(100 + BONUS_ICO_ROUND1) / 100;\n', '        } else if (ts < DATE_ICO_START + 28 days) {\n', '            // round 2 bonus\n', '            tokens = tokens.mul(100 + BONUS_ICO_ROUND2) / 100;\n', '        } else if (ts < DATE_ICO_START + 42 days) {\n', '            // round 3 bonus\n', '            tokens = tokens.mul(100 + BONUS_ICO_ROUND3) / 100;\n', '        }\n', '\n', '        // ICO token volume cap\n', '        require( totalDistributed.add(tokens) <= totalRemaining );\n', '        \n', '        if (tokens > 0) {\n', '            distr(investor, tokens);\n', '        }\n', '        \n', '\n', '        if (totalDistributed >= totalSupply) {\n', '            distributionFinished = true;\n', '        }                \n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // mitigates the ERC20 short address attack\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '    // Lock functions -------------------\n', '\n', '    /* Manage locked */\n', '\n', '    function removeLock(address _participant) public {        \n', '        locked[_participant] = false;\n', '        emit LockRemoved(_participant);\n', '    }\n', '\n', '    function removeLockMultiple(address[] _participants) public {        \n', '        for (uint i = 0; i < _participants.length; i++) {\n', '            removeLock(_participants[i]);\n', '        }\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n', '\n', '        require(_to != address(0));\n', '        require(_amount <= balances[msg.sender]);\n', '        require( locked[msg.sender] == false );\n', '        require( locked[_to] == false );\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n', '\n', '        require(_to != address(0));\n', '        require(_amount <= balances[_from]);\n', '        require(_amount <= allowed[_from][msg.sender]);\n', '        require( locked[msg.sender] == false );\n', '        require( locked[_to] == false );\n', '        \n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        // mitigates the ERC20 spend/approval race condition\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant public returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n', '        ForeignToken t = ForeignToken(tokenAddress);\n', '        uint bal = t.balanceOf(who);\n', '        return bal;\n', '    }\n', '    \n', '    function withdraw() onlyOwner public {\n', '        address myAddress = this;\n', '        uint256 etherBalance = myAddress.balance;\n', '        owner.transfer(etherBalance);\n', '    }\n', '    \n', '    function burn(uint256 _value) onlyOwner public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        totalDistributed = totalDistributed.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '    \n', '    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n', '        ForeignToken token = ForeignToken(_tokenContract);\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(owner, amount);\n', '    }\n', '\n', '    // External functions ---------------\n', '\n', '    /* Reclaiming of funds by contributors in case of a failed crowdsale */\n', '    /* (it will fail if account is empty after ownerClawback) */\n', '\n', '    function reclaimFund(address _participant) public {\n', '        uint tokens; // tokens to destroy\n', '        uint amount; // refund amount\n', '\n', '        // ico is finished and was not successful\n', '        require( atNow() > DATE_ICO_END && !icoThresholdReached() );\n', '\n', '        // check if refund has already been claimed\n', '        require( !refundClaimed[_participant] );\n', '\n', '        // check if there is anything to refund\n', '        require( icoEtherContributed[_participant] > 0 );\n', '\n', '        // update variables affected by refund\n', '        tokens = icoTokensReceived[_participant];\n', '        amount = icoEtherContributed[_participant];\n', '\n', '        balances[_participant] = balances[_participant].sub(tokens);\n', '        totalDistributed    = totalDistributed.sub(tokens);\n', '    \n', '        refundClaimed[_participant] = true;\n', '\n', '        _participant.transfer(amount);\n', '\n', '        // log\n', '        emit Transfer(_participant, 0x0, tokens);\n', '        emit Refund(_participant, amount, tokens);\n', '    }\n', '\n', '    function reclaimFundMultiple(address[] _participants) public {        \n', '        for (uint i = 0; i < _participants.length; i++) {\n', '            reclaimFund(_participants[i]);\n', '        }\n', '    }\n', '}']
