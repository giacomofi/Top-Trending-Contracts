['pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', ' * the methods to add functionality. Consider using &#39;super&#39; where appropiate to concatenate\n', ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Crowdsale with a limit for total contributions.\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  /**\n', '   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n', '   * @param _cap Max amount of wei to be contributed\n', '   */\n', '  constructor(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the cap has been reached.\n', '   * @return Whether the cap was reached\n', '   */\n', '  function capReached() public view returns (bool) {\n', '    return weiRaised >= cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring purchase to respect the funding cap.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    require(weiRaised.add(_weiAmount) <= cap);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) hasMintPermission canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title MintedCrowdsale\n', ' * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n', ' * Token ownership should be transferred to MintedCrowdsale for minting.\n', ' */\n', 'contract MintedCrowdsale is Crowdsale {\n', '\n', '  /**\n', '   * @dev Overrides delivery by minting tokens upon purchase.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Number of tokens to be minted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    require(MintableToken(token).mint(_beneficiary, _tokenAmount));\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title FTICrowdsale\n', ' * @dev This is FTICrowdsale contract.\n', ' * In this crowdsale we are providing following extensions:\n', ' * CappedCrowdsale - sets a max boundary for raised funds\n', ' * MintedCrowdsale - set a min goal to be reached and returns funds if it&#39;s not met\n', ' *\n', ' * After adding multiple features it&#39;s good practice to run integration tests\n', ' * to ensure that subcontracts works together as intended.\n', ' */\n', 'contract ClosedPeriod is TimedCrowdsale {\n', '    uint256 startClosePeriod;\n', '    uint256 stopClosePeriod;\n', '  \n', '    modifier onlyWhileOpen {\n', '        require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '        require(block.timestamp < startClosePeriod || block.timestamp > stopClosePeriod);\n', '        _;\n', '    }\n', '\n', '    constructor(\n', '        uint256 _openingTime,\n', '        uint256 _closingTime,\n', '        uint256 _openClosePeriod,\n', '        uint256 _endClosePeriod\n', '    ) public\n', '        TimedCrowdsale(_openingTime, _closingTime)\n', '    {\n', '        require(_openClosePeriod > 0);\n', '        require(_endClosePeriod > _openClosePeriod);\n', '        startClosePeriod = _openClosePeriod;\n', '        stopClosePeriod = _endClosePeriod;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ContractableToken\n', ' * @dev The Ownable contract has an ownerncontract address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract OptionsToken is StandardToken, Ownable {\n', '    using SafeMath for uint256;\n', '    bool revertable = true;\n', '    mapping (address => uint256) public optionsOwner;\n', '    \n', '    modifier hasOptionPermision() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }  \n', '\n', '    function storeOptions(address recipient, uint256 amount) public hasOptionPermision() {\n', '        optionsOwner[recipient] += amount;\n', '    }\n', '\n', '    function refundOptions(address discharged) public onlyOwner() returns (bool) {\n', '        require(revertable);\n', '        require(optionsOwner[discharged] > 0);\n', '        require(optionsOwner[discharged] <= balances[discharged]);\n', '\n', '        uint256 revertTokens = optionsOwner[discharged];\n', '        optionsOwner[discharged] = 0;\n', '\n', '        balances[discharged] = balances[discharged].sub(revertTokens);\n', '        balances[owner] = balances[owner].add(revertTokens);\n', '        emit Transfer(discharged, owner, revertTokens);\n', '        return true;\n', '    }\n', '\n', '    function doneOptions() public onlyOwner() {\n', '        require(revertable);\n', '        revertable = false;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ContractableToken\n', ' * @dev The Contractable contract has an ownerncontract address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract ContractableToken is MintableToken, OptionsToken {\n', '    address[5] public contract_addr;\n', '    uint8 public contract_num = 0;\n', '\n', '    function existsContract(address sender) public view returns(bool) {\n', '        bool found = false;\n', '        for (uint8 i = 0; i < contract_num; i++) {\n', '            if (sender == contract_addr[i]) {\n', '                found = true;\n', '            }\n', '        }\n', '        return found;\n', '    }\n', '\n', '    modifier onlyContract() {\n', '        require(existsContract(msg.sender));\n', '        _;\n', '    }\n', '\n', '    modifier hasMintPermission() {\n', '        require(existsContract(msg.sender));\n', '        _;\n', '    }\n', '    \n', '    modifier hasOptionPermision() {\n', '        require(existsContract(msg.sender));\n', '        _;\n', '    }  \n', '  \n', '    event ContractRenounced();\n', '    event ContractTransferred(address indexed newContract);\n', '  \n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newContract.\n', '     * @param newContract The address to transfer ownership to.\n', '     */\n', '    function setContract(address newContract) public onlyOwner() {\n', '        require(newContract != address(0));\n', '        contract_num++;\n', '        require(contract_num <= 5);\n', '        emit ContractTransferred(newContract);\n', '        contract_addr[contract_num-1] = newContract;\n', '    }\n', '  \n', '    function renounceContract() public onlyOwner() {\n', '        emit ContractRenounced();\n', '        contract_num = 0;\n', '    }\n', '  \n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title FTIToken\n', ' * @dev Very simple ERC20 Token that can be minted.\n', ' * It is meant to be used in a crowdsale contract.\n', ' */\n', 'contract FTIToken is ContractableToken {\n', '\n', '    string public constant name = "GlobalCarService Token";\n', '    string public constant symbol = "FTI";\n', '    uint8 public constant decimals = 18;\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(msg.sender == owner || mintingFinished);\n', '        super.transferFrom(_from, _to, _value);\n', '        return true;\n', '    }\n', '  \n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(msg.sender == owner || mintingFinished);\n', '        super.transfer(_to, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title FTICrowdsale\n', ' * @dev This is FTICrowdsale contract.\n', ' * In this crowdsale we are providing following extensions:\n', ' * CappedCrowdsale - sets a max boundary for raised funds\n', ' * MintedCrowdsale - set a min goal to be reached and returns funds if it&#39;s not met\n', ' *\n', ' * After adding multiple features it&#39;s good practice to run integration tests\n', ' * to ensure that subcontracts works together as intended.\n', ' */\n', 'contract FTICrowdsale is CappedCrowdsale, MintedCrowdsale, ClosedPeriod, Ownable {\n', '    using SafeMath for uint256;\n', '    uint256 public referralMinimum;\n', '    uint8 public additionalTokenRate; \n', '    uint8 public referralPercent;\n', '    uint8 public referralOwnerPercent;\n', '    bool public openingManualyMining = true;\n', '  \n', '    modifier onlyOpeningManualyMinig() {\n', '        require(openingManualyMining);\n', '        _;\n', '    }\n', '   \n', '    struct Pay {\n', '        address payer;\n', '        uint256 amount;\n', '    }\n', '    \n', '    struct ReferalUser {\n', '        uint256 fundsTotal;\n', '        uint32 numReferrals;\n', '        uint256 amountWEI;\n', '        uint32 paysCount;\n', '        mapping (uint32 => Pay) pays;\n', '        mapping (uint32 => address) paysUniq;\n', '        mapping (address => uint256) referral;\n', '    }\n', '    mapping (address => ReferalUser) public referralAddresses;\n', '\n', '    uint8 constant maxGlobInvestor = 5;\n', '    struct BonusPeriod {\n', '        uint64 from;\n', '        uint64 to;\n', '        uint256 min_amount;\n', '        uint256 max_amount;\n', '        uint8 bonus;\n', '        uint8 index_global_investor;\n', '    }\n', '    BonusPeriod[] public bonus_periods;\n', '\n', '    mapping (uint8 => address[]) public globalInvestor;\n', '\n', '    constructor(\n', '        uint256 _openingTime,\n', '        uint256 _closingTime,\n', '        uint256 _openClosePeriod,\n', '        uint256 _endClosePeriod,\n', '        uint256 _rate,\n', '        address _wallet,\n', '        uint256 _cap,\n', '        FTIToken _token,\n', '        uint8 _additionalTokenRate,\n', '        uint8 _referralPercent,\n', '        uint256 _referralMinimum,\n', '        uint8 _referralOwnerPercent\n', '    ) public\n', '        Crowdsale(_rate, _wallet, _token)\n', '        CappedCrowdsale(_cap)\n', '        ClosedPeriod(_openingTime, _closingTime, _openClosePeriod, _endClosePeriod)\n', '    {\n', '        require(_additionalTokenRate > 0);\n', '        require(_referralPercent > 0);\n', '        require(_referralMinimum > 0);\n', '        require(_referralOwnerPercent > 0);\n', '        additionalTokenRate = _additionalTokenRate;\n', '        referralPercent = _referralPercent;\n', '        referralMinimum = _referralMinimum;\n', '        referralOwnerPercent = _referralOwnerPercent;\n', '    }\n', '\n', '    function bytesToAddress(bytes source) internal constant returns(address parsedReferer) {\n', '        assembly {\n', '            parsedReferer := mload(add(source,0x14))\n', '        }\n', '        require(parsedReferer != msg.sender);\n', '        return parsedReferer;\n', '    }\n', '\n', '    function processReferral(address owner, address _beneficiary, uint256 _weiAmount) internal {\n', '        require(owner != address(0));\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '        ReferalUser storage rr = referralAddresses[owner];\n', '        if (rr.amountWEI > 0) {\n', '            uint mintTokens = _weiAmount.mul(rate);\n', '            uint256 ownerToken = mintTokens.mul(referralOwnerPercent).div(100);\n', '            rr.fundsTotal += ownerToken;\n', '            if (rr.referral[_beneficiary] == 0){\n', '                rr.paysUniq[rr.numReferrals] = _beneficiary;\n', '                rr.numReferrals += 1;\n', '            }\n', '            rr.referral[_beneficiary] += _weiAmount;\n', '            rr.pays[rr.paysCount] = Pay(_beneficiary, _weiAmount);\n', '            rr.paysCount += 1;\n', '            FTIToken(token).mint(owner, ownerToken);\n', '            FTIToken(token).mint(_beneficiary, mintTokens.mul(referralPercent).div(100));\n', '        }\n', '    }\n', '\n', '    function addReferral(address _beneficiary, uint256 _weiAmount) internal {\n', '        if (_weiAmount > referralMinimum) {\n', '            ReferalUser storage r = referralAddresses[_beneficiary];\n', '            if (r.amountWEI > 0 ) {\n', '                r.amountWEI += _weiAmount;\n', '            }\n', '            else {\n', '                referralAddresses[_beneficiary] = ReferalUser(0, 0, _weiAmount, 0);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '        if (msg.data.length == 20) {\n', '            address ref = bytesToAddress(msg.data);\n', '            processReferral(ref, _beneficiary, _weiAmount);\n', '        }\n', '\n', '        addReferral(_beneficiary, _weiAmount);\n', '\n', '        uint8 index = indexSuperInvestor(_weiAmount);\n', '        if (index > 0 && globalInvestor[index].length < maxGlobInvestor) {\n', '            bool found = false;\n', '            for (uint8 iter = 0; iter < globalInvestor[index].length; iter++) {\n', '                if (globalInvestor[index][iter] == _beneficiary) {\n', '                    found = true;\n', '                }\n', '            }\n', '            if (!found) { \n', '                globalInvestor[index].push(_beneficiary);\n', '            }\n', '        }\n', '    }\n', '\n', '    function referalCount (address addr) public view returns(uint64 len) {\n', '        len = referralAddresses[addr].numReferrals;\n', '    } \n', '\n', '    function referalAddrByNum (address ref_owner, uint32 num) public view returns(address addr) {\n', '        addr = referralAddresses[ref_owner].paysUniq[num];\n', '    } \n', '\n', '    function referalPayCount (address addr) public view returns(uint64 len) {\n', '        len = referralAddresses[addr].paysCount;\n', '    } \n', '\n', '    function referalPayByNum (address ref_owner, uint32 num) public view returns(address addr, uint256 amount) {\n', '        addr = referralAddresses[ref_owner].pays[num].payer;\n', '        amount = referralAddresses[ref_owner].pays[num].amount;\n', '    } \n', '\n', '    function addBonusPeriod (uint64 from, uint64 to, uint256 min_amount, uint8 bonus, uint256 max_amount, uint8 index_glob_inv) public onlyOwner {\n', '        bonus_periods.push(BonusPeriod(from, to, min_amount, max_amount, bonus, index_glob_inv));\n', '    }\n', '\n', '    function getBonusRate (uint256 amount) public constant returns(uint8) {\n', '        for (uint i = 0; i < bonus_periods.length; i++) {\n', '            BonusPeriod storage bonus_period = bonus_periods[i];\n', '            if (bonus_period.from <= now && bonus_period.to > now && bonus_period.min_amount <= amount && bonus_period.max_amount > amount) {\n', '                return bonus_period.bonus;\n', '            } \n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function indexSuperInvestor (uint256 amount) public view returns(uint8) {\n', '        for (uint8 i = 0; i < bonus_periods.length; i++) {\n', '            BonusPeriod storage bonus_period = bonus_periods[i];\n', '            if (bonus_period.from <= now && bonus_period.to > now && bonus_period.min_amount <= amount && bonus_period.max_amount > amount) {\n', '                return bonus_period.index_global_investor;\n', '            } \n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint8 bonusPercent = 100 + getBonusRate(_weiAmount);\n', '        uint256 amountTokens = _weiAmount.mul(rate).mul(bonusPercent).div(100);\n', '        return amountTokens;\n', '    }\n', '\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        super._processPurchase(_beneficiary, _tokenAmount);\n', '        FTIToken(token).mint(wallet, _tokenAmount.mul(additionalTokenRate).div(100));\n', '    }\n', '\n', '    function closeManualyMining() public onlyOwner() {\n', '        openingManualyMining = false;\n', '    }\n', '\n', '    function manualyMintTokens(uint256 _weiAmount, address _beneficiary, uint256 mintTokens) public onlyOwner() onlyOpeningManualyMinig() {\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '        require(mintTokens != 0);\n', '        weiRaised = weiRaised.add(_weiAmount);\n', '        _processPurchase(_beneficiary, mintTokens);\n', '        emit TokenPurchase(\n', '            msg.sender,\n', '            _beneficiary,\n', '            _weiAmount,\n', '            mintTokens\n', '        );\n', '        addReferral(_beneficiary, _weiAmount);\n', '    }\n', '\n', '    function makeOptions(uint256 _weiAmount, address _recipient, uint256 optionTokens) public onlyOwner() {\n', '        require(!hasClosed());\n', '        require(_recipient != address(0));\n', '        require(_weiAmount != 0);\n', '        require(optionTokens != 0);\n', '        weiRaised = weiRaised.add(_weiAmount);\n', '        _processPurchase(_recipient, optionTokens);\n', '        emit TokenPurchase(\n', '            msg.sender,\n', '            _recipient,\n', '            _weiAmount,\n', '            optionTokens\n', '        );\n', '        FTIToken(token).storeOptions(_recipient, _weiAmount);\n', '        addReferral(_recipient, _weiAmount);\n', '    }\n', '\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n", ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Crowdsale with a limit for total contributions.\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  /**\n', '   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n', '   * @param _cap Max amount of wei to be contributed\n', '   */\n', '  constructor(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the cap has been reached.\n', '   * @return Whether the cap was reached\n', '   */\n', '  function capReached() public view returns (bool) {\n', '    return weiRaised >= cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring purchase to respect the funding cap.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    require(weiRaised.add(_weiAmount) <= cap);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) hasMintPermission canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title MintedCrowdsale\n', ' * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n', ' * Token ownership should be transferred to MintedCrowdsale for minting.\n', ' */\n', 'contract MintedCrowdsale is Crowdsale {\n', '\n', '  /**\n', '   * @dev Overrides delivery by minting tokens upon purchase.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Number of tokens to be minted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    require(MintableToken(token).mint(_beneficiary, _tokenAmount));\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title FTICrowdsale\n', ' * @dev This is FTICrowdsale contract.\n', ' * In this crowdsale we are providing following extensions:\n', ' * CappedCrowdsale - sets a max boundary for raised funds\n', " * MintedCrowdsale - set a min goal to be reached and returns funds if it's not met\n", ' *\n', " * After adding multiple features it's good practice to run integration tests\n", ' * to ensure that subcontracts works together as intended.\n', ' */\n', 'contract ClosedPeriod is TimedCrowdsale {\n', '    uint256 startClosePeriod;\n', '    uint256 stopClosePeriod;\n', '  \n', '    modifier onlyWhileOpen {\n', '        require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '        require(block.timestamp < startClosePeriod || block.timestamp > stopClosePeriod);\n', '        _;\n', '    }\n', '\n', '    constructor(\n', '        uint256 _openingTime,\n', '        uint256 _closingTime,\n', '        uint256 _openClosePeriod,\n', '        uint256 _endClosePeriod\n', '    ) public\n', '        TimedCrowdsale(_openingTime, _closingTime)\n', '    {\n', '        require(_openClosePeriod > 0);\n', '        require(_endClosePeriod > _openClosePeriod);\n', '        startClosePeriod = _openClosePeriod;\n', '        stopClosePeriod = _endClosePeriod;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ContractableToken\n', ' * @dev The Ownable contract has an ownerncontract address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract OptionsToken is StandardToken, Ownable {\n', '    using SafeMath for uint256;\n', '    bool revertable = true;\n', '    mapping (address => uint256) public optionsOwner;\n', '    \n', '    modifier hasOptionPermision() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }  \n', '\n', '    function storeOptions(address recipient, uint256 amount) public hasOptionPermision() {\n', '        optionsOwner[recipient] += amount;\n', '    }\n', '\n', '    function refundOptions(address discharged) public onlyOwner() returns (bool) {\n', '        require(revertable);\n', '        require(optionsOwner[discharged] > 0);\n', '        require(optionsOwner[discharged] <= balances[discharged]);\n', '\n', '        uint256 revertTokens = optionsOwner[discharged];\n', '        optionsOwner[discharged] = 0;\n', '\n', '        balances[discharged] = balances[discharged].sub(revertTokens);\n', '        balances[owner] = balances[owner].add(revertTokens);\n', '        emit Transfer(discharged, owner, revertTokens);\n', '        return true;\n', '    }\n', '\n', '    function doneOptions() public onlyOwner() {\n', '        require(revertable);\n', '        revertable = false;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ContractableToken\n', ' * @dev The Contractable contract has an ownerncontract address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract ContractableToken is MintableToken, OptionsToken {\n', '    address[5] public contract_addr;\n', '    uint8 public contract_num = 0;\n', '\n', '    function existsContract(address sender) public view returns(bool) {\n', '        bool found = false;\n', '        for (uint8 i = 0; i < contract_num; i++) {\n', '            if (sender == contract_addr[i]) {\n', '                found = true;\n', '            }\n', '        }\n', '        return found;\n', '    }\n', '\n', '    modifier onlyContract() {\n', '        require(existsContract(msg.sender));\n', '        _;\n', '    }\n', '\n', '    modifier hasMintPermission() {\n', '        require(existsContract(msg.sender));\n', '        _;\n', '    }\n', '    \n', '    modifier hasOptionPermision() {\n', '        require(existsContract(msg.sender));\n', '        _;\n', '    }  \n', '  \n', '    event ContractRenounced();\n', '    event ContractTransferred(address indexed newContract);\n', '  \n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newContract.\n', '     * @param newContract The address to transfer ownership to.\n', '     */\n', '    function setContract(address newContract) public onlyOwner() {\n', '        require(newContract != address(0));\n', '        contract_num++;\n', '        require(contract_num <= 5);\n', '        emit ContractTransferred(newContract);\n', '        contract_addr[contract_num-1] = newContract;\n', '    }\n', '  \n', '    function renounceContract() public onlyOwner() {\n', '        emit ContractRenounced();\n', '        contract_num = 0;\n', '    }\n', '  \n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title FTIToken\n', ' * @dev Very simple ERC20 Token that can be minted.\n', ' * It is meant to be used in a crowdsale contract.\n', ' */\n', 'contract FTIToken is ContractableToken {\n', '\n', '    string public constant name = "GlobalCarService Token";\n', '    string public constant symbol = "FTI";\n', '    uint8 public constant decimals = 18;\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(msg.sender == owner || mintingFinished);\n', '        super.transferFrom(_from, _to, _value);\n', '        return true;\n', '    }\n', '  \n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(msg.sender == owner || mintingFinished);\n', '        super.transfer(_to, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title FTICrowdsale\n', ' * @dev This is FTICrowdsale contract.\n', ' * In this crowdsale we are providing following extensions:\n', ' * CappedCrowdsale - sets a max boundary for raised funds\n', " * MintedCrowdsale - set a min goal to be reached and returns funds if it's not met\n", ' *\n', " * After adding multiple features it's good practice to run integration tests\n", ' * to ensure that subcontracts works together as intended.\n', ' */\n', 'contract FTICrowdsale is CappedCrowdsale, MintedCrowdsale, ClosedPeriod, Ownable {\n', '    using SafeMath for uint256;\n', '    uint256 public referralMinimum;\n', '    uint8 public additionalTokenRate; \n', '    uint8 public referralPercent;\n', '    uint8 public referralOwnerPercent;\n', '    bool public openingManualyMining = true;\n', '  \n', '    modifier onlyOpeningManualyMinig() {\n', '        require(openingManualyMining);\n', '        _;\n', '    }\n', '   \n', '    struct Pay {\n', '        address payer;\n', '        uint256 amount;\n', '    }\n', '    \n', '    struct ReferalUser {\n', '        uint256 fundsTotal;\n', '        uint32 numReferrals;\n', '        uint256 amountWEI;\n', '        uint32 paysCount;\n', '        mapping (uint32 => Pay) pays;\n', '        mapping (uint32 => address) paysUniq;\n', '        mapping (address => uint256) referral;\n', '    }\n', '    mapping (address => ReferalUser) public referralAddresses;\n', '\n', '    uint8 constant maxGlobInvestor = 5;\n', '    struct BonusPeriod {\n', '        uint64 from;\n', '        uint64 to;\n', '        uint256 min_amount;\n', '        uint256 max_amount;\n', '        uint8 bonus;\n', '        uint8 index_global_investor;\n', '    }\n', '    BonusPeriod[] public bonus_periods;\n', '\n', '    mapping (uint8 => address[]) public globalInvestor;\n', '\n', '    constructor(\n', '        uint256 _openingTime,\n', '        uint256 _closingTime,\n', '        uint256 _openClosePeriod,\n', '        uint256 _endClosePeriod,\n', '        uint256 _rate,\n', '        address _wallet,\n', '        uint256 _cap,\n', '        FTIToken _token,\n', '        uint8 _additionalTokenRate,\n', '        uint8 _referralPercent,\n', '        uint256 _referralMinimum,\n', '        uint8 _referralOwnerPercent\n', '    ) public\n', '        Crowdsale(_rate, _wallet, _token)\n', '        CappedCrowdsale(_cap)\n', '        ClosedPeriod(_openingTime, _closingTime, _openClosePeriod, _endClosePeriod)\n', '    {\n', '        require(_additionalTokenRate > 0);\n', '        require(_referralPercent > 0);\n', '        require(_referralMinimum > 0);\n', '        require(_referralOwnerPercent > 0);\n', '        additionalTokenRate = _additionalTokenRate;\n', '        referralPercent = _referralPercent;\n', '        referralMinimum = _referralMinimum;\n', '        referralOwnerPercent = _referralOwnerPercent;\n', '    }\n', '\n', '    function bytesToAddress(bytes source) internal constant returns(address parsedReferer) {\n', '        assembly {\n', '            parsedReferer := mload(add(source,0x14))\n', '        }\n', '        require(parsedReferer != msg.sender);\n', '        return parsedReferer;\n', '    }\n', '\n', '    function processReferral(address owner, address _beneficiary, uint256 _weiAmount) internal {\n', '        require(owner != address(0));\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '        ReferalUser storage rr = referralAddresses[owner];\n', '        if (rr.amountWEI > 0) {\n', '            uint mintTokens = _weiAmount.mul(rate);\n', '            uint256 ownerToken = mintTokens.mul(referralOwnerPercent).div(100);\n', '            rr.fundsTotal += ownerToken;\n', '            if (rr.referral[_beneficiary] == 0){\n', '                rr.paysUniq[rr.numReferrals] = _beneficiary;\n', '                rr.numReferrals += 1;\n', '            }\n', '            rr.referral[_beneficiary] += _weiAmount;\n', '            rr.pays[rr.paysCount] = Pay(_beneficiary, _weiAmount);\n', '            rr.paysCount += 1;\n', '            FTIToken(token).mint(owner, ownerToken);\n', '            FTIToken(token).mint(_beneficiary, mintTokens.mul(referralPercent).div(100));\n', '        }\n', '    }\n', '\n', '    function addReferral(address _beneficiary, uint256 _weiAmount) internal {\n', '        if (_weiAmount > referralMinimum) {\n', '            ReferalUser storage r = referralAddresses[_beneficiary];\n', '            if (r.amountWEI > 0 ) {\n', '                r.amountWEI += _weiAmount;\n', '            }\n', '            else {\n', '                referralAddresses[_beneficiary] = ReferalUser(0, 0, _weiAmount, 0);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '        if (msg.data.length == 20) {\n', '            address ref = bytesToAddress(msg.data);\n', '            processReferral(ref, _beneficiary, _weiAmount);\n', '        }\n', '\n', '        addReferral(_beneficiary, _weiAmount);\n', '\n', '        uint8 index = indexSuperInvestor(_weiAmount);\n', '        if (index > 0 && globalInvestor[index].length < maxGlobInvestor) {\n', '            bool found = false;\n', '            for (uint8 iter = 0; iter < globalInvestor[index].length; iter++) {\n', '                if (globalInvestor[index][iter] == _beneficiary) {\n', '                    found = true;\n', '                }\n', '            }\n', '            if (!found) { \n', '                globalInvestor[index].push(_beneficiary);\n', '            }\n', '        }\n', '    }\n', '\n', '    function referalCount (address addr) public view returns(uint64 len) {\n', '        len = referralAddresses[addr].numReferrals;\n', '    } \n', '\n', '    function referalAddrByNum (address ref_owner, uint32 num) public view returns(address addr) {\n', '        addr = referralAddresses[ref_owner].paysUniq[num];\n', '    } \n', '\n', '    function referalPayCount (address addr) public view returns(uint64 len) {\n', '        len = referralAddresses[addr].paysCount;\n', '    } \n', '\n', '    function referalPayByNum (address ref_owner, uint32 num) public view returns(address addr, uint256 amount) {\n', '        addr = referralAddresses[ref_owner].pays[num].payer;\n', '        amount = referralAddresses[ref_owner].pays[num].amount;\n', '    } \n', '\n', '    function addBonusPeriod (uint64 from, uint64 to, uint256 min_amount, uint8 bonus, uint256 max_amount, uint8 index_glob_inv) public onlyOwner {\n', '        bonus_periods.push(BonusPeriod(from, to, min_amount, max_amount, bonus, index_glob_inv));\n', '    }\n', '\n', '    function getBonusRate (uint256 amount) public constant returns(uint8) {\n', '        for (uint i = 0; i < bonus_periods.length; i++) {\n', '            BonusPeriod storage bonus_period = bonus_periods[i];\n', '            if (bonus_period.from <= now && bonus_period.to > now && bonus_period.min_amount <= amount && bonus_period.max_amount > amount) {\n', '                return bonus_period.bonus;\n', '            } \n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function indexSuperInvestor (uint256 amount) public view returns(uint8) {\n', '        for (uint8 i = 0; i < bonus_periods.length; i++) {\n', '            BonusPeriod storage bonus_period = bonus_periods[i];\n', '            if (bonus_period.from <= now && bonus_period.to > now && bonus_period.min_amount <= amount && bonus_period.max_amount > amount) {\n', '                return bonus_period.index_global_investor;\n', '            } \n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint8 bonusPercent = 100 + getBonusRate(_weiAmount);\n', '        uint256 amountTokens = _weiAmount.mul(rate).mul(bonusPercent).div(100);\n', '        return amountTokens;\n', '    }\n', '\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        super._processPurchase(_beneficiary, _tokenAmount);\n', '        FTIToken(token).mint(wallet, _tokenAmount.mul(additionalTokenRate).div(100));\n', '    }\n', '\n', '    function closeManualyMining() public onlyOwner() {\n', '        openingManualyMining = false;\n', '    }\n', '\n', '    function manualyMintTokens(uint256 _weiAmount, address _beneficiary, uint256 mintTokens) public onlyOwner() onlyOpeningManualyMinig() {\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '        require(mintTokens != 0);\n', '        weiRaised = weiRaised.add(_weiAmount);\n', '        _processPurchase(_beneficiary, mintTokens);\n', '        emit TokenPurchase(\n', '            msg.sender,\n', '            _beneficiary,\n', '            _weiAmount,\n', '            mintTokens\n', '        );\n', '        addReferral(_beneficiary, _weiAmount);\n', '    }\n', '\n', '    function makeOptions(uint256 _weiAmount, address _recipient, uint256 optionTokens) public onlyOwner() {\n', '        require(!hasClosed());\n', '        require(_recipient != address(0));\n', '        require(_weiAmount != 0);\n', '        require(optionTokens != 0);\n', '        weiRaised = weiRaised.add(_weiAmount);\n', '        _processPurchase(_recipient, optionTokens);\n', '        emit TokenPurchase(\n', '            msg.sender,\n', '            _recipient,\n', '            _weiAmount,\n', '            optionTokens\n', '        );\n', '        FTIToken(token).storeOptions(_recipient, _weiAmount);\n', '        addReferral(_recipient, _weiAmount);\n', '    }\n', '\n', '\n', '}']
