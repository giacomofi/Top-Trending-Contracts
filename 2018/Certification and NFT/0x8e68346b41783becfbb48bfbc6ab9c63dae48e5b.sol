['pragma solidity 0.4.21;\n', '\n', 'contract ERC20Interface {\n', '    function transfer(address _to, uint _value) public returns (bool) {}\n', '}\n', '\n', 'contract WhitelistInterface {\n', '\n', '    modifier onlyAdmins() {\n', '        require(isAdmin(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function register(address[] newUsers) public onlyAdmins {}\n', '  \n', '    function isAdmin(address _admin) public view returns(bool) {}\n', '\n', '}\n', '\n', 'contract NecFunnel {\n', '    \n', '    ERC20Interface token = ERC20Interface(0xCc80C051057B774cD75067Dc48f8987C4Eb97A5e);\n', '    WhitelistInterface list = WhitelistInterface(0x0E55c54249F25f70D519b7Fb1c20e3331e7Ba76d);\n', '\n', '    modifier onlyAdmins() {\n', '        require(list.isAdmin(msg.sender));\n', '        _;\n', '    }\n', '  \n', '\tevent PaymentFailure(\n', '\t\taddress payee,\n', '\t\tuint value\n', '\t);\n', '\n', '\tfunction dropNectar(address[] receivers, uint[] values) public onlyAdmins {\n', '\t    list.register(receivers);\n', '\t    for (uint i = 0; i < receivers.length; i++){\n', '\t        if (!token.transfer(receivers[i],values[i])) {\n', '\t            emit PaymentFailure(receivers[i], values[i]);\n', '\t        }\n', '\t    }\n', '\t}\n', '}']
['pragma solidity 0.4.21;\n', '\n', 'contract ERC20Interface {\n', '    function transfer(address _to, uint _value) public returns (bool) {}\n', '}\n', '\n', 'contract WhitelistInterface {\n', '\n', '    modifier onlyAdmins() {\n', '        require(isAdmin(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function register(address[] newUsers) public onlyAdmins {}\n', '  \n', '    function isAdmin(address _admin) public view returns(bool) {}\n', '\n', '}\n', '\n', 'contract NecFunnel {\n', '    \n', '    ERC20Interface token = ERC20Interface(0xCc80C051057B774cD75067Dc48f8987C4Eb97A5e);\n', '    WhitelistInterface list = WhitelistInterface(0x0E55c54249F25f70D519b7Fb1c20e3331e7Ba76d);\n', '\n', '    modifier onlyAdmins() {\n', '        require(list.isAdmin(msg.sender));\n', '        _;\n', '    }\n', '  \n', '\tevent PaymentFailure(\n', '\t\taddress payee,\n', '\t\tuint value\n', '\t);\n', '\n', '\tfunction dropNectar(address[] receivers, uint[] values) public onlyAdmins {\n', '\t    list.register(receivers);\n', '\t    for (uint i = 0; i < receivers.length; i++){\n', '\t        if (!token.transfer(receivers[i],values[i])) {\n', '\t            emit PaymentFailure(receivers[i], values[i]);\n', '\t        }\n', '\t    }\n', '\t}\n', '}']
