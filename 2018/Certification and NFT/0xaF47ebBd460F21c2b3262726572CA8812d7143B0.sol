['/*\n', ' * Safe Math Smart Contract.  Copyright © 2016–2017 by ABDK Consulting.\n', ' * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\n', ' */\n', 'pragma solidity ^0.4.20;\n', '\n', '/**\n', ' * Provides methods to safely add, subtract and multiply uint256 numbers.\n', ' */\n', 'contract SafeMath {\n', '  uint256 constant private MAX_UINT256 =\n', '    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '  /**\n', '   * Add two uint256 values, throw in case of overflow.\n', '   *\n', '   * @param x first value to add\n', '   * @param y second value to add\n', '   * @return x + y\n', '   */\n', '  function safeAdd (uint256 x, uint256 y)\n', '  pure internal\n', '  returns (uint256 z) {\n', '    assert (x <= MAX_UINT256 - y);\n', '    return x + y;\n', '  }\n', '\n', '  /**\n', '   * Subtract one uint256 value from another, throw in case of underflow.\n', '   *\n', '   * @param x value to subtract from\n', '   * @param y value to subtract\n', '   * @return x - y\n', '   */\n', '  function safeSub (uint256 x, uint256 y)\n', '  pure internal\n', '  returns (uint256 z) {\n', '    assert (x >= y);\n', '    return x - y;\n', '  }\n', '\n', '  /**\n', '   * Multiply two uint256 values, throw in case of overflow.\n', '   *\n', '   * @param x first value to multiply\n', '   * @param y second value to multiply\n', '   * @return x * y\n', '   */\n', '  function safeMul (uint256 x, uint256 y)\n', '  pure internal\n', '  returns (uint256 z) {\n', '    if (y == 0) return 0; // Prevent division by zero at the next line\n', '    assert (x <= MAX_UINT256 / y);\n', '    return x * y;\n', '  }\n', '}\n', '/*\n', ' * EIP-20 Standard Token Smart Contract Interface.\n', ' * Copyright © 2016–2018 by ABDK Consulting.\n', ' * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\n', ' */\n', '\n', '/**\n', ' * ERC-20 standard token interface, as defined\n', ' * <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md">here</a>.\n', ' */\n', 'contract Token {\n', '  /**\n', '   * Get total number of tokens in circulation.\n', '   *\n', '   * @return total number of tokens in circulation\n', '   */\n', '  function totalSupply () public view returns (uint256 supply);\n', '\n', '  /**\n', '   * Get number of tokens currently belonging to given owner.\n', '   *\n', '   * @param _owner address to get number of tokens currently belonging to the\n', '   *        owner of\n', '   * @return number of tokens currently belonging to the owner of given address\n', '   */\n', '  function balanceOf (address _owner) public view returns (uint256 balance);\n', '\n', '  /**\n', '   * Transfer given number of tokens from message sender to given recipient.\n', '   *\n', '   * @param _to address to transfer tokens to the owner of\n', '   * @param _value number of tokens to transfer to the owner of given address\n', '   * @return true if tokens were transferred successfully, false otherwise\n', '   */\n', '  function transfer (address _to, uint256 _value)\n', '  public returns (bool success);\n', '\n', '  /**\n', '   * Transfer given number of tokens from given owner to given recipient.\n', '   *\n', '   * @param _from address to transfer tokens from the owner of\n', '   * @param _to address to transfer tokens to the owner of\n', '   * @param _value number of tokens to transfer from given owner to given\n', '   *        recipient\n', '   * @return true if tokens were transferred successfully, false otherwise\n', '   */\n', '  function transferFrom (address _from, address _to, uint256 _value)\n', '  public returns (bool success);\n', '\n', '  /**\n', '   * Allow given spender to transfer given number of tokens from message sender.\n', '   *\n', '   * @param _spender address to allow the owner of to transfer tokens from\n', '   *        message sender\n', '   * @param _value number of tokens to allow to transfer\n', '   * @return true if token transfer was successfully approved, false otherwise\n', '   */\n', '  function approve (address _spender, uint256 _value)\n', '  public returns (bool success);\n', '\n', '  /**\n', '   * Tell how many tokens given spender is currently allowed to transfer from\n', '   * given owner.\n', '   *\n', '   * @param _owner address to get number of tokens allowed to be transferred\n', '   *        from the owner of\n', '   * @param _spender address to get number of tokens allowed to be transferred\n', '   *        by the owner of\n', '   * @return number of tokens given spender is currently allowed to transfer\n', '   *         from given owner\n', '   */\n', '  function allowance (address _owner, address _spender)\n', '  public view returns (uint256 remaining);\n', '\n', '  /**\n', '   * Logged when tokens were transferred from one owner to another.\n', '   *\n', '   * @param _from address of the owner, tokens were transferred from\n', '   * @param _to address of the owner, tokens were transferred to\n', '   * @param _value number of tokens transferred\n', '   */\n', '  event Transfer (address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  /**\n', '   * Logged when owner approved his tokens to be transferred by some spender.\n', '   *\n', '   * @param _owner owner who approved his tokens to be transferred\n', '   * @param _spender spender who were allowed to transfer the tokens belonging\n', '   *        to the owner\n', '   * @param _value number of tokens belonging to the owner, approved to be\n', '   *        transferred by the spender\n', '   */\n', '  event Approval (\n', '    address indexed _owner, address indexed _spender, uint256 _value);\n', '}/*\n', ' * Address Set Smart Contract Interface.\n', ' * Copyright © 2017–2018 by ABDK Consulting.\n', ' * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\n', ' */\n', '\n', '/**\n', ' * Address Set smart contract interface.\n', ' */\n', 'contract AddressSet {\n', '  /**\n', '   * Check whether address set contains given address.\n', '   *\n', '   * @param _address address to check\n', '   * @return true if address set contains given address, false otherwise\n', '   */\n', '  function contains (address _address) public view returns (bool);\n', '}\n', '/*\n', ' * Abstract Token Smart Contract.  Copyright © 2017 by ABDK Consulting.\n', ' * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\n', ' */\n', '\n', '/**\n', ' * Abstract Token Smart Contract that could be used as a base contract for\n', ' * ERC-20 token contracts.\n', ' */\n', 'contract AbstractToken is Token, SafeMath {\n', '  /**\n', '   * Create new Abstract Token contract.\n', '   */\n', '  function AbstractToken () public {\n', '    // Do nothing\n', '  }\n', '\n', '  /**\n', '   * Get number of tokens currently belonging to given owner.\n', '   *\n', '   * @param _owner address to get number of tokens currently belonging to the\n', '   *        owner of\n', '   * @return number of tokens currently belonging to the owner of given address\n', '   */\n', '  function balanceOf (address _owner) public view returns (uint256 balance) {\n', '    return accounts [_owner];\n', '  }\n', '\n', '  /**\n', '   * Transfer given number of tokens from message sender to given recipient.\n', '   *\n', '   * @param _to address to transfer tokens to the owner of\n', '   * @param _value number of tokens to transfer to the owner of given address\n', '   * @return true if tokens were transferred successfully, false otherwise\n', '   */\n', '  function transfer (address _to, uint256 _value)\n', '  public returns (bool success) {\n', '    uint256 fromBalance = accounts [msg.sender];\n', '    if (fromBalance < _value) return false;\n', '    if (_value > 0 && msg.sender != _to) {\n', '      accounts [msg.sender] = safeSub (fromBalance, _value);\n', '      accounts [_to] = safeAdd (accounts [_to], _value);\n', '    }\n', '    Transfer (msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * Transfer given number of tokens from given owner to given recipient.\n', '   *\n', '   * @param _from address to transfer tokens from the owner of\n', '   * @param _to address to transfer tokens to the owner of\n', '   * @param _value number of tokens to transfer from given owner to given\n', '   *        recipient\n', '   * @return true if tokens were transferred successfully, false otherwise\n', '   */\n', '  function transferFrom (address _from, address _to, uint256 _value)\n', '  public returns (bool success) {\n', '    uint256 spenderAllowance = allowances [_from][msg.sender];\n', '    if (spenderAllowance < _value) return false;\n', '    uint256 fromBalance = accounts [_from];\n', '    if (fromBalance < _value) return false;\n', '\n', '    allowances [_from][msg.sender] =\n', '      safeSub (spenderAllowance, _value);\n', '\n', '    if (_value > 0 && _from != _to) {\n', '      accounts [_from] = safeSub (fromBalance, _value);\n', '      accounts [_to] = safeAdd (accounts [_to], _value);\n', '    }\n', '    Transfer (_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * Allow given spender to transfer given number of tokens from message sender.\n', '   *\n', '   * @param _spender address to allow the owner of to transfer tokens from\n', '   *        message sender\n', '   * @param _value number of tokens to allow to transfer\n', '   * @return true if token transfer was successfully approved, false otherwise\n', '   */\n', '  function approve (address _spender, uint256 _value)\n', '  public returns (bool success) {\n', '    allowances [msg.sender][_spender] = _value;\n', '    Approval (msg.sender, _spender, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * Tell how many tokens given spender is currently allowed to transfer from\n', '   * given owner.\n', '   *\n', '   * @param _owner address to get number of tokens allowed to be transferred\n', '   *        from the owner of\n', '   * @param _spender address to get number of tokens allowed to be transferred\n', '   *        by the owner of\n', '   * @return number of tokens given spender is currently allowed to transfer\n', '   *         from given owner\n', '   */\n', '  function allowance (address _owner, address _spender)\n', '  public view returns (uint256 remaining) {\n', '    return allowances [_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * Mapping from addresses of token holders to the numbers of tokens belonging\n', '   * to these token holders.\n', '   */\n', '  mapping (address => uint256) internal accounts;\n', '\n', '  /**\n', '   * Mapping from addresses of token holders to the mapping of addresses of\n', '   * spenders to the allowances set by these token holders to these spenders.\n', '   */\n', '  mapping (address => mapping (address => uint256)) internal allowances;\n', '}\n', '/*\n', ' * Abstract Virtual Token Smart Contract.\n', ' * Copyright © 2017–2018 by ABDK Consulting.\n', ' * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\n', ' */\n', '\n', '\n', '/**\n', ' * Abstract Token Smart Contract that could be used as a base contract for\n', ' * ERC-20 token contracts supporting virtual balance.\n', ' */\n', 'contract AbstractVirtualToken is AbstractToken {\n', '  /**\n', '   * Maximum number of real (i.e. non-virtual) tokens in circulation (2^255-1).\n', '   */\n', '  uint256 constant MAXIMUM_TOKENS_COUNT =\n', '    0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '  /**\n', '   * Mask used to extract real balance of an account (2^255-1).\n', '   */\n', '  uint256 constant BALANCE_MASK =\n', '    0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '  /**\n', '   * Mask used to extract "materialized" flag of an account (2^255).\n', '   */\n', '  uint256 constant MATERIALIZED_FLAG_MASK =\n', '    0x8000000000000000000000000000000000000000000000000000000000000000;\n', '\n', '  /**\n', '   * Create new Abstract Virtual Token contract.\n', '   */\n', '  function AbstractVirtualToken () public AbstractToken () {\n', '    // Do nothing\n', '  }\n', '\n', '  /**\n', '   * Get total number of tokens in circulation.\n', '   *\n', '   * @return total number of tokens in circulation\n', '   */\n', '  function totalSupply () public view returns (uint256 supply) {\n', '    return tokensCount;\n', '  }\n', '\n', '  /**\n', '   * Get number of tokens currently belonging to given owner.\n', '   *\n', '   * @param _owner address to get number of tokens currently belonging to the\n', '   *        owner of\n', '   * @return number of tokens currently belonging to the owner of given address\n', '   */\n', '  function balanceOf (address _owner) public view returns (uint256 balance) {\n', '    return safeAdd (\n', '      accounts [_owner] & BALANCE_MASK, getVirtualBalance (_owner));\n', '  }\n', '\n', '  /**\n', '   * Transfer given number of tokens from message sender to given recipient.\n', '   *\n', '   * @param _to address to transfer tokens to the owner of\n', '   * @param _value number of tokens to transfer to the owner of given address\n', '   * @return true if tokens were transferred successfully, false otherwise\n', '   */\n', '  function transfer (address _to, uint256 _value)\n', '  public returns (bool success) {\n', '    if (_value > balanceOf (msg.sender)) return false;\n', '    else {\n', '      materializeBalanceIfNeeded (msg.sender, _value);\n', '      return AbstractToken.transfer (_to, _value);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Transfer given number of tokens from given owner to given recipient.\n', '   *\n', '   * @param _from address to transfer tokens from the owner of\n', '   * @param _to address to transfer tokens to the owner of\n', '   * @param _value number of tokens to transfer from given owner to given\n', '   *        recipient\n', '   * @return true if tokens were transferred successfully, false otherwise\n', '   */\n', '  function transferFrom (address _from, address _to, uint256 _value)\n', '  public returns (bool success) {\n', '    if (_value > allowance (_from, msg.sender)) return false;\n', '    if (_value > balanceOf (_from)) return false;\n', '    else {\n', '      materializeBalanceIfNeeded (_from, _value);\n', '      return AbstractToken.transferFrom (_from, _to, _value);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Get virtual balance of the owner of given address.\n', '   *\n', '   * @param _owner address to get virtual balance for the owner of\n', '   * @return virtual balance of the owner of given address\n', '   */\n', '  function virtualBalanceOf (address _owner)\n', '  internal view returns (uint256 _virtualBalance);\n', '\n', '  /**\n', '   * Calculate virtual balance of the owner of given address taking into account\n', '   * materialized flag and total number of real tokens already in circulation.\n', '   */\n', '  function getVirtualBalance (address _owner)\n', '  private view returns (uint256 _virtualBalance) {\n', '    if (accounts [_owner] & MATERIALIZED_FLAG_MASK != 0) return 0;\n', '    else {\n', '      _virtualBalance = virtualBalanceOf (_owner);\n', '      uint256 maxVirtualBalance = safeSub (MAXIMUM_TOKENS_COUNT, tokensCount);\n', '      if (_virtualBalance > maxVirtualBalance)\n', '        _virtualBalance = maxVirtualBalance;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Materialize virtual balance of the owner of given address if this will help\n', '   * to transfer given number of tokens from it.\n', '   *\n', '   * @param _owner address to materialize virtual balance of\n', '   * @param _value number of tokens to be transferred\n', '   */\n', '  function materializeBalanceIfNeeded (address _owner, uint256 _value) private {\n', '    uint256 storedBalance = accounts [_owner];\n', '    if (storedBalance & MATERIALIZED_FLAG_MASK == 0) {\n', '      // Virtual balance is not materialized yet\n', '      if (_value > storedBalance) {\n', '        // Real balance is not enough\n', '        uint256 virtualBalance = getVirtualBalance (_owner);\n', '        require (safeSub (_value, storedBalance) <= virtualBalance);\n', '        accounts [_owner] = MATERIALIZED_FLAG_MASK |\n', '          safeAdd (storedBalance, virtualBalance);\n', '        tokensCount = safeAdd (tokensCount, virtualBalance);\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Number of real (i.e. non-virtual) tokens in circulation.\n', '   */\n', '  uint256 internal tokensCount;\n', '}\n', '/*\n', ' * Module Promo Token Smart Contract.  Copyright © 2018 by ABDK Consulting.\n', ' * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\n', ' */\n', '\n', '/**\n', ' * Module Promo Tokem Smart Contract.\n', ' */\n', 'contract ModulePromoToken is AbstractVirtualToken {\n', '  /**\n', '   * Number of virtual tokens to assign to the owners of addresses from given\n', '   * address set.\n', '   */\n', '  uint256 private constant VIRTUAL_COUNT = 5;\n', '  \n', '  /**\n', '   * Number of tokens to give to the contract deployer for future distribution.\n', '   */\n', '  uint256 private constant INITIAL_TOKENS = 10e6;\n', '\n', '  /**\n', '   * Create ModulePromoToken smart contract with given address set.\n', '   *\n', '   * @param _addressSet address set to use\n', '   */\n', '  function ModulePromoToken (AddressSet _addressSet)\n', '  public AbstractVirtualToken () {\n', '    owner = msg.sender;\n', '\taccounts[owner] = INITIAL_TOKENS;\n', '    addressSet = _addressSet;\n', '  }\n', '\n', '  /**\n', '   * Get name of this token.\n', '   *\n', '   * @return name of this token\n', '   */\n', '  function name () public pure returns (string) {\n', '    return "Promodl";\n', '  }\n', '\n', '  /**\n', '   * Get symbol of this token.\n', '   *\n', '   * @return symbol of this token\n', '   */\n', '  function symbol () public pure returns (string) {\n', '    return "PMOD";\n', '  }\n', '\n', '  /**\n', '   * Get number of decimals for this token.\n', '   *\n', '   * @return number of decimals for this token\n', '   */\n', '  function decimals () public pure returns (uint8) {\n', '    return 0;\n', '  }\n', '\n', '  /**\n', '   * Notify owners about their virtual balances.\n', '   *\n', '   * @param _owners addresses of the owners to be notified\n', '   */\n', '  function massNotify (address [] _owners) public {\n', '    require (msg.sender == owner);\n', '    uint256 count = _owners.length;\n', '    for (uint256 i = 0; i < count; i++)\n', '      Transfer (address (0), _owners [i], VIRTUAL_COUNT);\n', '  }\n', '\n', '  /**\n', '   * Kill this smart contract.\n', '   */\n', '  function kill () public {\n', '    require (msg.sender == owner);\n', '    selfdestruct (owner);\n', '  }\n', '\n', '  /**\n', '   * Change owner of the smart contract.\n', '   *\n', '   * @param _owner address of a new owner of the smart contract\n', '   */\n', '  function changeOwner (address _owner) public {\n', '    require (msg.sender == owner);\n', '\n', '    owner = _owner;\n', '  }\n', '\n', '  /**\n', '   * Get virtual balance of the owner of given address.\n', '   *\n', '   * @param _owner address to get virtual balance for the owner of\n', '   * @return virtual balance of the owner of given address\n', '   */\n', '  function virtualBalanceOf (address _owner)\n', '  internal view returns (uint256 _virtualBalance) {\n', '    return addressSet.contains (_owner) ? VIRTUAL_COUNT : 0;\n', '  }\n', '\n', '  /**\n', '   * Address of the owner of this smart contract.\n', '   */\n', '  address internal owner;\n', '\n', '  /**\n', '   * Address set of addresses that are eligible for initial balance.\n', '   */\n', '  AddressSet internal addressSet;\n', '}']