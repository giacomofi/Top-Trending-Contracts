['// ERC Token Standard #20 Interface\n', 'interface ERC20 {\n', '    // Get the total token supply\n', '    function totalSupply() public constant returns (uint _totalSupply);\n', '    // Get the account balance of another account with address _owner\n', '    function balanceOf(address _owner) public constant returns (uint balance);\n', '    // Send _value amount of tokens to address _to\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    // Send _value amount of tokens from address _from to address _to\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    // this function is required for some DEX functionality\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    // Returns the amount which _spender is still allowed to withdraw from _owner\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining);\n', '    // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract OnePay is ERC20 {\n', '\n', '    // Ability to call SafeMath functions on uints.\n', '    using SafeMath for uint256;\n', '\n', '    // Token basic information\n', '    string public constant name = "OnePay";\n', '    string public constant symbol = "1PAY";\n', '    uint256 public constant decimals = 18;\n', '\n', '    // Director address\n', '    address public director;\n', '\n', '    // Balances for each account\n', '    mapping(address => uint256) balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    // Public sale control\n', '    bool public saleClosed;\n', '    uint256 public currentSalePhase;\n', '    uint256 public SALE = 9090;  // Pre-Sale tokens per eth\n', '    uint256 public PRE_SALE = 16667; // Sale tokens per eth\n', '\n', '    // Total supply of tokens\n', '    uint256 public totalSupply;\n', '\n', '    // Total funds received\n', '    uint256 public totalReceived;\n', '\n', '    // Total amount of coins minted\n', '    uint256 public mintedCoins;\n', '\n', '    // Hard Cap for the sale\n', '    uint256 public hardCapSale;\n', '\n', '    // Token Cap\n', '    uint256 public tokenCap;\n', '\n', '    /**\n', '      * Functions with this modifier can only be executed by the owner\n', '      */\n', '    modifier onlyDirector()\n', '    {\n', '        assert(msg.sender == director);\n', '        _;\n', '    }\n', '\n', '    /**\n', '      * Constructor\n', '      */\n', '    function OnePay() public\n', '    {\n', '        // Create the initial director\n', '        director = msg.sender;\n', '\n', '        // setting the hardCap for sale\n', '        hardCapSale = 100000000 * 10 ** uint256(decimals);\n', '\n', '        // token Cap\n', '        tokenCap = 500000000 * 10 ** uint256(decimals);\n', '\n', '        // Set the total supply\n', '        totalSupply = 0;\n', '\n', '        // Initial sale phase is presale\n', '        currentSalePhase = PRE_SALE;\n', '\n', '        // total coins minted so far\n', '        mintedCoins = 0;\n', '\n', '        // total funds raised\n', '        totalReceived = 0;\n', '\n', '        saleClosed = true;\n', '    }\n', '\n', '    /**\n', '      * Fallback function to be invoked when a value is sent without a function call.\n', '      */\n', '    function() public payable\n', '    {\n', '        // Make sure the sale is active\n', '        require(!saleClosed);\n', '\n', '        // Minimum amount is 0.02 eth\n', '        require(msg.value >= 0.02 ether);\n', '\n', '        // If 1400 eth is received switch the sale price\n', '        if (totalReceived >= 1500 ether) {\n', '            currentSalePhase = SALE;\n', '        }\n', '\n', '        // Calculate tokens to mint based on the "current sale phase"\n', '        uint256 amount = msg.value.mul(currentSalePhase);\n', '\n', "        // Make sure that mintedCoins don't exceed the hardcap sale\n", '        require(mintedCoins + amount <= hardCapSale);\n', '\n', '        // Check for totalSupply max amount\n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '\n', '        // Increase the number of minted coins\n', '        mintedCoins += amount;\n', '\n', '        //Increase totalSupply by amount\n', '        totalSupply += amount;\n', '\n', '        // Track of total value received\n', '        totalReceived += msg.value;\n', '\n', '        Transfer(this, msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '      * Get Tokens for the company\n', '      */\n', '    function getCompanyToken(uint256 amount) public onlyDirector returns (bool success)\n', '    {\n', '        amount = amount * 10 ** uint256(decimals);\n', '\n', '        require((totalSupply + amount) <= tokenCap);\n', '\n', '        balances[director] = amount;\n', '\n', '        totalSupply += amount;\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '\t  * Lock the crowdsale\n', '\t  */\n', '    function closeSale() public onlyDirector returns (bool success)\n', '    {\n', '        saleClosed = true;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '      * Unlock the crowd sale.\n', '      */\n', '    function openSale() public onlyDirector returns (bool success)\n', '    {\n', '        saleClosed = false;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '      * Set the price to pre-sale\n', '      */\n', '    function setPriceToPreSale() public onlyDirector returns (bool success)\n', '    {\n', '        currentSalePhase = PRE_SALE;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '      * Set the price to reg sale.\n', '      */\n', '    function setPriceToRegSale() public onlyDirector returns (bool success)\n', '    {\n', '        currentSalePhase = SALE;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '      * Withdraw funds from the contract\n', '      */\n', '    function withdrawFunds() public onlyDirector\n', '    {\n', '        director.transfer(this.balance);\n', '    }\n', '\n', '    /**\n', '      * Transfers the director to a new address\n', '      */\n', '    function transferDirector(address newDirector) public onlyDirector\n', '    {\n', '        director = newDirector;\n', '    }\n', '\n', '    /**\n', '      * Returns total\n', '      */\n', '    function totalSupply() public view returns (uint256)\n', '    {\n', '        return totalSupply;\n', '    }\n', '\n', '    /**\n', '      * Balance of a particular account\n', '      */\n', '    function balanceOf(address _owner) public constant returns (uint256)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', "      * Transfer balance from sender's account to receiver's account\n", '      */\n', '    function transfer(address _to, uint256 _value) public returns (bool success)\n', '    {\n', '        // Make sure the sender has enough value in their account\n', '        assert(balances[msg.sender] >= _value && _value > 0);\n', "        // Subtract value from sender's account\n", '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', "        // Add value to receiver's account\n", '        balances[_to] = balances[_to].add(_value);\n', '\n', '        // Log\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '      * Allow spender to spend the value amount on your behalf.\n', '      * If this function is called again it overwrites the current allowance with _value.\n', '      */\n', '    function approve(address _spender, uint256 _value) public returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '      * Spend value from a different account granted you have allowance to use the value amount.\n', '      * If this function is called again it overwrites the current allowance with _value.\n', '      */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)\n', '    {\n', '        assert(allowed[_from][msg.sender] >= _value && balances[_from] >= _value && _value > 0);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '      * Returns the amount which _spender is still allowed to withdraw from _owner\n', '      */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']