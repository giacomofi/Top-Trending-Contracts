['pragma solidity 0.4.23;\n', '/**\n', '* @title IADOWR TGE CONTRACT\n', '* @dev ERC-20 Token Standard Compliant Contract\n', '*/\n', '\n', '/**\n', ' * @title SafeMath by OpenZeppelin\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * Token contract interface for external use\n', ' */\n', 'contract token {\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public;\n', '\n', '\n', '}\n', '\n', '\n', '/**\n', '* @title DateTime contract\n', '* @dev This contract will return the unix value of any date\n', '*/\n', 'contract DateTime {\n', '\n', '    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public constant returns (uint timestamp);\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title manager\n', ' * @notice This contract have some manager-only functions\n', ' */\n', 'contract manager {\n', '    address public admin; //Admin address is public\n', '    \n', '    /**\n', '    * @dev This contructor takes the msg.sender as the first administer\n', '    */\n', '    constructor() internal {\n', '        admin = msg.sender; //Set initial admin to contract creator\n', '        emit Manager(admin);\n', '    }\n', '\n', '    /**\n', '    * @dev This modifier limits function execution to the admin\n', '    */\n', '    modifier onlyAdmin() { //A modifier to define admin-only functions\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice This function transfer the adminship of the contract to _newAdmin\n', '    * @param _newAdmin The new admin of the contract\n', '    */\n', '    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n', '        admin = _newAdmin;\n', '        emit TransferAdminship(admin);\n', '    }\n', '\n', '    /**\n', '    * @dev Log Events\n', '    */\n', '    event TransferAdminship(address newAdminister);\n', '    event Manager(address administer);\n', '\n', '}\n', '\n', 'contract IADTGE is manager {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    DateTime dateTimeContract = DateTime(0x1a6184CD4C5Bea62B0116de7962EE7315B7bcBce);//Main\n', '    \n', '    //This TGE contract have 2 states\n', '    enum State {\n', '        Ongoing,\n', '        Successful\n', '    }\n', '    //public variables\n', '    token public constant tokenReward = token(0xC1E2097d788d33701BA3Cc2773BF67155ec93FC4);\n', '    State public state = State.Ongoing; //Set initial stage\n', '    uint256 public startTime = dateTimeContract.toTimestamp(2018,4,30,7,0); //From Apr 30 00:00 (PST)\n', '    uint256 public deadline = dateTimeContract.toTimestamp(2018,5,31,6,59); //Until May 30 23:59 (PST)\n', '    uint256 public totalRaised; //eth in wei funded\n', '    uint256 public totalDistributed; //tokens distributed\n', '    uint256 public completedAt;\n', '    address public creator;\n', '    uint256[2] public rates = [6250,5556];//Base rate is 5000 IAD/ETH - 1st 15 days 20% discount/2nd 15 days 10% discount\n', '    string public version = &#39;1&#39;;\n', '\n', '    //events for log\n', '    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n', '    event LogBeneficiaryPaid(address _beneficiaryAddress);\n', '    event LogFundingSuccessful(uint _totalRaised);\n', '    event LogFunderInitialized(address _creator);\n', '    event LogContributorsPayout(address _addr, uint _amount);\n', '    \n', '    modifier notFinished() {\n', '        require(state != State.Successful);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice TGE constructor\n', '    */\n', '    constructor () public {\n', '        \n', '        creator = msg.sender;\n', '    \n', '        emit LogFunderInitialized(creator);\n', '    }\n', '\n', '    /**\n', '    * @notice contribution handler\n', '    */\n', '    function contribute() public notFinished payable {\n', '        require(now >= startTime);\n', '        uint256 tokenBought;\n', '\n', '        totalRaised = totalRaised.add(msg.value);\n', '\n', '        if (now < startTime.add(15 days)){\n', '\n', '            tokenBought = msg.value.mul(rates[0]);\n', '        \n', '        } else {\n', '\n', '            tokenBought = msg.value.mul(rates[1]);\n', '        \n', '        }\n', '\n', '        totalDistributed = totalDistributed.add(tokenBought);\n', '        \n', '        tokenReward.transfer(msg.sender, tokenBought);\n', '\n', '        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\n', '        emit LogContributorsPayout(msg.sender, tokenBought);\n', '        \n', '        checkIfFundingCompleteOrExpired();\n', '    }\n', '\n', '    /**\n', '    * @notice check status\n', '    */\n', '    function checkIfFundingCompleteOrExpired() public {\n', '\n', '        if(now > deadline){\n', '\n', '            state = State.Successful; //TGE becomes Successful\n', '            completedAt = now; //TGE end time\n', '\n', '            emit LogFundingSuccessful(totalRaised); //we log the finish\n', '            finished(); //and execute closure\n', '\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @notice closure handler\n', '    */\n', '    function finished() public { //When finished eth and tremaining tokens are transfered to creator\n', '\n', '        require(state == State.Successful);\n', '        uint256 remanent = tokenReward.balanceOf(this);\n', '\n', '        require(creator.send(address(this).balance));\n', '        tokenReward.transfer(creator,remanent);\n', '\n', '        emit LogBeneficiaryPaid(creator);\n', '        emit LogContributorsPayout(creator, remanent);\n', '\n', '    }\n', '\n', '    /**\n', '    * @notice Function to claim any token stuck on contract at any time\n', '    */\n', '    function claimTokens(token _address) onlyAdmin public{\n', '        require(state == State.Successful); //Only when sale finish\n', '\n', '        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\n', '        _address.transfer(admin,remainder); //Transfer tokens to admin\n', '        \n', '    }\n', '\n', '    /*\n', '    * @dev direct payments handler\n', '    */\n', '\n', '    function () public payable {\n', '        \n', '        contribute();\n', '\n', '    }\n', '}']
['pragma solidity 0.4.23;\n', '/**\n', '* @title IADOWR TGE CONTRACT\n', '* @dev ERC-20 Token Standard Compliant Contract\n', '*/\n', '\n', '/**\n', ' * @title SafeMath by OpenZeppelin\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * Token contract interface for external use\n', ' */\n', 'contract token {\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public;\n', '\n', '\n', '}\n', '\n', '\n', '/**\n', '* @title DateTime contract\n', '* @dev This contract will return the unix value of any date\n', '*/\n', 'contract DateTime {\n', '\n', '    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public constant returns (uint timestamp);\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title manager\n', ' * @notice This contract have some manager-only functions\n', ' */\n', 'contract manager {\n', '    address public admin; //Admin address is public\n', '    \n', '    /**\n', '    * @dev This contructor takes the msg.sender as the first administer\n', '    */\n', '    constructor() internal {\n', '        admin = msg.sender; //Set initial admin to contract creator\n', '        emit Manager(admin);\n', '    }\n', '\n', '    /**\n', '    * @dev This modifier limits function execution to the admin\n', '    */\n', '    modifier onlyAdmin() { //A modifier to define admin-only functions\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice This function transfer the adminship of the contract to _newAdmin\n', '    * @param _newAdmin The new admin of the contract\n', '    */\n', '    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n', '        admin = _newAdmin;\n', '        emit TransferAdminship(admin);\n', '    }\n', '\n', '    /**\n', '    * @dev Log Events\n', '    */\n', '    event TransferAdminship(address newAdminister);\n', '    event Manager(address administer);\n', '\n', '}\n', '\n', 'contract IADTGE is manager {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    DateTime dateTimeContract = DateTime(0x1a6184CD4C5Bea62B0116de7962EE7315B7bcBce);//Main\n', '    \n', '    //This TGE contract have 2 states\n', '    enum State {\n', '        Ongoing,\n', '        Successful\n', '    }\n', '    //public variables\n', '    token public constant tokenReward = token(0xC1E2097d788d33701BA3Cc2773BF67155ec93FC4);\n', '    State public state = State.Ongoing; //Set initial stage\n', '    uint256 public startTime = dateTimeContract.toTimestamp(2018,4,30,7,0); //From Apr 30 00:00 (PST)\n', '    uint256 public deadline = dateTimeContract.toTimestamp(2018,5,31,6,59); //Until May 30 23:59 (PST)\n', '    uint256 public totalRaised; //eth in wei funded\n', '    uint256 public totalDistributed; //tokens distributed\n', '    uint256 public completedAt;\n', '    address public creator;\n', '    uint256[2] public rates = [6250,5556];//Base rate is 5000 IAD/ETH - 1st 15 days 20% discount/2nd 15 days 10% discount\n', "    string public version = '1';\n", '\n', '    //events for log\n', '    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n', '    event LogBeneficiaryPaid(address _beneficiaryAddress);\n', '    event LogFundingSuccessful(uint _totalRaised);\n', '    event LogFunderInitialized(address _creator);\n', '    event LogContributorsPayout(address _addr, uint _amount);\n', '    \n', '    modifier notFinished() {\n', '        require(state != State.Successful);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice TGE constructor\n', '    */\n', '    constructor () public {\n', '        \n', '        creator = msg.sender;\n', '    \n', '        emit LogFunderInitialized(creator);\n', '    }\n', '\n', '    /**\n', '    * @notice contribution handler\n', '    */\n', '    function contribute() public notFinished payable {\n', '        require(now >= startTime);\n', '        uint256 tokenBought;\n', '\n', '        totalRaised = totalRaised.add(msg.value);\n', '\n', '        if (now < startTime.add(15 days)){\n', '\n', '            tokenBought = msg.value.mul(rates[0]);\n', '        \n', '        } else {\n', '\n', '            tokenBought = msg.value.mul(rates[1]);\n', '        \n', '        }\n', '\n', '        totalDistributed = totalDistributed.add(tokenBought);\n', '        \n', '        tokenReward.transfer(msg.sender, tokenBought);\n', '\n', '        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\n', '        emit LogContributorsPayout(msg.sender, tokenBought);\n', '        \n', '        checkIfFundingCompleteOrExpired();\n', '    }\n', '\n', '    /**\n', '    * @notice check status\n', '    */\n', '    function checkIfFundingCompleteOrExpired() public {\n', '\n', '        if(now > deadline){\n', '\n', '            state = State.Successful; //TGE becomes Successful\n', '            completedAt = now; //TGE end time\n', '\n', '            emit LogFundingSuccessful(totalRaised); //we log the finish\n', '            finished(); //and execute closure\n', '\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @notice closure handler\n', '    */\n', '    function finished() public { //When finished eth and tremaining tokens are transfered to creator\n', '\n', '        require(state == State.Successful);\n', '        uint256 remanent = tokenReward.balanceOf(this);\n', '\n', '        require(creator.send(address(this).balance));\n', '        tokenReward.transfer(creator,remanent);\n', '\n', '        emit LogBeneficiaryPaid(creator);\n', '        emit LogContributorsPayout(creator, remanent);\n', '\n', '    }\n', '\n', '    /**\n', '    * @notice Function to claim any token stuck on contract at any time\n', '    */\n', '    function claimTokens(token _address) onlyAdmin public{\n', '        require(state == State.Successful); //Only when sale finish\n', '\n', '        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\n', '        _address.transfer(admin,remainder); //Transfer tokens to admin\n', '        \n', '    }\n', '\n', '    /*\n', '    * @dev direct payments handler\n', '    */\n', '\n', '    function () public payable {\n', '        \n', '        contribute();\n', '\n', '    }\n', '}']
