['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface (only needed methods)\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title QWoodDAOTokenSale\n', ' * @dev The QWoodDAOTokenSale contract receive ether and other foreign tokens and exchange them to set tokens.\n', ' */\n', 'contract QWoodDAOTokenSale is Pausable {\n', '  using SafeMath for uint256;\n', '\n', '\n', '  // Represents data of foreign token which can be exchange to token\n', '  struct ReceivedToken {\n', '    // name of foreign token\n', '    string name;\n', '\n', '    // number of token units a buyer gets per foreign token unit\n', '    uint256 rate;\n', '\n', '    // amount of raised foreign tokens\n', '    uint256 raised;\n', '  }\n', '\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '  // So, if you are using a rate of 1 with a ERC20 token with 3 decimals called TOK\n', '  // 1 wei will give you 1 unit, or 0.001 TOK.\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  // Map from token address to token data\n', '  mapping (address => ReceivedToken) public receivedTokens;\n', '\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * Event for token purchase for token logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value foreign tokens units paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenForTokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * Event for change rate logging\n', '   * @param newRate new number of token units a buyer gets per wei\n', '   */\n', '  event ChangeRate(uint256 newRate);\n', '\n', '  /**\n', '   * Event for add received token logging\n', '   * @param tokenAddress address of added foreign token\n', '   * @param name name of added token\n', '   * @param rate number of token units a buyer gets per added foreign token unit\n', '   */\n', '  event AddReceivedToken(\n', '    address indexed tokenAddress,\n', '    string name,\n', '    uint256 rate\n', '  );\n', '\n', '  /**\n', '   * Event for remove received token logging\n', '   * @param tokenAddress address of removed foreign token\n', '   */\n', '  event RemoveReceivedToken(address indexed tokenAddress);\n', '\n', '  /**\n', '   * Event for set new received token rate logging\n', '   * @param tokenAddress address of foreign token\n', '   * @param newRate new number of token units a buyer gets per added foreign token unit\n', '   */\n', '  event SetReceivedTokenRate(\n', '    address indexed tokenAddress,\n', '    uint256 newRate\n', '  );\n', '\n', '  /**\n', '   * Event for send excess ether logging\n', '   * @param beneficiary who gets excess ether\n', '   * @param value excess weis\n', '   */\n', '  event SendEtherExcess(\n', '    address indexed beneficiary,\n', '    uint256 value\n', '  );\n', '\n', '  /**\n', '   * Event for send tokens excess logging\n', '   * @param beneficiary who gets tokens excess\n', '   * @param value excess token units\n', '   */\n', '  event SendTokensExcess(\n', '    address indexed beneficiary,\n', '    uint256 value\n', '  );\n', '\n', '  /**\n', '   * Event for logging received tokens from approveAndCall function\n', '   * @param from who send tokens\n', '   * @param amount amount of received purchased\n', '   * @param tokenAddress address of token contract\n', '   * @param extraData data attached to payment\n', '   */\n', '  event ReceivedTokens(\n', '    address indexed from,\n', '    uint256 amount,\n', '    address indexed tokenAddress,\n', '    bytes extraData\n', '  );\n', '\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor (\n', '    uint256 _rate,\n', '    address _wallet,\n', '    ERC20 _token\n', '  )\n', '    public\n', '  {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '\n', '  // -----------------------------------------\n', '  // External interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', ' * @dev fallback function ***DO NOT OVERRIDE***\n', ' */\n', '  function () whenNotPaused external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) whenNotPaused public payable {\n', '    require(_beneficiary != address(0));\n', '\n', '    uint256 weiAmount = msg.value;\n', '    require(weiAmount != 0);\n', '\n', '    uint256 tokenBalance = token.balanceOf(address(this));\n', '    require(tokenBalance > 0);\n', '\n', '    uint256 tokens = _getTokenAmount(address(0), weiAmount);\n', '\n', '    if (tokens > tokenBalance) {\n', '      tokens = tokenBalance;\n', '      weiAmount = _inverseGetTokenAmount(address(0), tokens);\n', '\n', '      uint256 senderExcess = msg.value.sub(weiAmount);\n', '      msg.sender.transfer(senderExcess);\n', '\n', '      emit SendEtherExcess(\n', '        msg.sender,\n', '        senderExcess\n', '      );\n', '    }\n', '\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Sets new rate.\n', '   * @param _newRate New number of token units a buyer gets per wei\n', '   */\n', '  function setRate(uint256 _newRate) onlyOwner external {\n', '    require(_newRate > 0);\n', '    rate = _newRate;\n', '\n', '    emit ChangeRate(_newRate);\n', '  }\n', '\n', '  /**\n', '   * @dev Set new wallet address.\n', '   * @param _newWallet New address where collected funds will be forwarded to\n', '   */\n', '  function setWallet(address _newWallet) onlyOwner external {\n', '    require(_newWallet != address(0));\n', '    wallet = _newWallet;\n', '  }\n', '\n', '  /**\n', '   * @dev Set new token address.\n', '   * @param _newToken New address of the token being sold\n', '   */\n', '  function setToken(ERC20 _newToken) onlyOwner external {\n', '    require(_newToken != address(0));\n', '    token = _newToken;\n', '  }\n', '\n', '  /**\n', '   * @dev Withdraws any tokens from this contract to wallet.\n', '   * @param _tokenContract The address of the foreign token\n', '   */\n', '  function withdrawTokens(ERC20 _tokenContract) onlyOwner external {\n', '    require(_tokenContract != address(0));\n', '\n', '    uint256 amount = _tokenContract.balanceOf(address(this));\n', '    _tokenContract.transfer(wallet, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Withdraws all ether from this contract to wallet.\n', '   */\n', '  function withdraw() onlyOwner external {\n', '    wallet.transfer(address(this).balance);\n', '  }\n', '\n', '  /**\n', '   * @dev Adds received foreign token.\n', '   * @param _tokenAddress Address of the foreign token being added\n', '   * @param _tokenName Name of the foreign token\n', '   * @param _tokenRate Number of token units a buyer gets per foreign token unit\n', '   */\n', '  function addReceivedToken(\n', '    ERC20 _tokenAddress,\n', '    string _tokenName,\n', '    uint256 _tokenRate\n', '  )\n', '    onlyOwner\n', '    external\n', '  {\n', '    require(_tokenAddress != address(0));\n', '    require(_tokenRate > 0);\n', '\n', '    ReceivedToken memory _token = ReceivedToken({\n', '      name: _tokenName,\n', '      rate: _tokenRate,\n', '      raised: 0\n', '    });\n', '\n', '    receivedTokens[_tokenAddress] = _token;\n', '\n', '    emit AddReceivedToken(\n', '      _tokenAddress,\n', '      _token.name,\n', '      _token.rate\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Removes received foreign token.\n', '   * @param _tokenAddress Address of the foreign token being removed\n', '   */\n', '  function removeReceivedToken(ERC20 _tokenAddress) onlyOwner external {\n', '    require(_tokenAddress != address(0));\n', '\n', '    delete receivedTokens[_tokenAddress];\n', '\n', '    emit RemoveReceivedToken(_tokenAddress);\n', '  }\n', '\n', '  /**\n', '   * @dev Sets new rate for received foreign token.\n', '   * @param _tokenAddress Address of the foreign token\n', '   * @param _newTokenRate New number of token units a buyer gets per foreign token unit\n', '   */\n', '  function setReceivedTokenRate(\n', '    ERC20 _tokenAddress,\n', '    uint256 _newTokenRate\n', '  )\n', '    onlyOwner\n', '    external\n', '  {\n', '    require(_tokenAddress != address(0));\n', '    require(receivedTokens[_tokenAddress].rate > 0);\n', '    require(_newTokenRate > 0);\n', '\n', '    receivedTokens[_tokenAddress].rate = _newTokenRate;\n', '\n', '    emit SetReceivedTokenRate(\n', '      _tokenAddress,\n', '      _newTokenRate\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Receives approved foreign tokens and exchange them to tokens.\n', '   * @param _from Address of foreign tokens sender\n', '   * @param _amount Amount of the foreign tokens\n', '   * @param _tokenAddress Address of the foreign token contract\n', '   * @param _extraData Data attached to payment\n', '   */\n', '  function receiveApproval(\n', '    address _from,\n', '    uint256 _amount,\n', '    address _tokenAddress,\n', '    bytes _extraData\n', '  )\n', '    whenNotPaused external\n', '  {\n', '\n', '    require(_from != address(0));\n', '    require(_tokenAddress != address(0));\n', '    require(receivedTokens[_tokenAddress].rate > 0); // check: token in receivedTokens\n', '    require(_amount > 0);\n', '\n', '    require(msg.sender == _tokenAddress);\n', '\n', '    emit ReceivedTokens(\n', '      _from,\n', '      _amount,\n', '      _tokenAddress,\n', '      _extraData\n', '    );\n', '\n', '    _exchangeTokens(ERC20(_tokenAddress), _from, _amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Deposits foreign token and exchange them to tokens.\n', '   * @param _tokenAddress Address of the foreign token\n', '   * @param _amount Amount of the foreign tokens\n', '   */\n', '  function depositToken(\n', '    ERC20 _tokenAddress,\n', '    uint256 _amount\n', '  )\n', '    whenNotPaused external\n', '  {\n', '    // Remember to call ERC20(address).approve(this, amount)\n', '    // or this contract will not be able to do the transfer on your behalf\n', '    require(_tokenAddress != address(0));\n', '\n', '    require(receivedTokens[_tokenAddress].rate > 0);\n', '    require(_amount > 0);\n', '\n', '    _exchangeTokens(_tokenAddress, msg.sender, _amount);\n', '  }\n', '\n', '\n', '  // -----------------------------------------\n', '  // Internal interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Exchanges foreign tokens to self token. Low-level exchange method.\n', '   * @param _tokenAddress Address of the foreign token contract\n', '   * @param _sender Sender address\n', '   * @param _amount Number of tokens for exchange\n', '   */\n', '  function _exchangeTokens(\n', '    ERC20 _tokenAddress,\n', '    address _sender,\n', '    uint256 _amount\n', '  )\n', '    internal\n', '  {\n', '    uint256 foreignTokenAmount = _amount;\n', '\n', '    require(_tokenAddress.transferFrom(_sender, address(this), foreignTokenAmount));\n', '\n', '    uint256 tokenBalance = token.balanceOf(address(this));\n', '    require(tokenBalance > 0);\n', '\n', '    uint256 tokens = _getTokenAmount(_tokenAddress, foreignTokenAmount);\n', '\n', '    if (tokens > tokenBalance) {\n', '      tokens = tokenBalance;\n', '      foreignTokenAmount = _inverseGetTokenAmount(_tokenAddress, tokens);\n', '\n', '      uint256 senderForeignTokenExcess = _amount.sub(foreignTokenAmount);\n', '      _tokenAddress.transfer(_sender, senderForeignTokenExcess);\n', '\n', '      emit SendTokensExcess(\n', '        _sender,\n', '        senderForeignTokenExcess\n', '      );\n', '    }\n', '\n', '    receivedTokens[_tokenAddress].raised = receivedTokens[_tokenAddress].raised.add(foreignTokenAmount);\n', '\n', '    _processPurchase(_sender, tokens);\n', '    emit TokenForTokenPurchase(\n', '      _sender,\n', '      _sender,\n', '      foreignTokenAmount,\n', '      tokens\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether or foreign token unit is converted to tokens.\n', '   * @param _tokenAddress Address of foreign token or 0 if ether to tokens\n', '   * @param _amount Value in wei or foreign token units to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _amount (wei or foreign token units)\n', '   */\n', '  function _getTokenAmount(address _tokenAddress, uint256 _amount)\n', '    internal view returns (uint256)\n', '  {\n', '    uint256 _rate;\n', '\n', '    if (_tokenAddress == address(0)) {\n', '      _rate = rate;\n', '    } else {\n', '      _rate = receivedTokens[_tokenAddress].rate;\n', '    }\n', '\n', '    return _amount.mul(_rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Get wei or foreign tokens amount. Inverse _getTokenAmount method.\n', '   */\n', '  function _inverseGetTokenAmount(address _tokenAddress, uint256 _tokenAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    uint256 _rate;\n', '\n', '    if (_tokenAddress == address(0)) {\n', '      _rate = rate;\n', '    } else {\n', '      _rate = receivedTokens[_tokenAddress].rate;\n', '    }\n', '\n', '    return _tokenAmount.div(_rate);\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface (only needed methods)\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title QWoodDAOTokenSale\n', ' * @dev The QWoodDAOTokenSale contract receive ether and other foreign tokens and exchange them to set tokens.\n', ' */\n', 'contract QWoodDAOTokenSale is Pausable {\n', '  using SafeMath for uint256;\n', '\n', '\n', '  // Represents data of foreign token which can be exchange to token\n', '  struct ReceivedToken {\n', '    // name of foreign token\n', '    string name;\n', '\n', '    // number of token units a buyer gets per foreign token unit\n', '    uint256 rate;\n', '\n', '    // amount of raised foreign tokens\n', '    uint256 raised;\n', '  }\n', '\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '  // So, if you are using a rate of 1 with a ERC20 token with 3 decimals called TOK\n', '  // 1 wei will give you 1 unit, or 0.001 TOK.\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  // Map from token address to token data\n', '  mapping (address => ReceivedToken) public receivedTokens;\n', '\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * Event for token purchase for token logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value foreign tokens units paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenForTokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * Event for change rate logging\n', '   * @param newRate new number of token units a buyer gets per wei\n', '   */\n', '  event ChangeRate(uint256 newRate);\n', '\n', '  /**\n', '   * Event for add received token logging\n', '   * @param tokenAddress address of added foreign token\n', '   * @param name name of added token\n', '   * @param rate number of token units a buyer gets per added foreign token unit\n', '   */\n', '  event AddReceivedToken(\n', '    address indexed tokenAddress,\n', '    string name,\n', '    uint256 rate\n', '  );\n', '\n', '  /**\n', '   * Event for remove received token logging\n', '   * @param tokenAddress address of removed foreign token\n', '   */\n', '  event RemoveReceivedToken(address indexed tokenAddress);\n', '\n', '  /**\n', '   * Event for set new received token rate logging\n', '   * @param tokenAddress address of foreign token\n', '   * @param newRate new number of token units a buyer gets per added foreign token unit\n', '   */\n', '  event SetReceivedTokenRate(\n', '    address indexed tokenAddress,\n', '    uint256 newRate\n', '  );\n', '\n', '  /**\n', '   * Event for send excess ether logging\n', '   * @param beneficiary who gets excess ether\n', '   * @param value excess weis\n', '   */\n', '  event SendEtherExcess(\n', '    address indexed beneficiary,\n', '    uint256 value\n', '  );\n', '\n', '  /**\n', '   * Event for send tokens excess logging\n', '   * @param beneficiary who gets tokens excess\n', '   * @param value excess token units\n', '   */\n', '  event SendTokensExcess(\n', '    address indexed beneficiary,\n', '    uint256 value\n', '  );\n', '\n', '  /**\n', '   * Event for logging received tokens from approveAndCall function\n', '   * @param from who send tokens\n', '   * @param amount amount of received purchased\n', '   * @param tokenAddress address of token contract\n', '   * @param extraData data attached to payment\n', '   */\n', '  event ReceivedTokens(\n', '    address indexed from,\n', '    uint256 amount,\n', '    address indexed tokenAddress,\n', '    bytes extraData\n', '  );\n', '\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor (\n', '    uint256 _rate,\n', '    address _wallet,\n', '    ERC20 _token\n', '  )\n', '    public\n', '  {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '\n', '  // -----------------------------------------\n', '  // External interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', ' * @dev fallback function ***DO NOT OVERRIDE***\n', ' */\n', '  function () whenNotPaused external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) whenNotPaused public payable {\n', '    require(_beneficiary != address(0));\n', '\n', '    uint256 weiAmount = msg.value;\n', '    require(weiAmount != 0);\n', '\n', '    uint256 tokenBalance = token.balanceOf(address(this));\n', '    require(tokenBalance > 0);\n', '\n', '    uint256 tokens = _getTokenAmount(address(0), weiAmount);\n', '\n', '    if (tokens > tokenBalance) {\n', '      tokens = tokenBalance;\n', '      weiAmount = _inverseGetTokenAmount(address(0), tokens);\n', '\n', '      uint256 senderExcess = msg.value.sub(weiAmount);\n', '      msg.sender.transfer(senderExcess);\n', '\n', '      emit SendEtherExcess(\n', '        msg.sender,\n', '        senderExcess\n', '      );\n', '    }\n', '\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Sets new rate.\n', '   * @param _newRate New number of token units a buyer gets per wei\n', '   */\n', '  function setRate(uint256 _newRate) onlyOwner external {\n', '    require(_newRate > 0);\n', '    rate = _newRate;\n', '\n', '    emit ChangeRate(_newRate);\n', '  }\n', '\n', '  /**\n', '   * @dev Set new wallet address.\n', '   * @param _newWallet New address where collected funds will be forwarded to\n', '   */\n', '  function setWallet(address _newWallet) onlyOwner external {\n', '    require(_newWallet != address(0));\n', '    wallet = _newWallet;\n', '  }\n', '\n', '  /**\n', '   * @dev Set new token address.\n', '   * @param _newToken New address of the token being sold\n', '   */\n', '  function setToken(ERC20 _newToken) onlyOwner external {\n', '    require(_newToken != address(0));\n', '    token = _newToken;\n', '  }\n', '\n', '  /**\n', '   * @dev Withdraws any tokens from this contract to wallet.\n', '   * @param _tokenContract The address of the foreign token\n', '   */\n', '  function withdrawTokens(ERC20 _tokenContract) onlyOwner external {\n', '    require(_tokenContract != address(0));\n', '\n', '    uint256 amount = _tokenContract.balanceOf(address(this));\n', '    _tokenContract.transfer(wallet, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Withdraws all ether from this contract to wallet.\n', '   */\n', '  function withdraw() onlyOwner external {\n', '    wallet.transfer(address(this).balance);\n', '  }\n', '\n', '  /**\n', '   * @dev Adds received foreign token.\n', '   * @param _tokenAddress Address of the foreign token being added\n', '   * @param _tokenName Name of the foreign token\n', '   * @param _tokenRate Number of token units a buyer gets per foreign token unit\n', '   */\n', '  function addReceivedToken(\n', '    ERC20 _tokenAddress,\n', '    string _tokenName,\n', '    uint256 _tokenRate\n', '  )\n', '    onlyOwner\n', '    external\n', '  {\n', '    require(_tokenAddress != address(0));\n', '    require(_tokenRate > 0);\n', '\n', '    ReceivedToken memory _token = ReceivedToken({\n', '      name: _tokenName,\n', '      rate: _tokenRate,\n', '      raised: 0\n', '    });\n', '\n', '    receivedTokens[_tokenAddress] = _token;\n', '\n', '    emit AddReceivedToken(\n', '      _tokenAddress,\n', '      _token.name,\n', '      _token.rate\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Removes received foreign token.\n', '   * @param _tokenAddress Address of the foreign token being removed\n', '   */\n', '  function removeReceivedToken(ERC20 _tokenAddress) onlyOwner external {\n', '    require(_tokenAddress != address(0));\n', '\n', '    delete receivedTokens[_tokenAddress];\n', '\n', '    emit RemoveReceivedToken(_tokenAddress);\n', '  }\n', '\n', '  /**\n', '   * @dev Sets new rate for received foreign token.\n', '   * @param _tokenAddress Address of the foreign token\n', '   * @param _newTokenRate New number of token units a buyer gets per foreign token unit\n', '   */\n', '  function setReceivedTokenRate(\n', '    ERC20 _tokenAddress,\n', '    uint256 _newTokenRate\n', '  )\n', '    onlyOwner\n', '    external\n', '  {\n', '    require(_tokenAddress != address(0));\n', '    require(receivedTokens[_tokenAddress].rate > 0);\n', '    require(_newTokenRate > 0);\n', '\n', '    receivedTokens[_tokenAddress].rate = _newTokenRate;\n', '\n', '    emit SetReceivedTokenRate(\n', '      _tokenAddress,\n', '      _newTokenRate\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Receives approved foreign tokens and exchange them to tokens.\n', '   * @param _from Address of foreign tokens sender\n', '   * @param _amount Amount of the foreign tokens\n', '   * @param _tokenAddress Address of the foreign token contract\n', '   * @param _extraData Data attached to payment\n', '   */\n', '  function receiveApproval(\n', '    address _from,\n', '    uint256 _amount,\n', '    address _tokenAddress,\n', '    bytes _extraData\n', '  )\n', '    whenNotPaused external\n', '  {\n', '\n', '    require(_from != address(0));\n', '    require(_tokenAddress != address(0));\n', '    require(receivedTokens[_tokenAddress].rate > 0); // check: token in receivedTokens\n', '    require(_amount > 0);\n', '\n', '    require(msg.sender == _tokenAddress);\n', '\n', '    emit ReceivedTokens(\n', '      _from,\n', '      _amount,\n', '      _tokenAddress,\n', '      _extraData\n', '    );\n', '\n', '    _exchangeTokens(ERC20(_tokenAddress), _from, _amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Deposits foreign token and exchange them to tokens.\n', '   * @param _tokenAddress Address of the foreign token\n', '   * @param _amount Amount of the foreign tokens\n', '   */\n', '  function depositToken(\n', '    ERC20 _tokenAddress,\n', '    uint256 _amount\n', '  )\n', '    whenNotPaused external\n', '  {\n', '    // Remember to call ERC20(address).approve(this, amount)\n', '    // or this contract will not be able to do the transfer on your behalf\n', '    require(_tokenAddress != address(0));\n', '\n', '    require(receivedTokens[_tokenAddress].rate > 0);\n', '    require(_amount > 0);\n', '\n', '    _exchangeTokens(_tokenAddress, msg.sender, _amount);\n', '  }\n', '\n', '\n', '  // -----------------------------------------\n', '  // Internal interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Exchanges foreign tokens to self token. Low-level exchange method.\n', '   * @param _tokenAddress Address of the foreign token contract\n', '   * @param _sender Sender address\n', '   * @param _amount Number of tokens for exchange\n', '   */\n', '  function _exchangeTokens(\n', '    ERC20 _tokenAddress,\n', '    address _sender,\n', '    uint256 _amount\n', '  )\n', '    internal\n', '  {\n', '    uint256 foreignTokenAmount = _amount;\n', '\n', '    require(_tokenAddress.transferFrom(_sender, address(this), foreignTokenAmount));\n', '\n', '    uint256 tokenBalance = token.balanceOf(address(this));\n', '    require(tokenBalance > 0);\n', '\n', '    uint256 tokens = _getTokenAmount(_tokenAddress, foreignTokenAmount);\n', '\n', '    if (tokens > tokenBalance) {\n', '      tokens = tokenBalance;\n', '      foreignTokenAmount = _inverseGetTokenAmount(_tokenAddress, tokens);\n', '\n', '      uint256 senderForeignTokenExcess = _amount.sub(foreignTokenAmount);\n', '      _tokenAddress.transfer(_sender, senderForeignTokenExcess);\n', '\n', '      emit SendTokensExcess(\n', '        _sender,\n', '        senderForeignTokenExcess\n', '      );\n', '    }\n', '\n', '    receivedTokens[_tokenAddress].raised = receivedTokens[_tokenAddress].raised.add(foreignTokenAmount);\n', '\n', '    _processPurchase(_sender, tokens);\n', '    emit TokenForTokenPurchase(\n', '      _sender,\n', '      _sender,\n', '      foreignTokenAmount,\n', '      tokens\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether or foreign token unit is converted to tokens.\n', '   * @param _tokenAddress Address of foreign token or 0 if ether to tokens\n', '   * @param _amount Value in wei or foreign token units to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _amount (wei or foreign token units)\n', '   */\n', '  function _getTokenAmount(address _tokenAddress, uint256 _amount)\n', '    internal view returns (uint256)\n', '  {\n', '    uint256 _rate;\n', '\n', '    if (_tokenAddress == address(0)) {\n', '      _rate = rate;\n', '    } else {\n', '      _rate = receivedTokens[_tokenAddress].rate;\n', '    }\n', '\n', '    return _amount.mul(_rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Get wei or foreign tokens amount. Inverse _getTokenAmount method.\n', '   */\n', '  function _inverseGetTokenAmount(address _tokenAddress, uint256 _tokenAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    uint256 _rate;\n', '\n', '    if (_tokenAddress == address(0)) {\n', '      _rate = rate;\n', '    } else {\n', '      _rate = receivedTokens[_tokenAddress].rate;\n', '    }\n', '\n', '    return _tokenAmount.div(_rate);\n', '  }\n', '}']
