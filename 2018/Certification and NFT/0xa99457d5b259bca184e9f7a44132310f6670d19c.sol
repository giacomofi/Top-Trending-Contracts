['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract BntyTokenInterface {\n', '  function destroyTokens(address _owner, uint _amount) public returns (bool);\n', '  function changeController(address newController) public;\n', '}\n', '\n', 'contract BntyController is Ownable {\n', '    \n', '    address public stakingContract;\n', '    address public Bounty0xToken;\n', '    \n', '    modifier onlyStakingContract() {\n', '        require(msg.sender == stakingContract);\n', '        _;\n', '    }\n', '    \n', '    constructor(address _stakingContract, address _Bounty0xToken) public {\n', '        stakingContract = _stakingContract;\n', '        Bounty0xToken = _Bounty0xToken;\n', '    }\n', '    \n', '    \n', '    function changeStakingContract(address _stakingContract) onlyOwner public {\n', '        stakingContract = _stakingContract;\n', '    }\n', '\n', '    function destroyTokensInBntyTokenContract(address _owner, uint _amount) onlyStakingContract public returns (bool) {\n', '        require(BntyTokenInterface(Bounty0xToken).destroyTokens(_owner, _amount));\n', '        return true;\n', '    }\n', '    \n', '    function changeControllerInBntyTokenContract(address newController) onlyOwner public {\n', '        BntyTokenInterface(Bounty0xToken).changeController(newController);\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract BntyTokenInterface {\n', '  function destroyTokens(address _owner, uint _amount) public returns (bool);\n', '  function changeController(address newController) public;\n', '}\n', '\n', 'contract BntyController is Ownable {\n', '    \n', '    address public stakingContract;\n', '    address public Bounty0xToken;\n', '    \n', '    modifier onlyStakingContract() {\n', '        require(msg.sender == stakingContract);\n', '        _;\n', '    }\n', '    \n', '    constructor(address _stakingContract, address _Bounty0xToken) public {\n', '        stakingContract = _stakingContract;\n', '        Bounty0xToken = _Bounty0xToken;\n', '    }\n', '    \n', '    \n', '    function changeStakingContract(address _stakingContract) onlyOwner public {\n', '        stakingContract = _stakingContract;\n', '    }\n', '\n', '    function destroyTokensInBntyTokenContract(address _owner, uint _amount) onlyStakingContract public returns (bool) {\n', '        require(BntyTokenInterface(Bounty0xToken).destroyTokens(_owner, _amount));\n', '        return true;\n', '    }\n', '    \n', '    function changeControllerInBntyTokenContract(address newController) onlyOwner public {\n', '        BntyTokenInterface(Bounty0xToken).changeController(newController);\n', '    }\n', '    \n', '}']
