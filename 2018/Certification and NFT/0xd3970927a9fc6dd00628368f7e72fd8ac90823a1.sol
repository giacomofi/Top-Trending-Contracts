['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // require(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // require(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '\n', '    uint256 public totalSupply;\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '\n', '        _transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '\n', '        require(allowance[_from][msg.sender] >= _value);\n', '\n', '        allowance[_from][msg.sender] = SafeMath.sub(allowance[_from][msg.sender], _value);\n', '\n', '        _transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '\n', '        allowance[msg.sender][_spender] = _value;\n', '\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     *   ######################\n', '     *  #  private function  #\n', '     * ######################\n', '     */\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '\n', '        require(balanceOf[_from] >= _value);\n', '\n', '        require(SafeMath.add(balanceOf[_to], _value) >= balanceOf[_to]);\n', '\n', '        balanceOf[_from] = SafeMath.sub(balanceOf[_from], _value);\n', '\n', '        balanceOf[_to] = SafeMath.add(balanceOf[_to], _value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '}\n', '\n', 'contract Token is ERC20 {\n', '\n', '    uint8 public constant decimals = 9;\n', '\n', '    uint256 public constant initialSupply = 10 * (10 ** 8) * (10 ** uint256(decimals));\n', '\n', '    string public constant name = &#39;INK Coin&#39;;\n', '\n', '    string public constant symbol = &#39;INK&#39;;\n', '\n', '\n', '    function() public {\n', '\n', '        revert();\n', '    }\n', '\n', '    function Token() public {\n', '\n', '        balanceOf[msg.sender] = initialSupply;\n', '\n', '        totalSupply = initialSupply;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '\n', '        if (approve(_spender, _value)) {\n', '\n', '            if (!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) {\n', '\n', '                revert();\n', '            }\n', '\n', '            return true;\n', '        }\n', '    }\n', '\n', '}\n', '\n', 'interface XCInterface {\n', '\n', '    /**\n', '     * Set contract service status.\n', '     * @param status contract service status (0:closed;1:only-closed-lock;2:only-closed-unlock;3:opened;).\n', '     */\n', '    function setStatus(uint8 status) external;\n', '\n', '    /**\n', '     * Get contract service status.\n', '     * @return contract service status.\n', '     */\n', '    function getStatus() external view returns (uint8);\n', '\n', '    /**\n', '     * Get the current contract platform name.\n', '     * @return contract platform name.\n', '     */\n', '    function getPlatformName() external view returns (bytes32);\n', '\n', '    /**\n', '     * Set the current contract administrator.\n', '     * @param account account of contract administrator.\n', '     */\n', '    function setAdmin(address account) external;\n', '\n', '    /**\n', '     * Get the current contract administrator.\n', '     * @return contract administrator.\n', '     */\n', '    function getAdmin() external view returns (address);\n', '\n', '    /**\n', '     * Set the Token contract address.\n', '     * @param account contract address.\n', '     */\n', '    function setToken(address account) external;\n', '\n', '    /**\n', '     * Get the Token contract address.\n', '     * @return contract address.\n', '     */\n', '    function getToken() external view returns (address);\n', '\n', '    /**\n', '     * Set the XCPlugin contract address.\n', '     * @param account contract address.\n', '     */\n', '    function setXCPlugin(address account) external;\n', '\n', '    /**\n', '     * Get the XCPlugin contract address.\n', '     * @return contract address.\n', '     */\n', '    function getXCPlugin() external view returns (address);\n', '\n', '    /**\n', '     * Set the comparison symbol in the contract.\n', '     * @param symbol comparison symbol ({"-=" : ">" , "+=" : ">=" }).\n', '     */\n', '    function setCompare(bytes2 symbol) external;\n', '\n', '    /**\n', '     * Get the comparison symbol in the contract.\n', '     * @return comparison symbol.\n', '     */\n', '    function getCompare() external view returns (bytes2);\n', '\n', '    /**\n', '     * Transfer out of cross chain.\n', '     * @param toPlatform name of to platform.\n', '     * @param toAccount account of to platform.\n', '     * @param value transfer amount.\n', '     */\n', '    function lock(bytes32 toPlatform, address toAccount, uint value) external payable;\n', '\n', '    /**\n', '     * Transfer in of cross chain.\n', '     * @param txid transaction id.\n', '     * @param fromPlatform name of form platform.\n', '     * @param fromAccount ame of to platform.\n', '     * @param toAccount account of to platform.\n', '     * @param value transfer amount.\n', '     */\n', '    function unlock(string txid, bytes32 fromPlatform, address fromAccount, address toAccount, uint value) external payable;\n', '\n', '    /**\n', '     * Transfer the misoperation to the amount of the contract account to the specified account.\n', '     * @param account the specified account.\n', '     * @param value transfer amount.\n', '     */\n', '    function withdraw(address account, uint value) external payable;\n', '\n', '    /**\n', '     * Transfer the money(qtum/eth) from the contract account.\n', '     * @param account the specified account.\n', '     * @param value transfer amount.\n', '     */\n', '    function transfer(address account, uint value) external payable;\n', '\n', '    /**\n', '     * Deposit money(eth) into a contract.\n', '     */\n', '    function deposit() external payable;\n', '}\n', '\n', 'contract XC is XCInterface {\n', '\n', '    /**\n', '     * Contract Administrator\n', '     * @field status Contract external service status.\n', '     * @field platformName Current contract platform name.\n', '     * @field account Current contract administrator.\n', '     */\n', '    struct Admin {\n', '\n', '        uint8 status;\n', '\n', '        bytes32 platformName;\n', '\n', '        bytes32 tokenSymbol;\n', '\n', '        bytes2 compareSymbol;\n', '\n', '        address account;\n', '    }\n', '\n', '    Admin private admin;\n', '\n', '    uint public lockBalance;\n', '\n', '    Token private token;\n', '\n', '    XCPlugin private xcPlugin;\n', '\n', '    event Lock(bytes32 toPlatform, address toAccount, bytes32 value, bytes32 tokenSymbol);\n', '\n', '    event Unlock(string txid, bytes32 fromPlatform, address fromAccount, bytes32 value, bytes32 tokenSymbol);\n', '\n', '    event Deposit(address from, bytes32 value);\n', '\n', '    function XC() public payable {\n', '\n', '        init();\n', '    }\n', '\n', '    function init() internal {\n', '\n', '        // Admin {status | platformName | tokenSymbol | compareSymbol | account}\n', '        admin.status = 3;\n', '\n', '        admin.platformName = "ETH";\n', '\n', '        admin.tokenSymbol = "INK";\n', '\n', '        admin.compareSymbol = "+=";\n', '\n', '        admin.account = msg.sender;\n', '\n', '        //totalSupply = 10 * (10 ** 8) * (10 ** 9);\n', '        lockBalance = 10 * (10 ** 8) * (10 ** 9);\n', '\n', '        token = Token(0xc15d8f30fa3137eee6be111c2933f1624972f45c);\n', '\n', '        xcPlugin = XCPlugin(0x55c87c2e26f66fd3642645c3f25c9e81a75ec0f4);\n', '    }\n', '\n', '    function setStatus(uint8 status) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(status == 0 || status == 1 || status == 2 || status == 3);\n', '\n', '        if (admin.status != status) {\n', '\n', '            admin.status = status;\n', '        }\n', '    }\n', '\n', '    function getStatus() external view returns (uint8) {\n', '\n', '        return admin.status;\n', '    }\n', '\n', '    function getPlatformName() external view returns (bytes32) {\n', '\n', '        return admin.platformName;\n', '    }\n', '\n', '    function setAdmin(address account) external {\n', '\n', '        require(account != address(0));\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        if (admin.account != account) {\n', '\n', '            admin.account = account;\n', '        }\n', '    }\n', '\n', '    function getAdmin() external view returns (address) {\n', '\n', '        return admin.account;\n', '    }\n', '\n', '    function setToken(address account) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        if (token != account) {\n', '\n', '            token = Token(account);\n', '        }\n', '    }\n', '\n', '    function getToken() external view returns (address) {\n', '\n', '        return token;\n', '    }\n', '\n', '    function setXCPlugin(address account) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        if (xcPlugin != account) {\n', '\n', '            xcPlugin = XCPlugin(account);\n', '        }\n', '    }\n', '\n', '    function getXCPlugin() external view returns (address) {\n', '\n', '        return xcPlugin;\n', '    }\n', '\n', '    function setCompare(bytes2 symbol) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(symbol == "+=" || symbol == "-=");\n', '\n', '        if (admin.compareSymbol != symbol) {\n', '\n', '            admin.compareSymbol = symbol;\n', '        }\n', '    }\n', '\n', '    function getCompare() external view returns (bytes2){\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        return admin.compareSymbol;\n', '    }\n', '\n', '    function lock(bytes32 toPlatform, address toAccount, uint value) external payable {\n', '\n', '        require(admin.status == 2 || admin.status == 3);\n', '\n', '        require(xcPlugin.getStatus());\n', '\n', '        require(xcPlugin.existPlatform(toPlatform));\n', '\n', '        require(toAccount != address(0));\n', '\n', '        // require(token.totalSupply >= value && value > 0);\n', '        require(value > 0);\n', '\n', '        //get user approve the contract quota\n', '        uint allowance = token.allowance(msg.sender, this);\n', '\n', '        require(toCompare(allowance, value));\n', '\n', '        //do transferFrom\n', '        bool success = token.transferFrom(msg.sender, this, value);\n', '\n', '        require(success);\n', '\n', '        //record the amount of local platform turn out\n', '        lockBalance = SafeMath.add(lockBalance, value);\n', '        // require(token.totalSupply >= lockBalance);\n', '\n', '        //trigger Lock\n', '        emit Lock(toPlatform, toAccount, bytes32(value), admin.tokenSymbol);\n', '    }\n', '\n', '    function unlock(string txid, bytes32 fromPlatform, address fromAccount, address toAccount, uint value) external payable {\n', '\n', '        require(admin.status == 1 || admin.status == 3);\n', '\n', '        require(xcPlugin.getStatus());\n', '\n', '        require(xcPlugin.existPlatform(fromPlatform));\n', '\n', '        require(toAccount != address(0));\n', '\n', '        // require(token.totalSupply >= value && value > 0);\n', '        require(value > 0);\n', '\n', '        //verify args by function xcPlugin.verify\n', '        bool complete;\n', '\n', '        bool verify;\n', '\n', '        (complete, verify) = xcPlugin.verifyProposal(fromPlatform, fromAccount, toAccount, value, admin.tokenSymbol, txid);\n', '\n', '        require(verify && !complete);\n', '\n', '        //get contracts balance\n', '        uint balance = token.balanceOf(this);\n', '\n', '        //validate the balance of contract were less than amount\n', '        require(toCompare(balance, value));\n', '\n', '        require(token.transfer(toAccount, value));\n', '\n', '        require(xcPlugin.commitProposal(fromPlatform, txid));\n', '\n', '        lockBalance = SafeMath.sub(lockBalance, value);\n', '\n', '        emit Unlock(txid, fromPlatform, fromAccount, bytes32(value), admin.tokenSymbol);\n', '    }\n', '\n', '    function withdraw(address account, uint value) external payable {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(account != address(0));\n', '\n', '        // require(token.totalSupply >= value && value > 0);\n', '        require(value > 0);\n', '\n', '        uint balance = token.balanceOf(this);\n', '\n', '        require(toCompare(SafeMath.sub(balance, lockBalance), value));\n', '\n', '        bool success = token.transfer(account, value);\n', '\n', '        require(success);\n', '    }\n', '\n', '    function transfer(address account, uint value) external payable {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(account != address(0));\n', '\n', '        require(value > 0 && value >= address(this).balance);\n', '\n', '        this.transfer(account, value);\n', '    }\n', '\n', '    function deposit() external payable {\n', '\n', '        emit Deposit(msg.sender, bytes32(msg.value));\n', '    }\n', '\n', '    /**\n', '     *   ######################\n', '     *  #  private function  #\n', '     * ######################\n', '     */\n', '\n', '    function toCompare(uint f, uint s) internal view returns (bool) {\n', '\n', '        if (admin.compareSymbol == "-=") {\n', '\n', '            return f > s;\n', '        } else if (admin.compareSymbol == "+=") {\n', '\n', '            return f >= s;\n', '        } else {\n', '\n', '            return false;\n', '        }\n', '    }\n', '}\n', '\n', 'interface XCPluginInterface {\n', '\n', '    /**\n', '     * Open the contract service status.\n', '     */\n', '    function start() external;\n', '\n', '    /**\n', '     * Close the contract service status.\n', '     */\n', '    function stop() external;\n', '\n', '    /**\n', '     * Get contract service status.\n', '     * @return contract service status.\n', '     */\n', '    function getStatus() external view returns (bool);\n', '\n', '    /**\n', '     * Get the current contract platform name.\n', '     * @return contract platform name.\n', '     */\n', '    function getPlatformName() external view returns (bytes32);\n', '\n', '    /**\n', '     * Set the current contract administrator.\n', '     * @param account account of contract administrator.\n', '     */\n', '    function setAdmin(address account) external;\n', '\n', '    /**\n', '     * Get the current contract administrator.\n', '     * @return contract administrator.\n', '     */\n', '    function getAdmin() external view returns (address);\n', '\n', '    /**\n', '     * Add a contract trust caller.\n', '     * @param caller account of caller.\n', '     */\n', '    function addCaller(address caller) external;\n', '\n', '    /**\n', '     * Delete a contract trust caller.\n', '     * @param caller account of caller.\n', '     */\n', '    function deleteCaller(address caller) external;\n', '\n', '    /**\n', '     * Whether the trust caller exists.\n', '     * @param caller account of caller.\n', '     * @return whether exists.\n', '     */\n', '    function existCaller(address caller) external view returns (bool);\n', '\n', '    /**\n', '     * Get all contract trusted callers.\n', '     * @return al lcallers.\n', '     */\n', '    function getCallers() external view returns (address[]);\n', '\n', '    /**\n', '     * Add a trusted platform name.\n', '     * @param name a platform name.\n', '     */\n', '    function addPlatform(bytes32 name) external;\n', '\n', '    /**\n', '     * Delete a trusted platform name.\n', '     * @param name a platform name.\n', '     */\n', '    function deletePlatform(bytes32 name) external;\n', '\n', '    /**\n', '     * Whether the trusted platform information exists.\n', '     * @param name a platform name.\n', '     * @return whether exists.\n', '     */\n', '    function existPlatform(bytes32 name) external view returns (bool);\n', '\n', '    /**\n', '     * Add the trusted platform public key information.\n', '     * @param platformName a platform name.\n', '     * @param publicKey a public key.\n', '     */\n', '    function addPublicKey(bytes32 platformName, address publicKey) external;\n', '\n', '    /**\n', '     * Delete the trusted platform public key information.\n', '     * @param platformName a platform name.\n', '     * @param publicKey a public key.\n', '     */\n', '    function deletePublicKey(bytes32 platformName, address publicKey) external;\n', '\n', '    /**\n', '     * Whether the trusted platform public key information exists.\n', '     * @param platformName a platform name.\n', '     * @param publicKey a public key.\n', '     */\n', '    function existPublicKey(bytes32 platformName, address publicKey) external view returns (bool);\n', '\n', '    /**\n', '     * Get the count of public key for the trusted platform.\n', '     * @param platformName a platform name.\n', '     * @return count of public key.\n', '     */\n', '    function countOfPublicKey(bytes32 platformName) external view returns (uint);\n', '\n', '    /**\n', '     * Get the list of public key for the trusted platform.\n', '     * @param platformName a platform name.\n', '     * @return list of public key.\n', '     */\n', '    function publicKeys(bytes32 platformName) external view returns (address[]);\n', '\n', '    /**\n', '     * Set the weight of a trusted platform.\n', '     * @param platformName a platform name.\n', '     * @param weight weight of platform.\n', '     */\n', '    function setWeight(bytes32 platformName, uint weight) external;\n', '\n', '    /**\n', '     * Get the weight of a trusted platform.\n', '     * @param platformName a platform name.\n', '     * @return weight of platform.\n', '     */\n', '    function getWeight(bytes32 platformName) external view returns (uint);\n', '\n', '    /**\n', '     * Initiate and vote on the transaction proposal.\n', '     * @param fromPlatform name of form platform.\n', '     * @param fromAccount name of to platform.\n', '     * @param toAccount account of to platform.\n', '     * @param value transfer amount.\n', '     * @param tokenSymbol token Symbol.\n', '     * @param txid transaction id.\n', '     * @param sig transaction signature.\n', '     */\n', '    function voteProposal(bytes32 fromPlatform, address fromAccount, address toAccount, uint value, bytes32 tokenSymbol, string txid, bytes sig) external;\n', '\n', '    /**\n', '     * Verify that the transaction proposal is valid.\n', '     * @param fromPlatform name of form platform.\n', '     * @param fromAccount name of to platform.\n', '     * @param toAccount account of to platform.\n', '     * @param value transfer amount.\n', '     * @param tokenSymbol token Symbol.\n', '     * @param txid transaction id.\n', '     */\n', '    function verifyProposal(bytes32 fromPlatform, address fromAccount, address toAccount, uint value, bytes32 tokenSymbol, string txid) external view returns (bool, bool);\n', '\n', '    /**\n', '     * Commit the transaction proposal.\n', '     * @param platformName a platform name.\n', '     * @param txid transaction id.\n', '     */\n', '    function commitProposal(bytes32 platformName, string txid) external returns (bool);\n', '\n', '    /**\n', '     * Get the transaction proposal information.\n', '     * @param platformName a platform name.\n', '     * @param txid transaction id.\n', '     * @return status completion status of proposal.\n', '     * @return fromAccount account of to platform.\n', '     * @return toAccount account of to platform.\n', '     * @return value transfer amount.\n', '     * @return voters notarial voters.\n', '     * @return weight The weight value of the completed time.\n', '     */\n', '    function getProposal(bytes32 platformName, string txid) external view returns (bool status, address fromAccount, address toAccount, uint value, address[] voters, uint weight);\n', '\n', '    /**\n', '     * Delete the transaction proposal information.\n', '     * @param platformName a platform name.\n', '     * @param txid transaction id.\n', '     */\n', '    function deleteProposal(bytes32 platformName, string txid) external;\n', '\n', '    /**\n', '     * Transfer the money(qtum/eth) from the contract account.\n', '     * @param account the specified account.\n', '     * @param value transfer amount.\n', '     */\n', '    function transfer(address account, uint value) external payable;\n', '}\n', '\n', 'contract XCPlugin is XCPluginInterface {\n', '\n', '    /**\n', '     * Contract Administrator\n', '     * @field status Contract external service status.\n', '     * @field platformName Current contract platform name.\n', '     * @field tokenSymbol token Symbol.\n', '     * @field account Current contract administrator.\n', '     */\n', '    struct Admin {\n', '\n', '        bool status;\n', '\n', '        bytes32 platformName;\n', '\n', '        bytes32 tokenSymbol;\n', '\n', '        address account;\n', '    }\n', '\n', '    /**\n', '     * Transaction Proposal\n', '     * @field status Transaction proposal status(false:pending,true:complete).\n', '     * @field fromAccount Account of form platform.\n', '     * @field toAccount Account of to platform.\n', '     * @field value Transfer amount.\n', '     * @field tokenSymbol token Symbol.\n', '     * @field voters Proposers.\n', '     * @field weight The weight value of the completed time.\n', '     */\n', '    struct Proposal {\n', '\n', '        bool status;\n', '\n', '        address fromAccount;\n', '\n', '        address toAccount;\n', '\n', '        uint value;\n', '\n', '        bytes32 tokenSymbol;\n', '\n', '        address[] voters;\n', '\n', '        uint weight;\n', '    }\n', '\n', '    /**\n', '     * Trusted Platform\n', '     * @field status Trusted platform state(false:no trusted,true:trusted).\n', '     * @field weight weight of platform.\n', '     * @field publicKeys list of public key.\n', '     * @field proposals list of proposal.\n', '     */\n', '    struct Platform {\n', '\n', '        bool status;\n', '\n', '        uint weight;\n', '\n', '        address[] publicKeys;\n', '\n', '        mapping(string => Proposal) proposals;\n', '    }\n', '\n', '    Admin private admin;\n', '\n', '    address[] private callers;\n', '\n', '    mapping(bytes32 => Platform) private platforms;\n', '\n', '    function XCPlugin() public {\n', '\n', '        init();\n', '    }\n', '\n', '    function init() internal {\n', '        // Admin { status | platformName | tokenSymbol | account}\n', '        admin.status = true;\n', '\n', '        admin.platformName = "ETH";\n', '\n', '        admin.tokenSymbol = "INK";\n', '\n', '        admin.account = msg.sender;\n', '\n', '        bytes32 platformName = "INK";\n', '\n', '        platforms[platformName].status = true;\n', '\n', '        platforms[platformName].weight = 1;\n', '\n', '        platforms[platformName].publicKeys.push(0x4230a12f5b0693dd88bb35c79d7e56a68614b199);\n', '\n', '        platforms[platformName].publicKeys.push(0x07caf88941eafcaaa3370657fccc261acb75dfba);\n', '    }\n', '\n', '    function start() external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        if (!admin.status) {\n', '\n', '            admin.status = true;\n', '        }\n', '    }\n', '\n', '    function stop() external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        if (admin.status) {\n', '\n', '            admin.status = false;\n', '        }\n', '    }\n', '\n', '    function getStatus() external view returns (bool) {\n', '\n', '        return admin.status;\n', '    }\n', '\n', '    function getPlatformName() external view returns (bytes32) {\n', '\n', '        return admin.platformName;\n', '    }\n', '\n', '    function setAdmin(address account) external {\n', '\n', '        require(account != address(0));\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        if (admin.account != account) {\n', '\n', '            admin.account = account;\n', '        }\n', '    }\n', '\n', '    function getAdmin() external view returns (address) {\n', '\n', '        return admin.account;\n', '    }\n', '\n', '    function addCaller(address caller) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        if (!_existCaller(caller)) {\n', '\n', '            callers.push(caller);\n', '        }\n', '    }\n', '\n', '    function deleteCaller(address caller) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        if (_existCaller(caller)) {\n', '\n', '            bool exist;\n', '\n', '            for (uint i = 0; i <= callers.length; i++) {\n', '\n', '                if (exist) {\n', '\n', '                    if (i == callers.length) {\n', '\n', '                        delete callers[i - 1];\n', '\n', '                        callers.length--;\n', '                    } else {\n', '\n', '                        callers[i - 1] = callers[i];\n', '                    }\n', '                } else if (callers[i] == caller) {\n', '\n', '                    exist = true;\n', '                }\n', '            }\n', '\n', '        }\n', '    }\n', '\n', '    function existCaller(address caller) external view returns (bool) {\n', '\n', '        return _existCaller(caller);\n', '    }\n', '\n', '    function getCallers() external view returns (address[]) {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        return callers;\n', '    }\n', '\n', '    function addPlatform(bytes32 name) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(name != "");\n', '\n', '        require(name != admin.platformName);\n', '\n', '        if (!_existPlatform(name)) {\n', '\n', '            platforms[name].status = true;\n', '\n', '            if (platforms[name].weight == 0) {\n', '\n', '                platforms[name].weight = 1;\n', '            }\n', '        }\n', '    }\n', '\n', '    function deletePlatform(bytes32 name) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(name != admin.platformName);\n', '\n', '        if (_existPlatform(name)) {\n', '\n', '            platforms[name].status = false;\n', '        }\n', '    }\n', '\n', '    function existPlatform(bytes32 name) external view returns (bool){\n', '\n', '        return _existPlatform(name);\n', '    }\n', '\n', '    function setWeight(bytes32 platformName, uint weight) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(_existPlatform(platformName));\n', '\n', '        require(weight > 0);\n', '\n', '        if (platforms[platformName].weight != weight) {\n', '\n', '            platforms[platformName].weight = weight;\n', '        }\n', '    }\n', '\n', '    function getWeight(bytes32 platformName) external view returns (uint) {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(_existPlatform(platformName));\n', '\n', '        return platforms[platformName].weight;\n', '    }\n', '\n', '    function addPublicKey(bytes32 platformName, address publicKey) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(_existPlatform(platformName));\n', '\n', '        require(publicKey != address(0));\n', '\n', '        address[] storage listOfPublicKey = platforms[platformName].publicKeys;\n', '\n', '        for (uint i; i < listOfPublicKey.length; i++) {\n', '\n', '            if (publicKey == listOfPublicKey[i]) {\n', '\n', '                return;\n', '            }\n', '        }\n', '\n', '        listOfPublicKey.push(publicKey);\n', '    }\n', '\n', '    function deletePublicKey(bytes32 platformName, address publickey) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(_existPlatform(platformName));\n', '\n', '        address[] storage listOfPublicKey = platforms[platformName].publicKeys;\n', '\n', '        bool exist;\n', '\n', '        for (uint i = 0; i <= listOfPublicKey.length; i++) {\n', '\n', '            if (exist) {\n', '                if (i == listOfPublicKey.length) {\n', '\n', '                    delete listOfPublicKey[i - 1];\n', '\n', '                    listOfPublicKey.length--;\n', '                } else {\n', '\n', '                    listOfPublicKey[i - 1] = listOfPublicKey[i];\n', '                }\n', '            } else if (listOfPublicKey[i] == publickey) {\n', '\n', '                exist = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    function existPublicKey(bytes32 platformName, address publicKey) external view returns (bool) {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        return _existPublicKey(platformName, publicKey);\n', '    }\n', '\n', '    function countOfPublicKey(bytes32 platformName) external view returns (uint){\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(_existPlatform(platformName));\n', '\n', '        return platforms[platformName].publicKeys.length;\n', '    }\n', '\n', '    function publicKeys(bytes32 platformName) external view returns (address[]){\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(_existPlatform(platformName));\n', '\n', '        return platforms[platformName].publicKeys;\n', '    }\n', '\n', '    function voteProposal(bytes32 fromPlatform, address fromAccount, address toAccount, uint value, bytes32 tokenSymbol, string txid, bytes sig) external {\n', '\n', '        require(admin.status);\n', '\n', '        require(_existPlatform(fromPlatform));\n', '\n', '        bytes32 msgHash = hashMsg(fromPlatform, fromAccount, admin.platformName, toAccount, value, tokenSymbol, txid);\n', '\n', '        // address publicKey = ecrecover(msgHash, v, r, s);\n', '        address publicKey = recover(msgHash, sig);\n', '\n', '        require(_existPublicKey(fromPlatform, publicKey));\n', '\n', '        Proposal storage proposal = platforms[fromPlatform].proposals[txid];\n', '\n', '        if (proposal.value == 0) {\n', '\n', '            proposal.fromAccount = fromAccount;\n', '\n', '            proposal.toAccount = toAccount;\n', '\n', '            proposal.value = value;\n', '\n', '            proposal.tokenSymbol = tokenSymbol;\n', '        } else {\n', '\n', '            require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value && proposal.tokenSymbol == tokenSymbol);\n', '        }\n', '\n', '        changeVoters(fromPlatform, publicKey, txid);\n', '    }\n', '\n', '    function verifyProposal(bytes32 fromPlatform, address fromAccount, address toAccount, uint value, bytes32 tokenSymbol, string txid) external view returns (bool, bool) {\n', '\n', '        require(admin.status);\n', '\n', '        require(_existPlatform(fromPlatform));\n', '\n', '        Proposal storage proposal = platforms[fromPlatform].proposals[txid];\n', '\n', '        if (proposal.status) {\n', '\n', '            return (true, (proposal.voters.length >= proposal.weight));\n', '        }\n', '\n', '        if (proposal.value == 0) {\n', '\n', '            return (false, false);\n', '        }\n', '\n', '        require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value && proposal.tokenSymbol == tokenSymbol);\n', '\n', '        return (false, (proposal.voters.length >= platforms[fromPlatform].weight));\n', '    }\n', '\n', '    function commitProposal(bytes32 platformName, string txid) external returns (bool) {\n', '\n', '        require(admin.status);\n', '\n', '        require(_existCaller(msg.sender) || msg.sender == admin.account);\n', '\n', '        require(_existPlatform(platformName));\n', '\n', '        require(!platforms[platformName].proposals[txid].status);\n', '\n', '        platforms[platformName].proposals[txid].status = true;\n', '\n', '        platforms[platformName].proposals[txid].weight = platforms[platformName].proposals[txid].voters.length;\n', '\n', '        return true;\n', '    }\n', '\n', '    function getProposal(bytes32 platformName, string txid) external view returns (bool status, address fromAccount, address toAccount, uint value, address[] voters, uint weight){\n', '\n', '        require(admin.status);\n', '\n', '        require(_existPlatform(platformName));\n', '\n', '        fromAccount = platforms[platformName].proposals[txid].fromAccount;\n', '\n', '        toAccount = platforms[platformName].proposals[txid].toAccount;\n', '\n', '        value = platforms[platformName].proposals[txid].value;\n', '\n', '        voters = platforms[platformName].proposals[txid].voters;\n', '\n', '        status = platforms[platformName].proposals[txid].status;\n', '\n', '        weight = platforms[platformName].proposals[txid].weight;\n', '\n', '        return;\n', '    }\n', '\n', '    function deleteProposal(bytes32 platformName, string txid) external {\n', '\n', '        require(msg.sender == admin.account);\n', '\n', '        require(_existPlatform(platformName));\n', '\n', '        delete platforms[platformName].proposals[txid];\n', '    }\n', '\n', '    function transfer(address account, uint value) external payable {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(account != address(0));\n', '\n', '        require(value > 0 && value >= address(this).balance);\n', '\n', '        this.transfer(account, value);\n', '    }\n', '\n', '    /**\n', '     *   ######################\n', '     *  #  private function  #\n', '     * ######################\n', '     */\n', '\n', '    function hashMsg(bytes32 fromPlatform, address fromAccount, bytes32 toPlatform, address toAccount, uint value, bytes32 tokenSymbol, string txid) internal pure returns (bytes32) {\n', '\n', '        return sha256(bytes32ToStr(fromPlatform), ":0x", uintToStr(uint160(fromAccount), 16), ":", bytes32ToStr(toPlatform), ":0x", uintToStr(uint160(toAccount), 16), ":", uintToStr(value, 10), ":", bytes32ToStr(tokenSymbol), ":", txid);\n', '    }\n', '\n', '    function changeVoters(bytes32 platformName, address publicKey, string txid) internal {\n', '\n', '        address[] storage voters = platforms[platformName].proposals[txid].voters;\n', '\n', '        bool change = true;\n', '\n', '        for (uint i = 0; i < voters.length; i++) {\n', '\n', '            if (voters[i] == publicKey) {\n', '\n', '                change = false;\n', '            }\n', '        }\n', '\n', '        if (change) {\n', '\n', '            voters.push(publicKey);\n', '        }\n', '    }\n', '\n', '    function bytes32ToStr(bytes32 b) internal pure returns (string) {\n', '\n', '        uint length = b.length;\n', '\n', '        for (uint i = 0; i < b.length; i++) {\n', '\n', '            if (b[b.length - 1 - i] == "") {\n', '\n', '                length -= 1;\n', '            } else {\n', '\n', '                break;\n', '            }\n', '        }\n', '\n', '        bytes memory bs = new bytes(length);\n', '\n', '        for (uint j = 0; j < length; j++) {\n', '\n', '            bs[j] = b[j];\n', '        }\n', '\n', '        return string(bs);\n', '    }\n', '\n', '    function uintToStr(uint value, uint base) internal pure returns (string) {\n', '\n', '        uint _value = value;\n', '\n', '        uint length = 0;\n', '\n', '        bytes16 tenStr = "0123456789abcdef";\n', '\n', '        while (true) {\n', '\n', '            if (_value > 0) {\n', '\n', '                length ++;\n', '\n', '                _value = _value / base;\n', '            } else {\n', '\n', '                break;\n', '            }\n', '        }\n', '\n', '        if (base == 16) {\n', '            length = 40;\n', '        }\n', '\n', '        bytes memory bs = new bytes(length);\n', '\n', '        for (uint i = 0; i < length; i++) {\n', '\n', '            bs[length - 1 - i] = tenStr[value % base];\n', '\n', '            value = value / base;\n', '        }\n', '\n', '        return string(bs);\n', '    }\n', '\n', '    function _existCaller(address caller) internal view returns (bool) {\n', '\n', '        for (uint i = 0; i < callers.length; i++) {\n', '\n', '            if (callers[i] == caller) {\n', '\n', '                return true;\n', '            }\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function _existPlatform(bytes32 name) internal view returns (bool){\n', '\n', '        return platforms[name].status;\n', '    }\n', '\n', '    function _existPublicKey(bytes32 platformName, address publicKey) internal view returns (bool) {\n', '\n', '\n', '        address[] memory listOfPublicKey = platforms[platformName].publicKeys;\n', '\n', '        for (uint i = 0; i < listOfPublicKey.length; i++) {\n', '\n', '            if (listOfPublicKey[i] == publicKey) {\n', '\n', '                return true;\n', '            }\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function recover(bytes32 hash, bytes sig) internal pure returns (address) {\n', '\n', '        bytes32 r;\n', '\n', '        bytes32 s;\n', '\n', '        uint8 v;\n', '\n', '        assembly {\n', '\n', '            r := mload(add(sig, 32))\n', '\n', '            s := mload(add(sig, 64))\n', '\n', '            v := byte(0, mload(add(sig, 96)))\n', '        }\n', '\n', '        if (v < 27) {\n', '\n', '            v += 27;\n', '        }\n', '\n', '        return ecrecover(hash, v, r, s);\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // require(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // require(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '\n', '    uint256 public totalSupply;\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '\n', '        _transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '\n', '        require(allowance[_from][msg.sender] >= _value);\n', '\n', '        allowance[_from][msg.sender] = SafeMath.sub(allowance[_from][msg.sender], _value);\n', '\n', '        _transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '\n', '        allowance[msg.sender][_spender] = _value;\n', '\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     *   ######################\n', '     *  #  private function  #\n', '     * ######################\n', '     */\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '\n', '        require(balanceOf[_from] >= _value);\n', '\n', '        require(SafeMath.add(balanceOf[_to], _value) >= balanceOf[_to]);\n', '\n', '        balanceOf[_from] = SafeMath.sub(balanceOf[_from], _value);\n', '\n', '        balanceOf[_to] = SafeMath.add(balanceOf[_to], _value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '}\n', '\n', 'contract Token is ERC20 {\n', '\n', '    uint8 public constant decimals = 9;\n', '\n', '    uint256 public constant initialSupply = 10 * (10 ** 8) * (10 ** uint256(decimals));\n', '\n', "    string public constant name = 'INK Coin';\n", '\n', "    string public constant symbol = 'INK';\n", '\n', '\n', '    function() public {\n', '\n', '        revert();\n', '    }\n', '\n', '    function Token() public {\n', '\n', '        balanceOf[msg.sender] = initialSupply;\n', '\n', '        totalSupply = initialSupply;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '\n', '        if (approve(_spender, _value)) {\n', '\n', '            if (!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) {\n', '\n', '                revert();\n', '            }\n', '\n', '            return true;\n', '        }\n', '    }\n', '\n', '}\n', '\n', 'interface XCInterface {\n', '\n', '    /**\n', '     * Set contract service status.\n', '     * @param status contract service status (0:closed;1:only-closed-lock;2:only-closed-unlock;3:opened;).\n', '     */\n', '    function setStatus(uint8 status) external;\n', '\n', '    /**\n', '     * Get contract service status.\n', '     * @return contract service status.\n', '     */\n', '    function getStatus() external view returns (uint8);\n', '\n', '    /**\n', '     * Get the current contract platform name.\n', '     * @return contract platform name.\n', '     */\n', '    function getPlatformName() external view returns (bytes32);\n', '\n', '    /**\n', '     * Set the current contract administrator.\n', '     * @param account account of contract administrator.\n', '     */\n', '    function setAdmin(address account) external;\n', '\n', '    /**\n', '     * Get the current contract administrator.\n', '     * @return contract administrator.\n', '     */\n', '    function getAdmin() external view returns (address);\n', '\n', '    /**\n', '     * Set the Token contract address.\n', '     * @param account contract address.\n', '     */\n', '    function setToken(address account) external;\n', '\n', '    /**\n', '     * Get the Token contract address.\n', '     * @return contract address.\n', '     */\n', '    function getToken() external view returns (address);\n', '\n', '    /**\n', '     * Set the XCPlugin contract address.\n', '     * @param account contract address.\n', '     */\n', '    function setXCPlugin(address account) external;\n', '\n', '    /**\n', '     * Get the XCPlugin contract address.\n', '     * @return contract address.\n', '     */\n', '    function getXCPlugin() external view returns (address);\n', '\n', '    /**\n', '     * Set the comparison symbol in the contract.\n', '     * @param symbol comparison symbol ({"-=" : ">" , "+=" : ">=" }).\n', '     */\n', '    function setCompare(bytes2 symbol) external;\n', '\n', '    /**\n', '     * Get the comparison symbol in the contract.\n', '     * @return comparison symbol.\n', '     */\n', '    function getCompare() external view returns (bytes2);\n', '\n', '    /**\n', '     * Transfer out of cross chain.\n', '     * @param toPlatform name of to platform.\n', '     * @param toAccount account of to platform.\n', '     * @param value transfer amount.\n', '     */\n', '    function lock(bytes32 toPlatform, address toAccount, uint value) external payable;\n', '\n', '    /**\n', '     * Transfer in of cross chain.\n', '     * @param txid transaction id.\n', '     * @param fromPlatform name of form platform.\n', '     * @param fromAccount ame of to platform.\n', '     * @param toAccount account of to platform.\n', '     * @param value transfer amount.\n', '     */\n', '    function unlock(string txid, bytes32 fromPlatform, address fromAccount, address toAccount, uint value) external payable;\n', '\n', '    /**\n', '     * Transfer the misoperation to the amount of the contract account to the specified account.\n', '     * @param account the specified account.\n', '     * @param value transfer amount.\n', '     */\n', '    function withdraw(address account, uint value) external payable;\n', '\n', '    /**\n', '     * Transfer the money(qtum/eth) from the contract account.\n', '     * @param account the specified account.\n', '     * @param value transfer amount.\n', '     */\n', '    function transfer(address account, uint value) external payable;\n', '\n', '    /**\n', '     * Deposit money(eth) into a contract.\n', '     */\n', '    function deposit() external payable;\n', '}\n', '\n', 'contract XC is XCInterface {\n', '\n', '    /**\n', '     * Contract Administrator\n', '     * @field status Contract external service status.\n', '     * @field platformName Current contract platform name.\n', '     * @field account Current contract administrator.\n', '     */\n', '    struct Admin {\n', '\n', '        uint8 status;\n', '\n', '        bytes32 platformName;\n', '\n', '        bytes32 tokenSymbol;\n', '\n', '        bytes2 compareSymbol;\n', '\n', '        address account;\n', '    }\n', '\n', '    Admin private admin;\n', '\n', '    uint public lockBalance;\n', '\n', '    Token private token;\n', '\n', '    XCPlugin private xcPlugin;\n', '\n', '    event Lock(bytes32 toPlatform, address toAccount, bytes32 value, bytes32 tokenSymbol);\n', '\n', '    event Unlock(string txid, bytes32 fromPlatform, address fromAccount, bytes32 value, bytes32 tokenSymbol);\n', '\n', '    event Deposit(address from, bytes32 value);\n', '\n', '    function XC() public payable {\n', '\n', '        init();\n', '    }\n', '\n', '    function init() internal {\n', '\n', '        // Admin {status | platformName | tokenSymbol | compareSymbol | account}\n', '        admin.status = 3;\n', '\n', '        admin.platformName = "ETH";\n', '\n', '        admin.tokenSymbol = "INK";\n', '\n', '        admin.compareSymbol = "+=";\n', '\n', '        admin.account = msg.sender;\n', '\n', '        //totalSupply = 10 * (10 ** 8) * (10 ** 9);\n', '        lockBalance = 10 * (10 ** 8) * (10 ** 9);\n', '\n', '        token = Token(0xc15d8f30fa3137eee6be111c2933f1624972f45c);\n', '\n', '        xcPlugin = XCPlugin(0x55c87c2e26f66fd3642645c3f25c9e81a75ec0f4);\n', '    }\n', '\n', '    function setStatus(uint8 status) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(status == 0 || status == 1 || status == 2 || status == 3);\n', '\n', '        if (admin.status != status) {\n', '\n', '            admin.status = status;\n', '        }\n', '    }\n', '\n', '    function getStatus() external view returns (uint8) {\n', '\n', '        return admin.status;\n', '    }\n', '\n', '    function getPlatformName() external view returns (bytes32) {\n', '\n', '        return admin.platformName;\n', '    }\n', '\n', '    function setAdmin(address account) external {\n', '\n', '        require(account != address(0));\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        if (admin.account != account) {\n', '\n', '            admin.account = account;\n', '        }\n', '    }\n', '\n', '    function getAdmin() external view returns (address) {\n', '\n', '        return admin.account;\n', '    }\n', '\n', '    function setToken(address account) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        if (token != account) {\n', '\n', '            token = Token(account);\n', '        }\n', '    }\n', '\n', '    function getToken() external view returns (address) {\n', '\n', '        return token;\n', '    }\n', '\n', '    function setXCPlugin(address account) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        if (xcPlugin != account) {\n', '\n', '            xcPlugin = XCPlugin(account);\n', '        }\n', '    }\n', '\n', '    function getXCPlugin() external view returns (address) {\n', '\n', '        return xcPlugin;\n', '    }\n', '\n', '    function setCompare(bytes2 symbol) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(symbol == "+=" || symbol == "-=");\n', '\n', '        if (admin.compareSymbol != symbol) {\n', '\n', '            admin.compareSymbol = symbol;\n', '        }\n', '    }\n', '\n', '    function getCompare() external view returns (bytes2){\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        return admin.compareSymbol;\n', '    }\n', '\n', '    function lock(bytes32 toPlatform, address toAccount, uint value) external payable {\n', '\n', '        require(admin.status == 2 || admin.status == 3);\n', '\n', '        require(xcPlugin.getStatus());\n', '\n', '        require(xcPlugin.existPlatform(toPlatform));\n', '\n', '        require(toAccount != address(0));\n', '\n', '        // require(token.totalSupply >= value && value > 0);\n', '        require(value > 0);\n', '\n', '        //get user approve the contract quota\n', '        uint allowance = token.allowance(msg.sender, this);\n', '\n', '        require(toCompare(allowance, value));\n', '\n', '        //do transferFrom\n', '        bool success = token.transferFrom(msg.sender, this, value);\n', '\n', '        require(success);\n', '\n', '        //record the amount of local platform turn out\n', '        lockBalance = SafeMath.add(lockBalance, value);\n', '        // require(token.totalSupply >= lockBalance);\n', '\n', '        //trigger Lock\n', '        emit Lock(toPlatform, toAccount, bytes32(value), admin.tokenSymbol);\n', '    }\n', '\n', '    function unlock(string txid, bytes32 fromPlatform, address fromAccount, address toAccount, uint value) external payable {\n', '\n', '        require(admin.status == 1 || admin.status == 3);\n', '\n', '        require(xcPlugin.getStatus());\n', '\n', '        require(xcPlugin.existPlatform(fromPlatform));\n', '\n', '        require(toAccount != address(0));\n', '\n', '        // require(token.totalSupply >= value && value > 0);\n', '        require(value > 0);\n', '\n', '        //verify args by function xcPlugin.verify\n', '        bool complete;\n', '\n', '        bool verify;\n', '\n', '        (complete, verify) = xcPlugin.verifyProposal(fromPlatform, fromAccount, toAccount, value, admin.tokenSymbol, txid);\n', '\n', '        require(verify && !complete);\n', '\n', '        //get contracts balance\n', '        uint balance = token.balanceOf(this);\n', '\n', '        //validate the balance of contract were less than amount\n', '        require(toCompare(balance, value));\n', '\n', '        require(token.transfer(toAccount, value));\n', '\n', '        require(xcPlugin.commitProposal(fromPlatform, txid));\n', '\n', '        lockBalance = SafeMath.sub(lockBalance, value);\n', '\n', '        emit Unlock(txid, fromPlatform, fromAccount, bytes32(value), admin.tokenSymbol);\n', '    }\n', '\n', '    function withdraw(address account, uint value) external payable {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(account != address(0));\n', '\n', '        // require(token.totalSupply >= value && value > 0);\n', '        require(value > 0);\n', '\n', '        uint balance = token.balanceOf(this);\n', '\n', '        require(toCompare(SafeMath.sub(balance, lockBalance), value));\n', '\n', '        bool success = token.transfer(account, value);\n', '\n', '        require(success);\n', '    }\n', '\n', '    function transfer(address account, uint value) external payable {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(account != address(0));\n', '\n', '        require(value > 0 && value >= address(this).balance);\n', '\n', '        this.transfer(account, value);\n', '    }\n', '\n', '    function deposit() external payable {\n', '\n', '        emit Deposit(msg.sender, bytes32(msg.value));\n', '    }\n', '\n', '    /**\n', '     *   ######################\n', '     *  #  private function  #\n', '     * ######################\n', '     */\n', '\n', '    function toCompare(uint f, uint s) internal view returns (bool) {\n', '\n', '        if (admin.compareSymbol == "-=") {\n', '\n', '            return f > s;\n', '        } else if (admin.compareSymbol == "+=") {\n', '\n', '            return f >= s;\n', '        } else {\n', '\n', '            return false;\n', '        }\n', '    }\n', '}\n', '\n', 'interface XCPluginInterface {\n', '\n', '    /**\n', '     * Open the contract service status.\n', '     */\n', '    function start() external;\n', '\n', '    /**\n', '     * Close the contract service status.\n', '     */\n', '    function stop() external;\n', '\n', '    /**\n', '     * Get contract service status.\n', '     * @return contract service status.\n', '     */\n', '    function getStatus() external view returns (bool);\n', '\n', '    /**\n', '     * Get the current contract platform name.\n', '     * @return contract platform name.\n', '     */\n', '    function getPlatformName() external view returns (bytes32);\n', '\n', '    /**\n', '     * Set the current contract administrator.\n', '     * @param account account of contract administrator.\n', '     */\n', '    function setAdmin(address account) external;\n', '\n', '    /**\n', '     * Get the current contract administrator.\n', '     * @return contract administrator.\n', '     */\n', '    function getAdmin() external view returns (address);\n', '\n', '    /**\n', '     * Add a contract trust caller.\n', '     * @param caller account of caller.\n', '     */\n', '    function addCaller(address caller) external;\n', '\n', '    /**\n', '     * Delete a contract trust caller.\n', '     * @param caller account of caller.\n', '     */\n', '    function deleteCaller(address caller) external;\n', '\n', '    /**\n', '     * Whether the trust caller exists.\n', '     * @param caller account of caller.\n', '     * @return whether exists.\n', '     */\n', '    function existCaller(address caller) external view returns (bool);\n', '\n', '    /**\n', '     * Get all contract trusted callers.\n', '     * @return al lcallers.\n', '     */\n', '    function getCallers() external view returns (address[]);\n', '\n', '    /**\n', '     * Add a trusted platform name.\n', '     * @param name a platform name.\n', '     */\n', '    function addPlatform(bytes32 name) external;\n', '\n', '    /**\n', '     * Delete a trusted platform name.\n', '     * @param name a platform name.\n', '     */\n', '    function deletePlatform(bytes32 name) external;\n', '\n', '    /**\n', '     * Whether the trusted platform information exists.\n', '     * @param name a platform name.\n', '     * @return whether exists.\n', '     */\n', '    function existPlatform(bytes32 name) external view returns (bool);\n', '\n', '    /**\n', '     * Add the trusted platform public key information.\n', '     * @param platformName a platform name.\n', '     * @param publicKey a public key.\n', '     */\n', '    function addPublicKey(bytes32 platformName, address publicKey) external;\n', '\n', '    /**\n', '     * Delete the trusted platform public key information.\n', '     * @param platformName a platform name.\n', '     * @param publicKey a public key.\n', '     */\n', '    function deletePublicKey(bytes32 platformName, address publicKey) external;\n', '\n', '    /**\n', '     * Whether the trusted platform public key information exists.\n', '     * @param platformName a platform name.\n', '     * @param publicKey a public key.\n', '     */\n', '    function existPublicKey(bytes32 platformName, address publicKey) external view returns (bool);\n', '\n', '    /**\n', '     * Get the count of public key for the trusted platform.\n', '     * @param platformName a platform name.\n', '     * @return count of public key.\n', '     */\n', '    function countOfPublicKey(bytes32 platformName) external view returns (uint);\n', '\n', '    /**\n', '     * Get the list of public key for the trusted platform.\n', '     * @param platformName a platform name.\n', '     * @return list of public key.\n', '     */\n', '    function publicKeys(bytes32 platformName) external view returns (address[]);\n', '\n', '    /**\n', '     * Set the weight of a trusted platform.\n', '     * @param platformName a platform name.\n', '     * @param weight weight of platform.\n', '     */\n', '    function setWeight(bytes32 platformName, uint weight) external;\n', '\n', '    /**\n', '     * Get the weight of a trusted platform.\n', '     * @param platformName a platform name.\n', '     * @return weight of platform.\n', '     */\n', '    function getWeight(bytes32 platformName) external view returns (uint);\n', '\n', '    /**\n', '     * Initiate and vote on the transaction proposal.\n', '     * @param fromPlatform name of form platform.\n', '     * @param fromAccount name of to platform.\n', '     * @param toAccount account of to platform.\n', '     * @param value transfer amount.\n', '     * @param tokenSymbol token Symbol.\n', '     * @param txid transaction id.\n', '     * @param sig transaction signature.\n', '     */\n', '    function voteProposal(bytes32 fromPlatform, address fromAccount, address toAccount, uint value, bytes32 tokenSymbol, string txid, bytes sig) external;\n', '\n', '    /**\n', '     * Verify that the transaction proposal is valid.\n', '     * @param fromPlatform name of form platform.\n', '     * @param fromAccount name of to platform.\n', '     * @param toAccount account of to platform.\n', '     * @param value transfer amount.\n', '     * @param tokenSymbol token Symbol.\n', '     * @param txid transaction id.\n', '     */\n', '    function verifyProposal(bytes32 fromPlatform, address fromAccount, address toAccount, uint value, bytes32 tokenSymbol, string txid) external view returns (bool, bool);\n', '\n', '    /**\n', '     * Commit the transaction proposal.\n', '     * @param platformName a platform name.\n', '     * @param txid transaction id.\n', '     */\n', '    function commitProposal(bytes32 platformName, string txid) external returns (bool);\n', '\n', '    /**\n', '     * Get the transaction proposal information.\n', '     * @param platformName a platform name.\n', '     * @param txid transaction id.\n', '     * @return status completion status of proposal.\n', '     * @return fromAccount account of to platform.\n', '     * @return toAccount account of to platform.\n', '     * @return value transfer amount.\n', '     * @return voters notarial voters.\n', '     * @return weight The weight value of the completed time.\n', '     */\n', '    function getProposal(bytes32 platformName, string txid) external view returns (bool status, address fromAccount, address toAccount, uint value, address[] voters, uint weight);\n', '\n', '    /**\n', '     * Delete the transaction proposal information.\n', '     * @param platformName a platform name.\n', '     * @param txid transaction id.\n', '     */\n', '    function deleteProposal(bytes32 platformName, string txid) external;\n', '\n', '    /**\n', '     * Transfer the money(qtum/eth) from the contract account.\n', '     * @param account the specified account.\n', '     * @param value transfer amount.\n', '     */\n', '    function transfer(address account, uint value) external payable;\n', '}\n', '\n', 'contract XCPlugin is XCPluginInterface {\n', '\n', '    /**\n', '     * Contract Administrator\n', '     * @field status Contract external service status.\n', '     * @field platformName Current contract platform name.\n', '     * @field tokenSymbol token Symbol.\n', '     * @field account Current contract administrator.\n', '     */\n', '    struct Admin {\n', '\n', '        bool status;\n', '\n', '        bytes32 platformName;\n', '\n', '        bytes32 tokenSymbol;\n', '\n', '        address account;\n', '    }\n', '\n', '    /**\n', '     * Transaction Proposal\n', '     * @field status Transaction proposal status(false:pending,true:complete).\n', '     * @field fromAccount Account of form platform.\n', '     * @field toAccount Account of to platform.\n', '     * @field value Transfer amount.\n', '     * @field tokenSymbol token Symbol.\n', '     * @field voters Proposers.\n', '     * @field weight The weight value of the completed time.\n', '     */\n', '    struct Proposal {\n', '\n', '        bool status;\n', '\n', '        address fromAccount;\n', '\n', '        address toAccount;\n', '\n', '        uint value;\n', '\n', '        bytes32 tokenSymbol;\n', '\n', '        address[] voters;\n', '\n', '        uint weight;\n', '    }\n', '\n', '    /**\n', '     * Trusted Platform\n', '     * @field status Trusted platform state(false:no trusted,true:trusted).\n', '     * @field weight weight of platform.\n', '     * @field publicKeys list of public key.\n', '     * @field proposals list of proposal.\n', '     */\n', '    struct Platform {\n', '\n', '        bool status;\n', '\n', '        uint weight;\n', '\n', '        address[] publicKeys;\n', '\n', '        mapping(string => Proposal) proposals;\n', '    }\n', '\n', '    Admin private admin;\n', '\n', '    address[] private callers;\n', '\n', '    mapping(bytes32 => Platform) private platforms;\n', '\n', '    function XCPlugin() public {\n', '\n', '        init();\n', '    }\n', '\n', '    function init() internal {\n', '        // Admin { status | platformName | tokenSymbol | account}\n', '        admin.status = true;\n', '\n', '        admin.platformName = "ETH";\n', '\n', '        admin.tokenSymbol = "INK";\n', '\n', '        admin.account = msg.sender;\n', '\n', '        bytes32 platformName = "INK";\n', '\n', '        platforms[platformName].status = true;\n', '\n', '        platforms[platformName].weight = 1;\n', '\n', '        platforms[platformName].publicKeys.push(0x4230a12f5b0693dd88bb35c79d7e56a68614b199);\n', '\n', '        platforms[platformName].publicKeys.push(0x07caf88941eafcaaa3370657fccc261acb75dfba);\n', '    }\n', '\n', '    function start() external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        if (!admin.status) {\n', '\n', '            admin.status = true;\n', '        }\n', '    }\n', '\n', '    function stop() external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        if (admin.status) {\n', '\n', '            admin.status = false;\n', '        }\n', '    }\n', '\n', '    function getStatus() external view returns (bool) {\n', '\n', '        return admin.status;\n', '    }\n', '\n', '    function getPlatformName() external view returns (bytes32) {\n', '\n', '        return admin.platformName;\n', '    }\n', '\n', '    function setAdmin(address account) external {\n', '\n', '        require(account != address(0));\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        if (admin.account != account) {\n', '\n', '            admin.account = account;\n', '        }\n', '    }\n', '\n', '    function getAdmin() external view returns (address) {\n', '\n', '        return admin.account;\n', '    }\n', '\n', '    function addCaller(address caller) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        if (!_existCaller(caller)) {\n', '\n', '            callers.push(caller);\n', '        }\n', '    }\n', '\n', '    function deleteCaller(address caller) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        if (_existCaller(caller)) {\n', '\n', '            bool exist;\n', '\n', '            for (uint i = 0; i <= callers.length; i++) {\n', '\n', '                if (exist) {\n', '\n', '                    if (i == callers.length) {\n', '\n', '                        delete callers[i - 1];\n', '\n', '                        callers.length--;\n', '                    } else {\n', '\n', '                        callers[i - 1] = callers[i];\n', '                    }\n', '                } else if (callers[i] == caller) {\n', '\n', '                    exist = true;\n', '                }\n', '            }\n', '\n', '        }\n', '    }\n', '\n', '    function existCaller(address caller) external view returns (bool) {\n', '\n', '        return _existCaller(caller);\n', '    }\n', '\n', '    function getCallers() external view returns (address[]) {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        return callers;\n', '    }\n', '\n', '    function addPlatform(bytes32 name) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(name != "");\n', '\n', '        require(name != admin.platformName);\n', '\n', '        if (!_existPlatform(name)) {\n', '\n', '            platforms[name].status = true;\n', '\n', '            if (platforms[name].weight == 0) {\n', '\n', '                platforms[name].weight = 1;\n', '            }\n', '        }\n', '    }\n', '\n', '    function deletePlatform(bytes32 name) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(name != admin.platformName);\n', '\n', '        if (_existPlatform(name)) {\n', '\n', '            platforms[name].status = false;\n', '        }\n', '    }\n', '\n', '    function existPlatform(bytes32 name) external view returns (bool){\n', '\n', '        return _existPlatform(name);\n', '    }\n', '\n', '    function setWeight(bytes32 platformName, uint weight) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(_existPlatform(platformName));\n', '\n', '        require(weight > 0);\n', '\n', '        if (platforms[platformName].weight != weight) {\n', '\n', '            platforms[platformName].weight = weight;\n', '        }\n', '    }\n', '\n', '    function getWeight(bytes32 platformName) external view returns (uint) {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(_existPlatform(platformName));\n', '\n', '        return platforms[platformName].weight;\n', '    }\n', '\n', '    function addPublicKey(bytes32 platformName, address publicKey) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(_existPlatform(platformName));\n', '\n', '        require(publicKey != address(0));\n', '\n', '        address[] storage listOfPublicKey = platforms[platformName].publicKeys;\n', '\n', '        for (uint i; i < listOfPublicKey.length; i++) {\n', '\n', '            if (publicKey == listOfPublicKey[i]) {\n', '\n', '                return;\n', '            }\n', '        }\n', '\n', '        listOfPublicKey.push(publicKey);\n', '    }\n', '\n', '    function deletePublicKey(bytes32 platformName, address publickey) external {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(_existPlatform(platformName));\n', '\n', '        address[] storage listOfPublicKey = platforms[platformName].publicKeys;\n', '\n', '        bool exist;\n', '\n', '        for (uint i = 0; i <= listOfPublicKey.length; i++) {\n', '\n', '            if (exist) {\n', '                if (i == listOfPublicKey.length) {\n', '\n', '                    delete listOfPublicKey[i - 1];\n', '\n', '                    listOfPublicKey.length--;\n', '                } else {\n', '\n', '                    listOfPublicKey[i - 1] = listOfPublicKey[i];\n', '                }\n', '            } else if (listOfPublicKey[i] == publickey) {\n', '\n', '                exist = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    function existPublicKey(bytes32 platformName, address publicKey) external view returns (bool) {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        return _existPublicKey(platformName, publicKey);\n', '    }\n', '\n', '    function countOfPublicKey(bytes32 platformName) external view returns (uint){\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(_existPlatform(platformName));\n', '\n', '        return platforms[platformName].publicKeys.length;\n', '    }\n', '\n', '    function publicKeys(bytes32 platformName) external view returns (address[]){\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(_existPlatform(platformName));\n', '\n', '        return platforms[platformName].publicKeys;\n', '    }\n', '\n', '    function voteProposal(bytes32 fromPlatform, address fromAccount, address toAccount, uint value, bytes32 tokenSymbol, string txid, bytes sig) external {\n', '\n', '        require(admin.status);\n', '\n', '        require(_existPlatform(fromPlatform));\n', '\n', '        bytes32 msgHash = hashMsg(fromPlatform, fromAccount, admin.platformName, toAccount, value, tokenSymbol, txid);\n', '\n', '        // address publicKey = ecrecover(msgHash, v, r, s);\n', '        address publicKey = recover(msgHash, sig);\n', '\n', '        require(_existPublicKey(fromPlatform, publicKey));\n', '\n', '        Proposal storage proposal = platforms[fromPlatform].proposals[txid];\n', '\n', '        if (proposal.value == 0) {\n', '\n', '            proposal.fromAccount = fromAccount;\n', '\n', '            proposal.toAccount = toAccount;\n', '\n', '            proposal.value = value;\n', '\n', '            proposal.tokenSymbol = tokenSymbol;\n', '        } else {\n', '\n', '            require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value && proposal.tokenSymbol == tokenSymbol);\n', '        }\n', '\n', '        changeVoters(fromPlatform, publicKey, txid);\n', '    }\n', '\n', '    function verifyProposal(bytes32 fromPlatform, address fromAccount, address toAccount, uint value, bytes32 tokenSymbol, string txid) external view returns (bool, bool) {\n', '\n', '        require(admin.status);\n', '\n', '        require(_existPlatform(fromPlatform));\n', '\n', '        Proposal storage proposal = platforms[fromPlatform].proposals[txid];\n', '\n', '        if (proposal.status) {\n', '\n', '            return (true, (proposal.voters.length >= proposal.weight));\n', '        }\n', '\n', '        if (proposal.value == 0) {\n', '\n', '            return (false, false);\n', '        }\n', '\n', '        require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value && proposal.tokenSymbol == tokenSymbol);\n', '\n', '        return (false, (proposal.voters.length >= platforms[fromPlatform].weight));\n', '    }\n', '\n', '    function commitProposal(bytes32 platformName, string txid) external returns (bool) {\n', '\n', '        require(admin.status);\n', '\n', '        require(_existCaller(msg.sender) || msg.sender == admin.account);\n', '\n', '        require(_existPlatform(platformName));\n', '\n', '        require(!platforms[platformName].proposals[txid].status);\n', '\n', '        platforms[platformName].proposals[txid].status = true;\n', '\n', '        platforms[platformName].proposals[txid].weight = platforms[platformName].proposals[txid].voters.length;\n', '\n', '        return true;\n', '    }\n', '\n', '    function getProposal(bytes32 platformName, string txid) external view returns (bool status, address fromAccount, address toAccount, uint value, address[] voters, uint weight){\n', '\n', '        require(admin.status);\n', '\n', '        require(_existPlatform(platformName));\n', '\n', '        fromAccount = platforms[platformName].proposals[txid].fromAccount;\n', '\n', '        toAccount = platforms[platformName].proposals[txid].toAccount;\n', '\n', '        value = platforms[platformName].proposals[txid].value;\n', '\n', '        voters = platforms[platformName].proposals[txid].voters;\n', '\n', '        status = platforms[platformName].proposals[txid].status;\n', '\n', '        weight = platforms[platformName].proposals[txid].weight;\n', '\n', '        return;\n', '    }\n', '\n', '    function deleteProposal(bytes32 platformName, string txid) external {\n', '\n', '        require(msg.sender == admin.account);\n', '\n', '        require(_existPlatform(platformName));\n', '\n', '        delete platforms[platformName].proposals[txid];\n', '    }\n', '\n', '    function transfer(address account, uint value) external payable {\n', '\n', '        require(admin.account == msg.sender);\n', '\n', '        require(account != address(0));\n', '\n', '        require(value > 0 && value >= address(this).balance);\n', '\n', '        this.transfer(account, value);\n', '    }\n', '\n', '    /**\n', '     *   ######################\n', '     *  #  private function  #\n', '     * ######################\n', '     */\n', '\n', '    function hashMsg(bytes32 fromPlatform, address fromAccount, bytes32 toPlatform, address toAccount, uint value, bytes32 tokenSymbol, string txid) internal pure returns (bytes32) {\n', '\n', '        return sha256(bytes32ToStr(fromPlatform), ":0x", uintToStr(uint160(fromAccount), 16), ":", bytes32ToStr(toPlatform), ":0x", uintToStr(uint160(toAccount), 16), ":", uintToStr(value, 10), ":", bytes32ToStr(tokenSymbol), ":", txid);\n', '    }\n', '\n', '    function changeVoters(bytes32 platformName, address publicKey, string txid) internal {\n', '\n', '        address[] storage voters = platforms[platformName].proposals[txid].voters;\n', '\n', '        bool change = true;\n', '\n', '        for (uint i = 0; i < voters.length; i++) {\n', '\n', '            if (voters[i] == publicKey) {\n', '\n', '                change = false;\n', '            }\n', '        }\n', '\n', '        if (change) {\n', '\n', '            voters.push(publicKey);\n', '        }\n', '    }\n', '\n', '    function bytes32ToStr(bytes32 b) internal pure returns (string) {\n', '\n', '        uint length = b.length;\n', '\n', '        for (uint i = 0; i < b.length; i++) {\n', '\n', '            if (b[b.length - 1 - i] == "") {\n', '\n', '                length -= 1;\n', '            } else {\n', '\n', '                break;\n', '            }\n', '        }\n', '\n', '        bytes memory bs = new bytes(length);\n', '\n', '        for (uint j = 0; j < length; j++) {\n', '\n', '            bs[j] = b[j];\n', '        }\n', '\n', '        return string(bs);\n', '    }\n', '\n', '    function uintToStr(uint value, uint base) internal pure returns (string) {\n', '\n', '        uint _value = value;\n', '\n', '        uint length = 0;\n', '\n', '        bytes16 tenStr = "0123456789abcdef";\n', '\n', '        while (true) {\n', '\n', '            if (_value > 0) {\n', '\n', '                length ++;\n', '\n', '                _value = _value / base;\n', '            } else {\n', '\n', '                break;\n', '            }\n', '        }\n', '\n', '        if (base == 16) {\n', '            length = 40;\n', '        }\n', '\n', '        bytes memory bs = new bytes(length);\n', '\n', '        for (uint i = 0; i < length; i++) {\n', '\n', '            bs[length - 1 - i] = tenStr[value % base];\n', '\n', '            value = value / base;\n', '        }\n', '\n', '        return string(bs);\n', '    }\n', '\n', '    function _existCaller(address caller) internal view returns (bool) {\n', '\n', '        for (uint i = 0; i < callers.length; i++) {\n', '\n', '            if (callers[i] == caller) {\n', '\n', '                return true;\n', '            }\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function _existPlatform(bytes32 name) internal view returns (bool){\n', '\n', '        return platforms[name].status;\n', '    }\n', '\n', '    function _existPublicKey(bytes32 platformName, address publicKey) internal view returns (bool) {\n', '\n', '\n', '        address[] memory listOfPublicKey = platforms[platformName].publicKeys;\n', '\n', '        for (uint i = 0; i < listOfPublicKey.length; i++) {\n', '\n', '            if (listOfPublicKey[i] == publicKey) {\n', '\n', '                return true;\n', '            }\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function recover(bytes32 hash, bytes sig) internal pure returns (address) {\n', '\n', '        bytes32 r;\n', '\n', '        bytes32 s;\n', '\n', '        uint8 v;\n', '\n', '        assembly {\n', '\n', '            r := mload(add(sig, 32))\n', '\n', '            s := mload(add(sig, 64))\n', '\n', '            v := byte(0, mload(add(sig, 96)))\n', '        }\n', '\n', '        if (v < 27) {\n', '\n', '            v += 27;\n', '        }\n', '\n', '        return ecrecover(hash, v, r, s);\n', '    }\n', '}']
