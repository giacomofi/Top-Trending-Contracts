['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title EIP20/ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract EIP20 is ERC20 {\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', '}\n', '\n', 'interface NonCompliantEIP20 {\n', '    function transfer(address _to, uint _value) external;\n', '    function transferFrom(address _from, address _to, uint _value) external;\n', '    function approve(address _spender, uint _value) external;\n', '}\n', '\n', '/**\n', ' * @title EIP20/ERC20 wrapper that will support noncompliant ERC20s\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' * @dev see https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n', ' */\n', 'contract EIP20Wrapper {\n', '\n', '    function eip20Transfer(\n', '        address token,\n', '        address to,\n', '        uint256 value)\n', '        internal\n', '        returns (bool result) {\n', '\n', '        NonCompliantEIP20(token).transfer(to, value);\n', '\n', '        assembly {\n', '            switch returndatasize()   \n', '            case 0 {                        // non compliant ERC20\n', '                result := not(0)            // result is true\n', '            }\n', '            case 32 {                       // compliant ERC20\n', '                returndatacopy(0, 0, 32) \n', '                result := mload(0)          // result == returndata of external call\n', '            }\n', '            default {                       // not an not an ERC20 token\n', '                revert(0, 0) \n', '            }\n', '        }\n', '\n', '        require(result, "eip20Transfer failed");\n', '    }\n', '\n', '    function eip20TransferFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 value)\n', '        internal\n', '        returns (bool result) {\n', '\n', '        NonCompliantEIP20(token).transferFrom(from, to, value);\n', '\n', '        assembly {\n', '            switch returndatasize()   \n', '            case 0 {                        // non compliant ERC20\n', '                result := not(0)            // result is true\n', '            }\n', '            case 32 {                       // compliant ERC20\n', '                returndatacopy(0, 0, 32) \n', '                result := mload(0)          // result == returndata of external call\n', '            }\n', '            default {                       // not an not an ERC20 token\n', '                revert(0, 0) \n', '            }\n', '        }\n', '\n', '        require(result, "eip20TransferFrom failed");\n', '    }\n', '\n', '    function eip20Approve(\n', '        address token,\n', '        address spender,\n', '        uint256 value)\n', '        internal\n', '        returns (bool result) {\n', '\n', '        NonCompliantEIP20(token).approve(spender, value);\n', '\n', '        assembly {\n', '            switch returndatasize()   \n', '            case 0 {                        // non compliant ERC20\n', '                result := not(0)            // result is true\n', '            }\n', '            case 32 {                       // compliant ERC20\n', '                returndatacopy(0, 0, 32) \n', '                result := mload(0)          // result == returndata of external call\n', '            }\n', '            default {                       // not an not an ERC20 token\n', '                revert(0, 0) \n', '            }\n', '        }\n', '\n', '        require(result, "eip20Approve failed");\n', '    }\n', '}\n', '\n', '// This provides a gatekeeping modifier for functions that can only be used by the bZx contract\n', '// Since it inherits Ownable provides typical ownership functionality with a slight modification to the transferOwnership function\n', '// Setting owner and bZxContractAddress to the same address is not supported.\n', 'contract BZxOwnable is Ownable {\n', '\n', '    address public bZxContractAddress;\n', '\n', '    event BZxOwnershipTransferred(address indexed previousBZxContract, address indexed newBZxContract);\n', '\n', '    // modifier reverts if bZxContractAddress isn&#39;t set\n', '    modifier onlyBZx() {\n', '        require(msg.sender == bZxContractAddress, "only bZx contracts can call this function");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer the bZx contract owner to a new contract address\n', '    * @param newBZxContractAddress The bZx contract address to transfer ownership to.\n', '    */\n', '    function transferBZxOwnership(address newBZxContractAddress) public onlyOwner {\n', '        require(newBZxContractAddress != address(0) && newBZxContractAddress != owner, "transferBZxOwnership::unauthorized");\n', '        emit BZxOwnershipTransferred(bZxContractAddress, newBZxContractAddress);\n', '        bZxContractAddress = newBZxContractAddress;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    * This overrides transferOwnership in Ownable to prevent setting the new owner the same as the bZxContract\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0) && newOwner != bZxContractAddress, "transferOwnership::unauthorized");\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface ExchangeInterface {\n', '    event LogError(uint8 indexed errorId, bytes32 indexed orderHash);\n', '\n', '    function fillOrder(\n', '          address[5] orderAddresses,\n', '          uint[6] orderValues,\n', '          uint fillTakerTokenAmount,\n', '          bool shouldThrowOnInsufficientBalanceOrAllowance,\n', '          uint8 v,\n', '          bytes32 r,\n', '          bytes32 s)\n', '          external\n', '          returns (uint filledTakerTokenAmount);\n', '\n', '    function fillOrdersUpTo(\n', '        address[5][] orderAddresses,\n', '        uint[6][] orderValues,\n', '        uint fillTakerTokenAmount,\n', '        bool shouldThrowOnInsufficientBalanceOrAllowance,\n', '        uint8[] v,\n', '        bytes32[] r,\n', '        bytes32[] s)\n', '        external\n', '        returns (uint);\n', '\n', '    function isValidSignature(\n', '        address signer,\n', '        bytes32 hash,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s)\n', '        external\n', '        constant\n', '        returns (bool);\n', '}\n', '\n', 'contract BZxTo0x is EIP20Wrapper, BZxOwnable {\n', '    using SafeMath for uint256;\n', '\n', '    address public exchangeContract;\n', '    address public zrxTokenContract;\n', '    address public tokenTransferProxyContract;\n', '\n', '    constructor(\n', '        address _exchange, \n', '        address _zrxToken,\n', '        address _proxy) \n', '        public \n', '    {\n', '        exchangeContract = _exchange;\n', '        zrxTokenContract = _zrxToken;\n', '        tokenTransferProxyContract = _proxy;\n', '    }\n', '\n', '    function() \n', '        public {\n', '        revert();\n', '    }\n', '\n', '   function take0xTrade(\n', '        address trader,\n', '        address vaultAddress,\n', '        uint sourceTokenAmountToUse,\n', '        bytes orderData0x, // 0x order arguments, converted to hex, padded to 32 bytes and concatenated\n', '        bytes signature0x) // ECDSA of the 0x order\n', '        public\n', '        onlyBZx\n', '        returns (\n', '            address destTokenAddress,\n', '            uint destTokenAmount,\n', '            uint sourceTokenUsedAmount)\n', '    {\n', '        (address[5][] memory orderAddresses0x, uint[6][] memory orderValues0x) = getOrderValuesFromData(orderData0x);\n', '\n', '        (sourceTokenUsedAmount, destTokenAmount) = _take0xTrade(\n', '            trader,\n', '            sourceTokenAmountToUse,\n', '            orderAddresses0x,\n', '            orderValues0x,\n', '            signature0x);\n', '\n', '        if (sourceTokenUsedAmount < sourceTokenAmountToUse) {\n', '            // all sourceToken has to be traded\n', '            revert("BZxTo0x::take0xTrade: sourceTokenUsedAmount < sourceTokenAmountToUse");\n', '        }\n', '\n', '        // transfer the destToken to the vault\n', '        eip20Transfer(\n', '            orderAddresses0x[0][2],\n', '            vaultAddress,\n', '            destTokenAmount);\n', '\n', '        destTokenAddress = orderAddresses0x[0][2]; // makerToken (aka destTokenAddress)\n', '    }\n', '\n', '    function getOrderValuesFromData(\n', '        bytes orderData0x)\n', '        public\n', '        pure\n', '        returns (\n', '            address[5][] orderAddresses,\n', '            uint[6][] orderValues) \n', '    {\n', '        address maker;\n', '        address taker;\n', '        address makerToken;\n', '        address takerToken;\n', '        address feeRecipient;\n', '        uint makerTokenAmount;\n', '        uint takerTokenAmount;\n', '        uint makerFee;\n', '        uint takerFee;\n', '        uint expirationTimestampInSec;\n', '        uint salt;\n', '        orderAddresses = new address[5][](orderData0x.length/352);\n', '        orderValues = new uint[6][](orderData0x.length/352);\n', '        for (uint i = 0; i < orderData0x.length/352; i++) {\n', '            assembly {\n', '                maker := mload(add(orderData0x, add(mul(i, 352), 32)))\n', '                taker := mload(add(orderData0x, add(mul(i, 352), 64)))\n', '                makerToken := mload(add(orderData0x, add(mul(i, 352), 96)))\n', '                takerToken := mload(add(orderData0x, add(mul(i, 352), 128)))\n', '                feeRecipient := mload(add(orderData0x, add(mul(i, 352), 160)))\n', '                makerTokenAmount := mload(add(orderData0x, add(mul(i, 352), 192)))\n', '                takerTokenAmount := mload(add(orderData0x, add(mul(i, 352), 224)))\n', '                makerFee := mload(add(orderData0x, add(mul(i, 352), 256)))\n', '                takerFee := mload(add(orderData0x, add(mul(i, 352), 288)))\n', '                expirationTimestampInSec := mload(add(orderData0x, add(mul(i, 352), 320)))\n', '                salt := mload(add(orderData0x, add(mul(i, 352), 352)))\n', '            }\n', '            orderAddresses[i] = [\n', '                maker,\n', '                taker,\n', '                makerToken,\n', '                takerToken,\n', '                feeRecipient\n', '            ];\n', '            orderValues[i] = [\n', '                makerTokenAmount,\n', '                takerTokenAmount,\n', '                makerFee,\n', '                takerFee,\n', '                expirationTimestampInSec,\n', '                salt\n', '            ];\n', '        }\n', '    }\n', '\n', '    /// @param signatures ECDSA signatures in raw bytes (rsv).\n', '    function getSignatureParts(\n', '        bytes signatures)\n', '        public\n', '        pure\n', '        returns (\n', '            uint8[] vs,\n', '            bytes32[] rs,\n', '            bytes32[] ss)\n', '    {\n', '        vs = new uint8[](signatures.length/65);\n', '        rs = new bytes32[](signatures.length/65);\n', '        ss = new bytes32[](signatures.length/65);\n', '        for (uint i = 0; i < signatures.length/65; i++) {\n', '            uint8 v;\n', '            bytes32 r;\n', '            bytes32 s;\n', '            assembly {\n', '                r := mload(add(signatures, add(mul(i, 65), 32)))\n', '                s := mload(add(signatures, add(mul(i, 65), 64)))\n', '                v := mload(add(signatures, add(mul(i, 65), 65)))\n', '            }\n', '            if (v < 27) {\n', '                v = v + 27;\n', '            }\n', '            vs[i] = v;\n', '            rs[i] = r;\n', '            ss[i] = s;\n', '        }\n', '    }\n', '\n', '    /// @dev Calculates partial value given a numerator and denominator.\n', '    /// @param numerator Numerator.\n', '    /// @param denominator Denominator.\n', '    /// @param target Value to calculate partial of.\n', '    /// @return Partial value of target.\n', '    function getPartialAmount(uint numerator, uint denominator, uint target)\n', '        public\n', '        pure\n', '        returns (uint)\n', '    {\n', '        return SafeMath.div(SafeMath.mul(numerator, target), denominator);\n', '    }\n', '\n', '    function set0xExchange (\n', '        address _exchange)\n', '        public\n', '        onlyOwner\n', '    {\n', '        exchangeContract = _exchange;\n', '    }\n', '\n', '    function setZRXToken (\n', '        address _zrxToken)\n', '        public\n', '        onlyOwner\n', '    {\n', '        zrxTokenContract = _zrxToken;\n', '    }\n', '\n', '    function set0xTokenProxy (\n', '        address _proxy)\n', '        public\n', '        onlyOwner\n', '    {\n', '        tokenTransferProxyContract = _proxy;\n', '    }\n', '\n', '    function approveFor (\n', '        address token,\n', '        address spender,\n', '        uint value)\n', '        public\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        eip20Approve(\n', '            token,\n', '            spender,\n', '            value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function _take0xTrade(\n', '        address trader,\n', '        uint sourceTokenAmountToUse,\n', '        address[5][] orderAddresses0x,\n', '        uint[6][] orderValues0x,\n', '        bytes signature)\n', '        internal\n', '        returns (uint sourceTokenUsedAmount, uint destTokenAmount) \n', '    {\n', '        uint[3] memory summations; // takerTokenAmountTotal, makerTokenAmountTotal, zrxTokenAmount\n', '\n', '        for (uint i = 0; i < orderAddresses0x.length; i++) {\n', '            summations[0] += orderValues0x[0][1]; // takerTokenAmountTotal\n', '            summations[1] += orderValues0x[0][0]; // makerTokenAmountTotal\n', '            \n', '            if (orderAddresses0x[i][4] != address(0) && // feeRecipient\n', '                    orderValues0x[i][3] > 0 // takerFee\n', '            ) {\n', '                summations[2] += orderValues0x[i][3]; // zrxTokenAmount\n', '            }\n', '        }\n', '        if (summations[2] > 0) {\n', '            // The 0x TokenTransferProxy already has unlimited transfer allowance for ZRX from this contract (set during deployment of this contract)\n', '            eip20TransferFrom(\n', '                zrxTokenContract,\n', '                trader,\n', '                this,\n', '                summations[2]);\n', '        }\n', '\n', '        (uint8[] memory v, bytes32[] memory r, bytes32[] memory s) = getSignatureParts(signature);\n', '\n', '        // Increase the allowance for 0x Exchange Proxy to transfer the sourceToken needed for the 0x trade\n', '        // orderAddresses0x[0][3] -> takerToken/sourceToken\n', '        eip20Approve(\n', '            orderAddresses0x[0][3],\n', '            tokenTransferProxyContract,\n', '            EIP20(orderAddresses0x[0][3]).allowance(this, tokenTransferProxyContract).add(sourceTokenAmountToUse));\n', '\n', '        if (orderAddresses0x.length > 0) {\n', '            sourceTokenUsedAmount = ExchangeInterface(exchangeContract).fillOrdersUpTo(\n', '                orderAddresses0x,\n', '                orderValues0x,\n', '                sourceTokenAmountToUse,\n', '                false, // shouldThrowOnInsufficientBalanceOrAllowance\n', '                v,\n', '                r,\n', '                s);\n', '        } else {\n', '            sourceTokenUsedAmount = ExchangeInterface(exchangeContract).fillOrder(\n', '                orderAddresses0x[0],\n', '                orderValues0x[0],\n', '                sourceTokenAmountToUse,\n', '                false, // shouldThrowOnInsufficientBalanceOrAllowance\n', '                v[0],\n', '                r[0],\n', '                s[0]);\n', '        }\n', '\n', '        destTokenAmount = getPartialAmount(\n', '            sourceTokenUsedAmount,\n', '            summations[0], // takerTokenAmountTotal (aka sourceTokenAmount)\n', '            summations[1]  // makerTokenAmountTotal (aka destTokenAmount)\n', '        );\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title EIP20/ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract EIP20 is ERC20 {\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', '}\n', '\n', 'interface NonCompliantEIP20 {\n', '    function transfer(address _to, uint _value) external;\n', '    function transferFrom(address _from, address _to, uint _value) external;\n', '    function approve(address _spender, uint _value) external;\n', '}\n', '\n', '/**\n', ' * @title EIP20/ERC20 wrapper that will support noncompliant ERC20s\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' * @dev see https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n', ' */\n', 'contract EIP20Wrapper {\n', '\n', '    function eip20Transfer(\n', '        address token,\n', '        address to,\n', '        uint256 value)\n', '        internal\n', '        returns (bool result) {\n', '\n', '        NonCompliantEIP20(token).transfer(to, value);\n', '\n', '        assembly {\n', '            switch returndatasize()   \n', '            case 0 {                        // non compliant ERC20\n', '                result := not(0)            // result is true\n', '            }\n', '            case 32 {                       // compliant ERC20\n', '                returndatacopy(0, 0, 32) \n', '                result := mload(0)          // result == returndata of external call\n', '            }\n', '            default {                       // not an not an ERC20 token\n', '                revert(0, 0) \n', '            }\n', '        }\n', '\n', '        require(result, "eip20Transfer failed");\n', '    }\n', '\n', '    function eip20TransferFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 value)\n', '        internal\n', '        returns (bool result) {\n', '\n', '        NonCompliantEIP20(token).transferFrom(from, to, value);\n', '\n', '        assembly {\n', '            switch returndatasize()   \n', '            case 0 {                        // non compliant ERC20\n', '                result := not(0)            // result is true\n', '            }\n', '            case 32 {                       // compliant ERC20\n', '                returndatacopy(0, 0, 32) \n', '                result := mload(0)          // result == returndata of external call\n', '            }\n', '            default {                       // not an not an ERC20 token\n', '                revert(0, 0) \n', '            }\n', '        }\n', '\n', '        require(result, "eip20TransferFrom failed");\n', '    }\n', '\n', '    function eip20Approve(\n', '        address token,\n', '        address spender,\n', '        uint256 value)\n', '        internal\n', '        returns (bool result) {\n', '\n', '        NonCompliantEIP20(token).approve(spender, value);\n', '\n', '        assembly {\n', '            switch returndatasize()   \n', '            case 0 {                        // non compliant ERC20\n', '                result := not(0)            // result is true\n', '            }\n', '            case 32 {                       // compliant ERC20\n', '                returndatacopy(0, 0, 32) \n', '                result := mload(0)          // result == returndata of external call\n', '            }\n', '            default {                       // not an not an ERC20 token\n', '                revert(0, 0) \n', '            }\n', '        }\n', '\n', '        require(result, "eip20Approve failed");\n', '    }\n', '}\n', '\n', '// This provides a gatekeeping modifier for functions that can only be used by the bZx contract\n', '// Since it inherits Ownable provides typical ownership functionality with a slight modification to the transferOwnership function\n', '// Setting owner and bZxContractAddress to the same address is not supported.\n', 'contract BZxOwnable is Ownable {\n', '\n', '    address public bZxContractAddress;\n', '\n', '    event BZxOwnershipTransferred(address indexed previousBZxContract, address indexed newBZxContract);\n', '\n', "    // modifier reverts if bZxContractAddress isn't set\n", '    modifier onlyBZx() {\n', '        require(msg.sender == bZxContractAddress, "only bZx contracts can call this function");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer the bZx contract owner to a new contract address\n', '    * @param newBZxContractAddress The bZx contract address to transfer ownership to.\n', '    */\n', '    function transferBZxOwnership(address newBZxContractAddress) public onlyOwner {\n', '        require(newBZxContractAddress != address(0) && newBZxContractAddress != owner, "transferBZxOwnership::unauthorized");\n', '        emit BZxOwnershipTransferred(bZxContractAddress, newBZxContractAddress);\n', '        bZxContractAddress = newBZxContractAddress;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    * This overrides transferOwnership in Ownable to prevent setting the new owner the same as the bZxContract\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0) && newOwner != bZxContractAddress, "transferOwnership::unauthorized");\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface ExchangeInterface {\n', '    event LogError(uint8 indexed errorId, bytes32 indexed orderHash);\n', '\n', '    function fillOrder(\n', '          address[5] orderAddresses,\n', '          uint[6] orderValues,\n', '          uint fillTakerTokenAmount,\n', '          bool shouldThrowOnInsufficientBalanceOrAllowance,\n', '          uint8 v,\n', '          bytes32 r,\n', '          bytes32 s)\n', '          external\n', '          returns (uint filledTakerTokenAmount);\n', '\n', '    function fillOrdersUpTo(\n', '        address[5][] orderAddresses,\n', '        uint[6][] orderValues,\n', '        uint fillTakerTokenAmount,\n', '        bool shouldThrowOnInsufficientBalanceOrAllowance,\n', '        uint8[] v,\n', '        bytes32[] r,\n', '        bytes32[] s)\n', '        external\n', '        returns (uint);\n', '\n', '    function isValidSignature(\n', '        address signer,\n', '        bytes32 hash,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s)\n', '        external\n', '        constant\n', '        returns (bool);\n', '}\n', '\n', 'contract BZxTo0x is EIP20Wrapper, BZxOwnable {\n', '    using SafeMath for uint256;\n', '\n', '    address public exchangeContract;\n', '    address public zrxTokenContract;\n', '    address public tokenTransferProxyContract;\n', '\n', '    constructor(\n', '        address _exchange, \n', '        address _zrxToken,\n', '        address _proxy) \n', '        public \n', '    {\n', '        exchangeContract = _exchange;\n', '        zrxTokenContract = _zrxToken;\n', '        tokenTransferProxyContract = _proxy;\n', '    }\n', '\n', '    function() \n', '        public {\n', '        revert();\n', '    }\n', '\n', '   function take0xTrade(\n', '        address trader,\n', '        address vaultAddress,\n', '        uint sourceTokenAmountToUse,\n', '        bytes orderData0x, // 0x order arguments, converted to hex, padded to 32 bytes and concatenated\n', '        bytes signature0x) // ECDSA of the 0x order\n', '        public\n', '        onlyBZx\n', '        returns (\n', '            address destTokenAddress,\n', '            uint destTokenAmount,\n', '            uint sourceTokenUsedAmount)\n', '    {\n', '        (address[5][] memory orderAddresses0x, uint[6][] memory orderValues0x) = getOrderValuesFromData(orderData0x);\n', '\n', '        (sourceTokenUsedAmount, destTokenAmount) = _take0xTrade(\n', '            trader,\n', '            sourceTokenAmountToUse,\n', '            orderAddresses0x,\n', '            orderValues0x,\n', '            signature0x);\n', '\n', '        if (sourceTokenUsedAmount < sourceTokenAmountToUse) {\n', '            // all sourceToken has to be traded\n', '            revert("BZxTo0x::take0xTrade: sourceTokenUsedAmount < sourceTokenAmountToUse");\n', '        }\n', '\n', '        // transfer the destToken to the vault\n', '        eip20Transfer(\n', '            orderAddresses0x[0][2],\n', '            vaultAddress,\n', '            destTokenAmount);\n', '\n', '        destTokenAddress = orderAddresses0x[0][2]; // makerToken (aka destTokenAddress)\n', '    }\n', '\n', '    function getOrderValuesFromData(\n', '        bytes orderData0x)\n', '        public\n', '        pure\n', '        returns (\n', '            address[5][] orderAddresses,\n', '            uint[6][] orderValues) \n', '    {\n', '        address maker;\n', '        address taker;\n', '        address makerToken;\n', '        address takerToken;\n', '        address feeRecipient;\n', '        uint makerTokenAmount;\n', '        uint takerTokenAmount;\n', '        uint makerFee;\n', '        uint takerFee;\n', '        uint expirationTimestampInSec;\n', '        uint salt;\n', '        orderAddresses = new address[5][](orderData0x.length/352);\n', '        orderValues = new uint[6][](orderData0x.length/352);\n', '        for (uint i = 0; i < orderData0x.length/352; i++) {\n', '            assembly {\n', '                maker := mload(add(orderData0x, add(mul(i, 352), 32)))\n', '                taker := mload(add(orderData0x, add(mul(i, 352), 64)))\n', '                makerToken := mload(add(orderData0x, add(mul(i, 352), 96)))\n', '                takerToken := mload(add(orderData0x, add(mul(i, 352), 128)))\n', '                feeRecipient := mload(add(orderData0x, add(mul(i, 352), 160)))\n', '                makerTokenAmount := mload(add(orderData0x, add(mul(i, 352), 192)))\n', '                takerTokenAmount := mload(add(orderData0x, add(mul(i, 352), 224)))\n', '                makerFee := mload(add(orderData0x, add(mul(i, 352), 256)))\n', '                takerFee := mload(add(orderData0x, add(mul(i, 352), 288)))\n', '                expirationTimestampInSec := mload(add(orderData0x, add(mul(i, 352), 320)))\n', '                salt := mload(add(orderData0x, add(mul(i, 352), 352)))\n', '            }\n', '            orderAddresses[i] = [\n', '                maker,\n', '                taker,\n', '                makerToken,\n', '                takerToken,\n', '                feeRecipient\n', '            ];\n', '            orderValues[i] = [\n', '                makerTokenAmount,\n', '                takerTokenAmount,\n', '                makerFee,\n', '                takerFee,\n', '                expirationTimestampInSec,\n', '                salt\n', '            ];\n', '        }\n', '    }\n', '\n', '    /// @param signatures ECDSA signatures in raw bytes (rsv).\n', '    function getSignatureParts(\n', '        bytes signatures)\n', '        public\n', '        pure\n', '        returns (\n', '            uint8[] vs,\n', '            bytes32[] rs,\n', '            bytes32[] ss)\n', '    {\n', '        vs = new uint8[](signatures.length/65);\n', '        rs = new bytes32[](signatures.length/65);\n', '        ss = new bytes32[](signatures.length/65);\n', '        for (uint i = 0; i < signatures.length/65; i++) {\n', '            uint8 v;\n', '            bytes32 r;\n', '            bytes32 s;\n', '            assembly {\n', '                r := mload(add(signatures, add(mul(i, 65), 32)))\n', '                s := mload(add(signatures, add(mul(i, 65), 64)))\n', '                v := mload(add(signatures, add(mul(i, 65), 65)))\n', '            }\n', '            if (v < 27) {\n', '                v = v + 27;\n', '            }\n', '            vs[i] = v;\n', '            rs[i] = r;\n', '            ss[i] = s;\n', '        }\n', '    }\n', '\n', '    /// @dev Calculates partial value given a numerator and denominator.\n', '    /// @param numerator Numerator.\n', '    /// @param denominator Denominator.\n', '    /// @param target Value to calculate partial of.\n', '    /// @return Partial value of target.\n', '    function getPartialAmount(uint numerator, uint denominator, uint target)\n', '        public\n', '        pure\n', '        returns (uint)\n', '    {\n', '        return SafeMath.div(SafeMath.mul(numerator, target), denominator);\n', '    }\n', '\n', '    function set0xExchange (\n', '        address _exchange)\n', '        public\n', '        onlyOwner\n', '    {\n', '        exchangeContract = _exchange;\n', '    }\n', '\n', '    function setZRXToken (\n', '        address _zrxToken)\n', '        public\n', '        onlyOwner\n', '    {\n', '        zrxTokenContract = _zrxToken;\n', '    }\n', '\n', '    function set0xTokenProxy (\n', '        address _proxy)\n', '        public\n', '        onlyOwner\n', '    {\n', '        tokenTransferProxyContract = _proxy;\n', '    }\n', '\n', '    function approveFor (\n', '        address token,\n', '        address spender,\n', '        uint value)\n', '        public\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        eip20Approve(\n', '            token,\n', '            spender,\n', '            value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function _take0xTrade(\n', '        address trader,\n', '        uint sourceTokenAmountToUse,\n', '        address[5][] orderAddresses0x,\n', '        uint[6][] orderValues0x,\n', '        bytes signature)\n', '        internal\n', '        returns (uint sourceTokenUsedAmount, uint destTokenAmount) \n', '    {\n', '        uint[3] memory summations; // takerTokenAmountTotal, makerTokenAmountTotal, zrxTokenAmount\n', '\n', '        for (uint i = 0; i < orderAddresses0x.length; i++) {\n', '            summations[0] += orderValues0x[0][1]; // takerTokenAmountTotal\n', '            summations[1] += orderValues0x[0][0]; // makerTokenAmountTotal\n', '            \n', '            if (orderAddresses0x[i][4] != address(0) && // feeRecipient\n', '                    orderValues0x[i][3] > 0 // takerFee\n', '            ) {\n', '                summations[2] += orderValues0x[i][3]; // zrxTokenAmount\n', '            }\n', '        }\n', '        if (summations[2] > 0) {\n', '            // The 0x TokenTransferProxy already has unlimited transfer allowance for ZRX from this contract (set during deployment of this contract)\n', '            eip20TransferFrom(\n', '                zrxTokenContract,\n', '                trader,\n', '                this,\n', '                summations[2]);\n', '        }\n', '\n', '        (uint8[] memory v, bytes32[] memory r, bytes32[] memory s) = getSignatureParts(signature);\n', '\n', '        // Increase the allowance for 0x Exchange Proxy to transfer the sourceToken needed for the 0x trade\n', '        // orderAddresses0x[0][3] -> takerToken/sourceToken\n', '        eip20Approve(\n', '            orderAddresses0x[0][3],\n', '            tokenTransferProxyContract,\n', '            EIP20(orderAddresses0x[0][3]).allowance(this, tokenTransferProxyContract).add(sourceTokenAmountToUse));\n', '\n', '        if (orderAddresses0x.length > 0) {\n', '            sourceTokenUsedAmount = ExchangeInterface(exchangeContract).fillOrdersUpTo(\n', '                orderAddresses0x,\n', '                orderValues0x,\n', '                sourceTokenAmountToUse,\n', '                false, // shouldThrowOnInsufficientBalanceOrAllowance\n', '                v,\n', '                r,\n', '                s);\n', '        } else {\n', '            sourceTokenUsedAmount = ExchangeInterface(exchangeContract).fillOrder(\n', '                orderAddresses0x[0],\n', '                orderValues0x[0],\n', '                sourceTokenAmountToUse,\n', '                false, // shouldThrowOnInsufficientBalanceOrAllowance\n', '                v[0],\n', '                r[0],\n', '                s[0]);\n', '        }\n', '\n', '        destTokenAmount = getPartialAmount(\n', '            sourceTokenUsedAmount,\n', '            summations[0], // takerTokenAmountTotal (aka sourceTokenAmount)\n', '            summations[1]  // makerTokenAmountTotal (aka destTokenAmount)\n', '        );\n', '    }\n', '}']
