['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' * Based on Ownable.sol from https://github.com/OpenZeppelin/zeppelin-solidity/tree/master\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner returns (bool) {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '    OwnershipTransferred(owner, newOwner);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' * Based on SafeMath.sol from https://github.com/OpenZeppelin/zeppelin-solidity/tree/master\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  \n', '  // mapping of addresses with according balances\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 public totalSupply;\n', '\n', '  /**\n', '  * @dev Gets the totalSupply.\n', '  * @return An uint256 representing the total supply of tokens.\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply;\n', '  } \n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Custom ERC20 token\n', ' *\n', ' * @dev Implementation and upgraded version of the basic standard token.\n', ' */\n', 'contract CustomToken is ERC20, BasicToken, Ownable {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  // boolean if transfers can be done\n', '  bool public enableTransfer = true;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenTransferEnabled() {\n', '    require(enableTransfer);\n', '    _;\n', '  }\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '  event EnableTransfer(address indexed owner, uint256 timestamp);\n', '  event DisableTransfer(address indexed owner, uint256 timestamp);\n', '\n', '  \n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) whenTransferEnabled public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   * The owner can transfer tokens at will. This to implement a reward pool contract in a later phase \n', '   * that will transfer tokens for rewarding.\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) whenTransferEnabled public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '\n', '\n', '    if (msg.sender!=owner) {\n', '      require(_value <= allowed[_from][msg.sender]);\n', '      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '      balances[_from] = balances[_from].sub(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '    }  else {\n', '      balances[_from] = balances[_from].sub(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '    }\n', '\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) whenTransferEnabled public returns (bool) {\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '    \n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /* Approves and then calls the receiving contract */\n', '  function approveAndCallAsContract(address _spender, uint256 _value, bytes _extraData) onlyOwner public returns (bool success) {\n', '    // check if the _spender already has some amount approved else use increase approval.\n', '    // maybe not for exchanges\n', '    //require((_value == 0) || (allowed[this][_spender] == 0));\n', '\n', '    allowed[this][_spender] = _value;\n', '    Approval(this, _spender, _value);\n', '\n', '    //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn&#39;t have to include a contract in here just for this.\n', '    //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '    //it is assumed when one does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '    require(_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), this, _value, this, _extraData));\n', '    return true;\n', '  }\n', '\n', '  /* \n', '   * Approves and then calls the receiving contract \n', '   */\n', '  function approveAndCall(address _spender, uint256 _value, bytes _extraData) whenTransferEnabled public returns (bool success) {\n', '    // check if the _spender already has some amount approved else use increase approval.\n', '    // maybe not for exchanges\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '\n', '    //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn&#39;t have to include a contract in here just for this.\n', '    //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '    //it is assumed when one does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '    require(_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) whenTransferEnabled public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) whenTransferEnabled public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(address _burner, uint256 _value) onlyOwner public returns (bool) {\n', '    require(_value <= balances[_burner]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_burner] = balances[_burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Burn(_burner, _value);\n', '    return true;\n', '  }\n', '   /**\n', '   * @dev called by the owner to enable transfers\n', '   */\n', '  function enableTransfer() onlyOwner public returns (bool) {\n', '    enableTransfer = true;\n', '    EnableTransfer(owner, now);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to disable tranfers\n', '   */\n', '  function disableTransfer() onlyOwner whenTransferEnabled public returns (bool) {\n', '    enableTransfer = false;\n', '    DisableTransfer(owner, now);\n', '    return true;\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Identify token\n', ' * @dev ERC20 compliant token, where all tokens are pre-assigned to the token contract.\n', ' * Note they can later distribute these tokens as they wish using `transfer` and other\n', ' * `StandardToken` functions.\n', ' */\n', 'contract Identify is CustomToken {\n', '\n', '  string public constant name = "IDENTIFY";\n', '  string public constant symbol = "IDF"; \n', '  uint8 public constant decimals = 6;\n', '\n', '  uint256 public constant INITIAL_SUPPLY = 49253333333 * (10 ** uint256(decimals));\n', '\n', '  /**\n', '   * @dev Constructor that gives the token contract all of initial tokens.\n', '   */\n', '  function Identify() public {\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[this] = INITIAL_SUPPLY;\n', '    Transfer(0x0, this, INITIAL_SUPPLY);\n', '  }\n', '\n', '}\n', '\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Whitelist contract\n', ' * @dev Participants for the presale and public sale must be \n', ' * registered in the whitelist. Admins can add and remove \n', ' * participants and other admins.\n', ' */\n', 'contract Whitelist is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // a boolean to check if the presale is paused\n', '    bool public paused = false;\n', '\n', '    // the amount of participants in the whitelist\n', '    uint256 public participantAmount;\n', '\n', '    // mapping of participants\n', '    mapping (address => bool) public isParticipant;\n', '    \n', '    // mapping of admins\n', '    mapping (address => bool) public isAdmin;\n', '\n', '    event AddParticipant(address _participant);\n', '    event AddAdmin(address _admin, uint256 _timestamp);\n', '    event RemoveParticipant(address _participant);\n', '    event Paused(address _owner, uint256 _timestamp);\n', '    event Resumed(address _owner, uint256 _timestamp);\n', '  \n', '    /**\n', '    * event for claimed tokens logging\n', '    * @param owner where tokens are sent to\n', '    * @param claimtoken is the address of the ERC20 compliant token\n', '    * @param amount amount of tokens sent back\n', '    */\n', '    event ClaimedTokens(address indexed owner, address claimtoken, uint amount);\n', '  \n', '    /**\n', '     * modifier to check if the whitelist is not paused\n', '     */\n', '    modifier notPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * modifier to check the admin or owner runs this function\n', '     */\n', '    modifier onlyAdmin() {\n', '        require(isAdmin[msg.sender] || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * fallback function to send the eth back to the sender\n', '     */\n', '    function () payable public {\n', '        // give ETH back\n', '        msg.sender.transfer(msg.value);\n', '    }\n', '\n', '    /**\n', '     * constructor which adds the owner in the admin list\n', '     */\n', '    function Whitelist() public {\n', '        require(addAdmin(msg.sender));\n', '    }\n', '\n', '    /**\n', '     * @param _participant address of participant\n', '     * @return true if the _participant is in the list\n', '     */\n', '    function isParticipant(address _participant) public view returns (bool) {\n', '        require(address(_participant) != 0);\n', '        return isParticipant[_participant];\n', '    }\n', '\n', '    /**\n', '     * @param _participant address of participant\n', '     * @return true if _participant is added successful\n', '     */\n', '    function addParticipant(address _participant) public notPaused onlyAdmin returns (bool) {\n', '        require(address(_participant) != 0);\n', '        require(isParticipant[_participant] == false);\n', '\n', '        isParticipant[_participant] = true;\n', '        participantAmount++;\n', '        AddParticipant(_participant);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @param _participant address of participant\n', '     * @return true if _participant is removed successful\n', '     */\n', '    function removeParticipant(address _participant) public onlyAdmin returns (bool) {\n', '        require(address(_participant) != 0);\n', '        require(isParticipant[_participant]);\n', '        require(msg.sender != _participant);\n', '\n', '        delete isParticipant[_participant];\n', '        participantAmount--;\n', '        RemoveParticipant(_participant);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @param _admin address of admin\n', '     * @return true if _admin is added successful\n', '     */\n', '    function addAdmin(address _admin) public onlyAdmin returns (bool) {\n', '        require(address(_admin) != 0);\n', '        require(!isAdmin[_admin]);\n', '\n', '        isAdmin[_admin] = true;\n', '        AddAdmin(_admin, now);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @param _admin address of admin\n', '     * @return true if _admin is removed successful\n', '     */\n', '    function removeAdmin(address _admin) public onlyAdmin returns (bool) {\n', '        require(address(_admin) != 0);\n', '        require(isAdmin[_admin]);\n', '        require(msg.sender != _admin);\n', '\n', '        delete isAdmin[_admin];\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Pauses the whitelist if there is any issue\n', '     */\n', '    function pauseWhitelist() public onlyAdmin returns (bool) {\n', '        paused = true;\n', '        Paused(msg.sender,now);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice resumes the whitelist if there is any issue\n', '     */    \n', '    function resumeWhitelist() public onlyAdmin returns (bool) {\n', '        paused = false;\n', '        Resumed(msg.sender,now);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice used to save gas\n', '     */ \n', '    function addMultipleParticipants(address[] _participants ) public onlyAdmin returns (bool) {\n', '        \n', '        for ( uint i = 0; i < _participants.length; i++ ) {\n', '            require(addParticipant(_participants[i]));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice used to save gas. Backup function.\n', '     */ \n', '    function addFiveParticipants(address participant1, address participant2, address participant3, address participant4, address participant5) public onlyAdmin returns (bool) {\n', '        require(addParticipant(participant1));\n', '        require(addParticipant(participant2));\n', '        require(addParticipant(participant3));\n', '        require(addParticipant(participant4));\n', '        require(addParticipant(participant5));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice used to save gas. Backup function.\n', '     */ \n', '    function addTenParticipants(address participant1, address participant2, address participant3, address participant4, address participant5,\n', '     address participant6, address participant7, address participant8, address participant9, address participant10) public onlyAdmin returns (bool) \n', '     {\n', '        require(addParticipant(participant1));\n', '        require(addParticipant(participant2));\n', '        require(addParticipant(participant3));\n', '        require(addParticipant(participant4));\n', '        require(addParticipant(participant5));\n', '        require(addParticipant(participant6));\n', '        require(addParticipant(participant7));\n', '        require(addParticipant(participant8));\n', '        require(addParticipant(participant9));\n', '        require(addParticipant(participant10));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice This method can be used by the owner to extract mistakenly sent tokens to this contract.\n', '    * @param _claimtoken The address of the token contract that you want to recover\n', '    * set to 0 in case you want to extract ether.\n', '    */\n', '    function claimTokens(address _claimtoken) onlyAdmin public returns (bool) {\n', '        if (_claimtoken == 0x0) {\n', '            owner.transfer(this.balance);\n', '            return true;\n', '        }\n', '\n', '        ERC20 claimtoken = ERC20(_claimtoken);\n', '        uint balance = claimtoken.balanceOf(this);\n', '        claimtoken.transfer(owner, balance);\n', '        ClaimedTokens(_claimtoken, owner, balance);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Presale\n', ' * @dev Presale is a base contract for managing a token presale.\n', ' * Presales have a start and end timestamps, where investors can make\n', ' * token purchases and the presale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive. Note that the presale contract\n', ' * must be owner of the token in order to be able to mint it.\n', ' */\n', 'contract Presale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  // token being sold\n', '  Identify public token;\n', '  // address of the token being sold\n', '  address public tokenAddress;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are forwarded\n', '  address public wallet;\n', '\n', '  // whitelist contract\n', '  Whitelist public whitelist;\n', '\n', '  // how many token units a buyer gets per ETH\n', '  uint256 public rate = 420000;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;  \n', '  \n', '  // amount of tokens raised\n', '  uint256 public tokenRaised;\n', '\n', '  // parameters for the presale:\n', '  // maximum of wei the presale wants to raise\n', '  uint256 public capWEI;\n', '  // maximum of tokens the presale wants to raise\n', '  uint256 public capTokens;\n', '  // bonus investors get in the presale - 25%\n', '  uint256 public bonusPercentage = 125;\n', '  // minimum amount of wei an investor needs to send in order to get tokens\n', '  uint256 public minimumWEI;\n', '  // maximum amount of wei an investor can send in order to get tokens\n', '  uint256 public maximumWEI;\n', '  // a boolean to check if the presale is paused\n', '  bool public paused = false;\n', '  // a boolean to check if the presale is finalized\n', '  bool public isFinalized = false;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value WEIs paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  \n', '  /**\n', '   * event for claimed tokens logging\n', '   * @param owner where tokens are sent to\n', '   * @param claimtoken is the address of the ERC20 compliant token\n', '   * @param amount amount of tokens sent back\n', '   */\n', '  event ClaimedTokens(address indexed owner, address claimtoken, uint amount);\n', '  \n', '  /**\n', '   * event for pause logging\n', '   * @param owner who invoked the pause function\n', '   * @param timestamp when the pause function is invoked\n', '   */\n', '  event Paused(address indexed owner, uint256 timestamp);\n', '  \n', '  /**\n', '   * event for resume logging\n', '   * @param owner who invoked the resume function\n', '   * @param timestamp when the resume function is invoked\n', '   */\n', '  event Resumed(address indexed owner, uint256 timestamp);\n', '\n', '  /**\n', '   * modifier to check if a participant is in the whitelist\n', '   */\n', '  modifier isInWhitelist(address beneficiary) {\n', '    // first check if sender is in whitelist\n', '    require(whitelist.isParticipant(beneficiary));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * modifier to check if the presale is not paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '  /**\n', '   * modifier to check if the presale is not finalized\n', '   */\n', '  modifier whenNotFinalized() {\n', '    require(!isFinalized);\n', '    _;\n', '  }\n', '  /**\n', '   * modifier to check only multisigwallet can do this operation\n', '   */\n', '  modifier onlyMultisigWallet() {\n', '    require(msg.sender == wallet);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * constructor for Presale\n', '   * @param _startTime start timestamps where investments are allowed (inclusive)\n', '   * @param _wallet address where funds are forwarded\n', '   * @param _token address of the token being sold\n', '   * @param _whitelist whitelist contract address\n', '   * @param _capETH maximum of ETH the presale wants to raise\n', '   * @param _capTokens maximum amount of tokens the presale wants to raise\n', '   * @param _minimumETH minimum amount of ETH an investor needs to send in order to get tokens\n', '   * @param _maximumETH maximum amount of ETH an investor can send in order to get tokens\n', '   */\n', '  function Presale(uint256 _startTime, address _wallet, address _token, address _whitelist, uint256 _capETH, uint256 _capTokens, uint256 _minimumETH, uint256 _maximumETH) public {\n', '  \n', '    require(_startTime >= now);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '    require(_whitelist != address(0));\n', '    require(_capETH > 0);\n', '    require(_capTokens > 0);\n', '    require(_minimumETH > 0);\n', '    require(_maximumETH > 0);\n', '\n', '    startTime = _startTime;\n', '    endTime = _startTime.add(19 weeks);\n', '    wallet = _wallet;\n', '    tokenAddress = _token;\n', '    token = Identify(_token);\n', '    whitelist = Whitelist(_whitelist);\n', '    capWEI = _capETH * (10 ** uint256(18));\n', '    capTokens = _capTokens * (10 ** uint256(6));\n', '    minimumWEI = _minimumETH * (10 ** uint256(18));\n', '    maximumWEI = _maximumETH * (10 ** uint256(18));\n', '  }\n', '\n', '  /**\n', '   * fallback function can be used to buy tokens\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) isInWhitelist(beneficiary) whenNotPaused whenNotFinalized public payable returns (bool) {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '    require(!hasEnded());\n', '    require(!isContract(msg.sender));\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(weiAmount);\n', '    require(tokenRaised.add(tokens) <= capTokens);\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    tokenRaised = tokenRaised.add(tokens);\n', '\n', '    require(token.transferFrom(tokenAddress, beneficiary, tokens));\n', '    \n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @return true if crowdsale event has ended\n', '   */\n', '  function hasEnded() public view returns (bool) {\n', '    bool capReached = weiRaised >= capWEI;\n', '    bool capTokensReached = tokenRaised >= capTokens;\n', '    bool ended = now > endTime;\n', '    return (capReached || capTokensReached) || ended;\n', '  }\n', '\n', '\n', '\n', '  /**\n', '   * calculate the amount of tokens a participant gets for a specific weiAmount\n', '   * @return the token amount\n', '   */\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    // wei has 18 decimals, our token has 6 decimals -> so need for convertion\n', '    uint256 bonusIntegrated = weiAmount.div(1000000000000).mul(rate).mul(bonusPercentage).div(100);\n', '    return bonusIntegrated;\n', '  }\n', '\n', '  /**\n', '   * send ether to the fund collection wallet\n', '   * @return true if successful\n', '   */\n', '  function forwardFunds() internal returns (bool) {\n', '    wallet.transfer(msg.value);\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @return true if the transaction can buy tokens\n', '   */\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    bool underMaximumWEI = msg.value <= maximumWEI;\n', '    bool withinCap = weiRaised.add(msg.value) <= capWEI;\n', '    bool minimumWEIReached;\n', '    // check to fill in last gap\n', '    if ( capWEI.sub(weiRaised) < minimumWEI) {\n', '      minimumWEIReached = true;\n', '    } else {\n', '      minimumWEIReached = msg.value >= minimumWEI;\n', '    }\n', '    return (withinPeriod && nonZeroPurchase) && (withinCap && (minimumWEIReached && underMaximumWEI));\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the multisigwallet to transfer control of the Identify Token to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnershipToken(address newOwner) onlyMultisigWallet public returns (bool) {\n', '    require(token.transferOwnership(newOwner));\n', '    return true;\n', '  }\n', '\n', '   /**\n', '   * Overwrite method of Ownable\n', '   * @dev Allows the multisigwallet to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyMultisigWallet public returns (bool) {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '    OwnershipTransferred(owner, newOwner);\n', '    return true;\n', '  }\n', '\n', '   /**\n', '   * @dev Finalize the presale.\n', '   */  \n', '   function finalize() onlyMultisigWallet whenNotFinalized public returns (bool) {\n', '    require(hasEnded());\n', '\n', '    // check if cap is reached\n', '    if (!(capWEI == weiRaised)) {\n', '      // calculate remaining tokens\n', '      uint256 remainingTokens = capTokens.sub(tokenRaised);\n', '      // burn remaining tokens\n', '      require(token.burn(tokenAddress, remainingTokens));    \n', '    }\n', '    require(token.transferOwnership(wallet));\n', '    isFinalized = true;\n', '    return true;\n', '  }\n', '\n', '  ////////////////////////\n', '  /// SAFETY FUNCTIONS ///\n', '  ////////////////////////\n', '\n', '  /**\n', '   * @dev Internal function to determine if an address is a contract\n', '   * @param _addr The address being queried\n', '   * @return True if `_addr` is a contract\n', '   */\n', '  function isContract(address _addr) constant internal returns (bool) {\n', '    if (_addr == 0) { \n', '      return false; \n', '    }\n', '    uint256 size;\n', '    assembly {\n', '        size := extcodesize(_addr)\n', '     }\n', '    return (size > 0);\n', '  }\n', '\n', '\n', '  /**\n', '   * @notice This method can be used by the owner to extract mistakenly sent tokens to this contract.\n', '   * @param _claimtoken The address of the token contract that you want to recover\n', '   * set to 0 in case you want to extract ether.\n', '   */\n', '  function claimTokens(address _claimtoken) onlyOwner public returns (bool) {\n', '    if (_claimtoken == 0x0) {\n', '      owner.transfer(this.balance);\n', '      return true;\n', '    }\n', '\n', '    ERC20 claimtoken = ERC20(_claimtoken);\n', '    uint balance = claimtoken.balanceOf(this);\n', '    claimtoken.transfer(owner, balance);\n', '    ClaimedTokens(_claimtoken, owner, balance);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice Pauses the presale if there is an issue\n', '   */\n', '  function pausePresale() onlyOwner public returns (bool) {\n', '    paused = true;\n', '    Paused(owner, now);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice Resumes the presale\n', '   */  \n', '  function resumePresale() onlyOwner public returns (bool) {\n', '    paused = false;\n', '    Resumed(owner, now);\n', '    return true;\n', '  }\n', '\n', '\n', '}']