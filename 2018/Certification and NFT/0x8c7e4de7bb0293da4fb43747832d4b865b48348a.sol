['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', 'contract ENS {\n', '    function owner(bytes32 node) constant returns (address);\n', '    function resolver(bytes32 node) constant returns (Resolver);\n', '    function ttl(bytes32 node) constant returns (uint64);\n', '    function setOwner(bytes32 node, address owner);\n', '    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\n', '    function setResolver(bytes32 node, address resolver);\n', '    function setTTL(bytes32 node, uint64 ttl);\n', '}\n', '\n', 'contract Resolver {\n', '    function addr(bytes32 node) constant returns (address);\n', '}\n', '\n', 'contract ENSResolver is Ownable {\n', '    ENS public ens;\n', '\n', '    function ENSResolver(address ensAddress) public {\n', '        require(ensAddress != address(0));\n', '        ens = ENS(ensAddress);\n', '    }\n', '\n', '    function setENS(address ensAddress) public onlyOwner {\n', '        require(ensAddress != address(0));\n', '        ens = ENS(ensAddress);\n', '    }\n', '\n', '    function resolve(bytes32 node) public view returns (address) {\n', '        Resolver resolver = Resolver(ens.resolver(node));\n', '        return resolver.addr(node);\n', '    }\n', '}']