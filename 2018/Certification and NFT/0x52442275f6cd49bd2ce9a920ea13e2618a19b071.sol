['pragma solidity ^0.4.11;\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', 'library Bonus {\n', '    uint256 constant pointMultiplier = 1e18; //100% = 1*10^18 points\n', '\n', '    uint16 constant ORIGIN_YEAR = 1970;\n', '\n', '    function getBonusFactor(uint256 basisTokens, uint timestamp)\n', '    internal pure returns (uint256 factor)\n', '    {\n', '        uint256[4][5] memory factors = [[uint256(300), 400, 500, 750],\n', '        [uint256(200), 300, 400, 600],\n', '        [uint256(150), 250, 300, 500],\n', '        [uint256(100), 150, 250, 400],\n', '        [uint256(0),   100, 150, 300]];\n', '\n', '        uint[4] memory cutofftimes = [toTimestamp(2018, 3, 24),\n', '        toTimestamp(2018, 4, 5),\n', '        toTimestamp(2018, 5, 5),\n', '        toTimestamp(2018, 6, 5)];\n', '\n', '        //compare whole tokens\n', '        uint256 tokenAmount = basisTokens / pointMultiplier;\n', '\n', '        //set default to the 0% bonus\n', '        uint256 timeIndex = 4;\n', '        uint256 amountIndex = 0;\n', '\n', '        // 0.02 NZD per token = 50 tokens per NZD\n', '        if (tokenAmount >= 500000000) {\n', '            // >10M NZD\n', '            amountIndex = 3;\n', '        } else if (tokenAmount >= 100000000) {\n', '            // >2M NZD\n', '            amountIndex = 2;\n', '        } else if (tokenAmount >= 25000000) {\n', '            // >500K NZD\n', '            amountIndex = 1;\n', '        } else {\n', '            // <500K NZD\n', '            //amountIndex = 0;\n', '        }\n', '\n', '        uint256 maxcutoffindex = cutofftimes.length;\n', '        for (uint256 i = 0; i < maxcutoffindex; i++) {\n', '            if (timestamp < cutofftimes[i]) {\n', '                timeIndex = i;\n', '                break;\n', '            }\n', '        }\n', '\n', '        return factors[timeIndex][amountIndex];\n', '    }\n', '\n', '    // Timestamp functions based on\n', '    // https://github.com/pipermerriam/ethereum-datetime/blob/master/contracts/DateTime.sol\n', '    function toTimestamp(uint16 year, uint8 month, uint8 day)\n', '    internal pure returns (uint timestamp) {\n', '        uint16 i;\n', '\n', '        // Year\n', '        timestamp += (year - ORIGIN_YEAR) * 1 years;\n', '        timestamp += (leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR)) * 1 days;\n', '\n', '        // Month\n', '        uint8[12] memory monthDayCounts;\n', '        monthDayCounts[0] = 31;\n', '        if (isLeapYear(year)) {\n', '            monthDayCounts[1] = 29;\n', '        }\n', '        else {\n', '            monthDayCounts[1] = 28;\n', '        }\n', '        monthDayCounts[2] = 31;\n', '        monthDayCounts[3] = 30;\n', '        monthDayCounts[4] = 31;\n', '        monthDayCounts[5] = 30;\n', '        monthDayCounts[6] = 31;\n', '        monthDayCounts[7] = 31;\n', '        monthDayCounts[8] = 30;\n', '        monthDayCounts[9] = 31;\n', '        monthDayCounts[10] = 30;\n', '        monthDayCounts[11] = 31;\n', '\n', '        for (i = 1; i < month; i++) {\n', '            timestamp += monthDayCounts[i - 1] * 1 days;\n', '        }\n', '\n', '        // Day\n', '        timestamp += (day - 1) * 1 days;\n', '\n', '        // Hour, Minute, and Second are assumed as 0 (we calculate in GMT)\n', '\n', '        return timestamp;\n', '    }\n', '\n', '    function leapYearsBefore(uint year)\n', '    internal pure returns (uint) {\n', '        year -= 1;\n', '        return year / 4 - year / 100 + year / 400;\n', '    }\n', '\n', '    function isLeapYear(uint16 year)\n', '    internal pure returns (bool) {\n', '        if (year % 4 != 0) {\n', '            return false;\n', '        }\n', '        if (year % 100 != 0) {\n', '            return true;\n', '        }\n', '        if (year % 400 != 0) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract ClearToken is StandardToken {\n', '\n', '    // data structures\n', '    enum States {\n', '        Initial, // deployment time\n', '        ValuationSet,\n', '        Ico, // whitelist addresses, accept funds, update balances\n', '        Underfunded, // ICO time finished and minimal amount not raised\n', '        Operational, // production phase\n', '        Paused         // for contract upgrades\n', '    }\n', '\n', '    mapping(address => uint256) public ethPossibleRefunds;\n', '\n', '    uint256 public soldTokens;\n', '\n', '    string public constant name = "CLEAR Token";\n', '\n', '    string public constant symbol = "CLEAR";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '    mapping(address => bool) public whitelist;\n', '\n', '    address public reserves; //30%\n', '\n', '    address public stateControl;\n', '\n', '    address public whitelistControl;\n', '\n', '    address public withdrawControl;\n', '\n', '    address public tokenAssignmentControl;\n', '\n', '    States public state;\n', '\n', '    uint256 public startAcceptingFundsBlock;\n', '\n', '    uint256 public endTimestamp;\n', '\n', '    uint256 public ETH_CLEAR; //number of tokens per ETH\n', '\n', '    uint256 public constant NZD_CLEAR = 50; //fixed rate of 50 CLEAR to 1 NZD\n', '\n', '    uint256 constant pointMultiplier = 1e18; //100% = 1*10^18 points\n', '\n', '    uint256 public constant maxTotalSupply = 102400000000 * pointMultiplier; //102.4B tokens\n', '\n', '    uint256 public constant percentForSale = 30;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    //this creates the contract and stores the owner. it also passes in 3 addresses to be used later during the lifetime of the contract.\n', '    function ClearToken(\n', '        address _stateControl\n', '    , address _whitelistControl\n', '    , address _withdrawControl\n', '    , address _tokenAssignmentControl\n', '    , address _reserves //30%\n', '    ) {\n', '        stateControl = _stateControl;\n', '        whitelistControl = _whitelistControl;\n', '        withdrawControl = _withdrawControl;\n', '        tokenAssignmentControl = _tokenAssignmentControl;\n', '        moveToState(States.Initial);\n', '        endTimestamp = 0;\n', '        ETH_CLEAR = 0;\n', '        totalSupply = maxTotalSupply;\n', '        soldTokens = 0;\n', '        reserves = _reserves;\n', '        balances[reserves] = totalSupply;\n', '        Mint(reserves, totalSupply);\n', '        Transfer(0x0, reserves, totalSupply);\n', '    }\n', '\n', '    event Whitelisted(address addr);\n', '\n', '    event StateTransition(States oldState, States newState);\n', '\n', '    modifier onlyWhitelist() {\n', '        require(msg.sender == whitelistControl);\n', '        _;\n', '    }\n', '\n', '    modifier onlyStateControl() {\n', '        require(msg.sender == stateControl);\n', '        _;\n', '    }\n', '\n', '    modifier onlyTokenAssignmentControl() {\n', '        require(msg.sender == tokenAssignmentControl);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWithdraw() {\n', '        require(msg.sender == withdrawControl);\n', '        _;\n', '    }\n', '\n', '    modifier requireState(States _requiredState) {\n', '        require(state == _requiredState);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    BEGIN ICO functions\n', '    */\n', '\n', '    //this is the main funding function, it updates the balances of tokens during the ICO.\n', '    //no particular incentive schemes have been implemented here\n', '    //it is only accessible during the "ICO" phase.\n', '    function() payable\n', '    public\n', '    requireState(States.Ico)\n', '    {\n', '        require(whitelist[msg.sender] == true);\n', '\n', '        require(block.timestamp < endTimestamp);\n', '        require(block.number >= startAcceptingFundsBlock);\n', '\n', '        uint256 soldToTuserWithBonus = calcBonus(msg.value);\n', '\n', '        issueTokensToUser(msg.sender, soldToTuserWithBonus);\n', '        ethPossibleRefunds[msg.sender] = ethPossibleRefunds[msg.sender].add(msg.value);\n', '    }\n', '\n', '    function issueTokensToUser(address beneficiary, uint256 amount)\n', '    internal\n', '    {\n', '        uint256 soldTokensAfterInvestment = soldTokens.add(amount);\n', '        require(soldTokensAfterInvestment <= maxTotalSupply.mul(percentForSale).div(100));\n', '\n', '        balances[beneficiary] = balances[beneficiary].add(amount);\n', '        balances[reserves] = balances[reserves].sub(amount);\n', '        soldTokens = soldTokensAfterInvestment;\n', '        Transfer(reserves, beneficiary, amount);\n', '    }\n', '\n', '    function calcBonus(uint256 weiAmount)\n', '    constant\n', '    public\n', '    returns (uint256 resultingTokens)\n', '    {\n', '        uint256 basisTokens = weiAmount.mul(ETH_CLEAR);\n', '        //percentages are integer numbers as per mill (promille) so we can accurately calculate 0.5% = 5. 100% = 1000\n', '        uint256 perMillBonus = Bonus.getBonusFactor(basisTokens, now);\n', '        //100% + bonus % times original amount divided by 100%.\n', '        return basisTokens.mul(per_mill + perMillBonus).div(per_mill);\n', '    }\n', '\n', '    uint256 constant per_mill = 1000;\n', '\n', '\n', '    function moveToState(States _newState)\n', '    internal\n', '    {\n', '        StateTransition(state, _newState);\n', '        state = _newState;\n', '    }\n', '    // ICO contract configuration function\n', '    // new_ETH_NZD is the new rate of ETH in NZD (from which to derive tokens per ETH)\n', '    // newTimestamp is the number of seconds since 1970-01-01 00:00:00 GMT at which the ICO must stop. It must be set in the future.\n', '    function updateEthICOVariables(uint256 _new_ETH_NZD, uint256 _newEndTimestamp)\n', '    public\n', '    onlyStateControl\n', '    {\n', '        require(state == States.Initial || state == States.ValuationSet);\n', '        require(_new_ETH_NZD > 0);\n', '        require(block.timestamp < _newEndTimestamp);\n', '        endTimestamp = _newEndTimestamp;\n', '        // initial conversion rate of ETH_CLEAR set now, this is used during the Ico phase.\n', '        ETH_CLEAR = _new_ETH_NZD.mul(NZD_CLEAR);\n', '        // check pointMultiplier\n', '        moveToState(States.ValuationSet);\n', '    }\n', '\n', '    function updateETHNZD(uint256 _new_ETH_NZD)\n', '    public\n', '    onlyTokenAssignmentControl\n', '    requireState(States.Ico)\n', '    {\n', '        require(_new_ETH_NZD > 0);\n', '        ETH_CLEAR = _new_ETH_NZD.mul(NZD_CLEAR);\n', '    }\n', '\n', '    function startICO()\n', '    public\n', '    onlyStateControl\n', '    requireState(States.ValuationSet)\n', '    {\n', '        require(block.timestamp < endTimestamp);\n', '        startAcceptingFundsBlock = block.number;\n', '        moveToState(States.Ico);\n', '    }\n', '\n', '    function addPresaleAmount(address beneficiary, uint256 amount)\n', '    public\n', '    onlyTokenAssignmentControl\n', '    {\n', '        require(state == States.ValuationSet || state == States.Ico);\n', '        issueTokensToUser(beneficiary, amount);\n', '    }\n', '\n', '\n', '    function endICO()\n', '    public\n', '    onlyStateControl\n', '    requireState(States.Ico)\n', '    {\n', '        finishMinting();\n', '        moveToState(States.Operational);\n', '    }\n', '\n', '    function anyoneEndICO()\n', '    public\n', '    requireState(States.Ico)\n', '    {\n', '        require(block.timestamp > endTimestamp);\n', '        finishMinting();\n', '        moveToState(States.Operational);\n', '    }\n', '\n', '    function finishMinting()\n', '    internal\n', '    {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '    }\n', '\n', '    function addToWhitelist(address _whitelisted)\n', '    public\n', '    onlyWhitelist\n', '        //    requireState(States.Ico)\n', '    {\n', '        whitelist[_whitelisted] = true;\n', '        Whitelisted(_whitelisted);\n', '    }\n', '\n', '\n', '    //emergency pause for the ICO\n', '    function pause()\n', '    public\n', '    onlyStateControl\n', '    requireState(States.Ico)\n', '    {\n', '        moveToState(States.Paused);\n', '    }\n', '\n', '    //in case we want to completely abort\n', '    function abort()\n', '    public\n', '    onlyStateControl\n', '    requireState(States.Paused)\n', '    {\n', '        moveToState(States.Underfunded);\n', '    }\n', '\n', '    //un-pause\n', '    function resumeICO()\n', '    public\n', '    onlyStateControl\n', '    requireState(States.Paused)\n', '    {\n', '        moveToState(States.Ico);\n', '    }\n', '\n', '    //in case of a failed/aborted ICO every investor can get back their money\n', '    function requestRefund()\n', '    public\n', '    requireState(States.Underfunded)\n', '    {\n', '        require(ethPossibleRefunds[msg.sender] > 0);\n', '        //there is no need for updateAccount(msg.sender) since the token never became active.\n', '        uint256 payout = ethPossibleRefunds[msg.sender];\n', '        //reverse calculate the amount to pay out\n', '        ethPossibleRefunds[msg.sender] = 0;\n', '        msg.sender.transfer(payout);\n', '    }\n', '\n', '    //after the ico has run its course, the withdraw account can drain funds bit-by-bit as needed.\n', '    function requestPayout(uint _amount)\n', '    public\n', '    onlyWithdraw //very important!\n', '    requireState(States.Operational)\n', '    {\n', '        msg.sender.transfer(_amount);\n', '    }\n', '\n', '    //if this contract gets a balance in some other ERC20 contract - or even iself - then we can rescue it.\n', '    function rescueToken(ERC20Basic _foreignToken, address _to)\n', '    public\n', '    onlyTokenAssignmentControl\n', '    requireState(States.Operational)\n', '    {\n', '        _foreignToken.transfer(_to, _foreignToken.balanceOf(this));\n', '    }\n', '    /**\n', '    END ICO functions\n', '    */\n', '\n', '    /**\n', '    BEGIN ERC20 functions\n', '    */\n', '    function transfer(address _to, uint256 _value)\n', '    public\n', '    requireState(States.Operational)\n', '    returns (bool success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    public\n', '    requireState(States.Operational)\n', '    returns (bool success) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function balanceOf(address _account)\n', '    public\n', '    constant\n', '    returns (uint256 balance) {\n', '        return balances[_account];\n', '    }\n', '\n', '    /**\n', '    END ERC20 functions\n', '    */\n', '}']