['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', ' * the methods to add functionality. Consider using &#39;super&#39; where appropiate to concatenate\n', ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    ERC20 public token;\n', '\n', '    // Address where funds are collected\n', '    address public wallet;\n', '\n', '    // How many token units a buyer gets per wei\n', '    uint256 public rate;\n', '\n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '\n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(\n', '        address indexed purchaser,\n', '        address indexed beneficiary,\n', '        uint256 value,\n', '        uint256 amount\n', '    );\n', '\n', '    /**\n', '     * @param _rate Number of token units a buyer gets per wei\n', '     * @param _wallet Address where collected funds will be forwarded to\n', '     * @param _token Address of the token being sold\n', '     */\n', '    constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '        require(_rate > 0);\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '        token = _token;\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Crowdsale external interface\n', '    // -----------------------------------------\n', '\n', '    /**\n', '     * @dev fallback function ***DO NOT OVERRIDE***\n', '     */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev low level token purchase ***DO NOT OVERRIDE***\n', '     * @param _beneficiary Address performing the token purchase\n', '     */\n', '    function buyTokens(address _beneficiary) public payable {\n', '\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        _processPurchase(_beneficiary, tokens);\n', '        emit TokenPurchase(\n', '            msg.sender,\n', '            _beneficiary,\n', '            weiAmount,\n', '            tokens\n', '        );\n', '\n', '        _forwardFunds();\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Internal interface (extensible)\n', '    // -----------------------------------------\n', '\n', '    /**\n', '     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _preValidatePurchase(\n', '        address _beneficiary,\n', '        uint256 _weiAmount\n', '    )\n', '    internal view\n', '    {\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '        require(weiRaised.add(_weiAmount) != 0);\n', '    }\n', '\n', '    /**\n', '     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _tokenAmount Number of tokens to be emitted\n', '     */\n', '    function _allocateTokens(\n', '        address _beneficiary,\n', '        uint256 _tokenAmount\n', '    )\n', '    internal\n', '    {\n', '        token.transfer(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '     * @param _beneficiary Address receiving the tokens\n', '     * @param _tokenAmount Number of tokens to be purchased\n', '     */\n', '    function _processPurchase(\n', '        address _beneficiary,\n', '        uint256 _tokenAmount\n', '    )\n', '    internal\n', '    {\n', '        _allocateTokens(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Override to extend the way in which ether is converted to tokens.\n', '     * @param _weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 _weiAmount)\n', '    internal view returns (uint256)\n', '    {\n', '        return _weiAmount.mul(rate);\n', '    }\n', '\n', '    /**\n', '     * @dev Determines how ETH is stored/forwarded on purchases.\n', '     */\n', '    function _forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint _addedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint _subtractedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    modifier hasMintPermission() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(\n', '        address _to,\n', '        uint256 _amount\n', '    )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '    {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner canMint external returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Crowdsale with a limit for total contributions.\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public cap;\n', '\n', '    /**\n', '     * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n', '     * @param _cap Max amount of wei to be contributed\n', '     */\n', '    constructor(uint256 _cap) public {\n', '        require(_cap > 0);\n', '        cap = _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks whether the cap has been reached.\n', '     * @return Whether the cap was reached\n', '     */\n', '    function capReached() external view returns (bool) {\n', '        return weiRaised >= cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Extend parent behavior requiring purchase to respect the funding cap.\n', '     * @param _beneficiary Token purchaser\n', '     * @param _weiAmount Amount of wei contributed\n', '     */\n', '    function _preValidatePurchase(\n', '        address _beneficiary,\n', '        uint256 _weiAmount\n', '    )\n', '    internal view\n', '    {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '        require(weiRaised.add(_weiAmount) <= cap);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title IndividuallyCappedCrowdsale\n', ' * @dev Crowdsale with individual contributor cap and minimum investment limit.\n', ' */\n', 'contract IndividuallyCappedCrowdsale is Crowdsale, CappedCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public contributions;\n', '    uint256 public individualCap;\n', '    uint256 public miniumInvestment;\n', '\n', '    /**\n', '     * @dev Constructor, takes maximum amount of wei accepted in the crowdsale and minimum limit for individuals.\n', '     * @param _individualCap Max amount of wei that can be contributed by individuals\n', '     * @param _miniumInvestment Min amount of wei that can be contributed by individuals\n', '     */\n', '    constructor(uint256 _individualCap, uint256 _miniumInvestment) public {\n', '        require(_individualCap > 0);\n', '        require(_miniumInvestment > 0);\n', '        individualCap = _individualCap;\n', '        miniumInvestment = _miniumInvestment;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Extend parent behavior requiring purchase to respect the contributor&#39;s funding cap.\n', '     * @param _beneficiary Address of contributor\n', '     * @param _weiAmount Amount of wei contributed\n', '     */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '        require(_weiAmount <= individualCap);\n', '        require(_weiAmount >= miniumInvestment);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused external {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused external {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', 'contract Namahecrowdsale is Pausable, IndividuallyCappedCrowdsale {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public openingTime;\n', '    uint256 public closingTime;\n', '    bool public isFinalized = false;\n', '\n', '    bool public quarterFirst = true;\n', '    bool public quarterSecond = true;\n', '    bool public quarterThird = true;\n', '    bool public quarterFourth = true;\n', '\n', '    uint256 public rate = 1000;\n', '    bool public preAllocationsPending = true;         // Indicates if pre allocations are pending\n', '    uint256 public totalAllocated = 0;\n', '    mapping(address => uint256) public allocated;     // To track allocated tokens\n', '    address[] public allocatedAddresses;              // To track list of contributors\n', '\n', '    address public constant _controller  = 0x6E21c63511b0dD8f2C67BB5230C5b831f6cd7986;\n', '    address public constant _reserve     = 0xE4627eE46f9E0071571614ca86441AFb42972A66;\n', '    address public constant _promo       = 0x894387C61144f1F3a2422D17E61638B3263286Ee;\n', '    address public constant _holding     = 0xC7592b24b4108b387A9F413fa4eA2506a7F32Ae9;\n', '\n', '    address public constant _founder_one = 0x3f7dB633ABAb31A687dd1DFa0876Df12Bfc18DBE;\n', '    address public constant _founder_two = 0xCDb0EF350717d743d47A358EADE1DF2CB71c1E4F;\n', '\n', '    uint256 public constant PROMO_TOKEN_AMOUNT   = 6000000E18; // Promotional 6,000,000;\n', '    uint256 public constant RESERVE_TOKEN_AMOUNT = 24000000E18; // Reserved tokens 24,000,000;\n', '    uint256 public constant TEAM_TOKEN_AMOUNT    = 15000000E18; // Team and Advisors 15,000,000 each;\n', '\n', '    uint256 public constant QUARTERLY_RELEASE    = 3750000E18; // To allocate 3,750,000;\n', '\n', '    MintableToken public token;\n', '\n', '    event AllocationApproved(address indexed purchaser, uint256 amount);\n', '    event Finalized();\n', '\n', '    constructor (\n', '        uint256 _openingTime,\n', '        uint256 _closingTime,\n', '        uint256 _cap,\n', '        uint256 _miniumInvestment,\n', '        uint256 _individualCap,\n', '        MintableToken _token\n', '    )\n', '\n', '    public\n', '    Crowdsale(rate, _controller, _token)\n', '    CappedCrowdsale(_cap)\n', '    IndividuallyCappedCrowdsale(_individualCap, _miniumInvestment)\n', '    {\n', '        openingTime = _openingTime;\n', '        closingTime = _closingTime;\n', '        token = _token;\n', '\n', '    }\n', '\n', '    /**\n', '    * @dev Reverts if not in crowdsale time range.\n', '    */\n', '    modifier onlyWhileOpen {\n', '        require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Complete pre-allocations to team, promotions and reserve pool\n', '    */\n', '    function doPreAllocations() external onlyOwner returns (bool) {\n', '        require(preAllocationsPending);\n', '\n', '        //Allocate promo tokens immediately\n', '        token.transfer(_promo, PROMO_TOKEN_AMOUNT);\n', '\n', '        //Allocate team tokens _team account through internal method\n', '        //_allocateTokens(_team, TEAM_TOKEN_AMOUNT);\n', '        _allocateTokens(_founder_one, TEAM_TOKEN_AMOUNT);\n', '        _allocateTokens(_founder_two, TEAM_TOKEN_AMOUNT);\n', '\n', '        //Allocate reserved tokens to _reserve account through internal method\n', '        _allocateTokens(_reserve, RESERVE_TOKEN_AMOUNT);\n', '\n', '        totalAllocated = totalAllocated.add(PROMO_TOKEN_AMOUNT);\n', '        preAllocationsPending = false;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approves tokens allocated to a beneficiary\n', '    * @param _beneficiary Token purchaser\n', '    */\n', '    function approveAllocation(address _beneficiary) external onlyOwner returns (bool) {\n', '        require(_beneficiary != address(0));\n', '        require(_beneficiary != _founder_one);\n', '        require(_beneficiary != _founder_two);\n', '        require(_beneficiary != _reserve);\n', '\n', '        uint256 allocatedTokens = allocated[_beneficiary];\n', '        token.transfer(_beneficiary, allocated[_beneficiary]);\n', '        allocated[_beneficiary] = 0;\n', '        emit AllocationApproved(_beneficiary, allocatedTokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Release reserved tokens to _reserve address only after vesting period\n', '    */\n', '    function releaseReservedTokens() external onlyOwner {\n', '        require(block.timestamp > (openingTime.add(52 weeks)));\n', '        require(allocated[_reserve] > 0);\n', '\n', '        token.transfer(_reserve, RESERVE_TOKEN_AMOUNT);\n', '        allocated[_reserve] = 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Must be called after crowdsale ends, to do some extra finalization\n', '     * work. Calls the contract&#39;s finalization function.\n', '     */\n', '    function finalize() external onlyOwner {\n', '        require(!isFinalized);\n', '        require(hasClosed());\n', '        require(!preAllocationsPending);\n', '\n', '        finalization();\n', '        emit Finalized();\n', '\n', '        isFinalized = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Extends crowdsale end date\n', '     */\n', '    function extendCrowdsale(uint256 _closingTime) external onlyOwner {\n', '        require(_closingTime > closingTime);\n', '        require(block.timestamp <= openingTime.add(36 weeks));\n', '\n', '        closingTime = _closingTime;\n', '    }\n', '\n', '    /**\n', '     * @dev Every quarter release, 25% of token to the founders\n', '     */\n', '    function releaseFounderTokens() external onlyOwner returns (bool) {\n', '        if (quarterFirst && block.timestamp >= (openingTime.add(10 weeks))) {\n', '            quarterFirst = false;\n', '            token.transfer(_founder_one, QUARTERLY_RELEASE);\n', '            token.transfer(_founder_two, QUARTERLY_RELEASE);\n', '            allocated[_founder_one] = allocated[_founder_one].sub(QUARTERLY_RELEASE);\n', '            allocated[_founder_two] = allocated[_founder_two].sub(QUARTERLY_RELEASE);\n', '            totalAllocated = totalAllocated.sub(QUARTERLY_RELEASE);\n', '            totalAllocated = totalAllocated.sub(QUARTERLY_RELEASE);\n', '\n', '        }\n', '\n', '        if (quarterSecond && block.timestamp >= (openingTime.add(22 weeks))) {\n', '            quarterSecond = false;\n', '            token.transfer(_founder_one, QUARTERLY_RELEASE);\n', '            token.transfer(_founder_two, QUARTERLY_RELEASE);\n', '            allocated[_founder_one] = allocated[_founder_one].sub(QUARTERLY_RELEASE);\n', '            allocated[_founder_two] = allocated[_founder_two].sub(QUARTERLY_RELEASE);\n', '            totalAllocated = totalAllocated.sub(QUARTERLY_RELEASE);\n', '            totalAllocated = totalAllocated.sub(QUARTERLY_RELEASE);\n', '        }\n', '\n', '        if (quarterThird && block.timestamp >= (openingTime.add(34 weeks))) {\n', '            quarterThird = false;\n', '            token.transfer(_founder_one, QUARTERLY_RELEASE);\n', '            token.transfer(_founder_two, QUARTERLY_RELEASE);\n', '            allocated[_founder_one] = allocated[_founder_one].sub(QUARTERLY_RELEASE);\n', '            allocated[_founder_two] = allocated[_founder_two].sub(QUARTERLY_RELEASE);\n', '            totalAllocated = totalAllocated.sub(QUARTERLY_RELEASE);\n', '            totalAllocated = totalAllocated.sub(QUARTERLY_RELEASE);\n', '        }\n', '\n', '        if (quarterFourth && block.timestamp >= (openingTime.add(46 weeks))) {\n', '            quarterFourth = false;\n', '            token.transfer(_founder_one, QUARTERLY_RELEASE);\n', '            token.transfer(_founder_two, QUARTERLY_RELEASE);\n', '            allocated[_founder_one] = allocated[_founder_one].sub(QUARTERLY_RELEASE);\n', '            allocated[_founder_two] = allocated[_founder_two].sub(QUARTERLY_RELEASE);\n', '            totalAllocated = totalAllocated.sub(QUARTERLY_RELEASE);\n', '            totalAllocated = totalAllocated.sub(QUARTERLY_RELEASE);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '    * @return Whether crowdsale period has elapsed\n', '    */\n', '    function hasClosed() public view returns (bool) {\n', '        return block.timestamp > closingTime;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns rate as per bonus structure\n', '    * @return Rate\n', '    */\n', '    function getRate() public view returns (uint256) {\n', '\n', '        if (block.timestamp <= (openingTime.add(14 days))) {return rate.add(200);}\n', '        if (block.timestamp <= (openingTime.add(28 days))) {return rate.add(100);}\n', '        if (block.timestamp <= (openingTime.add(49 days))) {return rate.add(50);}\n', '\n', '        return rate;\n', '    }\n', '\n', '    /**\n', '    * @dev Releases unapproved tokens to _holding address. Only called during finalization.\n', '    */\n', '    function reclaimAllocated() internal {\n', '\n', '        uint256 unapprovedTokens = 0;\n', '        for (uint256 i = 0; i < allocatedAddresses.length; i++) {\n', '            // skip counting _team and _reserve allocations\n', '            if (allocatedAddresses[i] != _founder_one && allocatedAddresses[i] != _founder_two && allocatedAddresses[i] != _reserve) {\n', '                unapprovedTokens = unapprovedTokens.add(allocated[allocatedAddresses[i]]);\n', '                allocated[allocatedAddresses[i]] = 0;\n', '            }\n', '        }\n', '        token.transfer(_holding, unapprovedTokens);\n', '    }\n', '\n', '    /**\n', '    * @dev Reclaim remaining tokens after crowdsale is complete. Tokens allocated to\n', '    * _team and _balance will be left out to arrive at balance tokens.\n', '    */\n', '    function reclaimBalanceTokens() internal {\n', '\n', '        uint256 balanceTokens = token.balanceOf(this);\n', '        balanceTokens = balanceTokens.sub(allocated[_founder_one]);\n', '        balanceTokens = balanceTokens.sub(allocated[_founder_two]);\n', '        balanceTokens = balanceTokens.sub(allocated[_reserve]);\n', '        token.transfer(_controller, balanceTokens);\n', '    }\n', '\n', '    /**\n', '    * @dev Overridden to add finalization logic.\n', '    */\n', '    function finalization() internal {\n', '        reclaimAllocated();\n', '        reclaimBalanceTokens();\n', '    }\n', '\n', '    /**\n', '    * @dev Overridden to adjust the rate including bonus\n', '    * @param _weiAmount Value in wei to be converted into tokens\n', '    * @return Number of tokens that can be purchased with the given _weiAmount\n', '    */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint256 tokenAmount = _weiAmount.mul(getRate());\n', '        return tokenAmount;\n', '    }\n', '\n', '    /**\n', '    * @dev Extend parent behavior requiring to be within contributing period.\n', '    * If purchases are paused, transactions fail.\n', '    * @param _beneficiary Token purchaser\n', '    * @param _weiAmount Amount of wei contributed\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view onlyWhileOpen whenNotPaused {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Overriden method to update tokens allocated to a beneficiary\n', '    * @param _beneficiary Address sending ether\n', '    * @param _tokenAmount Number of token to be allocated\n', '    */\n', '    function _allocateTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        //token.transfer(_beneficiary, _tokenAmount);\n', '        require(token.balanceOf(this) >= totalAllocated.add(_tokenAmount));\n', '        allocated[_beneficiary] = allocated[_beneficiary].add(_tokenAmount);\n', '        totalAllocated = totalAllocated.add(_tokenAmount);\n', '        allocatedAddresses.push(_beneficiary);\n', '\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n", ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    ERC20 public token;\n', '\n', '    // Address where funds are collected\n', '    address public wallet;\n', '\n', '    // How many token units a buyer gets per wei\n', '    uint256 public rate;\n', '\n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '\n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(\n', '        address indexed purchaser,\n', '        address indexed beneficiary,\n', '        uint256 value,\n', '        uint256 amount\n', '    );\n', '\n', '    /**\n', '     * @param _rate Number of token units a buyer gets per wei\n', '     * @param _wallet Address where collected funds will be forwarded to\n', '     * @param _token Address of the token being sold\n', '     */\n', '    constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '        require(_rate > 0);\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '        token = _token;\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Crowdsale external interface\n', '    // -----------------------------------------\n', '\n', '    /**\n', '     * @dev fallback function ***DO NOT OVERRIDE***\n', '     */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev low level token purchase ***DO NOT OVERRIDE***\n', '     * @param _beneficiary Address performing the token purchase\n', '     */\n', '    function buyTokens(address _beneficiary) public payable {\n', '\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        _processPurchase(_beneficiary, tokens);\n', '        emit TokenPurchase(\n', '            msg.sender,\n', '            _beneficiary,\n', '            weiAmount,\n', '            tokens\n', '        );\n', '\n', '        _forwardFunds();\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Internal interface (extensible)\n', '    // -----------------------------------------\n', '\n', '    /**\n', '     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _preValidatePurchase(\n', '        address _beneficiary,\n', '        uint256 _weiAmount\n', '    )\n', '    internal view\n', '    {\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '        require(weiRaised.add(_weiAmount) != 0);\n', '    }\n', '\n', '    /**\n', '     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _tokenAmount Number of tokens to be emitted\n', '     */\n', '    function _allocateTokens(\n', '        address _beneficiary,\n', '        uint256 _tokenAmount\n', '    )\n', '    internal\n', '    {\n', '        token.transfer(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '     * @param _beneficiary Address receiving the tokens\n', '     * @param _tokenAmount Number of tokens to be purchased\n', '     */\n', '    function _processPurchase(\n', '        address _beneficiary,\n', '        uint256 _tokenAmount\n', '    )\n', '    internal\n', '    {\n', '        _allocateTokens(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Override to extend the way in which ether is converted to tokens.\n', '     * @param _weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 _weiAmount)\n', '    internal view returns (uint256)\n', '    {\n', '        return _weiAmount.mul(rate);\n', '    }\n', '\n', '    /**\n', '     * @dev Determines how ETH is stored/forwarded on purchases.\n', '     */\n', '    function _forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint _addedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint _subtractedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    modifier hasMintPermission() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(\n', '        address _to,\n', '        uint256 _amount\n', '    )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '    {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner canMint external returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Crowdsale with a limit for total contributions.\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public cap;\n', '\n', '    /**\n', '     * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n', '     * @param _cap Max amount of wei to be contributed\n', '     */\n', '    constructor(uint256 _cap) public {\n', '        require(_cap > 0);\n', '        cap = _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks whether the cap has been reached.\n', '     * @return Whether the cap was reached\n', '     */\n', '    function capReached() external view returns (bool) {\n', '        return weiRaised >= cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Extend parent behavior requiring purchase to respect the funding cap.\n', '     * @param _beneficiary Token purchaser\n', '     * @param _weiAmount Amount of wei contributed\n', '     */\n', '    function _preValidatePurchase(\n', '        address _beneficiary,\n', '        uint256 _weiAmount\n', '    )\n', '    internal view\n', '    {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '        require(weiRaised.add(_weiAmount) <= cap);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title IndividuallyCappedCrowdsale\n', ' * @dev Crowdsale with individual contributor cap and minimum investment limit.\n', ' */\n', 'contract IndividuallyCappedCrowdsale is Crowdsale, CappedCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public contributions;\n', '    uint256 public individualCap;\n', '    uint256 public miniumInvestment;\n', '\n', '    /**\n', '     * @dev Constructor, takes maximum amount of wei accepted in the crowdsale and minimum limit for individuals.\n', '     * @param _individualCap Max amount of wei that can be contributed by individuals\n', '     * @param _miniumInvestment Min amount of wei that can be contributed by individuals\n', '     */\n', '    constructor(uint256 _individualCap, uint256 _miniumInvestment) public {\n', '        require(_individualCap > 0);\n', '        require(_miniumInvestment > 0);\n', '        individualCap = _individualCap;\n', '        miniumInvestment = _miniumInvestment;\n', '    }\n', '\n', '\n', '    /**\n', "     * @dev Extend parent behavior requiring purchase to respect the contributor's funding cap.\n", '     * @param _beneficiary Address of contributor\n', '     * @param _weiAmount Amount of wei contributed\n', '     */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '        require(_weiAmount <= individualCap);\n', '        require(_weiAmount >= miniumInvestment);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused external {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused external {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', 'contract Namahecrowdsale is Pausable, IndividuallyCappedCrowdsale {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public openingTime;\n', '    uint256 public closingTime;\n', '    bool public isFinalized = false;\n', '\n', '    bool public quarterFirst = true;\n', '    bool public quarterSecond = true;\n', '    bool public quarterThird = true;\n', '    bool public quarterFourth = true;\n', '\n', '    uint256 public rate = 1000;\n', '    bool public preAllocationsPending = true;         // Indicates if pre allocations are pending\n', '    uint256 public totalAllocated = 0;\n', '    mapping(address => uint256) public allocated;     // To track allocated tokens\n', '    address[] public allocatedAddresses;              // To track list of contributors\n', '\n', '    address public constant _controller  = 0x6E21c63511b0dD8f2C67BB5230C5b831f6cd7986;\n', '    address public constant _reserve     = 0xE4627eE46f9E0071571614ca86441AFb42972A66;\n', '    address public constant _promo       = 0x894387C61144f1F3a2422D17E61638B3263286Ee;\n', '    address public constant _holding     = 0xC7592b24b4108b387A9F413fa4eA2506a7F32Ae9;\n', '\n', '    address public constant _founder_one = 0x3f7dB633ABAb31A687dd1DFa0876Df12Bfc18DBE;\n', '    address public constant _founder_two = 0xCDb0EF350717d743d47A358EADE1DF2CB71c1E4F;\n', '\n', '    uint256 public constant PROMO_TOKEN_AMOUNT   = 6000000E18; // Promotional 6,000,000;\n', '    uint256 public constant RESERVE_TOKEN_AMOUNT = 24000000E18; // Reserved tokens 24,000,000;\n', '    uint256 public constant TEAM_TOKEN_AMOUNT    = 15000000E18; // Team and Advisors 15,000,000 each;\n', '\n', '    uint256 public constant QUARTERLY_RELEASE    = 3750000E18; // To allocate 3,750,000;\n', '\n', '    MintableToken public token;\n', '\n', '    event AllocationApproved(address indexed purchaser, uint256 amount);\n', '    event Finalized();\n', '\n', '    constructor (\n', '        uint256 _openingTime,\n', '        uint256 _closingTime,\n', '        uint256 _cap,\n', '        uint256 _miniumInvestment,\n', '        uint256 _individualCap,\n', '        MintableToken _token\n', '    )\n', '\n', '    public\n', '    Crowdsale(rate, _controller, _token)\n', '    CappedCrowdsale(_cap)\n', '    IndividuallyCappedCrowdsale(_individualCap, _miniumInvestment)\n', '    {\n', '        openingTime = _openingTime;\n', '        closingTime = _closingTime;\n', '        token = _token;\n', '\n', '    }\n', '\n', '    /**\n', '    * @dev Reverts if not in crowdsale time range.\n', '    */\n', '    modifier onlyWhileOpen {\n', '        require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Complete pre-allocations to team, promotions and reserve pool\n', '    */\n', '    function doPreAllocations() external onlyOwner returns (bool) {\n', '        require(preAllocationsPending);\n', '\n', '        //Allocate promo tokens immediately\n', '        token.transfer(_promo, PROMO_TOKEN_AMOUNT);\n', '\n', '        //Allocate team tokens _team account through internal method\n', '        //_allocateTokens(_team, TEAM_TOKEN_AMOUNT);\n', '        _allocateTokens(_founder_one, TEAM_TOKEN_AMOUNT);\n', '        _allocateTokens(_founder_two, TEAM_TOKEN_AMOUNT);\n', '\n', '        //Allocate reserved tokens to _reserve account through internal method\n', '        _allocateTokens(_reserve, RESERVE_TOKEN_AMOUNT);\n', '\n', '        totalAllocated = totalAllocated.add(PROMO_TOKEN_AMOUNT);\n', '        preAllocationsPending = false;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approves tokens allocated to a beneficiary\n', '    * @param _beneficiary Token purchaser\n', '    */\n', '    function approveAllocation(address _beneficiary) external onlyOwner returns (bool) {\n', '        require(_beneficiary != address(0));\n', '        require(_beneficiary != _founder_one);\n', '        require(_beneficiary != _founder_two);\n', '        require(_beneficiary != _reserve);\n', '\n', '        uint256 allocatedTokens = allocated[_beneficiary];\n', '        token.transfer(_beneficiary, allocated[_beneficiary]);\n', '        allocated[_beneficiary] = 0;\n', '        emit AllocationApproved(_beneficiary, allocatedTokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Release reserved tokens to _reserve address only after vesting period\n', '    */\n', '    function releaseReservedTokens() external onlyOwner {\n', '        require(block.timestamp > (openingTime.add(52 weeks)));\n', '        require(allocated[_reserve] > 0);\n', '\n', '        token.transfer(_reserve, RESERVE_TOKEN_AMOUNT);\n', '        allocated[_reserve] = 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Must be called after crowdsale ends, to do some extra finalization\n', "     * work. Calls the contract's finalization function.\n", '     */\n', '    function finalize() external onlyOwner {\n', '        require(!isFinalized);\n', '        require(hasClosed());\n', '        require(!preAllocationsPending);\n', '\n', '        finalization();\n', '        emit Finalized();\n', '\n', '        isFinalized = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Extends crowdsale end date\n', '     */\n', '    function extendCrowdsale(uint256 _closingTime) external onlyOwner {\n', '        require(_closingTime > closingTime);\n', '        require(block.timestamp <= openingTime.add(36 weeks));\n', '\n', '        closingTime = _closingTime;\n', '    }\n', '\n', '    /**\n', '     * @dev Every quarter release, 25% of token to the founders\n', '     */\n', '    function releaseFounderTokens() external onlyOwner returns (bool) {\n', '        if (quarterFirst && block.timestamp >= (openingTime.add(10 weeks))) {\n', '            quarterFirst = false;\n', '            token.transfer(_founder_one, QUARTERLY_RELEASE);\n', '            token.transfer(_founder_two, QUARTERLY_RELEASE);\n', '            allocated[_founder_one] = allocated[_founder_one].sub(QUARTERLY_RELEASE);\n', '            allocated[_founder_two] = allocated[_founder_two].sub(QUARTERLY_RELEASE);\n', '            totalAllocated = totalAllocated.sub(QUARTERLY_RELEASE);\n', '            totalAllocated = totalAllocated.sub(QUARTERLY_RELEASE);\n', '\n', '        }\n', '\n', '        if (quarterSecond && block.timestamp >= (openingTime.add(22 weeks))) {\n', '            quarterSecond = false;\n', '            token.transfer(_founder_one, QUARTERLY_RELEASE);\n', '            token.transfer(_founder_two, QUARTERLY_RELEASE);\n', '            allocated[_founder_one] = allocated[_founder_one].sub(QUARTERLY_RELEASE);\n', '            allocated[_founder_two] = allocated[_founder_two].sub(QUARTERLY_RELEASE);\n', '            totalAllocated = totalAllocated.sub(QUARTERLY_RELEASE);\n', '            totalAllocated = totalAllocated.sub(QUARTERLY_RELEASE);\n', '        }\n', '\n', '        if (quarterThird && block.timestamp >= (openingTime.add(34 weeks))) {\n', '            quarterThird = false;\n', '            token.transfer(_founder_one, QUARTERLY_RELEASE);\n', '            token.transfer(_founder_two, QUARTERLY_RELEASE);\n', '            allocated[_founder_one] = allocated[_founder_one].sub(QUARTERLY_RELEASE);\n', '            allocated[_founder_two] = allocated[_founder_two].sub(QUARTERLY_RELEASE);\n', '            totalAllocated = totalAllocated.sub(QUARTERLY_RELEASE);\n', '            totalAllocated = totalAllocated.sub(QUARTERLY_RELEASE);\n', '        }\n', '\n', '        if (quarterFourth && block.timestamp >= (openingTime.add(46 weeks))) {\n', '            quarterFourth = false;\n', '            token.transfer(_founder_one, QUARTERLY_RELEASE);\n', '            token.transfer(_founder_two, QUARTERLY_RELEASE);\n', '            allocated[_founder_one] = allocated[_founder_one].sub(QUARTERLY_RELEASE);\n', '            allocated[_founder_two] = allocated[_founder_two].sub(QUARTERLY_RELEASE);\n', '            totalAllocated = totalAllocated.sub(QUARTERLY_RELEASE);\n', '            totalAllocated = totalAllocated.sub(QUARTERLY_RELEASE);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '    * @return Whether crowdsale period has elapsed\n', '    */\n', '    function hasClosed() public view returns (bool) {\n', '        return block.timestamp > closingTime;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns rate as per bonus structure\n', '    * @return Rate\n', '    */\n', '    function getRate() public view returns (uint256) {\n', '\n', '        if (block.timestamp <= (openingTime.add(14 days))) {return rate.add(200);}\n', '        if (block.timestamp <= (openingTime.add(28 days))) {return rate.add(100);}\n', '        if (block.timestamp <= (openingTime.add(49 days))) {return rate.add(50);}\n', '\n', '        return rate;\n', '    }\n', '\n', '    /**\n', '    * @dev Releases unapproved tokens to _holding address. Only called during finalization.\n', '    */\n', '    function reclaimAllocated() internal {\n', '\n', '        uint256 unapprovedTokens = 0;\n', '        for (uint256 i = 0; i < allocatedAddresses.length; i++) {\n', '            // skip counting _team and _reserve allocations\n', '            if (allocatedAddresses[i] != _founder_one && allocatedAddresses[i] != _founder_two && allocatedAddresses[i] != _reserve) {\n', '                unapprovedTokens = unapprovedTokens.add(allocated[allocatedAddresses[i]]);\n', '                allocated[allocatedAddresses[i]] = 0;\n', '            }\n', '        }\n', '        token.transfer(_holding, unapprovedTokens);\n', '    }\n', '\n', '    /**\n', '    * @dev Reclaim remaining tokens after crowdsale is complete. Tokens allocated to\n', '    * _team and _balance will be left out to arrive at balance tokens.\n', '    */\n', '    function reclaimBalanceTokens() internal {\n', '\n', '        uint256 balanceTokens = token.balanceOf(this);\n', '        balanceTokens = balanceTokens.sub(allocated[_founder_one]);\n', '        balanceTokens = balanceTokens.sub(allocated[_founder_two]);\n', '        balanceTokens = balanceTokens.sub(allocated[_reserve]);\n', '        token.transfer(_controller, balanceTokens);\n', '    }\n', '\n', '    /**\n', '    * @dev Overridden to add finalization logic.\n', '    */\n', '    function finalization() internal {\n', '        reclaimAllocated();\n', '        reclaimBalanceTokens();\n', '    }\n', '\n', '    /**\n', '    * @dev Overridden to adjust the rate including bonus\n', '    * @param _weiAmount Value in wei to be converted into tokens\n', '    * @return Number of tokens that can be purchased with the given _weiAmount\n', '    */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint256 tokenAmount = _weiAmount.mul(getRate());\n', '        return tokenAmount;\n', '    }\n', '\n', '    /**\n', '    * @dev Extend parent behavior requiring to be within contributing period.\n', '    * If purchases are paused, transactions fail.\n', '    * @param _beneficiary Token purchaser\n', '    * @param _weiAmount Amount of wei contributed\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view onlyWhileOpen whenNotPaused {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Overriden method to update tokens allocated to a beneficiary\n', '    * @param _beneficiary Address sending ether\n', '    * @param _tokenAmount Number of token to be allocated\n', '    */\n', '    function _allocateTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        //token.transfer(_beneficiary, _tokenAmount);\n', '        require(token.balanceOf(this) >= totalAllocated.add(_tokenAmount));\n', '        allocated[_beneficiary] = allocated[_beneficiary].add(_tokenAmount);\n', '        totalAllocated = totalAllocated.add(_tokenAmount);\n', '        allocatedAddresses.push(_beneficiary);\n', '\n', '    }\n', '}']
