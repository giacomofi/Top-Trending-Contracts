['pragma solidity ^0.4.20;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ShortAddressProtection {\n', '\n', '    modifier onlyPayloadSize(uint256 numwords) {\n', '        assert(msg.data.length >= numwords * 32 + 4);\n', '        _;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic, ShortAddressProtection {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) internal balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) onlyPayloadSize(2) public returns (bool) {\n', '        //require user to set to zero before resetting to nonzero\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) onlyPayloadSize(2) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) onlyPayloadSize(2) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title MintableToken token\n', ' */\n', 'contract MintableToken is Ownable, StandardToken {\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    address public saleAgent;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    modifier onlySaleAgent() {\n', '        require(msg.sender == saleAgent);\n', '        _;\n', '    }\n', '\n', '    function setSaleAgent(address _saleAgent) onlyOwner public {\n', '        require(_saleAgent != address(0));\n', '        saleAgent = _saleAgent;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlySaleAgent canMint public returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlySaleAgent canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Token is MintableToken {\n', '    string public constant name = "TOKPIE";\n', '    string public constant symbol = "TKP";\n', '    uint8 public constant decimals = 18;\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', '/**\n', ' * @title WhitelistedCrowdsale\n', ' * @dev Crowdsale in which only whitelisted users can contribute.\n', ' */\n', 'contract WhitelistedCrowdsale is Ownable {\n', '\n', '    mapping(address => bool) public whitelist;\n', '\n', '    /**\n', '     * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '     */\n', '    modifier isWhitelisted(address _beneficiary) {\n', '        require(whitelist[_beneficiary]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds single address to whitelist.\n', '     * @param _beneficiary Address to be added to the whitelist\n', '     */\n', '    function addToWhitelist(address _beneficiary) external onlyOwner {\n', '        whitelist[_beneficiary] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '     * @param _beneficiaries Addresses to be added to the whitelist\n', '     */\n', '    function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '            whitelist[_beneficiaries[i]] = true;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    bool public isFinalized = false;\n', '\n', '    event Finalized();\n', '\n', '    /**\n', '     * @dev Must be called after crowdsale ends, to do some extra finalization\n', '     * work. Calls the contract&#39;s finalization function.\n', '     */\n', '    function finalize() onlyOwner public {\n', '        require(!isFinalized);\n', '\n', '        finalization();\n', '        Finalized();\n', '\n', '        isFinalized = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Can be overridden to add finalization logic. The overriding function\n', '     * should call super.finalization() to ensure the chain of finalization is\n', '     * executed entirely.\n', '     */\n', '    function finalization() internal;\n', '}\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    enum State {Active, Refunding, Closed}\n', '\n', '    mapping(address => uint256) public deposited;\n', '    address public wallet;\n', '    State public state;\n', '\n', '    event Closed();\n', '    event RefundsEnabled();\n', '    event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '    /**\n', '     * @param _wallet Vault address\n', '     */\n', '    function RefundVault(address _wallet) public {\n', '        require(_wallet != address(0));\n', '        wallet = _wallet;\n', '        state = State.Active;\n', '    }\n', '\n', '    /**\n', '     * @param investor Investor address\n', '     */\n', '    function deposit(address investor) onlyOwner public payable {\n', '        require(state == State.Active);\n', '        deposited[investor] = deposited[investor].add(msg.value);\n', '    }\n', '\n', '    function close() onlyOwner public {\n', '        require(state == State.Active);\n', '        state = State.Closed;\n', '        Closed();\n', '        wallet.transfer(this.balance);\n', '    }\n', '\n', '    function enableRefunds() onlyOwner public {\n', '        require(state == State.Active);\n', '        state = State.Refunding;\n', '        RefundsEnabled();\n', '    }\n', '\n', '    /**\n', '     * @param investor Investor address\n', '     */\n', '    function refund(address investor) public {\n', '        require(state == State.Refunding);\n', '        uint256 depositedValue = deposited[investor];\n', '        deposited[investor] = 0;\n', '        investor.transfer(depositedValue);\n', '        Refunded(investor, depositedValue);\n', '    }\n', '}\n', '\n', 'contract preICO is FinalizableCrowdsale, WhitelistedCrowdsale {\n', '    Token public token;\n', '\n', '    // May 01, 2018 @ UTC 0:01\n', '    uint256 public startDate;\n', '\n', '    // May 14, 2018 @ UTC 23:59\n', '    uint256 public endDate;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    // how many token units a buyer gets per wei\n', '    uint256 public constant rate = 1920;\n', '\n', '    uint256 public constant softCap = 500 * (1 ether);\n', '\n', '    uint256 public constant hardCap = 1000 * (1 ether);\n', '\n', '    // refund vault used to hold funds while crowdsale is running\n', '    RefundVault public vault;\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @dev _wallet where collect funds during crowdsale\n', '     * @dev _startDate should be 1525132860\n', '     * @dev _endDate should be 1526342340\n', '     * @dev _maxEtherPerInvestor should be 10 ether\n', '     */\n', '    function preICO(address _token, address _wallet, uint256 _startDate, uint256 _endDate) public {\n', '        require(_token != address(0) && _wallet != address(0));\n', '        require(_endDate > _startDate);\n', '        startDate = _startDate;\n', '        endDate = _endDate;\n', '        token = Token(_token);\n', '        vault = new RefundVault(_wallet);\n', '    }\n', '\n', '    /**\n', '     * @dev Investors can claim refunds here if crowdsale is unsuccessful\n', '     */\n', '    function claimRefund() public {\n', '        require(isFinalized);\n', '        require(!goalReached());\n', '\n', '        vault.refund(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks whether funding goal was reached.\n', '     * @return Whether funding goal was reached\n', '     */\n', '    function goalReached() public view returns (bool) {\n', '        return weiRaised >= softCap;\n', '    }\n', '\n', '    /**\n', '     * @dev vault finalization task, called when owner calls finalize()\n', '     */\n', '    function finalization() internal {\n', '        require(hasEnded());\n', '        if (goalReached()) {\n', '            vault.close();\n', '        } else {\n', '            vault.enableRefunds();\n', '        }\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function() external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address beneficiary) whenNotPaused isWhitelisted(beneficiary) isWhitelisted(msg.sender) public payable {\n', '        require(beneficiary != address(0));\n', '        require(validPurchase());\n', '        require(!hasEnded());\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(rate);\n', '\n', '        // Minimum contribution level in TKP tokens for each investor = 100 TKP\n', '        require(tokens >= 100 * (10 ** 18));\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        token.mint(beneficiary, tokens);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '        forwardFunds();\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    function forwardFunds() internal {\n', '        vault.deposit.value(msg.value)(msg.sender);\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase() internal view returns (bool) {\n', '        return !isFinalized && now >= startDate && msg.value != 0;\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return (now > endDate || weiRaised >= hardCap);\n', '    }\n', '}\n', '\n', 'contract ICO is Pausable, WhitelistedCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    Token public token;\n', '\n', '    // June 01, 2018 @ UTC 0:01\n', '    uint256 public startDate;\n', '\n', '    // July 05, 2018 on UTC 23:59\n', '    uint256 public endDate;\n', '\n', '    uint256 public hardCap;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    address public wallet;\n', '\n', '    mapping(address => uint256) public deposited;\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @dev _wallet where collect funds during crowdsale\n', '     * @dev _startDate should be 1527811260\n', '     * @dev _endDate should be 1530835140\n', '     * @dev _maxEtherPerInvestor should be 10 ether\n', '     * @dev _hardCap should be 8700 ether\n', '     */\n', '    function ICO(address _token, address _wallet, uint256 _startDate, uint256 _endDate, uint256 _hardCap) public {\n', '        require(_token != address(0) && _wallet != address(0));\n', '        require(_endDate > _startDate);\n', '        require(_hardCap > 0);\n', '        startDate = _startDate;\n', '        endDate = _endDate;\n', '        hardCap = _hardCap;\n', '        token = Token(_token);\n', '        wallet = _wallet;\n', '    }\n', '\n', '    function claimFunds() onlyOwner public {\n', '        require(hasEnded());\n', '        wallet.transfer(this.balance);\n', '    }\n', '\n', '    function getRate() public view returns (uint256) {\n', '        if (now < startDate || hasEnded()) return 0;\n', '\n', '        // Period: from June 01, 2018 @ UTC 0:01 to June 7, 2018 @ UTC 23:59; Price: 1 ETH = 1840 TKP\n', '        if (now >= startDate && now < startDate + 604680) return 1840;\n', '        // Period: from June 08, 2018 @ UTC 0:00 to June 14, 2018 @ UTC 23:59; Price: 1 ETH = 1760 TKP\n', '        if (now >= startDate + 604680 && now < startDate + 1209480) return 1760;\n', '        // Period: from June 15, 2018 @ UTC 0:00 to June 21, 2018 @ UTC 23:59; Price: 1 ETH = 1680 TKP\n', '        if (now >= startDate + 1209480 && now < startDate + 1814280) return 1680;\n', '        // Period: from June 22, 2018 @ UTC 0:00 to June 28, 2018 @ UTC 23:59; Price: 1 ETH = 1648 TKP\n', '        if (now >= startDate + 1814280 && now < startDate + 2419080) return 1648;\n', '        // Period: from June 29, 2018 @ UTC 0:00 to July 5, 2018 @ UTC 23:59; Price: 1 ETH = 1600 TKP\n', '        if (now >= startDate + 2419080) return 1600;\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function() external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address beneficiary) whenNotPaused isWhitelisted(beneficiary) isWhitelisted(msg.sender) public payable {\n', '        require(beneficiary != address(0));\n', '        require(validPurchase());\n', '        require(!hasEnded());\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(getRate());\n', '\n', '        // Minimum contribution level in TKP tokens for each investor = 100 TKP\n', '        require(tokens >= 100 * (10 ** 18));\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        token.mint(beneficiary, tokens);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase() internal view returns (bool) {\n', '        return now >= startDate && msg.value != 0;\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return (now > endDate || weiRaised >= hardCap);\n', '    }\n', '}\n', '\n', 'contract postICO is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    Token public token;\n', '\n', '    address public walletE;\n', '    address public walletB;\n', '    address public walletC;\n', '    address public walletF;\n', '    address public walletG;\n', '\n', '    // 05.07.18 @ UTC 23:59\n', '    uint256 public endICODate;\n', '\n', '    bool public finished = false;\n', '\n', '    uint256 public FTST;\n', '\n', '    // Save complete of transfers (due to schedule) to these wallets \n', '    mapping(uint8 => bool) completedE;\n', '    mapping(uint8 => bool) completedBC;\n', '\n', '    uint256 public paymentSizeE;\n', '    uint256 public paymentSizeB;\n', '    uint256 public paymentSizeC;\n', '\n', '    /**\n', '     * @dev _endICODate should be 1530835140\n', '     */\n', '    function postICO(\n', '        address _token,\n', '        address _walletE,\n', '        address _walletB,\n', '        address _walletC,\n', '        address _walletF,\n', '        address _walletG,\n', '        uint256 _endICODate\n', '    ) public {\n', '        require(_token != address(0));\n', '        require(_walletE != address(0));\n', '        require(_walletB != address(0));\n', '        require(_walletC != address(0));\n', '        require(_walletF != address(0));\n', '        require(_walletG != address(0));\n', '        require(_endICODate >= now);\n', '\n', '        token = Token(_token);\n', '        endICODate = _endICODate;\n', '\n', '        walletE = _walletE;\n', '        walletB = _walletB;\n', '        walletC = _walletC;\n', '        walletF = _walletF;\n', '        walletG = _walletG;\n', '    }\n', '\n', '    function finish() onlyOwner public {\n', '        require(now > endICODate);\n', '        require(!finished);\n', '        require(token.saleAgent() == address(this));\n', '\n', '        FTST = token.totalSupply().mul(100).div(65);\n', '\n', '        // post ICO token allocation: 35% of final total supply of tokens (FTST) will be distributed to the wallets E, B, C, F, G due to the schedule described below. Where FTST = the number of tokens sold during crowdsale x 100 / 65.\n', '        // Growth reserve: 21% (4-years lock). Distribute 2.625% of the final total supply of tokens (FTST*2625/100000) 8 (eight) times every half a year during 4 (four) years after the endICODate to the wallet [E].\n', '        // hold this tokens on postICO contract\n', '        paymentSizeE = FTST.mul(2625).div(100000);\n', '        uint256 tokensE = paymentSizeE.mul(8);\n', '        token.mint(this, tokensE);\n', '\n', '        // Team: 9.6% (2-years lock).\n', '        // Distribute 0.25% of final total supply of tokens (FTST*25/10000) 4 (four) times every half a year during 2 (two) years after endICODate to the wallet [B].\n', '        // hold this tokens on postICO contract\n', '        paymentSizeB = FTST.mul(25).div(10000);\n', '        uint256 tokensB = paymentSizeB.mul(4);\n', '        token.mint(this, tokensB);\n', '\n', '        // Distribute 2.15% of final total supply of tokens (FTST*215/10000) 4 (four) times every half a year during 2 (two) years after endICODate to the wallet [C]. \n', '        // hold this tokens on postICO contract\n', '        paymentSizeC = FTST.mul(215).div(10000);\n', '        uint256 tokensC = paymentSizeC.mul(4);\n', '        token.mint(this, tokensC);\n', '\n', '        // Angel investors: 2%. Distribute 2% of final total supply of tokens (FTST*2/100) after endICODate to the wallet [F].\n', '        uint256 tokensF = FTST.mul(2).div(100);\n', '        token.mint(walletF, tokensF);\n', '\n', '        // Referral program 1,3% + Bounty program: 1,1%. Distribute 2,4% of final total supply of tokens (FTST*24/1000) after endICODate to the wallet [G]. \n', '        uint256 tokensG = FTST.mul(24).div(1000);\n', '        token.mint(walletG, tokensG);\n', '\n', '        token.finishMinting();\n', '        finished = true;\n', '    }\n', '\n', '    function claimTokensE(uint8 order) onlyOwner public {\n', '        require(finished);\n', '        require(order >= 1 && order <= 8);\n', '        require(!completedE[order]);\n', '\n', '        // On January 03, 2019 @ UTC 23:59 = FTST*2625/100000 (2.625% of final total supply of tokens) to the wallet [E].\n', '        if (order == 1) {\n', '            // Thursday, 3 January 2019 г., 23:59:00\n', '            require(now >= endICODate + 15724800);\n', '            token.transfer(walletE, paymentSizeE);\n', '            completedE[order] = true;\n', '        }\n', '        // On July 05, 2019 @ UTC 23:59 = FTST*2625/100000 (2.625% of final total supply of tokens) to the wallet [E].\n', '        if (order == 2) {\n', '            // Friday, 5 July 2019 г., 23:59:00\n', '            require(now >= endICODate + 31536000);\n', '            token.transfer(walletE, paymentSizeE);\n', '            completedE[order] = true;\n', '        }\n', '        // On January 03, 2020 @ UTC 23:59 = FTST*2625/100000 (2.625% of final total supply of tokens) to the wallet [E].\n', '        if (order == 3) {\n', '            // Friday, 3 January 2020 г., 23:59:00\n', '            require(now >= endICODate + 47260800);\n', '            token.transfer(walletE, paymentSizeE);\n', '            completedE[order] = true;\n', '        }\n', '        // On July 04, 2020 @ UTC 23:59 = FTST*2625/100000 (2.625% of final total supply of tokens) to the wallet [E].\n', '        if (order == 4) {\n', '            // Saturday, 4 July 2020 г., 23:59:00\n', '            require(now >= endICODate + 63072000);\n', '            token.transfer(walletE, paymentSizeE);\n', '            completedE[order] = true;\n', '        }\n', '        // On January 02, 2021 @ UTC 23:59 = FTST*2625/100000 (2.625% of final total supply of tokens) to the wallet [E].\n', '        if (order == 5) {\n', '            // Saturday, 2 January 2021 г., 23:59:00\n', '            require(now >= endICODate + 78796800);\n', '            token.transfer(walletE, paymentSizeE);\n', '            completedE[order] = true;\n', '        }\n', '        // On July 04, 2021 @ UTC 23:59 = FTST*2625/100000 (2.625% of final total supply of tokens) to the wallet [E].\n', '        if (order == 6) {\n', '            // Sunday, 4 July 2021 г., 23:59:00\n', '            require(now >= endICODate + 94608000);\n', '            token.transfer(walletE, paymentSizeE);\n', '            completedE[order] = true;\n', '        }\n', '        // On January 02, 2022 @ UTC 23:59 = FTST*2625/100000 (2.625% of final total supply of tokens) to the wallet [E].\n', '        if (order == 7) {\n', '            // Sunday, 2 January 2022 г., 23:59:00\n', '            require(now >= endICODate + 110332800);\n', '            token.transfer(walletE, paymentSizeE);\n', '            completedE[order] = true;\n', '        }\n', '        // On July 04, <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e0d2d0d2d2a0">[email&#160;protected]</a> UTC 23:59 = FTST*2625/100000 (2.625% of final total supply of tokens) to the wallet [E].\n', '        if (order == 8) {\n', '            // Monday, 4 July 2022 г., 23:59:00\n', '            require(now >= endICODate + 126144000);\n', '            token.transfer(walletE, paymentSizeE);\n', '            completedE[order] = true;\n', '        }\n', '    }\n', '\n', '    function claimTokensBC(uint8 order) onlyOwner public {\n', '        require(finished);\n', '        require(order >= 1 && order <= 4);\n', '        require(!completedBC[order]);\n', '\n', '        // On January 03, 2019 @ UTC 23:59 = FTST*25/10000 (0.25% of final total supply of tokens) to the wallet [B] and FTST*215/10000 (2.15% of final total supply of tokens) to the wallet [C].\n', '        if (order == 1) {\n', '            // Thursday, 3 January 2019 г., 23:59:00\n', '            require(now >= endICODate + 15724800);\n', '            token.transfer(walletB, paymentSizeB);\n', '            token.transfer(walletC, paymentSizeC);\n', '            completedBC[order] = true;\n', '        }\n', '        // On July 05, 2019 @ UTC 23:59 = FTST*25/10000 (0.25% of final total supply of tokens) to the wallet [B] and FTST*215/10000 (2.15% of final total supply of tokens) to the wallet [C].\n', '        if (order == 2) {\n', '            // Friday, 5 July 2019 г., 23:59:00\n', '            require(now >= endICODate + 31536000);\n', '            token.transfer(walletB, paymentSizeB);\n', '            token.transfer(walletC, paymentSizeC);\n', '            completedBC[order] = true;\n', '        }\n', '        // On January 03, 2020 @ UTC 23:59 = FTST*25/10000 (0.25% of final total supply of tokens) to the wallet [B] and FTST*215/10000 (2.15% of final total supply of tokens) to the wallet [C].\n', '        if (order == 3) {\n', '            // Friday, 3 January 2020 г., 23:59:00\n', '            require(now >= endICODate + 47260800);\n', '            token.transfer(walletB, paymentSizeB);\n', '            token.transfer(walletC, paymentSizeC);\n', '            completedBC[order] = true;\n', '        }\n', '        // On July 04, 2020 @ UTC 23:59 = FTST*25/10000 (0.25% of final total supply of tokens) to the wallet [B] and FTST*215/10000 (2.15% of final total supply of tokens) to the wallet [C].\n', '        if (order == 4) {\n', '            // Saturday, 4 July 2020 г., 23:59:00\n', '            require(now >= endICODate + 63072000);\n', '            token.transfer(walletB, paymentSizeB);\n', '            token.transfer(walletC, paymentSizeC);\n', '            completedBC[order] = true;\n', '        }\n', '    }\n', '}\n', '\n', 'contract Controller is Ownable {\n', '    Token public token;\n', '    preICO public pre;\n', '    ICO public ico;\n', '    postICO public post;\n', '\n', '    enum State {NONE, PRE_ICO, ICO, POST}\n', '\n', '    State public state;\n', '\n', '    function Controller(address _token, address _preICO, address _ico, address _postICO) public {\n', '        require(_token != address(0x0));\n', '        token = Token(_token);\n', '        pre = preICO(_preICO);\n', '        ico = ICO(_ico);\n', '        post = postICO(_postICO);\n', '\n', '        require(post.endICODate() == ico.endDate());\n', '\n', '        require(pre.weiRaised() == 0);\n', '        require(ico.weiRaised() == 0);\n', '\n', '        require(token.totalSupply() == 0);\n', '        state = State.NONE;\n', '    }\n', '\n', '    function startPreICO() onlyOwner public {\n', '        require(state == State.NONE);\n', '        require(token.owner() == address(this));\n', '        token.setSaleAgent(pre);\n', '        state = State.PRE_ICO;\n', '    }\n', '\n', '    function startICO() onlyOwner public {\n', '        require(now > pre.endDate());\n', '        require(state == State.PRE_ICO);\n', '        require(token.owner() == address(this));\n', '        token.setSaleAgent(ico);\n', '        state = State.ICO;\n', '    }\n', '\n', '    function startPostICO() onlyOwner public {\n', '        require(now > ico.endDate());\n', '        require(state == State.ICO);\n', '        require(token.owner() == address(this));\n', '        token.setSaleAgent(post);\n', '        state = State.POST;\n', '    }\n', '}']