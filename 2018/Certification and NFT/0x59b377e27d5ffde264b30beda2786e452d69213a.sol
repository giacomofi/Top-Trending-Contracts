['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract B0xPresale is Ownable {\n', '\tusing SafeMath for uint;\n', '\n', '\tmapping (address => Investment[]) public received;  // mapping of investor address to Investment struct arrays\n', '\taddress[] public investors;                     \t// array of investors who have already send Ether\n', '\n', '\taddress public receiver1;\n', '\taddress public receiver2;\n', '\taddress public receiver3;\n', '\n', '\tstruct Investment {\n', '\t\tuint amount;\n', '\t\tuint blockNumber;\n', '\t\tuint blockTimestamp;\n', '\t}\n', '\n', '\tfunction() \n', '\t\tpublic\n', '\t\tpayable\n', '\t{\n', '\t\trequire(msg.value > 0);\n', '\t\treceived[msg.sender].push(Investment({\n', '\t\t\tamount: msg.value,\n', '\t\t\tblockNumber: block.number,\n', '\t\t\tblockTimestamp: block.timestamp\n', '\t\t}));\n', '\t\tinvestors.push(msg.sender);\n', '\t}\n', '\n', '\tfunction B0xPresale(\n', '\t\taddress _receiver1,\n', '\t\taddress _receiver2,\n', '\t\taddress _receiver3)\n', '\t\tpublic\n', '\t{\n', '\t\treceiver1 = _receiver1;\n', '\t\treceiver2 = _receiver2;\n', '\t\treceiver3 = _receiver3;\n', '\t}\n', '\n', '\tfunction withdraw()\n', '\t\tpublic\n', '\t{\n', '\t\trequire(msg.sender == owner \n', '\t\t\t|| msg.sender == receiver1 \n', '\t\t\t|| msg.sender == receiver2 \n', '\t\t\t|| msg.sender == receiver3);\n', '\n', '\t\tvar toSend = this.balance.mul(3).div(7);\n', '\t\trequire(receiver1.send(toSend));\n', '\t\trequire(receiver2.send(toSend));\n', '\t\trequire(receiver3.send(this.balance)); // remaining balance goes to 3rd receiver\n', '\t}\n', '\n', '\tfunction ownerWithdraw(\n', '\t\taddress _receiver,\n', '\t\tuint amount\n', '\t)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\trequire(_receiver.send(amount));\n', '\t}\n', '\n', '\tfunction setReceiver1(\n', '\t\taddress _receiver\n', '\t)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\trequire(_receiver != address(0) && _receiver != receiver1);\n', '\t\treceiver1 = _receiver;\n', '\t}\n', '\n', '\tfunction setReceiver2(\n', '\t\taddress _receiver\n', '\t)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\trequire(_receiver != address(0) && _receiver != receiver2);\n', '\t\treceiver2 = _receiver;\n', '\t}\n', '\n', '\tfunction setReceiver3(\n', '\t\taddress _receiver\n', '\t)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\trequire(_receiver != address(0) && _receiver != receiver3);\n', '\t\treceiver3 = _receiver;\n', '\t}\n', '\n', '\tfunction getInvestorsAddresses()\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (address[])\n', '\t{\n', '\t\treturn investors;\n', '\t}\n', '\n', '\tfunction getBalance()\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (uint)\n', '\t{\n', '\t\treturn this.balance;\n', '\t}\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract B0xPresale is Ownable {\n', '\tusing SafeMath for uint;\n', '\n', '\tmapping (address => Investment[]) public received;  // mapping of investor address to Investment struct arrays\n', '\taddress[] public investors;                     \t// array of investors who have already send Ether\n', '\n', '\taddress public receiver1;\n', '\taddress public receiver2;\n', '\taddress public receiver3;\n', '\n', '\tstruct Investment {\n', '\t\tuint amount;\n', '\t\tuint blockNumber;\n', '\t\tuint blockTimestamp;\n', '\t}\n', '\n', '\tfunction() \n', '\t\tpublic\n', '\t\tpayable\n', '\t{\n', '\t\trequire(msg.value > 0);\n', '\t\treceived[msg.sender].push(Investment({\n', '\t\t\tamount: msg.value,\n', '\t\t\tblockNumber: block.number,\n', '\t\t\tblockTimestamp: block.timestamp\n', '\t\t}));\n', '\t\tinvestors.push(msg.sender);\n', '\t}\n', '\n', '\tfunction B0xPresale(\n', '\t\taddress _receiver1,\n', '\t\taddress _receiver2,\n', '\t\taddress _receiver3)\n', '\t\tpublic\n', '\t{\n', '\t\treceiver1 = _receiver1;\n', '\t\treceiver2 = _receiver2;\n', '\t\treceiver3 = _receiver3;\n', '\t}\n', '\n', '\tfunction withdraw()\n', '\t\tpublic\n', '\t{\n', '\t\trequire(msg.sender == owner \n', '\t\t\t|| msg.sender == receiver1 \n', '\t\t\t|| msg.sender == receiver2 \n', '\t\t\t|| msg.sender == receiver3);\n', '\n', '\t\tvar toSend = this.balance.mul(3).div(7);\n', '\t\trequire(receiver1.send(toSend));\n', '\t\trequire(receiver2.send(toSend));\n', '\t\trequire(receiver3.send(this.balance)); // remaining balance goes to 3rd receiver\n', '\t}\n', '\n', '\tfunction ownerWithdraw(\n', '\t\taddress _receiver,\n', '\t\tuint amount\n', '\t)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\trequire(_receiver.send(amount));\n', '\t}\n', '\n', '\tfunction setReceiver1(\n', '\t\taddress _receiver\n', '\t)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\trequire(_receiver != address(0) && _receiver != receiver1);\n', '\t\treceiver1 = _receiver;\n', '\t}\n', '\n', '\tfunction setReceiver2(\n', '\t\taddress _receiver\n', '\t)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\trequire(_receiver != address(0) && _receiver != receiver2);\n', '\t\treceiver2 = _receiver;\n', '\t}\n', '\n', '\tfunction setReceiver3(\n', '\t\taddress _receiver\n', '\t)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\trequire(_receiver != address(0) && _receiver != receiver3);\n', '\t\treceiver3 = _receiver;\n', '\t}\n', '\n', '\tfunction getInvestorsAddresses()\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (address[])\n', '\t{\n', '\t\treturn investors;\n', '\t}\n', '\n', '\tfunction getBalance()\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (uint)\n', '\t{\n', '\t\treturn this.balance;\n', '\t}\n', '}']
