['pragma solidity ^0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: contracts/Timelock.sol\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme with a cliff, gradual release period, and implied residue.\n', ' *\n', ' * Withdraws by an address can be paused by the owner.\n', ' */\n', 'contract Timelock is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /*\n', '   * @dev ERC20 token that is being timelocked\n', '   */\n', '  ERC20Basic public token;\n', '\n', '  /**\n', '   * @dev timestamp at which the timelock schedule begins\n', '   */\n', '  uint256 public startTime;\n', '\n', '  /**\n', '   * @dev number of seconds from startTime to cliff\n', '   */\n', '  uint256 public cliffDuration;\n', '\n', '  /**\n', '   * @dev a percentage that becomes available at the cliff, expressed as a number between 0 and 100\n', '   */\n', '  uint256 public cliffReleasePercentage;\n', '\n', '  /**\n', '   * @dev number of seconds from cliff to residue, over this period tokens become avialable gradually\n', '   */\n', '  uint256 public slopeDuration;\n', '\n', '  /**\n', '   * @dev a percentage that becomes avilable over the gradual release period expressed as a number between 0 and 100\n', '   */\n', '  uint256 public slopeReleasePercentage;\n', '\n', '  /**\n', '   * @dev boolean indicating if owner has finished allocation.\n', '   */\n', '  bool public allocationFinished;\n', '\n', '  /**\n', '   * @dev variable to keep track of cliff time.\n', '   */\n', '  uint256 public cliffTime;\n', '\n', '  /**\n', '   * @dev variable to keep track of when the timelock ends.\n', '   */\n', '  uint256 public timelockEndTime;\n', '\n', '  /**\n', '   * @dev mapping to keep track of what amount of tokens have been allocated to what address.\n', '   */\n', '  mapping (address => uint256) public allocatedTokens;\n', '\n', '  /**\n', '   * @dev mapping to keep track of what amount of tokens have been withdrawn by what address.\n', '   */\n', '  mapping (address => uint256) public withdrawnTokens;\n', '\n', '  /**\n', '   * @dev mapping to keep track of if withdrawls are paused for a given address.\n', '   */\n', '  mapping (address => bool) public withdrawalPaused;\n', '\n', '  /**\n', '   * @dev constructor\n', '   * @param _token address of ERC20 token that is being timelocked.\n', '   * @param _startTime timestamp indicating when the unlocking of tokens start.\n', '   * @param _cliffDuration number of seconds before any tokens are unlocked.\n', '   * @param _cliffReleasePercent percentage of tokens that become available at the cliff time.\n', '   * @param _slopeDuration number of seconds for gradual release of Tokens.\n', '   * @param _slopeReleasePercentage percentage of tokens that are released gradually.\n', '   */\n', '  function Timelock(ERC20Basic _token, uint256 _startTime, uint256 _cliffDuration, uint256 _cliffReleasePercent, uint256 _slopeDuration, uint256 _slopeReleasePercentage) public {\n', '\n', '    // sanity checks\n', '    require(_cliffReleasePercent.add(_slopeReleasePercentage) <= 100);\n', '    require(_startTime > now);\n', '    require(_token != address(0));\n', '\n', '    // defaults\n', '    allocationFinished = false;\n', '\n', '    // storing constructor params\n', '    token = _token;\n', '    startTime = _startTime;\n', '    cliffDuration = _cliffDuration;\n', '    cliffReleasePercentage = _cliffReleasePercent;\n', '    slopeDuration = _slopeDuration;\n', '    slopeReleasePercentage = _slopeReleasePercentage;\n', '\n', '    // derived variables\n', '    cliffTime = startTime.add(cliffDuration);\n', '    timelockEndTime = cliffTime.add(slopeDuration);\n', '  }\n', '\n', '  /**\n', '   * @dev helper method that allows owner to allocate tokens to an address.\n', '   * @param _address beneficiary receiving the tokens.\n', '   * @param _amount number of tokens being received by beneficiary.\n', '   * @return boolean indicating function success.\n', '   */\n', '  function allocateTokens(address _address, uint256 _amount) onlyOwner external returns (bool) {\n', '    require(!allocationFinished);\n', '\n', '    allocatedTokens[_address] = _amount;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev helper method that allows owner to mark allocation as done.\n', '   * @return boolean indicating function success.\n', '   */\n', '  function finishAllocation() onlyOwner external returns (bool) {\n', '    allocationFinished = true;\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev helper method that allows owner to pause withdrawls for any address.\n', '   * @return boolean indicating function success.\n', '   */\n', '  function pauseWithdrawal(address _address) onlyOwner external returns (bool) {\n', '    withdrawalPaused[_address] = true;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev helper method that allows owner to unpause withdrawls for any address.\n', '   * @return boolean indicating function success.\n', '   */\n', '  function unpauseWithdrawal(address _address) onlyOwner external returns (bool) {\n', '    withdrawalPaused[_address] = false;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev helper method that allows anyone to check amount that is available for withdrawl by a given address.\n', '   * @param _address for which the user needs to check available amount for withdrawl.\n', '   * @return uint256 number indicating the number of tokens available for withdrawl.\n', '   */\n', '  function availableForWithdrawal(address _address) public view returns (uint256) {\n', '    if (now < cliffTime) {\n', '      return 0;\n', '    } else if (now < timelockEndTime) {\n', '      uint256 cliffTokens = (cliffReleasePercentage.mul(allocatedTokens[_address])).div(100);\n', '      uint256 slopeTokens = (allocatedTokens[_address].mul(slopeReleasePercentage)).div(100);\n', '      uint256 timeAtSlope = now.sub(cliffTime);\n', '      uint256 slopeTokensByNow = (slopeTokens.mul(timeAtSlope)).div(slopeDuration);\n', '\n', '      return (cliffTokens.add(slopeTokensByNow)).sub(withdrawnTokens[_address]);\n', '    } else {\n', '      return allocatedTokens[_address].sub(withdrawnTokens[_address]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev helper method that allows a beneficiary to withdraw tokens that have vested for their address.\n', '   * @return boolean indicating function success.\n', '   */\n', '  function withdraw() external returns (bool) {\n', '    require(!withdrawalPaused[msg.sender]);\n', '\n', '    uint256 availableTokens = availableForWithdrawal(msg.sender);\n', '    require (availableTokens > 0);\n', '    withdrawnTokens[msg.sender] = withdrawnTokens[msg.sender].add(availableTokens);\n', '    token.safeTransfer(msg.sender, availableTokens);\n', '    return true;\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: contracts/Timelock.sol\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme with a cliff, gradual release period, and implied residue.\n', ' *\n', ' * Withdraws by an address can be paused by the owner.\n', ' */\n', 'contract Timelock is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /*\n', '   * @dev ERC20 token that is being timelocked\n', '   */\n', '  ERC20Basic public token;\n', '\n', '  /**\n', '   * @dev timestamp at which the timelock schedule begins\n', '   */\n', '  uint256 public startTime;\n', '\n', '  /**\n', '   * @dev number of seconds from startTime to cliff\n', '   */\n', '  uint256 public cliffDuration;\n', '\n', '  /**\n', '   * @dev a percentage that becomes available at the cliff, expressed as a number between 0 and 100\n', '   */\n', '  uint256 public cliffReleasePercentage;\n', '\n', '  /**\n', '   * @dev number of seconds from cliff to residue, over this period tokens become avialable gradually\n', '   */\n', '  uint256 public slopeDuration;\n', '\n', '  /**\n', '   * @dev a percentage that becomes avilable over the gradual release period expressed as a number between 0 and 100\n', '   */\n', '  uint256 public slopeReleasePercentage;\n', '\n', '  /**\n', '   * @dev boolean indicating if owner has finished allocation.\n', '   */\n', '  bool public allocationFinished;\n', '\n', '  /**\n', '   * @dev variable to keep track of cliff time.\n', '   */\n', '  uint256 public cliffTime;\n', '\n', '  /**\n', '   * @dev variable to keep track of when the timelock ends.\n', '   */\n', '  uint256 public timelockEndTime;\n', '\n', '  /**\n', '   * @dev mapping to keep track of what amount of tokens have been allocated to what address.\n', '   */\n', '  mapping (address => uint256) public allocatedTokens;\n', '\n', '  /**\n', '   * @dev mapping to keep track of what amount of tokens have been withdrawn by what address.\n', '   */\n', '  mapping (address => uint256) public withdrawnTokens;\n', '\n', '  /**\n', '   * @dev mapping to keep track of if withdrawls are paused for a given address.\n', '   */\n', '  mapping (address => bool) public withdrawalPaused;\n', '\n', '  /**\n', '   * @dev constructor\n', '   * @param _token address of ERC20 token that is being timelocked.\n', '   * @param _startTime timestamp indicating when the unlocking of tokens start.\n', '   * @param _cliffDuration number of seconds before any tokens are unlocked.\n', '   * @param _cliffReleasePercent percentage of tokens that become available at the cliff time.\n', '   * @param _slopeDuration number of seconds for gradual release of Tokens.\n', '   * @param _slopeReleasePercentage percentage of tokens that are released gradually.\n', '   */\n', '  function Timelock(ERC20Basic _token, uint256 _startTime, uint256 _cliffDuration, uint256 _cliffReleasePercent, uint256 _slopeDuration, uint256 _slopeReleasePercentage) public {\n', '\n', '    // sanity checks\n', '    require(_cliffReleasePercent.add(_slopeReleasePercentage) <= 100);\n', '    require(_startTime > now);\n', '    require(_token != address(0));\n', '\n', '    // defaults\n', '    allocationFinished = false;\n', '\n', '    // storing constructor params\n', '    token = _token;\n', '    startTime = _startTime;\n', '    cliffDuration = _cliffDuration;\n', '    cliffReleasePercentage = _cliffReleasePercent;\n', '    slopeDuration = _slopeDuration;\n', '    slopeReleasePercentage = _slopeReleasePercentage;\n', '\n', '    // derived variables\n', '    cliffTime = startTime.add(cliffDuration);\n', '    timelockEndTime = cliffTime.add(slopeDuration);\n', '  }\n', '\n', '  /**\n', '   * @dev helper method that allows owner to allocate tokens to an address.\n', '   * @param _address beneficiary receiving the tokens.\n', '   * @param _amount number of tokens being received by beneficiary.\n', '   * @return boolean indicating function success.\n', '   */\n', '  function allocateTokens(address _address, uint256 _amount) onlyOwner external returns (bool) {\n', '    require(!allocationFinished);\n', '\n', '    allocatedTokens[_address] = _amount;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev helper method that allows owner to mark allocation as done.\n', '   * @return boolean indicating function success.\n', '   */\n', '  function finishAllocation() onlyOwner external returns (bool) {\n', '    allocationFinished = true;\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev helper method that allows owner to pause withdrawls for any address.\n', '   * @return boolean indicating function success.\n', '   */\n', '  function pauseWithdrawal(address _address) onlyOwner external returns (bool) {\n', '    withdrawalPaused[_address] = true;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev helper method that allows owner to unpause withdrawls for any address.\n', '   * @return boolean indicating function success.\n', '   */\n', '  function unpauseWithdrawal(address _address) onlyOwner external returns (bool) {\n', '    withdrawalPaused[_address] = false;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev helper method that allows anyone to check amount that is available for withdrawl by a given address.\n', '   * @param _address for which the user needs to check available amount for withdrawl.\n', '   * @return uint256 number indicating the number of tokens available for withdrawl.\n', '   */\n', '  function availableForWithdrawal(address _address) public view returns (uint256) {\n', '    if (now < cliffTime) {\n', '      return 0;\n', '    } else if (now < timelockEndTime) {\n', '      uint256 cliffTokens = (cliffReleasePercentage.mul(allocatedTokens[_address])).div(100);\n', '      uint256 slopeTokens = (allocatedTokens[_address].mul(slopeReleasePercentage)).div(100);\n', '      uint256 timeAtSlope = now.sub(cliffTime);\n', '      uint256 slopeTokensByNow = (slopeTokens.mul(timeAtSlope)).div(slopeDuration);\n', '\n', '      return (cliffTokens.add(slopeTokensByNow)).sub(withdrawnTokens[_address]);\n', '    } else {\n', '      return allocatedTokens[_address].sub(withdrawnTokens[_address]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev helper method that allows a beneficiary to withdraw tokens that have vested for their address.\n', '   * @return boolean indicating function success.\n', '   */\n', '  function withdraw() external returns (bool) {\n', '    require(!withdrawalPaused[msg.sender]);\n', '\n', '    uint256 availableTokens = availableForWithdrawal(msg.sender);\n', '    require (availableTokens > 0);\n', '    withdrawnTokens[msg.sender] = withdrawnTokens[msg.sender].add(availableTokens);\n', '    token.safeTransfer(msg.sender, availableTokens);\n', '    return true;\n', '  }\n', '\n', '}']
