['pragma solidity ^0.4.25;\n', 'pragma experimental "v0.5.0";\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'contract ERC20 {\n', '  function transferFrom (address from, address to, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract SpecialCampaign {\n', '\n', '  address public owner;\n', '  address public rcv;\n', '\n', '  uint256 constant public fstPerWei = 3000;\n', '\n', '  uint256 constant private min = 0;\n', '  uint256 constant private max = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n', '\n', '  ERC20   public FST;\n', '  address public fstCentral;\n', '\n', '  bytes32 public sh;\n', '  bool    public finalized = false;\n', '\n', '  event RCVDeclare (address rcv);\n', '  event Finalize   (uint256 fstkReceivedEtherWei, uint256 rcvReceivedFSTWei);\n', '\n', '  struct Bonus {\n', '    uint256 gte;\n', '    uint256 lt;\n', '    uint256 bonusPercentage;\n', '  }\n', '\n', '  Bonus[] public bonusArray;\n', '\n', '  constructor (ERC20 _FST, address _fstCentral, bytes32 _secretHash) public {\n', '    owner = msg.sender;\n', '    rcv = address(0);\n', '\n', '    bonusArray.push(Bonus(       min,  300 ether,   0));\n', '    bonusArray.push(Bonus( 300 ether,  900 ether, 120));\n', '    bonusArray.push(Bonus( 900 ether, 1500 ether, 128));\n', '    bonusArray.push(Bonus(1500 ether,        max, 132));\n', '\n', '    FST = _FST;\n', '    fstCentral = _fstCentral;\n', '\n', '    sh = _secretHash;\n', '  }\n', '\n', '  // Epoch timestamp: 1538323201\n', '  // Timestamp in milliseconds: 1538323201000\n', '  // Human time (GMT): Sunday, September 30, 2018 4:00:01 PM\n', '  // Human time (your time zone): Monday, October 1, 2018 12:00:01 AM GMT+08:00\n', '\n', '  function () external payable {\n', '    require(now <= 1538323201);\n', '  }\n', '\n', '  function declareRCV(string _secret) public {\n', '    require(\n', '      sh  == keccak256(abi.encodePacked(_secret)) &&\n', '      rcv == address(0)\n', '    );\n', '\n', '    rcv = msg.sender;\n', '\n', '    emit RCVDeclare(rcv);\n', '  }\n', '\n', '  function finalize () public {\n', '    require(\n', '      msg.sender == owner &&\n', '      rcv        != address(0) &&\n', '      now        >  1538323201 &&\n', '      finalized  == false\n', '    );\n', '\n', '    finalized = true;\n', '\n', '    uint256 fstkReceivedEtherWei = address(this).balance;\n', '    uint256 rcvReceivedFSTWei = 0;\n', '\n', '    // rollback\n', '    if (fstkReceivedEtherWei < 300 ether) {\n', '      rcv.transfer(fstkReceivedEtherWei);\n', '      emit Finalize(0, 0);\n', '      return;\n', '    }\n', '\n', '    for (uint8 i = 0; i < bonusArray.length; i++) {\n', '      Bonus storage b = bonusArray[i];\n', '\n', '      if (fstkReceivedEtherWei >= b.gte && fstkReceivedEtherWei < b.lt) {\n', '        rcvReceivedFSTWei = fstkReceivedEtherWei * b.bonusPercentage * fstPerWei / 100;\n', '      }\n', '    }\n', '\n', '    require(FST.transferFrom(fstCentral, rcv, rcvReceivedFSTWei));\n', '    fstCentral.transfer(fstkReceivedEtherWei);\n', '\n', '    emit Finalize(fstkReceivedEtherWei, rcvReceivedFSTWei);\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.25;\n', 'pragma experimental "v0.5.0";\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'contract ERC20 {\n', '  function transferFrom (address from, address to, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract SpecialCampaign {\n', '\n', '  address public owner;\n', '  address public rcv;\n', '\n', '  uint256 constant public fstPerWei = 3000;\n', '\n', '  uint256 constant private min = 0;\n', '  uint256 constant private max = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n', '\n', '  ERC20   public FST;\n', '  address public fstCentral;\n', '\n', '  bytes32 public sh;\n', '  bool    public finalized = false;\n', '\n', '  event RCVDeclare (address rcv);\n', '  event Finalize   (uint256 fstkReceivedEtherWei, uint256 rcvReceivedFSTWei);\n', '\n', '  struct Bonus {\n', '    uint256 gte;\n', '    uint256 lt;\n', '    uint256 bonusPercentage;\n', '  }\n', '\n', '  Bonus[] public bonusArray;\n', '\n', '  constructor (ERC20 _FST, address _fstCentral, bytes32 _secretHash) public {\n', '    owner = msg.sender;\n', '    rcv = address(0);\n', '\n', '    bonusArray.push(Bonus(       min,  300 ether,   0));\n', '    bonusArray.push(Bonus( 300 ether,  900 ether, 120));\n', '    bonusArray.push(Bonus( 900 ether, 1500 ether, 128));\n', '    bonusArray.push(Bonus(1500 ether,        max, 132));\n', '\n', '    FST = _FST;\n', '    fstCentral = _fstCentral;\n', '\n', '    sh = _secretHash;\n', '  }\n', '\n', '  // Epoch timestamp: 1538323201\n', '  // Timestamp in milliseconds: 1538323201000\n', '  // Human time (GMT): Sunday, September 30, 2018 4:00:01 PM\n', '  // Human time (your time zone): Monday, October 1, 2018 12:00:01 AM GMT+08:00\n', '\n', '  function () external payable {\n', '    require(now <= 1538323201);\n', '  }\n', '\n', '  function declareRCV(string _secret) public {\n', '    require(\n', '      sh  == keccak256(abi.encodePacked(_secret)) &&\n', '      rcv == address(0)\n', '    );\n', '\n', '    rcv = msg.sender;\n', '\n', '    emit RCVDeclare(rcv);\n', '  }\n', '\n', '  function finalize () public {\n', '    require(\n', '      msg.sender == owner &&\n', '      rcv        != address(0) &&\n', '      now        >  1538323201 &&\n', '      finalized  == false\n', '    );\n', '\n', '    finalized = true;\n', '\n', '    uint256 fstkReceivedEtherWei = address(this).balance;\n', '    uint256 rcvReceivedFSTWei = 0;\n', '\n', '    // rollback\n', '    if (fstkReceivedEtherWei < 300 ether) {\n', '      rcv.transfer(fstkReceivedEtherWei);\n', '      emit Finalize(0, 0);\n', '      return;\n', '    }\n', '\n', '    for (uint8 i = 0; i < bonusArray.length; i++) {\n', '      Bonus storage b = bonusArray[i];\n', '\n', '      if (fstkReceivedEtherWei >= b.gte && fstkReceivedEtherWei < b.lt) {\n', '        rcvReceivedFSTWei = fstkReceivedEtherWei * b.bonusPercentage * fstPerWei / 100;\n', '      }\n', '    }\n', '\n', '    require(FST.transferFrom(fstCentral, rcv, rcvReceivedFSTWei));\n', '    fstCentral.transfer(fstkReceivedEtherWei);\n', '\n', '    emit Finalize(fstkReceivedEtherWei, rcvReceivedFSTWei);\n', '  }\n', '\n', '}']
