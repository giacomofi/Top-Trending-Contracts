['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract TuurntWhitelist is Ownable{\n', '\n', '    mapping(address => bool) public whitelist;\n', '    address public airdrop;\n', '    \n', '    /**\n', '    * @dev Set the airdrop contract address.\n', '    @param _airdrop Airdrop contract address\n', '    */\n', '    function setAirdropAddress(address _airdrop) public onlyOwner{\n', '        airdrop = _airdrop;\n', '    }\n', '  /**\n', '   * @dev Adds single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '    function addToWhitelist(address _beneficiary) external onlyOwner {\n', '        whitelist[_beneficiary] = true;\n', '    }\n', '\n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '    function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '            whitelist[_beneficiaries[i]] = true;\n', '        }\n', '    }\n', '\n', '  /**\n', '   * @dev Removes single address from whitelist.\n', '   * @param _beneficiary Address to be removed to the whitelist\n', '   */\n', '    function removeFromWhitelist(address _beneficiary) external onlyOwner {\n', '        whitelist[_beneficiary] = false;\n', '    }\n', '\n', '    /**\n', '    * @dev Check whether the address is in the whitelist.\n', '    * @param _whiteListAddress Whitelisted user address \n', '    */\n', '    function checkWhitelist(address _whiteListAddress) public view returns(bool){\n', '        if(whitelist[_whiteListAddress])\n', '            return true;\n', '        else\n', '            return false;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract TuurntWhitelist is Ownable{\n', '\n', '    mapping(address => bool) public whitelist;\n', '    address public airdrop;\n', '    \n', '    /**\n', '    * @dev Set the airdrop contract address.\n', '    @param _airdrop Airdrop contract address\n', '    */\n', '    function setAirdropAddress(address _airdrop) public onlyOwner{\n', '        airdrop = _airdrop;\n', '    }\n', '  /**\n', '   * @dev Adds single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '    function addToWhitelist(address _beneficiary) external onlyOwner {\n', '        whitelist[_beneficiary] = true;\n', '    }\n', '\n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '    function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '            whitelist[_beneficiaries[i]] = true;\n', '        }\n', '    }\n', '\n', '  /**\n', '   * @dev Removes single address from whitelist.\n', '   * @param _beneficiary Address to be removed to the whitelist\n', '   */\n', '    function removeFromWhitelist(address _beneficiary) external onlyOwner {\n', '        whitelist[_beneficiary] = false;\n', '    }\n', '\n', '    /**\n', '    * @dev Check whether the address is in the whitelist.\n', '    * @param _whiteListAddress Whitelisted user address \n', '    */\n', '    function checkWhitelist(address _whiteListAddress) public view returns(bool){\n', '        if(whitelist[_whiteListAddress])\n', '            return true;\n', '        else\n', '            return false;\n', '    }\n', '\n', '}']
