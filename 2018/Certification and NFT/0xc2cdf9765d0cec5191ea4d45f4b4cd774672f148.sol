['pragma solidity ^0.4.17;\n', '\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function allowance(address owner, address spender) public constant returns (uint);\n', '\n', '    function transfer(address to, uint value) public returns (bool ok);\n', '    function transferFrom(address from, address to, uint value) public returns (bool ok);\n', '    function approve(address spender, uint value) public returns (bool ok);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract SafeMath {\n', '    function safeMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        sAssert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint a, uint b) pure internal returns (uint) {\n', '        sAssert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a + b;\n', '        sAssert(c>=a && c>=b);\n', '        return c;\n', '    }\n', '\n', '    function sAssert(bool assertion) pure internal {\n', '        if (!assertion) {\n', '            revert();\n', '        }\n', '    }\n', '}\n', '\n', 'contract ArrayUtil {\n', '    function indexOf(bytes32[] array, bytes32 value)\n', '      internal\n', '      view\n', '      returns(uint)\n', '    {\n', '        bool found = false;\n', '        uint index = 0;\n', '\n', '        for (uint i = 0; i < array.length; i++) {\n', '            if (array[i] == value) {\n', '                found = true;\n', '                index = i;\n', '                break;\n', '            }\n', '        }\n', '\n', '        require(found);\n', '        return index;\n', '    }\n', '\n', '    function remove(bytes32[] array, bytes32 value)\n', '      internal\n', '      returns(bytes32[])\n', '    {\n', '        uint index = indexOf(array, value);\n', '        return removeAtIndex(array, index);\n', '    }\n', '\n', '    function removeAtIndex(bytes32[] array, uint index)\n', '      internal\n', '      returns(bytes32[])\n', '    {\n', '        if (index >= array.length) return;\n', '\n', '        bytes32[] memory arrayNew = new bytes32[](array.length - 1);\n', '\n', '        for (uint i = 0; i < arrayNew.length; i++) {\n', '            if(i != index && i < index){\n', '                arrayNew[i] = array[i];\n', '            } else {\n', '                arrayNew[i] = array[i+1];\n', '            }\n', '        }\n', '\n', '        delete array;\n', '        return arrayNew;\n', '    }\n', '}\n', '\n', '\n', 'contract CentralityGiftShop is SafeMath, ArrayUtil {\n', '    // Struct and enum\n', '    struct Inventory {\n', '        string thumbURL;\n', '        string photoURL;\n', '        string name;\n', '        string description;\n', '    }\n', '\n', '    struct Order {\n', '        bytes32 inventoryId;\n', '        uint price;\n', '        uint quantity;\n', '        string name;\n', '        string description;\n', '    }\n', '\n', '    // Instance variables\n', '    mapping(bytes32 => Inventory) public stock;\n', '    mapping(bytes32 => uint) public stockPrice;\n', '    mapping(bytes32 => uint) public stockAvailableQuantity;\n', '    bytes32[] public stocks;\n', '\n', '    address public owner;\n', '    address public paymentContractAddress;\n', '\n', '    mapping(address => Order[]) orders;\n', '\n', '    // Modifier\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    // Init\n', '    function CentralityGiftShop()\n', '      public\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // Admin\n', '    function setPaymentContractAddress(address contractAddress)\n', '      public\n', '      onlyOwner()\n', '    {\n', '        paymentContractAddress = contractAddress;\n', '    }\n', '\n', '    function withdraw()\n', '      public\n', '      onlyOwner()\n', '    {\n', '        require(paymentContractAddress != 0x0);\n', '\n', '        uint balance = ERC20(paymentContractAddress).balanceOf(this);\n', '        require(balance > 0);\n', '\n', '        if (!ERC20(paymentContractAddress).transfer(msg.sender, balance)) {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function addInventory(\n', '        bytes32 inventoryId,\n', '        string thumbURL,\n', '        string photoURL,\n', '        string name,\n', '        string description,\n', '        uint price,\n', '        uint availableQuantity\n', '    )\n', '      public\n', '      onlyOwner()\n', '    {\n', '        Inventory memory inventory = Inventory({\n', '            thumbURL: thumbURL,\n', '            photoURL: photoURL,\n', '            name: name,\n', '            description: description\n', '        });\n', '\n', '        stock[inventoryId] = inventory;\n', '        stockPrice[inventoryId] = price;\n', '        stockAvailableQuantity[inventoryId] = availableQuantity;\n', '\n', '        stocks.push(inventoryId);\n', '    }\n', '\n', '    function removeInventory(bytes32 inventoryId)\n', '      public\n', '      onlyOwner()\n', '    {\n', '        stocks = remove(stocks, inventoryId);\n', '    }\n', '\n', '    function purchaseFor(address buyer, bytes32 inventoryId, uint quantity)\n', '     public\n', '     onlyOwner()\n', '    {\n', '        uint price = stockPrice[inventoryId];\n', '\n', '        // Check if the order is sane\n', '        require(price > 0);\n', '        require(quantity > 0);\n', '        require(stockPrice[inventoryId] > 0);\n', '        require(safeSub(stockAvailableQuantity[inventoryId], quantity) >= 0);\n', '\n', '        //Place Order\n', '        Inventory storage inventory = stock[inventoryId];\n', '\n', '        Order memory order = Order({\n', '            name: inventory.name,\n', '            description: inventory.description,\n', '            inventoryId: inventoryId,\n', '            price: price,\n', '            quantity: quantity\n', '        });\n', '\n', '        orders[buyer].push(order);\n', '        stockAvailableQuantity[inventoryId] = safeSub(stockAvailableQuantity[inventoryId], quantity);\n', '    }\n', '\n', '    // Public\n', '    function getStockLength()\n', '      public\n', '      view\n', '      returns(uint) \n', '    {\n', '        return stocks.length;\n', '    }\n', '    \n', '    function getOrderLength(address buyer)\n', '      public\n', '      view\n', '      returns(uint) \n', '    {\n', '        return orders[buyer].length;\n', '    }\n', '\n', '    function getOrder(address buyer, uint index)\n', '      public\n', '      view\n', '      returns(bytes32, uint, uint, string, string) \n', '    {\n', '        Order o = orders[buyer][index];\n', '        return (o.inventoryId, o.price, o.quantity, o.name, o.description);\n', '    }\n', '    \n', '    function purchase(bytes32 inventoryId, uint quantity)\n', '      public\n', '    {\n', '        uint index = indexOf(stocks, inventoryId);\n', '        uint price = stockPrice[inventoryId];\n', '\n', '        // Check if the order is sane\n', '        require(price > 0);\n', '        require(quantity > 0);\n', '        require(stockPrice[inventoryId] > 0);\n', '        require(safeSub(stockAvailableQuantity[inventoryId], quantity) >= 0);\n', '\n', '        // Check cost\n', '        uint cost = safeMul(price, quantity);\n', '        require(cost > 0);\n', '\n', '        if (!ERC20(paymentContractAddress).transferFrom(msg.sender, this, cost)) {\n', '            revert();\n', '        }\n', '\n', '        Inventory storage inventory = stock[inventoryId];\n', '\n', '        Order memory order = Order({\n', '            name: inventory.name,\n', '            description: inventory.description,\n', '            inventoryId: inventoryId,\n', '            price: price,\n', '            quantity: quantity\n', '        });\n', '\n', '        orders[msg.sender].push(order);\n', '        stockAvailableQuantity[inventoryId] = safeSub(stockAvailableQuantity[inventoryId], quantity);\n', '    }\n', '\n', '    // Default\n', '    function () public {\n', '        // Do not accept ether\n', '        revert();\n', '    }\n', '}']
['pragma solidity ^0.4.17;\n', '\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function allowance(address owner, address spender) public constant returns (uint);\n', '\n', '    function transfer(address to, uint value) public returns (bool ok);\n', '    function transferFrom(address from, address to, uint value) public returns (bool ok);\n', '    function approve(address spender, uint value) public returns (bool ok);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract SafeMath {\n', '    function safeMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        sAssert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint a, uint b) pure internal returns (uint) {\n', '        sAssert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a + b;\n', '        sAssert(c>=a && c>=b);\n', '        return c;\n', '    }\n', '\n', '    function sAssert(bool assertion) pure internal {\n', '        if (!assertion) {\n', '            revert();\n', '        }\n', '    }\n', '}\n', '\n', 'contract ArrayUtil {\n', '    function indexOf(bytes32[] array, bytes32 value)\n', '      internal\n', '      view\n', '      returns(uint)\n', '    {\n', '        bool found = false;\n', '        uint index = 0;\n', '\n', '        for (uint i = 0; i < array.length; i++) {\n', '            if (array[i] == value) {\n', '                found = true;\n', '                index = i;\n', '                break;\n', '            }\n', '        }\n', '\n', '        require(found);\n', '        return index;\n', '    }\n', '\n', '    function remove(bytes32[] array, bytes32 value)\n', '      internal\n', '      returns(bytes32[])\n', '    {\n', '        uint index = indexOf(array, value);\n', '        return removeAtIndex(array, index);\n', '    }\n', '\n', '    function removeAtIndex(bytes32[] array, uint index)\n', '      internal\n', '      returns(bytes32[])\n', '    {\n', '        if (index >= array.length) return;\n', '\n', '        bytes32[] memory arrayNew = new bytes32[](array.length - 1);\n', '\n', '        for (uint i = 0; i < arrayNew.length; i++) {\n', '            if(i != index && i < index){\n', '                arrayNew[i] = array[i];\n', '            } else {\n', '                arrayNew[i] = array[i+1];\n', '            }\n', '        }\n', '\n', '        delete array;\n', '        return arrayNew;\n', '    }\n', '}\n', '\n', '\n', 'contract CentralityGiftShop is SafeMath, ArrayUtil {\n', '    // Struct and enum\n', '    struct Inventory {\n', '        string thumbURL;\n', '        string photoURL;\n', '        string name;\n', '        string description;\n', '    }\n', '\n', '    struct Order {\n', '        bytes32 inventoryId;\n', '        uint price;\n', '        uint quantity;\n', '        string name;\n', '        string description;\n', '    }\n', '\n', '    // Instance variables\n', '    mapping(bytes32 => Inventory) public stock;\n', '    mapping(bytes32 => uint) public stockPrice;\n', '    mapping(bytes32 => uint) public stockAvailableQuantity;\n', '    bytes32[] public stocks;\n', '\n', '    address public owner;\n', '    address public paymentContractAddress;\n', '\n', '    mapping(address => Order[]) orders;\n', '\n', '    // Modifier\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    // Init\n', '    function CentralityGiftShop()\n', '      public\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // Admin\n', '    function setPaymentContractAddress(address contractAddress)\n', '      public\n', '      onlyOwner()\n', '    {\n', '        paymentContractAddress = contractAddress;\n', '    }\n', '\n', '    function withdraw()\n', '      public\n', '      onlyOwner()\n', '    {\n', '        require(paymentContractAddress != 0x0);\n', '\n', '        uint balance = ERC20(paymentContractAddress).balanceOf(this);\n', '        require(balance > 0);\n', '\n', '        if (!ERC20(paymentContractAddress).transfer(msg.sender, balance)) {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function addInventory(\n', '        bytes32 inventoryId,\n', '        string thumbURL,\n', '        string photoURL,\n', '        string name,\n', '        string description,\n', '        uint price,\n', '        uint availableQuantity\n', '    )\n', '      public\n', '      onlyOwner()\n', '    {\n', '        Inventory memory inventory = Inventory({\n', '            thumbURL: thumbURL,\n', '            photoURL: photoURL,\n', '            name: name,\n', '            description: description\n', '        });\n', '\n', '        stock[inventoryId] = inventory;\n', '        stockPrice[inventoryId] = price;\n', '        stockAvailableQuantity[inventoryId] = availableQuantity;\n', '\n', '        stocks.push(inventoryId);\n', '    }\n', '\n', '    function removeInventory(bytes32 inventoryId)\n', '      public\n', '      onlyOwner()\n', '    {\n', '        stocks = remove(stocks, inventoryId);\n', '    }\n', '\n', '    function purchaseFor(address buyer, bytes32 inventoryId, uint quantity)\n', '     public\n', '     onlyOwner()\n', '    {\n', '        uint price = stockPrice[inventoryId];\n', '\n', '        // Check if the order is sane\n', '        require(price > 0);\n', '        require(quantity > 0);\n', '        require(stockPrice[inventoryId] > 0);\n', '        require(safeSub(stockAvailableQuantity[inventoryId], quantity) >= 0);\n', '\n', '        //Place Order\n', '        Inventory storage inventory = stock[inventoryId];\n', '\n', '        Order memory order = Order({\n', '            name: inventory.name,\n', '            description: inventory.description,\n', '            inventoryId: inventoryId,\n', '            price: price,\n', '            quantity: quantity\n', '        });\n', '\n', '        orders[buyer].push(order);\n', '        stockAvailableQuantity[inventoryId] = safeSub(stockAvailableQuantity[inventoryId], quantity);\n', '    }\n', '\n', '    // Public\n', '    function getStockLength()\n', '      public\n', '      view\n', '      returns(uint) \n', '    {\n', '        return stocks.length;\n', '    }\n', '    \n', '    function getOrderLength(address buyer)\n', '      public\n', '      view\n', '      returns(uint) \n', '    {\n', '        return orders[buyer].length;\n', '    }\n', '\n', '    function getOrder(address buyer, uint index)\n', '      public\n', '      view\n', '      returns(bytes32, uint, uint, string, string) \n', '    {\n', '        Order o = orders[buyer][index];\n', '        return (o.inventoryId, o.price, o.quantity, o.name, o.description);\n', '    }\n', '    \n', '    function purchase(bytes32 inventoryId, uint quantity)\n', '      public\n', '    {\n', '        uint index = indexOf(stocks, inventoryId);\n', '        uint price = stockPrice[inventoryId];\n', '\n', '        // Check if the order is sane\n', '        require(price > 0);\n', '        require(quantity > 0);\n', '        require(stockPrice[inventoryId] > 0);\n', '        require(safeSub(stockAvailableQuantity[inventoryId], quantity) >= 0);\n', '\n', '        // Check cost\n', '        uint cost = safeMul(price, quantity);\n', '        require(cost > 0);\n', '\n', '        if (!ERC20(paymentContractAddress).transferFrom(msg.sender, this, cost)) {\n', '            revert();\n', '        }\n', '\n', '        Inventory storage inventory = stock[inventoryId];\n', '\n', '        Order memory order = Order({\n', '            name: inventory.name,\n', '            description: inventory.description,\n', '            inventoryId: inventoryId,\n', '            price: price,\n', '            quantity: quantity\n', '        });\n', '\n', '        orders[msg.sender].push(order);\n', '        stockAvailableQuantity[inventoryId] = safeSub(stockAvailableQuantity[inventoryId], quantity);\n', '    }\n', '\n', '    // Default\n', '    function () public {\n', '        // Do not accept ether\n', '        revert();\n', '    }\n', '}']
