['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title Ownable contract - base contract with an owner\n', ' */\n', 'contract Ownable {\n', '  \n', '  address public owner;\n', '  address public newOwner;\n', '\n', '  event OwnershipTransferred(address _from, address _to);\n', '  \n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    assert(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    assert(_newOwner != address(0));      \n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Accept transferOwnership.\n', '   */\n', '  function acceptOwnership() public {\n', '    if (msg.sender == newOwner) {\n', '      emit OwnershipTransferred(owner, newOwner);\n', '      owner = newOwner;\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '\n', '  function safeSub(uint256 x, uint256 y) internal pure returns (uint256) {\n', '    uint256 z = x - y;\n', '    assert(z <= x);\n', '\t  return z;\n', '  }\n', '\n', '  function safeAdd(uint256 x, uint256 y) internal pure returns (uint256) {\n', '    uint256 z = x + y;\n', '\t  assert(z >= x);\n', '\t  return z;\n', '  }\n', '\t\n', '  function safeDiv(uint256 x, uint256 y) internal pure returns (uint256) {\n', '    uint256 z = x / y;\n', '    return z;\n', '  }\n', '\t\n', '  function safeMul(uint256 x, uint256 y) internal pure returns (uint256) {\n', '    uint256 z = x * y;\n', '    assert(x == 0 || z / x == y);\n', '    return z;\n', '  }\n', '\n', '  function min(uint256 x, uint256 y) internal pure returns (uint256) {\n', '    uint256 z = x <= y ? x : y;\n', '    return z;\n', '  }\n', '\n', '  function max(uint256 x, uint256 y) internal pure returns (uint256) {\n', '    uint256 z = x >= y ? x : y;\n', '    return z;\n', '  }\n', '}\n', '\n', ' /* New ERC23 contract interface */\n', 'contract ERC223 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public view returns (uint);\n', '  \n', '  function name() public view returns (string _name);\n', '  function symbol() public view returns (string _symbol);\n', '  function decimals() public view returns (uint256 _decimals);\n', '  function totalSupply() public view returns (uint256 _supply);\n', '\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', 'contract ContractReceiver {\n', '    function tokenFallback(address _from, uint _value, bytes _data) public returns (bool success);\n', '}\n', '\n', '\n', 'contract ERC223Token is ERC223,SafeMath ,Ownable {\n', '\n', '  mapping(address => uint) balances;\n', '  \n', '  string public name;\n', '  string public symbol;\n', '  uint256 public decimals;\n', '  uint256 public totalSupply;\n', '  \n', '  address public crowdsaleAgent;\n', '  address[] public addrCotracts;\n', '  bool public released = false;  \n', '  \n', '  /**\n', '   * @dev The function can be called only by crowdsale agent.\n', '   */\n', '  modifier onlyCrowdsaleAgent() {\n', '    assert(msg.sender == crowdsaleAgent);\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev Limit token transfer until the crowdsale is over.\n', '   */\n', '  modifier canTransfer() {\n', '    if(msg.sender != address(this)){\n', '      if(!released){\n', '        revert();\n', '      }\n', '    }\n', '    _;\n', '  } \n', '  \n', '  // Function to access name of token .\n', '  function name() public view returns (string _name) {\n', '      return name;\n', '  }\n', '  // Function to access symbol of token .\n', '  function symbol() public view returns (string _symbol) {\n', '      return symbol;\n', '  }\n', '  // Function to access decimals of token .\n', '  function decimals() public view returns (uint256 _decimals) {\n', '      return decimals;\n', '  }\n', '  // Function to access total supply of tokens .\n', '  function totalSupply() public view returns (uint256 _totalSupply) {\n', '      return totalSupply;\n', '  }\n', '  \n', '  \n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data) public canTransfer returns (bool success) {\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, _data);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, _data);\n', '    }\n', '  }\n', '  \n', '  // Standard function transfer similar to ERC20 transfer with no _data .\n', '  // Added due to backwards compatibility reasons .\n', '  function transfer(address _to, uint _value) public canTransfer returns (bool success) {\n', '    //standard function transfer similar to ERC20 transfer with no _data\n', '    //added due to backwards compatibility reasons\n', '    bytes memory empty;\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, empty);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, empty);\n', '    }\n', '  }\n', '\n', '  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '  function isContract(address _addr) private view returns (bool is_contract) {\n', '      uint length;\n', '      assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '      }\n', '      return (length>0);\n', '    }\n', '\n', '  //function that is called when transaction target is an address\n', '  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '    balances[_to] = safeAdd(balanceOf(_to), _value);\n', '    emit Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '  \n', '  //function that is called when transaction target is a contract\n', '  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '    bool flag = false;\n', '    for(uint i = 0; i < addrCotracts.length; i++) {\n', '      if(_to == addrCotracts[i]) flag = true;\n', '    }\n', '    if(flag){\n', '      balances[this] = safeAdd(balanceOf(this), _value);\n', '    }else{\n', '      balances[_to] = safeAdd(balanceOf(_to), _value);\n', '    }\n', '    ContractReceiver receiver = ContractReceiver(_to);\n', '    if(receiver.tokenFallback(msg.sender, _value, _data)){\n', '      emit Transfer(msg.sender, _to, _value, _data);\n', '      return true;\n', '    }else{\n', '      revert();\n', '    }\n', '    if(flag){\n', '      emit Transfer(msg.sender, this, _value, _data);\n', '    }else{\n', '      emit Transfer(msg.sender, _to, _value, _data);\n', '    }\n', '    return true;\n', '}\n', '\n', '  function balanceOf(address _owner) public view returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '  /** \n', '   * @dev Create new tokens and allocate them to an address. Only callably by a crowdsale agent\n', '   * @param _to dest address\n', '   * @param _value tokens amount\n', '   * @return mint result\n', '   */ \n', '  function mint(address _to, uint _value, bytes _data) public onlyCrowdsaleAgent returns (bool success) {\n', '    totalSupply = safeAdd(totalSupply, _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    emit Transfer(0, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Set the crowdsale Agent\n', '   * @param _crowdsaleAgent crowdsale contract address\n', '   */\n', '  function setCrowdsaleAgent(address _crowdsaleAgent) public onlyOwner {\n', '    crowdsaleAgent = _crowdsaleAgent;\n', '  }\n', '  \n', '  /**\n', '   * @dev One way function to release the tokens to the wild. Can be called only from the release agent that is the final ICO contract. \n', '   */\n', '  function releaseTokenTransfer() public onlyCrowdsaleAgent {\n', '    released = true;\n', '  }\n', '\n', '}\n', '\n', '/** \n', ' * @title GoldVein contract - standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\n', ' */\n', 'contract GoldVein is ERC223Token{\n', '  \n', '  /**\n', '   * @dev The function can be called only by agent.\n', '   */\n', '  modifier onlyAgent() {\n', '    bool flag = false;\n', '    for(uint i = 0; i < addrCotracts.length; i++) {\n', '      if(msg.sender == addrCotracts[i]) flag = true;\n', '    }\n', '   assert(flag);\n', '    _;\n', '  }\n', '\n', '  /** Name and symbol were updated. */\n', '  event UpdatedTokenInformation(string newName, string newSymbol);\n', '  \n', '  /**\n', '   * @param _name Token name\n', '   * @param _symbol Token symbol - should be all caps\n', '   * @param _decimals Number of decimal places\n', '   */\n', '   \n', '  function GoldVein(string _name, string _symbol, uint256 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }   \n', '  \n', '   function tokenFallback(address _from, uint _value, bytes _data) public onlyAgent returns (bool success){\n', '    balances[this] = safeSub(balanceOf(this), _value);\n', '    balances[_from] = safeAdd(balanceOf(_from), _value);\n', '    emit Transfer(this, _from, _value, _data);\n', '    return true;\n', '  }\n', '  \n', '  /**\n', '   * Owner can update token information here.\n', '   *\n', '   * It is often useful to conceal the actual token association, until\n', '   * the token operations, like central issuance or reissuance have been completed.\n', '   *\n', '   * This function allows the token owner to rename the token after the operations\n', '   * have been completed and then point the audience to use the token contract.\n', '   */\n', '  function setTokenInformation(string _name, string _symbol) public onlyOwner {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    emit UpdatedTokenInformation(name, symbol);\n', '  }\n', '  \n', '  function setAddr (address _addr) public onlyOwner {\n', '    addrCotracts.push(_addr);\n', '  }\n', ' \n', '  function transferForICO(address _to, uint _value) public onlyCrowdsaleAgent returns (bool success) {\n', '    return this.transfer(_to, _value);\n', '  }\n', ' \n', '  function delAddr (uint number) public onlyOwner {\n', '    require(number < addrCotracts.length);\n', '    for(uint i = number; i < addrCotracts.length-1; i++) {\n', '      addrCotracts[i] = addrCotracts[i+1];\n', '    }\n', '    addrCotracts.length = addrCotracts.length-1;\n', '  }\n', '}']