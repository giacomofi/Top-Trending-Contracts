['pragma solidity ^0.4.0;\n', 'contract Bitscreen {\n', '    struct IPFSHash {\n', '    bytes32 hash;\n', '    uint8 hashFunction;\n', '    uint8 size;\n', '    }\n', '    event ImageChange(bytes32 _hash,uint8 _hashFunction,uint8 _size);\n', '\n', '    struct ScreenData {\n', '    uint currLargestAmount;\n', '    uint256 totalRaised;\n', '    address currHolder;\n', '    uint8 heightRatio;\n', '    uint8 widthRatio;\n', '    string country;\n', '    }\n', '    \n', '    struct ContentRules {\n', '        bool sexual;\n', '        bool violent;\n', '        bool political;\n', '        bool controversial;\n', '        bool illegal;\n', '    }\n', '    event RuleChange(bool _sexual,bool _violent,bool _political,bool _controversial,bool _illegal);\n', '    address public owner;\n', '    \n', '    IPFSHash public currPicHash;\n', '    \n', '    ScreenData public screenstate;\n', '    ContentRules public rules;\n', '    address[] private badAddresses;\n', '\n', '    function Bitscreen(bytes32 _ipfsHash, uint8 _ipfsHashFunc, uint8 _ipfsHashSize, uint8 _heightRatio, uint8 _widthRatio, string _country) public {\n', '        owner = msg.sender;\n', '        currPicHash = IPFSHash(_ipfsHash,_ipfsHashFunc,_ipfsHashSize);\n', '        screenstate = ScreenData(0,0, msg.sender,_heightRatio,_widthRatio,_country);\n', '        rules = ContentRules(false,false,false,false,false);\n', '    }\n', '    \n', '    function remove() public {\n', '        if(msg.sender == owner) {\n', '        selfdestruct(owner);\n', '        }\n', '    }\n', '    \n', '    function withdraw() external{\n', '        if(msg.sender == owner) {\n', '            uint256 withdrawAmount = screenstate.totalRaised;\n', '            screenstate.totalRaised=0;\n', '            screenstate.currLargestAmount=0;\n', '            msg.sender.transfer(withdrawAmount);\n', '        }else{\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function getBadAddresses() external constant returns (address[]) {\n', '        if(msg.sender == owner) {\n', '            return badAddresses;\n', '        }else{\n', '            revert();\n', '        }\n', '    }\n', '\n', '\n', '    function changeRules(bool _sexual,bool _violent, bool _political, bool _controversial, bool _illegal) public {\n', '                if(msg.sender == owner) {\n', '                rules.sexual=_sexual;\n', '                rules.violent=_violent;\n', '                rules.political=_political;\n', '                rules.controversial=_controversial;\n', '                rules.illegal=_illegal;\n', '                \n', '                RuleChange(_sexual,_violent,_political,_controversial,_illegal);\n', '                \n', '                }else{\n', '                revert();\n', '                }\n', '    }\n', '\n', '\n', '    function changeBid(bytes32 _ipfsHash, uint8 _ipfsHashFunc, uint8 _ipfsHashSize) payable external {\n', '            if(msg.value>screenstate.currLargestAmount) {\n', '                screenstate.currLargestAmount=msg.value;\n', '                screenstate.currHolder=msg.sender;\n', '                screenstate.totalRaised+=msg.value;\n', '                \n', '                currPicHash.hash=_ipfsHash;\n', '                currPicHash.hashFunction=_ipfsHashFunc;\n', '                currPicHash.size=_ipfsHashSize;\n', '                \n', '                ImageChange(_ipfsHash,_ipfsHashFunc,_ipfsHashSize);\n', '                \n', '            }else {\n', '                revert();\n', '            }\n', '    }\n', '    \n', '    function emergencyOverwrite(bytes32 _ipfsHash, uint8 _ipfsHashFunc, uint8 _ipfsHashSize) external {\n', '        if(msg.sender == owner) { \n', '            badAddresses.push(screenstate.currHolder);\n', '            currPicHash.hash=_ipfsHash;\n', '            currPicHash.hashFunction=_ipfsHashFunc;\n', '            currPicHash.size=_ipfsHashSize;\n', '            screenstate.currHolder=msg.sender;\n', '            ImageChange(_ipfsHash,_ipfsHashFunc,_ipfsHashSize);\n', '        }else{\n', '            revert();\n', '        }\n', '    }\n', '    \n', '    function () payable public {}\n', '\n', '}']
['pragma solidity ^0.4.0;\n', 'contract Bitscreen {\n', '    struct IPFSHash {\n', '    bytes32 hash;\n', '    uint8 hashFunction;\n', '    uint8 size;\n', '    }\n', '    event ImageChange(bytes32 _hash,uint8 _hashFunction,uint8 _size);\n', '\n', '    struct ScreenData {\n', '    uint currLargestAmount;\n', '    uint256 totalRaised;\n', '    address currHolder;\n', '    uint8 heightRatio;\n', '    uint8 widthRatio;\n', '    string country;\n', '    }\n', '    \n', '    struct ContentRules {\n', '        bool sexual;\n', '        bool violent;\n', '        bool political;\n', '        bool controversial;\n', '        bool illegal;\n', '    }\n', '    event RuleChange(bool _sexual,bool _violent,bool _political,bool _controversial,bool _illegal);\n', '    address public owner;\n', '    \n', '    IPFSHash public currPicHash;\n', '    \n', '    ScreenData public screenstate;\n', '    ContentRules public rules;\n', '    address[] private badAddresses;\n', '\n', '    function Bitscreen(bytes32 _ipfsHash, uint8 _ipfsHashFunc, uint8 _ipfsHashSize, uint8 _heightRatio, uint8 _widthRatio, string _country) public {\n', '        owner = msg.sender;\n', '        currPicHash = IPFSHash(_ipfsHash,_ipfsHashFunc,_ipfsHashSize);\n', '        screenstate = ScreenData(0,0, msg.sender,_heightRatio,_widthRatio,_country);\n', '        rules = ContentRules(false,false,false,false,false);\n', '    }\n', '    \n', '    function remove() public {\n', '        if(msg.sender == owner) {\n', '        selfdestruct(owner);\n', '        }\n', '    }\n', '    \n', '    function withdraw() external{\n', '        if(msg.sender == owner) {\n', '            uint256 withdrawAmount = screenstate.totalRaised;\n', '            screenstate.totalRaised=0;\n', '            screenstate.currLargestAmount=0;\n', '            msg.sender.transfer(withdrawAmount);\n', '        }else{\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function getBadAddresses() external constant returns (address[]) {\n', '        if(msg.sender == owner) {\n', '            return badAddresses;\n', '        }else{\n', '            revert();\n', '        }\n', '    }\n', '\n', '\n', '    function changeRules(bool _sexual,bool _violent, bool _political, bool _controversial, bool _illegal) public {\n', '                if(msg.sender == owner) {\n', '                rules.sexual=_sexual;\n', '                rules.violent=_violent;\n', '                rules.political=_political;\n', '                rules.controversial=_controversial;\n', '                rules.illegal=_illegal;\n', '                \n', '                RuleChange(_sexual,_violent,_political,_controversial,_illegal);\n', '                \n', '                }else{\n', '                revert();\n', '                }\n', '    }\n', '\n', '\n', '    function changeBid(bytes32 _ipfsHash, uint8 _ipfsHashFunc, uint8 _ipfsHashSize) payable external {\n', '            if(msg.value>screenstate.currLargestAmount) {\n', '                screenstate.currLargestAmount=msg.value;\n', '                screenstate.currHolder=msg.sender;\n', '                screenstate.totalRaised+=msg.value;\n', '                \n', '                currPicHash.hash=_ipfsHash;\n', '                currPicHash.hashFunction=_ipfsHashFunc;\n', '                currPicHash.size=_ipfsHashSize;\n', '                \n', '                ImageChange(_ipfsHash,_ipfsHashFunc,_ipfsHashSize);\n', '                \n', '            }else {\n', '                revert();\n', '            }\n', '    }\n', '    \n', '    function emergencyOverwrite(bytes32 _ipfsHash, uint8 _ipfsHashFunc, uint8 _ipfsHashSize) external {\n', '        if(msg.sender == owner) { \n', '            badAddresses.push(screenstate.currHolder);\n', '            currPicHash.hash=_ipfsHash;\n', '            currPicHash.hashFunction=_ipfsHashFunc;\n', '            currPicHash.size=_ipfsHashSize;\n', '            screenstate.currHolder=msg.sender;\n', '            ImageChange(_ipfsHash,_ipfsHashFunc,_ipfsHashSize);\n', '        }else{\n', '            revert();\n', '        }\n', '    }\n', '    \n', '    function () payable public {}\n', '\n', '}']
