['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        \n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '    \n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;   \n', '    }\n', '    \n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    \n', '    function balanceOf(address who) public view returns (uint256);\n', '    \n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    \n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    \n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    \n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    \n', '    event Approval(address indexed owner,address indexed spender,uint256 value);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract EthereumRed is ERC20 {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => mapping (address => uint256)) private allowed;\n', '    \n', '    mapping(address => uint256) private balances;\n', '    \n', '    mapping(address => bool) private lockedAddresses;\n', '    \n', '    address private admin;\n', '    \n', '    address private founder;\n', '    \n', '    bool public isTransferable = false;\n', '    \n', '    string public name;\n', '    \n', '    string public symbol;\n', '    \n', '    uint256 public totalSupply;\n', '    \n', '    uint8 public decimals;\n', '    \n', '    constructor(address _founder, address _admin) public {\n', '        name = "Ethereum Red";\n', '        symbol = "ETHR";\n', '        totalSupply = 200000000000000000000000000;\n', '        decimals = 18;\n', '        admin = _admin;\n', '        founder = _founder;\n', '        balances[founder] = totalSupply;\n', '        emit Transfer(0x0, founder, totalSupply);\n', '    }\n', '    \n', '    modifier onlyAdmin {\n', '        require(admin == msg.sender);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyFounder {\n', '        require(founder == msg.sender);\n', '        _;\n', '    }\n', '    \n', '    modifier transferable {\n', '        require(isTransferable);\n', '        _;\n', '    }\n', '    \n', '    modifier notLocked {\n', '        require(!lockedAddresses[msg.sender]);\n', '        _;\n', '    }\n', '    \n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) transferable notLocked public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) transferable public returns (bool) {\n', '        require(!lockedAddresses[_from]);\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        \n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) transferable notLocked public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function distribute(address _to, uint256 _value) onlyFounder public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function claimToken(address tokenContract, address _to, uint256 _value) onlyAdmin public returns (bool) {\n', '        require(tokenContract != address(0));\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '        \n', '        ERC20 token = ERC20(tokenContract);\n', '\n', '        return token.transfer(_to, _value);\n', '    }\n', '    \n', '    function lock(address who) onlyAdmin public {\n', '        \n', '        lockedAddresses[who] = true;\n', '    }\n', '    \n', '    function unlock(address who) onlyAdmin public {\n', '        \n', '        lockedAddresses[who] = false;\n', '    }\n', '    \n', '    function isLocked(address who) public view returns(bool) {\n', '        \n', '        return lockedAddresses[who];\n', '    }\n', '\n', '    function enableTransfer() onlyAdmin public {\n', '        \n', '        isTransferable = true;\n', '    }\n', '    \n', '    function disableTransfer() onlyAdmin public {\n', '        \n', '        isTransferable = false;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        \n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '    \n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;   \n', '    }\n', '    \n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    \n', '    function balanceOf(address who) public view returns (uint256);\n', '    \n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    \n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    \n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    \n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    \n', '    event Approval(address indexed owner,address indexed spender,uint256 value);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract EthereumRed is ERC20 {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => mapping (address => uint256)) private allowed;\n', '    \n', '    mapping(address => uint256) private balances;\n', '    \n', '    mapping(address => bool) private lockedAddresses;\n', '    \n', '    address private admin;\n', '    \n', '    address private founder;\n', '    \n', '    bool public isTransferable = false;\n', '    \n', '    string public name;\n', '    \n', '    string public symbol;\n', '    \n', '    uint256 public totalSupply;\n', '    \n', '    uint8 public decimals;\n', '    \n', '    constructor(address _founder, address _admin) public {\n', '        name = "Ethereum Red";\n', '        symbol = "ETHR";\n', '        totalSupply = 200000000000000000000000000;\n', '        decimals = 18;\n', '        admin = _admin;\n', '        founder = _founder;\n', '        balances[founder] = totalSupply;\n', '        emit Transfer(0x0, founder, totalSupply);\n', '    }\n', '    \n', '    modifier onlyAdmin {\n', '        require(admin == msg.sender);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyFounder {\n', '        require(founder == msg.sender);\n', '        _;\n', '    }\n', '    \n', '    modifier transferable {\n', '        require(isTransferable);\n', '        _;\n', '    }\n', '    \n', '    modifier notLocked {\n', '        require(!lockedAddresses[msg.sender]);\n', '        _;\n', '    }\n', '    \n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) transferable notLocked public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) transferable public returns (bool) {\n', '        require(!lockedAddresses[_from]);\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        \n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) transferable notLocked public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function distribute(address _to, uint256 _value) onlyFounder public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function claimToken(address tokenContract, address _to, uint256 _value) onlyAdmin public returns (bool) {\n', '        require(tokenContract != address(0));\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '        \n', '        ERC20 token = ERC20(tokenContract);\n', '\n', '        return token.transfer(_to, _value);\n', '    }\n', '    \n', '    function lock(address who) onlyAdmin public {\n', '        \n', '        lockedAddresses[who] = true;\n', '    }\n', '    \n', '    function unlock(address who) onlyAdmin public {\n', '        \n', '        lockedAddresses[who] = false;\n', '    }\n', '    \n', '    function isLocked(address who) public view returns(bool) {\n', '        \n', '        return lockedAddresses[who];\n', '    }\n', '\n', '    function enableTransfer() onlyAdmin public {\n', '        \n', '        isTransferable = true;\n', '    }\n', '    \n', '    function disableTransfer() onlyAdmin public {\n', '        \n', '        isTransferable = false;\n', '    }\n', '}']
