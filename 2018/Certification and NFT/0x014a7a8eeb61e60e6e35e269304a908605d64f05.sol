['pragma solidity ^0.4.24;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract WhitepaperVersioning {\n', '    mapping (address => Whitepaper[]) private whitepapers;\n', '    mapping (address => address) private authors;\n', '    event Post(address indexed _contract, uint256 indexed _version, string _ipfsHash, address _author);\n', '\n', '    struct Whitepaper {\n', '        uint256 version;\n', '        string ipfsHash;\n', '    }\n', '\n', '    /**\n', '     * @dev Constructor\n', '     * @dev Doing nothing.\n', '     */\n', '    constructor () public {}\n', '\n', '    /**\n', '     * @dev Function to post a new whitepaper\n', '     * @param _version uint256 Version number in integer\n', '     * @param _ipfsHash string IPFS hash of the posting whitepaper\n', '     * @return status bool\n', '     */\n', '    function pushWhitepaper (Ownable _contract, uint256 _version, string _ipfsHash) public returns (bool) {\n', '        uint256 num = whitepapers[_contract].length;\n', '        if(num == 0){\n', '            // If the posting whitepaper is the initial, only the target contract owner can post.\n', '            require(_contract.owner() == msg.sender);\n', '            authors[_contract] = msg.sender;\n', '        }else{\n', '            // Check if the initial version whitepaper&#39;s author is the msg.sender\n', '            require(authors[_contract] == msg.sender);\n', '            // Check if the version is greater than the previous version\n', '            require(whitepapers[_contract][num-1].version < _version);\n', '        }\n', '    \n', '        whitepapers[_contract].push(Whitepaper(_version, _ipfsHash));\n', '        emit Post(_contract, _version, _ipfsHash, msg.sender);\n', '        return true;\n', '    }\n', '  \n', '    /**\n', '     * @dev Look up whitepaper at the specified index\n', '     * @param _contract address Target contract address associated with a whitepaper\n', '     * @param _index uint256 Index number of whitepapers associated with the specified contract address\n', '     * @return version uint8 Version number in integer\n', '     * @return ipfsHash string IPFS hash of the whitepaper\n', '     * @return author address Address of an account who posted the whitepaper\n', '     */\n', '    function getWhitepaperAt (address _contract, uint256 _index) public view returns (\n', '        uint256 version,\n', '        string ipfsHash,\n', '        address author\n', '    ) {\n', '        return (\n', '            whitepapers[_contract][_index].version,\n', '            whitepapers[_contract][_index].ipfsHash,\n', '            authors[_contract]\n', '        );\n', '    }\n', '    \n', '    /**\n', '     * @dev Look up whitepaper at the specified index\n', '     * @param _contract address Target contract address associated with a whitepaper\n', '     * @return version uint8 Version number in integer\n', '     * @return ipfsHash string IPFS hash of the whitepaper\n', '     * @return author address Address of an account who posted the whitepaper\n', '     */\n', '    function getLatestWhitepaper (address _contract) public view returns (\n', '        uint256 version,\n', '        string ipfsHash,\n', '        address author\n', '    ) {\n', '        uint256 latest = whitepapers[_contract].length - 1;\n', '        return getWhitepaperAt(_contract, latest);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract WhitepaperVersioning {\n', '    mapping (address => Whitepaper[]) private whitepapers;\n', '    mapping (address => address) private authors;\n', '    event Post(address indexed _contract, uint256 indexed _version, string _ipfsHash, address _author);\n', '\n', '    struct Whitepaper {\n', '        uint256 version;\n', '        string ipfsHash;\n', '    }\n', '\n', '    /**\n', '     * @dev Constructor\n', '     * @dev Doing nothing.\n', '     */\n', '    constructor () public {}\n', '\n', '    /**\n', '     * @dev Function to post a new whitepaper\n', '     * @param _version uint256 Version number in integer\n', '     * @param _ipfsHash string IPFS hash of the posting whitepaper\n', '     * @return status bool\n', '     */\n', '    function pushWhitepaper (Ownable _contract, uint256 _version, string _ipfsHash) public returns (bool) {\n', '        uint256 num = whitepapers[_contract].length;\n', '        if(num == 0){\n', '            // If the posting whitepaper is the initial, only the target contract owner can post.\n', '            require(_contract.owner() == msg.sender);\n', '            authors[_contract] = msg.sender;\n', '        }else{\n', "            // Check if the initial version whitepaper's author is the msg.sender\n", '            require(authors[_contract] == msg.sender);\n', '            // Check if the version is greater than the previous version\n', '            require(whitepapers[_contract][num-1].version < _version);\n', '        }\n', '    \n', '        whitepapers[_contract].push(Whitepaper(_version, _ipfsHash));\n', '        emit Post(_contract, _version, _ipfsHash, msg.sender);\n', '        return true;\n', '    }\n', '  \n', '    /**\n', '     * @dev Look up whitepaper at the specified index\n', '     * @param _contract address Target contract address associated with a whitepaper\n', '     * @param _index uint256 Index number of whitepapers associated with the specified contract address\n', '     * @return version uint8 Version number in integer\n', '     * @return ipfsHash string IPFS hash of the whitepaper\n', '     * @return author address Address of an account who posted the whitepaper\n', '     */\n', '    function getWhitepaperAt (address _contract, uint256 _index) public view returns (\n', '        uint256 version,\n', '        string ipfsHash,\n', '        address author\n', '    ) {\n', '        return (\n', '            whitepapers[_contract][_index].version,\n', '            whitepapers[_contract][_index].ipfsHash,\n', '            authors[_contract]\n', '        );\n', '    }\n', '    \n', '    /**\n', '     * @dev Look up whitepaper at the specified index\n', '     * @param _contract address Target contract address associated with a whitepaper\n', '     * @return version uint8 Version number in integer\n', '     * @return ipfsHash string IPFS hash of the whitepaper\n', '     * @return author address Address of an account who posted the whitepaper\n', '     */\n', '    function getLatestWhitepaper (address _contract) public view returns (\n', '        uint256 version,\n', '        string ipfsHash,\n', '        address author\n', '    ) {\n', '        uint256 latest = whitepapers[_contract].length - 1;\n', '        return getWhitepaperAt(_contract, latest);\n', '    }\n', '}']
