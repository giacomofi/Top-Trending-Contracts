['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/// @notice The BrokerVerifier interface defines the functions that a settlement\n', '/// layer&#39;s broker verifier contract must implement.\n', 'interface BrokerVerifier {\n', '\n', '    /// @notice The function signature that will be called when a trader opens\n', '    /// an order.\n', '    ///\n', '    /// @param _trader The trader requesting the withdrawal.\n', '    /// @param _signature The 65-byte signature from the broker.\n', '    /// @param _orderID The 32-byte order ID.\n', '    function verifyOpenSignature(\n', '        address _trader,\n', '        bytes _signature,\n', '        bytes32 _orderID\n', '    ) external returns (bool);\n', '}\n', '\n', '/// @notice The Settlement interface defines the functions that a settlement\n', '/// layer must implement.\n', '/// Docs: https://github.com/republicprotocol/republic-sol/blob/nightly/docs/05-settlement.md\n', 'interface Settlement {\n', '    function submitOrder(\n', '        bytes _details,\n', '        uint64 _settlementID,\n', '        uint64 _tokens,\n', '        uint256 _price,\n', '        uint256 _volume,\n', '        uint256 _minimumVolume\n', '    ) external;\n', '\n', '    function submissionGasPriceLimit() external view returns (uint256);\n', '\n', '    function settle(\n', '        bytes32 _buyID,\n', '        bytes32 _sellID\n', '    ) external;\n', '\n', '    /// @notice orderStatus should return the status of the order, which should\n', '    /// be:\n', '    ///     0  - Order not seen before\n', '    ///     1  - Order details submitted\n', '    ///     >1 - Order settled, or settlement no longer possible\n', '    function orderStatus(bytes32 _orderID) external view returns (uint8);\n', '}\n', '\n', '/// @notice SettlementRegistry allows a Settlement layer to register the\n', '/// contracts used for match settlement and for broker signature verification.\n', 'contract SettlementRegistry is Ownable {\n', '    string public VERSION; // Passed in as a constructor parameter.\n', '\n', '    struct SettlementDetails {\n', '        bool registered;\n', '        Settlement settlementContract;\n', '        BrokerVerifier brokerVerifierContract;\n', '    }\n', '\n', '    // Settlement IDs are 64-bit unsigned numbers\n', '    mapping(uint64 => SettlementDetails) public settlementDetails;\n', '\n', '    // Events\n', '    event LogSettlementRegistered(uint64 settlementID, Settlement settlementContract, BrokerVerifier brokerVerifierContract);\n', '    event LogSettlementUpdated(uint64 settlementID, Settlement settlementContract, BrokerVerifier brokerVerifierContract);\n', '    event LogSettlementDeregistered(uint64 settlementID);\n', '\n', '    /// @notice The contract constructor.\n', '    ///\n', '    /// @param _VERSION A string defining the contract version.\n', '    constructor(string _VERSION) public {\n', '        VERSION = _VERSION;\n', '    }\n', '\n', '    /// @notice Returns the settlement contract of a settlement layer.\n', '    function settlementRegistration(uint64 _settlementID) external view returns (bool) {\n', '        return settlementDetails[_settlementID].registered;\n', '    }\n', '\n', '    /// @notice Returns the settlement contract of a settlement layer.\n', '    function settlementContract(uint64 _settlementID) external view returns (Settlement) {\n', '        return settlementDetails[_settlementID].settlementContract;\n', '    }\n', '\n', '    /// @notice Returns the broker verifier contract of a settlement layer.\n', '    function brokerVerifierContract(uint64 _settlementID) external view returns (BrokerVerifier) {\n', '        return settlementDetails[_settlementID].brokerVerifierContract;\n', '    }\n', '\n', '    /// @param _settlementID A unique 64-bit settlement identifier.\n', '    /// @param _settlementContract The address to use for settling matches.\n', '    /// @param _brokerVerifierContract The decimals to use for verifying\n', '    ///        broker signatures.\n', '    function registerSettlement(uint64 _settlementID, Settlement _settlementContract, BrokerVerifier _brokerVerifierContract) public onlyOwner {\n', '        bool alreadyRegistered = settlementDetails[_settlementID].registered;\n', '        \n', '        settlementDetails[_settlementID] = SettlementDetails({\n', '            registered: true,\n', '            settlementContract: _settlementContract,\n', '            brokerVerifierContract: _brokerVerifierContract\n', '        });\n', '\n', '        if (alreadyRegistered) {\n', '            emit LogSettlementUpdated(_settlementID, _settlementContract, _brokerVerifierContract);\n', '        } else {\n', '            emit LogSettlementRegistered(_settlementID, _settlementContract, _brokerVerifierContract);\n', '        }\n', '    }\n', '\n', '    /// @notice Deregisteres a settlement layer, clearing the details.\n', '    /// @param _settlementID The unique 64-bit settlement identifier.\n', '    function deregisterSettlement(uint64 _settlementID) external onlyOwner {\n', '        require(settlementDetails[_settlementID].registered, "not registered");\n', '\n', '        delete settlementDetails[_settlementID];\n', '\n', '        emit LogSettlementDeregistered(_settlementID);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/// @notice The BrokerVerifier interface defines the functions that a settlement\n', "/// layer's broker verifier contract must implement.\n", 'interface BrokerVerifier {\n', '\n', '    /// @notice The function signature that will be called when a trader opens\n', '    /// an order.\n', '    ///\n', '    /// @param _trader The trader requesting the withdrawal.\n', '    /// @param _signature The 65-byte signature from the broker.\n', '    /// @param _orderID The 32-byte order ID.\n', '    function verifyOpenSignature(\n', '        address _trader,\n', '        bytes _signature,\n', '        bytes32 _orderID\n', '    ) external returns (bool);\n', '}\n', '\n', '/// @notice The Settlement interface defines the functions that a settlement\n', '/// layer must implement.\n', '/// Docs: https://github.com/republicprotocol/republic-sol/blob/nightly/docs/05-settlement.md\n', 'interface Settlement {\n', '    function submitOrder(\n', '        bytes _details,\n', '        uint64 _settlementID,\n', '        uint64 _tokens,\n', '        uint256 _price,\n', '        uint256 _volume,\n', '        uint256 _minimumVolume\n', '    ) external;\n', '\n', '    function submissionGasPriceLimit() external view returns (uint256);\n', '\n', '    function settle(\n', '        bytes32 _buyID,\n', '        bytes32 _sellID\n', '    ) external;\n', '\n', '    /// @notice orderStatus should return the status of the order, which should\n', '    /// be:\n', '    ///     0  - Order not seen before\n', '    ///     1  - Order details submitted\n', '    ///     >1 - Order settled, or settlement no longer possible\n', '    function orderStatus(bytes32 _orderID) external view returns (uint8);\n', '}\n', '\n', '/// @notice SettlementRegistry allows a Settlement layer to register the\n', '/// contracts used for match settlement and for broker signature verification.\n', 'contract SettlementRegistry is Ownable {\n', '    string public VERSION; // Passed in as a constructor parameter.\n', '\n', '    struct SettlementDetails {\n', '        bool registered;\n', '        Settlement settlementContract;\n', '        BrokerVerifier brokerVerifierContract;\n', '    }\n', '\n', '    // Settlement IDs are 64-bit unsigned numbers\n', '    mapping(uint64 => SettlementDetails) public settlementDetails;\n', '\n', '    // Events\n', '    event LogSettlementRegistered(uint64 settlementID, Settlement settlementContract, BrokerVerifier brokerVerifierContract);\n', '    event LogSettlementUpdated(uint64 settlementID, Settlement settlementContract, BrokerVerifier brokerVerifierContract);\n', '    event LogSettlementDeregistered(uint64 settlementID);\n', '\n', '    /// @notice The contract constructor.\n', '    ///\n', '    /// @param _VERSION A string defining the contract version.\n', '    constructor(string _VERSION) public {\n', '        VERSION = _VERSION;\n', '    }\n', '\n', '    /// @notice Returns the settlement contract of a settlement layer.\n', '    function settlementRegistration(uint64 _settlementID) external view returns (bool) {\n', '        return settlementDetails[_settlementID].registered;\n', '    }\n', '\n', '    /// @notice Returns the settlement contract of a settlement layer.\n', '    function settlementContract(uint64 _settlementID) external view returns (Settlement) {\n', '        return settlementDetails[_settlementID].settlementContract;\n', '    }\n', '\n', '    /// @notice Returns the broker verifier contract of a settlement layer.\n', '    function brokerVerifierContract(uint64 _settlementID) external view returns (BrokerVerifier) {\n', '        return settlementDetails[_settlementID].brokerVerifierContract;\n', '    }\n', '\n', '    /// @param _settlementID A unique 64-bit settlement identifier.\n', '    /// @param _settlementContract The address to use for settling matches.\n', '    /// @param _brokerVerifierContract The decimals to use for verifying\n', '    ///        broker signatures.\n', '    function registerSettlement(uint64 _settlementID, Settlement _settlementContract, BrokerVerifier _brokerVerifierContract) public onlyOwner {\n', '        bool alreadyRegistered = settlementDetails[_settlementID].registered;\n', '        \n', '        settlementDetails[_settlementID] = SettlementDetails({\n', '            registered: true,\n', '            settlementContract: _settlementContract,\n', '            brokerVerifierContract: _brokerVerifierContract\n', '        });\n', '\n', '        if (alreadyRegistered) {\n', '            emit LogSettlementUpdated(_settlementID, _settlementContract, _brokerVerifierContract);\n', '        } else {\n', '            emit LogSettlementRegistered(_settlementID, _settlementContract, _brokerVerifierContract);\n', '        }\n', '    }\n', '\n', '    /// @notice Deregisteres a settlement layer, clearing the details.\n', '    /// @param _settlementID The unique 64-bit settlement identifier.\n', '    function deregisterSettlement(uint64 _settlementID) external onlyOwner {\n', '        require(settlementDetails[_settlementID].registered, "not registered");\n', '\n', '        delete settlementDetails[_settlementID];\n', '\n', '        emit LogSettlementDeregistered(_settlementID);\n', '    }\n', '}']
