['pragma solidity ^0.4.0;\n', 'contract owned {\n', '    address public owner;\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ProVisionRaffle is owned {\n', '    \n', '    uint public Raffle_ID;\n', '    string public Raffle_Prize;\n', '    uint public Total_Entries;\n', '    bool public Allow_Entries;\n', '    bool public Raffle_Finished;\n', '    address public Winner;\n', '    uint public Winning_Entry;\n', '    uint public Date_Started;\n', '    uint public Date_Finished;\n', '    \n', '    address[] public Raffle_Entries;\n', '    mapping (address => bool) public Address_Submitted;\n', '    \n', '    event RaffleWinner(address target, uint TotalEntries);\n', '    \n', '    constructor() public {\n', '        Raffle_ID = 70935284;\n', '        Raffle_Prize = "iPhone X";\n', '        Allow_Entries = true;       \n', '        Raffle_Finished = false;\n', '        Winning_Entry = 0;\n', '        Total_Entries = 0;\n', '        Date_Started = block.timestamp;\n', '    }\n', '\n', '    function addEntry(address _target) onlyOwner public {\n', '        require(Allow_Entries == true);\n', '        require(Address_Submitted[_target] == false);\n', '        Raffle_Entries.push(_target);\n', '        Address_Submitted[_target] = true;\n', '        Total_Entries = Raffle_Entries.length;\n', '    }\n', '    function raffleDraw() onlyOwner public {\n', '        _raffleDraw();\n', '    }\n', '    function _raffleDraw() private {\n', '        require(Raffle_Finished == false);\n', '        uint winnerIndex = random();\n', '        Winning_Entry = winnerIndex;\n', '        Winner = Raffle_Entries[winnerIndex];\n', '        emit RaffleWinner(Winner, Raffle_Entries.length);\n', '        Raffle_Finished = true;\n', '        Allow_Entries = false;\n', '        Date_Finished = block.timestamp;\n', '    }\n', '    \n', '    function random() private view returns (uint8) {\n', '        return uint8(uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty))) % Raffle_Entries.length);\n', '    }\n', '    \n', '    function shutdown() onlyOwner public {\n', '        selfdestruct(owner);\n', '    }\n', '}']