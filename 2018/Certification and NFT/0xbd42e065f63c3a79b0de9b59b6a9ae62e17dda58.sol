['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract InsightsNetworkContributions is Ownable {\n', '\n', '    string public name;\n', '    uint256 public cap;\n', '    uint256 public contributionMinimum;\n', '    uint256 public contributionMaximum;\n', '    uint256 public gasPriceMaximum;\n', '\n', '    bool enabled;\n', '    uint256 total;\n', '\n', '    mapping (address => bool) public registered;\n', '    mapping (address => uint256) public balances;\n', '\n', '    event Approval(address indexed account, bool valid);\n', '    event Contribution(address indexed contributor, uint256 amount);\n', '    event Transfer(address indexed recipient, uint256 amount, address owner);\n', '\n', '    function InsightsNetworkContributions(string _name, uint256 _cap, uint256 _contributionMinimum, uint256 _contributionMaximum, uint256 _gasPriceMaximum) public {\n', '        require(_contributionMinimum <= _contributionMaximum);\n', '        require(_contributionMaximum > 0);\n', '        require(_contributionMaximum <= _cap);\n', '        name = _name;\n', '        cap = _cap;\n', '        contributionMinimum = _contributionMinimum;\n', '        contributionMaximum = _contributionMaximum;\n', '        gasPriceMaximum = _gasPriceMaximum;\n', '        enabled = false;\n', '    }\n', '\n', '    function () external payable {\n', '        contribute();\n', '    }\n', '\n', '    function contribute() public payable {\n', '        require(enabled);\n', '        require(tx.gasprice <= gasPriceMaximum);\n', '        address sender = msg.sender;\n', '        require(registered[sender]);\n', '        uint256 value = msg.value;\n', '        uint256 balance = balances[sender] + value;\n', '        require(balance >= contributionMinimum);\n', '        require(balance <= contributionMaximum);\n', '        require(total + value <= cap);\n', '        balances[sender] = balance;\n', '        total += value;\n', '        Contribution(sender, value);\n', '    }\n', '\n', '    function enable(bool _enabled) public onlyOwner {\n', '        enabled = _enabled;\n', '    }\n', '\n', '    function register(address account, bool valid) public onlyOwner {\n', '        require(account != 0);\n', '        registered[account] = valid;\n', '        Approval(account, valid);\n', '    }\n', '\n', '    function registerMultiple(address[] accounts, bool valid) public onlyOwner {\n', '        require(accounts.length <= 128);\n', '        for (uint index = 0; index < accounts.length; index++) {\n', '            address account = accounts[index];\n', '            require(account != 0);\n', '            registered[account] = valid;\n', '            Approval(account, valid);\n', '        }\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public onlyOwner {\n', '        require(recipient != 0);\n', '        require(amount <= this.balance);\n', '        Transfer(recipient, amount, owner);\n', '        recipient.transfer(amount);\n', '    }\n', '\n', '    function selfDestruct() public onlyOwner {\n', '        require(!enabled);\n', '        require(this.balance == 0);\n', '        selfdestruct(owner);\n', '    }\n', '\n', '}']