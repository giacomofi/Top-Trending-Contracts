['pragma solidity ^0.4.13;\n', '\n', 'interface FundInterface {\n', '\n', '    // EVENTS\n', '\n', '    event PortfolioContent(address[] assets, uint[] holdings, uint[] prices);\n', '    event RequestUpdated(uint id);\n', '    event Redeemed(address indexed ofParticipant, uint atTimestamp, uint shareQuantity);\n', '    event FeesConverted(uint atTimestamp, uint shareQuantityConverted, uint unclaimed);\n', '    event CalculationUpdate(uint atTimestamp, uint managementFee, uint performanceFee, uint nav, uint sharePrice, uint totalSupply);\n', '    event ErrorMessage(string errorMessage);\n', '\n', '    // EXTERNAL METHODS\n', '    // Compliance by Investor\n', '    function requestInvestment(uint giveQuantity, uint shareQuantity, address investmentAsset) external;\n', '    function executeRequest(uint requestId) external;\n', '    function cancelRequest(uint requestId) external;\n', '    function redeemAllOwnedAssets(uint shareQuantity) external returns (bool);\n', '    // Administration by Manager\n', '    function enableInvestment(address[] ofAssets) external;\n', '    function disableInvestment(address[] ofAssets) external;\n', '    function shutDown() external;\n', '\n', '    // PUBLIC METHODS\n', '    function emergencyRedeem(uint shareQuantity, address[] requestedAssets) public returns (bool success);\n', '    function calcSharePriceAndAllocateFees() public returns (uint);\n', '\n', '\n', '    // PUBLIC VIEW METHODS\n', '    // Get general information\n', '    function getModules() view returns (address, address, address);\n', '    function getLastRequestId() view returns (uint);\n', '    function getManager() view returns (address);\n', '\n', '    // Get accounting information\n', '    function performCalculations() view returns (uint, uint, uint, uint, uint, uint, uint);\n', '    function calcSharePrice() view returns (uint);\n', '}\n', '\n', 'interface ComplianceInterface {\n', '\n', '    // PUBLIC VIEW METHODS\n', '\n', '    /// @notice Checks whether investment is permitted for a participant\n', '    /// @param ofParticipant Address requesting to invest in a Melon fund\n', '    /// @param giveQuantity Quantity of Melon token times 10 ** 18 offered to receive shareQuantity\n', '    /// @param shareQuantity Quantity of shares times 10 ** 18 requested to be received\n', '    /// @return Whether identity is eligible to invest in a Melon fund.\n', '    function isInvestmentPermitted(\n', '        address ofParticipant,\n', '        uint256 giveQuantity,\n', '        uint256 shareQuantity\n', '    ) view returns (bool);\n', '\n', '    /// @notice Checks whether redemption is permitted for a participant\n', '    /// @param ofParticipant Address requesting to redeem from a Melon fund\n', '    /// @param shareQuantity Quantity of shares times 10 ** 18 offered to redeem\n', '    /// @param receiveQuantity Quantity of Melon token times 10 ** 18 requested to receive for shareQuantity\n', '    /// @return Whether identity is eligible to redeem from a Melon fund.\n', '    function isRedemptionPermitted(\n', '        address ofParticipant,\n', '        uint256 shareQuantity,\n', '        uint256 receiveQuantity\n', '    ) view returns (bool);\n', '}\n', '\n', 'contract DBC {\n', '\n', '    // MODIFIERS\n', '\n', '    modifier pre_cond(bool condition) {\n', '        require(condition);\n', '        _;\n', '    }\n', '\n', '    modifier post_cond(bool condition) {\n', '        _;\n', '        assert(condition);\n', '    }\n', '\n', '    modifier invariant(bool condition) {\n', '        require(condition);\n', '        _;\n', '        assert(condition);\n', '    }\n', '}\n', '\n', 'contract Owned is DBC {\n', '\n', '    // FIELDS\n', '\n', '    address public owner;\n', '\n', '    // NON-CONSTANT METHODS\n', '\n', '    function Owned() { owner = msg.sender; }\n', '\n', '    function changeOwner(address ofNewOwner) pre_cond(isOwner()) { owner = ofNewOwner; }\n', '\n', '    // PRE, POST, INVARIANT CONDITIONS\n', '\n', '    function isOwner() internal returns (bool) { return msg.sender == owner; }\n', '\n', '}\n', '\n', 'contract BugBountyCompliance is ComplianceInterface, DBC, Owned {\n', '\n', '    mapping (address => bool) isWhitelisted;\n', '\n', '    // PUBLIC VIEW METHODS\n', '\n', '    /// @notice Checks whether investment is permitted for a participant\n', '    /// @param ofParticipant Address requesting to invest in a Melon fund\n', '    /// @param giveQuantity Quantity of Melon token times 10 ** 18 offered to receive shareQuantity\n', '    /// @param shareQuantity Quantity of shares times 10 ** 18 requested to be received\n', '    /// @return Whether identity is eligible to invest in a Melon fund.\n', '    function isInvestmentPermitted(\n', '        address ofParticipant,\n', '        uint256 giveQuantity,\n', '        uint256 shareQuantity\n', '    )\n', '        view\n', '        returns (bool)\n', '    {\n', '        return FundInterface(msg.sender).getManager() == ofParticipant;\n', '    }\n', '\n', '    /// @notice Checks whether redemption is permitted for a participant\n', '    /// @param ofParticipant Address requesting to redeem from a Melon fund\n', '    /// @param shareQuantity Quantity of shares times 10 ** 18 offered to redeem\n', '    /// @param receiveQuantity Quantity of Melon token times 10 ** 18 requested to receive for shareQuantity\n', '    /// @return isEligible Whether identity is eligible to redeem from a Melon fund.\n', '    function isRedemptionPermitted(\n', '        address ofParticipant,\n', '        uint256 shareQuantity,\n', '        uint256 receiveQuantity\n', '    )\n', '        view\n', '        returns (bool)\n', '    {\n', '        return true;    // No need for KYC/AML in case of redeeming shares\n', '    }\n', '\n', '    /// @notice Checks whether an address is whitelisted in the competition contract and competition is active\n', '    /// @param user Address\n', '    /// @return Whether the address is whitelisted\n', '    function isCompetitionAllowed(address user)\n', '        view\n', '        returns (bool)\n', '    {\n', '        return isWhitelisted[user];\n', '    }\n', '\n', '\n', '    // PUBLIC METHODS\n', '\n', '    function addToWhitelist(address user)\n', '        pre_cond(isOwner())\n', '    {\n', '        isWhitelisted[user] = true;\n', '    }\n', '\n', '    function removeFromWhitelist(address user)\n', '        pre_cond(isOwner())\n', '    {\n', '        isWhitelisted[user] = false;\n', '    }\n', '}']