['pragma solidity 0.4.18;\n', '\n', '\n', '/*\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity\n', ' *\n', ' * The MIT License (MIT)\n', ' * Copyright (c) 2016 Smart Contract Solutions, Inc.\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity\n', ' *\n', ' * The MIT License (MIT)\n', ' * Copyright (c) 2016 Smart Contract Solutions, Inc.\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title One-time schedulable contract\n', ' * @author Jakub Stefanski (https://github.com/jstefanski)\n', ' *\n', ' * https://github.com/OnLivePlatform/onlive-contracts\n', ' *\n', ' * The BSD 3-Clause Clear License\n', ' * Copyright (c) 2018 OnLive LTD\n', ' */\n', 'contract Schedulable is Ownable {\n', '\n', '    /**\n', '     * @dev First block when contract is active (inclusive). Zero if not scheduled.\n', '     */\n', '    uint256 public startBlock;\n', '\n', '    /**\n', '     * @dev Last block when contract is active (inclusive). Zero if not scheduled.\n', '     */\n', '    uint256 public endBlock;\n', '\n', '    /**\n', '     * @dev Contract scheduled within given blocks\n', '     * @param startBlock uint256 The first block when contract is active (inclusive)\n', '     * @param endBlock uint256 The last block when contract is active (inclusive)\n', '     */\n', '    event Scheduled(uint256 startBlock, uint256 endBlock);\n', '\n', '    modifier onlyNotZero(uint256 value) {\n', '        require(value != 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyScheduled() {\n', '        require(isScheduled());\n', '        _;\n', '    }\n', '\n', '    modifier onlyNotScheduled() {\n', '        require(!isScheduled());\n', '        _;\n', '    }\n', '\n', '    modifier onlyActive() {\n', '        require(isActive());\n', '        _;\n', '    }\n', '\n', '    modifier onlyNotActive() {\n', '        require(!isActive());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Schedule contract activation for given block range\n', '     * @param _startBlock uint256 The first block when contract is active (inclusive)\n', '     * @param _endBlock uint256 The last block when contract is active (inclusive)\n', '     */\n', '    function schedule(uint256 _startBlock, uint256 _endBlock)\n', '        public\n', '        onlyOwner\n', '        onlyNotScheduled\n', '        onlyNotZero(_startBlock)\n', '        onlyNotZero(_endBlock)\n', '    {\n', '        require(_startBlock < _endBlock);\n', '\n', '        startBlock = _startBlock;\n', '        endBlock = _endBlock;\n', '\n', '        Scheduled(_startBlock, _endBlock);\n', '    }\n', '\n', '    /**\n', '     * @dev Check whether activation is scheduled\n', '     */\n', '    function isScheduled() public view returns (bool) {\n', '        return startBlock > 0 && endBlock > 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Check whether contract is currently active\n', '     */\n', '    function isActive() public view returns (bool) {\n', '        return block.number >= startBlock && block.number <= endBlock;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pre-ICO Crowdsale with constant price and limited supply\n', ' * @author Jakub Stefanski (https://github.com/jstefanski)\n', ' *\n', ' * https://github.com/OnLivePlatform/onlive-contracts\n', ' *\n', ' * The BSD 3-Clause Clear License\n', ' * Copyright (c) 2018 OnLive LTD\n', ' */\n', 'contract Mintable {\n', '    uint256 public decimals;\n', '\n', '    function mint(address to, uint256 amount) public;\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale for off-chain payment methods\n', ' * @author Jakub Stefanski (https://github.com/jstefanski)\n', ' *\n', ' * https://github.com/OnLivePlatform/onlive-contracts\n', ' *\n', ' * The BSD 3-Clause Clear License\n', ' * Copyright (c) 2018 OnLive LTD\n', ' */\n', 'contract PreIcoCrowdsale is Schedulable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Address of contribution wallet\n', '     */\n', '    address public wallet;\n', '\n', '    /**\n', '     * @dev Address of mintable token instance\n', '     */\n', '    Mintable public token;\n', '\n', '    /**\n', '     * @dev Current amount of tokens available for sale\n', '     */\n', '    uint256 public availableAmount;\n', '\n', '    /**\n', '     * @dev Price of token in Wei\n', '     */\n', '    uint256 public price;\n', '\n', '    /**\n', '     * @dev Minimum ETH value sent as contribution\n', '     */\n', '    uint256 public minValue;\n', '\n', '    /**\n', '     * @dev Indicates whether contribution identified by bytes32 id is already registered\n', '     */\n', '    mapping (bytes32 => bool) public isContributionRegistered;\n', '\n', '    function PreIcoCrowdsale(\n', '        address _wallet,\n', '        Mintable _token,\n', '        uint256 _availableAmount,\n', '        uint256 _price,\n', '        uint256 _minValue\n', '    )\n', '        public\n', '        onlyValid(_wallet)\n', '        onlyValid(_token)\n', '        onlyNotZero(_availableAmount)\n', '        onlyNotZero(_price)\n', '    {\n', '        wallet = _wallet;\n', '        token = _token;\n', '        availableAmount = _availableAmount;\n', '        price = _price;\n', '        minValue = _minValue;\n', '    }\n', '\n', '    /**\n', '     * @dev Contribution is accepted\n', '     * @param contributor address The recipient of the tokens\n', '     * @param value uint256 The amount of contributed ETH\n', '     * @param amount uint256 The amount of tokens\n', '     */\n', '    event ContributionAccepted(address indexed contributor, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @dev Off-chain contribution registered\n', '     * @param id bytes32 A unique contribution id\n', '     * @param contributor address The recipient of the tokens\n', '     * @param amount uint256 The amount of tokens\n', '     */\n', '    event ContributionRegistered(bytes32 indexed id, address indexed contributor, uint256 amount);\n', '\n', '    modifier onlyValid(address addr) {\n', '        require(addr != address(0));\n', '        _;\n', '    }\n', '\n', '    modifier onlySufficientValue(uint256 value) {\n', '        require(value >= minValue);\n', '        _;\n', '    }\n', '\n', '    modifier onlySufficientAvailableTokens(uint256 amount) {\n', '        require(availableAmount >= amount);\n', '        _;\n', '    }\n', '\n', '    modifier onlyUniqueContribution(bytes32 id) {\n', '        require(!isContributionRegistered[id]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Accept ETH transfers as contributions\n', '     */\n', '    function () public payable {\n', '        acceptContribution(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Contribute ETH in exchange for tokens\n', '     * @param contributor address The address that receives tokens\n', '     */\n', '    function contribute(address contributor) public payable returns (uint256) {\n', '        return acceptContribution(contributor, msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Register contribution with given id\n', '     * @param id bytes32 A unique contribution id\n', '     * @param contributor address The recipient of the tokens\n', '     * @param amount uint256 The amount of tokens\n', '     */\n', '    function registerContribution(bytes32 id, address contributor, uint256 amount)\n', '        public\n', '        onlyOwner\n', '        onlyActive\n', '        onlyValid(contributor)\n', '        onlyNotZero(amount)\n', '        onlyUniqueContribution(id)\n', '    {\n', '        isContributionRegistered[id] = true;\n', '        mintTokens(contributor, amount);\n', '\n', '        ContributionRegistered(id, contributor, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate amount of ONL tokens received for given ETH value\n', '     * @param value uint256 Contribution value in ETH\n', '     * @return uint256 Amount of received ONL tokens\n', '     */\n', '    function calculateContribution(uint256 value) public view returns (uint256) {\n', '        return value.mul(10 ** token.decimals()).div(price);\n', '    }\n', '\n', '    function acceptContribution(address contributor, uint256 value)\n', '        private\n', '        onlyActive\n', '        onlyValid(contributor)\n', '        onlySufficientValue(value)\n', '        returns (uint256)\n', '    {\n', '        uint256 amount = calculateContribution(value);\n', '        mintTokens(contributor, amount);\n', '\n', '        wallet.transfer(value);\n', '\n', '        ContributionAccepted(contributor, value, amount);\n', '\n', '        return amount;\n', '    }\n', '\n', '    function mintTokens(address to, uint256 amount)\n', '        private\n', '        onlySufficientAvailableTokens(amount)\n', '    {\n', '        availableAmount = availableAmount.sub(amount);\n', '        token.mint(to, amount);\n', '    }\n', '}']