['pragma solidity ^0.4.21;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Claimable.sol\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    emit OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '// File: contracts/external/KYCWhitelist.sol\n', '\n', '/**\n', ' * @title KYCWhitelist\n', ' * @dev Crowdsale in which only whitelisted users can contribute.\n', ' */\n', 'contract KYCWhitelist is Claimable {\n', '\n', '   mapping(address => bool) public whitelist;\n', '\n', '  /**\n', '   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '   */\n', '  modifier isWhitelisted(address _beneficiary) {\n', '    require(whitelist[_beneficiary]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Does a "require" check if _beneficiary address is approved\n', '   * @param _beneficiary Token beneficiary\n', '   */\n', '  function validateWhitelisted(address _beneficiary) internal view {\n', '    require(whitelist[_beneficiary]);\n', '  }\n', '\n', '  /**\n', '   * @dev Adds single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '  function addToWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = true;\n', '  }\n', '  \n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing. \n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelist[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Removes single address from whitelist. \n', '   * @param _beneficiary Address to be removed to the whitelist\n', '   */\n', '  function removeFromWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = false;\n', '  }\n', '\n', '  \n', '}\n', '\n', '// File: contracts/external/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Claimable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/PrivatePreSale.sol\n', '\n', '/**\n', ' * @title PrivatePreSale\n', ' * \n', ' * Private Pre-sale contract for Energis tokens\n', ' *\n', ' * (c) Philip Louw / Zero Carbon Project 2018. The MIT Licence.\n', ' */\n', 'contract PrivatePreSale is Claimable, KYCWhitelist, Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  \n', '  // Wallet Address for funds\n', '  address public constant FUNDS_WALLET = 0xDc17D222Bc3f28ecE7FCef42EDe0037C739cf28f;\n', '  // Token Wallet Address\n', '  address public constant TOKEN_WALLET = 0x1EF91464240BB6E0FdE7a73E0a6f3843D3E07601;\n', '  // Token adderss being sold\n', '  address public constant TOKEN_ADDRESS = 0x14121EEe7995FFDF47ED23cfFD0B5da49cbD6EB3;\n', '  // Lockup Address\n', '  address public constant LOCKUP_WALLET = 0xaB18B66F75D13a38158f9946662646105C3bC45D;\n', '  // Token being sold\n', '  ERC20 public constant TOKEN = ERC20(TOKEN_ADDRESS);\n', '  // Conversion Rate (Eth cost of 1 NRG)\n', '  uint256 public constant TOKENS_PER_ETH = 4970;\n', '  // Max NRG tokens to sell\n', '  uint256 public constant MAX_TOKENS = 20000000 * (10**18) - 119545639989300000000000;\n', '  // Min investment in Tokens\n', '  uint256 public constant MIN_TOKEN_INVEST = 4970 * (10**18);\n', '  // Token sale start date\n', '  uint256 public START_DATE = 1531915200;\n', '\n', '  // -----------------------------------------\n', '  // State Variables\n', '  // -----------------------------------------\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '  // Amount of tokens issued\n', '  uint256 public tokensIssued;\n', '  // If the pre-sale has ended\n', '  bool public closed;\n', '\n', '  // -----------------------------------------\n', '  // Events\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  // -----------------------------------------\n', '  // Constructor\n', '  // -----------------------------------------\n', '\n', '\n', '  constructor() public {\n', '    require(TOKENS_PER_ETH > 0);\n', '    require(FUNDS_WALLET != address(0));\n', '    require(TOKEN_WALLET != address(0));\n', '    require(TOKEN_ADDRESS != address(0));\n', '    require(MAX_TOKENS > 0);\n', '    require(MIN_TOKEN_INVEST >= 0);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Private PreSale external Interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Checks whether the cap has been reached. \n', '   * @return Whether the cap was reached\n', '   */\n', '  function capReached() public view returns (bool) {\n', '    return tokensIssued >= MAX_TOKENS;\n', '  }\n', '\n', '  /**\n', '   * @dev Closes the sale, can only be called once. Once closed can not be opened again.\n', '   */\n', '  function closeSale() public onlyOwner {\n', '    require(!closed);\n', '    closed = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the amount of tokens given for the amount in Wei\n', '   * @param _weiAmount Value in wei\n', '   */\n', '  function getTokenAmount(uint256 _weiAmount) public pure returns (uint256) {\n', '    // Amount in wei (10**18 wei == 1 eth) and the token is 18 decimal places\n', '    return _weiAmount.mul(TOKENS_PER_ETH);\n', '  }\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Private PreSale internal\n', '  // -----------------------------------------\n', '\n', '   /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) internal whenNotPaused {\n', '    \n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokenAmount = getTokenAmount(weiAmount);\n', '\n', '    // Validation Checks\n', '    preValidateChecks(_beneficiary, weiAmount, tokenAmount);\n', '    \n', '    // update state\n', '    tokensIssued = tokensIssued.add(tokenAmount);\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    // Send tokens from token wallet\n', '    TOKEN.transferFrom(TOKEN_WALLET, LOCKUP_WALLET, tokenAmount);\n', '\n', '    // Forward the funds to wallet\n', '    FUNDS_WALLET.transfer(msg.value);\n', '\n', '    // Event trigger\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   * @param _tokenAmount Amount of token to purchase\n', '   */\n', '  function preValidateChecks(address _beneficiary, uint256 _weiAmount, uint256 _tokenAmount) internal view {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '    require(now >= START_DATE);\n', '    require(!closed);\n', '\n', '    // KYC Check\n', '    validateWhitelisted(_beneficiary);\n', '\n', '    // Test Min Investment\n', '    require(_tokenAmount >= MIN_TOKEN_INVEST);\n', '\n', '    // Test hard cap\n', '    require(tokensIssued.add(_tokenAmount) <= MAX_TOKENS);\n', '  }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Claimable.sol\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    emit OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '// File: contracts/external/KYCWhitelist.sol\n', '\n', '/**\n', ' * @title KYCWhitelist\n', ' * @dev Crowdsale in which only whitelisted users can contribute.\n', ' */\n', 'contract KYCWhitelist is Claimable {\n', '\n', '   mapping(address => bool) public whitelist;\n', '\n', '  /**\n', '   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '   */\n', '  modifier isWhitelisted(address _beneficiary) {\n', '    require(whitelist[_beneficiary]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Does a "require" check if _beneficiary address is approved\n', '   * @param _beneficiary Token beneficiary\n', '   */\n', '  function validateWhitelisted(address _beneficiary) internal view {\n', '    require(whitelist[_beneficiary]);\n', '  }\n', '\n', '  /**\n', '   * @dev Adds single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '  function addToWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = true;\n', '  }\n', '  \n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing. \n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelist[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Removes single address from whitelist. \n', '   * @param _beneficiary Address to be removed to the whitelist\n', '   */\n', '  function removeFromWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = false;\n', '  }\n', '\n', '  \n', '}\n', '\n', '// File: contracts/external/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Claimable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/PrivatePreSale.sol\n', '\n', '/**\n', ' * @title PrivatePreSale\n', ' * \n', ' * Private Pre-sale contract for Energis tokens\n', ' *\n', ' * (c) Philip Louw / Zero Carbon Project 2018. The MIT Licence.\n', ' */\n', 'contract PrivatePreSale is Claimable, KYCWhitelist, Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  \n', '  // Wallet Address for funds\n', '  address public constant FUNDS_WALLET = 0xDc17D222Bc3f28ecE7FCef42EDe0037C739cf28f;\n', '  // Token Wallet Address\n', '  address public constant TOKEN_WALLET = 0x1EF91464240BB6E0FdE7a73E0a6f3843D3E07601;\n', '  // Token adderss being sold\n', '  address public constant TOKEN_ADDRESS = 0x14121EEe7995FFDF47ED23cfFD0B5da49cbD6EB3;\n', '  // Lockup Address\n', '  address public constant LOCKUP_WALLET = 0xaB18B66F75D13a38158f9946662646105C3bC45D;\n', '  // Token being sold\n', '  ERC20 public constant TOKEN = ERC20(TOKEN_ADDRESS);\n', '  // Conversion Rate (Eth cost of 1 NRG)\n', '  uint256 public constant TOKENS_PER_ETH = 4970;\n', '  // Max NRG tokens to sell\n', '  uint256 public constant MAX_TOKENS = 20000000 * (10**18) - 119545639989300000000000;\n', '  // Min investment in Tokens\n', '  uint256 public constant MIN_TOKEN_INVEST = 4970 * (10**18);\n', '  // Token sale start date\n', '  uint256 public START_DATE = 1531915200;\n', '\n', '  // -----------------------------------------\n', '  // State Variables\n', '  // -----------------------------------------\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '  // Amount of tokens issued\n', '  uint256 public tokensIssued;\n', '  // If the pre-sale has ended\n', '  bool public closed;\n', '\n', '  // -----------------------------------------\n', '  // Events\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  // -----------------------------------------\n', '  // Constructor\n', '  // -----------------------------------------\n', '\n', '\n', '  constructor() public {\n', '    require(TOKENS_PER_ETH > 0);\n', '    require(FUNDS_WALLET != address(0));\n', '    require(TOKEN_WALLET != address(0));\n', '    require(TOKEN_ADDRESS != address(0));\n', '    require(MAX_TOKENS > 0);\n', '    require(MIN_TOKEN_INVEST >= 0);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Private PreSale external Interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Checks whether the cap has been reached. \n', '   * @return Whether the cap was reached\n', '   */\n', '  function capReached() public view returns (bool) {\n', '    return tokensIssued >= MAX_TOKENS;\n', '  }\n', '\n', '  /**\n', '   * @dev Closes the sale, can only be called once. Once closed can not be opened again.\n', '   */\n', '  function closeSale() public onlyOwner {\n', '    require(!closed);\n', '    closed = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the amount of tokens given for the amount in Wei\n', '   * @param _weiAmount Value in wei\n', '   */\n', '  function getTokenAmount(uint256 _weiAmount) public pure returns (uint256) {\n', '    // Amount in wei (10**18 wei == 1 eth) and the token is 18 decimal places\n', '    return _weiAmount.mul(TOKENS_PER_ETH);\n', '  }\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Private PreSale internal\n', '  // -----------------------------------------\n', '\n', '   /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) internal whenNotPaused {\n', '    \n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokenAmount = getTokenAmount(weiAmount);\n', '\n', '    // Validation Checks\n', '    preValidateChecks(_beneficiary, weiAmount, tokenAmount);\n', '    \n', '    // update state\n', '    tokensIssued = tokensIssued.add(tokenAmount);\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    // Send tokens from token wallet\n', '    TOKEN.transferFrom(TOKEN_WALLET, LOCKUP_WALLET, tokenAmount);\n', '\n', '    // Forward the funds to wallet\n', '    FUNDS_WALLET.transfer(msg.value);\n', '\n', '    // Event trigger\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   * @param _tokenAmount Amount of token to purchase\n', '   */\n', '  function preValidateChecks(address _beneficiary, uint256 _weiAmount, uint256 _tokenAmount) internal view {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '    require(now >= START_DATE);\n', '    require(!closed);\n', '\n', '    // KYC Check\n', '    validateWhitelisted(_beneficiary);\n', '\n', '    // Test Min Investment\n', '    require(_tokenAmount >= MIN_TOKEN_INVEST);\n', '\n', '    // Test hard cap\n', '    require(tokensIssued.add(_tokenAmount) <= MAX_TOKENS);\n', '  }\n', '}']
