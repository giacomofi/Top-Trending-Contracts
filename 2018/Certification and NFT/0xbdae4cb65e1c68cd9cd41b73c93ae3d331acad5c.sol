['pragma solidity ^0.4.21;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract Vote is Ownable {\n', '    // Candidate registered\n', '    event CandidateRegistered(uint candidateId, string candidateName, string candidateDescription);\n', '    // Vote cast\n', '    event VoteCast(uint candidateId);\n', '\n', '    struct Candidate {\n', '        uint candidateId;\n', '        string candidateName;\n', '        string candidateDescription;\n', '    }\n', '\n', '    uint internal salt;\n', '    string public voteName;\n', '    uint public totalVotes;\n', '\n', '    // mapping of candidate IDs to votes\n', '    mapping (uint => uint) public voteCount;\n', '    // mapping of scerets to vote status\n', '    mapping (bytes32 => bool) internal canVote;\n', '    // counter/mapping of candidates\n', '    uint public nextCandidateId = 1;\n', '    mapping (uint => Candidate) public candidateDirectory;\n', '\n', '    function Vote(uint _salt, string _voteName, bytes32[] approvedHashes) public {\n', '        salt = _salt;\n', '        voteName = _voteName;\n', '        totalVotes = approvedHashes.length;\n', '        for (uint i; i < approvedHashes.length; i++) {\n', '            canVote[approvedHashes[i]] = true;\n', '        }\n', '    }\n', '\n', '    // Allows the owner to register new candidates\n', '    function registerCandidate(string candidateName, string candidateDescription) public onlyOwner {\n', '        uint candidateId = nextCandidateId++;\n', '        candidateDirectory[candidateId] = Candidate(candidateId, candidateName, candidateDescription);\n', '        emit CandidateRegistered(candidateId, candidateName, candidateDescription);\n', '    }\n', '\n', '    // get candidate information by id\n', '    function candidateInformation(uint candidateId) public view returns (string name, string description) {\n', '        Candidate storage candidate = candidateDirectory[candidateId];\n', '        return (candidate.candidateName, candidate.candidateDescription);\n', '    }\n', '\n', '    // Users can only vote by providing a secret uint s.t. candidateDirectory[keccak256(uint, salt)] == true\n', '    function castVote(uint secret, uint candidateId) public {\n', '        bytes32 claimedApprovedHash = keccak256(secret, salt); // keccak256(secret) vulnerable to a rainbow table attack\n', '        require(canVote[claimedApprovedHash]);\n', '        canVote[claimedApprovedHash] = false;\n', '        voteCount[candidateId] += 1;\n', '\n', '        emit VoteCast(candidateId);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract Vote is Ownable {\n', '    // Candidate registered\n', '    event CandidateRegistered(uint candidateId, string candidateName, string candidateDescription);\n', '    // Vote cast\n', '    event VoteCast(uint candidateId);\n', '\n', '    struct Candidate {\n', '        uint candidateId;\n', '        string candidateName;\n', '        string candidateDescription;\n', '    }\n', '\n', '    uint internal salt;\n', '    string public voteName;\n', '    uint public totalVotes;\n', '\n', '    // mapping of candidate IDs to votes\n', '    mapping (uint => uint) public voteCount;\n', '    // mapping of scerets to vote status\n', '    mapping (bytes32 => bool) internal canVote;\n', '    // counter/mapping of candidates\n', '    uint public nextCandidateId = 1;\n', '    mapping (uint => Candidate) public candidateDirectory;\n', '\n', '    function Vote(uint _salt, string _voteName, bytes32[] approvedHashes) public {\n', '        salt = _salt;\n', '        voteName = _voteName;\n', '        totalVotes = approvedHashes.length;\n', '        for (uint i; i < approvedHashes.length; i++) {\n', '            canVote[approvedHashes[i]] = true;\n', '        }\n', '    }\n', '\n', '    // Allows the owner to register new candidates\n', '    function registerCandidate(string candidateName, string candidateDescription) public onlyOwner {\n', '        uint candidateId = nextCandidateId++;\n', '        candidateDirectory[candidateId] = Candidate(candidateId, candidateName, candidateDescription);\n', '        emit CandidateRegistered(candidateId, candidateName, candidateDescription);\n', '    }\n', '\n', '    // get candidate information by id\n', '    function candidateInformation(uint candidateId) public view returns (string name, string description) {\n', '        Candidate storage candidate = candidateDirectory[candidateId];\n', '        return (candidate.candidateName, candidate.candidateDescription);\n', '    }\n', '\n', '    // Users can only vote by providing a secret uint s.t. candidateDirectory[keccak256(uint, salt)] == true\n', '    function castVote(uint secret, uint candidateId) public {\n', '        bytes32 claimedApprovedHash = keccak256(secret, salt); // keccak256(secret) vulnerable to a rainbow table attack\n', '        require(canVote[claimedApprovedHash]);\n', '        canVote[claimedApprovedHash] = false;\n', '        voteCount[candidateId] += 1;\n', '\n', '        emit VoteCast(candidateId);\n', '    }\n', '}']
