['/**\n', ' * MonetaryCoin AddressList Smart contract\n', ' * For full details see: https://github.com/Monetary-Foundation/MonetaryCoin\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title AddressList\n', ' * @dev AddressList\n', ' * Simple storage for addresses that can participate in the distribution\n', ' */\n', 'contract AddressList is Ownable {\n', '\n', '  /**\n', '  * @dev Map of addresses that have been whitelisted (and passed KYC).\n', '  * Whitelist value > 0 indicates the address has been whitelisted.\n', '  */\n', '  mapping(address => uint8) public whitelist;\n', '  \n', '  address operator_;\n', '\n', '  /**\n', '  * @dev init the contract and the operator address\n', '  */\n', '  constructor(address _operator) public{\n', '    require(_operator != address(0));\n', '    operator_ = _operator;\n', '  }\n', '\n', '  /**\n', '  * @dev Modifier Throws if called by any account other than the operator_ or owner.\n', '  */\n', '  modifier onlyOps() {\n', '    require((msg.sender == operator_) || (msg.sender == owner));\n', '    _;\n', '  }\n', '\n', '  event OperatorTransferred(address indexed newOperator);\n', '\n', '  /**\n', '  * @dev Allows the current Owner to transfer control to a newOperator.\n', '  * @param newOperator The address to transfer operator to.\n', '  */\n', '  function transferOperator(address newOperator) public onlyOwner {\n', '    operator_ = newOperator;\n', '    emit OperatorTransferred(operator_);\n', '  }\n', '\n', '  /**\n', '  * @dev get operator\n', '  * @return the address of the operator\n', '  */\n', '  function operator() public view returns (address) {\n', '    return operator_;\n', '  }\n', '\n', '\n', '  event WhitelistUpdated(address indexed account, uint8 phase);\n', '\n', '  /**\n', '  * @dev Allows ops to add accounts to the whitelist.\n', '  * Only those accounts will be allowed to contribute during the distribution.\n', '  * _phase > 0: Can contribute\n', '  * _phase = 0: Cannot contribute at all (not whitelisted).\n', '  * @return true\n', '  */\n', '  function updateWhitelist(address _account, uint8 _phase) external onlyOps returns (bool) {\n', '    require(_account != address(0));\n', '    require(_phase <= 2);\n', '\n', '    whitelist[_account] = _phase;\n', '\n', '    emit WhitelistUpdated(_account, _phase);\n', '\n', '    return true;\n', '  }\n', '\n', '}']