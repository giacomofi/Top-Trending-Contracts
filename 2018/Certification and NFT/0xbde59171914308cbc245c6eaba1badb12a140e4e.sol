['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title HtczExchange\n', ' * @dev Eth <-> HTCZ Exchange supporting contract\n', ' */\n', 'contract HtczExchange is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // ** Events **\n', '\n', '    // Deposit received -> sent to exchange to HTCZ token\n', '    event Deposit(address indexed sender, uint eth_amount, uint htcz_amount);\n', '\n', '    // HTCZ token was sent in exchange for Ether\n', '    event Exchanged(address indexed receiver, uint indexed htcz_tx, uint htcz_amount, uint eth_amount);\n', '\n', '    // HTCZ Reserve amount changed\n', '    event ReserveChanged(uint indexed htcz_tx, uint old_htcz_amount, uint new_htcz_amount);\n', '\n', '    // Operator changed\n', '    event OperatorChanged(address indexed new_operator);\n', '\n', '\n', '    // ** Contract state **\n', '\n', '    // HTCZ token (address is in ETZ network)\n', '    address public htcz_token;\n', '\n', '    // Source of wallet for reserve (address is in ETZ network)\n', '    address public htcz_cold_wallet;\n', '\n', '    // HTCZ wallet used to exchange (address is in ETZ network)\n', '    address public htcz_exchange_wallet;\n', '\n', '    // Operator account of the exchange\n', '    address public operator;\n', '\n', '    // HTCZ amount used for exchange, should not exceed htcz_reserve\n', '    uint public htcz_exchanged_amount;\n', '\n', '    // HTCZ reserve for exchange\n', '    uint public htcz_reserve;\n', '\n', '    // ETH -> HTCZ exchange rate\n', '    uint public exchange_rate;\n', '\n', '    // gas spending on transfer function\n', '    uint constant GAS_FOR_TRANSFER = 49483;\n', '\n', '    // ** Modifiers **\n', '\n', '    // Throws if called by any account other than the operator.\n', '    modifier onlyOperator() {\n', '        require(msg.sender == operator);\n', '        _;\n', '    }\n', '\n', '    constructor(    address _htcz_token,\n', '                    address _htcz_cold_wallet,\n', '                    address _htcz_exchange_wallet,\n', '                    address _operator,\n', '                    uint _exchange_rate ) public {\n', '\n', '\t    require(_htcz_token != address(0));\n', '\t    require(_htcz_cold_wallet != address(0));\n', '\t    require(_htcz_exchange_wallet != address(0));\n', '\t    require(_operator != address(0));\n', '\t    require(_exchange_rate>0);\n', '\n', '\t    htcz_token = _htcz_token;\n', '\t    htcz_cold_wallet = _htcz_cold_wallet;\n', '\t    htcz_exchange_wallet = _htcz_exchange_wallet;\n', '\t    exchange_rate = _exchange_rate;\n', '\t    operator = _operator;\n', '\n', '    }\n', '\n', '    /**\n', '    * @dev Accepts Ether.\n', '    * Throws is token balance is not available to issue HTCZ tokens\n', '    */\n', '    function() external payable {\n', '\n', '        require( msg.value > 0 );\n', '\n', '        uint eth_amount = msg.value;\n', '        uint htcz_amount = eth_amount.mul(exchange_rate);\n', '\n', '        htcz_exchanged_amount = htcz_exchanged_amount.add(htcz_amount);\n', '\n', '        require( htcz_reserve >= htcz_exchanged_amount );\n', '\n', '        emit Deposit(msg.sender, eth_amount, htcz_amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers ether by operator command in exchange to HTCZ tokens\n', '    * Calculates gas amount, gasprice and substracts that from the transfered amount.\n', '    * Note, that smart contracts are not allowed as the receiver.\n', '    */\n', '    function change(address _receiver, uint _htcz_tx, uint _htcz_amount) external onlyOperator {\n', '\n', '        require(_receiver != address(0));\n', '\n', '        uint gas_value = GAS_FOR_TRANSFER.mul(tx.gasprice);\n', '        uint eth_amount = _htcz_amount / exchange_rate;\n', '\n', '        require(eth_amount > gas_value);\n', '\n', '        eth_amount = eth_amount.sub(gas_value);\n', '\n', '        require(htcz_exchanged_amount >= _htcz_amount );\n', '\n', '        htcz_exchanged_amount = htcz_exchanged_amount.sub(_htcz_amount);\n', '\n', '        msg.sender.transfer(gas_value);\n', '        _receiver.transfer(eth_amount);\n', '\n', '        emit Exchanged(_receiver, _htcz_tx, _htcz_amount, eth_amount);\n', '\n', '    }\n', '\n', '    /**\n', '    * @dev Increase HTCZ reserve\n', '    */\n', '    function increaseReserve(uint _htcz_tx, uint _amount) external onlyOperator {\n', '\n', '        uint old_htcz_reserve = htcz_reserve;\n', '        uint new_htcz_reserve = old_htcz_reserve.add(_amount);\n', '\n', '        require( new_htcz_reserve > old_htcz_reserve);\n', '\n', '        htcz_reserve = new_htcz_reserve;\n', '\n', '        emit ReserveChanged(_htcz_tx, old_htcz_reserve, new_htcz_reserve);\n', '\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease HTCZ reserve\n', '    */\n', '    function decreaseReserve(uint _htcz_tx, uint _amount) external onlyOperator {\n', '\n', '        uint old_htcz_reserve = htcz_reserve;\n', '        uint new_htcz_reserve = old_htcz_reserve.sub(_amount);\n', '\n', '        require( new_htcz_reserve < old_htcz_reserve);\n', '        require( new_htcz_reserve >= htcz_exchanged_amount );\n', '\n', '        htcz_reserve = new_htcz_reserve;\n', '\n', '        emit ReserveChanged(_htcz_tx, old_htcz_reserve, new_htcz_reserve);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Set other operator ( 0 allowed )\n', '    */\n', '    function changeOperator(address _operator) external onlyOwner {\n', '        require(_operator != operator);\n', '        operator = _operator;\n', '        emit OperatorChanged(_operator);\n', '    }\n', '\n', '\n', '}']