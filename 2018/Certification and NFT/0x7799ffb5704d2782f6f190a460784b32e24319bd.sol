['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor(address _owner) public {\n', '        owner = _owner;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Whitelist is Ownable {\n', '    mapping(address => bool) internal investorMap;\n', '\n', '    /**\n', '    * event for investor approval logging\n', '    * @param investor approved investor\n', '    */\n', '    event Approved(address indexed investor);\n', '\n', '    /**\n', '    * event for investor disapproval logging\n', '    * @param investor disapproved investor\n', '    */\n', '    event Disapproved(address indexed investor);\n', '\n', '    constructor(address _owner) \n', '        public \n', '        Ownable(_owner) \n', '    {\n', '        \n', '    }\n', '\n', '    /** @param _investor the address of investor to be checked\n', '      * @return true if investor is approved\n', '      */\n', '    function isInvestorApproved(address _investor) external view returns (bool) {\n', '        require(_investor != address(0));\n', '        return investorMap[_investor];\n', '    }\n', '\n', '    /** @dev approve an investor\n', '      * @param toApprove investor to be approved\n', '      */\n', '    function approveInvestor(address toApprove) external onlyOwner {\n', '        investorMap[toApprove] = true;\n', '        emit Approved(toApprove);\n', '    }\n', '\n', '    /** @dev approve investors in bulk\n', '      * @param toApprove array of investors to be approved\n', '      */\n', '    function approveInvestorsInBulk(address[] toApprove) external onlyOwner {\n', '        for (uint i = 0; i < toApprove.length; i++) {\n', '            investorMap[toApprove[i]] = true;\n', '            emit Approved(toApprove[i]);\n', '        }\n', '    }\n', '\n', '    /** @dev disapprove an investor\n', '      * @param toDisapprove investor to be disapproved\n', '      */\n', '    function disapproveInvestor(address toDisapprove) external onlyOwner {\n', '        delete investorMap[toDisapprove];\n', '        emit Disapproved(toDisapprove);\n', '    }\n', '\n', '    /** @dev disapprove investors in bulk\n', '      * @param toDisapprove array of investors to be disapproved\n', '      */\n', '    function disapproveInvestorsInBulk(address[] toDisapprove) external onlyOwner {\n', '        for (uint i = 0; i < toDisapprove.length; i++) {\n', '            delete investorMap[toDisapprove[i]];\n', '            emit Disapproved(toDisapprove[i]);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Validator\n', ' * @dev The Validator contract has a validator address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Validator {\n', '    address public validator;\n', '\n', '    event NewValidatorSet(address indexed previousOwner, address indexed newValidator);\n', '\n', '    /**\n', '    * @dev The Validator constructor sets the original `validator` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        validator = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the validator.\n', '    */\n', '    modifier onlyValidator() {\n', '        require(msg.sender == validator);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current validator to transfer control of the contract to a newValidator.\n', '    * @param newValidator The address to become next validator.\n', '    */\n', '    function setNewValidator(address newValidator) public onlyValidator {\n', '        require(newValidator != address(0));\n', '        emit NewValidatorSet(validator, newValidator);\n', '        validator = newValidator;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    constructor(address _owner) \n', '        public \n', '        Ownable(_owner) \n', '    {\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    * @return True if the operation was successful.\n', '    */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract DetailedERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '\n', '/** @title Compliant Token */\n', 'contract CompliantToken is Validator, DetailedERC20, MintableToken {\n', '    Whitelist public whiteListingContract;\n', '\n', '    struct TransactionStruct {\n', '        address from;\n', '        address to;\n', '        uint256 value;\n', '        uint256 fee;\n', '        address spender;\n', '    }\n', '\n', '    mapping (uint => TransactionStruct) public pendingTransactions;\n', '    mapping (address => mapping (address => uint256)) public pendingApprovalAmount;\n', '    uint256 public currentNonce = 0;\n', '    uint256 public transferFee;\n', '    address public feeRecipient;\n', '\n', '    modifier checkIsInvestorApproved(address _account) {\n', '        require(whiteListingContract.isInvestorApproved(_account));\n', '        _;\n', '    }\n', '\n', '    modifier checkIsAddressValid(address _account) {\n', '        require(_account != address(0));\n', '        _;\n', '    }\n', '\n', '    modifier checkIsValueValid(uint256 _value) {\n', '        require(_value > 0);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * event for rejected transfer logging\n', '    * @param from address from which tokens have to be transferred\n', '    * @param to address to tokens have to be transferred\n', '    * @param value number of tokens\n', '    * @param nonce request recorded at this particular nonce\n', '    * @param reason reason for rejection\n', '    */\n', '    event TransferRejected(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value,\n', '        uint256 indexed nonce,\n', '        uint256 reason\n', '    );\n', '\n', '    /**\n', '    * event for transfer tokens logging\n', '    * @param from address from which tokens have to be transferred\n', '    * @param to address to tokens have to be transferred\n', '    * @param value number of tokens\n', '    * @param fee fee in tokens\n', '    */\n', '    event TransferWithFee(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value,\n', '        uint256 fee\n', '    );\n', '\n', '    /**\n', '    * event for transfer/transferFrom request logging\n', '    * @param from address from which tokens have to be transferred\n', '    * @param to address to tokens have to be transferred\n', '    * @param value number of tokens\n', '    * @param fee fee in tokens\n', '    * @param spender The address which will spend the tokens\n', '    */\n', '    event RecordedPendingTransaction(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value,\n', '        uint256 fee,\n', '        address indexed spender\n', '    );\n', '\n', '    /**\n', '    * event for whitelist contract update logging\n', '    * @param _whiteListingContract address of the new whitelist contract\n', '    */\n', '    event WhiteListingContractSet(address indexed _whiteListingContract);\n', '\n', '    /**\n', '    * event for fee update logging\n', '    * @param previousFee previous fee\n', '    * @param newFee new fee\n', '    */\n', '    event FeeSet(uint256 indexed previousFee, uint256 indexed newFee);\n', '\n', '    /**\n', '    * event for fee recipient update logging\n', '    * @param previousRecipient address of the old fee recipient\n', '    * @param newRecipient address of the new fee recipient\n', '    */\n', '    event FeeRecipientSet(address indexed previousRecipient, address indexed newRecipient);\n', '\n', '    /** @dev Constructor\n', '      * @param _owner Token contract owner\n', '      * @param _name Token name\n', '      * @param _symbol Token symbol\n', '      * @param _decimals number of decimals in the token(usually 18)\n', '      * @param whitelistAddress Ethereum address of the whitelist contract\n', '      * @param recipient Ethereum address of the fee recipient\n', '      * @param fee token fee for approving a transfer\n', '      */\n', '    constructor(\n', '        address _owner,\n', '        string _name, \n', '        string _symbol, \n', '        uint8 _decimals,\n', '        address whitelistAddress,\n', '        address recipient,\n', '        uint256 fee\n', '    )\n', '        public\n', '        MintableToken(_owner)\n', '        DetailedERC20(_name, _symbol, _decimals)\n', '        Validator()\n', '    {\n', '        setWhitelistContract(whitelistAddress);\n', '        setFeeRecipient(recipient);\n', '        setFee(fee);\n', '    }\n', '\n', '    /** @dev Updates whitelist contract address\n', '      * @param whitelistAddress New whitelist contract address\n', '      */\n', '    function setWhitelistContract(address whitelistAddress)\n', '        public\n', '        onlyValidator\n', '        checkIsAddressValid(whitelistAddress)\n', '    {\n', '        whiteListingContract = Whitelist(whitelistAddress);\n', '        emit WhiteListingContractSet(whiteListingContract);\n', '    }\n', '\n', '    /** @dev Updates token fee for approving a transfer\n', '      * @param fee New token fee\n', '      */\n', '    function setFee(uint256 fee)\n', '        public\n', '        onlyValidator\n', '    {\n', '        emit FeeSet(transferFee, fee);\n', '        transferFee = fee;\n', '    }\n', '\n', '    /** @dev Updates fee recipient address\n', '      * @param recipient New whitelist contract address\n', '      */\n', '    function setFeeRecipient(address recipient)\n', '        public\n', '        onlyValidator\n', '        checkIsAddressValid(recipient)\n', '    {\n', '        emit FeeRecipientSet(feeRecipient, recipient);\n', '        feeRecipient = recipient;\n', '    }\n', '\n', '    /** @dev Updates token name\n', '      * @param _name New token name\n', '      */\n', '    function updateName(string _name) public onlyOwner {\n', '        require(bytes(_name).length != 0);\n', '        name = _name;\n', '    }\n', '\n', '    /** @dev Updates token symbol\n', '      * @param _symbol New token name\n', '      */\n', '    function updateSymbol(string _symbol) public onlyOwner {\n', '        require(bytes(_symbol).length != 0);\n', '        symbol = _symbol;\n', '    }\n', '\n', '    /** @dev transfer request\n', '      * @param _to address to which the tokens have to be transferred\n', '      * @param _value amount of tokens to be transferred\n', '      */\n', '    function transfer(address _to, uint256 _value)\n', '        public\n', '        checkIsInvestorApproved(msg.sender)\n', '        checkIsInvestorApproved(_to)\n', '        checkIsValueValid(_value)\n', '        returns (bool)\n', '    {\n', '        uint256 pendingAmount = pendingApprovalAmount[msg.sender][address(0)];\n', '\n', '        if (msg.sender == feeRecipient) {\n', '            require(_value.add(pendingAmount) <= balances[msg.sender]);\n', '            pendingApprovalAmount[msg.sender][address(0)] = pendingAmount.add(_value);\n', '        } else {\n', '            require(_value.add(pendingAmount).add(transferFee) <= balances[msg.sender]);\n', '            pendingApprovalAmount[msg.sender][address(0)] = pendingAmount.add(_value).add(transferFee);\n', '        }\n', '\n', '        pendingTransactions[currentNonce] = TransactionStruct(\n', '            msg.sender,\n', '            _to,\n', '            _value,\n', '            transferFee,\n', '            address(0)\n', '        );\n', '\n', '        emit RecordedPendingTransaction(msg.sender, _to, _value, transferFee, address(0));\n', '        currentNonce++;\n', '\n', '        return true;\n', '    }\n', '\n', '    /** @dev transferFrom request\n', '      * @param _from address from which the tokens have to be transferred\n', '      * @param _to address to which the tokens have to be transferred\n', '      * @param _value amount of tokens to be transferred\n', '      */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public \n', '        checkIsInvestorApproved(_from)\n', '        checkIsInvestorApproved(_to)\n', '        checkIsValueValid(_value)\n', '        returns (bool)\n', '    {\n', '        uint256 allowedTransferAmount = allowed[_from][msg.sender];\n', '        uint256 pendingAmount = pendingApprovalAmount[_from][msg.sender];\n', '        \n', '        if (_from == feeRecipient) {\n', '            require(_value.add(pendingAmount) <= balances[_from]);\n', '            require(_value.add(pendingAmount) <= allowedTransferAmount);\n', '            pendingApprovalAmount[_from][msg.sender] = pendingAmount.add(_value);\n', '        } else {\n', '            require(_value.add(pendingAmount).add(transferFee) <= balances[_from]);\n', '            require(_value.add(pendingAmount).add(transferFee) <= allowedTransferAmount);\n', '            pendingApprovalAmount[_from][msg.sender] = pendingAmount.add(_value).add(transferFee);\n', '        }\n', '\n', '        pendingTransactions[currentNonce] = TransactionStruct(\n', '            _from,\n', '            _to,\n', '            _value,\n', '            transferFee,\n', '            msg.sender\n', '        );\n', '\n', '        emit RecordedPendingTransaction(_from, _to, _value, transferFee, msg.sender);\n', '        currentNonce++;\n', '\n', '        return true;\n', '    }\n', '\n', '    /** @dev approve transfer/transferFrom request\n', '      * @param nonce request recorded at this particular nonce\n', '      */\n', '    function approveTransfer(uint256 nonce)\n', '        external \n', '        onlyValidator \n', '        checkIsInvestorApproved(pendingTransactions[nonce].from)\n', '        checkIsInvestorApproved(pendingTransactions[nonce].to)\n', '        checkIsValueValid(pendingTransactions[nonce].value)\n', '        returns (bool)\n', '    {   \n', '        address from = pendingTransactions[nonce].from;\n', '        address spender = pendingTransactions[nonce].spender;\n', '        address to = pendingTransactions[nonce].to;\n', '        uint256 value = pendingTransactions[nonce].value;\n', '        uint256 allowedTransferAmount = allowed[from][spender];\n', '        uint256 pendingAmount = pendingApprovalAmount[from][spender];\n', '        uint256 fee = pendingTransactions[nonce].fee;\n', '        uint256 balanceFrom = balances[from];\n', '        uint256 balanceTo = balances[to];\n', '\n', '        delete pendingTransactions[nonce];\n', '\n', '        if (from == feeRecipient) {\n', '            fee = 0;\n', '            balanceFrom = balanceFrom.sub(value);\n', '            balanceTo = balanceTo.add(value);\n', '\n', '            if (spender != address(0)) {\n', '                allowedTransferAmount = allowedTransferAmount.sub(value);\n', '            } \n', '            pendingAmount = pendingAmount.sub(value);\n', '\n', '        } else {\n', '            balanceFrom = balanceFrom.sub(value.add(fee));\n', '            balanceTo = balanceTo.add(value);\n', '            balances[feeRecipient] = balances[feeRecipient].add(fee);\n', '\n', '            if (spender != address(0)) {\n', '                allowedTransferAmount = allowedTransferAmount.sub(value).sub(fee);\n', '            }\n', '            pendingAmount = pendingAmount.sub(value).sub(fee);\n', '        }\n', '\n', '        emit TransferWithFee(\n', '            from,\n', '            to,\n', '            value,\n', '            fee\n', '        );\n', '\n', '        emit Transfer(\n', '            from,\n', '            to,\n', '            value\n', '        );\n', '        \n', '        balances[from] = balanceFrom;\n', '        balances[to] = balanceTo;\n', '        allowed[from][spender] = allowedTransferAmount;\n', '        pendingApprovalAmount[from][spender] = pendingAmount;\n', '        return true;\n', '    }\n', '\n', '    /** @dev reject transfer/transferFrom request\n', '      * @param nonce request recorded at this particular nonce\n', '      * @param reason reason for rejection\n', '      */\n', '    function rejectTransfer(uint256 nonce, uint256 reason)\n', '        external \n', '        onlyValidator\n', '        checkIsAddressValid(pendingTransactions[nonce].from)\n', '    {        \n', '        address from = pendingTransactions[nonce].from;\n', '        address spender = pendingTransactions[nonce].spender;\n', '\n', '        if (from == feeRecipient) {\n', '            pendingApprovalAmount[from][spender] = pendingApprovalAmount[from][spender]\n', '                .sub(pendingTransactions[nonce].value);\n', '        } else {\n', '            pendingApprovalAmount[from][spender] = pendingApprovalAmount[from][spender]\n', '                .sub(pendingTransactions[nonce].value).sub(pendingTransactions[nonce].fee);\n', '        }\n', '        \n', '        emit TransferRejected(\n', '            from,\n', '            pendingTransactions[nonce].to,\n', '            pendingTransactions[nonce].value,\n', '            nonce,\n', '            reason\n', '        );\n', '        \n', '        delete pendingTransactions[nonce];\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive. The contract requires a MintableToken that will be\n', ' * minted as contributions arrive, note that the crowdsale contract\n', ' * must be owner of the token in order to be able to mint it.\n', ' */\n', 'contract Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    MintableToken public token;\n', '\n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    // address where funds are collected\n', '    address public wallet;\n', '\n', '    // how many token units a buyer gets per wei\n', '    uint256 public rate;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    // amount of tokens sold\n', '    uint256 public totalSupply;\n', '\n', '    // maximum amount of tokens that can be sold\n', '    uint256 public tokenCap;\n', '\n', '    /**\n', '    * event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '    constructor(uint256 _startTime, uint256 _endTime, uint256 _tokenCap, uint256 _rate, address _wallet, MintableToken _token) public {\n', '        require(_startTime >= now);\n', '        require(_endTime >= _startTime);\n', '        require(_rate > 0);\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        tokenCap = _tokenCap;\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '        token = _token;\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address beneficiary) public payable {\n', '        require(beneficiary != address(0));\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        totalSupply = totalSupply.add(tokens);\n', '\n', '        token.mint(beneficiary, tokens);\n', '        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        forwardFunds();\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return now > endTime;\n', '    }\n', '\n', '    // Override this method to have a way to add business logic to your crowdsale when buying\n', '    function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '        return weiAmount.mul(rate);\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase() internal view returns (bool) {\n', '        uint256 tokens = msg.value.mul(rate);\n', '        require(totalSupply.add(tokens) <= tokenCap);\n', '        bool withinPeriod = now >= startTime && now <= endTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        return withinPeriod && nonZeroPurchase;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    bool public isFinalized = false;\n', '\n', '    event Finalized();\n', ' \n', '    constructor(address _owner) public Ownable(_owner) {}\n', '\n', '    /**\n', '    * @dev Must be called after crowdsale ends, to do some extra finalization\n', "    * work. Calls the contract's finalization function.\n", '    */\n', '    function finalize() onlyOwner public {\n', '        require(!isFinalized);\n', '        require(hasEnded());\n', '\n', '        finalization();\n', '        emit Finalized();\n', '\n', '        isFinalized = true;\n', '    }\n', '\n', '    /**\n', '    * @dev Can be overridden to add finalization logic. The overriding function\n', '    * should call super.finalization() to ensure the chain of finalization is\n', '    * executed entirely.\n', '    */\n', '    function finalization() internal {}\n', '}\n', '\n', '\n', '/** @title Compliant Crowdsale */\n', 'contract CompliantCrowdsale is Validator, FinalizableCrowdsale {\n', '    Whitelist public whiteListingContract;\n', '\n', '    struct MintStruct {\n', '        address to;\n', '        uint256 tokens;\n', '        uint256 weiAmount;\n', '    }\n', '\n', '    mapping (uint => MintStruct) public pendingMints;\n', '    uint256 public currentMintNonce;\n', '    mapping (address => uint) public rejectedMintBalance;\n', '\n', '    modifier checkIsInvestorApproved(address _account) {\n', '        require(whiteListingContract.isInvestorApproved(_account));\n', '        _;\n', '    }\n', '\n', '    modifier checkIsAddressValid(address _account) {\n', '        require(_account != address(0));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * event for rejected mint logging\n', '    * @param to address for which buy tokens got rejected\n', '    * @param value number of tokens\n', '    * @param amount number of ethers invested\n', '    * @param nonce request recorded at this particular nonce\n', '    * @param reason reason for rejection\n', '    */\n', '    event MintRejected(\n', '        address indexed to,\n', '        uint256 value,\n', '        uint256 amount,\n', '        uint256 indexed nonce,\n', '        uint256 reason\n', '    );\n', '\n', '    /**\n', '    * event for buy tokens request logging\n', '    * @param beneficiary address for which buy tokens is requested\n', '    * @param tokens number of tokens\n', '    * @param weiAmount number of ethers invested\n', '    * @param nonce request recorded at this particular nonce\n', '    */\n', '    event ContributionRegistered(\n', '        address beneficiary,\n', '        uint256 tokens,\n', '        uint256 weiAmount,\n', '        uint256 nonce\n', '    );\n', '\n', '    /**\n', '    * event for whitelist contract update logging\n', '    * @param _whiteListingContract address of the new whitelist contract\n', '    */\n', '    event WhiteListingContractSet(address indexed _whiteListingContract);\n', '\n', '    /**\n', '    * event for claimed ether logging\n', '    * @param account user claiming the ether\n', '    * @param amount ether claimed\n', '    */\n', '    event Claimed(address indexed account, uint256 amount);\n', '\n', '    /** @dev Constructor\n', '      * @param whitelistAddress Ethereum address of the whitelist contract\n', '      * @param _startTime crowdsale start time\n', '      * @param _endTime crowdsale end time\n', '      * @param _tokenCap maximum number of tokens to be sold in the crowdsale\n', '      * @param _rate number of tokens to be sold per ether\n', '      * @param _wallet Ethereum address of the wallet\n', '      * @param _token Ethereum address of the token contract\n', '      * @param _owner Ethereum address of the owner\n', '      */\n', '    constructor(\n', '        address whitelistAddress,\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _tokenCap,\n', '        uint256 _rate,\n', '        address _wallet,\n', '        MintableToken _token,\n', '        address _owner\n', '    )\n', '        public\n', '        FinalizableCrowdsale(_owner)\n', '        Crowdsale(_startTime, _endTime, _tokenCap, _rate, _wallet, _token)\n', '    {\n', '        setWhitelistContract(whitelistAddress);\n', '    }\n', '\n', '    /** @dev Updates whitelist contract address\n', '      * @param whitelistAddress address of the new whitelist contract \n', '      */\n', '    function setWhitelistContract(address whitelistAddress)\n', '        public \n', '        onlyValidator \n', '        checkIsAddressValid(whitelistAddress)\n', '    {\n', '        whiteListingContract = Whitelist(whitelistAddress);\n', '        emit WhiteListingContractSet(whiteListingContract);\n', '    }\n', '\n', '    /** @dev buy tokens request\n', '      * @param beneficiary the address to which the tokens have to be minted\n', '      */\n', '    function buyTokens(address beneficiary)\n', '        public \n', '        payable\n', '        checkIsInvestorApproved(beneficiary)\n', '    {\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(rate);\n', '\n', '        pendingMints[currentMintNonce] = MintStruct(beneficiary, tokens, weiAmount);\n', '        emit ContributionRegistered(beneficiary, tokens, weiAmount, currentMintNonce);\n', '\n', '        currentMintNonce++;\n', '    }\n', '\n', '    /** @dev approve buy tokens request\n', '      * @param nonce request recorded at this particular nonce\n', '      */\n', '    function approveMint(uint256 nonce)\n', '        external \n', '        onlyValidator \n', '        checkIsInvestorApproved(pendingMints[nonce].to)\n', '        returns (bool)\n', '    {\n', '        // update state\n', '        weiRaised = weiRaised.add(pendingMints[nonce].weiAmount);\n', '        totalSupply = totalSupply.add(pendingMints[nonce].tokens);\n', '\n', '        //No need to use mint-approval on token side, since the minting is already approved in the crowdsale side\n', '        token.mint(pendingMints[nonce].to, pendingMints[nonce].tokens);\n', '        \n', '        emit TokenPurchase(\n', '            msg.sender,\n', '            pendingMints[nonce].to,\n', '            pendingMints[nonce].weiAmount,\n', '            pendingMints[nonce].tokens\n', '        );\n', '\n', '        forwardFunds(pendingMints[nonce].weiAmount);\n', '        delete pendingMints[nonce];\n', '\n', '        return true;\n', '    }\n', '\n', '    /** @dev reject buy tokens request\n', '      * @param nonce request recorded at this particular nonce\n', '      * @param reason reason for rejection\n', '      */\n', '    function rejectMint(uint256 nonce, uint256 reason)\n', '        external \n', '        onlyValidator \n', '        checkIsAddressValid(pendingMints[nonce].to)\n', '    {\n', '        rejectedMintBalance[pendingMints[nonce].to] = rejectedMintBalance[pendingMints[nonce].to].add(pendingMints[nonce].weiAmount);\n', '        \n', '        emit MintRejected(\n', '            pendingMints[nonce].to,\n', '            pendingMints[nonce].tokens,\n', '            pendingMints[nonce].weiAmount,\n', '            nonce,\n', '            reason\n', '        );\n', '        \n', '        delete pendingMints[nonce];\n', '    }\n', '\n', '        /** @dev approve buy tokens requests in bulk\n', '      * @param nonces request recorded at these nonces\n', '      */\n', '    function bulkApproveMints(uint256[] nonces)\n', '        external \n', '        onlyValidator \n', '        returns (bool) \n', '    {\n', '        for (uint i = 0; i < nonces.length; i++) {\n', '            require(whiteListingContract.isInvestorApproved(pendingMints[nonces[i]].to));\n', '\n', '            // update state\n', '            weiRaised = weiRaised.add(pendingMints[nonces[i]].weiAmount);\n', '            totalSupply = totalSupply.add(pendingMints[nonces[i]].tokens);\n', '\n', '            //No need to use mint-approval on token side, since the minting is already approved in the crowdsale side\n', '            token.mint(pendingMints[nonces[i]].to, pendingMints[nonces[i]].tokens);\n', '            \n', '            emit TokenPurchase(\n', '                msg.sender,\n', '                pendingMints[nonces[i]].to,\n', '                pendingMints[nonces[i]].weiAmount,\n', '                pendingMints[nonces[i]].tokens\n', '            );\n', '\n', '            forwardFunds(pendingMints[nonces[i]].weiAmount);\n', '            delete pendingMints[nonces[i]];\n', '        }\n', '\n', '        return true;\n', '        \n', '    }\n', '    \n', '    /** @dev reject buy tokens requests\n', '      * @param nonces request recorded at these nonces\n', '      * @param reasons reasons for rejection\n', '      */\n', '    function bulkRejectMints(uint256[] nonces, uint256[] reasons)\n', '        external \n', '        onlyValidator\n', '    {\n', '        for (uint i = 0; i < nonces.length; i++) {\n', '            require(whiteListingContract.isInvestorApproved(pendingMints[nonces[i]].to));\n', '\n', '            rejectedMintBalance[pendingMints[nonces[i]].to] = rejectedMintBalance[pendingMints[nonces[i]].to].add(pendingMints[nonces[i]].weiAmount);\n', '            \n', '            emit MintRejected(\n', '                pendingMints[nonces[i]].to,\n', '                pendingMints[nonces[i]].tokens,\n', '                pendingMints[nonces[i]].weiAmount,\n', '                nonces[i],\n', '                reasons[i]\n', '            );\n', '            \n', '            delete pendingMints[nonces[i]];\n', '        }\n', '    }\n', '\n', '    /** @dev claim back ether if buy tokens request is rejected */\n', '    function claim() external {\n', '        require(rejectedMintBalance[msg.sender] > 0);\n', '        uint256 value = rejectedMintBalance[msg.sender];\n', '        rejectedMintBalance[msg.sender] = 0;\n', '\n', '        msg.sender.transfer(value);\n', '\n', '        emit Claimed(msg.sender, value);\n', '    }\n', '\n', '    function finalization() internal {\n', '        token.finishMinting();\n', '        transferTokenOwnership(owner);\n', '        super.finalization();\n', '    }\n', '\n', '    /** @dev Updates token contract address\n', '      * @param newToken New token contract address\n', '      */\n', '    function setTokenContract(address newToken)\n', '        external \n', '        onlyOwner\n', '        checkIsAddressValid(newToken)\n', '    {\n', '        token = CompliantToken(newToken);\n', '    }\n', '\n', '    /** @dev transfers ownership of the token contract\n', '      * @param newOwner New owner of the token contract\n', '      */\n', '    function transferTokenOwnership(address newOwner)\n', '        public \n', '        onlyOwner\n', '        checkIsAddressValid(newOwner)\n', '    {\n', '        token.transferOwnership(newOwner);\n', '    }\n', '\n', '    function forwardFunds(uint256 amount) internal {\n', '        wallet.transfer(amount);\n', '    }\n', '}']