['pragma solidity ^0.4.21;\n', '\n', '/**\n', '* @title Random Investor Contract\n', '* @dev The Investor token contract\n', '*/\n', '\n', '\n', '\n', 'contract RNDInvestor {\n', '   \n', '    address public owner; // Token owner address\n', '    mapping (address => uint256) public balances; // balanceOf\n', '    address[] public addresses;\n', '\n', '    mapping (address => uint256) public debited;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    string public standard = &#39;Random 1.1&#39;;\n', '    string public constant name = "Random Investor Token";\n', '    string public constant symbol = "RINVEST";\n', '    uint   public constant decimals = 0;\n', '    uint   public constant totalSupply = 2500;\n', '    uint   public raised = 0;\n', '\n', '    uint public ownerPrice = 1 ether;\n', '    uint public soldAmount = 0; // current sold amount (for current state)\n', '    bool public buyAllowed = true;\n', '    bool public transferAllowed = false;\n', '    \n', '    State public current_state; // current token state\n', '    \n', '    // States\n', '    enum State {\n', '        Presale,\n', '        ICO,\n', '        Public\n', '    }\n', '\n', '    //\n', '    // Events\n', '    // This generates a publics event on the blockchain that will notify clients\n', '    \n', '    event Sent(address from, address to, uint amount);\n', '    event Buy(address indexed sender, uint eth, uint fbt);\n', '    event Withdraw(address indexed sender, address to, uint eth);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Raised(uint _value);\n', '    event StateSwitch(State newState);\n', '    \n', '    //\n', '    // Modifiers\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyIfAllowed() {\n', '        if(!transferAllowed) { require(msg.sender == owner); }\n', '        _;\n', '    }\n', '\n', '    //\n', '    // Functions\n', '    // \n', '\n', '    // Constructor\n', '    function RNDInvestor() public {\n', '        owner = msg.sender;\n', '        balances[owner] = totalSupply;\n', '    }\n', '\n', '    // fallback function\n', '    function() payable public {\n', '        if(current_state == State.Public) {\n', '            takeEther();\n', '            return;\n', '        }\n', '        \n', '        require(buyAllowed);\n', '        require(msg.value >= ownerPrice);\n', '        require(msg.sender != owner);\n', '        \n', '        uint wei_value = msg.value;\n', '\n', '        // uint tokens = safeMul(wei_value, ownerPrice);\n', '        uint tokens = wei_value / ownerPrice;\n', '        uint cost = tokens * ownerPrice;\n', '        \n', '        if(current_state == State.Presale) {\n', '            tokens = tokens * 2;\n', '        }\n', '        \n', '        uint currentSoldAmount = safeAdd(tokens, soldAmount);\n', '\n', '        if (current_state == State.Presale) {\n', '            require(currentSoldAmount <= 1000);\n', '        }\n', '        \n', '        require(balances[owner] >= tokens);\n', '        \n', '        balances[owner] = safeSub(balances[owner], tokens);\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n', '        soldAmount = safeAdd(soldAmount, tokens);\n', '        \n', '        uint extra_ether = safeSub(msg.value, cost); \n', '        if(extra_ether > 0) {\n', '            msg.sender.transfer(extra_ether);\n', '        }\n', '    }\n', '    \n', '    \n', '    function takeEther() payable public {\n', '        if(msg.value > 0) {\n', '            raised += msg.value;\n', '            emit Raised(msg.value);\n', '        } else {\n', '            withdraw();\n', '        }\n', '    }\n', '    \n', '    function setOwnerPrice(uint _newPrice) public\n', '        onlyOwner\n', '        returns (bool success)\n', '    {\n', '        ownerPrice = _newPrice;\n', '        return true;\n', '    }\n', '    \n', '    function setTokenState(State _nextState) public\n', '        onlyOwner\n', '        returns (bool success)\n', '    {\n', '        bool canSwitchState\n', '            =  (current_state == State.Presale && _nextState == State.ICO)\n', '            || (current_state == State.Presale && _nextState == State.Public)\n', '            || (current_state == State.ICO && _nextState == State.Public) ;\n', '\n', '        require(canSwitchState);\n', '        \n', '        current_state = _nextState;\n', '\n', '        emit StateSwitch(_nextState);\n', '\n', '        return true;\n', '    }\n', '    \n', '    function setBuyAllowed(bool _allowed) public\n', '        onlyOwner\n', '        returns (bool success)\n', '    {\n', '        buyAllowed = _allowed;\n', '        return true;\n', '    }\n', '    \n', '    function allowTransfer() public\n', '        onlyOwner\n', '        returns (bool success)\n', '    {\n', '        transferAllowed = true;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '      if (newOwner != address(0)) {\n', '        owner = newOwner;\n', '      }\n', '    }\n', '\n', '    function safeMul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function safeSub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c>=a && c>=b);\n', '        return c;\n', '    }\n', '\n', '    function withdraw() public returns (bool success) {\n', '        uint val = ethBalanceOf(msg.sender);\n', '        if(val > 0) {\n', '            msg.sender.transfer(val);\n', '            debited[msg.sender] += val;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '\n', '\n', '    function ethBalanceOf(address _investor) public view returns (uint256 balance) {\n', '        uint val = (raised / totalSupply) * balances[_investor];\n', '        if(val >= debited[_investor]) {\n', '            return val - debited[_investor];\n', '        }\n', '        return 0;\n', '    }\n', '\n', '\n', '    function manager_withdraw() onlyOwner public {\n', '        uint summ = 0;\n', '        for(uint i = 0; i < addresses.length; i++) {\n', '            summ += ethBalanceOf(addresses[i]);\n', '        }\n', '        require(summ < address(this).balance);\n', '        msg.sender.transfer(address(this).balance - summ);\n', '    }\n', '\n', '    \n', '    function manual_withdraw() public {\n', '        for(uint i = 0; i < addresses.length; i++) {\n', '            addresses[i].transfer( ethBalanceOf(addresses[i]) );\n', '        }\n', '    }\n', '\n', '\n', '    function checkAddress(address _addr) public\n', '        returns (bool have_addr)\n', '    {\n', '        for(uint i=0; i<addresses.length; i++) {\n', '            if(addresses[i] == _addr) {\n', '                return true;\n', '            }\n', '        }\n', '        addresses.push(_addr);\n', '        return true;\n', '    }\n', '    \n', '\n', '    function destroy() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '\n', '    /**\n', '     * ERC 20 token functions\n', '     *\n', '     * https://github.com/ethereum/EIPs/issues/20\n', '     */\n', '    \n', '    function transfer(address _to, uint256 _value) public\n', '        onlyIfAllowed\n', '        returns (bool success) \n', '    {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            checkAddress(_to);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public\n', '        onlyIfAllowed\n', '        returns (bool success)\n', '    {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            emit Transfer(_from, _to, _value);\n', '            checkAddress(_to);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public\n', '        constant returns (uint256 remaining)\n', '    {\n', '      return allowed[_owner][_spender];\n', '    }\n', '    \n', '    \n', '    \n', '}']