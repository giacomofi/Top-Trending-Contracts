['pragma solidity ^0.4.22;\n', '\n', '// File: contracts/zeppelin/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev GangTokenSale contract using this function to send tokens to buyer\n', ' */\n', 'contract ERC20 {\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '}\n', '\n', '//standard contract to identify owner\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  address public newOwner;\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  function acceptOwnership() public {\n', '    if (msg.sender == newOwner) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '}\n', '\n', '\n', '\n', '// File: contracts/GangTokensale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', ' * the methods to add functionality. Consider using &#39;super&#39; where appropiate to concatenate\n', ' * behavior.\n', ' */\n', 'contract GangTokenSale is Ownable{\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param etherValue weis paid for purchase\n', '   * @param tokenAmount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 indexed etherValue, uint256 tokenAmount);\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor (address _token, address _wallet, address _owner, uint256 _rate) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    owner = _owner;\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = ERC20(_token);\n', '  }\n', '\n', '\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    require(buyTokens(msg.sender, msg.value));\n', '  }\n', '\n', '  function buyTokens(address _beneficiary, uint _value) internal returns(bool) {\n', '    require(_value > 0);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(_value);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(_value);\n', '\n', '    // send tokens\n', '    token.transfer(_beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender, _beneficiary, _value, tokens);\n', '\n', '    //send ether to wallet\n', '    wallet.transfer(address(this).balance);\n', '\n', '    return true;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Public interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function getTokenAmount(uint256 _weiAmount) public view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  function getRemainingTokens () public view returns(uint) {\n', '    return token.balanceOf(address(this));\n', '  }\n', '  \n', '  function setNewRate (uint _rate) onlyOwner public {\n', '    require(_rate > 0);\n', '    rate = _rate;\n', '  }\n', '\n', '  function destroyContract () onlyOwner public {\n', '    uint tokens = token.balanceOf(address(this));\n', '    token.transfer(wallet, tokens);\n', '\n', '    selfdestruct(wallet);\n', '  }\n', '}']
['pragma solidity ^0.4.22;\n', '\n', '// File: contracts/zeppelin/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev GangTokenSale contract using this function to send tokens to buyer\n', ' */\n', 'contract ERC20 {\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '}\n', '\n', '//standard contract to identify owner\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  address public newOwner;\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  function acceptOwnership() public {\n', '    if (msg.sender == newOwner) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '}\n', '\n', '\n', '\n', '// File: contracts/GangTokensale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n", ' * behavior.\n', ' */\n', 'contract GangTokenSale is Ownable{\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param etherValue weis paid for purchase\n', '   * @param tokenAmount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 indexed etherValue, uint256 tokenAmount);\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor (address _token, address _wallet, address _owner, uint256 _rate) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    owner = _owner;\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = ERC20(_token);\n', '  }\n', '\n', '\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    require(buyTokens(msg.sender, msg.value));\n', '  }\n', '\n', '  function buyTokens(address _beneficiary, uint _value) internal returns(bool) {\n', '    require(_value > 0);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(_value);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(_value);\n', '\n', '    // send tokens\n', '    token.transfer(_beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender, _beneficiary, _value, tokens);\n', '\n', '    //send ether to wallet\n', '    wallet.transfer(address(this).balance);\n', '\n', '    return true;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Public interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function getTokenAmount(uint256 _weiAmount) public view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  function getRemainingTokens () public view returns(uint) {\n', '    return token.balanceOf(address(this));\n', '  }\n', '  \n', '  function setNewRate (uint _rate) onlyOwner public {\n', '    require(_rate > 0);\n', '    rate = _rate;\n', '  }\n', '\n', '  function destroyContract () onlyOwner public {\n', '    uint tokens = token.balanceOf(address(this));\n', '    token.transfer(wallet, tokens);\n', '\n', '    selfdestruct(wallet);\n', '  }\n', '}']
