['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', ' * the methods to add functionality. Consider using &#39;super&#39; where appropiate to concatenate\n', ' * behavior.\n', ' */\n', '\n', 'contract Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    ERC20 public token;\n', '\n', '    // Address where funds are collected\n', '    address public wallet;\n', '\n', '    // How many token units a buyer gets per wei\n', '    uint256 public rate;\n', '\n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '\n', '    /**\n', '    * Event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '    * @param _rate Number of token units a buyer gets per wei\n', '    * @param _wallet Address where collected funds will be forwarded to\n', '    * @param _token Address of the token being sold\n', '    */\n', '    function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\n', '        require(_rate > 0);\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '        token = _token;\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Crowdsale external interface\n', '    // -----------------------------------------\n', '\n', '    /**\n', '    * @dev fallback function ***DO NOT OVERRIDE***\n', '    */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '    * @dev low level token purchase ***DO NOT OVERRIDE***\n', '    * @param _beneficiary Address performing the token purchase\n', '    */\n', '    function buyTokens(address _beneficiary) public payable {\n', '\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        _processPurchase(_beneficiary, tokens);\n', '        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '        _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '        _forwardFunds();\n', '        _postValidatePurchase(_beneficiary, weiAmount);\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Internal interface (extensible)\n', '    // -----------------------------------------\n', '\n', '    /**\n', '    * @dev Validation of an incoming purchase. Use require statemens to revert state when conditions are not met. Use super to concatenate validations.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _weiAmount Value in wei involved in the purchase\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '    }\n', '\n', '    /**\n', '    * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _weiAmount Value in wei involved in the purchase\n', '    */\n', '    function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        // optional override\n', '    }\n', '\n', '    /**\n', '    * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _tokenAmount Number of tokens to be emitted\n', '    */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        token.transfer(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '    * @param _beneficiary Address receiving the tokens\n', '    * @param _tokenAmount Number of tokens to be purchased\n', '    */\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '    * @param _beneficiary Address receiving the tokens\n', '    * @param _weiAmount Value in wei involved in the purchase\n', '    */\n', '    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '        // optional override\n', '    }\n', '\n', '    /**\n', '    * @dev Override to extend the way in which ether is converted to tokens.\n', '    * @param _weiAmount Value in wei to be converted into tokens\n', '    * @return Number of tokens that can be purchased with the specified _weiAmount\n', '    */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        return _weiAmount.mul(rate);\n', '    }\n', '\n', '    /**\n', '    * @dev Determines how ETH is stored/forwarded on purchases.\n', '    */\n', '    function _forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '}\n', '\n', 'contract WhitelistedCrowdsale is Crowdsale, Ownable {\n', '\n', '    mapping(address => bool) public whitelist;\n', '\n', '    /**\n', '    * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '    */\n', '    modifier isWhitelisted(address _beneficiary) {\n', '        require(whitelist[_beneficiary]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds single address to whitelist.\n', '    * @param _beneficiary Address to be added to the whitelist\n', '    */\n', '    function addToWhitelist(address _beneficiary) external onlyOwner {\n', '        whitelist[_beneficiary] = true;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '    * @param _beneficiaries Addresses to be added to the whitelist\n', '    */\n', '    function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '            whitelist[_beneficiaries[i]] = true;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Removes single address from whitelist.\n', '    * @param _beneficiary Address to be removed to the whitelist\n', '    */\n', '    function removeFromWhitelist(address _beneficiary) external onlyOwner {\n', '        whitelist[_beneficiary] = false;\n', '    }\n', '\n', '    /**\n', '    * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n', '    * @param _beneficiary Token beneficiary\n', '    * @param _weiAmount Amount of wei contributed\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '    * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract GStarToken is StandardToken, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "GSTAR Token";\n', '    string public constant symbol = "GSTAR";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 1600000000 * ((10 ** uint256(decimals)));\n', '    uint256 public currentTotalSupply = 0;\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '\n', '    /**\n', '    * @dev Constructor that gives msg.sender all of existing tokens.\n', '    */\n', '    function GStarToken() public {\n', '        owner = msg.sender;\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[owner] = INITIAL_SUPPLY;\n', '        currentTotalSupply = INITIAL_SUPPLY;\n', '        emit Transfer(address(0), owner, INITIAL_SUPPLY);\n', '    }\n', '\n', '    /**\n', '    * @dev Burns a specific amount of tokens.\n', '    * @param value The amount of token to be burned.\n', '    */\n', '    function burn(uint256 value) public onlyOwner {\n', '        require(value <= balances[msg.sender]);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(value);\n', '        currentTotalSupply = currentTotalSupply.sub(value);\n', '        emit Burn(burner, value);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title GStarCrowdsale\n', ' * @dev This contract manages the crowdsale of GStar Tokens.\n', ' * The crowdsale will involve two key timings - Start and ending of funding.\n', ' * The earlier the contribution, the larger the bonuses. (according to the bonus structure)\n', ' * Tokens will be released to the contributors after the crowdsale.\n', ' * There is only one owner at any one time. The owner can stop or start the crowdsale at anytime.\n', ' */\n', 'contract GStarCrowdsale is WhitelistedCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // Start and end timestamps where contributions are allowed (both inclusive)\n', '    // All timestamps are expressed in seconds instead of block number.\n', '    uint256 constant public presaleStartTime = 1531051200; // 8 Jul 2018 1200h\n', '    uint256 constant public startTime = 1532260800; // 22 Jul 2018 1200h\n', '    uint256 constant public endTime = 1534593600; // 18 Aug 2018 1200h\n', '\n', '    // Keeps track of contributors tokens\n', '    mapping (address => uint256) public depositedTokens;\n', '\n', '    // Minimum amount of ETH contribution during ICO period\n', '    // Minimum of ETH contributed during ICO is 0.1ETH\n', '    uint256 constant public MINIMUM_PRESALE_PURCHASE_AMOUNT_IN_WEI = 1 ether;\n', '    uint256 constant public MINIMUM_PURCHASE_AMOUNT_IN_WEI = 0.1 ether;\n', '\n', '    // Total tokens raised so far, bonus inclusive\n', '    uint256 public tokensWeiRaised = 0;\n', '\n', '    //Funding goal is 76,000 ETH, includes private contributions\n', '    uint256 constant public fundingGoal = 76000 ether;\n', '    uint256 constant public presaleFundingGoal = 1000 ether;\n', '    bool public fundingGoalReached = false;\n', '    bool public presaleFundingGoalReached = false;\n', '\n', '    //private contributions\n', '    uint256 public privateContribution = 0;\n', '\n', '    // Indicates if crowdsale is active\n', '    bool public crowdsaleActive = false;\n', '    bool public isCrowdsaleClosed = false;\n', '\n', '    uint256 public tokensReleasedAmount = 0;\n', '\n', '\n', '    /*==================================================================== */\n', '    /*============================== EVENTS ============================== */\n', '    /*==================================================================== */\n', '\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    event GoalReached(uint256 totalEtherAmountRaised);\n', '    event PresaleGoalReached(uint256 totalEtherAmountRaised);\n', '    event StartCrowdsale();\n', '    event StopCrowdsale();\n', '    event ReleaseTokens(address[] _beneficiaries);\n', '    event Close();\n', '\n', '    /**\n', '    * @dev Constructor. Checks validity of the time entered.\n', '    */\n', '    function GStarCrowdsale (\n', '        uint256 _rate,\n', '        address _wallet,\n', '        GStarToken token\n', '        ) public Crowdsale(_rate, _wallet, token) {\n', '    }\n', '\n', '\n', '    /*==================================================================== */\n', '    /*========================= PUBLIC FUNCTIONS ========================= */\n', '    /*==================================================================== */\n', '\n', '    /**\n', '    * @dev Override buyTokens function as tokens should only be delivered when released.\n', '    * @param _beneficiary Address receiving the tokens.\n', '    */\n', '    function buyTokens(address _beneficiary) public payable {\n', '\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        \n', '        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '        _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '        _forwardFunds();\n', '        _processPurchase(_beneficiary, weiAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates the token amount per ETH contributed based on the time now.\n', '    * @return Rate of amount of GSTAR per Ether as of current time.\n', '    */\n', '    function getRate() public view returns (uint256) {\n', '        //calculate bonus based on timing\n', '        if (block.timestamp <= startTime) { return ((rate / 100) * 120); } // 20 percent bonus on presale period, returns 12000\n', '        if (block.timestamp <= startTime.add(1 days)) {return ((rate / 100) * 108);} // 8 percent bonus on day one, return 10800\n', '\n', '        return rate;\n', '    }\n', '\n', '\n', '    /*==================================================================== */\n', '    /*======================== EXTERNAL FUNCTIONS ======================== */\n', '    /*==================================================================== */\n', '\n', '    /**\n', '    * @dev Change the private contribution, in ether, wei units.\n', '    * Private contribution amount will be calculated into funding goal.\n', '    */\n', '    function changePrivateContribution(uint256 etherWeiAmount) external onlyOwner {\n', '        privateContribution = etherWeiAmount;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows owner to start/unpause crowdsale.\n', '    */\n', '    function startCrowdsale() external onlyOwner {\n', '        require(!crowdsaleActive);\n', '        require(!isCrowdsaleClosed);\n', '\n', '        crowdsaleActive = true;\n', '        emit StartCrowdsale();\n', '    }\n', '\n', '    /**\n', '    * @dev Allows owner to stop/pause crowdsale.\n', '    */\n', '    function stopCrowdsale() external onlyOwner {\n', '        require(crowdsaleActive);\n', '        crowdsaleActive = false;\n', '        emit StopCrowdsale();\n', '    }\n', '\n', '    /**\n', '    * @dev Release tokens to multiple addresses.\n', '    * @param contributors Addresses to release tokens to\n', '    */\n', '    function releaseTokens(address[] contributors) external onlyOwner {\n', '\n', '        for (uint256 j = 0; j < contributors.length; j++) {\n', '\n', '            // the amount of tokens to be distributed to contributor\n', '            uint256 tokensAmount = depositedTokens[contributors[j]];\n', '\n', '            if (tokensAmount > 0) {\n', '                super._deliverTokens(contributors[j], tokensAmount);\n', '\n', '                depositedTokens[contributors[j]] = 0;\n', '\n', '                //update state of release\n', '                tokensReleasedAmount = tokensReleasedAmount.add(tokensAmount);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Stops crowdsale and release of tokens. Transfer remainining tokens back to owner.\n', '    */\n', '    function close() external onlyOwner {\n', '        crowdsaleActive = false;\n', '        isCrowdsaleClosed = true;\n', '        \n', '        token.transfer(owner, token.balanceOf(address(this)));\n', '        emit Close();\n', '    }\n', '\n', '\n', '    /*==================================================================== */\n', '    /*======================== INTERNAL FUNCTIONS ======================== */\n', '    /*==================================================================== */\n', '\n', '    /**\n', '    * @dev Overrides _preValidatePurchase function in Crowdsale.\n', '    * Requires purchase is made within crowdsale period.\n', '    * Requires contributor to be the beneficiary.\n', '    * Requires purchase value and address to be non-zero.\n', '    * Requires amount not to exceed funding goal.\n', '    * Requires purchase value to be higher or equal to minimum amount.\n', '    * Requires contributor to be whitelisted.\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        bool withinPeriod = now >= presaleStartTime && now <= endTime;\n', '\n', '        bool atLeastMinimumAmount = false;\n', '\n', '        if(block.timestamp <= startTime) {\n', '            // during presale period\n', '\n', '            require(_weiAmount.add(weiRaised.add(privateContribution)) <= presaleFundingGoal);\n', '            atLeastMinimumAmount = _weiAmount >= MINIMUM_PRESALE_PURCHASE_AMOUNT_IN_WEI;\n', '            \n', '        } else {\n', '            // during funding period\n', '            atLeastMinimumAmount = _weiAmount >= MINIMUM_PURCHASE_AMOUNT_IN_WEI;\n', '        }\n', '\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '        require(msg.sender == _beneficiary);\n', '        require(_weiAmount.add(weiRaised.add(privateContribution)) <= fundingGoal);\n', '        require(withinPeriod);\n', '        require(atLeastMinimumAmount);\n', '        require(crowdsaleActive);\n', '    }\n', '\n', '    /**\n', '    * @dev Overrides _getTokenAmount function in Crowdsale.\n', '    * Calculates token amount, inclusive of bonus, based on ETH contributed.\n', '    * @param _weiAmount Value in wei to be converted into tokens\n', '    * @return Number of tokens that can be purchased with the specified _weiAmount\n', '    */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        return _weiAmount.mul(getRate());\n', '    }\n', '\n', '    /**\n', '    * @dev Overrides _updatePurchasingState function from Crowdsale.\n', '    * Updates tokenWeiRaised amount and funding goal status.\n', '    */\n', '    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '        tokensWeiRaised = tokensWeiRaised.add(_getTokenAmount(_weiAmount));\n', '        _updateFundingGoal();\n', '    }\n', '\n', '    /**\n', '    * @dev Overrides _processPurchase function from Crowdsale.\n', '    * Adds the tokens purchased to the beneficiary.\n', '    * @param _tokenAmount The token amount in wei before multiplied by the rate.\n', '    */\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        depositedTokens[_beneficiary] = depositedTokens[_beneficiary].add(_getTokenAmount(_tokenAmount));\n', '    }\n', '\n', '    /**\n', '    * @dev Updates fundingGoal status.\n', '    */\n', '    function _updateFundingGoal() internal {\n', '        if (weiRaised.add(privateContribution) >= fundingGoal) {\n', '            fundingGoalReached = true;\n', '            emit GoalReached(weiRaised.add(privateContribution));\n', '        }\n', '\n', '        if(block.timestamp <= startTime) {\n', '            if(weiRaised.add(privateContribution) >= presaleFundingGoal) {\n', '                \n', '                presaleFundingGoalReached = true;\n', '                emit PresaleGoalReached(weiRaised.add(privateContribution));\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n", ' * behavior.\n', ' */\n', '\n', 'contract Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    ERC20 public token;\n', '\n', '    // Address where funds are collected\n', '    address public wallet;\n', '\n', '    // How many token units a buyer gets per wei\n', '    uint256 public rate;\n', '\n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '\n', '    /**\n', '    * Event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '    * @param _rate Number of token units a buyer gets per wei\n', '    * @param _wallet Address where collected funds will be forwarded to\n', '    * @param _token Address of the token being sold\n', '    */\n', '    function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\n', '        require(_rate > 0);\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '        token = _token;\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Crowdsale external interface\n', '    // -----------------------------------------\n', '\n', '    /**\n', '    * @dev fallback function ***DO NOT OVERRIDE***\n', '    */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '    * @dev low level token purchase ***DO NOT OVERRIDE***\n', '    * @param _beneficiary Address performing the token purchase\n', '    */\n', '    function buyTokens(address _beneficiary) public payable {\n', '\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        _processPurchase(_beneficiary, tokens);\n', '        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '        _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '        _forwardFunds();\n', '        _postValidatePurchase(_beneficiary, weiAmount);\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Internal interface (extensible)\n', '    // -----------------------------------------\n', '\n', '    /**\n', '    * @dev Validation of an incoming purchase. Use require statemens to revert state when conditions are not met. Use super to concatenate validations.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _weiAmount Value in wei involved in the purchase\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '    }\n', '\n', '    /**\n', '    * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _weiAmount Value in wei involved in the purchase\n', '    */\n', '    function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        // optional override\n', '    }\n', '\n', '    /**\n', '    * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _tokenAmount Number of tokens to be emitted\n', '    */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        token.transfer(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '    * @param _beneficiary Address receiving the tokens\n', '    * @param _tokenAmount Number of tokens to be purchased\n', '    */\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '    * @param _beneficiary Address receiving the tokens\n', '    * @param _weiAmount Value in wei involved in the purchase\n', '    */\n', '    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '        // optional override\n', '    }\n', '\n', '    /**\n', '    * @dev Override to extend the way in which ether is converted to tokens.\n', '    * @param _weiAmount Value in wei to be converted into tokens\n', '    * @return Number of tokens that can be purchased with the specified _weiAmount\n', '    */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        return _weiAmount.mul(rate);\n', '    }\n', '\n', '    /**\n', '    * @dev Determines how ETH is stored/forwarded on purchases.\n', '    */\n', '    function _forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '}\n', '\n', 'contract WhitelistedCrowdsale is Crowdsale, Ownable {\n', '\n', '    mapping(address => bool) public whitelist;\n', '\n', '    /**\n', '    * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '    */\n', '    modifier isWhitelisted(address _beneficiary) {\n', '        require(whitelist[_beneficiary]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds single address to whitelist.\n', '    * @param _beneficiary Address to be added to the whitelist\n', '    */\n', '    function addToWhitelist(address _beneficiary) external onlyOwner {\n', '        whitelist[_beneficiary] = true;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '    * @param _beneficiaries Addresses to be added to the whitelist\n', '    */\n', '    function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '            whitelist[_beneficiaries[i]] = true;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Removes single address from whitelist.\n', '    * @param _beneficiary Address to be removed to the whitelist\n', '    */\n', '    function removeFromWhitelist(address _beneficiary) external onlyOwner {\n', '        whitelist[_beneficiary] = false;\n', '    }\n', '\n', '    /**\n', '    * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n', '    * @param _beneficiary Token beneficiary\n', '    * @param _weiAmount Amount of wei contributed\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract GStarToken is StandardToken, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "GSTAR Token";\n', '    string public constant symbol = "GSTAR";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 1600000000 * ((10 ** uint256(decimals)));\n', '    uint256 public currentTotalSupply = 0;\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '\n', '    /**\n', '    * @dev Constructor that gives msg.sender all of existing tokens.\n', '    */\n', '    function GStarToken() public {\n', '        owner = msg.sender;\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[owner] = INITIAL_SUPPLY;\n', '        currentTotalSupply = INITIAL_SUPPLY;\n', '        emit Transfer(address(0), owner, INITIAL_SUPPLY);\n', '    }\n', '\n', '    /**\n', '    * @dev Burns a specific amount of tokens.\n', '    * @param value The amount of token to be burned.\n', '    */\n', '    function burn(uint256 value) public onlyOwner {\n', '        require(value <= balances[msg.sender]);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(value);\n', '        currentTotalSupply = currentTotalSupply.sub(value);\n', '        emit Burn(burner, value);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title GStarCrowdsale\n', ' * @dev This contract manages the crowdsale of GStar Tokens.\n', ' * The crowdsale will involve two key timings - Start and ending of funding.\n', ' * The earlier the contribution, the larger the bonuses. (according to the bonus structure)\n', ' * Tokens will be released to the contributors after the crowdsale.\n', ' * There is only one owner at any one time. The owner can stop or start the crowdsale at anytime.\n', ' */\n', 'contract GStarCrowdsale is WhitelistedCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // Start and end timestamps where contributions are allowed (both inclusive)\n', '    // All timestamps are expressed in seconds instead of block number.\n', '    uint256 constant public presaleStartTime = 1531051200; // 8 Jul 2018 1200h\n', '    uint256 constant public startTime = 1532260800; // 22 Jul 2018 1200h\n', '    uint256 constant public endTime = 1534593600; // 18 Aug 2018 1200h\n', '\n', '    // Keeps track of contributors tokens\n', '    mapping (address => uint256) public depositedTokens;\n', '\n', '    // Minimum amount of ETH contribution during ICO period\n', '    // Minimum of ETH contributed during ICO is 0.1ETH\n', '    uint256 constant public MINIMUM_PRESALE_PURCHASE_AMOUNT_IN_WEI = 1 ether;\n', '    uint256 constant public MINIMUM_PURCHASE_AMOUNT_IN_WEI = 0.1 ether;\n', '\n', '    // Total tokens raised so far, bonus inclusive\n', '    uint256 public tokensWeiRaised = 0;\n', '\n', '    //Funding goal is 76,000 ETH, includes private contributions\n', '    uint256 constant public fundingGoal = 76000 ether;\n', '    uint256 constant public presaleFundingGoal = 1000 ether;\n', '    bool public fundingGoalReached = false;\n', '    bool public presaleFundingGoalReached = false;\n', '\n', '    //private contributions\n', '    uint256 public privateContribution = 0;\n', '\n', '    // Indicates if crowdsale is active\n', '    bool public crowdsaleActive = false;\n', '    bool public isCrowdsaleClosed = false;\n', '\n', '    uint256 public tokensReleasedAmount = 0;\n', '\n', '\n', '    /*==================================================================== */\n', '    /*============================== EVENTS ============================== */\n', '    /*==================================================================== */\n', '\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    event GoalReached(uint256 totalEtherAmountRaised);\n', '    event PresaleGoalReached(uint256 totalEtherAmountRaised);\n', '    event StartCrowdsale();\n', '    event StopCrowdsale();\n', '    event ReleaseTokens(address[] _beneficiaries);\n', '    event Close();\n', '\n', '    /**\n', '    * @dev Constructor. Checks validity of the time entered.\n', '    */\n', '    function GStarCrowdsale (\n', '        uint256 _rate,\n', '        address _wallet,\n', '        GStarToken token\n', '        ) public Crowdsale(_rate, _wallet, token) {\n', '    }\n', '\n', '\n', '    /*==================================================================== */\n', '    /*========================= PUBLIC FUNCTIONS ========================= */\n', '    /*==================================================================== */\n', '\n', '    /**\n', '    * @dev Override buyTokens function as tokens should only be delivered when released.\n', '    * @param _beneficiary Address receiving the tokens.\n', '    */\n', '    function buyTokens(address _beneficiary) public payable {\n', '\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        \n', '        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '        _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '        _forwardFunds();\n', '        _processPurchase(_beneficiary, weiAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates the token amount per ETH contributed based on the time now.\n', '    * @return Rate of amount of GSTAR per Ether as of current time.\n', '    */\n', '    function getRate() public view returns (uint256) {\n', '        //calculate bonus based on timing\n', '        if (block.timestamp <= startTime) { return ((rate / 100) * 120); } // 20 percent bonus on presale period, returns 12000\n', '        if (block.timestamp <= startTime.add(1 days)) {return ((rate / 100) * 108);} // 8 percent bonus on day one, return 10800\n', '\n', '        return rate;\n', '    }\n', '\n', '\n', '    /*==================================================================== */\n', '    /*======================== EXTERNAL FUNCTIONS ======================== */\n', '    /*==================================================================== */\n', '\n', '    /**\n', '    * @dev Change the private contribution, in ether, wei units.\n', '    * Private contribution amount will be calculated into funding goal.\n', '    */\n', '    function changePrivateContribution(uint256 etherWeiAmount) external onlyOwner {\n', '        privateContribution = etherWeiAmount;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows owner to start/unpause crowdsale.\n', '    */\n', '    function startCrowdsale() external onlyOwner {\n', '        require(!crowdsaleActive);\n', '        require(!isCrowdsaleClosed);\n', '\n', '        crowdsaleActive = true;\n', '        emit StartCrowdsale();\n', '    }\n', '\n', '    /**\n', '    * @dev Allows owner to stop/pause crowdsale.\n', '    */\n', '    function stopCrowdsale() external onlyOwner {\n', '        require(crowdsaleActive);\n', '        crowdsaleActive = false;\n', '        emit StopCrowdsale();\n', '    }\n', '\n', '    /**\n', '    * @dev Release tokens to multiple addresses.\n', '    * @param contributors Addresses to release tokens to\n', '    */\n', '    function releaseTokens(address[] contributors) external onlyOwner {\n', '\n', '        for (uint256 j = 0; j < contributors.length; j++) {\n', '\n', '            // the amount of tokens to be distributed to contributor\n', '            uint256 tokensAmount = depositedTokens[contributors[j]];\n', '\n', '            if (tokensAmount > 0) {\n', '                super._deliverTokens(contributors[j], tokensAmount);\n', '\n', '                depositedTokens[contributors[j]] = 0;\n', '\n', '                //update state of release\n', '                tokensReleasedAmount = tokensReleasedAmount.add(tokensAmount);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Stops crowdsale and release of tokens. Transfer remainining tokens back to owner.\n', '    */\n', '    function close() external onlyOwner {\n', '        crowdsaleActive = false;\n', '        isCrowdsaleClosed = true;\n', '        \n', '        token.transfer(owner, token.balanceOf(address(this)));\n', '        emit Close();\n', '    }\n', '\n', '\n', '    /*==================================================================== */\n', '    /*======================== INTERNAL FUNCTIONS ======================== */\n', '    /*==================================================================== */\n', '\n', '    /**\n', '    * @dev Overrides _preValidatePurchase function in Crowdsale.\n', '    * Requires purchase is made within crowdsale period.\n', '    * Requires contributor to be the beneficiary.\n', '    * Requires purchase value and address to be non-zero.\n', '    * Requires amount not to exceed funding goal.\n', '    * Requires purchase value to be higher or equal to minimum amount.\n', '    * Requires contributor to be whitelisted.\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        bool withinPeriod = now >= presaleStartTime && now <= endTime;\n', '\n', '        bool atLeastMinimumAmount = false;\n', '\n', '        if(block.timestamp <= startTime) {\n', '            // during presale period\n', '\n', '            require(_weiAmount.add(weiRaised.add(privateContribution)) <= presaleFundingGoal);\n', '            atLeastMinimumAmount = _weiAmount >= MINIMUM_PRESALE_PURCHASE_AMOUNT_IN_WEI;\n', '            \n', '        } else {\n', '            // during funding period\n', '            atLeastMinimumAmount = _weiAmount >= MINIMUM_PURCHASE_AMOUNT_IN_WEI;\n', '        }\n', '\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '        require(msg.sender == _beneficiary);\n', '        require(_weiAmount.add(weiRaised.add(privateContribution)) <= fundingGoal);\n', '        require(withinPeriod);\n', '        require(atLeastMinimumAmount);\n', '        require(crowdsaleActive);\n', '    }\n', '\n', '    /**\n', '    * @dev Overrides _getTokenAmount function in Crowdsale.\n', '    * Calculates token amount, inclusive of bonus, based on ETH contributed.\n', '    * @param _weiAmount Value in wei to be converted into tokens\n', '    * @return Number of tokens that can be purchased with the specified _weiAmount\n', '    */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        return _weiAmount.mul(getRate());\n', '    }\n', '\n', '    /**\n', '    * @dev Overrides _updatePurchasingState function from Crowdsale.\n', '    * Updates tokenWeiRaised amount and funding goal status.\n', '    */\n', '    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '        tokensWeiRaised = tokensWeiRaised.add(_getTokenAmount(_weiAmount));\n', '        _updateFundingGoal();\n', '    }\n', '\n', '    /**\n', '    * @dev Overrides _processPurchase function from Crowdsale.\n', '    * Adds the tokens purchased to the beneficiary.\n', '    * @param _tokenAmount The token amount in wei before multiplied by the rate.\n', '    */\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        depositedTokens[_beneficiary] = depositedTokens[_beneficiary].add(_getTokenAmount(_tokenAmount));\n', '    }\n', '\n', '    /**\n', '    * @dev Updates fundingGoal status.\n', '    */\n', '    function _updateFundingGoal() internal {\n', '        if (weiRaised.add(privateContribution) >= fundingGoal) {\n', '            fundingGoalReached = true;\n', '            emit GoalReached(weiRaised.add(privateContribution));\n', '        }\n', '\n', '        if(block.timestamp <= startTime) {\n', '            if(weiRaised.add(privateContribution) >= presaleFundingGoal) {\n', '                \n', '                presaleFundingGoalReached = true;\n', '                emit PresaleGoalReached(weiRaised.add(privateContribution));\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '\n', '}']
