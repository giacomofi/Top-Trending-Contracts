['pragma solidity ^0.4.19;\n', '\n', '\n', '\n', '\n', '\n', '/// @dev Base contract for all Ethernauts contracts holding global constants and functions.\n', 'contract EthernautsBase {\n', '\n', '    /*** CONSTANTS USED ACROSS CONTRACTS ***/\n', '\n', '    /// @dev Used by all contracts that interfaces with Ethernauts\n', '    ///      The ERC-165 interface signature for ERC-721.\n', '    ///  Ref: https://github.com/ethereum/EIPs/issues/165\n', '    ///  Ref: https://github.com/ethereum/EIPs/issues/721\n', '    bytes4 constant InterfaceSignature_ERC721 =\n', '    bytes4(keccak256(&#39;name()&#39;)) ^\n', '    bytes4(keccak256(&#39;symbol()&#39;)) ^\n', '    bytes4(keccak256(&#39;totalSupply()&#39;)) ^\n', '    bytes4(keccak256(&#39;balanceOf(address)&#39;)) ^\n', '    bytes4(keccak256(&#39;ownerOf(uint256)&#39;)) ^\n', '    bytes4(keccak256(&#39;approve(address,uint256)&#39;)) ^\n', '    bytes4(keccak256(&#39;transfer(address,uint256)&#39;)) ^\n', '    bytes4(keccak256(&#39;transferFrom(address,address,uint256)&#39;)) ^\n', '    bytes4(keccak256(&#39;takeOwnership(uint256)&#39;)) ^\n', '    bytes4(keccak256(&#39;tokensOfOwner(address)&#39;)) ^\n', '    bytes4(keccak256(&#39;tokenMetadata(uint256,string)&#39;));\n', '\n', '    /// @dev due solidity limitation we cannot return dynamic array from methods\n', '    /// so it creates incompability between functions across different contracts\n', '    uint8 public constant STATS_SIZE = 10;\n', '    uint8 public constant SHIP_SLOTS = 5;\n', '\n', '    // Possible state of any asset\n', '    enum AssetState { Available, UpForLease, Used }\n', '\n', '    // Possible state of any asset\n', '    // NotValid is to avoid 0 in places where category must be bigger than zero\n', '    enum AssetCategory { NotValid, Sector, Manufacturer, Ship, Object, Factory, CrewMember }\n', '\n', '    /// @dev Sector stats\n', '    enum ShipStats {Level, Attack, Defense, Speed, Range, Luck}\n', '    /// @notice Possible attributes for each asset\n', '    /// 00000001 - Seeded - Offered to the economy by us, the developers. Potentially at regular intervals.\n', '    /// 00000010 - Producible - Product of a factory and/or factory contract.\n', '    /// 00000100 - Explorable- Product of exploration.\n', '    /// 00001000 - Leasable - Can be rented to other users and will return to the original owner once the action is complete.\n', '    /// 00010000 - Permanent - Cannot be removed, always owned by a user.\n', '    /// 00100000 - Consumable - Destroyed after N exploration expeditions.\n', '    /// 01000000 - Tradable - Buyable and sellable on the market.\n', '    /// 10000000 - Hot Potato - Automatically gets put up for sale after acquiring.\n', '    bytes2 public ATTR_SEEDED     = bytes2(2**0);\n', '    bytes2 public ATTR_PRODUCIBLE = bytes2(2**1);\n', '    bytes2 public ATTR_EXPLORABLE = bytes2(2**2);\n', '    bytes2 public ATTR_LEASABLE   = bytes2(2**3);\n', '    bytes2 public ATTR_PERMANENT  = bytes2(2**4);\n', '    bytes2 public ATTR_CONSUMABLE = bytes2(2**5);\n', '    bytes2 public ATTR_TRADABLE   = bytes2(2**6);\n', '    bytes2 public ATTR_GOLDENGOOSE = bytes2(2**7);\n', '}\n', '\n', '/// @title Inspired by https://github.com/axiomzen/cryptokitties-bounty/blob/master/contracts/KittyAccessControl.sol\n', '/// @notice This contract manages the various addresses and constraints for operations\n', '//          that can be executed only by specific roles. Namely CEO and CTO. it also includes pausable pattern.\n', 'contract EthernautsAccessControl is EthernautsBase {\n', '\n', '    // This facet controls access control for Ethernauts.\n', '    // All roles have same responsibilities and rights, but there is slight differences between them:\n', '    //\n', '    //     - The CEO: The CEO can reassign other roles and only role that can unpause the smart contract.\n', '    //       It is initially set to the address that created the smart contract.\n', '    //\n', '    //     - The CTO: The CTO can change contract address, oracle address and plan for upgrades.\n', '    //\n', '    //     - The COO: The COO can change contract address and add create assets.\n', '    //\n', '    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\n', '    /// @param newContract address pointing to new contract\n', '    event ContractUpgrade(address newContract);\n', '\n', '    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '    address public ceoAddress;\n', '    address public ctoAddress;\n', '    address public cooAddress;\n', '    address public oracleAddress;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '\n', '    /// @dev Access modifier for CEO-only functionality\n', '    modifier onlyCEO() {\n', '        require(msg.sender == ceoAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Access modifier for CTO-only functionality\n', '    modifier onlyCTO() {\n', '        require(msg.sender == ctoAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Access modifier for CTO-only functionality\n', '    modifier onlyOracle() {\n', '        require(msg.sender == oracleAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCLevel() {\n', '        require(\n', '            msg.sender == ceoAddress ||\n', '            msg.sender == ctoAddress ||\n', '            msg.sender == cooAddress\n', '        );\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '    /// @param _newCEO The address of the new CEO\n', '    function setCEO(address _newCEO) external onlyCEO {\n', '        require(_newCEO != address(0));\n', '\n', '        ceoAddress = _newCEO;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the CTO. Only available to the current CTO or CEO.\n', '    /// @param _newCTO The address of the new CTO\n', '    function setCTO(address _newCTO) external {\n', '        require(\n', '            msg.sender == ceoAddress ||\n', '            msg.sender == ctoAddress\n', '        );\n', '        require(_newCTO != address(0));\n', '\n', '        ctoAddress = _newCTO;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the COO. Only available to the current COO or CEO.\n', '    /// @param _newCOO The address of the new COO\n', '    function setCOO(address _newCOO) external {\n', '        require(\n', '            msg.sender == ceoAddress ||\n', '            msg.sender == cooAddress\n', '        );\n', '        require(_newCOO != address(0));\n', '\n', '        cooAddress = _newCOO;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as oracle.\n', '    /// @param _newOracle The address of oracle\n', '    function setOracle(address _newOracle) external {\n', '        require(msg.sender == ctoAddress);\n', '        require(_newOracle != address(0));\n', '\n', '        oracleAddress = _newOracle;\n', '    }\n', '\n', '    /*** Pausable functionality adapted from OpenZeppelin ***/\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any "C-level" role to pause the contract. Used only when\n', '    ///  a bug or exploit is detected and we need to limit damage.\n', '    function pause() external onlyCLevel whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\n', '    ///  one reason we may pause the contract is when CTO account is compromised.\n', '    /// @notice This is public rather than external so it can be called by\n', '    ///  derived contracts.\n', '    function unpause() public onlyCEO whenPaused {\n', '        // can&#39;t unpause if contract was upgraded\n', '        paused = false;\n', '    }\n', '\n', '}\n', '\n', '/// @title Storage contract for Ethernauts Data. Common structs and constants.\n', '/// @notice This is our main data storage, constants and data types, plus\n', '//          internal functions for managing the assets. It is isolated and only interface with\n', '//          a list of granted contracts defined by CTO\n', '/// @author Ethernauts - Fernando Pauer\n', 'contract EthernautsStorage is EthernautsAccessControl {\n', '\n', '    function EthernautsStorage() public {\n', '        // the creator of the contract is the initial CEO\n', '        ceoAddress = msg.sender;\n', '\n', '        // the creator of the contract is the initial CTO as well\n', '        ctoAddress = msg.sender;\n', '\n', '        // the creator of the contract is the initial CTO as well\n', '        cooAddress = msg.sender;\n', '\n', '        // the creator of the contract is the initial Oracle as well\n', '        oracleAddress = msg.sender;\n', '    }\n', '\n', '    /// @notice No tipping!\n', '    /// @dev Reject all Ether from being sent here. Hopefully, we can prevent user accidents.\n', '    function() external payable {\n', '        require(msg.sender == address(this));\n', '    }\n', '\n', '    /*** Mapping for Contracts with granted permission ***/\n', '    mapping (address => bool) public contractsGrantedAccess;\n', '\n', '    /// @dev grant access for a contract to interact with this contract.\n', '    /// @param _v2Address The contract address to grant access\n', '    function grantAccess(address _v2Address) public onlyCTO {\n', '        // See README.md for updgrade plan\n', '        contractsGrantedAccess[_v2Address] = true;\n', '    }\n', '\n', '    /// @dev remove access from a contract to interact with this contract.\n', '    /// @param _v2Address The contract address to be removed\n', '    function removeAccess(address _v2Address) public onlyCTO {\n', '        // See README.md for updgrade plan\n', '        delete contractsGrantedAccess[_v2Address];\n', '    }\n', '\n', '    /// @dev Only allow permitted contracts to interact with this contract\n', '    modifier onlyGrantedContracts() {\n', '        require(contractsGrantedAccess[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    modifier validAsset(uint256 _tokenId) {\n', '        require(assets[_tokenId].ID > 0);\n', '        _;\n', '    }\n', '    /*** DATA TYPES ***/\n', '\n', '    /// @dev The main Ethernauts asset struct. Every asset in Ethernauts is represented by a copy\n', '    ///  of this structure. Note that the order of the members in this structure\n', '    ///  is important because of the byte-packing rules used by Ethereum.\n', '    ///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html\n', '    struct Asset {\n', '\n', '        // Asset ID is a identifier for look and feel in frontend\n', '        uint16 ID;\n', '\n', '        // Category = Sectors, Manufacturers, Ships, Objects (Upgrades/Misc), Factories and CrewMembers\n', '        uint8 category;\n', '\n', '        // The State of an asset: Available, On sale, Up for lease, Cooldown, Exploring\n', '        uint8 state;\n', '\n', '        // Attributes\n', '        // byte pos - Definition\n', '        // 00000001 - Seeded - Offered to the economy by us, the developers. Potentially at regular intervals.\n', '        // 00000010 - Producible - Product of a factory and/or factory contract.\n', '        // 00000100 - Explorable- Product of exploration.\n', '        // 00001000 - Leasable - Can be rented to other users and will return to the original owner once the action is complete.\n', '        // 00010000 - Permanent - Cannot be removed, always owned by a user.\n', '        // 00100000 - Consumable - Destroyed after N exploration expeditions.\n', '        // 01000000 - Tradable - Buyable and sellable on the market.\n', '        // 10000000 - Hot Potato - Automatically gets put up for sale after acquiring.\n', '        bytes2 attributes;\n', '\n', '        // The timestamp from the block when this asset was created.\n', '        uint64 createdAt;\n', '\n', '        // The minimum timestamp after which this asset can engage in exploring activities again.\n', '        uint64 cooldownEndBlock;\n', '\n', '        // The Asset&#39;s stats can be upgraded or changed based on exploration conditions.\n', '        // It will be defined per child contract, but all stats have a range from 0 to 255\n', '        // Examples\n', '        // 0 = Ship Level\n', '        // 1 = Ship Attack\n', '        uint8[STATS_SIZE] stats;\n', '\n', '        // Set to the cooldown time that represents exploration duration for this asset.\n', '        // Defined by a successful exploration action, regardless of whether this asset is acting as ship or a part.\n', '        uint256 cooldown;\n', '\n', '        // a reference to a super asset that manufactured the asset\n', '        uint256 builtBy;\n', '    }\n', '\n', '    /*** CONSTANTS ***/\n', '\n', '    // @dev Sanity check that allows us to ensure that we are pointing to the\n', '    //  right storage contract in our EthernautsLogic(address _CStorageAddress) call.\n', '    bool public isEthernautsStorage = true;\n', '\n', '    /*** STORAGE ***/\n', '\n', '    /// @dev An array containing the Asset struct for all assets in existence. The Asset UniqueId\n', '    ///  of each asset is actually an index into this array.\n', '    Asset[] public assets;\n', '\n', '    /// @dev A mapping from Asset UniqueIDs to the price of the token.\n', '    /// stored outside Asset Struct to save gas, because price can change frequently\n', '    mapping (uint256 => uint256) internal assetIndexToPrice;\n', '\n', '    /// @dev A mapping from asset UniqueIDs to the address that owns them. All assets have some valid owner address.\n', '    mapping (uint256 => address) internal assetIndexToOwner;\n', '\n', '    // @dev A mapping from owner address to count of tokens that address owns.\n', '    //  Used internally inside balanceOf() to resolve ownership count.\n', '    mapping (address => uint256) internal ownershipTokenCount;\n', '\n', '    /// @dev A mapping from AssetUniqueIDs to an address that has been approved to call\n', '    ///  transferFrom(). Each Asset can only have one approved address for transfer\n', '    ///  at any time. A zero value means no approval is outstanding.\n', '    mapping (uint256 => address) internal assetIndexToApproved;\n', '\n', '\n', '    /*** SETTERS ***/\n', '\n', '    /// @dev set new asset price\n', '    /// @param _tokenId  asset UniqueId\n', '    /// @param _price    asset price\n', '    function setPrice(uint256 _tokenId, uint256 _price) public onlyGrantedContracts {\n', '        assetIndexToPrice[_tokenId] = _price;\n', '    }\n', '\n', '    /// @dev Mark transfer as approved\n', '    /// @param _tokenId  asset UniqueId\n', '    /// @param _approved address approved\n', '    function approve(uint256 _tokenId, address _approved) public onlyGrantedContracts {\n', '        assetIndexToApproved[_tokenId] = _approved;\n', '    }\n', '\n', '    /// @dev Assigns ownership of a specific Asset to an address.\n', '    /// @param _from    current owner address\n', '    /// @param _to      new owner address\n', '    /// @param _tokenId asset UniqueId\n', '    function transfer(address _from, address _to, uint256 _tokenId) public onlyGrantedContracts {\n', '        // Since the number of assets is capped to 2^32 we can&#39;t overflow this\n', '        ownershipTokenCount[_to]++;\n', '        // transfer ownership\n', '        assetIndexToOwner[_tokenId] = _to;\n', '        // When creating new assets _from is 0x0, but we can&#39;t account that address.\n', '        if (_from != address(0)) {\n', '            ownershipTokenCount[_from]--;\n', '            // clear any previously approved ownership exchange\n', '            delete assetIndexToApproved[_tokenId];\n', '        }\n', '    }\n', '\n', '    /// @dev A public method that creates a new asset and stores it. This\n', '    ///  method does basic checking and should only be called from other contract when the\n', '    ///  input data is known to be valid. Will NOT generate any event it is delegate to business logic contracts.\n', '    /// @param _creatorTokenID The asset who is father of this asset\n', '    /// @param _owner First owner of this asset\n', '    /// @param _price asset price\n', '    /// @param _ID asset ID\n', '    /// @param _category see Asset Struct description\n', '    /// @param _state see Asset Struct description\n', '    /// @param _attributes see Asset Struct description\n', '    /// @param _stats see Asset Struct description\n', '    function createAsset(\n', '        uint256 _creatorTokenID,\n', '        address _owner,\n', '        uint256 _price,\n', '        uint16 _ID,\n', '        uint8 _category,\n', '        uint8 _state,\n', '        uint8 _attributes,\n', '        uint8[STATS_SIZE] _stats,\n', '        uint256 _cooldown,\n', '        uint64 _cooldownEndBlock\n', '    )\n', '    public onlyGrantedContracts\n', '    returns (uint256)\n', '    {\n', '        // Ensure our data structures are always valid.\n', '        require(_ID > 0);\n', '        require(_category > 0);\n', '        require(_attributes != 0x0);\n', '        require(_stats.length > 0);\n', '\n', '        Asset memory asset = Asset({\n', '            ID: _ID,\n', '            category: _category,\n', '            builtBy: _creatorTokenID,\n', '            attributes: bytes2(_attributes),\n', '            stats: _stats,\n', '            state: _state,\n', '            createdAt: uint64(now),\n', '            cooldownEndBlock: _cooldownEndBlock,\n', '            cooldown: _cooldown\n', '        });\n', '\n', '        uint256 newAssetUniqueId = assets.push(asset) - 1;\n', '\n', '        // Check it reached 4 billion assets but let&#39;s just be 100% sure.\n', '        require(newAssetUniqueId == uint256(uint32(newAssetUniqueId)));\n', '\n', '        // store price\n', '        assetIndexToPrice[newAssetUniqueId] = _price;\n', '\n', '        // This will assign ownership\n', '        transfer(address(0), _owner, newAssetUniqueId);\n', '\n', '        return newAssetUniqueId;\n', '    }\n', '\n', '    /// @dev A public method that edit asset in case of any mistake is done during process of creation by the developer. This\n', '    /// This method doesn&#39;t do any checking and should only be called when the\n', '    ///  input data is known to be valid.\n', '    /// @param _tokenId The token ID\n', '    /// @param _creatorTokenID The asset that create that token\n', '    /// @param _price asset price\n', '    /// @param _ID asset ID\n', '    /// @param _category see Asset Struct description\n', '    /// @param _state see Asset Struct description\n', '    /// @param _attributes see Asset Struct description\n', '    /// @param _stats see Asset Struct description\n', '    /// @param _cooldown asset cooldown index\n', '    function editAsset(\n', '        uint256 _tokenId,\n', '        uint256 _creatorTokenID,\n', '        uint256 _price,\n', '        uint16 _ID,\n', '        uint8 _category,\n', '        uint8 _state,\n', '        uint8 _attributes,\n', '        uint8[STATS_SIZE] _stats,\n', '        uint16 _cooldown\n', '    )\n', '    external validAsset(_tokenId) onlyCLevel\n', '    returns (uint256)\n', '    {\n', '        // Ensure our data structures are always valid.\n', '        require(_ID > 0);\n', '        require(_category > 0);\n', '        require(_attributes != 0x0);\n', '        require(_stats.length > 0);\n', '\n', '        // store price\n', '        assetIndexToPrice[_tokenId] = _price;\n', '\n', '        Asset storage asset = assets[_tokenId];\n', '        asset.ID = _ID;\n', '        asset.category = _category;\n', '        asset.builtBy = _creatorTokenID;\n', '        asset.attributes = bytes2(_attributes);\n', '        asset.stats = _stats;\n', '        asset.state = _state;\n', '        asset.cooldown = _cooldown;\n', '    }\n', '\n', '    /// @dev Update only stats\n', '    /// @param _tokenId asset UniqueId\n', '    /// @param _stats asset state, see Asset Struct description\n', '    function updateStats(uint256 _tokenId, uint8[STATS_SIZE] _stats) public validAsset(_tokenId) onlyGrantedContracts {\n', '        assets[_tokenId].stats = _stats;\n', '    }\n', '\n', '    /// @dev Update only asset state\n', '    /// @param _tokenId asset UniqueId\n', '    /// @param _state asset state, see Asset Struct description\n', '    function updateState(uint256 _tokenId, uint8 _state) public validAsset(_tokenId) onlyGrantedContracts {\n', '        assets[_tokenId].state = _state;\n', '    }\n', '\n', '    /// @dev Update Cooldown for a single asset\n', '    /// @param _tokenId asset UniqueId\n', '    /// @param _cooldown asset state, see Asset Struct description\n', '    function setAssetCooldown(uint256 _tokenId, uint256 _cooldown, uint64 _cooldownEndBlock)\n', '    public validAsset(_tokenId) onlyGrantedContracts {\n', '        assets[_tokenId].cooldown = _cooldown;\n', '        assets[_tokenId].cooldownEndBlock = _cooldownEndBlock;\n', '    }\n', '\n', '    /*** GETTERS ***/\n', '\n', '    /// @notice Returns only stats data about a specific asset.\n', '    /// @dev it is necessary due solidity compiler limitations\n', '    ///      when we have large qty of parameters it throws StackTooDeepException\n', '    /// @param _tokenId The UniqueId of the asset of interest.\n', '    function getStats(uint256 _tokenId) public view returns (uint8[STATS_SIZE]) {\n', '        return assets[_tokenId].stats;\n', '    }\n', '\n', '    /// @dev return current price of an asset\n', '    /// @param _tokenId asset UniqueId\n', '    function priceOf(uint256 _tokenId) public view returns (uint256 price) {\n', '        return assetIndexToPrice[_tokenId];\n', '    }\n', '\n', '    /// @notice Check if asset has all attributes passed by parameter\n', '    /// @param _tokenId The UniqueId of the asset of interest.\n', '    /// @param _attributes see Asset Struct description\n', '    function hasAllAttrs(uint256 _tokenId, bytes2 _attributes) public view returns (bool) {\n', '        return assets[_tokenId].attributes & _attributes == _attributes;\n', '    }\n', '\n', '    /// @notice Check if asset has any attribute passed by parameter\n', '    /// @param _tokenId The UniqueId of the asset of interest.\n', '    /// @param _attributes see Asset Struct description\n', '    function hasAnyAttrs(uint256 _tokenId, bytes2 _attributes) public view returns (bool) {\n', '        return assets[_tokenId].attributes & _attributes != 0x0;\n', '    }\n', '\n', '    /// @notice Check if asset is in the state passed by parameter\n', '    /// @param _tokenId The UniqueId of the asset of interest.\n', '    /// @param _category see AssetCategory in EthernautsBase for possible states\n', '    function isCategory(uint256 _tokenId, uint8 _category) public view returns (bool) {\n', '        return assets[_tokenId].category == _category;\n', '    }\n', '\n', '    /// @notice Check if asset is in the state passed by parameter\n', '    /// @param _tokenId The UniqueId of the asset of interest.\n', '    /// @param _state see enum AssetState in EthernautsBase for possible states\n', '    function isState(uint256 _tokenId, uint8 _state) public view returns (bool) {\n', '        return assets[_tokenId].state == _state;\n', '    }\n', '\n', '    /// @notice Returns owner of a given Asset(Token).\n', '    /// @dev Required for ERC-721 compliance.\n', '    /// @param _tokenId asset UniqueId\n', '    function ownerOf(uint256 _tokenId) public view returns (address owner)\n', '    {\n', '        return assetIndexToOwner[_tokenId];\n', '    }\n', '\n', '    /// @dev Required for ERC-721 compliance\n', '    /// @notice Returns the number of Assets owned by a specific address.\n', '    /// @param _owner The owner address to check.\n', '    function balanceOf(address _owner) public view returns (uint256 count) {\n', '        return ownershipTokenCount[_owner];\n', '    }\n', '\n', '    /// @dev Checks if a given address currently has transferApproval for a particular Asset.\n', '    /// @param _tokenId asset UniqueId\n', '    function approvedFor(uint256 _tokenId) public view onlyGrantedContracts returns (address) {\n', '        return assetIndexToApproved[_tokenId];\n', '    }\n', '\n', '    /// @notice Returns the total number of Assets currently in existence.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function totalSupply() public view returns (uint256) {\n', '        return assets.length;\n', '    }\n', '\n', '    /// @notice List all existing tokens. It can be filtered by attributes or assets with owner\n', '    /// @param _owner filter all assets by owner\n', '    function getTokenList(address _owner, uint8 _withAttributes, uint256 start, uint256 count) external view returns(\n', '        uint256[6][]\n', '    ) {\n', '        uint256 totalAssets = assets.length;\n', '\n', '        if (totalAssets == 0) {\n', '            // Return an empty array\n', '            return new uint256[6][](0);\n', '        } else {\n', '            uint256[6][] memory result = new uint256[6][](totalAssets > count ? count : totalAssets);\n', '            uint256 resultIndex = 0;\n', '            bytes2 hasAttributes  = bytes2(_withAttributes);\n', '            Asset memory asset;\n', '\n', '            for (uint256 tokenId = start; tokenId < totalAssets && resultIndex < count; tokenId++) {\n', '                asset = assets[tokenId];\n', '                if (\n', '                    (asset.state != uint8(AssetState.Used)) &&\n', '                    (assetIndexToOwner[tokenId] == _owner || _owner == address(0)) &&\n', '                    (asset.attributes & hasAttributes == hasAttributes)\n', '                ) {\n', '                    result[resultIndex][0] = tokenId;\n', '                    result[resultIndex][1] = asset.ID;\n', '                    result[resultIndex][2] = asset.category;\n', '                    result[resultIndex][3] = uint256(asset.attributes);\n', '                    result[resultIndex][4] = asset.cooldown;\n', '                    result[resultIndex][5] = assetIndexToPrice[tokenId];\n', '                    resultIndex++;\n', '                }\n', '            }\n', '\n', '            return result;\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '\n', '\n', '\n', '\n', '/// @dev Base contract for all Ethernauts contracts holding global constants and functions.\n', 'contract EthernautsBase {\n', '\n', '    /*** CONSTANTS USED ACROSS CONTRACTS ***/\n', '\n', '    /// @dev Used by all contracts that interfaces with Ethernauts\n', '    ///      The ERC-165 interface signature for ERC-721.\n', '    ///  Ref: https://github.com/ethereum/EIPs/issues/165\n', '    ///  Ref: https://github.com/ethereum/EIPs/issues/721\n', '    bytes4 constant InterfaceSignature_ERC721 =\n', "    bytes4(keccak256('name()')) ^\n", "    bytes4(keccak256('symbol()')) ^\n", "    bytes4(keccak256('totalSupply()')) ^\n", "    bytes4(keccak256('balanceOf(address)')) ^\n", "    bytes4(keccak256('ownerOf(uint256)')) ^\n", "    bytes4(keccak256('approve(address,uint256)')) ^\n", "    bytes4(keccak256('transfer(address,uint256)')) ^\n", "    bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n", "    bytes4(keccak256('takeOwnership(uint256)')) ^\n", "    bytes4(keccak256('tokensOfOwner(address)')) ^\n", "    bytes4(keccak256('tokenMetadata(uint256,string)'));\n", '\n', '    /// @dev due solidity limitation we cannot return dynamic array from methods\n', '    /// so it creates incompability between functions across different contracts\n', '    uint8 public constant STATS_SIZE = 10;\n', '    uint8 public constant SHIP_SLOTS = 5;\n', '\n', '    // Possible state of any asset\n', '    enum AssetState { Available, UpForLease, Used }\n', '\n', '    // Possible state of any asset\n', '    // NotValid is to avoid 0 in places where category must be bigger than zero\n', '    enum AssetCategory { NotValid, Sector, Manufacturer, Ship, Object, Factory, CrewMember }\n', '\n', '    /// @dev Sector stats\n', '    enum ShipStats {Level, Attack, Defense, Speed, Range, Luck}\n', '    /// @notice Possible attributes for each asset\n', '    /// 00000001 - Seeded - Offered to the economy by us, the developers. Potentially at regular intervals.\n', '    /// 00000010 - Producible - Product of a factory and/or factory contract.\n', '    /// 00000100 - Explorable- Product of exploration.\n', '    /// 00001000 - Leasable - Can be rented to other users and will return to the original owner once the action is complete.\n', '    /// 00010000 - Permanent - Cannot be removed, always owned by a user.\n', '    /// 00100000 - Consumable - Destroyed after N exploration expeditions.\n', '    /// 01000000 - Tradable - Buyable and sellable on the market.\n', '    /// 10000000 - Hot Potato - Automatically gets put up for sale after acquiring.\n', '    bytes2 public ATTR_SEEDED     = bytes2(2**0);\n', '    bytes2 public ATTR_PRODUCIBLE = bytes2(2**1);\n', '    bytes2 public ATTR_EXPLORABLE = bytes2(2**2);\n', '    bytes2 public ATTR_LEASABLE   = bytes2(2**3);\n', '    bytes2 public ATTR_PERMANENT  = bytes2(2**4);\n', '    bytes2 public ATTR_CONSUMABLE = bytes2(2**5);\n', '    bytes2 public ATTR_TRADABLE   = bytes2(2**6);\n', '    bytes2 public ATTR_GOLDENGOOSE = bytes2(2**7);\n', '}\n', '\n', '/// @title Inspired by https://github.com/axiomzen/cryptokitties-bounty/blob/master/contracts/KittyAccessControl.sol\n', '/// @notice This contract manages the various addresses and constraints for operations\n', '//          that can be executed only by specific roles. Namely CEO and CTO. it also includes pausable pattern.\n', 'contract EthernautsAccessControl is EthernautsBase {\n', '\n', '    // This facet controls access control for Ethernauts.\n', '    // All roles have same responsibilities and rights, but there is slight differences between them:\n', '    //\n', '    //     - The CEO: The CEO can reassign other roles and only role that can unpause the smart contract.\n', '    //       It is initially set to the address that created the smart contract.\n', '    //\n', '    //     - The CTO: The CTO can change contract address, oracle address and plan for upgrades.\n', '    //\n', '    //     - The COO: The COO can change contract address and add create assets.\n', '    //\n', '    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\n', '    /// @param newContract address pointing to new contract\n', '    event ContractUpgrade(address newContract);\n', '\n', '    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '    address public ceoAddress;\n', '    address public ctoAddress;\n', '    address public cooAddress;\n', '    address public oracleAddress;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '\n', '    /// @dev Access modifier for CEO-only functionality\n', '    modifier onlyCEO() {\n', '        require(msg.sender == ceoAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Access modifier for CTO-only functionality\n', '    modifier onlyCTO() {\n', '        require(msg.sender == ctoAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Access modifier for CTO-only functionality\n', '    modifier onlyOracle() {\n', '        require(msg.sender == oracleAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCLevel() {\n', '        require(\n', '            msg.sender == ceoAddress ||\n', '            msg.sender == ctoAddress ||\n', '            msg.sender == cooAddress\n', '        );\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '    /// @param _newCEO The address of the new CEO\n', '    function setCEO(address _newCEO) external onlyCEO {\n', '        require(_newCEO != address(0));\n', '\n', '        ceoAddress = _newCEO;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the CTO. Only available to the current CTO or CEO.\n', '    /// @param _newCTO The address of the new CTO\n', '    function setCTO(address _newCTO) external {\n', '        require(\n', '            msg.sender == ceoAddress ||\n', '            msg.sender == ctoAddress\n', '        );\n', '        require(_newCTO != address(0));\n', '\n', '        ctoAddress = _newCTO;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the COO. Only available to the current COO or CEO.\n', '    /// @param _newCOO The address of the new COO\n', '    function setCOO(address _newCOO) external {\n', '        require(\n', '            msg.sender == ceoAddress ||\n', '            msg.sender == cooAddress\n', '        );\n', '        require(_newCOO != address(0));\n', '\n', '        cooAddress = _newCOO;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as oracle.\n', '    /// @param _newOracle The address of oracle\n', '    function setOracle(address _newOracle) external {\n', '        require(msg.sender == ctoAddress);\n', '        require(_newOracle != address(0));\n', '\n', '        oracleAddress = _newOracle;\n', '    }\n', '\n', '    /*** Pausable functionality adapted from OpenZeppelin ***/\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any "C-level" role to pause the contract. Used only when\n', '    ///  a bug or exploit is detected and we need to limit damage.\n', '    function pause() external onlyCLevel whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\n', '    ///  one reason we may pause the contract is when CTO account is compromised.\n', '    /// @notice This is public rather than external so it can be called by\n', '    ///  derived contracts.\n', '    function unpause() public onlyCEO whenPaused {\n', "        // can't unpause if contract was upgraded\n", '        paused = false;\n', '    }\n', '\n', '}\n', '\n', '/// @title Storage contract for Ethernauts Data. Common structs and constants.\n', '/// @notice This is our main data storage, constants and data types, plus\n', '//          internal functions for managing the assets. It is isolated and only interface with\n', '//          a list of granted contracts defined by CTO\n', '/// @author Ethernauts - Fernando Pauer\n', 'contract EthernautsStorage is EthernautsAccessControl {\n', '\n', '    function EthernautsStorage() public {\n', '        // the creator of the contract is the initial CEO\n', '        ceoAddress = msg.sender;\n', '\n', '        // the creator of the contract is the initial CTO as well\n', '        ctoAddress = msg.sender;\n', '\n', '        // the creator of the contract is the initial CTO as well\n', '        cooAddress = msg.sender;\n', '\n', '        // the creator of the contract is the initial Oracle as well\n', '        oracleAddress = msg.sender;\n', '    }\n', '\n', '    /// @notice No tipping!\n', '    /// @dev Reject all Ether from being sent here. Hopefully, we can prevent user accidents.\n', '    function() external payable {\n', '        require(msg.sender == address(this));\n', '    }\n', '\n', '    /*** Mapping for Contracts with granted permission ***/\n', '    mapping (address => bool) public contractsGrantedAccess;\n', '\n', '    /// @dev grant access for a contract to interact with this contract.\n', '    /// @param _v2Address The contract address to grant access\n', '    function grantAccess(address _v2Address) public onlyCTO {\n', '        // See README.md for updgrade plan\n', '        contractsGrantedAccess[_v2Address] = true;\n', '    }\n', '\n', '    /// @dev remove access from a contract to interact with this contract.\n', '    /// @param _v2Address The contract address to be removed\n', '    function removeAccess(address _v2Address) public onlyCTO {\n', '        // See README.md for updgrade plan\n', '        delete contractsGrantedAccess[_v2Address];\n', '    }\n', '\n', '    /// @dev Only allow permitted contracts to interact with this contract\n', '    modifier onlyGrantedContracts() {\n', '        require(contractsGrantedAccess[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    modifier validAsset(uint256 _tokenId) {\n', '        require(assets[_tokenId].ID > 0);\n', '        _;\n', '    }\n', '    /*** DATA TYPES ***/\n', '\n', '    /// @dev The main Ethernauts asset struct. Every asset in Ethernauts is represented by a copy\n', '    ///  of this structure. Note that the order of the members in this structure\n', '    ///  is important because of the byte-packing rules used by Ethereum.\n', '    ///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html\n', '    struct Asset {\n', '\n', '        // Asset ID is a identifier for look and feel in frontend\n', '        uint16 ID;\n', '\n', '        // Category = Sectors, Manufacturers, Ships, Objects (Upgrades/Misc), Factories and CrewMembers\n', '        uint8 category;\n', '\n', '        // The State of an asset: Available, On sale, Up for lease, Cooldown, Exploring\n', '        uint8 state;\n', '\n', '        // Attributes\n', '        // byte pos - Definition\n', '        // 00000001 - Seeded - Offered to the economy by us, the developers. Potentially at regular intervals.\n', '        // 00000010 - Producible - Product of a factory and/or factory contract.\n', '        // 00000100 - Explorable- Product of exploration.\n', '        // 00001000 - Leasable - Can be rented to other users and will return to the original owner once the action is complete.\n', '        // 00010000 - Permanent - Cannot be removed, always owned by a user.\n', '        // 00100000 - Consumable - Destroyed after N exploration expeditions.\n', '        // 01000000 - Tradable - Buyable and sellable on the market.\n', '        // 10000000 - Hot Potato - Automatically gets put up for sale after acquiring.\n', '        bytes2 attributes;\n', '\n', '        // The timestamp from the block when this asset was created.\n', '        uint64 createdAt;\n', '\n', '        // The minimum timestamp after which this asset can engage in exploring activities again.\n', '        uint64 cooldownEndBlock;\n', '\n', "        // The Asset's stats can be upgraded or changed based on exploration conditions.\n", '        // It will be defined per child contract, but all stats have a range from 0 to 255\n', '        // Examples\n', '        // 0 = Ship Level\n', '        // 1 = Ship Attack\n', '        uint8[STATS_SIZE] stats;\n', '\n', '        // Set to the cooldown time that represents exploration duration for this asset.\n', '        // Defined by a successful exploration action, regardless of whether this asset is acting as ship or a part.\n', '        uint256 cooldown;\n', '\n', '        // a reference to a super asset that manufactured the asset\n', '        uint256 builtBy;\n', '    }\n', '\n', '    /*** CONSTANTS ***/\n', '\n', '    // @dev Sanity check that allows us to ensure that we are pointing to the\n', '    //  right storage contract in our EthernautsLogic(address _CStorageAddress) call.\n', '    bool public isEthernautsStorage = true;\n', '\n', '    /*** STORAGE ***/\n', '\n', '    /// @dev An array containing the Asset struct for all assets in existence. The Asset UniqueId\n', '    ///  of each asset is actually an index into this array.\n', '    Asset[] public assets;\n', '\n', '    /// @dev A mapping from Asset UniqueIDs to the price of the token.\n', '    /// stored outside Asset Struct to save gas, because price can change frequently\n', '    mapping (uint256 => uint256) internal assetIndexToPrice;\n', '\n', '    /// @dev A mapping from asset UniqueIDs to the address that owns them. All assets have some valid owner address.\n', '    mapping (uint256 => address) internal assetIndexToOwner;\n', '\n', '    // @dev A mapping from owner address to count of tokens that address owns.\n', '    //  Used internally inside balanceOf() to resolve ownership count.\n', '    mapping (address => uint256) internal ownershipTokenCount;\n', '\n', '    /// @dev A mapping from AssetUniqueIDs to an address that has been approved to call\n', '    ///  transferFrom(). Each Asset can only have one approved address for transfer\n', '    ///  at any time. A zero value means no approval is outstanding.\n', '    mapping (uint256 => address) internal assetIndexToApproved;\n', '\n', '\n', '    /*** SETTERS ***/\n', '\n', '    /// @dev set new asset price\n', '    /// @param _tokenId  asset UniqueId\n', '    /// @param _price    asset price\n', '    function setPrice(uint256 _tokenId, uint256 _price) public onlyGrantedContracts {\n', '        assetIndexToPrice[_tokenId] = _price;\n', '    }\n', '\n', '    /// @dev Mark transfer as approved\n', '    /// @param _tokenId  asset UniqueId\n', '    /// @param _approved address approved\n', '    function approve(uint256 _tokenId, address _approved) public onlyGrantedContracts {\n', '        assetIndexToApproved[_tokenId] = _approved;\n', '    }\n', '\n', '    /// @dev Assigns ownership of a specific Asset to an address.\n', '    /// @param _from    current owner address\n', '    /// @param _to      new owner address\n', '    /// @param _tokenId asset UniqueId\n', '    function transfer(address _from, address _to, uint256 _tokenId) public onlyGrantedContracts {\n', "        // Since the number of assets is capped to 2^32 we can't overflow this\n", '        ownershipTokenCount[_to]++;\n', '        // transfer ownership\n', '        assetIndexToOwner[_tokenId] = _to;\n', "        // When creating new assets _from is 0x0, but we can't account that address.\n", '        if (_from != address(0)) {\n', '            ownershipTokenCount[_from]--;\n', '            // clear any previously approved ownership exchange\n', '            delete assetIndexToApproved[_tokenId];\n', '        }\n', '    }\n', '\n', '    /// @dev A public method that creates a new asset and stores it. This\n', '    ///  method does basic checking and should only be called from other contract when the\n', '    ///  input data is known to be valid. Will NOT generate any event it is delegate to business logic contracts.\n', '    /// @param _creatorTokenID The asset who is father of this asset\n', '    /// @param _owner First owner of this asset\n', '    /// @param _price asset price\n', '    /// @param _ID asset ID\n', '    /// @param _category see Asset Struct description\n', '    /// @param _state see Asset Struct description\n', '    /// @param _attributes see Asset Struct description\n', '    /// @param _stats see Asset Struct description\n', '    function createAsset(\n', '        uint256 _creatorTokenID,\n', '        address _owner,\n', '        uint256 _price,\n', '        uint16 _ID,\n', '        uint8 _category,\n', '        uint8 _state,\n', '        uint8 _attributes,\n', '        uint8[STATS_SIZE] _stats,\n', '        uint256 _cooldown,\n', '        uint64 _cooldownEndBlock\n', '    )\n', '    public onlyGrantedContracts\n', '    returns (uint256)\n', '    {\n', '        // Ensure our data structures are always valid.\n', '        require(_ID > 0);\n', '        require(_category > 0);\n', '        require(_attributes != 0x0);\n', '        require(_stats.length > 0);\n', '\n', '        Asset memory asset = Asset({\n', '            ID: _ID,\n', '            category: _category,\n', '            builtBy: _creatorTokenID,\n', '            attributes: bytes2(_attributes),\n', '            stats: _stats,\n', '            state: _state,\n', '            createdAt: uint64(now),\n', '            cooldownEndBlock: _cooldownEndBlock,\n', '            cooldown: _cooldown\n', '        });\n', '\n', '        uint256 newAssetUniqueId = assets.push(asset) - 1;\n', '\n', "        // Check it reached 4 billion assets but let's just be 100% sure.\n", '        require(newAssetUniqueId == uint256(uint32(newAssetUniqueId)));\n', '\n', '        // store price\n', '        assetIndexToPrice[newAssetUniqueId] = _price;\n', '\n', '        // This will assign ownership\n', '        transfer(address(0), _owner, newAssetUniqueId);\n', '\n', '        return newAssetUniqueId;\n', '    }\n', '\n', '    /// @dev A public method that edit asset in case of any mistake is done during process of creation by the developer. This\n', "    /// This method doesn't do any checking and should only be called when the\n", '    ///  input data is known to be valid.\n', '    /// @param _tokenId The token ID\n', '    /// @param _creatorTokenID The asset that create that token\n', '    /// @param _price asset price\n', '    /// @param _ID asset ID\n', '    /// @param _category see Asset Struct description\n', '    /// @param _state see Asset Struct description\n', '    /// @param _attributes see Asset Struct description\n', '    /// @param _stats see Asset Struct description\n', '    /// @param _cooldown asset cooldown index\n', '    function editAsset(\n', '        uint256 _tokenId,\n', '        uint256 _creatorTokenID,\n', '        uint256 _price,\n', '        uint16 _ID,\n', '        uint8 _category,\n', '        uint8 _state,\n', '        uint8 _attributes,\n', '        uint8[STATS_SIZE] _stats,\n', '        uint16 _cooldown\n', '    )\n', '    external validAsset(_tokenId) onlyCLevel\n', '    returns (uint256)\n', '    {\n', '        // Ensure our data structures are always valid.\n', '        require(_ID > 0);\n', '        require(_category > 0);\n', '        require(_attributes != 0x0);\n', '        require(_stats.length > 0);\n', '\n', '        // store price\n', '        assetIndexToPrice[_tokenId] = _price;\n', '\n', '        Asset storage asset = assets[_tokenId];\n', '        asset.ID = _ID;\n', '        asset.category = _category;\n', '        asset.builtBy = _creatorTokenID;\n', '        asset.attributes = bytes2(_attributes);\n', '        asset.stats = _stats;\n', '        asset.state = _state;\n', '        asset.cooldown = _cooldown;\n', '    }\n', '\n', '    /// @dev Update only stats\n', '    /// @param _tokenId asset UniqueId\n', '    /// @param _stats asset state, see Asset Struct description\n', '    function updateStats(uint256 _tokenId, uint8[STATS_SIZE] _stats) public validAsset(_tokenId) onlyGrantedContracts {\n', '        assets[_tokenId].stats = _stats;\n', '    }\n', '\n', '    /// @dev Update only asset state\n', '    /// @param _tokenId asset UniqueId\n', '    /// @param _state asset state, see Asset Struct description\n', '    function updateState(uint256 _tokenId, uint8 _state) public validAsset(_tokenId) onlyGrantedContracts {\n', '        assets[_tokenId].state = _state;\n', '    }\n', '\n', '    /// @dev Update Cooldown for a single asset\n', '    /// @param _tokenId asset UniqueId\n', '    /// @param _cooldown asset state, see Asset Struct description\n', '    function setAssetCooldown(uint256 _tokenId, uint256 _cooldown, uint64 _cooldownEndBlock)\n', '    public validAsset(_tokenId) onlyGrantedContracts {\n', '        assets[_tokenId].cooldown = _cooldown;\n', '        assets[_tokenId].cooldownEndBlock = _cooldownEndBlock;\n', '    }\n', '\n', '    /*** GETTERS ***/\n', '\n', '    /// @notice Returns only stats data about a specific asset.\n', '    /// @dev it is necessary due solidity compiler limitations\n', '    ///      when we have large qty of parameters it throws StackTooDeepException\n', '    /// @param _tokenId The UniqueId of the asset of interest.\n', '    function getStats(uint256 _tokenId) public view returns (uint8[STATS_SIZE]) {\n', '        return assets[_tokenId].stats;\n', '    }\n', '\n', '    /// @dev return current price of an asset\n', '    /// @param _tokenId asset UniqueId\n', '    function priceOf(uint256 _tokenId) public view returns (uint256 price) {\n', '        return assetIndexToPrice[_tokenId];\n', '    }\n', '\n', '    /// @notice Check if asset has all attributes passed by parameter\n', '    /// @param _tokenId The UniqueId of the asset of interest.\n', '    /// @param _attributes see Asset Struct description\n', '    function hasAllAttrs(uint256 _tokenId, bytes2 _attributes) public view returns (bool) {\n', '        return assets[_tokenId].attributes & _attributes == _attributes;\n', '    }\n', '\n', '    /// @notice Check if asset has any attribute passed by parameter\n', '    /// @param _tokenId The UniqueId of the asset of interest.\n', '    /// @param _attributes see Asset Struct description\n', '    function hasAnyAttrs(uint256 _tokenId, bytes2 _attributes) public view returns (bool) {\n', '        return assets[_tokenId].attributes & _attributes != 0x0;\n', '    }\n', '\n', '    /// @notice Check if asset is in the state passed by parameter\n', '    /// @param _tokenId The UniqueId of the asset of interest.\n', '    /// @param _category see AssetCategory in EthernautsBase for possible states\n', '    function isCategory(uint256 _tokenId, uint8 _category) public view returns (bool) {\n', '        return assets[_tokenId].category == _category;\n', '    }\n', '\n', '    /// @notice Check if asset is in the state passed by parameter\n', '    /// @param _tokenId The UniqueId of the asset of interest.\n', '    /// @param _state see enum AssetState in EthernautsBase for possible states\n', '    function isState(uint256 _tokenId, uint8 _state) public view returns (bool) {\n', '        return assets[_tokenId].state == _state;\n', '    }\n', '\n', '    /// @notice Returns owner of a given Asset(Token).\n', '    /// @dev Required for ERC-721 compliance.\n', '    /// @param _tokenId asset UniqueId\n', '    function ownerOf(uint256 _tokenId) public view returns (address owner)\n', '    {\n', '        return assetIndexToOwner[_tokenId];\n', '    }\n', '\n', '    /// @dev Required for ERC-721 compliance\n', '    /// @notice Returns the number of Assets owned by a specific address.\n', '    /// @param _owner The owner address to check.\n', '    function balanceOf(address _owner) public view returns (uint256 count) {\n', '        return ownershipTokenCount[_owner];\n', '    }\n', '\n', '    /// @dev Checks if a given address currently has transferApproval for a particular Asset.\n', '    /// @param _tokenId asset UniqueId\n', '    function approvedFor(uint256 _tokenId) public view onlyGrantedContracts returns (address) {\n', '        return assetIndexToApproved[_tokenId];\n', '    }\n', '\n', '    /// @notice Returns the total number of Assets currently in existence.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function totalSupply() public view returns (uint256) {\n', '        return assets.length;\n', '    }\n', '\n', '    /// @notice List all existing tokens. It can be filtered by attributes or assets with owner\n', '    /// @param _owner filter all assets by owner\n', '    function getTokenList(address _owner, uint8 _withAttributes, uint256 start, uint256 count) external view returns(\n', '        uint256[6][]\n', '    ) {\n', '        uint256 totalAssets = assets.length;\n', '\n', '        if (totalAssets == 0) {\n', '            // Return an empty array\n', '            return new uint256[6][](0);\n', '        } else {\n', '            uint256[6][] memory result = new uint256[6][](totalAssets > count ? count : totalAssets);\n', '            uint256 resultIndex = 0;\n', '            bytes2 hasAttributes  = bytes2(_withAttributes);\n', '            Asset memory asset;\n', '\n', '            for (uint256 tokenId = start; tokenId < totalAssets && resultIndex < count; tokenId++) {\n', '                asset = assets[tokenId];\n', '                if (\n', '                    (asset.state != uint8(AssetState.Used)) &&\n', '                    (assetIndexToOwner[tokenId] == _owner || _owner == address(0)) &&\n', '                    (asset.attributes & hasAttributes == hasAttributes)\n', '                ) {\n', '                    result[resultIndex][0] = tokenId;\n', '                    result[resultIndex][1] = asset.ID;\n', '                    result[resultIndex][2] = asset.category;\n', '                    result[resultIndex][3] = uint256(asset.attributes);\n', '                    result[resultIndex][4] = asset.cooldown;\n', '                    result[resultIndex][5] = assetIndexToPrice[tokenId];\n', '                    resultIndex++;\n', '                }\n', '            }\n', '\n', '            return result;\n', '        }\n', '    }\n', '}']
