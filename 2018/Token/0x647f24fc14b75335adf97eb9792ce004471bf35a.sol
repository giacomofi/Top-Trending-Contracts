['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        assert_ex(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        // assert_ex(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', '        // assert_ex(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        assert_ex(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert_ex(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal   pure  returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function assert_ex(bool assert_exion) internal pure{\n', '        if (!assert_exion) {\n', '          revert();\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Interface {\n', '\n', '    using SafeMath for uint;\n', '    uint public _totalSupply;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '\n', '\n', '    function totalSupply() constant returns (uint256 totalSupply) {\n', '      totalSupply = _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns balance of the `_owner`.\n', '     *\n', '     * @param _owner   The address whose balance will be returned.\n', '     * @return balance Balance of the `_owner`.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * Set allowed for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint _value) public returns (bool success) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowed to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) {\n', '          revert();\n', '        }\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * Atomic increment of approved spending\n', '     *\n', '     * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     */\n', '    function addApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Atomic decrement of approved spending.\n', '     *\n', '     * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     */\n', '    function subApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '          allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '          allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Contract that will work with ERC223 tokens.\n', ' */\n', 'contract ERC223ReceivingContract {\n', '\n', '    event TokenFallback(address _from, uint _value, bytes _data);\n', '\n', '    /**\n', '     * @dev Standard ERC223 function that will handle incoming token transfers.\n', '     *\n', '     * @param _from  Token sender address.\n', '     * @param _value Amount of tokens.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function tokenFallback(address _from, uint _value, bytes _data)public {\n', '        TokenFallback(_from,_value,_data);\n', '    }\n', '}\n', '\n', '\n', 'contract StanderdToken is ERC20Interface, ERC223ReceivingContract, Owned {\n', '\n', '\n', '\n', '    /**\n', '     *\n', '     * Fix for the ERC20 short address attack\n', '     *\n', '     * http://vessenes.com/the-erc20-short-address-attack-explained/\n', '     */\n', '    modifier onlyPayloadSize(uint size) {\n', '        if(msg.data.length != size + 4) {\n', '         revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      This function works the same with the previous one\n', '     *      but doesn&#39;t contain `_data` param.\n', '     *      Added due to backwards compatibility reasons.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     */\n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        address _from = msg.sender;\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from,address _to, uint _value) public returns (bool) {\n', '        //require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract PreviligedToken is Owned {\n', '\n', '    using SafeMath for uint;\n', '\n', '    mapping (address => uint) previligedBalances;\n', '    mapping (address => mapping (address => uint)) previligedallowed;\n', '\n', '    event PreviligedLock(address indexed from, address indexed to, uint value);\n', '    event PreviligedUnLock(address indexed from, address indexed to, uint value);\n', '    event Previligedallowed(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '    function previligedBalanceOf(address _owner) public view returns (uint balance) {\n', '        return previligedBalances[_owner];\n', '    }\n', '\n', '    function previligedApprove(address _owner, address _spender, uint _value) onlyOwner public returns (bool success) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowed to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        if ((_value != 0) && (previligedallowed[_owner][_spender] != 0)) {\n', '          revert();\n', '        }\n', '\n', '        previligedallowed[_owner][_spender] = _value;\n', '        Previligedallowed(_owner, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function getPreviligedallowed(address _owner, address _spender) public view returns (uint remaining) {\n', '        return previligedallowed[_owner][_spender];\n', '    }\n', '\n', '    function previligedAddApproval(address _owner, address _spender, uint _addedValue) onlyOwner public returns (bool) {\n', '        previligedallowed[_owner][_spender] = previligedallowed[_owner][_spender].add(_addedValue);\n', '        Previligedallowed(_owner, _spender, previligedallowed[_owner][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function previligedSubApproval(address _owner, address _spender, uint _subtractedValue) onlyOwner public returns (bool) {\n', '        uint oldValue = previligedallowed[_owner][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '          previligedallowed[_owner][_spender] = 0;\n', '        } else {\n', '          previligedallowed[_owner][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Previligedallowed(_owner, _spender, previligedallowed[_owner][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract MitToken is StanderdToken, PreviligedToken {\n', '\n', '    using SafeMath for uint;\n', '\n', '    event Burned(address burner, uint burnedAmount);\n', '\n', '    function MitToken() public {\n', '\n', '        uint initialSupply = 6000000000;\n', '\n', '        decimals = 18;\n', '        _totalSupply = initialSupply * 10 ** uint(decimals);  // Update total supply with the decimal amount\n', '        balances[msg.sender] = _totalSupply;                // Give the creator all initial tokens\n', '        name = "MitCoin";                                   // Set the name for display purposes\n', '        symbol = "MITC";                               // Set the symbol for display purposes3\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @notice Create `mintedAmount` tokens and send it to `_target`\n', '     * @param _target The address that will receive the minted tokens.\n', '     * @param _mintedAmount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mintToken(address _target, uint _mintedAmount) onlyOwner public {\n', '        balances[_target] = balances[_target].add(_mintedAmount);\n', '        _totalSupply = _totalSupply.add(_mintedAmount);\n', '\n', '        Transfer(address(0), _target, _mintedAmount);\n', '    }\n', '\n', '    function burn(uint _amount) onlyOwner public {\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_amount);\n', '        _totalSupply = _totalSupply.sub(_amount);\n', '\n', '        Burned(burner, _amount);\n', '    }\n', '\n', '    function previligedLock(address _to, uint _value) onlyOwner public returns (bool) {\n', '        address _from = msg.sender;\n', '        balances[_from] = balances[_from].sub(_value);\n', '        //balances[_to] = balances[_to].add(_value);\n', '        previligedBalances[_to] = previligedBalances[_to].add(_value);\n', '        PreviligedLock(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function previligedUnLock(address _from, uint _value) public returns (bool) {\n', '        address to = msg.sender; // we force the address_to to be the the caller\n', '        require(to != address(0));\n', '        require(_value <= previligedBalances[_from]);\n', '        require(_value <= previligedallowed[_from][msg.sender]);\n', '\n', '        previligedBalances[_from] = previligedBalances[_from].sub(_value);\n', '        balances[to] = balances[to].add(_value);\n', '        previligedallowed[_from][msg.sender] = previligedallowed[_from][msg.sender].sub(_value);\n', '        PreviligedUnLock(_from, to, _value);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        assert_ex(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        // assert_ex(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', "        // assert_ex(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        assert_ex(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert_ex(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal   pure  returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function assert_ex(bool assert_exion) internal pure{\n', '        if (!assert_exion) {\n', '          revert();\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Interface {\n', '\n', '    using SafeMath for uint;\n', '    uint public _totalSupply;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '\n', '\n', '    function totalSupply() constant returns (uint256 totalSupply) {\n', '      totalSupply = _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns balance of the `_owner`.\n', '     *\n', '     * @param _owner   The address whose balance will be returned.\n', '     * @return balance Balance of the `_owner`.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * Set allowed for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint _value) public returns (bool success) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowed to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) {\n', '          revert();\n', '        }\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * Atomic increment of approved spending\n', '     *\n', '     * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     */\n', '    function addApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Atomic decrement of approved spending.\n', '     *\n', '     * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     */\n', '    function subApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '          allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '          allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Contract that will work with ERC223 tokens.\n', ' */\n', 'contract ERC223ReceivingContract {\n', '\n', '    event TokenFallback(address _from, uint _value, bytes _data);\n', '\n', '    /**\n', '     * @dev Standard ERC223 function that will handle incoming token transfers.\n', '     *\n', '     * @param _from  Token sender address.\n', '     * @param _value Amount of tokens.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function tokenFallback(address _from, uint _value, bytes _data)public {\n', '        TokenFallback(_from,_value,_data);\n', '    }\n', '}\n', '\n', '\n', 'contract StanderdToken is ERC20Interface, ERC223ReceivingContract, Owned {\n', '\n', '\n', '\n', '    /**\n', '     *\n', '     * Fix for the ERC20 short address attack\n', '     *\n', '     * http://vessenes.com/the-erc20-short-address-attack-explained/\n', '     */\n', '    modifier onlyPayloadSize(uint size) {\n', '        if(msg.data.length != size + 4) {\n', '         revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      This function works the same with the previous one\n', "     *      but doesn't contain `_data` param.\n", '     *      Added due to backwards compatibility reasons.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     */\n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        address _from = msg.sender;\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from,address _to, uint _value) public returns (bool) {\n', '        //require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract PreviligedToken is Owned {\n', '\n', '    using SafeMath for uint;\n', '\n', '    mapping (address => uint) previligedBalances;\n', '    mapping (address => mapping (address => uint)) previligedallowed;\n', '\n', '    event PreviligedLock(address indexed from, address indexed to, uint value);\n', '    event PreviligedUnLock(address indexed from, address indexed to, uint value);\n', '    event Previligedallowed(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '    function previligedBalanceOf(address _owner) public view returns (uint balance) {\n', '        return previligedBalances[_owner];\n', '    }\n', '\n', '    function previligedApprove(address _owner, address _spender, uint _value) onlyOwner public returns (bool success) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowed to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        if ((_value != 0) && (previligedallowed[_owner][_spender] != 0)) {\n', '          revert();\n', '        }\n', '\n', '        previligedallowed[_owner][_spender] = _value;\n', '        Previligedallowed(_owner, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function getPreviligedallowed(address _owner, address _spender) public view returns (uint remaining) {\n', '        return previligedallowed[_owner][_spender];\n', '    }\n', '\n', '    function previligedAddApproval(address _owner, address _spender, uint _addedValue) onlyOwner public returns (bool) {\n', '        previligedallowed[_owner][_spender] = previligedallowed[_owner][_spender].add(_addedValue);\n', '        Previligedallowed(_owner, _spender, previligedallowed[_owner][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function previligedSubApproval(address _owner, address _spender, uint _subtractedValue) onlyOwner public returns (bool) {\n', '        uint oldValue = previligedallowed[_owner][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '          previligedallowed[_owner][_spender] = 0;\n', '        } else {\n', '          previligedallowed[_owner][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Previligedallowed(_owner, _spender, previligedallowed[_owner][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract MitToken is StanderdToken, PreviligedToken {\n', '\n', '    using SafeMath for uint;\n', '\n', '    event Burned(address burner, uint burnedAmount);\n', '\n', '    function MitToken() public {\n', '\n', '        uint initialSupply = 6000000000;\n', '\n', '        decimals = 18;\n', '        _totalSupply = initialSupply * 10 ** uint(decimals);  // Update total supply with the decimal amount\n', '        balances[msg.sender] = _totalSupply;                // Give the creator all initial tokens\n', '        name = "MitCoin";                                   // Set the name for display purposes\n', '        symbol = "MITC";                               // Set the symbol for display purposes3\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @notice Create `mintedAmount` tokens and send it to `_target`\n', '     * @param _target The address that will receive the minted tokens.\n', '     * @param _mintedAmount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mintToken(address _target, uint _mintedAmount) onlyOwner public {\n', '        balances[_target] = balances[_target].add(_mintedAmount);\n', '        _totalSupply = _totalSupply.add(_mintedAmount);\n', '\n', '        Transfer(address(0), _target, _mintedAmount);\n', '    }\n', '\n', '    function burn(uint _amount) onlyOwner public {\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_amount);\n', '        _totalSupply = _totalSupply.sub(_amount);\n', '\n', '        Burned(burner, _amount);\n', '    }\n', '\n', '    function previligedLock(address _to, uint _value) onlyOwner public returns (bool) {\n', '        address _from = msg.sender;\n', '        balances[_from] = balances[_from].sub(_value);\n', '        //balances[_to] = balances[_to].add(_value);\n', '        previligedBalances[_to] = previligedBalances[_to].add(_value);\n', '        PreviligedLock(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function previligedUnLock(address _from, uint _value) public returns (bool) {\n', '        address to = msg.sender; // we force the address_to to be the the caller\n', '        require(to != address(0));\n', '        require(_value <= previligedBalances[_from]);\n', '        require(_value <= previligedallowed[_from][msg.sender]);\n', '\n', '        previligedBalances[_from] = previligedBalances[_from].sub(_value);\n', '        balances[to] = balances[to].add(_value);\n', '        previligedallowed[_from][msg.sender] = previligedallowed[_from][msg.sender].sub(_value);\n', '        PreviligedUnLock(_from, to, _value);\n', '        return true;\n', '    }\n', '}']
