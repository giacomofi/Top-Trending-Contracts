['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedToken(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '} \n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '    Transfer(burner, address(0), _value);\n', '  }\n', '}\n', '\n', '/*\n', '  HardcapToken is PausableToken and on the creation it is paused.\n', '  It is made so because you don&#39;t want token to be transferable etc,\n', '  while your ico is not over.\n', '*/\n', 'contract HardcapToken is CappedToken, PausableToken, BurnableToken {\n', '\n', '  uint256 private constant TOKEN_CAP = 100 * 10**24;\n', '\n', '  string public constant name = "Welltrado token";\n', '  string public constant symbol = "WTL";\n', '  uint8 public constant decimals = 18;\n', '\n', '  function HardcapToken() public CappedToken(TOKEN_CAP) {\n', '    paused = true;\n', '  }\n', '}\n', '\n', 'contract HardcapCrowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  struct Phase {\n', '    uint256 capTo;\n', '    uint256 rate;\n', '  }\n', '\n', '  uint256 private constant TEAM_PERCENTAGE = 10;\n', '  uint256 private constant PLATFORM_PERCENTAGE = 25;\n', '  uint256 private constant CROWDSALE_PERCENTAGE = 65;\n', '\n', '  uint256 private constant MIN_TOKENS_TO_PURCHASE = 100 * 10**18;\n', '\n', '  uint256 private constant ICO_TOKENS_CAP = 65 * 10**24;\n', '\n', '  uint256 private constant FINAL_CLOSING_TIME = 1529928000;\n', '\n', '  uint256 private constant INITIAL_START_DATE = 1524484800;\n', '\n', '  uint256 public phase = 0;\n', '\n', '  HardcapToken public token;\n', '\n', '  address public wallet;\n', '  address public platform;\n', '  address public assigner;\n', '  address public teamTokenHolder;\n', '\n', '  uint256 public weiRaised;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  uint256 public openingTime = 1524484800;\n', '  uint256 public closingTime = 1525089600;\n', '  uint256 public finalizedTime;\n', '\n', '  mapping (uint256 => Phase) private phases;\n', '\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  event TokenAssigned(address indexed purchaser, address indexed beneficiary, uint256 amount);\n', '\n', '\n', '  event Finalized();\n', '\n', '  modifier onlyAssginer() {\n', '    require(msg.sender == assigner);\n', '    _;\n', '  }\n', '\n', '  function HardcapCrowdsale(address _wallet, address _platform, address _assigner, HardcapToken _token) public {\n', '      require(_wallet != address(0));\n', '      require(_assigner != address(0));\n', '      require(_platform != address(0));\n', '      require(_token != address(0));\n', '\n', '      wallet = _wallet;\n', '      platform = _platform;\n', '      assigner = _assigner;\n', '      token = _token;\n', '\n', '      // phases capTo means that totalSupply must reach it to change the phase\n', '      phases[0] = Phase(15 * 10**23, 1250);\n', '      phases[1] = Phase(10 * 10**24, 1200);\n', '      phases[2] = Phase(17 * 10**24, 1150);\n', '      phases[3] = Phase(24 * 10**24, 1100);\n', '      phases[4] = Phase(31 * 10**24, 1070);\n', '      phases[5] = Phase(38 * 10**24, 1050);\n', '      phases[6] = Phase(47 * 10**24, 1030);\n', '      phases[7] = Phase(56 * 10**24, 1000);\n', '      phases[8] = Phase(65 * 10**24, 1000);\n', '  }\n', '\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /*\n', '    contract for teams tokens lockup\n', '  */\n', '  function setTeamTokenHolder(address _teamTokenHolder) onlyOwner public {\n', '    require(_teamTokenHolder != address(0));\n', '    // should allow set only once\n', '    require(teamTokenHolder == address(0));\n', '    teamTokenHolder = _teamTokenHolder;\n', '  }\n', '\n', '  function buyTokens(address _beneficiary) public payable {\n', '    _processTokensPurchase(_beneficiary, msg.value);\n', '  }\n', '\n', '  /*\n', '    It may be needed to assign tokens in batches if multiple clients invested\n', '    in any other crypto currency.\n', '    NOTE: this will fail if there are not enough tokens left for at least one investor.\n', '        for this to work all investors must get all their tokens.\n', '  */\n', '  function assignTokensToMultipleInvestors(address[] _beneficiaries, uint256[] _tokensAmount) onlyAssginer public {\n', '    require(_beneficiaries.length == _tokensAmount.length);\n', '    for (uint i = 0; i < _tokensAmount.length; i++) {\n', '      _processTokensAssgin(_beneficiaries[i], _tokensAmount[i]);\n', '    }\n', '  }\n', '\n', '  /*\n', '    If investmend was made in bitcoins etc. owner can assign apropriate amount of\n', '    tokens to the investor.\n', '  */\n', '  function assignTokens(address _beneficiary, uint256 _tokensAmount) onlyAssginer public {\n', '    _processTokensAssgin(_beneficiary, _tokensAmount);\n', '  }\n', '\n', '  function finalize() onlyOwner public {\n', '    require(teamTokenHolder != address(0));\n', '    require(!isFinalized);\n', '    require(_hasClosed());\n', '    require(finalizedTime == 0);\n', '\n', '    HardcapToken _token = HardcapToken(token);\n', '\n', '    // assign each counterparty their share\n', '    uint256 _tokenCap = _token.totalSupply().mul(100).div(CROWDSALE_PERCENTAGE);\n', '    require(_token.mint(teamTokenHolder, _tokenCap.mul(TEAM_PERCENTAGE).div(100)));\n', '    require(_token.mint(platform, _tokenCap.mul(PLATFORM_PERCENTAGE).div(100)));\n', '\n', '    // mint and burn all leftovers\n', '    uint256 _tokensToBurn = _token.cap().sub(_token.totalSupply());\n', '    require(_token.mint(address(this), _tokensToBurn));\n', '    _token.burn(_tokensToBurn);\n', '\n', '    require(_token.finishMinting());\n', '    _token.transferOwnership(wallet);\n', '\n', '    Finalized();\n', '\n', '    finalizedTime = _getTime();\n', '    isFinalized = true;\n', '  }\n', '\n', '  function _hasClosed() internal view returns (bool) {\n', '    return _getTime() > FINAL_CLOSING_TIME || token.totalSupply() >= ICO_TOKENS_CAP;\n', '  }\n', '\n', '  function _processTokensAssgin(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _preValidateAssign(_beneficiary, _tokenAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 _leftowers = 0;\n', '    uint256 _tokens = 0;\n', '    uint256 _currentSupply = token.totalSupply();\n', '    bool _phaseChanged = false;\n', '    Phase memory _phase = phases[phase];\n', '\n', '    while (_tokenAmount > 0 && _currentSupply < ICO_TOKENS_CAP) {\n', '      _leftowers = _phase.capTo.sub(_currentSupply);\n', '      // check if it is possible to assign more than there is available in this phase\n', '      if (_leftowers < _tokenAmount) {\n', '         _tokens = _tokens.add(_leftowers);\n', '         _tokenAmount = _tokenAmount.sub(_leftowers);\n', '         phase = phase + 1;\n', '         _phaseChanged = true;\n', '      } else {\n', '         _tokens = _tokens.add(_tokenAmount);\n', '         _tokenAmount = 0;\n', '      }\n', '\n', '      _currentSupply = token.totalSupply().add(_tokens);\n', '      _phase = phases[phase];\n', '    }\n', '\n', '    require(_tokens >= MIN_TOKENS_TO_PURCHASE || _currentSupply == ICO_TOKENS_CAP);\n', '\n', '    // if phase changes forward the date of the next phase change by 7 days\n', '    if (_phaseChanged) {\n', '      _changeClosingTime();\n', '    }\n', '\n', '    require(HardcapToken(token).mint(_beneficiary, _tokens));\n', '    TokenAssigned(msg.sender, _beneficiary, _tokens);\n', '  }\n', '\n', '  function _processTokensPurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    _preValidatePurchase(_beneficiary, _weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 _leftowers = 0;\n', '    uint256 _weiReq = 0;\n', '    uint256 _weiSpent = 0;\n', '    uint256 _tokens = 0;\n', '    uint256 _currentSupply = token.totalSupply();\n', '    bool _phaseChanged = false;\n', '    Phase memory _phase = phases[phase];\n', '\n', '    while (_weiAmount > 0 && _currentSupply < ICO_TOKENS_CAP) {\n', '      _leftowers = _phase.capTo.sub(_currentSupply);\n', '      _weiReq = _leftowers.div(_phase.rate);\n', '      // check if it is possible to purchase more than there is available in this phase\n', '      if (_weiReq < _weiAmount) {\n', '         _tokens = _tokens.add(_leftowers);\n', '         _weiAmount = _weiAmount.sub(_weiReq);\n', '         _weiSpent = _weiSpent.add(_weiReq);\n', '         phase = phase + 1;\n', '         _phaseChanged = true;\n', '      } else {\n', '         _tokens = _tokens.add(_weiAmount.mul(_phase.rate));\n', '         _weiSpent = _weiSpent.add(_weiAmount);\n', '         _weiAmount = 0;\n', '      }\n', '\n', '      _currentSupply = token.totalSupply().add(_tokens);\n', '      _phase = phases[phase];\n', '    }\n', '\n', '    require(_tokens >= MIN_TOKENS_TO_PURCHASE || _currentSupply == ICO_TOKENS_CAP);\n', '\n', '    // if phase changes forward the date of the next phase change by 7 days\n', '    if (_phaseChanged) {\n', '      _changeClosingTime();\n', '    }\n', '\n', '    // return leftovers to investor if tokens are over but he sent more ehters.\n', '    if (msg.value > _weiSpent) {\n', '      uint256 _overflowAmount = msg.value.sub(_weiSpent);\n', '      _beneficiary.transfer(_overflowAmount);\n', '    }\n', '\n', '    weiRaised = weiRaised.add(_weiSpent);\n', '\n', '    require(HardcapToken(token).mint(_beneficiary, _tokens));\n', '    TokenPurchase(msg.sender, _beneficiary, _weiSpent, _tokens);\n', '\n', '    // You can access this method either buying tokens or assigning tokens to\n', '    // someone. In the previous case you won&#39;t be sending any ehter to contract\n', '    // so no need to forward any funds to wallet.\n', '    if (msg.value > 0) {\n', '      wallet.transfer(_weiSpent);\n', '    }\n', '  }\n', '\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    // if the phase time ended calculate next phase end time and set new phase\n', '    if (closingTime < _getTime() && closingTime < FINAL_CLOSING_TIME && phase < 8) {\n', '      phase = phase.add(_calcPhasesPassed());\n', '      _changeClosingTime();\n', '\n', '    }\n', '    require(_getTime() > INITIAL_START_DATE);\n', '    require(_getTime() >= openingTime && _getTime() <= closingTime);\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '    require(phase <= 8);\n', '\n', '    require(token.totalSupply() < ICO_TOKENS_CAP);\n', '    require(!isFinalized);\n', '  }\n', '\n', '  function _preValidateAssign(address _beneficiary, uint256 _tokenAmount) internal {\n', '    // if the phase time ended calculate next phase end time and set new phase\n', '    if (closingTime < _getTime() && closingTime < FINAL_CLOSING_TIME && phase < 8) {\n', '      phase = phase.add(_calcPhasesPassed());\n', '      _changeClosingTime();\n', '\n', '    }\n', '    // should not allow to assign tokens to team members\n', '    require(_beneficiary != assigner);\n', '    require(_beneficiary != platform);\n', '    require(_beneficiary != wallet);\n', '    require(_beneficiary != teamTokenHolder);\n', '\n', '    require(_getTime() >= openingTime && _getTime() <= closingTime);\n', '    require(_beneficiary != address(0));\n', '    require(_tokenAmount > 0);\n', '    require(phase <= 8);\n', '\n', '    require(token.totalSupply() < ICO_TOKENS_CAP);\n', '    require(!isFinalized);\n', '  }\n', '\n', '  function _changeClosingTime() internal {\n', '    closingTime = _getTime() + 7 days;\n', '    if (closingTime > FINAL_CLOSING_TIME) {\n', '      closingTime = FINAL_CLOSING_TIME;\n', '    }\n', '  }\n', '\n', '  function _calcPhasesPassed() internal view returns(uint256) {\n', '    return  _getTime().sub(closingTime).div(7 days).add(1);\n', '  }\n', '\n', ' function _getTime() internal view returns (uint256) {\n', '   return now;\n', ' }\n', '\n', '}\n', '\n', 'contract TeamTokenHolder is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 private LOCKUP_TIME = 24; // in months\n', '\n', '  HardcapCrowdsale crowdsale;\n', '  HardcapToken token;\n', '  uint256 public collectedTokens;\n', '\n', '  function TeamTokenHolder(address _owner, address _crowdsale, address _token) public {\n', '    owner = _owner;\n', '    crowdsale = HardcapCrowdsale(_crowdsale);\n', '    token = HardcapToken(_token);\n', '  }\n', '\n', '  /*\n', '    @notice The Dev (Owner) will call this method to extract the tokens\n', '  */\n', '  function collectTokens() public onlyOwner {\n', '    uint256 balance = token.balanceOf(address(this));\n', '    uint256 total = collectedTokens.add(balance);\n', '\n', '    uint256 finalizedTime = crowdsale.finalizedTime();\n', '\n', '    require(finalizedTime > 0 && getTime() >= finalizedTime.add(months(3)));\n', '\n', '    uint256 canExtract = total.mul(getTime().sub(finalizedTime)).div(months(LOCKUP_TIME));\n', '\n', '    canExtract = canExtract.sub(collectedTokens);\n', '\n', '    if (canExtract > balance) {\n', '      canExtract = balance;\n', '    }\n', '\n', '    collectedTokens = collectedTokens.add(canExtract);\n', '    assert(token.transfer(owner, canExtract));\n', '\n', '    TokensWithdrawn(owner, canExtract);\n', '  }\n', '\n', '  function months(uint256 m) internal pure returns (uint256) {\n', '      return m.mul(30 days);\n', '  }\n', '\n', '  function getTime() internal view returns (uint256) {\n', '    return now;\n', '  }\n', '\n', '  /*\n', '     Safety Methods\n', '  */\n', '\n', '  /*\n', '     @notice This method can be used by the controller to extract mistakenly\n', '     sent tokens to this contract.\n', '     @param _token The address of the token contract that you want to recover\n', '     set to 0 in case you want to extract ether.\n', '  */\n', '  function claimTokens(address _token) public onlyOwner {\n', '    require(_token != address(token));\n', '    if (_token == 0x0) {\n', '      owner.transfer(this.balance);\n', '      return;\n', '    }\n', '\n', '    HardcapToken _hardcapToken = HardcapToken(_token);\n', '    uint256 balance = _hardcapToken.balanceOf(this);\n', '    _hardcapToken.transfer(owner, balance);\n', '    ClaimedTokens(_token, owner, balance);\n', '  }\n', '\n', '  event ClaimedTokens(address indexed _token, address indexed _controller, uint256 _amount);\n', '  event TokensWithdrawn(address indexed _holder, uint256 _amount);\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedToken(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '} \n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '    Transfer(burner, address(0), _value);\n', '  }\n', '}\n', '\n', '/*\n', '  HardcapToken is PausableToken and on the creation it is paused.\n', "  It is made so because you don't want token to be transferable etc,\n", '  while your ico is not over.\n', '*/\n', 'contract HardcapToken is CappedToken, PausableToken, BurnableToken {\n', '\n', '  uint256 private constant TOKEN_CAP = 100 * 10**24;\n', '\n', '  string public constant name = "Welltrado token";\n', '  string public constant symbol = "WTL";\n', '  uint8 public constant decimals = 18;\n', '\n', '  function HardcapToken() public CappedToken(TOKEN_CAP) {\n', '    paused = true;\n', '  }\n', '}\n', '\n', 'contract HardcapCrowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  struct Phase {\n', '    uint256 capTo;\n', '    uint256 rate;\n', '  }\n', '\n', '  uint256 private constant TEAM_PERCENTAGE = 10;\n', '  uint256 private constant PLATFORM_PERCENTAGE = 25;\n', '  uint256 private constant CROWDSALE_PERCENTAGE = 65;\n', '\n', '  uint256 private constant MIN_TOKENS_TO_PURCHASE = 100 * 10**18;\n', '\n', '  uint256 private constant ICO_TOKENS_CAP = 65 * 10**24;\n', '\n', '  uint256 private constant FINAL_CLOSING_TIME = 1529928000;\n', '\n', '  uint256 private constant INITIAL_START_DATE = 1524484800;\n', '\n', '  uint256 public phase = 0;\n', '\n', '  HardcapToken public token;\n', '\n', '  address public wallet;\n', '  address public platform;\n', '  address public assigner;\n', '  address public teamTokenHolder;\n', '\n', '  uint256 public weiRaised;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  uint256 public openingTime = 1524484800;\n', '  uint256 public closingTime = 1525089600;\n', '  uint256 public finalizedTime;\n', '\n', '  mapping (uint256 => Phase) private phases;\n', '\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  event TokenAssigned(address indexed purchaser, address indexed beneficiary, uint256 amount);\n', '\n', '\n', '  event Finalized();\n', '\n', '  modifier onlyAssginer() {\n', '    require(msg.sender == assigner);\n', '    _;\n', '  }\n', '\n', '  function HardcapCrowdsale(address _wallet, address _platform, address _assigner, HardcapToken _token) public {\n', '      require(_wallet != address(0));\n', '      require(_assigner != address(0));\n', '      require(_platform != address(0));\n', '      require(_token != address(0));\n', '\n', '      wallet = _wallet;\n', '      platform = _platform;\n', '      assigner = _assigner;\n', '      token = _token;\n', '\n', '      // phases capTo means that totalSupply must reach it to change the phase\n', '      phases[0] = Phase(15 * 10**23, 1250);\n', '      phases[1] = Phase(10 * 10**24, 1200);\n', '      phases[2] = Phase(17 * 10**24, 1150);\n', '      phases[3] = Phase(24 * 10**24, 1100);\n', '      phases[4] = Phase(31 * 10**24, 1070);\n', '      phases[5] = Phase(38 * 10**24, 1050);\n', '      phases[6] = Phase(47 * 10**24, 1030);\n', '      phases[7] = Phase(56 * 10**24, 1000);\n', '      phases[8] = Phase(65 * 10**24, 1000);\n', '  }\n', '\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /*\n', '    contract for teams tokens lockup\n', '  */\n', '  function setTeamTokenHolder(address _teamTokenHolder) onlyOwner public {\n', '    require(_teamTokenHolder != address(0));\n', '    // should allow set only once\n', '    require(teamTokenHolder == address(0));\n', '    teamTokenHolder = _teamTokenHolder;\n', '  }\n', '\n', '  function buyTokens(address _beneficiary) public payable {\n', '    _processTokensPurchase(_beneficiary, msg.value);\n', '  }\n', '\n', '  /*\n', '    It may be needed to assign tokens in batches if multiple clients invested\n', '    in any other crypto currency.\n', '    NOTE: this will fail if there are not enough tokens left for at least one investor.\n', '        for this to work all investors must get all their tokens.\n', '  */\n', '  function assignTokensToMultipleInvestors(address[] _beneficiaries, uint256[] _tokensAmount) onlyAssginer public {\n', '    require(_beneficiaries.length == _tokensAmount.length);\n', '    for (uint i = 0; i < _tokensAmount.length; i++) {\n', '      _processTokensAssgin(_beneficiaries[i], _tokensAmount[i]);\n', '    }\n', '  }\n', '\n', '  /*\n', '    If investmend was made in bitcoins etc. owner can assign apropriate amount of\n', '    tokens to the investor.\n', '  */\n', '  function assignTokens(address _beneficiary, uint256 _tokensAmount) onlyAssginer public {\n', '    _processTokensAssgin(_beneficiary, _tokensAmount);\n', '  }\n', '\n', '  function finalize() onlyOwner public {\n', '    require(teamTokenHolder != address(0));\n', '    require(!isFinalized);\n', '    require(_hasClosed());\n', '    require(finalizedTime == 0);\n', '\n', '    HardcapToken _token = HardcapToken(token);\n', '\n', '    // assign each counterparty their share\n', '    uint256 _tokenCap = _token.totalSupply().mul(100).div(CROWDSALE_PERCENTAGE);\n', '    require(_token.mint(teamTokenHolder, _tokenCap.mul(TEAM_PERCENTAGE).div(100)));\n', '    require(_token.mint(platform, _tokenCap.mul(PLATFORM_PERCENTAGE).div(100)));\n', '\n', '    // mint and burn all leftovers\n', '    uint256 _tokensToBurn = _token.cap().sub(_token.totalSupply());\n', '    require(_token.mint(address(this), _tokensToBurn));\n', '    _token.burn(_tokensToBurn);\n', '\n', '    require(_token.finishMinting());\n', '    _token.transferOwnership(wallet);\n', '\n', '    Finalized();\n', '\n', '    finalizedTime = _getTime();\n', '    isFinalized = true;\n', '  }\n', '\n', '  function _hasClosed() internal view returns (bool) {\n', '    return _getTime() > FINAL_CLOSING_TIME || token.totalSupply() >= ICO_TOKENS_CAP;\n', '  }\n', '\n', '  function _processTokensAssgin(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _preValidateAssign(_beneficiary, _tokenAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 _leftowers = 0;\n', '    uint256 _tokens = 0;\n', '    uint256 _currentSupply = token.totalSupply();\n', '    bool _phaseChanged = false;\n', '    Phase memory _phase = phases[phase];\n', '\n', '    while (_tokenAmount > 0 && _currentSupply < ICO_TOKENS_CAP) {\n', '      _leftowers = _phase.capTo.sub(_currentSupply);\n', '      // check if it is possible to assign more than there is available in this phase\n', '      if (_leftowers < _tokenAmount) {\n', '         _tokens = _tokens.add(_leftowers);\n', '         _tokenAmount = _tokenAmount.sub(_leftowers);\n', '         phase = phase + 1;\n', '         _phaseChanged = true;\n', '      } else {\n', '         _tokens = _tokens.add(_tokenAmount);\n', '         _tokenAmount = 0;\n', '      }\n', '\n', '      _currentSupply = token.totalSupply().add(_tokens);\n', '      _phase = phases[phase];\n', '    }\n', '\n', '    require(_tokens >= MIN_TOKENS_TO_PURCHASE || _currentSupply == ICO_TOKENS_CAP);\n', '\n', '    // if phase changes forward the date of the next phase change by 7 days\n', '    if (_phaseChanged) {\n', '      _changeClosingTime();\n', '    }\n', '\n', '    require(HardcapToken(token).mint(_beneficiary, _tokens));\n', '    TokenAssigned(msg.sender, _beneficiary, _tokens);\n', '  }\n', '\n', '  function _processTokensPurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    _preValidatePurchase(_beneficiary, _weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 _leftowers = 0;\n', '    uint256 _weiReq = 0;\n', '    uint256 _weiSpent = 0;\n', '    uint256 _tokens = 0;\n', '    uint256 _currentSupply = token.totalSupply();\n', '    bool _phaseChanged = false;\n', '    Phase memory _phase = phases[phase];\n', '\n', '    while (_weiAmount > 0 && _currentSupply < ICO_TOKENS_CAP) {\n', '      _leftowers = _phase.capTo.sub(_currentSupply);\n', '      _weiReq = _leftowers.div(_phase.rate);\n', '      // check if it is possible to purchase more than there is available in this phase\n', '      if (_weiReq < _weiAmount) {\n', '         _tokens = _tokens.add(_leftowers);\n', '         _weiAmount = _weiAmount.sub(_weiReq);\n', '         _weiSpent = _weiSpent.add(_weiReq);\n', '         phase = phase + 1;\n', '         _phaseChanged = true;\n', '      } else {\n', '         _tokens = _tokens.add(_weiAmount.mul(_phase.rate));\n', '         _weiSpent = _weiSpent.add(_weiAmount);\n', '         _weiAmount = 0;\n', '      }\n', '\n', '      _currentSupply = token.totalSupply().add(_tokens);\n', '      _phase = phases[phase];\n', '    }\n', '\n', '    require(_tokens >= MIN_TOKENS_TO_PURCHASE || _currentSupply == ICO_TOKENS_CAP);\n', '\n', '    // if phase changes forward the date of the next phase change by 7 days\n', '    if (_phaseChanged) {\n', '      _changeClosingTime();\n', '    }\n', '\n', '    // return leftovers to investor if tokens are over but he sent more ehters.\n', '    if (msg.value > _weiSpent) {\n', '      uint256 _overflowAmount = msg.value.sub(_weiSpent);\n', '      _beneficiary.transfer(_overflowAmount);\n', '    }\n', '\n', '    weiRaised = weiRaised.add(_weiSpent);\n', '\n', '    require(HardcapToken(token).mint(_beneficiary, _tokens));\n', '    TokenPurchase(msg.sender, _beneficiary, _weiSpent, _tokens);\n', '\n', '    // You can access this method either buying tokens or assigning tokens to\n', "    // someone. In the previous case you won't be sending any ehter to contract\n", '    // so no need to forward any funds to wallet.\n', '    if (msg.value > 0) {\n', '      wallet.transfer(_weiSpent);\n', '    }\n', '  }\n', '\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    // if the phase time ended calculate next phase end time and set new phase\n', '    if (closingTime < _getTime() && closingTime < FINAL_CLOSING_TIME && phase < 8) {\n', '      phase = phase.add(_calcPhasesPassed());\n', '      _changeClosingTime();\n', '\n', '    }\n', '    require(_getTime() > INITIAL_START_DATE);\n', '    require(_getTime() >= openingTime && _getTime() <= closingTime);\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '    require(phase <= 8);\n', '\n', '    require(token.totalSupply() < ICO_TOKENS_CAP);\n', '    require(!isFinalized);\n', '  }\n', '\n', '  function _preValidateAssign(address _beneficiary, uint256 _tokenAmount) internal {\n', '    // if the phase time ended calculate next phase end time and set new phase\n', '    if (closingTime < _getTime() && closingTime < FINAL_CLOSING_TIME && phase < 8) {\n', '      phase = phase.add(_calcPhasesPassed());\n', '      _changeClosingTime();\n', '\n', '    }\n', '    // should not allow to assign tokens to team members\n', '    require(_beneficiary != assigner);\n', '    require(_beneficiary != platform);\n', '    require(_beneficiary != wallet);\n', '    require(_beneficiary != teamTokenHolder);\n', '\n', '    require(_getTime() >= openingTime && _getTime() <= closingTime);\n', '    require(_beneficiary != address(0));\n', '    require(_tokenAmount > 0);\n', '    require(phase <= 8);\n', '\n', '    require(token.totalSupply() < ICO_TOKENS_CAP);\n', '    require(!isFinalized);\n', '  }\n', '\n', '  function _changeClosingTime() internal {\n', '    closingTime = _getTime() + 7 days;\n', '    if (closingTime > FINAL_CLOSING_TIME) {\n', '      closingTime = FINAL_CLOSING_TIME;\n', '    }\n', '  }\n', '\n', '  function _calcPhasesPassed() internal view returns(uint256) {\n', '    return  _getTime().sub(closingTime).div(7 days).add(1);\n', '  }\n', '\n', ' function _getTime() internal view returns (uint256) {\n', '   return now;\n', ' }\n', '\n', '}\n', '\n', 'contract TeamTokenHolder is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 private LOCKUP_TIME = 24; // in months\n', '\n', '  HardcapCrowdsale crowdsale;\n', '  HardcapToken token;\n', '  uint256 public collectedTokens;\n', '\n', '  function TeamTokenHolder(address _owner, address _crowdsale, address _token) public {\n', '    owner = _owner;\n', '    crowdsale = HardcapCrowdsale(_crowdsale);\n', '    token = HardcapToken(_token);\n', '  }\n', '\n', '  /*\n', '    @notice The Dev (Owner) will call this method to extract the tokens\n', '  */\n', '  function collectTokens() public onlyOwner {\n', '    uint256 balance = token.balanceOf(address(this));\n', '    uint256 total = collectedTokens.add(balance);\n', '\n', '    uint256 finalizedTime = crowdsale.finalizedTime();\n', '\n', '    require(finalizedTime > 0 && getTime() >= finalizedTime.add(months(3)));\n', '\n', '    uint256 canExtract = total.mul(getTime().sub(finalizedTime)).div(months(LOCKUP_TIME));\n', '\n', '    canExtract = canExtract.sub(collectedTokens);\n', '\n', '    if (canExtract > balance) {\n', '      canExtract = balance;\n', '    }\n', '\n', '    collectedTokens = collectedTokens.add(canExtract);\n', '    assert(token.transfer(owner, canExtract));\n', '\n', '    TokensWithdrawn(owner, canExtract);\n', '  }\n', '\n', '  function months(uint256 m) internal pure returns (uint256) {\n', '      return m.mul(30 days);\n', '  }\n', '\n', '  function getTime() internal view returns (uint256) {\n', '    return now;\n', '  }\n', '\n', '  /*\n', '     Safety Methods\n', '  */\n', '\n', '  /*\n', '     @notice This method can be used by the controller to extract mistakenly\n', '     sent tokens to this contract.\n', '     @param _token The address of the token contract that you want to recover\n', '     set to 0 in case you want to extract ether.\n', '  */\n', '  function claimTokens(address _token) public onlyOwner {\n', '    require(_token != address(token));\n', '    if (_token == 0x0) {\n', '      owner.transfer(this.balance);\n', '      return;\n', '    }\n', '\n', '    HardcapToken _hardcapToken = HardcapToken(_token);\n', '    uint256 balance = _hardcapToken.balanceOf(this);\n', '    _hardcapToken.transfer(owner, balance);\n', '    ClaimedTokens(_token, owner, balance);\n', '  }\n', '\n', '  event ClaimedTokens(address indexed _token, address indexed _controller, uint256 _amount);\n', '  event TokensWithdrawn(address indexed _holder, uint256 _amount);\n', '}']
