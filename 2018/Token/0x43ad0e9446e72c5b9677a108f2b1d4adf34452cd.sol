['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract PrayerCoinToken is Token {\n', '\n', '    uint256 constant MAX_UINT256 = 2**256 - 1;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        //require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) view public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function getBalance(address _owner) view public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract Standard {\n', '    function balanceOf(address _owner) public constant returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', 'contract PrayerCoin is PrayerCoinToken {\n', '  using SafeMath for uint256;\n', '  address public god;\n', '\n', '  string public name = "PrayerCoin";\n', '  uint8 public decimals = 18;\n', '  string public symbol = "PRAY";\n', "  string public version = 'H1.0';  \n", '\n', '  uint256 public totalSupply = 666666666 ether;\n', ' \n', '  uint private PRAY_ETH_RATIO = 6666;\n', '  uint private PRAY_ETH_RATIO_BONUS1 = 7106;\n', '  uint private PRAY_ETH_RATIO_BONUS2 = 11066;\n', '\n', '  uint256 public totalDonations = 0;\n', '  uint256 public totalPrayers = 0;\n', '\n', '  bool private acceptingDonations = true;\n', '  \n', '  modifier divine {\n', '    require(msg.sender == god);\n', '    _;\n', '  }\n', '\n', '  function PrayerCoin() public { // initialize contract\n', '    god = msg.sender;\n', '    balances[god] = totalSupply; // god holds all of the PRAY\n', '  } \n', '\n', '  function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '\n', "    //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '    //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '    //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '    require(false == _spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));\n', '    return true;\n', '  } \n', '\n', '  function startDonations() public divine {\n', '    acceptingDonations = true;\n', '  }\n', '\n', '  function endDonations() public divine {\n', '    acceptingDonations = false;\n', '  }\n', '\n', '  function fiatSend(address _to, uint256 amt, uint256 prayRatio) public divine {\n', '    totalDonations += amt;\n', '    uint256 prayersIssued = amt.mul(prayRatio);\n', '    totalPrayers += prayersIssued;\n', '    balances[_to] += prayersIssued;\n', '    balances[god] -= prayersIssued;\n', '\n', '    Transfer(address(this), _to, prayersIssued);\n', '  }\n', '  \n', '  function() public payable {\n', '    require(acceptingDonations == true);\n', '    if (msg.value == 0) { return; }\n', '\n', '    god.transfer(msg.value);\n', '\n', '    totalDonations += msg.value;\n', '    \n', '    uint256 prayersIssued = 0;\n', '\n', '    if (totalPrayers <= (6666666 * 1 ether)) {\n', '        if (totalPrayers <= (666666 * 1 ether)) {\n', '            prayersIssued = msg.value.mul(PRAY_ETH_RATIO_BONUS2);\n', '        } else {\n', '            prayersIssued = msg.value.mul(PRAY_ETH_RATIO_BONUS1);\n', '        }\n', '    } else {\n', '        prayersIssued = msg.value.mul(PRAY_ETH_RATIO);\n', '    }\n', '\n', '    totalPrayers += prayersIssued;\n', '    balances[msg.sender] += prayersIssued;\n', '    balances[god] -= prayersIssued;\n', '\n', '    Transfer(address(this), msg.sender, prayersIssued);\n', '  }\n', ' \n', '}']