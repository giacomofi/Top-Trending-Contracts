['pragma solidity ^0.4.19;\n', '\n', 'contract AppCoins {\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    function balanceOf (address _owner) public constant returns (uint256);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (uint);\n', '}\n', '\n', 'contract AppCoinsIABInterface {\n', '    function division(uint numerator, uint denominator) public constant returns (uint);\n', '    function buy(uint _amount, string _sku, address _addr_appc, address _dev, address _appstore, address _oem) public constant returns (bool);\n', '}\n', '\n', 'contract AppCoinsIAB is AppCoinsIABInterface {\n', '    uint public dev_share = 85;\n', '    uint public appstore_share = 10;\n', '    uint public oem_share = 5;\n', '\n', '    event Buy(uint _amount, string _sku, address _from, address _dev, address _appstore, address _oem);\n', '\n', '    function division(uint numerator, uint denominator) public constant returns (uint) {\n', '        uint _quotient = numerator / denominator;\n', '        return _quotient;\n', '    }\n', '\n', '    function buy(uint256 _amount, string _sku, address _addr_appc, address _dev, address _appstore, address _oem) public constant returns (bool) {\n', '        require(_addr_appc != 0x0);\n', '        require(_dev != 0x0);\n', '        require(_appstore != 0x0);\n', '        require(_oem != 0x0);\n', '\n', '        AppCoins appc = AppCoins(_addr_appc);\n', '        uint256 aux = appc.allowance(msg.sender, address(this));\n', '        require(aux >= _amount);\n', '\n', '        uint[] memory amounts = new uint[](3);\n', '        amounts[0] = division(_amount * dev_share, 100);\n', '        amounts[1] = division(_amount * appstore_share, 100);\n', '        amounts[2] = division(_amount * oem_share, 100);\n', '\n', '        appc.transferFrom(msg.sender, _dev, amounts[0]);\n', '        appc.transferFrom(msg.sender, _appstore, amounts[1]);\n', '        appc.transferFrom(msg.sender, _oem, amounts[2]);\n', '\n', '        Buy(_amount, _sku, msg.sender, _dev, _appstore, _oem);\n', '\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'contract AppCoins {\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    function balanceOf (address _owner) public constant returns (uint256);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (uint);\n', '}\n', '\n', 'contract AppCoinsIABInterface {\n', '    function division(uint numerator, uint denominator) public constant returns (uint);\n', '    function buy(uint _amount, string _sku, address _addr_appc, address _dev, address _appstore, address _oem) public constant returns (bool);\n', '}\n', '\n', 'contract AppCoinsIAB is AppCoinsIABInterface {\n', '    uint public dev_share = 85;\n', '    uint public appstore_share = 10;\n', '    uint public oem_share = 5;\n', '\n', '    event Buy(uint _amount, string _sku, address _from, address _dev, address _appstore, address _oem);\n', '\n', '    function division(uint numerator, uint denominator) public constant returns (uint) {\n', '        uint _quotient = numerator / denominator;\n', '        return _quotient;\n', '    }\n', '\n', '    function buy(uint256 _amount, string _sku, address _addr_appc, address _dev, address _appstore, address _oem) public constant returns (bool) {\n', '        require(_addr_appc != 0x0);\n', '        require(_dev != 0x0);\n', '        require(_appstore != 0x0);\n', '        require(_oem != 0x0);\n', '\n', '        AppCoins appc = AppCoins(_addr_appc);\n', '        uint256 aux = appc.allowance(msg.sender, address(this));\n', '        require(aux >= _amount);\n', '\n', '        uint[] memory amounts = new uint[](3);\n', '        amounts[0] = division(_amount * dev_share, 100);\n', '        amounts[1] = division(_amount * appstore_share, 100);\n', '        amounts[2] = division(_amount * oem_share, 100);\n', '\n', '        appc.transferFrom(msg.sender, _dev, amounts[0]);\n', '        appc.transferFrom(msg.sender, _appstore, amounts[1]);\n', '        appc.transferFrom(msg.sender, _oem, amounts[2]);\n', '\n', '        Buy(_amount, _sku, msg.sender, _dev, _appstore, _oem);\n', '\n', '        return true;\n', '    }\n', '}']
