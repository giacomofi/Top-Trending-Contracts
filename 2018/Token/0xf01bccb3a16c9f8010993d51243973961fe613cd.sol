['pragma solidity 0.4.24;\n', '\n', '\n', 'contract ERC20Interface {\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _owner) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  function allowance( address _owner, address _spender) public view returns (uint256);\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ChickenTokenDelegate\n', ' * @author M.H. Kang\n', ' */\n', 'interface ChickenTokenDelegate {\n', '\n', '  function saveChickenOf(address _owner) external returns (uint256);\n', '  function transferChickenFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '  function totalChicken() external view returns (uint256);\n', '  function chickenOf(address _owner) external view returns (uint256);\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ChickenTokenDelegator\n', ' * @author M.H. Kang\n', ' */\n', 'contract ChickenTokenDelegator is ERC20Interface {\n', '\n', '  ChickenTokenDelegate public chickenHunt;\n', '  string public name = "Chicken";\n', '  string public symbol = "CHICKEN";\n', '  uint8 public decimals = 0;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  address public manager;\n', '\n', '  constructor() public {\n', '    manager = msg.sender;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool success) {\n', '    if (success = chickenHunt.transferChickenFrom(msg.sender, _to, _value)) {\n', '      emit Transfer(msg.sender, _to, _value);\n', '    }\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    if (success = chickenHunt.transferChickenFrom(_from, _to, _value)) {\n', '      allowed[_from][msg.sender] -= _value;\n', '      emit Transfer(_from, _to, _value);\n', '    }\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function saveChickenOf(address _owner) public returns (uint256) {\n', '    return chickenHunt.saveChickenOf(_owner);\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return chickenHunt.totalChicken();\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return chickenHunt.chickenOf(_owner);\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function setChickenHunt(address _chickenHunt) public onlyManager {\n', '    // Once set, it can not be changed.\n', '    require(chickenHunt == address(0));\n', '    chickenHunt = ChickenTokenDelegate(_chickenHunt);\n', '  }\n', '\n', '  function setNameAndSymbol(string _name, string _symbol)\n', '    public\n', '    onlyManager\n', '  {\n', '    name = _name;\n', '    symbol = _symbol;\n', '  }\n', '\n', '  /* MODIFIER */\n', '\n', '  modifier onlyManager {\n', '    require(msg.sender == manager);\n', '    _;\n', '  }\n', '\n', '}']
['pragma solidity 0.4.24;\n', '\n', '\n', 'contract ERC20Interface {\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _owner) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  function allowance( address _owner, address _spender) public view returns (uint256);\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ChickenTokenDelegate\n', ' * @author M.H. Kang\n', ' */\n', 'interface ChickenTokenDelegate {\n', '\n', '  function saveChickenOf(address _owner) external returns (uint256);\n', '  function transferChickenFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '  function totalChicken() external view returns (uint256);\n', '  function chickenOf(address _owner) external view returns (uint256);\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ChickenTokenDelegator\n', ' * @author M.H. Kang\n', ' */\n', 'contract ChickenTokenDelegator is ERC20Interface {\n', '\n', '  ChickenTokenDelegate public chickenHunt;\n', '  string public name = "Chicken";\n', '  string public symbol = "CHICKEN";\n', '  uint8 public decimals = 0;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  address public manager;\n', '\n', '  constructor() public {\n', '    manager = msg.sender;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool success) {\n', '    if (success = chickenHunt.transferChickenFrom(msg.sender, _to, _value)) {\n', '      emit Transfer(msg.sender, _to, _value);\n', '    }\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    if (success = chickenHunt.transferChickenFrom(_from, _to, _value)) {\n', '      allowed[_from][msg.sender] -= _value;\n', '      emit Transfer(_from, _to, _value);\n', '    }\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function saveChickenOf(address _owner) public returns (uint256) {\n', '    return chickenHunt.saveChickenOf(_owner);\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return chickenHunt.totalChicken();\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return chickenHunt.chickenOf(_owner);\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function setChickenHunt(address _chickenHunt) public onlyManager {\n', '    // Once set, it can not be changed.\n', '    require(chickenHunt == address(0));\n', '    chickenHunt = ChickenTokenDelegate(_chickenHunt);\n', '  }\n', '\n', '  function setNameAndSymbol(string _name, string _symbol)\n', '    public\n', '    onlyManager\n', '  {\n', '    name = _name;\n', '    symbol = _symbol;\n', '  }\n', '\n', '  /* MODIFIER */\n', '\n', '  modifier onlyManager {\n', '    require(msg.sender == manager);\n', '    _;\n', '  }\n', '\n', '}']
