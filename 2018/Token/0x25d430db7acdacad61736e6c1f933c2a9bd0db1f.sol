['pragma solidity 0.4.17;\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address internal owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '/**\n', ' * @title HazzaTokenInterface\n', '*/\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  bool public mintingFinished = false;\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    //totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(msg.sender, _to, _amount);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '  function burnTokens(uint256 _unsoldTokens) onlyOwner public returns (bool) {\n', '    totalSupply = SafeMath.sub(totalSupply, _unsoldTokens);\n', '  }\n', '}\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  bool public paused = false;\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '/**\n', ' * @title HazzaToken TokenFunctions\n', ' */\n', 'contract TokenFunctions is Ownable, Pausable {\n', '  using SafeMath for uint256;\n', '  /**\n', '   *  @MintableToken token - Token Object\n', '  */\n', '  MintableToken internal token;\n', '  struct PrivatePurchaserStruct {\n', '    uint privatePurchaserTimeLock;\n', '    uint256 privatePurchaserTokens;\n', '    uint256 privatePurchaserBonus;\n', '  }\n', '  struct AdvisorStruct {\n', '    uint advisorTimeLock;\n', '    uint256 advisorTokens;\n', '  }\n', '  struct BackerStruct {\n', '    uint backerTimeLock;\n', '    uint256 backerTokens;\n', '  }\n', '  struct FounderStruct {\n', '    uint founderTimeLock;\n', '    uint256 founderTokens;\n', '  }\n', '  struct FoundationStruct {\n', '    uint foundationTimeLock;\n', '    uint256 foundationBonus;\n', '    uint256 foundationTokens;\n', '  }\n', '  mapping (address => AdvisorStruct) advisor;\n', '  mapping (address => BackerStruct) backer;\n', '  mapping (address => FounderStruct) founder;\n', '  mapping (address => FoundationStruct) foundation;\n', '  mapping (address => PrivatePurchaserStruct) privatePurchaser;\n', '  /**\n', '   *  @uint256 totalSupply - Total supply of tokens \n', '   *  @uint256 publicSupply - Total public Supply \n', '   *  @uint256 bountySupply - Total Bounty Supply \n', '   *  @uint256 privateSupply - Total Private Supply \n', '   *  @uint256 advisorSupply - Total Advisor Supply \n', '   *  @uint256 backerSupply - Total Backer Supply\n', '   *  @uint256 founderSupply - Total Founder Supply \n', '   *  @uint256 foundationSupply - Total Foundation Supply \n', '  */\n', '      \n', '  uint256 public totalTokens = 105926908800000000000000000; \n', '  uint256 internal publicSupply = 775353800000000000000000; \n', '  uint256 internal bountySupply = 657896000000000000000000;\n', '  uint256 internal privateSupply = 52589473690000000000000000;  \n', '  uint256 internal advisorSupply = 2834024170000000000000000;\n', '  uint256 internal backerSupply = 317780730000000000000000;\n', '  uint256 internal founderSupply = 10592690880000000000000000;\n', '  uint256 internal foundationSupply = 38159689530000000000000000; \n', '  event AdvisorTokenTransfer (address indexed beneficiary, uint256 amount);\n', '  event BackerTokenTransfer (address indexed beneficiary, uint256 amount);\n', '  event FoundationTokenTransfer (address indexed beneficiary, uint256 amount);\n', '  event FounderTokenTransfer (address indexed beneficiary, uint256 amount);\n', '  event PrivatePurchaserTokenTransfer (address indexed beneficiary, uint256 amount);\n', '  event AddAdvisor (address indexed advisorAddress, uint timeLock, uint256 advisorToken);\n', '  event AddBacker (address indexed backerAddress, uint timeLock, uint256 backerToken);\n', '  event AddFoundation (address indexed foundationAddress, uint timeLock, uint256 foundationToken, uint256 foundationBonus);\n', '  event AddFounder (address indexed founderAddress, uint timeLock, uint256 founderToken);\n', '  event BountyTokenTransfer (address indexed beneficiary, uint256 amount);\n', '  event PublicTokenTransfer (address indexed beneficiary, uint256 amount);\n', '  event AddPrivatePurchaser (address indexed privatePurchaserAddress, uint timeLock, uint256 privatePurchaserTokens, uint256 privatePurchaserBonus);\n', '  function addAdvisors (address advisorAddress, uint timeLock, uint256 advisorToken) onlyOwner public returns(bool acknowledgement) {\n', '      \n', '      require(now < timeLock || timeLock == 0);\n', '      require(advisorToken > 0);\n', '      require(advisorAddress != 0x0);\n', '      require(advisorSupply >= advisorToken);\n', '      advisorSupply = SafeMath.sub(advisorSupply,advisorToken);\n', '      \n', '      advisor[advisorAddress].advisorTimeLock = timeLock;\n', '      advisor[advisorAddress].advisorTokens = advisorToken;\n', '      \n', '      AddAdvisor(advisorAddress, timeLock, advisorToken);\n', '      return true;\n', '        \n', '  }\n', '  function getAdvisorStatus (address addr) public view returns(address, uint, uint256) {\n', '        return (addr, advisor[addr].advisorTimeLock, advisor[addr].advisorTokens);\n', '  } \n', '  function addBackers (address backerAddress, uint timeLock, uint256 backerToken) onlyOwner public returns(bool acknowledgement) {\n', '      \n', '      require(now < timeLock || timeLock == 0);\n', '      require(backerToken > 0);\n', '      require(backerAddress != 0x0);\n', '      require(backerSupply >= backerToken);\n', '      backerSupply = SafeMath.sub(backerSupply,backerToken);\n', '           \n', '      backer[backerAddress].backerTimeLock = timeLock;\n', '      backer[backerAddress].backerTokens = backerToken;\n', '      \n', '      AddBacker(backerAddress, timeLock, backerToken);\n', '      return true;\n', '        \n', '  }\n', '  function getBackerStatus(address addr) public view returns(address, uint, uint256) {\n', '        return (addr, backer[addr].backerTimeLock, backer[addr].backerTokens);\n', '  } \n', '  function addFounder(address founderAddress, uint timeLock, uint256 founderToken) onlyOwner public returns(bool acknowledgement) {\n', '      \n', '      require(now < timeLock || timeLock == 0);\n', '      require(founderToken > 0);\n', '      require(founderAddress != 0x0);\n', '      require(founderSupply >= founderToken);\n', '      founderSupply = SafeMath.sub(founderSupply,founderToken);  \n', '      founder[founderAddress].founderTimeLock = timeLock;\n', '      founder[founderAddress].founderTokens = founderToken;\n', '      \n', '      AddFounder(founderAddress, timeLock, founderToken);\n', '      return true;\n', '        \n', '  }\n', '  function getFounderStatus(address addr) public view returns(address, uint, uint256) {\n', '        return (addr, founder[addr].founderTimeLock, founder[addr].founderTokens);\n', '  }\n', '  function addFoundation(address foundationAddress, uint timeLock, uint256 foundationToken, uint256 foundationBonus) onlyOwner public returns(bool acknowledgement) {\n', '      \n', '      require(now < timeLock || timeLock == 0);\n', '      require(foundationToken > 0);\n', '      require(foundationBonus > 0);\n', '      require(foundationAddress != 0x0);\n', '      uint256 totalTokens = SafeMath.add(foundationToken, foundationBonus);\n', '      require(foundationSupply >= totalTokens);\n', '      foundationSupply = SafeMath.sub(foundationSupply, totalTokens);  \n', '      foundation[foundationAddress].foundationBonus = foundationBonus;\n', '      foundation[foundationAddress].foundationTimeLock = timeLock;\n', '      foundation[foundationAddress].foundationTokens = foundationToken;\n', '      \n', '      AddFoundation(foundationAddress, timeLock, foundationToken, foundationBonus);\n', '      return true;\n', '        \n', '  }\n', '  function getFoundationStatus(address addr) public view returns(address, uint, uint256, uint256) {\n', '        return (addr, foundation[addr].foundationTimeLock, foundation[addr].foundationBonus, foundation[addr].foundationTokens);\n', '  }\n', '  function addPrivatePurchaser(address privatePurchaserAddress, uint timeLock, uint256 privatePurchaserToken, uint256 privatePurchaserBonus) onlyOwner public returns(bool acknowledgement) {\n', '      \n', '      require(now < timeLock || timeLock == 0);\n', '      require(privatePurchaserToken > 0);\n', '      require(privatePurchaserBonus > 0);\n', '      require(privatePurchaserAddress != 0x0);\n', '      uint256 totalTokens = SafeMath.add(privatePurchaserToken, privatePurchaserBonus);\n', '      require(privateSupply >= totalTokens);\n', '      privateSupply = SafeMath.sub(privateSupply, totalTokens);        \n', '      privatePurchaser[privatePurchaserAddress].privatePurchaserTimeLock = timeLock;\n', '      privatePurchaser[privatePurchaserAddress].privatePurchaserTokens = privatePurchaserToken;\n', '      privatePurchaser[privatePurchaserAddress].privatePurchaserBonus = privatePurchaserBonus;\n', '      \n', '      AddPrivatePurchaser(privatePurchaserAddress, timeLock, privatePurchaserToken, privatePurchaserBonus);\n', '      return true;\n', '        \n', '  }\n', '  function getPrivatePurchaserStatus(address addr) public view returns(address, uint256, uint, uint) {\n', '        return (addr, privatePurchaser[addr].privatePurchaserTimeLock, privatePurchaser[addr].privatePurchaserTokens, privatePurchaser[addr].privatePurchaserBonus);\n', '  }\n', '  function TokenFunctions() internal {\n', '    token = createTokenContract();\n', '  }\n', '  /**\n', '   * function createTokenContract - Mintable Token Created\n', '   */\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '  \n', '  /** \n', '   * function getTokenAddress - Get Token Address \n', '   */\n', '  function getTokenAddress() onlyOwner public returns (address) {\n', '    return token;\n', '  }\n', '}\n', '/**\n', ' * @title HazzaToken \n', ' */\n', ' \n', 'contract HazzaToken is MintableToken {\n', '    /**\n', '    *  @string name - Token Name\n', '    *  @string symbol - Token Symbol\n', '    *  @uint8 decimals - Token Decimals\n', '    *  @uint256 _totalSupply - Token Total Supply\n', '    */\n', '    string public constant name = "HAZZA";\n', '    string public constant symbol = "HAZ";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant _totalSupply = 105926908800000000000000000;\n', '  \n', '    /** Constructor HazzaToken */\n', '    function HazzaToken() {\n', '        totalSupply = _totalSupply;\n', '    }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract TokenDistribution is TokenFunctions {\n', '  /** \n', '  * function grantAdvisorToken - Transfer advisor tokens \n', '  */\n', '    function grantAdvisorToken() public returns(bool response) {\n', '        require(advisor[msg.sender].advisorTokens > 0);\n', '        require(now > advisor[msg.sender].advisorTimeLock);\n', '        uint256 transferToken = advisor[msg.sender].advisorTokens;\n', '        advisor[msg.sender].advisorTokens = 0;\n', '        token.mint(msg.sender, transferToken);\n', '        AdvisorTokenTransfer(msg.sender, transferToken);\n', '        \n', '        return true;\n', '      \n', '    }\n', '  /** \n', '  * function grantBackerToken - Transfer backer tokens\n', '  */\n', '    function grantBackerToken() public returns(bool response) {\n', '        require(backer[msg.sender].backerTokens > 0);\n', '        require(now > backer[msg.sender].backerTimeLock);\n', '        uint256 transferToken = backer[msg.sender].backerTokens;\n', '        backer[msg.sender].backerTokens = 0;\n', '        token.mint(msg.sender, transferToken);\n', '        BackerTokenTransfer(msg.sender, transferToken);\n', '        \n', '        return true;\n', '      \n', '    }\n', '  /** \n', '  * function grantFoundationToken - Transfer foundation tokens  \n', '  */\n', '    function grantFoundationToken() public returns(bool response) {\n', '  \n', '        if (now > foundation[msg.sender].foundationTimeLock) {\n', '                require(foundation[msg.sender].foundationTokens > 0);\n', '                uint256 transferToken = foundation[msg.sender].foundationTokens;\n', '                foundation[msg.sender].foundationTokens = 0;\n', '                token.mint(msg.sender, transferToken);\n', '                FoundationTokenTransfer(msg.sender, transferToken);\n', '        }\n', '        \n', '        if (foundation[msg.sender].foundationBonus > 0) {\n', '                uint256 transferTokenBonus = foundation[msg.sender].foundationBonus;\n', '                foundation[msg.sender].foundationBonus = 0;\n', '                token.mint(msg.sender, transferTokenBonus);\n', '                FoundationTokenTransfer(msg.sender, transferTokenBonus);\n', '        }\n', '        return true;\n', '      \n', '    }\n', '  /** \n', '  * function grantFounderToken - Transfer founder tokens  \n', '  */\n', '    function grantFounderToken() public returns(bool response) {\n', '        require(founder[msg.sender].founderTokens > 0);\n', '        require(now > founder[msg.sender].founderTimeLock);\n', '        uint256 transferToken = founder[msg.sender].founderTokens;\n', '        founder[msg.sender].founderTokens = 0;\n', '        token.mint(msg.sender, transferToken);\n', '        FounderTokenTransfer(msg.sender, transferToken);\n', '        \n', '        return true;\n', '      \n', '    }\n', '  /** \n', '  * function grantPrivatePurchaserToken - Transfer Private Purchasers tokens\n', '  */\n', '    function grantPrivatePurchaserToken() public returns(bool response) {\n', '        if (now > privatePurchaser[msg.sender].privatePurchaserTimeLock) {\n', '                require(privatePurchaser[msg.sender].privatePurchaserTokens > 0);\n', '                uint256 transferToken = privatePurchaser[msg.sender].privatePurchaserTokens;\n', '                privatePurchaser[msg.sender].privatePurchaserTokens = 0;\n', '                token.mint(msg.sender, transferToken);\n', '                PrivatePurchaserTokenTransfer(msg.sender, transferToken);\n', '        }\n', '        \n', '        if (privatePurchaser[msg.sender].privatePurchaserBonus > 0) {\n', '                uint256 transferBonusToken = privatePurchaser[msg.sender].privatePurchaserBonus;\n', '                privatePurchaser[msg.sender].privatePurchaserBonus = 0;\n', '                token.mint(msg.sender, transferBonusToken);\n', '                PrivatePurchaserTokenTransfer(msg.sender, transferBonusToken);\n', '        }\n', '        return true;\n', '      \n', '    }\n', '    /** \n', '    * function bountyFunds - Transfer bounty tokens via AirDrop\n', '    * @param beneficiary address where owner wants to transfer tokens\n', '    * @param tokens value of token\n', '    */\n', '    function bountyTransferToken(address[] beneficiary, uint256[] tokens) onlyOwner public {\n', '        for (uint i = 0; i < beneficiary.length; i++) {\n', '        require(bountySupply >= tokens[i]);\n', '        bountySupply = SafeMath.sub(bountySupply, tokens[i]);\n', '        token.mint(beneficiary[i], tokens[i]);\n', '        BountyTokenTransfer(beneficiary[i], tokens[i]);\n', '        \n', '        }\n', '    }\n', '        /** \n', '    * function publicTransferToken - Transfer public tokens via AirDrop\n', '    * @param beneficiary address where owner wants to transfer tokens\n', '    * @param tokens value of token\n', '    */\n', '    function publicTransferToken(address[] beneficiary, uint256[] tokens) onlyOwner public {\n', '        for (uint i = 0; i < beneficiary.length; i++) {\n', '        \n', '        require(publicSupply >= tokens[i]);\n', '        publicSupply = SafeMath.sub(publicSupply,tokens[i]);\n', '        token.mint(beneficiary[i], tokens[i]);\n', '        PublicTokenTransfer(beneficiary[i], tokens[i]);\n', '        }\n', '    }\n', '}\n', 'contract HazzaTokenInterface is TokenFunctions, TokenDistribution {\n', '  \n', '    /** Constructor HazzaTokenInterface */\n', '    function HazzaTokenInterface() public TokenFunctions() {\n', '    }\n', '    \n', '    /** HazzaToken Contract */\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return new HazzaToken();\n', '    }\n', '}']
['pragma solidity 0.4.17;\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address internal owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '/**\n', ' * @title HazzaTokenInterface\n', '*/\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  bool public mintingFinished = false;\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    //totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(msg.sender, _to, _amount);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '  function burnTokens(uint256 _unsoldTokens) onlyOwner public returns (bool) {\n', '    totalSupply = SafeMath.sub(totalSupply, _unsoldTokens);\n', '  }\n', '}\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  bool public paused = false;\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '/**\n', ' * @title HazzaToken TokenFunctions\n', ' */\n', 'contract TokenFunctions is Ownable, Pausable {\n', '  using SafeMath for uint256;\n', '  /**\n', '   *  @MintableToken token - Token Object\n', '  */\n', '  MintableToken internal token;\n', '  struct PrivatePurchaserStruct {\n', '    uint privatePurchaserTimeLock;\n', '    uint256 privatePurchaserTokens;\n', '    uint256 privatePurchaserBonus;\n', '  }\n', '  struct AdvisorStruct {\n', '    uint advisorTimeLock;\n', '    uint256 advisorTokens;\n', '  }\n', '  struct BackerStruct {\n', '    uint backerTimeLock;\n', '    uint256 backerTokens;\n', '  }\n', '  struct FounderStruct {\n', '    uint founderTimeLock;\n', '    uint256 founderTokens;\n', '  }\n', '  struct FoundationStruct {\n', '    uint foundationTimeLock;\n', '    uint256 foundationBonus;\n', '    uint256 foundationTokens;\n', '  }\n', '  mapping (address => AdvisorStruct) advisor;\n', '  mapping (address => BackerStruct) backer;\n', '  mapping (address => FounderStruct) founder;\n', '  mapping (address => FoundationStruct) foundation;\n', '  mapping (address => PrivatePurchaserStruct) privatePurchaser;\n', '  /**\n', '   *  @uint256 totalSupply - Total supply of tokens \n', '   *  @uint256 publicSupply - Total public Supply \n', '   *  @uint256 bountySupply - Total Bounty Supply \n', '   *  @uint256 privateSupply - Total Private Supply \n', '   *  @uint256 advisorSupply - Total Advisor Supply \n', '   *  @uint256 backerSupply - Total Backer Supply\n', '   *  @uint256 founderSupply - Total Founder Supply \n', '   *  @uint256 foundationSupply - Total Foundation Supply \n', '  */\n', '      \n', '  uint256 public totalTokens = 105926908800000000000000000; \n', '  uint256 internal publicSupply = 775353800000000000000000; \n', '  uint256 internal bountySupply = 657896000000000000000000;\n', '  uint256 internal privateSupply = 52589473690000000000000000;  \n', '  uint256 internal advisorSupply = 2834024170000000000000000;\n', '  uint256 internal backerSupply = 317780730000000000000000;\n', '  uint256 internal founderSupply = 10592690880000000000000000;\n', '  uint256 internal foundationSupply = 38159689530000000000000000; \n', '  event AdvisorTokenTransfer (address indexed beneficiary, uint256 amount);\n', '  event BackerTokenTransfer (address indexed beneficiary, uint256 amount);\n', '  event FoundationTokenTransfer (address indexed beneficiary, uint256 amount);\n', '  event FounderTokenTransfer (address indexed beneficiary, uint256 amount);\n', '  event PrivatePurchaserTokenTransfer (address indexed beneficiary, uint256 amount);\n', '  event AddAdvisor (address indexed advisorAddress, uint timeLock, uint256 advisorToken);\n', '  event AddBacker (address indexed backerAddress, uint timeLock, uint256 backerToken);\n', '  event AddFoundation (address indexed foundationAddress, uint timeLock, uint256 foundationToken, uint256 foundationBonus);\n', '  event AddFounder (address indexed founderAddress, uint timeLock, uint256 founderToken);\n', '  event BountyTokenTransfer (address indexed beneficiary, uint256 amount);\n', '  event PublicTokenTransfer (address indexed beneficiary, uint256 amount);\n', '  event AddPrivatePurchaser (address indexed privatePurchaserAddress, uint timeLock, uint256 privatePurchaserTokens, uint256 privatePurchaserBonus);\n', '  function addAdvisors (address advisorAddress, uint timeLock, uint256 advisorToken) onlyOwner public returns(bool acknowledgement) {\n', '      \n', '      require(now < timeLock || timeLock == 0);\n', '      require(advisorToken > 0);\n', '      require(advisorAddress != 0x0);\n', '      require(advisorSupply >= advisorToken);\n', '      advisorSupply = SafeMath.sub(advisorSupply,advisorToken);\n', '      \n', '      advisor[advisorAddress].advisorTimeLock = timeLock;\n', '      advisor[advisorAddress].advisorTokens = advisorToken;\n', '      \n', '      AddAdvisor(advisorAddress, timeLock, advisorToken);\n', '      return true;\n', '        \n', '  }\n', '  function getAdvisorStatus (address addr) public view returns(address, uint, uint256) {\n', '        return (addr, advisor[addr].advisorTimeLock, advisor[addr].advisorTokens);\n', '  } \n', '  function addBackers (address backerAddress, uint timeLock, uint256 backerToken) onlyOwner public returns(bool acknowledgement) {\n', '      \n', '      require(now < timeLock || timeLock == 0);\n', '      require(backerToken > 0);\n', '      require(backerAddress != 0x0);\n', '      require(backerSupply >= backerToken);\n', '      backerSupply = SafeMath.sub(backerSupply,backerToken);\n', '           \n', '      backer[backerAddress].backerTimeLock = timeLock;\n', '      backer[backerAddress].backerTokens = backerToken;\n', '      \n', '      AddBacker(backerAddress, timeLock, backerToken);\n', '      return true;\n', '        \n', '  }\n', '  function getBackerStatus(address addr) public view returns(address, uint, uint256) {\n', '        return (addr, backer[addr].backerTimeLock, backer[addr].backerTokens);\n', '  } \n', '  function addFounder(address founderAddress, uint timeLock, uint256 founderToken) onlyOwner public returns(bool acknowledgement) {\n', '      \n', '      require(now < timeLock || timeLock == 0);\n', '      require(founderToken > 0);\n', '      require(founderAddress != 0x0);\n', '      require(founderSupply >= founderToken);\n', '      founderSupply = SafeMath.sub(founderSupply,founderToken);  \n', '      founder[founderAddress].founderTimeLock = timeLock;\n', '      founder[founderAddress].founderTokens = founderToken;\n', '      \n', '      AddFounder(founderAddress, timeLock, founderToken);\n', '      return true;\n', '        \n', '  }\n', '  function getFounderStatus(address addr) public view returns(address, uint, uint256) {\n', '        return (addr, founder[addr].founderTimeLock, founder[addr].founderTokens);\n', '  }\n', '  function addFoundation(address foundationAddress, uint timeLock, uint256 foundationToken, uint256 foundationBonus) onlyOwner public returns(bool acknowledgement) {\n', '      \n', '      require(now < timeLock || timeLock == 0);\n', '      require(foundationToken > 0);\n', '      require(foundationBonus > 0);\n', '      require(foundationAddress != 0x0);\n', '      uint256 totalTokens = SafeMath.add(foundationToken, foundationBonus);\n', '      require(foundationSupply >= totalTokens);\n', '      foundationSupply = SafeMath.sub(foundationSupply, totalTokens);  \n', '      foundation[foundationAddress].foundationBonus = foundationBonus;\n', '      foundation[foundationAddress].foundationTimeLock = timeLock;\n', '      foundation[foundationAddress].foundationTokens = foundationToken;\n', '      \n', '      AddFoundation(foundationAddress, timeLock, foundationToken, foundationBonus);\n', '      return true;\n', '        \n', '  }\n', '  function getFoundationStatus(address addr) public view returns(address, uint, uint256, uint256) {\n', '        return (addr, foundation[addr].foundationTimeLock, foundation[addr].foundationBonus, foundation[addr].foundationTokens);\n', '  }\n', '  function addPrivatePurchaser(address privatePurchaserAddress, uint timeLock, uint256 privatePurchaserToken, uint256 privatePurchaserBonus) onlyOwner public returns(bool acknowledgement) {\n', '      \n', '      require(now < timeLock || timeLock == 0);\n', '      require(privatePurchaserToken > 0);\n', '      require(privatePurchaserBonus > 0);\n', '      require(privatePurchaserAddress != 0x0);\n', '      uint256 totalTokens = SafeMath.add(privatePurchaserToken, privatePurchaserBonus);\n', '      require(privateSupply >= totalTokens);\n', '      privateSupply = SafeMath.sub(privateSupply, totalTokens);        \n', '      privatePurchaser[privatePurchaserAddress].privatePurchaserTimeLock = timeLock;\n', '      privatePurchaser[privatePurchaserAddress].privatePurchaserTokens = privatePurchaserToken;\n', '      privatePurchaser[privatePurchaserAddress].privatePurchaserBonus = privatePurchaserBonus;\n', '      \n', '      AddPrivatePurchaser(privatePurchaserAddress, timeLock, privatePurchaserToken, privatePurchaserBonus);\n', '      return true;\n', '        \n', '  }\n', '  function getPrivatePurchaserStatus(address addr) public view returns(address, uint256, uint, uint) {\n', '        return (addr, privatePurchaser[addr].privatePurchaserTimeLock, privatePurchaser[addr].privatePurchaserTokens, privatePurchaser[addr].privatePurchaserBonus);\n', '  }\n', '  function TokenFunctions() internal {\n', '    token = createTokenContract();\n', '  }\n', '  /**\n', '   * function createTokenContract - Mintable Token Created\n', '   */\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '  \n', '  /** \n', '   * function getTokenAddress - Get Token Address \n', '   */\n', '  function getTokenAddress() onlyOwner public returns (address) {\n', '    return token;\n', '  }\n', '}\n', '/**\n', ' * @title HazzaToken \n', ' */\n', ' \n', 'contract HazzaToken is MintableToken {\n', '    /**\n', '    *  @string name - Token Name\n', '    *  @string symbol - Token Symbol\n', '    *  @uint8 decimals - Token Decimals\n', '    *  @uint256 _totalSupply - Token Total Supply\n', '    */\n', '    string public constant name = "HAZZA";\n', '    string public constant symbol = "HAZ";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant _totalSupply = 105926908800000000000000000;\n', '  \n', '    /** Constructor HazzaToken */\n', '    function HazzaToken() {\n', '        totalSupply = _totalSupply;\n', '    }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract TokenDistribution is TokenFunctions {\n', '  /** \n', '  * function grantAdvisorToken - Transfer advisor tokens \n', '  */\n', '    function grantAdvisorToken() public returns(bool response) {\n', '        require(advisor[msg.sender].advisorTokens > 0);\n', '        require(now > advisor[msg.sender].advisorTimeLock);\n', '        uint256 transferToken = advisor[msg.sender].advisorTokens;\n', '        advisor[msg.sender].advisorTokens = 0;\n', '        token.mint(msg.sender, transferToken);\n', '        AdvisorTokenTransfer(msg.sender, transferToken);\n', '        \n', '        return true;\n', '      \n', '    }\n', '  /** \n', '  * function grantBackerToken - Transfer backer tokens\n', '  */\n', '    function grantBackerToken() public returns(bool response) {\n', '        require(backer[msg.sender].backerTokens > 0);\n', '        require(now > backer[msg.sender].backerTimeLock);\n', '        uint256 transferToken = backer[msg.sender].backerTokens;\n', '        backer[msg.sender].backerTokens = 0;\n', '        token.mint(msg.sender, transferToken);\n', '        BackerTokenTransfer(msg.sender, transferToken);\n', '        \n', '        return true;\n', '      \n', '    }\n', '  /** \n', '  * function grantFoundationToken - Transfer foundation tokens  \n', '  */\n', '    function grantFoundationToken() public returns(bool response) {\n', '  \n', '        if (now > foundation[msg.sender].foundationTimeLock) {\n', '                require(foundation[msg.sender].foundationTokens > 0);\n', '                uint256 transferToken = foundation[msg.sender].foundationTokens;\n', '                foundation[msg.sender].foundationTokens = 0;\n', '                token.mint(msg.sender, transferToken);\n', '                FoundationTokenTransfer(msg.sender, transferToken);\n', '        }\n', '        \n', '        if (foundation[msg.sender].foundationBonus > 0) {\n', '                uint256 transferTokenBonus = foundation[msg.sender].foundationBonus;\n', '                foundation[msg.sender].foundationBonus = 0;\n', '                token.mint(msg.sender, transferTokenBonus);\n', '                FoundationTokenTransfer(msg.sender, transferTokenBonus);\n', '        }\n', '        return true;\n', '      \n', '    }\n', '  /** \n', '  * function grantFounderToken - Transfer founder tokens  \n', '  */\n', '    function grantFounderToken() public returns(bool response) {\n', '        require(founder[msg.sender].founderTokens > 0);\n', '        require(now > founder[msg.sender].founderTimeLock);\n', '        uint256 transferToken = founder[msg.sender].founderTokens;\n', '        founder[msg.sender].founderTokens = 0;\n', '        token.mint(msg.sender, transferToken);\n', '        FounderTokenTransfer(msg.sender, transferToken);\n', '        \n', '        return true;\n', '      \n', '    }\n', '  /** \n', '  * function grantPrivatePurchaserToken - Transfer Private Purchasers tokens\n', '  */\n', '    function grantPrivatePurchaserToken() public returns(bool response) {\n', '        if (now > privatePurchaser[msg.sender].privatePurchaserTimeLock) {\n', '                require(privatePurchaser[msg.sender].privatePurchaserTokens > 0);\n', '                uint256 transferToken = privatePurchaser[msg.sender].privatePurchaserTokens;\n', '                privatePurchaser[msg.sender].privatePurchaserTokens = 0;\n', '                token.mint(msg.sender, transferToken);\n', '                PrivatePurchaserTokenTransfer(msg.sender, transferToken);\n', '        }\n', '        \n', '        if (privatePurchaser[msg.sender].privatePurchaserBonus > 0) {\n', '                uint256 transferBonusToken = privatePurchaser[msg.sender].privatePurchaserBonus;\n', '                privatePurchaser[msg.sender].privatePurchaserBonus = 0;\n', '                token.mint(msg.sender, transferBonusToken);\n', '                PrivatePurchaserTokenTransfer(msg.sender, transferBonusToken);\n', '        }\n', '        return true;\n', '      \n', '    }\n', '    /** \n', '    * function bountyFunds - Transfer bounty tokens via AirDrop\n', '    * @param beneficiary address where owner wants to transfer tokens\n', '    * @param tokens value of token\n', '    */\n', '    function bountyTransferToken(address[] beneficiary, uint256[] tokens) onlyOwner public {\n', '        for (uint i = 0; i < beneficiary.length; i++) {\n', '        require(bountySupply >= tokens[i]);\n', '        bountySupply = SafeMath.sub(bountySupply, tokens[i]);\n', '        token.mint(beneficiary[i], tokens[i]);\n', '        BountyTokenTransfer(beneficiary[i], tokens[i]);\n', '        \n', '        }\n', '    }\n', '        /** \n', '    * function publicTransferToken - Transfer public tokens via AirDrop\n', '    * @param beneficiary address where owner wants to transfer tokens\n', '    * @param tokens value of token\n', '    */\n', '    function publicTransferToken(address[] beneficiary, uint256[] tokens) onlyOwner public {\n', '        for (uint i = 0; i < beneficiary.length; i++) {\n', '        \n', '        require(publicSupply >= tokens[i]);\n', '        publicSupply = SafeMath.sub(publicSupply,tokens[i]);\n', '        token.mint(beneficiary[i], tokens[i]);\n', '        PublicTokenTransfer(beneficiary[i], tokens[i]);\n', '        }\n', '    }\n', '}\n', 'contract HazzaTokenInterface is TokenFunctions, TokenDistribution {\n', '  \n', '    /** Constructor HazzaTokenInterface */\n', '    function HazzaTokenInterface() public TokenFunctions() {\n', '    }\n', '    \n', '    /** HazzaToken Contract */\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return new HazzaToken();\n', '    }\n', '}']
