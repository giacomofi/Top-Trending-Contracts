['pragma solidity 0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract IController is Pausable {\n', '    event SetContractInfo(bytes32 id, address contractAddress, bytes20 gitCommitHash);\n', '\n', '    function setContractInfo(bytes32 _id, address _contractAddress, bytes20 _gitCommitHash) external;\n', '    function updateController(bytes32 _id, address _controller) external;\n', '    function getContract(bytes32 _id) public view returns (address);\n', '}\n', '\n', 'contract IManager {\n', '    event SetController(address controller);\n', '    event ParameterUpdate(string param);\n', '\n', '    function setController(address _controller) external;\n', '}\n', '\n', 'contract Manager is IManager {\n', '    // Controller that contract is registered with\n', '    IController public controller;\n', '\n', '    // Check if sender is controller\n', '    modifier onlyController() {\n', '        require(msg.sender == address(controller));\n', '        _;\n', '    }\n', '\n', '    // Check if sender is controller owner\n', '    modifier onlyControllerOwner() {\n', '        require(msg.sender == controller.owner());\n', '        _;\n', '    }\n', '\n', '    // Check if controller is not paused\n', '    modifier whenSystemNotPaused() {\n', '        require(!controller.paused());\n', '        _;\n', '    }\n', '\n', '    // Check if controller is paused\n', '    modifier whenSystemPaused() {\n', '        require(controller.paused());\n', '        _;\n', '    }\n', '\n', '    function Manager(address _controller) public {\n', '        controller = IController(_controller);\n', '    }\n', '\n', '    /*\n', '     * @dev Set controller. Only callable by current controller\n', '     * @param _controller Controller contract address\n', '     */\n', '    function setController(address _controller) external onlyController {\n', '        controller = IController(_controller);\n', '\n', '        SetController(_controller);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Interface for a Verifier. Can be backed by any implementaiton including oracles or Truebit\n', ' */\n', 'contract IVerifier {\n', '    function verify(\n', '        uint256 _jobId,\n', '        uint256 _claimId,\n', '        uint256 _segmentNumber,\n', '        string _transcodingOptions,\n', '        string _dataStorageHash,\n', '        bytes32[2] _dataHashes\n', '    )\n', '        external\n', '        payable;\n', '\n', '    function getPrice() public view returns (uint256);\n', '}\n', '\n', '/*\n', ' * @title Interface for contract that receives verification results\n', ' */\n', 'contract IVerifiable {\n', '    // External functions\n', '    function receiveVerification(uint256 _jobId, uint256 _claimId, uint256 _segmentNumber, bool _result) external;\n', '}\n', '\n', '/**\n', ' * @title LivepeerVerifier\n', ' * @dev Manages transcoding verification requests that are processed by a trusted solver\n', ' */\n', 'contract LivepeerVerifier is Manager, IVerifier {\n', '    // IPFS hash of verification computation archive\n', '    string public verificationCodeHash;\n', '    // Solver that can submit results for requests\n', '    address public solver;\n', '\n', '    struct Request {\n', '        uint256 jobId;\n', '        uint256 claimId;\n', '        uint256 segmentNumber;\n', '        bytes32 commitHash;\n', '    }\n', '\n', '    mapping (uint256 => Request) public requests;\n', '    uint256 public requestCount;\n', '\n', '    event VerifyRequest(uint256 indexed requestId, uint256 indexed jobId, uint256 indexed claimId, uint256 segmentNumber, string transcodingOptions, string dataStorageHash, bytes32 dataHash, bytes32 transcodedDataHash);\n', '    event Callback(uint256 indexed requestId, uint256 indexed jobId, uint256 indexed claimId, uint256 segmentNumber, bool result);\n', '    event SolverUpdate(address solver);\n', '\n', '    // Check if sender is JobsManager\n', '    modifier onlyJobsManager() {\n', '        require(msg.sender == controller.getContract(keccak256("JobsManager")));\n', '        _;\n', '    }\n', '\n', '    // Check if sender is a solver\n', '    modifier onlySolver() {\n', '        require(msg.sender == solver);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev LivepeerVerifier constructor\n', '     * @param _controller Controller address\n', '     * @param _solver Solver address to register\n', '     * @param _verificationCodeHash Content addressed hash specifying location of transcoding verification code\n', '     */\n', '    function LivepeerVerifier(address _controller, address _solver, string _verificationCodeHash) public Manager(_controller) {\n', '        // Solver must not be null address\n', '        require(_solver != address(0));\n', '        // Set solver\n', '        solver = _solver;\n', '        // Set verification code hash\n', '        verificationCodeHash = _verificationCodeHash;\n', '    }\n', '\n', '    /**\n', '     * @dev Set content addressed hash specifying location of transcoding verification code. Only callable by Controller owner\n', '     * @param _verificationCodeHash Content addressed hash specifying location of transcoding verification code\n', '     */\n', '    function setVerificationCodeHash(string _verificationCodeHash) external onlyControllerOwner {\n', '        verificationCodeHash = _verificationCodeHash;\n', '    }\n', '\n', '    /**\n', '     * @dev Set registered solver address that is allowed to submit the result of transcoding verification computation\n', '     * via `__callback()`. Only callable by Controller owner\n', '     * @param _solver Solver address to register\n', '     */\n', '    function setSolver(address _solver) external onlyControllerOwner {\n', '        // Must not be null address\n', '        require(_solver != address(0));\n', '\n', '        solver = _solver;\n', '\n', '        SolverUpdate(_solver);\n', '    }\n', '\n', '    /**\n', '     * @dev Fire VerifyRequest event which solvers should listen for to retrieve verification parameters\n', '     */\n', '    function verify(\n', '        uint256 _jobId,\n', '        uint256 _claimId,\n', '        uint256 _segmentNumber,\n', '        string _transcodingOptions,\n', '        string _dataStorageHash,\n', '        bytes32[2] _dataHashes\n', '    )\n', '        external\n', '        payable\n', '        onlyJobsManager\n', '        whenSystemNotPaused\n', '    {\n', '        // Store request parameters\n', '        requests[requestCount].jobId = _jobId;\n', '        requests[requestCount].claimId = _claimId;\n', '        requests[requestCount].segmentNumber = _segmentNumber;\n', '        requests[requestCount].commitHash = keccak256(_dataHashes[0], _dataHashes[1]);\n', '\n', '        VerifyRequest(\n', '            requestCount,\n', '            _jobId,\n', '            _claimId,\n', '            _segmentNumber,\n', '            _transcodingOptions,\n', '            _dataStorageHash,\n', '            _dataHashes[0],\n', '            _dataHashes[1]\n', '        );\n', '\n', '        // Update request count\n', '        requestCount++;\n', '    }\n', '\n', '    /**\n', '     * @dev Callback function invoked by a solver to submit the result of a verification computation\n', '     * @param _requestId Request identifier\n', '     * @param _result Result of verification computation - keccak256 hash of transcoded segment data\n', '     */\n', '    // solium-disable-next-line mixedcase\n', '    function __callback(uint256 _requestId, bytes32 _result) external onlySolver whenSystemNotPaused {\n', '        Request memory q = requests[_requestId];\n', '\n', '        // Check if transcoded data hash returned by solver matches originally submitted transcoded data hash\n', '        if (q.commitHash == _result) {\n', '            IVerifiable(controller.getContract(keccak256("JobsManager"))).receiveVerification(q.jobId, q.claimId, q.segmentNumber, true);\n', '            Callback(_requestId, q.jobId, q.claimId, q.segmentNumber, true);\n', '        } else {\n', '            IVerifiable(controller.getContract(keccak256("JobsManager"))).receiveVerification(q.jobId, q.claimId, q.segmentNumber, false);\n', '            Callback(_requestId, q.jobId, q.claimId, q.segmentNumber, false);\n', '        }\n', '\n', '        // Remove request\n', '        delete requests[_requestId];\n', '    }\n', '\n', '    /**\n', '     * @dev Return price of verification which is zero for this implementation\n', '     */\n', '    function getPrice() public view returns (uint256) {\n', '        return 0;\n', '    }\n', '}']