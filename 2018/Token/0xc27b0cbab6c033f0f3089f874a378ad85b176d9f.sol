['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMult(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract TokenERC20 {\n', '     function balanceOf(address _owner) constant returns (uint256  balance);\n', '     function transfer(address _to, uint256  _value) returns (bool success);\n', '     function transferFrom(address _from, address _to, uint256  _value) returns (bool success);\n', '     function approve(address _spender, uint256  _value) returns (bool success);\n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '     event Transfer(address indexed _from, address indexed _to, uint256  _value);\n', '     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract BICToken is SafeMath, TokenERC20{ \n', '    string public name = "BIC";\n', '    string public symbol = "BIC";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply;\n', '\taddress public owner = 0x0;\n', '\tstring  public version = "1.0";\t\n', '\t\n', '    bool public stopped = false;\t\n', '    bool public locked = false;\t\n', '    uint256 public currentSupply;           \n', '    uint256 public tokenRaised = 0;    \n', '    uint256 public tokenExchangeRate = 146700; \n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '\tmapping (address => uint256) public freezeOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '\t\n', '\t/* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed from, uint256 value);\n', '\t\n', '\t/* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed from, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function BICToken(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '        ) {\n', '        totalSupply = formatDecimals(initialSupply);      \t\t\t //  Update total supply\n', '        balanceOf[msg.sender] = totalSupply;              \t\t\t //  Give the creator all initial tokens\n', '        name = tokenName;                                   \t\t //  Set the name for display purposes\n', '\t\tcurrentSupply = totalSupply;\n', '        symbol = tokenSymbol;                                        //  Set the symbol for display purposes\n', '\t\towner = msg.sender;\n', '    }\n', '\t\n', '\tmodifier onlyOwner()  { \n', '\t\trequire(msg.sender == owner); \n', '\t\t_; \n', '\t}\n', '\t\n', '\tmodifier validAddress()  {\n', '        require(address(0) != msg.sender);\n', '        _;\n', '    }\t\n', '\n', '    modifier isRunning() {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '\t\n', '    modifier unlocked() {\n', '        require(!locked);\n', '        _;\n', '    }\n', '\t\n', '    function formatDecimals(uint256 _value) internal returns (uint256 ) {\n', '        return _value * 10 ** uint256(decimals);\n', '    }\n', '\t\n', '\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balanceOf[_owner];\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) isRunning validAddress unlocked returns (bool success) {\n', '        require(_value > 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '\t\tApproval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\t/*Function to check the amount of tokens that an owner allowed to a spender.*/\n', '\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '\t\treturn allowance[_owner][_spender];\n', '\t}\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) isRunning validAddress unlocked returns (bool success) {\t\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\t\n', '\t/**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);   // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);       // Add the same to the recipient\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) isRunning validAddress unlocked returns (bool success) {\t\n', '        require(_value <= allowance[_from][msg.sender]);     \t\t// Check allowance\n', '        require(_value > 0);\n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) isRunning validAddress unlocked returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   \t\t\t\t\t\t\t  // Check if the sender has enough\n', '        require(_value > 0);   \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);  // Subtract from the sender\n', '        totalSupply = SafeMath.safeSub(totalSupply,_value);                       // Updates totalSupply\n', '        currentSupply = SafeMath.safeSub(currentSupply,_value);                   // Updates currentSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction freeze(uint256 _value) isRunning validAddress unlocked returns (bool success) {\t\n', '        require(balanceOf[msg.sender] >= _value);   \t\t \t\t\t\t\t // Check if the sender has enough\n', '        require(_value > 0);   \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value); // Subtract from the sender\n', '        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);   // Updates totalSupply\n', '        Freeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction unfreeze(uint256 _value) isRunning validAddress unlocked returns (bool success) {\n', '        require(freezeOf[msg.sender] >= _value);   \t\t \t\t\t\t\t\t   // Check if the sender has enough\n', '        require(_value > 0);   \n', '        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);     // Subtract from the sender\n', '\t\tbalanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);   // Updates totalSupply\n', '        Unfreeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction setTokenExchangeRate(uint256 _tokenExchangeRate) onlyOwner external {\n', '        require(_tokenExchangeRate > 0);   \n', '        require(_tokenExchangeRate != tokenExchangeRate);   \n', '        tokenExchangeRate = _tokenExchangeRate;\n', '    } \n', '\t\n', '    function setName(string _name) onlyOwner {\n', '        name = _name;\n', '    }\n', '\t\n', '    function setSymbol(string _symbol) onlyOwner {\n', '        symbol = _symbol;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMult(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract TokenERC20 {\n', '     function balanceOf(address _owner) constant returns (uint256  balance);\n', '     function transfer(address _to, uint256  _value) returns (bool success);\n', '     function transferFrom(address _from, address _to, uint256  _value) returns (bool success);\n', '     function approve(address _spender, uint256  _value) returns (bool success);\n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '     event Transfer(address indexed _from, address indexed _to, uint256  _value);\n', '     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract BICToken is SafeMath, TokenERC20{ \n', '    string public name = "BIC";\n', '    string public symbol = "BIC";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply;\n', '\taddress public owner = 0x0;\n', '\tstring  public version = "1.0";\t\n', '\t\n', '    bool public stopped = false;\t\n', '    bool public locked = false;\t\n', '    uint256 public currentSupply;           \n', '    uint256 public tokenRaised = 0;    \n', '    uint256 public tokenExchangeRate = 146700; \n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '\tmapping (address => uint256) public freezeOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '\t\n', '\t/* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed from, uint256 value);\n', '\t\n', '\t/* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed from, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function BICToken(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '        ) {\n', '        totalSupply = formatDecimals(initialSupply);      \t\t\t //  Update total supply\n', '        balanceOf[msg.sender] = totalSupply;              \t\t\t //  Give the creator all initial tokens\n', '        name = tokenName;                                   \t\t //  Set the name for display purposes\n', '\t\tcurrentSupply = totalSupply;\n', '        symbol = tokenSymbol;                                        //  Set the symbol for display purposes\n', '\t\towner = msg.sender;\n', '    }\n', '\t\n', '\tmodifier onlyOwner()  { \n', '\t\trequire(msg.sender == owner); \n', '\t\t_; \n', '\t}\n', '\t\n', '\tmodifier validAddress()  {\n', '        require(address(0) != msg.sender);\n', '        _;\n', '    }\t\n', '\n', '    modifier isRunning() {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '\t\n', '    modifier unlocked() {\n', '        require(!locked);\n', '        _;\n', '    }\n', '\t\n', '    function formatDecimals(uint256 _value) internal returns (uint256 ) {\n', '        return _value * 10 ** uint256(decimals);\n', '    }\n', '\t\n', '\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balanceOf[_owner];\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) isRunning validAddress unlocked returns (bool success) {\n', '        require(_value > 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '\t\tApproval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\t/*Function to check the amount of tokens that an owner allowed to a spender.*/\n', '\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '\t\treturn allowance[_owner][_spender];\n', '\t}\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) isRunning validAddress unlocked returns (bool success) {\t\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\t\n', '\t/**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);   // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);       // Add the same to the recipient\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) isRunning validAddress unlocked returns (bool success) {\t\n', '        require(_value <= allowance[_from][msg.sender]);     \t\t// Check allowance\n', '        require(_value > 0);\n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) isRunning validAddress unlocked returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   \t\t\t\t\t\t\t  // Check if the sender has enough\n', '        require(_value > 0);   \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);  // Subtract from the sender\n', '        totalSupply = SafeMath.safeSub(totalSupply,_value);                       // Updates totalSupply\n', '        currentSupply = SafeMath.safeSub(currentSupply,_value);                   // Updates currentSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction freeze(uint256 _value) isRunning validAddress unlocked returns (bool success) {\t\n', '        require(balanceOf[msg.sender] >= _value);   \t\t \t\t\t\t\t // Check if the sender has enough\n', '        require(_value > 0);   \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value); // Subtract from the sender\n', '        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);   // Updates totalSupply\n', '        Freeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction unfreeze(uint256 _value) isRunning validAddress unlocked returns (bool success) {\n', '        require(freezeOf[msg.sender] >= _value);   \t\t \t\t\t\t\t\t   // Check if the sender has enough\n', '        require(_value > 0);   \n', '        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);     // Subtract from the sender\n', '\t\tbalanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);   // Updates totalSupply\n', '        Unfreeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction setTokenExchangeRate(uint256 _tokenExchangeRate) onlyOwner external {\n', '        require(_tokenExchangeRate > 0);   \n', '        require(_tokenExchangeRate != tokenExchangeRate);   \n', '        tokenExchangeRate = _tokenExchangeRate;\n', '    } \n', '\t\n', '    function setName(string _name) onlyOwner {\n', '        name = _name;\n', '    }\n', '\t\n', '    function setSymbol(string _symbol) onlyOwner {\n', '        symbol = _symbol;\n', '    }\n', '}']
