['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  function totalSupply() public constant returns (uint256);\n', '\n', '  function balanceOf(address who) public constant returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 token\n', ' *\n', ' * @dev Implementation of the ERC20 token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract ERC20Token is ERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address.\n', '   * @param _owner The address to query the the balance of.\n', '   * @return An uint256 representing the amount owned by the passed address.\n', '   */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev transfer token for a specified address\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    public returns (bool success)\n', '  {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    public returns (bool success)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address[] public owners;\n', '\n', '  event OwnerAdded(address indexed authorizer, address indexed newOwner, uint256 index);\n', '\n', '  event OwnerRemoved(address indexed authorizer, address indexed oldOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owners.push(msg.sender);\n', '    OwnerAdded(0x0, msg.sender, 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than one owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    bool isOwner = false;\n', '\n', '    for (uint256 i = 0; i < owners.length; i++) {\n', '      if (msg.sender == owners[i]) {\n', '        isOwner = true;\n', '        break;\n', '      }\n', '    }\n', '\n', '    require(isOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows one of the current owners to add a new owner\n', '   * @param newOwner The address give ownership to.\n', '   */\n', '  function addOwner(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    uint256 i = owners.push(newOwner) - 1;\n', '    OwnerAdded(msg.sender, newOwner, i);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows one of the owners to remove other owner\n', '   */\n', '  function removeOwner(uint256 index) onlyOwner public {\n', '    address owner = owners[index];\n', '    owners[index] = owners[owners.length - 1];\n', '    delete owners[owners.length - 1];\n', '    OwnerRemoved(msg.sender, owner);\n', '  }\n', '\n', '  function ownersCount() constant public returns (uint256) {\n', '    return owners.length;\n', '  }\n', '}\n', '\n', '\n', 'contract UpgradableStorage is Ownable {\n', '\n', '  // Address of the current implementation\n', '  address internal _implementation;\n', '\n', '  event NewImplementation(address implementation);\n', '\n', '  /**\n', '  * @dev Tells the address of the current implementation\n', '  * @return address of the current implementation\n', '  */\n', '  function implementation() public view returns (address) {\n', '    return _implementation;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Upgradable\n', ' * @dev This contract represents an upgradable contract\n', ' */\n', 'contract Upgradable is UpgradableStorage {\n', '  function initialize() public payable { }\n', '}\n', '\n', '\n', '/**\n', ' * Base Contract (KNW)\n', ' * Upgradable Standard ECR20 Token\n', ' */\n', 'contract Base is Upgradable, ERC20Token {\n', '  function name() pure public returns (string) {\n', '    return &#39;Knowledge.io&#39;;\n', '  }\n', '\n', '  function symbol() pure public returns (string) {\n', '    return &#39;KNW&#39;;\n', '  }\n', '\n', '  function decimals() pure public returns (uint8) {\n', '    return 8;\n', '  }\n', '\n', '  function INITIAL_SUPPLY() pure public returns (uint) {\n', '    /** 150,000,000.00000000 KNW tokens */\n', '    return 15000000000000000;\n', '  }\n', '\n', '  function totalSupply() view public returns (uint) {\n', '    return INITIAL_SUPPLY();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * A token upgrade mechanism where users can upgrade tokens\n', ' * to the next smart contract revision.\n', ' *\n', ' * First envisioned by Golem and Lunyr projects.\n', ' */\n', 'contract Legacy is Base {\n', '  using SafeMath for uint256;\n', '\n', '  /** The contract from which we upgrade */\n', '  Legacy public prevContract;\n', '\n', '  /**\n', '   * Somebody has upgraded some of their tokens.\n', '   */\n', '  event UpgradeFrom(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  /**\n', '   * Previous contract available.\n', '   */\n', '  event PrevContractSet(address contractAddress);\n', '\n', '  modifier fromPrevContract() {\n', '    require(msg.sender == address(prevContract));\n', '    _;\n', '  }\n', '\n', '  function upgradeFrom(address holder, uint256 value) fromPrevContract public returns (bool) {\n', '    balances[holder] = value;\n', '    Transfer(address(0), holder, value);\n', '    UpgradeFrom(address(prevContract), holder, value);\n', '\n', '    return true;\n', '  }\n', '\n', '  function setPrevContract(address contractAddress) onlyOwner public returns (bool) {\n', '    require(contractAddress != 0x0);\n', '    prevContract = Legacy(contractAddress);\n', '    PrevContractSet(contractAddress);\n', '\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * Payable is meant to execute the `transfer` method of the ERC20 Token\n', ' * and log a Pay message with a reference message to bind the payment to an\n', ' * order id or some other identifier\n', ' */\n', 'contract Payable is Legacy {\n', '  struct PaymentRequest {\n', '    uint256 fee;\n', '    uint256 value;\n', '    address seller;\n', '  }\n', '\n', '  mapping (address => mapping(string => PaymentRequest)) private pendingPayments;\n', '\n', '  event Pay(\n', '    address indexed from,\n', '    address indexed seller,\n', '    address indexed store,\n', '    uint256 value,\n', '    uint256 fee,\n', '    string ref\n', '  );\n', '\n', '  function requestPayment(uint256 value, uint256 fee, string ref, address to) public {\n', '    pendingPayments[msg.sender][ref] = PaymentRequest(fee, value, to);\n', '  }\n', '\n', '  function cancelPayment(string ref) public {\n', '    delete pendingPayments[msg.sender][ref];\n', '  }\n', '\n', '  function paymentInfo(address store, string ref) public view returns (uint256 value, uint256 fee, address seller) {\n', '    PaymentRequest memory paymentRequest = pendingPayments[store][ref];\n', '    value = paymentRequest.value;\n', '    fee = paymentRequest.fee;\n', '    seller = paymentRequest.seller;\n', '  }\n', '\n', '  function pay(address store, string ref) public returns (bool) {\n', '    PaymentRequest memory paymentRequest = pendingPayments[store][ref];\n', '\n', '    if (paymentRequest.fee > 0) {\n', '      assert(transfer(store, paymentRequest.fee));\n', '    }\n', '\n', '    assert(transfer(paymentRequest.seller, paymentRequest.value));\n', '\n', '    Pay(msg.sender, paymentRequest.seller, store, paymentRequest.value, paymentRequest.fee, ref);\n', '    delete pendingPayments[store][ref];\n', '\n', '    return true;\n', '  }\n', '}']