['pragma solidity ^0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token BASIC #20 Interface\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract MeerkatToken is ERC20Interface {\n', '    address public owner;\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        symbol = "MCT";\n', '        name = "Meerkat Token";\n', '        decimals = 18;\n', '        _totalSupply = 10000000000 * 10**uint(decimals);\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Safele Transfer the balance from msg.sender&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        // Check if the sender has enough\n', '        require(balances[msg.sender] >= _value);\n', '        // Check for overflows\n', '        require(balances[_to] + _value >= balances[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balances[msg.sender] + balances[_to];\n', '        // Subtract from the sender\n', '        balances[msg.sender] -= _value;\n', '        // Add the same to the recipient\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        \n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balances[msg.sender] + balances[_to] == previousBalances);\n', '        \n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Don&#39;t accept ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '\n', '}']