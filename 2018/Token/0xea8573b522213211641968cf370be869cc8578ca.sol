['pragma solidity ^0.4.16;\n', '\n', '/**\n', '\n', ' * Math operations with safety checks\n', '\n', ' */\n', '\n', 'contract BaseSafeMath {\n', '\n', '\n', '    /*\n', '\n', '    standard uint256 functions\n', '\n', '     */\n', '\n', '\n', '\n', '    function add(uint256 a, uint256 b) internal pure\n', '\n', '    returns (uint256) {\n', '\n', '        uint256 c = a + b;\n', '\n', '        assert(c >= a);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function sub(uint256 a, uint256 b) internal pure\n', '\n', '    returns (uint256) {\n', '\n', '        assert(b <= a);\n', '\n', '        return a - b;\n', '\n', '    }\n', '\n', '\n', '    function mul(uint256 a, uint256 b) internal pure\n', '\n', '    returns (uint256) {\n', '\n', '        uint256 c = a * b;\n', '\n', '        assert(a == 0 || c / a == b);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function div(uint256 a, uint256 b) internal pure\n', '\n', '    returns (uint256) {\n', '\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function min(uint256 x, uint256 y) internal pure\n', '\n', '    returns (uint256 z) {\n', '\n', '        return x <= y ? x : y;\n', '\n', '    }\n', '\n', '\n', '    function max(uint256 x, uint256 y) internal pure\n', '\n', '    returns (uint256 z) {\n', '\n', '        return x >= y ? x : y;\n', '\n', '    }\n', '\n', '\n', '\n', '    /*\n', '\n', '    uint128 functions\n', '\n', '     */\n', '\n', '\n', '\n', '    function madd(uint128 a, uint128 b) internal pure\n', '\n', '    returns (uint128) {\n', '\n', '        uint128 c = a + b;\n', '\n', '        assert(c >= a);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function msub(uint128 a, uint128 b) internal pure\n', '\n', '    returns (uint128) {\n', '\n', '        assert(b <= a);\n', '\n', '        return a - b;\n', '\n', '    }\n', '\n', '\n', '    function mmul(uint128 a, uint128 b) internal pure\n', '\n', '    returns (uint128) {\n', '\n', '        uint128 c = a * b;\n', '\n', '        assert(a == 0 || c / a == b);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function mdiv(uint128 a, uint128 b) internal pure\n', '\n', '    returns (uint128) {\n', '\n', '        uint128 c = a / b;\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function mmin(uint128 x, uint128 y) internal pure\n', '\n', '    returns (uint128 z) {\n', '\n', '        return x <= y ? x : y;\n', '\n', '    }\n', '\n', '\n', '    function mmax(uint128 x, uint128 y) internal pure\n', '\n', '    returns (uint128 z) {\n', '\n', '        return x >= y ? x : y;\n', '\n', '    }\n', '\n', '\n', '\n', '    /*\n', '\n', '    uint64 functions\n', '\n', '     */\n', '\n', '\n', '\n', '    function miadd(uint64 a, uint64 b) internal pure\n', '\n', '    returns (uint64) {\n', '\n', '        uint64 c = a + b;\n', '\n', '        assert(c >= a);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function misub(uint64 a, uint64 b) internal pure\n', '\n', '    returns (uint64) {\n', '\n', '        assert(b <= a);\n', '\n', '        return a - b;\n', '\n', '    }\n', '\n', '\n', '    function mimul(uint64 a, uint64 b) internal pure\n', '\n', '    returns (uint64) {\n', '\n', '        uint64 c = a * b;\n', '\n', '        assert(a == 0 || c / a == b);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function midiv(uint64 a, uint64 b) internal pure\n', '\n', '    returns (uint64) {\n', '\n', '        uint64 c = a / b;\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function mimin(uint64 x, uint64 y) internal pure\n', '\n', '    returns (uint64 z) {\n', '\n', '        return x <= y ? x : y;\n', '\n', '    }\n', '\n', '\n', '    function mimax(uint64 x, uint64 y) internal pure\n', '\n', '    returns (uint64 z) {\n', '\n', '        return x >= y ? x : y;\n', '\n', '    }\n', '\n', '\n', '}\n', '\n', '\n', '// Abstract contract for the full ERC 20 Token standard\n', '\n', '// https://github.com/ethereum/EIPs/issues/20\n', '\n', '\n', '\n', 'contract BaseERC20 {\n', '\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal;\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public;\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success);\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success);\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success);\n', '\n', '}\n', '\n', '\n', '/**\n', '\n', ' * @title Standard ERC20 token\n', '\n', ' *\n', '\n', ' * @dev Implementation of the basic standard token.\n', '\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', '\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', '\n', ' */\n', '\n', 'interface tokenRecipient {function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;}\n', '\n', '\n', 'contract LockUtils {\n', '    // 私募 20% 不锁定\n', '    address private_placement = 0x627306090abaB3A6e1400e9345bC60c78a8BEf57;\n', '    // 基础设施建设 10% 不锁定\n', '    address infrastructure_building = 0x2A6a79F69439DE56a4Bdf8b16447D1Bea0e82Ce2;\n', '    // 基石 6% 不锁定 4% 锁定3个月\n', '    address cornerstone_investment = 0xf17f52151EbEF6C7334FAD080c5704D77216b732;\n', '    // 基金会发展费用金 3% 不锁定 3%锁定3个月 4%锁定9个月\n', '    address foundation_development = 0x6E46b4D8f4599D6bE5BE071CCC62554304901240;\n', '    // 团队奖励 3.75%锁定2年 3.75%锁定2.5年 3.75%锁定3年 3.75%锁定3.5年\n', '    address team_rewarding = 0x07bDB7D6aa3b119C29dCEDb3B7CA0DDDbFAE1bC0;\n', '\n', '    function getLockWFee(address account, uint8 decimals, uint256 createTime) internal view returns (uint256) {\n', '        uint256 tempLockWFee = 0;\n', '        if (account == team_rewarding) {\n', '            // 团队奖励 3.75%锁定2年 3.75%锁定2.5年 3.75%锁定3年 3.75%锁定3.5年\n', '            if (now < createTime + 2 years) {\n', '                tempLockWFee = 1500000000 * 10 ** uint256(decimals);\n', '            } else if (now < createTime + 2 years + 6 * 30 days) {\n', '                tempLockWFee = 1125000000 * 10 ** uint256(decimals);\n', '            } else if (now < createTime + 3 years) {\n', '                tempLockWFee = 750000000 * 10 ** uint256(decimals);\n', '            } else if (now < createTime + 3 years + 6 * 30 days) {\n', '                tempLockWFee = 375000000 * 10 ** uint256(decimals);\n', '            }\n', '        } else if (account == foundation_development) {\n', '            // 基金会发展费用金 3% 不锁定 3%锁定3个月 4%锁定9个月\n', '            if (now < (createTime + 3 * 30 days)) {\n', '                tempLockWFee = 700000000 * 10 ** uint256(decimals);\n', '            } else if (now < (createTime + 9 * 30 days)) {\n', '                tempLockWFee = 400000000 * 10 ** uint256(decimals);\n', '            }\n', '        } else if (account == cornerstone_investment) {\n', '            // 基石 6% 不锁定 4% 锁定3个月\n', '            if (now < (createTime + 3 * 30 days)) {\n', '                tempLockWFee = 400000000 * 10 ** uint256(decimals);\n', '            }\n', '        }\n', '        return tempLockWFee;\n', '    }\n', '\n', '}\n', '\n', 'contract WFee is BaseERC20, BaseSafeMath, LockUtils {\n', '\n', '    //The solidity created time\n', '    uint256 createTime;\n', '\n', '    function WFee() public {\n', '        name = "WFee";\n', '        symbol = "WFEE";\n', '        decimals = 18;\n', '        totalSupply                       = 10000000000 * 10 ** uint256(decimals);\n', '        balanceOf[private_placement]       = 2000000000 * 10 ** uint256(decimals);\n', '        balanceOf[infrastructure_building] = 1000000000 * 10 ** uint256(decimals);\n', '        balanceOf[cornerstone_investment]  = 1000000000 * 10 ** uint256(decimals);\n', '        balanceOf[foundation_development]  = 1000000000 * 10 ** uint256(decimals);\n', '        balanceOf[team_rewarding]          = 1500000000 * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender]              = 3500000000 * 10 ** uint256(decimals);\n', '        createTime = now;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        // All transfer will check the available unlocked balance\n', '        require((balanceOf[_from] - getLockWFee(_from, decimals, createTime)) >= _value);\n', '        // require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require((balanceOf[_to] + _value) > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '    returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '    public\n', '    returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;\n', '        // Subtract from the sender\n', '        totalSupply -= _value;\n', '        // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        // Check allowance\n', '        balanceOf[_from] -= _value;\n', '        // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;\n', "        // Subtract from the sender's allowance\n", '        totalSupply -= _value;\n', '        // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '}']