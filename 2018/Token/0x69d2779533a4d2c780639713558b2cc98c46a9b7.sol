['pragma solidity ^0.4.8;\n', '\n', '/**\n', ' * @title VNT Token - The Next Generation Value Transfering Network.\n', ' * @author Wang Yunxiao - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bccbc5c4858a858e8efcdbd1ddd5d092dfd3d1">[email&#160;protected]</a>>\n', ' */\n', '\n', 'contract SafeMath {\n', '    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b > 0);\n', '        uint256 c = a / b;\n', '        assert(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract VNT is SafeMath {\n', '    string constant tokenName = &#39;VNTChain&#39;;\n', '    string constant tokenSymbol = &#39;VNT&#39;;\n', '    uint8 constant decimalUnits = 8;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    uint256 public totalSupply = 100 * (10**8) * (10**8); // 100 yi\n', '\n', '    address public owner;\n', '    \n', '    mapping(address => bool) restrictedAddresses;\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    modifier onlyOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function VNT() public {\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        decimals = decimalUnits;                            // Amount of decimals for display purposes\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_value > 0);\n', '        require(balanceOf[msg.sender] >= _value);              // Check if the sender has enough\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);    // Check for overflows\n', '        require(!restrictedAddresses[msg.sender]);\n', '        require(!restrictedAddresses[_to]);\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);   // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                 // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                  // Notify anyone listening that this transfer took place\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;            // Set allowance\n', '        Approval(msg.sender, _spender, _value);              // Raise Approval event\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                  // Check if the sender has enough\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);   // Check for overflows\n', '        require(_value <= allowance[_from][msg.sender]);      // Check allowance\n', '        require(!restrictedAddresses[_from]);\n', '        require(!restrictedAddresses[msg.sender]);\n', '        require(!restrictedAddresses[_to]);\n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);    // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);        // Add the same to the recipient\n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function totalSupply() constant public returns (uint256 Supply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balanceOf[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '      return allowance[_owner][_spender];\n', '    }\n', '\n', '    function() public payable {\n', '        revert();\n', '    }\n', '\n', '    /* Owner can add new restricted address or removes one */\n', '    function editRestrictedAddress(address _newRestrictedAddress) public onlyOwner {\n', '        restrictedAddresses[_newRestrictedAddress] = !restrictedAddresses[_newRestrictedAddress];\n', '    }\n', '\n', '    function isRestrictedAddress(address _querryAddress) constant public returns (bool answer) {\n', '        return restrictedAddresses[_querryAddress];\n', '    }\n', '}']
['pragma solidity ^0.4.8;\n', '\n', '/**\n', ' * @title VNT Token - The Next Generation Value Transfering Network.\n', ' * @author Wang Yunxiao - <wyx96922@gmail.com>\n', ' */\n', '\n', 'contract SafeMath {\n', '    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b > 0);\n', '        uint256 c = a / b;\n', '        assert(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract VNT is SafeMath {\n', "    string constant tokenName = 'VNTChain';\n", "    string constant tokenSymbol = 'VNT';\n", '    uint8 constant decimalUnits = 8;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    uint256 public totalSupply = 100 * (10**8) * (10**8); // 100 yi\n', '\n', '    address public owner;\n', '    \n', '    mapping(address => bool) restrictedAddresses;\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    modifier onlyOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function VNT() public {\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        decimals = decimalUnits;                            // Amount of decimals for display purposes\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_value > 0);\n', '        require(balanceOf[msg.sender] >= _value);              // Check if the sender has enough\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);    // Check for overflows\n', '        require(!restrictedAddresses[msg.sender]);\n', '        require(!restrictedAddresses[_to]);\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);   // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                 // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                  // Notify anyone listening that this transfer took place\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;            // Set allowance\n', '        Approval(msg.sender, _spender, _value);              // Raise Approval event\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                  // Check if the sender has enough\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);   // Check for overflows\n', '        require(_value <= allowance[_from][msg.sender]);      // Check allowance\n', '        require(!restrictedAddresses[_from]);\n', '        require(!restrictedAddresses[msg.sender]);\n', '        require(!restrictedAddresses[_to]);\n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);    // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);        // Add the same to the recipient\n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function totalSupply() constant public returns (uint256 Supply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balanceOf[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '      return allowance[_owner][_spender];\n', '    }\n', '\n', '    function() public payable {\n', '        revert();\n', '    }\n', '\n', '    /* Owner can add new restricted address or removes one */\n', '    function editRestrictedAddress(address _newRestrictedAddress) public onlyOwner {\n', '        restrictedAddresses[_newRestrictedAddress] = !restrictedAddresses[_newRestrictedAddress];\n', '    }\n', '\n', '    function isRestrictedAddress(address _querryAddress) constant public returns (bool answer) {\n', '        return restrictedAddresses[_querryAddress];\n', '    }\n', '}']
