['pragma solidity ^0.4.18;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function Owned() public{\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function changeOwner(address _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract tokenRecipient { \n', '  function receiveApproval (address _from, uint256 _value, address _token, bytes _extraData) public;\n', '}\n', '\n', 'contract ERC20Token {\n', '\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant  returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract DASABI_IO_Contract is ERC20Token, Owned{\n', '\n', '    /* Public variables of the token */\n', '    string  public constant name = "dasabi.io DSBI";\n', '    string  public constant symbol = "DSBI";\n', '    uint256 public constant decimals = 18;\n', '    uint256 private constant etherChange = 10**18;\n', '    \n', '    /* Variables of the token */\n', '    uint256 public totalSupply;\n', '    uint256 public totalRemainSupply;\n', '    uint256 public ExchangeRate;\n', '    \n', '    uint256 public CandyRate;\n', '    \n', '    bool    public crowdsaleIsOpen;\n', '    bool    public CandyDropIsOpen;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowances;\n', '    mapping (address => bool) public blacklist;\n', '    \n', '    address public multisigAddress;\n', '    /* Events */\n', '    event mintToken(address indexed _to, uint256 _value);\n', '    event burnToken(address indexed _from, uint256 _value);\n', '    \n', '    function () payable public {\n', '        require (crowdsaleIsOpen == true);\n', '              \n', '        \n', '        if (msg.value > 0) {\n', '        \tmintDSBIToken(msg.sender, (msg.value * ExchangeRate * 10**decimals) / etherChange);\n', '        }\n', '        \n', '        if(CandyDropIsOpen){\n', '\t        if(!blacklist[msg.sender]){\n', '\t\t        mintDSBIToken(msg.sender, CandyRate * 10**decimals);\n', '\t\t        blacklist[msg.sender] = true;\n', '\t\t    }\n', '\t    }\n', '    }\n', '    /* Initializes contract and  sets restricted addresses */\n', '    function DASABI_IO_Contract() public {\n', '        owner = msg.sender;\n', '        totalSupply = 1000000000 * 10**decimals;\n', '        ExchangeRate = 50000;\n', '        CandyRate = 50;\n', '        totalRemainSupply = totalSupply;\n', '        crowdsaleIsOpen = true;\n', '        CandyDropIsOpen = true;\n', '    }\n', '    \n', '    function setExchangeRate(uint256 _ExchangeRate) public onlyOwner {\n', '        ExchangeRate = _ExchangeRate;\n', '    }\n', '    \n', '    function crowdsaleOpen(bool _crowdsaleIsOpen) public onlyOwner{\n', '        crowdsaleIsOpen = _crowdsaleIsOpen;\n', '    }\n', '    \n', '    function CandyDropOpen(bool _CandyDropIsOpen) public onlyOwner{\n', '        CandyDropIsOpen = _CandyDropIsOpen;\n', '    }\n', '    \n', '    /* Returns total supply of issued tokens */\n', '    function totalDistributed() public constant returns (uint256)  {   \n', '        return totalSupply - totalRemainSupply ;\n', '    }\n', '\n', '    /* Returns balance of address */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /* Transfers tokens from your address to other */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require (balances[msg.sender] >= _value);            // Throw if sender has insufficient balance\n', '        require (balances[_to] + _value > balances[_to]);   // Throw if owerflow detected\n', '        balances[msg.sender] -= _value;                     // Deduct senders balance\n', '        balances[_to] += _value;                            // Add recivers blaance \n', '        Transfer(msg.sender, _to, _value);                  // Raise Transfer event\n', '        return true;\n', '    }\n', '\n', '    /* Approve other address to spend tokens on your account */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowances[msg.sender][_spender] = _value;          // Set allowance         \n', '        Approval(msg.sender, _spender, _value);             // Raise Approval event         \n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */ \n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {            \n', '        tokenRecipient spender = tokenRecipient(_spender);              // Cast spender to tokenRecipient contract         \n', '        approve(_spender, _value);                                      // Set approval to contract for _value         \n', '        spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract         \n', '        return true;     \n', '    }     \n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {      \n', '        require (balances[_from] > _value);                // Throw if sender does not have enough balance     \n', '        require (balances[_to] + _value > balances[_to]);  // Throw if overflow detected    \n', '        require (_value <= allowances[_from][msg.sender]);  // Throw if you do not have allowance       \n', '        balances[_from] -= _value;                          // Deduct senders balance    \n', '        balances[_to] += _value;                            // Add recipient blaance         \n', '        allowances[_from][msg.sender] -= _value;            // Deduct allowance for this address         \n', '        Transfer(_from, _to, _value);                       // Raise Transfer event\n', '        return true;     \n', '    }         \n', '\n', '    /* Get the amount of allowed tokens to spend */     \n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {         \n', '        return allowances[_owner][_spender];\n', '    }     \n', '        \n', '    /*withdraw Ether to a multisig address*/\n', '    function withdraw(address _multisigAddress) public onlyOwner {    \n', '        require(_multisigAddress != 0x0);\n', '        multisigAddress = _multisigAddress;\n', '        multisigAddress.transfer(this.balance);\n', '    }  \n', '    \n', '    /* Issue new tokens */     \n', '    function mintDSBIToken(address _to, uint256 _amount) internal { \n', '        require (balances[_to] + _amount > balances[_to]);      // Check for overflows\n', '        require (totalRemainSupply > _amount);\n', '        totalRemainSupply -= _amount;                           // Update total supply\n', '        balances[_to] += _amount;                               // Set minted coins to target\n', '        mintToken(_to, _amount);                                // Create Mint event       \n', '        Transfer(0x0, _to, _amount);                            // Create Transfer event from 0x\n', '    }  \n', '    \n', '    function mintTokens(address _sendTo, uint256 _sendAmount)public onlyOwner {\n', '        mintDSBIToken(_sendTo, _sendAmount);\n', '    }\n', '    \n', '    /* Destroy tokens from owners account */\n', '    function burnTokens(uint256 _amount)public onlyOwner {\n', '        require (balances[msg.sender] > _amount);               // Throw if you do not have enough balance\n', '        totalRemainSupply += _amount;                           // Deduct totalSupply\n', '        balances[msg.sender] -= _amount;                             // Destroy coins on senders wallet\n', '        burnToken(msg.sender, _amount);                              // Raise Burn event\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function Owned() public{\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function changeOwner(address _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract tokenRecipient { \n', '  function receiveApproval (address _from, uint256 _value, address _token, bytes _extraData) public;\n', '}\n', '\n', 'contract ERC20Token {\n', '\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant  returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract DASABI_IO_Contract is ERC20Token, Owned{\n', '\n', '    /* Public variables of the token */\n', '    string  public constant name = "dasabi.io DSBI";\n', '    string  public constant symbol = "DSBI";\n', '    uint256 public constant decimals = 18;\n', '    uint256 private constant etherChange = 10**18;\n', '    \n', '    /* Variables of the token */\n', '    uint256 public totalSupply;\n', '    uint256 public totalRemainSupply;\n', '    uint256 public ExchangeRate;\n', '    \n', '    uint256 public CandyRate;\n', '    \n', '    bool    public crowdsaleIsOpen;\n', '    bool    public CandyDropIsOpen;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowances;\n', '    mapping (address => bool) public blacklist;\n', '    \n', '    address public multisigAddress;\n', '    /* Events */\n', '    event mintToken(address indexed _to, uint256 _value);\n', '    event burnToken(address indexed _from, uint256 _value);\n', '    \n', '    function () payable public {\n', '        require (crowdsaleIsOpen == true);\n', '              \n', '        \n', '        if (msg.value > 0) {\n', '        \tmintDSBIToken(msg.sender, (msg.value * ExchangeRate * 10**decimals) / etherChange);\n', '        }\n', '        \n', '        if(CandyDropIsOpen){\n', '\t        if(!blacklist[msg.sender]){\n', '\t\t        mintDSBIToken(msg.sender, CandyRate * 10**decimals);\n', '\t\t        blacklist[msg.sender] = true;\n', '\t\t    }\n', '\t    }\n', '    }\n', '    /* Initializes contract and  sets restricted addresses */\n', '    function DASABI_IO_Contract() public {\n', '        owner = msg.sender;\n', '        totalSupply = 1000000000 * 10**decimals;\n', '        ExchangeRate = 50000;\n', '        CandyRate = 50;\n', '        totalRemainSupply = totalSupply;\n', '        crowdsaleIsOpen = true;\n', '        CandyDropIsOpen = true;\n', '    }\n', '    \n', '    function setExchangeRate(uint256 _ExchangeRate) public onlyOwner {\n', '        ExchangeRate = _ExchangeRate;\n', '    }\n', '    \n', '    function crowdsaleOpen(bool _crowdsaleIsOpen) public onlyOwner{\n', '        crowdsaleIsOpen = _crowdsaleIsOpen;\n', '    }\n', '    \n', '    function CandyDropOpen(bool _CandyDropIsOpen) public onlyOwner{\n', '        CandyDropIsOpen = _CandyDropIsOpen;\n', '    }\n', '    \n', '    /* Returns total supply of issued tokens */\n', '    function totalDistributed() public constant returns (uint256)  {   \n', '        return totalSupply - totalRemainSupply ;\n', '    }\n', '\n', '    /* Returns balance of address */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /* Transfers tokens from your address to other */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require (balances[msg.sender] >= _value);            // Throw if sender has insufficient balance\n', '        require (balances[_to] + _value > balances[_to]);   // Throw if owerflow detected\n', '        balances[msg.sender] -= _value;                     // Deduct senders balance\n', '        balances[_to] += _value;                            // Add recivers blaance \n', '        Transfer(msg.sender, _to, _value);                  // Raise Transfer event\n', '        return true;\n', '    }\n', '\n', '    /* Approve other address to spend tokens on your account */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowances[msg.sender][_spender] = _value;          // Set allowance         \n', '        Approval(msg.sender, _spender, _value);             // Raise Approval event         \n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */ \n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {            \n', '        tokenRecipient spender = tokenRecipient(_spender);              // Cast spender to tokenRecipient contract         \n', '        approve(_spender, _value);                                      // Set approval to contract for _value         \n', '        spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract         \n', '        return true;     \n', '    }     \n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {      \n', '        require (balances[_from] > _value);                // Throw if sender does not have enough balance     \n', '        require (balances[_to] + _value > balances[_to]);  // Throw if overflow detected    \n', '        require (_value <= allowances[_from][msg.sender]);  // Throw if you do not have allowance       \n', '        balances[_from] -= _value;                          // Deduct senders balance    \n', '        balances[_to] += _value;                            // Add recipient blaance         \n', '        allowances[_from][msg.sender] -= _value;            // Deduct allowance for this address         \n', '        Transfer(_from, _to, _value);                       // Raise Transfer event\n', '        return true;     \n', '    }         \n', '\n', '    /* Get the amount of allowed tokens to spend */     \n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {         \n', '        return allowances[_owner][_spender];\n', '    }     \n', '        \n', '    /*withdraw Ether to a multisig address*/\n', '    function withdraw(address _multisigAddress) public onlyOwner {    \n', '        require(_multisigAddress != 0x0);\n', '        multisigAddress = _multisigAddress;\n', '        multisigAddress.transfer(this.balance);\n', '    }  \n', '    \n', '    /* Issue new tokens */     \n', '    function mintDSBIToken(address _to, uint256 _amount) internal { \n', '        require (balances[_to] + _amount > balances[_to]);      // Check for overflows\n', '        require (totalRemainSupply > _amount);\n', '        totalRemainSupply -= _amount;                           // Update total supply\n', '        balances[_to] += _amount;                               // Set minted coins to target\n', '        mintToken(_to, _amount);                                // Create Mint event       \n', '        Transfer(0x0, _to, _amount);                            // Create Transfer event from 0x\n', '    }  \n', '    \n', '    function mintTokens(address _sendTo, uint256 _sendAmount)public onlyOwner {\n', '        mintDSBIToken(_sendTo, _sendAmount);\n', '    }\n', '    \n', '    /* Destroy tokens from owners account */\n', '    function burnTokens(uint256 _amount)public onlyOwner {\n', '        require (balances[msg.sender] > _amount);               // Throw if you do not have enough balance\n', '        totalRemainSupply += _amount;                           // Deduct totalSupply\n', '        balances[msg.sender] -= _amount;                             // Destroy coins on senders wallet\n', '        burnToken(msg.sender, _amount);                              // Raise Burn event\n', '    }\n', '}']
