['contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original owner of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function minimum( uint a, uint b) internal returns ( uint result) {\n', '    if ( a <= b ) {\n', '      result = a;\n', '    }\n', '    else {\n', '      result = b;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '   \n', '   function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling approve(_spender, 0) if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract OZTGToken is StandardToken, Ownable {\n', '\n', ' /* Overriding some ERC20 variables */\n', ' string public constant name      = "OZTGToken";\n', ' string public constant symbol    = "OZTG";\n', ' uint256 public constant decimals = 18;\n', '\n', ' uint256 public constant MAX_NUM_OZTG_TOKENS    =  730000000 * 10 ** decimals;\n', '\n', ' // Freeze duration for Advisors accounts\n', ' uint256 public constant START_ICO_TIMESTAMP   = 1526565600;  // ICO starts at 17.05.2018 @ 2PM UTC\n', ' int public constant DEFROST_MONTH_IN_MINUTES = 43200; // month in minutes\n', ' int public constant DEFROST_MONTHS = 3;\n', '\n', ' /*\n', '  modalités de sorties des advisors investisseurs ou des earlybirds j’opte pour\n', '  - un Freeze à 6 mois puis au bout du 6ème mois\n', '  - possible de sortir du capital de 50% du montant investi\n', '  - puis par la suite 5% tous les mois ce qui nous donnera une sortie effective au bout de 10 mois et au total ça fera donc 16 mois\n', ' */\n', '\n', ' uint public constant DEFROST_FACTOR = 20;\n', '\n', ' // Fields that can be changed by functions\n', ' address[] public vIcedBalances;\n', ' mapping (address => uint256) public icedBalances_frosted;\n', '    mapping (address => uint256) public icedBalances_defrosted;\n', '\n', ' // Variable usefull for verifying that the assignedSupply matches that totalSupply\n', ' uint256 public assignedSupply;\n', ' //Boolean to allow or not the initial assignement of token (batch)\n', ' bool public batchAssignStopped = false;\n', ' bool public stopDefrost = false;\n', '\n', ' uint oneTokenWeiPrice;\n', ' address defroster;\n', '\n', ' function OZTGToken() {\n', '  owner                 = msg.sender;\n', '  assignedSupply = 0;\n', '\n', '  // mint all tokens\n', '  totalSupply = MAX_NUM_OZTG_TOKENS;\n', '        balances[msg.sender] = MAX_NUM_OZTG_TOKENS;\n', '        Transfer(address(0x0), msg.sender, MAX_NUM_OZTG_TOKENS);\n', ' }\n', '\n', ' function setDefroster(address addr) onlyOwner {\n', '  defroster = addr;\n', ' }\n', '\n', '  modifier onlyDefrosterOrOwner() {\n', '        require(msg.sender == defroster || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', ' /**\n', '   * @dev Transfer tokens in batches (of adresses)\n', '   * @param _vaddr address The address which you want to send tokens from\n', '   * @param _vamounts address The address which you want to transfer to\n', '   */\n', '  function batchAssignTokens(address[] _vaddr, uint[] _vamounts, uint[] _vDefrostClass )\n', '  \n', '  onlyOwner {\n', '\n', '   require ( batchAssignStopped == false );\n', '   require ( _vaddr.length == _vamounts.length && _vaddr.length == _vDefrostClass.length);\n', '   //Looping into input arrays to assign target amount to each given address\n', '   for (uint index=0; index<_vaddr.length; index++) {\n', '\n', '    address toAddress = _vaddr[index];\n', '    uint amount = SafeMath.mul(_vamounts[index], 10 ** decimals);\n', '    uint defrostClass = _vDefrostClass[index]; // 0=ico investor, 1=reserveandteam/advisors\n', '\n', '    if (  defrostClass == 0 ) {\n', '     // investor account\n', '     transfer(toAddress, amount);\n', '     assignedSupply = SafeMath.add(assignedSupply, amount);\n', '    }\n', '    else if(defrostClass == 1){\n', '\n', '     // Iced account. The balance is not affected here\n', '                    vIcedBalances.push(toAddress);\n', '                    icedBalances_frosted[toAddress] = amount;\n', '     icedBalances_defrosted[toAddress] = 0;\n', '     assignedSupply = SafeMath.add(assignedSupply, amount);\n', '    }\n', '   }\n', ' }\n', '\n', ' function getBlockTimestamp() constant returns (uint256){\n', '  return now;\n', ' }\n', '\n', ' function getAssignedSupply() constant returns (uint256){\n', '  return assignedSupply;\n', ' }\n', '\n', ' function elapsedMonthsFromICOStart() constant returns (int elapsed) {\n', '  elapsed = (int(now-START_ICO_TIMESTAMP)/60)/DEFROST_MONTH_IN_MINUTES;\n', ' }\n', '\n', ' function getDefrostFactor()constant returns (uint){\n', '  return DEFROST_FACTOR;\n', ' }\n', '\n', ' function lagDefrost()constant returns (int){\n', '  return DEFROST_MONTHS;\n', ' }\n', '\n', ' function canDefrost() constant returns (bool){\n', '  int numMonths = elapsedMonthsFromICOStart();\n', '  return  numMonths > DEFROST_MONTHS &&\n', '       uint(numMonths) <= SafeMath.add(uint(DEFROST_MONTHS),  DEFROST_FACTOR/2+1);\n', ' }\n', '\n', ' function defrostTokens(uint fromIdx, uint toIdx) onlyDefrosterOrOwner {\n', '\n', '  require(now>START_ICO_TIMESTAMP);\n', '  require(stopDefrost == false);\n', '  require(fromIdx>=0 && toIdx<=vIcedBalances.length);\n', '  if(fromIdx==0 && toIdx==0){\n', '   fromIdx = 0;\n', '   toIdx = vIcedBalances.length;\n', '  }\n', '\n', '  int monthsElapsedFromFirstDefrost = elapsedMonthsFromICOStart() - DEFROST_MONTHS;\n', '  require(monthsElapsedFromFirstDefrost>0);\n', '  uint monthsIndex = uint(monthsElapsedFromFirstDefrost);\n', '  //require(monthsIndex<=DEFROST_FACTOR);\n', '  require(canDefrost() == true);\n', '\n', '  /*\n', '   if monthsIndex == 1 => defrost 50%\n', '   else if monthsIndex <= 10  defrost 5%\n', '  */\n', '\n', '  // Looping into the iced accounts\n', '        for (uint index = fromIdx; index < toIdx; index++) {\n', '\n', '   address currentAddress = vIcedBalances[index];\n', '            uint256 amountTotal = SafeMath.add(icedBalances_frosted[currentAddress], icedBalances_defrosted[currentAddress]);\n', '            uint256 targetDeFrosted = 0;\n', '   uint256 fivePercAmount = SafeMath.div(amountTotal, DEFROST_FACTOR);\n', '   if(monthsIndex==1){\n', '    targetDeFrosted = SafeMath.mul(fivePercAmount, 10);  //  10 times 5% = 50%\n', '   }else{\n', '    targetDeFrosted = SafeMath.mul(fivePercAmount, 10) + SafeMath.div(SafeMath.mul(monthsIndex-1, amountTotal), DEFROST_FACTOR);\n', '   }\n', '            uint256 amountToRelease = SafeMath.sub(targetDeFrosted, icedBalances_defrosted[currentAddress]);\n', '\n', '      if (amountToRelease > 0 && targetDeFrosted > 0) {\n', '                icedBalances_frosted[currentAddress] = SafeMath.sub(icedBalances_frosted[currentAddress], amountToRelease);\n', '                icedBalances_defrosted[currentAddress] = SafeMath.add(icedBalances_defrosted[currentAddress], amountToRelease);\n', '    transfer(currentAddress, amountToRelease);\n', '         }\n', '        }\n', ' }\n', '\n', ' function getStartIcoTimestamp() constant returns (uint) {\n', '  return START_ICO_TIMESTAMP;\n', ' }\n', '\n', ' function stopBatchAssign() onlyOwner {\n', '   require ( batchAssignStopped == false);\n', '   batchAssignStopped = true;\n', ' }\n', '\n', ' function getAddressBalance(address addr) constant returns (uint256 balance)  {\n', '   balance = balances[addr];\n', ' }\n', '\n', ' function getAddressAndBalance(address addr) constant returns (address _address, uint256 _amount)  {\n', '   _address = addr;\n', '   _amount = balances[addr];\n', ' }\n', '\n', ' function setStopDefrost() onlyOwner {\n', '   stopDefrost = true;\n', ' }\n', '\n', ' function killContract() onlyOwner {\n', '  selfdestruct(owner);\n', ' }\n', '\n', '\n', '}']