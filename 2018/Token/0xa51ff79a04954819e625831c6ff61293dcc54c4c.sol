['//File: node_modules\\openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\SafeERC20.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\ownership\\CanReclaimToken.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\math\\SafeMath.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '//File: contracts\\ico\\KYCBase.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '// Abstract base contract\n', 'contract KYCBase {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => bool) public isKycSigner;\n', '    mapping (uint64 => uint256) public alreadyPayed;\n', '\n', '    event KycVerified(address indexed signer, address buyerAddress, uint64 buyerId, uint maxAmount);\n', '\n', '    constructor(address[] kycSigners) internal {\n', '        for (uint i = 0; i < kycSigners.length; i++) {\n', '            isKycSigner[kycSigners[i]] = true;\n', '        }\n', '    }\n', '\n', '    // Must be implemented in descending contract to assign tokens to the buyers. Called after the KYC verification is passed\n', '    function releaseTokensTo(address buyer) internal returns(bool);\n', '\n', '    // This method can be overridden to enable some sender to buy token for a different address\n', '    function senderAllowedFor(address buyer)\n', '    internal view returns(bool)\n', '    {\n', '        return buyer == msg.sender;\n', '    }\n', '\n', '    function buyTokensFor(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n', '    public payable returns (bool)\n', '    {\n', '        require(senderAllowedFor(buyerAddress));\n', '        return buyImplementation(buyerAddress, buyerId, maxAmount, v, r, s);\n', '    }\n', '\n', '    function buyTokens(uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n', '    public payable returns (bool)\n', '    {\n', '        return buyImplementation(msg.sender, buyerId, maxAmount, v, r, s);\n', '    }\n', '\n', '    function buyImplementation(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n', '    private returns (bool)\n', '    {\n', '        // check the signature\n', '        bytes32 hash = sha256(abi.encodePacked("Eidoo icoengine authorization", this, buyerAddress, buyerId, maxAmount));\n', '        address signer = ecrecover(hash, v, r, s);\n', '        if (!isKycSigner[signer]) {\n', '            revert();\n', '        } else {\n', '            uint256 totalPayed = alreadyPayed[buyerId].add(msg.value);\n', '            require(totalPayed <= maxAmount);\n', '            alreadyPayed[buyerId] = totalPayed;\n', '            emit KycVerified(signer, buyerAddress, buyerId, maxAmount);\n', '            return releaseTokensTo(buyerAddress);\n', '        }\n', '    }\n', '\n', '    // No payable fallback function, the tokens must be buyed using the functions buyTokens and buyTokensFor\n', '    function () public {\n', '        revert();\n', '    }\n', '}\n', '//File: contracts\\ico\\ICOEngineInterface.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract ICOEngineInterface {\n', '\n', '    // false if the ico is not started, true if the ico is started and running, true if the ico is completed\n', '    function started() public view returns(bool);\n', '\n', '    // false if the ico is not started, false if the ico is started and running, true if the ico is completed\n', '    function ended() public view returns(bool);\n', '\n', '    // time stamp of the starting time of the ico, must return 0 if it depends on the block number\n', '    function startTime() public view returns(uint);\n', '\n', '    // time stamp of the ending time of the ico, must retrun 0 if it depends on the block number\n', '    function endTime() public view returns(uint);\n', '\n', '    // Optional function, can be implemented in place of startTime\n', '    // Returns the starting block number of the ico, must return 0 if it depends on the time stamp\n', '    // function startBlock() public view returns(uint);\n', '\n', '    // Optional function, can be implemented in place of endTime\n', '    // Returns theending block number of the ico, must retrun 0 if it depends on the time stamp\n', '    // function endBlock() public view returns(uint);\n', '\n', '    // returns the total number of the tokens available for the sale, must not change when the ico is started\n', '    function totalTokens() public view returns(uint);\n', '\n', '    // returns the number of the tokens available for the ico. At the moment that the ico starts it must be equal to totalTokens(),\n', '    // then it will decrease. It is used to calculate the percentage of sold tokens as remainingTokens() / totalTokens()\n', '    function remainingTokens() public view returns(uint);\n', '\n', '    // return the price as number of tokens released for each ether\n', '    function price() public view returns(uint);\n', '}\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\MintableToken.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\PausableToken.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\BurnableToken.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '//File: contracts\\ico\\GotToken.sol\n', '/**\n', ' * @title ParkinGO token\n', ' *\n', ' * @version 1.0\n', ' * @author ParkinGO\n', ' */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract GotToken is CanReclaimToken, MintableToken, PausableToken, BurnableToken {\n', '    string public constant name = "GOToken";\n', '    string public constant symbol = "GOT";\n', '    uint8 public constant decimals = 18;\n', '\n', '    /**\n', '     * @dev Constructor of GotToken that instantiates a new Mintable Pausable Token\n', '     */\n', '    constructor() public {\n', '        // token should not be transferable until after all tokens have been issued\n', '        paused = true;\n', '    }\n', '}\n', '\n', '\n', '//File: contracts\\ico\\PGOVault.sol\n', '/**\n', ' * @title PGOVault\n', ' * @dev A token holder contract that allows the release of tokens to the ParkinGo Wallet.\n', ' *\n', ' * @version 1.0\n', ' * @author ParkinGo\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract PGOVault {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for GotToken;\n', '\n', '    uint256[4] public vesting_offsets = [\n', '        360 days,\n', '        540 days,\n', '        720 days,\n', '        900 days\n', '    ];\n', '\n', '    uint256[4] public vesting_amounts = [\n', '        0.875e7 * 1e18,\n', '        0.875e7 * 1e18,\n', '        0.875e7 * 1e18,\n', '        0.875e7 * 1e18\n', '    ];\n', '\n', '    address public pgoWallet;\n', '    GotToken public token;\n', '    uint256 public start;\n', '    uint256 public released;\n', '    uint256 public vestingOffsetsLength = vesting_offsets.length;\n', '\n', '    /**\n', '     * @dev Constructor.\n', '     * @param _pgoWallet The address that will receive the vested tokens.\n', '     * @param _token The GOT Token, which is being vested.\n', '     * @param _start The start time from which each release time will be calculated.\n', '     */\n', '    constructor(\n', '        address _pgoWallet,\n', '        address _token,\n', '        uint256 _start\n', '    )\n', '        public\n', '    {\n', '        pgoWallet = _pgoWallet;\n', '        token = GotToken(_token);\n', '        start = _start;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers vested tokens to ParkinGo Wallet.\n', '     */\n', '    function release() public {\n', '        uint256 unreleased = releasableAmount();\n', '        require(unreleased > 0);\n', '\n', '        released = released.add(unreleased);\n', '\n', '        token.safeTransfer(pgoWallet, unreleased);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount that has already vested but hasn&#39;t been released yet.\n', '     */\n', '    function releasableAmount() public view returns (uint256) {\n', '        return vestedAmount().sub(released);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount that has already vested.\n', '     */\n', '    function vestedAmount() public view returns (uint256) {\n', '        uint256 vested = 0;\n', '        for (uint256 i = 0; i < vestingOffsetsLength; i = i.add(1)) {\n', '            if (block.timestamp > start.add(vesting_offsets[i])) {\n', '                vested = vested.add(vesting_amounts[i]);\n', '            }\n', '        }\n', '        return vested;\n', '    }\n', '    \n', '    /**\n', '     * @dev Calculates the amount that has not yet released.\n', '     */\n', '    function unreleasedAmount() public view returns (uint256) {\n', '        uint256 unreleased = 0;\n', '        for (uint256 i = 0; i < vestingOffsetsLength; i = i.add(1)) {\n', '            unreleased = unreleased.add(vesting_amounts[i]);\n', '        }\n', '        return unreleased.sub(released);\n', '    }\n', '}\n', '\n', '\n', '//File: contracts\\ico\\PGOMonthlyInternalVault.sol\n', '/**\n', ' * @title PGOMonthlyVault\n', ' * @dev A token holder contract that allows the release of tokens after a vesting period.\n', ' *\n', ' * @version 1.0\n', ' * @author ParkinGO\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract PGOMonthlyInternalVault {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for GotToken;\n', '\n', '    struct Investment {\n', '        address beneficiary;\n', '        uint256 totalBalance;\n', '        uint256 released;\n', '    }\n', '\n', '    /*** CONSTANTS ***/\n', '    uint256 public constant VESTING_DIV_RATE = 21;                  // division rate of monthly vesting\n', '    uint256 public constant VESTING_INTERVAL = 30 days;             // vesting interval\n', '    uint256 public constant VESTING_CLIFF = 90 days;                // duration until cliff is reached\n', '    uint256 public constant VESTING_DURATION = 720 days;            // vesting duration\n', '\n', '    GotToken public token;\n', '    uint256 public start;\n', '    uint256 public end;\n', '    uint256 public cliff;\n', '\n', '    //Investment[] public investments;\n', '\n', '    // key: investor address; value: index in investments array.\n', '    //mapping(address => uint256) public investorLUT;\n', '\n', '    mapping(address => Investment) public investments;\n', '\n', '    /**\n', '     * @dev Function to be fired by the initPGOMonthlyInternalVault function from the GotCrowdSale contract to set the\n', '     * InternalVault&#39;s state after deployment.\n', '     * @param beneficiaries Array of the internal investors addresses to whom vested tokens are transferred.\n', '     * @param balances Array of token amount per beneficiary.\n', '     * @param startTime Start time at which the first released will be executed, and from which the cliff for second\n', '     * release is calculated.\n', '     * @param _token The address of the GOT Token.\n', '     */\n', '    function init(address[] beneficiaries, uint256[] balances, uint256 startTime, address _token) public {\n', '        // makes sure this function is only called once\n', '        require(token == address(0));\n', '        require(beneficiaries.length == balances.length);\n', '\n', '        start = startTime;\n', '        cliff = start.add(VESTING_CLIFF);\n', '        end = start.add(VESTING_DURATION);\n', '\n', '        token = GotToken(_token);\n', '\n', '        for (uint256 i = 0; i < beneficiaries.length; i = i.add(1)) {\n', '            investments[beneficiaries[i]] = Investment(beneficiaries[i], balances[i], 0);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Allows a sender to transfer vested tokens to the beneficiary&#39;s address.\n', '     * @param beneficiary The address that will receive the vested tokens.\n', '     */\n', '    function release(address beneficiary) public {\n', '        uint256 unreleased = releasableAmount(beneficiary);\n', '        require(unreleased > 0);\n', '\n', '        investments[beneficiary].released = investments[beneficiary].released.add(unreleased);\n', '        token.safeTransfer(beneficiary, unreleased);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers vested tokens to the sender&#39;s address.\n', '     */\n', '    function release() public {\n', '        release(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows to check an investment.\n', '     * @param beneficiary The address of the beneficiary of the investment to check.\n', '     */\n', '    function getInvestment(address beneficiary) public view returns(address, uint256, uint256) {\n', '        return (\n', '            investments[beneficiary].beneficiary,\n', '            investments[beneficiary].totalBalance,\n', '            investments[beneficiary].released\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount that has already vested but hasn&#39;t been released yet.\n', '     * @param beneficiary The address that will receive the vested tokens.\n', '     */\n', '    function releasableAmount(address beneficiary) public view returns (uint256) {\n', '        return vestedAmount(beneficiary).sub(investments[beneficiary].released);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount that has already vested.\n', '     * @param beneficiary The address that will receive the vested tokens.\n', '     */\n', '    function vestedAmount(address beneficiary) public view returns (uint256) {\n', '        uint256 vested = 0;\n', '        if (block.timestamp >= cliff && block.timestamp < end) {\n', '            // after cliff -> 1/21 of totalBalance every month, must skip first 3 months\n', '            uint256 totalBalance = investments[beneficiary].totalBalance;\n', '            uint256 monthlyBalance = totalBalance.div(VESTING_DIV_RATE);\n', '            uint256 time = block.timestamp.sub(cliff);\n', '            uint256 elapsedOffsets = time.div(VESTING_INTERVAL);\n', '            uint256 vestedToSum = elapsedOffsets.mul(monthlyBalance);\n', '            vested = vested.add(vestedToSum);\n', '        }\n', '        if (block.timestamp >= end) {\n', '            // after end -> all vested\n', '            vested = investments[beneficiary].totalBalance;\n', '        }\n', '        return vested;\n', '    }\n', '}\n', '\n', '\n', '//File: contracts\\ico\\PGOMonthlyPresaleVault.sol\n', '/**\n', ' * @title PGOMonthlyVault\n', ' * @dev A token holder contract that allows the release of tokens after a vesting period.\n', ' *\n', ' * @version 1.0\n', ' * @author ParkinGO\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract PGOMonthlyPresaleVault is PGOMonthlyInternalVault {\n', '    /**\n', '     * @dev OVERRIDE vestedAmount from PGOMonthlyInternalVault\n', '     * Calculates the amount that has already vested, release 1/3 of token immediately.\n', '     * @param beneficiary The address that will receive the vested tokens.\n', '     */\n', '    function vestedAmount(address beneficiary) public view returns (uint256) {\n', '        uint256 vested = 0;\n', '\n', '        if (block.timestamp >= start) {\n', '            // after start -> 1/3 released (fixed)\n', '            vested = investments[beneficiary].totalBalance.div(3);\n', '        }\n', '        if (block.timestamp >= cliff && block.timestamp < end) {\n', '            // after cliff -> 1/27 of totalBalance every month, must skip first 9 month \n', '            uint256 unlockedStartBalance = investments[beneficiary].totalBalance.div(3);\n', '            uint256 totalBalance = investments[beneficiary].totalBalance;\n', '            uint256 lockedBalance = totalBalance.sub(unlockedStartBalance);\n', '            uint256 monthlyBalance = lockedBalance.div(VESTING_DIV_RATE);\n', '            uint256 daysToSkip = 90 days;\n', '            uint256 time = block.timestamp.sub(start).sub(daysToSkip);\n', '            uint256 elapsedOffsets = time.div(VESTING_INTERVAL);\n', '            vested = vested.add(elapsedOffsets.mul(monthlyBalance));\n', '        }\n', '        if (block.timestamp >= end) {\n', '            // after end -> all vested\n', '            vested = investments[beneficiary].totalBalance;\n', '        }\n', '        return vested;\n', '    }\n', '}\n', '\n', '\n', '//File: contracts\\ico\\GotCrowdSale.sol\n', '/**\n', ' * @title GotCrowdSale\n', ' *\n', ' * @version 1.0\n', ' * @author ParkinGo\n', ' */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract GotCrowdSale is Pausable, CanReclaimToken, ICOEngineInterface, KYCBase {\n', '    /*** CONSTANTS ***/\n', '    uint256 public constant START_TIME = 1529416800;\n', '    //uint256 public constant START_TIME = 1529416800;                     // 19 June 2018 14:00:00 GMT\n', '    uint256 public constant END_TIME = 1530655140;                       // 03 July 2018 21:59:00 GMT\n', '    //uint256 public constant USD_PER_TOKEN = 75;                          // 0.75$\n', '    //uint256 public constant USD_PER_ETHER = 60000;                       // REMEMBER TO CHANGE IT AT ICO START\n', '    uint256 public constant TOKEN_PER_ETHER = 740;                       // REMEMBER TO CHANGE IT AT ICO START\n', '\n', '    //Token allocation\n', '    //Team, founder, partners and advisor cap locked using Monthly Internal Vault\n', '    uint256 public constant MONTHLY_INTERNAL_VAULT_CAP = 2.85e7 * 1e18;\n', '    //Company unlocked liquidity and Airdrop allocation\n', '    uint256 public constant PGO_UNLOCKED_LIQUIDITY_CAP = 1.5e7 * 1e18;\n', '    //Internal reserve fund\n', '    uint256 public constant PGO_INTERNAL_RESERVE_CAP = 3.5e7 * 1e18;\n', '    //Reserved Presale Allocation 33% free and 67% locked using Monthly Presale Vault\n', '    uint256 public constant RESERVED_PRESALE_CAP = 1.5754888e7 * 1e18;\n', '    //ICO TOKEN ALLOCATION\n', '    //Public ICO Cap\n', '    //uint256 public constant CROWDSALE_CAP = 0.15e7 * 1e18;\n', '    //Reservation contract Cap\n', '    uint256 public constant RESERVATION_CAP = 0.4297111e7 * 1e18;\n', '    //TOTAL ICO CAP\n', '    uint256 public constant TOTAL_ICO_CAP = 0.5745112e7 * 1e18;\n', '\n', '    uint256 public start;                                             // ICOEngineInterface\n', '    uint256 public end;                                               // ICOEngineInterface\n', '    uint256 public cap;                                               // ICOEngineInterface\n', '    uint256 public tokenPerEth;\n', '    uint256 public availableTokens;                                   // ICOEngineInterface\n', '    address[] public kycSigners;                                      // KYCBase\n', '    bool public capReached;\n', '    uint256 public weiRaised;\n', '    uint256 public tokensSold;\n', '\n', '    // Vesting contracts.\n', '    //Unlock funds after 9 months monthly\n', '    PGOMonthlyInternalVault public pgoMonthlyInternalVault;\n', '    //Unlock 1/3 funds immediately and remaining after 9 months monthly\n', '    PGOMonthlyPresaleVault public pgoMonthlyPresaleVault;\n', '    //Unlock funds after 12 months 25% every 6 months\n', '    PGOVault public pgoVault;\n', '\n', '    // Vesting wallets.\n', '    address public pgoInternalReserveWallet;\n', '    //Unlocked wallets\n', '    address public pgoUnlockedLiquidityWallet;\n', '    //ether wallet\n', '    address public wallet;\n', '\n', '    GotToken public token;\n', '\n', '    // Lets owner manually end crowdsale.\n', '    bool public didOwnerEndCrowdsale;\n', '\n', '    /**\n', '     * @dev Constructor.\n', '     * @param _token address contract got tokens.\n', '     * @param _wallet The address where funds should be transferred.\n', '     * @param _pgoInternalReserveWallet The address where token will be send after vesting should be transferred.\n', '     * @param _pgoUnlockedLiquidityWallet The address where token will be send after vesting should be transferred.\n', '     * @param _pgoMonthlyInternalVault The address of internal funds vault contract with monthly unlocking after 9 months.\n', '     * @param _pgoMonthlyPresaleVault The address of presale funds vault contract with 1/3 free funds and monthly unlocking after 9 months.\n', '     * @param _kycSigners Array of the signers addresses required by the KYCBase constructor, provided by Eidoo.\n', '     * See https://github.com/eidoo/icoengine\n', '     */\n', '    constructor(\n', '        address _token,\n', '        address _wallet,\n', '        address _pgoInternalReserveWallet,\n', '        address _pgoUnlockedLiquidityWallet,\n', '        address _pgoMonthlyInternalVault,\n', '        address _pgoMonthlyPresaleVault,\n', '        address[] _kycSigners\n', '    )\n', '        public\n', '        KYCBase(_kycSigners)\n', '    {\n', '        require(END_TIME >= START_TIME);\n', '        require(TOTAL_ICO_CAP > 0);\n', '\n', '        start = START_TIME;\n', '        end = END_TIME;\n', '        cap = TOTAL_ICO_CAP;\n', '        wallet = _wallet;\n', '        tokenPerEth = TOKEN_PER_ETHER;// USD_PER_ETHER.div(USD_PER_TOKEN);\n', '        availableTokens = TOTAL_ICO_CAP;\n', '        kycSigners = _kycSigners;\n', '\n', '        token = GotToken(_token);\n', '        pgoMonthlyInternalVault = PGOMonthlyInternalVault(_pgoMonthlyInternalVault);\n', '        pgoMonthlyPresaleVault = PGOMonthlyPresaleVault(_pgoMonthlyPresaleVault);\n', '        pgoInternalReserveWallet = _pgoInternalReserveWallet;\n', '        pgoUnlockedLiquidityWallet = _pgoUnlockedLiquidityWallet;\n', '        wallet = _wallet;\n', '        // Creates ParkinGo vault contract\n', '        pgoVault = new PGOVault(pgoInternalReserveWallet, address(token), END_TIME);\n', '    }\n', '\n', '    /**\n', '     * @dev Mints unlocked tokens to unlockedLiquidityWallet and\n', '     * assings tokens to be held into the internal reserve vault contracts.\n', '     * To be called by the crowdsale&#39;s owner only.\n', '     */\n', '    function mintPreAllocatedTokens() public onlyOwner {\n', '        mintTokens(pgoUnlockedLiquidityWallet, PGO_UNLOCKED_LIQUIDITY_CAP);\n', '        mintTokens(address(pgoVault), PGO_INTERNAL_RESERVE_CAP);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the state of the internal monthly locked vault contract and mints tokens.\n', '     * It will contains all TEAM, FOUNDER, ADVISOR and PARTNERS tokens.\n', '     * All token are locked for the first 9 months and then unlocked monthly.\n', '     * It will check that all internal token are correctly allocated.\n', '     * So far, the internal monthly vault contract has been deployed and this function\n', '     * needs to be called to set its investments and vesting conditions.\n', '     * @param beneficiaries Array of the internal addresses to whom vested tokens are transferred.\n', '     * @param balances Array of token amount per beneficiary.\n', '     */\n', '    function initPGOMonthlyInternalVault(address[] beneficiaries, uint256[] balances)\n', '        public\n', '        onlyOwner\n', '        equalLength(beneficiaries, balances)\n', '    {\n', '        uint256 totalInternalBalance = 0;\n', '        uint256 balancesLength = balances.length;\n', '\n', '        for (uint256 i = 0; i < balancesLength; i++) {\n', '            totalInternalBalance = totalInternalBalance.add(balances[i]);\n', '        }\n', '        //check that all balances matches internal vault allocated Cap\n', '        require(totalInternalBalance == MONTHLY_INTERNAL_VAULT_CAP);\n', '\n', '        pgoMonthlyInternalVault.init(beneficiaries, balances, END_TIME, token);\n', '\n', '        mintTokens(address(pgoMonthlyInternalVault), MONTHLY_INTERNAL_VAULT_CAP);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the state of the reserved presale vault contract and mints reserved presale tokens. \n', '     * It will contains all reserved PRESALE token,\n', '     * 1/3 of tokens are free and the remaining are locked for the first 9 months and then unlocked monthly.\n', '     * It will check that all reserved presale token are correctly allocated.\n', '     * So far, the monthly presale vault contract has been deployed and\n', '     * this function needs to be called to set its investments and vesting conditions.\n', '     * @param beneficiaries Array of the presale investors addresses to whom vested tokens are transferred.\n', '     * @param balances Array of token amount per beneficiary.\n', '     */\n', '    function initPGOMonthlyPresaleVault(address[] beneficiaries, uint256[] balances)\n', '        public\n', '        onlyOwner\n', '        equalLength(beneficiaries, balances)\n', '    {\n', '        uint256 totalPresaleBalance = 0;\n', '        uint256 balancesLength = balances.length;\n', '\n', '        for (uint256 i = 0; i < balancesLength; i++) {\n', '            totalPresaleBalance = totalPresaleBalance.add(balances[i]);\n', '        }\n', '        //check that all balances matches internal vault allocated Cap\n', '        require(totalPresaleBalance == RESERVED_PRESALE_CAP);\n', '\n', '        pgoMonthlyPresaleVault.init(beneficiaries, balances, END_TIME, token);\n', '\n', '        mintTokens(address(pgoMonthlyPresaleVault), totalPresaleBalance);\n', '    }\n', '\n', '    /**\n', '     * @dev Mint all token collected by second private presale (called reservation),\n', '     * all KYC control are made outside contract under responsability of ParkinGO.\n', '     * Also, updates tokensSold and availableTokens in the crowdsale contract,\n', '     * it checks that sold token are less than reservation contract cap.\n', '     * @param beneficiaries Array of the reservation user that bought tokens in private reservation sale.\n', '     * @param balances Array of token amount per beneficiary.\n', '     */\n', '    function mintReservation(address[] beneficiaries, uint256[] balances)\n', '        public\n', '        onlyOwner\n', '        equalLength(beneficiaries, balances)\n', '    {\n', '        //require(tokensSold == 0);\n', '\n', '        uint256 totalReservationBalance = 0;\n', '        uint256 balancesLength = balances.length;\n', '\n', '        for (uint256 i = 0; i < balancesLength; i++) {\n', '            totalReservationBalance = totalReservationBalance.add(balances[i]);\n', '            uint256 amount = balances[i];\n', '            //update token sold of crowdsale contract\n', '            tokensSold = tokensSold.add(amount);\n', '            //update available token of crowdsale contract\n', '            availableTokens = availableTokens.sub(amount);\n', '            mintTokens(beneficiaries[i], amount);\n', '        }\n', '\n', '        require(totalReservationBalance <= RESERVATION_CAP);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to close the crowdsale manually before the end time.\n', '     */\n', '    function closeCrowdsale() public onlyOwner {\n', '        require(block.timestamp >= START_TIME && block.timestamp < END_TIME);\n', '        didOwnerEndCrowdsale = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to unpause tokens, stop minting and transfer ownership of the token contract.\n', '     */\n', '    function finalise() public onlyOwner {\n', '        require(didOwnerEndCrowdsale || block.timestamp > end || capReached);\n', '\n', '        token.finishMinting();\n', '        token.unpause();\n', '\n', '        // Token contract extends CanReclaimToken so the owner can recover\n', '        // any ERC20 token received in this contract by mistake.\n', '        // So far, the owner of the token contract is the crowdsale contract.\n', '        // We transfer the ownership so the owner of the crowdsale is also the owner of the token.\n', '        token.transferOwnership(owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Implements the price function from EidooEngineInterface.\n', '     * @notice Calculates the price as tokens/ether based on the corresponding bonus bracket.\n', '     * @return Price as tokens/ether.\n', '     */\n', '    function price() public view returns (uint256 _price) {\n', '        return tokenPerEth;\n', '    }\n', '\n', '    /**\n', '     * @dev Implements the ICOEngineInterface.\n', '     * @return False if the ico is not started, true if the ico is started and running, true if the ico is completed.\n', '     */\n', '    function started() public view returns(bool) {\n', '        if (block.timestamp >= start) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Implements the ICOEngineInterface.\n', '     * @return False if the ico is not started, false if the ico is started and running, true if the ico is completed.\n', '     */\n', '    function ended() public view returns(bool) {\n', '        if (block.timestamp >= end) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Implements the ICOEngineInterface.\n', '     * @return Timestamp of the ico start time.\n', '     */\n', '    function startTime() public view returns(uint) {\n', '        return start;\n', '    }\n', '\n', '    /**\n', '     * @dev Implements the ICOEngineInterface.\n', '     * @return Timestamp of the ico end time.\n', '     */\n', '    function endTime() public view returns(uint) {\n', '        return end;\n', '    }\n', '\n', '    /**\n', '     * @dev Implements the ICOEngineInterface.\n', '     * @return The total number of the tokens available for the sale, must not change when the ico is started.\n', '     */\n', '    function totalTokens() public view returns(uint) {\n', '        return cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Implements the ICOEngineInterface.\n', '     * @return The number of the tokens available for the ico.\n', '     * At the moment the ico starts it must be equal to totalTokens(),\n', '     * then it will decrease.\n', '     */\n', '    function remainingTokens() public view returns(uint) {\n', '        return availableTokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Implements the KYCBase senderAllowedFor function to enable a sender to buy tokens for a different address.\n', '     * @return true.\n', '     */\n', '    function senderAllowedFor(address buyer) internal view returns(bool) {\n', '        require(buyer != address(0));\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Implements the KYCBase releaseTokensTo function to mint tokens for an investor.\n', '     * Called after the KYC process has passed.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function releaseTokensTo(address buyer) internal returns(bool) {\n', '        require(validPurchase());\n', '\n', '        uint256 overflowTokens;\n', '        uint256 refundWeiAmount;\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 tokenAmount = weiAmount.mul(price());\n', '\n', '        if (tokenAmount >= availableTokens) {\n', '            capReached = true;\n', '            overflowTokens = tokenAmount.sub(availableTokens);\n', '            tokenAmount = tokenAmount.sub(overflowTokens);\n', '            refundWeiAmount = overflowTokens.div(price());\n', '            weiAmount = weiAmount.sub(refundWeiAmount);\n', '            buyer.transfer(refundWeiAmount);\n', '        }\n', '\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        tokensSold = tokensSold.add(tokenAmount);\n', '        availableTokens = availableTokens.sub(tokenAmount);\n', '        mintTokens(buyer, tokenAmount);\n', '        forwardFunds(weiAmount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Fired by the releaseTokensTo function after minting tokens,\n', '     * to forward the raised wei to the address that collects funds.\n', '     * @param _weiAmount Amount of wei send by the investor.\n', '     */\n', '    function forwardFunds(uint256 _weiAmount) internal {\n', '        wallet.transfer(_weiAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Validates an incoming purchase. Required statements revert state when conditions are not met.\n', '     * @return true If the transaction can buy tokens.\n', '     */\n', '    function validPurchase() internal view returns (bool) {\n', '        require(!paused && !capReached);\n', '        require(block.timestamp >= start && block.timestamp <= end);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Mints tokens being sold during the crowdsale phase as part of the implementation of releaseTokensTo function\n', '     * from the KYCBase contract.\n', '     * @param to The address that will receive the minted tokens.\n', '     * @param amount The amount of tokens to mint.\n', '     */\n', '    function mintTokens(address to, uint256 amount) private {\n', '        token.mint(to, amount);\n', '    }\n', '\n', '    modifier equalLength(address[] beneficiaries, uint256[] balances) {\n', '        require(beneficiaries.length == balances.length);\n', '        _;\n', '    }\n', '}']
['//File: node_modules\\openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\SafeERC20.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\ownership\\CanReclaimToken.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\math\\SafeMath.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '//File: contracts\\ico\\KYCBase.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '// Abstract base contract\n', 'contract KYCBase {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => bool) public isKycSigner;\n', '    mapping (uint64 => uint256) public alreadyPayed;\n', '\n', '    event KycVerified(address indexed signer, address buyerAddress, uint64 buyerId, uint maxAmount);\n', '\n', '    constructor(address[] kycSigners) internal {\n', '        for (uint i = 0; i < kycSigners.length; i++) {\n', '            isKycSigner[kycSigners[i]] = true;\n', '        }\n', '    }\n', '\n', '    // Must be implemented in descending contract to assign tokens to the buyers. Called after the KYC verification is passed\n', '    function releaseTokensTo(address buyer) internal returns(bool);\n', '\n', '    // This method can be overridden to enable some sender to buy token for a different address\n', '    function senderAllowedFor(address buyer)\n', '    internal view returns(bool)\n', '    {\n', '        return buyer == msg.sender;\n', '    }\n', '\n', '    function buyTokensFor(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n', '    public payable returns (bool)\n', '    {\n', '        require(senderAllowedFor(buyerAddress));\n', '        return buyImplementation(buyerAddress, buyerId, maxAmount, v, r, s);\n', '    }\n', '\n', '    function buyTokens(uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n', '    public payable returns (bool)\n', '    {\n', '        return buyImplementation(msg.sender, buyerId, maxAmount, v, r, s);\n', '    }\n', '\n', '    function buyImplementation(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n', '    private returns (bool)\n', '    {\n', '        // check the signature\n', '        bytes32 hash = sha256(abi.encodePacked("Eidoo icoengine authorization", this, buyerAddress, buyerId, maxAmount));\n', '        address signer = ecrecover(hash, v, r, s);\n', '        if (!isKycSigner[signer]) {\n', '            revert();\n', '        } else {\n', '            uint256 totalPayed = alreadyPayed[buyerId].add(msg.value);\n', '            require(totalPayed <= maxAmount);\n', '            alreadyPayed[buyerId] = totalPayed;\n', '            emit KycVerified(signer, buyerAddress, buyerId, maxAmount);\n', '            return releaseTokensTo(buyerAddress);\n', '        }\n', '    }\n', '\n', '    // No payable fallback function, the tokens must be buyed using the functions buyTokens and buyTokensFor\n', '    function () public {\n', '        revert();\n', '    }\n', '}\n', '//File: contracts\\ico\\ICOEngineInterface.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract ICOEngineInterface {\n', '\n', '    // false if the ico is not started, true if the ico is started and running, true if the ico is completed\n', '    function started() public view returns(bool);\n', '\n', '    // false if the ico is not started, false if the ico is started and running, true if the ico is completed\n', '    function ended() public view returns(bool);\n', '\n', '    // time stamp of the starting time of the ico, must return 0 if it depends on the block number\n', '    function startTime() public view returns(uint);\n', '\n', '    // time stamp of the ending time of the ico, must retrun 0 if it depends on the block number\n', '    function endTime() public view returns(uint);\n', '\n', '    // Optional function, can be implemented in place of startTime\n', '    // Returns the starting block number of the ico, must return 0 if it depends on the time stamp\n', '    // function startBlock() public view returns(uint);\n', '\n', '    // Optional function, can be implemented in place of endTime\n', '    // Returns theending block number of the ico, must retrun 0 if it depends on the time stamp\n', '    // function endBlock() public view returns(uint);\n', '\n', '    // returns the total number of the tokens available for the sale, must not change when the ico is started\n', '    function totalTokens() public view returns(uint);\n', '\n', '    // returns the number of the tokens available for the ico. At the moment that the ico starts it must be equal to totalTokens(),\n', '    // then it will decrease. It is used to calculate the percentage of sold tokens as remainingTokens() / totalTokens()\n', '    function remainingTokens() public view returns(uint);\n', '\n', '    // return the price as number of tokens released for each ether\n', '    function price() public view returns(uint);\n', '}\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\MintableToken.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\PausableToken.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\BurnableToken.sol\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '//File: contracts\\ico\\GotToken.sol\n', '/**\n', ' * @title ParkinGO token\n', ' *\n', ' * @version 1.0\n', ' * @author ParkinGO\n', ' */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract GotToken is CanReclaimToken, MintableToken, PausableToken, BurnableToken {\n', '    string public constant name = "GOToken";\n', '    string public constant symbol = "GOT";\n', '    uint8 public constant decimals = 18;\n', '\n', '    /**\n', '     * @dev Constructor of GotToken that instantiates a new Mintable Pausable Token\n', '     */\n', '    constructor() public {\n', '        // token should not be transferable until after all tokens have been issued\n', '        paused = true;\n', '    }\n', '}\n', '\n', '\n', '//File: contracts\\ico\\PGOVault.sol\n', '/**\n', ' * @title PGOVault\n', ' * @dev A token holder contract that allows the release of tokens to the ParkinGo Wallet.\n', ' *\n', ' * @version 1.0\n', ' * @author ParkinGo\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract PGOVault {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for GotToken;\n', '\n', '    uint256[4] public vesting_offsets = [\n', '        360 days,\n', '        540 days,\n', '        720 days,\n', '        900 days\n', '    ];\n', '\n', '    uint256[4] public vesting_amounts = [\n', '        0.875e7 * 1e18,\n', '        0.875e7 * 1e18,\n', '        0.875e7 * 1e18,\n', '        0.875e7 * 1e18\n', '    ];\n', '\n', '    address public pgoWallet;\n', '    GotToken public token;\n', '    uint256 public start;\n', '    uint256 public released;\n', '    uint256 public vestingOffsetsLength = vesting_offsets.length;\n', '\n', '    /**\n', '     * @dev Constructor.\n', '     * @param _pgoWallet The address that will receive the vested tokens.\n', '     * @param _token The GOT Token, which is being vested.\n', '     * @param _start The start time from which each release time will be calculated.\n', '     */\n', '    constructor(\n', '        address _pgoWallet,\n', '        address _token,\n', '        uint256 _start\n', '    )\n', '        public\n', '    {\n', '        pgoWallet = _pgoWallet;\n', '        token = GotToken(_token);\n', '        start = _start;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers vested tokens to ParkinGo Wallet.\n', '     */\n', '    function release() public {\n', '        uint256 unreleased = releasableAmount();\n', '        require(unreleased > 0);\n', '\n', '        released = released.add(unreleased);\n', '\n', '        token.safeTransfer(pgoWallet, unreleased);\n', '    }\n', '\n', '    /**\n', "     * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '     */\n', '    function releasableAmount() public view returns (uint256) {\n', '        return vestedAmount().sub(released);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount that has already vested.\n', '     */\n', '    function vestedAmount() public view returns (uint256) {\n', '        uint256 vested = 0;\n', '        for (uint256 i = 0; i < vestingOffsetsLength; i = i.add(1)) {\n', '            if (block.timestamp > start.add(vesting_offsets[i])) {\n', '                vested = vested.add(vesting_amounts[i]);\n', '            }\n', '        }\n', '        return vested;\n', '    }\n', '    \n', '    /**\n', '     * @dev Calculates the amount that has not yet released.\n', '     */\n', '    function unreleasedAmount() public view returns (uint256) {\n', '        uint256 unreleased = 0;\n', '        for (uint256 i = 0; i < vestingOffsetsLength; i = i.add(1)) {\n', '            unreleased = unreleased.add(vesting_amounts[i]);\n', '        }\n', '        return unreleased.sub(released);\n', '    }\n', '}\n', '\n', '\n', '//File: contracts\\ico\\PGOMonthlyInternalVault.sol\n', '/**\n', ' * @title PGOMonthlyVault\n', ' * @dev A token holder contract that allows the release of tokens after a vesting period.\n', ' *\n', ' * @version 1.0\n', ' * @author ParkinGO\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract PGOMonthlyInternalVault {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for GotToken;\n', '\n', '    struct Investment {\n', '        address beneficiary;\n', '        uint256 totalBalance;\n', '        uint256 released;\n', '    }\n', '\n', '    /*** CONSTANTS ***/\n', '    uint256 public constant VESTING_DIV_RATE = 21;                  // division rate of monthly vesting\n', '    uint256 public constant VESTING_INTERVAL = 30 days;             // vesting interval\n', '    uint256 public constant VESTING_CLIFF = 90 days;                // duration until cliff is reached\n', '    uint256 public constant VESTING_DURATION = 720 days;            // vesting duration\n', '\n', '    GotToken public token;\n', '    uint256 public start;\n', '    uint256 public end;\n', '    uint256 public cliff;\n', '\n', '    //Investment[] public investments;\n', '\n', '    // key: investor address; value: index in investments array.\n', '    //mapping(address => uint256) public investorLUT;\n', '\n', '    mapping(address => Investment) public investments;\n', '\n', '    /**\n', '     * @dev Function to be fired by the initPGOMonthlyInternalVault function from the GotCrowdSale contract to set the\n', "     * InternalVault's state after deployment.\n", '     * @param beneficiaries Array of the internal investors addresses to whom vested tokens are transferred.\n', '     * @param balances Array of token amount per beneficiary.\n', '     * @param startTime Start time at which the first released will be executed, and from which the cliff for second\n', '     * release is calculated.\n', '     * @param _token The address of the GOT Token.\n', '     */\n', '    function init(address[] beneficiaries, uint256[] balances, uint256 startTime, address _token) public {\n', '        // makes sure this function is only called once\n', '        require(token == address(0));\n', '        require(beneficiaries.length == balances.length);\n', '\n', '        start = startTime;\n', '        cliff = start.add(VESTING_CLIFF);\n', '        end = start.add(VESTING_DURATION);\n', '\n', '        token = GotToken(_token);\n', '\n', '        for (uint256 i = 0; i < beneficiaries.length; i = i.add(1)) {\n', '            investments[beneficiaries[i]] = Investment(beneficiaries[i], balances[i], 0);\n', '        }\n', '    }\n', '\n', '    /**\n', "     * @dev Allows a sender to transfer vested tokens to the beneficiary's address.\n", '     * @param beneficiary The address that will receive the vested tokens.\n', '     */\n', '    function release(address beneficiary) public {\n', '        uint256 unreleased = releasableAmount(beneficiary);\n', '        require(unreleased > 0);\n', '\n', '        investments[beneficiary].released = investments[beneficiary].released.add(unreleased);\n', '        token.safeTransfer(beneficiary, unreleased);\n', '    }\n', '\n', '    /**\n', "     * @dev Transfers vested tokens to the sender's address.\n", '     */\n', '    function release() public {\n', '        release(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows to check an investment.\n', '     * @param beneficiary The address of the beneficiary of the investment to check.\n', '     */\n', '    function getInvestment(address beneficiary) public view returns(address, uint256, uint256) {\n', '        return (\n', '            investments[beneficiary].beneficiary,\n', '            investments[beneficiary].totalBalance,\n', '            investments[beneficiary].released\n', '        );\n', '    }\n', '\n', '    /**\n', "     * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '     * @param beneficiary The address that will receive the vested tokens.\n', '     */\n', '    function releasableAmount(address beneficiary) public view returns (uint256) {\n', '        return vestedAmount(beneficiary).sub(investments[beneficiary].released);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount that has already vested.\n', '     * @param beneficiary The address that will receive the vested tokens.\n', '     */\n', '    function vestedAmount(address beneficiary) public view returns (uint256) {\n', '        uint256 vested = 0;\n', '        if (block.timestamp >= cliff && block.timestamp < end) {\n', '            // after cliff -> 1/21 of totalBalance every month, must skip first 3 months\n', '            uint256 totalBalance = investments[beneficiary].totalBalance;\n', '            uint256 monthlyBalance = totalBalance.div(VESTING_DIV_RATE);\n', '            uint256 time = block.timestamp.sub(cliff);\n', '            uint256 elapsedOffsets = time.div(VESTING_INTERVAL);\n', '            uint256 vestedToSum = elapsedOffsets.mul(monthlyBalance);\n', '            vested = vested.add(vestedToSum);\n', '        }\n', '        if (block.timestamp >= end) {\n', '            // after end -> all vested\n', '            vested = investments[beneficiary].totalBalance;\n', '        }\n', '        return vested;\n', '    }\n', '}\n', '\n', '\n', '//File: contracts\\ico\\PGOMonthlyPresaleVault.sol\n', '/**\n', ' * @title PGOMonthlyVault\n', ' * @dev A token holder contract that allows the release of tokens after a vesting period.\n', ' *\n', ' * @version 1.0\n', ' * @author ParkinGO\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract PGOMonthlyPresaleVault is PGOMonthlyInternalVault {\n', '    /**\n', '     * @dev OVERRIDE vestedAmount from PGOMonthlyInternalVault\n', '     * Calculates the amount that has already vested, release 1/3 of token immediately.\n', '     * @param beneficiary The address that will receive the vested tokens.\n', '     */\n', '    function vestedAmount(address beneficiary) public view returns (uint256) {\n', '        uint256 vested = 0;\n', '\n', '        if (block.timestamp >= start) {\n', '            // after start -> 1/3 released (fixed)\n', '            vested = investments[beneficiary].totalBalance.div(3);\n', '        }\n', '        if (block.timestamp >= cliff && block.timestamp < end) {\n', '            // after cliff -> 1/27 of totalBalance every month, must skip first 9 month \n', '            uint256 unlockedStartBalance = investments[beneficiary].totalBalance.div(3);\n', '            uint256 totalBalance = investments[beneficiary].totalBalance;\n', '            uint256 lockedBalance = totalBalance.sub(unlockedStartBalance);\n', '            uint256 monthlyBalance = lockedBalance.div(VESTING_DIV_RATE);\n', '            uint256 daysToSkip = 90 days;\n', '            uint256 time = block.timestamp.sub(start).sub(daysToSkip);\n', '            uint256 elapsedOffsets = time.div(VESTING_INTERVAL);\n', '            vested = vested.add(elapsedOffsets.mul(monthlyBalance));\n', '        }\n', '        if (block.timestamp >= end) {\n', '            // after end -> all vested\n', '            vested = investments[beneficiary].totalBalance;\n', '        }\n', '        return vested;\n', '    }\n', '}\n', '\n', '\n', '//File: contracts\\ico\\GotCrowdSale.sol\n', '/**\n', ' * @title GotCrowdSale\n', ' *\n', ' * @version 1.0\n', ' * @author ParkinGo\n', ' */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract GotCrowdSale is Pausable, CanReclaimToken, ICOEngineInterface, KYCBase {\n', '    /*** CONSTANTS ***/\n', '    uint256 public constant START_TIME = 1529416800;\n', '    //uint256 public constant START_TIME = 1529416800;                     // 19 June 2018 14:00:00 GMT\n', '    uint256 public constant END_TIME = 1530655140;                       // 03 July 2018 21:59:00 GMT\n', '    //uint256 public constant USD_PER_TOKEN = 75;                          // 0.75$\n', '    //uint256 public constant USD_PER_ETHER = 60000;                       // REMEMBER TO CHANGE IT AT ICO START\n', '    uint256 public constant TOKEN_PER_ETHER = 740;                       // REMEMBER TO CHANGE IT AT ICO START\n', '\n', '    //Token allocation\n', '    //Team, founder, partners and advisor cap locked using Monthly Internal Vault\n', '    uint256 public constant MONTHLY_INTERNAL_VAULT_CAP = 2.85e7 * 1e18;\n', '    //Company unlocked liquidity and Airdrop allocation\n', '    uint256 public constant PGO_UNLOCKED_LIQUIDITY_CAP = 1.5e7 * 1e18;\n', '    //Internal reserve fund\n', '    uint256 public constant PGO_INTERNAL_RESERVE_CAP = 3.5e7 * 1e18;\n', '    //Reserved Presale Allocation 33% free and 67% locked using Monthly Presale Vault\n', '    uint256 public constant RESERVED_PRESALE_CAP = 1.5754888e7 * 1e18;\n', '    //ICO TOKEN ALLOCATION\n', '    //Public ICO Cap\n', '    //uint256 public constant CROWDSALE_CAP = 0.15e7 * 1e18;\n', '    //Reservation contract Cap\n', '    uint256 public constant RESERVATION_CAP = 0.4297111e7 * 1e18;\n', '    //TOTAL ICO CAP\n', '    uint256 public constant TOTAL_ICO_CAP = 0.5745112e7 * 1e18;\n', '\n', '    uint256 public start;                                             // ICOEngineInterface\n', '    uint256 public end;                                               // ICOEngineInterface\n', '    uint256 public cap;                                               // ICOEngineInterface\n', '    uint256 public tokenPerEth;\n', '    uint256 public availableTokens;                                   // ICOEngineInterface\n', '    address[] public kycSigners;                                      // KYCBase\n', '    bool public capReached;\n', '    uint256 public weiRaised;\n', '    uint256 public tokensSold;\n', '\n', '    // Vesting contracts.\n', '    //Unlock funds after 9 months monthly\n', '    PGOMonthlyInternalVault public pgoMonthlyInternalVault;\n', '    //Unlock 1/3 funds immediately and remaining after 9 months monthly\n', '    PGOMonthlyPresaleVault public pgoMonthlyPresaleVault;\n', '    //Unlock funds after 12 months 25% every 6 months\n', '    PGOVault public pgoVault;\n', '\n', '    // Vesting wallets.\n', '    address public pgoInternalReserveWallet;\n', '    //Unlocked wallets\n', '    address public pgoUnlockedLiquidityWallet;\n', '    //ether wallet\n', '    address public wallet;\n', '\n', '    GotToken public token;\n', '\n', '    // Lets owner manually end crowdsale.\n', '    bool public didOwnerEndCrowdsale;\n', '\n', '    /**\n', '     * @dev Constructor.\n', '     * @param _token address contract got tokens.\n', '     * @param _wallet The address where funds should be transferred.\n', '     * @param _pgoInternalReserveWallet The address where token will be send after vesting should be transferred.\n', '     * @param _pgoUnlockedLiquidityWallet The address where token will be send after vesting should be transferred.\n', '     * @param _pgoMonthlyInternalVault The address of internal funds vault contract with monthly unlocking after 9 months.\n', '     * @param _pgoMonthlyPresaleVault The address of presale funds vault contract with 1/3 free funds and monthly unlocking after 9 months.\n', '     * @param _kycSigners Array of the signers addresses required by the KYCBase constructor, provided by Eidoo.\n', '     * See https://github.com/eidoo/icoengine\n', '     */\n', '    constructor(\n', '        address _token,\n', '        address _wallet,\n', '        address _pgoInternalReserveWallet,\n', '        address _pgoUnlockedLiquidityWallet,\n', '        address _pgoMonthlyInternalVault,\n', '        address _pgoMonthlyPresaleVault,\n', '        address[] _kycSigners\n', '    )\n', '        public\n', '        KYCBase(_kycSigners)\n', '    {\n', '        require(END_TIME >= START_TIME);\n', '        require(TOTAL_ICO_CAP > 0);\n', '\n', '        start = START_TIME;\n', '        end = END_TIME;\n', '        cap = TOTAL_ICO_CAP;\n', '        wallet = _wallet;\n', '        tokenPerEth = TOKEN_PER_ETHER;// USD_PER_ETHER.div(USD_PER_TOKEN);\n', '        availableTokens = TOTAL_ICO_CAP;\n', '        kycSigners = _kycSigners;\n', '\n', '        token = GotToken(_token);\n', '        pgoMonthlyInternalVault = PGOMonthlyInternalVault(_pgoMonthlyInternalVault);\n', '        pgoMonthlyPresaleVault = PGOMonthlyPresaleVault(_pgoMonthlyPresaleVault);\n', '        pgoInternalReserveWallet = _pgoInternalReserveWallet;\n', '        pgoUnlockedLiquidityWallet = _pgoUnlockedLiquidityWallet;\n', '        wallet = _wallet;\n', '        // Creates ParkinGo vault contract\n', '        pgoVault = new PGOVault(pgoInternalReserveWallet, address(token), END_TIME);\n', '    }\n', '\n', '    /**\n', '     * @dev Mints unlocked tokens to unlockedLiquidityWallet and\n', '     * assings tokens to be held into the internal reserve vault contracts.\n', "     * To be called by the crowdsale's owner only.\n", '     */\n', '    function mintPreAllocatedTokens() public onlyOwner {\n', '        mintTokens(pgoUnlockedLiquidityWallet, PGO_UNLOCKED_LIQUIDITY_CAP);\n', '        mintTokens(address(pgoVault), PGO_INTERNAL_RESERVE_CAP);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the state of the internal monthly locked vault contract and mints tokens.\n', '     * It will contains all TEAM, FOUNDER, ADVISOR and PARTNERS tokens.\n', '     * All token are locked for the first 9 months and then unlocked monthly.\n', '     * It will check that all internal token are correctly allocated.\n', '     * So far, the internal monthly vault contract has been deployed and this function\n', '     * needs to be called to set its investments and vesting conditions.\n', '     * @param beneficiaries Array of the internal addresses to whom vested tokens are transferred.\n', '     * @param balances Array of token amount per beneficiary.\n', '     */\n', '    function initPGOMonthlyInternalVault(address[] beneficiaries, uint256[] balances)\n', '        public\n', '        onlyOwner\n', '        equalLength(beneficiaries, balances)\n', '    {\n', '        uint256 totalInternalBalance = 0;\n', '        uint256 balancesLength = balances.length;\n', '\n', '        for (uint256 i = 0; i < balancesLength; i++) {\n', '            totalInternalBalance = totalInternalBalance.add(balances[i]);\n', '        }\n', '        //check that all balances matches internal vault allocated Cap\n', '        require(totalInternalBalance == MONTHLY_INTERNAL_VAULT_CAP);\n', '\n', '        pgoMonthlyInternalVault.init(beneficiaries, balances, END_TIME, token);\n', '\n', '        mintTokens(address(pgoMonthlyInternalVault), MONTHLY_INTERNAL_VAULT_CAP);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the state of the reserved presale vault contract and mints reserved presale tokens. \n', '     * It will contains all reserved PRESALE token,\n', '     * 1/3 of tokens are free and the remaining are locked for the first 9 months and then unlocked monthly.\n', '     * It will check that all reserved presale token are correctly allocated.\n', '     * So far, the monthly presale vault contract has been deployed and\n', '     * this function needs to be called to set its investments and vesting conditions.\n', '     * @param beneficiaries Array of the presale investors addresses to whom vested tokens are transferred.\n', '     * @param balances Array of token amount per beneficiary.\n', '     */\n', '    function initPGOMonthlyPresaleVault(address[] beneficiaries, uint256[] balances)\n', '        public\n', '        onlyOwner\n', '        equalLength(beneficiaries, balances)\n', '    {\n', '        uint256 totalPresaleBalance = 0;\n', '        uint256 balancesLength = balances.length;\n', '\n', '        for (uint256 i = 0; i < balancesLength; i++) {\n', '            totalPresaleBalance = totalPresaleBalance.add(balances[i]);\n', '        }\n', '        //check that all balances matches internal vault allocated Cap\n', '        require(totalPresaleBalance == RESERVED_PRESALE_CAP);\n', '\n', '        pgoMonthlyPresaleVault.init(beneficiaries, balances, END_TIME, token);\n', '\n', '        mintTokens(address(pgoMonthlyPresaleVault), totalPresaleBalance);\n', '    }\n', '\n', '    /**\n', '     * @dev Mint all token collected by second private presale (called reservation),\n', '     * all KYC control are made outside contract under responsability of ParkinGO.\n', '     * Also, updates tokensSold and availableTokens in the crowdsale contract,\n', '     * it checks that sold token are less than reservation contract cap.\n', '     * @param beneficiaries Array of the reservation user that bought tokens in private reservation sale.\n', '     * @param balances Array of token amount per beneficiary.\n', '     */\n', '    function mintReservation(address[] beneficiaries, uint256[] balances)\n', '        public\n', '        onlyOwner\n', '        equalLength(beneficiaries, balances)\n', '    {\n', '        //require(tokensSold == 0);\n', '\n', '        uint256 totalReservationBalance = 0;\n', '        uint256 balancesLength = balances.length;\n', '\n', '        for (uint256 i = 0; i < balancesLength; i++) {\n', '            totalReservationBalance = totalReservationBalance.add(balances[i]);\n', '            uint256 amount = balances[i];\n', '            //update token sold of crowdsale contract\n', '            tokensSold = tokensSold.add(amount);\n', '            //update available token of crowdsale contract\n', '            availableTokens = availableTokens.sub(amount);\n', '            mintTokens(beneficiaries[i], amount);\n', '        }\n', '\n', '        require(totalReservationBalance <= RESERVATION_CAP);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to close the crowdsale manually before the end time.\n', '     */\n', '    function closeCrowdsale() public onlyOwner {\n', '        require(block.timestamp >= START_TIME && block.timestamp < END_TIME);\n', '        didOwnerEndCrowdsale = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to unpause tokens, stop minting and transfer ownership of the token contract.\n', '     */\n', '    function finalise() public onlyOwner {\n', '        require(didOwnerEndCrowdsale || block.timestamp > end || capReached);\n', '\n', '        token.finishMinting();\n', '        token.unpause();\n', '\n', '        // Token contract extends CanReclaimToken so the owner can recover\n', '        // any ERC20 token received in this contract by mistake.\n', '        // So far, the owner of the token contract is the crowdsale contract.\n', '        // We transfer the ownership so the owner of the crowdsale is also the owner of the token.\n', '        token.transferOwnership(owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Implements the price function from EidooEngineInterface.\n', '     * @notice Calculates the price as tokens/ether based on the corresponding bonus bracket.\n', '     * @return Price as tokens/ether.\n', '     */\n', '    function price() public view returns (uint256 _price) {\n', '        return tokenPerEth;\n', '    }\n', '\n', '    /**\n', '     * @dev Implements the ICOEngineInterface.\n', '     * @return False if the ico is not started, true if the ico is started and running, true if the ico is completed.\n', '     */\n', '    function started() public view returns(bool) {\n', '        if (block.timestamp >= start) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Implements the ICOEngineInterface.\n', '     * @return False if the ico is not started, false if the ico is started and running, true if the ico is completed.\n', '     */\n', '    function ended() public view returns(bool) {\n', '        if (block.timestamp >= end) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Implements the ICOEngineInterface.\n', '     * @return Timestamp of the ico start time.\n', '     */\n', '    function startTime() public view returns(uint) {\n', '        return start;\n', '    }\n', '\n', '    /**\n', '     * @dev Implements the ICOEngineInterface.\n', '     * @return Timestamp of the ico end time.\n', '     */\n', '    function endTime() public view returns(uint) {\n', '        return end;\n', '    }\n', '\n', '    /**\n', '     * @dev Implements the ICOEngineInterface.\n', '     * @return The total number of the tokens available for the sale, must not change when the ico is started.\n', '     */\n', '    function totalTokens() public view returns(uint) {\n', '        return cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Implements the ICOEngineInterface.\n', '     * @return The number of the tokens available for the ico.\n', '     * At the moment the ico starts it must be equal to totalTokens(),\n', '     * then it will decrease.\n', '     */\n', '    function remainingTokens() public view returns(uint) {\n', '        return availableTokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Implements the KYCBase senderAllowedFor function to enable a sender to buy tokens for a different address.\n', '     * @return true.\n', '     */\n', '    function senderAllowedFor(address buyer) internal view returns(bool) {\n', '        require(buyer != address(0));\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Implements the KYCBase releaseTokensTo function to mint tokens for an investor.\n', '     * Called after the KYC process has passed.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function releaseTokensTo(address buyer) internal returns(bool) {\n', '        require(validPurchase());\n', '\n', '        uint256 overflowTokens;\n', '        uint256 refundWeiAmount;\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 tokenAmount = weiAmount.mul(price());\n', '\n', '        if (tokenAmount >= availableTokens) {\n', '            capReached = true;\n', '            overflowTokens = tokenAmount.sub(availableTokens);\n', '            tokenAmount = tokenAmount.sub(overflowTokens);\n', '            refundWeiAmount = overflowTokens.div(price());\n', '            weiAmount = weiAmount.sub(refundWeiAmount);\n', '            buyer.transfer(refundWeiAmount);\n', '        }\n', '\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        tokensSold = tokensSold.add(tokenAmount);\n', '        availableTokens = availableTokens.sub(tokenAmount);\n', '        mintTokens(buyer, tokenAmount);\n', '        forwardFunds(weiAmount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Fired by the releaseTokensTo function after minting tokens,\n', '     * to forward the raised wei to the address that collects funds.\n', '     * @param _weiAmount Amount of wei send by the investor.\n', '     */\n', '    function forwardFunds(uint256 _weiAmount) internal {\n', '        wallet.transfer(_weiAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Validates an incoming purchase. Required statements revert state when conditions are not met.\n', '     * @return true If the transaction can buy tokens.\n', '     */\n', '    function validPurchase() internal view returns (bool) {\n', '        require(!paused && !capReached);\n', '        require(block.timestamp >= start && block.timestamp <= end);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Mints tokens being sold during the crowdsale phase as part of the implementation of releaseTokensTo function\n', '     * from the KYCBase contract.\n', '     * @param to The address that will receive the minted tokens.\n', '     * @param amount The amount of tokens to mint.\n', '     */\n', '    function mintTokens(address to, uint256 amount) private {\n', '        token.mint(to, amount);\n', '    }\n', '\n', '    modifier equalLength(address[] beneficiaries, uint256[] balances) {\n', '        require(beneficiaries.length == balances.length);\n', '        _;\n', '    }\n', '}']
