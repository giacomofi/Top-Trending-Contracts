['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '//import &#39;./SafeMath.sol&#39;;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', 'contract BITBIX is ERC20Basic {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    //                                  30,000,000.00000000\n', '    uint public  _totalSupply = 3000000000000000; \n', '    \n', '    // name and branding\n', '    string public constant name = "BITBIX";\n', '    string public constant symbol = "BBX";\n', '    uint8 public constant decimals = 8;\n', '    \n', '    \n', '    address public owner;\n', '    \n', '    mapping(address => uint256) balances; \n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    \n', '   \n', '    function BITBIX() \n', '    { \n', '        balances[msg.sender] = _totalSupply; \n', '        owner = msg.sender;\n', '        \n', '    } \n', '    \n', '  \n', '    function totalSupply() constant returns (uint256 totalSupply) \n', '    {\n', '        return _totalSupply; \n', '    } \n', '    \n', '    function balanceOf(address _owner) constant returns (uint256 balance) \n', '    {\n', '        return balances[_owner]; \n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) returns (bool success) \n', '    {\n', '        require(\n', '            balances[msg.sender] >= _value \n', '            && _value > 0 \n', '            ); \n', '            \n', '        balances[msg.sender] = balances[msg.sender].sub(_value); \n', '        balances[_to] = balances[_to].add(_value); \n', '        \n', '        Transfer(msg.sender, _to, _value); \n', '        return true; \n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        require(\n', '            allowed[_from][msg.sender] >= _value\n', '            && balances[_from] >= _value\n', '            && _value > 0\n', '            );\n', '            balances[_from] = balances[_from].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '            Transfer(_from,_to,_value);\n', '            return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', "//import './SafeMath.sol';\n", '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', 'contract BITBIX is ERC20Basic {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    //                                  30,000,000.00000000\n', '    uint public  _totalSupply = 3000000000000000; \n', '    \n', '    // name and branding\n', '    string public constant name = "BITBIX";\n', '    string public constant symbol = "BBX";\n', '    uint8 public constant decimals = 8;\n', '    \n', '    \n', '    address public owner;\n', '    \n', '    mapping(address => uint256) balances; \n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    \n', '   \n', '    function BITBIX() \n', '    { \n', '        balances[msg.sender] = _totalSupply; \n', '        owner = msg.sender;\n', '        \n', '    } \n', '    \n', '  \n', '    function totalSupply() constant returns (uint256 totalSupply) \n', '    {\n', '        return _totalSupply; \n', '    } \n', '    \n', '    function balanceOf(address _owner) constant returns (uint256 balance) \n', '    {\n', '        return balances[_owner]; \n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) returns (bool success) \n', '    {\n', '        require(\n', '            balances[msg.sender] >= _value \n', '            && _value > 0 \n', '            ); \n', '            \n', '        balances[msg.sender] = balances[msg.sender].sub(_value); \n', '        balances[_to] = balances[_to].add(_value); \n', '        \n', '        Transfer(msg.sender, _to, _value); \n', '        return true; \n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        require(\n', '            allowed[_from][msg.sender] >= _value\n', '            && balances[_from] >= _value\n', '            && _value > 0\n', '            );\n', '            balances[_from] = balances[_from].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '            Transfer(_from,_to,_value);\n', '            return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']
