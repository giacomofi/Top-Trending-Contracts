['pragma solidity ^0.4.24;\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: contracts/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner, "msg.sender not owner");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0), "_newOwner == 0");\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused, "The contract is paused");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused, "The contract is not paused");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: contracts/Destructible.sol\n', '\n', '/**\n', ' * @title Destructible\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n', ' */\n', 'contract Destructible is Ownable {\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() public onlyOwner {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) public onlyOwner {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', '// File: contracts/ERC20Supplier.sol\n', '\n', '/**\n', ' * @title ERC20Supplier.\n', ' * @author Andrea Speziale <aspeziale@eidoo.io>\n', ' * @dev Distribute a fixed amount of ERC20 based on a rate rate from a ERC20 reserve to a _receiver for ETH.\n', ' * Received ETH are redirected to a wallet.\n', ' */\n', 'contract ERC20Supplier is\n', '  Pausable,\n', '  Destructible\n', '{\n', '  using SafeMath for uint;\n', '\n', '  ERC20 public token;\n', '  \n', '  address public wallet;\n', '  address public reserve;\n', '  \n', '  uint public rate;\n', '\n', '  event LogWithdrawAirdrop(address indexed _from, address indexed _token, uint amount);\n', '  event LogReleaseTokensTo(address indexed _from, address indexed _to, uint _amount);\n', '  event LogSetWallet(address indexed _wallet);\n', '  event LogSetReserve(address indexed _reserve);\n', '  event LogSetToken(address indexed _token);\n', '  event LogSetrate(uint _rate);\n', '\n', '  /**\n', '   * @dev Contract constructor.\n', '   * @param _wallet Where the received ETH are transfered.\n', '   * @param _reserve From where the ERC20 token are sent to the purchaser.\n', '   * @param _token Deployed ERC20 token address.\n', '   * @param _rate Purchase rate, how many ERC20 for the given ETH.\n', '   */\n', '  constructor(\n', '    address _wallet,\n', '    address _reserve,\n', '    address _token,\n', '    uint _rate\n', '  )\n', '    public\n', '  {\n', '    require(_wallet != address(0), "_wallet == address(0)");\n', '    require(_reserve != address(0), "_reserve == address(0)");\n', '    require(_token != address(0), "_token == address(0)");\n', '    require(_rate != 0, "_rate == 0");\n', '    wallet = _wallet;\n', '    reserve = _reserve;\n', '    token = ERC20(_token);\n', '    rate = _rate;\n', '  }\n', '\n', '  function() public payable {\n', '    releaseTokensTo(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev Release purchased ERC20 to the buyer.\n', '   * @param _receiver Where the ERC20 are transfered.\n', '   */\n', '  function releaseTokensTo(address _receiver)\n', '    internal\n', '    whenNotPaused\n', '    returns (bool) \n', '  {\n', '    uint amount = msg.value.mul(rate);\n', '    wallet.transfer(msg.value);\n', '    require(\n', '      token.transferFrom(reserve, _receiver, amount),\n', '      "transferFrom reserve to _receiver failed"\n', '    );\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Set wallet.\n', '   * @param _wallet Where the ETH are redirected.\n', '   */\n', '  function setWallet(address _wallet) public onlyOwner returns (bool) {\n', '    require(_wallet != address(0), "_wallet == 0");\n', '    require(_wallet != wallet, "_wallet == wallet");\n', '    wallet = _wallet;\n', '    emit LogSetWallet(wallet);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Set ERC20 reserve.\n', '   * @param _reserve Where ERC20 are stored.\n', '   */\n', '  function setReserve(address _reserve) public onlyOwner returns (bool) {\n', '    require(_reserve != address(0), "_reserve == 0");\n', '    require(_reserve != reserve, "_reserve == reserve");\n', '    reserve = _reserve;\n', '    emit LogSetReserve(reserve);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Set ERC20 token.\n', '   * @param _token ERC20 token address.\n', '   */\n', '  function setToken(address _token) public onlyOwner returns (bool) {\n', '    require(_token != address(0), "_token == 0");\n', '    require(_token != address(token), "_token == token");\n', '    token = ERC20(_token);\n', '    emit LogSetToken(token);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Set rate.\n', '   * @param _rate Multiplier, how many ERC20 for the given ETH.\n', '   */\n', '  function setRate(uint _rate) public onlyOwner returns (bool) {\n', '    require(_rate != 0, "_rate == 0");\n', '    require(_rate != rate, "_rate == rate");\n', '    rate = _rate;\n', '    emit LogSetrate(rate);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Eventually withdraw airdropped token.\n', '   * @param _token ERC20 address to be withdrawed.\n', '   */\n', '  function withdrawAirdrop(ERC20 _token)\n', '    public\n', '    onlyOwner\n', '    returns(bool)\n', '  {\n', '    require(address(_token) != 0, "_token address == 0");\n', '    require(\n', '      _token.balanceOf(this) > 0,\n', '      "dropped token balance == 0"\n', '    );\n', '    uint256 airdroppedTokenAmount = _token.balanceOf(this);\n', '    _token.transfer(msg.sender, airdroppedTokenAmount);\n', '    emit LogWithdrawAirdrop(msg.sender, _token, airdroppedTokenAmount);\n', '    return true;\n', '  }\n', '}']