['pragma solidity ^0.4.22;\n', '\n', '/**\n', '*  ** SAFEMATH **\n', '*/\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', '*  ** INTERFACES **\n', '*/\n', '\n', 'interface ERC20 {\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n', '    function approve(address _spender, uint _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract ERC223ReceivingContract {\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'interface ERC223 {\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', 'contract FoundationToken {\n', '    string internal _symbol;\n', '    string internal _name;\n', '    uint8 internal _decimals;\n', '    uint internal _totalSupply = 1000;\n', '    mapping (address => uint) internal _balanceOf;\n', '    mapping (address => mapping (address => uint)) internal _allowances;\n', '    \n', '    constructor(string symbol, string name, uint8 decimals) public {\n', '        _symbol = symbol;\n', '        _name = name;\n', '        _decimals = decimals;\n', '        _totalSupply = 1000*1000000 * (uint256(10) ** decimals);\n', '    }\n', '    \n', '    function name() public view returns (string) {\n', '        return _name;\n', '    }\n', '    \n', '    function symbol() public view returns (string) {\n', '        return _symbol;\n', '    }\n', '    \n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address _addr) public view returns (uint);\n', '\n', '    // @notice send `_value` token to `_to` from `msg.sender`\n', '    // @param _to The address of the recipient\n', '    // @param _value The amount of token to be transferred\n', '    // @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint _value) public returns (bool);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '}\n', '\n', 'contract ShapeCoin is FoundationToken("SHPC", "ShapeCoin", 18), ERC20, ERC223 {\n', '\n', '    using SafeMath for uint;\n', '\n', '    constructor() public {\n', '        _balanceOf[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _addr) public view returns (uint) {\n', '        return _balanceOf[_addr];\n', '    }\n', '\n', '    /**\n', '     *  ** FOR ADDRESSES **\n', '     *\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      This function works the same with the previous one\n', '     *      but doesn&#39;t contain `_data` param.\n', '     *      Added due to backwards compatibility reasons.\n', '     *\n', '     *  @param _to    Receiver address.\n', '     *  @param _value Amount of tokens that will be transferred.\n', '     *  @return Whether the transfer was successful or not\n', '     */\n', '\n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        if (_value > 0 && _value <= _balanceOf[msg.sender] && !isContract(_to)) {\n', '            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n', '            _balanceOf[_to] = _balanceOf[_to].add(_value);\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     *  ** FOR CONTRACTS **\n', '     *\n', '     *  @dev Transfer the specified amount of tokens to the specified address.\n', '     *      Invokes the `tokenFallback` function if the recipient is a contract.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallback` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     *  @notice send `_value` token to `_to` from `msg.sender`\n', '     *  @param _to The address of the recipient\n', '     *  @param _value The amount of token to be transferred\n', '     *  @param _data The data to be passed to our contract that we are actually going to allow to have data passed to\n', '     *  @return Whether the transfer was successful or not\n', '     */\n', '    \n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool) {\n', '        if (_value > 0 && _value <= _balanceOf[msg.sender] && isContract(_to)) {\n', '            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n', '            _balanceOf[_to] = _balanceOf[_to].add(_value);\n', '            ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\n', '            _contract.tokenFallback(msg.sender, _value, _data);\n', '            emit Transfer(msg.sender, _to, _value, _data);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function isContract(address _addr) private view returns (bool) {\n', '        uint codeSize;\n', '        /* solium-disable */\n', '        assembly {\n', '            codeSize := extcodesize(_addr)\n', '        }\n', '        /* solium-enable */\n', '        return codeSize > 0;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        if (_allowances[_from][msg.sender] > 0 &&\n', '            _value > 0 &&\n', '            _allowances[_from][msg.sender] >= _value &&\n', '            _balanceOf[_from] >= _value) {\n', '            _balanceOf[_from] = _balanceOf[_from].sub(_value);\n', '            _balanceOf[_to] = _balanceOf[_to].add(_value);\n', '            _allowances[_from][msg.sender] -= _value;\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        _allowances[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint) {\n', '        return _allowances[_owner][_spender];\n', '    }\n', '}']
['pragma solidity ^0.4.22;\n', '\n', '/**\n', '*  ** SAFEMATH **\n', '*/\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', '*  ** INTERFACES **\n', '*/\n', '\n', 'interface ERC20 {\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n', '    function approve(address _spender, uint _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract ERC223ReceivingContract {\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'interface ERC223 {\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', 'contract FoundationToken {\n', '    string internal _symbol;\n', '    string internal _name;\n', '    uint8 internal _decimals;\n', '    uint internal _totalSupply = 1000;\n', '    mapping (address => uint) internal _balanceOf;\n', '    mapping (address => mapping (address => uint)) internal _allowances;\n', '    \n', '    constructor(string symbol, string name, uint8 decimals) public {\n', '        _symbol = symbol;\n', '        _name = name;\n', '        _decimals = decimals;\n', '        _totalSupply = 1000*1000000 * (uint256(10) ** decimals);\n', '    }\n', '    \n', '    function name() public view returns (string) {\n', '        return _name;\n', '    }\n', '    \n', '    function symbol() public view returns (string) {\n', '        return _symbol;\n', '    }\n', '    \n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address _addr) public view returns (uint);\n', '\n', '    // @notice send `_value` token to `_to` from `msg.sender`\n', '    // @param _to The address of the recipient\n', '    // @param _value The amount of token to be transferred\n', '    // @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint _value) public returns (bool);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '}\n', '\n', 'contract ShapeCoin is FoundationToken("SHPC", "ShapeCoin", 18), ERC20, ERC223 {\n', '\n', '    using SafeMath for uint;\n', '\n', '    constructor() public {\n', '        _balanceOf[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _addr) public view returns (uint) {\n', '        return _balanceOf[_addr];\n', '    }\n', '\n', '    /**\n', '     *  ** FOR ADDRESSES **\n', '     *\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      This function works the same with the previous one\n', "     *      but doesn't contain `_data` param.\n", '     *      Added due to backwards compatibility reasons.\n', '     *\n', '     *  @param _to    Receiver address.\n', '     *  @param _value Amount of tokens that will be transferred.\n', '     *  @return Whether the transfer was successful or not\n', '     */\n', '\n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        if (_value > 0 && _value <= _balanceOf[msg.sender] && !isContract(_to)) {\n', '            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n', '            _balanceOf[_to] = _balanceOf[_to].add(_value);\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     *  ** FOR CONTRACTS **\n', '     *\n', '     *  @dev Transfer the specified amount of tokens to the specified address.\n', '     *      Invokes the `tokenFallback` function if the recipient is a contract.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallback` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     *  @notice send `_value` token to `_to` from `msg.sender`\n', '     *  @param _to The address of the recipient\n', '     *  @param _value The amount of token to be transferred\n', '     *  @param _data The data to be passed to our contract that we are actually going to allow to have data passed to\n', '     *  @return Whether the transfer was successful or not\n', '     */\n', '    \n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool) {\n', '        if (_value > 0 && _value <= _balanceOf[msg.sender] && isContract(_to)) {\n', '            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n', '            _balanceOf[_to] = _balanceOf[_to].add(_value);\n', '            ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\n', '            _contract.tokenFallback(msg.sender, _value, _data);\n', '            emit Transfer(msg.sender, _to, _value, _data);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function isContract(address _addr) private view returns (bool) {\n', '        uint codeSize;\n', '        /* solium-disable */\n', '        assembly {\n', '            codeSize := extcodesize(_addr)\n', '        }\n', '        /* solium-enable */\n', '        return codeSize > 0;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        if (_allowances[_from][msg.sender] > 0 &&\n', '            _value > 0 &&\n', '            _allowances[_from][msg.sender] >= _value &&\n', '            _balanceOf[_from] >= _value) {\n', '            _balanceOf[_from] = _balanceOf[_from].sub(_value);\n', '            _balanceOf[_to] = _balanceOf[_to].add(_value);\n', '            _allowances[_from][msg.sender] -= _value;\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        _allowances[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint) {\n', '        return _allowances[_owner][_spender];\n', '    }\n', '}']
