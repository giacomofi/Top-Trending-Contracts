['pragma solidity ^0.4.20;\n', 'library SafeMath { //standard library for uint\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0 || b == 0){\n', '        return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function pow(uint256 a, uint256 b) internal pure returns (uint256){ //power function\n', '    if (b == 0){\n', '      return 1;\n', '    }\n', '    uint256 c = a**b;\n', '    assert (c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract HeliosToken { //ERC - 20 token contract\n', '  using SafeMath for uint;\n', '\n', '  // Triggered when tokens are transferred.\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '\n', '  string public constant symbol = "HLC";\n', '  string public constant name = "Helios";\n', '\n', '  uint8 public constant decimals = 2;\n', '  uint256 _totalSupply = uint(5000000).mul(uint(10).pow(decimals));\n', '\n', '  function HeliosToken () public {\n', '    balances[address(this)] = _totalSupply;\n', '  }\n', '  \n', '  mapping(address => uint256) balances;\n', '\n', '  // Owner of account approves the transfer of an amount to another account\n', '  mapping(address => mapping (address => uint256)) allowed;\n', '\n', '  function totalSupply() public view returns (uint256) { //standart ERC-20 function\n', '    return _totalSupply;\n', '  }\n', '\n', '  function balanceOf(address _address) public view returns (uint256 balance) {//standart ERC-20 function\n', '    return balances[_address];\n', '  }\n', '\n', '  //standart ERC-20 function\n', '  function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '    require(address(this) != _to && _to != address(0));\n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Transfer(msg.sender,_to,_amount);\n', '    return true;\n', '  }\n', '  \n', '  address public crowdsaleContract;\n', '\n', '  //connect to crowdsaleContract, can be use once\n', '  function setCrowdsaleContract (address _address) public{\n', '    require(crowdsaleContract == address(0));\n', '    crowdsaleContract = _address;\n', '  }\n', '\n', '  uint public crowdsaleTokens = uint(4126213).mul(uint(10).pow(decimals)); //_totalSupply - distributing\n', '\n', '  function sendCrowdsaleTokens (address _address, uint _value) public {\n', '    require (msg.sender == crowdsaleContract);\n', '    crowdsaleTokens = crowdsaleTokens.sub(_value);\n', '    balances[address(this)] = balances[address(this)].sub(_value);\n', '    balances[_address] = balances[_address].add(_value);\n', '    emit Transfer(address(this),_address,_value); \n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _amount) public returns(bool success){\n', '    require(address(this) != _to && _to != address(0));\n', '    balances[_from] = balances[_from].sub(_amount);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Transfer(_from,_to,_amount);\n', '    return true;\n', '  }\n', '\n', '  //standart ERC-20 function\n', '  function approve(address _spender, uint256 _amount)public returns (bool success) { \n', '    allowed[msg.sender][_spender] = _amount;\n', '    emit Approval(msg.sender, _spender, _amount);\n', '    return true;\n', '  }\n', '\n', '  //standart ERC-20 function\n', '  function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  address public teamAddress = 0x1367eC0f6f5DEFda7B0f1b7AD234900E23Ee62CF;\n', '  uint public teamDistribute = uint(500000).mul(uint(10).pow(decimals));\n', '  address public reserveAddress = 0xD598350D4D55f72dAb1286Ed0A3a3b7F1A7A54Ce;\n', '  uint public reserveDistribute = uint(250000).mul(uint(10).pow(decimals));\n', '  address public bountyAddress = 0xcBfA29FBe59C83A1130b4957bD41847a2837782E;\n', '\n', '  function endIco() public {  \n', '    require (msg.sender == crowdsaleContract);\n', '    require (balances[address(this)] != 0);\n', '    \n', '    uint tokensSold = _totalSupply.sub(crowdsaleTokens);\n', '\n', '    balances[teamAddress] = balances[teamAddress].add(teamDistribute);\n', '    balances[reserveAddress] = balances[reserveAddress].add(reserveDistribute);\n', '    balances[bountyAddress] = balances[bountyAddress].add(tokensSold*3/100);\n', '\n', '    emit Transfer(address(this), teamAddress, teamDistribute);\n', '    emit Transfer(address(this), reserveAddress, reserveDistribute);\n', '    emit Transfer(address(this), bountyAddress, tokensSold*3/100);\n', '\n', '    uint buffer = tokensSold*3/100 + teamDistribute + reserveDistribute;\n', '\n', '    emit Transfer(address(this), 0, balances[address(this)].sub(buffer));\n', '    balances[address(this)] = 0;\n', '  }\n', '}']
['pragma solidity ^0.4.20;\n', 'library SafeMath { //standard library for uint\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0 || b == 0){\n', '        return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function pow(uint256 a, uint256 b) internal pure returns (uint256){ //power function\n', '    if (b == 0){\n', '      return 1;\n', '    }\n', '    uint256 c = a**b;\n', '    assert (c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract HeliosToken { //ERC - 20 token contract\n', '  using SafeMath for uint;\n', '\n', '  // Triggered when tokens are transferred.\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '\n', '  string public constant symbol = "HLC";\n', '  string public constant name = "Helios";\n', '\n', '  uint8 public constant decimals = 2;\n', '  uint256 _totalSupply = uint(5000000).mul(uint(10).pow(decimals));\n', '\n', '  function HeliosToken () public {\n', '    balances[address(this)] = _totalSupply;\n', '  }\n', '  \n', '  mapping(address => uint256) balances;\n', '\n', '  // Owner of account approves the transfer of an amount to another account\n', '  mapping(address => mapping (address => uint256)) allowed;\n', '\n', '  function totalSupply() public view returns (uint256) { //standart ERC-20 function\n', '    return _totalSupply;\n', '  }\n', '\n', '  function balanceOf(address _address) public view returns (uint256 balance) {//standart ERC-20 function\n', '    return balances[_address];\n', '  }\n', '\n', '  //standart ERC-20 function\n', '  function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '    require(address(this) != _to && _to != address(0));\n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Transfer(msg.sender,_to,_amount);\n', '    return true;\n', '  }\n', '  \n', '  address public crowdsaleContract;\n', '\n', '  //connect to crowdsaleContract, can be use once\n', '  function setCrowdsaleContract (address _address) public{\n', '    require(crowdsaleContract == address(0));\n', '    crowdsaleContract = _address;\n', '  }\n', '\n', '  uint public crowdsaleTokens = uint(4126213).mul(uint(10).pow(decimals)); //_totalSupply - distributing\n', '\n', '  function sendCrowdsaleTokens (address _address, uint _value) public {\n', '    require (msg.sender == crowdsaleContract);\n', '    crowdsaleTokens = crowdsaleTokens.sub(_value);\n', '    balances[address(this)] = balances[address(this)].sub(_value);\n', '    balances[_address] = balances[_address].add(_value);\n', '    emit Transfer(address(this),_address,_value); \n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _amount) public returns(bool success){\n', '    require(address(this) != _to && _to != address(0));\n', '    balances[_from] = balances[_from].sub(_amount);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Transfer(_from,_to,_amount);\n', '    return true;\n', '  }\n', '\n', '  //standart ERC-20 function\n', '  function approve(address _spender, uint256 _amount)public returns (bool success) { \n', '    allowed[msg.sender][_spender] = _amount;\n', '    emit Approval(msg.sender, _spender, _amount);\n', '    return true;\n', '  }\n', '\n', '  //standart ERC-20 function\n', '  function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  address public teamAddress = 0x1367eC0f6f5DEFda7B0f1b7AD234900E23Ee62CF;\n', '  uint public teamDistribute = uint(500000).mul(uint(10).pow(decimals));\n', '  address public reserveAddress = 0xD598350D4D55f72dAb1286Ed0A3a3b7F1A7A54Ce;\n', '  uint public reserveDistribute = uint(250000).mul(uint(10).pow(decimals));\n', '  address public bountyAddress = 0xcBfA29FBe59C83A1130b4957bD41847a2837782E;\n', '\n', '  function endIco() public {  \n', '    require (msg.sender == crowdsaleContract);\n', '    require (balances[address(this)] != 0);\n', '    \n', '    uint tokensSold = _totalSupply.sub(crowdsaleTokens);\n', '\n', '    balances[teamAddress] = balances[teamAddress].add(teamDistribute);\n', '    balances[reserveAddress] = balances[reserveAddress].add(reserveDistribute);\n', '    balances[bountyAddress] = balances[bountyAddress].add(tokensSold*3/100);\n', '\n', '    emit Transfer(address(this), teamAddress, teamDistribute);\n', '    emit Transfer(address(this), reserveAddress, reserveDistribute);\n', '    emit Transfer(address(this), bountyAddress, tokensSold*3/100);\n', '\n', '    uint buffer = tokensSold*3/100 + teamDistribute + reserveDistribute;\n', '\n', '    emit Transfer(address(this), 0, balances[address(this)].sub(buffer));\n', '    balances[address(this)] = 0;\n', '  }\n', '}']
