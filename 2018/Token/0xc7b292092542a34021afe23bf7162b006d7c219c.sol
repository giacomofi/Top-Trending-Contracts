['pragma solidity 0.4.25;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  constructor(\n', '    ERC20Basic _token,\n', '    address _beneficiary,\n', '    uint256 _releaseTime\n', '  )\n', '    public\n', '  {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_releaseTime > block.timestamp);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(address(this));\n', '    require(amount > 0);\n', '\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title DiscoperiTokenVesting\n', ' * @dev DiscoperiTokenVesting mixin that gives possibility for token holders to have vested amounts of tokens on their balances. \n', ' * Token should check a balance spot for transfer and transferFrom functions to use this feature.\n', ' */\n', 'contract DiscoperiTokenVesting {\n', '    using SafeMath for uint256;  \n', '\n', '    // vesting parts count\n', '    uint256 public constant VESTING_PARTS = 4;\n', '\n', '    // vesting releases timestamps\n', '    uint256[VESTING_PARTS] public vestingReleases;\n', '\n', '    // list of vested amounts by beneficiary\n', '    mapping (address => uint256) public vestedAmount;\n', '    \n', '    // vesting event logging\n', '    event Vesting(address indexed to, uint256 amount);    \n', '\n', '    /**\n', '     * @dev Find out if the address has vested amounts\n', '     * @param _who address Address checked for vested amounts\n', '     * @return bool Returns true if address has vested amounts     \n', '     */  \n', '    function hasVested(address _who) public view returns (bool) {\n', '        return balanceVested(_who) > 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Get balance vested to the current moment of time\n', '     * @param _who address Address owns vested amounts\n', '     * @return uint256 Balance vested to the current moment of time     \n', '     */       \n', '    function balanceVested(address _who) public view returns (uint256) {\n', '        for (uint256 i = 0; i < VESTING_PARTS; i++) {\n', '            if (now < vestingReleases[i]) // solium-disable-line security/no-block-members\n', '               return vestedAmount[_who].mul(VESTING_PARTS - i).div(VESTING_PARTS);\n', '        }\n', '    } \n', ' \n', '    /**\n', '     * @dev Make vesting for the amount using contract with vesting rules\n', '     * @param _who address Address gets the vested amount\n', '     * @param _amount uint256 Amount to vest\n', '     */ \n', '    function _vest(address _who, uint256 _amount) internal {\n', '        require(_who != address(0), "Vesting target address can&#39;t be zero.");\n', '        require(_amount > 0, "Vesting amount should be > 0.");\n', '        vestedAmount[_who] = vestedAmount[_who].add(_amount);\n', '        emit Vesting(_who, _amount);\n', '    }        \n', '}\n', '\n', '/**\n', ' * @title DiscoperiTokenLockup\n', ' * @dev This contract gives possibility for token holders to have locked up (till release time) amounts of tokens on their balances. \n', ' */\n', 'contract DiscoperiTokenLockup {\n', '    using SafeMath for uint256;  \n', '\n', '    // LockedUp struct\n', '    struct LockedUp {\n', '        uint256 amount; // lockedup amount\n', '        uint256 release; // release timestamp\n', '    }\n', '\n', '    // list of lockedup amounts and release timestamps\n', '    mapping (address => LockedUp[]) public lockedup;\n', '\n', '    // lockup event logging\n', '    event Lockup(address indexed to, uint256 amount, uint256 release);\n', '\n', '    /**\n', '     * @dev Find out if the address has locked up amounts\n', '     * @param _who address Address checked for lockedup amounts\n', '     * @return bool Returns true if address has lockedup amounts     \n', '     */    \n', '    function hasLockedUp(address _who) public view returns (bool) {\n', '        return balanceLockedUp(_who) > 0;\n', '    }    \n', '\n', '    /**\n', '     * @dev Get balance locked up to the current moment of time\n', '     * @param _who address Address owns lockedup amounts\n', '     * @return uint256 Balance locked up to the current moment of time     \n', '     */       \n', '    function balanceLockedUp(address _who) public view returns (uint256) {\n', '        uint256 _balanceLockedUp = 0;\n', '        for (uint256 i = 0; i < lockedup[_who].length; i++) {\n', '            if (lockedup[_who][i].release > block.timestamp) // solium-disable-line security/no-block-members\n', '                _balanceLockedUp = _balanceLockedUp.add(lockedup[_who][i].amount);\n', '        }\n', '        return _balanceLockedUp;\n', '    }    \n', '    \n', '    /**\n', '     * @dev Lockup amount till release time\n', '     * @param _who address Address gets the lockedup amount\n', '     * @param _amount uint256 Amount to lockup\n', '     * @param _release uint256 Release timestamp     \n', '     */     \n', '    function _lockup(address _who, uint256 _amount, uint256 _release) internal {\n', '        if (_release != 0) {\n', '            require(_who != address(0), "Lockup target address can&#39;t be zero.");\n', '            require(_amount > 0, "Lockup amount should be > 0.");   \n', '            require(_release > block.timestamp, "Lockup release time should be > now."); // solium-disable-line security/no-block-members \n', '            lockedup[_who].push(LockedUp(_amount, _release));\n', '            emit Lockup(_who, _amount, _release);\n', '        }\n', '    }      \n', '\n', '}\n', '\n', '/**\n', ' * @title IDiscoperiSale\n', ' * @dev IDiscoperiSale is a ..\n', ' */\n', 'contract IDiscoperiSale {\n', '    \n', '    /**\n', '     * @dev Order tokens for beneficiary\n', '     * @param _collector  collector id\n', '     * @param _tx hash of the transaction\n', '     * @param _beneficiary beneficiary who has paid coins for tokens\n', '     * @param _funds amount of coins beneficiary has paid \n', '     */\n', '    function acquireTokens(uint256 _collector, uint256 _tx, address _beneficiary, uint256 _funds) external payable;\n', '\n', '}\n', '\n', '/**\n', ' * @title IDiscoperiToken\n', ' * @dev IDiscoperiToken is a ..\n', ' */\n', 'contract IDiscoperiToken {\n', '\n', '    /**\n', '     * @dev Burn tokens from sale contract\n', '     */\n', '    function burnSaleTokens() external;\n', '\n', '     /**\n', '     * @dev Transfer tokens from one address to another with westing\n', '     * @param _to address which you want to transfer to\n', '     * @param _value the amount of tokens to be transferred\n', '     * @return true if the transfer was succeeded\n', '     */\n', '    function transferWithVesting(address _to, uint256 _value) external returns (bool); \n', '\n', '}\n', '\n', '/**\n', ' * @title DiscoperiToken\n', ' * @dev Discoperi Token contract\n', ' */\n', 'contract DiscoperiToken is  \n', '    IDiscoperiToken,\n', '    StandardToken, \n', '    Ownable,\n', '    DiscoperiTokenLockup,\n', '    DiscoperiTokenVesting\n', '{\n', '    using SafeMath for uint256;\n', '\n', '    // token constants\n', '    string public constant name = "Discoperi Token"; // solium-disable-line uppercase\n', '    string public constant symbol = "DISC"; // solium-disable-line uppercase\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '    // total tokens supply\n', '    uint256 public constant TOTAL_SUPPLY = 200000000000 * (10 ** uint256(decimals)); // 200,000,000,000 DISCs\n', '\n', '    // TOTAL_SUPPLY is distributed as follows\n', '    uint256 public constant SALES_SUPPLY = 50000000000 * (10 ** uint256(decimals)); // 50,000,000,000 DISCs - 25%\n', '    uint256 public constant INVESTORS_SUPPLY = 50000000000 * (10 ** uint256(decimals)); // 50,000,000,000 DISCs - 25%\n', '    uint256 public constant TEAM_SUPPLY = 30000000000 * (10 ** uint256(decimals)); // 30,000,000,000 DISCs - 15%\n', '    uint256 public constant RESERVE_SUPPLY = 22000000000 * (10 ** uint256(decimals)); // 22,000,000,000 DISCs - 11%\n', '    uint256 public constant MARKET_DEV_SUPPLY = 20000000000 * (10 ** uint256(decimals)); // 20,000,000,000 DISCs - 10%    \n', '    uint256 public constant PR_ADVERSTISING_SUPPLY = 15000000000 * (10 ** uint256(decimals)); // 15,000,000,000 DISCs - 7.5%\n', '    uint256 public constant REFERRAL_SUPPLY = 8000000000 * (10 ** uint256(decimals)); // 8,000,000,000 DISCs - 4%\n', '    uint256 public constant ANGEL_INVESTORS_SUPPLY = 5000000000 * (10 ** uint256(decimals)); // 5,000,000,000 DISCs - 2.5%\n', '    \n', '    // fund wallets\n', '    address public constant MARKET_DEV_ADDRESS = 0x3f272f26C2322cB38781D0C6C42B1c2531Ec79Be;\n', '    address public constant TEAM_ADDRESS = 0xD8069C8c24D10023DBC5823156994aC2A638dBBd;\n', '    address public constant RESERVE_ADDRESS = 0x7656Cee371A812775A5E0Fb98a565Cc731aCC44B;\n', '    address public constant INVESTORS_ADDRESS= 0x25230591492198b6DD4363d03a7dAa5aD7590D2d;\n', '    address public constant PR_ADVERSTISING_ADDRESS = 0xC36d70AE6ddBE87F973bf4248Df52d0370FBb7E7;\n', '\n', '    // sale address\n', '    address public sale;\n', '\n', '    // restrict execution only for sale address\n', '    modifier onlySale() {\n', '        require(msg.sender == sale, "Attemp to execute by not sale address");\n', '        _;\n', '    }\n', '\n', '    // restrict execution only for authorized address\n', '    modifier onlyLockupAuthorized() {\n', '        require(msg.sender == INVESTORS_ADDRESS, "Attemp to lockup tokens by not authorized address");\n', '        _;\n', '    }\n', '\n', '    // check balance spot on transfer\n', '    modifier spotTransfer(address _from, uint256 _value) {\n', '        require(_value <= balanceSpot(_from), "Attempt to transfer more than balance spot");\n', '        _;\n', '    }\n', '\n', '    // burn event\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * CONSTRUCTOR\n', '     * @dev Allocate investors tokens supply\n', '     */\n', '    constructor() public { \n', '        balances[INVESTORS_ADDRESS] = balances[INVESTORS_ADDRESS].add(INVESTORS_SUPPLY);\n', '        totalSupply_ = totalSupply_.add(INVESTORS_SUPPLY);\n', '        emit Transfer(address(0), INVESTORS_ADDRESS, INVESTORS_SUPPLY);\n', '\n', '        balances[INVESTORS_ADDRESS] = balances[INVESTORS_ADDRESS].add(ANGEL_INVESTORS_SUPPLY);\n', '        totalSupply_ = totalSupply_.add(ANGEL_INVESTORS_SUPPLY);\n', '        emit Transfer(address(0), INVESTORS_ADDRESS, ANGEL_INVESTORS_SUPPLY);\n', '    }\n', '\n', '    /**\n', '     * @dev Initialize token contract and allocate tokens supply\n', '     * @param _sale address of the sale contract\n', '     * @param _teamRelease team tokens release timestamp\n', '     * @param _vestingFirstRelease first release timestamp of tokens vesting\n', '     * @param _vestingSecondRelease second release timestamp of tokens vesting\n', '     * @param _vestingThirdRelease third release timestamp of tokens vesting\n', '     * @param _vestingFourthRelease fourth release timestamp of tokens vesting\n', '     */\n', '    function init(\n', '        address _sale, \n', '        uint256 _teamRelease, \n', '        uint256 _vestingFirstRelease,\n', '        uint256 _vestingSecondRelease,\n', '        uint256 _vestingThirdRelease,\n', '        uint256 _vestingFourthRelease\n', '    ) \n', '        external \n', '        onlyOwner \n', '    {\n', '        require(sale == address(0), "cannot execute init function twice");\n', '        require(_sale != address(0), "cannot set zero address as sale");\n', '        require(_teamRelease > now, "team tokens release date should be > now"); // solium-disable-line security/no-block-members\n', '        require(_vestingFirstRelease > now, "vesting first release date should be > now"); // solium-disable-line security/no-block-members\n', '        require(_vestingSecondRelease > now, "vesting second release date should be > now"); // solium-disable-line security/no-block-members\n', '        require(_vestingThirdRelease > now, "vesting third release date should be > now"); // solium-disable-line security/no-block-members\n', '        require(_vestingFourthRelease > now, "vesting fourth release date should be > now"); // solium-disable-line security/no-block-members\n', '\n', '        sale = _sale;\n', '\n', '        balances[sale] = balances[sale].add(SALES_SUPPLY);\n', '        totalSupply_ = totalSupply_.add(SALES_SUPPLY);\n', '        emit Transfer(address(0), sale, SALES_SUPPLY);\n', '\n', '        balances[sale] = balances[sale].add(REFERRAL_SUPPLY);\n', '        totalSupply_ = totalSupply_.add(REFERRAL_SUPPLY);\n', '        emit Transfer(address(0), sale, REFERRAL_SUPPLY);\n', '\n', '        TokenTimelock teamTimelock = new TokenTimelock(this, TEAM_ADDRESS, _teamRelease);\n', '        balances[teamTimelock] = balances[teamTimelock].add(TEAM_SUPPLY);\n', '        totalSupply_ = totalSupply_.add(TEAM_SUPPLY);\n', '        emit Transfer(address(0), teamTimelock, TEAM_SUPPLY);\n', '         \n', '        balances[MARKET_DEV_ADDRESS] = balances[MARKET_DEV_ADDRESS].add(MARKET_DEV_SUPPLY);\n', '        totalSupply_ = totalSupply_.add(MARKET_DEV_SUPPLY);\n', '        emit Transfer(address(0), MARKET_DEV_ADDRESS, MARKET_DEV_SUPPLY);\n', '\n', '        balances[RESERVE_ADDRESS] = balances[RESERVE_ADDRESS].add(RESERVE_SUPPLY);\n', '        totalSupply_ = totalSupply_.add(RESERVE_SUPPLY);\n', '        emit Transfer(address(0), RESERVE_ADDRESS, RESERVE_SUPPLY);\n', '       \n', '        balances[PR_ADVERSTISING_ADDRESS] = balances[PR_ADVERSTISING_ADDRESS].add(PR_ADVERSTISING_SUPPLY);\n', '        totalSupply_ = totalSupply_.add(PR_ADVERSTISING_SUPPLY);\n', '        emit Transfer(address(0), PR_ADVERSTISING_ADDRESS, PR_ADVERSTISING_SUPPLY);\n', '\n', '        vestingReleases[0] = _vestingFirstRelease;\n', '        vestingReleases[1] = _vestingSecondRelease;\n', '        vestingReleases[2] = _vestingThirdRelease;\n', '        vestingReleases[3] = _vestingFourthRelease;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another with vesting\n', '     * @param _to address which you want to transfer to\n', '     * @param _value the amount of tokens to be transferred\n', '     * @return true if the transfer was succeeded\n', '     */\n', '    function transferWithVesting(address _to, uint256 _value) external onlySale returns (bool) {    \n', '        _vest(_to, _value);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer  tokens from one address to another with locking up\n', '     * @param _to address which you want to transfer to\n', '     * @param _value the amount of tokens to be transferred\n', '     * @param _release the amount of tokens to be transferred\n', '     * @return true if the transfer was succeeded\n', '     */\n', '    function transferWithLockup(address _to, uint256 _value, uint256 _release) external onlyLockupAuthorized returns (bool) {    \n', '        _lockup(_to, _value, _release);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Burn all tokens, remaining on sale contract\n', '     */\n', '    function burnSaleTokens() external onlySale {\n', '        uint256 _amount = balances[sale];\n', '        balances[sale] = 0;\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '        emit Burn(sale, _amount);\n', '        emit Transfer(sale, address(0), _amount);        \n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _to address which you want to transfer to\n', '     * @param _value the amount of tokens to be transferred\n', '     * @return true if the transfer was succeeded\n', '     */\n', '    function transfer(address _to, uint256 _value) public spotTransfer(msg.sender, _value) returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from the address which you want to send tokens from\n', '     * @param _to the address which you want to transfer to\n', '     * @param _value the amount of tokens to be transferred\n', '     * @return true if the transfer was succeeded\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public spotTransfer(_from, _value) returns (bool) {    \n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Get balance spot for the current moment of time\n', '     * @param _who address owns balance spot\n', '     * @return balance spot for the current moment of time     \n', '     */   \n', '    function balanceSpot(address _who) public view returns (uint256) {\n', '        return balanceOf(_who).sub(balanceVested(_who)).sub(balanceLockedUp(_who));\n', '    }     \n', '\n', '}']
['pragma solidity 0.4.25;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  constructor(\n', '    ERC20Basic _token,\n', '    address _beneficiary,\n', '    uint256 _releaseTime\n', '  )\n', '    public\n', '  {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_releaseTime > block.timestamp);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(address(this));\n', '    require(amount > 0);\n', '\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title DiscoperiTokenVesting\n', ' * @dev DiscoperiTokenVesting mixin that gives possibility for token holders to have vested amounts of tokens on their balances. \n', ' * Token should check a balance spot for transfer and transferFrom functions to use this feature.\n', ' */\n', 'contract DiscoperiTokenVesting {\n', '    using SafeMath for uint256;  \n', '\n', '    // vesting parts count\n', '    uint256 public constant VESTING_PARTS = 4;\n', '\n', '    // vesting releases timestamps\n', '    uint256[VESTING_PARTS] public vestingReleases;\n', '\n', '    // list of vested amounts by beneficiary\n', '    mapping (address => uint256) public vestedAmount;\n', '    \n', '    // vesting event logging\n', '    event Vesting(address indexed to, uint256 amount);    \n', '\n', '    /**\n', '     * @dev Find out if the address has vested amounts\n', '     * @param _who address Address checked for vested amounts\n', '     * @return bool Returns true if address has vested amounts     \n', '     */  \n', '    function hasVested(address _who) public view returns (bool) {\n', '        return balanceVested(_who) > 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Get balance vested to the current moment of time\n', '     * @param _who address Address owns vested amounts\n', '     * @return uint256 Balance vested to the current moment of time     \n', '     */       \n', '    function balanceVested(address _who) public view returns (uint256) {\n', '        for (uint256 i = 0; i < VESTING_PARTS; i++) {\n', '            if (now < vestingReleases[i]) // solium-disable-line security/no-block-members\n', '               return vestedAmount[_who].mul(VESTING_PARTS - i).div(VESTING_PARTS);\n', '        }\n', '    } \n', ' \n', '    /**\n', '     * @dev Make vesting for the amount using contract with vesting rules\n', '     * @param _who address Address gets the vested amount\n', '     * @param _amount uint256 Amount to vest\n', '     */ \n', '    function _vest(address _who, uint256 _amount) internal {\n', '        require(_who != address(0), "Vesting target address can\'t be zero.");\n', '        require(_amount > 0, "Vesting amount should be > 0.");\n', '        vestedAmount[_who] = vestedAmount[_who].add(_amount);\n', '        emit Vesting(_who, _amount);\n', '    }        \n', '}\n', '\n', '/**\n', ' * @title DiscoperiTokenLockup\n', ' * @dev This contract gives possibility for token holders to have locked up (till release time) amounts of tokens on their balances. \n', ' */\n', 'contract DiscoperiTokenLockup {\n', '    using SafeMath for uint256;  \n', '\n', '    // LockedUp struct\n', '    struct LockedUp {\n', '        uint256 amount; // lockedup amount\n', '        uint256 release; // release timestamp\n', '    }\n', '\n', '    // list of lockedup amounts and release timestamps\n', '    mapping (address => LockedUp[]) public lockedup;\n', '\n', '    // lockup event logging\n', '    event Lockup(address indexed to, uint256 amount, uint256 release);\n', '\n', '    /**\n', '     * @dev Find out if the address has locked up amounts\n', '     * @param _who address Address checked for lockedup amounts\n', '     * @return bool Returns true if address has lockedup amounts     \n', '     */    \n', '    function hasLockedUp(address _who) public view returns (bool) {\n', '        return balanceLockedUp(_who) > 0;\n', '    }    \n', '\n', '    /**\n', '     * @dev Get balance locked up to the current moment of time\n', '     * @param _who address Address owns lockedup amounts\n', '     * @return uint256 Balance locked up to the current moment of time     \n', '     */       \n', '    function balanceLockedUp(address _who) public view returns (uint256) {\n', '        uint256 _balanceLockedUp = 0;\n', '        for (uint256 i = 0; i < lockedup[_who].length; i++) {\n', '            if (lockedup[_who][i].release > block.timestamp) // solium-disable-line security/no-block-members\n', '                _balanceLockedUp = _balanceLockedUp.add(lockedup[_who][i].amount);\n', '        }\n', '        return _balanceLockedUp;\n', '    }    \n', '    \n', '    /**\n', '     * @dev Lockup amount till release time\n', '     * @param _who address Address gets the lockedup amount\n', '     * @param _amount uint256 Amount to lockup\n', '     * @param _release uint256 Release timestamp     \n', '     */     \n', '    function _lockup(address _who, uint256 _amount, uint256 _release) internal {\n', '        if (_release != 0) {\n', '            require(_who != address(0), "Lockup target address can\'t be zero.");\n', '            require(_amount > 0, "Lockup amount should be > 0.");   \n', '            require(_release > block.timestamp, "Lockup release time should be > now."); // solium-disable-line security/no-block-members \n', '            lockedup[_who].push(LockedUp(_amount, _release));\n', '            emit Lockup(_who, _amount, _release);\n', '        }\n', '    }      \n', '\n', '}\n', '\n', '/**\n', ' * @title IDiscoperiSale\n', ' * @dev IDiscoperiSale is a ..\n', ' */\n', 'contract IDiscoperiSale {\n', '    \n', '    /**\n', '     * @dev Order tokens for beneficiary\n', '     * @param _collector  collector id\n', '     * @param _tx hash of the transaction\n', '     * @param _beneficiary beneficiary who has paid coins for tokens\n', '     * @param _funds amount of coins beneficiary has paid \n', '     */\n', '    function acquireTokens(uint256 _collector, uint256 _tx, address _beneficiary, uint256 _funds) external payable;\n', '\n', '}\n', '\n', '/**\n', ' * @title IDiscoperiToken\n', ' * @dev IDiscoperiToken is a ..\n', ' */\n', 'contract IDiscoperiToken {\n', '\n', '    /**\n', '     * @dev Burn tokens from sale contract\n', '     */\n', '    function burnSaleTokens() external;\n', '\n', '     /**\n', '     * @dev Transfer tokens from one address to another with westing\n', '     * @param _to address which you want to transfer to\n', '     * @param _value the amount of tokens to be transferred\n', '     * @return true if the transfer was succeeded\n', '     */\n', '    function transferWithVesting(address _to, uint256 _value) external returns (bool); \n', '\n', '}\n', '\n', '/**\n', ' * @title DiscoperiToken\n', ' * @dev Discoperi Token contract\n', ' */\n', 'contract DiscoperiToken is  \n', '    IDiscoperiToken,\n', '    StandardToken, \n', '    Ownable,\n', '    DiscoperiTokenLockup,\n', '    DiscoperiTokenVesting\n', '{\n', '    using SafeMath for uint256;\n', '\n', '    // token constants\n', '    string public constant name = "Discoperi Token"; // solium-disable-line uppercase\n', '    string public constant symbol = "DISC"; // solium-disable-line uppercase\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '    // total tokens supply\n', '    uint256 public constant TOTAL_SUPPLY = 200000000000 * (10 ** uint256(decimals)); // 200,000,000,000 DISCs\n', '\n', '    // TOTAL_SUPPLY is distributed as follows\n', '    uint256 public constant SALES_SUPPLY = 50000000000 * (10 ** uint256(decimals)); // 50,000,000,000 DISCs - 25%\n', '    uint256 public constant INVESTORS_SUPPLY = 50000000000 * (10 ** uint256(decimals)); // 50,000,000,000 DISCs - 25%\n', '    uint256 public constant TEAM_SUPPLY = 30000000000 * (10 ** uint256(decimals)); // 30,000,000,000 DISCs - 15%\n', '    uint256 public constant RESERVE_SUPPLY = 22000000000 * (10 ** uint256(decimals)); // 22,000,000,000 DISCs - 11%\n', '    uint256 public constant MARKET_DEV_SUPPLY = 20000000000 * (10 ** uint256(decimals)); // 20,000,000,000 DISCs - 10%    \n', '    uint256 public constant PR_ADVERSTISING_SUPPLY = 15000000000 * (10 ** uint256(decimals)); // 15,000,000,000 DISCs - 7.5%\n', '    uint256 public constant REFERRAL_SUPPLY = 8000000000 * (10 ** uint256(decimals)); // 8,000,000,000 DISCs - 4%\n', '    uint256 public constant ANGEL_INVESTORS_SUPPLY = 5000000000 * (10 ** uint256(decimals)); // 5,000,000,000 DISCs - 2.5%\n', '    \n', '    // fund wallets\n', '    address public constant MARKET_DEV_ADDRESS = 0x3f272f26C2322cB38781D0C6C42B1c2531Ec79Be;\n', '    address public constant TEAM_ADDRESS = 0xD8069C8c24D10023DBC5823156994aC2A638dBBd;\n', '    address public constant RESERVE_ADDRESS = 0x7656Cee371A812775A5E0Fb98a565Cc731aCC44B;\n', '    address public constant INVESTORS_ADDRESS= 0x25230591492198b6DD4363d03a7dAa5aD7590D2d;\n', '    address public constant PR_ADVERSTISING_ADDRESS = 0xC36d70AE6ddBE87F973bf4248Df52d0370FBb7E7;\n', '\n', '    // sale address\n', '    address public sale;\n', '\n', '    // restrict execution only for sale address\n', '    modifier onlySale() {\n', '        require(msg.sender == sale, "Attemp to execute by not sale address");\n', '        _;\n', '    }\n', '\n', '    // restrict execution only for authorized address\n', '    modifier onlyLockupAuthorized() {\n', '        require(msg.sender == INVESTORS_ADDRESS, "Attemp to lockup tokens by not authorized address");\n', '        _;\n', '    }\n', '\n', '    // check balance spot on transfer\n', '    modifier spotTransfer(address _from, uint256 _value) {\n', '        require(_value <= balanceSpot(_from), "Attempt to transfer more than balance spot");\n', '        _;\n', '    }\n', '\n', '    // burn event\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * CONSTRUCTOR\n', '     * @dev Allocate investors tokens supply\n', '     */\n', '    constructor() public { \n', '        balances[INVESTORS_ADDRESS] = balances[INVESTORS_ADDRESS].add(INVESTORS_SUPPLY);\n', '        totalSupply_ = totalSupply_.add(INVESTORS_SUPPLY);\n', '        emit Transfer(address(0), INVESTORS_ADDRESS, INVESTORS_SUPPLY);\n', '\n', '        balances[INVESTORS_ADDRESS] = balances[INVESTORS_ADDRESS].add(ANGEL_INVESTORS_SUPPLY);\n', '        totalSupply_ = totalSupply_.add(ANGEL_INVESTORS_SUPPLY);\n', '        emit Transfer(address(0), INVESTORS_ADDRESS, ANGEL_INVESTORS_SUPPLY);\n', '    }\n', '\n', '    /**\n', '     * @dev Initialize token contract and allocate tokens supply\n', '     * @param _sale address of the sale contract\n', '     * @param _teamRelease team tokens release timestamp\n', '     * @param _vestingFirstRelease first release timestamp of tokens vesting\n', '     * @param _vestingSecondRelease second release timestamp of tokens vesting\n', '     * @param _vestingThirdRelease third release timestamp of tokens vesting\n', '     * @param _vestingFourthRelease fourth release timestamp of tokens vesting\n', '     */\n', '    function init(\n', '        address _sale, \n', '        uint256 _teamRelease, \n', '        uint256 _vestingFirstRelease,\n', '        uint256 _vestingSecondRelease,\n', '        uint256 _vestingThirdRelease,\n', '        uint256 _vestingFourthRelease\n', '    ) \n', '        external \n', '        onlyOwner \n', '    {\n', '        require(sale == address(0), "cannot execute init function twice");\n', '        require(_sale != address(0), "cannot set zero address as sale");\n', '        require(_teamRelease > now, "team tokens release date should be > now"); // solium-disable-line security/no-block-members\n', '        require(_vestingFirstRelease > now, "vesting first release date should be > now"); // solium-disable-line security/no-block-members\n', '        require(_vestingSecondRelease > now, "vesting second release date should be > now"); // solium-disable-line security/no-block-members\n', '        require(_vestingThirdRelease > now, "vesting third release date should be > now"); // solium-disable-line security/no-block-members\n', '        require(_vestingFourthRelease > now, "vesting fourth release date should be > now"); // solium-disable-line security/no-block-members\n', '\n', '        sale = _sale;\n', '\n', '        balances[sale] = balances[sale].add(SALES_SUPPLY);\n', '        totalSupply_ = totalSupply_.add(SALES_SUPPLY);\n', '        emit Transfer(address(0), sale, SALES_SUPPLY);\n', '\n', '        balances[sale] = balances[sale].add(REFERRAL_SUPPLY);\n', '        totalSupply_ = totalSupply_.add(REFERRAL_SUPPLY);\n', '        emit Transfer(address(0), sale, REFERRAL_SUPPLY);\n', '\n', '        TokenTimelock teamTimelock = new TokenTimelock(this, TEAM_ADDRESS, _teamRelease);\n', '        balances[teamTimelock] = balances[teamTimelock].add(TEAM_SUPPLY);\n', '        totalSupply_ = totalSupply_.add(TEAM_SUPPLY);\n', '        emit Transfer(address(0), teamTimelock, TEAM_SUPPLY);\n', '         \n', '        balances[MARKET_DEV_ADDRESS] = balances[MARKET_DEV_ADDRESS].add(MARKET_DEV_SUPPLY);\n', '        totalSupply_ = totalSupply_.add(MARKET_DEV_SUPPLY);\n', '        emit Transfer(address(0), MARKET_DEV_ADDRESS, MARKET_DEV_SUPPLY);\n', '\n', '        balances[RESERVE_ADDRESS] = balances[RESERVE_ADDRESS].add(RESERVE_SUPPLY);\n', '        totalSupply_ = totalSupply_.add(RESERVE_SUPPLY);\n', '        emit Transfer(address(0), RESERVE_ADDRESS, RESERVE_SUPPLY);\n', '       \n', '        balances[PR_ADVERSTISING_ADDRESS] = balances[PR_ADVERSTISING_ADDRESS].add(PR_ADVERSTISING_SUPPLY);\n', '        totalSupply_ = totalSupply_.add(PR_ADVERSTISING_SUPPLY);\n', '        emit Transfer(address(0), PR_ADVERSTISING_ADDRESS, PR_ADVERSTISING_SUPPLY);\n', '\n', '        vestingReleases[0] = _vestingFirstRelease;\n', '        vestingReleases[1] = _vestingSecondRelease;\n', '        vestingReleases[2] = _vestingThirdRelease;\n', '        vestingReleases[3] = _vestingFourthRelease;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another with vesting\n', '     * @param _to address which you want to transfer to\n', '     * @param _value the amount of tokens to be transferred\n', '     * @return true if the transfer was succeeded\n', '     */\n', '    function transferWithVesting(address _to, uint256 _value) external onlySale returns (bool) {    \n', '        _vest(_to, _value);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer  tokens from one address to another with locking up\n', '     * @param _to address which you want to transfer to\n', '     * @param _value the amount of tokens to be transferred\n', '     * @param _release the amount of tokens to be transferred\n', '     * @return true if the transfer was succeeded\n', '     */\n', '    function transferWithLockup(address _to, uint256 _value, uint256 _release) external onlyLockupAuthorized returns (bool) {    \n', '        _lockup(_to, _value, _release);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Burn all tokens, remaining on sale contract\n', '     */\n', '    function burnSaleTokens() external onlySale {\n', '        uint256 _amount = balances[sale];\n', '        balances[sale] = 0;\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '        emit Burn(sale, _amount);\n', '        emit Transfer(sale, address(0), _amount);        \n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _to address which you want to transfer to\n', '     * @param _value the amount of tokens to be transferred\n', '     * @return true if the transfer was succeeded\n', '     */\n', '    function transfer(address _to, uint256 _value) public spotTransfer(msg.sender, _value) returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from the address which you want to send tokens from\n', '     * @param _to the address which you want to transfer to\n', '     * @param _value the amount of tokens to be transferred\n', '     * @return true if the transfer was succeeded\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public spotTransfer(_from, _value) returns (bool) {    \n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Get balance spot for the current moment of time\n', '     * @param _who address owns balance spot\n', '     * @return balance spot for the current moment of time     \n', '     */   \n', '    function balanceSpot(address _who) public view returns (uint256) {\n', '        return balanceOf(_who).sub(balanceVested(_who)).sub(balanceLockedUp(_who));\n', '    }     \n', '\n', '}']
