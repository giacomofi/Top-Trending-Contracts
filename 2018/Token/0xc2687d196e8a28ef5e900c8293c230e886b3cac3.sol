['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ImmAirDropKCH{\n', '    using SafeMath for uint256;\n', '    uint256 public decimals = 18;\n', '    address public wallet;\n', '    ERC20 public token;\n', '    mapping (address => bool) public admins;\n', '\n', '\t\n', '     function ImmAirDropKCH(ERC20 _token, address _wallet) public {\n', '        require(_token != address(0));\n', '        token = _token;\n', '        admins[msg.sender] = true;\n', '        admins[_wallet] = true;\n', '        wallet = _wallet;\n', '    }\n', '\n', '   modifier onlyAdmin {\n', '        require(admins[msg.sender]);\n', '        _;\n', '    }\n', '\n', '\tfunction addAdminWhitelist(address _userlist) public onlyAdmin{\n', '\t\tif(_userlist != address(0) && !admins[_userlist]){\n', '\t\t\tadmins[_userlist] = true;\n', '\t\t}\n', '\t}\n', '\n', '    function signupUserWhitelist(address[] _userlist, uint256 _amttype) public onlyAdmin{\n', '    \trequire(_userlist.length > 0);\n', '    \tuint256 useamt = _amttype * (10 ** uint256(decimals));\n', '    \tfor (uint256 i = 0; i < _userlist.length; i++) {\n', '    \t\tif(_userlist[i] != address(0)){\n', '    \t\t\ttoken.transfer(_userlist[i], useamt);\n', '    \t\t}\n', '    \t}\n', '    }\n', '\t\n', '\tfunction () external payable {\n', '\t\trevert();\n', '\t}\n', '\t\n', '}']