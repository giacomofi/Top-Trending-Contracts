['pragma solidity ^0.4.18;\n', '\n', '// Corrently CAPEX token\n', '// Modified for https://corrently.de/token\n', '//\n', '// Leveraged by STROMDAO (https://stromdao.de/)\n', '// Changes:\n', '//   - embedded SafeMath due to missing utilization in some functions\n', '//\n', '// ----------------------------------------------------------------------------\n', '// Based on FWD &#39;BitFwd&#39; token contract\n', '//\n', '// FWD tokens are mintable by the owner until the `disableMinting()` function\n', '// is executed. Tokens can be burnt by sending them to address 0x0\n', '//\n', '// Deployed to : 0xe199C41103020a325Ee17Fd87934dfe7Ac747AD4\n', '// Symbol      : FWD\n', '// Name        : BitFwd\n', '// Total supply: mintable\n', '// Decimals    : 18\n', '//\n', '// http://www.bitfwd.xyz\n', '// https://github.com/bokkypoobah/Tokens/blob/master/contracts/BitFwdToken.sol\n', '//\n', '// Enjoy.\n', '//\n', '// (c) BokkyPooBah / Bok Consulting Pty Ltd for BitFwd 2017. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract CorrentlyInvest is ERC20Interface, Owned {\n', '\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    bool public mintable;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    event MintingDisabled();\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        symbol = "CORI";\n', '        name = "Corrently Invest";\n', '        decimals = 2;\n', '        mintable = true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Disable minting\n', '    // ------------------------------------------------------------------------\n', '    function disableMinting() public onlyOwner {\n', '        require(mintable);\n', '        mintable = false;\n', '        emit MintingDisabled();\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require(tokens <= balances[msg.sender]);\n', '        balances[msg.sender] -= tokens;\n', '        require( balances[to]+tokens >=  balances[to]);\n', '        balances[to] += tokens;\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        require(tokens <= balances[msg.sender]);\n', '        balances[from] -= tokens;\n', '        allowed[from][msg.sender] -= tokens;\n', '        require( balances[to]+tokens >=  balances[to]);\n', '        balances[to] += tokens;\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account. The `spender` contract function\n', '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Mint tokens\n', '    // ------------------------------------------------------------------------\n', '    function mint(address tokenOwner, uint tokens) public onlyOwner returns (bool success) {\n', '        require(mintable);\n', '        require( balances[tokenOwner]+tokens >=  balances[tokenOwner]);\n', '        balances[tokenOwner] += tokens;\n', '        require(_totalSupply+tokens>=_totalSupply);\n', '        _totalSupply += tokens;\n', '\n', '        emit Transfer(address(0), tokenOwner, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Don&#39;t accept ethers\n', '    // ------------------------------------------------------------------------\n', '    function ()  external  {\n', '         revert();\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}\n', '\n', 'contract exD is  Owned {\n', '\n', '    ERC20Interface public token;\n', '\n', '    uint public totalDividend = 0;\n', '    uint public totalSupply = 0;\n', '    uint public divMultiplier =0;\n', '    uint public totalClaimed=0;\n', '\n', '    mapping(address => uint) claimed;\n', '    event Dividend(uint _value);\n', '    event Payed(address account,uint _value);\n', '    event Withdraw(uint _value);\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor(ERC20Interface _token) public {\n', '        token=_token;\n', '    }\n', '\n', '\n', '    function balanceOf(address _account) public view returns (uint) {\n', '        return (token.balanceOf(_account)*divMultiplier)-claimed[_account];\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // As a holder of token, withdraw your dvidend\n', '    // ------------------------------------------------------------------------\n', '    function withdrawDividend() payable public {\n', '        uint due=(token.balanceOf(msg.sender)*divMultiplier)-claimed[msg.sender];\n', '        if(due+claimed[msg.sender]<claimed[msg.sender]) revert();        \n', '        claimed[msg.sender]+=due;\n', '        totalClaimed+=due;\n', '        msg.sender.transfer(due);\n', '        emit Payed(msg.sender,due);\n', '    }\n', '    \n', '    function withdrawBonds(uint value) onlyOwner public {\n', '        totalDividend-=value;\n', '        owner.transfer(value);\n', '        emit Withdraw(value);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // All ethers send via standard will become part of our dividend payments\n', '    // ------------------------------------------------------------------------\n', '    function () public payable  {\n', '      if(msg.value<1) revert();\n', '      if(totalDividend+msg.value<totalDividend) revert();\n', '      if(token.totalSupply()+totalSupply<totalSupply) revert();\n', '      totalDividend+=msg.value;\n', '      totalSupply+=token.totalSupply();\n', '      divMultiplier=totalDividend/totalSupply;\n', '      emit Dividend(msg.value);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// Corrently CAPEX token\n', '// Modified for https://corrently.de/token\n', '//\n', '// Leveraged by STROMDAO (https://stromdao.de/)\n', '// Changes:\n', '//   - embedded SafeMath due to missing utilization in some functions\n', '//\n', '// ----------------------------------------------------------------------------\n', "// Based on FWD 'BitFwd' token contract\n", '//\n', '// FWD tokens are mintable by the owner until the `disableMinting()` function\n', '// is executed. Tokens can be burnt by sending them to address 0x0\n', '//\n', '// Deployed to : 0xe199C41103020a325Ee17Fd87934dfe7Ac747AD4\n', '// Symbol      : FWD\n', '// Name        : BitFwd\n', '// Total supply: mintable\n', '// Decimals    : 18\n', '//\n', '// http://www.bitfwd.xyz\n', '// https://github.com/bokkypoobah/Tokens/blob/master/contracts/BitFwdToken.sol\n', '//\n', '// Enjoy.\n', '//\n', '// (c) BokkyPooBah / Bok Consulting Pty Ltd for BitFwd 2017. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract CorrentlyInvest is ERC20Interface, Owned {\n', '\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    bool public mintable;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    event MintingDisabled();\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        symbol = "CORI";\n', '        name = "Corrently Invest";\n', '        decimals = 2;\n', '        mintable = true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Disable minting\n', '    // ------------------------------------------------------------------------\n', '    function disableMinting() public onlyOwner {\n', '        require(mintable);\n', '        mintable = false;\n', '        emit MintingDisabled();\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require(tokens <= balances[msg.sender]);\n', '        balances[msg.sender] -= tokens;\n', '        require( balances[to]+tokens >=  balances[to]);\n', '        balances[to] += tokens;\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        require(tokens <= balances[msg.sender]);\n', '        balances[from] -= tokens;\n', '        allowed[from][msg.sender] -= tokens;\n', '        require( balances[to]+tokens >=  balances[to]);\n', '        balances[to] += tokens;\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account. The `spender` contract function\n", '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Mint tokens\n', '    // ------------------------------------------------------------------------\n', '    function mint(address tokenOwner, uint tokens) public onlyOwner returns (bool success) {\n', '        require(mintable);\n', '        require( balances[tokenOwner]+tokens >=  balances[tokenOwner]);\n', '        balances[tokenOwner] += tokens;\n', '        require(_totalSupply+tokens>=_totalSupply);\n', '        _totalSupply += tokens;\n', '\n', '        emit Transfer(address(0), tokenOwner, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ethers\n", '    // ------------------------------------------------------------------------\n', '    function ()  external  {\n', '         revert();\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}\n', '\n', 'contract exD is  Owned {\n', '\n', '    ERC20Interface public token;\n', '\n', '    uint public totalDividend = 0;\n', '    uint public totalSupply = 0;\n', '    uint public divMultiplier =0;\n', '    uint public totalClaimed=0;\n', '\n', '    mapping(address => uint) claimed;\n', '    event Dividend(uint _value);\n', '    event Payed(address account,uint _value);\n', '    event Withdraw(uint _value);\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor(ERC20Interface _token) public {\n', '        token=_token;\n', '    }\n', '\n', '\n', '    function balanceOf(address _account) public view returns (uint) {\n', '        return (token.balanceOf(_account)*divMultiplier)-claimed[_account];\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // As a holder of token, withdraw your dvidend\n', '    // ------------------------------------------------------------------------\n', '    function withdrawDividend() payable public {\n', '        uint due=(token.balanceOf(msg.sender)*divMultiplier)-claimed[msg.sender];\n', '        if(due+claimed[msg.sender]<claimed[msg.sender]) revert();        \n', '        claimed[msg.sender]+=due;\n', '        totalClaimed+=due;\n', '        msg.sender.transfer(due);\n', '        emit Payed(msg.sender,due);\n', '    }\n', '    \n', '    function withdrawBonds(uint value) onlyOwner public {\n', '        totalDividend-=value;\n', '        owner.transfer(value);\n', '        emit Withdraw(value);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // All ethers send via standard will become part of our dividend payments\n', '    // ------------------------------------------------------------------------\n', '    function () public payable  {\n', '      if(msg.value<1) revert();\n', '      if(totalDividend+msg.value<totalDividend) revert();\n', '      if(token.totalSupply()+totalSupply<totalSupply) revert();\n', '      totalDividend+=msg.value;\n', '      totalSupply+=token.totalSupply();\n', '      divMultiplier=totalDividend/totalSupply;\n', '      emit Dividend(msg.value);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
