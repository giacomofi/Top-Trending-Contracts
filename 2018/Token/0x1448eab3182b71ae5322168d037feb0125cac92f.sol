['pragma solidity ^0.4.18;\n', '// ----------------------------------------------------------------------------\n', '// rev rbs eryk 180325\n', '// &#39;IGR&#39; &#39;InGRedient Token with Fixed Supply Token&#39;  contract\n', '//\n', '// Symbol      : IGR\n', '// Name        : InGRedient Token -based on ER20 wiki- Example Fixed Supply Token\n', '// Total supply: 1,000,000.000000000000000000\n', '// Decimals    : 3\n', '//\n', '// (c) Erick & <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="fcae959f9d8e9893d2be938e9b998fbc899a9d9e9fd2999889d29e8e">[email&#160;protected]</a>\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe math\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '    c = a + b;\n', '    require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '    require(b <= a);\n', '    c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '    c = a * b;\n', '    require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '    require(b > 0);\n', '    c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', 'function totalSupply() public constant returns (uint);\n', 'function balanceOf(address tokenOwner) public constant returns (uint balance);\n', 'function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', 'function transfer(address to, uint tokens) public returns (bool success);\n', 'function approve(address spender, uint tokens) public returns (bool success);\n', 'function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', 'event Transfer(address indexed from, address indexed to, uint tokens);\n', 'event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '// Borrowed from MiniMeToken- \n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', 'function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', 'address public owner;\n', 'address public newOwner;\n', '\n', 'event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', 'function Owned() public {\n', 'owner = msg.sender;\n', '}\n', '\n', 'modifier onlyOwner {\n', 'require(msg.sender == owner);\n', '_;\n', '}\n', '\n', 'function transferOwnership(address _newOwner) public onlyOwner {\n', 'newOwner = _newOwner;\n', '}\n', '\n', 'function acceptOwnership() public {\n', '    require(msg.sender == newOwner);\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '    newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract InGRedientToken  is ERC20Interface, Owned {\n', 'using SafeMath for uint;\n', '\n', 'string public symbol;\n', 'string public  name;\n', 'uint8 public decimals;\n', 'uint public _totalSupply;\n', '\n', 'mapping(address => uint) balances;\n', 'mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '// ------------------------------------------------------------------------\n', '// Constructor\n', '// ------------------------------------------------------------------------\n', 'function InGRedientToken() public {\n', '    symbol = "IGR";\n', '    name = "InGRedientToken";\n', '    decimals = 3; //kg is the reference unit but grams is often also used\n', '    _totalSupply = 1000000000000000000000 * 10**uint(decimals);\n', '    balances[owner] = _totalSupply;\n', '    Transfer(address(0), owner, _totalSupply);\n', '}\n', '\n', '\n', '// ------------------------------------------------------------------------\n', '// Total supply\n', '// ------------------------------------------------------------------------\n', 'function totalSupply() public constant returns (uint) {\n', '    return _totalSupply  - balances[address(0)];\n', '}\n', '\n', '\n', '// ------------------------------------------------------------------------\n', '// Get the token balance for account `tokenOwner`\n', '// ------------------------------------------------------------------------\n', 'function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '    return balances[tokenOwner];\n', '}\n', '\n', '// ------------------------------------------------------------------------\n', '// Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '// from the token owner&#39;s account\n', '//\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// recommends that there are no checks for the approval double-spend attack\n', '// as this should be implemented in user interfaces\n', '// ------------------------------------------------------------------------\n', 'function approve(address spender, uint tokens) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    Approval(msg.sender, spender, tokens);\n', '    return true;\n', '}\n', '\n', '// ------------------------------------------------------------------------\n', '// Transfer the balance from token owner&#39;s account to `to` account\n', '// - Owner&#39;s account must have sufficient balance to transfer\n', '// - 0 value transfers are allowed\n', '// ------------------------------------------------------------------------\n', 'function transfer(address to, uint tokens) public returns (bool success) {\n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    Transfer(msg.sender, to, tokens);\n', '    return true;\n', '}\n', '\n', '// ------------------------------------------------------------------------\n', '// Transfer `tokens` from the `from` account to the `to` account\n', '//\n', '// The calling account must already have sufficient tokens approve(...)-d\n', '// for spending from the `from` account and\n', '// - From account must have sufficient balance to transfer\n', '// - Spender must have sufficient allowance to transfer\n', '// - 0 value transfers are allowed\n', '// ------------------------------------------------------------------------\n', 'function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', 'balances[from] = balances[from].sub(tokens);\n', 'allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', 'balances[to] = balances[to].add(tokens);\n', 'Transfer(from, to, tokens);\n', 'return true;\n', '}\n', '\n', '\n', '// ------------------------------------------------------------------------\n', '// Returns the amount of tokens approved by the owner that can be\n', '// transferred to the spender&#39;s account\n', '// ------------------------------------------------------------------------\n', 'function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', 'return allowed[tokenOwner][spender];\n', '}\n', '\n', '\n', '// ------------------------------------------------------------------------\n', '// Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '// from the token owner&#39;s account. The `spender` contract function\n', '// `receiveApproval(...)` is then executed\n', '// ------------------------------------------------------------------------\n', 'function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', 'allowed[msg.sender][spender] = tokens;\n', 'Approval(msg.sender, spender, tokens);\n', 'ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', 'return true;\n', '}\n', '\n', '// ------------------------------------------------------------------------\n', '// Don&#39;t accept ETH\n', '// ------------------------------------------------------------------------\n', 'function () public payable {\n', 'revert();\n', '}\n', '\n', '\n', '// ------------------------------------------------------------------------\n', '// Owner can transfer out any accidentally sent ERC20 tokens\n', '// ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '    return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '\n', '\n', '// ==================================================================\n', '// IGR token specific functions \n', '//===================================================================\n', '\n', 'event  FarmerRequestedCertificate(address owner, address certAuth, uint tokens);\n', '\n', '// --------------------------------------------------------------------------------------------------\n', '// routine 10- allows for sale of ingredients along with the respective IGR token transfer ( with url)\n', '//implementa&#231;&#227;o b&#225;sica da rotina 10  do farmer requests Certicate\n', '// --------------------------------------------------------------------------------------------------\n', 'function farmerRequestCertificate(address _certAuth, uint _tokens, string _product,string _IngValueProperty, string _localGPSProduction, uint _dateProduction ) public returns (bool success) {\n', '// falta implementar uma verif se o end certAuth foi cadastradao anteriormente\n', '    allowed[owner][_certAuth] = _tokens;\n', '    Approval(owner, _certAuth, _tokens);\n', '    FarmerRequestedCertificate(owner, _certAuth, _tokens);\n', '    return true;\n', '}\n', '\n', '// --------------------------------------------------------------------------------------------------\n', '// routine 20-  certAuthIssuesCerticate  certification auth confirms that ingredients are trustworthy \n', '// as well as qtty , location , published url ,  string product)\n', '// --------------------------------------------------------------------------------------------------\n', 'function certAuthIssuesCerticate(address owner, address farmer, uint tokens, string _url,string product,string IngValueProperty, string localGPSProduction, uint dateProduction ) public returns (bool success) {\n', '    balances[owner] = balances[owner].sub(tokens);\n', '    //allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(tokens);\n', '    allowed[owner][msg.sender] = 0;\n', '    balances[farmer] = balances[farmer].add(tokens);\n', '    Transfer(owner, farmer, tokens);\n', '    return true;\n', '    }\n', '\n', '// --------------------------------------------------------------------------------------------------\n', '// routine 30- allows for sale of ingredients along with the respective IGR token transfer ( with url)\n', '// --------------------------------------------------------------------------------------------------\n', 'function sellsIngrWithoutDepletion(address to, uint tokens,string _url) public returns (bool success) {\n', '    string memory url=_url; // keep the url of the InGRedient for later transfer\n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    Transfer(msg.sender, to, tokens);\n', '    return true;\n', '    }\n', '\n', '// ------------------------------------------------------------------------\n', '// routine 40- allows for sale of intermediate product made from certified ingredients along with\n', '// the respective IGR token transfer ( with url)\n', '// i.e.: allows only the pro-rata quantity of semi-processed  InGRedient \n', '// tokens to be transfered to the consumer level package(SKU) \n', '// ------------------------------------------------------------------------\n', 'function sellsIntermediateGoodWithDepletion(address to, uint tokens,string _url,uint out2inIngredientPercentage ) public returns (bool success) {\n', '    string memory url=_url; // keep the url of hte InGRedient for later transfer\n', '    //allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(tokens);// falta matar a parte depleted ....depois fazemos\n', '    require (out2inIngredientPercentage <= 100); // verificar possivel erro se este valor for negativo ou maior que 100(%)\n', '    transfer(to, tokens*out2inIngredientPercentage/100);\n', '    return true;\n', '}\n', '\n', '\n', 'function genAddressFromGTIN13date(string _GTIN13,string _YYMMDD) constant returns(address c){\n', '    bytes32 a= keccak256(_GTIN13,_YYMMDD);\n', '    address b = address(a);\n', '    return b;\n', '    }\n', '\n', '// ------------------------------------------------------------------------\n', '//  transferAndWriteUrl- Transfer the balance from token owner&#39;s account to `to` account\n', '// - Owner&#39;s account must have sufficient balance to transfer\n', '// - 0 value transfers are allowed\n', '// since the -url is passed to the function we achieve that this data be written to the block..nothing else needed\n', '// ------------------------------------------------------------------------\n', 'function transferAndWriteUrl(address to, uint tokens, string _url) public returns (bool success) {\n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    Transfer(msg.sender, to, tokens);\n', '    return true;\n', '    }\n', '\n', '// ------------------------------------------------------------------------\n', '// routine 50- comminglerSellsProductSKUWithProRataIngred(address _to, int numPSKUsSold, ,string _url, uint _qttyIGRinLLSKU, string GTIN13, string YYMMDD ) \n', '//allows for sale of final-consumer  product with resp SKU and Lot identification with corresponding IGR transfer\n', '// the respective IGR token transfer ( with url)\n', '// i.e.: allows only the pro-rata quantity of semi-processed  InGRedient \n', '// tokens to be transfered to the consumer level package(SKU) \n', '// ------------------------------------------------------------------------\n', 'function comminglerSellsProductSKUWithProRataIngred(address _to, uint _numSKUsSold,string _url,uint _qttyIGRinLLSKU, string _GTIN13, string _YYMMDD ) public returns (bool success) {\n', '        string memory url=_url; // keep the url of hte InGRedient for later transfer\n', '        address c= genAddressFromGTIN13date( _GTIN13, _YYMMDD);//writes to the blockchain address composed of GTIN-13+YYMMDD the qtty IGR in one SKU\n', '        transferAndWriteUrl(c, _qttyIGRinLLSKU, _url);\n', '        require (_qttyIGRinLLSKU >0); // qtty of Ingredient may not be negative nor zero \n', '        transferAndWriteUrl(_to, (_numSKUsSold-1)*_qttyIGRinLLSKU,_url);// records the transfer of custody of the qtty of SKU each with qttyIGRinLLSKU\n', '        return true;\n', '    }\n', '\n', '    \n', '}']
['pragma solidity ^0.4.18;\n', '// ----------------------------------------------------------------------------\n', '// rev rbs eryk 180325\n', "// 'IGR' 'InGRedient Token with Fixed Supply Token'  contract\n", '//\n', '// Symbol      : IGR\n', '// Name        : InGRedient Token -based on ER20 wiki- Example Fixed Supply Token\n', '// Total supply: 1,000,000.000000000000000000\n', '// Decimals    : 3\n', '//\n', '// (c) Erick & Ricardo.Borges@ufabc.edu.br\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe math\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '    c = a + b;\n', '    require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '    require(b <= a);\n', '    c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '    c = a * b;\n', '    require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '    require(b > 0);\n', '    c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', 'function totalSupply() public constant returns (uint);\n', 'function balanceOf(address tokenOwner) public constant returns (uint balance);\n', 'function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', 'function transfer(address to, uint tokens) public returns (bool success);\n', 'function approve(address spender, uint tokens) public returns (bool success);\n', 'function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', 'event Transfer(address indexed from, address indexed to, uint tokens);\n', 'event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '// Borrowed from MiniMeToken- \n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', 'function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', 'address public owner;\n', 'address public newOwner;\n', '\n', 'event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', 'function Owned() public {\n', 'owner = msg.sender;\n', '}\n', '\n', 'modifier onlyOwner {\n', 'require(msg.sender == owner);\n', '_;\n', '}\n', '\n', 'function transferOwnership(address _newOwner) public onlyOwner {\n', 'newOwner = _newOwner;\n', '}\n', '\n', 'function acceptOwnership() public {\n', '    require(msg.sender == newOwner);\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '    newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract InGRedientToken  is ERC20Interface, Owned {\n', 'using SafeMath for uint;\n', '\n', 'string public symbol;\n', 'string public  name;\n', 'uint8 public decimals;\n', 'uint public _totalSupply;\n', '\n', 'mapping(address => uint) balances;\n', 'mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '// ------------------------------------------------------------------------\n', '// Constructor\n', '// ------------------------------------------------------------------------\n', 'function InGRedientToken() public {\n', '    symbol = "IGR";\n', '    name = "InGRedientToken";\n', '    decimals = 3; //kg is the reference unit but grams is often also used\n', '    _totalSupply = 1000000000000000000000 * 10**uint(decimals);\n', '    balances[owner] = _totalSupply;\n', '    Transfer(address(0), owner, _totalSupply);\n', '}\n', '\n', '\n', '// ------------------------------------------------------------------------\n', '// Total supply\n', '// ------------------------------------------------------------------------\n', 'function totalSupply() public constant returns (uint) {\n', '    return _totalSupply  - balances[address(0)];\n', '}\n', '\n', '\n', '// ------------------------------------------------------------------------\n', '// Get the token balance for account `tokenOwner`\n', '// ------------------------------------------------------------------------\n', 'function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '    return balances[tokenOwner];\n', '}\n', '\n', '// ------------------------------------------------------------------------\n', '// Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "// from the token owner's account\n", '//\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// recommends that there are no checks for the approval double-spend attack\n', '// as this should be implemented in user interfaces\n', '// ------------------------------------------------------------------------\n', 'function approve(address spender, uint tokens) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    Approval(msg.sender, spender, tokens);\n', '    return true;\n', '}\n', '\n', '// ------------------------------------------------------------------------\n', "// Transfer the balance from token owner's account to `to` account\n", "// - Owner's account must have sufficient balance to transfer\n", '// - 0 value transfers are allowed\n', '// ------------------------------------------------------------------------\n', 'function transfer(address to, uint tokens) public returns (bool success) {\n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    Transfer(msg.sender, to, tokens);\n', '    return true;\n', '}\n', '\n', '// ------------------------------------------------------------------------\n', '// Transfer `tokens` from the `from` account to the `to` account\n', '//\n', '// The calling account must already have sufficient tokens approve(...)-d\n', '// for spending from the `from` account and\n', '// - From account must have sufficient balance to transfer\n', '// - Spender must have sufficient allowance to transfer\n', '// - 0 value transfers are allowed\n', '// ------------------------------------------------------------------------\n', 'function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', 'balances[from] = balances[from].sub(tokens);\n', 'allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', 'balances[to] = balances[to].add(tokens);\n', 'Transfer(from, to, tokens);\n', 'return true;\n', '}\n', '\n', '\n', '// ------------------------------------------------------------------------\n', '// Returns the amount of tokens approved by the owner that can be\n', "// transferred to the spender's account\n", '// ------------------------------------------------------------------------\n', 'function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', 'return allowed[tokenOwner][spender];\n', '}\n', '\n', '\n', '// ------------------------------------------------------------------------\n', '// Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "// from the token owner's account. The `spender` contract function\n", '// `receiveApproval(...)` is then executed\n', '// ------------------------------------------------------------------------\n', 'function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', 'allowed[msg.sender][spender] = tokens;\n', 'Approval(msg.sender, spender, tokens);\n', 'ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', 'return true;\n', '}\n', '\n', '// ------------------------------------------------------------------------\n', "// Don't accept ETH\n", '// ------------------------------------------------------------------------\n', 'function () public payable {\n', 'revert();\n', '}\n', '\n', '\n', '// ------------------------------------------------------------------------\n', '// Owner can transfer out any accidentally sent ERC20 tokens\n', '// ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '    return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '\n', '\n', '// ==================================================================\n', '// IGR token specific functions \n', '//===================================================================\n', '\n', 'event  FarmerRequestedCertificate(address owner, address certAuth, uint tokens);\n', '\n', '// --------------------------------------------------------------------------------------------------\n', '// routine 10- allows for sale of ingredients along with the respective IGR token transfer ( with url)\n', '//implementação básica da rotina 10  do farmer requests Certicate\n', '// --------------------------------------------------------------------------------------------------\n', 'function farmerRequestCertificate(address _certAuth, uint _tokens, string _product,string _IngValueProperty, string _localGPSProduction, uint _dateProduction ) public returns (bool success) {\n', '// falta implementar uma verif se o end certAuth foi cadastradao anteriormente\n', '    allowed[owner][_certAuth] = _tokens;\n', '    Approval(owner, _certAuth, _tokens);\n', '    FarmerRequestedCertificate(owner, _certAuth, _tokens);\n', '    return true;\n', '}\n', '\n', '// --------------------------------------------------------------------------------------------------\n', '// routine 20-  certAuthIssuesCerticate  certification auth confirms that ingredients are trustworthy \n', '// as well as qtty , location , published url ,  string product)\n', '// --------------------------------------------------------------------------------------------------\n', 'function certAuthIssuesCerticate(address owner, address farmer, uint tokens, string _url,string product,string IngValueProperty, string localGPSProduction, uint dateProduction ) public returns (bool success) {\n', '    balances[owner] = balances[owner].sub(tokens);\n', '    //allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(tokens);\n', '    allowed[owner][msg.sender] = 0;\n', '    balances[farmer] = balances[farmer].add(tokens);\n', '    Transfer(owner, farmer, tokens);\n', '    return true;\n', '    }\n', '\n', '// --------------------------------------------------------------------------------------------------\n', '// routine 30- allows for sale of ingredients along with the respective IGR token transfer ( with url)\n', '// --------------------------------------------------------------------------------------------------\n', 'function sellsIngrWithoutDepletion(address to, uint tokens,string _url) public returns (bool success) {\n', '    string memory url=_url; // keep the url of the InGRedient for later transfer\n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    Transfer(msg.sender, to, tokens);\n', '    return true;\n', '    }\n', '\n', '// ------------------------------------------------------------------------\n', '// routine 40- allows for sale of intermediate product made from certified ingredients along with\n', '// the respective IGR token transfer ( with url)\n', '// i.e.: allows only the pro-rata quantity of semi-processed  InGRedient \n', '// tokens to be transfered to the consumer level package(SKU) \n', '// ------------------------------------------------------------------------\n', 'function sellsIntermediateGoodWithDepletion(address to, uint tokens,string _url,uint out2inIngredientPercentage ) public returns (bool success) {\n', '    string memory url=_url; // keep the url of hte InGRedient for later transfer\n', '    //allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(tokens);// falta matar a parte depleted ....depois fazemos\n', '    require (out2inIngredientPercentage <= 100); // verificar possivel erro se este valor for negativo ou maior que 100(%)\n', '    transfer(to, tokens*out2inIngredientPercentage/100);\n', '    return true;\n', '}\n', '\n', '\n', 'function genAddressFromGTIN13date(string _GTIN13,string _YYMMDD) constant returns(address c){\n', '    bytes32 a= keccak256(_GTIN13,_YYMMDD);\n', '    address b = address(a);\n', '    return b;\n', '    }\n', '\n', '// ------------------------------------------------------------------------\n', "//  transferAndWriteUrl- Transfer the balance from token owner's account to `to` account\n", "// - Owner's account must have sufficient balance to transfer\n", '// - 0 value transfers are allowed\n', '// since the -url is passed to the function we achieve that this data be written to the block..nothing else needed\n', '// ------------------------------------------------------------------------\n', 'function transferAndWriteUrl(address to, uint tokens, string _url) public returns (bool success) {\n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    Transfer(msg.sender, to, tokens);\n', '    return true;\n', '    }\n', '\n', '// ------------------------------------------------------------------------\n', '// routine 50- comminglerSellsProductSKUWithProRataIngred(address _to, int numPSKUsSold, ,string _url, uint _qttyIGRinLLSKU, string GTIN13, string YYMMDD ) \n', '//allows for sale of final-consumer  product with resp SKU and Lot identification with corresponding IGR transfer\n', '// the respective IGR token transfer ( with url)\n', '// i.e.: allows only the pro-rata quantity of semi-processed  InGRedient \n', '// tokens to be transfered to the consumer level package(SKU) \n', '// ------------------------------------------------------------------------\n', 'function comminglerSellsProductSKUWithProRataIngred(address _to, uint _numSKUsSold,string _url,uint _qttyIGRinLLSKU, string _GTIN13, string _YYMMDD ) public returns (bool success) {\n', '        string memory url=_url; // keep the url of hte InGRedient for later transfer\n', '        address c= genAddressFromGTIN13date( _GTIN13, _YYMMDD);//writes to the blockchain address composed of GTIN-13+YYMMDD the qtty IGR in one SKU\n', '        transferAndWriteUrl(c, _qttyIGRinLLSKU, _url);\n', '        require (_qttyIGRinLLSKU >0); // qtty of Ingredient may not be negative nor zero \n', '        transferAndWriteUrl(_to, (_numSKUsSold-1)*_qttyIGRinLLSKU,_url);// records the transfer of custody of the qtty of SKU each with qttyIGRinLLSKU\n', '        return true;\n', '    }\n', '\n', '    \n', '}']
