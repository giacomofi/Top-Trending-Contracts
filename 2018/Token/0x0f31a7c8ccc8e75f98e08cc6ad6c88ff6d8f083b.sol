['pragma solidity ^0.4.6;\n', '\n', 'contract SafeMath {\n', '  //internals\n', '\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) throw;\n', '  }\n', '}\n', '\n', 'contract TokenOneToken is SafeMath {\n', '    /* Public variables of the token */\n', "    string public standard = 'ERC20';\n", "    string public name = 'TokenOne';\n", "    string public symbol = 'TKN1';\n", '    uint8 public decimals = 0;\n', '    uint256 public totalSupply = 1000000000;\n', '    address public owner = 0x0d6AFF46cebAECE8A359bb3b646A5F1C2Aa6c849;\n', '    /* from this time on tokens may be transfered (after ICO)*/\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function TokenOne() {\n', '        owner = 0x0d6AFF46cebAECE8A359bb3b646A5F1C2Aa6c849;\n', '        balanceOf[owner] = 1000000000;              // Give the owner all initial tokens\n', '        totalSupply = 1000000000;                  // Update total supply\n', '    }\n', '\n', '    /* Send some of your tokens to a given address */\n', '    function transfer(address _to, uint256 _value) returns (bool success){\n', '        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender],_value);                     // Subtract from the sender\n', '        balanceOf[_to] = safeAdd(balanceOf[_to],_value);                            // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '        return true;\n', '    }\n', '\n', '    /* Allow another contract or person to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /* A contract or  person attempts to get the tokens of somebody else.\n', '    *  This is only allowed if the token holder approved. */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        var _allowance = allowance[_from][msg.sender];\n', '        balanceOf[_from] = safeSub(balanceOf[_from],_value); // Subtract from the sender\n', '        balanceOf[_to] = safeAdd(balanceOf[_to],_value);     // Add the same to the recipient\n', '        allowance[_from][msg.sender] = safeSub(_allowance,_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '}']