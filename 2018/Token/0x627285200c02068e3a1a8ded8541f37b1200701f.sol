['pragma solidity ^0.4.18;\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  bool public paused = false;\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a / b;\n', '    return c;\n', '  }\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  uint public totalSupply;  \n', '  function ERC20(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '  function balanceOf(address who) public view returns (uint);\n', '  function transfer(address to, uint value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint);\n', '  function transferFrom(address from, address to, uint value) public returns (bool);\n', '  function approve(address spender, uint value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', 'contract Token is Pausable, ERC20 {\n', '  using SafeMath for uint;\n', '  mapping(address => uint) balances;\n', '  mapping (address => mapping (address => uint)) internal allowed;\n', '  mapping(address => uint) public balanceOfLocked;\n', '  mapping(address => bool) public addressLocked;\n', '  uint public unlocktime;\n', '  bool manualUnlock;\n', '  address public crowdsaleAddress = 0;\n', '  function Token() ERC20("Olive", "OLE", 18) public {\n', '    manualUnlock = false;\n', '    unlocktime = 1527868800;\n', '    totalSupply = 10000000000 * 10 ** uint(decimals);\n', '    balances[msg.sender] = totalSupply;\n', '  }\n', '  function allowCrowdsaleAddress(address crowdsale) onlyOwner public {\n', '    crowdsaleAddress = crowdsale;\n', '  }\n', '  function isLocked() view public returns (bool) {\n', '    return (now < unlocktime && !manualUnlock);\n', '  }\n', '  modifier lockCheck(address from, uint value) { \n', '    require(addressLocked[from] == false);\n', '    if (isLocked()) {\n', '      require(value <= balances[from] - balanceOfLocked[from]);\n', '    } else {\n', '      balanceOfLocked[from] = 0; \n', '    }\n', '    _;\n', '  }\n', '  function lockAddress(address addr) onlyOwner public {\n', '    addressLocked[addr] = true;\n', '  }\n', '  function unlockAddress(address addr) onlyOwner public {\n', '    addressLocked[addr] = false;\n', '  }\n', '  function unlock() onlyOwner public {\n', '    require(!manualUnlock);\n', '    manualUnlock = true;\n', '  }\n', '  function transfer(address _to, uint _value) lockCheck(msg.sender, _value) whenNotPaused public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  function transferLockedPart(address _to, uint _value) whenNotPaused public returns (bool) {\n', '    require(msg.sender == crowdsaleAddress);\n', '    if (transfer(_to, _value)) {\n', '      balanceOfLocked[_to] = balanceOfLocked[_to].add(_value);\n', '      return true;\n', '    }\n', '  }\n', '  function balanceOf(address _owner) public view returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '  function transferFrom(address _from, address _to, uint _value) public lockCheck(_from, _value) whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  function approve(address _spender, uint _value) public whenNotPaused returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  function allowance(address _owner, address _spender) public view returns (uint) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', 'contract TokenCrowdsale is Ownable {\n', '  using SafeMath for uint;\n', '  Token public token;\n', '  uint public ethRaised;\n', '  uint public endTime;\n', '  uint[6] public exchangeLevel;\n', '  uint[6] public exchangeRate;\n', '  bool public isFinalized = false;\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint value, uint amount);\n', '  event Finalized();\n', '  event Withdraw(address to, uint value);\n', '  function TokenCrowdsale(address _token) public {\n', '    require(_token != address(0));\n', '    token = Token(_token);\n', '    endTime = 1527868800;\n', '    require(endTime >= now);\n', '    exchangeLevel = [500 ether, 300 ether, 100 ether, 50 ether, 10 ether, 0.2 ether];\n', '    exchangeRate = [92000,88000,84000,82400,80800,80000];\n', '  }\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(!hasEnded());\n', '    uint ethValue = msg.value;\n', '    ethRaised += ethValue;\n', '    uint needTokens;\n', '    for (uint i = 0; i < exchangeLevel.length; i++) {\n', '      if (ethValue >= exchangeLevel[i]) {\n', '        needTokens = ethValue.mul(exchangeRate[i]);\n', '        break;\n', '      }\n', '    }\n', '    require(needTokens != 0);\n', '    transferToken(beneficiary, needTokens);\n', '    owner.transfer(msg.value);\n', '    TokenPurchase(msg.sender, beneficiary, ethValue, needTokens);\n', '  }\n', '\n', '  function transferToken(address to,uint needTokens) internal {\n', '    require(token.balanceOf(this) >= needTokens);\n', '    uint lockTokens = needTokens.div(2);\n', '    token.transfer(to, needTokens - lockTokens);\n', '    token.transferLockedPart(to, lockTokens);\n', '  }\n', '\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    token.transfer(owner,token.balanceOf(this));\n', '    isFinalized = true;\n', '    Finalized();\n', '  }\n', '\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  bool public paused = false;\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a / b;\n', '    return c;\n', '  }\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  uint public totalSupply;  \n', '  function ERC20(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '  function balanceOf(address who) public view returns (uint);\n', '  function transfer(address to, uint value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint);\n', '  function transferFrom(address from, address to, uint value) public returns (bool);\n', '  function approve(address spender, uint value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', 'contract Token is Pausable, ERC20 {\n', '  using SafeMath for uint;\n', '  mapping(address => uint) balances;\n', '  mapping (address => mapping (address => uint)) internal allowed;\n', '  mapping(address => uint) public balanceOfLocked;\n', '  mapping(address => bool) public addressLocked;\n', '  uint public unlocktime;\n', '  bool manualUnlock;\n', '  address public crowdsaleAddress = 0;\n', '  function Token() ERC20("Olive", "OLE", 18) public {\n', '    manualUnlock = false;\n', '    unlocktime = 1527868800;\n', '    totalSupply = 10000000000 * 10 ** uint(decimals);\n', '    balances[msg.sender] = totalSupply;\n', '  }\n', '  function allowCrowdsaleAddress(address crowdsale) onlyOwner public {\n', '    crowdsaleAddress = crowdsale;\n', '  }\n', '  function isLocked() view public returns (bool) {\n', '    return (now < unlocktime && !manualUnlock);\n', '  }\n', '  modifier lockCheck(address from, uint value) { \n', '    require(addressLocked[from] == false);\n', '    if (isLocked()) {\n', '      require(value <= balances[from] - balanceOfLocked[from]);\n', '    } else {\n', '      balanceOfLocked[from] = 0; \n', '    }\n', '    _;\n', '  }\n', '  function lockAddress(address addr) onlyOwner public {\n', '    addressLocked[addr] = true;\n', '  }\n', '  function unlockAddress(address addr) onlyOwner public {\n', '    addressLocked[addr] = false;\n', '  }\n', '  function unlock() onlyOwner public {\n', '    require(!manualUnlock);\n', '    manualUnlock = true;\n', '  }\n', '  function transfer(address _to, uint _value) lockCheck(msg.sender, _value) whenNotPaused public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  function transferLockedPart(address _to, uint _value) whenNotPaused public returns (bool) {\n', '    require(msg.sender == crowdsaleAddress);\n', '    if (transfer(_to, _value)) {\n', '      balanceOfLocked[_to] = balanceOfLocked[_to].add(_value);\n', '      return true;\n', '    }\n', '  }\n', '  function balanceOf(address _owner) public view returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '  function transferFrom(address _from, address _to, uint _value) public lockCheck(_from, _value) whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  function approve(address _spender, uint _value) public whenNotPaused returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  function allowance(address _owner, address _spender) public view returns (uint) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', 'contract TokenCrowdsale is Ownable {\n', '  using SafeMath for uint;\n', '  Token public token;\n', '  uint public ethRaised;\n', '  uint public endTime;\n', '  uint[6] public exchangeLevel;\n', '  uint[6] public exchangeRate;\n', '  bool public isFinalized = false;\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint value, uint amount);\n', '  event Finalized();\n', '  event Withdraw(address to, uint value);\n', '  function TokenCrowdsale(address _token) public {\n', '    require(_token != address(0));\n', '    token = Token(_token);\n', '    endTime = 1527868800;\n', '    require(endTime >= now);\n', '    exchangeLevel = [500 ether, 300 ether, 100 ether, 50 ether, 10 ether, 0.2 ether];\n', '    exchangeRate = [92000,88000,84000,82400,80800,80000];\n', '  }\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(!hasEnded());\n', '    uint ethValue = msg.value;\n', '    ethRaised += ethValue;\n', '    uint needTokens;\n', '    for (uint i = 0; i < exchangeLevel.length; i++) {\n', '      if (ethValue >= exchangeLevel[i]) {\n', '        needTokens = ethValue.mul(exchangeRate[i]);\n', '        break;\n', '      }\n', '    }\n', '    require(needTokens != 0);\n', '    transferToken(beneficiary, needTokens);\n', '    owner.transfer(msg.value);\n', '    TokenPurchase(msg.sender, beneficiary, ethValue, needTokens);\n', '  }\n', '\n', '  function transferToken(address to,uint needTokens) internal {\n', '    require(token.balanceOf(this) >= needTokens);\n', '    uint lockTokens = needTokens.div(2);\n', '    token.transfer(to, needTokens - lockTokens);\n', '    token.transferLockedPart(to, lockTokens);\n', '  }\n', '\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    token.transfer(owner,token.balanceOf(this));\n', '    isFinalized = true;\n', '    Finalized();\n', '  }\n', '\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '}']
