['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b != 0);\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '\taddress public owner;\n', '\taddress public authorizedCaller;\n', '\n', '\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\tconstructor() public {\n', '\t\towner = msg.sender;\n', '\t\tauthorizedCaller = msg.sender;\n', '\t}\n', '\tmodifier onlyOwner() {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\tmodifier onlyAuthorized() {\n', '\t\trequire(msg.sender == owner || msg.sender == authorizedCaller);\n', '\t\t_;\n', '\t}\n', '\tfunction transferAuthorizedCaller(address _newAuthorizedCaller) public onlyOwner {\n', '\t\trequire(_newAuthorizedCaller != address(0));\n', '\t\tauthorizedCaller = _newAuthorizedCaller;\n', '\t}\n', '\tfunction transferOwnership(address _newOwner) public onlyOwner {\n', '\t\trequire(_newOwner != address(0));\n', '\t\temit OwnershipTransferred(owner, _newOwner);\n', '\t\towner = _newOwner;\n', '\t}\n', '}\n', '\n', 'contract ERC20 {\n', '    function balanceOf(address _tokenOwner) public view returns (uint);\n', '    function transfer(address _to, uint _amount) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint _amount) public returns (bool);\n', '    function allowance(address _tokenOwner, address _spender) public view returns (uint);\n', '    function approve(address _spender, uint _amount) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract DreamcatcherToken is ERC20, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public constant totalSupply = 2500000000000;\n', '    string public constant name = "DREAMCATCHER";\n', '    string public constant symbol = "DRC";\n', '    uint8 public constant decimals = 6;\n', '\n', '    bool public isPayable = false;\n', '    bool public halted = false;\n', '\n', '    mapping(address => uint256) internal balances;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '    mapping(address => bool) internal locked;\n', '\n', '    constructor() public {\n', '        balances[msg.sender] = totalSupply;\n', '\t}\n', '\n', '\tmodifier checkHalted() {\n', '\t    require(halted == false);\n', '\t    _;\n', '\t}\n', '\n', '\tfunction () public payable {\n', '\t    if(isPayable == false || halted == true) {\n', '\t        revert();\n', '\t    }\n', '    }\n', '\n', '    function sendEther(address _receiver, uint256 _amount) external payable onlyAuthorized returns(bool) {\n', '        if (isPayable == false) {\n', '\t        revert();\n', '\t    }\n', '\n', '        return _receiver.call.value(_amount)();\n', '    }\n', '\n', '    function setIsPayable(bool _isPayable) external onlyAuthorized {\n', '        isPayable = _isPayable;\n', '    }\n', '\n', '    function setHalted(bool _halted) external onlyOwner {\n', '        halted = _halted;\n', '    }\n', '\n', '    function setLock(address _addr, bool _lock) external onlyAuthorized {\n', '        locked[_addr] = _lock;\n', '    }\n', '\n', '    function balanceOf(address _tokenOwner) public view returns (uint) {\n', '        return balances[_tokenOwner];\n', '    }\n', '\n', '    function transfer(address _to, uint _amount) public checkHalted returns (bool) {\n', '        if(msg.sender != owner) {\n', '            require(locked[msg.sender] == false && locked[_to] == false);\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _amount) public checkHalted returns (bool) {\n', '        if(msg.sender != owner) {\n', '            require(locked[msg.sender] == false && locked[_from] == false && locked[_to] == false);\n', '        }\n', '        require(_amount <= balances[_from]);\n', '        if(_from != msg.sender) {\n', '            require(_amount <= allowed[_from][msg.sender]);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        }\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _tokenOwner, address _spender) public view returns (uint) {\n', '        return allowed[_tokenOwner][_spender];\n', '    }\n', '\n', '    function approve(address _spender, uint _amount) public checkHalted returns (bool) {\n', '        require(locked[_spender] == false && locked[msg.sender] == false);\n', '\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '}']