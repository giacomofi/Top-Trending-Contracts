['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract ABCToken is StandardToken {\n', '  string public name = &#39;ABCToken&#39;;\n', '  string public token = &#39;ABC&#39;;\n', '  uint8 public decimals = 6;\n', '  uint public INITIAL_SUPPLY = 1000000*10**6;\n', '  uint public constant ONE_DECIMAL_QUANTUM_ABC_TOKEN_PRICE = 1 ether/(100*10**6);\n', '\n', '  //EVENTS\n', '  event tokenOverriden(address investor, uint decimalTokenAmount);\n', '  event receivedEther(address sender, uint amount);\n', '  mapping (address => bool) administrators;\n', '\n', '  // previous BDA token values\n', '  //address napoleonXAdministrator = 0x86123cb3AD5D2Fd033243e8aE3C360de66eEA114;\n', '  //address vault= 0x7551f7A0Ea66c8936c14dA547746C5DaF7dd0908;\n', '\n', '  address public napoleonXAdministrator = 0x8d7359C06b18429098c4CD985c9FBa4dbA4A76A6;\n', '  address public vault= 0xD2A734D981A7daAb488F5F1e7f6F178208c4E2ff;\n', '\n', '  // MODIFIERS\n', '  modifier onlyAdministrators {\n', '      require(administrators[msg.sender]);\n', '      _;\n', '  }\n', '\n', '  function isEqualLength(address[] x, uint[] y) pure internal returns (bool) { return x.length == y.length; }\n', '  modifier onlySameLengthArray(address[] x, uint[] y) {\n', '      require(isEqualLength(x,y));\n', '      _;\n', '  }\n', '\n', '  constructor() public {\n', '    totalSupply_ = INITIAL_SUPPLY;\n', '    balances[this] = INITIAL_SUPPLY;\n', '    administrators[napoleonXAdministrator]=true;\n', '  }\n', '\n', '  function()\n', '  payable\n', '  public\n', '  {\n', '      uint amountSentInWei = msg.value;\n', '      uint decimalTokenAmount = amountSentInWei/ONE_DECIMAL_QUANTUM_ABC_TOKEN_PRICE;\n', '      require(vault.send(msg.value));\n', '      require(this.transfer(msg.sender, decimalTokenAmount));\n', '      emit receivedEther(msg.sender, amountSentInWei);\n', '  }\n', '\n', '  function addAdministrator(address newAdministrator)\n', '  public\n', '  onlyAdministrators\n', '  {\n', '        administrators[newAdministrator]=true;\n', '  }\n', '\n', '  // we here repopulate the greenlist using the historic commitments from www.napoleonx.ai website\n', '  function overrideTokenHolders(address[] toOverride, uint[] decimalTokenAmount)\n', '  public\n', '  onlyAdministrators\n', '  onlySameLengthArray(toOverride, decimalTokenAmount)\n', '  {\n', '      for (uint i = 0; i < toOverride.length; i++) {\n', '      \t\tuint previousAmount = balances[toOverride[i]];\n', '      \t\tbalances[toOverride[i]] = decimalTokenAmount[i];\n', '      \t\ttotalSupply_ = totalSupply_-previousAmount+decimalTokenAmount[i];\n', '          emit tokenOverriden(toOverride[i], decimalTokenAmount[i]);\n', '      }\n', '  }\n', '\n', '  // we here repopulate the greenlist using the historic commitments from www.napoleonx.ai website\n', '  function overrideTokenHolder(address toOverride, uint decimalTokenAmount)\n', '  public\n', '  onlyAdministrators\n', '  {\n', '  \t\tuint previousAmount = balances[toOverride];\n', '  \t\tbalances[toOverride] = decimalTokenAmount;\n', '  \t\ttotalSupply_ = totalSupply_-previousAmount+decimalTokenAmount;\n', '      emit tokenOverriden(toOverride, decimalTokenAmount);\n', '  }\n', '\n', '  function resetContract()\n', '  public\n', '  onlyAdministrators\n', '  {\n', '    selfdestruct(vault);\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract ABCToken is StandardToken {\n', "  string public name = 'ABCToken';\n", "  string public token = 'ABC';\n", '  uint8 public decimals = 6;\n', '  uint public INITIAL_SUPPLY = 1000000*10**6;\n', '  uint public constant ONE_DECIMAL_QUANTUM_ABC_TOKEN_PRICE = 1 ether/(100*10**6);\n', '\n', '  //EVENTS\n', '  event tokenOverriden(address investor, uint decimalTokenAmount);\n', '  event receivedEther(address sender, uint amount);\n', '  mapping (address => bool) administrators;\n', '\n', '  // previous BDA token values\n', '  //address napoleonXAdministrator = 0x86123cb3AD5D2Fd033243e8aE3C360de66eEA114;\n', '  //address vault= 0x7551f7A0Ea66c8936c14dA547746C5DaF7dd0908;\n', '\n', '  address public napoleonXAdministrator = 0x8d7359C06b18429098c4CD985c9FBa4dbA4A76A6;\n', '  address public vault= 0xD2A734D981A7daAb488F5F1e7f6F178208c4E2ff;\n', '\n', '  // MODIFIERS\n', '  modifier onlyAdministrators {\n', '      require(administrators[msg.sender]);\n', '      _;\n', '  }\n', '\n', '  function isEqualLength(address[] x, uint[] y) pure internal returns (bool) { return x.length == y.length; }\n', '  modifier onlySameLengthArray(address[] x, uint[] y) {\n', '      require(isEqualLength(x,y));\n', '      _;\n', '  }\n', '\n', '  constructor() public {\n', '    totalSupply_ = INITIAL_SUPPLY;\n', '    balances[this] = INITIAL_SUPPLY;\n', '    administrators[napoleonXAdministrator]=true;\n', '  }\n', '\n', '  function()\n', '  payable\n', '  public\n', '  {\n', '      uint amountSentInWei = msg.value;\n', '      uint decimalTokenAmount = amountSentInWei/ONE_DECIMAL_QUANTUM_ABC_TOKEN_PRICE;\n', '      require(vault.send(msg.value));\n', '      require(this.transfer(msg.sender, decimalTokenAmount));\n', '      emit receivedEther(msg.sender, amountSentInWei);\n', '  }\n', '\n', '  function addAdministrator(address newAdministrator)\n', '  public\n', '  onlyAdministrators\n', '  {\n', '        administrators[newAdministrator]=true;\n', '  }\n', '\n', '  // we here repopulate the greenlist using the historic commitments from www.napoleonx.ai website\n', '  function overrideTokenHolders(address[] toOverride, uint[] decimalTokenAmount)\n', '  public\n', '  onlyAdministrators\n', '  onlySameLengthArray(toOverride, decimalTokenAmount)\n', '  {\n', '      for (uint i = 0; i < toOverride.length; i++) {\n', '      \t\tuint previousAmount = balances[toOverride[i]];\n', '      \t\tbalances[toOverride[i]] = decimalTokenAmount[i];\n', '      \t\ttotalSupply_ = totalSupply_-previousAmount+decimalTokenAmount[i];\n', '          emit tokenOverriden(toOverride[i], decimalTokenAmount[i]);\n', '      }\n', '  }\n', '\n', '  // we here repopulate the greenlist using the historic commitments from www.napoleonx.ai website\n', '  function overrideTokenHolder(address toOverride, uint decimalTokenAmount)\n', '  public\n', '  onlyAdministrators\n', '  {\n', '  \t\tuint previousAmount = balances[toOverride];\n', '  \t\tbalances[toOverride] = decimalTokenAmount;\n', '  \t\ttotalSupply_ = totalSupply_-previousAmount+decimalTokenAmount;\n', '      emit tokenOverriden(toOverride, decimalTokenAmount);\n', '  }\n', '\n', '  function resetContract()\n', '  public\n', '  onlyAdministrators\n', '  {\n', '    selfdestruct(vault);\n', '  }\n', '\n', '}']
