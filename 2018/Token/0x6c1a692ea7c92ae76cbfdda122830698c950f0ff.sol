['pragma solidity ^0.4.21;\n', '\n', 'contract ERC20 {\n', '    function balanceOf(address tokenowner) public constant returns (uint);\n', '    function allowance(address tokenowner, address spender) public constant returns (uint);\n', '    function transfer(address to, uint tokencount) public returns (bool success);\n', '    function approve(address spender, uint tokencount) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokencount) public returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint tokencount);\n', '    event Approval(address indexed tokenowner, address indexed spender, uint tokencount);\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokencount, address token, bytes data) public;\n', '}\n', '\n', 'contract CursedToken is ERC20 {\n', '    string public symbol = "CCB";\n', '    string public name = "Cursed Cornbread";\n', '    uint8 public decimals = 0;\n', '    uint public totalSupply = 0;\n', '    address public owner = 0x55516b579E56C1287f0700eddDa352C2d2c5b3b6;\n', '\n', '    // all funds will go to GiveDirectly charity \n', '    // https://web.archive.org/web/20180313215224/https://www.givedirectly.org/give-now?crypto=eth#\n', '    address public withdrawAddress = 0xa515BDA9869F619fe84357E3e44040Db357832C4;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    function CursedToken() public {\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function balanceOf(address tokenowner) public constant returns (uint) {\n', '        return balances[tokenowner];\n', '    }\n', '\n', '    function allowance(address tokenowner, address spender) public constant returns (uint) {\n', '        return allowed[tokenowner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint tokencount) public returns (bool success) {\n', '        require(msg.sender==to || 0==tokencount);\n', '        balances[msg.sender] = sub(balances[msg.sender], tokencount);\n', '        balances[to] = add(balances[to], tokencount);\n', '        emit Transfer(msg.sender, to, tokencount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint tokencount) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokencount;\n', '        emit Approval(msg.sender, spender, tokencount);\n', '        return true;\n', '    }\n', '\n', '    function issue(address to, uint tokencount) public returns (bool success) {\n', '        require(msg.sender==owner);\n', '        balances[to] = add(balances[to], tokencount);\n', '        totalSupply += tokencount;\n', '        emit Transfer(address(0), to, tokencount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint tokencount) public returns (bool success) {\n', '        require(from==to || 0==tokencount);\n', '        balances[from] = sub(balances[from], tokencount);\n', '        allowed[from][msg.sender] = sub(allowed[from][msg.sender], tokencount);\n', '        balances[to] = add(balances[to], tokencount);\n', '        emit Transfer(from, to, tokencount);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address spender, uint tokencount, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokencount;\n', '        emit Approval(msg.sender, spender, tokencount);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokencount, this, data);\n', '        return true;\n', '    }\n', '\n', '    // Anyone can send the ether in the contract at any time to charity\n', '    function withdraw() public returns (bool success) {\n', '        withdrawAddress.transfer(address(this).balance);\n', '        return true;\n', '    }\n', '\n', '    function () public payable {\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract ERC20 {\n', '    function balanceOf(address tokenowner) public constant returns (uint);\n', '    function allowance(address tokenowner, address spender) public constant returns (uint);\n', '    function transfer(address to, uint tokencount) public returns (bool success);\n', '    function approve(address spender, uint tokencount) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokencount) public returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint tokencount);\n', '    event Approval(address indexed tokenowner, address indexed spender, uint tokencount);\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokencount, address token, bytes data) public;\n', '}\n', '\n', 'contract CursedToken is ERC20 {\n', '    string public symbol = "CCB";\n', '    string public name = "Cursed Cornbread";\n', '    uint8 public decimals = 0;\n', '    uint public totalSupply = 0;\n', '    address public owner = 0x55516b579E56C1287f0700eddDa352C2d2c5b3b6;\n', '\n', '    // all funds will go to GiveDirectly charity \n', '    // https://web.archive.org/web/20180313215224/https://www.givedirectly.org/give-now?crypto=eth#\n', '    address public withdrawAddress = 0xa515BDA9869F619fe84357E3e44040Db357832C4;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    function CursedToken() public {\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function balanceOf(address tokenowner) public constant returns (uint) {\n', '        return balances[tokenowner];\n', '    }\n', '\n', '    function allowance(address tokenowner, address spender) public constant returns (uint) {\n', '        return allowed[tokenowner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint tokencount) public returns (bool success) {\n', '        require(msg.sender==to || 0==tokencount);\n', '        balances[msg.sender] = sub(balances[msg.sender], tokencount);\n', '        balances[to] = add(balances[to], tokencount);\n', '        emit Transfer(msg.sender, to, tokencount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint tokencount) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokencount;\n', '        emit Approval(msg.sender, spender, tokencount);\n', '        return true;\n', '    }\n', '\n', '    function issue(address to, uint tokencount) public returns (bool success) {\n', '        require(msg.sender==owner);\n', '        balances[to] = add(balances[to], tokencount);\n', '        totalSupply += tokencount;\n', '        emit Transfer(address(0), to, tokencount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint tokencount) public returns (bool success) {\n', '        require(from==to || 0==tokencount);\n', '        balances[from] = sub(balances[from], tokencount);\n', '        allowed[from][msg.sender] = sub(allowed[from][msg.sender], tokencount);\n', '        balances[to] = add(balances[to], tokencount);\n', '        emit Transfer(from, to, tokencount);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address spender, uint tokencount, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokencount;\n', '        emit Approval(msg.sender, spender, tokencount);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokencount, this, data);\n', '        return true;\n', '    }\n', '\n', '    // Anyone can send the ether in the contract at any time to charity\n', '    function withdraw() public returns (bool success) {\n', '        withdrawAddress.transfer(address(this).balance);\n', '        return true;\n', '    }\n', '\n', '    function () public payable {\n', '    }\n', '\n', '}']
