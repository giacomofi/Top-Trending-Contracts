['pragma solidity ^0.4.18;\n', '\n', '// sol to LUSD token\n', '// \n', '// Senior Development Engineer  CHIEH-HSUAN WANG of Lucas. \n', '// Jason Wang  <ixhxpns@gmail.com>\n', '// reference https://ethereum.org/token\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', '//Get Owner\n', 'contract owned {\n', '    address public owner;\n', '    constructor() public{\n', '       owner = msg.sender; \n', '    }\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    // 实现所有权转移\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '//增發前必須調用ＯＷＮＥＲ權限\n', 'contract LUSD is owned {\n', '    address public deployer;\n', '    // Public variables of the token\n', '    string public name ="Lucas Credit Cooperative";\n', '    string public symbol = "LUSD";\n', '    uint8 public decimals = 4;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply = 1000000000000;\n', '\n', '    mapping (address => uint256) public balanceOf;  // \n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    constructor(uint256 initialSupply, string tokenName, /*uint8 decimalUnits,*/ string tokenSymbol, address centralMinter) public {\n', '        if(centralMinter != 0 ) owner = centralMinter;\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '        deployer = msg.sender;\n', '    }\n', '    \n', '    \n', '    \n', '    //增發\n', '    function mintToken(address target, uint256 mintedAmount) public onlyOwner {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        emit Transfer(0, owner, mintedAmount);\n', '        emit Transfer(owner, target, mintedAmount);\n', '    }\n', '\n', '    //買賣合同\n', '    \n', '    //設置買賣價格\n', '    uint256 public sellPrice;\n', '    uint256 public buyPrice;\n', '    \n', '    //設置市場可供買賣\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyOwner {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    //GAS Automatic add amount\n', '    uint minBalanceForAccounts;\n', '\n', '    function setMinBalance(uint minimumBalanceInFinney) public onlyOwner {\n', '         minBalanceForAccounts = minimumBalanceInFinney * 1 finney;\n', '    }\n', '      \n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        /*if(msg.sender.balance < minBalanceForAccounts)\n', '            sell((minBalanceForAccounts - msg.sender.balance) / sellPrice);\n', '        if(_to.balance<minBalanceForAccounts)   // 可选，让接受者也补充余额，以便接受者使用代币。\n', '            _to.send(sell((minBalanceForAccounts - _to.balance) / sellPrice));*/\n', '        if (_to == 0x0) revert();//throw;                               // Prevent transfer to 0x0 address. Use burn() instead\n', '\t\tif (_value <= 0) revert();//throw; \n', '        if (balanceOf[msg.sender] < _value) revert();//throw;           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert();//throw; // Check for overflows\n', '        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '    /*function kill() public {\n', '       if (owner == msg.sender) { // 检查谁在调用\n', '          selfdestruct(owner); // 销毁合约\n', '       }\n', '    }*/\n', '    //function increaseSupply(uint _value, address _to) public returns (bool);//ERC223 增發\n', '    //function decreaseSupply(uint _value, address _from) public returns (bool);\n', '    \n', '}']