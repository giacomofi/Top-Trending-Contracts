['////////////////////////////////////////////////////////////////////////////////\n', '///////////////////////////////// ERC223 ///////////////////////////////////////\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', 'contract ERC223Interface {\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function transfer(address to, uint value) public ;\n', '    function transfer(address to, uint value, bytes data) public ;\n', '    //event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '    event Transfer(address indexed from, address indexed to, uint value); //ERC 20 style\n', '}\n', 'contract ERC223ReceivingContract {\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', 'contract EducationToken is ERC223Interface {\n', '    \n', '    using SafeMath for uint;\n', '    \n', '    string public constant name = "Education Token Test";\n', '    string public constant symbol = "KEDUTest";\n', '    uint8  public constant decimals = 18;\n', '    \n', '    uint256 public constant totalSupply =  2 * (10 ** 9) * (10 ** 18); // 2 billion "KEDU"\n', '    uint256 public constant Million     =      (10 ** 6);\n', '    //uint256 public nowSupply = 0;\n', '    \n', '    address public constant contractOwner = 0x21bA616f20a14bc104615Cc955F818310E725aBA;\n', '    \n', '    mapping (address => uint256) balances;\n', '    \n', '    function EducationToken() {\n', '        preAllocation();\n', '    }\n', '\tfunction preAllocation() internal {\n', '        balances[0x21bA616f20a14bc104615Cc955F818310E725aBA] =   0*(10**6)*(10**18); //  0% ,code writer\n', '        balances[0x6F34740F96C76B4C228D8EFA5EC9C71205733102] = 200*(10**6)*(10**18); // 10% ,contractOwner1\n', '        balances[0x33fa06cD9A1451961890532bB3F2F2b6fB817976] = 200*(10**6)*(10**18); // 10% ,contractOwner2\n', '        balances[0x5d49508ab79A149663F036C9e1f820F2B78EC230] = 200*(10**6)*(10**18); // 10% ,contractOwner3\n', '        balances[0x45bC7Ac57f10b42133abf5a92861D4AA3C5EA3e8] = 200*(10**6)*(10**18); // 10% ,contractOwner4\n', '        balances[0xc157F7DcA6c101Cc2c63462d4E81bF5C335EFB49] = 200*(10**6)*(10**18); // 10% ,contractOwner5\n', '        balances[0x1306E082444370f11039b1eC19D85Bf3dF35Bb62] = 200*(10**6)*(10**18); // 10% ,contractOwner6\n', '        balances[0xC45E047cD81356d655D5c061311f62BBe2d2908C] = 200*(10**6)*(10**18); // 10% ,contractOwner7\n', '        balances[0x42b4B6BBb2619Afd619A56aeBa1533699c3A8e8d] = 200*(10**6)*(10**18); // 10% ,contractOwner8\n', '        balances[0xA8e5986C88556180Db85b3288CD10f383c1C04a6] = 200*(10**6)*(10**18); // 10% ,contractOwner9\n', '        balances[0xA6B60801869c732B75Ee980fC53458dAc75ebe7E] = 200*(10**6)*(10**18); // 10% ,contractOwner10\n', '\t}\n', '    function() payable {\n', '        require(msg.value >= 0.00001 ether);\n', '    }\n', '    function getETH(uint256 _amount) public {\n', '        //require(now>endTime);\n', '        require(msg.sender==contractOwner);\n', '        msg.sender.transfer(_amount);\n', '    }\n', '    function nowSupply() constant public returns(uint){\n', '        uint supply=totalSupply;\n', '        supply=supply-balances[0x21bA616f20a14bc104615Cc955F818310E725aBA];\n', '        supply=supply-balances[0x6F34740F96C76B4C228D8EFA5EC9C71205733102];\n', '        supply=supply-balances[0x33fa06cD9A1451961890532bB3F2F2b6fB817976];\n', '        supply=supply-balances[0x5d49508ab79A149663F036C9e1f820F2B78EC230];\n', '        supply=supply-balances[0x45bC7Ac57f10b42133abf5a92861D4AA3C5EA3e8];\n', '        supply=supply-balances[0xc157F7DcA6c101Cc2c63462d4E81bF5C335EFB49];\n', '        supply=supply-balances[0x1306E082444370f11039b1eC19D85Bf3dF35Bb62];\n', '        supply=supply-balances[0xC45E047cD81356d655D5c061311f62BBe2d2908C];\n', '        supply=supply-balances[0x42b4B6BBb2619Afd619A56aeBa1533699c3A8e8d];\n', '        supply=supply-balances[0xA8e5986C88556180Db85b3288CD10f383c1C04a6];\n', '        supply=supply-balances[0xA6B60801869c732B75Ee980fC53458dAc75ebe7E];\n', '        return supply;\n', '    }\n', '    \n', '    /////////////////////////////////////////////////////////////////////\n', '    ///////////////// ERC223 Standard functions /////////////////////////\n', '    /////////////////////////////////////////////////////////////////////\n', '    function transfer(address _to, uint _value, bytes _data) public {\n', '        // Standard function transfer similar to ERC20 transfer with no _data .\n', '        // Added due to backwards compatibility reasons .\n', '        uint codeLength;\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        require(_value > 0);\n', '        require(balances[msg.sender] >= _value);\n', '        require(balances[_to]+_value > 0);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        emit Transfer(msg.sender, _to, _value);\n', '    }\n', '    function transfer(address _to, uint _value) public {\n', '        uint codeLength;\n', '        bytes memory empty;\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        require(_value > 0);\n', '        require(balances[msg.sender] >= _value);\n', '        require(balances[_to]+_value > 0);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '        emit Transfer(msg.sender, _to, _value);\n', '    }\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}']