['pragma solidity ^0.4.15;\n', '\n', 'contract Utils {\n', '    /**\n', '        constructor\n', '    */\n', '    function Utils() internal {\n', '    }\n', '\n', '    // validates an address - currently only checks that it isn&#39;t null\n', '    modifier validAddress(address _address) {\n', '        require(_address != 0x0);\n', '        _;\n', '    }\n', '\n', '    // verifies that the address is different than this contract address\n', '    modifier notThis(address _address) {\n', '        require(_address != address(this));\n', '        _;\n', '    }\n', '\n', '    // Overflow protected math functions\n', '\n', '    /**\n', '        @dev returns the sum of _x and _y, asserts if the calculation overflows\n', '\n', '        @param _x   value 1\n', '        @param _y   value 2\n', '\n', '        @return sum\n', '    */\n', '    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        uint256 z = _x + _y;\n', '        assert(z >= _x);\n', '        return z;\n', '    }\n', '\n', '    /**\n', '        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\n', '\n', '        @param _x   minuend\n', '        @param _y   subtrahend\n', '\n', '        @return difference\n', '    */\n', '    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        assert(_x >= _y);\n', '        return _x - _y;\n', '    }\n', '\n', '    /**\n', '        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\n', '\n', '        @param _x   factor 1\n', '        @param _y   factor 2\n', '\n', '        @return product\n', '    */\n', '    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        uint256 z = _x * _y;\n', '        assert(_x == 0 || z / _x == _y);\n', '        return z;\n', '    }\n', '}\n', '\n', '/*\n', '    ERC20 Standard Token interface\n', '*/\n', 'contract IERC20Token {\n', '    // these functions aren&#39;t abstract since the compiler emits automatically generated getter functions as external\n', '    function name() public constant returns (string) { name; }\n', '    function symbol() public constant returns (string) { symbol; }\n', '    function decimals() public constant returns (uint8) { decimals; }\n', '    function totalSupply() public constant returns (uint256) { totalSupply; }\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', '\n', '/**\n', '    ERC20 Standard Token implementation\n', '*/\n', 'contract StandardERC20Token is IERC20Token, Utils {\n', '    string public name = "";\n', '    string public symbol = "";\n', '    uint8 public decimals = 0;\n', '    uint256 public totalSupply = 0;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '\n', '\n', '    /**\n', '        @dev constructor\n', '\n', '        @param _name        token name\n', '        @param _symbol      token symbol\n', '        @param _decimals    decimal points, for display purposes\n', '    */\n', '    function StandardERC20Token(string _name, string _symbol, uint8 _decimals) public{\n', '        require(bytes(_name).length > 0 && bytes(_symbol).length > 0); // validate input\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '    }\n', '\n', '     function balanceOf(address _owner) constant returns (uint256) {\n', '        return balanceOf[_owner];\n', '    }\n', '    function allowance(address _owner, address _spender) constant returns (uint256) {\n', '        return allowance[_owner][_spender];\n', '    }\n', '    /**\n', '        @dev send coins\n', '        throws on any error rather then return a false flag to minimize user errors\n', '\n', '        @param _to      target address\n', '        @param _value   transfer amount\n', '\n', '        @return true if the transfer was successful, false if it wasn&#39;t\n', '    */\n', '    function transfer(address _to, uint256 _value)\n', '        public\n', '        validAddress(_to)\n', '        returns (bool success)\n', '    {\n', '        require(balanceOf[msg.sender] >= _value && _value > 0);\n', '        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n', '        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev an account/contract attempts to get the coins\n', '        throws on any error rather then return a false flag to minimize user errors\n', '\n', '        @param _from    source address\n', '        @param _to      target address\n', '        @param _value   transfer amount\n', '\n', '        @return true if the transfer was successful, false if it wasn&#39;t\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        validAddress(_from)\n', '        validAddress(_to)\n', '        returns (bool success)\n', '    {\n', '        require(balanceOf[_from] >= _value && _value > 0);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender], _value);\n', '        balanceOf[_from] = safeSub(balanceOf[_from], _value);\n', '        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev allow another account/contract to spend some tokens on your behalf\n', '        throws on any error rather then return a false flag to minimize user errors\n', '\n', '        also, to minimize the risk of the approve/transferFrom attack vector\n', '        (see https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/), approve has to be called twice\n', '        in 2 separate transactions - once to change the allowance to 0 and secondly to change it to the new allowance value\n', '\n', '        @param _spender approved address\n', '        @param _value   allowance amount\n', '\n', '        @return true if the approval was successful, false if it wasn&#39;t\n', '    */\n', '    function approve(address _spender, uint256 _value)\n', '        public\n', '        validAddress(_spender)\n', '        returns (bool success)\n', '    {\n', '        // if the allowance isn&#39;t 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/*\n', '    Owned contract interface\n', '*/\n', 'contract IOwned {\n', '    // this function isn&#39;t abstract since the compiler emits automatically generated getter functions as external\n', '    function owner() public constant returns (address) { owner; }\n', '\n', '    function transferOwnership(address _newOwner) public;\n', '    function acceptOwnership() public;\n', '}\n', '\n', '/*\n', '    Provides support and utilities for contract ownership\n', '*/\n', 'contract Owned is IOwned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnerUpdate(address _prevOwner, address _newOwner);\n', '\n', '    /**\n', '        @dev constructor\n', '    */\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // allows execution by the owner only\n', '    modifier ownerOnly {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev allows transferring the contract ownership\n', '        the new owner still needs to accept the transfer\n', '        can only be called by the contract owner\n', '\n', '        @param _newOwner    new contract owner\n', '    */\n', '    function transferOwnership(address _newOwner) public ownerOnly {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    /**\n', '        @dev used by a new owner to accept an ownership transfer\n', '    */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '}\n', '\n', 'contract YooStop is Owned{\n', '\n', '    bool public stopped = false;\n', '\n', '    modifier stoppable {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '    function stop() public ownerOnly{\n', '        stopped = true;\n', '    }\n', '    function start() public ownerOnly{\n', '        stopped = false;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract YOOBAToken is StandardERC20Token, Owned,YooStop {\n', '\n', '\n', '\n', '    uint256 constant public YOO_UNIT = 10 ** 18;\n', '    uint256 public totalSupply = 100 * (10**8) * YOO_UNIT;\n', '\n', '    //  Constants \n', '    uint256 constant public airdropSupply = 20 * 10**8 * YOO_UNIT;           \n', '    uint256 constant public earlyInvestorSupply = 5 * 10**8 * YOO_UNIT;    \n', '    uint256 constant public earlyCommunitySupply = 5 * 10**8 * YOO_UNIT;  \n', '    uint256 constant public icoReservedSupply = 40 * 10**8 * YOO_UNIT;          // ico Reserved,not for other usages.\n', '    uint256 constant public teamSupply = 12 * 10**8 * YOO_UNIT;         // Team,Community,Research，etc.\n', '    uint256 constant public ecosystemSupply = 18 * 10**8 * YOO_UNIT;         // Community,Research，Infrastructure，etc.\n', '    \n', '    uint256  public tokensReleasedToIco = 0;  //the tokens has released for ico.\n', '    uint256  public tokensReleasedToEarlyInvestor = 0;  //the tokens has released for early investor.\n', '    uint256  public tokensReleasedToTeam = 0;  //the tokens has released to team.\n', '    uint256  public tokensReleasedToEcosystem = 0;  //the tokens has released to ecosystem.\n', '    uint256  public currentSupply = 0;  //all tokens released currently.\n', '\n', '    \n', '    \n', '    address public airdropAddress;                                           \n', '    address public yoobaTeamAddress;     \n', '    address public earlyCommunityAddress;\n', '    address public ecosystemAddress;// use for community,Research，Infrastructure，etc.\n', '    address public backupAddress;\n', '\n', '\n', '    \n', '    \n', '    uint256 internal createTime = 1522261875;                                // will be replace by (UTC) contract create time (in seconds)\n', '    uint256 internal teamTranchesReleased = 0;                          // Track how many tranches (allocations of 6.25% teamSupply tokens) have been released，about 4 years,teamSupply tokens will be allocate to team.\n', '    uint256 internal ecosystemTranchesReleased = 0;                          // Track how many tranches (allocations of 6.25% ecosystemSupply tokens) have been released.About 4 years,that will be release all. \n', '    uint256 internal maxTranches = 16;       \n', '    bool internal isInitAirdropAndEarlyAlloc = false;\n', '\n', '\n', '    /**\n', '        @dev constructor\n', '        \n', '    */\n', '    function YOOBAToken(address _airdropAddress, address _ecosystemAddress, address _backupAddress, address _yoobaTeamAddress,address _earlyCommunityAddress)\n', '    StandardERC20Token("Yooba token", "YOO", 18) public\n', '     {\n', '        airdropAddress = _airdropAddress;\n', '        yoobaTeamAddress = _yoobaTeamAddress;\n', '        ecosystemAddress = _ecosystemAddress;\n', '        backupAddress = _backupAddress;\n', '        earlyCommunityAddress = _earlyCommunityAddress;\n', '        createTime = now;\n', '    }\n', '    \n', '    \n', '    /**\n', '        @dev \n', '        the tokens at the airdropAddress will be airdroped before 2018.12.31\n', '    */\n', '     function initAirdropAndEarlyAlloc()   public ownerOnly stoppable returns(bool success){\n', '         require(!isInitAirdropAndEarlyAlloc);\n', '         require(airdropAddress != 0x0 && earlyCommunityAddress != 0x0);\n', '         require((currentSupply + earlyCommunitySupply + airdropSupply) <= totalSupply);\n', '         balanceOf[earlyCommunityAddress] += earlyCommunitySupply; \n', '         currentSupply += earlyCommunitySupply;\n', '         Transfer(0x0, earlyCommunityAddress, earlyCommunitySupply);\n', '        balanceOf[airdropAddress] += airdropSupply;       \n', '        currentSupply += airdropSupply;\n', '        Transfer(0x0, airdropAddress, airdropSupply);\n', '        isInitAirdropAndEarlyAlloc = true;\n', '        return true;\n', '     }\n', '    \n', '\n', '\n', '    /**\n', '        @dev send tokens\n', '        throws on any error rather then return a false flag to minimize user errors\n', '        in addition to the standard checks, the function throws if transfers are disabled\n', '\n', '        @param _to      target address\n', '        @param _value   transfer amount\n', '\n', '        @return true if the transfer was successful, throws if it wasn&#39;t\n', '    */\n', '    function transfer(address _to, uint256 _value) public stoppable returns (bool success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '        @dev \n', '        throws on any error rather then return a false flag to minimize user errors\n', '        in addition to the standard checks, the function throws if transfers are disabled\n', '\n', '        @param _from    source address\n', '        @param _to      target address\n', '        @param _value   transfer amount\n', '\n', '        @return true if the transfer was successful, throws if it wasn&#39;t\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public stoppable returns (bool success) {\n', '            return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '\n', '    /**\n', '        @dev Release one  tranche of the ecosystemSupply allocation to Yooba team,6.25% every tranche.About 4 years ecosystemSupply release over.\n', '       \n', '        @return true if successful, throws if not\n', '    */\n', '    function releaseForEcosystem()   public ownerOnly stoppable returns(bool success) {\n', '        require(now >= createTime + 12 weeks);\n', '        require(tokensReleasedToEcosystem < ecosystemSupply);\n', '\n', '        uint256 temp = ecosystemSupply / 10000;\n', '        uint256 allocAmount = safeMul(temp, 625);\n', '        uint256 currentTranche = uint256(now - createTime) /  12 weeks;\n', '\n', '        if(ecosystemTranchesReleased < maxTranches && currentTranche > ecosystemTranchesReleased && (currentSupply + allocAmount) <= totalSupply) {\n', '            ecosystemTranchesReleased++;\n', '            balanceOf[ecosystemAddress] = safeAdd(balanceOf[ecosystemAddress], allocAmount);\n', '            currentSupply += allocAmount;\n', '            tokensReleasedToEcosystem = safeAdd(tokensReleasedToEcosystem, allocAmount);\n', '            Transfer(0x0, ecosystemAddress, allocAmount);\n', '            return true;\n', '        }\n', '        revert();\n', '    }\n', '    \n', '       /**\n', '        @dev Release one  tranche of the teamSupply allocation to Yooba team,6.25% every tranche.About 4 years Yooba team will get teamSupply Tokens.\n', '       \n', '        @return true if successful, throws if not\n', '    */\n', '    function releaseForYoobaTeam()   public ownerOnly stoppable returns(bool success) {\n', '        require(now >= createTime + 12 weeks);\n', '        require(tokensReleasedToTeam < teamSupply);\n', '\n', '        uint256 temp = teamSupply / 10000;\n', '        uint256 allocAmount = safeMul(temp, 625);\n', '        uint256 currentTranche = uint256(now - createTime) / 12 weeks;\n', '\n', '        if(teamTranchesReleased < maxTranches && currentTranche > teamTranchesReleased && (currentSupply + allocAmount) <= totalSupply) {\n', '            teamTranchesReleased++;\n', '            balanceOf[yoobaTeamAddress] = safeAdd(balanceOf[yoobaTeamAddress], allocAmount);\n', '            currentSupply += allocAmount;\n', '            tokensReleasedToTeam = safeAdd(tokensReleasedToTeam, allocAmount);\n', '            Transfer(0x0, yoobaTeamAddress, allocAmount);\n', '            return true;\n', '        }\n', '        revert();\n', '    }\n', '\n', '  \n', '    \n', '        /**\n', '        @dev release ico Tokens \n', '\n', '        @return true if successful, throws if not\n', '    */\n', '    function releaseForIco(address _icoAddress, uint256 _value) public  ownerOnly stoppable returns(bool success) {\n', '          require(_icoAddress != address(0x0) && _value > 0  && (tokensReleasedToIco + _value) <= icoReservedSupply && (currentSupply + _value) <= totalSupply);\n', '          balanceOf[_icoAddress] = safeAdd(balanceOf[_icoAddress], _value);\n', '          currentSupply += _value;\n', '          tokensReleasedToIco += _value;\n', '          Transfer(0x0, _icoAddress, _value);\n', '         return true;\n', '    }\n', '\n', '        /**\n', '        @dev release  earlyInvestor Tokens \n', '\n', '        @return true if successful, throws if not\n', '    */\n', '    function releaseForEarlyInvestor(address _investorAddress, uint256 _value) public  ownerOnly  stoppable  returns(bool success) {\n', '          require(_investorAddress != address(0x0) && _value > 0  && (tokensReleasedToEarlyInvestor + _value) <= earlyInvestorSupply && (currentSupply + _value) <= totalSupply);\n', '          balanceOf[_investorAddress] = safeAdd(balanceOf[_investorAddress], _value);\n', '          currentSupply += _value;\n', '          tokensReleasedToEarlyInvestor += _value;\n', '          Transfer(0x0, _investorAddress, _value);\n', '         return true;\n', '    }\n', '    /**\n', '     @dev  This only run for urgent situation.Or Yooba mainnet is run well and all tokens release over. \n', '\n', '        @return true if successful, throws if not\n', '    */\n', '    function processWhenStop() public  ownerOnly   returns(bool success) {\n', '        require(currentSupply <=  totalSupply && stopped);\n', '        balanceOf[backupAddress] += (totalSupply - currentSupply);\n', '        currentSupply = totalSupply;\n', '       Transfer(0x0, backupAddress, (totalSupply - currentSupply));\n', '        return true;\n', '    }\n', '    \n', '\n', '}']
['pragma solidity ^0.4.15;\n', '\n', 'contract Utils {\n', '    /**\n', '        constructor\n', '    */\n', '    function Utils() internal {\n', '    }\n', '\n', "    // validates an address - currently only checks that it isn't null\n", '    modifier validAddress(address _address) {\n', '        require(_address != 0x0);\n', '        _;\n', '    }\n', '\n', '    // verifies that the address is different than this contract address\n', '    modifier notThis(address _address) {\n', '        require(_address != address(this));\n', '        _;\n', '    }\n', '\n', '    // Overflow protected math functions\n', '\n', '    /**\n', '        @dev returns the sum of _x and _y, asserts if the calculation overflows\n', '\n', '        @param _x   value 1\n', '        @param _y   value 2\n', '\n', '        @return sum\n', '    */\n', '    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        uint256 z = _x + _y;\n', '        assert(z >= _x);\n', '        return z;\n', '    }\n', '\n', '    /**\n', '        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\n', '\n', '        @param _x   minuend\n', '        @param _y   subtrahend\n', '\n', '        @return difference\n', '    */\n', '    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        assert(_x >= _y);\n', '        return _x - _y;\n', '    }\n', '\n', '    /**\n', '        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\n', '\n', '        @param _x   factor 1\n', '        @param _y   factor 2\n', '\n', '        @return product\n', '    */\n', '    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        uint256 z = _x * _y;\n', '        assert(_x == 0 || z / _x == _y);\n', '        return z;\n', '    }\n', '}\n', '\n', '/*\n', '    ERC20 Standard Token interface\n', '*/\n', 'contract IERC20Token {\n', "    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\n", '    function name() public constant returns (string) { name; }\n', '    function symbol() public constant returns (string) { symbol; }\n', '    function decimals() public constant returns (uint8) { decimals; }\n', '    function totalSupply() public constant returns (uint256) { totalSupply; }\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', '\n', '/**\n', '    ERC20 Standard Token implementation\n', '*/\n', 'contract StandardERC20Token is IERC20Token, Utils {\n', '    string public name = "";\n', '    string public symbol = "";\n', '    uint8 public decimals = 0;\n', '    uint256 public totalSupply = 0;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '\n', '\n', '    /**\n', '        @dev constructor\n', '\n', '        @param _name        token name\n', '        @param _symbol      token symbol\n', '        @param _decimals    decimal points, for display purposes\n', '    */\n', '    function StandardERC20Token(string _name, string _symbol, uint8 _decimals) public{\n', '        require(bytes(_name).length > 0 && bytes(_symbol).length > 0); // validate input\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '    }\n', '\n', '     function balanceOf(address _owner) constant returns (uint256) {\n', '        return balanceOf[_owner];\n', '    }\n', '    function allowance(address _owner, address _spender) constant returns (uint256) {\n', '        return allowance[_owner][_spender];\n', '    }\n', '    /**\n', '        @dev send coins\n', '        throws on any error rather then return a false flag to minimize user errors\n', '\n', '        @param _to      target address\n', '        @param _value   transfer amount\n', '\n', "        @return true if the transfer was successful, false if it wasn't\n", '    */\n', '    function transfer(address _to, uint256 _value)\n', '        public\n', '        validAddress(_to)\n', '        returns (bool success)\n', '    {\n', '        require(balanceOf[msg.sender] >= _value && _value > 0);\n', '        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n', '        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev an account/contract attempts to get the coins\n', '        throws on any error rather then return a false flag to minimize user errors\n', '\n', '        @param _from    source address\n', '        @param _to      target address\n', '        @param _value   transfer amount\n', '\n', "        @return true if the transfer was successful, false if it wasn't\n", '    */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        validAddress(_from)\n', '        validAddress(_to)\n', '        returns (bool success)\n', '    {\n', '        require(balanceOf[_from] >= _value && _value > 0);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender], _value);\n', '        balanceOf[_from] = safeSub(balanceOf[_from], _value);\n', '        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev allow another account/contract to spend some tokens on your behalf\n', '        throws on any error rather then return a false flag to minimize user errors\n', '\n', '        also, to minimize the risk of the approve/transferFrom attack vector\n', '        (see https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/), approve has to be called twice\n', '        in 2 separate transactions - once to change the allowance to 0 and secondly to change it to the new allowance value\n', '\n', '        @param _spender approved address\n', '        @param _value   allowance amount\n', '\n', "        @return true if the approval was successful, false if it wasn't\n", '    */\n', '    function approve(address _spender, uint256 _value)\n', '        public\n', '        validAddress(_spender)\n', '        returns (bool success)\n', '    {\n', "        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal\n", '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/*\n', '    Owned contract interface\n', '*/\n', 'contract IOwned {\n', "    // this function isn't abstract since the compiler emits automatically generated getter functions as external\n", '    function owner() public constant returns (address) { owner; }\n', '\n', '    function transferOwnership(address _newOwner) public;\n', '    function acceptOwnership() public;\n', '}\n', '\n', '/*\n', '    Provides support and utilities for contract ownership\n', '*/\n', 'contract Owned is IOwned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnerUpdate(address _prevOwner, address _newOwner);\n', '\n', '    /**\n', '        @dev constructor\n', '    */\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // allows execution by the owner only\n', '    modifier ownerOnly {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev allows transferring the contract ownership\n', '        the new owner still needs to accept the transfer\n', '        can only be called by the contract owner\n', '\n', '        @param _newOwner    new contract owner\n', '    */\n', '    function transferOwnership(address _newOwner) public ownerOnly {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    /**\n', '        @dev used by a new owner to accept an ownership transfer\n', '    */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '}\n', '\n', 'contract YooStop is Owned{\n', '\n', '    bool public stopped = false;\n', '\n', '    modifier stoppable {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '    function stop() public ownerOnly{\n', '        stopped = true;\n', '    }\n', '    function start() public ownerOnly{\n', '        stopped = false;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract YOOBAToken is StandardERC20Token, Owned,YooStop {\n', '\n', '\n', '\n', '    uint256 constant public YOO_UNIT = 10 ** 18;\n', '    uint256 public totalSupply = 100 * (10**8) * YOO_UNIT;\n', '\n', '    //  Constants \n', '    uint256 constant public airdropSupply = 20 * 10**8 * YOO_UNIT;           \n', '    uint256 constant public earlyInvestorSupply = 5 * 10**8 * YOO_UNIT;    \n', '    uint256 constant public earlyCommunitySupply = 5 * 10**8 * YOO_UNIT;  \n', '    uint256 constant public icoReservedSupply = 40 * 10**8 * YOO_UNIT;          // ico Reserved,not for other usages.\n', '    uint256 constant public teamSupply = 12 * 10**8 * YOO_UNIT;         // Team,Community,Research，etc.\n', '    uint256 constant public ecosystemSupply = 18 * 10**8 * YOO_UNIT;         // Community,Research，Infrastructure，etc.\n', '    \n', '    uint256  public tokensReleasedToIco = 0;  //the tokens has released for ico.\n', '    uint256  public tokensReleasedToEarlyInvestor = 0;  //the tokens has released for early investor.\n', '    uint256  public tokensReleasedToTeam = 0;  //the tokens has released to team.\n', '    uint256  public tokensReleasedToEcosystem = 0;  //the tokens has released to ecosystem.\n', '    uint256  public currentSupply = 0;  //all tokens released currently.\n', '\n', '    \n', '    \n', '    address public airdropAddress;                                           \n', '    address public yoobaTeamAddress;     \n', '    address public earlyCommunityAddress;\n', '    address public ecosystemAddress;// use for community,Research，Infrastructure，etc.\n', '    address public backupAddress;\n', '\n', '\n', '    \n', '    \n', '    uint256 internal createTime = 1522261875;                                // will be replace by (UTC) contract create time (in seconds)\n', '    uint256 internal teamTranchesReleased = 0;                          // Track how many tranches (allocations of 6.25% teamSupply tokens) have been released，about 4 years,teamSupply tokens will be allocate to team.\n', '    uint256 internal ecosystemTranchesReleased = 0;                          // Track how many tranches (allocations of 6.25% ecosystemSupply tokens) have been released.About 4 years,that will be release all. \n', '    uint256 internal maxTranches = 16;       \n', '    bool internal isInitAirdropAndEarlyAlloc = false;\n', '\n', '\n', '    /**\n', '        @dev constructor\n', '        \n', '    */\n', '    function YOOBAToken(address _airdropAddress, address _ecosystemAddress, address _backupAddress, address _yoobaTeamAddress,address _earlyCommunityAddress)\n', '    StandardERC20Token("Yooba token", "YOO", 18) public\n', '     {\n', '        airdropAddress = _airdropAddress;\n', '        yoobaTeamAddress = _yoobaTeamAddress;\n', '        ecosystemAddress = _ecosystemAddress;\n', '        backupAddress = _backupAddress;\n', '        earlyCommunityAddress = _earlyCommunityAddress;\n', '        createTime = now;\n', '    }\n', '    \n', '    \n', '    /**\n', '        @dev \n', '        the tokens at the airdropAddress will be airdroped before 2018.12.31\n', '    */\n', '     function initAirdropAndEarlyAlloc()   public ownerOnly stoppable returns(bool success){\n', '         require(!isInitAirdropAndEarlyAlloc);\n', '         require(airdropAddress != 0x0 && earlyCommunityAddress != 0x0);\n', '         require((currentSupply + earlyCommunitySupply + airdropSupply) <= totalSupply);\n', '         balanceOf[earlyCommunityAddress] += earlyCommunitySupply; \n', '         currentSupply += earlyCommunitySupply;\n', '         Transfer(0x0, earlyCommunityAddress, earlyCommunitySupply);\n', '        balanceOf[airdropAddress] += airdropSupply;       \n', '        currentSupply += airdropSupply;\n', '        Transfer(0x0, airdropAddress, airdropSupply);\n', '        isInitAirdropAndEarlyAlloc = true;\n', '        return true;\n', '     }\n', '    \n', '\n', '\n', '    /**\n', '        @dev send tokens\n', '        throws on any error rather then return a false flag to minimize user errors\n', '        in addition to the standard checks, the function throws if transfers are disabled\n', '\n', '        @param _to      target address\n', '        @param _value   transfer amount\n', '\n', "        @return true if the transfer was successful, throws if it wasn't\n", '    */\n', '    function transfer(address _to, uint256 _value) public stoppable returns (bool success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '        @dev \n', '        throws on any error rather then return a false flag to minimize user errors\n', '        in addition to the standard checks, the function throws if transfers are disabled\n', '\n', '        @param _from    source address\n', '        @param _to      target address\n', '        @param _value   transfer amount\n', '\n', "        @return true if the transfer was successful, throws if it wasn't\n", '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public stoppable returns (bool success) {\n', '            return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '\n', '    /**\n', '        @dev Release one  tranche of the ecosystemSupply allocation to Yooba team,6.25% every tranche.About 4 years ecosystemSupply release over.\n', '       \n', '        @return true if successful, throws if not\n', '    */\n', '    function releaseForEcosystem()   public ownerOnly stoppable returns(bool success) {\n', '        require(now >= createTime + 12 weeks);\n', '        require(tokensReleasedToEcosystem < ecosystemSupply);\n', '\n', '        uint256 temp = ecosystemSupply / 10000;\n', '        uint256 allocAmount = safeMul(temp, 625);\n', '        uint256 currentTranche = uint256(now - createTime) /  12 weeks;\n', '\n', '        if(ecosystemTranchesReleased < maxTranches && currentTranche > ecosystemTranchesReleased && (currentSupply + allocAmount) <= totalSupply) {\n', '            ecosystemTranchesReleased++;\n', '            balanceOf[ecosystemAddress] = safeAdd(balanceOf[ecosystemAddress], allocAmount);\n', '            currentSupply += allocAmount;\n', '            tokensReleasedToEcosystem = safeAdd(tokensReleasedToEcosystem, allocAmount);\n', '            Transfer(0x0, ecosystemAddress, allocAmount);\n', '            return true;\n', '        }\n', '        revert();\n', '    }\n', '    \n', '       /**\n', '        @dev Release one  tranche of the teamSupply allocation to Yooba team,6.25% every tranche.About 4 years Yooba team will get teamSupply Tokens.\n', '       \n', '        @return true if successful, throws if not\n', '    */\n', '    function releaseForYoobaTeam()   public ownerOnly stoppable returns(bool success) {\n', '        require(now >= createTime + 12 weeks);\n', '        require(tokensReleasedToTeam < teamSupply);\n', '\n', '        uint256 temp = teamSupply / 10000;\n', '        uint256 allocAmount = safeMul(temp, 625);\n', '        uint256 currentTranche = uint256(now - createTime) / 12 weeks;\n', '\n', '        if(teamTranchesReleased < maxTranches && currentTranche > teamTranchesReleased && (currentSupply + allocAmount) <= totalSupply) {\n', '            teamTranchesReleased++;\n', '            balanceOf[yoobaTeamAddress] = safeAdd(balanceOf[yoobaTeamAddress], allocAmount);\n', '            currentSupply += allocAmount;\n', '            tokensReleasedToTeam = safeAdd(tokensReleasedToTeam, allocAmount);\n', '            Transfer(0x0, yoobaTeamAddress, allocAmount);\n', '            return true;\n', '        }\n', '        revert();\n', '    }\n', '\n', '  \n', '    \n', '        /**\n', '        @dev release ico Tokens \n', '\n', '        @return true if successful, throws if not\n', '    */\n', '    function releaseForIco(address _icoAddress, uint256 _value) public  ownerOnly stoppable returns(bool success) {\n', '          require(_icoAddress != address(0x0) && _value > 0  && (tokensReleasedToIco + _value) <= icoReservedSupply && (currentSupply + _value) <= totalSupply);\n', '          balanceOf[_icoAddress] = safeAdd(balanceOf[_icoAddress], _value);\n', '          currentSupply += _value;\n', '          tokensReleasedToIco += _value;\n', '          Transfer(0x0, _icoAddress, _value);\n', '         return true;\n', '    }\n', '\n', '        /**\n', '        @dev release  earlyInvestor Tokens \n', '\n', '        @return true if successful, throws if not\n', '    */\n', '    function releaseForEarlyInvestor(address _investorAddress, uint256 _value) public  ownerOnly  stoppable  returns(bool success) {\n', '          require(_investorAddress != address(0x0) && _value > 0  && (tokensReleasedToEarlyInvestor + _value) <= earlyInvestorSupply && (currentSupply + _value) <= totalSupply);\n', '          balanceOf[_investorAddress] = safeAdd(balanceOf[_investorAddress], _value);\n', '          currentSupply += _value;\n', '          tokensReleasedToEarlyInvestor += _value;\n', '          Transfer(0x0, _investorAddress, _value);\n', '         return true;\n', '    }\n', '    /**\n', '     @dev  This only run for urgent situation.Or Yooba mainnet is run well and all tokens release over. \n', '\n', '        @return true if successful, throws if not\n', '    */\n', '    function processWhenStop() public  ownerOnly   returns(bool success) {\n', '        require(currentSupply <=  totalSupply && stopped);\n', '        balanceOf[backupAddress] += (totalSupply - currentSupply);\n', '        currentSupply = totalSupply;\n', '       Transfer(0x0, backupAddress, (totalSupply - currentSupply));\n', '        return true;\n', '    }\n', '    \n', '\n', '}']
