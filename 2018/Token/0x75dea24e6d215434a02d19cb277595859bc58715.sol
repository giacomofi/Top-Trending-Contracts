['pragma solidity ^0.4.19;\n', '\n', '\n', 'contract OwnableToken {\n', '    mapping (address => bool) owners;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event OwnershipExtended(address indexed host, address indexed guest);\n', '\n', '    modifier onlyOwner() {\n', '        require(owners[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function OwnableToken() public {\n', '        owners[msg.sender] = true;\n', '    }\n', '\n', '    function addOwner(address guest) public onlyOwner {\n', '        require(guest != address(0));\n', '        owners[guest] = true;\n', '        emit OwnershipExtended(msg.sender, guest);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        owners[newOwner] = true;\n', '        delete owners[msg.sender];\n', '        emit OwnershipTransferred(msg.sender, newOwner);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/ABL.sol\n', '\n', 'contract ABL is StandardToken, OwnableToken {\n', '    using SafeMath for uint256;\n', '\n', '    // Token Distribution Rate\n', '    uint256 public constant SUM = 400000000;   // totalSupply\n', '    uint256 public constant DISTRIBUTION = 221450000; // distribution\n', '    uint256 public constant DEVELOPERS = 178550000;   // developer\n', '\n', '    // Token Information\n', '    string public constant name = "Airbloc";\n', '    string public constant symbol = "ABL";\n', '    uint256 public constant decimals = 18;\n', '    uint256 public totalSupply = SUM.mul(10 ** uint256(decimals));\n', '\n', '    // token is non-transferable until owner calls unlock()\n', '    // (to prevent OTC before the token to be listed on exchanges)\n', '    bool isTransferable = false;\n', '\n', '    function ABL(\n', '        address _dtb,\n', '        address _dev\n', '        ) public {\n', '        require(_dtb != address(0));\n', '        require(_dev != address(0));\n', '        require(DISTRIBUTION + DEVELOPERS == SUM);\n', '\n', '        balances[_dtb] = DISTRIBUTION.mul(10 ** uint256(decimals));\n', '        emit Transfer(address(0), _dtb, balances[_dtb]);\n', '\n', '        balances[_dev] = DEVELOPERS.mul(10 ** uint256(decimals));\n', '        emit Transfer(address(0), _dev, balances[_dev]);\n', '    }\n', '\n', '    function unlock() external onlyOwner {\n', '        isTransferable = true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(isTransferable || owners[msg.sender]);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(isTransferable || owners[msg.sender]);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '//////////////////////\n', '//  mint and burn   //\n', '//////////////////////\n', '    function mint(\n', '        address _to,\n', '        uint256 _amount\n', '        ) onlyOwner public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_amount >= 0);\n', '\n', '        uint256 amount = _amount.mul(10 ** uint256(decimals));\n', '\n', '        totalSupply = totalSupply.add(amount);\n', '        balances[_to] = balances[_to].add(amount);\n', '\n', '        emit Mint(_to, amount);\n', '        emit Transfer(address(0), _to, amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function burn(\n', '        uint256 _amount\n', '        ) onlyOwner public {\n', '        require(_amount >= 0);\n', '        require(_amount <= balances[msg.sender]);\n', '\n', '        totalSupply = totalSupply.sub(_amount.mul(10 ** uint256(decimals)));\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount.mul(10 ** uint256(decimals)));\n', '\n', '        emit Burn(msg.sender, _amount.mul(10 ** uint256(decimals)));\n', '        emit Transfer(msg.sender, address(0), _amount.mul(10 ** uint256(decimals)));\n', '    }\n', '\n', '    event Mint(address indexed _to, uint256 _amount);\n', '    event Burn(address indexed _from, uint256 _amount);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Whitelist\n', ' * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n', ' * @dev This simplifies the implementation of "user permissions".\n', ' */\n', 'contract Whitelist is Ownable {\n', '  mapping(address => bool) public whitelist;\n', '\n', '  event WhitelistedAddressAdded(address addr);\n', '  event WhitelistedAddressRemoved(address addr);\n', '\n', '  /**\n', '   * @dev Throws if called by any account that&#39;s not whitelisted.\n', '   */\n', '  modifier onlyWhitelisted() {\n', '    require(whitelist[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param addr address\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '   */\n', '  function addAddressToWhitelist(address addr) onlyOwner public returns(bool success) {\n', '    if (!whitelist[addr]) {\n', '      whitelist[addr] = true;\n', '      WhitelistedAddressAdded(addr);\n', '      success = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev add addresses to the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was added to the whitelist,\n', '   * false if all addresses were already in the whitelist\n', '   */\n', '  function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      if (addAddressToWhitelist(addrs[i])) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param addr address\n', '   * @return true if the address was removed from the whitelist,\n', '   * false if the address wasn&#39;t in the whitelist in the first place\n', '   */\n', '  function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\n', '    if (whitelist[addr]) {\n', '      whitelist[addr] = false;\n', '      WhitelistedAddressRemoved(addr);\n', '      success = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove addresses from the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was removed from the whitelist,\n', '   * false if all addresses weren&#39;t in the whitelist in the first place\n', '   */\n', '  function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      if (removeAddressFromWhitelist(addrs[i])) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', 'contract PresaleFirst is Whitelist, Pausable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20;\n', '\n', '    uint256 public constant maxcap = 1500 ether;\n', '    uint256 public constant exceed = 300 ether;\n', '    uint256 public constant minimum = 0.5 ether;\n', '    uint256 public constant rate = 11500;\n', '\n', '    uint256 public startNumber;\n', '    uint256 public endNumber;\n', '    uint256 public weiRaised;\n', '    address public wallet;\n', '    ERC20 public token;\n', '\n', '    function PresaleFirst (\n', '        uint256 _startNumber,\n', '        uint256 _endNumber,\n', '        address _wallet,\n', '        address _token\n', '        ) public {\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '\n', '        startNumber = _startNumber;\n', '        endNumber = _endNumber;\n', '        wallet = _wallet;\n', '        token = ERC20(_token);\n', '        weiRaised = 0;\n', '    }\n', '\n', '//////////////////\n', '//  collect eth\n', '//////////////////\n', '\n', '    mapping (address => uint256) public buyers;\n', '    address[] private keys;\n', '\n', '    function () external payable {\n', '        collect(msg.sender);\n', '    }\n', '\n', '    function collect(address _buyer) public payable onlyWhitelisted whenNotPaused {\n', '        require(_buyer != address(0));\n', '        require(weiRaised <= maxcap);\n', '        require(preValidation());\n', '        require(buyers[_buyer] < exceed);\n', '\n', '        // get exist amount\n', '        if(buyers[_buyer] == 0) {\n', '            keys.push(_buyer);\n', '        }\n', '\n', '        uint256 purchase = getPurchaseAmount(_buyer);\n', '        uint256 refund = (msg.value).sub(purchase);\n', '\n', '        // refund\n', '        _buyer.transfer(refund);\n', '\n', '        // buy\n', '        uint256 tokenAmount = purchase.mul(rate);\n', '        weiRaised = weiRaised.add(purchase);\n', '\n', '        // wallet\n', '        buyers[_buyer] = buyers[_buyer].add(purchase);\n', '        emit BuyTokens(_buyer, purchase, tokenAmount);\n', '    }\n', '\n', '//////////////////\n', '//  validation functions for collect\n', '//////////////////\n', '\n', '    function preValidation() private constant returns (bool) {\n', '        // check minimum\n', '        bool a = msg.value >= minimum;\n', '\n', '        // sale duration\n', '        bool b = block.number >= startNumber && block.number <= endNumber;\n', '\n', '        return a && b;\n', '    }\n', '\n', '    function getPurchaseAmount(address _buyer) private constant returns (uint256) {\n', '        return checkOverMaxcap(checkOverExceed(_buyer));\n', '    }\n', '\n', '    // 1. check over exceed\n', '    function checkOverExceed(address _buyer) private constant returns (uint256) {\n', '        if(msg.value >= exceed) {\n', '            return exceed;\n', '        } else if(msg.value.add(buyers[_buyer]) >= exceed) {\n', '            return exceed.sub(buyers[_buyer]);\n', '        } else {\n', '            return msg.value;\n', '        }\n', '    }\n', '\n', '    // 2. check sale hardcap\n', '    function checkOverMaxcap(uint256 amount) private constant returns (uint256) {\n', '        if((amount + weiRaised) >= maxcap) {\n', '            return (maxcap.sub(weiRaised));\n', '        } else {\n', '            return amount;\n', '        }\n', '    }\n', '\n', '//////////////////\n', '//  release\n', '//////////////////\n', '    bool finalized = false;\n', '\n', '    function release() external onlyOwner {\n', '        require(!finalized);\n', '        require(weiRaised >= maxcap || block.number >= endNumber);\n', '\n', '        wallet.transfer(address(this).balance);\n', '\n', '        for(uint256 i = 0; i < keys.length; i++) {\n', '            token.safeTransfer(keys[i], buyers[keys[i]].mul(rate));\n', '            emit Release(keys[i], buyers[keys[i]].mul(rate));\n', '        }\n', '\n', '        withdraw();\n', '\n', '        finalized = true;\n', '    }\n', '\n', '    function refund() external onlyOwner {\n', '        require(!finalized);\n', '        pause();\n', '\n', '        withdraw();\n', '\n', '        for(uint256 i = 0; i < keys.length; i++) {\n', '            keys[i].transfer(buyers[keys[i]]);\n', '            emit Refund(keys[i], buyers[keys[i]]);\n', '        }\n', '\n', '        finalized = true;\n', '    }\n', '\n', '    function withdraw() public onlyOwner {\n', '        token.safeTransfer(wallet, token.balanceOf(this));\n', '        emit Withdraw(wallet, token.balanceOf(this));\n', '    }\n', '\n', '//////////////////\n', '//  events\n', '//////////////////\n', '\n', '    event Release(address indexed _to, uint256 _amount);\n', '    event Withdraw(address indexed _from, uint256 _amount);\n', '    event Refund(address indexed _to, uint256 _amount);\n', '    event BuyTokens(address indexed buyer, uint256 price, uint256 tokens);\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '\n', 'contract OwnableToken {\n', '    mapping (address => bool) owners;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event OwnershipExtended(address indexed host, address indexed guest);\n', '\n', '    modifier onlyOwner() {\n', '        require(owners[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function OwnableToken() public {\n', '        owners[msg.sender] = true;\n', '    }\n', '\n', '    function addOwner(address guest) public onlyOwner {\n', '        require(guest != address(0));\n', '        owners[guest] = true;\n', '        emit OwnershipExtended(msg.sender, guest);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        owners[newOwner] = true;\n', '        delete owners[msg.sender];\n', '        emit OwnershipTransferred(msg.sender, newOwner);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/ABL.sol\n', '\n', 'contract ABL is StandardToken, OwnableToken {\n', '    using SafeMath for uint256;\n', '\n', '    // Token Distribution Rate\n', '    uint256 public constant SUM = 400000000;   // totalSupply\n', '    uint256 public constant DISTRIBUTION = 221450000; // distribution\n', '    uint256 public constant DEVELOPERS = 178550000;   // developer\n', '\n', '    // Token Information\n', '    string public constant name = "Airbloc";\n', '    string public constant symbol = "ABL";\n', '    uint256 public constant decimals = 18;\n', '    uint256 public totalSupply = SUM.mul(10 ** uint256(decimals));\n', '\n', '    // token is non-transferable until owner calls unlock()\n', '    // (to prevent OTC before the token to be listed on exchanges)\n', '    bool isTransferable = false;\n', '\n', '    function ABL(\n', '        address _dtb,\n', '        address _dev\n', '        ) public {\n', '        require(_dtb != address(0));\n', '        require(_dev != address(0));\n', '        require(DISTRIBUTION + DEVELOPERS == SUM);\n', '\n', '        balances[_dtb] = DISTRIBUTION.mul(10 ** uint256(decimals));\n', '        emit Transfer(address(0), _dtb, balances[_dtb]);\n', '\n', '        balances[_dev] = DEVELOPERS.mul(10 ** uint256(decimals));\n', '        emit Transfer(address(0), _dev, balances[_dev]);\n', '    }\n', '\n', '    function unlock() external onlyOwner {\n', '        isTransferable = true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(isTransferable || owners[msg.sender]);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(isTransferable || owners[msg.sender]);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '//////////////////////\n', '//  mint and burn   //\n', '//////////////////////\n', '    function mint(\n', '        address _to,\n', '        uint256 _amount\n', '        ) onlyOwner public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_amount >= 0);\n', '\n', '        uint256 amount = _amount.mul(10 ** uint256(decimals));\n', '\n', '        totalSupply = totalSupply.add(amount);\n', '        balances[_to] = balances[_to].add(amount);\n', '\n', '        emit Mint(_to, amount);\n', '        emit Transfer(address(0), _to, amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function burn(\n', '        uint256 _amount\n', '        ) onlyOwner public {\n', '        require(_amount >= 0);\n', '        require(_amount <= balances[msg.sender]);\n', '\n', '        totalSupply = totalSupply.sub(_amount.mul(10 ** uint256(decimals)));\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount.mul(10 ** uint256(decimals)));\n', '\n', '        emit Burn(msg.sender, _amount.mul(10 ** uint256(decimals)));\n', '        emit Transfer(msg.sender, address(0), _amount.mul(10 ** uint256(decimals)));\n', '    }\n', '\n', '    event Mint(address indexed _to, uint256 _amount);\n', '    event Burn(address indexed _from, uint256 _amount);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Whitelist\n', ' * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n', ' * @dev This simplifies the implementation of "user permissions".\n', ' */\n', 'contract Whitelist is Ownable {\n', '  mapping(address => bool) public whitelist;\n', '\n', '  event WhitelistedAddressAdded(address addr);\n', '  event WhitelistedAddressRemoved(address addr);\n', '\n', '  /**\n', "   * @dev Throws if called by any account that's not whitelisted.\n", '   */\n', '  modifier onlyWhitelisted() {\n', '    require(whitelist[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param addr address\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '   */\n', '  function addAddressToWhitelist(address addr) onlyOwner public returns(bool success) {\n', '    if (!whitelist[addr]) {\n', '      whitelist[addr] = true;\n', '      WhitelistedAddressAdded(addr);\n', '      success = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev add addresses to the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was added to the whitelist,\n', '   * false if all addresses were already in the whitelist\n', '   */\n', '  function addAddressesToWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      if (addAddressToWhitelist(addrs[i])) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param addr address\n', '   * @return true if the address was removed from the whitelist,\n', "   * false if the address wasn't in the whitelist in the first place\n", '   */\n', '  function removeAddressFromWhitelist(address addr) onlyOwner public returns(bool success) {\n', '    if (whitelist[addr]) {\n', '      whitelist[addr] = false;\n', '      WhitelistedAddressRemoved(addr);\n', '      success = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove addresses from the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was removed from the whitelist,\n', "   * false if all addresses weren't in the whitelist in the first place\n", '   */\n', '  function removeAddressesFromWhitelist(address[] addrs) onlyOwner public returns(bool success) {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      if (removeAddressFromWhitelist(addrs[i])) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', 'contract PresaleFirst is Whitelist, Pausable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20;\n', '\n', '    uint256 public constant maxcap = 1500 ether;\n', '    uint256 public constant exceed = 300 ether;\n', '    uint256 public constant minimum = 0.5 ether;\n', '    uint256 public constant rate = 11500;\n', '\n', '    uint256 public startNumber;\n', '    uint256 public endNumber;\n', '    uint256 public weiRaised;\n', '    address public wallet;\n', '    ERC20 public token;\n', '\n', '    function PresaleFirst (\n', '        uint256 _startNumber,\n', '        uint256 _endNumber,\n', '        address _wallet,\n', '        address _token\n', '        ) public {\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '\n', '        startNumber = _startNumber;\n', '        endNumber = _endNumber;\n', '        wallet = _wallet;\n', '        token = ERC20(_token);\n', '        weiRaised = 0;\n', '    }\n', '\n', '//////////////////\n', '//  collect eth\n', '//////////////////\n', '\n', '    mapping (address => uint256) public buyers;\n', '    address[] private keys;\n', '\n', '    function () external payable {\n', '        collect(msg.sender);\n', '    }\n', '\n', '    function collect(address _buyer) public payable onlyWhitelisted whenNotPaused {\n', '        require(_buyer != address(0));\n', '        require(weiRaised <= maxcap);\n', '        require(preValidation());\n', '        require(buyers[_buyer] < exceed);\n', '\n', '        // get exist amount\n', '        if(buyers[_buyer] == 0) {\n', '            keys.push(_buyer);\n', '        }\n', '\n', '        uint256 purchase = getPurchaseAmount(_buyer);\n', '        uint256 refund = (msg.value).sub(purchase);\n', '\n', '        // refund\n', '        _buyer.transfer(refund);\n', '\n', '        // buy\n', '        uint256 tokenAmount = purchase.mul(rate);\n', '        weiRaised = weiRaised.add(purchase);\n', '\n', '        // wallet\n', '        buyers[_buyer] = buyers[_buyer].add(purchase);\n', '        emit BuyTokens(_buyer, purchase, tokenAmount);\n', '    }\n', '\n', '//////////////////\n', '//  validation functions for collect\n', '//////////////////\n', '\n', '    function preValidation() private constant returns (bool) {\n', '        // check minimum\n', '        bool a = msg.value >= minimum;\n', '\n', '        // sale duration\n', '        bool b = block.number >= startNumber && block.number <= endNumber;\n', '\n', '        return a && b;\n', '    }\n', '\n', '    function getPurchaseAmount(address _buyer) private constant returns (uint256) {\n', '        return checkOverMaxcap(checkOverExceed(_buyer));\n', '    }\n', '\n', '    // 1. check over exceed\n', '    function checkOverExceed(address _buyer) private constant returns (uint256) {\n', '        if(msg.value >= exceed) {\n', '            return exceed;\n', '        } else if(msg.value.add(buyers[_buyer]) >= exceed) {\n', '            return exceed.sub(buyers[_buyer]);\n', '        } else {\n', '            return msg.value;\n', '        }\n', '    }\n', '\n', '    // 2. check sale hardcap\n', '    function checkOverMaxcap(uint256 amount) private constant returns (uint256) {\n', '        if((amount + weiRaised) >= maxcap) {\n', '            return (maxcap.sub(weiRaised));\n', '        } else {\n', '            return amount;\n', '        }\n', '    }\n', '\n', '//////////////////\n', '//  release\n', '//////////////////\n', '    bool finalized = false;\n', '\n', '    function release() external onlyOwner {\n', '        require(!finalized);\n', '        require(weiRaised >= maxcap || block.number >= endNumber);\n', '\n', '        wallet.transfer(address(this).balance);\n', '\n', '        for(uint256 i = 0; i < keys.length; i++) {\n', '            token.safeTransfer(keys[i], buyers[keys[i]].mul(rate));\n', '            emit Release(keys[i], buyers[keys[i]].mul(rate));\n', '        }\n', '\n', '        withdraw();\n', '\n', '        finalized = true;\n', '    }\n', '\n', '    function refund() external onlyOwner {\n', '        require(!finalized);\n', '        pause();\n', '\n', '        withdraw();\n', '\n', '        for(uint256 i = 0; i < keys.length; i++) {\n', '            keys[i].transfer(buyers[keys[i]]);\n', '            emit Refund(keys[i], buyers[keys[i]]);\n', '        }\n', '\n', '        finalized = true;\n', '    }\n', '\n', '    function withdraw() public onlyOwner {\n', '        token.safeTransfer(wallet, token.balanceOf(this));\n', '        emit Withdraw(wallet, token.balanceOf(this));\n', '    }\n', '\n', '//////////////////\n', '//  events\n', '//////////////////\n', '\n', '    event Release(address indexed _to, uint256 _amount);\n', '    event Withdraw(address indexed _from, uint256 _amount);\n', '    event Refund(address indexed _to, uint256 _amount);\n', '    event BuyTokens(address indexed buyer, uint256 price, uint256 tokens);\n', '}']
