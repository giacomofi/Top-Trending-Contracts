['pragma solidity ^0.4.16;\n', '\n', 'contract Owned {\n', '\taddress public owner;\n', '\taddress public signer;\n', '\n', '    function Owned() public {\n', '    \towner = msg.sender;\n', '    \tsigner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '    \trequire(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\tmodifier onlySigner {\n', '    \trequire(msg.sender == signer);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '    \towner = newOwner;\n', '\t}\n', '\n', '\tfunction transferSignership(address newSigner) public onlyOwner {\n', '        signer = newSigner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Token {\n', '\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balances;\n', '\n', '\t// Mapping for allowance\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed sender, address indexed spender, uint256 value);\n', '\n', '\tfunction ERC20Token(uint256 _supply, string _name, string _symbol)\n', '\t\tpublic\n', '\t{\n', '\t\t//initial mint\n', '        totalSupply = _supply * 10**uint256(decimals);\n', '        balances[msg.sender] = totalSupply;\n', '\n', '\t\t//set variables\n', '\t\tname=_name;\n', '\t\tsymbol=_symbol;\n', '\n', '    \t//trigger event\n', '        Transfer(0x0, msg.sender, totalSupply);\n', '\t}\n', '\n', '\t/**\n', '\t * Returns current tokens total supply\n', '\t */\n', '    function totalSupply()\n', '    \tpublic\n', '    \tconstant\n', '    \treturns (uint256)\n', '    {\n', '\t\treturn totalSupply;\n', '    }\n', '\n', '\t/**\n', '     * Get the token balance for account `tokenOwner`\n', '     */\n', '    function balanceOf(address _owner)\n', '    \tpublic\n', '    \tconstant\n', '    \treturns (uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '\t/**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value)\n', '    \tpublic\n', '    \treturns (bool success)\n', '    {\n', '\t\t// To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t\trequire((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '      \t//set allowance\n', '      \tallowed[msg.sender][_spender] = _value;\n', '\n', '\t\t//trigger event\n', '      \tApproval(msg.sender, _spender, _value);\n', '\n', '\t\treturn true;\n', '    }\n', '\n', '    /**\n', '     * Show allowance\n', '     */\n', '    function allowance(address _owner, address _spender)\n', '    \tpublic\n', '    \tconstant\n', '    \treturns (uint256 remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\t/**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint256 _value)\n', '    \tinternal\n', '    \treturns (bool success)\n', '    {\n', '\t\t// Do not allow transfer to 0x0 or the token contract itself or from address to itself\n', '\t\trequire((_to != address(0)) && (_to != address(this)) && (_to != _from));\n', '\n', '        // Check if the sender has enough\n', '        require((_value > 0) && (balances[_from] >= _value));\n', '\n', '        // Check for overflows\n', '        require(balances[_to] + _value > balances[_to]);\n', '\n', '        // Subtract from the sender\n', '        balances[_from] -= _value;\n', '\n', '        // Add the same to the recipient\n', '        balances[_to] += _value;\n', '\n', '        Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '\t/**\n', '      * Transfer tokens\n', '      *\n', '      * Send `_value` tokens to `_to` from your account\n', '      *\n', '      * @param _to The address of the recipient\n', '      * @param _value the amount to send\n', '      */\n', '    function transfer(address _to, uint256 _value)\n', '    \tpublic\n', '    \treturns (bool success)\n', '    {\n', '    \treturn _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '  \t/**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    \tpublic\n', '    \treturns (bool success)\n', '    {\n', '\t\t// Check allowance\n', '    \trequire(_value <= allowed[_from][msg.sender]);\n', '\n', '\t\t//decrement allowance\n', '\t\tallowed[_from][msg.sender] -= _value;\n', '\n', '    \t//transfer tokens\n', '        return _transfer(_from, _to, _value);\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract MiracleTeleToken is ERC20Token, Owned {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // Mapping for allowance\n', '    mapping (address => uint8) public delegations;\n', '\n', '\tmapping (address => uint256) public contributions;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Delegate(address indexed from, address indexed to);\n', '    event UnDelegate(address indexed from, address indexed to);\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Contribute(address indexed from, uint256 indexed value);\n', '    event Reward(address indexed from, uint256 indexed value);\n', '\n', '    /**\n', '\t * Initializes contract with initial supply tokens to the creator of the contract\n', '\t */\n', '    function MiracleTeleToken(uint256 _supply) ERC20Token(_supply, "MiracleTele", "TELE") public {}\n', '\n', '\t/**\n', '\t * Mint new tokens\n', '\t *\n', '\t * @param _value the amount of new tokens\n', '\t */\n', '    function mint(uint256 _value)\n', '        public\n', '        onlyOwner\n', '    {\n', '    \t// Prevent mine 0 tokens\n', '        require(_value > 0);\n', '\n', '    \t// Check overflow\n', '    \tbalances[owner] = balances[owner].add(_value);\n', '        totalSupply = totalSupply.add(_value);\n', '\n', '        Transfer(address(0), owner, _value);\n', '    }\n', '\n', '    function delegate(uint8 _v, bytes32 _r, bytes32 _s)\n', '        public\n', '        onlySigner\n', '    {\n', '\t\taddress allowes = ecrecover(getPrefixedHash(signer), _v, _r, _s);\n', '\n', '        delegations[allowes]=1;\n', '\n', '        Delegate(allowes, signer);\n', '    }\n', '\n', '\tfunction unDelegate(uint8 _v, bytes32 _r, bytes32 _s)\n', '        public\n', '        onlySigner\n', '    {\n', '    \taddress allowes = ecrecover(getPrefixedHash(signer), _v, _r, _s);\n', '\n', '        delegations[allowes]=0;\n', '\n', '        UnDelegate(allowes, signer);\n', '    }\n', '\n', '\t/**\n', '     * Show delegation\n', '     */\n', '    function delegation(address _owner)\n', '    \tpublic\n', '    \tconstant\n', '    \treturns (uint8 status)\n', '    {\n', '        return delegations[_owner];\n', '    }\n', '\n', '    /**\n', '     * @notice Hash a hash with `"\\x19Ethereum Signed Message:\\n32"`\n', '     * @param _message Data to ign\n', '     * @return signHash Hash to be signed.\n', '     */\n', '    function getPrefixedHash(address _message)\n', '        pure\n', '        public\n', '        returns(bytes32 signHash)\n', '    {\n', '        signHash = keccak256("\\x19Ethereum Signed Message:\\n20", _message);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferDelegated(address _from, address _to, uint256 _value)\n', '        public\n', '        onlySigner\n', '        returns (bool success)\n', '    {\n', '        // Check delegate\n', '    \trequire(delegations[_from]==1);\n', '\n', '    \t//transfer tokens\n', '        return _transfer(_from, _to, _value);\n', '    }\n', '\n', '\t/**\n', '      * Contribute tokens from delegated address\n', '      *\n', '      * Contribute `_value` tokens `_from` address\n', '      *\n', '      * @param _from The address of the sender\n', '\t  * @param _value the amount to send\n', '      */\n', '    function contributeDelegated(address _from, uint256 _value)\n', '        public\n', '        onlySigner\n', '    {\n', '        // Check delegate\n', '    \trequire(delegations[_from]==1);\n', '\n', '        // Check if the sender has enough\n', '        require((_value > 0) && (balances[_from] >= _value));\n', '\n', '        // Subtract from the sender\n', '        balances[_from] = balances[_from].sub(_value);\n', '\n', '        contributions[_from] = contributions[_from].add(_value);\n', '\n', '        Contribute(_from, _value);\n', '    }\n', '\n', '\t/**\n', '      * Reward tokens from delegated address\n', '      *\n', '      * Reward `_value` tokens to `_from` address\n', '      *\n', '      * @param _from The address of the sender\n', '\t  * @param _value the amount to send\n', '      */\n', '    function reward(address _from, uint256 _value)\n', '        public\n', '        onlySigner\n', '    {\n', '        require(contributions[_from]>=_value);\n', '\n', '        contributions[_from] = contributions[_from].sub(_value);\n', '\n', '        balances[_from] = balances[_from].add(_value);\n', '\n', '        Reward(_from, _value);\n', '    }\n', '\n', '    /**\n', '     * Don&#39;t accept ETH, it is utility token\n', '     */\n', '\tfunction ()\n', '\t    public\n', '\t    payable\n', '\t{\n', '\t\trevert();\n', '\t}\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'contract Owned {\n', '\taddress public owner;\n', '\taddress public signer;\n', '\n', '    function Owned() public {\n', '    \towner = msg.sender;\n', '    \tsigner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '    \trequire(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\tmodifier onlySigner {\n', '    \trequire(msg.sender == signer);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '    \towner = newOwner;\n', '\t}\n', '\n', '\tfunction transferSignership(address newSigner) public onlyOwner {\n', '        signer = newSigner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Token {\n', '\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balances;\n', '\n', '\t// Mapping for allowance\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed sender, address indexed spender, uint256 value);\n', '\n', '\tfunction ERC20Token(uint256 _supply, string _name, string _symbol)\n', '\t\tpublic\n', '\t{\n', '\t\t//initial mint\n', '        totalSupply = _supply * 10**uint256(decimals);\n', '        balances[msg.sender] = totalSupply;\n', '\n', '\t\t//set variables\n', '\t\tname=_name;\n', '\t\tsymbol=_symbol;\n', '\n', '    \t//trigger event\n', '        Transfer(0x0, msg.sender, totalSupply);\n', '\t}\n', '\n', '\t/**\n', '\t * Returns current tokens total supply\n', '\t */\n', '    function totalSupply()\n', '    \tpublic\n', '    \tconstant\n', '    \treturns (uint256)\n', '    {\n', '\t\treturn totalSupply;\n', '    }\n', '\n', '\t/**\n', '     * Get the token balance for account `tokenOwner`\n', '     */\n', '    function balanceOf(address _owner)\n', '    \tpublic\n', '    \tconstant\n', '    \treturns (uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '\t/**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value)\n', '    \tpublic\n', '    \treturns (bool success)\n', '    {\n', '\t\t// To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t\trequire((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '      \t//set allowance\n', '      \tallowed[msg.sender][_spender] = _value;\n', '\n', '\t\t//trigger event\n', '      \tApproval(msg.sender, _spender, _value);\n', '\n', '\t\treturn true;\n', '    }\n', '\n', '    /**\n', '     * Show allowance\n', '     */\n', '    function allowance(address _owner, address _spender)\n', '    \tpublic\n', '    \tconstant\n', '    \treturns (uint256 remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\t/**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint256 _value)\n', '    \tinternal\n', '    \treturns (bool success)\n', '    {\n', '\t\t// Do not allow transfer to 0x0 or the token contract itself or from address to itself\n', '\t\trequire((_to != address(0)) && (_to != address(this)) && (_to != _from));\n', '\n', '        // Check if the sender has enough\n', '        require((_value > 0) && (balances[_from] >= _value));\n', '\n', '        // Check for overflows\n', '        require(balances[_to] + _value > balances[_to]);\n', '\n', '        // Subtract from the sender\n', '        balances[_from] -= _value;\n', '\n', '        // Add the same to the recipient\n', '        balances[_to] += _value;\n', '\n', '        Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '\t/**\n', '      * Transfer tokens\n', '      *\n', '      * Send `_value` tokens to `_to` from your account\n', '      *\n', '      * @param _to The address of the recipient\n', '      * @param _value the amount to send\n', '      */\n', '    function transfer(address _to, uint256 _value)\n', '    \tpublic\n', '    \treturns (bool success)\n', '    {\n', '    \treturn _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '  \t/**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    \tpublic\n', '    \treturns (bool success)\n', '    {\n', '\t\t// Check allowance\n', '    \trequire(_value <= allowed[_from][msg.sender]);\n', '\n', '\t\t//decrement allowance\n', '\t\tallowed[_from][msg.sender] -= _value;\n', '\n', '    \t//transfer tokens\n', '        return _transfer(_from, _to, _value);\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract MiracleTeleToken is ERC20Token, Owned {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // Mapping for allowance\n', '    mapping (address => uint8) public delegations;\n', '\n', '\tmapping (address => uint256) public contributions;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Delegate(address indexed from, address indexed to);\n', '    event UnDelegate(address indexed from, address indexed to);\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Contribute(address indexed from, uint256 indexed value);\n', '    event Reward(address indexed from, uint256 indexed value);\n', '\n', '    /**\n', '\t * Initializes contract with initial supply tokens to the creator of the contract\n', '\t */\n', '    function MiracleTeleToken(uint256 _supply) ERC20Token(_supply, "MiracleTele", "TELE") public {}\n', '\n', '\t/**\n', '\t * Mint new tokens\n', '\t *\n', '\t * @param _value the amount of new tokens\n', '\t */\n', '    function mint(uint256 _value)\n', '        public\n', '        onlyOwner\n', '    {\n', '    \t// Prevent mine 0 tokens\n', '        require(_value > 0);\n', '\n', '    \t// Check overflow\n', '    \tbalances[owner] = balances[owner].add(_value);\n', '        totalSupply = totalSupply.add(_value);\n', '\n', '        Transfer(address(0), owner, _value);\n', '    }\n', '\n', '    function delegate(uint8 _v, bytes32 _r, bytes32 _s)\n', '        public\n', '        onlySigner\n', '    {\n', '\t\taddress allowes = ecrecover(getPrefixedHash(signer), _v, _r, _s);\n', '\n', '        delegations[allowes]=1;\n', '\n', '        Delegate(allowes, signer);\n', '    }\n', '\n', '\tfunction unDelegate(uint8 _v, bytes32 _r, bytes32 _s)\n', '        public\n', '        onlySigner\n', '    {\n', '    \taddress allowes = ecrecover(getPrefixedHash(signer), _v, _r, _s);\n', '\n', '        delegations[allowes]=0;\n', '\n', '        UnDelegate(allowes, signer);\n', '    }\n', '\n', '\t/**\n', '     * Show delegation\n', '     */\n', '    function delegation(address _owner)\n', '    \tpublic\n', '    \tconstant\n', '    \treturns (uint8 status)\n', '    {\n', '        return delegations[_owner];\n', '    }\n', '\n', '    /**\n', '     * @notice Hash a hash with `"\\x19Ethereum Signed Message:\\n32"`\n', '     * @param _message Data to ign\n', '     * @return signHash Hash to be signed.\n', '     */\n', '    function getPrefixedHash(address _message)\n', '        pure\n', '        public\n', '        returns(bytes32 signHash)\n', '    {\n', '        signHash = keccak256("\\x19Ethereum Signed Message:\\n20", _message);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferDelegated(address _from, address _to, uint256 _value)\n', '        public\n', '        onlySigner\n', '        returns (bool success)\n', '    {\n', '        // Check delegate\n', '    \trequire(delegations[_from]==1);\n', '\n', '    \t//transfer tokens\n', '        return _transfer(_from, _to, _value);\n', '    }\n', '\n', '\t/**\n', '      * Contribute tokens from delegated address\n', '      *\n', '      * Contribute `_value` tokens `_from` address\n', '      *\n', '      * @param _from The address of the sender\n', '\t  * @param _value the amount to send\n', '      */\n', '    function contributeDelegated(address _from, uint256 _value)\n', '        public\n', '        onlySigner\n', '    {\n', '        // Check delegate\n', '    \trequire(delegations[_from]==1);\n', '\n', '        // Check if the sender has enough\n', '        require((_value > 0) && (balances[_from] >= _value));\n', '\n', '        // Subtract from the sender\n', '        balances[_from] = balances[_from].sub(_value);\n', '\n', '        contributions[_from] = contributions[_from].add(_value);\n', '\n', '        Contribute(_from, _value);\n', '    }\n', '\n', '\t/**\n', '      * Reward tokens from delegated address\n', '      *\n', '      * Reward `_value` tokens to `_from` address\n', '      *\n', '      * @param _from The address of the sender\n', '\t  * @param _value the amount to send\n', '      */\n', '    function reward(address _from, uint256 _value)\n', '        public\n', '        onlySigner\n', '    {\n', '        require(contributions[_from]>=_value);\n', '\n', '        contributions[_from] = contributions[_from].sub(_value);\n', '\n', '        balances[_from] = balances[_from].add(_value);\n', '\n', '        Reward(_from, _value);\n', '    }\n', '\n', '    /**\n', "     * Don't accept ETH, it is utility token\n", '     */\n', '\tfunction ()\n', '\t    public\n', '\t    payable\n', '\t{\n', '\t\trevert();\n', '\t}\n', '}']
