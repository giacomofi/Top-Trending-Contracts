['pragma solidity ^0.4.0;\n', '\n', 'contract ContractTokens {\n', '    function balanceOf(address _owner) public constant returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function approve(address _spender, uint256 _value) returns (bool success) {}\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '}\n', '\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', 'contract TesterFinal is ERC20 {\n', '    \n', '    address owner = msg.sender;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    uint256 public totalSupply = 1000000000 * 10**8;\n', '\n', '    function name() public constant returns (string) {\n', '        return "TesterFinal"; \n', '    }\n', '    function symbol() public constant returns (string) { \n', '        return "TFL"; \n', '    }\n', '    function decimals() public constant returns (uint8) { \n', '        return 8; \n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function TAKLIMAKAN() public {\n', '        owner = msg.sender;\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', '    modifier onlyOwner { \n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function airdropTesterFinal(address[] addresses, uint256 _value) onlyOwner public {\n', '         for (uint i = 0; i < addresses.length; i++) {\n', '             balances[owner] -= _value;\n', '             balances[addresses[i]] += _value;\n', '             emit Transfer(owner, addresses[i], _value);\n', '         }\n', '    }\n', '    \n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '\t return balances[_owner];\n', '    }\n', '\n', '    modifier limitCertainAmount(uint amount) {\n', '        assert(msg.data.length >= amount + 4);\n', '        _;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _amount) limitCertainAmount(2 * 32) public returns (bool success) {\n', '\n', '         if (balances[msg.sender] >= _amount\n', '             && _amount > 0\n', '             && balances[_to] + _amount > balances[_to]) {\n', '             balances[msg.sender] -= _amount;\n', '             balances[_to] += _amount;\n', '             Transfer(msg.sender, _to, _amount);\n', '             return true;\n', '         } else {\n', '             return false;\n', '         }\n', '    }\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '        \n', '        allowed[msg.sender][_spender] = _value;\n', '        \n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant public returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\n', '    function claimContractTokens(address _tokenContract) public returns (bool) {\n', '        require(msg.sender == owner);\n', '        ContractTokens token = ContractTokens(_tokenContract);\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(owner, amount);\n', '    }\n', '\n', '\n', '}']