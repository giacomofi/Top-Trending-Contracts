['pragma solidity ^0.4.24;\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Ownable contract\n', '// ----------------------------------------------------------------------------\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  event OwnershipTransferPending(address indexed owner, address indexed pendingOwner);\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferPending(owner, pendingOwner);\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    emit OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Pausable contract\n', '// ----------------------------------------------------------------------------\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Claimable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Callable\n', ' * @dev Extension for the Claimable contract.\n', ' * This allows the contract only be called by certain contract.\n', ' */\n', 'contract Callable is Claimable {\n', '  mapping(address => bool) public callers;\n', '\n', '  event CallerAddressAdded(address indexed addr);\n', '  event CallerAddressRemoved(address indexed addr);\n', '\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the callers or owner.\n', '   */\n', '  modifier onlyCaller() {\n', '    require(callers[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the caller list\n', '   * @param addr address\n', '   * @return true if the address was added to the caller list, false if the address was already in the caller list\n', '   */\n', '  function addAddressToCaller(address addr) onlyOwner public returns(bool success) {\n', '    if (!callers[addr]) {\n', '      callers[addr] = true;\n', '      emit CallerAddressAdded(addr);\n', '      success = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the caller list\n', '   * @param addr address\n', '   * @return true if the address was removed from the caller list,\n', "   * false if the address wasn't in the caller list in the first place\n", '   */\n', '  function removeAddressFromCaller(address addr) onlyOwner public returns(bool success) {\n', '    if (callers[addr]) {\n', '      callers[addr] = false;\n', '      emit CallerAddressRemoved(addr);\n', '      success = true;\n', '    }\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Blacklist\n', '// ----------------------------------------------------------------------------\n', '/**\n', ' * @title Blacklist\n', ' * @dev The Blacklist contract has a blacklist of addresses, and provides basic authorization control functions.\n', ' */\n', 'contract Blacklist is Callable {\n', '  mapping(address => bool) public blacklist;\n', '\n', '  function addAddressToBlacklist(address addr) onlyCaller public returns (bool success) {\n', '    if (!blacklist[addr]) {\n', '      blacklist[addr] = true;\n', '      success = true;\n', '    }\n', '  }\n', '\n', '  function removeAddressFromBlacklist(address addr) onlyCaller public returns (bool success) {\n', '    if (blacklist[addr]) {\n', '      blacklist[addr] = false;\n', '      success = true;\n', '    }\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Verified\n', '// ----------------------------------------------------------------------------\n', '/**\n', ' * @title Verified\n', ' * @dev The Verified contract has a list of verified addresses.\n', ' */\n', 'contract Verified is Callable {\n', '  mapping(address => bool) public verifiedList;\n', '  bool public shouldVerify = true;\n', '\n', '  function verifyAddress(address addr) onlyCaller public returns (bool success) {\n', '    if (!verifiedList[addr]) {\n', '      verifiedList[addr] = true;\n', '      success = true;\n', '    }\n', '  }\n', '\n', '  function unverifyAddress(address addr) onlyCaller public returns (bool success) {\n', '    if (verifiedList[addr]) {\n', '      verifiedList[addr] = false;\n', '      success = true;\n', '    }\n', '  }\n', '\n', '  function setShouldVerify(bool value) onlyCaller public returns (bool success) {\n', '    shouldVerify = value;\n', '    return true;\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Allowance\n', '// ----------------------------------------------------------------------------\n', '/**\n', ' * @title Allowance\n', ' * @dev Storage for the Allowance List.\n', ' */\n', 'contract Allowance is Callable {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => mapping (address => uint256)) public allowanceOf;\n', '\n', '  function addAllowance(address _holder, address _spender, uint256 _value) onlyCaller public {\n', '    allowanceOf[_holder][_spender] = allowanceOf[_holder][_spender].add(_value);\n', '  }\n', '\n', '  function subAllowance(address _holder, address _spender, uint256 _value) onlyCaller public {\n', '    uint256 oldValue = allowanceOf[_holder][_spender];\n', '    if (_value > oldValue) {\n', '      allowanceOf[_holder][_spender] = 0;\n', '    } else {\n', '      allowanceOf[_holder][_spender] = oldValue.sub(_value);\n', '    }\n', '  }\n', '\n', '  function setAllowance(address _holder, address _spender, uint256 _value) onlyCaller public {\n', '    allowanceOf[_holder][_spender] = _value;\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Balance\n', '// ----------------------------------------------------------------------------\n', '/**\n', ' * @title Balance\n', ' * @dev Storage for the Balance List.\n', ' */\n', 'contract Balance is Callable {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) public balanceOf;\n', '\n', '  uint256 public totalSupply;\n', '\n', '  function addBalance(address _addr, uint256 _value) onlyCaller public {\n', '    balanceOf[_addr] = balanceOf[_addr].add(_value);\n', '  }\n', '\n', '  function subBalance(address _addr, uint256 _value) onlyCaller public {\n', '    balanceOf[_addr] = balanceOf[_addr].sub(_value);\n', '  }\n', '\n', '  function setBalance(address _addr, uint256 _value) onlyCaller public {\n', '    balanceOf[_addr] = _value;\n', '  }\n', '\n', '  function addTotalSupply(uint256 _value) onlyCaller public {\n', '    totalSupply = totalSupply.add(_value);\n', '  }\n', '\n', '  function subTotalSupply(uint256 _value) onlyCaller public {\n', '    totalSupply = totalSupply.sub(_value);\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// UserContract\n', '// ----------------------------------------------------------------------------\n', '/**\n', ' * @title UserContract\n', ' * @dev A contract for the blacklist and verified list modifiers.\n', ' */\n', 'contract UserContract {\n', '  Blacklist internal _blacklist;\n', '  Verified internal _verifiedList;\n', '\n', '  constructor(\n', '    Blacklist _blacklistContract, Verified _verifiedListContract\n', '  ) public {\n', '    _blacklist = _blacklistContract;\n', '    _verifiedList = _verifiedListContract;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if the given address is blacklisted.\n', '   */\n', '  modifier onlyNotBlacklistedAddr(address addr) {\n', '    require(!_blacklist.blacklist(addr));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if one of the given addresses is blacklisted.\n', '   */\n', '  modifier onlyNotBlacklistedAddrs(address[] addrs) {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      require(!_blacklist.blacklist(addrs[i]));\n', '    }\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if the given address is not verified.\n', '   */\n', '  modifier onlyVerifiedAddr(address addr) {\n', '    if (_verifiedList.shouldVerify()) {\n', '      require(_verifiedList.verifiedList(addr));\n', '    }\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if one of the given addresses is not verified.\n', '   */\n', '  modifier onlyVerifiedAddrs(address[] addrs) {\n', '    if (_verifiedList.shouldVerify()) {\n', '      for (uint256 i = 0; i < addrs.length; i++) {\n', '        require(_verifiedList.verifiedList(addrs[i]));\n', '      }\n', '    }\n', '    _;\n', '  }\n', '\n', '  function blacklist(address addr) public view returns (bool) {\n', '    return _blacklist.blacklist(addr);\n', '  }\n', '\n', '  function verifiedlist(address addr) public view returns (bool) {\n', '    return _verifiedList.verifiedList(addr);\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ContractInterface\n', '// ----------------------------------------------------------------------------\n', 'contract ContractInterface {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address tokenOwner) public view returns (uint256);\n', '  function allowance(address tokenOwner, address spender) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function batchTransfer(address[] to, uint256 value) public returns (bool);\n', '  function increaseApproval(address spender, uint256 value) public returns (bool);\n', '  function decreaseApproval(address spender, uint256 value) public returns (bool);\n', '  function burn(uint256 value) public returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint256 value);\n', '  // This notifies clients about the amount burnt\n', '  event Burn(address indexed from, uint256 value);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// USDO contract\n', '// ----------------------------------------------------------------------------\n', 'contract USDO is ContractInterface, Pausable, UserContract {\n', '  using SafeMath for uint256;\n', '\n', '  // variables of the token\n', '  uint8 public constant decimals = 18;\n', '  uint256 constant maxBatch = 100;\n', '\n', '  string public name;\n', '  string public symbol;\n', '\n', '  Balance internal _balances;\n', '  Allowance internal _allowance;\n', '\n', '  constructor(string _tokenName, string _tokenSymbol,\n', '    Balance _balanceContract, Allowance _allowanceContract,\n', '    Blacklist _blacklistContract, Verified _verifiedListContract\n', '  ) UserContract(_blacklistContract, _verifiedListContract) public {\n', '    name = _tokenName;                                        // Set the name for display purposes\n', '    symbol = _tokenSymbol;                                    // Set the symbol for display purposes\n', '    _balances = _balanceContract;\n', '    _allowance = _allowanceContract;\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return _balances.totalSupply();\n', '  }\n', '\n', '  function balanceOf(address _addr) public view returns (uint256) {\n', '    return _balances.balanceOf(_addr);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return _allowance.allowanceOf(_owner, _spender);\n', '  }\n', '\n', '  /**\n', '   *  @dev Internal transfer, only can be called by this contract\n', '   */\n', '  function _transfer(address _from, address _to, uint256 _value) internal {\n', '    require(_value > 0);                                               // transfering value must be greater than 0\n', '    require(_to != 0x0);                                               // Prevent transfer to 0x0 address. Use burn() instead\n', '    require(_balances.balanceOf(_from) >= _value);                     // Check if the sender has enough\n', '    uint256 previousBalances = _balances.balanceOf(_from).add(_balances.balanceOf(_to)); // Save this for an assertion in the future\n', '    _balances.subBalance(_from, _value);                 // Subtract from the sender\n', '    _balances.addBalance(_to, _value);                     // Add the same to the recipient\n', '    emit Transfer(_from, _to, _value);\n', '    // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '    assert(_balances.balanceOf(_from) + _balances.balanceOf(_to) == previousBalances);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens\n', '   * Send `_value` tokens to `_to` from your account\n', '   *\n', '   * @param _to The address of the recipient\n', '   * @param _value the amount to send\n', '   */\n', '  function transfer(address _to, uint256 _value)\n', '  whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyNotBlacklistedAddr(_to) onlyVerifiedAddr(msg.sender) onlyVerifiedAddr(_to)\n', '  public returns (bool) {\n', '    _transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens to multiple accounts\n', '   * Send `_value` tokens to all addresses in `_to` from your account\n', '   *\n', '   * @param _to The addresses of the recipients\n', '   * @param _value the amount to send\n', '   */\n', '  function batchTransfer(address[] _to, uint256 _value)\n', '  whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyNotBlacklistedAddrs(_to) onlyVerifiedAddr(msg.sender) onlyVerifiedAddrs(_to)\n', '  public returns (bool) {\n', '    uint256 cnt = uint256(_to.length);\n', '    require(cnt > 0 && cnt <= maxBatch && _value > 0);\n', '    uint256 amount = _value.mul(cnt);\n', '    require(_balances.balanceOf(msg.sender) >= amount);\n', '\n', '    for (uint256 i = 0; i < cnt; i++) {\n', '      _transfer(msg.sender, _to[i], _value);\n', '    }\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from other address\n', '   * Send `_value` tokens to `_to` in behalf of `_from`\n', '   *\n', '   * @param _from The address of the sender\n', '   * @param _to The address of the recipient\n', '   * @param _value the amount to send\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '  whenNotPaused onlyNotBlacklistedAddr(_from) onlyNotBlacklistedAddr(_to) onlyVerifiedAddr(_from) onlyVerifiedAddr(_to)\n', '  public returns (bool) {\n', '    require(_allowance.allowanceOf(_from, msg.sender) >= _value);     // Check allowance\n', '    _allowance.subAllowance(_from, msg.sender, _value);\n', '    _transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   *\n', '   * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '   *\n', '   * @param _spender The address authorized to spend\n', '   * @param _value the max amount they can spend\n', '   */\n', '  function approve(address _spender, uint256 _value)\n', '  whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyNotBlacklistedAddr(_spender) onlyVerifiedAddr(msg.sender) onlyVerifiedAddr(_spender)\n', '  public returns (bool) {\n', '    _allowance.setAllowance(msg.sender, _spender, _value);\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint256 _addedValue)\n', '  whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyNotBlacklistedAddr(_spender) onlyVerifiedAddr(msg.sender) onlyVerifiedAddr(_spender)\n', '  public returns (bool) {\n', '    _allowance.addAllowance(msg.sender, _spender, _addedValue);\n', '    emit Approval(msg.sender, _spender, _allowance.allowanceOf(msg.sender, _spender));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue)\n', '  whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyNotBlacklistedAddr(_spender) onlyVerifiedAddr(msg.sender) onlyVerifiedAddr(_spender)\n', '  public returns (bool) {\n', '    _allowance.subAllowance(msg.sender, _spender, _subtractedValue);\n', '    emit Approval(msg.sender, _spender, _allowance.allowanceOf(msg.sender, _spender));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Destroy tokens\n', '   * Remove `_value` tokens from the system irreversibly\n', '   *\n', '   * @param _value the amount of money to burn\n', '   */\n', '  function burn(uint256 _value) whenNotPaused onlyNotBlacklistedAddr(msg.sender) onlyVerifiedAddr(msg.sender)\n', '  public returns (bool success) {\n', '    require(_balances.balanceOf(msg.sender) >= _value);         // Check if the sender has enough\n', '    _balances.subBalance(msg.sender, _value);                   // Subtract from the sender\n', '    _balances.subTotalSupply(_value);                           // Updates totalSupply\n', '    emit Burn(msg.sender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Change name and symbol of the tokens\n', '   *\n', '   * @param _name the new name of the token\n', '   * @param _symbol the new symbol of the token\n', '   */\n', '  function changeName(string _name, string _symbol) onlyOwner whenNotPaused public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '  }\n', '}']