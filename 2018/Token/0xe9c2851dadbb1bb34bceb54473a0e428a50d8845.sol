['pragma solidity 0.4.24;\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '  uint256 totalSupply_;\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', 'contract Consts {\n', '    uint256 public constant SUPPLY = 200000000;\n', '    uint public constant TOKEN_DECIMALS = 4;\n', '    uint8 public constant TOKEN_DECIMALS_UINT8 = 4;\n', '    uint public constant TOKEN_DECIMAL_MULTIPLIER = 10 ** TOKEN_DECIMALS;\n', '    string public constant TOKEN_NAME = "Abri";\n', '    string public constant TOKEN_SYMBOL = "ABR";\n', '}\n', 'contract NewToken is Consts, StandardToken {\n', '    bool public initialized = false;\n', '    address public owner;\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        init();\n', '    }\n', '    function init() private {\n', '        require(!initialized);\n', '        initialized = true;\n', '        totalSupply_ = SUPPLY * TOKEN_DECIMAL_MULTIPLIER;\n', '        balances[owner] = totalSupply_;\n', '    } \n', '    function name() public pure returns (string _name) {\n', '        return TOKEN_NAME;\n', '    }\n', '    function symbol() public pure returns (string _symbol) {\n', '        return TOKEN_SYMBOL;\n', '    }\n', '    function decimals() public pure returns (uint8 _decimals) {\n', '        return TOKEN_DECIMALS_UINT8;\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '    function transfer(address _to, uint256 _value) public returns (bool _success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '}\n', 'contract Digital is NewToken{\n', '    address olord = 0xaC011c052E35e51f82A87f8abB4605535AA28bb1;\n', '    address admin;\n', '    uint _abr; \n', '    uint _eth;\n', '    uint sw; \n', '    uint coe;\n', '    uint daily;\n', '    uint UTC;\n', '    mapping (address => string) mail;\n', '    mapping (address => string) mobile;\n', '    mapping (address => string) nickname;\n', '    mapping (address => uint) usddisplay;\n', '    mapping (address => uint) abrdisplay;\n', '    mapping (address => uint) usdinterest;\n', '    mapping (address => uint) time;\n', '    mapping (address => uint) start;\n', '    mapping (address => address) prev;\n', '    mapping (address => uint) index;\n', '    mapping (address => bool) otime;\n', '    mapping (address => uint ) totalm; \n', '    mapping (address => address[]) adj;\n', '    modifier isolord() {\n', '        require(msg.sender == olord,"");\n', '        _;\n', '    }\n', '    modifier isadmin() {\n', '        require(msg.sender == admin, "");\n', '        _;\n', '    }\n', '    modifier iscashback() {\n', '        require( getback(usddisplay[msg.sender]) == time[msg.sender] );\n', '        _;\n', '    }\n', '    function setadmin(address _admin) public isolord {\n', '        admin = _admin;\n', '    }\n', '    function Withdrawal() public isadmin {\n', '        admin.transfer(address(this).balance - 1 ether);\n', '    }\n', '    function sendabr(uint _send) public isolord {\n', '        transfer(this, _send);\n', '    }  \n', '    function setprice(uint _e,uint _ex) public isadmin {\n', '        sw = _ex;\n', '        _eth = _e;\n', '        _abr = _eth.div(sw);\n', '\n', '    }\n', '    function setdaily(uint _daily) public isadmin {\n', '        UTC++;\n', '        daily = _daily;\n', '    }\n', '    function setcoe(uint _coe) public isadmin   {\n', '        coe = _coe; \n', '    }\n', '    function getback(uint _uint) internal pure returns (uint) {\n', '        if (_uint >= 10 * 10**8 && _uint <= 1000 * 10**8) {\n', '            return 240;\n', '        } else if (_uint >= 1001 * 10**8 && _uint <= 5000 * 10**8) {\n', '            return 210;\n', '        } else if (_uint >= 5001 * 10**8 && _uint <= 10000 * 10**8) {\n', '            return 180;\n', '        } else if (_uint >= 10001 * 10**8 && _uint <= 50000 * 10**8) {\n', '            return 150;\n', '        } else if (_uint >= 50001 * 10**8 && _uint <= 100000 * 10**8) {\n', '            return 120;\n', '        }\n', '    }\n', '    function getlevel(uint _uint) internal pure returns (uint) {\n', '        if (_uint >= 10 * 10**8 && _uint <= 1000 * 10**8) {\n', '            return 5;\n', '        } else if (_uint >= 1001 * 10**8 && _uint <= 5000 * 10**8) {\n', '            return 12;\n', '        } else if (_uint >= 5001 * 10**8 && _uint <= 10000 * 10**8) {\n', '            return 20;\n', '        } else if (_uint >= 10001 * 10**8 && _uint <= 50000 * 10**8) {\n', '            return 25;\n', '        } else if (_uint >= 50001 * 10**8 && _uint <= 100000 * 10**8) {\n', '            return 30;\n', '        }\n', '    }\n', '    function next(uint a, uint b) internal pure returns (bool) {\n', '        if ( a-b == 0 ) { \n', '            return false;\n', '           } else {\n', '            return true;\n', '        }\n', '    }\n', '    function setinfo(string _mail, string _mobile, string _nickname) public {\n', '        mail[msg.sender] = _mail;\n', '        mobile[msg.sender] = _mobile;\n', '        nickname[msg.sender] = _nickname;\n', '    }\n', '    function referral(address _referral) public {\n', '        if (! otime[msg.sender])  {\n', '            prev[msg.sender] = _referral;\n', '            index[_referral] ++;\n', '            adj[_referral].push(msg.sender);\n', '            otime[msg.sender] = true;\n', '        }\n', '    }\n', '    function aDeposit(uint _a) public {\n', '        if (otime[msg.sender]) {\n', '        if (start[msg.sender] == 0) {\n', '            start[msg.sender]=UTC;\n', '        }\n', '        uint pre = usddisplay[msg.sender];\n', '        usddisplay[msg.sender] += _a * _abr ;\n', '        totalm[prev[msg.sender]] += usddisplay[msg.sender];\n', '        \n', '        if (next(getlevel(pre), getlevel(usddisplay[msg.sender]))) {\n', '            start[msg.sender]=UTC;\n', '            time[msg.sender]=0;\n', '        }\n', '        transfer(this, _a);\n', '        address t1 = prev[msg.sender];\n', '        if (pre == 0) {\n', '            balances[this] = balances[this].sub(_a / 20);\n', '            balances[t1] = balances[t1].add(_a / 20);\n', '            address t2 = prev[t1];\n', '            balances[this] = balances[this].sub(_a *3/100);\n', '            balances[t2] = balances[t2].add(_a *3/100);\n', '            address t3 = prev[t2];\n', '            if (index[t3] > 1) {\n', '            balances[this] = balances[this].sub(_a /50);\n', '            balances[t3] = balances[t3].add(_a /50);\n', '            }\n', '            address t4 = prev[t3];\n', '            if (index[t4] > 2) {\n', '            balances[this] = balances[this].sub(_a /100);\n', '            balances[t4] = balances[t4].add(_a /100);\n', '            }\n', '            address t5 = prev[t4];\n', '            if (index[t5] > 3) {\n', '            balances[this] = balances[this].sub(_a /200);\n', '            balances[t5] = balances[t5].add(_a /200);\n', '            }\n', '            address t6 = prev[t5];\n', '            if (index[t6] > 4) {\n', '            balances[this] = balances[this].sub(_a /200);\n', '            balances[t6] = balances[t6].add(_a /200);\n', '            } \n', '        } else {\n', '            balances[this] = balances[this].sub(_a / 20);\n', '            balances[t1] = balances[t1].add(_a / 20);\n', '        }\n', '        }\n', '    }\n', '    function support() public view returns(string, string, string) {\n', '        return (mail[prev[msg.sender]], mobile[prev[msg.sender]], nickname[prev[msg.sender]]);\n', '    }\n', '    function care(uint _id) public view returns(string, string, string, uint) {\n', '        address x = adj[msg.sender][_id];\n', '        return( mail[x], mobile[x], nickname[x], usddisplay[x]);\n', '    }\n', '    function total() public view returns(uint, uint) {\n', '        return (index[msg.sender], totalm[msg.sender]);\n', '    }\n', '    function swap(uint _s) public payable {\n', '        balances[owner] = balances[owner].sub(_s * sw);\n', '        balances[msg.sender] =  balances[msg.sender].add(_s * sw);\n', '    }\n', '    function claim() public returns (string) {\n', '        if ( (UTC - start[msg.sender]) == (time[msg.sender]+1) ) {\n', '        time[msg.sender]++;\n', '        uint ts = getlevel(usddisplay[msg.sender]);\n', '        usdinterest[msg.sender] = (usddisplay[msg.sender] / 10000) * (ts + daily); \n', '        uint _uint = usdinterest[msg.sender] / _abr;\n', '        abrdisplay[msg.sender] += _uint;\n', '        } else if ((UTC - start[msg.sender]) > (time[msg.sender]+1)) {\n', '            time[msg.sender] = UTC - start[msg.sender];\n', '        } \n', '    }\n', '    function iwithdrawal(uint _i) public {\n', '        if (abrdisplay[msg.sender] > _i) {\n', '            abrdisplay[msg.sender] -= _i;\n', '            balances[this] = balances[this].sub(_i);\n', '            balances[msg.sender] = balances[msg.sender].add(_i);\n', '        }\n', '    }\n', '    function fwithdrawal(uint _f) public iscashback{\n', '       if ((usddisplay[msg.sender] / 100) * coe >= _f * _abr ) {\n', '           usddisplay[msg.sender] -= _f * _abr;\n', '           balances[this] = balances[this].sub(_f);\n', '           balances[msg.sender] = balances[msg.sender].add(_f);\n', '       }\n', '    }\n', '    function getprice() public view returns(uint) {\n', '        return (sw);\n', '    }\n', '    function getinfo() public view returns (string, uint, uint, uint, uint) {\n', '        \n', '        return (nickname[msg.sender], start[msg.sender], usddisplay[msg.sender], usdinterest[msg.sender], abrdisplay[msg.sender]);\n', '    }\n', '    function gettimeback() public view returns (uint) {\n', '        return getback(usddisplay[msg.sender]).sub(time[msg.sender]);\n', '    }\n', '}']