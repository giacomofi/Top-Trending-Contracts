['pragma solidity ^0.4.21;\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256 _user){}\n', '  function transfer(address to, uint256 value) public returns (bool success){}\n', '  function allowance(address owner, address spender) public view returns (uint256 value){}\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool success){}\n', '  function approve(address spender, uint256 value) public returns (bool success){}\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  \n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '    uint c = a + b;\n', '    assert(c>=a);\n', '    return c;\n', '  }\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract OnlyOwner {\n', '  address public owner;\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function OnlyOwner() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier isOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20{\n', '\tusing SafeMath for uint256;\n', '\n', '  \tmapping(address => uint256) balances;\n', '  \tmapping (address => mapping (address => uint256)) allowed;\n', '\n', '  \tevent Minted(address receiver, uint256 amount);\n', '  \t\n', '  \t\n', '\n', '  \t\n', '\n', '  \tfunction _transfer(address _from, address _to, uint256 _value) internal view returns (bool success){\n', '  \t\t//prevent sending of tokens from genesis address or to self\n', '\t    require(_from != address(0) && _from != _to);\n', '\t    require(_to != address(0));\n', '\t    //subtract tokens from the sender on transfer\n', '\t    balances[_from] = balances[_from].safeSub(_value);\n', '\t    //add tokens to the receiver on reception\n', '\t    balances[_to] = balances[_to].safeAdd(_value);\n', '\t    return true;\n', '  \t}\n', '\n', '\tfunction transfer(address _to, uint256 _value) onlyPayloadSize(2*32) returns (bool success) \n', '\t{ \n', '\t\trequire(_value <= balances[msg.sender]);\n', '\t    _transfer(msg.sender,_to,_value);\n', '\t    Transfer(msg.sender, _to, _value);\n', '\t    return true;\n', '\t}\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    \tuint256 _allowance = allowed[_from][msg.sender];\n', '    \t//value must be less than allowed value\n', '    \trequire(_value <= _allowance);\n', '    \t//balance of sender + token value transferred by sender must be greater than balance of sender\n', '    \trequire(balances[_to] + _value > balances[_to]);\n', '    \t//call transfer function\n', '    \t_transfer(_from,_to,_value);\n', '    \t//subtract the amount allowed to the sender \n', '     \tallowed[_from][msg.sender] = _allowance.safeSub(_value);\n', '     \t//trigger Transfer event\n', '    \tTransfer(_from, _to, _value);\n', '    \treturn true;\n', '  \t}\n', '\n', '  \tfunction balanceOf(address _owner) public constant returns (uint balance) {\n', '    \treturn balances[_owner];\n', '  \t}\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '   /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].safeAdd(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.safeSub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  modifier onlyPayloadSize(uint size) {\n', '\t\tassert(msg.data.length == size + 4);\n', '\t\t_;\n', '\t} \n', '\n', '}\n', '\n', 'contract XRT is StandardToken, OnlyOwner{\n', '\tuint8 public constant decimals = 18;\n', '    uint256 private constant multiplier = billion*10**18;\n', '  \tstring public constant name = "XRT Token";\n', '  \tstring public constant symbol = "XRT";\n', '  \tstring public version = "X1.0";\n', '  \tuint256 private billion = 10*10**8;\n', '  \tuint256 private maxSupply = multiplier;\n', '    uint256 public totalSupply = (50*maxSupply)/100;\n', '  \t\n', '  \tfunction XRT() public{\n', '  \t    balances[msg.sender] = totalSupply;\n', '  \t}\n', '  \t\n', '  \tfunction maximumToken() isOwner returns (uint){\n', '  \t    return maxSupply;\n', '  \t}\n', '  \t\n', '  \tevent Mint(address indexed to, uint256 amount);\n', '  \tevent MintFinished();\n', '    \n', ' \tbool public mintingFinished = false;\n', '\n', '\n', '\tmodifier canMint() {\n', '\t\trequire(!mintingFinished);\n', '\t\trequire(totalSupply <= maxSupply);\n', '\t\t_;\n', '\t}\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '\tfunction mint(address _to, uint256 _amount) isOwner canMint public returns (bool) {\n', '\t    uint256 newAmount = _amount.safeMul(multiplier.safeDiv(100));\n', '\t    require(totalSupply <= maxSupply.safeSub(newAmount));\n', '\t    totalSupply = totalSupply.safeAdd(newAmount);\n', '\t\tbalances[_to] = balances[_to].safeAdd(newAmount);\n', '\t\tMint(_to, newAmount);\n', '\t\tTransfer(address(0), _to, newAmount);\n', '\t\treturn true;\n', '\t}\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  \tfunction finishMinting() isOwner canMint public returns (bool) {\n', '    \tmintingFinished = true;\n', '    \tMintFinished();\n', '    \treturn true;\n', '  \t}\n', '}']
['pragma solidity ^0.4.21;\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256 _user){}\n', '  function transfer(address to, uint256 value) public returns (bool success){}\n', '  function allowance(address owner, address spender) public view returns (uint256 value){}\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool success){}\n', '  function approve(address spender, uint256 value) public returns (bool success){}\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  \n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '    uint c = a + b;\n', '    assert(c>=a);\n', '    return c;\n', '  }\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '}\n', '\n', 'contract OnlyOwner {\n', '  address public owner;\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function OnlyOwner() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier isOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20{\n', '\tusing SafeMath for uint256;\n', '\n', '  \tmapping(address => uint256) balances;\n', '  \tmapping (address => mapping (address => uint256)) allowed;\n', '\n', '  \tevent Minted(address receiver, uint256 amount);\n', '  \t\n', '  \t\n', '\n', '  \t\n', '\n', '  \tfunction _transfer(address _from, address _to, uint256 _value) internal view returns (bool success){\n', '  \t\t//prevent sending of tokens from genesis address or to self\n', '\t    require(_from != address(0) && _from != _to);\n', '\t    require(_to != address(0));\n', '\t    //subtract tokens from the sender on transfer\n', '\t    balances[_from] = balances[_from].safeSub(_value);\n', '\t    //add tokens to the receiver on reception\n', '\t    balances[_to] = balances[_to].safeAdd(_value);\n', '\t    return true;\n', '  \t}\n', '\n', '\tfunction transfer(address _to, uint256 _value) onlyPayloadSize(2*32) returns (bool success) \n', '\t{ \n', '\t\trequire(_value <= balances[msg.sender]);\n', '\t    _transfer(msg.sender,_to,_value);\n', '\t    Transfer(msg.sender, _to, _value);\n', '\t    return true;\n', '\t}\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    \tuint256 _allowance = allowed[_from][msg.sender];\n', '    \t//value must be less than allowed value\n', '    \trequire(_value <= _allowance);\n', '    \t//balance of sender + token value transferred by sender must be greater than balance of sender\n', '    \trequire(balances[_to] + _value > balances[_to]);\n', '    \t//call transfer function\n', '    \t_transfer(_from,_to,_value);\n', '    \t//subtract the amount allowed to the sender \n', '     \tallowed[_from][msg.sender] = _allowance.safeSub(_value);\n', '     \t//trigger Transfer event\n', '    \tTransfer(_from, _to, _value);\n', '    \treturn true;\n', '  \t}\n', '\n', '  \tfunction balanceOf(address _owner) public constant returns (uint balance) {\n', '    \treturn balances[_owner];\n', '  \t}\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '   /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].safeAdd(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.safeSub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  modifier onlyPayloadSize(uint size) {\n', '\t\tassert(msg.data.length == size + 4);\n', '\t\t_;\n', '\t} \n', '\n', '}\n', '\n', 'contract XRT is StandardToken, OnlyOwner{\n', '\tuint8 public constant decimals = 18;\n', '    uint256 private constant multiplier = billion*10**18;\n', '  \tstring public constant name = "XRT Token";\n', '  \tstring public constant symbol = "XRT";\n', '  \tstring public version = "X1.0";\n', '  \tuint256 private billion = 10*10**8;\n', '  \tuint256 private maxSupply = multiplier;\n', '    uint256 public totalSupply = (50*maxSupply)/100;\n', '  \t\n', '  \tfunction XRT() public{\n', '  \t    balances[msg.sender] = totalSupply;\n', '  \t}\n', '  \t\n', '  \tfunction maximumToken() isOwner returns (uint){\n', '  \t    return maxSupply;\n', '  \t}\n', '  \t\n', '  \tevent Mint(address indexed to, uint256 amount);\n', '  \tevent MintFinished();\n', '    \n', ' \tbool public mintingFinished = false;\n', '\n', '\n', '\tmodifier canMint() {\n', '\t\trequire(!mintingFinished);\n', '\t\trequire(totalSupply <= maxSupply);\n', '\t\t_;\n', '\t}\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '\tfunction mint(address _to, uint256 _amount) isOwner canMint public returns (bool) {\n', '\t    uint256 newAmount = _amount.safeMul(multiplier.safeDiv(100));\n', '\t    require(totalSupply <= maxSupply.safeSub(newAmount));\n', '\t    totalSupply = totalSupply.safeAdd(newAmount);\n', '\t\tbalances[_to] = balances[_to].safeAdd(newAmount);\n', '\t\tMint(_to, newAmount);\n', '\t\tTransfer(address(0), _to, newAmount);\n', '\t\treturn true;\n', '\t}\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  \tfunction finishMinting() isOwner canMint public returns (bool) {\n', '    \tmintingFinished = true;\n', '    \tMintFinished();\n', '    \treturn true;\n', '  \t}\n', '}']
