['pragma solidity 0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint256) {\n', '        uint c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function pow(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a ** b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _who) public constant returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    /// seconds since 01.01.1970 to 17.02.2018 00:00:00 GMT\n', '    uint64 public dateTransferable = 1518825600;\n', '\n', '    /**\n', '     * @dev Transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        uint64 _now = uint64(block.timestamp);\n', '        require(_now >= dateTransferable);\n', "        require(_to != address(this)); // Don't allow to transfer tokens to contract address\n", '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _address The address to query the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _address) public view returns (uint256) {\n', '        return balances[_address];\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address _owner, address _spender) public constant returns (uint256);\n', '    function transferFrom(address _from, address _to, uint256 value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/** \n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '    /**\n', "     * @dev The Ownable constructor sets the original 'owner' of the contract to the sender account.\n", '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '     * @dev modifier to allow actions only when the contract IS paused\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev modifier to allow actions only when the contract IS NOT paused\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyOwner whenNotPaused returns (bool) {\n', '        paused = true;\n', '        Pause();\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyOwner whenPaused returns (bool) {\n', '        paused = false;\n', '        Unpause();\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is BasicToken, Ownable {\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(uint256 _amount) public onlyOwner canMint returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[owner] = balances[owner].add(_amount);\n', '        Mint(owner, _amount);\n', '        Transfer(0x0, owner, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() public onlyOwner returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Xineoken\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract Xineoken is BasicToken, Ownable, Pausable, MintableToken {\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    string public name = "Xineoken";\n', '    uint256 public decimals = 2;\n', '    string public symbol = "XIN";\n', '\n', '    /// price for a single token\n', '    uint256 public buyPrice = 10526315789474;\n', '    /// price for a single token after the 2nd stage of tokens\n', '    uint256 public buyPriceFinal = 52631578947368;\n', '    /// number of tokens sold\n', '    uint256 public allocatedTokens = 0;\n', '    /// first tier of tokens at a discount\n', '    uint256 public stage1Tokens = 330000000 * (10 ** decimals);\n', '    /// second tier of tokens at a discount\n', '    uint256 public stage2Tokens = 660000000 * (10 ** decimals);\n', '    /// minimum amount in wei 0.1 ether\n', '    uint256 public minimumBuyAmount = 100000000000000000;\n', '    \n', '    function Xineoken() public {\n', '        totalSupply = 1000000000 * (10 ** decimals);\n', '        balances[owner] = totalSupply;\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function () public payable {\n', '        buyToken();\n', '    }\n', '    \n', '    /**\n', '     * @dev Calculate the number of tokens based on the current stage\n', '     * @param _value The amount of wei\n', '     * @return The number of tokens\n', '     */\n', '    function calculateTokenAmount(uint256 _value) public view returns (uint256) {\n', '\n', '        var tokenAmount = uint256(0);\n', '        var tokenAmountCurrentStage = uint256(0);\n', '        var tokenAmountNextStage = uint256(0);\n', '  \n', '        var stage1TokensNoDec = stage1Tokens / (10 ** decimals);\n', '        var stage2TokensNoDec = stage2Tokens / (10 ** decimals);\n', '        var allocatedTokensNoDec = allocatedTokens / (10 ** decimals);\n', '  \n', '        if (allocatedTokensNoDec < stage1TokensNoDec) {\n', '            tokenAmount = _value / buyPrice;\n', '            if (tokenAmount.add(allocatedTokensNoDec) > stage1TokensNoDec) {\n', '                tokenAmountCurrentStage = stage1TokensNoDec.sub(allocatedTokensNoDec);\n', '                tokenAmountNextStage = (_value.sub(tokenAmountCurrentStage.mul(buyPrice))) / (buyPrice * 2);\n', '                tokenAmount = tokenAmountCurrentStage + tokenAmountNextStage;\n', '            }\n', '        } else if (allocatedTokensNoDec < (stage2TokensNoDec)) {\n', '            tokenAmount = _value / (buyPrice * 2);\n', '            if (tokenAmount.add(allocatedTokensNoDec) > stage2TokensNoDec) {\n', '                tokenAmountCurrentStage = stage2TokensNoDec.sub(allocatedTokensNoDec);\n', '                tokenAmountNextStage = (_value.sub(tokenAmountCurrentStage.mul(buyPrice * 2))) / buyPriceFinal;\n', '                tokenAmount = tokenAmountCurrentStage + tokenAmountNextStage;\n', '            }\n', '        } else {\n', '            tokenAmount = _value / buyPriceFinal;\n', '        }\n', '\n', '        return tokenAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev Buy tokens when the contract is not paused.\n', '     */\n', '    function buyToken() public whenNotPaused payable {\n', '\n', '        require(msg.sender != 0x0);\n', '        require(msg.value >= minimumBuyAmount);\n', '        \n', '        uint256 weiAmount = msg.value;\n', '        uint256 tokens = calculateTokenAmount(weiAmount);\n', '\n', '        require(tokens > 0);\n', '\n', '        uint256 totalTokens = tokens * (10 ** decimals);\n', '\n', '        balances[owner] = balances[owner].sub(totalTokens);\n', '        balances[msg.sender] = balances[msg.sender].add(totalTokens);\n', '        allocatedTokens = allocatedTokens.add(totalTokens);\n', '        Transfer(owner, msg.sender, totalTokens);\n', '        \n', '        forwardFunds();\n', '    }\n', '\n', '    /**\n', '     * @dev Allocate tokens to an address\n', '     * @param _to Address where tokens should be allocated to.\n', '     * @param _tokens Amount of tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function allocateTokens(address _to, uint256 _tokens) public onlyOwner returns (bool) {\n', '        require(balanceOf(owner) >= _tokens);\n', '        balances[owner] = balances[owner].sub(_tokens);\n', '        balances[_to] = balances[_to].add(_tokens);\n', '        allocatedTokens = allocatedTokens.add(_tokens);\n', '        Transfer(owner, _to, _tokens);\n', '        return true;\n', '    }\n', '\n', '    /** \n', '     * @param _newBuyPrice Price in wei users can buy from the contract.\n', '     * @param _newBuyPriceFinal Final price in wei users can buy from the contract.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function setBuyPrice(uint256 _newBuyPrice, uint256 _newBuyPriceFinal) public onlyOwner returns (bool) {\n', '        buyPrice = _newBuyPrice;\n', '        buyPriceFinal = _newBuyPriceFinal;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Set the date tokens can be transferred.\n', '     * @param _date The date after tokens can be transferred.\n', '     */\n', '    function setTransferableDate(uint64 _date) public onlyOwner {\n', '        dateTransferable = _date;\n', '    }\n', '\n', '    /**\n', '     * @dev Set the minimum buy amount in wei.\n', '     * @param _amount Wei amount.\n', '     */\n', '    function setMinimumBuyAmount(uint256 _amount) public onlyOwner {\n', '        minimumBuyAmount = _amount;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            // transfer tokens from owner to new owner\n', '            var previousOwner = owner;\n', '            var ownerBalance = balances[previousOwner];\n', '            balances[previousOwner] = balances[previousOwner].sub(ownerBalance);\n', '            balances[newOwner] = balances[newOwner].add(ownerBalance);\n', '            owner = newOwner;\n', '            Transfer(previousOwner, newOwner, ownerBalance);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Forward funds to owner address\n', '     */\n', '    function forwardFunds() internal {\n', '        if (!owner.send(msg.value)) {\n', '            revert();\n', '        }\n', '    }\n', '}']