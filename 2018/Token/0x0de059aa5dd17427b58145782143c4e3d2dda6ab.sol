['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * SafeMath\n', ' * */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '   \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '       \n', '        uint256 c = a / b;\n', '       \n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '   \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' *ERC20Basic\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' ERC20 interface\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * Basic token\n', ' *\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 public totalSupply_;\n', '\n', '  \n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '  \n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(msg.data.length>=(2*32)+4);\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer (msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '   \n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '/**\n', ' Standard ERC20 token\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '   \n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(_value==0||allowed[msg.sender][_spender]==0);\n', '        require(msg.data.length>=(2*32)+4);\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    \n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '  \n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '   \n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract CodeToken is StandardToken {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public precentDecimal=2;\n', '    \n', '    // miner and developer percent\n', '    uint256 public minerAndDeveloperPercent=70;\n', '    \n', '    //open dao fund percent\n', '    uint256 public openDaoFundPercent=10;\n', '    \n', '    //codecoin core team percent\n', '    uint256 public codeCoinCoreTeamPercent=10;\n', '    \n', '    //cloudmine precent\n', '    uint256 public mineralcloudFundPercent=10;\n', '     \n', '    \n', '    // miner and developer Account\n', '    address public minerAndDeveloperFundAccount;\n', '    \n', '    //open dao fund Account\n', '    address public openDaoFundAccount;\n', '    \n', '    //codecoin core team Account\n', '    address public codeCoinCoreTeamAccount;\n', '    \n', '    //cloudmine Account\n', '    address public mineralcloudFundAccount;\n', '    \n', '    \n', '    // miner and developer fund Balnace\n', '    uint256 public minerAndDeveloperFundBalnace;\n', '    \n', '    //open dao fund Balnace\n', '    uint256 public openDaoFundBalnace;\n', '    \n', '    //codecoin core team Balnace\n', '    uint256 public codeCoinCoreTeamBalnace;\n', '    \n', '    //cloudmine Balnace\n', '    uint256 public mineralcloudFundBalnace;\n', '\n', '\n', '    //codeToken constructor\n', '    constructor(string _name,string _symbol, uint8 _decimals, uint256 _initialSupply,\n', '        address _minerAndDeveloperFundAccount,address _openDaoFundAccount,address _codeCoinCoreTeamAccount,address _mineralcloudFundAccount) public {\n', '        //init name,symbol,decimal,totalSupply\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        totalSupply_ = _initialSupply*10**uint256(_decimals);\n', '        \n', '        //init account\n', '        minerAndDeveloperFundAccount=_minerAndDeveloperFundAccount;\n', '        openDaoFundAccount=_openDaoFundAccount;\n', '        codeCoinCoreTeamAccount=_codeCoinCoreTeamAccount;\n', '        mineralcloudFundAccount=_mineralcloudFundAccount;\n', '        \n', '\n', '        //compute balance\n', '        minerAndDeveloperFundBalnace=totalSupply_.mul(minerAndDeveloperPercent).div(10 ** precentDecimal);\n', '        openDaoFundBalnace=totalSupply_.mul(openDaoFundPercent).div(10 ** precentDecimal);\n', '        codeCoinCoreTeamBalnace=totalSupply_.mul(codeCoinCoreTeamPercent).div(10 ** precentDecimal);\n', '        mineralcloudFundBalnace=totalSupply_.mul(mineralcloudFundPercent).div(10 ** precentDecimal);\n', '    \n', '    \n', '        //evaluate balanace for account\n', '        balances[_minerAndDeveloperFundAccount]=minerAndDeveloperFundBalnace;\n', '        balances[_openDaoFundAccount]=openDaoFundBalnace;\n', '        balances[_codeCoinCoreTeamAccount]=codeCoinCoreTeamBalnace;\n', '        balances[_mineralcloudFundAccount]=mineralcloudFundBalnace;\n', '        \n', '    }\n', '    \n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '       return super.transfer(_to, _value);\n', '    } \n', '    \n', '   \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '     \n', '     function() public payable{\n', '         revert();\n', '     }\n', '}']