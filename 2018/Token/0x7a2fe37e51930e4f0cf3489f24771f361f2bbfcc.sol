['/**\n', ' * ┌───┐░░░┌┐░┌─┐┌─┐░░░░░┌┐░░░░░\n', ' * │┌──┘░░░││░││└┘││░░░░┌┘└┐░░░░\n', ' * │└──┬┐┌┬┤│░│┌┐┌┐├──┬─┼┐┌┼┐░┌┐\n', ' * │┌──┤└┘├┤│░││││││┌┐│┌┘││││░││\n', ' * │└──┼┐┌┤│└┐││││││└┘││░│└┤└─┘│\n', ' * └───┘└┘└┴─┘└┘└┘└┴──┴┘░└─┴─┐┌┘\n', ' * ░░░░░░░░░░░░░░░░░░░░░░░░┌─┘│░\n', ' * ░░░░░░░░░░░░░░░░░░░░░░░░└──┘░\n', ' * \n', ' * The circulating currency.\n', ' */\n', 'pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title AdminUtils\n', ' * @dev customized admin control panel\n', ' * @dev just want to keep everything safe\n', ' */\n', 'contract AdminUtils is Ownable {\n', '\n', '    mapping (address => uint256) adminContracts;\n', '\n', '    address internal root;\n', '\n', '    /* modifiers */\n', '    modifier OnlyContract() {\n', '        require(isSuperContract(msg.sender));\n', '        _;\n', '    }\n', '\n', '    modifier OwnerOrContract() {\n', '        require(msg.sender == owner || isSuperContract(msg.sender));\n', '        _;\n', '    }\n', '\n', '    modifier onlyRoot() {\n', '        require(msg.sender == root);\n', '        _;\n', '    }\n', '\n', '    /* constructor */\n', '    constructor() public {\n', '        // This is a safe key stored offline\n', '        root = 0xe07faf5B0e91007183b76F37AC54d38f90111D40;\n', '    }\n', '\n', '    /**\n', '     * @dev really??? you wanna send us free money???\n', '     */\n', '    function ()\n', '        public\n', '        payable {\n', '    }\n', '\n', '    /**\n', '     * @dev this is the kickass idea from @dan\n', '     * and well we will see how it works\n', '     */\n', '    function claimOwnership()\n', '        external\n', '        onlyRoot\n', '        returns (bool) {\n', '        owner = root;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev function to address a super contract address\n', '     * some functions are meant to be called from another contract\n', '     * but not from any contracts\n', '     * @param _address A contract address\n', '     */\n', '    function addContractAddress(address _address)\n', '        public\n', '        onlyOwner\n', '        returns (bool) {\n', '\n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '            codeLength := extcodesize(_address)\n', '        }\n', '\n', '        if (codeLength == 0) {\n', '            return false;\n', '        }\n', '\n', '        adminContracts[_address] = 1;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev remove the contract address as a super user role\n', '     * have it here just in case\n', '     * @param _address A contract address\n', '     */\n', '    function removeContractAddress(address _address)\n', '        public\n', '        onlyOwner\n', '        returns (bool) {\n', '\n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '            codeLength := extcodesize(_address)\n', '        }\n', '\n', '        if (codeLength == 0) {\n', '            return false;\n', '        }\n', '\n', '        adminContracts[_address] = 0;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev check contract eligibility\n', '     * @param _address A contract address\n', '     */\n', '    function isSuperContract(address _address)\n', '        public\n', '        view\n', '        returns (bool) {\n', '\n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '            codeLength := extcodesize(_address)\n', '        }\n', '\n', '        if (codeLength == 0) {\n', '            return false;\n', '        }\n', '\n', '        if (adminContracts[_address] == 1) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20\n', ' * @dev StandardToken.\n', ' */\n', 'contract ERC20 is AdminUtils {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '     )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint _addedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '            allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint _subtractedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function withdraw()\n', '        public\n', '        onlyOwner {\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Contract that will work with ERC223 tokens.\n', ' */\n', 'contract ERC223ReceivingContract { \n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', '/**\n', ' * @title ERC223\n', ' * @dev Standard ERC223 token.\n', ' */\n', 'contract ERC223 is ERC20 {\n', '\n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      Invokes the `tokenFallback` function if the recipient is a contract.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallback` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value)\n', '        public\n', '        returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        bytes memory empty;\n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(codeLength > 0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev you get the idea\n', '     * this is the same transferFrom function in ERC20\n', '     * except it calls a token fallback function if the\n', '     * receiver is a contract\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value)\n', '        public\n', '        returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        bytes memory empty;\n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '\n', '        if(codeLength > 0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/* \n', '::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::..==========.:::::::::::::::::::::::::::::::::::::::::\n', '::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::,..,:::.~======,::::::::::::::::::::::::::::::::::::::::::\n', ':::::::::::::::::::::::::::::::::::::::::::::::::::,....,:::::::::::::...===~,::::::::::::::::::::::::::::::::::::::::::\n', ':::::::::::::::::::::::::::::::::::::::::::::,..:::::::::::::::::::::::::::..:::::::::::::::::::::::::::::::::::::::::::\n', ':::::::::::::::::::::::::::::::::::::::::,.:::::::::::::::::::::::::::::::::::.,::::::::::::::::::::::::::::::::::::::::\n', ':::::::::::::::::::::::::::::::::::::::.::::::::::::::::::::::::::::::::::::::::,.,:::::::::::::::::::::::::::::::::::::\n', '::::::::::::::::::::::::::::......:::.::::::::::::::::::::::::::::::::::::::::::::::..::::::::::::::::::::::::::::::::::\n', '::::::::::::::::::::::::::.,,,,,,,,.:::::::::::::::::::::::::::::::::::::::::::::::::::,.:::::::::::::::::::::::::::::::\n', '::::::::::::::::::::::::..,,,,,,,.,:::::::::::::::::::::::::::::::::::::::::::::::::::::::,.,:::::::::::::::::::::::::::\n', ':::::::::::::::::::::::.:~~~.,,.::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::.,::::::::::::::::::::::::\n', ':::::::::::::::::::::::,~~~~~.,::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::.::::::::::::::::::::::\n', ':::::::::::::::::::::::,~~~~.::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::.::::::::::::::::::::\n', ':::::::::::::::::::::::.~~~.::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::.:::::::::::::::::::\n', '::::::::::::::::::::::::,~.:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::.:::::::::::::::::\n', '::::::::::::::::::::::::,.:::::::::::::::::::::,...,~+?I?+:...,::::::::::::::::::::::::::::::::::::::::.::::::::::::::::\n', ':::::::::::::::::::::::::.:::::::::::::..,~?IIIIIIIIIIIIIIIIIIIII=..::::::::::::::::::::::::::::::::::::.:::::::::::::::\n', ':::::::::::::::::::::::::,::::::::,.~IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII:.:::::::::::::::::::::::::::::::::.::::::::::::::\n', '::::::::::::::::::::::::,:::::::.+IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII+.,::::::::::::::::::::::::::::::.:::::::::::::\n', '::::::::::::::::::::::::,::::,:?=,=IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?.,::::::::::::::::::::::::::::.::::::::::::\n', ':::::::::::::::::::::::::::..~IIIIIIIIIIIIIIIIIIIIIIIIIIIIII~.+IIIIIIIIIIIIIIII+.:::::::::::::::::::::::::::,,::::::::::\n', ':::::::::::::::::::::::::.:IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?.+IIIIIIIIIIIIIII?.::::::::::::::::::::::::::,::::::::::\n', '::::::::::::::::::::::::.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII:,IIIIIIIIIIIIIIII.:::::::::::::::::::::::::.:::::::::\n', '::::::::::::::::::::::::IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII+.IIIIIIIIIIIIIII?.::::::::::::::::::::::::.::::::::\n', ':::::::::::::::::::::.?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?.IIIIIIIIIIIIIII.::::::::::::::::::::::::.:::::::\n', '::::::::::::::::..~+I?=,.+IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII~?IIIIIIIIIIIIII?.::::::::::::::::::::::::::::::\n', ':::::::::::::.I77777777777I.+IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.::::::::::::::::::::::.::::::\n', ':::::::::::.77777777777777777:=IIIIIIIIIIIIIIIIIIIIIIII+:....,=IIIIIIIIIIIIIIIIIIIIIIIIIIII~,:::::::::::::::::::::,:::::\n', ':::::::::,+77777777777777777777.IIIIIIIIIIIIIIIIIII:,I7777777777I,=IIIIIIIIIIIIIIIIIIIIIIIII+:::::::::::::::::::::.:::::\n', '::::::::.77777777777777777777777.IIIIIIIIIIIIIII~,77777777777777777?.IIIIIIIIIIIIIIIIIIIIIIII,::::::::::::::::::::.:::::\n', ':::::::,I777777777777777777777777=IIIIIIIIIIII=:777777777777777777777I,IIIIIIIIIIIIIIIIIIIIIII.:::::::::::::::::::,:::::\n', '::::::::7777777777777777777777777,IIIIIIIIIII:7777777777777777777777777:?IIIIIIIIIIIIIIIIIIIIII.:::::::::::::::::::,::::\n', '::::::.77777777777777777777777777I=IIIIIIIII,777777777777777777777777777I?IIIIIIIIIIIIIIIIIIIIII.::::::::::::::::::,::::\n', '::::::.777777777777..~777777777777.IIIIIIII~77777777777777777777777777777=?IIIIIIIIIIIIIIIIIIIII~::::::::::::::::::.::::\n', '::::::=777777777777777777777777777.IIIIIIII:777777777777777777777777777777.IIIIIIIIIIIIIIIIIIIIII.:::::::::::::::::.::::\n', '::::::I777777777777777777777777777,IIIIIII:77777777777777777777777777777777~IIIIIIIIIIIIIIIIIIIII?,::::::::::::::::.::::\n', '::::::I777777777777777777777777777.IIIIIII.7777777777777,..7777777777777777.IIIIIIIIIIIIIIIIIIIIII.::::::::::::::::.::::\n', '::::::~777777777777777777777777777.IIIIIII:7777777777777~.,7777777777777777:IIIIIIIIIIIIIIIIIIIIII?,:::::::::::::::.::::\n', '::::,,.77777777777777777777777777?+IIIIIII:77777777777777777777777777777777=IIIIIIIIIIIIIIIIIIIIIII.:::::::::::::::.....\n', '~~~~~~:I7777777777777777777777777.IIIIIIII.77777777777777777777777777777777~IIIIIIIIIIIIIIIIIIIIIII~:::::::::::::::.~~~~\n', '~~~~~~~.777777777777777777777777=IIIIIIIII,77777777777777777777777777777777,IIIIIIIIIIIIIIIIIIIIIII?:::::::::::::::.~~~~\n', '~~~~~~~~.7777777777777777777777~?IIIIIIIII?=7777777777777777777777777777777.IIIIIIIIIIIIIIIIIIIIIIII,::::::::::::::.~~~~\n', '~~~~~~~~.~=7777777777777777777.IIIIIIIIIIII,777777777777777777777777777777I+IIIIIIIIIIIIIIIIIIIIIIII.::::::::::::::.~~~~\n', '~~~~~~~~=II=:77777777777777+.IIIIIIIIIIIIIII,77777777777777777777777777777.IIIIIIIIIIIIIIIIIIIIIIIII.::::::::::::::,~~~~\n', '~~~~~~~:?IIIII..I7777777:.?IIIIIIIIIIIIIIIIII,777777777777777777777777777.IIIIIIIIIIIIIIIIIIIIIIIIII.:::::::::::::::,~~~\n', '~~~~~~~,IIIIIIIIIIIIIIIIIIIIII?.?IIIIIIIIIIIII~+777777777777777777777777.IIIIIIIIIIIIIIIIIIIIIIIIIII,:::::::::::::::,~~~\n', '~~~~~~~.IIIIIIIIIIIIIIIIIIII?.?IIIIIIIIIIIIIIIII,~77777777777777777777:=IIIIIIIIIIIIIIIIIIIIIIIIIIII,::::::::::::::::~~~\n', '~~~~~~~.IIIIIIIIIIIIIIIIIII.?IIIIIIIIIIIIIIIIIIIII?.=77777777777777I.+IIIIIIIIIIIIIIIIIIIIIIIIIIIIII,::::::::::::::.~~~~\n', '~~~~~~~.IIIIIIIIIIIIIIIIII~?IIIIIIIIIIIIIIIIIIIIIIIIII+,.:?I77?~.,?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.::::::::::::::,~~~~\n', '~~~~~~~,IIIIIIIIIIIIIIIIII?+IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.:::::::::::::.~~~~~\n', '~~~~~~~:?IIIIIIIIIIIIIIIIII=~IIII=.~IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.::::::::::::,~~~~~~\n', '~~~~~~~~:IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII,::::::::::,,~~~~~~~\n', '~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII~.+I?::::::::::.~~~~~~~~~\n', '~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII:.:::::::::.~~~~~~~~~~\n', '~~~~~~~~~~IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?,:::::::::~~~~~~~~~~\n', '~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII=:::::::.~~~~~~~~~~~\n', '~~~~~~~~~:+IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.:::::.~~~~~~~~~~~~\n', '~~~~~~~~~~.IIIIIIIIII.?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.::::.~~~~~~~~~~~~~\n', '~~~~~~~~~~~:IIIIIIIIIII,.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.:::.~~~~~~~~~~~~~~\n', '~~~.~~~~~~~:+IIIIIIIIIIIII+,.=?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?,,.~~~~~~~~~~~~~~~~\n', '~~~,~~~~~~~~,IIIIIIIIIIIIIIIIIII?=:............~+IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~~~~~~~~~~~~~~~~~~\n', '~~~~.~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~~~~~~~~~~~~~~~~~~~\n', '~~~~.~~~~~~~~~.?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.:~~~~~~~~~~~~~~~~~~~~~\n', '~~~~,~~~~~~~~~~:=IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII=..,,..:~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~:,~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII~:~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~.~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~.~~~~~~~~~~~~~,?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII+,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~.~~~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~~~~~~~~~~~~~~~~.+IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII+.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~,~~~~~~~~~~~~~~~~~.?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII+.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~.~~~~~~~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII=.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~.~~~~~~~~~~~~~~~~~~~~~..?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?.,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~.~~~~~~~~~~~~~~~~~~~~,III?,.?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII:.+=,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~:~~~~~~~~~~~~~~~~~~~,IIIIIIIII~.,+IIIIIIIIIIIIIIIIIIIIIIIIIIIII+,.+IIIIII.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~:~~~~~~~~~~~~~~~~~.IIIIIIIIIIIIIII??+~:,.................,~+?IIIIIIIIIIII,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~.~~~~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?.~~~~~.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~.~~~~~~~~~~~~~~~,?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~~~.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~.~~~~~~~~~~~~~~:=IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?,~~~~,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~.~~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII~~~~~.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~:~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~~::~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~~~~~~~~~~~~~~~=IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~~.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII+~~~.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~~~~~~~~~~~~~~IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII+:~.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~~~~~~~~~~~~~=IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?:::~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', ' */\n', '\n', '/**\n', ' * @title EvilMorty\n', ' * @dev secret: 79c9b9df0405a75d72e3f17fb484821ef3ba426bdc1d3b9805c92f29\n', ' */\n', 'contract EvilMorty is ERC223 {\n', '\n', '    string public constant name = "Evil Morty";\n', '    string public constant symbol = "Morty";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 1000000000e18;\n', '    uint256 public constant GAME_SUPPLY = 200000000e18;\n', '    uint256 public constant COMMUNITY_SUPPLY = 800000000e18;\n', '\n', '    address public citadelAddress;\n', '\n', '    /* constructor */\n', '    constructor()\n', '        public {\n', '\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '\n', '        // owners get 200 million locked\n', '        // and 200 million for second round crowdsale supply\n', '        // and 400 million for building the microverse\n', '        balances[owner] = COMMUNITY_SUPPLY;\n', '        emit Transfer(0x0, owner, COMMUNITY_SUPPLY);\n', '    }\n', '\n', '    /**\n', '     * @dev for mouting microverse contract\n', '     * @param _address Microverse&#39;s address\n', '     */\n', '    function mountCitadel(address _address)\n', '        public\n', '        onlyOwner\n', '        returns (bool) {\n', '        \n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '            codeLength := extcodesize(_address)\n', '        }\n', '\n', '        if (codeLength == 0) {\n', '            return false;\n', '        }\n', '\n', '        citadelAddress = _address;\n', '        balances[citadelAddress] = GAME_SUPPLY;\n', '        emit Transfer(0x0, citadelAddress, GAME_SUPPLY);\n', '        addContractAddress(_address);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev special transfer method for Microverse\n', '     * Because there are other contracts making transfer on behalf of Microverse,\n', '     * we need this special function, used for super contracts or owner.\n', '     * @param _to receiver&#39;s address\n', '     * @param _value amount of morties to transfer\n', '     */\n', '    function citadelTransfer(address _to, uint256 _value)\n', '        public\n', '        OwnerOrContract\n', '        returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[citadelAddress]);\n', '\n', '        bytes memory empty;\n', '\n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[citadelAddress] = balances[citadelAddress].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        if(codeLength > 0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(citadelAddress, _value, empty);\n', '        }\n', '        emit Transfer(citadelAddress, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev checks the Microverse contract&#39;s balance\n', '     * so other contracts won&#39;t bother remembering Microverse&#39;s address\n', '     */\n', '    function citadelBalance()\n', '        public\n', '        view\n', '        returns (uint256) {\n', '        return balances[citadelAddress];\n', '    }\n', '}']
['/**\n', ' * ┌───┐░░░┌┐░┌─┐┌─┐░░░░░┌┐░░░░░\n', ' * │┌──┘░░░││░││└┘││░░░░┌┘└┐░░░░\n', ' * │└──┬┐┌┬┤│░│┌┐┌┐├──┬─┼┐┌┼┐░┌┐\n', ' * │┌──┤└┘├┤│░││││││┌┐│┌┘││││░││\n', ' * │└──┼┐┌┤│└┐││││││└┘││░│└┤└─┘│\n', ' * └───┘└┘└┴─┘└┘└┘└┴──┴┘░└─┴─┐┌┘\n', ' * ░░░░░░░░░░░░░░░░░░░░░░░░┌─┘│░\n', ' * ░░░░░░░░░░░░░░░░░░░░░░░░└──┘░\n', ' * \n', ' * The circulating currency.\n', ' */\n', 'pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title AdminUtils\n', ' * @dev customized admin control panel\n', ' * @dev just want to keep everything safe\n', ' */\n', 'contract AdminUtils is Ownable {\n', '\n', '    mapping (address => uint256) adminContracts;\n', '\n', '    address internal root;\n', '\n', '    /* modifiers */\n', '    modifier OnlyContract() {\n', '        require(isSuperContract(msg.sender));\n', '        _;\n', '    }\n', '\n', '    modifier OwnerOrContract() {\n', '        require(msg.sender == owner || isSuperContract(msg.sender));\n', '        _;\n', '    }\n', '\n', '    modifier onlyRoot() {\n', '        require(msg.sender == root);\n', '        _;\n', '    }\n', '\n', '    /* constructor */\n', '    constructor() public {\n', '        // This is a safe key stored offline\n', '        root = 0xe07faf5B0e91007183b76F37AC54d38f90111D40;\n', '    }\n', '\n', '    /**\n', '     * @dev really??? you wanna send us free money???\n', '     */\n', '    function ()\n', '        public\n', '        payable {\n', '    }\n', '\n', '    /**\n', '     * @dev this is the kickass idea from @dan\n', '     * and well we will see how it works\n', '     */\n', '    function claimOwnership()\n', '        external\n', '        onlyRoot\n', '        returns (bool) {\n', '        owner = root;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev function to address a super contract address\n', '     * some functions are meant to be called from another contract\n', '     * but not from any contracts\n', '     * @param _address A contract address\n', '     */\n', '    function addContractAddress(address _address)\n', '        public\n', '        onlyOwner\n', '        returns (bool) {\n', '\n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '            codeLength := extcodesize(_address)\n', '        }\n', '\n', '        if (codeLength == 0) {\n', '            return false;\n', '        }\n', '\n', '        adminContracts[_address] = 1;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev remove the contract address as a super user role\n', '     * have it here just in case\n', '     * @param _address A contract address\n', '     */\n', '    function removeContractAddress(address _address)\n', '        public\n', '        onlyOwner\n', '        returns (bool) {\n', '\n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '            codeLength := extcodesize(_address)\n', '        }\n', '\n', '        if (codeLength == 0) {\n', '            return false;\n', '        }\n', '\n', '        adminContracts[_address] = 0;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev check contract eligibility\n', '     * @param _address A contract address\n', '     */\n', '    function isSuperContract(address _address)\n', '        public\n', '        view\n', '        returns (bool) {\n', '\n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '            codeLength := extcodesize(_address)\n', '        }\n', '\n', '        if (codeLength == 0) {\n', '            return false;\n', '        }\n', '\n', '        if (adminContracts[_address] == 1) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20\n', ' * @dev StandardToken.\n', ' */\n', 'contract ERC20 is AdminUtils {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '     )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint _addedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '            allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint _subtractedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function withdraw()\n', '        public\n', '        onlyOwner {\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Contract that will work with ERC223 tokens.\n', ' */\n', 'contract ERC223ReceivingContract { \n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', '/**\n', ' * @title ERC223\n', ' * @dev Standard ERC223 token.\n', ' */\n', 'contract ERC223 is ERC20 {\n', '\n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      Invokes the `tokenFallback` function if the recipient is a contract.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallback` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value)\n', '        public\n', '        returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        bytes memory empty;\n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(codeLength > 0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev you get the idea\n', '     * this is the same transferFrom function in ERC20\n', '     * except it calls a token fallback function if the\n', '     * receiver is a contract\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value)\n', '        public\n', '        returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        bytes memory empty;\n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '\n', '        if(codeLength > 0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/* \n', '::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::..==========.:::::::::::::::::::::::::::::::::::::::::\n', '::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::,..,:::.~======,::::::::::::::::::::::::::::::::::::::::::\n', ':::::::::::::::::::::::::::::::::::::::::::::::::::,....,:::::::::::::...===~,::::::::::::::::::::::::::::::::::::::::::\n', ':::::::::::::::::::::::::::::::::::::::::::::,..:::::::::::::::::::::::::::..:::::::::::::::::::::::::::::::::::::::::::\n', ':::::::::::::::::::::::::::::::::::::::::,.:::::::::::::::::::::::::::::::::::.,::::::::::::::::::::::::::::::::::::::::\n', ':::::::::::::::::::::::::::::::::::::::.::::::::::::::::::::::::::::::::::::::::,.,:::::::::::::::::::::::::::::::::::::\n', '::::::::::::::::::::::::::::......:::.::::::::::::::::::::::::::::::::::::::::::::::..::::::::::::::::::::::::::::::::::\n', '::::::::::::::::::::::::::.,,,,,,,,.:::::::::::::::::::::::::::::::::::::::::::::::::::,.:::::::::::::::::::::::::::::::\n', '::::::::::::::::::::::::..,,,,,,,.,:::::::::::::::::::::::::::::::::::::::::::::::::::::::,.,:::::::::::::::::::::::::::\n', ':::::::::::::::::::::::.:~~~.,,.::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::.,::::::::::::::::::::::::\n', ':::::::::::::::::::::::,~~~~~.,::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::.::::::::::::::::::::::\n', ':::::::::::::::::::::::,~~~~.::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::.::::::::::::::::::::\n', ':::::::::::::::::::::::.~~~.::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::.:::::::::::::::::::\n', '::::::::::::::::::::::::,~.:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::.:::::::::::::::::\n', '::::::::::::::::::::::::,.:::::::::::::::::::::,...,~+?I?+:...,::::::::::::::::::::::::::::::::::::::::.::::::::::::::::\n', ':::::::::::::::::::::::::.:::::::::::::..,~?IIIIIIIIIIIIIIIIIIIII=..::::::::::::::::::::::::::::::::::::.:::::::::::::::\n', ':::::::::::::::::::::::::,::::::::,.~IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII:.:::::::::::::::::::::::::::::::::.::::::::::::::\n', '::::::::::::::::::::::::,:::::::.+IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII+.,::::::::::::::::::::::::::::::.:::::::::::::\n', '::::::::::::::::::::::::,::::,:?=,=IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?.,::::::::::::::::::::::::::::.::::::::::::\n', ':::::::::::::::::::::::::::..~IIIIIIIIIIIIIIIIIIIIIIIIIIIIII~.+IIIIIIIIIIIIIIII+.:::::::::::::::::::::::::::,,::::::::::\n', ':::::::::::::::::::::::::.:IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?.+IIIIIIIIIIIIIII?.::::::::::::::::::::::::::,::::::::::\n', '::::::::::::::::::::::::.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII:,IIIIIIIIIIIIIIII.:::::::::::::::::::::::::.:::::::::\n', '::::::::::::::::::::::::IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII+.IIIIIIIIIIIIIII?.::::::::::::::::::::::::.::::::::\n', ':::::::::::::::::::::.?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?.IIIIIIIIIIIIIII.::::::::::::::::::::::::.:::::::\n', '::::::::::::::::..~+I?=,.+IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII~?IIIIIIIIIIIIII?.::::::::::::::::::::::::::::::\n', ':::::::::::::.I77777777777I.+IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.::::::::::::::::::::::.::::::\n', ':::::::::::.77777777777777777:=IIIIIIIIIIIIIIIIIIIIIIII+:....,=IIIIIIIIIIIIIIIIIIIIIIIIIIII~,:::::::::::::::::::::,:::::\n', ':::::::::,+77777777777777777777.IIIIIIIIIIIIIIIIIII:,I7777777777I,=IIIIIIIIIIIIIIIIIIIIIIIII+:::::::::::::::::::::.:::::\n', '::::::::.77777777777777777777777.IIIIIIIIIIIIIII~,77777777777777777?.IIIIIIIIIIIIIIIIIIIIIIII,::::::::::::::::::::.:::::\n', ':::::::,I777777777777777777777777=IIIIIIIIIIII=:777777777777777777777I,IIIIIIIIIIIIIIIIIIIIIII.:::::::::::::::::::,:::::\n', '::::::::7777777777777777777777777,IIIIIIIIIII:7777777777777777777777777:?IIIIIIIIIIIIIIIIIIIIII.:::::::::::::::::::,::::\n', '::::::.77777777777777777777777777I=IIIIIIIII,777777777777777777777777777I?IIIIIIIIIIIIIIIIIIIIII.::::::::::::::::::,::::\n', '::::::.777777777777..~777777777777.IIIIIIII~77777777777777777777777777777=?IIIIIIIIIIIIIIIIIIIII~::::::::::::::::::.::::\n', '::::::=777777777777777777777777777.IIIIIIII:777777777777777777777777777777.IIIIIIIIIIIIIIIIIIIIII.:::::::::::::::::.::::\n', '::::::I777777777777777777777777777,IIIIIII:77777777777777777777777777777777~IIIIIIIIIIIIIIIIIIIII?,::::::::::::::::.::::\n', '::::::I777777777777777777777777777.IIIIIII.7777777777777,..7777777777777777.IIIIIIIIIIIIIIIIIIIIII.::::::::::::::::.::::\n', '::::::~777777777777777777777777777.IIIIIII:7777777777777~.,7777777777777777:IIIIIIIIIIIIIIIIIIIIII?,:::::::::::::::.::::\n', '::::,,.77777777777777777777777777?+IIIIIII:77777777777777777777777777777777=IIIIIIIIIIIIIIIIIIIIIII.:::::::::::::::.....\n', '~~~~~~:I7777777777777777777777777.IIIIIIII.77777777777777777777777777777777~IIIIIIIIIIIIIIIIIIIIIII~:::::::::::::::.~~~~\n', '~~~~~~~.777777777777777777777777=IIIIIIIII,77777777777777777777777777777777,IIIIIIIIIIIIIIIIIIIIIII?:::::::::::::::.~~~~\n', '~~~~~~~~.7777777777777777777777~?IIIIIIIII?=7777777777777777777777777777777.IIIIIIIIIIIIIIIIIIIIIIII,::::::::::::::.~~~~\n', '~~~~~~~~.~=7777777777777777777.IIIIIIIIIIII,777777777777777777777777777777I+IIIIIIIIIIIIIIIIIIIIIIII.::::::::::::::.~~~~\n', '~~~~~~~~=II=:77777777777777+.IIIIIIIIIIIIIII,77777777777777777777777777777.IIIIIIIIIIIIIIIIIIIIIIIII.::::::::::::::,~~~~\n', '~~~~~~~:?IIIII..I7777777:.?IIIIIIIIIIIIIIIIII,777777777777777777777777777.IIIIIIIIIIIIIIIIIIIIIIIIII.:::::::::::::::,~~~\n', '~~~~~~~,IIIIIIIIIIIIIIIIIIIIII?.?IIIIIIIIIIIII~+777777777777777777777777.IIIIIIIIIIIIIIIIIIIIIIIIIII,:::::::::::::::,~~~\n', '~~~~~~~.IIIIIIIIIIIIIIIIIIII?.?IIIIIIIIIIIIIIIII,~77777777777777777777:=IIIIIIIIIIIIIIIIIIIIIIIIIIII,::::::::::::::::~~~\n', '~~~~~~~.IIIIIIIIIIIIIIIIIII.?IIIIIIIIIIIIIIIIIIIII?.=77777777777777I.+IIIIIIIIIIIIIIIIIIIIIIIIIIIIII,::::::::::::::.~~~~\n', '~~~~~~~.IIIIIIIIIIIIIIIIII~?IIIIIIIIIIIIIIIIIIIIIIIIII+,.:?I77?~.,?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.::::::::::::::,~~~~\n', '~~~~~~~,IIIIIIIIIIIIIIIIII?+IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.:::::::::::::.~~~~~\n', '~~~~~~~:?IIIIIIIIIIIIIIIIII=~IIII=.~IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.::::::::::::,~~~~~~\n', '~~~~~~~~:IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII,::::::::::,,~~~~~~~\n', '~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII~.+I?::::::::::.~~~~~~~~~\n', '~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII:.:::::::::.~~~~~~~~~~\n', '~~~~~~~~~~IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?,:::::::::~~~~~~~~~~\n', '~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII=:::::::.~~~~~~~~~~~\n', '~~~~~~~~~:+IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.:::::.~~~~~~~~~~~~\n', '~~~~~~~~~~.IIIIIIIIII.?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.::::.~~~~~~~~~~~~~\n', '~~~~~~~~~~~:IIIIIIIIIII,.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.:::.~~~~~~~~~~~~~~\n', '~~~.~~~~~~~:+IIIIIIIIIIIII+,.=?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?,,.~~~~~~~~~~~~~~~~\n', '~~~,~~~~~~~~,IIIIIIIIIIIIIIIIIII?=:............~+IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~~~~~~~~~~~~~~~~~~\n', '~~~~.~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~~~~~~~~~~~~~~~~~~~\n', '~~~~.~~~~~~~~~.?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.:~~~~~~~~~~~~~~~~~~~~~\n', '~~~~,~~~~~~~~~~:=IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII=..,,..:~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~:,~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII~:~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~.~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~.~~~~~~~~~~~~~,?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII+,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~.~~~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~~~~~~~~~~~~~~~~.+IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII+.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~,~~~~~~~~~~~~~~~~~.?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII+.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~.~~~~~~~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII=.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~.~~~~~~~~~~~~~~~~~~~~~..?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?.,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~.~~~~~~~~~~~~~~~~~~~~,III?,.?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII:.+=,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~:~~~~~~~~~~~~~~~~~~~,IIIIIIIII~.,+IIIIIIIIIIIIIIIIIIIIIIIIIIIII+,.+IIIIII.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~:~~~~~~~~~~~~~~~~~.IIIIIIIIIIIIIII??+~:,.................,~+?IIIIIIIIIIII,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~.~~~~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?.~~~~~.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~.~~~~~~~~~~~~~~~,?IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~~~.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~.~~~~~~~~~~~~~~:=IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?,~~~~,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~.~~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII~~~~~.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~:~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~~::~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~~~~~~~~~~~~~~~=IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~~.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII+~~~.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~~~~~~~~~~~~~~IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~~.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII+:~.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~~~~~~~~~~~~~=IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII.~,~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', '~~~~~~~~~~~~~~~~~~.IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII?:::~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n', ' */\n', '\n', '/**\n', ' * @title EvilMorty\n', ' * @dev secret: 79c9b9df0405a75d72e3f17fb484821ef3ba426bdc1d3b9805c92f29\n', ' */\n', 'contract EvilMorty is ERC223 {\n', '\n', '    string public constant name = "Evil Morty";\n', '    string public constant symbol = "Morty";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 1000000000e18;\n', '    uint256 public constant GAME_SUPPLY = 200000000e18;\n', '    uint256 public constant COMMUNITY_SUPPLY = 800000000e18;\n', '\n', '    address public citadelAddress;\n', '\n', '    /* constructor */\n', '    constructor()\n', '        public {\n', '\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '\n', '        // owners get 200 million locked\n', '        // and 200 million for second round crowdsale supply\n', '        // and 400 million for building the microverse\n', '        balances[owner] = COMMUNITY_SUPPLY;\n', '        emit Transfer(0x0, owner, COMMUNITY_SUPPLY);\n', '    }\n', '\n', '    /**\n', '     * @dev for mouting microverse contract\n', "     * @param _address Microverse's address\n", '     */\n', '    function mountCitadel(address _address)\n', '        public\n', '        onlyOwner\n', '        returns (bool) {\n', '        \n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '            codeLength := extcodesize(_address)\n', '        }\n', '\n', '        if (codeLength == 0) {\n', '            return false;\n', '        }\n', '\n', '        citadelAddress = _address;\n', '        balances[citadelAddress] = GAME_SUPPLY;\n', '        emit Transfer(0x0, citadelAddress, GAME_SUPPLY);\n', '        addContractAddress(_address);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev special transfer method for Microverse\n', '     * Because there are other contracts making transfer on behalf of Microverse,\n', '     * we need this special function, used for super contracts or owner.\n', "     * @param _to receiver's address\n", '     * @param _value amount of morties to transfer\n', '     */\n', '    function citadelTransfer(address _to, uint256 _value)\n', '        public\n', '        OwnerOrContract\n', '        returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[citadelAddress]);\n', '\n', '        bytes memory empty;\n', '\n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[citadelAddress] = balances[citadelAddress].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        if(codeLength > 0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(citadelAddress, _value, empty);\n', '        }\n', '        emit Transfer(citadelAddress, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', "     * @dev checks the Microverse contract's balance\n", "     * so other contracts won't bother remembering Microverse's address\n", '     */\n', '    function citadelBalance()\n', '        public\n', '        view\n', '        returns (uint256) {\n', '        return balances[citadelAddress];\n', '    }\n', '}']
