['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {return 0;}\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', 'contract ERC20{\n', '    function balanceOf(address _owner)public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value)public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success);\n', '    function approve(address _spender, uint256 _value)public returns (bool success);\n', '    function allowance(address _owner, address _spender)public view returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', 'contract MaxWellToken is ERC20{\n', '    using SafeMath for uint256;\n', '    string public name   = "MaxWellToken";\n', '    string public symbol = "MWT"; \n', '    uint8 public decimals=18;\n', '    uint256 public totalSupply;\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    \n', '    constructor(uint256 initialSupply)public{\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address _owner)public view returns (uint256 balance){\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value)public returns (bool success){\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '     \n', '    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success){\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '    \n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value)public returns (bool success){\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true; \n', '    }\n', '    \n', '    function allowance(address _owner, address _spender)public view returns (uint256 remaining){\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {return 0;}\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', 'contract ERC20{\n', '    function balanceOf(address _owner)public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value)public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success);\n', '    function approve(address _spender, uint256 _value)public returns (bool success);\n', '    function allowance(address _owner, address _spender)public view returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', 'contract MaxWellToken is ERC20{\n', '    using SafeMath for uint256;\n', '    string public name   = "MaxWellToken";\n', '    string public symbol = "MWT"; \n', '    uint8 public decimals=18;\n', '    uint256 public totalSupply;\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    \n', '    constructor(uint256 initialSupply)public{\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address _owner)public view returns (uint256 balance){\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value)public returns (bool success){\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '     \n', '    function transferFrom(address _from, address _to, uint256 _value)public returns (bool success){\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '    \n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value)public returns (bool success){\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true; \n', '    }\n', '    \n', '    function allowance(address _owner, address _spender)public view returns (uint256 remaining){\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']
