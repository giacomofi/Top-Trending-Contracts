['pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * Различные валидаторы\n', ' */\n', '\n', 'contract ValidationUtil {\n', '    function requireNotEmptyAddress(address value) internal{\n', '        require(isAddressValid(value));\n', '    }\n', '\n', '    function isAddressValid(address value) internal constant returns (bool result){\n', '        return value != 0;\n', '    }\n', '}\n', '\n', '// File: contracts\\zeppelin\\contracts\\math\\SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function getOwner() returns(address){\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until \n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) \n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) \n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * Шаблон для токена, который можно сжечь\n', '*/\n', 'contract BurnableToken is StandardToken, Ownable, ValidationUtil {\n', '    using SafeMath for uint;\n', '\n', '    address public tokenOwnerBurner;\n', '\n', '    /** Событие, сколько токенов мы сожгли */\n', '    event Burned(address burner, uint burnedAmount);\n', '\n', '    function setOwnerBurner(address _tokenOwnerBurner) public onlyOwner invalidOwnerBurner{\n', '        // Проверка, что адрес не пустой\n', '        requireNotEmptyAddress(_tokenOwnerBurner);\n', '\n', '        tokenOwnerBurner = _tokenOwnerBurner;\n', '    }\n', '\n', '    /**\n', '     * Сжигаем токены на балансе владельца токенов, вызвать может только tokenOwnerBurner\n', '     */\n', '    function burnOwnerTokens(uint burnAmount) public onlyTokenOwnerBurner validOwnerBurner{\n', '        burnTokens(tokenOwnerBurner, burnAmount);\n', '    }\n', '\n', '    /**\n', '     * Сжигаем токены на балансе адреса токенов, вызвать может только tokenOwnerBurner\n', '     */\n', '    function burnTokens(address _address, uint burnAmount) public onlyTokenOwnerBurner validOwnerBurner{\n', '        balances[_address] = balances[_address].sub(burnAmount);\n', '\n', '        // Вызываем событие\n', '        Burned(_address, burnAmount);\n', '    }\n', '\n', '    /**\n', '     * Сжигаем все токены на балансе владельца\n', '     */\n', '    function burnAllOwnerTokens() public onlyTokenOwnerBurner validOwnerBurner{\n', '        uint burnAmount = balances[tokenOwnerBurner];\n', '        burnTokens(tokenOwnerBurner, burnAmount);\n', '    }\n', '\n', '    /** Модификаторы\n', '     */\n', '    modifier onlyTokenOwnerBurner() {\n', '        require(msg.sender == tokenOwnerBurner);\n', '\n', '        _;\n', '    }\n', '\n', '    modifier validOwnerBurner() {\n', '        // Проверка, что адрес не пустой\n', '        requireNotEmptyAddress(tokenOwnerBurner);\n', '\n', '        _;\n', '    }\n', '\n', '    modifier invalidOwnerBurner() {\n', '        // Проверка, что адрес не пустой\n', '        require(!isAddressValid(tokenOwnerBurner));\n', '\n', '        _;\n', '    }\n', '}\n', '\n', '/**\n', ' * Токен продаж\n', ' *\n', ' * ERC-20 токен, для ICO\n', ' *\n', ' */\n', '\n', 'contract CrowdsaleToken is StandardToken, Ownable {\n', '\n', '    /* Описание см. в конструкторе */\n', '    string public name;\n', '\n', '    string public symbol;\n', '\n', '    uint public decimals;\n', '\n', '    address public mintAgent;\n', '\n', '    /** Событие обновления токена (имя и символ) */\n', '    event UpdatedTokenInformation(string newName, string newSymbol);\n', '\n', '    /** Событие выпуска токенов */\n', '    event TokenMinted(uint amount, address toAddress);\n', '\n', '    /**\n', '     * Конструктор\n', '     *\n', '     * Токен должен быть создан только владельцем через кошелек (либо с мультиподписью, либо без нее)\n', '     *\n', '     * @param _name - имя токена\n', '     * @param _symbol - символ токена\n', '     * @param _decimals - кол-во знаков после запятой\n', '     */\n', '    function CrowdsaleToken(string _name, string _symbol, uint _decimals) {\n', '        owner = msg.sender;\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '\n', '        decimals = _decimals;\n', '    }\n', '\n', '    /**\n', '     * Владелец должен вызвать эту функцию, чтобы выпустить токены на адрес\n', '     */\n', '    function mintToAddress(uint amount, address toAddress) onlyMintAgent{\n', '        // перевод токенов на аккаунт\n', '        balances[toAddress] = amount;\n', '\n', '        // вызываем событие\n', '        TokenMinted(amount, toAddress);\n', '    }\n', '\n', '    /**\n', '     * Владелец может обновить инфу по токену\n', '     */\n', '    function setTokenInformation(string _name, string _symbol) onlyOwner {\n', '        name = _name;\n', '        symbol = _symbol;\n', '\n', '        // Вызываем событие\n', '        UpdatedTokenInformation(name, symbol);\n', '    }\n', '\n', '    /**\n', '     * Только владелец может обновить агента для создания токенов\n', '     */\n', '    function setMintAgent(address _address) onlyOwner {\n', '        mintAgent =  _address;\n', '    }\n', '\n', '    modifier onlyMintAgent(){\n', '        require(msg.sender == mintAgent);\n', '\n', '        _;\n', '    }\n', '}\n', '\n', '/**\n', ' * Шаблон для продаж токена, который можно сжечь\n', ' *\n', ' */\n', 'contract BurnableCrowdsaleToken is BurnableToken, CrowdsaleToken {\n', '\n', '    function BurnableCrowdsaleToken(string _name, string _symbol, uint _decimals) CrowdsaleToken(_name, _symbol, _decimals) BurnableToken(){\n', '\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * Различные валидаторы\n', ' */\n', '\n', 'contract ValidationUtil {\n', '    function requireNotEmptyAddress(address value) internal{\n', '        require(isAddressValid(value));\n', '    }\n', '\n', '    function isAddressValid(address value) internal constant returns (bool result){\n', '        return value != 0;\n', '    }\n', '}\n', '\n', '// File: contracts\\zeppelin\\contracts\\math\\SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function getOwner() returns(address){\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until \n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) \n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) \n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * Шаблон для токена, который можно сжечь\n', '*/\n', 'contract BurnableToken is StandardToken, Ownable, ValidationUtil {\n', '    using SafeMath for uint;\n', '\n', '    address public tokenOwnerBurner;\n', '\n', '    /** Событие, сколько токенов мы сожгли */\n', '    event Burned(address burner, uint burnedAmount);\n', '\n', '    function setOwnerBurner(address _tokenOwnerBurner) public onlyOwner invalidOwnerBurner{\n', '        // Проверка, что адрес не пустой\n', '        requireNotEmptyAddress(_tokenOwnerBurner);\n', '\n', '        tokenOwnerBurner = _tokenOwnerBurner;\n', '    }\n', '\n', '    /**\n', '     * Сжигаем токены на балансе владельца токенов, вызвать может только tokenOwnerBurner\n', '     */\n', '    function burnOwnerTokens(uint burnAmount) public onlyTokenOwnerBurner validOwnerBurner{\n', '        burnTokens(tokenOwnerBurner, burnAmount);\n', '    }\n', '\n', '    /**\n', '     * Сжигаем токены на балансе адреса токенов, вызвать может только tokenOwnerBurner\n', '     */\n', '    function burnTokens(address _address, uint burnAmount) public onlyTokenOwnerBurner validOwnerBurner{\n', '        balances[_address] = balances[_address].sub(burnAmount);\n', '\n', '        // Вызываем событие\n', '        Burned(_address, burnAmount);\n', '    }\n', '\n', '    /**\n', '     * Сжигаем все токены на балансе владельца\n', '     */\n', '    function burnAllOwnerTokens() public onlyTokenOwnerBurner validOwnerBurner{\n', '        uint burnAmount = balances[tokenOwnerBurner];\n', '        burnTokens(tokenOwnerBurner, burnAmount);\n', '    }\n', '\n', '    /** Модификаторы\n', '     */\n', '    modifier onlyTokenOwnerBurner() {\n', '        require(msg.sender == tokenOwnerBurner);\n', '\n', '        _;\n', '    }\n', '\n', '    modifier validOwnerBurner() {\n', '        // Проверка, что адрес не пустой\n', '        requireNotEmptyAddress(tokenOwnerBurner);\n', '\n', '        _;\n', '    }\n', '\n', '    modifier invalidOwnerBurner() {\n', '        // Проверка, что адрес не пустой\n', '        require(!isAddressValid(tokenOwnerBurner));\n', '\n', '        _;\n', '    }\n', '}\n', '\n', '/**\n', ' * Токен продаж\n', ' *\n', ' * ERC-20 токен, для ICO\n', ' *\n', ' */\n', '\n', 'contract CrowdsaleToken is StandardToken, Ownable {\n', '\n', '    /* Описание см. в конструкторе */\n', '    string public name;\n', '\n', '    string public symbol;\n', '\n', '    uint public decimals;\n', '\n', '    address public mintAgent;\n', '\n', '    /** Событие обновления токена (имя и символ) */\n', '    event UpdatedTokenInformation(string newName, string newSymbol);\n', '\n', '    /** Событие выпуска токенов */\n', '    event TokenMinted(uint amount, address toAddress);\n', '\n', '    /**\n', '     * Конструктор\n', '     *\n', '     * Токен должен быть создан только владельцем через кошелек (либо с мультиподписью, либо без нее)\n', '     *\n', '     * @param _name - имя токена\n', '     * @param _symbol - символ токена\n', '     * @param _decimals - кол-во знаков после запятой\n', '     */\n', '    function CrowdsaleToken(string _name, string _symbol, uint _decimals) {\n', '        owner = msg.sender;\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '\n', '        decimals = _decimals;\n', '    }\n', '\n', '    /**\n', '     * Владелец должен вызвать эту функцию, чтобы выпустить токены на адрес\n', '     */\n', '    function mintToAddress(uint amount, address toAddress) onlyMintAgent{\n', '        // перевод токенов на аккаунт\n', '        balances[toAddress] = amount;\n', '\n', '        // вызываем событие\n', '        TokenMinted(amount, toAddress);\n', '    }\n', '\n', '    /**\n', '     * Владелец может обновить инфу по токену\n', '     */\n', '    function setTokenInformation(string _name, string _symbol) onlyOwner {\n', '        name = _name;\n', '        symbol = _symbol;\n', '\n', '        // Вызываем событие\n', '        UpdatedTokenInformation(name, symbol);\n', '    }\n', '\n', '    /**\n', '     * Только владелец может обновить агента для создания токенов\n', '     */\n', '    function setMintAgent(address _address) onlyOwner {\n', '        mintAgent =  _address;\n', '    }\n', '\n', '    modifier onlyMintAgent(){\n', '        require(msg.sender == mintAgent);\n', '\n', '        _;\n', '    }\n', '}\n', '\n', '/**\n', ' * Шаблон для продаж токена, который можно сжечь\n', ' *\n', ' */\n', 'contract BurnableCrowdsaleToken is BurnableToken, CrowdsaleToken {\n', '\n', '    function BurnableCrowdsaleToken(string _name, string _symbol, uint _decimals) CrowdsaleToken(_name, _symbol, _decimals) BurnableToken(){\n', '\n', '    }\n', '}']
