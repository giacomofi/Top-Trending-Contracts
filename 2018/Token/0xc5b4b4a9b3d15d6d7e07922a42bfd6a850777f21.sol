['pragma solidity ^0.4.13;\n', '\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '\n', '  // @notice An address for the transfer event where the burned tokens are transferred in a faux Transfer event\n', '  address public constant BURN_ADDRESS = 0;\n', '\n', '  /** How many tokens we burned */\n', '  event Burned(address burner, uint burnedAmount);\n', '\n', '  /**\n', '   * Burn extra tokens from a balance.\n', '   *\n', '   */\n', '  function burn(uint burnAmount) {\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(burnAmount);\n', '    totalSupply_ = totalSupply_.sub(burnAmount);\n', '    Burned(burner, burnAmount);\n', '\n', '    // Inform the blockchain explores that track the\n', '    // balances only by a transfer event that the balance in this\n', '    // address has decreased\n', '    Transfer(burner, BURN_ADDRESS, burnAmount);\n', '  }\n', '}\n', '\n', 'contract LimitedTransferToken is ERC20 {\n', '\n', '    /**\n', '     * @dev Checks whether it can transfer or otherwise throws.\n', '     */\n', '    modifier canTransferLimitedTransferToken(address _sender, uint256 _value) {\n', '        require(_value <= transferableTokens(_sender, uint64(now)));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Default transferable tokens function returns all tokens for a holder (no limit).\n', '     * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the\n', '     * specific logic for limiting token transferability for a holder over time.\n', '     */\n', '    function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\n', '        return balanceOf(holder);\n', '    }\n', '}\n', '\n', 'contract ReleasableToken is ERC20, Ownable {\n', '\n', '  /* The finalizer contract that allows unlift the transfer limits on this token */\n', '  address public releaseAgent;\n', '\n', '  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n', '  bool public released = false;\n', '\n', '  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n', '  mapping (address => bool) public transferAgents;\n', '\n', '  /** The function can be called only before or after the tokens have been releasesd */\n', '  modifier inReleaseState(bool releaseState) {\n', '    if(releaseState != released) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '\n', '  /** The function can be called only by a whitelisted release agent. */\n', '  modifier onlyReleaseAgent() {\n', '    if(msg.sender != releaseAgent) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Limit token transfer until the crowdsale is over.\n', '   *\n', '   */\n', '  modifier canTransferReleasable(address _sender) {\n', '\n', '    if(!released) {\n', '        if(!transferAgents[_sender]) {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Set the contract that can call release and make the token transferable.\n', '   *\n', '   * Design choice. Allow reset the release agent to fix fat finger mistakes.\n', '   */\n', '  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n', '    // We don&#39;t do interface check here as we might want to a normal wallet address to act as a release agent\n', '    releaseAgent = addr;\n', '  }\n', '\n', '  /**\n', '   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n', '   */\n', '  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n', '    transferAgents[addr] = state;\n', '  }\n', '\n', '  /**\n', '   * One way function to release the tokens to the wild.\n', '   *\n', '   * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\n', '   */\n', '  function releaseTokenTransfer() public onlyReleaseAgent {\n', '    released = true;\n', '  }\n', '}\n', '\n', 'contract UpgradeAgent {\n', '\n', '  uint public originalSupply;\n', '\n', '  /** Interface marker */\n', '  function isUpgradeAgent() public constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function upgradeFrom(address _from, uint256 _value) public;\n', '}\n', '\n', 'contract UpgradeableToken is StandardToken {\n', '\n', '    /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n', '    address public upgradeMaster;\n', '\n', '    /** The next contract where the tokens will be migrated. */\n', '    UpgradeAgent public upgradeAgent;\n', '\n', '    /** How many tokens we have upgraded by now. */\n', '    uint256 public totalUpgraded;\n', '\n', '    /**\n', '     * Upgrade states.\n', '     *\n', '     * - NotAllowed: The child contract has not reached a condition where the upgrade can begin\n', '     * - WaitingForAgent: Token allows upgrade, but we don&#39;t have a new agent yet\n', '     * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\n', '     * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n', '     *\n', '     */\n', '    enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n', '\n', '    /**\n', '     * Somebody has upgraded some of his tokens.\n', '     */\n', '    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    /**\n', '     * New upgrade agent available.\n', '     */\n', '    event UpgradeAgentSet(address agent);\n', '\n', '    /**\n', '     * Do not allow construction without upgrade master set.\n', '     */\n', '    function UpgradeableToken(address _upgradeMaster) public {\n', '        upgradeMaster = _upgradeMaster;\n', '    }\n', '\n', '    /**\n', '     * Allow the token holder to upgrade some of their tokens to a new contract.\n', '     */\n', '    function upgrade(uint256 value) public {\n', '\n', '        UpgradeState state = getUpgradeState();\n', '        if (!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {\n', '            // Called in a bad state\n', '            revert();\n', '        }\n', '\n', '        // Validate input value.\n', '        if (value == 0) revert();\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '\n', '        // Take tokens out from circulation\n', '        totalSupply_ = totalSupply_.sub(value);\n', '        totalUpgraded = totalUpgraded.add(value);\n', '\n', '        // Upgrade agent reissues the tokens\n', '        upgradeAgent.upgradeFrom(msg.sender, value);\n', '        Upgrade(msg.sender, upgradeAgent, value);\n', '    }\n', '\n', '    /**\n', '     * Set an upgrade agent that handles\n', '     */\n', '    function setUpgradeAgent(address agent) external {\n', '        if (!canUpgrade()) {\n', '            // The token is not yet in a state that we could think upgrading\n', '            revert();\n', '        }\n', '\n', '        if (agent == 0x0) revert();\n', '        // Only a master can designate the next agent\n', '        if (msg.sender != upgradeMaster) revert();\n', '        // Upgrade has already begun for an agent\n', '        if (getUpgradeState() == UpgradeState.Upgrading) revert();\n', '\n', '        upgradeAgent = UpgradeAgent(agent);\n', '\n', '        // Bad interface\n', '        if (!upgradeAgent.isUpgradeAgent()) revert();\n', '        // Make sure that token supplies match in source and target\n', '        if (upgradeAgent.originalSupply() != totalSupply_) revert();\n', '\n', '        UpgradeAgentSet(upgradeAgent);\n', '    }\n', '\n', '    /**\n', '     * Get the state of the token upgrade.\n', '     */\n', '    function getUpgradeState() public constant returns (UpgradeState) {\n', '        if (!canUpgrade()) return UpgradeState.NotAllowed;\n', '        else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n', '        else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n', '        else return UpgradeState.Upgrading;\n', '    }\n', '\n', '    /**\n', '     * Change the upgrade master.\n', '     *\n', '     * This allows us to set a new owner for the upgrade mechanism.\n', '     */\n', '    function setUpgradeMaster(address master) public {\n', '        if (master == 0x0) revert();\n', '        if (msg.sender != upgradeMaster) revert();\n', '        upgradeMaster = master;\n', '    }\n', '\n', '    /**\n', '     * Child contract can enable to provide the condition when the upgrade can begun.\n', '     */\n', '    function canUpgrade() public constant returns (bool) {\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract CrowdsaleToken is ReleasableToken, UpgradeableToken {\n', '\n', '  /** Name and symbol were updated. */\n', '  event UpdatedTokenInformation(string newName, string newSymbol);\n', '\n', '  string public name;\n', '\n', '  string public symbol;\n', '\n', '  uint8 public decimals;\n', '\n', '  /**\n', '   * Construct the token.\n', '   *\n', '   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\n', '   *\n', '   * @param _name Token name\n', '   * @param _symbol Token symbol - should be all caps\n', '   * @param _initialSupply How many tokens we start with\n', '   * @param _decimals Number of decimal places\n', '   */\n', '  function CrowdsaleToken(string _name, string _symbol, uint _initialSupply, uint8 _decimals)\n', '    UpgradeableToken(msg.sender) public {\n', '\n', '    // Create any address, can be transferred\n', '    // to team multisig via changeOwner(),\n', '    // also remember to call setUpgradeMaster()\n', '    owner = msg.sender;\n', '\n', '    name = _name;\n', '    symbol = _symbol;\n', '\n', '    totalSupply_ = _initialSupply;\n', '\n', '    decimals = _decimals;\n', '\n', '    // Create initially all balance on the team multisig\n', '    balances[owner] = totalSupply_;\n', '  }\n', '\n', '  /**\n', '   * When token is released to be transferable, enforce no new tokens can be created.\n', '   */\n', '  function releaseTokenTransfer() public onlyReleaseAgent {\n', '    super.releaseTokenTransfer();\n', '  }\n', '\n', '  /**\n', '   * Allow upgrade agent functionality kick in only if the crowdsale was success.\n', '   */\n', '  function canUpgrade() public constant returns(bool) {\n', '    return released && super.canUpgrade();\n', '  }\n', '\n', '  /**\n', '   * Owner can update token information here.\n', '   *\n', '   * It is often useful to conceal the actual token association, until\n', '   * the token operations, like central issuance or reissuance have been completed.\n', '   *\n', '   * This function allows the token owner to rename the token after the operations\n', '   * have been completed and then point the audience to use the token contract.\n', '   */\n', '  function setTokenInformation(string _name, string _symbol) onlyOwner {\n', '    name = _name;\n', '    symbol = _symbol;\n', '\n', '    UpdatedTokenInformation(name, symbol);\n', '  }\n', '\n', '}\n', '\n', 'contract VestedToken is StandardToken, LimitedTransferToken {\n', '\n', '    uint256 MAX_GRANTS_PER_ADDRESS = 20;\n', '\n', '    struct TokenGrant {\n', '        address granter;     // 20 bytes\n', '        uint256 value;       // 32 bytes\n', '        uint64 cliff;\n', '        uint64 vesting;\n', '        uint64 start;        // 3 * 8 = 24 bytes\n', '        bool revokable;\n', '        bool burnsOnRevoke;  // 2 * 1 = 2 bits? or 2 bytes?\n', '    } // total 78 bytes = 3 sstore per operation (32 per sstore)\n', '\n', '    mapping (address => TokenGrant[]) public grants;\n', '\n', '    event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint256 grantId);\n', '\n', '    /**\n', '     * @dev Grant tokens to a specified address\n', '     * @param _to address The address which the tokens will be granted to.\n', '     * @param _value uint256 The amount of tokens to be granted.\n', '     * @param _start uint64 Time of the beginning of the grant.\n', '     * @param _cliff uint64 Time of the cliff period.\n', '     * @param _vesting uint64 The vesting period.\n', '     */\n', '    function grantVestedTokens(\n', '        address _to,\n', '        uint256 _value,\n', '        uint64 _start,\n', '        uint64 _cliff,\n', '        uint64 _vesting,\n', '        bool _revokable,\n', '        bool _burnsOnRevoke\n', '    ) public {\n', '\n', '        // Check for date inconsistencies that may cause unexpected behavior\n', '        require(_cliff >= _start && _vesting >= _cliff);\n', '\n', '        require(tokenGrantsCount(_to) < MAX_GRANTS_PER_ADDRESS);   // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\n', '\n', '        uint256 count = grants[_to].push(\n', '            TokenGrant(\n', '                _revokable ? msg.sender : 0, // avoid storing an extra 20 bytes when it is non-revokable\n', '                _value,\n', '                _cliff,\n', '                _vesting,\n', '                _start,\n', '                _revokable,\n', '                _burnsOnRevoke\n', '            )\n', '        );\n', '\n', '        transfer(_to, _value);\n', '\n', '        NewTokenGrant(msg.sender, _to, _value, count - 1);\n', '    }\n', '\n', '    /**\n', '     * @dev Revoke the grant of tokens of a specifed address.\n', '     * @param _holder The address which will have its tokens revoked.\n', '     * @param _grantId The id of the token grant.\n', '     */\n', '    function revokeTokenGrant(address _holder, uint256 _grantId) public {\n', '        TokenGrant storage grant = grants[_holder][_grantId];\n', '\n', '        require(grant.revokable);\n', '        require(grant.granter == msg.sender); // Only granter can revoke it\n', '\n', '        address receiver = grant.burnsOnRevoke ? 0xdead : msg.sender;\n', '\n', '        uint256 nonVested = nonVestedTokens(grant, uint64(now));\n', '\n', '        // remove grant from array\n', '        delete grants[_holder][_grantId];\n', '        grants[_holder][_grantId] = grants[_holder][grants[_holder].length.sub(1)];\n', '        grants[_holder].length -= 1;\n', '\n', '        balances[receiver] = balances[receiver].add(nonVested);\n', '        balances[_holder] = balances[_holder].sub(nonVested);\n', '\n', '        Transfer(_holder, receiver, nonVested);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Calculate the total amount of transferable tokens of a holder at a given time\n', '     * @param holder address The address of the holder\n', '     * @param time uint64 The specific time.\n', '     * @return An uint256 representing a holder&#39;s total amount of transferable tokens.\n', '     */\n', '    function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\n', '        uint256 grantIndex = tokenGrantsCount(holder);\n', '\n', '        if (grantIndex == 0) return super.transferableTokens(holder, time); // shortcut for holder without grants\n', '\n', '        // Iterate through all the grants the holder has, and add all non-vested tokens\n', '        uint256 nonVested = 0;\n', '        for (uint256 i = 0; i < grantIndex; i++) {\n', '            nonVested = SafeMath.add(nonVested, nonVestedTokens(grants[holder][i], time));\n', '        }\n', '\n', '        // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\n', '        uint256 vestedTransferable = SafeMath.sub(balanceOf(holder), nonVested);\n', '\n', '        // Return the minimum of how many vested can transfer and other value\n', '        // in case there are other limiting transferability factors (default is balanceOf)\n', '        return Math.min256(vestedTransferable, super.transferableTokens(holder, time));\n', '    }\n', '\n', '    /**\n', '     * @dev Check the amount of grants that an address has.\n', '     * @param _holder The holder of the grants.\n', '     * @return A uint256 representing the total amount of grants.\n', '     */\n', '    function tokenGrantsCount(address _holder) public constant returns (uint256 index) {\n', '        return grants[_holder].length;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate amount of vested tokens at a specific time\n', '     * @param tokens uint256 The amount of tokens granted\n', '     * @param time uint64 The time to be checked\n', '     * @param start uint64 The time representing the beginning of the grant\n', '     * @param cliff uint64  The cliff period, the period before nothing can be paid out\n', '     * @param vesting uint64 The vesting period\n', '     * @return An uint256 representing the amount of vested tokens of a specific grant\n', '     *  transferableTokens\n', '     *   |                         _/--------   vestedTokens rect\n', '     *   |                       _/\n', '     *   |                     _/\n', '     *   |                   _/\n', '     *   |                 _/\n', '     *   |                /\n', '     *   |              .|\n', '     *   |            .  |\n', '     *   |          .    |\n', '     *   |        .      |\n', '     *   |      .        |\n', '     *   |    .          |\n', '     *   +===+===========+---------+----------> time\n', '     *      Start       Cliff    Vesting\n', '     */\n', '    function calculateVestedTokens(\n', '        uint256 tokens,\n', '        uint256 time,\n', '        uint256 start,\n', '        uint256 cliff,\n', '        uint256 vesting) public pure returns (uint256)\n', '    {\n', '        // Shortcuts for before cliff and after vesting cases.\n', '        if (time < cliff) return 0;\n', '        if (time >= vesting) return tokens;\n', '\n', '        // Interpolate all vested tokens.\n', '        // As before cliff the shortcut returns 0, we can use just calculate a value\n', '        // in the vesting rect (as shown in above&#39;s figure)\n', '\n', '        // vestedTokens = (tokens * (time - start)) / (vesting - start)\n', '        uint256 vestedTokens = SafeMath.div(\n', '            SafeMath.mul(\n', '                tokens,\n', '                SafeMath.sub(time, start)\n', '            ),\n', '            SafeMath.sub(vesting, start)\n', '        );\n', '\n', '        return vestedTokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Get all information about a specific grant.\n', '     * @param _holder The address which will have its tokens revoked.\n', '     * @param _grantId The id of the token grant.\n', '     * @return Returns all the values that represent a TokenGrant(address, value, start, cliff,\n', '     * revokability, burnsOnRevoke, and vesting) plus the vested value at the current time.\n', '     */\n', '    function tokenGrant(address _holder, uint256 _grantId) public constant returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting, bool revokable, bool burnsOnRevoke) {\n', '        TokenGrant storage grant = grants[_holder][_grantId];\n', '\n', '        granter = grant.granter;\n', '        value = grant.value;\n', '        start = grant.start;\n', '        cliff = grant.cliff;\n', '        vesting = grant.vesting;\n', '        revokable = grant.revokable;\n', '        burnsOnRevoke = grant.burnsOnRevoke;\n', '\n', '        vested = vestedTokens(grant, uint64(now));\n', '    }\n', '\n', '    /**\n', '     * @dev Get the amount of vested tokens at a specific time.\n', '     * @param grant TokenGrant The grant to be checked.\n', '     * @param time The time to be checked\n', '     * @return An uint256 representing the amount of vested tokens of a specific grant at a specific time.\n', '     */\n', '    function vestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\n', '        return calculateVestedTokens(\n', '            grant.value,\n', '            uint256(time),\n', '            uint256(grant.start),\n', '            uint256(grant.cliff),\n', '            uint256(grant.vesting)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate the amount of non vested tokens at a specific time.\n', '     * @param grant TokenGrant The grant to be checked.\n', '     * @param time uint64 The time to be checked\n', '     * @return An uint256 representing the amount of non vested tokens of a specific grant on the\n', '     * passed time frame.\n', '     */\n', '    function nonVestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\n', '        return grant.value.sub(vestedTokens(grant, time));\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate the date when the holder can transfer all its tokens\n', '     * @param holder address The address of the holder\n', '     * @return An uint256 representing the date of the last transferable tokens.\n', '     */\n', '    function lastTokenIsTransferableDate(address holder) public constant returns (uint64 date) {\n', '        date = uint64(now);\n', '        uint256 grantIndex = grants[holder].length;\n', '        for (uint256 i = 0; i < grantIndex; i++) {\n', '            date = Math.max64(grants[holder][i].vesting, date);\n', '        }\n', '    }\n', '}\n', '\n', 'contract WemarkToken is CrowdsaleToken, BurnableToken, VestedToken {\n', '\n', '    modifier validDestination(address to) {\n', '        require(to != address(0x0));\n', '        require(to != address(this));\n', '        _;\n', '    }\n', '\n', '\n', '    function WemarkToken() CrowdsaleToken(&#39;WemarkToken-Test&#39;, &#39;WMK&#39;, 135000000 * (10 ** 18), 18) public {\n', '        /** Initially allow only token creator to transfer tokens */\n', '        setTransferAgent(msg.sender, true);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks modifier and allows transfer if tokens are not locked or not released.\n', '     * @param _to The address that will receive the tokens.\n', '     * @param _value The amount of tokens to be transferred.\n', '     */\n', '    function transfer(address _to, uint _value)\n', '        validDestination(_to)\n', '        canTransferReleasable(msg.sender)\n', '        canTransferLimitedTransferToken(msg.sender, _value) public returns (bool) {\n', '        // Call BasicToken.transfer()\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks modifier and allows transfer if tokens are not locked or not released.\n', '     * @param _from The address that will send the tokens.\n', '     * @param _to The address that will receive the tokens.\n', '     * @param _value The amount of tokens to be transferred.\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        validDestination(_to)\n', '        canTransferReleasable(_from)\n', '        canTransferLimitedTransferToken(_from, _value) public returns (bool) {\n', '        // Call StandardToken.transferForm()\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Prevent accounts that are blocked for transferring their tokens, from calling approve()\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        // Call StandardToken.transferForm()\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Prevent accounts that are blocked for transferring their tokens, from calling increaseApproval()\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        // Call StandardToken.transferForm()\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    /**\n', '     * @dev Can upgrade token contract only if token is released and super class allows too.\n', '     */\n', '    function canUpgrade() public constant returns(bool) {\n', '        return released && super.canUpgrade();\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate the total amount of transferable tokens of a holder for the current moment of calling.\n', '     * @param holder address The address of the holder\n', '     * @return An uint256 representing a holder&#39;s total amount of transferable tokens.\n', '     */\n', '    function transferableTokensNow(address holder) public constant returns (uint) {\n', '        return transferableTokens(holder, uint64(now));\n', '    }\n', '\n', '    function () payable {\n', '        // If ether is sent to this address, send it back\n', '        revert();\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '\n', '  // @notice An address for the transfer event where the burned tokens are transferred in a faux Transfer event\n', '  address public constant BURN_ADDRESS = 0;\n', '\n', '  /** How many tokens we burned */\n', '  event Burned(address burner, uint burnedAmount);\n', '\n', '  /**\n', '   * Burn extra tokens from a balance.\n', '   *\n', '   */\n', '  function burn(uint burnAmount) {\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(burnAmount);\n', '    totalSupply_ = totalSupply_.sub(burnAmount);\n', '    Burned(burner, burnAmount);\n', '\n', '    // Inform the blockchain explores that track the\n', '    // balances only by a transfer event that the balance in this\n', '    // address has decreased\n', '    Transfer(burner, BURN_ADDRESS, burnAmount);\n', '  }\n', '}\n', '\n', 'contract LimitedTransferToken is ERC20 {\n', '\n', '    /**\n', '     * @dev Checks whether it can transfer or otherwise throws.\n', '     */\n', '    modifier canTransferLimitedTransferToken(address _sender, uint256 _value) {\n', '        require(_value <= transferableTokens(_sender, uint64(now)));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Default transferable tokens function returns all tokens for a holder (no limit).\n', '     * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the\n', '     * specific logic for limiting token transferability for a holder over time.\n', '     */\n', '    function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\n', '        return balanceOf(holder);\n', '    }\n', '}\n', '\n', 'contract ReleasableToken is ERC20, Ownable {\n', '\n', '  /* The finalizer contract that allows unlift the transfer limits on this token */\n', '  address public releaseAgent;\n', '\n', '  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n', '  bool public released = false;\n', '\n', '  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n', '  mapping (address => bool) public transferAgents;\n', '\n', '  /** The function can be called only before or after the tokens have been releasesd */\n', '  modifier inReleaseState(bool releaseState) {\n', '    if(releaseState != released) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '\n', '  /** The function can be called only by a whitelisted release agent. */\n', '  modifier onlyReleaseAgent() {\n', '    if(msg.sender != releaseAgent) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Limit token transfer until the crowdsale is over.\n', '   *\n', '   */\n', '  modifier canTransferReleasable(address _sender) {\n', '\n', '    if(!released) {\n', '        if(!transferAgents[_sender]) {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Set the contract that can call release and make the token transferable.\n', '   *\n', '   * Design choice. Allow reset the release agent to fix fat finger mistakes.\n', '   */\n', '  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n', "    // We don't do interface check here as we might want to a normal wallet address to act as a release agent\n", '    releaseAgent = addr;\n', '  }\n', '\n', '  /**\n', '   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n', '   */\n', '  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n', '    transferAgents[addr] = state;\n', '  }\n', '\n', '  /**\n', '   * One way function to release the tokens to the wild.\n', '   *\n', '   * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\n', '   */\n', '  function releaseTokenTransfer() public onlyReleaseAgent {\n', '    released = true;\n', '  }\n', '}\n', '\n', 'contract UpgradeAgent {\n', '\n', '  uint public originalSupply;\n', '\n', '  /** Interface marker */\n', '  function isUpgradeAgent() public constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function upgradeFrom(address _from, uint256 _value) public;\n', '}\n', '\n', 'contract UpgradeableToken is StandardToken {\n', '\n', '    /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n', '    address public upgradeMaster;\n', '\n', '    /** The next contract where the tokens will be migrated. */\n', '    UpgradeAgent public upgradeAgent;\n', '\n', '    /** How many tokens we have upgraded by now. */\n', '    uint256 public totalUpgraded;\n', '\n', '    /**\n', '     * Upgrade states.\n', '     *\n', '     * - NotAllowed: The child contract has not reached a condition where the upgrade can begin\n', "     * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\n", '     * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\n', '     * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n', '     *\n', '     */\n', '    enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n', '\n', '    /**\n', '     * Somebody has upgraded some of his tokens.\n', '     */\n', '    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    /**\n', '     * New upgrade agent available.\n', '     */\n', '    event UpgradeAgentSet(address agent);\n', '\n', '    /**\n', '     * Do not allow construction without upgrade master set.\n', '     */\n', '    function UpgradeableToken(address _upgradeMaster) public {\n', '        upgradeMaster = _upgradeMaster;\n', '    }\n', '\n', '    /**\n', '     * Allow the token holder to upgrade some of their tokens to a new contract.\n', '     */\n', '    function upgrade(uint256 value) public {\n', '\n', '        UpgradeState state = getUpgradeState();\n', '        if (!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {\n', '            // Called in a bad state\n', '            revert();\n', '        }\n', '\n', '        // Validate input value.\n', '        if (value == 0) revert();\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '\n', '        // Take tokens out from circulation\n', '        totalSupply_ = totalSupply_.sub(value);\n', '        totalUpgraded = totalUpgraded.add(value);\n', '\n', '        // Upgrade agent reissues the tokens\n', '        upgradeAgent.upgradeFrom(msg.sender, value);\n', '        Upgrade(msg.sender, upgradeAgent, value);\n', '    }\n', '\n', '    /**\n', '     * Set an upgrade agent that handles\n', '     */\n', '    function setUpgradeAgent(address agent) external {\n', '        if (!canUpgrade()) {\n', '            // The token is not yet in a state that we could think upgrading\n', '            revert();\n', '        }\n', '\n', '        if (agent == 0x0) revert();\n', '        // Only a master can designate the next agent\n', '        if (msg.sender != upgradeMaster) revert();\n', '        // Upgrade has already begun for an agent\n', '        if (getUpgradeState() == UpgradeState.Upgrading) revert();\n', '\n', '        upgradeAgent = UpgradeAgent(agent);\n', '\n', '        // Bad interface\n', '        if (!upgradeAgent.isUpgradeAgent()) revert();\n', '        // Make sure that token supplies match in source and target\n', '        if (upgradeAgent.originalSupply() != totalSupply_) revert();\n', '\n', '        UpgradeAgentSet(upgradeAgent);\n', '    }\n', '\n', '    /**\n', '     * Get the state of the token upgrade.\n', '     */\n', '    function getUpgradeState() public constant returns (UpgradeState) {\n', '        if (!canUpgrade()) return UpgradeState.NotAllowed;\n', '        else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n', '        else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n', '        else return UpgradeState.Upgrading;\n', '    }\n', '\n', '    /**\n', '     * Change the upgrade master.\n', '     *\n', '     * This allows us to set a new owner for the upgrade mechanism.\n', '     */\n', '    function setUpgradeMaster(address master) public {\n', '        if (master == 0x0) revert();\n', '        if (msg.sender != upgradeMaster) revert();\n', '        upgradeMaster = master;\n', '    }\n', '\n', '    /**\n', '     * Child contract can enable to provide the condition when the upgrade can begun.\n', '     */\n', '    function canUpgrade() public constant returns (bool) {\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract CrowdsaleToken is ReleasableToken, UpgradeableToken {\n', '\n', '  /** Name and symbol were updated. */\n', '  event UpdatedTokenInformation(string newName, string newSymbol);\n', '\n', '  string public name;\n', '\n', '  string public symbol;\n', '\n', '  uint8 public decimals;\n', '\n', '  /**\n', '   * Construct the token.\n', '   *\n', '   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\n', '   *\n', '   * @param _name Token name\n', '   * @param _symbol Token symbol - should be all caps\n', '   * @param _initialSupply How many tokens we start with\n', '   * @param _decimals Number of decimal places\n', '   */\n', '  function CrowdsaleToken(string _name, string _symbol, uint _initialSupply, uint8 _decimals)\n', '    UpgradeableToken(msg.sender) public {\n', '\n', '    // Create any address, can be transferred\n', '    // to team multisig via changeOwner(),\n', '    // also remember to call setUpgradeMaster()\n', '    owner = msg.sender;\n', '\n', '    name = _name;\n', '    symbol = _symbol;\n', '\n', '    totalSupply_ = _initialSupply;\n', '\n', '    decimals = _decimals;\n', '\n', '    // Create initially all balance on the team multisig\n', '    balances[owner] = totalSupply_;\n', '  }\n', '\n', '  /**\n', '   * When token is released to be transferable, enforce no new tokens can be created.\n', '   */\n', '  function releaseTokenTransfer() public onlyReleaseAgent {\n', '    super.releaseTokenTransfer();\n', '  }\n', '\n', '  /**\n', '   * Allow upgrade agent functionality kick in only if the crowdsale was success.\n', '   */\n', '  function canUpgrade() public constant returns(bool) {\n', '    return released && super.canUpgrade();\n', '  }\n', '\n', '  /**\n', '   * Owner can update token information here.\n', '   *\n', '   * It is often useful to conceal the actual token association, until\n', '   * the token operations, like central issuance or reissuance have been completed.\n', '   *\n', '   * This function allows the token owner to rename the token after the operations\n', '   * have been completed and then point the audience to use the token contract.\n', '   */\n', '  function setTokenInformation(string _name, string _symbol) onlyOwner {\n', '    name = _name;\n', '    symbol = _symbol;\n', '\n', '    UpdatedTokenInformation(name, symbol);\n', '  }\n', '\n', '}\n', '\n', 'contract VestedToken is StandardToken, LimitedTransferToken {\n', '\n', '    uint256 MAX_GRANTS_PER_ADDRESS = 20;\n', '\n', '    struct TokenGrant {\n', '        address granter;     // 20 bytes\n', '        uint256 value;       // 32 bytes\n', '        uint64 cliff;\n', '        uint64 vesting;\n', '        uint64 start;        // 3 * 8 = 24 bytes\n', '        bool revokable;\n', '        bool burnsOnRevoke;  // 2 * 1 = 2 bits? or 2 bytes?\n', '    } // total 78 bytes = 3 sstore per operation (32 per sstore)\n', '\n', '    mapping (address => TokenGrant[]) public grants;\n', '\n', '    event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint256 grantId);\n', '\n', '    /**\n', '     * @dev Grant tokens to a specified address\n', '     * @param _to address The address which the tokens will be granted to.\n', '     * @param _value uint256 The amount of tokens to be granted.\n', '     * @param _start uint64 Time of the beginning of the grant.\n', '     * @param _cliff uint64 Time of the cliff period.\n', '     * @param _vesting uint64 The vesting period.\n', '     */\n', '    function grantVestedTokens(\n', '        address _to,\n', '        uint256 _value,\n', '        uint64 _start,\n', '        uint64 _cliff,\n', '        uint64 _vesting,\n', '        bool _revokable,\n', '        bool _burnsOnRevoke\n', '    ) public {\n', '\n', '        // Check for date inconsistencies that may cause unexpected behavior\n', '        require(_cliff >= _start && _vesting >= _cliff);\n', '\n', '        require(tokenGrantsCount(_to) < MAX_GRANTS_PER_ADDRESS);   // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\n', '\n', '        uint256 count = grants[_to].push(\n', '            TokenGrant(\n', '                _revokable ? msg.sender : 0, // avoid storing an extra 20 bytes when it is non-revokable\n', '                _value,\n', '                _cliff,\n', '                _vesting,\n', '                _start,\n', '                _revokable,\n', '                _burnsOnRevoke\n', '            )\n', '        );\n', '\n', '        transfer(_to, _value);\n', '\n', '        NewTokenGrant(msg.sender, _to, _value, count - 1);\n', '    }\n', '\n', '    /**\n', '     * @dev Revoke the grant of tokens of a specifed address.\n', '     * @param _holder The address which will have its tokens revoked.\n', '     * @param _grantId The id of the token grant.\n', '     */\n', '    function revokeTokenGrant(address _holder, uint256 _grantId) public {\n', '        TokenGrant storage grant = grants[_holder][_grantId];\n', '\n', '        require(grant.revokable);\n', '        require(grant.granter == msg.sender); // Only granter can revoke it\n', '\n', '        address receiver = grant.burnsOnRevoke ? 0xdead : msg.sender;\n', '\n', '        uint256 nonVested = nonVestedTokens(grant, uint64(now));\n', '\n', '        // remove grant from array\n', '        delete grants[_holder][_grantId];\n', '        grants[_holder][_grantId] = grants[_holder][grants[_holder].length.sub(1)];\n', '        grants[_holder].length -= 1;\n', '\n', '        balances[receiver] = balances[receiver].add(nonVested);\n', '        balances[_holder] = balances[_holder].sub(nonVested);\n', '\n', '        Transfer(_holder, receiver, nonVested);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Calculate the total amount of transferable tokens of a holder at a given time\n', '     * @param holder address The address of the holder\n', '     * @param time uint64 The specific time.\n', "     * @return An uint256 representing a holder's total amount of transferable tokens.\n", '     */\n', '    function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\n', '        uint256 grantIndex = tokenGrantsCount(holder);\n', '\n', '        if (grantIndex == 0) return super.transferableTokens(holder, time); // shortcut for holder without grants\n', '\n', '        // Iterate through all the grants the holder has, and add all non-vested tokens\n', '        uint256 nonVested = 0;\n', '        for (uint256 i = 0; i < grantIndex; i++) {\n', '            nonVested = SafeMath.add(nonVested, nonVestedTokens(grants[holder][i], time));\n', '        }\n', '\n', '        // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\n', '        uint256 vestedTransferable = SafeMath.sub(balanceOf(holder), nonVested);\n', '\n', '        // Return the minimum of how many vested can transfer and other value\n', '        // in case there are other limiting transferability factors (default is balanceOf)\n', '        return Math.min256(vestedTransferable, super.transferableTokens(holder, time));\n', '    }\n', '\n', '    /**\n', '     * @dev Check the amount of grants that an address has.\n', '     * @param _holder The holder of the grants.\n', '     * @return A uint256 representing the total amount of grants.\n', '     */\n', '    function tokenGrantsCount(address _holder) public constant returns (uint256 index) {\n', '        return grants[_holder].length;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate amount of vested tokens at a specific time\n', '     * @param tokens uint256 The amount of tokens granted\n', '     * @param time uint64 The time to be checked\n', '     * @param start uint64 The time representing the beginning of the grant\n', '     * @param cliff uint64  The cliff period, the period before nothing can be paid out\n', '     * @param vesting uint64 The vesting period\n', '     * @return An uint256 representing the amount of vested tokens of a specific grant\n', '     *  transferableTokens\n', '     *   |                         _/--------   vestedTokens rect\n', '     *   |                       _/\n', '     *   |                     _/\n', '     *   |                   _/\n', '     *   |                 _/\n', '     *   |                /\n', '     *   |              .|\n', '     *   |            .  |\n', '     *   |          .    |\n', '     *   |        .      |\n', '     *   |      .        |\n', '     *   |    .          |\n', '     *   +===+===========+---------+----------> time\n', '     *      Start       Cliff    Vesting\n', '     */\n', '    function calculateVestedTokens(\n', '        uint256 tokens,\n', '        uint256 time,\n', '        uint256 start,\n', '        uint256 cliff,\n', '        uint256 vesting) public pure returns (uint256)\n', '    {\n', '        // Shortcuts for before cliff and after vesting cases.\n', '        if (time < cliff) return 0;\n', '        if (time >= vesting) return tokens;\n', '\n', '        // Interpolate all vested tokens.\n', '        // As before cliff the shortcut returns 0, we can use just calculate a value\n', "        // in the vesting rect (as shown in above's figure)\n", '\n', '        // vestedTokens = (tokens * (time - start)) / (vesting - start)\n', '        uint256 vestedTokens = SafeMath.div(\n', '            SafeMath.mul(\n', '                tokens,\n', '                SafeMath.sub(time, start)\n', '            ),\n', '            SafeMath.sub(vesting, start)\n', '        );\n', '\n', '        return vestedTokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Get all information about a specific grant.\n', '     * @param _holder The address which will have its tokens revoked.\n', '     * @param _grantId The id of the token grant.\n', '     * @return Returns all the values that represent a TokenGrant(address, value, start, cliff,\n', '     * revokability, burnsOnRevoke, and vesting) plus the vested value at the current time.\n', '     */\n', '    function tokenGrant(address _holder, uint256 _grantId) public constant returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting, bool revokable, bool burnsOnRevoke) {\n', '        TokenGrant storage grant = grants[_holder][_grantId];\n', '\n', '        granter = grant.granter;\n', '        value = grant.value;\n', '        start = grant.start;\n', '        cliff = grant.cliff;\n', '        vesting = grant.vesting;\n', '        revokable = grant.revokable;\n', '        burnsOnRevoke = grant.burnsOnRevoke;\n', '\n', '        vested = vestedTokens(grant, uint64(now));\n', '    }\n', '\n', '    /**\n', '     * @dev Get the amount of vested tokens at a specific time.\n', '     * @param grant TokenGrant The grant to be checked.\n', '     * @param time The time to be checked\n', '     * @return An uint256 representing the amount of vested tokens of a specific grant at a specific time.\n', '     */\n', '    function vestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\n', '        return calculateVestedTokens(\n', '            grant.value,\n', '            uint256(time),\n', '            uint256(grant.start),\n', '            uint256(grant.cliff),\n', '            uint256(grant.vesting)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate the amount of non vested tokens at a specific time.\n', '     * @param grant TokenGrant The grant to be checked.\n', '     * @param time uint64 The time to be checked\n', '     * @return An uint256 representing the amount of non vested tokens of a specific grant on the\n', '     * passed time frame.\n', '     */\n', '    function nonVestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\n', '        return grant.value.sub(vestedTokens(grant, time));\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate the date when the holder can transfer all its tokens\n', '     * @param holder address The address of the holder\n', '     * @return An uint256 representing the date of the last transferable tokens.\n', '     */\n', '    function lastTokenIsTransferableDate(address holder) public constant returns (uint64 date) {\n', '        date = uint64(now);\n', '        uint256 grantIndex = grants[holder].length;\n', '        for (uint256 i = 0; i < grantIndex; i++) {\n', '            date = Math.max64(grants[holder][i].vesting, date);\n', '        }\n', '    }\n', '}\n', '\n', 'contract WemarkToken is CrowdsaleToken, BurnableToken, VestedToken {\n', '\n', '    modifier validDestination(address to) {\n', '        require(to != address(0x0));\n', '        require(to != address(this));\n', '        _;\n', '    }\n', '\n', '\n', "    function WemarkToken() CrowdsaleToken('WemarkToken-Test', 'WMK', 135000000 * (10 ** 18), 18) public {\n", '        /** Initially allow only token creator to transfer tokens */\n', '        setTransferAgent(msg.sender, true);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks modifier and allows transfer if tokens are not locked or not released.\n', '     * @param _to The address that will receive the tokens.\n', '     * @param _value The amount of tokens to be transferred.\n', '     */\n', '    function transfer(address _to, uint _value)\n', '        validDestination(_to)\n', '        canTransferReleasable(msg.sender)\n', '        canTransferLimitedTransferToken(msg.sender, _value) public returns (bool) {\n', '        // Call BasicToken.transfer()\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks modifier and allows transfer if tokens are not locked or not released.\n', '     * @param _from The address that will send the tokens.\n', '     * @param _to The address that will receive the tokens.\n', '     * @param _value The amount of tokens to be transferred.\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        validDestination(_to)\n', '        canTransferReleasable(_from)\n', '        canTransferLimitedTransferToken(_from, _value) public returns (bool) {\n', '        // Call StandardToken.transferForm()\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Prevent accounts that are blocked for transferring their tokens, from calling approve()\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        // Call StandardToken.transferForm()\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Prevent accounts that are blocked for transferring their tokens, from calling increaseApproval()\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        // Call StandardToken.transferForm()\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    /**\n', '     * @dev Can upgrade token contract only if token is released and super class allows too.\n', '     */\n', '    function canUpgrade() public constant returns(bool) {\n', '        return released && super.canUpgrade();\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate the total amount of transferable tokens of a holder for the current moment of calling.\n', '     * @param holder address The address of the holder\n', "     * @return An uint256 representing a holder's total amount of transferable tokens.\n", '     */\n', '    function transferableTokensNow(address holder) public constant returns (uint) {\n', '        return transferableTokens(holder, uint64(now));\n', '    }\n', '\n', '    function () payable {\n', '        // If ether is sent to this address, send it back\n', '        revert();\n', '    }\n', '}']
