['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Xi Ma La Ya contract\n', '//\n', '// Deployed to : msg.sender\n', '// Symbol      : XMLY\n', '// Name        : XiMaLaYa\n', '// Total supply: 100000000000\n', '// Decimals    : 18\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = 0x5B807E379170d42f3B099C01A5399a2e1e58963B;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '    \n', '    function withdrawBalance() external onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract XMLYToken is ERC20Interface, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    mapping(address => bool) freezed;\n', '    mapping(address => uint) freezeAmount;\n', '    mapping(address => uint) unlockTime;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function XMLYToken() public {\n', '        symbol = "XMLY";\n', '        name = "XiMaLaYa";\n', '        decimals = 18;\n', '        _totalSupply = 100000000000000000000000000000;\n', '        balances[0x5B807E379170d42f3B099C01A5399a2e1e58963B] = _totalSupply;\n', '        Transfer(address(0), 0x5B807E379170d42f3B099C01A5399a2e1e58963B, _totalSupply);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account tokenOwner\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to to account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        if(freezed[msg.sender] == false){\n', '            balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '            balances[to] = safeAdd(balances[to], tokens);\n', '            Transfer(msg.sender, to, tokens);\n', '        } else {\n', '            if(balances[msg.sender] > freezeAmount[msg.sender]) {\n', '                require(tokens <= safeSub(balances[msg.sender], freezeAmount[msg.sender]));\n', '                balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '                balances[to] = safeAdd(balances[to], tokens);\n', '                Transfer(msg.sender, to, tokens);\n', '            }\n', '        }\n', '            \n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for spender to transferFrom(...) tokens\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        require(freezed[msg.sender] != true);\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer tokens from the from account to the to account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the from account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        require(freezed[msg.sender] != true);\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for spender to transferFrom(...) tokens\n', '    // from the token owner&#39;s account. The spender contract function\n', '    // receiveApproval(...) is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        require(freezed[msg.sender] != true);\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Burn Tokens\n', '    // ------------------------------------------------------------------------\n', '    function burn(uint amount) public onlyOwner {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], amount);\n', '        _totalSupply = safeSub(_totalSupply, amount);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Freeze Tokens\n', '    // ------------------------------------------------------------------------\n', '    function freeze(address user, uint amount, uint period) public onlyOwner {\n', '        require(balances[user] >= amount);\n', '        freezed[user] = true;\n', '        unlockTime[user] = uint(now) + period;\n', '        freezeAmount[user] = amount;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // UnFreeze Tokens\n', '    // ------------------------------------------------------------------------\n', '    function unFreeze() public {\n', '        require(freezed[msg.sender] == true);\n', '        require(unlockTime[msg.sender] < uint(now));\n', '        freezed[msg.sender] = false;\n', '        freezeAmount[msg.sender] = 0;\n', '    }\n', '    \n', '    function ifFreeze(address user) public view returns (\n', '        bool check, \n', '        uint amount, \n', '        uint timeLeft\n', '    ) {\n', '        check = freezed[user];\n', '        amount = freezeAmount[user];\n', '        timeLeft = unlockTime[user] - uint(now);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Accept ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Xi Ma La Ya contract\n', '//\n', '// Deployed to : msg.sender\n', '// Symbol      : XMLY\n', '// Name        : XiMaLaYa\n', '// Total supply: 100000000000\n', '// Decimals    : 18\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = 0x5B807E379170d42f3B099C01A5399a2e1e58963B;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '    \n', '    function withdrawBalance() external onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract XMLYToken is ERC20Interface, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    mapping(address => bool) freezed;\n', '    mapping(address => uint) freezeAmount;\n', '    mapping(address => uint) unlockTime;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function XMLYToken() public {\n', '        symbol = "XMLY";\n', '        name = "XiMaLaYa";\n', '        decimals = 18;\n', '        _totalSupply = 100000000000000000000000000000;\n', '        balances[0x5B807E379170d42f3B099C01A5399a2e1e58963B] = _totalSupply;\n', '        Transfer(address(0), 0x5B807E379170d42f3B099C01A5399a2e1e58963B, _totalSupply);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account tokenOwner\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to to account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        if(freezed[msg.sender] == false){\n', '            balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '            balances[to] = safeAdd(balances[to], tokens);\n', '            Transfer(msg.sender, to, tokens);\n', '        } else {\n', '            if(balances[msg.sender] > freezeAmount[msg.sender]) {\n', '                require(tokens <= safeSub(balances[msg.sender], freezeAmount[msg.sender]));\n', '                balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '                balances[to] = safeAdd(balances[to], tokens);\n', '                Transfer(msg.sender, to, tokens);\n', '            }\n', '        }\n', '            \n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for spender to transferFrom(...) tokens\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        require(freezed[msg.sender] != true);\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer tokens from the from account to the to account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the from account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        require(freezed[msg.sender] != true);\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for spender to transferFrom(...) tokens\n', "    // from the token owner's account. The spender contract function\n", '    // receiveApproval(...) is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        require(freezed[msg.sender] != true);\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Burn Tokens\n', '    // ------------------------------------------------------------------------\n', '    function burn(uint amount) public onlyOwner {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], amount);\n', '        _totalSupply = safeSub(_totalSupply, amount);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Freeze Tokens\n', '    // ------------------------------------------------------------------------\n', '    function freeze(address user, uint amount, uint period) public onlyOwner {\n', '        require(balances[user] >= amount);\n', '        freezed[user] = true;\n', '        unlockTime[user] = uint(now) + period;\n', '        freezeAmount[user] = amount;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // UnFreeze Tokens\n', '    // ------------------------------------------------------------------------\n', '    function unFreeze() public {\n', '        require(freezed[msg.sender] == true);\n', '        require(unlockTime[msg.sender] < uint(now));\n', '        freezed[msg.sender] = false;\n', '        freezeAmount[msg.sender] = 0;\n', '    }\n', '    \n', '    function ifFreeze(address user) public view returns (\n', '        bool check, \n', '        uint amount, \n', '        uint timeLeft\n', '    ) {\n', '        check = freezed[user];\n', '        amount = freezeAmount[user];\n', '        timeLeft = unlockTime[user] - uint(now);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Accept ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
