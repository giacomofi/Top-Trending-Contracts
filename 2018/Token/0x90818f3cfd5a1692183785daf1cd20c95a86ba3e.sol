['pragma solidity ^0.4.24;\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '\n', '    // ERC Token Standard #223 Interface\n', '    // https://github.com/ethereum/EIPs/issues/223\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '\n', '    function transfer(address _to, uint _value, bytes _data) external returns (bool success);\n', '\n', '    // approveAndCall\n', '    function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\n', '\n', '    // ERC Token Standard #20 Interface\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '\n', '\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '    // bulk operations\n', '    function transferBulk(address[] to, uint[] tokens) public;\n', '    function approveBulk(address[] spender, uint[] tokens) public;\n', '}\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/// @author https://BlockChainArchitect.iocontract Bank is CutiePluginBase\n', 'contract PluginInterface\n', '{\n', '    /// @dev simply a boolean to indicate this is the contract we expect to be\n', '    function isPluginInterface() public pure returns (bool);\n', '\n', '    function onRemove() public;\n', '\n', '    /// @dev Begins new feature.\n', '    /// @param _cutieId - ID of token to auction, sender must be owner.\n', '    /// @param _parameter - arbitrary parameter\n', '    /// @param _seller - Old owner, if not the message sender\n', '    function run(\n', '        uint40 _cutieId,\n', '        uint256 _parameter,\n', '        address _seller\n', '    ) \n', '    public\n', '    payable;\n', '\n', '    /// @dev Begins new feature, approved and signed by COO.\n', '    /// @param _cutieId - ID of token to auction, sender must be owner.\n', '    /// @param _parameter - arbitrary parameter\n', '    function runSigned(\n', '        uint40 _cutieId,\n', '        uint256 _parameter,\n', '        address _owner\n', '    )\n', '    external\n', '    payable;\n', '\n', '    function withdraw() public;\n', '}\n', '\n', '\n', 'contract CuteCoinInterface is ERC20Interface\n', '{\n', '    function mint(address target, uint256 mintedAmount) public;\n', '    function mintBulk(address[] target, uint256[] mintedAmount) external;\n', '    function burn(uint256 amount) external;\n', '}\n', '\n', '\n', '/// @dev Receives payments for payd features from players for Blockchain Cuties\n', '/// @author https://BlockChainArchitect.io\n', 'contract CuteCoinShop is Pausable\n', '{\n', '    CuteCoinInterface token;\n', '\n', '    event CuteCoinShopBuy(address sender, uint value, bytes extraData);\n', '\n', '    function setToken(CuteCoinInterface _token)\n', '        external\n', '        onlyOwner\n', '    {\n', '        token = _token;\n', '    }\n', '\n', '    function receiveApproval(address _sender, uint256 _value, address _tokenContract, bytes _extraData)\n', '        external\n', '        whenNotPaused\n', '    {\n', '        require(_tokenContract == address(token));\n', '        require(token.transferFrom(_sender, address(this), _value));\n', '        token.burn(_value);\n', '\n', '        emit CuteCoinShopBuy(_sender, _value, _extraData);\n', '    }\n', '\n', '    // @dev Transfers to _withdrawToAddress all tokens controlled by\n', '    // contract _tokenContract.\n', '    function withdrawTokenFromBalance(ERC20Interface _tokenContract, address _withdrawToAddress)\n', '        external\n', '        onlyOwner\n', '    {\n', '        uint256 balance = _tokenContract.balanceOf(address(this));\n', '        _tokenContract.transfer(_withdrawToAddress, balance);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '\n', '    // ERC Token Standard #223 Interface\n', '    // https://github.com/ethereum/EIPs/issues/223\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '\n', '    function transfer(address _to, uint _value, bytes _data) external returns (bool success);\n', '\n', '    // approveAndCall\n', '    function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\n', '\n', '    // ERC Token Standard #20 Interface\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '\n', '\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '    // bulk operations\n', '    function transferBulk(address[] to, uint[] tokens) public;\n', '    function approveBulk(address[] spender, uint[] tokens) public;\n', '}\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/// @author https://BlockChainArchitect.iocontract Bank is CutiePluginBase\n', 'contract PluginInterface\n', '{\n', '    /// @dev simply a boolean to indicate this is the contract we expect to be\n', '    function isPluginInterface() public pure returns (bool);\n', '\n', '    function onRemove() public;\n', '\n', '    /// @dev Begins new feature.\n', '    /// @param _cutieId - ID of token to auction, sender must be owner.\n', '    /// @param _parameter - arbitrary parameter\n', '    /// @param _seller - Old owner, if not the message sender\n', '    function run(\n', '        uint40 _cutieId,\n', '        uint256 _parameter,\n', '        address _seller\n', '    ) \n', '    public\n', '    payable;\n', '\n', '    /// @dev Begins new feature, approved and signed by COO.\n', '    /// @param _cutieId - ID of token to auction, sender must be owner.\n', '    /// @param _parameter - arbitrary parameter\n', '    function runSigned(\n', '        uint40 _cutieId,\n', '        uint256 _parameter,\n', '        address _owner\n', '    )\n', '    external\n', '    payable;\n', '\n', '    function withdraw() public;\n', '}\n', '\n', '\n', 'contract CuteCoinInterface is ERC20Interface\n', '{\n', '    function mint(address target, uint256 mintedAmount) public;\n', '    function mintBulk(address[] target, uint256[] mintedAmount) external;\n', '    function burn(uint256 amount) external;\n', '}\n', '\n', '\n', '/// @dev Receives payments for payd features from players for Blockchain Cuties\n', '/// @author https://BlockChainArchitect.io\n', 'contract CuteCoinShop is Pausable\n', '{\n', '    CuteCoinInterface token;\n', '\n', '    event CuteCoinShopBuy(address sender, uint value, bytes extraData);\n', '\n', '    function setToken(CuteCoinInterface _token)\n', '        external\n', '        onlyOwner\n', '    {\n', '        token = _token;\n', '    }\n', '\n', '    function receiveApproval(address _sender, uint256 _value, address _tokenContract, bytes _extraData)\n', '        external\n', '        whenNotPaused\n', '    {\n', '        require(_tokenContract == address(token));\n', '        require(token.transferFrom(_sender, address(this), _value));\n', '        token.burn(_value);\n', '\n', '        emit CuteCoinShopBuy(_sender, _value, _extraData);\n', '    }\n', '\n', '    // @dev Transfers to _withdrawToAddress all tokens controlled by\n', '    // contract _tokenContract.\n', '    function withdrawTokenFromBalance(ERC20Interface _tokenContract, address _withdrawToAddress)\n', '        external\n', '        onlyOwner\n', '    {\n', '        uint256 balance = _tokenContract.balanceOf(address(this));\n', '        _tokenContract.transfer(_withdrawToAddress, balance);\n', '    }\n', '}']
