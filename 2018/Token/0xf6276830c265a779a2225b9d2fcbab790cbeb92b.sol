['pragma solidity ^0.4.19;\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/XcelToken.sol\n', '\n', '/*\n', '    Prereq for deploying this contracts\n', '    1) TokenBuyer address is created\n', '\n', '    To start team vesting\n', '    1) Create TeamVesting beneficiary address\n', '    2) Deploy team allocation Vesting contract (StepVesting)\n', '    3) Call XcelToken.initiateTeamVesting using the contact owner account\n', '    4) Call assignFoundationSupply to manage founcation allocation via contract\n', '    5) Call assignReserveSupply to manage reserveFundSupply via contracts\n', '    6) Set Loyalty wallet address .\n', '    7) Call allocateLoyaltySpend to move some tokens from loyalty pool to Loyalty wallet as needed\n', '\n', '*/\n', '\n', 'contract XcelToken is PausableToken, BurnableToken  {\n', '\n', '    string public constant name = "XCELTOKEN";\n', '\n', '    string public constant symbol = "XCEL";\n', '\n', '    /* see issue 724 where Vitalik is proposing mandatory 18 decimal places for erc20 tokens\n', '    https://github.com/ethereum/EIPs/issues/724\n', '    */\n', '    uint8 public constant decimals = 18;\n', '\n', '    // 50 Billion tokens\n', '    uint256 public constant INITIAL_SUPPLY = 50 * (10**9) * (10 ** uint256(decimals));\n', '\n', '    // fundation supply 10%\n', '    uint256 public constant foundationSupply = 5 * (10**9) * (10 ** uint256(decimals));\n', '\n', '    // founders supply 15%\n', '    uint256 public constant teamSupply = 7.5 * (10**9) * (10 ** uint256(decimals));\n', '\n', '    // public sale supply 60%\n', '    uint256 public publicSaleSupply = 30 * (10**9) * (10 ** uint256(decimals));\n', '\n', '    //imp/cmp supply 5%\n', '    uint256 public loyaltySupply = 2.5 * (10**9) * (10 ** uint256(decimals));\n', '\n', '    //reserve fund supply 10%\n', '    uint256 public constant reserveFundSupply = 5 * (10**9) * (10 ** uint256(decimals));\n', '\n', '    // Only Address that can buy public sale supply\n', '    address public tokenBuyerWallet =0x0;\n', '\n', '    //wallet to disperse loyalty points as needed.\n', '    address public loyaltyWallet = 0x0;\n', '\n', '    //address where team vesting contract will relase the team vested tokens\n', '    address public teamVestingContractAddress;\n', '\n', '    bool public isTeamVestingInitiated = false;\n', '\n', '    bool public isFoundationSupplyAssigned = false;\n', '\n', '    bool public isReserveSupplyAssigned = false;\n', '\n', '    //Sale from public allocation via tokenBuyerWallet\n', '    event TokensBought(address indexed _to, uint256 _totalAmount, bytes4 _currency, bytes32 _txHash);\n', '    event LoyaltySupplyAllocated(address indexed _to, uint256 _totalAmount);\n', '    event LoyaltyWalletAddressChanged(address indexed _oldAddress, address indexed _newAddress);\n', '\n', '    // Token Buyer has special to transfer from public sale supply\n', '    modifier onlyTokenBuyer() {\n', '        require(msg.sender == tokenBuyerWallet);\n', '        _;\n', '    }\n', '\n', '    // No zero address transaction\n', '    modifier nonZeroAddress(address _to) {\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '\n', '    function XcelToken(address _tokenBuyerWallet)\n', '        public\n', '        nonZeroAddress(_tokenBuyerWallet){\n', '\n', '        tokenBuyerWallet = _tokenBuyerWallet;\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '\n', '        //mint all tokens\n', '        balances[msg.sender] = totalSupply_;\n', '        Transfer(address(0x0), msg.sender, totalSupply_);\n', '\n', '        //Allow  token buyer to transfer public sale allocation\n', '        //need to revisit to see if this needs to be broken into 3 parts so that\n', '        //one address does not compromise 60% of token\n', '        require(approve(tokenBuyerWallet, 0));\n', '        require(approve(tokenBuyerWallet, publicSaleSupply));\n', '\n', '    }\n', '\n', '    /**\n', '        Allow contract owner to burn token\n', '    **/\n', '    function burn(uint256 _value)\n', '      public\n', '      onlyOwner {\n', '        super.burn(_value);\n', '    }\n', '\n', '    /**\n', '    @dev Initiate the team vesting by transferring the teamSupply t0 _teamVestingContractAddress\n', '    @param _teamVestingContractAddress  address of the team vesting contract alreadt deployed with the\n', '        beneficiary address\n', '    */\n', '    function initiateTeamVesting(address _teamVestingContractAddress)\n', '    external\n', '    onlyOwner\n', '    nonZeroAddress(_teamVestingContractAddress) {\n', '        require(!isTeamVestingInitiated);\n', '        teamVestingContractAddress = _teamVestingContractAddress;\n', '\n', '        isTeamVestingInitiated = true;\n', '        //transfer team supply to team vesting contract\n', '        require(transfer(_teamVestingContractAddress, teamSupply));\n', '\n', '\n', '    }\n', '\n', '    /**\n', '    @dev allow changing of loyalty wallet as these wallets might be used\n', '    externally by web apps to dispense loyalty rewards and may get compromised\n', '    @param _loyaltyWallet new loyalty wallet address\n', '    **/\n', '\n', '    function setLoyaltyWallet(address _loyaltyWallet)\n', '    external\n', '    onlyOwner\n', '    nonZeroAddress(_loyaltyWallet){\n', '        require(loyaltyWallet != _loyaltyWallet);\n', '        loyaltyWallet = _loyaltyWallet;\n', '        LoyaltyWalletAddressChanged(loyaltyWallet, _loyaltyWallet);\n', '    }\n', '\n', '    /**\n', '    @dev allocate loyalty as needed from loyalty pool into the current\n', '    loyalty wallet to be disbursed. Note only the allocation needed for a disbursment\n', '    is to be moved to the loyalty wallet as needed.\n', '    @param _totalWeiAmount  amount to move to the wallet in wei\n', '    **/\n', '    function allocateLoyaltySpend(uint256 _totalWeiAmount)\n', '    external\n', '    onlyOwner\n', '    nonZeroAddress(loyaltyWallet)\n', '    returns(bool){\n', '        require(_totalWeiAmount > 0 && loyaltySupply >= _totalWeiAmount);\n', '        loyaltySupply = loyaltySupply.sub(_totalWeiAmount);\n', '        require(transfer(loyaltyWallet, _totalWeiAmount));\n', '        LoyaltySupplyAllocated(loyaltyWallet, _totalWeiAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev assign foundation supply to a contract address\n', '    @param _foundationContractAddress  contract address to dispense the\n', '            foundation alloction\n', '    **/\n', '    function assignFoundationSupply(address _foundationContractAddress)\n', '    external\n', '    onlyOwner\n', '    nonZeroAddress(_foundationContractAddress){\n', '        require(!isFoundationSupplyAssigned);\n', '        isFoundationSupplyAssigned = true;\n', '        require(transfer(_foundationContractAddress, foundationSupply));\n', '    }\n', '\n', '    /**\n', '    @dev assign reserve supply to a contract address\n', '    @param _reserveContractAddress  contract address to dispense the\n', '            reserve alloction\n', '    **/\n', '    function assignReserveSupply(address _reserveContractAddress)\n', '    external\n', '    onlyOwner\n', '    nonZeroAddress(_reserveContractAddress){\n', '        require(!isReserveSupplyAssigned);\n', '        isReserveSupplyAssigned = true;\n', '        require(transfer(_reserveContractAddress, reserveFundSupply));\n', '    }\n', '\n', '/** We don&#39;t want to support a payable function as we are not doing ICO and instead doing private\n', 'sale. Therefore we want to maintain exchange rate that is pegged to USD.\n', '**/\n', '\n', '    function buyTokens(address _to, uint256 _totalWeiAmount, bytes4 _currency, bytes32 _txHash)\n', '    external\n', '    onlyTokenBuyer\n', '    nonZeroAddress(_to)\n', '    returns(bool) {\n', '        require(_totalWeiAmount > 0 && publicSaleSupply >= _totalWeiAmount);\n', '        publicSaleSupply = publicSaleSupply.sub(_totalWeiAmount);\n', '        require(transferFrom(owner,_to, _totalWeiAmount));\n', '        TokensBought(_to, _totalWeiAmount, _currency, _txHash);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev This unnamed function is called whenever someone tries to send ether to it  and we don&#39;t want payment\n', '    coming directly to the contracts\n', '    */\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/XcelToken.sol\n', '\n', '/*\n', '    Prereq for deploying this contracts\n', '    1) TokenBuyer address is created\n', '\n', '    To start team vesting\n', '    1) Create TeamVesting beneficiary address\n', '    2) Deploy team allocation Vesting contract (StepVesting)\n', '    3) Call XcelToken.initiateTeamVesting using the contact owner account\n', '    4) Call assignFoundationSupply to manage founcation allocation via contract\n', '    5) Call assignReserveSupply to manage reserveFundSupply via contracts\n', '    6) Set Loyalty wallet address .\n', '    7) Call allocateLoyaltySpend to move some tokens from loyalty pool to Loyalty wallet as needed\n', '\n', '*/\n', '\n', 'contract XcelToken is PausableToken, BurnableToken  {\n', '\n', '    string public constant name = "XCELTOKEN";\n', '\n', '    string public constant symbol = "XCEL";\n', '\n', '    /* see issue 724 where Vitalik is proposing mandatory 18 decimal places for erc20 tokens\n', '    https://github.com/ethereum/EIPs/issues/724\n', '    */\n', '    uint8 public constant decimals = 18;\n', '\n', '    // 50 Billion tokens\n', '    uint256 public constant INITIAL_SUPPLY = 50 * (10**9) * (10 ** uint256(decimals));\n', '\n', '    // fundation supply 10%\n', '    uint256 public constant foundationSupply = 5 * (10**9) * (10 ** uint256(decimals));\n', '\n', '    // founders supply 15%\n', '    uint256 public constant teamSupply = 7.5 * (10**9) * (10 ** uint256(decimals));\n', '\n', '    // public sale supply 60%\n', '    uint256 public publicSaleSupply = 30 * (10**9) * (10 ** uint256(decimals));\n', '\n', '    //imp/cmp supply 5%\n', '    uint256 public loyaltySupply = 2.5 * (10**9) * (10 ** uint256(decimals));\n', '\n', '    //reserve fund supply 10%\n', '    uint256 public constant reserveFundSupply = 5 * (10**9) * (10 ** uint256(decimals));\n', '\n', '    // Only Address that can buy public sale supply\n', '    address public tokenBuyerWallet =0x0;\n', '\n', '    //wallet to disperse loyalty points as needed.\n', '    address public loyaltyWallet = 0x0;\n', '\n', '    //address where team vesting contract will relase the team vested tokens\n', '    address public teamVestingContractAddress;\n', '\n', '    bool public isTeamVestingInitiated = false;\n', '\n', '    bool public isFoundationSupplyAssigned = false;\n', '\n', '    bool public isReserveSupplyAssigned = false;\n', '\n', '    //Sale from public allocation via tokenBuyerWallet\n', '    event TokensBought(address indexed _to, uint256 _totalAmount, bytes4 _currency, bytes32 _txHash);\n', '    event LoyaltySupplyAllocated(address indexed _to, uint256 _totalAmount);\n', '    event LoyaltyWalletAddressChanged(address indexed _oldAddress, address indexed _newAddress);\n', '\n', '    // Token Buyer has special to transfer from public sale supply\n', '    modifier onlyTokenBuyer() {\n', '        require(msg.sender == tokenBuyerWallet);\n', '        _;\n', '    }\n', '\n', '    // No zero address transaction\n', '    modifier nonZeroAddress(address _to) {\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '\n', '    function XcelToken(address _tokenBuyerWallet)\n', '        public\n', '        nonZeroAddress(_tokenBuyerWallet){\n', '\n', '        tokenBuyerWallet = _tokenBuyerWallet;\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '\n', '        //mint all tokens\n', '        balances[msg.sender] = totalSupply_;\n', '        Transfer(address(0x0), msg.sender, totalSupply_);\n', '\n', '        //Allow  token buyer to transfer public sale allocation\n', '        //need to revisit to see if this needs to be broken into 3 parts so that\n', '        //one address does not compromise 60% of token\n', '        require(approve(tokenBuyerWallet, 0));\n', '        require(approve(tokenBuyerWallet, publicSaleSupply));\n', '\n', '    }\n', '\n', '    /**\n', '        Allow contract owner to burn token\n', '    **/\n', '    function burn(uint256 _value)\n', '      public\n', '      onlyOwner {\n', '        super.burn(_value);\n', '    }\n', '\n', '    /**\n', '    @dev Initiate the team vesting by transferring the teamSupply t0 _teamVestingContractAddress\n', '    @param _teamVestingContractAddress  address of the team vesting contract alreadt deployed with the\n', '        beneficiary address\n', '    */\n', '    function initiateTeamVesting(address _teamVestingContractAddress)\n', '    external\n', '    onlyOwner\n', '    nonZeroAddress(_teamVestingContractAddress) {\n', '        require(!isTeamVestingInitiated);\n', '        teamVestingContractAddress = _teamVestingContractAddress;\n', '\n', '        isTeamVestingInitiated = true;\n', '        //transfer team supply to team vesting contract\n', '        require(transfer(_teamVestingContractAddress, teamSupply));\n', '\n', '\n', '    }\n', '\n', '    /**\n', '    @dev allow changing of loyalty wallet as these wallets might be used\n', '    externally by web apps to dispense loyalty rewards and may get compromised\n', '    @param _loyaltyWallet new loyalty wallet address\n', '    **/\n', '\n', '    function setLoyaltyWallet(address _loyaltyWallet)\n', '    external\n', '    onlyOwner\n', '    nonZeroAddress(_loyaltyWallet){\n', '        require(loyaltyWallet != _loyaltyWallet);\n', '        loyaltyWallet = _loyaltyWallet;\n', '        LoyaltyWalletAddressChanged(loyaltyWallet, _loyaltyWallet);\n', '    }\n', '\n', '    /**\n', '    @dev allocate loyalty as needed from loyalty pool into the current\n', '    loyalty wallet to be disbursed. Note only the allocation needed for a disbursment\n', '    is to be moved to the loyalty wallet as needed.\n', '    @param _totalWeiAmount  amount to move to the wallet in wei\n', '    **/\n', '    function allocateLoyaltySpend(uint256 _totalWeiAmount)\n', '    external\n', '    onlyOwner\n', '    nonZeroAddress(loyaltyWallet)\n', '    returns(bool){\n', '        require(_totalWeiAmount > 0 && loyaltySupply >= _totalWeiAmount);\n', '        loyaltySupply = loyaltySupply.sub(_totalWeiAmount);\n', '        require(transfer(loyaltyWallet, _totalWeiAmount));\n', '        LoyaltySupplyAllocated(loyaltyWallet, _totalWeiAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev assign foundation supply to a contract address\n', '    @param _foundationContractAddress  contract address to dispense the\n', '            foundation alloction\n', '    **/\n', '    function assignFoundationSupply(address _foundationContractAddress)\n', '    external\n', '    onlyOwner\n', '    nonZeroAddress(_foundationContractAddress){\n', '        require(!isFoundationSupplyAssigned);\n', '        isFoundationSupplyAssigned = true;\n', '        require(transfer(_foundationContractAddress, foundationSupply));\n', '    }\n', '\n', '    /**\n', '    @dev assign reserve supply to a contract address\n', '    @param _reserveContractAddress  contract address to dispense the\n', '            reserve alloction\n', '    **/\n', '    function assignReserveSupply(address _reserveContractAddress)\n', '    external\n', '    onlyOwner\n', '    nonZeroAddress(_reserveContractAddress){\n', '        require(!isReserveSupplyAssigned);\n', '        isReserveSupplyAssigned = true;\n', '        require(transfer(_reserveContractAddress, reserveFundSupply));\n', '    }\n', '\n', "/** We don't want to support a payable function as we are not doing ICO and instead doing private\n", 'sale. Therefore we want to maintain exchange rate that is pegged to USD.\n', '**/\n', '\n', '    function buyTokens(address _to, uint256 _totalWeiAmount, bytes4 _currency, bytes32 _txHash)\n', '    external\n', '    onlyTokenBuyer\n', '    nonZeroAddress(_to)\n', '    returns(bool) {\n', '        require(_totalWeiAmount > 0 && publicSaleSupply >= _totalWeiAmount);\n', '        publicSaleSupply = publicSaleSupply.sub(_totalWeiAmount);\n', '        require(transferFrom(owner,_to, _totalWeiAmount));\n', '        TokensBought(_to, _totalWeiAmount, _currency, _txHash);\n', '        return true;\n', '    }\n', '\n', '    /**\n', "    @dev This unnamed function is called whenever someone tries to send ether to it  and we don't want payment\n", '    coming directly to the contracts\n', '    */\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '}']
