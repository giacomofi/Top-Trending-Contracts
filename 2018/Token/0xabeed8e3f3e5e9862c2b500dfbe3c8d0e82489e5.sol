['pragma solidity ^0.4.13;\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract LimitedTransferToken is ERC20 {\n', '\n', '  /**\n', '   * @dev Checks whether it can transfer or otherwise throws.\n', '   */\n', '  modifier canTransfer(address _sender, uint256 _value) {\n', '   require(_value <= transferableTokens(_sender, uint64(now)));\n', '   _;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks modifier and allows transfer if tokens are not locked.\n', '   * @param _to The address that will receive the tokens.\n', '   * @param _value The amount of tokens to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) canTransfer(msg.sender, _value) public returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Checks modifier and allows transfer if tokens are not locked.\n', '  * @param _from The address that will send the tokens.\n', '  * @param _to The address that will receive the tokens.\n', '  * @param _value The amount of tokens to be transferred.\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from, _value) public returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Default transferable tokens function returns all tokens for a holder (no limit).\n', '   * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the\n', '   * specific logic for limiting token transferability for a holder over time.\n', '   */\n', '  function transferableTokens(address holder, uint64 /*time*/) public constant returns (uint256) {\n', '    return balanceOf(holder);\n', '  }\n', '}\n', '\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', 'contract HasNoEther is Ownable {\n', '\n', '  /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '  function HasNoEther() payable {\n', '    require(msg.value == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Disallows direct send by settings a default function without the `payable` flag.\n', '   */\n', '  function() external {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    assert(owner.send(this.balance));\n', '  }\n', '}\n', '\n', 'contract HasNoTokens is CanReclaimToken {\n', '\n', ' /**\n', '  * @dev Reject all ERC23 compatible tokens\n', '    **/\n', '  function tokenFallback(address /*from_*/, uint256 /*value_*/, bytes /*data_*/) external {\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '      require(_value == 0 || allowed[msg.sender][_spender] == 0);\n', '      allowed[msg.sender][_spender] = _value;\n', '      Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract RegulatedToken is StandardToken, PausableToken, LimitedTransferToken, HasNoEther, HasNoTokens {\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20Basic;\n', '    uint256 constant MAX_LOCKS_PER_ADDRESS = 20;\n', '\n', '    enum RedeemReason{RegulatoryRedemption, Buyback, Other}\n', '    enum LockReason{PreICO, Vesting, USPerson, FundOriginated, Other}\n', '\n', '    struct TokenLock {\n', '        uint64 id;\n', '        LockReason reason;\n', '        uint256 value;\n', '        uint64 autoReleaseTime;       //May be 0, for no release time\n', '    }\n', '\n', '    struct TokenRedemption {\n', '        uint64 redemptionId;\n', '        RedeemReason reason;\n', '        uint256 value;\n', '    }\n', '\n', '    uint256 public totalInactive;\n', '    uint64 private lockCounter = 1;\n', '\n', '    //token admins\n', '    mapping(address => bool) private admins;\n', '\n', '    //locks\n', '    mapping(address => TokenLock[]) private locks;\n', '\n', '    //burn wallets\n', '    mapping(address => bool) private burnWallets;\n', '\n', '    //Redemptions made for users\n', '    mapping(address => TokenRedemption[]) private tokenRedemptions;\n', '\n', '    event Issued(address indexed to, uint256 value, uint256 valueLocked);\n', '    event Locked(address indexed who, uint256 value, LockReason reason, uint releaseTime, uint64 lockId);\n', '    event Unlocked(address indexed who, uint256 value, uint64 lockId);\n', '    event AddedBurnWallet(address indexed burnWallet);\n', '    event Redeemed(address indexed from, address indexed burnWallet, uint256 value, RedeemReason reason, uint64 indexed redemptionId);\n', '    event Burned(address indexed burnWallet, uint256 value);\n', '    event Destroyed();\n', '    event AdminAdded(address admin);\n', '    event AdminRemoved(address admin);\n', '\n', '\n', '\n', '    /**\n', '    * @dev destroys the token\n', '    * Only works from the owner, and when the total balance of all users is 0 (nobody has tokens).\n', '    */\n', '    function destroy() onlyOwner public {\n', '        require(totalSupply == 0);\n', '        Destroyed();\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    /*******************************\n', '        CONTRACT ADMIN\n', '\n', '        The contract can have 0 or more admins\n', '        some functions are accessible on the admin level rather than the owner level\n', '        the owner is always an admin\n', '    ********************************/\n', '\n', '    function addAdmin(address _address) onlyOwner public{\n', '        admins[_address] = true;\n', '        AdminAdded(_address);\n', '    }\n', '\n', '    function removeAdmin(address _address) onlyOwner public{\n', '        admins[_address] = false;\n', '        AdminRemoved(_address);\n', '    }\n', '    /**\n', '    * @dev Throws if called by any account other than an admin.\n', '    */\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == owner || admins[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '\n', '    /******************************\n', '         TOKEN ISSUING\n', '     *******************************/\n', '\n', '\n', '    /**\n', '    * @dev Issues unlocked tokens\n', '    * @param _to address The address which is going to receive the newly issued tokens\n', '    * @param _value uint256 the value of tokens to issue\n', '    * @return true if successful\n', '    */\n', '\n', '    function issueTokens(address _to, uint256 _value) onlyAdmin public returns (bool){\n', '        issueTokensWithLocking(_to, _value, 0, LockReason.Other, 0);\n', '    }\n', '\n', '    /**\n', '    * @dev Issuing tokens from the fund\n', '    * @param _to address The address which is going to receive the newly issued tokens\n', '    * @param _value uint256 the value of tokens to issue\n', '    * @param _valueLocked uint256 value of tokens, from those issued, to lock immediately.\n', '    * @param _why reason for token locking\n', '    * @param _releaseTime timestamp to release the lock (or 0 for locks which can only released by an unlockTokens call)\n', '    * @return true if successful\n', '    */\n', '    function issueTokensWithLocking(address _to, uint256 _value, uint256 _valueLocked, LockReason _why, uint64 _releaseTime) onlyAdmin public returns (bool){\n', '\n', '        //Check input values\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '        require(_valueLocked >= 0 && _valueLocked <= _value);\n', '\n', '        //Make sure we have enough inactive tokens to issue\n', '        require(totalInactive >= _value);\n', '\n', '        //Adding and subtracting is done through safemath\n', '        totalSupply = totalSupply.add(_value);\n', '        totalInactive = totalInactive.sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        Issued(_to, _value, _valueLocked);\n', '        Transfer(0x0, _to, _value);\n', '\n', '        if (_valueLocked > 0) {\n', '            lockTokens(_to, _valueLocked, _why, _releaseTime);\n', '        }\n', '    }\n', '\n', '\n', '\n', '    /******************************\n', '        TOKEN LOCKING\n', '\n', '        Locking tokens means freezing a number of tokens belonging to an address.\n', '        Locked tokens can not be transferred by the user to any other address.\n', '        The contract owner (the fund) may still redeem those tokens, or unfreeze them.\n', '        The token lock may expire automatically at a certain timestamp, or exist forever until the owner unlocks it.\n', '\n', '    *******************************/\n', '\n', '\n', '    /**\n', '    * @dev lock tokens\n', '    * @param _who address to lock the tokens at\n', '    * @param _value value of tokens to lock\n', '    * @param _reason reason for lock\n', '    * @param _releaseTime timestamp to release the lock (or 0 for locks which can only released by an unlockTokens call)\n', '    * @return A unique id for the newly created lock.\n', '    * Note: The user MAY have at a certain time more locked tokens than actual tokens\n', '    */\n', '    function lockTokens(address _who, uint _value, LockReason _reason, uint64 _releaseTime) onlyAdmin public returns (uint64){\n', '        require(_who != address(0));\n', '        require(_value > 0);\n', '        require(_releaseTime == 0 || _releaseTime > uint64(now));\n', '        //Only allow 20 locks per address, to prevent out-of-gas at transfer scenarios\n', '        require(locks[_who].length < MAX_LOCKS_PER_ADDRESS);\n', '\n', '        uint64 lockId = lockCounter++;\n', '\n', '        //Create the lock\n', '        locks[_who].push(TokenLock(lockId, _reason, _value, _releaseTime));\n', '        Locked(_who, _value, _reason, _releaseTime, lockId);\n', '\n', '        return lockId;\n', '    }\n', '\n', '    /**\n', '    * @dev Releases a specific token lock\n', '    * @param _who address to release the tokens for\n', '    * @param _lockId the unique lock-id to release\n', '    *\n', '    * note - this may change the order of the locks on an address, so if iterating the iteration should be restarted.\n', '    * @return true on success\n', '    */\n', '    function unlockTokens(address _who, uint64 _lockId) onlyAdmin public returns (bool) {\n', '        require(_who != address(0));\n', '        require(_lockId > 0);\n', '\n', '        for (uint8 i = 0; i < locks[_who].length; i++) {\n', '            if (locks[_who][i].id == _lockId) {\n', '                Unlocked(_who, locks[_who][i].value, _lockId);\n', '                delete locks[_who][i];\n', '                locks[_who][i] = locks[_who][locks[_who].length.sub(1)];\n', '                locks[_who].length -= 1;\n', '\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '    * @dev Get number of locks currently associated with an address\n', '    * @param _who address to get token lock for\n', '    *\n', '    * @return number of locks\n', '    *\n', '    * Note - a lock can be inactive (due to its time expired) but still exists for a specific address\n', '    */\n', '    function lockCount(address _who) public constant returns (uint8){\n', '        require(_who != address(0));\n', '        return uint8(locks[_who].length);\n', '    }\n', '\n', '    /**\n', '    * @dev Get details of a specific lock associated with an address\n', '    * can be used to iterate through the locks of a user\n', '    * @param _who address to get token lock for\n', '    * @param _index the 0 based index of the lock.\n', '    * @return id the unique lock id\n', '    * @return reason the reason for the lock\n', '    * @return value the value of tokens locked\n', '    * @return the timestamp in which the lock will be inactive (or 0 if it&#39;s always active until removed)\n', '    *\n', '    * Note - a lock can be inactive (due to its time expired) but still exists for a specific address\n', '    */\n', '    function lockInfo(address _who, uint64 _index) public constant returns (uint64 id, uint8 reason, uint value, uint64 autoReleaseTime){\n', '        require(_who != address(0));\n', '        require(_index < locks[_who].length);\n', '        id = locks[_who][_index].id;\n', '        reason = uint8(locks[_who][_index].reason);\n', '        value = locks[_who][_index].value;\n', '        autoReleaseTime = locks[_who][_index].autoReleaseTime;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the total number of transferable (not locked) tokens the user has at a specific time\n', '    * used by the LimitedTransferToken base class to block ERC20 transfer for locked tokens\n', '    * @param holder address to get transferable count for\n', '    * @param time block timestamp to check time-locks with.\n', '    * @return total number of unlocked, transferable tokens\n', '    *\n', '    * Note - the timestamp is only used to check time-locks, the base balance used to check is always the current one.\n', '    */\n', '    function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\n', '        require(time > 0);\n', '\n', '        //If it&#39;s a burn wallet, tokens cannot be moved out\n', '        if (isBurnWallet(holder)){\n', '            return 0;\n', '        }\n', '\n', '        uint8 holderLockCount = uint8(locks[holder].length);\n', '\n', '        //No locks, go to base class implementation\n', '        if (holderLockCount == 0) return super.transferableTokens(holder, time);\n', '\n', '        uint256 totalLockedTokens = 0;\n', '        for (uint8 i = 0; i < holderLockCount; i ++) {\n', '\n', '            if (locks[holder][i].autoReleaseTime == 0 || locks[holder][i].autoReleaseTime > time) {\n', '                totalLockedTokens = SafeMath.add(totalLockedTokens, locks[holder][i].value);\n', '            }\n', '        }\n', '        uint balanceOfHolder = balanceOf(holder);\n', '\n', '        //there may be more locked tokens than actual tokens, so the minimum between the two\n', '        uint256 transferable = SafeMath.sub(balanceOfHolder, Math.min256(totalLockedTokens, balanceOfHolder));\n', '\n', '        //Check with super implementation for further reductions\n', '        return Math.min256(transferable, super.transferableTokens(holder, time));\n', '    }\n', '\n', '    /******************************\n', '        REDEMPTION AND BURNING\n', '\n', '        Redeeming tokens involves removing them from an address&#39;s wallet and moving them to a (one or more)\n', '        specially designed "burn wallets".\n', '        The process is implemented such as the owner can choose to burn or not to burn the tokens after redeeming them,\n', '        which is legally necessary on some buy-back scenarios\n', '        Each redemption is associated with a global "redemption event" (a unique id, supplied by the owner),\n', '        which can later be used to query the total value redeemed for the user in this event (and on the owner&#39;s\n', '        backend, through event logs processing, the total value redeemed for all users in this event)\n', '    *******************************/\n', '\n', '\n', '    /**\n', '    * @dev designates an address as a burn wallet (there can be an unlimited number of burn wallets).\n', '    * a burn wallet can only burn tokens - tokens may not be transferred out of it, and tokens do not participate\n', '    * in redemptions\n', '    * @param _burnWalletAddress the address to add to the burn wallet list\n', '    */\n', '    function addBurnWallet(address _burnWalletAddress) onlyAdmin {\n', '        require(_burnWalletAddress != address(0));\n', '        burnWallets[_burnWalletAddress] = true;\n', '        AddedBurnWallet(_burnWalletAddress);\n', '    }\n', '\n', '    /**\n', '    * @dev redeems (removes) tokens for an address and moves to to a burn wallet\n', '    * @param _from the address to redeem tokens from\n', '    * @param _burnWallet the burn wallet to move the tokens to\n', '    * @param _reason the reason for the redemption\n', '    * @param _redemptionId a redemptionId, supplied by the contract owner. usually assigned to a single global\n', '    * redemption event (token buyback, or such).\n', '    */\n', '    function redeemTokens(address _from, address _burnWallet, uint256 _value, RedeemReason _reason, uint64 _redemptionId) onlyAdmin {\n', '        require(_from != address(0));\n', '        require(_redemptionId > 0);\n', '        require(isBurnWallet(_burnWallet));\n', '        require(balances[_from] >= _value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_burnWallet] = balances[_burnWallet].add(_value);\n', '        tokenRedemptions[_from].push(TokenRedemption(_redemptionId, _reason, _value));\n', '        Transfer(_from, _burnWallet, _value);\n', '        Redeemed(_from, _burnWallet, _value, _reason, _redemptionId);\n', '    }\n', '\n', '    /**\n', '    * @dev Burns tokens inside a burn wallet\n', '    * The total number of inactive token is NOT increased\n', '    * this means there is a finite number amount that can ever exist of this token\n', '    * @param _burnWallet the address of the burn wallet\n', '    * @param _value value of tokens to burn\n', '    */\n', '    function burnTokens(address _burnWallet, uint256 _value) onlyAdmin {\n', '        require(_value > 0);\n', '        require(isBurnWallet(_burnWallet));\n', '        require(balances[_burnWallet] >= _value);\n', '        balances[_burnWallet] = balances[_burnWallet].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burned(_burnWallet, _value);\n', '        Transfer(_burnWallet,0x0,_value);\n', '    }\n', '\n', '    /**\n', '    * @dev checks if a wallet is a burn wallet\n', '    * @param _burnWalletAddress address to check\n', '    */\n', '    function isBurnWallet(address _burnWalletAddress) constant public returns (bool){\n', '        return burnWallets[_burnWalletAddress];\n', '    }\n', '\n', '    /**\n', '    * @dev gets number of redemptions done on a specific address\n', '    * @param _who address to check\n', '    */\n', '    function redemptionCount(address _who) public constant returns (uint64){\n', '        require(_who != address(0));\n', '        return uint64(tokenRedemptions[_who].length);\n', '    }\n', '\n', '    /**\n', '    * @dev gets data about a specific redemption done on a specific address\n', '    * @param _who address to check\n', '    * @param _index zero based index of the redemption\n', '    * @return redemptionId the global redemptionId associated with this redemption\n', '    * @return reason the reason for the redemption\n', '    * @return value the value for the redemption\n', '    */\n', '    function redemptionInfo(address _who, uint64 _index) public constant returns (uint64 redemptionId, uint8 reason, uint value){\n', '        require(_who != address(0));\n', '        require(_index < tokenRedemptions[_who].length);\n', '        redemptionId = tokenRedemptions[_who][_index].redemptionId;\n', '        reason = uint8(tokenRedemptions[_who][_index].reason);\n', '        value = tokenRedemptions[_who][_index].value;\n', '    }\n', '\n', '    /**\n', '    * @dev gets the total value redemeed from a specific address, for a single global redemption event\n', '    * @param _who address to check\n', '    * @param _redemptionId the global redemption event id\n', '    * @return the total value associated with the redemption event\n', '    */\n', '\n', '    function totalRedemptionIdValue(address _who, uint64 _redemptionId) public constant returns (uint256){\n', '        require(_who != address(0));\n', '        uint256 total = 0;\n', '        uint64 numberOfRedemptions = redemptionCount(_who);\n', '        for (uint64 i = 0; i < numberOfRedemptions; i++) {\n', '            if (tokenRedemptions[_who][i].redemptionId == _redemptionId) {\n', '                total = SafeMath.add(total, tokenRedemptions[_who][i].value);\n', '            }\n', '        }\n', '        return total;\n', '    }\n', '\n', '}\n', '\n', 'contract SpiceToken is RegulatedToken {\n', '\n', '    string public constant name = "SPiCE VC Token";\n', '    string public constant symbol = "SPICE";\n', '    uint8 public constant decimals = 8;\n', '    uint256 private constant INITIAL_INACTIVE_TOKENS = 130 * 1000000 * (10 ** uint256(decimals));  //130 million tokens\n', '\n', '\n', '    function SpiceToken() RegulatedToken() {\n', '        totalInactive = INITIAL_INACTIVE_TOKENS;\n', '        totalSupply = 0;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract LimitedTransferToken is ERC20 {\n', '\n', '  /**\n', '   * @dev Checks whether it can transfer or otherwise throws.\n', '   */\n', '  modifier canTransfer(address _sender, uint256 _value) {\n', '   require(_value <= transferableTokens(_sender, uint64(now)));\n', '   _;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks modifier and allows transfer if tokens are not locked.\n', '   * @param _to The address that will receive the tokens.\n', '   * @param _value The amount of tokens to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) canTransfer(msg.sender, _value) public returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Checks modifier and allows transfer if tokens are not locked.\n', '  * @param _from The address that will send the tokens.\n', '  * @param _to The address that will receive the tokens.\n', '  * @param _value The amount of tokens to be transferred.\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from, _value) public returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Default transferable tokens function returns all tokens for a holder (no limit).\n', '   * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the\n', '   * specific logic for limiting token transferability for a holder over time.\n', '   */\n', '  function transferableTokens(address holder, uint64 /*time*/) public constant returns (uint256) {\n', '    return balanceOf(holder);\n', '  }\n', '}\n', '\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', 'contract HasNoEther is Ownable {\n', '\n', '  /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '  function HasNoEther() payable {\n', '    require(msg.value == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Disallows direct send by settings a default function without the `payable` flag.\n', '   */\n', '  function() external {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    assert(owner.send(this.balance));\n', '  }\n', '}\n', '\n', 'contract HasNoTokens is CanReclaimToken {\n', '\n', ' /**\n', '  * @dev Reject all ERC23 compatible tokens\n', '    **/\n', '  function tokenFallback(address /*from_*/, uint256 /*value_*/, bytes /*data_*/) external {\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '      require(_value == 0 || allowed[msg.sender][_spender] == 0);\n', '      allowed[msg.sender][_spender] = _value;\n', '      Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract RegulatedToken is StandardToken, PausableToken, LimitedTransferToken, HasNoEther, HasNoTokens {\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20Basic;\n', '    uint256 constant MAX_LOCKS_PER_ADDRESS = 20;\n', '\n', '    enum RedeemReason{RegulatoryRedemption, Buyback, Other}\n', '    enum LockReason{PreICO, Vesting, USPerson, FundOriginated, Other}\n', '\n', '    struct TokenLock {\n', '        uint64 id;\n', '        LockReason reason;\n', '        uint256 value;\n', '        uint64 autoReleaseTime;       //May be 0, for no release time\n', '    }\n', '\n', '    struct TokenRedemption {\n', '        uint64 redemptionId;\n', '        RedeemReason reason;\n', '        uint256 value;\n', '    }\n', '\n', '    uint256 public totalInactive;\n', '    uint64 private lockCounter = 1;\n', '\n', '    //token admins\n', '    mapping(address => bool) private admins;\n', '\n', '    //locks\n', '    mapping(address => TokenLock[]) private locks;\n', '\n', '    //burn wallets\n', '    mapping(address => bool) private burnWallets;\n', '\n', '    //Redemptions made for users\n', '    mapping(address => TokenRedemption[]) private tokenRedemptions;\n', '\n', '    event Issued(address indexed to, uint256 value, uint256 valueLocked);\n', '    event Locked(address indexed who, uint256 value, LockReason reason, uint releaseTime, uint64 lockId);\n', '    event Unlocked(address indexed who, uint256 value, uint64 lockId);\n', '    event AddedBurnWallet(address indexed burnWallet);\n', '    event Redeemed(address indexed from, address indexed burnWallet, uint256 value, RedeemReason reason, uint64 indexed redemptionId);\n', '    event Burned(address indexed burnWallet, uint256 value);\n', '    event Destroyed();\n', '    event AdminAdded(address admin);\n', '    event AdminRemoved(address admin);\n', '\n', '\n', '\n', '    /**\n', '    * @dev destroys the token\n', '    * Only works from the owner, and when the total balance of all users is 0 (nobody has tokens).\n', '    */\n', '    function destroy() onlyOwner public {\n', '        require(totalSupply == 0);\n', '        Destroyed();\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    /*******************************\n', '        CONTRACT ADMIN\n', '\n', '        The contract can have 0 or more admins\n', '        some functions are accessible on the admin level rather than the owner level\n', '        the owner is always an admin\n', '    ********************************/\n', '\n', '    function addAdmin(address _address) onlyOwner public{\n', '        admins[_address] = true;\n', '        AdminAdded(_address);\n', '    }\n', '\n', '    function removeAdmin(address _address) onlyOwner public{\n', '        admins[_address] = false;\n', '        AdminRemoved(_address);\n', '    }\n', '    /**\n', '    * @dev Throws if called by any account other than an admin.\n', '    */\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == owner || admins[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '\n', '    /******************************\n', '         TOKEN ISSUING\n', '     *******************************/\n', '\n', '\n', '    /**\n', '    * @dev Issues unlocked tokens\n', '    * @param _to address The address which is going to receive the newly issued tokens\n', '    * @param _value uint256 the value of tokens to issue\n', '    * @return true if successful\n', '    */\n', '\n', '    function issueTokens(address _to, uint256 _value) onlyAdmin public returns (bool){\n', '        issueTokensWithLocking(_to, _value, 0, LockReason.Other, 0);\n', '    }\n', '\n', '    /**\n', '    * @dev Issuing tokens from the fund\n', '    * @param _to address The address which is going to receive the newly issued tokens\n', '    * @param _value uint256 the value of tokens to issue\n', '    * @param _valueLocked uint256 value of tokens, from those issued, to lock immediately.\n', '    * @param _why reason for token locking\n', '    * @param _releaseTime timestamp to release the lock (or 0 for locks which can only released by an unlockTokens call)\n', '    * @return true if successful\n', '    */\n', '    function issueTokensWithLocking(address _to, uint256 _value, uint256 _valueLocked, LockReason _why, uint64 _releaseTime) onlyAdmin public returns (bool){\n', '\n', '        //Check input values\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '        require(_valueLocked >= 0 && _valueLocked <= _value);\n', '\n', '        //Make sure we have enough inactive tokens to issue\n', '        require(totalInactive >= _value);\n', '\n', '        //Adding and subtracting is done through safemath\n', '        totalSupply = totalSupply.add(_value);\n', '        totalInactive = totalInactive.sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        Issued(_to, _value, _valueLocked);\n', '        Transfer(0x0, _to, _value);\n', '\n', '        if (_valueLocked > 0) {\n', '            lockTokens(_to, _valueLocked, _why, _releaseTime);\n', '        }\n', '    }\n', '\n', '\n', '\n', '    /******************************\n', '        TOKEN LOCKING\n', '\n', '        Locking tokens means freezing a number of tokens belonging to an address.\n', '        Locked tokens can not be transferred by the user to any other address.\n', '        The contract owner (the fund) may still redeem those tokens, or unfreeze them.\n', '        The token lock may expire automatically at a certain timestamp, or exist forever until the owner unlocks it.\n', '\n', '    *******************************/\n', '\n', '\n', '    /**\n', '    * @dev lock tokens\n', '    * @param _who address to lock the tokens at\n', '    * @param _value value of tokens to lock\n', '    * @param _reason reason for lock\n', '    * @param _releaseTime timestamp to release the lock (or 0 for locks which can only released by an unlockTokens call)\n', '    * @return A unique id for the newly created lock.\n', '    * Note: The user MAY have at a certain time more locked tokens than actual tokens\n', '    */\n', '    function lockTokens(address _who, uint _value, LockReason _reason, uint64 _releaseTime) onlyAdmin public returns (uint64){\n', '        require(_who != address(0));\n', '        require(_value > 0);\n', '        require(_releaseTime == 0 || _releaseTime > uint64(now));\n', '        //Only allow 20 locks per address, to prevent out-of-gas at transfer scenarios\n', '        require(locks[_who].length < MAX_LOCKS_PER_ADDRESS);\n', '\n', '        uint64 lockId = lockCounter++;\n', '\n', '        //Create the lock\n', '        locks[_who].push(TokenLock(lockId, _reason, _value, _releaseTime));\n', '        Locked(_who, _value, _reason, _releaseTime, lockId);\n', '\n', '        return lockId;\n', '    }\n', '\n', '    /**\n', '    * @dev Releases a specific token lock\n', '    * @param _who address to release the tokens for\n', '    * @param _lockId the unique lock-id to release\n', '    *\n', '    * note - this may change the order of the locks on an address, so if iterating the iteration should be restarted.\n', '    * @return true on success\n', '    */\n', '    function unlockTokens(address _who, uint64 _lockId) onlyAdmin public returns (bool) {\n', '        require(_who != address(0));\n', '        require(_lockId > 0);\n', '\n', '        for (uint8 i = 0; i < locks[_who].length; i++) {\n', '            if (locks[_who][i].id == _lockId) {\n', '                Unlocked(_who, locks[_who][i].value, _lockId);\n', '                delete locks[_who][i];\n', '                locks[_who][i] = locks[_who][locks[_who].length.sub(1)];\n', '                locks[_who].length -= 1;\n', '\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '    * @dev Get number of locks currently associated with an address\n', '    * @param _who address to get token lock for\n', '    *\n', '    * @return number of locks\n', '    *\n', '    * Note - a lock can be inactive (due to its time expired) but still exists for a specific address\n', '    */\n', '    function lockCount(address _who) public constant returns (uint8){\n', '        require(_who != address(0));\n', '        return uint8(locks[_who].length);\n', '    }\n', '\n', '    /**\n', '    * @dev Get details of a specific lock associated with an address\n', '    * can be used to iterate through the locks of a user\n', '    * @param _who address to get token lock for\n', '    * @param _index the 0 based index of the lock.\n', '    * @return id the unique lock id\n', '    * @return reason the reason for the lock\n', '    * @return value the value of tokens locked\n', "    * @return the timestamp in which the lock will be inactive (or 0 if it's always active until removed)\n", '    *\n', '    * Note - a lock can be inactive (due to its time expired) but still exists for a specific address\n', '    */\n', '    function lockInfo(address _who, uint64 _index) public constant returns (uint64 id, uint8 reason, uint value, uint64 autoReleaseTime){\n', '        require(_who != address(0));\n', '        require(_index < locks[_who].length);\n', '        id = locks[_who][_index].id;\n', '        reason = uint8(locks[_who][_index].reason);\n', '        value = locks[_who][_index].value;\n', '        autoReleaseTime = locks[_who][_index].autoReleaseTime;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the total number of transferable (not locked) tokens the user has at a specific time\n', '    * used by the LimitedTransferToken base class to block ERC20 transfer for locked tokens\n', '    * @param holder address to get transferable count for\n', '    * @param time block timestamp to check time-locks with.\n', '    * @return total number of unlocked, transferable tokens\n', '    *\n', '    * Note - the timestamp is only used to check time-locks, the base balance used to check is always the current one.\n', '    */\n', '    function transferableTokens(address holder, uint64 time) public constant returns (uint256) {\n', '        require(time > 0);\n', '\n', "        //If it's a burn wallet, tokens cannot be moved out\n", '        if (isBurnWallet(holder)){\n', '            return 0;\n', '        }\n', '\n', '        uint8 holderLockCount = uint8(locks[holder].length);\n', '\n', '        //No locks, go to base class implementation\n', '        if (holderLockCount == 0) return super.transferableTokens(holder, time);\n', '\n', '        uint256 totalLockedTokens = 0;\n', '        for (uint8 i = 0; i < holderLockCount; i ++) {\n', '\n', '            if (locks[holder][i].autoReleaseTime == 0 || locks[holder][i].autoReleaseTime > time) {\n', '                totalLockedTokens = SafeMath.add(totalLockedTokens, locks[holder][i].value);\n', '            }\n', '        }\n', '        uint balanceOfHolder = balanceOf(holder);\n', '\n', '        //there may be more locked tokens than actual tokens, so the minimum between the two\n', '        uint256 transferable = SafeMath.sub(balanceOfHolder, Math.min256(totalLockedTokens, balanceOfHolder));\n', '\n', '        //Check with super implementation for further reductions\n', '        return Math.min256(transferable, super.transferableTokens(holder, time));\n', '    }\n', '\n', '    /******************************\n', '        REDEMPTION AND BURNING\n', '\n', "        Redeeming tokens involves removing them from an address's wallet and moving them to a (one or more)\n", '        specially designed "burn wallets".\n', '        The process is implemented such as the owner can choose to burn or not to burn the tokens after redeeming them,\n', '        which is legally necessary on some buy-back scenarios\n', '        Each redemption is associated with a global "redemption event" (a unique id, supplied by the owner),\n', "        which can later be used to query the total value redeemed for the user in this event (and on the owner's\n", '        backend, through event logs processing, the total value redeemed for all users in this event)\n', '    *******************************/\n', '\n', '\n', '    /**\n', '    * @dev designates an address as a burn wallet (there can be an unlimited number of burn wallets).\n', '    * a burn wallet can only burn tokens - tokens may not be transferred out of it, and tokens do not participate\n', '    * in redemptions\n', '    * @param _burnWalletAddress the address to add to the burn wallet list\n', '    */\n', '    function addBurnWallet(address _burnWalletAddress) onlyAdmin {\n', '        require(_burnWalletAddress != address(0));\n', '        burnWallets[_burnWalletAddress] = true;\n', '        AddedBurnWallet(_burnWalletAddress);\n', '    }\n', '\n', '    /**\n', '    * @dev redeems (removes) tokens for an address and moves to to a burn wallet\n', '    * @param _from the address to redeem tokens from\n', '    * @param _burnWallet the burn wallet to move the tokens to\n', '    * @param _reason the reason for the redemption\n', '    * @param _redemptionId a redemptionId, supplied by the contract owner. usually assigned to a single global\n', '    * redemption event (token buyback, or such).\n', '    */\n', '    function redeemTokens(address _from, address _burnWallet, uint256 _value, RedeemReason _reason, uint64 _redemptionId) onlyAdmin {\n', '        require(_from != address(0));\n', '        require(_redemptionId > 0);\n', '        require(isBurnWallet(_burnWallet));\n', '        require(balances[_from] >= _value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_burnWallet] = balances[_burnWallet].add(_value);\n', '        tokenRedemptions[_from].push(TokenRedemption(_redemptionId, _reason, _value));\n', '        Transfer(_from, _burnWallet, _value);\n', '        Redeemed(_from, _burnWallet, _value, _reason, _redemptionId);\n', '    }\n', '\n', '    /**\n', '    * @dev Burns tokens inside a burn wallet\n', '    * The total number of inactive token is NOT increased\n', '    * this means there is a finite number amount that can ever exist of this token\n', '    * @param _burnWallet the address of the burn wallet\n', '    * @param _value value of tokens to burn\n', '    */\n', '    function burnTokens(address _burnWallet, uint256 _value) onlyAdmin {\n', '        require(_value > 0);\n', '        require(isBurnWallet(_burnWallet));\n', '        require(balances[_burnWallet] >= _value);\n', '        balances[_burnWallet] = balances[_burnWallet].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burned(_burnWallet, _value);\n', '        Transfer(_burnWallet,0x0,_value);\n', '    }\n', '\n', '    /**\n', '    * @dev checks if a wallet is a burn wallet\n', '    * @param _burnWalletAddress address to check\n', '    */\n', '    function isBurnWallet(address _burnWalletAddress) constant public returns (bool){\n', '        return burnWallets[_burnWalletAddress];\n', '    }\n', '\n', '    /**\n', '    * @dev gets number of redemptions done on a specific address\n', '    * @param _who address to check\n', '    */\n', '    function redemptionCount(address _who) public constant returns (uint64){\n', '        require(_who != address(0));\n', '        return uint64(tokenRedemptions[_who].length);\n', '    }\n', '\n', '    /**\n', '    * @dev gets data about a specific redemption done on a specific address\n', '    * @param _who address to check\n', '    * @param _index zero based index of the redemption\n', '    * @return redemptionId the global redemptionId associated with this redemption\n', '    * @return reason the reason for the redemption\n', '    * @return value the value for the redemption\n', '    */\n', '    function redemptionInfo(address _who, uint64 _index) public constant returns (uint64 redemptionId, uint8 reason, uint value){\n', '        require(_who != address(0));\n', '        require(_index < tokenRedemptions[_who].length);\n', '        redemptionId = tokenRedemptions[_who][_index].redemptionId;\n', '        reason = uint8(tokenRedemptions[_who][_index].reason);\n', '        value = tokenRedemptions[_who][_index].value;\n', '    }\n', '\n', '    /**\n', '    * @dev gets the total value redemeed from a specific address, for a single global redemption event\n', '    * @param _who address to check\n', '    * @param _redemptionId the global redemption event id\n', '    * @return the total value associated with the redemption event\n', '    */\n', '\n', '    function totalRedemptionIdValue(address _who, uint64 _redemptionId) public constant returns (uint256){\n', '        require(_who != address(0));\n', '        uint256 total = 0;\n', '        uint64 numberOfRedemptions = redemptionCount(_who);\n', '        for (uint64 i = 0; i < numberOfRedemptions; i++) {\n', '            if (tokenRedemptions[_who][i].redemptionId == _redemptionId) {\n', '                total = SafeMath.add(total, tokenRedemptions[_who][i].value);\n', '            }\n', '        }\n', '        return total;\n', '    }\n', '\n', '}\n', '\n', 'contract SpiceToken is RegulatedToken {\n', '\n', '    string public constant name = "SPiCE VC Token";\n', '    string public constant symbol = "SPICE";\n', '    uint8 public constant decimals = 8;\n', '    uint256 private constant INITIAL_INACTIVE_TOKENS = 130 * 1000000 * (10 ** uint256(decimals));  //130 million tokens\n', '\n', '\n', '    function SpiceToken() RegulatedToken() {\n', '        totalInactive = INITIAL_INACTIVE_TOKENS;\n', '        totalSupply = 0;\n', '    }\n', '\n', '}']
