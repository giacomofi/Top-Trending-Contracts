['pragma solidity ^0.4.13;\n', '\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', 'contract QKL is ERC20,Pausable{\n', '\tusing SafeMath for uint256;\n', '\n', '\tstring public constant name="QKL";\n', '\tstring public symbol="QKL";\n', '\tstring public constant version = "1.0";\n', '\tuint256 public constant decimals = 18;\n', '\tuint256 public totalSupply;\n', '\n', '\tuint256 public constant INIT_SUPPLY=10000000000*10**decimals;\n', '\n', '\t//锁仓期数\n', '    struct epoch  {\n', '        uint256 lockEndTime;\n', '        uint256 lockAmount;\n', '    }\n', '\n', '    mapping(address=>epoch[]) public lockEpochsMap;\n', '\n', '\t\n', '    mapping(address => uint256) balances;\n', '\tmapping (address => mapping (address => uint256)) allowed;\n', '\tevent GetETH(address indexed _from, uint256 _value);\n', '\tevent Burn(address indexed burner, uint256 value);\n', '\n', '\t//owner一次性获取代币\n', '\tfunction QKL(){\n', '\t\ttotalSupply=INIT_SUPPLY;\n', '\t\tbalances[msg.sender] = INIT_SUPPLY;\n', '\t\tTransfer(0x0, msg.sender, INIT_SUPPLY);\n', '\t}\n', '    /**\n', '    *销毁代币,用户只能自己销毁自己的\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value > 0);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '\n', '  \t//锁仓接口，可分多期锁仓，多期锁仓金额可累加，这里的锁仓是指限制转账\n', '\tfunction lockBalance(address user, uint256 lockAmount,uint256 lockEndTime) external\n', '\t\tonlyOwner\n', '\t{\n', '\t\t epoch[] storage epochs = lockEpochsMap[user];\n', '\t\t epochs.push(epoch(lockEndTime,lockAmount));\n', '\t}\n', '\n', '\t//允许用户往合约账户打币\n', '\tfunction () payable external\n', '\t{\n', '\t\tGetETH(msg.sender,msg.value);\n', '\t}\n', '\n', '\tfunction etherProceeds() external\n', '\t\tonlyOwner\n', '\t{\n', '\t\tif(!msg.sender.send(this.balance)) revert();\n', '\t}\n', '\n', '  \tfunction transfer(address _to, uint256 _value) whenNotPaused  public  returns (bool)\n', ' \t{\n', '\t\trequire(_to != address(0));\n', '\n', '\t\t//计算锁仓份额\n', '\t\tepoch[] epochs = lockEpochsMap[msg.sender];\n', '\t\tuint256 needLockBalance = 0;\n', '\t\tfor(uint256 i = 0;i<epochs.length;i++)\n', '\t\t{\n', '\t\t\t//如果当前时间小于当期结束时间,则此期有效\n', '\t\t\tif( now < epochs[i].lockEndTime )\n', '\t\t\t{\n', '\t\t\t\tneedLockBalance=needLockBalance.add(epochs[i].lockAmount);\n', '\t\t\t}\n', '\t\t}\n', '\n', '\t\trequire(balances[msg.sender].sub(_value)>=needLockBalance);\n', '\n', '\t\t// SafeMath.sub will throw if there is not enough balance.\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '  \t}\n', '\n', '  \tfunction balanceOf(address _owner) public constant returns (uint256 balance) \n', '  \t{\n', '\t\treturn balances[_owner];\n', '  \t}\n', '\n', '  \tfunction transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool) \n', '  \t{\n', '\t\trequire(_to != address(0));\n', '\n', '\t\t//计算锁仓份额\n', '\t\tepoch[] epochs = lockEpochsMap[_from];\n', '\t\tuint256 needLockBalance = 0;\n', '\t\tfor(uint256 i = 0;i<epochs.length;i++)\n', '\t\t{\n', '\t\t\t//如果当前时间小于当期结束时间,则此期有效\n', '\t\t\tif( now < epochs[i].lockEndTime )\n', '\t\t\t{\n', '\t\t\t\tneedLockBalance = needLockBalance.add(epochs[i].lockAmount);\n', '\t\t\t}\n', '\t\t}\n', '\n', '\t\trequire(balances[_from].sub(_value)>=needLockBalance);\n', '\n', '\t\tuint256 _allowance = allowed[_from][msg.sender];\n', '\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\n', '\t\tTransfer(_from, _to, _value);\n', '\t\treturn true;\n', '  \t}\n', '\n', '  \tfunction approve(address _spender, uint256 _value) public returns (bool) \n', '  \t{\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\tApproval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '  \t}\n', '\n', '  \tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) \n', '  \t{\n', '\t\treturn allowed[_owner][_spender];\n', '  \t}\n', '\n', '\t  \n', '}']
['pragma solidity ^0.4.13;\n', '\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', 'contract QKL is ERC20,Pausable{\n', '\tusing SafeMath for uint256;\n', '\n', '\tstring public constant name="QKL";\n', '\tstring public symbol="QKL";\n', '\tstring public constant version = "1.0";\n', '\tuint256 public constant decimals = 18;\n', '\tuint256 public totalSupply;\n', '\n', '\tuint256 public constant INIT_SUPPLY=10000000000*10**decimals;\n', '\n', '\t//锁仓期数\n', '    struct epoch  {\n', '        uint256 lockEndTime;\n', '        uint256 lockAmount;\n', '    }\n', '\n', '    mapping(address=>epoch[]) public lockEpochsMap;\n', '\n', '\t\n', '    mapping(address => uint256) balances;\n', '\tmapping (address => mapping (address => uint256)) allowed;\n', '\tevent GetETH(address indexed _from, uint256 _value);\n', '\tevent Burn(address indexed burner, uint256 value);\n', '\n', '\t//owner一次性获取代币\n', '\tfunction QKL(){\n', '\t\ttotalSupply=INIT_SUPPLY;\n', '\t\tbalances[msg.sender] = INIT_SUPPLY;\n', '\t\tTransfer(0x0, msg.sender, INIT_SUPPLY);\n', '\t}\n', '    /**\n', '    *销毁代币,用户只能自己销毁自己的\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value > 0);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '\n', '  \t//锁仓接口，可分多期锁仓，多期锁仓金额可累加，这里的锁仓是指限制转账\n', '\tfunction lockBalance(address user, uint256 lockAmount,uint256 lockEndTime) external\n', '\t\tonlyOwner\n', '\t{\n', '\t\t epoch[] storage epochs = lockEpochsMap[user];\n', '\t\t epochs.push(epoch(lockEndTime,lockAmount));\n', '\t}\n', '\n', '\t//允许用户往合约账户打币\n', '\tfunction () payable external\n', '\t{\n', '\t\tGetETH(msg.sender,msg.value);\n', '\t}\n', '\n', '\tfunction etherProceeds() external\n', '\t\tonlyOwner\n', '\t{\n', '\t\tif(!msg.sender.send(this.balance)) revert();\n', '\t}\n', '\n', '  \tfunction transfer(address _to, uint256 _value) whenNotPaused  public  returns (bool)\n', ' \t{\n', '\t\trequire(_to != address(0));\n', '\n', '\t\t//计算锁仓份额\n', '\t\tepoch[] epochs = lockEpochsMap[msg.sender];\n', '\t\tuint256 needLockBalance = 0;\n', '\t\tfor(uint256 i = 0;i<epochs.length;i++)\n', '\t\t{\n', '\t\t\t//如果当前时间小于当期结束时间,则此期有效\n', '\t\t\tif( now < epochs[i].lockEndTime )\n', '\t\t\t{\n', '\t\t\t\tneedLockBalance=needLockBalance.add(epochs[i].lockAmount);\n', '\t\t\t}\n', '\t\t}\n', '\n', '\t\trequire(balances[msg.sender].sub(_value)>=needLockBalance);\n', '\n', '\t\t// SafeMath.sub will throw if there is not enough balance.\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '  \t}\n', '\n', '  \tfunction balanceOf(address _owner) public constant returns (uint256 balance) \n', '  \t{\n', '\t\treturn balances[_owner];\n', '  \t}\n', '\n', '  \tfunction transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool) \n', '  \t{\n', '\t\trequire(_to != address(0));\n', '\n', '\t\t//计算锁仓份额\n', '\t\tepoch[] epochs = lockEpochsMap[_from];\n', '\t\tuint256 needLockBalance = 0;\n', '\t\tfor(uint256 i = 0;i<epochs.length;i++)\n', '\t\t{\n', '\t\t\t//如果当前时间小于当期结束时间,则此期有效\n', '\t\t\tif( now < epochs[i].lockEndTime )\n', '\t\t\t{\n', '\t\t\t\tneedLockBalance = needLockBalance.add(epochs[i].lockAmount);\n', '\t\t\t}\n', '\t\t}\n', '\n', '\t\trequire(balances[_from].sub(_value)>=needLockBalance);\n', '\n', '\t\tuint256 _allowance = allowed[_from][msg.sender];\n', '\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\n', '\t\tTransfer(_from, _to, _value);\n', '\t\treturn true;\n', '  \t}\n', '\n', '  \tfunction approve(address _spender, uint256 _value) public returns (bool) \n', '  \t{\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\tApproval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '  \t}\n', '\n', '  \tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) \n', '  \t{\n', '\t\treturn allowed[_owner][_spender];\n', '  \t}\n', '\n', '\t  \n', '}']
