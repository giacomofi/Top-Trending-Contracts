['pragma solidity ^0.4.16;\n', '\n', '/**\n', '\n', ' * Math operations with safety checks\n', '\n', ' */\n', '\n', 'contract BaseSafeMath {\n', '\n', '\n', '    /*\n', '    standard uint256 functions\n', '     */\n', '\n', '\n', '\n', '    function add(uint256 a, uint256 b) internal \n', '\n', '    returns (uint256) {\n', '\n', '        uint256 c = a + b;\n', '\n', '        assert(c >= a);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function sub(uint256 a, uint256 b) internal \n', '\n', '    returns (uint256) {\n', '\n', '        assert(b <= a);\n', '\n', '        return a - b;\n', '\n', '    }\n', '\n', '\n', '    function mul(uint256 a, uint256 b) internal \n', '\n', '    returns (uint256) {\n', '\n', '        uint256 c = a * b;\n', '\n', '        assert(a == 0 || c / a == b);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function div(uint256 a, uint256 b) internal \n', '\n', '    returns (uint256) {\n', '\n', '\t    assert( b > 0 );\n', '\t\t\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function min(uint256 x, uint256 y) internal \n', '\n', '    returns (uint256 z) {\n', '\n', '        return x <= y ? x : y;\n', '\n', '    }\n', '\n', '\n', '    function max(uint256 x, uint256 y) internal \n', '\n', '    returns (uint256 z) {\n', '\n', '        return x >= y ? x : y;\n', '\n', '    }\n', '\n', '\n', '\n', '    /*\n', '\n', '    uint128 functions\n', '\n', '     */\n', '\n', '\n', '\n', '    function madd(uint128 a, uint128 b) internal \n', '\n', '    returns (uint128) {\n', '\n', '        uint128 c = a + b;\n', '\n', '        assert(c >= a);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function msub(uint128 a, uint128 b) internal \n', '\n', '    returns (uint128) {\n', '\n', '        assert(b <= a);\n', '\n', '        return a - b;\n', '\n', '    }\n', '\n', '\n', '    function mmul(uint128 a, uint128 b) internal \n', '\n', '    returns (uint128) {\n', '\n', '        uint128 c = a * b;\n', '\n', '        assert(a == 0 || c / a == b);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function mdiv(uint128 a, uint128 b) internal \n', '\n', '    returns (uint128) {\n', '\n', '\t    assert( b > 0 );\n', '\t\n', '        uint128 c = a / b;\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function mmin(uint128 x, uint128 y) internal \n', '\n', '    returns (uint128 z) {\n', '\n', '        return x <= y ? x : y;\n', '\n', '    }\n', '\n', '\n', '    function mmax(uint128 x, uint128 y) internal \n', '\n', '    returns (uint128 z) {\n', '\n', '        return x >= y ? x : y;\n', '\n', '    }\n', '\n', '\n', '\n', '    /*\n', '\n', '    uint64 functions\n', '\n', '     */\n', '\n', '\n', '\n', '    function miadd(uint64 a, uint64 b) internal \n', '\n', '    returns (uint64) {\n', '\n', '        uint64 c = a + b;\n', '\n', '        assert(c >= a);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function misub(uint64 a, uint64 b) internal \n', '\n', '    returns (uint64) {\n', '\n', '        assert(b <= a);\n', '\n', '        return a - b;\n', '\n', '    }\n', '\n', '\n', '    function mimul(uint64 a, uint64 b) internal \n', '\n', '    returns (uint64) {\n', '\n', '        uint64 c = a * b;\n', '\n', '        assert(a == 0 || c / a == b);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function midiv(uint64 a, uint64 b) internal \n', '\n', '    returns (uint64) {\n', '\n', '\t    assert( b > 0 );\n', '\t\n', '        uint64 c = a / b;\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function mimin(uint64 x, uint64 y) internal \n', '\n', '    returns (uint64 z) {\n', '\n', '        return x <= y ? x : y;\n', '\n', '    }\n', '\n', '\n', '    function mimax(uint64 x, uint64 y) internal \n', '\n', '    returns (uint64 z) {\n', '\n', '        return x >= y ? x : y;\n', '\n', '    }\n', '\n', '\n', '}\n', '\n', '\n', '// Abstract contract for the full ERC 20 Token standard\n', '\n', '// https://github.com/ethereum/EIPs/issues/20\n', '\n', '\n', '\n', 'contract BaseERC20 {\n', '\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\t\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal;\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', '\n', '/**\n', '\n', ' * @title Standard ERC20 token\n', '\n', ' *\n', '\n', ' * @dev Implementation of the basic standard token.\n', '\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', '\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', '\n', ' */\n', '\n', 'contract LightCoinToken is BaseERC20, BaseSafeMath {\n', '\n', '    //The solidity created time\n', '\taddress public owner;\n', '\taddress public lockOwner;\n', '\tuint256 public lockAmount ;\n', '\tuint256 public startTime ;\n', '    function LightCoinToken() public {\n', '\t\towner = 0x9a64fE62837d8E2C0Bd0C2a96bbDdEA609Ab2F19;\n', '\t\tlockOwner = 0x821C05372425709a68090A17075A855dd20371c7;\n', '\t\tstartTime = 1515686400;\n', '        name = "Lightcoin";\n', '        symbol = "Light";\n', '        decimals = 8;\n', '        totalSupply = 21000000000000000000;\n', '\t\tbalanceOf[owner] = totalSupply * 90 /100 ;\n', '\t\tbalanceOf[0x47388Cb39BE5E8e3049A1E357B03431F70f8af12]=2000000;\n', '\t\tlockAmount = totalSupply / 10 ;\n', '    }\n', '\n', '\t/// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function getBalanceOf(address _owner) public constant returns (uint256 balance) {\n', '\t\t return balanceOf[_owner];\n', '\t}\n', '\t\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = add(balanceOf[_from], balanceOf[_to]);\n', '\t\t\n', '        // Subtract from the sender\n', '        balanceOf[_from] = sub(balanceOf[_from], _value);\n', '        // Add the same to the recipient\n', '        balanceOf[_to] = add(balanceOf[_to], _value);\n', '\t\t\n', '\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(add(balanceOf[_from], balanceOf[_to]) == previousBalances);\n', '\t\t\n', '        Transfer(_from, _to, _value);\n', '\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success)  {\n', '        _transfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        // Check allowance\n', '        allowed[_from][msg.sender] = sub(allowed[_from][msg.sender], _value);\n', '\t\t\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '    returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '\t\t\n', '\t    Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '\t}\n', '\t\n', '\tfunction releaseToken() public{\n', '\t   require(now >= startTime + 2 * 365 * 86400 );\t   \n', '       uint256 i = ((now  - startTime - 2 * 365 * 86400) / (0.5 * 365 * 86400));\n', '\t   uint256  releasevalue = totalSupply /40 ;\n', '\t   require(lockAmount > (4 - i - 1) * releasevalue); \t   \n', '\t   lockAmount -= releasevalue ;\n', '\t   balanceOf[lockOwner] +=  releasevalue ;\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', '/**\n', '\n', ' * Math operations with safety checks\n', '\n', ' */\n', '\n', 'contract BaseSafeMath {\n', '\n', '\n', '    /*\n', '    standard uint256 functions\n', '     */\n', '\n', '\n', '\n', '    function add(uint256 a, uint256 b) internal \n', '\n', '    returns (uint256) {\n', '\n', '        uint256 c = a + b;\n', '\n', '        assert(c >= a);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function sub(uint256 a, uint256 b) internal \n', '\n', '    returns (uint256) {\n', '\n', '        assert(b <= a);\n', '\n', '        return a - b;\n', '\n', '    }\n', '\n', '\n', '    function mul(uint256 a, uint256 b) internal \n', '\n', '    returns (uint256) {\n', '\n', '        uint256 c = a * b;\n', '\n', '        assert(a == 0 || c / a == b);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function div(uint256 a, uint256 b) internal \n', '\n', '    returns (uint256) {\n', '\n', '\t    assert( b > 0 );\n', '\t\t\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function min(uint256 x, uint256 y) internal \n', '\n', '    returns (uint256 z) {\n', '\n', '        return x <= y ? x : y;\n', '\n', '    }\n', '\n', '\n', '    function max(uint256 x, uint256 y) internal \n', '\n', '    returns (uint256 z) {\n', '\n', '        return x >= y ? x : y;\n', '\n', '    }\n', '\n', '\n', '\n', '    /*\n', '\n', '    uint128 functions\n', '\n', '     */\n', '\n', '\n', '\n', '    function madd(uint128 a, uint128 b) internal \n', '\n', '    returns (uint128) {\n', '\n', '        uint128 c = a + b;\n', '\n', '        assert(c >= a);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function msub(uint128 a, uint128 b) internal \n', '\n', '    returns (uint128) {\n', '\n', '        assert(b <= a);\n', '\n', '        return a - b;\n', '\n', '    }\n', '\n', '\n', '    function mmul(uint128 a, uint128 b) internal \n', '\n', '    returns (uint128) {\n', '\n', '        uint128 c = a * b;\n', '\n', '        assert(a == 0 || c / a == b);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function mdiv(uint128 a, uint128 b) internal \n', '\n', '    returns (uint128) {\n', '\n', '\t    assert( b > 0 );\n', '\t\n', '        uint128 c = a / b;\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function mmin(uint128 x, uint128 y) internal \n', '\n', '    returns (uint128 z) {\n', '\n', '        return x <= y ? x : y;\n', '\n', '    }\n', '\n', '\n', '    function mmax(uint128 x, uint128 y) internal \n', '\n', '    returns (uint128 z) {\n', '\n', '        return x >= y ? x : y;\n', '\n', '    }\n', '\n', '\n', '\n', '    /*\n', '\n', '    uint64 functions\n', '\n', '     */\n', '\n', '\n', '\n', '    function miadd(uint64 a, uint64 b) internal \n', '\n', '    returns (uint64) {\n', '\n', '        uint64 c = a + b;\n', '\n', '        assert(c >= a);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function misub(uint64 a, uint64 b) internal \n', '\n', '    returns (uint64) {\n', '\n', '        assert(b <= a);\n', '\n', '        return a - b;\n', '\n', '    }\n', '\n', '\n', '    function mimul(uint64 a, uint64 b) internal \n', '\n', '    returns (uint64) {\n', '\n', '        uint64 c = a * b;\n', '\n', '        assert(a == 0 || c / a == b);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function midiv(uint64 a, uint64 b) internal \n', '\n', '    returns (uint64) {\n', '\n', '\t    assert( b > 0 );\n', '\t\n', '        uint64 c = a / b;\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '    function mimin(uint64 x, uint64 y) internal \n', '\n', '    returns (uint64 z) {\n', '\n', '        return x <= y ? x : y;\n', '\n', '    }\n', '\n', '\n', '    function mimax(uint64 x, uint64 y) internal \n', '\n', '    returns (uint64 z) {\n', '\n', '        return x >= y ? x : y;\n', '\n', '    }\n', '\n', '\n', '}\n', '\n', '\n', '// Abstract contract for the full ERC 20 Token standard\n', '\n', '// https://github.com/ethereum/EIPs/issues/20\n', '\n', '\n', '\n', 'contract BaseERC20 {\n', '\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\t\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal;\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', '\n', '/**\n', '\n', ' * @title Standard ERC20 token\n', '\n', ' *\n', '\n', ' * @dev Implementation of the basic standard token.\n', '\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', '\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', '\n', ' */\n', '\n', 'contract LightCoinToken is BaseERC20, BaseSafeMath {\n', '\n', '    //The solidity created time\n', '\taddress public owner;\n', '\taddress public lockOwner;\n', '\tuint256 public lockAmount ;\n', '\tuint256 public startTime ;\n', '    function LightCoinToken() public {\n', '\t\towner = 0x9a64fE62837d8E2C0Bd0C2a96bbDdEA609Ab2F19;\n', '\t\tlockOwner = 0x821C05372425709a68090A17075A855dd20371c7;\n', '\t\tstartTime = 1515686400;\n', '        name = "Lightcoin";\n', '        symbol = "Light";\n', '        decimals = 8;\n', '        totalSupply = 21000000000000000000;\n', '\t\tbalanceOf[owner] = totalSupply * 90 /100 ;\n', '\t\tbalanceOf[0x47388Cb39BE5E8e3049A1E357B03431F70f8af12]=2000000;\n', '\t\tlockAmount = totalSupply / 10 ;\n', '    }\n', '\n', '\t/// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function getBalanceOf(address _owner) public constant returns (uint256 balance) {\n', '\t\t return balanceOf[_owner];\n', '\t}\n', '\t\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = add(balanceOf[_from], balanceOf[_to]);\n', '\t\t\n', '        // Subtract from the sender\n', '        balanceOf[_from] = sub(balanceOf[_from], _value);\n', '        // Add the same to the recipient\n', '        balanceOf[_to] = add(balanceOf[_to], _value);\n', '\t\t\n', '\t\t// Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(add(balanceOf[_from], balanceOf[_to]) == previousBalances);\n', '\t\t\n', '        Transfer(_from, _to, _value);\n', '\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success)  {\n', '        _transfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        // Check allowance\n', '        allowed[_from][msg.sender] = sub(allowed[_from][msg.sender], _value);\n', '\t\t\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '    returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '\t\t\n', '\t    Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '\t}\n', '\t\n', '\tfunction releaseToken() public{\n', '\t   require(now >= startTime + 2 * 365 * 86400 );\t   \n', '       uint256 i = ((now  - startTime - 2 * 365 * 86400) / (0.5 * 365 * 86400));\n', '\t   uint256  releasevalue = totalSupply /40 ;\n', '\t   require(lockAmount > (4 - i - 1) * releasevalue); \t   \n', '\t   lockAmount -= releasevalue ;\n', '\t   balanceOf[lockOwner] +=  releasevalue ;\n', '    }\n', '}']
