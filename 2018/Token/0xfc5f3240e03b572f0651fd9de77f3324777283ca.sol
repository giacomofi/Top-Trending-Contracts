['pragma solidity 0.4.24;\n', '\n', 'interface IMintableToken {\n', '    function mint(address _to, uint256 _amount) public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract preICO is Ownable, Pausable {\n', '    event Approved(address _address, uint _tokensAmount);\n', '    event Declined(address _address, uint _tokensAmount);\n', '    event weiReceived(address _address, uint _weiAmount);\n', '    event RateChanged(uint _newRate);\n', '\n', '    uint public constant startTime = 1529431200; // June, 19. 07:00 PM (UTC)\n', '    uint public endTime = 1532973600; // July, 30. 07:00 PM (UTC)\n', '    uint public rate;\n', '    uint public tokensHardCap = 10000000 * 1 ether; // 10 million tokens\n', '\n', '    uint public tokensMintedDuringPreICO = 0;\n', '    uint public tokensToMintInHold = 0;\n', '\n', '    mapping(address=>uint) public tokensHoldMap;\n', '\n', '    IMintableToken public DXC;\n', '\n', '    function preICO(address _DXC) {\n', '        DXC = IMintableToken(_DXC);\n', '    }\n', '\n', '    /**\n', '    * @dev Handles incoming eth transfers\n', '    * and mints tokens to msg.sender\n', '    */\n', '    function () payable ongoingPreICO whenNotPaused {\n', '        uint tokensToMint = msg.value * rate;\n', '        tokensHoldMap[msg.sender] = SafeMath.add(tokensHoldMap[msg.sender], tokensToMint);\n', '        tokensToMintInHold = SafeMath.add(tokensToMintInHold, tokensToMint);\n', '        weiReceived(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '    * @dev Approves token minting for specified investor\n', '    * @param _address Address of investor in `holdMap`\n', '    */\n', '    function approve(address _address) public onlyOwner capWasNotReached(_address) {\n', '        uint tokensAmount = tokensHoldMap[_address];\n', '        tokensHoldMap[_address] = 0;\n', '        tokensMintedDuringPreICO = SafeMath.add(tokensMintedDuringPreICO, tokensAmount);\n', '        tokensToMintInHold = SafeMath.sub(tokensToMintInHold, tokensAmount);\n', '        Approved(_address, tokensAmount);\n', '\n', '        DXC.mint(_address, tokensAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Declines token minting for specified investor\n', '    * @param _address Address of investor in `holdMap`\n', '    */\n', '    function decline(address _address) public onlyOwner {\n', '        tokensToMintInHold = SafeMath.sub(tokensToMintInHold, tokensHoldMap[_address]);\n', '        Declined(_address, tokensHoldMap[_address]);\n', '\n', '        tokensHoldMap[_address] = 0;\n', '    }\n', '\n', '    /**\n', '    * @dev Sets rate if it was not set earlier\n', '    * @param _rate preICO wei to tokens rate\n', '    */\n', '    function setRate(uint _rate) public onlyOwner {\n', '        rate = _rate;\n', '\n', '        RateChanged(_rate);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer specified amount of wei the owner\n', '    * @param _weiToWithdraw Amount of wei to transfer\n', '    */\n', '    function withdraw(uint _weiToWithdraw) public onlyOwner {\n', '        msg.sender.transfer(_weiToWithdraw);\n', '    }\n', '\n', '    /**\n', '    * @dev Increases end time by specified amount of seconds\n', '    * @param _secondsToIncrease Amount of second to increase end time\n', '    */\n', '    function increaseDuration(uint _secondsToIncrease) public onlyOwner {\n', '        endTime = SafeMath.add(endTime, _secondsToIncrease);\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if crowdsale time is not started or finished\n', '    */\n', '    modifier ongoingPreICO {\n', '        require(now >= startTime && now <= endTime);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if preICO hard cap will be exceeded after minting\n', '    */\n', '    modifier capWasNotReached(address _address) {\n', '        require(SafeMath.add(tokensMintedDuringPreICO, tokensHoldMap[_address]) <= tokensHardCap);\n', '        _;\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', 'interface IMintableToken {\n', '    function mint(address _to, uint256 _amount) public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract preICO is Ownable, Pausable {\n', '    event Approved(address _address, uint _tokensAmount);\n', '    event Declined(address _address, uint _tokensAmount);\n', '    event weiReceived(address _address, uint _weiAmount);\n', '    event RateChanged(uint _newRate);\n', '\n', '    uint public constant startTime = 1529431200; // June, 19. 07:00 PM (UTC)\n', '    uint public endTime = 1532973600; // July, 30. 07:00 PM (UTC)\n', '    uint public rate;\n', '    uint public tokensHardCap = 10000000 * 1 ether; // 10 million tokens\n', '\n', '    uint public tokensMintedDuringPreICO = 0;\n', '    uint public tokensToMintInHold = 0;\n', '\n', '    mapping(address=>uint) public tokensHoldMap;\n', '\n', '    IMintableToken public DXC;\n', '\n', '    function preICO(address _DXC) {\n', '        DXC = IMintableToken(_DXC);\n', '    }\n', '\n', '    /**\n', '    * @dev Handles incoming eth transfers\n', '    * and mints tokens to msg.sender\n', '    */\n', '    function () payable ongoingPreICO whenNotPaused {\n', '        uint tokensToMint = msg.value * rate;\n', '        tokensHoldMap[msg.sender] = SafeMath.add(tokensHoldMap[msg.sender], tokensToMint);\n', '        tokensToMintInHold = SafeMath.add(tokensToMintInHold, tokensToMint);\n', '        weiReceived(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '    * @dev Approves token minting for specified investor\n', '    * @param _address Address of investor in `holdMap`\n', '    */\n', '    function approve(address _address) public onlyOwner capWasNotReached(_address) {\n', '        uint tokensAmount = tokensHoldMap[_address];\n', '        tokensHoldMap[_address] = 0;\n', '        tokensMintedDuringPreICO = SafeMath.add(tokensMintedDuringPreICO, tokensAmount);\n', '        tokensToMintInHold = SafeMath.sub(tokensToMintInHold, tokensAmount);\n', '        Approved(_address, tokensAmount);\n', '\n', '        DXC.mint(_address, tokensAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Declines token minting for specified investor\n', '    * @param _address Address of investor in `holdMap`\n', '    */\n', '    function decline(address _address) public onlyOwner {\n', '        tokensToMintInHold = SafeMath.sub(tokensToMintInHold, tokensHoldMap[_address]);\n', '        Declined(_address, tokensHoldMap[_address]);\n', '\n', '        tokensHoldMap[_address] = 0;\n', '    }\n', '\n', '    /**\n', '    * @dev Sets rate if it was not set earlier\n', '    * @param _rate preICO wei to tokens rate\n', '    */\n', '    function setRate(uint _rate) public onlyOwner {\n', '        rate = _rate;\n', '\n', '        RateChanged(_rate);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer specified amount of wei the owner\n', '    * @param _weiToWithdraw Amount of wei to transfer\n', '    */\n', '    function withdraw(uint _weiToWithdraw) public onlyOwner {\n', '        msg.sender.transfer(_weiToWithdraw);\n', '    }\n', '\n', '    /**\n', '    * @dev Increases end time by specified amount of seconds\n', '    * @param _secondsToIncrease Amount of second to increase end time\n', '    */\n', '    function increaseDuration(uint _secondsToIncrease) public onlyOwner {\n', '        endTime = SafeMath.add(endTime, _secondsToIncrease);\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if crowdsale time is not started or finished\n', '    */\n', '    modifier ongoingPreICO {\n', '        require(now >= startTime && now <= endTime);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if preICO hard cap will be exceeded after minting\n', '    */\n', '    modifier capWasNotReached(address _address) {\n', '        require(SafeMath.add(tokensMintedDuringPreICO, tokensHoldMap[_address]) <= tokensHardCap);\n', '        _;\n', '    }\n', '}']
