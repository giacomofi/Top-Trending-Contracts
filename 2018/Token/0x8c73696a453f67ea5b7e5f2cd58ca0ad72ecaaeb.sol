['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * ERC 20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract MD  {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "MD Token";\n', '    string public constant symbol = "MD";\n', '\n', '    uint public constant decimals = 18;\n', '\n', '    // Total supply is 3.5 billion\n', '    uint256 _totalSupply = 3500000000 * 10**decimals;\n', '\n', '    mapping(address => uint256) balances; //list of balance of each address\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    address public owner;\n', '\n', '    modifier ownerOnly {\n', '      require(\n', '            msg.sender == owner,\n', '            "Sender not authorized."\n', '        );\n', '        _;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256 supply) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    //constructor\n', '    constructor(address _owner) public{\n', '        owner = _owner;\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(0x0, _owner, _totalSupply);\n', '    }\n', '\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     * Prevent transfers until lock period is over.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        if (balances[msg.sender] >= _value && balances[_to].add(_value) > balances[_to]) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     * Prevent transfers until freeze period is over.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to].add(_value) > balances[_to]) {\n', '            balances[_to] = _value.add(balances[_to]);\n', '            balances[_from] = balances[_from].sub(_value);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Change owner address (where ICO ETH is being forwarded).\n', '     */\n', '    function changeOwner(address _newowner) public ownerOnly returns (bool success) {\n', '        owner = _newowner;\n', '        return true;\n', '    }\n', '\n', '    // only owner can kill\n', '    function kill() public ownerOnly {\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', '\n', 'contract TokenLock {\n', '    using SafeMath for uint256;\n', '    address public owner;\n', '    address public md_address;\n', '    \n', '    struct LockRecord {\n', '        address userAddress;\n', '        uint256 amount;\n', '        uint256 releaseTime;\n', '    }\n', '    \n', '    LockRecord[] lockRecords;\n', '    mapping(uint256 => bool) lockStatus;\n', '    \n', '    MD md;\n', '\n', '    event Deposit(address indexed _userAddress, uint256 _amount, uint256 _releaseTime, uint256 _index);\n', '    event Release(address indexed _userAddress, address indexed _merchantAddress, uint256 _merchantAmount, uint256 _releaseTime, uint256 _index);\n', '    \n', '    modifier ownerOnly {\n', '      require(\n', '            msg.sender == owner,\n', '            "Sender not authorized."\n', '        );\n', '        _;\n', '    }\n', '    \n', '    //constructor\n', '    constructor(address _owner, address _md_address) public{\n', '        owner = _owner;\n', '        md_address = _md_address;\n', '        md = MD(md_address);\n', '    }\n', '\n', '    function getContractBalance() public view returns (uint256 _balance) {\n', '        return md.balanceOf(this);\n', '    }\n', '    \n', '    function deposit(address _userAddress, uint256 _amount, uint256 _days) public ownerOnly {\n', '        require(_amount > 0);\n', '        require(md.transferFrom(_userAddress, this, _amount));\n', '        uint256 releaseTime = block.timestamp + _days * 1 days;\n', '        LockRecord memory r = LockRecord(_userAddress, _amount, releaseTime);\n', '        uint256 l = lockRecords.push(r);\n', '        emit Deposit(_userAddress, _amount, releaseTime, l.sub(1));\n', '    }\n', '    \n', '    function release(uint256 _index, address _merchantAddress, uint256 _merchantAmount) public ownerOnly {\n', '        require(\n', '            lockStatus[_index] == false,\n', '            "Already released."\n', '        );\n', '        \n', '        LockRecord storage r = lockRecords[_index];\n', '        \n', '        require(\n', '            r.releaseTime <= block.timestamp,\n', '            "Release time not reached"\n', '        );\n', '        \n', '        require(\n', '            _merchantAmount <= r.amount,\n', '            "Merchant amount larger than locked amount."\n', '        );\n', '\n', '        \n', '        if (_merchantAmount > 0) {\n', '            require(md.transfer(_merchantAddress, _merchantAmount));\n', '        }\n', '        \n', '        uint256 remainingAmount = r.amount.sub(_merchantAmount);\n', '        if (remainingAmount > 0){\n', '            require(md.transfer(r.userAddress, remainingAmount));\n', '        }\n', '\n', '        lockStatus[_index] = true;\n', '        emit Release(r.userAddress, _merchantAddress, _merchantAmount, r.releaseTime, _index);\n', '    }\n', '    \n', '    /**\n', '     * Change owner address (where ICO ETH is being forwarded).\n', '     */\n', '    function changeOwner(address _newowner) public ownerOnly returns (bool success) {\n', '        owner = _newowner;\n', '        return true;\n', '    }\n', '    \n', '    // forward all eth to owner\n', '    function() payable public {\n', '        if (!owner.call.value(msg.value)()) revert();\n', '    }\n', '\n', '    // only owner can kill\n', '    function kill() public ownerOnly {\n', '        md.transfer(owner, getContractBalance());\n', '        selfdestruct(owner);\n', '    }\n', '\n', '}']