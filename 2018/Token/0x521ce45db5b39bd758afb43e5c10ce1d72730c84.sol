['/*\n', 'Implements RAM-TOKEN-DEVELOPER 2018\n', '.*/\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', 'contract ERC20Interface {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', ' \n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract RAMToken is ERC20Interface, Ownable {\n', '\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '   \n', '    string public name;                   \n', '    uint8 public decimals;                \n', '    string public symbol;                 \n', '    uint256 public totalSupply;\n', '    uint256 public tokenDecimal = 1000000000000000000;\n', '  \n', '\n', '    constructor() public {\n', '        totalSupply = 650000000 * tokenDecimal;\n', '        balances[msg.sender] = totalSupply;           \n', '        name = "Retail and Merchant Token";                                   \n', '        decimals = 18;                            \n', '        symbol = "RAM";                               \n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value); \n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyOwner public returns (bool success) {\n', '        require(balances[_from] >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '\t\tallowed[_from][msg.sender] -= _value;\n', '        \n', '        emit Transfer(_from, _to, _value); \n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value); \n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function () payable public {\n', '\t\tbalances[msg.sender] += msg.value;\n', '\t}\n', '}']
['/*\n', 'Implements RAM-TOKEN-DEVELOPER 2018\n', '.*/\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', 'contract ERC20Interface {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', ' \n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract RAMToken is ERC20Interface, Ownable {\n', '\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '   \n', '    string public name;                   \n', '    uint8 public decimals;                \n', '    string public symbol;                 \n', '    uint256 public totalSupply;\n', '    uint256 public tokenDecimal = 1000000000000000000;\n', '  \n', '\n', '    constructor() public {\n', '        totalSupply = 650000000 * tokenDecimal;\n', '        balances[msg.sender] = totalSupply;           \n', '        name = "Retail and Merchant Token";                                   \n', '        decimals = 18;                            \n', '        symbol = "RAM";                               \n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value); \n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyOwner public returns (bool success) {\n', '        require(balances[_from] >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '\t\tallowed[_from][msg.sender] -= _value;\n', '        \n', '        emit Transfer(_from, _to, _value); \n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value); \n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function () payable public {\n', '\t\tbalances[msg.sender] += msg.value;\n', '\t}\n', '}']
