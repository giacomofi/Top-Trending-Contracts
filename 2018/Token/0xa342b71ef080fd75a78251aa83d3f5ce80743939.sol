['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract QIUToken is StandardToken,Ownable {\n', '    string public name = &#39;QIUToken&#39;;\n', '    string public symbol = &#39;QIU&#39;;\n', '    uint8 public decimals = 0;\n', '    uint public INITIAL_SUPPLY = 5000000000;\n', '    uint public eth2qiuRate = 10000;\n', '\n', '    function() public payable { } // make this contract to receive ethers\n', '\n', '    function QIUToken() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[owner] = INITIAL_SUPPLY / 10;\n', '        balances[this] = INITIAL_SUPPLY - balances[owner];\n', '    }\n', '\n', '    function getOwner() public view returns (address) {\n', '        return owner;\n', '    }  \n', '    \n', '    /**\n', '    * @dev Transfer tokens from one address to another, only owner can do this super-user operate\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function ownerTransferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(tx.origin == owner); // only the owner can call the method.\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '      /**\n', '    * @dev transfer token for a specified address,but different from transfer is replace msg.sender with tx.origin\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function originTransfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[tx.origin]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[tx.origin] = balances[tx.origin].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(tx.origin, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    event ExchangeForETH(address fromAddr,address to,uint qiuAmount,uint ethAmount);\n', '    function exchangeForETH(uint qiuAmount) public returns (bool){\n', '        uint ethAmount = qiuAmount * 1000000000000000000 / eth2qiuRate; // only accept multiple of 100\n', '        require(this.balance >= ethAmount);\n', '        balances[this] = balances[this].add(qiuAmount);\n', '        balances[msg.sender] = balances[msg.sender].sub(qiuAmount);\n', '        msg.sender.transfer(ethAmount);\n', '        ExchangeForETH(this,msg.sender,qiuAmount,ethAmount);\n', '        return true;\n', '    }\n', '\n', '    event ExchangeForQIU(address fromAddr,address to,uint qiuAmount,uint ethAmount);\n', '    function exchangeForQIU() payable public returns (bool){\n', '        uint qiuAmount = msg.value * eth2qiuRate / 1000000000000000000;\n', '        require(qiuAmount <= balances[this]);\n', '        balances[this] = balances[this].sub(qiuAmount);\n', '        balances[msg.sender] = balances[msg.sender].add(qiuAmount);\n', '        ExchangeForQIU(this,msg.sender,qiuAmount,msg.value);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '    // transfer out method\n', '    function ownerETHCashout(address account) public onlyOwner {\n', '        account.transfer(this.balance);\n', '    }*/\n', '    function getETHBalance() public view returns (uint) {\n', '        return this.balance; // balance is "inherited" from the address type\n', '    }\n', '}\n', '\n', 'contract SoccerChampion is Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    struct Tournament {\n', '        uint id;\n', '        bool isEnded;\n', '        bool isLockedForSupport;\n', '        bool initialized;\n', '        Team[] teams;\n', '        SupportTicket[] tickets;\n', '    }\n', '    \n', '    struct Team {\n', '        uint id;\n', '        bool isKnockout;\n', '        bool isChampion;\n', '    }\n', '\n', '    struct SupportTicket {\n', '        uint teamId;\n', '        address supportAddres;\n', '        uint supportAmount;\n', '    }\n', '\n', '    //ufixed private serviceChargeRate = 1/100;\n', '    mapping (uint => Tournament) public tournaments;\n', '    uint private _nextTournamentId = 0;\n', '    QIUToken public _internalToken;\n', '    uint private _commissionNumber;\n', '    uint private _commissionScale;\n', '    \n', '    function SoccerChampion(QIUToken _tokenAddress) public {\n', '        _nextTournamentId = 0;\n', '        _internalToken = _tokenAddress;\n', '        _commissionNumber = 2;\n', '        _commissionScale = 100;\n', '    }\n', '\n', '    function modifyCommission(uint number,uint scale) public onlyOwner returns(bool){\n', '        _commissionNumber = number;\n', '        _commissionScale = scale;\n', '        return true;\n', '    }\n', '\n', '    event NewTouramentCreateSuccess(uint newTourId);\n', '    function createNewTourament(uint[] teamIds) public onlyOwner{\n', '        uint newTourId = _nextTournamentId;\n', '        tournaments[newTourId].id = newTourId;\n', '        tournaments[newTourId].isEnded = false;\n', '        tournaments[newTourId].isLockedForSupport = false;\n', '        tournaments[newTourId].initialized = true;\n', '        for(uint idx = 0; idx < teamIds.length; idx ++){\n', '            Team memory team;\n', '            team.id = teamIds[idx];\n', '            team.isChampion = false;\n', '            tournaments[newTourId].teams.push(team);\n', '        }\n', '        _nextTournamentId ++;   \n', '        NewTouramentCreateSuccess(newTourId);\n', '    }\n', '\n', '    function supportTeam(uint tournamentId, uint teamId, uint amount) public {\n', '        require(tournaments[tournamentId].initialized);\n', '        require(_internalToken.balanceOf(msg.sender) >= amount);\n', '        require(!tournaments[tournamentId].isEnded);\n', '        require(!tournaments[tournamentId].isLockedForSupport);\n', '        require(amount > 0);\n', '        SupportTicket memory ticket;\n', '        ticket.teamId = teamId;\n', '        ticket.supportAddres = msg.sender;\n', '        ticket.supportAmount = amount;\n', '        _internalToken.originTransfer(this, amount);\n', '        tournaments[tournamentId].tickets.push(ticket);\n', '    }\n', '\n', '    function _getTournamentSupportAmount(uint tournamentId) public view returns(uint){\n', '        uint supportAmount = 0;\n', '        for(uint idx = 0; idx < tournaments[tournamentId].tickets.length; idx++){\n', '            supportAmount = supportAmount.add(tournaments[tournamentId].tickets[idx].supportAmount);\n', '        }\n', '        return supportAmount;\n', '    }\n', '\n', '    function _getTeamSupportAmount(uint tournamentId, uint teamId) public view returns(uint){\n', '        uint supportAmount = 0;\n', '        for(uint idx = 0; idx < tournaments[tournamentId].tickets.length; idx++){\n', '            if(tournaments[tournamentId].tickets[idx].teamId == teamId){\n', '                supportAmount = supportAmount.add(tournaments[tournamentId].tickets[idx].supportAmount);\n', '            }\n', '        }\n', '        return supportAmount;\n', '    }\n', '\n', '    function _getUserSupportForTeamInTournament(uint tournamentId, uint teamId) public view returns(uint){\n', '        uint supportAmount = 0;\n', '        for(uint idx = 0; idx < tournaments[tournamentId].tickets.length; idx++){\n', '            if(tournaments[tournamentId].tickets[idx].teamId == teamId && tournaments[tournamentId].tickets[idx].supportAddres == msg.sender){\n', '                supportAmount = supportAmount.add(tournaments[tournamentId].tickets[idx].supportAmount);\n', '            }\n', '        }\n', '        return supportAmount;\n', '    }\n', '\n', '\n', '    function getTeamlistSupportInTournament(uint tournamentId) public view returns(uint[] teamIds, uint[] supportAmounts, bool[] knockOuts, uint championTeamId, bool isEnded, bool isLocked){  \n', '        if(tournaments[tournamentId].initialized){\n', '            teamIds = new uint[](tournaments[tournamentId].teams.length);\n', '            supportAmounts = new uint[](tournaments[tournamentId].teams.length);\n', '            knockOuts = new bool[](tournaments[tournamentId].teams.length);\n', '            championTeamId = 0;\n', '            for(uint tidx = 0; tidx < tournaments[tournamentId].teams.length; tidx++){\n', '                teamIds[tidx] = tournaments[tournamentId].teams[tidx].id;\n', '                if(tournaments[tournamentId].teams[tidx].isChampion){\n', '                    championTeamId = teamIds[tidx];\n', '                }\n', '                knockOuts[tidx] = tournaments[tournamentId].teams[tidx].isKnockout;\n', '                supportAmounts[tidx] = _getTeamSupportAmount(tournamentId, teamIds[tidx]);\n', '            }\n', '            isEnded = tournaments[tournamentId].isEnded;\n', '            isLocked = tournaments[tournamentId].isLockedForSupport;\n', '        }\n', '    }\n', '\n', '    function getUserSupportInTournament(uint tournamentId) public view returns(uint[] teamIds, uint[] supportAmounts){\n', '        if(tournaments[tournamentId].initialized){\n', '            teamIds = new uint[](tournaments[tournamentId].teams.length);\n', '            supportAmounts = new uint[](tournaments[tournamentId].teams.length);\n', '            for(uint tidx = 0; tidx < tournaments[tournamentId].teams.length; tidx++){\n', '                teamIds[tidx] = tournaments[tournamentId].teams[tidx].id;\n', '                uint userSupportAmount = _getUserSupportForTeamInTournament(tournamentId, teamIds[tidx]);\n', '                supportAmounts[tidx] = userSupportAmount;\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    function getUserWinInTournament(uint tournamentId) public view returns(bool isEnded, uint winAmount){\n', '        if(tournaments[tournamentId].initialized){\n', '            isEnded = tournaments[tournamentId].isEnded;\n', '            if(isEnded){\n', '                for(uint tidx = 0; tidx < tournaments[tournamentId].teams.length; tidx++){\n', '                    Team memory team = tournaments[tournamentId].teams[tidx];\n', '                    if(team.isChampion){\n', '                        uint tournamentSupportAmount = _getTournamentSupportAmount(tournamentId);\n', '                        uint teamSupportAmount = _getTeamSupportAmount(tournamentId, team.id);\n', '                        uint userSupportAmount = _getUserSupportForTeamInTournament(tournamentId, team.id);\n', '                        uint gainAmount = (userSupportAmount.mul(tournamentSupportAmount)).div(teamSupportAmount);\n', '                        winAmount = (gainAmount.mul(_commissionScale.sub(_commissionNumber))).div(_commissionScale);\n', '                    }\n', '                }\n', '            }else{\n', '                winAmount = 0;\n', '            }\n', '        }\n', '    }\n', '\n', '    function knockoutTeam(uint tournamentId, uint teamId) public onlyOwner{\n', '        require(tournaments[tournamentId].initialized);\n', '        require(!tournaments[tournamentId].isEnded);\n', '        for(uint tidx = 0; tidx < tournaments[tournamentId].teams.length; tidx++){\n', '            Team storage team = tournaments[tournamentId].teams[tidx];\n', '            if(team.id == teamId){\n', '                team.isKnockout = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    event endTournamentSuccess(uint tourId);\n', '    function endTournament(uint tournamentId, uint championTeamId) public onlyOwner{\n', '        require(tournaments[tournamentId].initialized);\n', '        require(!tournaments[tournamentId].isEnded);\n', '        tournaments[tournamentId].isEnded = true;\n', '        uint tournamentSupportAmount = _getTournamentSupportAmount(tournaments[tournamentId].id);\n', '        uint teamSupportAmount = _getTeamSupportAmount(tournaments[tournamentId].id, championTeamId);\n', '        uint totalClearAmount = 0;\n', '        for(uint tidx = 0; tidx < tournaments[tournamentId].teams.length; tidx++){\n', '            Team storage team = tournaments[tournamentId].teams[tidx];\n', '            if(team.id == championTeamId){\n', '                team.isChampion = true;\n', '                break;\n', '            }\n', '        }\n', '\n', '        for(uint idx = 0 ; idx < tournaments[tournamentId].tickets.length; idx++){\n', '            SupportTicket memory ticket = tournaments[tournamentId].tickets[idx];\n', '            if(ticket.teamId == championTeamId){\n', '                if(teamSupportAmount != 0){\n', '                    uint gainAmount = (ticket.supportAmount.mul(tournamentSupportAmount)).div(teamSupportAmount);\n', '                    uint actualGainAmount = (gainAmount.mul(_commissionScale.sub(_commissionNumber))).div(_commissionScale);\n', '                    _internalToken.ownerTransferFrom(this, ticket.supportAddres, actualGainAmount);\n', '                    totalClearAmount = totalClearAmount.add(actualGainAmount);\n', '                }\n', '            }\n', '        }\n', '        _internalToken.ownerTransferFrom(this, owner, tournamentSupportAmount.sub(totalClearAmount));\n', '        endTournamentSuccess(tournamentId);\n', '    }\n', '\n', '    event lockTournamentSuccess(uint tourId, bool isLock);\n', '    function lockTournament(uint tournamentId, bool isLock) public onlyOwner{\n', '        require(tournaments[tournamentId].initialized);\n', '        require(!tournaments[tournamentId].isEnded);\n', '        tournaments[tournamentId].isLockedForSupport = isLock;\n', '        lockTournamentSuccess(tournamentId, isLock);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract QIUToken is StandardToken,Ownable {\n', "    string public name = 'QIUToken';\n", "    string public symbol = 'QIU';\n", '    uint8 public decimals = 0;\n', '    uint public INITIAL_SUPPLY = 5000000000;\n', '    uint public eth2qiuRate = 10000;\n', '\n', '    function() public payable { } // make this contract to receive ethers\n', '\n', '    function QIUToken() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[owner] = INITIAL_SUPPLY / 10;\n', '        balances[this] = INITIAL_SUPPLY - balances[owner];\n', '    }\n', '\n', '    function getOwner() public view returns (address) {\n', '        return owner;\n', '    }  \n', '    \n', '    /**\n', '    * @dev Transfer tokens from one address to another, only owner can do this super-user operate\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function ownerTransferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(tx.origin == owner); // only the owner can call the method.\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '      /**\n', '    * @dev transfer token for a specified address,but different from transfer is replace msg.sender with tx.origin\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function originTransfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[tx.origin]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[tx.origin] = balances[tx.origin].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(tx.origin, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    event ExchangeForETH(address fromAddr,address to,uint qiuAmount,uint ethAmount);\n', '    function exchangeForETH(uint qiuAmount) public returns (bool){\n', '        uint ethAmount = qiuAmount * 1000000000000000000 / eth2qiuRate; // only accept multiple of 100\n', '        require(this.balance >= ethAmount);\n', '        balances[this] = balances[this].add(qiuAmount);\n', '        balances[msg.sender] = balances[msg.sender].sub(qiuAmount);\n', '        msg.sender.transfer(ethAmount);\n', '        ExchangeForETH(this,msg.sender,qiuAmount,ethAmount);\n', '        return true;\n', '    }\n', '\n', '    event ExchangeForQIU(address fromAddr,address to,uint qiuAmount,uint ethAmount);\n', '    function exchangeForQIU() payable public returns (bool){\n', '        uint qiuAmount = msg.value * eth2qiuRate / 1000000000000000000;\n', '        require(qiuAmount <= balances[this]);\n', '        balances[this] = balances[this].sub(qiuAmount);\n', '        balances[msg.sender] = balances[msg.sender].add(qiuAmount);\n', '        ExchangeForQIU(this,msg.sender,qiuAmount,msg.value);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '    // transfer out method\n', '    function ownerETHCashout(address account) public onlyOwner {\n', '        account.transfer(this.balance);\n', '    }*/\n', '    function getETHBalance() public view returns (uint) {\n', '        return this.balance; // balance is "inherited" from the address type\n', '    }\n', '}\n', '\n', 'contract SoccerChampion is Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    struct Tournament {\n', '        uint id;\n', '        bool isEnded;\n', '        bool isLockedForSupport;\n', '        bool initialized;\n', '        Team[] teams;\n', '        SupportTicket[] tickets;\n', '    }\n', '    \n', '    struct Team {\n', '        uint id;\n', '        bool isKnockout;\n', '        bool isChampion;\n', '    }\n', '\n', '    struct SupportTicket {\n', '        uint teamId;\n', '        address supportAddres;\n', '        uint supportAmount;\n', '    }\n', '\n', '    //ufixed private serviceChargeRate = 1/100;\n', '    mapping (uint => Tournament) public tournaments;\n', '    uint private _nextTournamentId = 0;\n', '    QIUToken public _internalToken;\n', '    uint private _commissionNumber;\n', '    uint private _commissionScale;\n', '    \n', '    function SoccerChampion(QIUToken _tokenAddress) public {\n', '        _nextTournamentId = 0;\n', '        _internalToken = _tokenAddress;\n', '        _commissionNumber = 2;\n', '        _commissionScale = 100;\n', '    }\n', '\n', '    function modifyCommission(uint number,uint scale) public onlyOwner returns(bool){\n', '        _commissionNumber = number;\n', '        _commissionScale = scale;\n', '        return true;\n', '    }\n', '\n', '    event NewTouramentCreateSuccess(uint newTourId);\n', '    function createNewTourament(uint[] teamIds) public onlyOwner{\n', '        uint newTourId = _nextTournamentId;\n', '        tournaments[newTourId].id = newTourId;\n', '        tournaments[newTourId].isEnded = false;\n', '        tournaments[newTourId].isLockedForSupport = false;\n', '        tournaments[newTourId].initialized = true;\n', '        for(uint idx = 0; idx < teamIds.length; idx ++){\n', '            Team memory team;\n', '            team.id = teamIds[idx];\n', '            team.isChampion = false;\n', '            tournaments[newTourId].teams.push(team);\n', '        }\n', '        _nextTournamentId ++;   \n', '        NewTouramentCreateSuccess(newTourId);\n', '    }\n', '\n', '    function supportTeam(uint tournamentId, uint teamId, uint amount) public {\n', '        require(tournaments[tournamentId].initialized);\n', '        require(_internalToken.balanceOf(msg.sender) >= amount);\n', '        require(!tournaments[tournamentId].isEnded);\n', '        require(!tournaments[tournamentId].isLockedForSupport);\n', '        require(amount > 0);\n', '        SupportTicket memory ticket;\n', '        ticket.teamId = teamId;\n', '        ticket.supportAddres = msg.sender;\n', '        ticket.supportAmount = amount;\n', '        _internalToken.originTransfer(this, amount);\n', '        tournaments[tournamentId].tickets.push(ticket);\n', '    }\n', '\n', '    function _getTournamentSupportAmount(uint tournamentId) public view returns(uint){\n', '        uint supportAmount = 0;\n', '        for(uint idx = 0; idx < tournaments[tournamentId].tickets.length; idx++){\n', '            supportAmount = supportAmount.add(tournaments[tournamentId].tickets[idx].supportAmount);\n', '        }\n', '        return supportAmount;\n', '    }\n', '\n', '    function _getTeamSupportAmount(uint tournamentId, uint teamId) public view returns(uint){\n', '        uint supportAmount = 0;\n', '        for(uint idx = 0; idx < tournaments[tournamentId].tickets.length; idx++){\n', '            if(tournaments[tournamentId].tickets[idx].teamId == teamId){\n', '                supportAmount = supportAmount.add(tournaments[tournamentId].tickets[idx].supportAmount);\n', '            }\n', '        }\n', '        return supportAmount;\n', '    }\n', '\n', '    function _getUserSupportForTeamInTournament(uint tournamentId, uint teamId) public view returns(uint){\n', '        uint supportAmount = 0;\n', '        for(uint idx = 0; idx < tournaments[tournamentId].tickets.length; idx++){\n', '            if(tournaments[tournamentId].tickets[idx].teamId == teamId && tournaments[tournamentId].tickets[idx].supportAddres == msg.sender){\n', '                supportAmount = supportAmount.add(tournaments[tournamentId].tickets[idx].supportAmount);\n', '            }\n', '        }\n', '        return supportAmount;\n', '    }\n', '\n', '\n', '    function getTeamlistSupportInTournament(uint tournamentId) public view returns(uint[] teamIds, uint[] supportAmounts, bool[] knockOuts, uint championTeamId, bool isEnded, bool isLocked){  \n', '        if(tournaments[tournamentId].initialized){\n', '            teamIds = new uint[](tournaments[tournamentId].teams.length);\n', '            supportAmounts = new uint[](tournaments[tournamentId].teams.length);\n', '            knockOuts = new bool[](tournaments[tournamentId].teams.length);\n', '            championTeamId = 0;\n', '            for(uint tidx = 0; tidx < tournaments[tournamentId].teams.length; tidx++){\n', '                teamIds[tidx] = tournaments[tournamentId].teams[tidx].id;\n', '                if(tournaments[tournamentId].teams[tidx].isChampion){\n', '                    championTeamId = teamIds[tidx];\n', '                }\n', '                knockOuts[tidx] = tournaments[tournamentId].teams[tidx].isKnockout;\n', '                supportAmounts[tidx] = _getTeamSupportAmount(tournamentId, teamIds[tidx]);\n', '            }\n', '            isEnded = tournaments[tournamentId].isEnded;\n', '            isLocked = tournaments[tournamentId].isLockedForSupport;\n', '        }\n', '    }\n', '\n', '    function getUserSupportInTournament(uint tournamentId) public view returns(uint[] teamIds, uint[] supportAmounts){\n', '        if(tournaments[tournamentId].initialized){\n', '            teamIds = new uint[](tournaments[tournamentId].teams.length);\n', '            supportAmounts = new uint[](tournaments[tournamentId].teams.length);\n', '            for(uint tidx = 0; tidx < tournaments[tournamentId].teams.length; tidx++){\n', '                teamIds[tidx] = tournaments[tournamentId].teams[tidx].id;\n', '                uint userSupportAmount = _getUserSupportForTeamInTournament(tournamentId, teamIds[tidx]);\n', '                supportAmounts[tidx] = userSupportAmount;\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    function getUserWinInTournament(uint tournamentId) public view returns(bool isEnded, uint winAmount){\n', '        if(tournaments[tournamentId].initialized){\n', '            isEnded = tournaments[tournamentId].isEnded;\n', '            if(isEnded){\n', '                for(uint tidx = 0; tidx < tournaments[tournamentId].teams.length; tidx++){\n', '                    Team memory team = tournaments[tournamentId].teams[tidx];\n', '                    if(team.isChampion){\n', '                        uint tournamentSupportAmount = _getTournamentSupportAmount(tournamentId);\n', '                        uint teamSupportAmount = _getTeamSupportAmount(tournamentId, team.id);\n', '                        uint userSupportAmount = _getUserSupportForTeamInTournament(tournamentId, team.id);\n', '                        uint gainAmount = (userSupportAmount.mul(tournamentSupportAmount)).div(teamSupportAmount);\n', '                        winAmount = (gainAmount.mul(_commissionScale.sub(_commissionNumber))).div(_commissionScale);\n', '                    }\n', '                }\n', '            }else{\n', '                winAmount = 0;\n', '            }\n', '        }\n', '    }\n', '\n', '    function knockoutTeam(uint tournamentId, uint teamId) public onlyOwner{\n', '        require(tournaments[tournamentId].initialized);\n', '        require(!tournaments[tournamentId].isEnded);\n', '        for(uint tidx = 0; tidx < tournaments[tournamentId].teams.length; tidx++){\n', '            Team storage team = tournaments[tournamentId].teams[tidx];\n', '            if(team.id == teamId){\n', '                team.isKnockout = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    event endTournamentSuccess(uint tourId);\n', '    function endTournament(uint tournamentId, uint championTeamId) public onlyOwner{\n', '        require(tournaments[tournamentId].initialized);\n', '        require(!tournaments[tournamentId].isEnded);\n', '        tournaments[tournamentId].isEnded = true;\n', '        uint tournamentSupportAmount = _getTournamentSupportAmount(tournaments[tournamentId].id);\n', '        uint teamSupportAmount = _getTeamSupportAmount(tournaments[tournamentId].id, championTeamId);\n', '        uint totalClearAmount = 0;\n', '        for(uint tidx = 0; tidx < tournaments[tournamentId].teams.length; tidx++){\n', '            Team storage team = tournaments[tournamentId].teams[tidx];\n', '            if(team.id == championTeamId){\n', '                team.isChampion = true;\n', '                break;\n', '            }\n', '        }\n', '\n', '        for(uint idx = 0 ; idx < tournaments[tournamentId].tickets.length; idx++){\n', '            SupportTicket memory ticket = tournaments[tournamentId].tickets[idx];\n', '            if(ticket.teamId == championTeamId){\n', '                if(teamSupportAmount != 0){\n', '                    uint gainAmount = (ticket.supportAmount.mul(tournamentSupportAmount)).div(teamSupportAmount);\n', '                    uint actualGainAmount = (gainAmount.mul(_commissionScale.sub(_commissionNumber))).div(_commissionScale);\n', '                    _internalToken.ownerTransferFrom(this, ticket.supportAddres, actualGainAmount);\n', '                    totalClearAmount = totalClearAmount.add(actualGainAmount);\n', '                }\n', '            }\n', '        }\n', '        _internalToken.ownerTransferFrom(this, owner, tournamentSupportAmount.sub(totalClearAmount));\n', '        endTournamentSuccess(tournamentId);\n', '    }\n', '\n', '    event lockTournamentSuccess(uint tourId, bool isLock);\n', '    function lockTournament(uint tournamentId, bool isLock) public onlyOwner{\n', '        require(tournaments[tournamentId].initialized);\n', '        require(!tournaments[tournamentId].isEnded);\n', '        tournaments[tournamentId].isLockedForSupport = isLock;\n', '        lockTournamentSuccess(tournamentId, isLock);\n', '    }\n', '}']
