['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;       \n', '    }       \n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '        newOwner = address(0);\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    modifier onlyNewOwner() {\n', '        require(msg.sender != address(0));\n', '        require(msg.sender == newOwner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public onlyNewOwner returns(bool) {\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract POPKOIN is ERC20, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 internal initialSupply;\n', '    uint256 internal _totalSupply;\n', '    \n', '                                 \n', '    uint256 internal LOCKUP_TERM = 6 * 30 * 24 * 3600;\n', '\n', '    mapping(address => uint256) internal _balances;    \n', '    mapping(address => mapping(address => uint256)) internal _allowed;\n', '\n', '    mapping(address => uint256) internal _lockupBalances;\n', '    mapping(address => uint256) internal _lockupExpireTime;\n', '\n', '    function POPKOIN() public {\n', '        name = "POPKOIN";\n', '        symbol = "POPK";\n', '        decimals = 18;\n', '\n', '\n', '        //Total Supply  2,000,000,000\n', '        initialSupply = 2000000000;\n', '        _totalSupply = initialSupply * 10 ** uint(decimals);\n', '        _balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_to != address(this));\n', '        require(msg.sender != address(0));\n', '        require(_value <= _balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        _balances[msg.sender] = _balances[msg.sender].sub(_value);\n', '        _balances[_to] = _balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _holder The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _holder) public view returns (uint256 balance) {\n', '        return _balances[_holder].add(_lockupBalances[_holder]);\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the locked balance of the specified address.\n', '    * @param _holder The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */   \n', '    function lockupBalanceOf(address _holder) public view returns (uint256 balance) {\n', '        return _lockupBalances[_holder];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the unlocked time of the specified address.\n', '    * @param _holder The address to query the the balance of.\n', '    * @return An uint256 representing the Locktime owned by the passed address.\n', '    */   \n', '    function unlockTimeOf(address _holder) public view returns (uint256 lockTime) {\n', '        return _lockupExpireTime[_holder];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_from != address(0));\n', '        require(_to != address(0));\n', '        require(_to != address(this));\n', '        require(_value <= _balances[_from]);\n', '        require(_value <= _allowed[_from][msg.sender]);\n', '\n', '        _balances[_from] = _balances[_from].sub(_value);\n', '        _balances[_to] = _balances[_to].add(_value);\n', '        _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(_value > 0);\n', '        _allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _holder address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _holder, address _spender) public view returns (uint256) {\n', '        return _allowed[_holder][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Do not allow contracts to accept Ether.\n', '    */\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    /**\n', '    * @dev The Owner destroys his own token.\n', '    * @param _value uint256 The quantity that needs to be destroyed.\n', '    */\n', '    function burn(uint256 _value) public onlyOwner returns (bool success) {\n', '        require(_value <= _balances[msg.sender]);\n', '        address burner = msg.sender;\n', '        _balances[burner] = _balances[burner].sub(_value);\n', '        _totalSupply = _totalSupply.sub(_value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function is used to distribute tokens and confirm the lock time.\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 The amount of tokens to be transferred\n', '    * @param _lockupRate uint256 The proportion of tokens that are expected to be locked.\n', '    * @notice If you lock 50%, the lockout time is six months.\n', '    *         If you lock 100%, the lockout time is one year.\n', '    */\n', '    function distribute(address _to, uint256 _value, uint256 _lockupRate) public onlyOwner returns (bool) {\n', '        require(_to != address(0));\n', '        require(_to != address(this));\n', '        //Do not allow multiple distributions of the same address. Avoid locking time reset.\n', '        require(_lockupBalances[_to] == 0);     \n', '        require(_value <= _balances[owner]);\n', '        require(_lockupRate == 50 || _lockupRate == 100);\n', '\n', '        _balances[owner] = _balances[owner].sub(_value);\n', '\n', '        uint256 lockupValue = _value.mul(_lockupRate).div(100);\n', '        uint256 givenValue = _value.sub(lockupValue);\n', '        uint256 ExpireTime = now + LOCKUP_TERM; //six months\n', '\n', '        if (_lockupRate == 100) {\n', '            ExpireTime += LOCKUP_TERM;          //one year.\n', '        }\n', '        \n', '        _balances[_to] = _balances[_to].add(givenValue);\n', '        _lockupBalances[_to] = _lockupBalances[_to].add(lockupValue);\n', '        _lockupExpireTime[_to] = ExpireTime;\n', '\n', '        emit Transfer(owner, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev When the lock time expires, the user unlocks his own token.\n', '    */\n', '    function unlock() public returns(bool) {\n', '        address tokenHolder = msg.sender;\n', '        require(_lockupBalances[tokenHolder] > 0);\n', '        require(_lockupExpireTime[tokenHolder] <= now);\n', '\n', '        uint256 value = _lockupBalances[tokenHolder];\n', '\n', '        _balances[tokenHolder] = _balances[tokenHolder].add(value);  \n', '        _lockupBalances[tokenHolder] = 0;\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev The new owner accepts the contract transfer request.\n', '    */\n', '    function acceptOwnership() public onlyNewOwner returns(bool) {\n', '        uint256 ownerAmount = _balances[owner];\n', '        _balances[owner] = _balances[owner].sub(ownerAmount);\n', '        _balances[newOwner] = _balances[newOwner].add(ownerAmount);\n', '        emit Transfer(owner, newOwner, ownerAmount);   \n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;       \n', '    }       \n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '        newOwner = address(0);\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    modifier onlyNewOwner() {\n', '        require(msg.sender != address(0));\n', '        require(msg.sender == newOwner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public onlyNewOwner returns(bool) {\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract POPKOIN is ERC20, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 internal initialSupply;\n', '    uint256 internal _totalSupply;\n', '    \n', '                                 \n', '    uint256 internal LOCKUP_TERM = 6 * 30 * 24 * 3600;\n', '\n', '    mapping(address => uint256) internal _balances;    \n', '    mapping(address => mapping(address => uint256)) internal _allowed;\n', '\n', '    mapping(address => uint256) internal _lockupBalances;\n', '    mapping(address => uint256) internal _lockupExpireTime;\n', '\n', '    function POPKOIN() public {\n', '        name = "POPKOIN";\n', '        symbol = "POPK";\n', '        decimals = 18;\n', '\n', '\n', '        //Total Supply  2,000,000,000\n', '        initialSupply = 2000000000;\n', '        _totalSupply = initialSupply * 10 ** uint(decimals);\n', '        _balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_to != address(this));\n', '        require(msg.sender != address(0));\n', '        require(_value <= _balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        _balances[msg.sender] = _balances[msg.sender].sub(_value);\n', '        _balances[_to] = _balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _holder The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _holder) public view returns (uint256 balance) {\n', '        return _balances[_holder].add(_lockupBalances[_holder]);\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the locked balance of the specified address.\n', '    * @param _holder The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */   \n', '    function lockupBalanceOf(address _holder) public view returns (uint256 balance) {\n', '        return _lockupBalances[_holder];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the unlocked time of the specified address.\n', '    * @param _holder The address to query the the balance of.\n', '    * @return An uint256 representing the Locktime owned by the passed address.\n', '    */   \n', '    function unlockTimeOf(address _holder) public view returns (uint256 lockTime) {\n', '        return _lockupExpireTime[_holder];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_from != address(0));\n', '        require(_to != address(0));\n', '        require(_to != address(this));\n', '        require(_value <= _balances[_from]);\n', '        require(_value <= _allowed[_from][msg.sender]);\n', '\n', '        _balances[_from] = _balances[_from].sub(_value);\n', '        _balances[_to] = _balances[_to].add(_value);\n', '        _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(_value > 0);\n', '        _allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _holder address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _holder, address _spender) public view returns (uint256) {\n', '        return _allowed[_holder][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Do not allow contracts to accept Ether.\n', '    */\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    /**\n', '    * @dev The Owner destroys his own token.\n', '    * @param _value uint256 The quantity that needs to be destroyed.\n', '    */\n', '    function burn(uint256 _value) public onlyOwner returns (bool success) {\n', '        require(_value <= _balances[msg.sender]);\n', '        address burner = msg.sender;\n', '        _balances[burner] = _balances[burner].sub(_value);\n', '        _totalSupply = _totalSupply.sub(_value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function is used to distribute tokens and confirm the lock time.\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 The amount of tokens to be transferred\n', '    * @param _lockupRate uint256 The proportion of tokens that are expected to be locked.\n', '    * @notice If you lock 50%, the lockout time is six months.\n', '    *         If you lock 100%, the lockout time is one year.\n', '    */\n', '    function distribute(address _to, uint256 _value, uint256 _lockupRate) public onlyOwner returns (bool) {\n', '        require(_to != address(0));\n', '        require(_to != address(this));\n', '        //Do not allow multiple distributions of the same address. Avoid locking time reset.\n', '        require(_lockupBalances[_to] == 0);     \n', '        require(_value <= _balances[owner]);\n', '        require(_lockupRate == 50 || _lockupRate == 100);\n', '\n', '        _balances[owner] = _balances[owner].sub(_value);\n', '\n', '        uint256 lockupValue = _value.mul(_lockupRate).div(100);\n', '        uint256 givenValue = _value.sub(lockupValue);\n', '        uint256 ExpireTime = now + LOCKUP_TERM; //six months\n', '\n', '        if (_lockupRate == 100) {\n', '            ExpireTime += LOCKUP_TERM;          //one year.\n', '        }\n', '        \n', '        _balances[_to] = _balances[_to].add(givenValue);\n', '        _lockupBalances[_to] = _lockupBalances[_to].add(lockupValue);\n', '        _lockupExpireTime[_to] = ExpireTime;\n', '\n', '        emit Transfer(owner, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev When the lock time expires, the user unlocks his own token.\n', '    */\n', '    function unlock() public returns(bool) {\n', '        address tokenHolder = msg.sender;\n', '        require(_lockupBalances[tokenHolder] > 0);\n', '        require(_lockupExpireTime[tokenHolder] <= now);\n', '\n', '        uint256 value = _lockupBalances[tokenHolder];\n', '\n', '        _balances[tokenHolder] = _balances[tokenHolder].add(value);  \n', '        _lockupBalances[tokenHolder] = 0;\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev The new owner accepts the contract transfer request.\n', '    */\n', '    function acceptOwnership() public onlyNewOwner returns(bool) {\n', '        uint256 ownerAmount = _balances[owner];\n', '        _balances[owner] = _balances[owner].sub(ownerAmount);\n', '        _balances[newOwner] = _balances[newOwner].add(ownerAmount);\n', '        emit Transfer(owner, newOwner, ownerAmount);   \n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '\n', '        return true;\n', '    }\n', '}']
