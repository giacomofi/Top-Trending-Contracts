['pragma solidity ^0.4.21;\n', '\n', 'contract Owned {\n', '    \n', '    /// &#39;owner&#39; is the only address that can call a function with \n', '    /// this modifier\n', '    address public owner;\n', '    address internal newOwner;\n', '    \n', '    ///@notice The constructor assigns the message sender to be &#39;owner&#39;\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    event updateOwner(address _oldOwner, address _newOwner);\n', '    \n', '    ///change the owner\n', '    function changeOwner(address _newOwner) public onlyOwner returns(bool) {\n', '        require(owner != _newOwner);\n', '        newOwner = _newOwner;\n', '        return true;\n', '    }\n', '    \n', '    /// accept the ownership\n', '    function acceptNewOwner() public returns(bool) {\n', '        require(msg.sender == newOwner);\n', '        emit updateOwner(owner, newOwner);\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '    \n', '}\n', '\n', '// Safe maths, borrowed from OpenZeppelin\n', 'library SafeMath {\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', '        return c;\n', '    }\n', '    \n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '    \n', '    /// user tokens\n', '    mapping (address => uint256) public balances;\n', '    \n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    \n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Controlled is Owned, ERC20Token {\n', '    using SafeMath for uint;\n', '    uint256 public releaseStartTime;\n', '    uint256 oneMonth = 3600 * 24 * 30;\n', '    \n', '    // Flag that determines if the token is transferable or not\n', '    bool  public emergencyStop = false;\n', '    \n', '    struct userToken {\n', '        uint256 UST;\n', '        uint256 addrLockType;\n', '    }\n', '    mapping (address => userToken) public userReleaseToken;\n', '    \n', '    modifier canTransfer {\n', '        require(emergencyStop == false);\n', '        _;\n', '    }\n', '    \n', '    modifier releaseTokenValid(address _user, uint256 _time, uint256 _value) {\n', '\t\tuint256 _lockTypeIndex = userReleaseToken[_user].addrLockType;\n', '\t\tif(_lockTypeIndex != 0) {\n', '\t\t\trequire (balances[_user].sub(_value) >= userReleaseToken[_user].UST.sub(calcReleaseToken(_user, _time, _lockTypeIndex)));\n', '        }\n', '        \n', '\t\t_;\n', '    }\n', '    \n', '    \n', '    function canTransferUST(bool _bool) public onlyOwner{\n', '        emergencyStop = _bool;\n', '    }\n', '    \n', '    /// @notice get `_user` transferable token amount \n', '    /// @param _user The user&#39;s address\n', '    /// @param _time The present time\n', '    /// @param _lockTypeIndex The user&#39;s investment lock type\n', '    /// @return Return the amount of user&#39;s transferable token\n', '    function calcReleaseToken(address _user, uint256 _time, uint256 _lockTypeIndex) internal view returns (uint256) {\n', '        uint256 _timeDifference = _time.sub(releaseStartTime);\n', '        uint256 _whichPeriod = getPeriod(_lockTypeIndex, _timeDifference);\n', '        \n', '        if(_lockTypeIndex == 1) {\n', '            \n', '            return (percent(userReleaseToken[_user].UST, 25) + percent(userReleaseToken[_user].UST, _whichPeriod.mul(25)));\n', '        }\n', '        \n', '        if(_lockTypeIndex == 2) {\n', '            return (percent(userReleaseToken[_user].UST, 25) + percent(userReleaseToken[_user].UST, _whichPeriod.mul(25)));\n', '        }\n', '        \n', '        if(_lockTypeIndex == 3) {\n', '            return (percent(userReleaseToken[_user].UST, 10) + percent(userReleaseToken[_user].UST, _whichPeriod.mul(15)));\n', '        }\n', '\t\t\n', '\t\trevert();\n', '    \n', '    }\n', '    \n', '    /// @notice get time period for the given &#39;_lockTypeIndex&#39;\n', '    /// @param _lockTypeIndex The user&#39;s investment locktype index\n', '    /// @param _timeDifference The passed time since releaseStartTime to now\n', '    /// @return Return the time period\n', '    function getPeriod(uint256 _lockTypeIndex, uint256 _timeDifference) internal view returns (uint256) {\n', '        if(_lockTypeIndex == 1) {           //The lock for the usechain coreTeamSupply\n', '            uint256 _period1 = (_timeDifference.div(oneMonth)).div(12);\n', '            if(_period1 >= 3){\n', '                _period1 = 3;\n', '            }\n', '            return _period1;\n', '        }\n', '        if(_lockTypeIndex == 2) {           //The lock for medium investment\n', '            uint256 _period2 = _timeDifference.div(oneMonth);\n', '            if(_period2 >= 3){\n', '                _period2 = 3;\n', '            }\n', '            return _period2;\n', '        }\n', '        if(_lockTypeIndex == 3) {           //The lock for massive investment\n', '            uint256 _period3 = _timeDifference.div(oneMonth);\n', '            if(_period3 >= 6){\n', '                _period3 = 6;\n', '            }\n', '            return _period3;\n', '        }\n', '\t\t\n', '\t\trevert();\n', '    }\n', '    \n', '    function percent(uint _token, uint _percentage) internal pure returns (uint) {\n', '        return _percentage.mul(_token).div(100);\n', '    }\n', '    \n', '}\n', '\n', 'contract standardToken is ERC20Token, Controlled {\n', '    \n', '    mapping (address => mapping (address => uint256)) public allowances;\n', '    \n', '    /// @param _owner The address that&#39;s balance is being requested\n', '    /// @return The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /// @notice Send `_value` tokens to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    \n', '\tfunction transfer(\n', '        address _to,\n', '        uint256 _value) \n', '        public \n', '        canTransfer\n', '        releaseTokenValid(msg.sender, now, _value)\n', '        returns (bool) \n', '    {\n', '        require (balances[msg.sender] >= _value);           // Throw if sender has insufficient balance\n', '        require (balances[_to] + _value >= balances[_to]);  // Throw if owerflow detected\n', '        balances[msg.sender] -= _value;                     // Deduct senders balance\n', '        balances[_to] += _value;                            // Add recivers balance\n', '        emit Transfer(msg.sender, _to, _value);             // Raise Transfer event\n', '        return true;\n', '    }\n', '    \n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowances[msg.sender][_spender] = _value;          // Set allowance\n', '        emit Approval(msg.sender, _spender, _value);             // Raise Approval event\n', '        return true;\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to send `_value` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        approve(_spender, _value);                          // Set approval to contract for _value\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { \n', '            revert(); \n', '        }\n', '        return true;\n', '    }\n', '\n', '    /// @notice Send `_value` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _value) public canTransfer releaseTokenValid(msg.sender, now, _value) returns (bool success) {\n', '        require (balances[_from] >= _value);                // Throw if sender does not have enough balance\n', '        require (balances[_to] + _value >= balances[_to]);  // Throw if overflow detected\n', '        require (_value <= allowances[_from][msg.sender]);  // Throw if you do not have allowance\n', '        balances[_from] -= _value;                          // Deduct senders balance\n', '        balances[_to] += _value;                            // Add recipient balance\n', '        allowances[_from][msg.sender] -= _value;            // Deduct allowance for this address\n', '        emit Transfer(_from, _to, _value);                       // Raise Transfer event\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to read the `allowances[]` map\n', '    /// @param _owner The address of the account that owns the token\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of _owner that _spender is allowed to spend\n', '    function allowance(address _owner, address _spender) constant public returns (uint256) {\n', '        return allowances[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', 'contract UST is Owned, standardToken {\n', '        \n', '    string constant public name   = "UseChainToken";\n', '    string constant public symbol = "UST";\n', '    uint constant public decimals = 18;\n', '\n', '    uint256 public totalSupply = 0;\n', '    uint256 constant public topTotalSupply = 2 * 10**10 * 10**decimals;\n', '    uint public forSaleSupply        = percent(topTotalSupply, 45);\n', '    uint public marketingPartnerSupply = percent(topTotalSupply, 5);\n', '    uint public coreTeamSupply   = percent(topTotalSupply, 15);\n', '    uint public technicalCommunitySupply       = percent(topTotalSupply, 15);\n', '    uint public communitySupply          = percent(topTotalSupply, 20);\n', '    uint public softCap                = percent(topTotalSupply, 30);\n', '    \n', '    function () public {\n', '        revert();\n', '    }\n', '    \n', '    /// @dev Owner can change the releaseStartTime when needs\n', '    /// @param _time The releaseStartTime, UTC timezone\n', '    function setRealseTime(uint256 _time) public onlyOwner {\n', '        releaseStartTime = _time;\n', '    }\n', '    \n', '    /// @dev This owner allocate token for private sale\n', '    /// @param _owners The address of the account that owns the token\n', '    /// @param _values The amount of tokens\n', '    /// @param _addrLockType The locktype for different investment type\n', '    function allocateToken(address[] _owners, uint256[] _values, uint256[] _addrLockType) public onlyOwner {\n', '        require ((_owners.length == _values.length) && ( _values.length == _addrLockType.length));\n', '        for(uint i = 0; i < _owners.length ; i++){\n', '            uint256 value = _values[i] * 10 ** decimals;\n', '            \n', '            totalSupply = totalSupply.add(value);\n', '            balances[_owners[i]] = balances[_owners[i]].add(value);             // Set minted coins to target\n', '            emit Transfer(0x0, _owners[i], value);    \n', '            \n', '            userReleaseToken[_owners[i]].UST = userReleaseToken[_owners[i]].UST.add(value);\n', '            userReleaseToken[_owners[i]].addrLockType = _addrLockType[i];\n', '        }\n', '    }\n', '    \n', '    /// @dev This owner allocate token for candy airdrop\n', '    /// @param _owners The address of the account that owns the token\n', '    /// @param _values The amount of tokens\n', '\tfunction allocateCandyToken(address[] _owners, uint256[] _values) public onlyOwner {\n', '       for(uint i = 0; i < _owners.length ; i++){\n', '           uint256 value = _values[i] * 10 ** decimals;\n', '           totalSupply = totalSupply.add(value);\n', '\t\t   balances[_owners[i]] = balances[_owners[i]].add(value); \n', '\t\t   emit Transfer(0x0, _owners[i], value);  \t\t  \n', '        }\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract Owned {\n', '    \n', "    /// 'owner' is the only address that can call a function with \n", '    /// this modifier\n', '    address public owner;\n', '    address internal newOwner;\n', '    \n', "    ///@notice The constructor assigns the message sender to be 'owner'\n", '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    event updateOwner(address _oldOwner, address _newOwner);\n', '    \n', '    ///change the owner\n', '    function changeOwner(address _newOwner) public onlyOwner returns(bool) {\n', '        require(owner != _newOwner);\n', '        newOwner = _newOwner;\n', '        return true;\n', '    }\n', '    \n', '    /// accept the ownership\n', '    function acceptNewOwner() public returns(bool) {\n', '        require(msg.sender == newOwner);\n', '        emit updateOwner(owner, newOwner);\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '    \n', '}\n', '\n', '// Safe maths, borrowed from OpenZeppelin\n', 'library SafeMath {\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', '        return c;\n', '    }\n', '    \n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '    \n', '    /// user tokens\n', '    mapping (address => uint256) public balances;\n', '    \n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    \n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Controlled is Owned, ERC20Token {\n', '    using SafeMath for uint;\n', '    uint256 public releaseStartTime;\n', '    uint256 oneMonth = 3600 * 24 * 30;\n', '    \n', '    // Flag that determines if the token is transferable or not\n', '    bool  public emergencyStop = false;\n', '    \n', '    struct userToken {\n', '        uint256 UST;\n', '        uint256 addrLockType;\n', '    }\n', '    mapping (address => userToken) public userReleaseToken;\n', '    \n', '    modifier canTransfer {\n', '        require(emergencyStop == false);\n', '        _;\n', '    }\n', '    \n', '    modifier releaseTokenValid(address _user, uint256 _time, uint256 _value) {\n', '\t\tuint256 _lockTypeIndex = userReleaseToken[_user].addrLockType;\n', '\t\tif(_lockTypeIndex != 0) {\n', '\t\t\trequire (balances[_user].sub(_value) >= userReleaseToken[_user].UST.sub(calcReleaseToken(_user, _time, _lockTypeIndex)));\n', '        }\n', '        \n', '\t\t_;\n', '    }\n', '    \n', '    \n', '    function canTransferUST(bool _bool) public onlyOwner{\n', '        emergencyStop = _bool;\n', '    }\n', '    \n', '    /// @notice get `_user` transferable token amount \n', "    /// @param _user The user's address\n", '    /// @param _time The present time\n', "    /// @param _lockTypeIndex The user's investment lock type\n", "    /// @return Return the amount of user's transferable token\n", '    function calcReleaseToken(address _user, uint256 _time, uint256 _lockTypeIndex) internal view returns (uint256) {\n', '        uint256 _timeDifference = _time.sub(releaseStartTime);\n', '        uint256 _whichPeriod = getPeriod(_lockTypeIndex, _timeDifference);\n', '        \n', '        if(_lockTypeIndex == 1) {\n', '            \n', '            return (percent(userReleaseToken[_user].UST, 25) + percent(userReleaseToken[_user].UST, _whichPeriod.mul(25)));\n', '        }\n', '        \n', '        if(_lockTypeIndex == 2) {\n', '            return (percent(userReleaseToken[_user].UST, 25) + percent(userReleaseToken[_user].UST, _whichPeriod.mul(25)));\n', '        }\n', '        \n', '        if(_lockTypeIndex == 3) {\n', '            return (percent(userReleaseToken[_user].UST, 10) + percent(userReleaseToken[_user].UST, _whichPeriod.mul(15)));\n', '        }\n', '\t\t\n', '\t\trevert();\n', '    \n', '    }\n', '    \n', "    /// @notice get time period for the given '_lockTypeIndex'\n", "    /// @param _lockTypeIndex The user's investment locktype index\n", '    /// @param _timeDifference The passed time since releaseStartTime to now\n', '    /// @return Return the time period\n', '    function getPeriod(uint256 _lockTypeIndex, uint256 _timeDifference) internal view returns (uint256) {\n', '        if(_lockTypeIndex == 1) {           //The lock for the usechain coreTeamSupply\n', '            uint256 _period1 = (_timeDifference.div(oneMonth)).div(12);\n', '            if(_period1 >= 3){\n', '                _period1 = 3;\n', '            }\n', '            return _period1;\n', '        }\n', '        if(_lockTypeIndex == 2) {           //The lock for medium investment\n', '            uint256 _period2 = _timeDifference.div(oneMonth);\n', '            if(_period2 >= 3){\n', '                _period2 = 3;\n', '            }\n', '            return _period2;\n', '        }\n', '        if(_lockTypeIndex == 3) {           //The lock for massive investment\n', '            uint256 _period3 = _timeDifference.div(oneMonth);\n', '            if(_period3 >= 6){\n', '                _period3 = 6;\n', '            }\n', '            return _period3;\n', '        }\n', '\t\t\n', '\t\trevert();\n', '    }\n', '    \n', '    function percent(uint _token, uint _percentage) internal pure returns (uint) {\n', '        return _percentage.mul(_token).div(100);\n', '    }\n', '    \n', '}\n', '\n', 'contract standardToken is ERC20Token, Controlled {\n', '    \n', '    mapping (address => mapping (address => uint256)) public allowances;\n', '    \n', "    /// @param _owner The address that's balance is being requested\n", '    /// @return The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /// @notice Send `_value` tokens to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    \n', '\tfunction transfer(\n', '        address _to,\n', '        uint256 _value) \n', '        public \n', '        canTransfer\n', '        releaseTokenValid(msg.sender, now, _value)\n', '        returns (bool) \n', '    {\n', '        require (balances[msg.sender] >= _value);           // Throw if sender has insufficient balance\n', '        require (balances[_to] + _value >= balances[_to]);  // Throw if owerflow detected\n', '        balances[msg.sender] -= _value;                     // Deduct senders balance\n', '        balances[_to] += _value;                            // Add recivers balance\n', '        emit Transfer(msg.sender, _to, _value);             // Raise Transfer event\n', '        return true;\n', '    }\n', '    \n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowances[msg.sender][_spender] = _value;          // Set allowance\n', '        emit Approval(msg.sender, _spender, _value);             // Raise Approval event\n', '        return true;\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to send `_value` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        approve(_spender, _value);                          // Set approval to contract for _value\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { \n', '            revert(); \n', '        }\n', '        return true;\n', '    }\n', '\n', '    /// @notice Send `_value` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _value) public canTransfer releaseTokenValid(msg.sender, now, _value) returns (bool success) {\n', '        require (balances[_from] >= _value);                // Throw if sender does not have enough balance\n', '        require (balances[_to] + _value >= balances[_to]);  // Throw if overflow detected\n', '        require (_value <= allowances[_from][msg.sender]);  // Throw if you do not have allowance\n', '        balances[_from] -= _value;                          // Deduct senders balance\n', '        balances[_to] += _value;                            // Add recipient balance\n', '        allowances[_from][msg.sender] -= _value;            // Deduct allowance for this address\n', '        emit Transfer(_from, _to, _value);                       // Raise Transfer event\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to read the `allowances[]` map\n', '    /// @param _owner The address of the account that owns the token\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of _owner that _spender is allowed to spend\n', '    function allowance(address _owner, address _spender) constant public returns (uint256) {\n', '        return allowances[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', 'contract UST is Owned, standardToken {\n', '        \n', '    string constant public name   = "UseChainToken";\n', '    string constant public symbol = "UST";\n', '    uint constant public decimals = 18;\n', '\n', '    uint256 public totalSupply = 0;\n', '    uint256 constant public topTotalSupply = 2 * 10**10 * 10**decimals;\n', '    uint public forSaleSupply        = percent(topTotalSupply, 45);\n', '    uint public marketingPartnerSupply = percent(topTotalSupply, 5);\n', '    uint public coreTeamSupply   = percent(topTotalSupply, 15);\n', '    uint public technicalCommunitySupply       = percent(topTotalSupply, 15);\n', '    uint public communitySupply          = percent(topTotalSupply, 20);\n', '    uint public softCap                = percent(topTotalSupply, 30);\n', '    \n', '    function () public {\n', '        revert();\n', '    }\n', '    \n', '    /// @dev Owner can change the releaseStartTime when needs\n', '    /// @param _time The releaseStartTime, UTC timezone\n', '    function setRealseTime(uint256 _time) public onlyOwner {\n', '        releaseStartTime = _time;\n', '    }\n', '    \n', '    /// @dev This owner allocate token for private sale\n', '    /// @param _owners The address of the account that owns the token\n', '    /// @param _values The amount of tokens\n', '    /// @param _addrLockType The locktype for different investment type\n', '    function allocateToken(address[] _owners, uint256[] _values, uint256[] _addrLockType) public onlyOwner {\n', '        require ((_owners.length == _values.length) && ( _values.length == _addrLockType.length));\n', '        for(uint i = 0; i < _owners.length ; i++){\n', '            uint256 value = _values[i] * 10 ** decimals;\n', '            \n', '            totalSupply = totalSupply.add(value);\n', '            balances[_owners[i]] = balances[_owners[i]].add(value);             // Set minted coins to target\n', '            emit Transfer(0x0, _owners[i], value);    \n', '            \n', '            userReleaseToken[_owners[i]].UST = userReleaseToken[_owners[i]].UST.add(value);\n', '            userReleaseToken[_owners[i]].addrLockType = _addrLockType[i];\n', '        }\n', '    }\n', '    \n', '    /// @dev This owner allocate token for candy airdrop\n', '    /// @param _owners The address of the account that owns the token\n', '    /// @param _values The amount of tokens\n', '\tfunction allocateCandyToken(address[] _owners, uint256[] _values) public onlyOwner {\n', '       for(uint i = 0; i < _owners.length ; i++){\n', '           uint256 value = _values[i] * 10 ** decimals;\n', '           totalSupply = totalSupply.add(value);\n', '\t\t   balances[_owners[i]] = balances[_owners[i]].add(value); \n', '\t\t   emit Transfer(0x0, _owners[i], value);  \t\t  \n', '        }\n', '    }\n', '    \n', '}']
