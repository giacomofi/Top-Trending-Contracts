['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  address public owner;\n', '  address public ownerCandidate;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Delegate contract to another person.\n', '   * @param candidate New owner address\n', '   */\n', '  function setOwnerCandidate(address candidate) external onlyOwner {\n', '    ownerCandidate = candidate;\n', '  }\n', '\n', '  /**\n', '   * @dev Person should decide does he want to became a new owner. It is necessary\n', '   * to protect that some contract or stranger became new owner.\n', '   */\n', '  function approveNewOwner() external {\n', '    address candidate = ownerCandidate;\n', '    require(msg.sender == candidate, "Only owner candidate can use this function");\n', '    emit OwnershipTransferred(owner, candidate);\n', '    owner = candidate;\n', '    ownerCandidate = 0x0;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = _a * _b;\n', '    require(c / _a == _b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b <= _a);\n', '    uint256 c = _a - _b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    uint256 c = _a + _b;\n', '    require(c >= _a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'contract IERC20Token {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function allowance(address _owner, address _spender) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract CFGToken is IERC20Token, Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) private balances;\n', '  mapping(address => mapping(address => uint256)) private allowed;\n', '\n', '  string public symbol;\n', '  string public name;\n', '  uint8 public decimals;\n', '  uint256 private totalSupply_;\n', '\n', '  bool public initialized = false;\n', '  uint256 public lockedUntil;\n', '  address public hotWallet;\n', '  address public reserveWallet;\n', '  address public teamWallet;\n', '  address public advisersWallet;\n', '\n', '  constructor() public {\n', '    symbol = "CFGT";\n', '    name = "Cardonio Financial Group Token";\n', '    decimals = 18;\n', '  }\n', '\n', '  function init(address _hotWallet, address _reserveWallet, address _teamWallet, address _advisersWallet) external onlyOwner {\n', '    require(!initialized, "Already initialized");\n', '\n', '    lockedUntil = now + 730 days; // 2 years\n', '    hotWallet = _hotWallet;\n', '    reserveWallet = _reserveWallet;\n', '    teamWallet = _teamWallet;\n', '    advisersWallet = _advisersWallet;\n', '\n', '    uint256 hotSupply      = 380000000e18;\n', '    uint256 reserveSupply  = 100000000e18;\n', '    uint256 teamSupply     =  45000000e18;\n', '    uint256 advisersSupply =  25000000e18;\n', '\n', '    balances[hotWallet] = hotSupply;\n', '    balances[reserveWallet] = reserveSupply;\n', '    balances[teamWallet] = teamSupply;\n', '    balances[advisersWallet] = advisersSupply;\n', '\n', '    totalSupply_ = hotSupply.add(reserveSupply).add(teamSupply).add(advisersSupply);\n', '    initialized = true;\n', '  }\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0), "Receiver address should be specified");\n', '    require(initialized, "Not initialized yet");\n', '    require(_value <= balances[msg.sender], "Not enough funds");\n', '\n', '    if (teamWallet == msg.sender && lockedUntil > now) {\n', '      revert("Tokens locked");\n', '    }\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require(msg.sender != _spender, "Owner can not approve to himself");\n', '    require(initialized, "Not initialized yet");\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0), "Receiver address should be specified");\n', '    require(initialized, "Not initialized yet");\n', '    require(_value <= balances[_from], "Not enough funds");\n', '    require(_value <= allowed[_from][msg.sender], "Not enough allowance");\n', '\n', '    if (teamWallet == _from && lockedUntil > now) {\n', '      revert("Tokens locked");\n', '    }\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Restricted access function that mints an amount of the token and assigns it to\n', '   * a specified account. This encapsulates the modification of balances such that the\n', '   * proper events are emitted.\n', '   * @param _to The account that will receive the created tokens.\n', '   * @param _amount The amount that will be created.\n', '   */\n', '  function mint(address _to, uint256 _amount) external {\n', '    address source = hotWallet;\n', '    require(msg.sender == source, "You are not allowed withdraw tokens");\n', '    withdraw(source, _to, _amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to withdraw tokens from special wallets.\n', '   * @param _from The address of special wallet.\n', '   * @param _to The address of receiver.\n', "   * @param _amount The amount of tokens which will be sent to receiver's address.\n", '   */\n', '  function withdraw(address _from, address _to, uint256 _amount) private {\n', '    require(_to != address(0), "Receiver address should be specified");\n', '    require(initialized, "Not initialized yet");\n', '    require(_amount > 0, "Amount should be more than zero");\n', '    require(_amount <= balances[_from], "Not enough funds");\n', '\n', '    balances[_from] = balances[_from].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '\n', '    emit Transfer(_from, _to, _amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Restricted access function to withdraw tokens from reserve wallet.\n', '   * @param _to The address of receiver.\n', "   * @param _amount The amount of tokens which will be sent to receiver's address.\n", '   */\n', '  function withdrawFromReserveWallet(address _to, uint256 _amount) external {\n', '    address source = reserveWallet;\n', '    require(msg.sender == source, "You are not allowed withdraw tokens");\n', '    withdraw(source, _to, _amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Restricted access function to withdraw tokens from team wallet.\n', '   * But tokens can be withdraw only after lock period end.\n', '   * @param _to The address of receiver.\n', "   * @param _amount The amount of tokens which will be sent to receiver's address.\n", '   */\n', '  function withdrawFromTeamWallet(address _to, uint256 _amount) external {\n', '    address source = teamWallet;\n', '    require(msg.sender == source, "You are not allowed withdraw tokens");\n', '    require(lockedUntil <= now, "Tokens locked");\n', '    withdraw(source, _to, _amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Restricted access function to withdraw tokens from advisers wallet.\n', '   * @param _to The address of receiver.\n', "   * @param _amount The amount of tokens which will be sent to receiver's address.\n", '   */\n', '  function withdrawFromAdvisersWallet(address _to, uint256 _amount) external {\n', '    address source = advisersWallet;\n', '    require(msg.sender == source, "You are not allowed withdraw tokens");\n', '    withdraw(source, _to, _amount);\n', '  }\n', '}']