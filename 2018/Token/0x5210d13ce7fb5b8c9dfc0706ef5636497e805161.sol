['pragma solidity ^0.4.24;\n', '\n', 'contract ERC20 {\n', '  function totalSupply() public view returns (uint256);\n', '\n', '  function balanceOf(address _who) public view returns (uint256);\n', '\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to,  uint256 value );\n', '\n', '  event Approval(  address indexed owner,  address indexed spender,  uint256 value );\n', '\n', '  }\n', '  \n', '  library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', ' contract StandardToken is ERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', ' \n', '// ERC20 standard token\n', 'contract XYC is StandardToken {\n', '    address public admin; // ����Ա\n', '    string public name = "XYCoin(逍遥生态币)"; // ��������\n', '    string public symbol = "XYC"; // ���ҷ���\n', '    uint8 public decimals = 18; // ���Ҿ���\n', '    uint256 public totalSupply = 10000000000e18; // ����80�� *10^18\n', '    // ͬһ���˻��������ⶳ��������������\n', '    mapping (address => bool) public frozenAccount; //�����ڶ�����˻�\n', '    mapping (address => uint256) public frozenTimestamp; // �����ڶ�����˻�\n', '\n', '    bool public exchangeFlag = true; // ���Ҷһ�����\n', '    // ������������ļ����ɶ����eth�����ظ�ԭ�˻�\n', '    uint256 public minWei = 1;  //��ʹ� 1 wei  1eth = 1*10^18 wei\n', '    uint256 public maxWei = 20000e18; // ���һ�δ� 20000 eth\n', '    uint256 public maxRaiseAmount = 20000e18; // ļ������ 20000 eth\n', '    uint256 public raisedAmount = 0; // ��ļ�� 0 eth\n', '    uint256 public raiseRatio = 200000; // �һ����� 1eth = 20��token\n', '    // event ֪ͨ\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // ���캯��\n', '    constructor() public {\n', '        totalSupply_ = totalSupply;\n', '        admin = msg.sender;\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', '    // fallback ���Լ��ַת�� or ���&#247;Ǻ�Լ��������\n', '    // �����Զ��һ�eth\n', '    function()\n', '    public payable {\n', '        require(msg.value > 0);\n', '        if (exchangeFlag) {\n', '            if (msg.value >= minWei && msg.value <= maxWei){\n', '                if (raisedAmount < maxRaiseAmount) {\n', '                    uint256 valueNeed = msg.value;\n', '                    raisedAmount = raisedAmount.add(msg.value);\n', '                    if (raisedAmount > maxRaiseAmount) {\n', '                        uint256 valueLeft = raisedAmount.sub(maxRaiseAmount);\n', '                        valueNeed = msg.value.sub(valueLeft);\n', '                        msg.sender.transfer(valueLeft);\n', '                        raisedAmount = maxRaiseAmount;\n', '                    }\n', '                    if (raisedAmount >= maxRaiseAmount) {\n', '                        exchangeFlag = false;\n', '                    }\n', '                    // �Ѵ��������� *10^18\n', '                    uint256 _value = valueNeed.mul(raiseRatio);\n', '\n', '                    require(_value <= balances[admin]);\n', '                    balances[admin] = balances[admin].sub(_value);\n', '                    balances[msg.sender] = balances[msg.sender].add(_value);\n', '\n', '                    emit Transfer(admin, msg.sender, _value);\n', '\n', '                }\n', '            } else {\n', '                msg.sender.transfer(msg.value);\n', '            }\n', '        } else {\n', '            msg.sender.transfer(msg.value);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * �\u07b8Ĺ���Ա\n', '    */\n', '    function changeAdmin(\n', '        address _newAdmin\n', '    )\n', '    public\n', '    returns (bool)  {\n', '        require(msg.sender == admin);\n', '        require(_newAdmin != address(0));\n', '        balances[_newAdmin] = balances[_newAdmin].add(balances[admin]);\n', '        balances[admin] = 0;\n', '        admin = _newAdmin;\n', '        return true;\n', '    }\n', '    /**\n', '    * ����\n', '    */\n', '    function generateToken(\n', '        address _target,\n', '        uint256 _amount\n', '    )\n', '    public\n', '    returns (bool)  {\n', '        require(msg.sender == admin);\n', '        require(_target != address(0));\n', '        balances[_target] = balances[_target].add(_amount);\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        totalSupply = totalSupply_;\n', '        return true;\n', '    }\n', '\n', '    // �Ӻ�Լ����\n', '    // ֻ���������Ա\n', '    function withdraw (\n', '        uint256 _amount\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        msg.sender.transfer(_amount);\n', '        return true;\n', '    }\n', '    /**\n', '    * �����˻�\n', '    */\n', '    function freeze(\n', '        address _target,\n', '        bool _freeze\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        require(_target != address(0));\n', '        frozenAccount[_target] = _freeze;\n', '        return true;\n', '    }\n', '    /**\n', '    * ͨ��ʱ��������˻�\n', '    */\n', '    function freezeWithTimestamp(\n', '        address _target,\n', '        uint256 _timestamp\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        require(_target != address(0));\n', '        frozenTimestamp[_target] = _timestamp;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        * ���������˻�\n', '        */\n', '    function multiFreeze(\n', '        address[] _targets,\n', '        bool[] _freezes\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        require(_targets.length == _freezes.length);\n', '        uint256 len = _targets.length;\n', '        require(len > 0);\n', '        for (uint256 i = 0; i < len; i = i.add(1)) {\n', '            address _target = _targets[i];\n', '            require(_target != address(0));\n', '            bool _freeze = _freezes[i];\n', '            frozenAccount[_target] = _freeze;\n', '        }\n', '        return true;\n', '    }\n', '    /**\n', '            * ����ͨ��ʱ��������˻�\n', '            */\n', '    function multiFreezeWithTimestamp(\n', '        address[] _targets,\n', '        uint256[] _timestamps\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        require(_targets.length == _timestamps.length);\n', '        uint256 len = _targets.length;\n', '        require(len > 0);\n', '        for (uint256 i = 0; i < len; i = i.add(1)) {\n', '            address _target = _targets[i];\n', '            require(_target != address(0));\n', '            uint256 _timestamp = _timestamps[i];\n', '            frozenTimestamp[_target] = _timestamp;\n', '        }\n', '        return true;\n', '    }\n', '    /**\n', '    * ����ת��\n', '    */\n', '    function multiTransfer(\n', '        address[] _tos,\n', '        uint256[] _values\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(!frozenAccount[msg.sender]);\n', '        require(now > frozenTimestamp[msg.sender]);\n', '        require(_tos.length == _values.length);\n', '        uint256 len = _tos.length;\n', '        require(len > 0);\n', '        uint256 amount = 0;\n', '        for (uint256 i = 0; i < len; i = i.add(1)) {\n', '            amount = amount.add(_values[i]);\n', '        }\n', '        require(amount <= balances[msg.sender]);\n', '        for (uint256 j = 0; j < len; j = j.add(1)) {\n', '            address _to = _tos[j];\n', '            require(_to != address(0));\n', '            balances[_to] = balances[_to].add(_values[j]);\n', '            balances[msg.sender] = balances[msg.sender].sub(_values[j]);\n', '            emit Transfer(msg.sender, _to, _values[j]);\n', '        }\n', '        return true;\n', '    }\n', '    /**\n', '    * �ӵ�����ת����_to\n', '    */\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(!frozenAccount[msg.sender]);\n', '        require(now > frozenTimestamp[msg.sender]);\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    /*\n', '    * �ӵ�������Ϊfrom������from�˻��е�tokenת����to\n', '    * ��������from�����ɶ���б���>=value\n', '    */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        require(!frozenAccount[_from]);\n', '        require(now > frozenTimestamp[msg.sender]);\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * ����ת�˴�����spender�Ĵ��������ɶ��\n', '    */\n', '    function approve(\n', '        address _spender,\n', '        uint256 _value\n', '    ) public\n', '    returns (bool) {\n', '        // ת�˵�ʱ���У��balances���&#244;�require������\n', '        // require(_value <= balances[msg.sender]);\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * ����ת�˴�����spender�Ĵ��������ɶ��\n', '    * ���岻���function\n', '    */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        // uint256 value_ = allowed[msg.sender][_spender].add(_addedValue);\n', '        // require(value_ <= balances[msg.sender]);\n', '        // allowed[msg.sender][_spender] = value_;\n', '\n', '        // emit Approval(msg.sender, _spender, value_);\n', '        return true;\n', '    }\n', '    /**\n', '    * ����ת�˴�����spender�Ĵ��������ɶ��\n', '    * ���岻���function\n', '    */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _subtractedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        // uint256 oldValue = allowed[msg.sender][_spender];\n', '        // if (_subtractedValue > oldValue) {\n', '        //    allowed[msg.sender][_spender] = 0;\n', '        // } else {\n', '        //    uint256 newValue = oldValue.sub(_subtractedValue);\n', '        //    require(newValue <= balances[msg.sender]);\n', '        //   allowed[msg.sender][_spender] = newValue;\n', '        //}\n', '\n', '        // emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    //********************************************************************************\n', '    //��ѯ�˻��Ƿ��������ʱ���\n', '    function getFrozenTimestamp(\n', '        address _target\n', '    )\n', '    public view\n', '    returns (uint256) {\n', '        require(_target != address(0));\n', '        return frozenTimestamp[_target];\n', '    }\n', '    //��ѯ�˻��Ƿ�����\n', '    function getFrozenAccount(\n', '        address _target\n', '    )\n', '    public view\n', '    returns (bool) {\n', '        require(_target != address(0));\n', '        return frozenAccount[_target];\n', '    }\n', '    //��ѯ��Լ�����\n', '    function getBalance()\n', '    public view\n', '    returns (uint256) {\n', '        return address(this).balance;\n', '    }\n', '\t\n', '    // �\u07b8�ļ��flag\n', '    function setExchangeFlag (\n', '        bool _flag\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        exchangeFlag = _flag;\n', '        return true;\n', '\n', '    }\n', '    // �\u07b8ĵ���ļ������\n', '    function setMinWei (\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        minWei = _value;\n', '        return true;\n', '\n', '    }\n', '    // �\u07b8ĵ���ļ������\n', '    function setMaxWei (\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        maxWei = _value;\n', '        return true;\n', '    }\n', '    // �\u07b8���ļ������\n', '    function setMaxRaiseAmount (\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        maxRaiseAmount = _value;\n', '        return true;\n', '    }\n', '\n', '    // �\u07b8���ļ����\n', '    function setRaisedAmount (\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        raisedAmount = _value;\n', '        return true;\n', '    }\n', '\n', '    // �\u07b8�ļ������\n', '    function setRaiseRatio (\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        raiseRatio = _value;\n', '        return true;\n', '    }\n', '\n', '    // ���ٺ�Լ\n', '    function kill()\n', '    public {\n', '        require(msg.sender == admin);\n', '        selfdestruct(admin);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract ERC20 {\n', '  function totalSupply() public view returns (uint256);\n', '\n', '  function balanceOf(address _who) public view returns (uint256);\n', '\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to,  uint256 value );\n', '\n', '  event Approval(  address indexed owner,  address indexed spender,  uint256 value );\n', '\n', '  }\n', '  \n', '  library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', ' contract StandardToken is ERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', ' \n', '// ERC20 standard token\n', 'contract XYC is StandardToken {\n', '    address public admin; // ����Ա\n', '    string public name = "XYCoin(逍遥生态币)"; // ��������\n', '    string public symbol = "XYC"; // ���ҷ���\n', '    uint8 public decimals = 18; // ���Ҿ���\n', '    uint256 public totalSupply = 10000000000e18; // ����80�� *10^18\n', '    // ͬһ���˻��������ⶳ��������������\n', '    mapping (address => bool) public frozenAccount; //�����ڶ�����˻�\n', '    mapping (address => uint256) public frozenTimestamp; // �����ڶ�����˻�\n', '\n', '    bool public exchangeFlag = true; // ���Ҷһ�����\n', '    // ������������ļ����ɶ����eth�����ظ�ԭ�˻�\n', '    uint256 public minWei = 1;  //��ʹ� 1 wei  1eth = 1*10^18 wei\n', '    uint256 public maxWei = 20000e18; // ���һ�δ� 20000 eth\n', '    uint256 public maxRaiseAmount = 20000e18; // ļ������ 20000 eth\n', '    uint256 public raisedAmount = 0; // ��ļ�� 0 eth\n', '    uint256 public raiseRatio = 200000; // �һ����� 1eth = 20��token\n', '    // event ֪ͨ\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // ���캯��\n', '    constructor() public {\n', '        totalSupply_ = totalSupply;\n', '        admin = msg.sender;\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', '    // fallback ���Լ��ַת�� or ���÷Ǻ�Լ��������\n', '    // �����Զ��һ�eth\n', '    function()\n', '    public payable {\n', '        require(msg.value > 0);\n', '        if (exchangeFlag) {\n', '            if (msg.value >= minWei && msg.value <= maxWei){\n', '                if (raisedAmount < maxRaiseAmount) {\n', '                    uint256 valueNeed = msg.value;\n', '                    raisedAmount = raisedAmount.add(msg.value);\n', '                    if (raisedAmount > maxRaiseAmount) {\n', '                        uint256 valueLeft = raisedAmount.sub(maxRaiseAmount);\n', '                        valueNeed = msg.value.sub(valueLeft);\n', '                        msg.sender.transfer(valueLeft);\n', '                        raisedAmount = maxRaiseAmount;\n', '                    }\n', '                    if (raisedAmount >= maxRaiseAmount) {\n', '                        exchangeFlag = false;\n', '                    }\n', '                    // �Ѵ��������� *10^18\n', '                    uint256 _value = valueNeed.mul(raiseRatio);\n', '\n', '                    require(_value <= balances[admin]);\n', '                    balances[admin] = balances[admin].sub(_value);\n', '                    balances[msg.sender] = balances[msg.sender].add(_value);\n', '\n', '                    emit Transfer(admin, msg.sender, _value);\n', '\n', '                }\n', '            } else {\n', '                msg.sender.transfer(msg.value);\n', '            }\n', '        } else {\n', '            msg.sender.transfer(msg.value);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * �\u07b8Ĺ���Ա\n', '    */\n', '    function changeAdmin(\n', '        address _newAdmin\n', '    )\n', '    public\n', '    returns (bool)  {\n', '        require(msg.sender == admin);\n', '        require(_newAdmin != address(0));\n', '        balances[_newAdmin] = balances[_newAdmin].add(balances[admin]);\n', '        balances[admin] = 0;\n', '        admin = _newAdmin;\n', '        return true;\n', '    }\n', '    /**\n', '    * ����\n', '    */\n', '    function generateToken(\n', '        address _target,\n', '        uint256 _amount\n', '    )\n', '    public\n', '    returns (bool)  {\n', '        require(msg.sender == admin);\n', '        require(_target != address(0));\n', '        balances[_target] = balances[_target].add(_amount);\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        totalSupply = totalSupply_;\n', '        return true;\n', '    }\n', '\n', '    // �Ӻ�Լ����\n', '    // ֻ���������Ա\n', '    function withdraw (\n', '        uint256 _amount\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        msg.sender.transfer(_amount);\n', '        return true;\n', '    }\n', '    /**\n', '    * �����˻�\n', '    */\n', '    function freeze(\n', '        address _target,\n', '        bool _freeze\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        require(_target != address(0));\n', '        frozenAccount[_target] = _freeze;\n', '        return true;\n', '    }\n', '    /**\n', '    * ͨ��ʱ��������˻�\n', '    */\n', '    function freezeWithTimestamp(\n', '        address _target,\n', '        uint256 _timestamp\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        require(_target != address(0));\n', '        frozenTimestamp[_target] = _timestamp;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        * ���������˻�\n', '        */\n', '    function multiFreeze(\n', '        address[] _targets,\n', '        bool[] _freezes\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        require(_targets.length == _freezes.length);\n', '        uint256 len = _targets.length;\n', '        require(len > 0);\n', '        for (uint256 i = 0; i < len; i = i.add(1)) {\n', '            address _target = _targets[i];\n', '            require(_target != address(0));\n', '            bool _freeze = _freezes[i];\n', '            frozenAccount[_target] = _freeze;\n', '        }\n', '        return true;\n', '    }\n', '    /**\n', '            * ����ͨ��ʱ��������˻�\n', '            */\n', '    function multiFreezeWithTimestamp(\n', '        address[] _targets,\n', '        uint256[] _timestamps\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        require(_targets.length == _timestamps.length);\n', '        uint256 len = _targets.length;\n', '        require(len > 0);\n', '        for (uint256 i = 0; i < len; i = i.add(1)) {\n', '            address _target = _targets[i];\n', '            require(_target != address(0));\n', '            uint256 _timestamp = _timestamps[i];\n', '            frozenTimestamp[_target] = _timestamp;\n', '        }\n', '        return true;\n', '    }\n', '    /**\n', '    * ����ת��\n', '    */\n', '    function multiTransfer(\n', '        address[] _tos,\n', '        uint256[] _values\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(!frozenAccount[msg.sender]);\n', '        require(now > frozenTimestamp[msg.sender]);\n', '        require(_tos.length == _values.length);\n', '        uint256 len = _tos.length;\n', '        require(len > 0);\n', '        uint256 amount = 0;\n', '        for (uint256 i = 0; i < len; i = i.add(1)) {\n', '            amount = amount.add(_values[i]);\n', '        }\n', '        require(amount <= balances[msg.sender]);\n', '        for (uint256 j = 0; j < len; j = j.add(1)) {\n', '            address _to = _tos[j];\n', '            require(_to != address(0));\n', '            balances[_to] = balances[_to].add(_values[j]);\n', '            balances[msg.sender] = balances[msg.sender].sub(_values[j]);\n', '            emit Transfer(msg.sender, _to, _values[j]);\n', '        }\n', '        return true;\n', '    }\n', '    /**\n', '    * �ӵ�����ת����_to\n', '    */\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(!frozenAccount[msg.sender]);\n', '        require(now > frozenTimestamp[msg.sender]);\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    /*\n', '    * �ӵ�������Ϊfrom������from�˻��е�tokenת����to\n', '    * ��������from�����ɶ���б���>=value\n', '    */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        require(!frozenAccount[_from]);\n', '        require(now > frozenTimestamp[msg.sender]);\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * ����ת�˴�����spender�Ĵ��������ɶ��\n', '    */\n', '    function approve(\n', '        address _spender,\n', '        uint256 _value\n', '    ) public\n', '    returns (bool) {\n', '        // ת�˵�ʱ���У��balances���ô�require������\n', '        // require(_value <= balances[msg.sender]);\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * ����ת�˴�����spender�Ĵ��������ɶ��\n', '    * ���岻���function\n', '    */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        // uint256 value_ = allowed[msg.sender][_spender].add(_addedValue);\n', '        // require(value_ <= balances[msg.sender]);\n', '        // allowed[msg.sender][_spender] = value_;\n', '\n', '        // emit Approval(msg.sender, _spender, value_);\n', '        return true;\n', '    }\n', '    /**\n', '    * ����ת�˴�����spender�Ĵ��������ɶ��\n', '    * ���岻���function\n', '    */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _subtractedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        // uint256 oldValue = allowed[msg.sender][_spender];\n', '        // if (_subtractedValue > oldValue) {\n', '        //    allowed[msg.sender][_spender] = 0;\n', '        // } else {\n', '        //    uint256 newValue = oldValue.sub(_subtractedValue);\n', '        //    require(newValue <= balances[msg.sender]);\n', '        //   allowed[msg.sender][_spender] = newValue;\n', '        //}\n', '\n', '        // emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    //********************************************************************************\n', '    //��ѯ�˻��Ƿ��������ʱ���\n', '    function getFrozenTimestamp(\n', '        address _target\n', '    )\n', '    public view\n', '    returns (uint256) {\n', '        require(_target != address(0));\n', '        return frozenTimestamp[_target];\n', '    }\n', '    //��ѯ�˻��Ƿ�����\n', '    function getFrozenAccount(\n', '        address _target\n', '    )\n', '    public view\n', '    returns (bool) {\n', '        require(_target != address(0));\n', '        return frozenAccount[_target];\n', '    }\n', '    //��ѯ��Լ�����\n', '    function getBalance()\n', '    public view\n', '    returns (uint256) {\n', '        return address(this).balance;\n', '    }\n', '\t\n', '    // �\u07b8�ļ��flag\n', '    function setExchangeFlag (\n', '        bool _flag\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        exchangeFlag = _flag;\n', '        return true;\n', '\n', '    }\n', '    // �\u07b8ĵ���ļ������\n', '    function setMinWei (\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        minWei = _value;\n', '        return true;\n', '\n', '    }\n', '    // �\u07b8ĵ���ļ������\n', '    function setMaxWei (\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        maxWei = _value;\n', '        return true;\n', '    }\n', '    // �\u07b8���ļ������\n', '    function setMaxRaiseAmount (\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        maxRaiseAmount = _value;\n', '        return true;\n', '    }\n', '\n', '    // �\u07b8���ļ����\n', '    function setRaisedAmount (\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        raisedAmount = _value;\n', '        return true;\n', '    }\n', '\n', '    // �\u07b8�ļ������\n', '    function setRaiseRatio (\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool) {\n', '        require(msg.sender == admin);\n', '        raiseRatio = _value;\n', '        return true;\n', '    }\n', '\n', '    // ���ٺ�Լ\n', '    function kill()\n', '    public {\n', '        require(msg.sender == admin);\n', '        selfdestruct(admin);\n', '    }\n', '\n', '}']
