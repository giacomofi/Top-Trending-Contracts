['pragma solidity ^0.4.18;\n', '\n', '\n', '    contract ERC20 {\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    }\n', '\n', '    library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c; \n', '    }\n', '    }\n', '\n', '\n', '    contract Bitway is ERC20 {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    \n', '    uint256 public totalSupply = 0;\n', '    uint256 public maxSupply = 22000000 * 10 ** uint256(decimals);\n', '    \n', '    string public constant symbol = "BTW";\n', '    string public constant name = "Bitway";\n', '    uint256 public constant decimals = 18;\n', '    \n', '    \n', '    \n', '    uint256 public constant RATE = 10000;\n', '    address public owner;\n', '    \n', '   \n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    \n', '    \n', '    \n', '    function () public payable {\n', '        createTokens();\n', '        \n', '    }\n', '    \n', '    function Bitway() public {\n', '        owner = msg.sender;\n', '        \n', '    }\n', '    \n', '   \n', '    function createTokens() public payable {\n', '        require(msg.value > 0);\n', '        require(totalSupply < maxSupply);\n', '        uint256 tokens = msg.value.mul(RATE);\n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '        totalSupply = totalSupply.add(tokens);\n', '        \n', '    }\n', '    \n', '    \n', '    \n', '    function totalSupply() public constant returns (uint256){\n', '        return totalSupply;\n', '    }\n', '\n', '  \n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(\n', '        allowed[_from][msg.sender] >= _value\n', '        && balances[_from] >= _value\n', '        && _value > 0\n', '        );\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '   \n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '}']