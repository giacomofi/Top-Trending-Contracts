['pragma solidity 0.4.24;\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    \n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and a\n', '// fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract BCCT is ERC20Interface {\n', '    using SafeMath for uint;\n', '    \n', '    address public owner;\n', '    string public symbol = "BCCT";\n', '    string public name = "Beverage Cash Coin";\n', '    uint8 public decimals = 18;\n', '    // 150,235,700,000,000,000,000,000,000 (the same as wei):\n', '    uint private _totalSupply = 150425700 * 10**uint(decimals);\n', '\n', '    mapping(address => uint) private balances;\n', '    mapping(address => mapping(address => uint)) private allowed;\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Allows execution of function only for owner of smart-contract\n', '    // ------------------------------------------------------------------------\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Allows execution only if the request is properly formed to prevent short address attacks\n', '    // ------------------------------------------------------------------------\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(msg.data.length >= size + 4); // add 4 bytes for function signature\n', '        _;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Perform several transfers from smart contract owner&#39;s account to `to` accounts.\n', '    // Useful during ICO to save gas on base transaction costs.\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferQueue(address[] to, uint[] amount) public onlyOwner returns (bool success) {\n', '        require(to.length == amount.length);\n', '        \n', '        for (uint64 i = 0; i < to.length; ++i) {\n', '            _transfer(msg.sender, to[i], amount[i]);\n', '        }\n', '        \n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) \n', '        public \n', '        onlyOwner \n', '        onlyPayloadSize(32 + 32) // 32 bytes for address + 32 bytes for tokens\n', '        returns (bool success) \n', '    {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // ERC-20: Total supply in accounts\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // ERC-20: Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // ERC-20: Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) \n', '        public \n', '        onlyPayloadSize(32 + 32) // 32 bytes for to + 32 bytes for tokens\n', '        returns (bool success) \n', '    {\n', '        _transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // ERC-20: Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) \n', '        public \n', '        onlyPayloadSize(32 + 32) // 32 bytes for spender + 32 bytes for tokens\n', '        returns (bool success) \n', '    {\n', '        require(balances[msg.sender] >= tokens);\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // ERC-20: Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) \n', '        public \n', '        onlyPayloadSize(32 + 32 + 32) // 32 bytes for from + 32 bytes for to + 32 bytes for tokens\n', '        returns (bool success) \n', '    {\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        _transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // ERC-20: Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Internal transfer function for calling from the contract. \n', '    // Workaround for issues with payload size checking in internal calls.\n', '    // ------------------------------------------------------------------------\n', '    function _transfer(address from, address to, uint tokens) internal {\n', '        balances[from] = balances[from].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    \n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and a\n', '// fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract BCCT is ERC20Interface {\n', '    using SafeMath for uint;\n', '    \n', '    address public owner;\n', '    string public symbol = "BCCT";\n', '    string public name = "Beverage Cash Coin";\n', '    uint8 public decimals = 18;\n', '    // 150,235,700,000,000,000,000,000,000 (the same as wei):\n', '    uint private _totalSupply = 150425700 * 10**uint(decimals);\n', '\n', '    mapping(address => uint) private balances;\n', '    mapping(address => mapping(address => uint)) private allowed;\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Allows execution of function only for owner of smart-contract\n', '    // ------------------------------------------------------------------------\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Allows execution only if the request is properly formed to prevent short address attacks\n', '    // ------------------------------------------------------------------------\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(msg.data.length >= size + 4); // add 4 bytes for function signature\n', '        _;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', "    // Perform several transfers from smart contract owner's account to `to` accounts.\n", '    // Useful during ICO to save gas on base transaction costs.\n', "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferQueue(address[] to, uint[] amount) public onlyOwner returns (bool success) {\n', '        require(to.length == amount.length);\n', '        \n', '        for (uint64 i = 0; i < to.length; ++i) {\n', '            _transfer(msg.sender, to[i], amount[i]);\n', '        }\n', '        \n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) \n', '        public \n', '        onlyOwner \n', '        onlyPayloadSize(32 + 32) // 32 bytes for address + 32 bytes for tokens\n', '        returns (bool success) \n', '    {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // ERC-20: Total supply in accounts\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // ERC-20: Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // ERC-20: Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) \n', '        public \n', '        onlyPayloadSize(32 + 32) // 32 bytes for to + 32 bytes for tokens\n', '        returns (bool success) \n', '    {\n', '        _transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // ERC-20: Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) \n', '        public \n', '        onlyPayloadSize(32 + 32) // 32 bytes for spender + 32 bytes for tokens\n', '        returns (bool success) \n', '    {\n', '        require(balances[msg.sender] >= tokens);\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // ERC-20: Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) \n', '        public \n', '        onlyPayloadSize(32 + 32 + 32) // 32 bytes for from + 32 bytes for to + 32 bytes for tokens\n', '        returns (bool success) \n', '    {\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        _transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // ERC-20: Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Internal transfer function for calling from the contract. \n', '    // Workaround for issues with payload size checking in internal calls.\n', '    // ------------------------------------------------------------------------\n', '    function _transfer(address from, address to, uint tokens) internal {\n', '        balances[from] = balances[from].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '    }\n', '}']
