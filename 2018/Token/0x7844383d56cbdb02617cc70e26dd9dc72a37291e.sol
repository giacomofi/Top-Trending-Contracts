['pragma solidity ^0.4.19;\n', '\n', 'contract SafeMath {\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal pure returns ( uint256) {\n', '        uint256 z = x + y;\n', '        assert((z >= x) && (z >= y));\n', '        return z;\n', '    }\n', '\n', '    function safeSub(uint256 x, uint256 y) internal pure returns ( uint256) {\n', '        assert(x >= y);\n', '        uint256 z = x - y;\n', '        return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal pure returns ( uint256) {\n', '        uint256 z = x * y;\n', '        assert((x == 0)||(z/x == y));\n', '        return z;\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() constant public returns ( uint supply);\n', '\n', '    function balanceOf( address who ) constant public returns ( uint value);\n', '    function allowance( address owner, address spender ) constant public returns (uint _allowance);\n', '    function transfer( address to, uint value) public returns (bool ok);\n', '    function transferFrom( address from, address to, uint value) public returns (bool ok);\n', '    function approve( address spender, uint value ) public returns (bool ok);\n', '\n', '    event Transfer( address indexed from, address indexed to, uint value);\n', '    event Approval( address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '//implement \n', 'contract StandardToken is SafeMath,ERC20 {\n', '    uint256     _totalSupply;\n', '    \n', '    function totalSupply() constant public returns ( uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function transfer(address dst, uint wad) public returns (bool) {\n', '        assert(balances[msg.sender] >= wad);\n', '        \n', '        balances[msg.sender] = safeSub(balances[msg.sender], wad);\n', '        balances[dst] = safeAdd(balances[dst], wad);\n', '        \n', '        Transfer(msg.sender, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address src, address dst, uint wad) public returns (bool) {\n', '        assert(wad > 0 );\n', '        assert(balances[src] >= wad);\n', '        \n', '        balances[src] = safeSub(balances[src], wad);\n', '        balances[dst] = safeAdd(balances[dst], wad);\n', '        \n', '        Transfer(src, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns ( uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns ( bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns ( uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function freezeOf(address _owner) constant public returns ( uint256 balance) {\n', '        return freezes[_owner];\n', '    }\n', '    \n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => uint256) freezes;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract DSAuth {\n', '    address public authority;\n', '    address public owner;\n', '\n', '    function DSAuth() public {\n', '        owner = msg.sender;\n', '        authority = msg.sender;\n', '    }\n', '\n', '    function setOwner(address owner_) Owner public\n', '    {\n', '        owner = owner_;\n', '    }\n', '\n', '    modifier Auth {\n', '        assert(isAuthorized(msg.sender));\n', '        _;\n', '    }\n', '    \n', '    modifier Owner {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src) internal view returns ( bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == authority) {\n', '            return true;\n', '        }\n', '        else if (src == owner) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '}\n', '\n', 'contract DRCToken is StandardToken,DSAuth {\n', '\n', '    string public name = "Digit RedWine Coin";\n', '    uint8 public decimals = 18;\n', '    string public symbol = "DRC";\n', '    \n', '    /* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed from, uint256 value);\n', '    \n', '    /* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed from, uint256 value);\n', '    \n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    function DRCToken() public {\n', '        \n', '    }\n', '\n', '    function mint(uint256 wad) Owner public {\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], wad);\n', '        _totalSupply = safeAdd(_totalSupply, wad);\n', '    }\n', '\n', '    function burn(uint256 wad) Owner public {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], wad);\n', '        _totalSupply = safeSub(_totalSupply, wad);\n', '        Burn(msg.sender, wad);\n', '    }\n', '\n', '    function push(address dst, uint256 wad) public returns ( bool) {\n', '        return transfer(dst, wad);\n', '    }\n', '\n', '    function pull(address src, uint256 wad) public returns ( bool) {\n', '        return transferFrom(src, msg.sender, wad);\n', '    }\n', '\n', '    function transfer(address dst, uint wad) public returns (bool) {\n', '        return super.transfer(dst, wad);\n', '    }\n', '    \n', '    function freeze(address dst,uint256 _value) Auth public returns (bool success) {\n', '        assert(balances[dst] >= _value); // Check if the sender has enough\n', '        assert(_value > 0) ; \n', '        balances[dst] = SafeMath.safeSub(balances[dst], _value);                      // Subtract from the sender\n', '        freezes[dst] = SafeMath.safeAdd(freezes[dst], _value);                                // Updates totalSupply\n', '        Freeze(dst, _value);\n', '        return true;\n', '    }\n', '    \n', '    function unfreeze(address dst,uint256 _value) Auth public returns (bool success) {\n', '        assert(freezes[dst] >= _value);            // Check if the sender has enough\n', '        assert(_value > 0) ; \n', '        freezes[dst] = SafeMath.safeSub(freezes[dst], _value);                      // Subtract from the sender\n', '        balances[dst] = SafeMath.safeAdd(balances[dst], _value);\n', '        Unfreeze(dst, _value);\n', '        return true;\n', '    }\n', '}']