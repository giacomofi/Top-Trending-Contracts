['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SKYFChain Tokens\n', ' * @dev SKYFChain Token, ERC20 implementation, contract based on Zeppelin contracts:\n', ' * Ownable, BasicToken, StandardToken, ERC20Basic, Burnable\n', '*/\n', 'contract SKYFToken is Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    enum State {Active, Finalized}\n', '    State public state = State.Active;\n', '\n', '\n', '    /**\n', '     * @dev ERC20 descriptor variables\n', '     */\n', '    string public constant name = "SKYFchain";\n', '    string public constant symbol = "SKYFT";\n', '    uint8 public decimals = 18;\n', '\n', '    uint256 public constant startTime = 1534334400;\n', '    uint256 public constant airdropTime = startTime + 365 days;\n', '    uint256 public constant shortAirdropTime = startTime + 182 days;\n', '    \n', '    \n', '    uint256 public totalSupply_ = 1200 * 10 ** 24;\n', '\n', '    uint256 public constant crowdsaleSupply = 528 * 10 ** 24;\n', '    uint256 public constant networkDevelopmentSupply = 180 * 10 ** 24;\n', '    uint256 public constant communityDevelopmentSupply = 120 * 10 ** 24;\n', '    uint256 public constant reserveSupply = 114 * 10 ** 24; \n', '    uint256 public constant bountySupply = 18 * 10 ** 24;\n', '    uint256 public constant teamSupply = 240 * 10 ** 24;\n', '    \n', '\n', '    address public crowdsaleWallet;\n', '    address public networkDevelopmentWallet;\n', '    address public communityDevelopmentWallet;\n', '    address public reserveWallet;\n', '    address public bountyWallet;\n', '    address public teamWallet;\n', '\n', '    address public siteAccount;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => uint256) airdrop;\n', '    mapping (address => uint256) shortenedAirdrop;\n', '\n', '        \n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Burn(address indexed burner, uint256 value);\n', '    event Airdrop(address indexed beneficiary, uint256 amount);\n', '\n', '    /**\n', '     * @dev Contract constructor\n', '     */\n', '    constructor(address _crowdsaleWallet\n', '                , address _networkDevelopmentWallet\n', '                , address _communityDevelopmentWallet\n', '                , address _reserveWallet\n', '                , address _bountyWallet\n', '                , address _teamWallet\n', '                , address _siteAccount) public {\n', '        require(_crowdsaleWallet != address(0));\n', '        require(_networkDevelopmentWallet != address(0));\n', '        require(_communityDevelopmentWallet != address(0));\n', '        require(_reserveWallet != address(0));\n', '        require(_bountyWallet != address(0));\n', '        require(_teamWallet != address(0));\n', '\n', '        require(_siteAccount != address(0));\n', '\n', '        crowdsaleWallet = _crowdsaleWallet;\n', '        networkDevelopmentWallet = _networkDevelopmentWallet;\n', '        communityDevelopmentWallet = _communityDevelopmentWallet;\n', '        reserveWallet = _reserveWallet;\n', '        bountyWallet = _bountyWallet;\n', '        teamWallet = _teamWallet;\n', '\n', '        siteAccount = _siteAccount;\n', '\n', '        // Issue 528 millions crowdsale tokens\n', '        _issueTokens(crowdsaleWallet, crowdsaleSupply);\n', '\n', '        // Issue 180 millions network development tokens\n', '        _issueTokens(networkDevelopmentWallet, networkDevelopmentSupply);\n', '\n', '        // Issue 120 millions community development tokens\n', '        _issueTokens(communityDevelopmentWallet, communityDevelopmentSupply);\n', '\n', '        // Issue 114 millions reserve tokens\n', '        _issueTokens(reserveWallet, reserveSupply);\n', '\n', '        // Issue 18 millions bounty tokens\n', '        _issueTokens(bountyWallet, bountySupply);\n', '\n', '        // Issue 240 millions team tokens\n', '        _issueTokens(teamWallet, teamSupply);\n', '\n', '        allowed[crowdsaleWallet][siteAccount] = crowdsaleSupply;\n', '        emit Approval(crowdsaleWallet, siteAccount, crowdsaleSupply);\n', '        allowed[crowdsaleWallet][owner] = crowdsaleSupply;\n', '        emit Approval(crowdsaleWallet, owner, crowdsaleSupply);\n', '    }\n', '\n', '    function _issueTokens(address _to, uint256 _amount) internal {\n', '        require(balances[_to] == 0);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '    }\n', '\n', '    function _airdropUnlocked(address _who) internal view returns (bool) {\n', '        return now > airdropTime\n', '        || (now > shortAirdropTime && airdrop[_who] == 0) \n', '        || !isAirdrop(_who);\n', '    }\n', '\n', '    modifier erc20Allowed() {\n', '        require(state == State.Finalized || msg.sender == owner|| msg.sender == siteAccount || msg.sender == crowdsaleWallet);\n', '        require (_airdropUnlocked(msg.sender));\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwnerOrSiteAccount() {\n', '        require(msg.sender == owner || msg.sender == siteAccount);\n', '        _;\n', '    }\n', '    \n', '    function setSiteAccountAddress(address _address) public onlyOwner {\n', '        require(_address != address(0));\n', '\n', '        uint256 allowance = allowed[crowdsaleWallet][siteAccount];\n', '        allowed[crowdsaleWallet][siteAccount] = 0;\n', '        emit Approval(crowdsaleWallet, siteAccount, 0);\n', '        allowed[crowdsaleWallet][_address] = allowed[crowdsaleWallet][_address].add(allowance);\n', '        emit Approval(crowdsaleWallet, _address, allowed[crowdsaleWallet][_address]);\n', '        siteAccount = _address;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public erc20Allowed returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        require(_airdropUnlocked(_to));\n', '\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public erc20Allowed returns (bool) {\n', '        return _transferFrom(msg.sender, _from, _to, _value);\n', '    }\n', '\n', '    function _transferFrom(address _who, address _from, address _to, uint256 _value) internal returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_airdropUnlocked(_to) || _from == crowdsaleWallet);\n', '\n', '        uint256 _allowance = allowed[_from][_who];\n', '\n', '        require(_value <= _allowance);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][_who] = _allowance.sub(_value);\n', '\n', '        _recalculateAirdrop(_to);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public erc20Allowed returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(address _spender, uint256 _addedValue) public erc20Allowed returns (bool) {\n', '        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue) public erc20Allowed returns (bool) {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '    */\n', '    function burn(uint256 _value) public erc20Allowed {\n', '        _burn(msg.sender, _value);\n', '    }\n', '\n', '    function _burn(address _who, uint256 _value) internal {\n', '        require(_value <= balances[_who]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '\n', '    function finalize() public onlyOwner {\n', '        require(state == State.Active);\n', '        require(now > startTime);\n', '        state = State.Finalized;\n', '\n', '        uint256 crowdsaleBalance = balanceOf(crowdsaleWallet);\n', '\n', '        uint256 burnAmount = networkDevelopmentSupply.mul(crowdsaleBalance).div(crowdsaleSupply);\n', '        _burn(networkDevelopmentWallet, burnAmount);\n', '\n', '        burnAmount = communityDevelopmentSupply.mul(crowdsaleBalance).div(crowdsaleSupply);\n', '        _burn(communityDevelopmentWallet, burnAmount);\n', '\n', '        burnAmount = reserveSupply.mul(crowdsaleBalance).div(crowdsaleSupply);\n', '        _burn(reserveWallet, burnAmount);\n', '\n', '        burnAmount = bountySupply.mul(crowdsaleBalance).div(crowdsaleSupply);\n', '        _burn(bountyWallet, burnAmount);\n', '\n', '        burnAmount = teamSupply.mul(crowdsaleBalance).div(crowdsaleSupply);\n', '        _burn(teamWallet, burnAmount);\n', '\n', '        _burn(crowdsaleWallet, crowdsaleBalance);\n', '    }\n', '    \n', '    function addAirdrop(address _beneficiary, uint256 _amount) public onlyOwnerOrSiteAccount {\n', '        require(_beneficiary != crowdsaleWallet);\n', '        require(_beneficiary != networkDevelopmentWallet);\n', '        require(_beneficiary != communityDevelopmentWallet);\n', '        require(_beneficiary != bountyWallet);\n', '        require(_beneficiary != siteAccount);\n', '        \n', '\n', "        //Don't allow to block already bought tokens with airdrop.\n", '        require(balances[_beneficiary] == 0 || isAirdrop(_beneficiary));\n', '\n', '        if (shortenedAirdrop[_beneficiary] != 0) {\n', '            shortenedAirdrop[_beneficiary] = shortenedAirdrop[_beneficiary].add(_amount);\n', '        }\n', '        else {\n', '            airdrop[_beneficiary] = airdrop[_beneficiary].add(_amount);\n', '        }\n', '        \n', '        _transferFrom(msg.sender, crowdsaleWallet, _beneficiary, _amount);\n', '        emit Airdrop(_beneficiary, _amount);\n', '    }\n', '\n', '    function isAirdrop(address _who) public view returns (bool result) {\n', '        return airdrop[_who] > 0 || shortenedAirdrop[_who] > 0;\n', '    }\n', '\n', '    function _recalculateAirdrop(address _who) internal {\n', '        if(state == State.Active && isAirdrop(_who)) {\n', '            uint256 initialAmount = airdrop[_who];\n', '            if (initialAmount > 0) {\n', '                uint256 rate = balances[_who].div(initialAmount);\n', '                if (rate >= 4) {\n', '                    delete airdrop[_who];\n', '                } else if (rate >= 2) {\n', '                    delete airdrop[_who];\n', '                    shortenedAirdrop[_who] = initialAmount;\n', '                }\n', '            } else {\n', '                initialAmount = shortenedAirdrop[_who];\n', '                if (initialAmount > 0) {\n', '                    rate = balances[_who].div(initialAmount);\n', '                    if (rate >= 4) {\n', '                        delete shortenedAirdrop[_who];\n', '                    }\n', '                }\n', '            }\n', '        }\n', '    }\n', '   \n', '}']