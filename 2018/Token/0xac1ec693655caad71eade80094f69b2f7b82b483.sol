['pragma solidity ^0.4.16;\n', '\n', '\n', 'contract EBLCreation {\n', '\n', '    //private variable\n', '    address creater;\n', '\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    // mapping (address => uint256) public futureBalanceOf;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '\n', '    function EBLCreation(uint256 initialSupply,string tokenName,string tokenSymbol) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                    // Give the creator all initial tokens\n', '        name = tokenName;                                       // Set the name for display purposes\n', '        symbol = tokenSymbol;                                   // Set the symbol for display purposes\n', '        creater = msg.sender;                             \n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '\n', '    /**\n', '     * adds token to initial supply\n', '     *\n', '     * @param _value the amount of money to be add\n', '     */\n', '\n', '    function addInInitialSupply(uint256 _value) public onlyCreater returns (bool success) {\n', '        totalSupply += _value;\n', '        balanceOf[msg.sender] += _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     *  removes token from initial supply\n', '     *\n', '     * @param _value the amount of money to be remove\n', '     */\n', '\n', '    function removeFromInitialSupply(uint256 _value) public onlyCreater returns (bool success) {\n', '        totalSupply -= _value;\n', '        balanceOf[msg.sender] -= _value;\n', '        return true;\n', '    }\n', '\n', '    function tokenBalance() public constant returns (uint256) {\n', '        return (balanceOf[msg.sender]);\n', '    }\n', '\n', '\n', '    modifier onlyCreater() {\n', '        require(msg.sender == creater);\n', '        _;\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', '\n', 'contract EBLCreation {\n', '\n', '    //private variable\n', '    address creater;\n', '\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    // mapping (address => uint256) public futureBalanceOf;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '\n', '    function EBLCreation(uint256 initialSupply,string tokenName,string tokenSymbol) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                    // Give the creator all initial tokens\n', '        name = tokenName;                                       // Set the name for display purposes\n', '        symbol = tokenSymbol;                                   // Set the symbol for display purposes\n', '        creater = msg.sender;                             \n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '\n', '    /**\n', '     * adds token to initial supply\n', '     *\n', '     * @param _value the amount of money to be add\n', '     */\n', '\n', '    function addInInitialSupply(uint256 _value) public onlyCreater returns (bool success) {\n', '        totalSupply += _value;\n', '        balanceOf[msg.sender] += _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     *  removes token from initial supply\n', '     *\n', '     * @param _value the amount of money to be remove\n', '     */\n', '\n', '    function removeFromInitialSupply(uint256 _value) public onlyCreater returns (bool success) {\n', '        totalSupply -= _value;\n', '        balanceOf[msg.sender] -= _value;\n', '        return true;\n', '    }\n', '\n', '    function tokenBalance() public constant returns (uint256) {\n', '        return (balanceOf[msg.sender]);\n', '    }\n', '\n', '\n', '    modifier onlyCreater() {\n', '        require(msg.sender == creater);\n', '        _;\n', '    }\n', '}']
