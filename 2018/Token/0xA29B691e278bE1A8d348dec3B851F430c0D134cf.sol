['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function () public payable {\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    \n', '  event Mint(address indexed to, uint256 amount);\n', '  \n', '  event MintFinished();\n', '\n', '  event SaleAgentUpdated(address currentSaleAgent);\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  address public saleAgent;\n', '\n', '  modifier notLocked() {\n', '    require(msg.sender == owner || msg.sender == saleAgent || mintingFinished);\n', '    _;\n', '  }\n', '\n', '  function setSaleAgent(address newSaleAgnet) public {\n', '    require(msg.sender == saleAgent || msg.sender == owner);\n', '    saleAgent = newSaleAgnet;\n', '    SaleAgentUpdated(saleAgent);\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) public returns (bool) {\n', '    require(msg.sender == saleAgent && !mintingFinished);\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public returns (bool) {\n', '    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public notLocked returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint256 value) public notLocked returns (bool) {\n', '    return super.transferFrom(from, to, value);\n', '  }\n', '  \n', '}\n', '\n', 'contract StagedCrowdsale is Pausable {\n', '\n', '  using SafeMath for uint;\n', '\n', '  //Structure of stage information \n', '  struct Stage {\n', '    uint hardcap;\n', '    uint price;\n', '    uint invested;\n', '    uint closed;\n', '  }\n', '\n', '  //start date of sale\n', '  uint public start;\n', '\n', '  //period in days of sale\n', '  uint public period;\n', '\n', '  //sale&#39;s hardcap\n', '  uint public totalHardcap;\n', ' \n', '  //total invested so far in the sale in wei\n', '  uint public totalInvested;\n', '\n', '  //sale&#39;s softcap\n', '  uint public softcap;\n', '\n', '  //sale&#39;s stages\n', '  Stage[] public stages;\n', '\n', '  event MilestoneAdded(uint hardcap, uint price);\n', '\n', '  modifier saleIsOn() {\n', '    require(stages.length > 0 && now >= start && now < lastSaleDate());\n', '    _;\n', '  }\n', '\n', '  modifier saleIsFinished() {\n', '    require(totalInvested >= softcap || now > lastSaleDate());\n', '    _;\n', '  }\n', '  \n', '  modifier isUnderHardcap() {\n', '    require(totalInvested <= totalHardcap);\n', '    _;\n', '  }\n', '\n', '  modifier saleIsUnsuccessful() {\n', '    require(totalInvested < softcap || now > lastSaleDate());\n', '    _;\n', '  }\n', '\n', '  /**\n', '    * counts current sale&#39;s stages\n', '    */\n', '  function stagesCount() public constant returns(uint) {\n', '    return stages.length;\n', '  }\n', '\n', '  /**\n', '    * sets softcap\n', '    * @param newSoftcap new softcap\n', '    */\n', '  function setSoftcap(uint newSoftcap) public onlyOwner {\n', '    require(newSoftcap > 0);\n', '    softcap = newSoftcap.mul(1 ether);\n', '  }\n', '\n', '  /**\n', '    * sets start date\n', '    * @param newStart new softcap\n', '    */\n', '  function setStart(uint newStart) public onlyOwner {\n', '    start = newStart;\n', '  }\n', '\n', '  /**\n', '    * sets period of sale\n', '    * @param newPeriod new period of sale\n', '    */\n', '  function setPeriod(uint newPeriod) public onlyOwner {\n', '    period = newPeriod;\n', '  }\n', '\n', '  /**\n', '    * adds stage to sale\n', '    * @param hardcap stage&#39;s hardcap in ethers\n', '    * @param price stage&#39;s price\n', '    */\n', '  function addStage(uint hardcap, uint price) public onlyOwner {\n', '    require(hardcap > 0 && price > 0);\n', '    Stage memory stage = Stage(hardcap.mul(1 ether), price, 0, 0);\n', '    stages.push(stage);\n', '    totalHardcap = totalHardcap.add(stage.hardcap);\n', '    MilestoneAdded(hardcap, price);\n', '  }\n', '\n', '  /**\n', '    * removes stage from sale\n', '    * @param number index of item to delete\n', '    */\n', '  function removeStage(uint8 number) public onlyOwner {\n', '    require(number >= 0 && number < stages.length);\n', '    Stage storage stage = stages[number];\n', '    totalHardcap = totalHardcap.sub(stage.hardcap);    \n', '    delete stages[number];\n', '    for (uint i = number; i < stages.length - 1; i++) {\n', '      stages[i] = stages[i+1];\n', '    }\n', '    stages.length--;\n', '  }\n', '\n', '  /**\n', '    * updates stage\n', '    * @param number index of item to update\n', '    * @param hardcap stage&#39;s hardcap in ethers\n', '    * @param price stage&#39;s price\n', '    */\n', '  function changeStage(uint8 number, uint hardcap, uint price) public onlyOwner {\n', '    require(number >= 0 && number < stages.length);\n', '    Stage storage stage = stages[number];\n', '    totalHardcap = totalHardcap.sub(stage.hardcap);    \n', '    stage.hardcap = hardcap.mul(1 ether);\n', '    stage.price = price;\n', '    totalHardcap = totalHardcap.add(stage.hardcap);    \n', '  }\n', '\n', '  /**\n', '    * inserts stage\n', '    * @param numberAfter index to insert\n', '    * @param hardcap stage&#39;s hardcap in ethers\n', '    * @param price stage&#39;s price\n', '    */\n', '  function insertStage(uint8 numberAfter, uint hardcap, uint price) public onlyOwner {\n', '    require(numberAfter < stages.length);\n', '    Stage memory stage = Stage(hardcap.mul(1 ether), price, 0, 0);\n', '    totalHardcap = totalHardcap.add(stage.hardcap);\n', '    stages.length++;\n', '    for (uint i = stages.length - 2; i > numberAfter; i--) {\n', '      stages[i + 1] = stages[i];\n', '    }\n', '    stages[numberAfter + 1] = stage;\n', '  }\n', '\n', '  /**\n', '    * deletes all stages\n', '    */\n', '  function clearStages() public onlyOwner {\n', '    for (uint i = 0; i < stages.length; i++) {\n', '      delete stages[i];\n', '    }\n', '    stages.length -= stages.length;\n', '    totalHardcap = 0;\n', '  }\n', '\n', '  /**\n', '    * calculates last sale date\n', '    */\n', '  function lastSaleDate() public constant returns(uint) {\n', '    return start + period * 1 days;\n', '  }  \n', '\n', '  /**\n', '    * returns index of current stage\n', '    */\n', '  function currentStage() public saleIsOn isUnderHardcap constant returns(uint) {\n', '    for(uint i = 0; i < stages.length; i++) {\n', '      if(stages[i].closed == 0) {\n', '        return i;\n', '      }\n', '    }\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', 'contract CommonSale is StagedCrowdsale {\n', '\n', '  //Our MYTC token\n', '  MYTCToken public token;  \n', '\n', '  //slave wallet percentage\n', '  uint public slaveWalletPercent = 50;\n', '\n', '  //total percent rate\n', '  uint public percentRate = 100;\n', '\n', '  //min investment value in wei\n', '  uint public minInvestment;\n', '  \n', '  //bool to check if wallet is initialized\n', '  bool public slaveWalletInitialized;\n', '\n', '  //bool to check if wallet percentage is initialized\n', '  bool public slaveWalletPercentInitialized;\n', '\n', '  //master wallet address\n', '  address public masterWallet;\n', '\n', '  //slave wallet address\n', '  address public slaveWallet;\n', '  \n', '  //Agent for direct minting\n', '  address public directMintAgent;\n', '\n', '  // How much ETH each address has invested in crowdsale\n', '  mapping (address => uint256) public investedAmountOf;\n', '\n', '  // How much tokens crowdsale has credited for each investor address\n', '  mapping (address => uint256) public tokenAmountOf;\n', '\n', '  // Crowdsale contributors\n', '  mapping (uint => address) public contributors;\n', '\n', '  // Crowdsale unique contributors number\n', '  uint public uniqueContributors;  \n', '\n', '  /**\n', '      * event for token purchases logging\n', '      * @param purchaser who paid for the tokens\n', '      * @param value weis paid for purchase\n', '      * @param purchaseDate time of log\n', '      */\n', '  event TokenPurchased(address indexed purchaser, uint256 value, uint256 purchaseDate);\n', '\n', '  /**\n', '      * event for token mint logging\n', '      * @param to tokens destination\n', '      * @param tokens minted\n', '      * @param mintedDate time of log\n', '      */\n', '  event TokenMinted(address to, uint tokens, uint256 mintedDate);\n', '\n', '  /**\n', '      * event for token refund\n', '      * @param investor refunded account address\n', '      * @param amount weis refunded\n', '      * @param returnDate time of log\n', '      */\n', '  event InvestmentReturned(address indexed investor, uint256 amount, uint256 returnDate);\n', '  \n', '  modifier onlyDirectMintAgentOrOwner() {\n', '    require(directMintAgent == msg.sender || owner == msg.sender);\n', '    _;\n', '  }  \n', '\n', '  /**\n', '    * sets MYTC token\n', '    * @param newToken new token\n', '    */\n', '  function setToken(address newToken) public onlyOwner {\n', '    token = MYTCToken(newToken);\n', '  }\n', '\n', '  /**\n', '    * sets minimum investement threshold\n', '    * @param newMinInvestment new minimum investement threshold\n', '    */\n', '  function setMinInvestment(uint newMinInvestment) public onlyOwner {\n', '    minInvestment = newMinInvestment;\n', '  }  \n', '\n', '  /**\n', '    * sets master wallet address\n', '    * @param newMasterWallet new master wallet address\n', '    */\n', '  function setMasterWallet(address newMasterWallet) public onlyOwner {\n', '    masterWallet = newMasterWallet;\n', '  }\n', '\n', '  /**\n', '    * sets slave wallet address\n', '    * @param newSlaveWallet new slave wallet address\n', '    */\n', '  function setSlaveWallet(address newSlaveWallet) public onlyOwner {\n', '    require(!slaveWalletInitialized);\n', '    slaveWallet = newSlaveWallet;\n', '    slaveWalletInitialized = true;\n', '  }\n', '\n', '  /**\n', '    * sets slave wallet percentage\n', '    * @param newSlaveWalletPercent new wallet percentage\n', '    */\n', '  function setSlaveWalletPercent(uint newSlaveWalletPercent) public onlyOwner {\n', '    require(!slaveWalletPercentInitialized);\n', '    slaveWalletPercent = newSlaveWalletPercent;\n', '    slaveWalletPercentInitialized = true;\n', '  }\n', '\n', '  /**\n', '    * sets direct mint agent\n', '    * @param newDirectMintAgent new agent\n', '    */\n', '  function setDirectMintAgent(address newDirectMintAgent) public onlyOwner {\n', '    directMintAgent = newDirectMintAgent;\n', '  }  \n', '\n', '  /**\n', '    * mints directly from network\n', '    * @param to invesyor&#39;s adress to transfer the minted tokens to\n', '    * @param investedWei number of wei invested\n', '    */\n', '  function directMint(address to, uint investedWei) public onlyDirectMintAgentOrOwner saleIsOn {\n', '    calculateAndMintTokens(to, investedWei);\n', '    TokenPurchased(to, investedWei, now);\n', '  }\n', '\n', '  /**\n', '    * splits investment into master and slave wallets for security reasons\n', '    */\n', '  function createTokens() public whenNotPaused payable {\n', '    require(msg.value >= minInvestment);\n', '    uint masterValue = msg.value.mul(percentRate.sub(slaveWalletPercent)).div(percentRate);\n', '    uint slaveValue = msg.value.sub(masterValue);\n', '    masterWallet.transfer(masterValue);\n', '    slaveWallet.transfer(slaveValue);\n', '    calculateAndMintTokens(msg.sender, msg.value);\n', '    TokenPurchased(msg.sender, msg.value, now);\n', '  }\n', '\n', '  /**\n', '    * Calculates and records contributions\n', '    * @param to invesyor&#39;s adress to transfer the minted tokens to\n', '    * @param weiInvested number of wei invested\n', '    */\n', '  function calculateAndMintTokens(address to, uint weiInvested) internal {\n', '    //calculate number of tokens\n', '    uint stageIndex = currentStage();\n', '    Stage storage stage = stages[stageIndex];\n', '    uint tokens = weiInvested.mul(stage.price);\n', '    //if we have a new contributor\n', '    if(investedAmountOf[msg.sender] == 0) {\n', '        contributors[uniqueContributors] = msg.sender;\n', '        uniqueContributors += 1;\n', '    }\n', '    //record contribution and tokens assigned\n', '    investedAmountOf[msg.sender] = investedAmountOf[msg.sender].add(weiInvested);\n', '    tokenAmountOf[msg.sender] = tokenAmountOf[msg.sender].add(tokens);\n', '    //mint and update invested values\n', '    mintTokens(to, tokens);\n', '    totalInvested = totalInvested.add(weiInvested);\n', '    stage.invested = stage.invested.add(weiInvested);\n', '    //check if cap of staged is reached\n', '    if(stage.invested >= stage.hardcap) {\n', '      stage.closed = now;\n', '    }\n', '  }\n', '\n', '  /**\n', '    * Mint tokens\n', '    * @param to adress destination to transfer the tokens to\n', '    * @param tokens number of tokens to mint and transfer\n', '    */\n', '  function mintTokens(address to, uint tokens) internal {\n', '    token.mint(this, tokens);\n', '    token.transfer(to, tokens);\n', '    TokenMinted(to, tokens, now);\n', '  }\n', '\n', '  /**\n', '    * Payable function\n', '    */\n', '  function() external payable {\n', '    createTokens();\n', '  }\n', '  \n', '  /**\n', '    * Function to retrieve and transfer back external tokens\n', '    * @param anotherToken external token received\n', '    * @param to address destination to transfer the token to\n', '    */\n', '  function retrieveExternalTokens(address anotherToken, address to) public onlyOwner {\n', '    ERC20 alienToken = ERC20(anotherToken);\n', '    alienToken.transfer(to, alienToken.balanceOf(this));\n', '  }\n', '\n', '  /**\n', '    * Function to refund funds if softcap is not reached and sale period is over \n', '    */\n', '  function refund() public saleIsUnsuccessful {\n', '    uint value = investedAmountOf[msg.sender];\n', '    investedAmountOf[msg.sender] = 0;\n', '    msg.sender.transfer(value);\n', '    InvestmentReturned(msg.sender, value, now);\n', '  }\n', '\n', '}\n', '\n', 'contract WhiteListToken is CommonSale {\n', '\n', '  mapping(address => bool)  public whiteList;\n', '\n', '  modifier onlyIfWhitelisted() {\n', '    require(whiteList[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  function addToWhiteList(address _address) public onlyDirectMintAgentOrOwner {\n', '    whiteList[_address] = true;\n', '  }\n', '\n', '  function addAddressesToWhitelist(address[] _addresses) public onlyDirectMintAgentOrOwner {\n', '    for (uint256 i = 0; i < _addresses.length; i++) {\n', '      addToWhiteList(_addresses[i]);\n', '    }\n', '  }\n', '\n', '  function deleteFromWhiteList(address _address) public onlyDirectMintAgentOrOwner {\n', '    whiteList[_address] = false;\n', '  }\n', '\n', '  function deleteAddressesFromWhitelist(address[] _addresses) public onlyDirectMintAgentOrOwner {\n', '    for (uint256 i = 0; i < _addresses.length; i++) {\n', '      deleteFromWhiteList(_addresses[i]);\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract MYTCToken is MintableToken {\t\n', '    \n', '  //Token name\n', '  string public constant name = "MYTC";\n', '   \n', '  //Token symbol\n', '  string public constant symbol = "MYTC";\n', '    \n', '  //Token&#39;s number of decimals\n', '  uint32 public constant decimals = 18;\n', '\n', '  //Dictionary with locked accounts\n', '  mapping (address => uint) public locked;\n', '\n', '  /**\n', '    * transfer for unlocked accounts\n', '    */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(locked[msg.sender] < now);\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '    * transfer from for unlocked accounts\n', '    */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(locked[_from] < now);\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '  \n', '  /**\n', '    * locks an account for given a number of days\n', '    * @param addr account address to be locked\n', '    * @param periodInDays days to be locked\n', '    */\n', '  function lock(address addr, uint periodInDays) public {\n', '    require(locked[addr] < now && (msg.sender == saleAgent || msg.sender == addr));\n', '    locked[addr] = now + periodInDays * 1 days;\n', '  }\n', '\n', '}\n', '\n', 'contract PreTge is CommonSale {\n', '\n', '  //TGE \n', '  Tge public tge;\n', '\n', '  /**\n', '      * event for PreTGE finalization logging\n', '      * @param finalizer account who trigger finalization\n', '      * @param saleEnded time of log\n', '      */\n', '  event PreTgeFinalized(address indexed finalizer, uint256 saleEnded);\n', '\n', '  /**\n', '    * sets TGE to pass agent when sale is finished\n', '    * @param newMainsale adress of TGE contract\n', '    */\n', '  function setMainsale(address newMainsale) public onlyOwner {\n', '    tge = Tge(newMainsale);\n', '  }\n', '\n', '  /**\n', '    * sets TGE as new sale agent when sale is finished\n', '    */\n', '  function setTgeAsSaleAgent() public whenNotPaused saleIsFinished onlyOwner {\n', '    token.setSaleAgent(tge);\n', '    PreTgeFinalized(msg.sender, now);\n', '  }\n', '}\n', '\n', '\n', 'contract Tge is WhiteListToken {\n', '\n', '  //Team wallet address\n', '  address public teamTokensWallet;\n', '  \n', '  //Bounty and advisors wallet address\n', '  address public bountyTokensWallet;\n', '\n', '  //Reserved tokens wallet address\n', '  address public reservedTokensWallet;\n', '  \n', '  //Team percentage\n', '  uint public teamTokensPercent;\n', '  \n', '  //Bounty and advisors percentage\n', '  uint public bountyTokensPercent;\n', '\n', '  //Reserved tokens percentage\n', '  uint public reservedTokensPercent;\n', '  \n', '  //Lock period in days for team&#39;s wallet\n', '  uint public lockPeriod;  \n', '\n', '  //maximum amount of tokens ever minted\n', '  uint public totalTokenSupply;\n', '\n', '  /**\n', '      * event for TGE finalization logging\n', '      * @param finalizer account who trigger finalization\n', '      * @param saleEnded time of log\n', '      */\n', '  event TgeFinalized(address indexed finalizer, uint256 saleEnded);\n', '\n', '  /**\n', '    * sets lock period in days for team&#39;s wallet\n', '    * @param newLockPeriod new lock period in days\n', '    */\n', '  function setLockPeriod(uint newLockPeriod) public onlyOwner {\n', '    lockPeriod = newLockPeriod;\n', '  }\n', '\n', '  /**\n', '    * sets percentage for team&#39;s wallet\n', '    * @param newTeamTokensPercent new percentage for team&#39;s wallet\n', '    */\n', '  function setTeamTokensPercent(uint newTeamTokensPercent) public onlyOwner {\n', '    teamTokensPercent = newTeamTokensPercent;\n', '  }\n', '\n', '  /**\n', '    * sets percentage for bounty&#39;s wallet\n', '    * @param newBountyTokensPercent new percentage for bounty&#39;s wallet\n', '    */\n', '  function setBountyTokensPercent(uint newBountyTokensPercent) public onlyOwner {\n', '    bountyTokensPercent = newBountyTokensPercent;\n', '  }\n', '\n', '  /**\n', '    * sets percentage for reserved wallet\n', '    * @param newReservedTokensPercent new percentage for reserved wallet\n', '    */\n', '  function setReservedTokensPercent(uint newReservedTokensPercent) public onlyOwner {\n', '    reservedTokensPercent = newReservedTokensPercent;\n', '  }\n', '  \n', '  /**\n', '    * sets max number of tokens to ever mint\n', '    * @param newTotalTokenSupply max number of tokens (incl. 18 dec points)\n', '    */\n', '  function setTotalTokenSupply(uint newTotalTokenSupply) public onlyOwner {\n', '    totalTokenSupply = newTotalTokenSupply;\n', '  }\n', '\n', '  /**\n', '    * sets address for team&#39;s wallet\n', '    * @param newTeamTokensWallet new address for team&#39;s wallet\n', '    */\n', '  function setTeamTokensWallet(address newTeamTokensWallet) public onlyOwner {\n', '    teamTokensWallet = newTeamTokensWallet;\n', '  }\n', '\n', '  /**\n', '    * sets address for bountys&#39;s wallet\n', '    * @param newBountyTokensWallet new address for bountys&#39;s wallet\n', '    */\n', '  function setBountyTokensWallet(address newBountyTokensWallet) public onlyOwner {\n', '    bountyTokensWallet = newBountyTokensWallet;\n', '  }\n', '\n', '  /**\n', '    * sets address for reserved wallet\n', '    * @param newReservedTokensWallet new address for reserved wallet\n', '    */\n', '  function setReservedTokensWallet(address newReservedTokensWallet) public onlyOwner {\n', '    reservedTokensWallet = newReservedTokensWallet;\n', '  }\n', '\n', '  /**\n', '    * Mints remaining tokens and finishes minting when sale is successful\n', '    * No further tokens will be minted ever\n', '    */\n', '  function endSale() public whenNotPaused saleIsFinished onlyOwner {    \n', '    // uint remainingPercentage = bountyTokensPercent.add(teamTokensPercent).add(reservedTokensPercent);\n', '    // uint tokensGenerated = token.totalSupply();\n', '\n', '    uint foundersTokens = totalTokenSupply.mul(teamTokensPercent).div(percentRate);\n', '    uint reservedTokens = totalTokenSupply.mul(reservedTokensPercent).div(percentRate);\n', '    uint bountyTokens = totalTokenSupply.mul(bountyTokensPercent).div(percentRate); \n', '    mintTokens(reservedTokensWallet, reservedTokens);\n', '    mintTokens(teamTokensWallet, foundersTokens);\n', '    mintTokens(bountyTokensWallet, bountyTokens); \n', '    uint currentSupply = token.totalSupply();\n', '    if (currentSupply < totalTokenSupply) {\n', '      // send remaining tokens to reserved wallet\n', '      mintTokens(reservedTokensWallet, totalTokenSupply.sub(currentSupply));\n', '    }  \n', '    token.lock(teamTokensWallet, lockPeriod);      \n', '    token.finishMinting();\n', '    TgeFinalized(msg.sender, now);\n', '  }\n', '\n', '    /**\n', '    * Payable function\n', '    */\n', '  function() external onlyIfWhitelisted payable {\n', '    require(now >= start && now < lastSaleDate());\n', '    createTokens();\n', '  }\n', '}']