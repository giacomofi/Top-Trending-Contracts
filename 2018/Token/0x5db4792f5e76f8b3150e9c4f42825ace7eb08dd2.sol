['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/Dividends.sol\n', '\n', 'contract DividendContract {\n', '  using SafeMath for uint256;\n', '  event Dividends(uint256 round, uint256 value);\n', '  event ClaimDividends(address investor, uint256 value);\n', '\n', '  uint256 totalDividendsAmount = 0;\n', '  uint256 totalDividendsRounds = 0;\n', '  uint256 totalUnPayedDividendsAmount = 0;\n', '  mapping(address => uint256) payedDividends;\n', '\n', '\n', '  function getTotalDividendsAmount() public constant returns (uint256) {\n', '    return totalDividendsAmount;\n', '  }\n', '\n', '  function getTotalDividendsRounds() public constant returns (uint256) {\n', '    return totalDividendsRounds;\n', '  }\n', '\n', '  function getTotalUnPayedDividendsAmount() public constant returns (uint256) {\n', '    return totalUnPayedDividendsAmount;\n', '  }\n', '\n', '  function dividendsAmount(address investor) public constant returns (uint256);\n', '  function claimDividends() payable public;\n', '\n', '  function payDividends() payable public {\n', '    require(msg.value > 0);\n', '    totalDividendsAmount = totalDividendsAmount.add(msg.value);\n', '    totalUnPayedDividendsAmount = totalUnPayedDividendsAmount.add(msg.value);\n', '    totalDividendsRounds += 1;\n', '    Dividends(totalDividendsRounds, msg.value);\n', '  }\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/ESlotsICOToken.sol\n', '\n', 'contract ESlotsICOToken is ERC20, DividendContract {\n', '\n', '    string public constant name = "Ethereum Slot Machine Token";\n', '    string public constant symbol = "EST";\n', '    uint8 public constant decimals = 18;\n', '\n', '    function maxTokensToSale() public view returns (uint256);\n', '    function availableTokens() public view returns (uint256);\n', '    function completeICO() public;\n', '    function connectCrowdsaleContract(address crowdsaleContract) public;\n', '}\n', '\n', '// File: contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', '}\n', '\n', '// File: contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/ESlotsToken.sol\n', '\n', '/**\n', ' * @title eSlotsToken\n', ' * @dev See more info https://eslots.io\n', ' */\n', 'contract ESlotsToken is Ownable, StandardToken, ESlotsICOToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  enum State { ActiveICO, CompletedICO }\n', '  State public state;\n', '\n', '  uint256 public constant INITIAL_SUPPLY = 50000000 * (10 ** uint256(decimals));\n', '\n', '  address founders = 0x7b97B31E12f7d029769c53cB91c83d29611A4F7A;\n', '  uint256 public constant foundersStake = 10; //10% to founders\n', '  uint256 public constant dividendRoundsBeforeFoundersStakeUnlock = 4;\n', '  uint256 maxFoundersTokens;\n', '  uint256 tokensToSale;\n', '\n', '  uint256 transferGASUsage;\n', '\n', '  /**\n', '   * @dev Constructor that gives msg.sender all of existing tokens.\n', '   */\n', '  function ESlotsToken() public {\n', '    totalSupply_ = INITIAL_SUPPLY;\n', '    maxFoundersTokens = INITIAL_SUPPLY.mul(foundersStake).div(100);\n', '    tokensToSale = INITIAL_SUPPLY - maxFoundersTokens;\n', '    balances[msg.sender] = tokensToSale;\n', '    Transfer(0x0, msg.sender, balances[msg.sender]);\n', '    state = State.ActiveICO;\n', '    transferGASUsage = 21000;\n', '  }\n', '\n', '  function maxTokensToSale() public view returns (uint256) {\n', '    return tokensToSale;\n', '  }\n', '\n', '  function availableTokens() public view returns (uint256) {\n', '    return balances[owner];\n', '  }\n', '\n', '  function setGasUsage(uint256 newGasUsage) public onlyOwner {\n', '    transferGASUsage = newGasUsage;\n', '  }\n', '\n', '  //run it after ESlotsCrowdsale contract is deployed to approve token spending\n', '  function connectCrowdsaleContract(address crowdsaleContract) public onlyOwner {\n', '    approve(crowdsaleContract, balances[owner]);\n', '  }\n', '\n', '  //burn unsold tokens\n', '  function completeICO() public onlyOwner {\n', '    require(state == State.ActiveICO);\n', '    state = State.CompletedICO;\n', '    uint256 soldTokens = tokensToSale.sub(balances[owner]);\n', '    uint256 foundersTokens = soldTokens.mul(foundersStake).div(100);\n', '    if(foundersTokens > maxFoundersTokens) {\n', '      //normally we never reach this point\n', '      foundersTokens = maxFoundersTokens;\n', '    }\n', '    BasicToken.transfer(founders, foundersTokens);\n', '    totalSupply_ = soldTokens.add(foundersTokens);\n', '    balances[owner] = 0;\n', '    Burn(msg.sender, INITIAL_SUPPLY.sub(totalSupply_));\n', '  }\n', '\n', '\n', '  //handle dividends\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    if(msg.sender == founders) {\n', '      //lock operation with tokens for founders\n', '      require(totalDividendsAmount > 0 && totalDividendsRounds > dividendRoundsBeforeFoundersStakeUnlock);\n', '    }\n', '    //transfer is allowed only then all dividends are claimed\n', '    require(payedDividends[msg.sender] == totalDividendsAmount);\n', '    require(balances[_to] == 0 || payedDividends[_to] == totalDividendsAmount);\n', '    bool res =  BasicToken.transfer(_to, _value);\n', '    if(res && payedDividends[_to] != totalDividendsAmount) {\n', '      payedDividends[_to] = totalDividendsAmount;\n', '    }\n', '    return res;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    if(msg.sender == founders) {\n', '      //lock operation with tokens for founders\n', '      require(totalDividendsAmount > 0 && totalDividendsRounds > dividendRoundsBeforeFoundersStakeUnlock);\n', '    }\n', '    //transfer is allowed only then all dividends are claimed\n', '    require(payedDividends[_from] == totalDividendsAmount);\n', '    require(balances[_to] == 0 || payedDividends[_to] == totalDividendsAmount);\n', '    bool res = StandardToken.transferFrom(_from, _to, _value);\n', '    if(res && payedDividends[_to] != totalDividendsAmount) {\n', '      payedDividends[_to] = totalDividendsAmount;\n', '    }\n', '    return res;\n', '  }\n', '\n', '  //Dividends\n', '\n', '  modifier onlyThenCompletedICO {\n', '    require(state == State.CompletedICO);\n', '    _;\n', '  }\n', '\n', '  function dividendsAmount(address investor) public onlyThenCompletedICO constant returns (uint256)  {\n', '    if(totalSupply_ == 0) {return 0;}\n', '    if(balances[investor] == 0) {return 0;}\n', '    if(payedDividends[investor] >= totalDividendsAmount) {return 0;}\n', '    return (totalDividendsAmount - payedDividends[investor]).mul(balances[investor]).div(totalSupply_);\n', '  }\n', '\n', '  function claimDividends() payable public onlyThenCompletedICO {\n', '    //gasUsage = 0 because a caller pays for that\n', '    sendDividends(msg.sender, 0);\n', '\n', '  }\n', '\n', '  //force dividend payments if they hasn&#39;t been claimed by token holder before\n', '  function pushDividends(address investor) payable public onlyThenCompletedICO {\n', '    //because we pay for gas\n', '    sendDividends(investor, transferGASUsage.mul(tx.gasprice));\n', '  }\n', '\n', '  function sendDividends(address investor, uint256 gasUsage) internal {\n', '    uint256 value = dividendsAmount(investor);\n', '    require(value > gasUsage);\n', '    payedDividends[investor] = totalDividendsAmount;\n', '    totalUnPayedDividendsAmount = totalUnPayedDividendsAmount.sub(value);\n', '    investor.transfer(value.sub(gasUsage));\n', '    ClaimDividends(investor, value);\n', '  }\n', '\n', '  function payDividends() payable public onlyThenCompletedICO {\n', '    DividendContract.payDividends();\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/Dividends.sol\n', '\n', 'contract DividendContract {\n', '  using SafeMath for uint256;\n', '  event Dividends(uint256 round, uint256 value);\n', '  event ClaimDividends(address investor, uint256 value);\n', '\n', '  uint256 totalDividendsAmount = 0;\n', '  uint256 totalDividendsRounds = 0;\n', '  uint256 totalUnPayedDividendsAmount = 0;\n', '  mapping(address => uint256) payedDividends;\n', '\n', '\n', '  function getTotalDividendsAmount() public constant returns (uint256) {\n', '    return totalDividendsAmount;\n', '  }\n', '\n', '  function getTotalDividendsRounds() public constant returns (uint256) {\n', '    return totalDividendsRounds;\n', '  }\n', '\n', '  function getTotalUnPayedDividendsAmount() public constant returns (uint256) {\n', '    return totalUnPayedDividendsAmount;\n', '  }\n', '\n', '  function dividendsAmount(address investor) public constant returns (uint256);\n', '  function claimDividends() payable public;\n', '\n', '  function payDividends() payable public {\n', '    require(msg.value > 0);\n', '    totalDividendsAmount = totalDividendsAmount.add(msg.value);\n', '    totalUnPayedDividendsAmount = totalUnPayedDividendsAmount.add(msg.value);\n', '    totalDividendsRounds += 1;\n', '    Dividends(totalDividendsRounds, msg.value);\n', '  }\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/ESlotsICOToken.sol\n', '\n', 'contract ESlotsICOToken is ERC20, DividendContract {\n', '\n', '    string public constant name = "Ethereum Slot Machine Token";\n', '    string public constant symbol = "EST";\n', '    uint8 public constant decimals = 18;\n', '\n', '    function maxTokensToSale() public view returns (uint256);\n', '    function availableTokens() public view returns (uint256);\n', '    function completeICO() public;\n', '    function connectCrowdsaleContract(address crowdsaleContract) public;\n', '}\n', '\n', '// File: contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', '}\n', '\n', '// File: contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/ESlotsToken.sol\n', '\n', '/**\n', ' * @title eSlotsToken\n', ' * @dev See more info https://eslots.io\n', ' */\n', 'contract ESlotsToken is Ownable, StandardToken, ESlotsICOToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  enum State { ActiveICO, CompletedICO }\n', '  State public state;\n', '\n', '  uint256 public constant INITIAL_SUPPLY = 50000000 * (10 ** uint256(decimals));\n', '\n', '  address founders = 0x7b97B31E12f7d029769c53cB91c83d29611A4F7A;\n', '  uint256 public constant foundersStake = 10; //10% to founders\n', '  uint256 public constant dividendRoundsBeforeFoundersStakeUnlock = 4;\n', '  uint256 maxFoundersTokens;\n', '  uint256 tokensToSale;\n', '\n', '  uint256 transferGASUsage;\n', '\n', '  /**\n', '   * @dev Constructor that gives msg.sender all of existing tokens.\n', '   */\n', '  function ESlotsToken() public {\n', '    totalSupply_ = INITIAL_SUPPLY;\n', '    maxFoundersTokens = INITIAL_SUPPLY.mul(foundersStake).div(100);\n', '    tokensToSale = INITIAL_SUPPLY - maxFoundersTokens;\n', '    balances[msg.sender] = tokensToSale;\n', '    Transfer(0x0, msg.sender, balances[msg.sender]);\n', '    state = State.ActiveICO;\n', '    transferGASUsage = 21000;\n', '  }\n', '\n', '  function maxTokensToSale() public view returns (uint256) {\n', '    return tokensToSale;\n', '  }\n', '\n', '  function availableTokens() public view returns (uint256) {\n', '    return balances[owner];\n', '  }\n', '\n', '  function setGasUsage(uint256 newGasUsage) public onlyOwner {\n', '    transferGASUsage = newGasUsage;\n', '  }\n', '\n', '  //run it after ESlotsCrowdsale contract is deployed to approve token spending\n', '  function connectCrowdsaleContract(address crowdsaleContract) public onlyOwner {\n', '    approve(crowdsaleContract, balances[owner]);\n', '  }\n', '\n', '  //burn unsold tokens\n', '  function completeICO() public onlyOwner {\n', '    require(state == State.ActiveICO);\n', '    state = State.CompletedICO;\n', '    uint256 soldTokens = tokensToSale.sub(balances[owner]);\n', '    uint256 foundersTokens = soldTokens.mul(foundersStake).div(100);\n', '    if(foundersTokens > maxFoundersTokens) {\n', '      //normally we never reach this point\n', '      foundersTokens = maxFoundersTokens;\n', '    }\n', '    BasicToken.transfer(founders, foundersTokens);\n', '    totalSupply_ = soldTokens.add(foundersTokens);\n', '    balances[owner] = 0;\n', '    Burn(msg.sender, INITIAL_SUPPLY.sub(totalSupply_));\n', '  }\n', '\n', '\n', '  //handle dividends\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    if(msg.sender == founders) {\n', '      //lock operation with tokens for founders\n', '      require(totalDividendsAmount > 0 && totalDividendsRounds > dividendRoundsBeforeFoundersStakeUnlock);\n', '    }\n', '    //transfer is allowed only then all dividends are claimed\n', '    require(payedDividends[msg.sender] == totalDividendsAmount);\n', '    require(balances[_to] == 0 || payedDividends[_to] == totalDividendsAmount);\n', '    bool res =  BasicToken.transfer(_to, _value);\n', '    if(res && payedDividends[_to] != totalDividendsAmount) {\n', '      payedDividends[_to] = totalDividendsAmount;\n', '    }\n', '    return res;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    if(msg.sender == founders) {\n', '      //lock operation with tokens for founders\n', '      require(totalDividendsAmount > 0 && totalDividendsRounds > dividendRoundsBeforeFoundersStakeUnlock);\n', '    }\n', '    //transfer is allowed only then all dividends are claimed\n', '    require(payedDividends[_from] == totalDividendsAmount);\n', '    require(balances[_to] == 0 || payedDividends[_to] == totalDividendsAmount);\n', '    bool res = StandardToken.transferFrom(_from, _to, _value);\n', '    if(res && payedDividends[_to] != totalDividendsAmount) {\n', '      payedDividends[_to] = totalDividendsAmount;\n', '    }\n', '    return res;\n', '  }\n', '\n', '  //Dividends\n', '\n', '  modifier onlyThenCompletedICO {\n', '    require(state == State.CompletedICO);\n', '    _;\n', '  }\n', '\n', '  function dividendsAmount(address investor) public onlyThenCompletedICO constant returns (uint256)  {\n', '    if(totalSupply_ == 0) {return 0;}\n', '    if(balances[investor] == 0) {return 0;}\n', '    if(payedDividends[investor] >= totalDividendsAmount) {return 0;}\n', '    return (totalDividendsAmount - payedDividends[investor]).mul(balances[investor]).div(totalSupply_);\n', '  }\n', '\n', '  function claimDividends() payable public onlyThenCompletedICO {\n', '    //gasUsage = 0 because a caller pays for that\n', '    sendDividends(msg.sender, 0);\n', '\n', '  }\n', '\n', "  //force dividend payments if they hasn't been claimed by token holder before\n", '  function pushDividends(address investor) payable public onlyThenCompletedICO {\n', '    //because we pay for gas\n', '    sendDividends(investor, transferGASUsage.mul(tx.gasprice));\n', '  }\n', '\n', '  function sendDividends(address investor, uint256 gasUsage) internal {\n', '    uint256 value = dividendsAmount(investor);\n', '    require(value > gasUsage);\n', '    payedDividends[investor] = totalDividendsAmount;\n', '    totalUnPayedDividendsAmount = totalUnPayedDividendsAmount.sub(value);\n', '    investor.transfer(value.sub(gasUsage));\n', '    ClaimDividends(investor, value);\n', '  }\n', '\n', '  function payDividends() payable public onlyThenCompletedICO {\n', '    DividendContract.payDividends();\n', '  }\n', '}']
