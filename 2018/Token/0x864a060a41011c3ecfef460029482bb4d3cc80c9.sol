['pragma solidity 0.4.24;\n', '// produced by the Solididy File Flattener (c) David Appleton 2018\n', '// contact : <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e286839487a283898d8f8083cc818d8f">[email&#160;protected]</a>\n', '// released under Apache 2.0 licence\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract DeconetToken is StandardToken, Ownable, Pausable {\n', '    // token naming etc\n', '    string public constant symbol = "DCO";\n', '    string public constant name = "Deconet Token";\n', '    uint8 public constant decimals = 18;\n', '\n', '    // contract version\n', '    uint public constant version = 4;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        // 1 billion tokens (1,000,000,000)\n', '        totalSupply_ = 1000000000 * 10**uint(decimals);\n', '\n', '        // transfer initial supply to msg.sender who is also contract owner\n', '        balances[msg.sender] = totalSupply_;\n', '        Transfer(address(0), msg.sender, totalSupply_);\n', '\n', '        // pause contract until we&#39;re ready to allow transfers\n', '        paused = true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens (just in case)\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Modifier to make a function callable only when called by the contract owner\n', '    // or if the contract is not paused.\n', '    // ------------------------------------------------------------------------\n', '    modifier whenOwnerOrNotPaused() {\n', '        require(msg.sender == owner || !paused);\n', '        _;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // overloaded openzepplin method to add whenOwnerOrNotPaused modifier\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint256 _value) public whenOwnerOrNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // overloaded openzepplin method to add whenOwnerOrNotPaused modifier\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenOwnerOrNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // overloaded openzepplin method to add whenOwnerOrNotPaused modifier\n', '    // ------------------------------------------------------------------------\n', '    function approve(address _spender, uint256 _value) public whenOwnerOrNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // overloaded openzepplin method to add whenOwnerOrNotPaused modifier\n', '    // ------------------------------------------------------------------------\n', '    function increaseApproval(address _spender, uint _addedValue) public whenOwnerOrNotPaused returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // overloaded openzepplin method to add whenOwnerOrNotPaused modifier\n', '    // ------------------------------------------------------------------------\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenOwnerOrNotPaused returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', 'contract Relay is Ownable {\n', '    address public licenseSalesContractAddress;\n', '    address public registryContractAddress;\n', '    address public apiRegistryContractAddress;\n', '    address public apiCallsContractAddress;\n', '    uint public version;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor, establishes ownership because contract is owned\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        version = 4;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens (just in case)\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Sets the license sales contract address\n', '    // ------------------------------------------------------------------------\n', '    function setLicenseSalesContractAddress(address newAddress) public onlyOwner {\n', '        require(newAddress != address(0));\n', '        licenseSalesContractAddress = newAddress;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Sets the registry contract address\n', '    // ------------------------------------------------------------------------\n', '    function setRegistryContractAddress(address newAddress) public onlyOwner {\n', '        require(newAddress != address(0));\n', '        registryContractAddress = newAddress;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Sets the api registry contract address\n', '    // ------------------------------------------------------------------------\n', '    function setApiRegistryContractAddress(address newAddress) public onlyOwner {\n', '        require(newAddress != address(0));\n', '        apiRegistryContractAddress = newAddress;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Sets the api calls contract address\n', '    // ------------------------------------------------------------------------\n', '    function setApiCallsContractAddress(address newAddress) public onlyOwner {\n', '        require(newAddress != address(0));\n', '        apiCallsContractAddress = newAddress;\n', '    }\n', '}\n', 'contract Registry is Ownable {\n', '\n', '    struct ModuleForSale {\n', '        uint price;\n', '        bytes32 sellerUsername;\n', '        bytes32 moduleName;\n', '        address sellerAddress;\n', '        bytes4 licenseId;\n', '    }\n', '\n', '    mapping(string => uint) internal moduleIds;\n', '    mapping(uint => ModuleForSale) public modules;\n', '\n', '    uint public numModules;\n', '    uint public version;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor, establishes ownership because contract is owned\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        numModules = 0;\n', '        version = 1;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens (just in case)\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Lets a user list a software module for sale in this registry\n', '    // ------------------------------------------------------------------------\n', '    function listModule(uint price, bytes32 sellerUsername, bytes32 moduleName, string usernameAndProjectName, bytes4 licenseId) public {\n', '        // make sure input params are valid\n', '        require(price != 0 && sellerUsername != "" && moduleName != "" && bytes(usernameAndProjectName).length != 0 && licenseId != 0);\n', '\n', '        // make sure the name isn&#39;t already taken\n', '        require(moduleIds[usernameAndProjectName] == 0);\n', '\n', '        numModules += 1;\n', '        moduleIds[usernameAndProjectName] = numModules;\n', '\n', '        ModuleForSale storage module = modules[numModules];\n', '\n', '        module.price = price;\n', '        module.sellerUsername = sellerUsername;\n', '        module.moduleName = moduleName;\n', '        module.sellerAddress = msg.sender;\n', '        module.licenseId = licenseId;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the ID number of a module given the username and project name of that module\n', '    // ------------------------------------------------------------------------\n', '    function getModuleId(string usernameAndProjectName) public view returns (uint) {\n', '        return moduleIds[usernameAndProjectName];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get info stored for a module by id\n', '    // ------------------------------------------------------------------------\n', '    function getModuleById(\n', '        uint moduleId\n', '    ) \n', '        public \n', '        view \n', '        returns (\n', '            uint price, \n', '            bytes32 sellerUsername, \n', '            bytes32 moduleName, \n', '            address sellerAddress, \n', '            bytes4 licenseId\n', '        ) \n', '    {\n', '        ModuleForSale storage module = modules[moduleId];\n', '        \n', '\n', '        if (module.sellerAddress == address(0)) {\n', '            return;\n', '        }\n', '\n', '        price = module.price;\n', '        sellerUsername = module.sellerUsername;\n', '        moduleName = module.moduleName;\n', '        sellerAddress = module.sellerAddress;\n', '        licenseId = module.licenseId;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // get info stored for a module by name\n', '    // ------------------------------------------------------------------------\n', '    function getModuleByName(\n', '        string usernameAndProjectName\n', '    ) \n', '        public \n', '        view\n', '        returns (\n', '            uint price, \n', '            bytes32 sellerUsername, \n', '            bytes32 moduleName, \n', '            address sellerAddress, \n', '            bytes4 licenseId\n', '        ) \n', '    {\n', '        uint moduleId = moduleIds[usernameAndProjectName];\n', '        if (moduleId == 0) {\n', '            return;\n', '        }\n', '        ModuleForSale storage module = modules[moduleId];\n', '\n', '        price = module.price;\n', '        sellerUsername = module.sellerUsername;\n', '        moduleName = module.moduleName;\n', '        sellerAddress = module.sellerAddress;\n', '        licenseId = module.licenseId;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Edit a module listing\n', '    // ------------------------------------------------------------------------\n', '    function editModule(uint moduleId, uint price, address sellerAddress, bytes4 licenseId) public {\n', '        // Make sure input params are valid\n', '        require(moduleId != 0 && price != 0 && sellerAddress != address(0) && licenseId != 0);\n', '\n', '        ModuleForSale storage module = modules[moduleId];\n', '\n', '        // prevent editing an empty module (effectively listing a module)\n', '        require(\n', '            module.price != 0 && module.sellerUsername != "" && module.moduleName != "" && module.licenseId != 0 && module.sellerAddress != address(0)\n', '        );\n', '\n', '        // require that sender is the original module lister, or the contract owner\n', '        // the contract owner clause lets us recover a module listing if a dev loses access to their privkey\n', '        require(msg.sender == module.sellerAddress || msg.sender == owner);\n', '\n', '        module.price = price;\n', '        module.sellerAddress = sellerAddress;\n', '        module.licenseId = licenseId;\n', '    }\n', '}\n', 'contract LicenseSales is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    // the amount rewarded to a seller for selling a license\n', '    uint public tokenReward;\n', '\n', '    // the fee this contract takes from every sale.  expressed as percent.  so a value of 3 indicates a 3% txn fee\n', '    uint public saleFee;\n', '\n', '    // address of the relay contract which holds the address of the registry contract.\n', '    address public relayContractAddress;\n', '\n', '    // the token address\n', '    address public tokenContractAddress;\n', '\n', '    // this contract version\n', '    uint public version;\n', '\n', '    // the address that is authorized to withdraw eth\n', '    address private withdrawAddress;\n', '\n', '    event LicenseSale(\n', '        bytes32 moduleName,\n', '        bytes32 sellerUsername,\n', '        address indexed sellerAddress,\n', '        address indexed buyerAddress,\n', '        uint price,\n', '        uint soldAt,\n', '        uint rewardedTokens,\n', '        uint networkFee,\n', '        bytes4 licenseId\n', '    );\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        version = 1;\n', '\n', '        // default token reward of 100 tokens.  \n', '        // token has 18 decimal places so that&#39;s why 100 * 10^18\n', '        tokenReward = 100 * 10**18;\n', '\n', '        // default saleFee of 10%\n', '        saleFee = 10;\n', '\n', '        // default withdrawAddress is owner\n', '        withdrawAddress = msg.sender;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens (just in case)\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any ETH\n', '    // ------------------------------------------------------------------------\n', '    function withdrawEther() public {\n', '        require(msg.sender == withdrawAddress);\n', '        withdrawAddress.transfer(this.balance);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can set address of who can withdraw\n', '    // ------------------------------------------------------------------------\n', '    function setWithdrawAddress(address _withdrawAddress) public onlyOwner {\n', '        require(_withdrawAddress != address(0));\n', '        withdrawAddress = _withdrawAddress;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can set address of relay contract\n', '    // ------------------------------------------------------------------------\n', '    function setRelayContractAddress(address _relayContractAddress) public onlyOwner {\n', '        require(_relayContractAddress != address(0));\n', '        relayContractAddress = _relayContractAddress;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can set address of token contract\n', '    // ------------------------------------------------------------------------\n', '    function setTokenContractAddress(address _tokenContractAddress) public onlyOwner {\n', '        require(_tokenContractAddress != address(0));\n', '        tokenContractAddress = _tokenContractAddress;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can set token reward\n', '    // ------------------------------------------------------------------------\n', '    function setTokenReward(uint _tokenReward) public onlyOwner {\n', '        tokenReward = _tokenReward;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can set the sale fee\n', '    // ------------------------------------------------------------------------\n', '    function setSaleFee(uint _saleFee) public onlyOwner {\n', '        saleFee = _saleFee;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Anyone can make a sale if they provide a moduleId\n', '    // ------------------------------------------------------------------------\n', '    function makeSale(uint moduleId) public payable {\n', '        require(moduleId != 0);\n', '\n', '        // look up the registry address from relay token\n', '        Relay relay = Relay(relayContractAddress);\n', '        address registryAddress = relay.registryContractAddress();\n', '\n', '        // get the module info from registry\n', '        Registry registry = Registry(registryAddress);\n', '\n', '        uint price;\n', '        bytes32 sellerUsername;\n', '        bytes32 moduleName;\n', '        address sellerAddress;\n', '        bytes4 licenseId;\n', '\n', '        (price, sellerUsername, moduleName, sellerAddress, licenseId) = registry.getModuleById(moduleId);\n', '\n', '        // make sure the customer has sent enough eth\n', '        require(msg.value >= price);\n', '\n', '        // make sure the module is actually valid\n', '        require(sellerUsername != "" && moduleName != "" && sellerAddress != address(0) && licenseId != "");\n', '\n', '        // calculate fee and payout\n', '        uint fee = msg.value.mul(saleFee).div(100); \n', '        uint payout = msg.value.sub(fee);\n', '\n', '        // log the sale\n', '        emit LicenseSale(\n', '            moduleName,\n', '            sellerUsername,\n', '            sellerAddress,\n', '            msg.sender,\n', '            price,\n', '            block.timestamp,\n', '            tokenReward,\n', '            fee,\n', '            licenseId\n', '        );\n', '\n', '        // give seller some tokens for the sale\n', '        rewardTokens(sellerAddress);\n', '        \n', '        // pay seller the ETH\n', '        sellerAddress.transfer(payout);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Reward user with tokens IF the contract has them in it&#39;s allowance\n', '    // ------------------------------------------------------------------------\n', '    function rewardTokens(address toReward) private {\n', '        DeconetToken token = DeconetToken(tokenContractAddress);\n', '        address tokenOwner = token.owner();\n', '\n', '        // check balance of tokenOwner\n', '        uint tokenOwnerBalance = token.balanceOf(tokenOwner);\n', '        uint tokenOwnerAllowance = token.allowance(tokenOwner, address(this));\n', '        if (tokenOwnerBalance >= tokenReward && tokenOwnerAllowance >= tokenReward) {\n', '            token.transferFrom(tokenOwner, toReward, tokenReward);\n', '        }\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '// produced by the Solididy File Flattener (c) David Appleton 2018\n', '// contact : dave@akomba.com\n', '// released under Apache 2.0 licence\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract DeconetToken is StandardToken, Ownable, Pausable {\n', '    // token naming etc\n', '    string public constant symbol = "DCO";\n', '    string public constant name = "Deconet Token";\n', '    uint8 public constant decimals = 18;\n', '\n', '    // contract version\n', '    uint public constant version = 4;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        // 1 billion tokens (1,000,000,000)\n', '        totalSupply_ = 1000000000 * 10**uint(decimals);\n', '\n', '        // transfer initial supply to msg.sender who is also contract owner\n', '        balances[msg.sender] = totalSupply_;\n', '        Transfer(address(0), msg.sender, totalSupply_);\n', '\n', "        // pause contract until we're ready to allow transfers\n", '        paused = true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens (just in case)\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Modifier to make a function callable only when called by the contract owner\n', '    // or if the contract is not paused.\n', '    // ------------------------------------------------------------------------\n', '    modifier whenOwnerOrNotPaused() {\n', '        require(msg.sender == owner || !paused);\n', '        _;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // overloaded openzepplin method to add whenOwnerOrNotPaused modifier\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint256 _value) public whenOwnerOrNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // overloaded openzepplin method to add whenOwnerOrNotPaused modifier\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenOwnerOrNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // overloaded openzepplin method to add whenOwnerOrNotPaused modifier\n', '    // ------------------------------------------------------------------------\n', '    function approve(address _spender, uint256 _value) public whenOwnerOrNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // overloaded openzepplin method to add whenOwnerOrNotPaused modifier\n', '    // ------------------------------------------------------------------------\n', '    function increaseApproval(address _spender, uint _addedValue) public whenOwnerOrNotPaused returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // overloaded openzepplin method to add whenOwnerOrNotPaused modifier\n', '    // ------------------------------------------------------------------------\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenOwnerOrNotPaused returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', 'contract Relay is Ownable {\n', '    address public licenseSalesContractAddress;\n', '    address public registryContractAddress;\n', '    address public apiRegistryContractAddress;\n', '    address public apiCallsContractAddress;\n', '    uint public version;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor, establishes ownership because contract is owned\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        version = 4;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens (just in case)\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Sets the license sales contract address\n', '    // ------------------------------------------------------------------------\n', '    function setLicenseSalesContractAddress(address newAddress) public onlyOwner {\n', '        require(newAddress != address(0));\n', '        licenseSalesContractAddress = newAddress;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Sets the registry contract address\n', '    // ------------------------------------------------------------------------\n', '    function setRegistryContractAddress(address newAddress) public onlyOwner {\n', '        require(newAddress != address(0));\n', '        registryContractAddress = newAddress;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Sets the api registry contract address\n', '    // ------------------------------------------------------------------------\n', '    function setApiRegistryContractAddress(address newAddress) public onlyOwner {\n', '        require(newAddress != address(0));\n', '        apiRegistryContractAddress = newAddress;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Sets the api calls contract address\n', '    // ------------------------------------------------------------------------\n', '    function setApiCallsContractAddress(address newAddress) public onlyOwner {\n', '        require(newAddress != address(0));\n', '        apiCallsContractAddress = newAddress;\n', '    }\n', '}\n', 'contract Registry is Ownable {\n', '\n', '    struct ModuleForSale {\n', '        uint price;\n', '        bytes32 sellerUsername;\n', '        bytes32 moduleName;\n', '        address sellerAddress;\n', '        bytes4 licenseId;\n', '    }\n', '\n', '    mapping(string => uint) internal moduleIds;\n', '    mapping(uint => ModuleForSale) public modules;\n', '\n', '    uint public numModules;\n', '    uint public version;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor, establishes ownership because contract is owned\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        numModules = 0;\n', '        version = 1;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens (just in case)\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Lets a user list a software module for sale in this registry\n', '    // ------------------------------------------------------------------------\n', '    function listModule(uint price, bytes32 sellerUsername, bytes32 moduleName, string usernameAndProjectName, bytes4 licenseId) public {\n', '        // make sure input params are valid\n', '        require(price != 0 && sellerUsername != "" && moduleName != "" && bytes(usernameAndProjectName).length != 0 && licenseId != 0);\n', '\n', "        // make sure the name isn't already taken\n", '        require(moduleIds[usernameAndProjectName] == 0);\n', '\n', '        numModules += 1;\n', '        moduleIds[usernameAndProjectName] = numModules;\n', '\n', '        ModuleForSale storage module = modules[numModules];\n', '\n', '        module.price = price;\n', '        module.sellerUsername = sellerUsername;\n', '        module.moduleName = moduleName;\n', '        module.sellerAddress = msg.sender;\n', '        module.licenseId = licenseId;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the ID number of a module given the username and project name of that module\n', '    // ------------------------------------------------------------------------\n', '    function getModuleId(string usernameAndProjectName) public view returns (uint) {\n', '        return moduleIds[usernameAndProjectName];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get info stored for a module by id\n', '    // ------------------------------------------------------------------------\n', '    function getModuleById(\n', '        uint moduleId\n', '    ) \n', '        public \n', '        view \n', '        returns (\n', '            uint price, \n', '            bytes32 sellerUsername, \n', '            bytes32 moduleName, \n', '            address sellerAddress, \n', '            bytes4 licenseId\n', '        ) \n', '    {\n', '        ModuleForSale storage module = modules[moduleId];\n', '        \n', '\n', '        if (module.sellerAddress == address(0)) {\n', '            return;\n', '        }\n', '\n', '        price = module.price;\n', '        sellerUsername = module.sellerUsername;\n', '        moduleName = module.moduleName;\n', '        sellerAddress = module.sellerAddress;\n', '        licenseId = module.licenseId;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // get info stored for a module by name\n', '    // ------------------------------------------------------------------------\n', '    function getModuleByName(\n', '        string usernameAndProjectName\n', '    ) \n', '        public \n', '        view\n', '        returns (\n', '            uint price, \n', '            bytes32 sellerUsername, \n', '            bytes32 moduleName, \n', '            address sellerAddress, \n', '            bytes4 licenseId\n', '        ) \n', '    {\n', '        uint moduleId = moduleIds[usernameAndProjectName];\n', '        if (moduleId == 0) {\n', '            return;\n', '        }\n', '        ModuleForSale storage module = modules[moduleId];\n', '\n', '        price = module.price;\n', '        sellerUsername = module.sellerUsername;\n', '        moduleName = module.moduleName;\n', '        sellerAddress = module.sellerAddress;\n', '        licenseId = module.licenseId;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Edit a module listing\n', '    // ------------------------------------------------------------------------\n', '    function editModule(uint moduleId, uint price, address sellerAddress, bytes4 licenseId) public {\n', '        // Make sure input params are valid\n', '        require(moduleId != 0 && price != 0 && sellerAddress != address(0) && licenseId != 0);\n', '\n', '        ModuleForSale storage module = modules[moduleId];\n', '\n', '        // prevent editing an empty module (effectively listing a module)\n', '        require(\n', '            module.price != 0 && module.sellerUsername != "" && module.moduleName != "" && module.licenseId != 0 && module.sellerAddress != address(0)\n', '        );\n', '\n', '        // require that sender is the original module lister, or the contract owner\n', '        // the contract owner clause lets us recover a module listing if a dev loses access to their privkey\n', '        require(msg.sender == module.sellerAddress || msg.sender == owner);\n', '\n', '        module.price = price;\n', '        module.sellerAddress = sellerAddress;\n', '        module.licenseId = licenseId;\n', '    }\n', '}\n', 'contract LicenseSales is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    // the amount rewarded to a seller for selling a license\n', '    uint public tokenReward;\n', '\n', '    // the fee this contract takes from every sale.  expressed as percent.  so a value of 3 indicates a 3% txn fee\n', '    uint public saleFee;\n', '\n', '    // address of the relay contract which holds the address of the registry contract.\n', '    address public relayContractAddress;\n', '\n', '    // the token address\n', '    address public tokenContractAddress;\n', '\n', '    // this contract version\n', '    uint public version;\n', '\n', '    // the address that is authorized to withdraw eth\n', '    address private withdrawAddress;\n', '\n', '    event LicenseSale(\n', '        bytes32 moduleName,\n', '        bytes32 sellerUsername,\n', '        address indexed sellerAddress,\n', '        address indexed buyerAddress,\n', '        uint price,\n', '        uint soldAt,\n', '        uint rewardedTokens,\n', '        uint networkFee,\n', '        bytes4 licenseId\n', '    );\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        version = 1;\n', '\n', '        // default token reward of 100 tokens.  \n', "        // token has 18 decimal places so that's why 100 * 10^18\n", '        tokenReward = 100 * 10**18;\n', '\n', '        // default saleFee of 10%\n', '        saleFee = 10;\n', '\n', '        // default withdrawAddress is owner\n', '        withdrawAddress = msg.sender;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens (just in case)\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any ETH\n', '    // ------------------------------------------------------------------------\n', '    function withdrawEther() public {\n', '        require(msg.sender == withdrawAddress);\n', '        withdrawAddress.transfer(this.balance);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can set address of who can withdraw\n', '    // ------------------------------------------------------------------------\n', '    function setWithdrawAddress(address _withdrawAddress) public onlyOwner {\n', '        require(_withdrawAddress != address(0));\n', '        withdrawAddress = _withdrawAddress;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can set address of relay contract\n', '    // ------------------------------------------------------------------------\n', '    function setRelayContractAddress(address _relayContractAddress) public onlyOwner {\n', '        require(_relayContractAddress != address(0));\n', '        relayContractAddress = _relayContractAddress;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can set address of token contract\n', '    // ------------------------------------------------------------------------\n', '    function setTokenContractAddress(address _tokenContractAddress) public onlyOwner {\n', '        require(_tokenContractAddress != address(0));\n', '        tokenContractAddress = _tokenContractAddress;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can set token reward\n', '    // ------------------------------------------------------------------------\n', '    function setTokenReward(uint _tokenReward) public onlyOwner {\n', '        tokenReward = _tokenReward;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can set the sale fee\n', '    // ------------------------------------------------------------------------\n', '    function setSaleFee(uint _saleFee) public onlyOwner {\n', '        saleFee = _saleFee;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Anyone can make a sale if they provide a moduleId\n', '    // ------------------------------------------------------------------------\n', '    function makeSale(uint moduleId) public payable {\n', '        require(moduleId != 0);\n', '\n', '        // look up the registry address from relay token\n', '        Relay relay = Relay(relayContractAddress);\n', '        address registryAddress = relay.registryContractAddress();\n', '\n', '        // get the module info from registry\n', '        Registry registry = Registry(registryAddress);\n', '\n', '        uint price;\n', '        bytes32 sellerUsername;\n', '        bytes32 moduleName;\n', '        address sellerAddress;\n', '        bytes4 licenseId;\n', '\n', '        (price, sellerUsername, moduleName, sellerAddress, licenseId) = registry.getModuleById(moduleId);\n', '\n', '        // make sure the customer has sent enough eth\n', '        require(msg.value >= price);\n', '\n', '        // make sure the module is actually valid\n', '        require(sellerUsername != "" && moduleName != "" && sellerAddress != address(0) && licenseId != "");\n', '\n', '        // calculate fee and payout\n', '        uint fee = msg.value.mul(saleFee).div(100); \n', '        uint payout = msg.value.sub(fee);\n', '\n', '        // log the sale\n', '        emit LicenseSale(\n', '            moduleName,\n', '            sellerUsername,\n', '            sellerAddress,\n', '            msg.sender,\n', '            price,\n', '            block.timestamp,\n', '            tokenReward,\n', '            fee,\n', '            licenseId\n', '        );\n', '\n', '        // give seller some tokens for the sale\n', '        rewardTokens(sellerAddress);\n', '        \n', '        // pay seller the ETH\n', '        sellerAddress.transfer(payout);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Reward user with tokens IF the contract has them in it's allowance\n", '    // ------------------------------------------------------------------------\n', '    function rewardTokens(address toReward) private {\n', '        DeconetToken token = DeconetToken(tokenContractAddress);\n', '        address tokenOwner = token.owner();\n', '\n', '        // check balance of tokenOwner\n', '        uint tokenOwnerBalance = token.balanceOf(tokenOwner);\n', '        uint tokenOwnerAllowance = token.allowance(tokenOwner, address(this));\n', '        if (tokenOwnerBalance >= tokenReward && tokenOwnerAllowance >= tokenReward) {\n', '            token.transferFrom(tokenOwner, toReward, tokenReward);\n', '        }\n', '    }\n', '}']
