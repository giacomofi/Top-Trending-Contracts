['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC223 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/223\n', ' */\n', 'interface ERC223I {\n', '\n', '  function balanceOf(address _owner) external view returns (uint balance);\n', '  \n', '  function name() external view returns (string _name);\n', '  function symbol() external view returns (string _symbol);\n', '  function decimals() external view returns (uint8 _decimals);\n', '  function totalSupply() external view returns (uint256 supply);\n', '\n', '  function transfer(address to, uint value) external returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) external returns (bool ok);\n', '  function transfer(address to, uint value, bytes data, string custom_fallback) external returns (bool ok);\n', '\n', '  function releaseTokenTransfer() external;\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);  \n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow.\n', '    */\n', '    function safeSub(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        assert(y <= x);\n', '        uint256 z = x - y;\n', '        return z;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function safeAdd(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        uint256 z = x + y;\n', '        assert(z >= x);\n', '        return z;\n', '    }\n', '\t\n', '\t/**\n', '    * @dev Integer division of two numbers, reverts on division by zero.\n', '    */\n', '    function safeDiv(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        uint256 z = x / y;\n', '        return z;\n', '    }\n', '    \n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\t\n', '    function safeMul(uint256 x, uint256 y) internal pure returns (uint256) {    \n', '        if (x == 0) {\n', '            return 0;\n', '        }\n', '    \n', '        uint256 z = x * y;\n', '        assert(z / x == y);\n', '        return z;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the integer percentage of the number.\n', '    */\n', '    function safePerc(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        if (x == 0) {\n', '            return 0;\n', '        }\n', '        \n', '        uint256 z = x * y;\n', '        assert(z / x == y);    \n', '        z = z / 10000; // percent to hundredths\n', '        return z;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the minimum value of two numbers.\n', '    */\t\n', '    function min(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        uint256 z = x <= y ? x : y;\n', '        return z;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the maximum value of two numbers.\n', '    */\n', '    function max(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        uint256 z = x >= y ? x : y;\n', '        return z;\n', '    }\n', '}\n', '/**\n', ' * @title Ownable contract - base contract with an owner\n', ' */\n', 'contract Ownable {\n', '  \n', '  address public owner;\n', '  address public newOwner;\n', '\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '  \n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    assert(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    assert(_newOwner != address(0));      \n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Accept transferOwnership.\n', '   */\n', '  function acceptOwnership() public {\n', '    if (msg.sender == newOwner) {\n', '      emit OwnershipTransferred(owner, newOwner);\n', '      owner = newOwner;\n', '    }\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Agent contract - base contract with an agent\n', ' */\n', 'contract Agent is Ownable {\n', '\n', '  address public defAgent;\n', '\n', '  mapping(address => bool) public Agents;  \n', '\n', '  event UpdatedAgent(address _agent, bool _status);\n', '\n', '  constructor() public {\n', '    defAgent = msg.sender;\n', '    Agents[msg.sender] = true;\n', '  }\n', '  \n', '  modifier onlyAgent() {\n', '    assert(Agents[msg.sender]);\n', '    _;\n', '  }\n', '  \n', '  function updateAgent(address _agent, bool _status) public onlyOwner {\n', '    assert(_agent != address(0));\n', '    Agents[_agent] = _status;\n', '\n', '    emit UpdatedAgent(_agent, _status);\n', '  }  \n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC223 token\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/223\n', ' */\n', 'contract ERC223 is ERC223I, Agent, SafeMath {\n', '\n', '  mapping(address => uint) balances;\n', '  \n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  uint256 public totalSupply;\n', '\n', '  address public crowdsale = address(0);\n', '  bool public released = false;\n', '\n', '  /**\n', '   * @dev Limit token transfer until the crowdsale is over.\n', '   */\n', '  modifier canTransfer() {\n', '    assert(released || msg.sender == crowdsale);\n', '    _;\n', '  }\n', '\n', '  modifier onlyCrowdsaleContract() {\n', '    assert(msg.sender == crowdsale);\n', '    _;\n', '  }  \n', '  \n', '  function name() public view returns (string _name) {\n', '    return name;\n', '  }\n', '\n', '  function symbol() public view returns (string _symbol) {\n', '    return symbol;\n', '  }\n', '\n', '  function decimals() public view returns (uint8 _decimals) {\n', '    return decimals;\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256 _totalSupply) {\n', '    return totalSupply;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint balance) {\n', '    return balances[_owner];\n', '  }  \n', '\n', '  // if bytecode exists then the _addr is a contract.\n', '  function isContract(address _addr) private view returns (bool is_contract) {\n', '    uint length;\n', '    assembly {\n', '      //retrieve the size of the code on target address, this needs assembly\n', '      length := extcodesize(_addr)\n', '    }\n', '    return (length>0);\n', '  }\n', '  \n', '  // function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data) external canTransfer() returns (bool success) {      \n', '    if(isContract(_to)) {\n', '      return transferToContract(_to, _value, _data);\n', '    } else {\n', '      return transferToAddress(_to, _value, _data);\n', '    }\n', '  }\n', '  \n', '  // standard function transfer similar to ERC20 transfer with no _data.\n', '  // added due to backwards compatibility reasons.\n', '  function transfer(address _to, uint _value) external canTransfer() returns (bool success) {      \n', '    bytes memory empty;\n', '    if(isContract(_to)) {\n', '      return transferToContract(_to, _value, empty);\n', '    } else {\n', '      return transferToAddress(_to, _value, empty);\n', '    }\n', '  }\n', '\n', '  // function that is called when transaction target is an address\n', '  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    emit Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '  \n', '  // function that is called when transaction target is a contract\n', '  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    assert(_to.call.value(0)(abi.encodeWithSignature("tokenFallback(address,uint256,bytes)", msg.sender, _value, _data)));\n', '    emit Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '  // function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) external canTransfer() returns (bool success) {      \n', '    if(isContract(_to)) {\n', '      if (balanceOf(msg.sender) < _value) revert();\n', '      balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '      balances[_to] = safeAdd(balanceOf(_to), _value);      \n', '      assert(_to.call.value(0)(abi.encodeWithSignature(_custom_fallback), msg.sender, _value, _data));    \n', '      emit Transfer(msg.sender, _to, _value, _data);\n', '      return true;\n', '    } else {\n', '      return transferToAddress(_to, _value, _data);\n', '    }\n', '  }\n', '\n', '  function setCrowdsaleContract(address _contract) external onlyOwner {\n', '    crowdsale = _contract;\n', '  }\n', '\n', '  /**\n', '   * @dev One way function to release the tokens to the wild. Can be called only from the crowdsale contract.\n', '   */\n', '  function releaseTokenTransfer() external onlyCrowdsaleContract {\n', '    released = true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SABIGlobal Token based on ERC223 token\n', ' */\n', 'contract SABIToken is ERC223 {\n', '\t\n', '  uint public initialSupply = 1400 * 10**6; // 1.4 billion\n', '\n', '  /** Name and symbol were updated. */\n', '  event UpdatedTokenInformation(string _name, string _symbol);\n', '\n', '  constructor(string _name, string _symbol, address _crowdsale, address _team, address _bounty, address _adviser, address _developer) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = 8;\n', '    crowdsale = _crowdsale;\n', '\n', '    bytes memory empty;    \n', '    totalSupply = initialSupply*uint(10)**decimals;\n', '    // creating initial tokens\n', '    balances[_crowdsale] = totalSupply;    \n', '    emit Transfer(0x0, _crowdsale, balances[_crowdsale], empty);\n', '    \n', '    // send 15% - to team account\n', '    uint value = safePerc(totalSupply, 1500);\n', '    balances[_crowdsale] = safeSub(balances[_crowdsale], value);\n', '    balances[_team] = value;\n', '    emit Transfer(_crowdsale, _team, balances[_team], empty);  \n', '\n', '    // send 5% - to bounty account\n', '    value = safePerc(totalSupply, 500);\n', '    balances[_crowdsale] = safeSub(balances[_crowdsale], value);\n', '    balances[_bounty] = value;\n', '    emit Transfer(_crowdsale, _bounty, balances[_bounty], empty);\n', '\n', '    // send 1.5% - to adviser account\n', '    value = safePerc(totalSupply, 150);\n', '    balances[_crowdsale] = safeSub(balances[_crowdsale], value);\n', '    balances[_adviser] = value;\n', '    emit Transfer(_crowdsale, _adviser, balances[_adviser], empty);\n', '\n', '    // send 1% - to developer account\n', '    value = safePerc(totalSupply, 100);\n', '    balances[_crowdsale] = safeSub(balances[_crowdsale], value);\n', '    balances[_developer] = value;\n', '    emit Transfer(_crowdsale, _developer, balances[_developer], empty);\n', '  } \n', '\n', '  /**\n', '  * Owner may issue new tokens\n', '  */\n', '  function mint(address _receiver, uint _amount) public onlyOwner {\n', '    balances[_receiver] = safeAdd(balances[_receiver], _amount);\n', '    totalSupply = safeAdd(totalSupply, _amount);\n', '    bytes memory empty;    \n', '    emit Transfer(0x0, _receiver, _amount, empty);    \n', '  }\n', '\n', '  /**\n', '  * Owner can update token information here.\n', '  */\n', '  function updateTokenInformation(string _name, string _symbol) public onlyOwner {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    emit UpdatedTokenInformation(_name, _symbol);\n', '  }\n', '}']