['pragma solidity ^0.4.16;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract Trabet_Coin is owned {\n', '    // Public variables of the token\n', '    string public name = "Trabet Coin";\n', '    string public symbol = "TC";\n', '    uint8 public decimals = 4;\n', '    uint256 public totalSupply = 7000000 * 10 ** uint256(decimals);\n', '\n', '    bool public released = false;\n', '\n', '    /// contract that is allowed to create new tokens and allows unlift the transfer limits on this token\n', '    address public crowdsaleAgent;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => bool) public frozenAccount;\n', '   \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor () public {\n', '        balanceOf[owner] = totalSupply;\n', '    }\n', '    modifier canTransfer() {\n', '        require(released);\n', '       _;\n', '     }\n', '\n', '    modifier onlyCrowdsaleAgent() {\n', '        require(msg.sender == crowdsaleAgent);\n', '        _;\n', '    }\n', '\n', '    function releaseToken() public onlyOwner {\n', '        released = true;\n', '    }\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) canTransfer internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Check if sender is frozen\n', '        require(!frozenAccount[_from]);\n', '        // Check if recipient is frozen\n', '        require(!frozenAccount[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) canTransfer public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Create `mintedAmount` tokens and send it to `target`\n', '    /// @param target Address to receive the tokens\n', '    /// @param mintedAmount the amount of tokens it will receive\n', '    function mintToken(address target, uint256 mintedAmount) onlyCrowdsaleAgent public {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        emit Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    /// @dev Set the contract that can call release and make the token transferable.\n', '    /// @param _crowdsaleAgent crowdsale contract address\n', '    function setCrowdsaleAgent(address _crowdsaleAgent) onlyOwner public {\n', '        crowdsaleAgent = _crowdsaleAgent;\n', '    }\n', '}\n', '\n', 'contract Killable is owned {\n', '    function kill() onlyOwner public {\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', 'contract Trabet_Coin_PreICO is owned, Killable {\n', '    /// The token we are selling\n', '    Trabet_Coin public token;\n', '\n', '    ///fund goes to\n', '    address public beneficiary;\n', '\n', '    /// the UNIX timestamp start date of the crowdsale\n', '    uint public startsAt = 1521748800;\n', '\n', '    /// the UNIX timestamp end date of the crowdsale\n', '    uint public endsAt = 1532563200;\n', '\n', '    /// the price of token\n', '    uint256 public TokenPerETH = 1065;\n', '\n', '    /// Has this crowdsale been finalized\n', '    bool public finalized = false;\n', '\n', '    /// the number of tokens already sold through this contract\n', '    uint public tokensSold = 0;\n', '\n', '    /// the number of ETH raised through this contract\n', '    uint public weiRaised = 0;\n', '\n', '    /// How many distinct addresses have invested\n', '    uint public investorCount = 0;\n', '\n', '    /// How much wei we have given back to investors.\n', '    uint public weiRefunded = 0;\n', '\n', '    /// Has this crowdsale reFunding\n', '    bool public reFunding = false;\n', '\n', '    /// How much ETH each address has invested to this crowdsale\n', '    mapping (address => uint256) public investedAmountOf;\n', '\n', '    /// A new investment was made\n', '    event Invested(address investor, uint weiAmount, uint tokenAmount);\n', '    /// Crowdsale Start time has been changed\n', '    event StartsAtChanged(uint startsAt);\n', '    /// Crowdsale end time has been changed\n', '    event EndsAtChanged(uint endsAt);\n', '    /// Calculated new price\n', '    event RateChanged(uint oldValue, uint newValue);\n', '    /// Refund was processed for a contributor\n', '    event Refund(address investor, uint weiAmount);\n', '\n', '    constructor (address _token, address _beneficiary) public {\n', '        token = Trabet_Coin(_token);\n', '        beneficiary = _beneficiary;\n', '    }\n', '\n', '    function investInternal(address receiver, address refer) private {\n', '        require(!finalized);\n', '        require(startsAt <= now && endsAt > now);\n', '        require(msg.value >= 100000000000000);\n', '\n', '        if(investedAmountOf[receiver] == 0) {\n', '            // A new investor\n', '            investorCount++;\n', '        }\n', '\n', '        // Update investor\n', '        uint tokensAmount = msg.value * TokenPerETH / 100000000000000;\n', '        investedAmountOf[receiver] += msg.value;\n', '        // Update totals\n', '        tokensSold += tokensAmount;\n', '        weiRaised += msg.value;\n', '\n', '        // Tell us invest was success\n', '        emit Invested(receiver, msg.value, tokensAmount);\n', '\n', '        token.mintToken(receiver, tokensAmount);\n', '\n', '        if (refer != 0x0) {\n', '            refer.transfer(msg.value/10);\n', '        }\n', '\n', '        // Transfer Fund to owner&#39;s address\n', '        beneficiary.transfer(address(this).balance);\n', '\n', '    }\n', '\n', '    function buy(address refer) public payable {\n', '        investInternal(msg.sender, refer);\n', '    }\n', '    \n', '    function () public payable {\n', '        investInternal(msg.sender, 0x0);\n', '    }\n', '    \n', '    function payforRefund () public payable {\n', '    }\n', '    function setStartsAt(uint time) onlyOwner public {\n', '        require(!finalized);\n', '        startsAt = time;\n', '        emit StartsAtChanged(startsAt);\n', '    }\n', '    function setEndsAt(uint time) onlyOwner public {\n', '        require(!finalized);\n', '        endsAt = time;\n', '        emit EndsAtChanged(endsAt);\n', '    }\n', '    function setRate(uint value) onlyOwner public {\n', '        require(!finalized);\n', '        require(value > 0);\n', '        emit RateChanged(TokenPerETH, value);\n', '        TokenPerETH = value;\n', '    }\n', '\n', '    function finalize() public onlyOwner {\n', '        // Finalized Pre ICO crowdsele.\n', '        finalized = true;\n', '    }\n', '\n', '    function EnableRefund() public onlyOwner {\n', '        // Finalized Pre ICO crowdsele.\n', '        reFunding = true;\n', '    }\n', '\n', '    function setBeneficiary(address _beneficiary) public onlyOwner {\n', '        // Finalized Pre ICO crowdsele.\n', '        beneficiary = _beneficiary;\n', '    }\n', '\n', '    /// @dev Investors can claim refund.\n', '    function refund() public {\n', '        require(reFunding);\n', '        uint256 weiValue = investedAmountOf[msg.sender];\n', '        investedAmountOf[msg.sender] = 0;\n', '        weiRefunded = weiRefunded + weiValue;\n', '        emit Refund(msg.sender, weiValue);\n', '        msg.sender.transfer(weiValue);\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract Trabet_Coin is owned {\n', '    // Public variables of the token\n', '    string public name = "Trabet Coin";\n', '    string public symbol = "TC";\n', '    uint8 public decimals = 4;\n', '    uint256 public totalSupply = 7000000 * 10 ** uint256(decimals);\n', '\n', '    bool public released = false;\n', '\n', '    /// contract that is allowed to create new tokens and allows unlift the transfer limits on this token\n', '    address public crowdsaleAgent;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => bool) public frozenAccount;\n', '   \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor () public {\n', '        balanceOf[owner] = totalSupply;\n', '    }\n', '    modifier canTransfer() {\n', '        require(released);\n', '       _;\n', '     }\n', '\n', '    modifier onlyCrowdsaleAgent() {\n', '        require(msg.sender == crowdsaleAgent);\n', '        _;\n', '    }\n', '\n', '    function releaseToken() public onlyOwner {\n', '        released = true;\n', '    }\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) canTransfer internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Check if sender is frozen\n', '        require(!frozenAccount[_from]);\n', '        // Check if recipient is frozen\n', '        require(!frozenAccount[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) canTransfer public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Create `mintedAmount` tokens and send it to `target`\n', '    /// @param target Address to receive the tokens\n', '    /// @param mintedAmount the amount of tokens it will receive\n', '    function mintToken(address target, uint256 mintedAmount) onlyCrowdsaleAgent public {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        emit Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    /// @dev Set the contract that can call release and make the token transferable.\n', '    /// @param _crowdsaleAgent crowdsale contract address\n', '    function setCrowdsaleAgent(address _crowdsaleAgent) onlyOwner public {\n', '        crowdsaleAgent = _crowdsaleAgent;\n', '    }\n', '}\n', '\n', 'contract Killable is owned {\n', '    function kill() onlyOwner public {\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', 'contract Trabet_Coin_PreICO is owned, Killable {\n', '    /// The token we are selling\n', '    Trabet_Coin public token;\n', '\n', '    ///fund goes to\n', '    address public beneficiary;\n', '\n', '    /// the UNIX timestamp start date of the crowdsale\n', '    uint public startsAt = 1521748800;\n', '\n', '    /// the UNIX timestamp end date of the crowdsale\n', '    uint public endsAt = 1532563200;\n', '\n', '    /// the price of token\n', '    uint256 public TokenPerETH = 1065;\n', '\n', '    /// Has this crowdsale been finalized\n', '    bool public finalized = false;\n', '\n', '    /// the number of tokens already sold through this contract\n', '    uint public tokensSold = 0;\n', '\n', '    /// the number of ETH raised through this contract\n', '    uint public weiRaised = 0;\n', '\n', '    /// How many distinct addresses have invested\n', '    uint public investorCount = 0;\n', '\n', '    /// How much wei we have given back to investors.\n', '    uint public weiRefunded = 0;\n', '\n', '    /// Has this crowdsale reFunding\n', '    bool public reFunding = false;\n', '\n', '    /// How much ETH each address has invested to this crowdsale\n', '    mapping (address => uint256) public investedAmountOf;\n', '\n', '    /// A new investment was made\n', '    event Invested(address investor, uint weiAmount, uint tokenAmount);\n', '    /// Crowdsale Start time has been changed\n', '    event StartsAtChanged(uint startsAt);\n', '    /// Crowdsale end time has been changed\n', '    event EndsAtChanged(uint endsAt);\n', '    /// Calculated new price\n', '    event RateChanged(uint oldValue, uint newValue);\n', '    /// Refund was processed for a contributor\n', '    event Refund(address investor, uint weiAmount);\n', '\n', '    constructor (address _token, address _beneficiary) public {\n', '        token = Trabet_Coin(_token);\n', '        beneficiary = _beneficiary;\n', '    }\n', '\n', '    function investInternal(address receiver, address refer) private {\n', '        require(!finalized);\n', '        require(startsAt <= now && endsAt > now);\n', '        require(msg.value >= 100000000000000);\n', '\n', '        if(investedAmountOf[receiver] == 0) {\n', '            // A new investor\n', '            investorCount++;\n', '        }\n', '\n', '        // Update investor\n', '        uint tokensAmount = msg.value * TokenPerETH / 100000000000000;\n', '        investedAmountOf[receiver] += msg.value;\n', '        // Update totals\n', '        tokensSold += tokensAmount;\n', '        weiRaised += msg.value;\n', '\n', '        // Tell us invest was success\n', '        emit Invested(receiver, msg.value, tokensAmount);\n', '\n', '        token.mintToken(receiver, tokensAmount);\n', '\n', '        if (refer != 0x0) {\n', '            refer.transfer(msg.value/10);\n', '        }\n', '\n', "        // Transfer Fund to owner's address\n", '        beneficiary.transfer(address(this).balance);\n', '\n', '    }\n', '\n', '    function buy(address refer) public payable {\n', '        investInternal(msg.sender, refer);\n', '    }\n', '    \n', '    function () public payable {\n', '        investInternal(msg.sender, 0x0);\n', '    }\n', '    \n', '    function payforRefund () public payable {\n', '    }\n', '    function setStartsAt(uint time) onlyOwner public {\n', '        require(!finalized);\n', '        startsAt = time;\n', '        emit StartsAtChanged(startsAt);\n', '    }\n', '    function setEndsAt(uint time) onlyOwner public {\n', '        require(!finalized);\n', '        endsAt = time;\n', '        emit EndsAtChanged(endsAt);\n', '    }\n', '    function setRate(uint value) onlyOwner public {\n', '        require(!finalized);\n', '        require(value > 0);\n', '        emit RateChanged(TokenPerETH, value);\n', '        TokenPerETH = value;\n', '    }\n', '\n', '    function finalize() public onlyOwner {\n', '        // Finalized Pre ICO crowdsele.\n', '        finalized = true;\n', '    }\n', '\n', '    function EnableRefund() public onlyOwner {\n', '        // Finalized Pre ICO crowdsele.\n', '        reFunding = true;\n', '    }\n', '\n', '    function setBeneficiary(address _beneficiary) public onlyOwner {\n', '        // Finalized Pre ICO crowdsele.\n', '        beneficiary = _beneficiary;\n', '    }\n', '\n', '    /// @dev Investors can claim refund.\n', '    function refund() public {\n', '        require(reFunding);\n', '        uint256 weiValue = investedAmountOf[msg.sender];\n', '        investedAmountOf[msg.sender] = 0;\n', '        weiRefunded = weiRefunded + weiValue;\n', '        emit Refund(msg.sender, weiValue);\n', '        msg.sender.transfer(weiValue);\n', '    }\n', '}']
