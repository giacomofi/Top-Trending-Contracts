['// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// ODIN token contract \n', '// ----------------------------------------------------------------------------\n', 'pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Interface {\n', '//    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    event Burn(uint tokens);\n', '\n', '    // mitigates the ERC20 short address attack\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '    \n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract OdinToken is ERC20Interface, Owned {\n', '\n', '  using SafeMath for uint256;\n', '\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '//    uint private totalSupply;\n', '    bool private _whitelistAll;\n', '\n', '    struct balanceData {  \n', '       bool locked;\n', '       uint balance;\n', '       uint airDropQty;\n', '    }\n', '\n', '    mapping(address => balanceData) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '  /**\n', '  * @dev Constructor for Odin creation\n', '  * @dev Initially assigns the totalSupply to the contract creator\n', '  */\n', '    function OdinToken() public {\n', '        \n', '        // owner of this contract\n', '        owner = msg.sender;\n', '        symbol = "ODIN";\n', '        name = "ODIN Token";\n', '        decimals = 18;\n', '        _whitelistAll=false;\n', '        totalSupply = 100000000000000000000000;\n', '        balances[owner].balance = totalSupply;\n', '\n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '\n', '    // function totalSupply() constant public returns (uint256 totalSupply) {\n', '    //     return totalSupply;\n', '    // }\n', '    uint256 public totalSupply;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // whitelist an address\n', '    // ------------------------------------------------------------------------\n', '    function whitelistAddress(address tokenOwner) onlyOwner public returns (bool)    {\n', '\t\tbalances[tokenOwner].airDropQty = 0;\n', '\t\treturn true;\n', '    }\n', '\n', '\n', '    /**\n', '  * @dev Whitelist all addresses early\n', '  * @return An bool showing if the function succeeded.\n', '  */\n', '    function whitelistAllAddresses() onlyOwner public returns (bool) {\n', '        _whitelistAll = true;\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param tokenOwner The address to query the the balance of.\n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner].balance;\n', '    }\n', '\n', '    function airdrop(address[] recipients, uint[] values) onlyOwner public {\n', '\n', '    require(recipients.length <= 255);\n', '    require (msg.sender==owner);\n', '    require(recipients.length == values.length);\n', '    for (uint i = 0; i < recipients.length; i++) {\n', '        if (balances[recipients[i]].balance==0) {\n', '          OdinToken.transfer(recipients[i], values[i]);\n', '    }\n', '    }\n', '  }\n', '  \n', '    function canSpend(address tokenOwner, uint _value) public constant returns (bool success) {\n', '\n', '        if (_value > balances[tokenOwner].balance) {return false;}     // do they have enough to spend?\n', '        if (tokenOwner==address(0)) {return false;}                               // cannot send to address[0]\n', '\n', '        if (tokenOwner==owner) {return true;}                                       // owner can always spend\n', '        if (_whitelistAll) {return true;}                                   // we pulled the rip cord\n', '        if (balances[tokenOwner].airDropQty==0) {return true;}                      // these are not airdrop tokens\n', '        if (block.timestamp>1569974400) {return true;}                      // no restrictions after june 30, 2019\n', '\n', '        // do not allow transfering air dropped tokens prior to Sep 1 2018\n', '         if (block.timestamp < 1535760000) {return false;}\n', '\n', '        // after Sep 1 2018 and before Dec 31, 2018, do not allow transfering more than 10% of air dropped tokens\n', '        if (block.timestamp < 1546214400 && (balances[tokenOwner].balance - _value) < (balances[tokenOwner].airDropQty / 10 * 9)) {\n', '            return false;\n', '        }\n', '\n', '        // after Dec 31 2018 and before March 31, 2019, do not allow transfering more than 25% of air dropped tokens\n', '        if (block.timestamp < 1553990400 && (balances[tokenOwner].balance - _value) < balances[tokenOwner].airDropQty / 4 * 3) {\n', '            return false;\n', '        }\n', '\n', '        // after March 31, 2019 and before Jun 30, 2019, do not allow transfering more than 50% of air dropped tokens\n', '        if (block.timestamp < 1561852800 && (balances[tokenOwner].balance - _value) < balances[tokenOwner].airDropQty / 2) {\n', '            return false;\n', '        }\n', '\n', '        // after Jun 30, 2019 and before Oct 2, 2019, do not allow transfering more than 75% of air dropped tokens\n', '        if (block.timestamp < 1569974400 && (balances[tokenOwner].balance - _value) < balances[tokenOwner].airDropQty / 4) {\n', '            return false;\n', '        }\n', '        \n', '        return true;\n', '\n', '    }\n', '\n', '    function transfer(address to, uint _value) onlyPayloadSize(2 * 32) public returns (bool success) {\n', '\n', '        require (canSpend(msg.sender, _value));\n', '        balances[msg.sender].balance = balances[msg.sender].balance.sub( _value);\n', '        balances[to].balance = balances[to].balance.add( _value);\n', '        if (msg.sender == owner) {\n', '            balances[to].airDropQty = balances[to].airDropQty.add( _value);\n', '        }\n', '        emit Transfer(msg.sender, to,  _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint  _value) public returns (bool success) {\n', '\n', '        require (canSpend(msg.sender, _value));\n', '\n', '        // // mitigates the ERC20 spend/approval race condition\n', '        // if ( _value != 0 && allowed[msg.sender][spender] != 0) { return false; }\n', '\n', '        allowed[msg.sender][spender] =  _value;\n', '        emit Approval(msg.sender, spender,  _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint  _value) onlyPayloadSize(3 * 32) public returns (bool success) {\n', '\n', '        if (balances[from].balance >=  _value && allowed[from][msg.sender] >=  _value &&  _value > 0) {\n', '\n', '            allowed[from][msg.sender].sub( _value);\n', '            balances[from].balance = balances[from].balance.sub( _value);\n', '            balances[to].balance = balances[to].balance.add( _value);\n', '            emit Transfer(from, to,  _value);\n', '          return true;\n', '        } else {\n', '          require(false);\n', '        }\n', '      }\n', '    \n', '\n', '    // ------------------------------------------------------------------------\n', '    // not implemented\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Used to burn unspent tokens in the contract\n', '    // ------------------------------------------------------------------------\n', '    function burn(uint  _value) onlyOwner public returns (bool) {\n', '        require((balances[owner].balance -  _value) >= 0);\n', '        balances[owner].balance = balances[owner].balance.sub( _value);\n', '        totalSupply = totalSupply.sub( _value);\n', '        emit Burn( _value);\n', '        return true;\n', '    }\n', '\n', '}']
['// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// ODIN token contract \n', '// ----------------------------------------------------------------------------\n', 'pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Interface {\n', '//    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    event Burn(uint tokens);\n', '\n', '    // mitigates the ERC20 short address attack\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '    \n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract OdinToken is ERC20Interface, Owned {\n', '\n', '  using SafeMath for uint256;\n', '\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '//    uint private totalSupply;\n', '    bool private _whitelistAll;\n', '\n', '    struct balanceData {  \n', '       bool locked;\n', '       uint balance;\n', '       uint airDropQty;\n', '    }\n', '\n', '    mapping(address => balanceData) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '  /**\n', '  * @dev Constructor for Odin creation\n', '  * @dev Initially assigns the totalSupply to the contract creator\n', '  */\n', '    function OdinToken() public {\n', '        \n', '        // owner of this contract\n', '        owner = msg.sender;\n', '        symbol = "ODIN";\n', '        name = "ODIN Token";\n', '        decimals = 18;\n', '        _whitelistAll=false;\n', '        totalSupply = 100000000000000000000000;\n', '        balances[owner].balance = totalSupply;\n', '\n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '\n', '    // function totalSupply() constant public returns (uint256 totalSupply) {\n', '    //     return totalSupply;\n', '    // }\n', '    uint256 public totalSupply;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // whitelist an address\n', '    // ------------------------------------------------------------------------\n', '    function whitelistAddress(address tokenOwner) onlyOwner public returns (bool)    {\n', '\t\tbalances[tokenOwner].airDropQty = 0;\n', '\t\treturn true;\n', '    }\n', '\n', '\n', '    /**\n', '  * @dev Whitelist all addresses early\n', '  * @return An bool showing if the function succeeded.\n', '  */\n', '    function whitelistAllAddresses() onlyOwner public returns (bool) {\n', '        _whitelistAll = true;\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param tokenOwner The address to query the the balance of.\n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner].balance;\n', '    }\n', '\n', '    function airdrop(address[] recipients, uint[] values) onlyOwner public {\n', '\n', '    require(recipients.length <= 255);\n', '    require (msg.sender==owner);\n', '    require(recipients.length == values.length);\n', '    for (uint i = 0; i < recipients.length; i++) {\n', '        if (balances[recipients[i]].balance==0) {\n', '          OdinToken.transfer(recipients[i], values[i]);\n', '    }\n', '    }\n', '  }\n', '  \n', '    function canSpend(address tokenOwner, uint _value) public constant returns (bool success) {\n', '\n', '        if (_value > balances[tokenOwner].balance) {return false;}     // do they have enough to spend?\n', '        if (tokenOwner==address(0)) {return false;}                               // cannot send to address[0]\n', '\n', '        if (tokenOwner==owner) {return true;}                                       // owner can always spend\n', '        if (_whitelistAll) {return true;}                                   // we pulled the rip cord\n', '        if (balances[tokenOwner].airDropQty==0) {return true;}                      // these are not airdrop tokens\n', '        if (block.timestamp>1569974400) {return true;}                      // no restrictions after june 30, 2019\n', '\n', '        // do not allow transfering air dropped tokens prior to Sep 1 2018\n', '         if (block.timestamp < 1535760000) {return false;}\n', '\n', '        // after Sep 1 2018 and before Dec 31, 2018, do not allow transfering more than 10% of air dropped tokens\n', '        if (block.timestamp < 1546214400 && (balances[tokenOwner].balance - _value) < (balances[tokenOwner].airDropQty / 10 * 9)) {\n', '            return false;\n', '        }\n', '\n', '        // after Dec 31 2018 and before March 31, 2019, do not allow transfering more than 25% of air dropped tokens\n', '        if (block.timestamp < 1553990400 && (balances[tokenOwner].balance - _value) < balances[tokenOwner].airDropQty / 4 * 3) {\n', '            return false;\n', '        }\n', '\n', '        // after March 31, 2019 and before Jun 30, 2019, do not allow transfering more than 50% of air dropped tokens\n', '        if (block.timestamp < 1561852800 && (balances[tokenOwner].balance - _value) < balances[tokenOwner].airDropQty / 2) {\n', '            return false;\n', '        }\n', '\n', '        // after Jun 30, 2019 and before Oct 2, 2019, do not allow transfering more than 75% of air dropped tokens\n', '        if (block.timestamp < 1569974400 && (balances[tokenOwner].balance - _value) < balances[tokenOwner].airDropQty / 4) {\n', '            return false;\n', '        }\n', '        \n', '        return true;\n', '\n', '    }\n', '\n', '    function transfer(address to, uint _value) onlyPayloadSize(2 * 32) public returns (bool success) {\n', '\n', '        require (canSpend(msg.sender, _value));\n', '        balances[msg.sender].balance = balances[msg.sender].balance.sub( _value);\n', '        balances[to].balance = balances[to].balance.add( _value);\n', '        if (msg.sender == owner) {\n', '            balances[to].airDropQty = balances[to].airDropQty.add( _value);\n', '        }\n', '        emit Transfer(msg.sender, to,  _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint  _value) public returns (bool success) {\n', '\n', '        require (canSpend(msg.sender, _value));\n', '\n', '        // // mitigates the ERC20 spend/approval race condition\n', '        // if ( _value != 0 && allowed[msg.sender][spender] != 0) { return false; }\n', '\n', '        allowed[msg.sender][spender] =  _value;\n', '        emit Approval(msg.sender, spender,  _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint  _value) onlyPayloadSize(3 * 32) public returns (bool success) {\n', '\n', '        if (balances[from].balance >=  _value && allowed[from][msg.sender] >=  _value &&  _value > 0) {\n', '\n', '            allowed[from][msg.sender].sub( _value);\n', '            balances[from].balance = balances[from].balance.sub( _value);\n', '            balances[to].balance = balances[to].balance.add( _value);\n', '            emit Transfer(from, to,  _value);\n', '          return true;\n', '        } else {\n', '          require(false);\n', '        }\n', '      }\n', '    \n', '\n', '    // ------------------------------------------------------------------------\n', '    // not implemented\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Used to burn unspent tokens in the contract\n', '    // ------------------------------------------------------------------------\n', '    function burn(uint  _value) onlyOwner public returns (bool) {\n', '        require((balances[owner].balance -  _value) >= 0);\n', '        balances[owner].balance = balances[owner].balance.sub( _value);\n', '        totalSupply = totalSupply.sub( _value);\n', '        emit Burn( _value);\n', '        return true;\n', '    }\n', '\n', '}']
