['pragma solidity 0.4.23;\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Receive approval and then execute function\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint tokens, address token, bytes data) public;\n', '}\n', '\n', '// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', '// Note: Div only\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// ------------------------------------------------------------------------\n', '// Standard ERC20 Token Contract.\n', '// Fixed Supply with burn capabilities\n', '// ------------------------------------------------------------------------\n', 'contract ERC20 is ERC20Interface{\n', '    using SafeMath for uint; \n', '\n', '    // ------------------------------------------------------------------------\n', '    /// Token supply, balances and allowance\n', '    // ------------------------------------------------------------------------\n', '    uint internal supply;\n', '    mapping (address => uint) internal balances;\n', '    mapping (address => mapping (address => uint)) internal allowed;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token Information\n', '    // ------------------------------------------------------------------------\n', '    string public name;                   // Full Token name\n', '    uint8 public decimals;                // How many decimals to show\n', '    string public symbol;                 // An identifier\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor(uint _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) \n', '    public {\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        supply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '        emit Transfer(address(0), msg.sender, _initialAmount);    // Transfer event indicating token creation\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer _amount tokens to address _to \n', '    // Sender must have enough tokens. Cannot send to 0x0.\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint _amount) \n', '    public \n', '    returns (bool success) {\n', '        require(_to != address(0));         // Use burn() function instead\n', '        require(_to != address(this));\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer _amount of tokens if _from has allowed msg.sender to do so\n', '    //  _from must have enough tokens + must have approved msg.sender \n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address _from, address _to, uint _amount) \n', '    public \n', '    returns (bool success) {\n', '        require(_to != address(0)); \n', '        require(_to != address(this)); \n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function approve(address _spender, uint _amount) \n', '    public \n', '    returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token holder can notify a contract that it has been approved\n', '    // to spend _amount of tokens\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address _spender, uint _amount, bytes _data) \n', '    public \n', '    returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        ApproveAndCallFallBack(_spender).receiveApproval(msg.sender, _amount, this, _data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Removes senders tokens from supply.\n', '    // Lowers user balance and totalSupply by _amount\n', '    // ------------------------------------------------------------------------   \n', '    function burn(uint _amount) \n', '    public \n', '    returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        supply = supply.sub(_amount);\n', '        emit LogBurn(msg.sender, _amount);\n', '        emit Transfer(msg.sender, address(0), _amount);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // An approved sender can burn _amount tokens of user _from\n', '    // Lowers user balance and supply by _amount \n', '    // ------------------------------------------------------------------------    \n', '    function burnFrom(address _from, uint _amount) \n', '    public \n', '    returns (bool success) {\n', '        balances[_from] = balances[_from].sub(_amount);                         // Subtract from the targeted balance\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);             // Subtract from the sender&#39;s allowance\n', '        supply = supply.sub(_amount);                              // Update supply\n', '        emit LogBurn(_from, _amount);\n', '        emit Transfer(_from, address(0), _amount);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the number of tokens in circulation\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply()\n', '    public \n', '    view \n', '    returns (uint tokenSupply) { \n', '        return supply; \n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the token balance of user\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address _tokenHolder) \n', '    public \n', '    view \n', '    returns (uint balance) {\n', '        return balances[_tokenHolder];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns amount of tokens _spender is allowed to transfer or burn\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address _tokenHolder, address _spender) \n', '    public \n', '    view \n', '    returns (uint remaining) {\n', '        return allowed[_tokenHolder][_spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Fallback function\n', '    // Won&#39;t accept ETH\n', '    // ------------------------------------------------------------------------\n', '    function () \n', '    public \n', '    payable {\n', '        revert();\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Event: Logs the amount of tokens burned and the address of the burner\n', '    // ------------------------------------------------------------------------\n', '    event LogBurn(address indexed _burner, uint indexed _amountBurned); \n', '}\n', '\n', '// ------------------------------------------------------------------------\n', '// This contract is in-charge of receiving old MyBit tokens and returning\n', '// New MyBit tokens to users.\n', '// Note: Old tokens have 8 decimal places, while new tokens have 18 decimals\n', '// 1.00000000 OldMyBit == 36.000000000000000000 NewMyBit\n', '// ------------------------------------------------------------------------  \n', 'contract TokenSwap { \n', '  using SafeMath for uint256; \n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Token addresses\n', '  // ------------------------------------------------------------------------  \n', '  address public oldTokenAddress;\n', '  ERC20 public newToken; \n', '\n', '  // ------------------------------------------------------------------------\n', '  // Token Transition Info\n', '  // ------------------------------------------------------------------------  \n', '  uint256 public scalingFactor = 36;          // 1 OldMyBit = 36 NewMyBit\n', '  uint256 public tenDecimalPlaces = 10**10; \n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Old Token Supply \n', '  // ------------------------------------------------------------------------  \n', '  uint256 public oldCirculatingSupply;      // Old MyBit supply in circulation (8 decimals)\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // New Token Supply\n', '  // ------------------------------------------------------------------------  \n', '  uint256 public totalSupply = 18000000000000000 * tenDecimalPlaces;      // New token supply. (Moving from 8 decimal places to 18)\n', '  uint256 public circulatingSupply = 10123464384447336 * tenDecimalPlaces;   // New user supply. \n', '  uint256 public foundationSupply = totalSupply - circulatingSupply;      // Foundation supply. \n', '\n', '  // ------------------------------------------------------------------------\n', '  // Distribution numbers \n', '  // ------------------------------------------------------------------------\n', '  uint256 public tokensRedeemed = 0;    // Total number of new tokens redeemed.\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Double check that all variables are set properly before swapping tokens\n', '  // ------------------------------------------------------------------------\n', '  constructor(address _myBitFoundation, address _oldTokenAddress)\n', '  public { \n', '    oldTokenAddress = _oldTokenAddress; \n', '    oldCirculatingSupply = ERC20Interface(oldTokenAddress).totalSupply(); \n', '    assert ((circulatingSupply.div(oldCirculatingSupply.mul(tenDecimalPlaces))) == scalingFactor);\n', '    assert (oldCirculatingSupply.mul(scalingFactor.mul(tenDecimalPlaces)) == circulatingSupply); \n', '    newToken = new ERC20(totalSupply, "MyBit", 18, "MYB"); \n', '    newToken.transfer(_myBitFoundation, foundationSupply);\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Users can trade old MyBit tokens for new MyBit tokens here \n', '  // Must approve this contract as spender to swap tokens\n', '  // ------------------------------------------------------------------------\n', '  function swap(uint256 _amount) \n', '  public \n', '  noMint\n', '  returns (bool){ \n', '    require(ERC20Interface(oldTokenAddress).transferFrom(msg.sender, this, _amount));\n', '    uint256 newTokenAmount = _amount.mul(scalingFactor).mul(tenDecimalPlaces);   // Add 10 more decimals to number of tokens\n', '    assert(tokensRedeemed.add(newTokenAmount) <= circulatingSupply);       // redeemed tokens should never exceed circulatingSupply\n', '    tokensRedeemed = tokensRedeemed.add(newTokenAmount);\n', '    require(newToken.transfer(msg.sender, newTokenAmount));\n', '    emit LogTokenSwap(msg.sender, _amount, block.timestamp);\n', '    return true;\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Alias for swap(). Called by old token contract when approval to transfer \n', '  // tokens has been given. \n', '  // ------------------------------------------------------------------------\n', '  function receiveApproval(address _from, uint256 _amount, address _token, bytes _data)\n', '  public \n', '  noMint\n', '  returns (bool){ \n', '    require(_token == oldTokenAddress);\n', '    require(ERC20Interface(oldTokenAddress).transferFrom(_from, this, _amount));\n', '    uint256 newTokenAmount = _amount.mul(scalingFactor).mul(tenDecimalPlaces);   // Add 10 more decimals to number of tokens\n', '    assert(tokensRedeemed.add(newTokenAmount) <= circulatingSupply);    // redeemed tokens should never exceed circulatingSupply\n', '    tokensRedeemed = tokensRedeemed.add(newTokenAmount);\n', '    require(newToken.transfer(_from, newTokenAmount));\n', '    emit LogTokenSwap(_from, _amount, block.timestamp);\n', '    return true;\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Events \n', '  // ------------------------------------------------------------------------\n', '  event LogTokenSwap(address indexed _sender, uint256 indexed _amount, uint256 indexed _timestamp); \n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Modifiers \n', '  // ------------------------------------------------------------------------\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // This ensures that the owner of the previous token doesn&#39;t mint more \n', '  // tokens during swap\n', '  // ------------------------------------------------------------------------\n', '  modifier noMint { \n', '    require(oldCirculatingSupply == ERC20Interface(oldTokenAddress).totalSupply());\n', '    _;\n', '  }\n', '\n', '}']