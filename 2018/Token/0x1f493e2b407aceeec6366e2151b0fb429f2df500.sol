['pragma solidity ^0.4.4;\n', '\n', 'contract Token {\n', '\n', '    /// @return 返回token的发行量\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner 查询以太坊地址token余额\n', '    /// @return The balance 返回余额\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice msg.sender（交易发送者）发送 _value（一定数量）的 token 到 _to（接受者）  \n', '    /// @param _to 接收者的地址\n', '    /// @param _value 发送token的数量\n', '    /// @return 是否成功\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice 发送者 发送 _value（一定数量）的 token 到 _to（接受者）  \n', '    /// @param _from 发送者的地址\n', '    /// @param _to 接收者的地址\n', '    /// @param _value 发送的数量\n', '    /// @return 是否成功\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice 发行方 批准 一个地址发送一定数量的token\n', '    /// @param _spender 需要发送token的地址\n', '    /// @param _value 发送token的数量\n', '    /// @return 是否成功\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner 拥有token的地址\n', '    /// @param _spender 可以发送token的地址\n', '    /// @return 还允许发送的token的数量\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    /// 发送Token事件\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    /// 批准事件\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        //默认token发行量不能超过(2^256 - 1)\n', '        //如果你不设置发行量，并且随着时间的发型更多的token，需要确保没有超过最大值，使用下面的 if 语句\n', '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //向上面的方法一样，如果你想确保发行量不超过最大值\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', 'contract TIC is StandardToken { \n', '\n', '    string public name;                  \n', '    uint8 public decimals;              \n', '    string public symbol;                 \n', '    string public version = &#39;1.0&#39;; \n', '    uint256 public Rate;     \n', '    uint256 public totalEthInWei;      \n', '    address public fundsWallet;         \n', '    address public CandyBox;\n', '    address public TeamBox;\n', '\n', '\n', '    function TIC(\n', '        ) {\n', '        CandyBox = 0x94eE12284824C91dB533d4745cD02098d7284460;\n', '        TeamBox = 0xfaDB28B22b1b5579f877c78098948529175F81Eb;\n', '        totalSupply = 6000000000000000000000000000;                   \n', '        balances[msg.sender] = 5091000000000000000000000000;             \n', '        balances[CandyBox] = 9000000000000000000000000;  \n', '        balances[TeamBox] = 900000000000000000000000000;\n', '        name = "TIC";                                        \n', '        decimals = 18;                                  \n', '        symbol = "TIC";                                            \n', '        Rate = 50000;                                      \n', '        fundsWallet = msg.sender;                                   \n', '    }\n', '    \n', '    function setCurrentRate(uint256 _rate) public {\n', '        if(msg.sender != fundsWallet) { throw; }\n', '        Rate = _rate;\n', '    }    \n', '\n', '    function setCurrentVersion(string _ver) public {\n', '        if(msg.sender != fundsWallet) { throw; }\n', '        version = _ver;\n', '    }  \n', '\n', '    function() payable{\n', ' \n', '        totalEthInWei = totalEthInWei + msg.value;\n', '  \n', '        uint256 amount = msg.value * Rate;\n', '\n', '        require(balances[fundsWallet] >= amount);\n', '\n', '\n', '        balances[fundsWallet] = balances[fundsWallet] - amount;\n', '\n', '        balances[msg.sender] = balances[msg.sender] + amount;\n', '\n', '\n', '        Transfer(fundsWallet, msg.sender, amount); \n', '\n', ' \n', '        fundsWallet.transfer(msg.value);                               \n', '    }\n', '\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.4;\n', '\n', 'contract Token {\n', '\n', '    /// @return 返回token的发行量\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner 查询以太坊地址token余额\n', '    /// @return The balance 返回余额\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice msg.sender（交易发送者）发送 _value（一定数量）的 token 到 _to（接受者）  \n', '    /// @param _to 接收者的地址\n', '    /// @param _value 发送token的数量\n', '    /// @return 是否成功\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice 发送者 发送 _value（一定数量）的 token 到 _to（接受者）  \n', '    /// @param _from 发送者的地址\n', '    /// @param _to 接收者的地址\n', '    /// @param _value 发送的数量\n', '    /// @return 是否成功\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice 发行方 批准 一个地址发送一定数量的token\n', '    /// @param _spender 需要发送token的地址\n', '    /// @param _value 发送token的数量\n', '    /// @return 是否成功\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner 拥有token的地址\n', '    /// @param _spender 可以发送token的地址\n', '    /// @return 还允许发送的token的数量\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    /// 发送Token事件\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    /// 批准事件\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        //默认token发行量不能超过(2^256 - 1)\n', '        //如果你不设置发行量，并且随着时间的发型更多的token，需要确保没有超过最大值，使用下面的 if 语句\n', '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //向上面的方法一样，如果你想确保发行量不超过最大值\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', 'contract TIC is StandardToken { \n', '\n', '    string public name;                  \n', '    uint8 public decimals;              \n', '    string public symbol;                 \n', "    string public version = '1.0'; \n", '    uint256 public Rate;     \n', '    uint256 public totalEthInWei;      \n', '    address public fundsWallet;         \n', '    address public CandyBox;\n', '    address public TeamBox;\n', '\n', '\n', '    function TIC(\n', '        ) {\n', '        CandyBox = 0x94eE12284824C91dB533d4745cD02098d7284460;\n', '        TeamBox = 0xfaDB28B22b1b5579f877c78098948529175F81Eb;\n', '        totalSupply = 6000000000000000000000000000;                   \n', '        balances[msg.sender] = 5091000000000000000000000000;             \n', '        balances[CandyBox] = 9000000000000000000000000;  \n', '        balances[TeamBox] = 900000000000000000000000000;\n', '        name = "TIC";                                        \n', '        decimals = 18;                                  \n', '        symbol = "TIC";                                            \n', '        Rate = 50000;                                      \n', '        fundsWallet = msg.sender;                                   \n', '    }\n', '    \n', '    function setCurrentRate(uint256 _rate) public {\n', '        if(msg.sender != fundsWallet) { throw; }\n', '        Rate = _rate;\n', '    }    \n', '\n', '    function setCurrentVersion(string _ver) public {\n', '        if(msg.sender != fundsWallet) { throw; }\n', '        version = _ver;\n', '    }  \n', '\n', '    function() payable{\n', ' \n', '        totalEthInWei = totalEthInWei + msg.value;\n', '  \n', '        uint256 amount = msg.value * Rate;\n', '\n', '        require(balances[fundsWallet] >= amount);\n', '\n', '\n', '        balances[fundsWallet] = balances[fundsWallet] - amount;\n', '\n', '        balances[msg.sender] = balances[msg.sender] + amount;\n', '\n', '\n', '        Transfer(fundsWallet, msg.sender, amount); \n', '\n', ' \n', '        fundsWallet.transfer(msg.value);                               \n', '    }\n', '\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']
