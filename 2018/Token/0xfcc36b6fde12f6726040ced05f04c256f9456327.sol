['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract owned {\n', '    address public owner;\n', '    address private ownerCandidate;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwnerCandidate() {\n', '        assert(msg.sender == ownerCandidate);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address candidate) external onlyOwner {\n', '        ownerCandidate = candidate;\n', '    }\n', '\n', '    function acceptOwnership() external onlyOwnerCandidate {\n', '        owner = ownerCandidate;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract SafeMath {\n', '    function safeMul(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeDiv(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a / b;\n', '        assert(b == 0);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint a, uint b) pure internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Token is SafeMath, owned {\n', '\n', '    string public name;    //  token name\n', '    string public symbol;      //  token symbol\n', '    uint public decimals = 8;  //  token digit\n', '\n', '    mapping (address => uint) public balanceOf;\n', '    mapping (address => mapping (address => uint)) public allowance;\n', '    mapping (address => uint) limitAddress;\n', '\n', '    uint public totalSupply = 1 * 10000 * 10000 * 10 ** uint256(decimals);\n', '\n', '    modifier validAddress(address _address) {\n', '        assert(0x0 != _address);\n', '        _;\n', '    }\n', '\n', '    function addLimitAddress(address _a)\n', '        public\n', '        validAddress(_a)\n', '        onlyOwner\n', '    {\n', '        limitAddress[_a] = 1;\n', '    }\n', '\n', '    function delLitAddress(address _a)\n', '        public\n', '        validAddress(_a)\n', '        onlyOwner\n', '    {\n', '        limitAddress[_a] = 0;\n', '    }\n', '\n', '    function Token(string _name, string _symbol)\n', '        public\n', '    {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        owner = msg.sender;\n', '        balanceOf[this] = totalSupply;\n', '        Transfer(0x0, this, totalSupply);\n', '    }\n', '\n', '    function transfer(address _to, uint _value)\n', '        public\n', '        validAddress(_to)\n', '        returns (bool success)\n', '    {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function batchtransfer(address[] _to, uint256[] _amount) public returns(bool success) {\n', '        for(uint i = 0; i < _to.length; i++){\n', '            require(transfer(_to[i], _amount[i]));\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function transferInner(address _to, uint _value)\n', '        private\n', '        returns (bool success)\n', '    {\n', '        balanceOf[this] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(this, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        public\n', '        validAddress(_from)\n', '        validAddress(_to)\n', '        returns (bool success)\n', '    {\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        balanceOf[_to] += _value;\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint _value)\n', '        public\n', '        validAddress(_spender)\n', '        returns (bool success)\n', '    {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function ()\n', '        public\n', '        payable\n', '    {\n', '\n', '    }\n', '\n', '    function mint(address _to, uint _amount) public validAddress(_to)\n', '    {\n', '        //white address\n', '        if(limitAddress[msg.sender] != 1) return;\n', '        // send token 1:10000\n', '        uint supply = _amount;\n', '        // overflow\n', '        if(balanceOf[this] < supply) {\n', '            supply = balanceOf[this];\n', '        }\n', '        require(transferInner(_to, supply));\n', '        //notify\n', '        Mint(_to, supply);\n', '    }\n', '\n', '    function withdraw(uint amount)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(this.balance >= amount);\n', '        msg.sender.transfer(amount);\n', '    }\n', '\n', '    event Mint(address _to, uint _amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '}']