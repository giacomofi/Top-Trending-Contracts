['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', ' \n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', ' \n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', ' \n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', ' \n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', ' \n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address internal owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '  \n', '}\n', ' \n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', ' \n', 'contract MintableToken is StandardToken, Ownable {\n', '    \n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  event MintStarted();\n', ' \n', '  bool public mintingFinished = false;\n', ' \n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', ' \n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', ' \n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '  \n', '  /**\n', '   * @dev Function to start minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function startMinting() public onlyOwner returns (bool) {\n', '    mintingFinished = false;\n', '    emit MintStarted();\n', '    return true;\n', '  }\n', '  \n', '}\n', '\n', 'contract KassotBasicToken is MintableToken {\n', '    \n', '  string public constant name = "Kassot Token";  \n', '  string public constant symbol = "KATOK";  \n', '  uint8 public constant decimals = 18;\n', '  \n', '  uint public constant decimalMultiply = 1000000000000000000;  \n', '  \n', '}\n', ' \n', '/*\n', ' * @title KassotToken\n', ' * @dev Kassot token crowdsale contract\n', ' * @dev Author: Alexander Kazorin <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f998929883968b9097b99e94989095d79a9694">[email&#160;protected]</a>>\n', ' */ \n', 'contract KassotToken is ERC20, Ownable {\n', '  \n', '  using SafeMath for uint;\n', '  \n', '  bool public saleFinished = false;\n', '  address internal multisig;\n', '  address internal restricted;\n', '  uint public restrictedPercent;\n', '  uint public hardcap;\n', '  uint public softcap;\n', '  uint public firstBonusPercent;\n', '  uint public secondBonusPercent;\n', '  uint public thirdBonusPercent;\n', '  uint public rate;                       // Price (%rate% KST = 1 ETH)\n', '  uint public currentRound;\n', '  bool public allowRefund = false;        // Set to true if under softcap\n', '  KassotBasicToken internal token = new KassotBasicToken();\n', '  mapping (uint => mapping (address => uint)) public balances;\n', '  mapping(uint => uint) internal bonuses;\n', '  mapping(uint => uint) internal amounts;\n', '\n', '  constructor(address _multisig, address _restricted) public {\n', '    multisig = _multisig;\n', '    restricted = _restricted;\n', '    \n', '    // Settings for first round\n', '    restrictedPercent = 10;\n', '    hardcap = 900 * 1 ether;\n', '    softcap = 30 * 1 ether;\n', '    rate = 112600 * token.decimalMultiply();\n', '    currentRound = 1;\n', '    firstBonusPercent = 50;\n', '    secondBonusPercent = 25;\n', '    thirdBonusPercent = 10;\n', '  }\n', '\n', '  modifier saleIsOn() {\n', '    require(!saleFinished);\n', '    _;\n', '  }\n', '\n', '  modifier isUnderHardCap() {\n', '    require(address(this).balance <= hardcap);\n', '    _;\n', '  }\n', '  \n', '  // ERC20 Inteface methods\n', '  function name() public view returns (string) {\n', '    return token.name();\n', '  }\n', '  \n', '  function symbol() public view returns (string) {\n', '    return token.symbol();\n', '  }\n', '  \n', '  function decimals() public view returns (uint8) {\n', '    return token.decimals();\n', '  }\n', '  \n', '  function totalSupply() public view returns (uint256) {\n', '    return token.totalSupply();\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    return token.transfer(_to, _value);\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return token.balanceOf(_owner);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    return token.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    return token.approve(_spender, _value);\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return token.allowance(_owner, _spender);\n', '  }\n', '  // End of ERC20 Inteface methods\n', '\n', '  function setMultisig(address _multisig) public onlyOwner returns (bool) {\n', '    multisig = _multisig;\n', '    return true;\n', '  }\n', '  \n', '  function setRestricted(address _restricted) public onlyOwner returns (bool) {\n', '    restricted = _restricted;\n', '    return true;\n', '  }\n', '  \n', '  function setRestrictedPercent(uint _restrictedPercent) public onlyOwner returns (bool) {\n', '    restrictedPercent = _restrictedPercent;\n', '    return true;\n', '  }\n', '  \n', '  function setHardcap(uint _hardcap) public onlyOwner returns (bool) {\n', '    hardcap = _hardcap;\n', '    return true;\n', '  }\n', '  \n', '  function setSoftcap(uint _softcap) public onlyOwner returns (bool) {\n', '    softcap = _softcap;\n', '    return true;\n', '  }\n', '  \n', '  function setRate(uint _rate) public onlyOwner returns (bool) {\n', '    rate = _rate;\n', '    return true;\n', '  }\n', '  \n', '  function setCurrentRound(uint _currentRound) public onlyOwner returns (bool) {\n', '    currentRound = _currentRound;\n', '    return true;\n', '  }\n', '  \n', '  function setFirstBonusPercent(uint _firstBonusPercent) public onlyOwner returns (bool) {\n', '    firstBonusPercent = _firstBonusPercent;\n', '    return true;\n', '  }\n', '  \n', '  function setSecondBonusPercent(uint _secondBonusPercent) public onlyOwner returns (bool) {\n', '    secondBonusPercent = _secondBonusPercent;\n', '    return true;\n', '  }\n', '  \n', '  function setThirdBonusPercent(uint _thirdBonusPercent) public onlyOwner returns (bool) {\n', '    thirdBonusPercent = _thirdBonusPercent;\n', '    return true;\n', '  }\n', '  \n', '  function getMultisig() public view onlyOwner returns (address) {\n', '    // only owner can show address for safety reasons\n', '    return multisig;\n', '  }\n', '  \n', '  function getRestricted() public view onlyOwner returns (address) {\n', '    // only owner can show address for safety reasons\n', '    return restricted;\n', '  }\n', '\n', '  function refund() public {\n', '    require(allowRefund);\n', '    uint value = balances[currentRound][msg.sender]; \n', '    balances[currentRound][msg.sender] = 0; \n', '    msg.sender.transfer(value); \n', '  }\n', '\n', '  function finishSale() public onlyOwner {\n', '    if (address(this).balance > softcap) {\n', '      multisig.transfer(address(this).balance);\n', '      uint issuedTokenSupply = token.totalSupply();\n', '      uint restrictedTokens = issuedTokenSupply.mul(restrictedPercent).div(100);\n', '      token.mint(restricted, restrictedTokens);\n', '    } else {\n', '      allowRefund = true;\n', '    }\n', '    token.finishMinting();\n', '    saleFinished = true;\n', '  }\n', '  \n', '  function startSale() public onlyOwner {\n', '    token.startMinting();\n', '    allowRefund = false;\n', '    saleFinished = false;\n', '  }\n', '\n', '  function calculateTokens(uint _amount, uint _stage, uint _stageAmount) public returns (uint) {\n', '    bonuses[1] = firstBonusPercent;\n', '    bonuses[2] = secondBonusPercent;\n', '    bonuses[3] = thirdBonusPercent;\n', '    bonuses[4] = 0;\n', '    \n', '    amounts[1] = 0;\n', '    amounts[2] = 0;\n', '    amounts[3] = 0;\n', '    amounts[4] = 0;\n', '    \n', '    int amount = int(_amount);\n', '    \n', '    uint i = _stage;\n', '    while (amount > 0) {\n', '      if (i > 3) {\n', '        amounts[i] = uint(amount);\n', '        break;\n', '      }\n', '      if (amount - int(_stageAmount) > 0) {\n', '        amounts[i] = _stageAmount;\n', '        amount -= int(_stageAmount);\n', '        i++;\n', '      } else {\n', '        amounts[i] = uint(amount);\n', '        break;\n', '      }\n', '    }\n', '    \n', '    uint tokens = 0;\n', '    uint bonusTokens = 0;\n', '    uint _tokens = 0;\n', '    for (i = _stage; i <= 4; i++) {\n', '      if (amounts[i] == 0) {\n', '        break;\n', '      }\n', '      _tokens = rate.mul(amounts[i]).div(1 ether);\n', '      bonusTokens = _tokens * bonuses[i] / 100;\n', '      tokens += _tokens + bonusTokens;\n', '    }\n', '    \n', '    return tokens;\n', '  }\n', '  \n', '  function createTokens() public isUnderHardCap saleIsOn payable {\n', '    uint amount = msg.value;\n', '    uint tokens = 0;    \n', '    uint stageAmount = hardcap.div(4);\n', '    \n', '    if (address(this).balance <= stageAmount) {\n', '      tokens = calculateTokens(amount, 1, stageAmount);\n', '    } else if (address(this).balance <= stageAmount * 2) {\n', '      tokens = calculateTokens(amount, 2, stageAmount);\n', '    } else if (address(this).balance <= stageAmount * 3) {\n', '      tokens = calculateTokens(amount, 3, stageAmount);\n', '    } else {\n', '      tokens = calculateTokens(amount, 4, stageAmount);\n', '    }\n', '    \n', '    token.mint(msg.sender, tokens);\n', '    balances[currentRound][msg.sender] = balances[currentRound][msg.sender].add(amount);\n', '  }\n', '\n', '  function() external payable {\n', '    createTokens();\n', '  }\n', '  \n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', ' \n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', ' \n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', ' \n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', ' \n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', ' \n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address internal owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '  \n', '}\n', ' \n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', ' \n', 'contract MintableToken is StandardToken, Ownable {\n', '    \n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  event MintStarted();\n', ' \n', '  bool public mintingFinished = false;\n', ' \n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', ' \n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', ' \n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '  \n', '  /**\n', '   * @dev Function to start minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function startMinting() public onlyOwner returns (bool) {\n', '    mintingFinished = false;\n', '    emit MintStarted();\n', '    return true;\n', '  }\n', '  \n', '}\n', '\n', 'contract KassotBasicToken is MintableToken {\n', '    \n', '  string public constant name = "Kassot Token";  \n', '  string public constant symbol = "KATOK";  \n', '  uint8 public constant decimals = 18;\n', '  \n', '  uint public constant decimalMultiply = 1000000000000000000;  \n', '  \n', '}\n', ' \n', '/*\n', ' * @title KassotToken\n', ' * @dev Kassot token crowdsale contract\n', ' * @dev Author: Alexander Kazorin <akazorin@gmail.com>\n', ' */ \n', 'contract KassotToken is ERC20, Ownable {\n', '  \n', '  using SafeMath for uint;\n', '  \n', '  bool public saleFinished = false;\n', '  address internal multisig;\n', '  address internal restricted;\n', '  uint public restrictedPercent;\n', '  uint public hardcap;\n', '  uint public softcap;\n', '  uint public firstBonusPercent;\n', '  uint public secondBonusPercent;\n', '  uint public thirdBonusPercent;\n', '  uint public rate;                       // Price (%rate% KST = 1 ETH)\n', '  uint public currentRound;\n', '  bool public allowRefund = false;        // Set to true if under softcap\n', '  KassotBasicToken internal token = new KassotBasicToken();\n', '  mapping (uint => mapping (address => uint)) public balances;\n', '  mapping(uint => uint) internal bonuses;\n', '  mapping(uint => uint) internal amounts;\n', '\n', '  constructor(address _multisig, address _restricted) public {\n', '    multisig = _multisig;\n', '    restricted = _restricted;\n', '    \n', '    // Settings for first round\n', '    restrictedPercent = 10;\n', '    hardcap = 900 * 1 ether;\n', '    softcap = 30 * 1 ether;\n', '    rate = 112600 * token.decimalMultiply();\n', '    currentRound = 1;\n', '    firstBonusPercent = 50;\n', '    secondBonusPercent = 25;\n', '    thirdBonusPercent = 10;\n', '  }\n', '\n', '  modifier saleIsOn() {\n', '    require(!saleFinished);\n', '    _;\n', '  }\n', '\n', '  modifier isUnderHardCap() {\n', '    require(address(this).balance <= hardcap);\n', '    _;\n', '  }\n', '  \n', '  // ERC20 Inteface methods\n', '  function name() public view returns (string) {\n', '    return token.name();\n', '  }\n', '  \n', '  function symbol() public view returns (string) {\n', '    return token.symbol();\n', '  }\n', '  \n', '  function decimals() public view returns (uint8) {\n', '    return token.decimals();\n', '  }\n', '  \n', '  function totalSupply() public view returns (uint256) {\n', '    return token.totalSupply();\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    return token.transfer(_to, _value);\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return token.balanceOf(_owner);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    return token.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    return token.approve(_spender, _value);\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return token.allowance(_owner, _spender);\n', '  }\n', '  // End of ERC20 Inteface methods\n', '\n', '  function setMultisig(address _multisig) public onlyOwner returns (bool) {\n', '    multisig = _multisig;\n', '    return true;\n', '  }\n', '  \n', '  function setRestricted(address _restricted) public onlyOwner returns (bool) {\n', '    restricted = _restricted;\n', '    return true;\n', '  }\n', '  \n', '  function setRestrictedPercent(uint _restrictedPercent) public onlyOwner returns (bool) {\n', '    restrictedPercent = _restrictedPercent;\n', '    return true;\n', '  }\n', '  \n', '  function setHardcap(uint _hardcap) public onlyOwner returns (bool) {\n', '    hardcap = _hardcap;\n', '    return true;\n', '  }\n', '  \n', '  function setSoftcap(uint _softcap) public onlyOwner returns (bool) {\n', '    softcap = _softcap;\n', '    return true;\n', '  }\n', '  \n', '  function setRate(uint _rate) public onlyOwner returns (bool) {\n', '    rate = _rate;\n', '    return true;\n', '  }\n', '  \n', '  function setCurrentRound(uint _currentRound) public onlyOwner returns (bool) {\n', '    currentRound = _currentRound;\n', '    return true;\n', '  }\n', '  \n', '  function setFirstBonusPercent(uint _firstBonusPercent) public onlyOwner returns (bool) {\n', '    firstBonusPercent = _firstBonusPercent;\n', '    return true;\n', '  }\n', '  \n', '  function setSecondBonusPercent(uint _secondBonusPercent) public onlyOwner returns (bool) {\n', '    secondBonusPercent = _secondBonusPercent;\n', '    return true;\n', '  }\n', '  \n', '  function setThirdBonusPercent(uint _thirdBonusPercent) public onlyOwner returns (bool) {\n', '    thirdBonusPercent = _thirdBonusPercent;\n', '    return true;\n', '  }\n', '  \n', '  function getMultisig() public view onlyOwner returns (address) {\n', '    // only owner can show address for safety reasons\n', '    return multisig;\n', '  }\n', '  \n', '  function getRestricted() public view onlyOwner returns (address) {\n', '    // only owner can show address for safety reasons\n', '    return restricted;\n', '  }\n', '\n', '  function refund() public {\n', '    require(allowRefund);\n', '    uint value = balances[currentRound][msg.sender]; \n', '    balances[currentRound][msg.sender] = 0; \n', '    msg.sender.transfer(value); \n', '  }\n', '\n', '  function finishSale() public onlyOwner {\n', '    if (address(this).balance > softcap) {\n', '      multisig.transfer(address(this).balance);\n', '      uint issuedTokenSupply = token.totalSupply();\n', '      uint restrictedTokens = issuedTokenSupply.mul(restrictedPercent).div(100);\n', '      token.mint(restricted, restrictedTokens);\n', '    } else {\n', '      allowRefund = true;\n', '    }\n', '    token.finishMinting();\n', '    saleFinished = true;\n', '  }\n', '  \n', '  function startSale() public onlyOwner {\n', '    token.startMinting();\n', '    allowRefund = false;\n', '    saleFinished = false;\n', '  }\n', '\n', '  function calculateTokens(uint _amount, uint _stage, uint _stageAmount) public returns (uint) {\n', '    bonuses[1] = firstBonusPercent;\n', '    bonuses[2] = secondBonusPercent;\n', '    bonuses[3] = thirdBonusPercent;\n', '    bonuses[4] = 0;\n', '    \n', '    amounts[1] = 0;\n', '    amounts[2] = 0;\n', '    amounts[3] = 0;\n', '    amounts[4] = 0;\n', '    \n', '    int amount = int(_amount);\n', '    \n', '    uint i = _stage;\n', '    while (amount > 0) {\n', '      if (i > 3) {\n', '        amounts[i] = uint(amount);\n', '        break;\n', '      }\n', '      if (amount - int(_stageAmount) > 0) {\n', '        amounts[i] = _stageAmount;\n', '        amount -= int(_stageAmount);\n', '        i++;\n', '      } else {\n', '        amounts[i] = uint(amount);\n', '        break;\n', '      }\n', '    }\n', '    \n', '    uint tokens = 0;\n', '    uint bonusTokens = 0;\n', '    uint _tokens = 0;\n', '    for (i = _stage; i <= 4; i++) {\n', '      if (amounts[i] == 0) {\n', '        break;\n', '      }\n', '      _tokens = rate.mul(amounts[i]).div(1 ether);\n', '      bonusTokens = _tokens * bonuses[i] / 100;\n', '      tokens += _tokens + bonusTokens;\n', '    }\n', '    \n', '    return tokens;\n', '  }\n', '  \n', '  function createTokens() public isUnderHardCap saleIsOn payable {\n', '    uint amount = msg.value;\n', '    uint tokens = 0;    \n', '    uint stageAmount = hardcap.div(4);\n', '    \n', '    if (address(this).balance <= stageAmount) {\n', '      tokens = calculateTokens(amount, 1, stageAmount);\n', '    } else if (address(this).balance <= stageAmount * 2) {\n', '      tokens = calculateTokens(amount, 2, stageAmount);\n', '    } else if (address(this).balance <= stageAmount * 3) {\n', '      tokens = calculateTokens(amount, 3, stageAmount);\n', '    } else {\n', '      tokens = calculateTokens(amount, 4, stageAmount);\n', '    }\n', '    \n', '    token.mint(msg.sender, tokens);\n', '    balances[currentRound][msg.sender] = balances[currentRound][msg.sender].add(amount);\n', '  }\n', '\n', '  function() external payable {\n', '    createTokens();\n', '  }\n', '  \n', '}']
