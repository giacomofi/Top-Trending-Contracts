['pragma solidity ^0.4.24;\n', '\n', 'contract Token\n', '{\n', '\t/// @return total amount of tokens\n', '\tfunction totalSupply() constant public returns (uint256 supply);\n', '\n', '\t/// @param _owner The address from which the balance will be retrieved\n', '\t/// @return The balance\n', '\tfunction balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '\t/// @notice send `_value` token to `_to` from `msg.sender`\n', '\t/// @param _to The address of the recipient\n', '\t/// @param _value The amount of token to be transferred\n', '\t/// @return Whether the transfer was successful or not\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '\t/// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '\t/// @param _from The address of the sender\n', '\t/// @param _to The address of the recipient\n', '\t/// @param _value The amount of token to be transferred\n', '\t/// @return Whether the transfer was successful or not\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '\t/// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '\t/// @param _spender The address of the account able to transfer the tokens\n', '\t/// @param _value The amount of wei to be approved for transfer\n', '\t/// @return Whether the approval was successful or not\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '\t/// @param _owner The address of the account owning tokens\n', '\t/// @param _spender The address of the account able to transfer the tokens\n', '\t/// @return Amount of remaining tokens allowed to spent\n', '\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token\n', '{\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool success)\n', '\t{\n', '\t\t//Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '\t\t//If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn&#39;t wrap.\n', '\t\t//Replace the if with this one instead.\n', '\t\t//if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '\t\tif (balances[msg.sender] >= _value && _value > 0)\n', '\t\t{\n', '\t\t\tbalances[msg.sender] -= _value;\n', '\t\t\tbalances[_to] += _value;\n', '\t\t\temit Transfer(msg.sender, _to, _value);\n', '\t\t\treturn true;\n', '\t\t}\n', '\t\telse\n', '\t\t{\n', '\t\t\treturn false;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success)\n', '\t{\n', '\t\t//same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '\t\t//if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '\t\tif (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '\t\t\tbalances[_to] += _value;\n', '\t\t\tbalances[_from] -= _value;\n', '\t\t\tallowed[_from][msg.sender] -= _value;\n', '\t\t\temit Transfer(_from, _to, _value);\n', '\t\t\treturn true;\n', '\t\t} else { return false; }\n', '\t}\n', '\n', '\tfunction balanceOf(address _owner) public constant returns (uint256 balance)\n', '\t{\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool success)\n', '\t{\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\temit Approval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining)\n', '\t{\n', '\t  return allowed[_owner][_spender];\n', '\t}\n', '\n', '        function totalSupply() constant public returns (uint256 supply)\n', '        {\n', '          return _totalSupply;\n', '        }\n', '\n', '\tmapping (address => uint256) balances;\n', '\tmapping (address => mapping (address => uint256)) allowed;\n', '\tuint256 _totalSupply;\n', '}\n', '\n', '//Interface contract for approval callback\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', 'contract MulaCoin is StandardToken\n', '{\n', '\n', '\t/* Public variables of the token */\n', '\n', '\t/*\n', '\tNOTE:\n', '\tThe following variables are OPTIONAL vanities. One does not have to include them.\n', '\tThey allow one to customise the token contract & in no way influences the core functionality.\n', '\tSome wallets/interfaces might not even bother to look at this information.\n', '\t*/\n', '\tstring public name;                   // Token Name\n', '\tuint8 public decimals;                // How many decimals to show. To be standard complicant keep it 18\n', '\tstring public symbol;                 // An identifier: eg SBX, XPR etc..\n', '\tstring public version = &#39;1.0&#39;;\n', '\tuint256 public unitsOneEthCanBuy;     // How many units of your coin can be bought by 1 ETH?\n', '\tuint256 public totalEthInWei;         // WEI is the smallest unit of ETH (the equivalent of cent in USD or satoshi in BTC). We&#39;ll store the total ETH raised via our ICO here.\n', '\taddress public fundsWallet;           // Where should the raised ETH go?\n', '\n', '\n', '\n', '        modifier onlyFundOwner () {\n', '           require(msg.sender == fundsWallet);\n', '           _;\n', '        }\n', '\n', '\t// This is a constructor function\n', '\t// which means the following function name has to match the contract name declared above\n', '\tconstructor() public\n', '\t{\n', '\t\t_totalSupply \t\t = 3000000000000000000000000000;  // Update total supply\n', '\t\tbalances[msg.sender]     = _totalSupply;             // Give the creator all initial tokens.\n', '\t\tname \t\t\t\t = "MULA COIN";                   // Set the name\n', '\t\tdecimals \t\t\t = 18;                            // Amount of decimals\n', '\t\tsymbol \t\t\t\t = "MUT";                         // Set the symbol\n', '\t\tunitsOneEthCanBuy \t = 4356;                          // Set the price\n', '\t\tfundsWallet \t\t = msg.sender;                    // The owner of the contract gets ETH\n', '\t}\n', '\n', '\tfunction() payable public\n', '\t{\n', '\t\ttotalEthInWei = totalEthInWei + msg.value;\n', '\t\tuint256 amount = msg.value * unitsOneEthCanBuy;\n', '\n', '\t\tif (balances[fundsWallet] < amount)\n', '\t\t{\n', '\t\t\trevert();\n', '\t\t}\n', '\n', '\t\tbalances[fundsWallet] = balances[fundsWallet] - amount;\n', '\t\tbalances[msg.sender] = balances[msg.sender] + amount;\n', '\n', '\t\temit Transfer(fundsWallet, msg.sender, amount); // Broadcast a message to the blockchain\n', '\n', '\t\t//Transfer ether to fundsWallet\n', '\t\tfundsWallet.transfer(msg.value);\n', '\t}\n', '\n', '        //change the price\n', '        function changePrice(uint256 _newPrice) public onlyFundOwner\n', '        {\n', '                unitsOneEthCanBuy = _newPrice;\n', '        }\n', '\n', '\t/* Approves and then calls the receiving contract */\n', '\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success)\n', '\t{\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\temit Approval(msg.sender, _spender, _value);\n', '\n', '                ApproveAndCallFallBack(_spender).receiveApproval(msg.sender, _value, this, _extraData);\n', '\t\treturn true;\n', '\t}\n', '}']