['pragma solidity 0.4.24;\n', '\n', '// File: contracts/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/FlyCoin.sol\n', '\n', '/**\n', ' * FLYCoin ERC20 token\n', ' * Based on the OpenZeppelin Standard Token\n', ' */\n', '\n', 'contract MigrationSource {\n', '  function vacate(address _addr) public returns (uint256 o_balance);\n', '}\n', '\n', 'contract FLYCoin is MigrationSource, ERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  string public constant name = "FLYCoin";\n', '  string public constant symbol = "FLY";\n', '  \n', '  // picked to have 15 digits which will fit in a double full precision\n', '  uint8 public constant decimals = 5;\n', '  \n', '  uint internal totalSupply_ = 3000000000000000;\n', '\n', '  address public owner;\n', '\n', '  mapping(address => User) public users;\n', '  \n', '  MigrationSource public migrateFrom;\n', '  address public migrateTo;\n', '\n', '  struct User {\n', '    uint256 balance;\n', '      \n', '    mapping(address => uint256) authorized;\n', '  }\n', '\n', '  modifier only_owner(){\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  modifier value_less_than_balance(address _user, uint256 _value){\n', '    User storage user = users[_user];\n', '    require(_value <= user.balance);\n', '    _;\n', '  }\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  event OptIn(address indexed owner, uint256 value);\n', '  event Vacate(address indexed owner, uint256 value);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '    User storage user = users[owner];\n', '    user.balance = totalSupply_;\n', '    emit Transfer(0, owner, totalSupply_);\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256){\n', '    return totalSupply_;\n', '  }\n', '\n', '  function balanceOf(address _addr) public view returns (uint256 balance) {\n', '    return users[_addr].balance;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public value_less_than_balance(msg.sender, _value) returns (bool success) {\n', '    User storage user = users[msg.sender];\n', '    user.balance = user.balance.sub(_value);\n', '    users[_to].balance = users[_to].balance.add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public value_less_than_balance(msg.sender, _value) returns (bool success) {\n', '    User storage user = users[_from];\n', '    user.balance = user.balance.sub(_value);\n', '    users[_to].balance = users[_to].balance.add(_value);\n', '    user.authorized[msg.sender] = user.authorized[msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success){\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (users[msg.sender].authorized[_spender] == 0));\n', '    users[msg.sender].authorized[_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _user, address _spender) public view returns (uint256){\n', '    return users[_user].authorized[_spender];\n', '  }\n', '\n', '  function setOwner(address _addr) public only_owner {\n', '    owner = _addr;\n', '  }\n', '\n', '  // Sets the contract address that this contract will migrate\n', '  // from when the optIn() interface is used.\n', '  //\n', '  function setMigrateFrom(address _addr) public only_owner {\n', '    require(migrateFrom == MigrationSource(0));\n', '    migrateFrom = MigrationSource(_addr);\n', '  }\n', '\n', '  // Sets the contract address that is allowed to call vacate on this\n', '  // contract.\n', '  //\n', '  function setMigrateTo(address _addr) public only_owner {\n', '    migrateTo = _addr;\n', '  }\n', '\n', '  // Called by a token holding address, this method migrates the\n', '  // tokens from an older version of the contract to this version.\n', '  //\n', '  // NOTE - allowances (approve) are *not* transferred.  If you gave\n', '  // another address an allowance in the old contract you need to\n', '  // re-approve it in the new contract.\n', '  //\n', '  function optIn() public returns (bool success) {\n', '    require(migrateFrom != MigrationSource(0));\n', '    User storage user = users[msg.sender];\n', '    \n', '    uint256 balance = migrateFrom.vacate(msg.sender);\n', '\n', '    emit OptIn(msg.sender, balance);\n', '    \n', '    user.balance = user.balance.add(balance);\n', '    totalSupply_ = totalSupply_.add(balance);\n', '\n', '    return true;\n', '  }\n', '\n', '  // The vacate method is called by a newer version of the FLYCoin\n', '  // contract to extract the token state for an address and migrate it\n', '  // to the new contract.\n', '  //\n', '  function vacate(address _addr) public returns (uint256 o_balance){\n', '    require(msg.sender == migrateTo);\n', '    User storage user = users[_addr];\n', '\n', '    require(user.balance > 0);\n', '\n', '    o_balance = user.balance;\n', '    totalSupply_ = totalSupply_.sub(user.balance);\n', '    user.balance = 0;\n', '\n', '    emit Vacate(_addr, o_balance);\n', '  }\n', '\n', '  // Don&#39;t accept ETH. Starting from Solidity 0.4.0, contracts without a fallback function automatically revert payments\n', '}']
['pragma solidity 0.4.24;\n', '\n', '// File: contracts/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/FlyCoin.sol\n', '\n', '/**\n', ' * FLYCoin ERC20 token\n', ' * Based on the OpenZeppelin Standard Token\n', ' */\n', '\n', 'contract MigrationSource {\n', '  function vacate(address _addr) public returns (uint256 o_balance);\n', '}\n', '\n', 'contract FLYCoin is MigrationSource, ERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  string public constant name = "FLYCoin";\n', '  string public constant symbol = "FLY";\n', '  \n', '  // picked to have 15 digits which will fit in a double full precision\n', '  uint8 public constant decimals = 5;\n', '  \n', '  uint internal totalSupply_ = 3000000000000000;\n', '\n', '  address public owner;\n', '\n', '  mapping(address => User) public users;\n', '  \n', '  MigrationSource public migrateFrom;\n', '  address public migrateTo;\n', '\n', '  struct User {\n', '    uint256 balance;\n', '      \n', '    mapping(address => uint256) authorized;\n', '  }\n', '\n', '  modifier only_owner(){\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  modifier value_less_than_balance(address _user, uint256 _value){\n', '    User storage user = users[_user];\n', '    require(_value <= user.balance);\n', '    _;\n', '  }\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  event OptIn(address indexed owner, uint256 value);\n', '  event Vacate(address indexed owner, uint256 value);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '    User storage user = users[owner];\n', '    user.balance = totalSupply_;\n', '    emit Transfer(0, owner, totalSupply_);\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256){\n', '    return totalSupply_;\n', '  }\n', '\n', '  function balanceOf(address _addr) public view returns (uint256 balance) {\n', '    return users[_addr].balance;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public value_less_than_balance(msg.sender, _value) returns (bool success) {\n', '    User storage user = users[msg.sender];\n', '    user.balance = user.balance.sub(_value);\n', '    users[_to].balance = users[_to].balance.add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public value_less_than_balance(msg.sender, _value) returns (bool success) {\n', '    User storage user = users[_from];\n', '    user.balance = user.balance.sub(_value);\n', '    users[_to].balance = users[_to].balance.add(_value);\n', '    user.authorized[msg.sender] = user.authorized[msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success){\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (users[msg.sender].authorized[_spender] == 0));\n', '    users[msg.sender].authorized[_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _user, address _spender) public view returns (uint256){\n', '    return users[_user].authorized[_spender];\n', '  }\n', '\n', '  function setOwner(address _addr) public only_owner {\n', '    owner = _addr;\n', '  }\n', '\n', '  // Sets the contract address that this contract will migrate\n', '  // from when the optIn() interface is used.\n', '  //\n', '  function setMigrateFrom(address _addr) public only_owner {\n', '    require(migrateFrom == MigrationSource(0));\n', '    migrateFrom = MigrationSource(_addr);\n', '  }\n', '\n', '  // Sets the contract address that is allowed to call vacate on this\n', '  // contract.\n', '  //\n', '  function setMigrateTo(address _addr) public only_owner {\n', '    migrateTo = _addr;\n', '  }\n', '\n', '  // Called by a token holding address, this method migrates the\n', '  // tokens from an older version of the contract to this version.\n', '  //\n', '  // NOTE - allowances (approve) are *not* transferred.  If you gave\n', '  // another address an allowance in the old contract you need to\n', '  // re-approve it in the new contract.\n', '  //\n', '  function optIn() public returns (bool success) {\n', '    require(migrateFrom != MigrationSource(0));\n', '    User storage user = users[msg.sender];\n', '    \n', '    uint256 balance = migrateFrom.vacate(msg.sender);\n', '\n', '    emit OptIn(msg.sender, balance);\n', '    \n', '    user.balance = user.balance.add(balance);\n', '    totalSupply_ = totalSupply_.add(balance);\n', '\n', '    return true;\n', '  }\n', '\n', '  // The vacate method is called by a newer version of the FLYCoin\n', '  // contract to extract the token state for an address and migrate it\n', '  // to the new contract.\n', '  //\n', '  function vacate(address _addr) public returns (uint256 o_balance){\n', '    require(msg.sender == migrateTo);\n', '    User storage user = users[_addr];\n', '\n', '    require(user.balance > 0);\n', '\n', '    o_balance = user.balance;\n', '    totalSupply_ = totalSupply_.sub(user.balance);\n', '    user.balance = 0;\n', '\n', '    emit Vacate(_addr, o_balance);\n', '  }\n', '\n', "  // Don't accept ETH. Starting from Solidity 0.4.0, contracts without a fallback function automatically revert payments\n", '}']
