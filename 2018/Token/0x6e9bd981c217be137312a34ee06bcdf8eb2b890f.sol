['pragma solidity ^0.4.20;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract TrineChain is ERC20 {\n', '    \n', '    using SafeMath for uint256; \n', '    address owner = msg.sender; \n', '\n', '    mapping (address => uint256) balances; \n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping (address => uint256) locknum; \n', '\n', '    string public constant name = "TrineChain";\n', '    string public constant symbol = "TRCON";\n', '    uint public constant decimals = 18;\n', '    uint256 _Rate = 10 ** decimals;    \n', '    uint256 public totalSupply = 1000000000 * _Rate;\n', '    \n', '\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Locked(address indexed to, uint256 amount);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '     function TrineChain() public {\n', '        balances[owner] = totalSupply;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0) && newOwner != owner) {\n', '             owner = newOwner;   \n', '        }\n', '    }\n', '\n', '\n', '    function lock(address _to, uint256 _amount) private returns (bool) {\n', '        require(owner != _to);\n', '        require(_amount >= 0);\n', '        require(_amount * _Rate  <= balances[_to]);\n', '        locknum[_to]=_amount * _Rate;\n', '        Locked(_to, _amount * _Rate);\n', '        return true;\n', '    }\n', '\n', '    function locked(address[] addresses, uint256[] amounts) onlyOwner public {\n', '\n', '        require(addresses.length <= 255);\n', '        require(addresses.length == amounts.length);\n', '        \n', '        for (uint8 i = 0; i < addresses.length; i++) {\n', '            lock(addresses[i], amounts[i]);\n', '        }\n', '    }\n', '\n', '    function distr(address _to, uint256 _amount) private returns (bool) {\n', '        require(owner != _to);\n', '        require(_amount > 0);\n', '        require(balances[owner] >= _amount * _Rate);\n', '\n', '        balances[owner] = balances[owner].sub(_amount * _Rate);\n', '        balances[_to] = balances[_to].add(_amount * _Rate);\n', '        locknum[_to] += lockcheck(_amount) * _Rate;\n', '        \n', '        Transfer(owner, _to, _amount * _Rate);\n', '        return true;\n', '    }\n', '\n', '    function lockcheck(uint256 _amount) internal pure returns (uint256) {\n', '        if(_amount < 3000){\n', '        return _amount * 4/10;\n', '        }\n', '        if(_amount >= 3000 && _amount < 10000){\n', '        return _amount * 5/10;\n', '        }\n', '        if(_amount >= 10000 && _amount < 50000){\n', '        return _amount * 6/10;\n', '        }\n', '        if(_amount >= 50000 && _amount < 500000){\n', '        return _amount * 7/10;\n', '        }\n', '        if(_amount >= 500000){\n', '        return _amount * 8/10;\n', '        }\n', '    }\n', '    \n', '    function distribute(address[] addresses, uint256[] amounts) onlyOwner public {\n', '\n', '        require(addresses.length <= 255);\n', '        require(addresses.length == amounts.length);\n', '        \n', '        for (uint8 i = 0; i < addresses.length; i++) {\n', '            distr(addresses[i], amounts[i]);\n', '        }\n', '    }\n', '\n', '    function lockedOf(address _owner) constant public returns (uint256) {\n', '        return locknum[_owner];\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '\t    return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n', '\n', '        require(_to != address(0));\n', '        require(_amount <= balances[msg.sender]);\n', '        require(_amount <= balances[msg.sender].sub(locknum[msg.sender]));\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n', '\n', '        require(_to != address(0));\n', '        require(_amount <= balances[_from]);\n', '        require(_amount <= balances[_from].sub(locknum[_from]));\n', '        require(_amount <= allowed[_from][msg.sender]);\n', '        \n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']
['pragma solidity ^0.4.20;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract TrineChain is ERC20 {\n', '    \n', '    using SafeMath for uint256; \n', '    address owner = msg.sender; \n', '\n', '    mapping (address => uint256) balances; \n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping (address => uint256) locknum; \n', '\n', '    string public constant name = "TrineChain";\n', '    string public constant symbol = "TRCON";\n', '    uint public constant decimals = 18;\n', '    uint256 _Rate = 10 ** decimals;    \n', '    uint256 public totalSupply = 1000000000 * _Rate;\n', '    \n', '\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Locked(address indexed to, uint256 amount);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '     function TrineChain() public {\n', '        balances[owner] = totalSupply;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0) && newOwner != owner) {\n', '             owner = newOwner;   \n', '        }\n', '    }\n', '\n', '\n', '    function lock(address _to, uint256 _amount) private returns (bool) {\n', '        require(owner != _to);\n', '        require(_amount >= 0);\n', '        require(_amount * _Rate  <= balances[_to]);\n', '        locknum[_to]=_amount * _Rate;\n', '        Locked(_to, _amount * _Rate);\n', '        return true;\n', '    }\n', '\n', '    function locked(address[] addresses, uint256[] amounts) onlyOwner public {\n', '\n', '        require(addresses.length <= 255);\n', '        require(addresses.length == amounts.length);\n', '        \n', '        for (uint8 i = 0; i < addresses.length; i++) {\n', '            lock(addresses[i], amounts[i]);\n', '        }\n', '    }\n', '\n', '    function distr(address _to, uint256 _amount) private returns (bool) {\n', '        require(owner != _to);\n', '        require(_amount > 0);\n', '        require(balances[owner] >= _amount * _Rate);\n', '\n', '        balances[owner] = balances[owner].sub(_amount * _Rate);\n', '        balances[_to] = balances[_to].add(_amount * _Rate);\n', '        locknum[_to] += lockcheck(_amount) * _Rate;\n', '        \n', '        Transfer(owner, _to, _amount * _Rate);\n', '        return true;\n', '    }\n', '\n', '    function lockcheck(uint256 _amount) internal pure returns (uint256) {\n', '        if(_amount < 3000){\n', '        return _amount * 4/10;\n', '        }\n', '        if(_amount >= 3000 && _amount < 10000){\n', '        return _amount * 5/10;\n', '        }\n', '        if(_amount >= 10000 && _amount < 50000){\n', '        return _amount * 6/10;\n', '        }\n', '        if(_amount >= 50000 && _amount < 500000){\n', '        return _amount * 7/10;\n', '        }\n', '        if(_amount >= 500000){\n', '        return _amount * 8/10;\n', '        }\n', '    }\n', '    \n', '    function distribute(address[] addresses, uint256[] amounts) onlyOwner public {\n', '\n', '        require(addresses.length <= 255);\n', '        require(addresses.length == amounts.length);\n', '        \n', '        for (uint8 i = 0; i < addresses.length; i++) {\n', '            distr(addresses[i], amounts[i]);\n', '        }\n', '    }\n', '\n', '    function lockedOf(address _owner) constant public returns (uint256) {\n', '        return locknum[_owner];\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '\t    return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n', '\n', '        require(_to != address(0));\n', '        require(_amount <= balances[msg.sender]);\n', '        require(_amount <= balances[msg.sender].sub(locknum[msg.sender]));\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n', '\n', '        require(_to != address(0));\n', '        require(_amount <= balances[_from]);\n', '        require(_amount <= balances[_from].sub(locknum[_from]));\n', '        require(_amount <= allowed[_from][msg.sender]);\n', '        \n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']
