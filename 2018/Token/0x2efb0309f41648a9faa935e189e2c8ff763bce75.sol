['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title Global Mobile Industry Service Ecosystem Chain \n', ' * @dev Developed By Jack 5/15 2018 \n', ' * @dev contact:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a3c9c2c0c88dc8ccc6e3c4cec2cacf8dc0ccce">[email&#160;protected]</a>\n', ' */\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function isOwner() internal view returns(bool success) {\n', '        if (msg.sender == owner) return true;\n', '        return false;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' * @dev Implementation of the basic standard token.\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract MSCE is Ownable, StandardToken {\n', '    using SafeMath for uint256;\n', '\n', '    uint8 public constant TOKEN_DECIMALS = 18;\n', '\n', '    string public name = "Mobile Ecosystem"; \n', '    string public symbol = "MSCE";\n', '    uint8 public decimals = TOKEN_DECIMALS;\n', '\n', '\n', '    uint256 public totalSupply = 500000000 *(10**uint256(TOKEN_DECIMALS)); \n', '    uint256 public soldSupply = 0; \n', '    uint256 public sellSupply = 0; \n', '    uint256 public buySupply = 0; \n', '    bool public stopSell = true;\n', '    bool public stopBuy = false;\n', '\n', '    uint256 public crowdsaleStartTime = block.timestamp;\n', '    uint256 public crowdsaleEndTime = 1526831999;\n', '\n', '    uint256 public crowdsaleTotal = 2000*40000*(10**18);\n', '\n', '\n', '    uint256 public buyExchangeRate = 40000;   \n', '    uint256 public sellExchangeRate = 100000;  \n', '    address public ethFundDeposit;  \n', '\n', '\n', '    bool public allowTransfers = true; \n', '\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    bool public enableInternalLock = true; \n', '    mapping (address => bool) public internalLockAccount;\n', '\n', '    mapping (address => uint256) public releaseLockAccount;\n', '\n', '\n', '    event FrozenFunds(address target, bool frozen);\n', '    event IncreaseSoldSaleSupply(uint256 _value);\n', '    event DecreaseSoldSaleSupply(uint256 _value);\n', '\n', '    function MSCE() public {\n', '\n', '\n', '        balances[msg.sender] = totalSupply;             \n', '\n', '        ethFundDeposit = msg.sender;                      \n', '        allowTransfers = true;\n', '    }\n', '\n', '    function _isUserInternalLock() internal view returns (bool) {\n', '\n', '        return getAccountLockState(msg.sender);\n', '\n', '    }\n', '\n', '    function increaseSoldSaleSupply (uint256 _value) onlyOwner public {\n', '        require (_value + soldSupply < totalSupply);\n', '        soldSupply = soldSupply.add(_value);\n', '        IncreaseSoldSaleSupply(_value);\n', '    }\n', '\n', '    function decreaseSoldSaleSupply (uint256 _value) onlyOwner public {\n', '        require (soldSupply - _value > 0);\n', '        soldSupply = soldSupply.sub(_value);\n', '        DecreaseSoldSaleSupply(_value);\n', '    }\n', '\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balances[target] = balances[target].add(mintedAmount);\n', '        totalSupply = totalSupply.add(mintedAmount);\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    function destroyToken(address target, uint256 amount) onlyOwner public {\n', '        balances[target] = balances[target].sub(amount);\n', '        totalSupply = totalSupply.sub(amount);\n', '        Transfer(target, this, amount);\n', '        Transfer(this, 0, amount);\n', '    }\n', '\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '\n', '    function setEthFundDeposit(address _ethFundDeposit) onlyOwner public {\n', '        require(_ethFundDeposit != address(0));\n', '        ethFundDeposit = _ethFundDeposit;\n', '    }\n', '\n', '    function transferETH() onlyOwner public {\n', '        require(ethFundDeposit != address(0));\n', '        require(this.balance != 0);\n', '        require(ethFundDeposit.send(this.balance));\n', '    }\n', '\n', '\n', '    function setExchangeRate(uint256 _sellExchangeRate, uint256 _buyExchangeRate) onlyOwner public {\n', '        sellExchangeRate = _sellExchangeRate;\n', '        buyExchangeRate = _buyExchangeRate;\n', '    }\n', '\n', '    function setExchangeStatus(bool _stopSell, bool _stopBuy) onlyOwner public {\n', '        stopSell = _stopSell;\n', '        stopBuy = _stopBuy;\n', '    }\n', '\n', '    function setName(string _name) onlyOwner public {\n', '        name = _name;\n', '    }\n', '\n', '    function setSymbol(string _symbol) onlyOwner public {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function setAllowTransfers(bool _allowTransfers) onlyOwner public {\n', '        allowTransfers = _allowTransfers;\n', '    }\n', '\n', '    function transferFromAdmin(address _from, address _to, uint256 _value) onlyOwner public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function setEnableInternalLock(bool _isEnable) onlyOwner public {\n', '        enableInternalLock = _isEnable;\n', '    }\n', '\n', '    function lockInternalAccount(address _target, bool _lock, uint256 _releaseTime) onlyOwner public {\n', '        require(_target != address(0));\n', '\n', '        internalLockAccount[_target] = _lock;\n', '        releaseLockAccount[_target] = _releaseTime;\n', '\n', '    }\n', '\n', '    function getAccountUnlockTime(address _target) public view returns(uint256) {\n', '\n', '        return releaseLockAccount[_target];\n', '\n', '    }\n', '    function getAccountLockState(address _target) public view returns(bool) {\n', '        if(enableInternalLock && internalLockAccount[_target]){\n', '            if((releaseLockAccount[_target] > 0)&&(releaseLockAccount[_target]<block.timestamp)){       \n', '                return false;\n', '            }          \n', '            return true;\n', '        }\n', '        return false;\n', '\n', '    }\n', '\n', '    function internalSellTokenFromAdmin(address _to, uint256 _value, bool _lock, uint256 _releaseTime) onlyOwner public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[owner]);\n', '\n', '        balances[owner] = balances[owner].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        soldSupply = soldSupply.add(_value);\n', '        sellSupply = sellSupply.add(_value);\n', '\n', '        Transfer(owner, _to, _value);\n', '        \n', '        lockInternalAccount(_to, _lock, _releaseTime);\n', '\n', '        return true;\n', '    }\n', '\n', '    /***************************************************/\n', '    /*              BASE Functions                     */\n', '    /***************************************************/\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        if (!isOwner()) {\n', '            require (allowTransfers);\n', '            require(!frozenAccount[_from]);                                         \n', '            require(!frozenAccount[_to]);                                        \n', '            require(!_isUserInternalLock());                                       \n', '        }\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if (!isOwner()) {\n', '            require (allowTransfers);\n', '            require(!frozenAccount[msg.sender]);                                       \n', '            require(!frozenAccount[_to]);                                             \n', '            require(!_isUserInternalLock());                                           \n', '        }\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function () internal payable{\n', '\n', '        uint256 currentTime = block.timestamp;\n', '        require((currentTime>crowdsaleStartTime)&&(currentTime<crowdsaleEndTime));\n', '        require(crowdsaleTotal>0);\n', '\n', '        require(buy());\n', '\n', '        crowdsaleTotal = crowdsaleTotal.sub(msg.value.mul(buyExchangeRate));\n', '\n', '    }\n', '\n', '    function buy() payable public returns (bool){\n', '\n', '\n', '        uint256 amount = msg.value.mul(buyExchangeRate);\n', '\n', '        require(!stopBuy);\n', '        require(amount <= balances[owner]);\n', '\n', '        balances[owner] = balances[owner].sub(amount);\n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '\n', '        soldSupply = soldSupply.add(amount);\n', '        buySupply = buySupply.add(amount);\n', '\n', '        Transfer(owner, msg.sender, amount);\n', '        return true;\n', '    }\n', '\n', '    function sell(uint256 amount) public {\n', '        uint256 ethAmount = amount.div(sellExchangeRate);\n', '        require(!stopSell);\n', '        require(this.balance >= ethAmount);      \n', '        require(ethAmount >= 1);      \n', '\n', '        require(balances[msg.sender] >= amount);                 \n', '        require(balances[owner] + amount > balances[owner]);       \n', '        require(!frozenAccount[msg.sender]);                       \n', '        require(!_isUserInternalLock());                                          \n', '\n', '        balances[owner] = balances[owner].add(amount);\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '\n', '        soldSupply = soldSupply.sub(amount);\n', '        sellSupply = sellSupply.add(amount);\n', '\n', '        Transfer(msg.sender, owner, amount);\n', '\n', '        msg.sender.transfer(ethAmount); \n', '    }\n', '\n', '    function setCrowdsaleStartTime(uint256 _crowdsaleStartTime) onlyOwner public {\n', '        crowdsaleStartTime = _crowdsaleStartTime;\n', '    }\n', '\n', '    function setCrowdsaleEndTime(uint256 _crowdsaleEndTime) onlyOwner public {\n', '        crowdsaleEndTime = _crowdsaleEndTime;\n', '    }\n', '   \n', '\n', '    function setCrowdsaleTotal(uint256 _crowdsaleTotal) onlyOwner public {\n', '        crowdsaleTotal = _crowdsaleTotal;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title Global Mobile Industry Service Ecosystem Chain \n', ' * @dev Developed By Jack 5/15 2018 \n', ' * @dev contact:jack.koe@gmail.com\n', ' */\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function isOwner() internal view returns(bool success) {\n', '        if (msg.sender == owner) return true;\n', '        return false;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' * @dev Implementation of the basic standard token.\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract MSCE is Ownable, StandardToken {\n', '    using SafeMath for uint256;\n', '\n', '    uint8 public constant TOKEN_DECIMALS = 18;\n', '\n', '    string public name = "Mobile Ecosystem"; \n', '    string public symbol = "MSCE";\n', '    uint8 public decimals = TOKEN_DECIMALS;\n', '\n', '\n', '    uint256 public totalSupply = 500000000 *(10**uint256(TOKEN_DECIMALS)); \n', '    uint256 public soldSupply = 0; \n', '    uint256 public sellSupply = 0; \n', '    uint256 public buySupply = 0; \n', '    bool public stopSell = true;\n', '    bool public stopBuy = false;\n', '\n', '    uint256 public crowdsaleStartTime = block.timestamp;\n', '    uint256 public crowdsaleEndTime = 1526831999;\n', '\n', '    uint256 public crowdsaleTotal = 2000*40000*(10**18);\n', '\n', '\n', '    uint256 public buyExchangeRate = 40000;   \n', '    uint256 public sellExchangeRate = 100000;  \n', '    address public ethFundDeposit;  \n', '\n', '\n', '    bool public allowTransfers = true; \n', '\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    bool public enableInternalLock = true; \n', '    mapping (address => bool) public internalLockAccount;\n', '\n', '    mapping (address => uint256) public releaseLockAccount;\n', '\n', '\n', '    event FrozenFunds(address target, bool frozen);\n', '    event IncreaseSoldSaleSupply(uint256 _value);\n', '    event DecreaseSoldSaleSupply(uint256 _value);\n', '\n', '    function MSCE() public {\n', '\n', '\n', '        balances[msg.sender] = totalSupply;             \n', '\n', '        ethFundDeposit = msg.sender;                      \n', '        allowTransfers = true;\n', '    }\n', '\n', '    function _isUserInternalLock() internal view returns (bool) {\n', '\n', '        return getAccountLockState(msg.sender);\n', '\n', '    }\n', '\n', '    function increaseSoldSaleSupply (uint256 _value) onlyOwner public {\n', '        require (_value + soldSupply < totalSupply);\n', '        soldSupply = soldSupply.add(_value);\n', '        IncreaseSoldSaleSupply(_value);\n', '    }\n', '\n', '    function decreaseSoldSaleSupply (uint256 _value) onlyOwner public {\n', '        require (soldSupply - _value > 0);\n', '        soldSupply = soldSupply.sub(_value);\n', '        DecreaseSoldSaleSupply(_value);\n', '    }\n', '\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balances[target] = balances[target].add(mintedAmount);\n', '        totalSupply = totalSupply.add(mintedAmount);\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    function destroyToken(address target, uint256 amount) onlyOwner public {\n', '        balances[target] = balances[target].sub(amount);\n', '        totalSupply = totalSupply.sub(amount);\n', '        Transfer(target, this, amount);\n', '        Transfer(this, 0, amount);\n', '    }\n', '\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '\n', '    function setEthFundDeposit(address _ethFundDeposit) onlyOwner public {\n', '        require(_ethFundDeposit != address(0));\n', '        ethFundDeposit = _ethFundDeposit;\n', '    }\n', '\n', '    function transferETH() onlyOwner public {\n', '        require(ethFundDeposit != address(0));\n', '        require(this.balance != 0);\n', '        require(ethFundDeposit.send(this.balance));\n', '    }\n', '\n', '\n', '    function setExchangeRate(uint256 _sellExchangeRate, uint256 _buyExchangeRate) onlyOwner public {\n', '        sellExchangeRate = _sellExchangeRate;\n', '        buyExchangeRate = _buyExchangeRate;\n', '    }\n', '\n', '    function setExchangeStatus(bool _stopSell, bool _stopBuy) onlyOwner public {\n', '        stopSell = _stopSell;\n', '        stopBuy = _stopBuy;\n', '    }\n', '\n', '    function setName(string _name) onlyOwner public {\n', '        name = _name;\n', '    }\n', '\n', '    function setSymbol(string _symbol) onlyOwner public {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function setAllowTransfers(bool _allowTransfers) onlyOwner public {\n', '        allowTransfers = _allowTransfers;\n', '    }\n', '\n', '    function transferFromAdmin(address _from, address _to, uint256 _value) onlyOwner public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function setEnableInternalLock(bool _isEnable) onlyOwner public {\n', '        enableInternalLock = _isEnable;\n', '    }\n', '\n', '    function lockInternalAccount(address _target, bool _lock, uint256 _releaseTime) onlyOwner public {\n', '        require(_target != address(0));\n', '\n', '        internalLockAccount[_target] = _lock;\n', '        releaseLockAccount[_target] = _releaseTime;\n', '\n', '    }\n', '\n', '    function getAccountUnlockTime(address _target) public view returns(uint256) {\n', '\n', '        return releaseLockAccount[_target];\n', '\n', '    }\n', '    function getAccountLockState(address _target) public view returns(bool) {\n', '        if(enableInternalLock && internalLockAccount[_target]){\n', '            if((releaseLockAccount[_target] > 0)&&(releaseLockAccount[_target]<block.timestamp)){       \n', '                return false;\n', '            }          \n', '            return true;\n', '        }\n', '        return false;\n', '\n', '    }\n', '\n', '    function internalSellTokenFromAdmin(address _to, uint256 _value, bool _lock, uint256 _releaseTime) onlyOwner public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[owner]);\n', '\n', '        balances[owner] = balances[owner].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        soldSupply = soldSupply.add(_value);\n', '        sellSupply = sellSupply.add(_value);\n', '\n', '        Transfer(owner, _to, _value);\n', '        \n', '        lockInternalAccount(_to, _lock, _releaseTime);\n', '\n', '        return true;\n', '    }\n', '\n', '    /***************************************************/\n', '    /*              BASE Functions                     */\n', '    /***************************************************/\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        if (!isOwner()) {\n', '            require (allowTransfers);\n', '            require(!frozenAccount[_from]);                                         \n', '            require(!frozenAccount[_to]);                                        \n', '            require(!_isUserInternalLock());                                       \n', '        }\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if (!isOwner()) {\n', '            require (allowTransfers);\n', '            require(!frozenAccount[msg.sender]);                                       \n', '            require(!frozenAccount[_to]);                                             \n', '            require(!_isUserInternalLock());                                           \n', '        }\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function () internal payable{\n', '\n', '        uint256 currentTime = block.timestamp;\n', '        require((currentTime>crowdsaleStartTime)&&(currentTime<crowdsaleEndTime));\n', '        require(crowdsaleTotal>0);\n', '\n', '        require(buy());\n', '\n', '        crowdsaleTotal = crowdsaleTotal.sub(msg.value.mul(buyExchangeRate));\n', '\n', '    }\n', '\n', '    function buy() payable public returns (bool){\n', '\n', '\n', '        uint256 amount = msg.value.mul(buyExchangeRate);\n', '\n', '        require(!stopBuy);\n', '        require(amount <= balances[owner]);\n', '\n', '        balances[owner] = balances[owner].sub(amount);\n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '\n', '        soldSupply = soldSupply.add(amount);\n', '        buySupply = buySupply.add(amount);\n', '\n', '        Transfer(owner, msg.sender, amount);\n', '        return true;\n', '    }\n', '\n', '    function sell(uint256 amount) public {\n', '        uint256 ethAmount = amount.div(sellExchangeRate);\n', '        require(!stopSell);\n', '        require(this.balance >= ethAmount);      \n', '        require(ethAmount >= 1);      \n', '\n', '        require(balances[msg.sender] >= amount);                 \n', '        require(balances[owner] + amount > balances[owner]);       \n', '        require(!frozenAccount[msg.sender]);                       \n', '        require(!_isUserInternalLock());                                          \n', '\n', '        balances[owner] = balances[owner].add(amount);\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '\n', '        soldSupply = soldSupply.sub(amount);\n', '        sellSupply = sellSupply.add(amount);\n', '\n', '        Transfer(msg.sender, owner, amount);\n', '\n', '        msg.sender.transfer(ethAmount); \n', '    }\n', '\n', '    function setCrowdsaleStartTime(uint256 _crowdsaleStartTime) onlyOwner public {\n', '        crowdsaleStartTime = _crowdsaleStartTime;\n', '    }\n', '\n', '    function setCrowdsaleEndTime(uint256 _crowdsaleEndTime) onlyOwner public {\n', '        crowdsaleEndTime = _crowdsaleEndTime;\n', '    }\n', '   \n', '\n', '    function setCrowdsaleTotal(uint256 _crowdsaleTotal) onlyOwner public {\n', '        crowdsaleTotal = _crowdsaleTotal;\n', '    }\n', '}']
