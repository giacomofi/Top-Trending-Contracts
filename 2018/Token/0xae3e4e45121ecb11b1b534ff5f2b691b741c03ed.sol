['pragma solidity ^0.4.11;\n', '\n', '\n', 'contract SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '}\n', '\n', '// contract ERC20 {\n', '//     function totalSupply() constant returns (uint supply);\n', '//     function balanceOf( address who ) constant returns (uint value);\n', '//     function allowance( address owner, address spender ) constant returns (uint _allowance);\n', '\n', '//     function transfer( address to, uint value) returns (bool ok);\n', '//     function transferFrom( address from, address to, uint value) returns (bool ok);\n', '//     function approve( address spender, uint value ) returns (bool ok);\n', '\n', '//     event Transfer( address indexed from, address indexed to, uint value);\n', '//     event Approval( address indexed owner, address indexed spender, uint value);\n', '// }\n', '\n', '//https://github.com/ethereum/ethereum-org/blob/master/solidity/token-erc20.sol\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', 'contract TokenERC20 {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Erc20Dist is SafeMath {\n', '    TokenERC20  public  _erc20token; //被操作的erc20代币\n', '\n', '    address public _ownerDist;// 这个合约最高权限人，开始是创建者，可以移交给他人\n', '    uint256 public _distDay;//发布时间\n', '    uint256 public _mode = 0;//模型是1表示使用模式1，2表示使用模式2\n', '    uint256 public _lockAllAmount;//锁仓的总量\n', '\n', '    struct Detail{//发放情况详情结构体声明\n', '        address founder;//创始人地址\n', '        uint256 lockDay;//锁仓时间\n', '        uint256 lockPercent;//锁仓百分比数（0到100之间）\n', '        uint256 distAmount;//总分配数量\n', '        uint256 lockAmount;//锁住的代币总量\n', '        uint256 initAmount;//初始款的代币量\n', '        uint256 distRate;//锁仓解锁后每天分配代币百分比数（按锁住的总额算，0到100之间）\n', '        uint256 oneDayTransferAmount;//锁仓解锁后每天应发放的代币数量\n', '        uint256 transferedAmount;//已转账代币数量\n', '        uint256 lastTransferDay;//最后一笔代币分配的时间\n', '        bool isFinish;// 是否本人都发放完成\n', '        bool isCancelDist;//是否同意撤销发行\n', '    }\n', '    Detail private detail = Detail(address(0),0,0,0,0,0,0,0,0,0, false, false);//中间变量初始化，用来在函数中临时承接计算结果，以便传送给_details\n', '    Detail[] public _details;//发放情况详情列表,并初始化为空值\n', '\tuint256 public _detailsLength = 0;//发放详情长度\n', '\n', '    bool public _fDist = false;// 是否已经发布过的标识符号\n', '    bool public _fConfig = false;// 是否已经配置过的标识符号\n', '    bool public _fFinish = false;// 是否所有人都发放完成\n', '    bool public _fCancelDist = false;// 是否撤销发行\n', '    \n', '    function Erc20Dist() public {\n', '        _ownerDist = msg.sender; // 默认创建者为权限最高人\n', '    }\n', '\n', '    function () public{}//callback函数，由于合约没有eth价值传入，所以没有什么安全问题\n', '\n', '    // 设置合约所有者\n', '    function setOwner(address owner_) public {\n', '        require (msg.sender == _ownerDist, "you must _ownerDist");// 必须原来所有者授权\n', '        require(_fDist == false, "not dist"); // 必须还没开始发布\n', '        require(_fConfig == false, "not config");// 必须还没配置过\n', '        _ownerDist = owner_;\n', '    }\n', '    //设置操作代币函数\n', '    function setErc20(TokenERC20  erc20Token) public {\n', '        require (msg.sender == _ownerDist, "you must _ownerDist");\n', '        require(address(_erc20token) == address(0),"you have set erc20Token");//必须之前没有设置过\n', '        require(erc20Token.balanceOf(address(this)) > 0, "this contract must own tokens");\n', '        _erc20token = erc20Token;//在全局设置erc20代币\n', '        _lockAllAmount = erc20Token.balanceOf(address(this));\n', '    }\n', '\n', '    // 撤销发行，必须所有参与人同意，才能撤销发行\n', '    function cancelDist() public {\n', '        require(_fDist == true, "must dist"); // 必须发布\n', '        require(_fCancelDist == false, "must not cancel dist");\n', '\n', '        // 循环判断是否\n', '        for(uint256 i=0;i<_details.length;i++){\n', '            // 判断是否发行者\n', '            if ( _details[i].founder == msg.sender ) {\n', '                // 设置标志\n', '                _details[i].isCancelDist = true;\n', '                break;\n', '            }\n', '        }\n', '        // 更新状态\n', '        updateCancelDistFlag();\n', '        if (_fCancelDist == true) {\n', '            require(_erc20token.balanceOf(address(this)) > 0, "must have balance");\n', '            // 返回所有代币给最高权限人\n', '            _erc20token.transfer(\n', '                _ownerDist, \n', '                _erc20token.balanceOf(address(this))\n', '            );\n', '        }\n', '    }\n', '\n', '    // 更新是否撤销发行标志\n', '    function updateCancelDistFlag() private {\n', '        bool allCancelDist = true;\n', '        for(uint256 i=0; i<_details.length; i++){\n', '            // 判断有没有人没撤销\n', '            if (_details[i].isCancelDist == false) {\n', '                allCancelDist = false;\n', '                break;\n', '            }\n', '        }\n', '        // 更新合约完成标志\n', '        _fCancelDist = allCancelDist;\n', '    }\n', '\n', '    // 还没调用发行情况下，返还所有代币，到最高权限账号，并且清除配置\n', '    function clearConfig() public {\n', '        require (msg.sender == _ownerDist, "you must _ownerDist");\n', '        require(_fDist == false, "not dist"); // 必须还没开始发布\n', '        require(address(_erc20token) != address(0),"you must set erc20Token");//必须之前设置过\n', '        require(_erc20token.balanceOf(address(this)) > 0, "must have balance");\n', '        // 返回所有代币给最高权限人\n', '        _erc20token.transfer(\n', '            msg.sender, \n', '            _erc20token.balanceOf(address(this))\n', '        );\n', '        // 清空变量\n', '        _lockAllAmount = 0;\n', '        TokenERC20  nullErc20token;\n', '        _erc20token = nullErc20token;\n', '        Detail[] nullDetails;\n', '        _details = nullDetails;\n', '        _detailsLength = 0;\n', '        _mode = 0;\n', '        _fConfig = false;\n', '    }\n', '\n', '    // 客户之前多转到合约的币，可以通过这个接口，提取回最高权限人账号，但必须在合约执行完成之后\n', '    function withDraw() public {\n', '        require (msg.sender == _ownerDist, "you must _ownerDist");\n', '        require(_fFinish == true, "dist must be finished"); // 合约必须执行完毕\n', '        require(address(_erc20token) != address(0),"you must set erc20Token");//必须之前设置过\n', '        require(_erc20token.balanceOf(address(this)) > 0, "must have balance");\n', '        // 返回所有代币给最高权限人\n', '        _erc20token.transfer(\n', '            _ownerDist, \n', '            _erc20token.balanceOf(address(this))\n', '        );\n', '    }\n', '\n', '    //配置相关创始人及代币发放、锁仓信息等相关情况的函数。auth认证，必须是合约持有人才能进行该操作\n', '    function configContract(uint256 mode,address[] founders,uint256[] distWad18Amounts,uint256[] lockPercents,uint256[] lockDays,uint256[] distRates) public {\n', '    //函数变量说明：founders（创始人地址列表），\n', '    //distWad18Amounts（总发放数量列表（不输入18位小数位）），\n', '    //lockPercents（锁仓百分比列表（值在0到100之间）），\n', '    //lockDays（锁仓天数列表）,distRates（每天发放数占锁仓总数的万分比数列表（值在0到10000之间））\n', '        require (msg.sender == _ownerDist, "you must _ownerDist");\n', '        require(mode==1||mode==2,"there is only mode 1 or 2");//只有模式1和2两种申领余款方式\n', '        _mode = mode;//将申领方式注册到全局\n', '        require(_fConfig == false,"you have configured it already");//必须还未配置过\n', '        require(address(_erc20token) != address(0), "you must setErc20 first");//必须已经设置好被操作erc20代币\n', '        require(founders.length!=0,"array length can not be zero");//创始人列表不能为空\n', '        require(founders.length==distWad18Amounts.length,"founders length dismatch distWad18Amounts length");//创始人列表长度必须等于发放数量列表长度\n', '        require(distWad18Amounts.length==lockPercents.length,"distWad18Amounts length dismatch lockPercents length");//发放数量列表长度必须等于锁仓百分比列表长度\n', '        require(lockPercents.length==lockDays.length,"lockPercents length dismatch lockDays length");//锁仓百分比列表长度必须等于锁仓天数列表长度\n', '        require(lockDays.length==distRates.length,"lockDays length dismatch distRates length");//锁仓百分比列表长度必须等于每日发放比率列表长度\n', '\n', '        //遍历\n', '        for(uint256 i=0;i<founders.length;i++){\n', '            require(distWad18Amounts[i]!=0,"dist token amount can not be zero");//确保发放数量不为0\n', '            for(uint256 j=0;j<i;j++){\n', '                require(founders[i]!=founders[j],"you could not give the same address of founders");//必须确保创始人中没有地址相同的\n', '            }\n', '        }\n', '        \n', '\n', '        //以下为循环中服务全局变量的中间临时变量\n', '        uint256 totalAmount = 0;//发放代币总量\n', '        uint256 distAmount = 0;//给当前创始人发放代币量（带18位精度）\n', '        uint256 oneDayTransferAmount = 0;//解锁后每天应发放的数量（将在后续进行计算）\n', '        uint256 lockAmount = 0;//当前创始人锁住的代币量\n', '        uint256 initAmount = 0;//当前创始人初始款代币量\n', '\n', '        //遍历\n', '        for(uint256 k=0;k<lockPercents.length;k++){\n', '            require(lockPercents[k]<=100,"lockPercents unit must <= 100");//锁仓百分比数必须小于等于100\n', '            require(distRates[k]<=10000,"distRates unit must <= 10000");//发放万分比数必须小于等于10000\n', '            distAmount = mul(distWad18Amounts[k],10**18);//给当前创始人发放代币量（带18位精度）\n', '            totalAmount = add(totalAmount,distAmount);//发放总量累加\n', '            lockAmount = div(mul(lockPercents[k],distAmount),100);//锁住的代币数量\n', '            initAmount = sub(distAmount, lockAmount);//初始款的代币数量\n', '            oneDayTransferAmount = div(mul(distRates[k],lockAmount),10000);//解锁后每天应发放的数量\n', '\n', '            //下面为中间变量detail的9个成员赋值\n', '            detail.founder = founders[k];\n', '            detail.lockDay = lockDays[k];\n', '            detail.lockPercent = lockPercents[k];\n', '            detail.distRate = distRates[k];\n', '            detail.distAmount = distAmount;\n', '            detail.lockAmount = lockAmount;\n', '            detail.initAmount = initAmount;\n', '            detail.oneDayTransferAmount = oneDayTransferAmount;\n', '            detail.transferedAmount = 0;//初始还未开始发放，所以已分配数量为0\n', '            detail.lastTransferDay = 0;//初始还未开始发放，最后的发放日设为0\n', '            detail.isFinish = false;\n', '            detail.isCancelDist = false;\n', '            //将赋好的中间信息压入全局信息列表_details\n', '            _details.push(detail);\n', '        }\n', '        require(totalAmount <= _lockAllAmount, "distributed total amount should be equal lock amount");// 发行总量应该等于锁仓总量\n', '        require(totalAmount <= _erc20token.totalSupply(),"distributed total amount should be less than token totalSupply");//发放的代币总量必须小于总代币量\n', '\t\t_detailsLength = _details.length;\n', '        _fConfig = true;//配置完毕，将配置完成标识符设为真\n', '        _fFinish = false;// 默认没发放完成\n', '        _fCancelDist = false;// 撤销发行清空\n', '    }\n', '\n', '    //开始发放函数，将未锁仓头款发放给个创始人，如果有锁仓天数为0的，将锁款的解锁后的头天代币也一同发放。auth认证，必须是合约持有人才能进行该操作\n', '    function startDistribute() public {\n', '        require (msg.sender == _ownerDist, "you must _ownerDist");\n', '        require(_fDist == false,"you have distributed erc20token already");//必须还未初始发放过\n', '        require(_details.length != 0,"you have not configured");//必须还未配置过\n', '        _distDay = today();//将当前区块链系统时间记录为发放时间\n', '        uint256 initDistAmount=0;//以下循环中使用的当前创始人“初始发放代币量”临时变量\n', '\n', '        for(uint256 i=0;i<_details.length;i++){\n', '            initDistAmount = _details[i].initAmount;//首发量\n', '\n', '            if(_details[i].lockDay==0){//如果当前创始人锁仓天数为0\n', '                initDistAmount = add(initDistAmount, _details[i].oneDayTransferAmount);//初始发放代币量为首发量+一天的发放量\n', '            }\n', '            _erc20token.transfer(\n', '                _details[i].founder,\n', '               initDistAmount\n', '            );\n', '            _details[i].transferedAmount = initDistAmount;//已发放数量在全局细节中进行登记\n', '            _details[i].lastTransferDay =_distDay;//最新一次发放日期在全局细节中进行登记\n', '        }\n', '\n', '        _fDist = true;//已初始发放标识符设为真\n', '        updateFinishFlag();// 更新下完成标志\n', '    }\n', '\n', '    // 更新是否发行完成标志\n', '    function updateFinishFlag() private {\n', '        //\n', '        bool allFinish = true;\n', '        for(uint256 i=0; i<_details.length; i++){\n', '            // 不需要锁仓的，直接设置完成\n', '            if (_details[i].lockPercent == 0) {\n', '                _details[i].isFinish = true;\n', '                continue;\n', '            }\n', '            // 有锁仓的，发行数量等于解锁数量，也设置完成\n', '            if (_details[i].distAmount == _details[i].transferedAmount) {\n', '                _details[i].isFinish = true;\n', '                continue;\n', '            }\n', '            allFinish = false;\n', '        }\n', '        // 更新合约完成标志\n', '        _fFinish = allFinish;\n', '    }\n', '\n', '    //模式1：任意人可调用该函数申领当天应发放额\n', '    function applyForTokenOneDay() public{\n', '        require(_mode == 1,"this function can be called only when _mode==1");//模式1下可调用\n', '        require(_distDay != 0,"you haven&#39;t distributed");//必须已经发布初始款了\n', '        require(_fFinish == false, "not finish");//必须合约还没执行完\n', '        require(_fCancelDist == false, "must not cancel dist");\n', '        uint256 daysAfterDist;//距离初始金发放时间\n', '        uint256 tday = today();//调用该函数时系统当前时间\n', '      \n', '        for(uint256 i=0;i<_details.length;i++){\n', '            // 对于已经完成的可以pass\n', '            if (_details[i].isFinish == true) {\n', '                continue;\n', '            }\n', '\n', '            require(tday!=_details[i].lastTransferDay,"you have applied for todays token");//必须今天还未申领\n', '            daysAfterDist = sub(tday,_distDay);//计算距离初始金发放时间天数\n', '            if(daysAfterDist >= _details[i].lockDay){//距离发放日天数要大于等于锁仓天数\n', '                if(add(_details[i].transferedAmount, _details[i].oneDayTransferAmount) <= _details[i].distAmount){\n', '                //如果当前创始人剩余的发放数量大于等于每天应发放数量，则将当天应发放数量发给他\n', '                    _erc20token.transfer(\n', '                        _details[i].founder,\n', '                        _details[i].oneDayTransferAmount\n', '                    );\n', '                    //已发放数量在全局细节中进行登记更新\n', '                    _details[i].transferedAmount = add(_details[i].transferedAmount, _details[i].oneDayTransferAmount);\n', '                }\n', '                else if(_details[i].transferedAmount < _details[i].distAmount){\n', '                //否则，如果已发放数量未达到锁仓应发总量，则将当前创始人剩余的应发放代币都发放给他\n', '                    _erc20token.transfer(\n', '                        _details[i].founder,\n', '                        sub( _details[i].distAmount, _details[i].transferedAmount)\n', '                    );\n', '                    //已发放数量在全局细节中进行登记更新\n', '                    _details[i].transferedAmount = _details[i].distAmount;\n', '                }\n', '                //最新一次发放日期在全局细节中进行登记更新\n', '                _details[i].lastTransferDay = tday;\n', '            }\n', '        }   \n', '        // 更新下完成标志\n', '        updateFinishFlag();\n', '    }\n', '\n', '    ///模式2：任意人可调用该函数补领到当前时间应该拥有但未发的代币\n', '    function applyForToken() public {\n', '        require(_mode == 2,"this function can be called only when _mode==2");//模式2下可调用\n', '        require(_distDay != 0,"you haven&#39;t distributed");//必须已经发布初始款了\n', '        require(_fFinish == false, "not finish");//必须合约还没执行完\n', '        require(_fCancelDist == false, "must not cancel dist");\n', '        uint256 daysAfterDist;//距离初始金发放时间\n', '        uint256 expectAmount;//下面循环中当前创始人到今天为止应该被发放的数量\n', '        uint256 tday = today();//调用该函数时系统当前时间\n', '        uint256 expectReleaseTimesNoLimit = 0;//解锁后到今天为止应该放的尾款次数(不考虑已放完款的情况)\n', '\n', '        for(uint256 i=0;i<_details.length;i++){\n', '            // 对于已经完成的可以pass\n', '            if (_details[i].isFinish == true) {\n', '                continue;\n', '            }\n', '            //必须今天还未申领\n', '            require(tday!=_details[i].lastTransferDay,"you have applied for todays token");\n', '            daysAfterDist = sub(tday,_distDay);//计算距离初始金发放时间天数\n', '            if(daysAfterDist >= _details[i].lockDay){//距离发放日天数要大于等于锁仓天数\n', '                expectReleaseTimesNoLimit = add(sub(daysAfterDist,_details[i].lockDay),1);//解锁后到今天为止应该放的尾款次数\n', '                //到目前为止应该发放的总数=（（应该释放款的次数x每次应该释放的币数）+初始款数量）与 当前创始人应得总发放数量 中的较小值\n', '                //因为释放款次数可能很大了，超过领完时间了\n', '                expectAmount = min(add(mul(expectReleaseTimesNoLimit,_details[i].oneDayTransferAmount),_details[i].initAmount),_details[i].distAmount);\n', '\n', '                //将欠下的代币统统发放给当前创始人\n', '                _erc20token.transfer(\n', '                    _details[i].founder,\n', '                    sub(expectAmount, _details[i].transferedAmount)\n', '                );\n', '                //已发放数量在全局细节中进行登记更新\n', '                _details[i].transferedAmount = expectAmount;\n', '                //最新一次发放日期在全局细节中进行登记更新\n', '                _details[i].lastTransferDay = tday;\n', '            }\n', '        }\n', '        // 更新下完成标志\n', '        updateFinishFlag();\n', '    }\n', '\n', '    //一天进行计算\n', '    function today() public constant returns (uint256) {\n', '        return div(time(), 24 hours);//24 hours \n', '    }\n', '    \n', '    //获取当前系统时间\n', '    function time() public constant returns (uint256) {\n', '        return block.timestamp;\n', '    }\n', ' \n', '}']
['pragma solidity ^0.4.11;\n', '\n', '\n', 'contract SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '}\n', '\n', '// contract ERC20 {\n', '//     function totalSupply() constant returns (uint supply);\n', '//     function balanceOf( address who ) constant returns (uint value);\n', '//     function allowance( address owner, address spender ) constant returns (uint _allowance);\n', '\n', '//     function transfer( address to, uint value) returns (bool ok);\n', '//     function transferFrom( address from, address to, uint value) returns (bool ok);\n', '//     function approve( address spender, uint value ) returns (bool ok);\n', '\n', '//     event Transfer( address indexed from, address indexed to, uint value);\n', '//     event Approval( address indexed owner, address indexed spender, uint value);\n', '// }\n', '\n', '//https://github.com/ethereum/ethereum-org/blob/master/solidity/token-erc20.sol\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', 'contract TokenERC20 {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Erc20Dist is SafeMath {\n', '    TokenERC20  public  _erc20token; //被操作的erc20代币\n', '\n', '    address public _ownerDist;// 这个合约最高权限人，开始是创建者，可以移交给他人\n', '    uint256 public _distDay;//发布时间\n', '    uint256 public _mode = 0;//模型是1表示使用模式1，2表示使用模式2\n', '    uint256 public _lockAllAmount;//锁仓的总量\n', '\n', '    struct Detail{//发放情况详情结构体声明\n', '        address founder;//创始人地址\n', '        uint256 lockDay;//锁仓时间\n', '        uint256 lockPercent;//锁仓百分比数（0到100之间）\n', '        uint256 distAmount;//总分配数量\n', '        uint256 lockAmount;//锁住的代币总量\n', '        uint256 initAmount;//初始款的代币量\n', '        uint256 distRate;//锁仓解锁后每天分配代币百分比数（按锁住的总额算，0到100之间）\n', '        uint256 oneDayTransferAmount;//锁仓解锁后每天应发放的代币数量\n', '        uint256 transferedAmount;//已转账代币数量\n', '        uint256 lastTransferDay;//最后一笔代币分配的时间\n', '        bool isFinish;// 是否本人都发放完成\n', '        bool isCancelDist;//是否同意撤销发行\n', '    }\n', '    Detail private detail = Detail(address(0),0,0,0,0,0,0,0,0,0, false, false);//中间变量初始化，用来在函数中临时承接计算结果，以便传送给_details\n', '    Detail[] public _details;//发放情况详情列表,并初始化为空值\n', '\tuint256 public _detailsLength = 0;//发放详情长度\n', '\n', '    bool public _fDist = false;// 是否已经发布过的标识符号\n', '    bool public _fConfig = false;// 是否已经配置过的标识符号\n', '    bool public _fFinish = false;// 是否所有人都发放完成\n', '    bool public _fCancelDist = false;// 是否撤销发行\n', '    \n', '    function Erc20Dist() public {\n', '        _ownerDist = msg.sender; // 默认创建者为权限最高人\n', '    }\n', '\n', '    function () public{}//callback函数，由于合约没有eth价值传入，所以没有什么安全问题\n', '\n', '    // 设置合约所有者\n', '    function setOwner(address owner_) public {\n', '        require (msg.sender == _ownerDist, "you must _ownerDist");// 必须原来所有者授权\n', '        require(_fDist == false, "not dist"); // 必须还没开始发布\n', '        require(_fConfig == false, "not config");// 必须还没配置过\n', '        _ownerDist = owner_;\n', '    }\n', '    //设置操作代币函数\n', '    function setErc20(TokenERC20  erc20Token) public {\n', '        require (msg.sender == _ownerDist, "you must _ownerDist");\n', '        require(address(_erc20token) == address(0),"you have set erc20Token");//必须之前没有设置过\n', '        require(erc20Token.balanceOf(address(this)) > 0, "this contract must own tokens");\n', '        _erc20token = erc20Token;//在全局设置erc20代币\n', '        _lockAllAmount = erc20Token.balanceOf(address(this));\n', '    }\n', '\n', '    // 撤销发行，必须所有参与人同意，才能撤销发行\n', '    function cancelDist() public {\n', '        require(_fDist == true, "must dist"); // 必须发布\n', '        require(_fCancelDist == false, "must not cancel dist");\n', '\n', '        // 循环判断是否\n', '        for(uint256 i=0;i<_details.length;i++){\n', '            // 判断是否发行者\n', '            if ( _details[i].founder == msg.sender ) {\n', '                // 设置标志\n', '                _details[i].isCancelDist = true;\n', '                break;\n', '            }\n', '        }\n', '        // 更新状态\n', '        updateCancelDistFlag();\n', '        if (_fCancelDist == true) {\n', '            require(_erc20token.balanceOf(address(this)) > 0, "must have balance");\n', '            // 返回所有代币给最高权限人\n', '            _erc20token.transfer(\n', '                _ownerDist, \n', '                _erc20token.balanceOf(address(this))\n', '            );\n', '        }\n', '    }\n', '\n', '    // 更新是否撤销发行标志\n', '    function updateCancelDistFlag() private {\n', '        bool allCancelDist = true;\n', '        for(uint256 i=0; i<_details.length; i++){\n', '            // 判断有没有人没撤销\n', '            if (_details[i].isCancelDist == false) {\n', '                allCancelDist = false;\n', '                break;\n', '            }\n', '        }\n', '        // 更新合约完成标志\n', '        _fCancelDist = allCancelDist;\n', '    }\n', '\n', '    // 还没调用发行情况下，返还所有代币，到最高权限账号，并且清除配置\n', '    function clearConfig() public {\n', '        require (msg.sender == _ownerDist, "you must _ownerDist");\n', '        require(_fDist == false, "not dist"); // 必须还没开始发布\n', '        require(address(_erc20token) != address(0),"you must set erc20Token");//必须之前设置过\n', '        require(_erc20token.balanceOf(address(this)) > 0, "must have balance");\n', '        // 返回所有代币给最高权限人\n', '        _erc20token.transfer(\n', '            msg.sender, \n', '            _erc20token.balanceOf(address(this))\n', '        );\n', '        // 清空变量\n', '        _lockAllAmount = 0;\n', '        TokenERC20  nullErc20token;\n', '        _erc20token = nullErc20token;\n', '        Detail[] nullDetails;\n', '        _details = nullDetails;\n', '        _detailsLength = 0;\n', '        _mode = 0;\n', '        _fConfig = false;\n', '    }\n', '\n', '    // 客户之前多转到合约的币，可以通过这个接口，提取回最高权限人账号，但必须在合约执行完成之后\n', '    function withDraw() public {\n', '        require (msg.sender == _ownerDist, "you must _ownerDist");\n', '        require(_fFinish == true, "dist must be finished"); // 合约必须执行完毕\n', '        require(address(_erc20token) != address(0),"you must set erc20Token");//必须之前设置过\n', '        require(_erc20token.balanceOf(address(this)) > 0, "must have balance");\n', '        // 返回所有代币给最高权限人\n', '        _erc20token.transfer(\n', '            _ownerDist, \n', '            _erc20token.balanceOf(address(this))\n', '        );\n', '    }\n', '\n', '    //配置相关创始人及代币发放、锁仓信息等相关情况的函数。auth认证，必须是合约持有人才能进行该操作\n', '    function configContract(uint256 mode,address[] founders,uint256[] distWad18Amounts,uint256[] lockPercents,uint256[] lockDays,uint256[] distRates) public {\n', '    //函数变量说明：founders（创始人地址列表），\n', '    //distWad18Amounts（总发放数量列表（不输入18位小数位）），\n', '    //lockPercents（锁仓百分比列表（值在0到100之间）），\n', '    //lockDays（锁仓天数列表）,distRates（每天发放数占锁仓总数的万分比数列表（值在0到10000之间））\n', '        require (msg.sender == _ownerDist, "you must _ownerDist");\n', '        require(mode==1||mode==2,"there is only mode 1 or 2");//只有模式1和2两种申领余款方式\n', '        _mode = mode;//将申领方式注册到全局\n', '        require(_fConfig == false,"you have configured it already");//必须还未配置过\n', '        require(address(_erc20token) != address(0), "you must setErc20 first");//必须已经设置好被操作erc20代币\n', '        require(founders.length!=0,"array length can not be zero");//创始人列表不能为空\n', '        require(founders.length==distWad18Amounts.length,"founders length dismatch distWad18Amounts length");//创始人列表长度必须等于发放数量列表长度\n', '        require(distWad18Amounts.length==lockPercents.length,"distWad18Amounts length dismatch lockPercents length");//发放数量列表长度必须等于锁仓百分比列表长度\n', '        require(lockPercents.length==lockDays.length,"lockPercents length dismatch lockDays length");//锁仓百分比列表长度必须等于锁仓天数列表长度\n', '        require(lockDays.length==distRates.length,"lockDays length dismatch distRates length");//锁仓百分比列表长度必须等于每日发放比率列表长度\n', '\n', '        //遍历\n', '        for(uint256 i=0;i<founders.length;i++){\n', '            require(distWad18Amounts[i]!=0,"dist token amount can not be zero");//确保发放数量不为0\n', '            for(uint256 j=0;j<i;j++){\n', '                require(founders[i]!=founders[j],"you could not give the same address of founders");//必须确保创始人中没有地址相同的\n', '            }\n', '        }\n', '        \n', '\n', '        //以下为循环中服务全局变量的中间临时变量\n', '        uint256 totalAmount = 0;//发放代币总量\n', '        uint256 distAmount = 0;//给当前创始人发放代币量（带18位精度）\n', '        uint256 oneDayTransferAmount = 0;//解锁后每天应发放的数量（将在后续进行计算）\n', '        uint256 lockAmount = 0;//当前创始人锁住的代币量\n', '        uint256 initAmount = 0;//当前创始人初始款代币量\n', '\n', '        //遍历\n', '        for(uint256 k=0;k<lockPercents.length;k++){\n', '            require(lockPercents[k]<=100,"lockPercents unit must <= 100");//锁仓百分比数必须小于等于100\n', '            require(distRates[k]<=10000,"distRates unit must <= 10000");//发放万分比数必须小于等于10000\n', '            distAmount = mul(distWad18Amounts[k],10**18);//给当前创始人发放代币量（带18位精度）\n', '            totalAmount = add(totalAmount,distAmount);//发放总量累加\n', '            lockAmount = div(mul(lockPercents[k],distAmount),100);//锁住的代币数量\n', '            initAmount = sub(distAmount, lockAmount);//初始款的代币数量\n', '            oneDayTransferAmount = div(mul(distRates[k],lockAmount),10000);//解锁后每天应发放的数量\n', '\n', '            //下面为中间变量detail的9个成员赋值\n', '            detail.founder = founders[k];\n', '            detail.lockDay = lockDays[k];\n', '            detail.lockPercent = lockPercents[k];\n', '            detail.distRate = distRates[k];\n', '            detail.distAmount = distAmount;\n', '            detail.lockAmount = lockAmount;\n', '            detail.initAmount = initAmount;\n', '            detail.oneDayTransferAmount = oneDayTransferAmount;\n', '            detail.transferedAmount = 0;//初始还未开始发放，所以已分配数量为0\n', '            detail.lastTransferDay = 0;//初始还未开始发放，最后的发放日设为0\n', '            detail.isFinish = false;\n', '            detail.isCancelDist = false;\n', '            //将赋好的中间信息压入全局信息列表_details\n', '            _details.push(detail);\n', '        }\n', '        require(totalAmount <= _lockAllAmount, "distributed total amount should be equal lock amount");// 发行总量应该等于锁仓总量\n', '        require(totalAmount <= _erc20token.totalSupply(),"distributed total amount should be less than token totalSupply");//发放的代币总量必须小于总代币量\n', '\t\t_detailsLength = _details.length;\n', '        _fConfig = true;//配置完毕，将配置完成标识符设为真\n', '        _fFinish = false;// 默认没发放完成\n', '        _fCancelDist = false;// 撤销发行清空\n', '    }\n', '\n', '    //开始发放函数，将未锁仓头款发放给个创始人，如果有锁仓天数为0的，将锁款的解锁后的头天代币也一同发放。auth认证，必须是合约持有人才能进行该操作\n', '    function startDistribute() public {\n', '        require (msg.sender == _ownerDist, "you must _ownerDist");\n', '        require(_fDist == false,"you have distributed erc20token already");//必须还未初始发放过\n', '        require(_details.length != 0,"you have not configured");//必须还未配置过\n', '        _distDay = today();//将当前区块链系统时间记录为发放时间\n', '        uint256 initDistAmount=0;//以下循环中使用的当前创始人“初始发放代币量”临时变量\n', '\n', '        for(uint256 i=0;i<_details.length;i++){\n', '            initDistAmount = _details[i].initAmount;//首发量\n', '\n', '            if(_details[i].lockDay==0){//如果当前创始人锁仓天数为0\n', '                initDistAmount = add(initDistAmount, _details[i].oneDayTransferAmount);//初始发放代币量为首发量+一天的发放量\n', '            }\n', '            _erc20token.transfer(\n', '                _details[i].founder,\n', '               initDistAmount\n', '            );\n', '            _details[i].transferedAmount = initDistAmount;//已发放数量在全局细节中进行登记\n', '            _details[i].lastTransferDay =_distDay;//最新一次发放日期在全局细节中进行登记\n', '        }\n', '\n', '        _fDist = true;//已初始发放标识符设为真\n', '        updateFinishFlag();// 更新下完成标志\n', '    }\n', '\n', '    // 更新是否发行完成标志\n', '    function updateFinishFlag() private {\n', '        //\n', '        bool allFinish = true;\n', '        for(uint256 i=0; i<_details.length; i++){\n', '            // 不需要锁仓的，直接设置完成\n', '            if (_details[i].lockPercent == 0) {\n', '                _details[i].isFinish = true;\n', '                continue;\n', '            }\n', '            // 有锁仓的，发行数量等于解锁数量，也设置完成\n', '            if (_details[i].distAmount == _details[i].transferedAmount) {\n', '                _details[i].isFinish = true;\n', '                continue;\n', '            }\n', '            allFinish = false;\n', '        }\n', '        // 更新合约完成标志\n', '        _fFinish = allFinish;\n', '    }\n', '\n', '    //模式1：任意人可调用该函数申领当天应发放额\n', '    function applyForTokenOneDay() public{\n', '        require(_mode == 1,"this function can be called only when _mode==1");//模式1下可调用\n', '        require(_distDay != 0,"you haven\'t distributed");//必须已经发布初始款了\n', '        require(_fFinish == false, "not finish");//必须合约还没执行完\n', '        require(_fCancelDist == false, "must not cancel dist");\n', '        uint256 daysAfterDist;//距离初始金发放时间\n', '        uint256 tday = today();//调用该函数时系统当前时间\n', '      \n', '        for(uint256 i=0;i<_details.length;i++){\n', '            // 对于已经完成的可以pass\n', '            if (_details[i].isFinish == true) {\n', '                continue;\n', '            }\n', '\n', '            require(tday!=_details[i].lastTransferDay,"you have applied for todays token");//必须今天还未申领\n', '            daysAfterDist = sub(tday,_distDay);//计算距离初始金发放时间天数\n', '            if(daysAfterDist >= _details[i].lockDay){//距离发放日天数要大于等于锁仓天数\n', '                if(add(_details[i].transferedAmount, _details[i].oneDayTransferAmount) <= _details[i].distAmount){\n', '                //如果当前创始人剩余的发放数量大于等于每天应发放数量，则将当天应发放数量发给他\n', '                    _erc20token.transfer(\n', '                        _details[i].founder,\n', '                        _details[i].oneDayTransferAmount\n', '                    );\n', '                    //已发放数量在全局细节中进行登记更新\n', '                    _details[i].transferedAmount = add(_details[i].transferedAmount, _details[i].oneDayTransferAmount);\n', '                }\n', '                else if(_details[i].transferedAmount < _details[i].distAmount){\n', '                //否则，如果已发放数量未达到锁仓应发总量，则将当前创始人剩余的应发放代币都发放给他\n', '                    _erc20token.transfer(\n', '                        _details[i].founder,\n', '                        sub( _details[i].distAmount, _details[i].transferedAmount)\n', '                    );\n', '                    //已发放数量在全局细节中进行登记更新\n', '                    _details[i].transferedAmount = _details[i].distAmount;\n', '                }\n', '                //最新一次发放日期在全局细节中进行登记更新\n', '                _details[i].lastTransferDay = tday;\n', '            }\n', '        }   \n', '        // 更新下完成标志\n', '        updateFinishFlag();\n', '    }\n', '\n', '    ///模式2：任意人可调用该函数补领到当前时间应该拥有但未发的代币\n', '    function applyForToken() public {\n', '        require(_mode == 2,"this function can be called only when _mode==2");//模式2下可调用\n', '        require(_distDay != 0,"you haven\'t distributed");//必须已经发布初始款了\n', '        require(_fFinish == false, "not finish");//必须合约还没执行完\n', '        require(_fCancelDist == false, "must not cancel dist");\n', '        uint256 daysAfterDist;//距离初始金发放时间\n', '        uint256 expectAmount;//下面循环中当前创始人到今天为止应该被发放的数量\n', '        uint256 tday = today();//调用该函数时系统当前时间\n', '        uint256 expectReleaseTimesNoLimit = 0;//解锁后到今天为止应该放的尾款次数(不考虑已放完款的情况)\n', '\n', '        for(uint256 i=0;i<_details.length;i++){\n', '            // 对于已经完成的可以pass\n', '            if (_details[i].isFinish == true) {\n', '                continue;\n', '            }\n', '            //必须今天还未申领\n', '            require(tday!=_details[i].lastTransferDay,"you have applied for todays token");\n', '            daysAfterDist = sub(tday,_distDay);//计算距离初始金发放时间天数\n', '            if(daysAfterDist >= _details[i].lockDay){//距离发放日天数要大于等于锁仓天数\n', '                expectReleaseTimesNoLimit = add(sub(daysAfterDist,_details[i].lockDay),1);//解锁后到今天为止应该放的尾款次数\n', '                //到目前为止应该发放的总数=（（应该释放款的次数x每次应该释放的币数）+初始款数量）与 当前创始人应得总发放数量 中的较小值\n', '                //因为释放款次数可能很大了，超过领完时间了\n', '                expectAmount = min(add(mul(expectReleaseTimesNoLimit,_details[i].oneDayTransferAmount),_details[i].initAmount),_details[i].distAmount);\n', '\n', '                //将欠下的代币统统发放给当前创始人\n', '                _erc20token.transfer(\n', '                    _details[i].founder,\n', '                    sub(expectAmount, _details[i].transferedAmount)\n', '                );\n', '                //已发放数量在全局细节中进行登记更新\n', '                _details[i].transferedAmount = expectAmount;\n', '                //最新一次发放日期在全局细节中进行登记更新\n', '                _details[i].lastTransferDay = tday;\n', '            }\n', '        }\n', '        // 更新下完成标志\n', '        updateFinishFlag();\n', '    }\n', '\n', '    //一天进行计算\n', '    function today() public constant returns (uint256) {\n', '        return div(time(), 24 hours);//24 hours \n', '    }\n', '    \n', '    //获取当前系统时间\n', '    function time() public constant returns (uint256) {\n', '        return block.timestamp;\n', '    }\n', ' \n', '}']
