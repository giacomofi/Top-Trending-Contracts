['pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract TokenERC20 {\n', '    // Public variables of the token\n', '    string public name = "SurveyToken";\n', '    string public symbol = "SRT";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function TokenERC20(uint256 initialSupply) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract SurveyToken is TokenERC20, owned\n', '{\n', '    struct Survey {\n', '        address initiator;\n', '        uint256 toPay;\n', '        uint256 balance;\n', '        uint32 tickets;\n', '        uint256 reward;\n', '        mapping(address => bool) respondents;\n', '    }\n', '\n', '    address feeReceiver;\n', '\n', '    mapping(bytes32 => Survey) surveys;\n', '    mapping(address => bool) robots;\n', '\n', '    modifier onlyRobot {\n', '        require(robots[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function SurveyToken(uint256 initialSupply) public\n', '    TokenERC20(initialSupply) {\n', '        feeReceiver = msg.sender;\n', '    }\n', '\n', '    function setFeeReceiver(address newReceiver) public onlyOwner {\n', '        require(newReceiver != 0x0);\n', '        feeReceiver = newReceiver;\n', '    }\n', '\n', '    function addRobot(address newRobot) public onlyOwner returns(bool success) {\n', '        require(newRobot != 0x0);\n', '        require(robots[newRobot] == false);\n', '\n', '        robots[newRobot] = true;\n', '        return true;\n', '    }\n', '    function removeRobot(address oldRobot) public onlyOwner returns(bool success) {\n', '        require(oldRobot != 0x0);\n', '        require(robots[oldRobot] == true);\n', '\n', '        robots[oldRobot] = false;\n', '        return true;\n', '    }\n', '\n', '    function placeNewSurvey(bytes32 key, uint256 toPay, uint32 tickets, uint256 reward) public returns(bool success) {\n', '        require(surveys[key].initiator == 0x0);\n', '        require(tickets > 0 && reward >= 0);\n', '        uint256 rewardBalance = tickets * reward;\n', '        require(rewardBalance < toPay && toPay > 0);\n', '        require(balanceOf[msg.sender] >= toPay);\n', '        \n', '        uint256 fee = toPay - rewardBalance;\n', '        require(balanceOf[feeReceiver] + fee > balanceOf[feeReceiver]);\n', '        transfer(feeReceiver, fee);\n', '        \n', '        balanceOf[msg.sender] -= rewardBalance;\n', '        surveys[key] = Survey(msg.sender, toPay, rewardBalance, tickets, reward);\n', '        Transfer(msg.sender, 0x0, rewardBalance);\n', '        return true;\n', '    }\n', '\n', '    function giveReward(bytes32 surveyKey, address respondent, uint8 karma) public onlyRobot returns(bool success) {\n', '        require(respondent != 0x0);\n', '        Survey storage surv = surveys[surveyKey];\n', '        require(surv.respondents[respondent] == false);\n', '        require(surv.tickets > 0 && surv.reward > 0 && surv.balance >= surv.reward);\n', '        require(karma >= 0 && karma <= 10);\n', '        \n', '        if (karma < 10) {\n', '            uint256 fhalf = surv.reward / 2;\n', '            uint256 shalf = ((surv.reward - fhalf) / 10) * karma;\n', '            uint256 respReward = fhalf + shalf;\n', '            uint256 fine = surv.reward - respReward;\n', '            \n', '            require(balanceOf[respondent] + respReward > balanceOf[respondent]);\n', '            require(balanceOf[feeReceiver] + fine > balanceOf[feeReceiver]);\n', '            \n', '            balanceOf[respondent] += respReward;\n', '            Transfer(0x0, respondent, respReward);\n', '            \n', '            balanceOf[feeReceiver] += fine;\n', '            Transfer(0x0, feeReceiver, fine);\n', '        } else {\n', '            require(balanceOf[respondent] + surv.reward > balanceOf[respondent]);\n', '            balanceOf[respondent] += surv.reward;\n', '            Transfer(0x0, respondent, surv.reward);\n', '        }\n', '\n', '        surv.tickets--;\n', '        surv.balance -= surv.reward;\n', '        surv.respondents[respondent] = true;\n', '        return true;\n', '    }\n', '    \n', '    function removeSurvey(bytes32 surveyKey) public onlyRobot returns(bool success) {\n', '        Survey storage surv = surveys[surveyKey];\n', '        require(surv.initiator != 0x0 && surv.balance > 0);\n', '        require(balanceOf[surv.initiator] + surv.balance > balanceOf[surv.initiator]);\n', '        \n', '        balanceOf[surv.initiator] += surv.balance;\n', '        Transfer(0x0, surv.initiator, surv.balance);\n', '        surv.balance = 0;\n', '        return true;\n', '    }\n', '\n', '    function getSurveyInfo(bytes32 key) public constant returns(bool success, uint256 toPay, uint32 tickets, uint256 reward) {\n', '        Survey storage surv = surveys[key];\n', '        require(surv.initiator != 0x0);\n', '\n', '        return (true, surv.toPay, surv.tickets, surv.reward);\n', '    }\n', '}']