['pragma solidity ^0.4.15;\n', ' \n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', ' \n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', ' \n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', ' \n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', ' \n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', ' \n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', ' \n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '  using SafeMath for uint256;\n', ' \n', '  mapping(address => uint256) balances;\n', '  \n', '  Crowdsale crowdsale;\n', '  \n', '    modifier crowdsaleIsOverOrThisIsContract(){\n', '      require(crowdsale.isCrowdsaleOver() || msg.sender == crowdsale.getContractAddress());\n', '      _;\n', '  }\n', ' \n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) crowdsaleIsOverOrThisIsContract returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', ' \n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', ' \n', '}\n', ' \n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', ' \n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  \n', '  \n', '  \n', '  function StandardToken(Crowdsale x){\n', '      crowdsale =x;\n', '  }\n', '  \n', '\n', ' \n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', ' \n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', ' \n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', ' \n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', ' \n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', ' \n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', ' \n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', ' \n', '}\n', ' \n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', ' \n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', ' \n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', ' \n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', ' \n', '}\n', ' \n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', ' \n', 'contract MintableToken is StandardToken, Ownable {\n', '    \n', '     function MintableToken(Crowdsale x) StandardToken(x){\n', '        \n', '    }\n', '    \n', '  event Mint(address indexed to, uint256 amount);\n', '  \n', '  event MintFinished();\n', ' \n', '  bool public mintingFinished = false;\n', ' \n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', ' \n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    allowed[_to][_to] =  allowed[_to][_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', ' \n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '  \n', '}\n', ' \n', 'contract DjohniKrasavchickToken is MintableToken {\n', '    \n', '    string public constant name = "DjohniKrasavchickToken";\n', '    \n', '    string public constant symbol = "DJKR";\n', '    \n', '    uint32 public constant decimals = 2;\n', '    \n', '    function DjohniKrasavchickToken(Crowdsale x) MintableToken(x){\n', '        \n', '    } \n', '    \n', '}\n', ' \n', ' \n', 'contract Crowdsale is Ownable {\n', '    \n', '    using SafeMath for uint;\n', '    \n', '    address public myWalletForETH;\n', '    \n', '    uint public bountyPercent;\n', '    \n', '    uint public djonniPercent;\n', '    \n', '    uint public developerPercent;\n', '    \n', '    uint public bountyTokens;\n', '    \n', '    uint public djonniTokens;\n', '    \n', '    uint public developerTokens;\n', '    \n', '    address[] public bountyAdresses;\n', ' \n', '    DjohniKrasavchickToken public token = new DjohniKrasavchickToken(this);\n', ' \n', '    uint public start;\n', '    \n', '    uint public period;\n', ' \n', '    uint public hardcap;\n', ' \n', '    uint public rate;\n', '    \n', '    uint public softcap;\n', '    \n', '    bool private isHardCapWasReached = false;\n', '    \n', '    bool private isCrowdsaleStoped = false;\n', '    \n', '    mapping(address => uint) public balances;\n', ' \n', '    function Crowdsale() {\n', '      myWalletForETH = 0xe4D5b0aECfeFf1A39235f49254a0f37AaA7F6cC0;\n', '      bountyPercent = 10;\n', '      djonniPercent = 50;\n', '      developerPercent = 20;\n', '      rate = 100000000;\n', '      start = 1536858000;\n', '      period = 14;\n', '      hardcap = 200000000000000000;\n', '      softcap = 50000000000000000;\n', '    }\n', '     \n', '    function getContractAddress() public returns(address){\n', '        return this;\n', '    }\n', '    \n', '    function isCrowdsaleOver() public returns(bool){\n', '        if( isCrowsdaleTimeFinished() || isHardCapReached() || isCrowdsaleStoped){\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    function isCrowsdaleTimeFinished() internal returns(bool){\n', '        if(now > start + period * 1 hours){\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    function isHardCapReached() internal returns (bool){\n', '        if(hardcap==this.balance){\n', '            isHardCapWasReached = true;\n', '        }\n', '        return isHardCapWasReached;\n', '    }\n', '    \n', '    function stopCrowdSaleOnlyForOwner() onlyOwner{\n', '        if(!isCrowdsaleStoped){\n', '         stopCrowdSale();\n', '        }\n', '    }\n', '    \n', '    function stopCrowdSale() internal{\n', '        if(token.mintingFinished() == false){\n', '              finishMinting();\n', '        }\n', '        isCrowdsaleStoped = true;\n', '    }\n', ' \n', '    modifier saleIsOn() {\n', '      require(now > start && now < start + period * 1 hours);\n', '      _;\n', '    }\n', '    \n', '    modifier crowdsaleIsOver() {\n', '      require(isCrowdsaleOver());\n', '      _;\n', '    }\n', '\n', '    modifier isUnderHardCap() {\n', '      require(this.balance <= hardcap && !isHardCapWasReached );\n', '      _;\n', '    }\n', '    \n', '    modifier onlyOwnerOrSaleIsOver(){\n', '        require(owner==msg.sender || isCrowdsaleOver() );\n', '        _;\n', '    }\n', ' \n', '    function refund() {\n', '      require(this.balance < softcap && now > start + period * 1 hours);\n', '      uint value = balances[msg.sender]; \n', '      balances[msg.sender] = 0; \n', '      msg.sender.transfer(value); \n', '    }\n', ' \n', '    function finishMinting() public onlyOwnerOrSaleIsOver  {\n', '      if(this.balance > softcap) {\n', '        myWalletForETH.transfer(this.balance);\n', '        uint issuedTokenSupply = token.totalSupply();\n', '        uint additionalTokens = bountyPercent+developerPercent+djonniPercent;\n', '        uint tokens = issuedTokenSupply.mul(additionalTokens).div(100 - additionalTokens);\n', '        token.mint(this, tokens);\n', '        token.finishMinting();\n', '        issuedTokenSupply = token.totalSupply();\n', '        bountyTokens = issuedTokenSupply.div(100).mul(bountyPercent);\n', '        developerTokens = issuedTokenSupply.div(100).mul(developerPercent);\n', '        djonniTokens = issuedTokenSupply.div(100).mul(djonniPercent);\n', '        token.transfer(myWalletForETH, developerTokens);\n', '      }\n', '    }\n', '    \n', '    function showThisBallance() public returns (uint){\n', '        return this.balance;\n', '    }\n', '\n', ' \n', '   function createTokens() isUnderHardCap saleIsOn payable {\n', '      uint tokens = rate.mul(msg.value).div(1 ether);\n', '      token.mint(this, tokens);\n', '      token.transfer(msg.sender, tokens);\n', '      balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '    }\n', '    \n', '\n', ' \n', '    function() external payable {\n', '     if(isCrowsdaleTimeFinished() && !isCrowdsaleStoped){\n', '       stopCrowdSale();    \n', '     }\n', '     createTokens();\n', '     if(isCrowdsaleOver() && !isCrowdsaleStoped){\n', '      stopCrowdSale();\n', '     }\n', '    }\n', '    \n', '    function addBountyAdresses(address[] array) onlyOwner{\n', '               for (uint i = 0; i < array.length; i++){\n', '                  bountyAdresses.push(array[i]);\n', '               }\n', '    }\n', '    \n', '    function distributeBountyTokens() onlyOwner crowdsaleIsOver{\n', '               uint amountofTokens = bountyTokens/bountyAdresses.length;\n', '               for (uint i = 0; i < bountyAdresses.length; i++){\n', '                  token.transfer(bountyAdresses[i], amountofTokens);\n', '               }\n', '               bountyTokens = 0;\n', '    }\n', '    \n', '        function distributeDjonniTokens(address addr) onlyOwner crowdsaleIsOver{\n', '                  token.transfer(addr, djonniTokens);\n', '                  djonniTokens = 0;\n', '              \n', '    }\n', '    \n', '    \n', '    \n', '}']