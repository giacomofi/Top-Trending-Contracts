['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * HeapX.io Smart Contract\n', ' * /\n', '\n', '/** @title SafeMath */\n', 'library SafeMath {\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) { if (_a == 0) { return 0; } uint256 c = _a * _b; assert(c / _a == _b); return c; }\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) { uint256 c = _a / _b; return c; }\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) { assert(_b <= _a); uint256 c = _a - _b; return c;}\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) { uint256 c = _a + _b; assert(c >= _a); return c;}\n', '}\n', '\n', '/** @title ERC20 interface */\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', '/** @title Owner */\n', 'contract OwnerHeapX {\n', '    address public owner;\n', '    constructor() public { owner = msg.sender; }\n', '    modifier onlyOwner { require(msg.sender == owner); _;}\n', '    function transferOwnership(address newOwner) onlyOwner public { owner = newOwner; }\n', '}\n', '\n', '/** @title HeapX */\n', 'contract HeapX is OwnerHeapX, ERC20 {\n', '\n', '    string  public name;\n', '    string  public symbol;\n', '    uint8   public decimals;\n', '    uint256 public totalSupply_;\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        name = "HeapX";\n', '        symbol = "HEAP";\n', '        decimals = 9;\n', '        totalSupply_ = 500000000000000000;\n', '        owner = msg.sender;\n', '        balances[msg.sender] = totalSupply_;\n', '        emit Transfer(address(0), msg.sender, totalSupply_);\n', '    }\n', '\n', '    using SafeMath for uint256;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner,address indexed spender,uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256){\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= balances[msg.sender]);\n', '        require(_to != address(0));\n', '        require(!frozenAccount[_to]);\n', '        require(!frozenAccount[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom( address _from, address _to, uint256 _value) public returns (bool){\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        require(_to != address(0));\n', '        require(!frozenAccount[_to]);\n', '        require(!frozenAccount[_from]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool){\n', '        allowed[msg.sender][_spender] = (\n', '            allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool){\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '            return true;\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        totalSupply_ -= _value;\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * HeapX.io Smart Contract\n', ' * /\n', '\n', '/** @title SafeMath */\n', 'library SafeMath {\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) { if (_a == 0) { return 0; } uint256 c = _a * _b; assert(c / _a == _b); return c; }\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) { uint256 c = _a / _b; return c; }\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) { assert(_b <= _a); uint256 c = _a - _b; return c;}\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) { uint256 c = _a + _b; assert(c >= _a); return c;}\n', '}\n', '\n', '/** @title ERC20 interface */\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', '/** @title Owner */\n', 'contract OwnerHeapX {\n', '    address public owner;\n', '    constructor() public { owner = msg.sender; }\n', '    modifier onlyOwner { require(msg.sender == owner); _;}\n', '    function transferOwnership(address newOwner) onlyOwner public { owner = newOwner; }\n', '}\n', '\n', '/** @title HeapX */\n', 'contract HeapX is OwnerHeapX, ERC20 {\n', '\n', '    string  public name;\n', '    string  public symbol;\n', '    uint8   public decimals;\n', '    uint256 public totalSupply_;\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        name = "HeapX";\n', '        symbol = "HEAP";\n', '        decimals = 9;\n', '        totalSupply_ = 500000000000000000;\n', '        owner = msg.sender;\n', '        balances[msg.sender] = totalSupply_;\n', '        emit Transfer(address(0), msg.sender, totalSupply_);\n', '    }\n', '\n', '    using SafeMath for uint256;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner,address indexed spender,uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256){\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= balances[msg.sender]);\n', '        require(_to != address(0));\n', '        require(!frozenAccount[_to]);\n', '        require(!frozenAccount[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom( address _from, address _to, uint256 _value) public returns (bool){\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        require(_to != address(0));\n', '        require(!frozenAccount[_to]);\n', '        require(!frozenAccount[_from]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool){\n', '        allowed[msg.sender][_spender] = (\n', '            allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool){\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '            return true;\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        totalSupply_ -= _value;\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '}']
