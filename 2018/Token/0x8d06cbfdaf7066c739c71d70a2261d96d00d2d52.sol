['/*\n', ' * NYX Token smart contract\n', ' *\n', ' * Supports ERC20, ERC223 stadards\n', ' *\n', ' * The NYX token is mintable during Token Sale. On Token Sale finalization it\n', ' * will be minted up to the cap and minting will be finished forever\n', ' */\n', '\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '/*************************************************************************\n', ' * import "./include/MintableToken.sol" : start\n', ' *************************************************************************/\n', '\n', '/*************************************************************************\n', ' * import "zeppelin/contracts/token/StandardToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./BasicToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./ERC20Basic.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/*************************************************************************\n', ' * import "./ERC20Basic.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "../math/SafeMath.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "../math/SafeMath.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "./BasicToken.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "./ERC20.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/*************************************************************************\n', ' * import "./ERC20.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "zeppelin/contracts/token/StandardToken.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "zeppelin/contracts/ownership/Ownable.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "zeppelin/contracts/ownership/Ownable.sol" : end\n', ' *************************************************************************/\n', '\n', '/**\n', ' * Mintable token\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    uint public totalSupply = 0;\n', '    address minter;\n', '\n', '    modifier onlyMinter(){\n', '        require(minter == msg.sender);\n', '        _;\n', '    }\n', '\n', '    function setMinter(address _minter) onlyOwner {\n', '        minter = _minter;\n', '    }\n', '\n', '    function mint(address _to, uint _amount) onlyMinter {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(address(0x0), _to, _amount);\n', '    }\n', '}\n', '/*************************************************************************\n', ' * import "./include/MintableToken.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "./include/ERC23PayableToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '\n', '/*************************************************************************\n', ' * import "./ERC23.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '\n', '\n', '/*\n', ' * ERC23\n', ' * ERC23 interface\n', ' * see https://github.com/ethereum/EIPs/issues/223\n', ' */\n', 'contract ERC23 is ERC20Basic {\n', '    function transfer(address to, uint value, bytes data);\n', '\n', '    event TransferData(address indexed from, address indexed to, uint value, bytes data);\n', '}\n', '/*************************************************************************\n', ' * import "./ERC23.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "./ERC23PayableReceiver.sol" : start\n', ' *************************************************************************/\n', '\n', '/*\n', '* Contract that is working with ERC223 tokens\n', '*/\n', '\n', 'contract ERC23PayableReceiver {\n', '    function tokenFallback(address _from, uint _value, bytes _data) payable;\n', '}\n', '\n', '/*************************************************************************\n', ' * import "./ERC23PayableReceiver.sol" : end\n', ' *************************************************************************/\n', '\n', '/**  https://github.com/Dexaran/ERC23-tokens/blob/master/token/ERC223/ERC223BasicToken.sol\n', ' *\n', ' */\n', 'contract ERC23PayableToken is BasicToken, ERC23{\n', '    // Function that is called when a user or another contract wants to transfer funds .\n', '    function transfer(address to, uint value, bytes data){\n', '        transferAndPay(to, value, data);\n', '    }\n', '\n', '    // Standard function transfer similar to ERC20 transfer with no _data .\n', '    // Added due to backwards compatibility reasons .\n', '    function transfer(address to, uint value) returns (bool){\n', '        bytes memory empty;\n', '        transfer(to, value, empty);\n', '        return true;\n', '    }\n', '\n', '    function transferAndPay(address to, uint value, bytes data) payable {\n', '\n', '        uint codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '\n', '        if(codeLength>0) {\n', '            ERC23PayableReceiver receiver = ERC23PayableReceiver(to);\n', '            receiver.tokenFallback.value(msg.value)(msg.sender, value, data);\n', '        }else if(msg.value > 0){\n', '            to.transfer(msg.value);\n', '        }\n', '\n', '        Transfer(msg.sender, to, value);\n', '        if(data.length > 0)\n', '            TransferData(msg.sender, to, value, data);\n', '    }\n', '}\n', '/*************************************************************************\n', ' * import "./include/ERC23PayableToken.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', 'contract NYXToken is MintableToken, ERC23PayableToken {\n', '    string public constant name = "NYX Token";\n', '    string public constant symbol = "NYX";\n', '    uint constant decimals = 0;\n', '\n', '    bool public transferEnabled = true;\n', '\n', '    //The cap is 15 mln NYX\n', '    uint private constant CAP = 15*(10**6);\n', '\n', '    function mint(address _to, uint _amount){\n', '        require(totalSupply.add(_amount) <= CAP);\n', '        super.mint(_to, _amount);\n', '    }\n', '\n', '    function NYXToken(address team) {\n', '        //Transfer ownership on the token to team on creation\n', '        transferOwnership(team);\n', '        // minter is the TokenSale contract\n', '        minter = msg.sender; \n', '        /// Preserve 3 000 000 tokens for the team\n', '        mint(team, 3000000);\n', '    }\n', '\n', '    /**\n', '    * Overriding all transfers to check if transfers are enabled\n', '    */\n', '    function transferAndPay(address to, uint value, bytes data) payable{\n', '        require(transferEnabled);\n', '        super.transferAndPay(to, value, data);\n', '    }\n', '\n', '    function enableTransfer(bool enabled) onlyOwner{\n', '        transferEnabled = enabled;\n', '    }\n', '\n', '}']