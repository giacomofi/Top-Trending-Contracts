['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: contracts/luckybox/LuckyBox.sol\n', '\n', 'contract LuckyBox is Pausable {\n', '    using SafeMath for *;\n', '\n', '    uint256 public goldBoxAmountForSale;\n', '    uint256 public silverBoxAmountForSale;\n', '\n', '    uint256 public goldBoxPrice;    // amount of eth for each gold bag.\n', '    uint256 public silverBoxPrice;\n', '\n', '    address public wallet;\n', '\n', '    mapping (address => uint256) public goldSalesRecord;\n', '    mapping (address => uint256) public silverSalesRecord;\n', '\n', '    uint256 public goldSaleLimit;\n', '    uint256 public silverSaleLimit;\n', '\n', '    constructor(address _wallet, uint256 _goldBoxAmountForSale, uint256 _silverBoxAmountForSale) public\n', '    {\n', '        require(_wallet != address(0), "need a good wallet to store fund");\n', '        require(_goldBoxAmountForSale > 0, "Gold bag amount need to be no-zero");\n', '        require(_silverBoxAmountForSale > 0, "Silver bag amount need to be no-zero");\n', '\n', '        wallet = _wallet;\n', '        goldBoxAmountForSale = _goldBoxAmountForSale;\n', '        silverBoxAmountForSale = _silverBoxAmountForSale;\n', '\n', '        goldSaleLimit = 10;\n', '        silverSaleLimit = 100;\n', '    }\n', '\n', '    function buyBoxs(address _buyer, uint256 _goldBoxAmount, uint256 _silverBoxAmount) payable public whenNotPaused {\n', '        require(_buyer != address(0));\n', '        require(_goldBoxAmount <= goldBoxAmountForSale && _silverBoxAmount <= silverBoxAmountForSale);\n', '        require(goldSalesRecord[_buyer] + _goldBoxAmount <= goldSaleLimit);\n', '        require(silverSalesRecord[_buyer] + _silverBoxAmount <= silverSaleLimit);\n', '\n', '        uint256 charge = _goldBoxAmount.mul(goldBoxPrice).add(_silverBoxAmount.mul(silverBoxPrice));\n', '        require(msg.value >= charge, "No enough ether for buying lucky bags.");\n', '        require(_goldBoxAmount > 0 || _silverBoxAmount > 0);\n', '\n', '        if (_goldBoxAmount > 0)\n', '        {\n', '            goldBoxAmountForSale = goldBoxAmountForSale.sub(_goldBoxAmount);\n', '            goldSalesRecord[_buyer] += _goldBoxAmount;\n', '            emit GoldBoxSale(_buyer, _goldBoxAmount, goldBoxPrice);\n', '        }\n', '\n', '        if (_silverBoxAmount > 0)\n', '        {\n', '            silverBoxAmountForSale = silverBoxAmountForSale.sub(_silverBoxAmount);\n', '            silverSalesRecord[_buyer] += _silverBoxAmount;\n', '            emit SilverBoxSale(_buyer, _silverBoxAmount, silverBoxPrice);\n', '        }\n', '\n', '        wallet.transfer(charge);\n', '\n', '        if (msg.value > charge)\n', '        {\n', '            uint256 weiToRefund = msg.value.sub(charge);\n', '            _buyer.transfer(weiToRefund);\n', '            emit EthRefunded(_buyer, weiToRefund);\n', '        }\n', '    }\n', '\n', '    function buyBoxs(uint256 _goldBoxAmount, uint256 _silverBoxAmount) payable public whenNotPaused {\n', '        buyBoxs(msg.sender, _goldBoxAmount, _silverBoxAmount);\n', '    }\n', '\n', '    function updateGoldBoxAmountAndPrice(uint256 _goldBoxAmountForSale, uint256 _goldBoxPrice, uint256 _goldLimit) public onlyOwner {\n', '        goldBoxAmountForSale = _goldBoxAmountForSale;\n', '        goldBoxPrice = _goldBoxPrice;\n', '        goldSaleLimit = _goldLimit;\n', '    }\n', '\n', '    function updateSilverBoxAmountAndPrice(uint256 _silverBoxAmountForSale, uint256 _silverBoxPrice, uint256 _silverLimit) public onlyOwner {\n', '        silverBoxAmountForSale = _silverBoxAmountForSale;\n', '        silverBoxPrice = _silverBoxPrice;\n', '        silverSaleLimit = _silverLimit;\n', '    }\n', '\n', '\n', '//////////\n', '// Safety Methods\n', '//////////\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address _token) onlyOwner public {\n', '      if (_token == 0x0) {\n', '          owner.transfer(address(this).balance);\n', '          return;\n', '      }\n', '\n', '      ERC20 token = ERC20(_token);\n', '      uint balance = token.balanceOf(this);\n', '      token.transfer(owner, balance);\n', '\n', '      emit ClaimedTokens(_token, owner, balance);\n', '    }\n', '\n', '\n', '    event GoldBoxSale(address indexed _user, uint256 _amount, uint256 _price);\n', '    \n', '    event SilverBoxSale(address indexed _user, uint256 _amount, uint256 _price);\n', '\n', '    event EthRefunded(address indexed buyer, uint256 value);\n', '\n', '    event ClaimedTokens(address indexed _token, address indexed _to, uint _amount);\n', '\n', '}']