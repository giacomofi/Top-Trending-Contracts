['pragma solidity ^0.4.24;\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '\n', '\tfunction safeMul(uint256 a, uint256 b) pure internal returns (uint256) {\n', '\t\tuint256 c = a * b;\n', '\t\tjudgement(a == 0 || c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction safeDiv(uint256 a, uint256 b) pure internal returns (uint256) {\n', '\t\tjudgement(b > 0);\n', '\t\tuint256 c = a / b;\n', '\t\tjudgement(a == b * c + a % b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction safeSub(uint256 a, uint256 b) pure internal returns (uint256) {\n', '\t\tjudgement(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\tfunction safeAdd(uint256 a, uint256 b) pure internal returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\tjudgement(c >= a && c >= b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction safeMulWithPresent(uint256 a, uint256 b) pure internal returns (uint256){\n', '\t\tuint256 c = safeDiv(safeMul(a, b), 1000);\n', '\t\tjudgement(b == (c * 1000) / a);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction judgement(bool assertion) pure internal {\n', '\t\tif (!assertion) {\n', '\t\t\trevert();\n', '\t\t}\n', '\t}\n', '}\n', '\n', 'contract CREAuth {\n', '\taddress public owner;\n', '\tconstructor () public{\n', '\t\towner = msg.sender;\n', '\t}\n', '\tevent LogOwnerChanged (address msgSender);\n', '\n', '\t///@notice check if the msgSender is owner\n', '\tmodifier onlyOwner{\n', '\t\tassert(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction setOwner(address newOwner) public onlyOwner returns (bool){\n', '\t\trequire(newOwner != address(0));\n', '\t\towner = newOwner;\n', '\t\temit LogOwnerChanged(msg.sender);\n', '\t\treturn true;\n', '\t}\n', '\n', '}\n', '\n', 'contract Token is SafeMath {\n', '\t/*\n', '\t\tStandard ERC20 token\n', '\t*/\n', '\tuint256 public totalSupply;\n', '\tuint256 internal maxSupply;\n', '\t/// total amount of tokens\n', '\t/// @param _owner The address from which the balance will be retrieved\n', '\t/// @return The balance\n', '\tfunction balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '\t/// @notice send `_value` token to `_to` from `msg.sender`\n', '\t/// @param _to The address of the recipient\n', '\t/// @param _value The amount of token to be transferred\n', '\t/// @return Whether the transfer was successful or not\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '\t/// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '\t/// @param _from The address of the sender\n', '\t/// @param _to The address of the recipient\n', '\t/// @param _value The amount of token to be transferred\n', '\t/// @return Whether the transfer was successful or not\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '\t/// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '\t/// @param _spender The address of the account able to transfer the tokens\n', '\t/// @param _value The amount of tokens to be approved for transfer\n', '\t/// @return Whether the approval was successful or not\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '\t/// @param _owner The address of the account owning tokens\n', '\t/// @param _spender The address of the account able to transfer the tokens\n', '\t/// @return Amount of remaining tokens allowed to spent\n', '\tfunction allowance(address _owner, address _spender) view public returns (uint256 remaining);\n', '\n', '\t/// @notice transferred\n', '\t/// @param amount The amount need to burn\n', '\n', '\tfunction burn(uint256 amount) public returns (bool);\n', '\n', '\t/// mapping the main chain&#39;s key to eth key\n', '\t/// @param key Tf main chain\n', '\tfunction register(string key) public returns (bool);\n', '\n', '\t/// mint the token to token owner\n', '\t/// @param amountOfMint of token mint\n', '\tfunction mint(uint256 amountOfMint) public returns (bool);\n', '\n', '\tevent Transfer                           (address indexed _from, address indexed _to, uint256 _value);\n', '\tevent Approval                           (address indexed _owner, address indexed _spender, uint256 _value);\n', '\tevent Burn                               (address indexed _owner, uint256 indexed _value);\n', '\tevent LogRegister                        (address user, string key);\n', '\tevent Mint                               (address user,uint256 indexed amountOfMint);\n', '}\n', '\n', 'contract StandardToken is Token, CREAuth {\n', '\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool ind) {\n', '\t\t//Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '\t\t//If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn&#39;t wrap.\n', '\t\t//Replace the if with this one instead.\n', '\n', '\t\trequire(_to != address(0));\n', '\t\tassert(balances[msg.sender] >= _value && _value > 0);\n', '\n', '\t\tbalances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '\t\tbalances[_to] = safeAdd(balances[_to], _value);\n', '\t\temit Transfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '\t\t//same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '\t\trequire(_to != address(0));\n', '\t\tassert(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\n', '\n', '\t\tbalances[_to] = safeAdd(balances[_to], _value);\n', '\t\tbalances[_from] = safeSub(balances[_from], _value);\n', '\t\tallowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n', '\t\temit Transfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n', '\t\trequire(_spender != address(0));\n', '\t\trequire(_value > 0);\n', '\t\trequire(allowed[msg.sender][_spender] == 0);\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\temit Approval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '\n', '\tfunction burn(uint256 amount) public onlyOwner returns (bool){\n', '\n', '\t\trequire(balances[msg.sender] >= amount);\n', '\t\tbalances[msg.sender] = safeSub(balances[msg.sender], amount);\n', '\t\ttotalSupply = safeSub(totalSupply, amount);\n', '\t\temit Burn(msg.sender, amount);\n', '\t\treturn true;\n', '\n', '\t}\n', '\n', '\tfunction register(string key) public returns (bool){\n', '\t\tassert(bytes(key).length <= 64);\n', '\n', '\t\tkeys[msg.sender] = key;\n', '\t\temit LogRegister(msg.sender, key);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction mint(uint256 amountOfMint) public onlyOwner returns (bool){\n', '\t\t//if totalSupply + amountOfMint <= maxSupply then mint token to contract owner\n', '\t\trequire(safeAdd(totalSupply, amountOfMint) <= maxSupply);\n', '\t\ttotalSupply = safeAdd(totalSupply, amountOfMint);\n', '\t\tbalances[msg.sender] = safeAdd(balances[msg.sender], amountOfMint);\n', '\t\temit Mint(msg.sender ,amountOfMint);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tmapping(address => uint256)                      internal balances;\n', '\tmapping(address => mapping(address => uint256))  private  allowed;\n', '\tmapping(address => string)                       private  keys;\n', '\n', '}\n', '\n', 'contract CREToken is StandardToken {\n', '\n', '\tstring public name = "CoinRealEcosystem";                                   /// Set the full name of this contract\n', '\tuint256 public decimals = 18;                                 /// Set the decimal\n', '\tstring public symbol = "CRE";                                 /// Set the symbol of this contract\n', '\n', '\n', '\tconstructor() public {/// Should have sth in this\n', '\t\towner = msg.sender;\n', '\t\ttotalSupply = 1000000000000000000000000000;\n', '\t\t/// 10 Billion for init mint\n', '\t\tmaxSupply = 2000000000000000000000000000;\n', '\t\t/// set Max supply as 20 billion\n', '\t\tbalances[msg.sender] = totalSupply;\n', '\t}\n', '\n', '\tfunction() public {\n', '\t\trevert();\n', '\t}\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '\n', '\tfunction safeMul(uint256 a, uint256 b) pure internal returns (uint256) {\n', '\t\tuint256 c = a * b;\n', '\t\tjudgement(a == 0 || c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction safeDiv(uint256 a, uint256 b) pure internal returns (uint256) {\n', '\t\tjudgement(b > 0);\n', '\t\tuint256 c = a / b;\n', '\t\tjudgement(a == b * c + a % b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction safeSub(uint256 a, uint256 b) pure internal returns (uint256) {\n', '\t\tjudgement(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\tfunction safeAdd(uint256 a, uint256 b) pure internal returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\tjudgement(c >= a && c >= b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction safeMulWithPresent(uint256 a, uint256 b) pure internal returns (uint256){\n', '\t\tuint256 c = safeDiv(safeMul(a, b), 1000);\n', '\t\tjudgement(b == (c * 1000) / a);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction judgement(bool assertion) pure internal {\n', '\t\tif (!assertion) {\n', '\t\t\trevert();\n', '\t\t}\n', '\t}\n', '}\n', '\n', 'contract CREAuth {\n', '\taddress public owner;\n', '\tconstructor () public{\n', '\t\towner = msg.sender;\n', '\t}\n', '\tevent LogOwnerChanged (address msgSender);\n', '\n', '\t///@notice check if the msgSender is owner\n', '\tmodifier onlyOwner{\n', '\t\tassert(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction setOwner(address newOwner) public onlyOwner returns (bool){\n', '\t\trequire(newOwner != address(0));\n', '\t\towner = newOwner;\n', '\t\temit LogOwnerChanged(msg.sender);\n', '\t\treturn true;\n', '\t}\n', '\n', '}\n', '\n', 'contract Token is SafeMath {\n', '\t/*\n', '\t\tStandard ERC20 token\n', '\t*/\n', '\tuint256 public totalSupply;\n', '\tuint256 internal maxSupply;\n', '\t/// total amount of tokens\n', '\t/// @param _owner The address from which the balance will be retrieved\n', '\t/// @return The balance\n', '\tfunction balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '\t/// @notice send `_value` token to `_to` from `msg.sender`\n', '\t/// @param _to The address of the recipient\n', '\t/// @param _value The amount of token to be transferred\n', '\t/// @return Whether the transfer was successful or not\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '\t/// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '\t/// @param _from The address of the sender\n', '\t/// @param _to The address of the recipient\n', '\t/// @param _value The amount of token to be transferred\n', '\t/// @return Whether the transfer was successful or not\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '\t/// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '\t/// @param _spender The address of the account able to transfer the tokens\n', '\t/// @param _value The amount of tokens to be approved for transfer\n', '\t/// @return Whether the approval was successful or not\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '\t/// @param _owner The address of the account owning tokens\n', '\t/// @param _spender The address of the account able to transfer the tokens\n', '\t/// @return Amount of remaining tokens allowed to spent\n', '\tfunction allowance(address _owner, address _spender) view public returns (uint256 remaining);\n', '\n', '\t/// @notice transferred\n', '\t/// @param amount The amount need to burn\n', '\n', '\tfunction burn(uint256 amount) public returns (bool);\n', '\n', "\t/// mapping the main chain's key to eth key\n", '\t/// @param key Tf main chain\n', '\tfunction register(string key) public returns (bool);\n', '\n', '\t/// mint the token to token owner\n', '\t/// @param amountOfMint of token mint\n', '\tfunction mint(uint256 amountOfMint) public returns (bool);\n', '\n', '\tevent Transfer                           (address indexed _from, address indexed _to, uint256 _value);\n', '\tevent Approval                           (address indexed _owner, address indexed _spender, uint256 _value);\n', '\tevent Burn                               (address indexed _owner, uint256 indexed _value);\n', '\tevent LogRegister                        (address user, string key);\n', '\tevent Mint                               (address user,uint256 indexed amountOfMint);\n', '}\n', '\n', 'contract StandardToken is Token, CREAuth {\n', '\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool ind) {\n', "\t\t//Default assumes totalSupply can't be over max (2^256 - 1).\n", "\t\t//If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '\t\t//Replace the if with this one instead.\n', '\n', '\t\trequire(_to != address(0));\n', '\t\tassert(balances[msg.sender] >= _value && _value > 0);\n', '\n', '\t\tbalances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '\t\tbalances[_to] = safeAdd(balances[_to], _value);\n', '\t\temit Transfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '\t\t//same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '\t\trequire(_to != address(0));\n', '\t\tassert(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\n', '\n', '\t\tbalances[_to] = safeAdd(balances[_to], _value);\n', '\t\tbalances[_from] = safeSub(balances[_from], _value);\n', '\t\tallowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n', '\t\temit Transfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool success) {\n', '\t\trequire(_spender != address(0));\n', '\t\trequire(_value > 0);\n', '\t\trequire(allowed[msg.sender][_spender] == 0);\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\temit Approval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '\n', '\tfunction burn(uint256 amount) public onlyOwner returns (bool){\n', '\n', '\t\trequire(balances[msg.sender] >= amount);\n', '\t\tbalances[msg.sender] = safeSub(balances[msg.sender], amount);\n', '\t\ttotalSupply = safeSub(totalSupply, amount);\n', '\t\temit Burn(msg.sender, amount);\n', '\t\treturn true;\n', '\n', '\t}\n', '\n', '\tfunction register(string key) public returns (bool){\n', '\t\tassert(bytes(key).length <= 64);\n', '\n', '\t\tkeys[msg.sender] = key;\n', '\t\temit LogRegister(msg.sender, key);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction mint(uint256 amountOfMint) public onlyOwner returns (bool){\n', '\t\t//if totalSupply + amountOfMint <= maxSupply then mint token to contract owner\n', '\t\trequire(safeAdd(totalSupply, amountOfMint) <= maxSupply);\n', '\t\ttotalSupply = safeAdd(totalSupply, amountOfMint);\n', '\t\tbalances[msg.sender] = safeAdd(balances[msg.sender], amountOfMint);\n', '\t\temit Mint(msg.sender ,amountOfMint);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tmapping(address => uint256)                      internal balances;\n', '\tmapping(address => mapping(address => uint256))  private  allowed;\n', '\tmapping(address => string)                       private  keys;\n', '\n', '}\n', '\n', 'contract CREToken is StandardToken {\n', '\n', '\tstring public name = "CoinRealEcosystem";                                   /// Set the full name of this contract\n', '\tuint256 public decimals = 18;                                 /// Set the decimal\n', '\tstring public symbol = "CRE";                                 /// Set the symbol of this contract\n', '\n', '\n', '\tconstructor() public {/// Should have sth in this\n', '\t\towner = msg.sender;\n', '\t\ttotalSupply = 1000000000000000000000000000;\n', '\t\t/// 10 Billion for init mint\n', '\t\tmaxSupply = 2000000000000000000000000000;\n', '\t\t/// set Max supply as 20 billion\n', '\t\tbalances[msg.sender] = totalSupply;\n', '\t}\n', '\n', '\tfunction() public {\n', '\t\trevert();\n', '\t}\n', '\n', '}']
