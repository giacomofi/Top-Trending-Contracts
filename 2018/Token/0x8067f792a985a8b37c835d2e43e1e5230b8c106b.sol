['pragma solidity ^0.4.11;\n', '\n', 'interface IERC20 {\n', ' \n', '\n', '    function totalSupply() public constant returns (uint256 totalSupply);\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _owner, uint256 _value) public returns (bool success);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '    function transferFrom(address _owner, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', '*/\n', 'contract KeplerCoin is IERC20 {\n', '    \n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    \n', '    uint256 public constant  _totalSupply = 30000000000000000000000000 ;\n', '    string public constant symbol = "KPL";\n', '    string public constant name = "Kepler Coin";\n', '    uint8 public constant decimals = 18;\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    \n', '    // rate of our token\n', '    uint256 public RATE = 5000;\n', '    \n', '    // address of the person who created it\n', '    address public owner;\n', '    \n', '    bool public isActive = true;\n', '    \n', '\n', '    \n', '    //paybale function to create transaction\n', '    \n', '    function () payable {\n', '        createTokens();\n', '    }\n', '\n', '    function KeplerCoin(){\n', '    \n', '        owner = msg.sender;\n', '        balances[msg.sender] = _totalSupply;\n', '\n', '\n', '    } \n', '    \n', '    function changeRate(uint256 _rate){\n', '    \n', '        require(msg.sender == owner);\n', '\n', '        RATE = _rate;\n', '    }\n', '    \n', '    \n', '    function toggleActive(bool _isActive){\n', '        \n', '        require(msg.sender == owner);\n', '        \n', '        isActive = _isActive;\n', '\n', '    }\n', '    \n', '    \n', '   \n', ' \n', '    \n', '    function createTokens() payable{\n', '        require(msg.value > 0\n', '        && isActive\n', '        );\n', '        \n', '        uint256 tokens = msg.value*RATE;\n', '        \n', '        require(balances[owner] >= tokens);\n', '\n', '        balances[owner] = balances[owner].sub(tokens);\n', '\n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '\n', '        owner.transfer(msg.value);\n', '    }\n', '    \n', '    function totalSupply() public constant returns (uint256 totalSupply){\n', '        return _totalSupply;\n', '    }\n', '    \n', '     function balanceOf(address _owner) public constant returns (uint256 balance){\n', '         return balances[_owner];\n', '     }\n', '     \n', '    function transfer(address _owner, uint256 _value) public returns (bool success){\n', '        \n', '        require(\n', '            balances[msg.sender]>= _value \n', '            && _value >0\n', '            );\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_owner] = balances[_owner].add(_value);\n', '        Transfer(msg.sender , _owner  , _value);\n', '        return true;\n', '    }\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    \n', '    \n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining){\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\n', '        require(\n', '            allowed[_from][msg.sender] >= _value\n', '            && balances[_from] >= _value\n', '            && _value >0\n', '            );\n', '        \n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from , _to , _value);\n', '        return true;\n', '        \n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success){\n', '        \n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender , _spender , _value);\n', '        return true;\n', '        \n', '    }\n', '    \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '\n', ' \n', '\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'interface IERC20 {\n', ' \n', '\n', '    function totalSupply() public constant returns (uint256 totalSupply);\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _owner, uint256 _value) public returns (bool success);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '    function transferFrom(address _owner, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', '*/\n', 'contract KeplerCoin is IERC20 {\n', '    \n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    \n', '    uint256 public constant  _totalSupply = 30000000000000000000000000 ;\n', '    string public constant symbol = "KPL";\n', '    string public constant name = "Kepler Coin";\n', '    uint8 public constant decimals = 18;\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    \n', '    // rate of our token\n', '    uint256 public RATE = 5000;\n', '    \n', '    // address of the person who created it\n', '    address public owner;\n', '    \n', '    bool public isActive = true;\n', '    \n', '\n', '    \n', '    //paybale function to create transaction\n', '    \n', '    function () payable {\n', '        createTokens();\n', '    }\n', '\n', '    function KeplerCoin(){\n', '    \n', '        owner = msg.sender;\n', '        balances[msg.sender] = _totalSupply;\n', '\n', '\n', '    } \n', '    \n', '    function changeRate(uint256 _rate){\n', '    \n', '        require(msg.sender == owner);\n', '\n', '        RATE = _rate;\n', '    }\n', '    \n', '    \n', '    function toggleActive(bool _isActive){\n', '        \n', '        require(msg.sender == owner);\n', '        \n', '        isActive = _isActive;\n', '\n', '    }\n', '    \n', '    \n', '   \n', ' \n', '    \n', '    function createTokens() payable{\n', '        require(msg.value > 0\n', '        && isActive\n', '        );\n', '        \n', '        uint256 tokens = msg.value*RATE;\n', '        \n', '        require(balances[owner] >= tokens);\n', '\n', '        balances[owner] = balances[owner].sub(tokens);\n', '\n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '\n', '        owner.transfer(msg.value);\n', '    }\n', '    \n', '    function totalSupply() public constant returns (uint256 totalSupply){\n', '        return _totalSupply;\n', '    }\n', '    \n', '     function balanceOf(address _owner) public constant returns (uint256 balance){\n', '         return balances[_owner];\n', '     }\n', '     \n', '    function transfer(address _owner, uint256 _value) public returns (bool success){\n', '        \n', '        require(\n', '            balances[msg.sender]>= _value \n', '            && _value >0\n', '            );\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_owner] = balances[_owner].add(_value);\n', '        Transfer(msg.sender , _owner  , _value);\n', '        return true;\n', '    }\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    \n', '    \n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining){\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\n', '        require(\n', '            allowed[_from][msg.sender] >= _value\n', '            && balances[_from] >= _value\n', '            && _value >0\n', '            );\n', '        \n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from , _to , _value);\n', '        return true;\n', '        \n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success){\n', '        \n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender , _spender , _value);\n', '        return true;\n', '        \n', '    }\n', '    \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '\n', ' \n', '\n', '}']
