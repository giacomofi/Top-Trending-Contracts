['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '   \n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', ' \n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    \n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '\n', '\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract IonicCoin is StandardToken, owned {\n', '\tstring public constant name = &#39;IonicCoin&#39;;\n', '\tstring public constant symbol = &#39;INC&#39;;\n', '\tuint public constant decimals = 18;\n', '\tuint private constant INITIAL_SUPPLY =  50000000 * (10 ** uint256(decimals));\n', '  uint private constant RESERVE =  20000000 * (10 ** uint256(decimals)); \n', '    // Gathered funds can be withdrawn only to ionicteam address.\n', '  \n', '  uint256 public sellPrice;\n', '  uint256 public buyPrice;\n', '  bool public sellingAccepted = false;\n', '    //1 Ether = 2000 Token\n', '  \n', '  uint256 private constant FREE_TOKEN = 100;\n', '\n', '  uint256 private constant RATE_PHASE_1 = 2000;\n', '  uint256 private constant RATE_PHASE_2 = 1500;\n', '  uint256 private constant RATE_PHASE_3 = 1000;\n', '  uint256 private constant RATE_PHASE_4 = 500;\n', '  uint256 private phase = 1;\n', '\n', '  struct User{\n', '    address addr;\n', '    uint balance;\n', '    bool claimed;\n', '    bool allowed;\n', '  }\n', '    \n', '  mapping (address => User) users;\n', '\taddress[] public userAccounts;\n', '\n', '\tfunction IonicCoin() {\n', '        owner = msg.sender; \n', '\t\ttotalSupply = INITIAL_SUPPLY + RESERVE;\n', '\t\tbalances[msg.sender] = totalSupply;\n', '\t}\n', '\n', '\n', '    // accpet ether\n', '    function () payable {\n', '        createTokens();\n', '    }\n', '\n', '    function createTokens() payable {\n', '        uint256 tokens = msg.value.mul(getTokeRate());\n', '        // min - 0.1 ETH\n', '        require(msg.value >= ((1 ether / 1 wei) / 10));\n', '        require(\n', '            msg.value > 0\n', '            && tokens <= totalSupply\n', '        );\n', '        userAccounts.push(msg.sender)-1;\n', '         \n', '        users[msg.sender].addr = msg.sender;\n', '        users[msg.sender].allowed = false;\n', '        users[msg.sender].claimed = false;\n', '        users[msg.sender].balance = tokens;\n', '\n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '        totalSupply = totalSupply.sub(tokens);\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '    function getUsers() onlyOwner view public returns(address[]){\n', '      return userAccounts;\n', '    }\n', '    \n', '    function getUser(address _address) onlyOwner view public returns(bool,bool, uint){\n', '      return (users[_address].claimed , users[_address].allowed ,users[_address].balance);\n', '    }\n', '\n', '    function countUsers() view public returns (uint){\n', '      userAccounts.length;\n', '    }\n', '\n', '    function setAllowClaimUser(address _address) onlyOwner public {\n', '        users[_address].allowed = true;\n', '        users[_address].claimed = true;\n', '    }\n', '    \n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '\n', '    function sellingAccept(bool value) onlyOwner public {\n', '        sellingAccepted = value;\n', '    }\n', '    \n', '    function setPhase(uint256 value) onlyOwner public {\n', '        phase = value;\n', '    }\n', '    \n', '    function getTokeRate() private\n', '    constant\n', '    returns (uint256 currentPrice) {\n', '        if(phase == 1) return RATE_PHASE_1;\n', '        else if(phase == 2) return RATE_PHASE_2;\n', '        else if(phase == 3) return RATE_PHASE_3;\n', '        else if(phase == 4) return RATE_PHASE_4;\n', '    }\n', '    \n', '    \n', '    function sell(uint256 amount) public {\n', '      require (sellingAccepted == true); // selling accept when ICO is eneded\n', '      require (sellPrice > 0);\n', '      // min - 0.1 ETH\n', '      require(msg.value >= ((1 ether / 1 wei) / 10));\n', '      require(balances[owner] >= amount * sellPrice);      // checks if the contract has enough ether to buy\n', '      transferFrom(msg.sender, owner, amount);           // makes the transfers\n', '      msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It&#39;s important to do this last to avoid recursion attacks\n', '    \n', '    }\n', '    \n', '    \n', '    \n', '    function withdrawEther(address ethFundDeposit) public onlyOwner\n', '    { \n', '        uint256 amount = balances[owner];\n', '        if(amount > 0) \n', '        {\n', '            ethFundDeposit.transfer(amount);\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require (_to != 0x0); \n', '        require(\n', '            balances[msg.sender] >= _value\n', '            && _value > 0\n', '        ); \n', '\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            if(totalSupply <= RESERVE){ // run out of token\n', '                return false;\n', '            }\n', '            \n', '            balances[_to] = balances[_to].add(_value);\n', '            balances[msg.sender] = balances[msg.sender].sub(_value); \n', '            totalSupply = totalSupply.sub(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '\n', ' \n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '    require (_to != 0x0);                                // Prevent transfer to 0x0 address. Use burn() instead\n', '\t  require (_value > 0); \n', '    require (balances[_from] > _value);                 // Check if the sender has enough\n', '    require (balances[_to] + _value > balances[_to]);  // Check for overflows\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    require (_value <= _allowance);\n', '    \n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '    \n', '}']