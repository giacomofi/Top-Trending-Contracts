['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '  \tuint256 c = a * b;\n', '  \tassert(a == 0 || c / a == b);\n', '  \treturn c;\n', '\t}\n', '\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '  \t// assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '  \tassert(b <= a);\n', '  \treturn a - b;\n', '\t}\n', '\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '  \tuint256 c = a + b;\n', '  \tassert(c >= a);\n', '  \treturn c;\n', '\t}\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\taddress public owner;\n', '  address public AD = 0xf77F9D99dB407f8dA9131D15e385785923F65473;\n', '\n', '\t/**\n', ' * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', ' \t * account.\n', ' \t */\n', '\tfunction Ownable() public {\n', '  \towner = msg.sender;\n', '\t}\n', '\n', '\t/**\n', ' \t * @dev Throws if called by any account other than the owner.\n', ' \t */\n', '\n', '\tmodifier onlyAD(){\n', '  \trequire(msg.sender == AD);\n', '  \t_;\n', '\t}\n', '\n', '\t/**\n', ' \t * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', ' \t * @param newOwner The address to transfer ownership to.\n', ' \t */\n', '\tfunction transferOwnership(address newOwner) onlyAD public;\n', '\n', '  /**\n', '   * @dev Allows the current token commission receiver to transfer control of the contract to a new token commission receiver.\n', '   * @param newTokenCommissionReceiver The address to transfer token commission receiver to.\n', '   */\n', '  function transferCommissionReceiver(address newTokenCommissionReceiver) onlyAD public;\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '\tfunction balanceOf(address who) public constant returns (uint256);\n', '\tfunction transfer(address to, uint256 value) public returns (bool);\n', '\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20Basic, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '\tmapping(address => uint256) balances;\n', '\n', '  // The percentage of commission\n', '  uint public commissionPercentForCreator = 1;\n', '\n', '  // Coin Properties\n', '  uint256 public decimals = 18;\n', '\n', '  // one coin\n', '  uint256 public oneCoin = 10 ** decimals;\n', '\n', '\t/**\n', '\t * @dev transfer token for a specified address\n', '\t * @param _to The address to transfer to.\n', '\t * @param _value The amount to be transferred.\n', '\t */\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '  \tbalances[_to] = balances[_to].add(_value);\n', '  \tTransfer(msg.sender, _to, _value);\n', '  \treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Gets the balance of the specified address.\n', '\t * @param _owner The address to query the the balance of.\n', '\t * @return An uint256 representing the amount owned by the passed address.\n', '\t */\n', '\tfunction balanceOf(address _owner) public constant returns (uint256 balance) {\n', '  \treturn balances[_owner];\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Transfer tokens from one address to another\n', '\t * @param _from address The address which you want to send tokens from\n', '\t * @param _to address The address which you want to transfer to\n', '\t * @param _value uint256 the amout of tokens to be transfered\n', ' \t */\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '  \trequire(_to != address(0));\n', '  \tbalances[_to] = balances[_to].add(_value);\n', '  \tbalances[_from] = balances[_from].sub(_value);\n', '  \tTransfer(_from, _to, _value);\n', '  \treturn true;\n', '\t}\n', '\n', '  function isTransferable(address _sender, address _receiver, uint256 value) public returns (bool) {\n', '    uint256 actualValue = value;\n', '    // in case sender is owner, need to make sure owner has enough token for both commission and sending amount\n', '    // in case receiver is owner, we no need to care because they will enough to transfer 1% of receive amount\n', '    if (_sender == owner) {\n', '      uint cm = (value * oneCoin * commissionPercentForCreator).div(100);\n', '      actualValue = actualValue + cm;\n', '    }\n', '\n', '    // Check if the sender has enough\n', '    if (balances[_sender] < actualValue) return false;\n', '    \n', '    // Check for overflows\n', '    if (balances[_receiver] + value < balances[_receiver]) return false;\n', '    return true;\n', '  }\n', '\n', '\t/* This unnamed function is called whenever someone tries to send ether to it */\n', '  function() public {\n', '    // Prevents accidental sending of ether\n', '    revert();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ATL token\n', ' */\n', 'contract ATLToken is StandardToken {\n', '  // total supply to market 10.000.000 coins\n', '\tuint256 public totalSupply = 10 * (10**6) * oneCoin;\n', '\n', '  // The address that will receive the commission for each transaction to or from the owner\n', '\taddress public tokenCommissionReceiver = 0xEa8867Ce34CC66318D4A055f43Cac6a88966C43f; \n', '\t\n', '\tstring public name = "ATON";\n', '\tstring public symbol = "ATL";\n', '\t\n', '\tfunction ATLToken() public {\n', '\t\tbalances[msg.sender] = totalSupply;\n', '\t}\n', '\n', '\t/**\n', ' * @dev Allows anyone to transfer the Change tokens once trading has started\n', '\t * @param _to the recipient address of the tokens.\n', '\t * @param _value number of tokens to be transfered.\n', ' \t */\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '    _value = _value.div(oneCoin);\n', '    if (!isTransferable(msg.sender, _to, _value)) revert();\n', '    if (_to == owner || msg.sender == owner) {\n', '      //calculate the commission\n', '      uint cm = (_value * oneCoin * commissionPercentForCreator).div(100);\n', '      //make sure commision always transfer from owner\n', '      super.transferFrom(owner, tokenCommissionReceiver, cm);\n', '    }\n', '  \treturn super.transfer(_to, _value * oneCoin);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Allows anyone to transfer the Change tokens once trading has started\n', '\t * @param _from address The address which you want to send tokens from\n', '\t * @param _to address The address which you want to transfer to\n', '\t * @param _value uint the amout of tokens to be transfered\n', ' \t*/\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    _value = _value.div(oneCoin);\n', '    if (!isTransferable(_from, _to, _value)) revert();\n', '  \tif (_from == owner || _to == owner) {\n', '      //calculate the commission\n', '      uint cm = (_value  * oneCoin * commissionPercentForCreator).div(100);\n', '      //make sure commision always transfer from owner\n', '      super.transferFrom(owner, tokenCommissionReceiver, cm);\n', '    }\n', '    return super.transferFrom(_from, _to, _value * oneCoin);\n', '\t}\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyAD public {\n', '    if (newOwner != address(0)) {\n', '      uint256 totalTokenOfOwner = balances[owner];\n', '      //make sure transfer all token from owner to new owner\n', '      super.transferFrom(owner, newOwner, totalTokenOfOwner);\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current token commission receiver to transfer control of the contract to a new token commission receiver.\n', '   * @param newTokenCommissionReceiver The address to transfer token commission receiver to.\n', '   */\n', '  function transferCommissionReceiver(address newTokenCommissionReceiver) onlyAD public {\n', '    if (newTokenCommissionReceiver != address(0)) {\n', '      tokenCommissionReceiver = newTokenCommissionReceiver;\n', '    }\n', '  }\n', '\n', '\tfunction emergencyERC20Drain( ERC20Basic oddToken, uint256 amount ) public {\n', '  \toddToken.transfer(owner, amount);\n', '\t}\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '  \tuint256 c = a * b;\n', '  \tassert(a == 0 || c / a == b);\n', '  \treturn c;\n', '\t}\n', '\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '  \t// assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '  \tassert(b <= a);\n', '  \treturn a - b;\n', '\t}\n', '\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '  \tuint256 c = a + b;\n', '  \tassert(c >= a);\n', '  \treturn c;\n', '\t}\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\taddress public owner;\n', '  address public AD = 0xf77F9D99dB407f8dA9131D15e385785923F65473;\n', '\n', '\t/**\n', ' * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', ' \t * account.\n', ' \t */\n', '\tfunction Ownable() public {\n', '  \towner = msg.sender;\n', '\t}\n', '\n', '\t/**\n', ' \t * @dev Throws if called by any account other than the owner.\n', ' \t */\n', '\n', '\tmodifier onlyAD(){\n', '  \trequire(msg.sender == AD);\n', '  \t_;\n', '\t}\n', '\n', '\t/**\n', ' \t * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', ' \t * @param newOwner The address to transfer ownership to.\n', ' \t */\n', '\tfunction transferOwnership(address newOwner) onlyAD public;\n', '\n', '  /**\n', '   * @dev Allows the current token commission receiver to transfer control of the contract to a new token commission receiver.\n', '   * @param newTokenCommissionReceiver The address to transfer token commission receiver to.\n', '   */\n', '  function transferCommissionReceiver(address newTokenCommissionReceiver) onlyAD public;\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '\tfunction balanceOf(address who) public constant returns (uint256);\n', '\tfunction transfer(address to, uint256 value) public returns (bool);\n', '\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20Basic, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '\tmapping(address => uint256) balances;\n', '\n', '  // The percentage of commission\n', '  uint public commissionPercentForCreator = 1;\n', '\n', '  // Coin Properties\n', '  uint256 public decimals = 18;\n', '\n', '  // one coin\n', '  uint256 public oneCoin = 10 ** decimals;\n', '\n', '\t/**\n', '\t * @dev transfer token for a specified address\n', '\t * @param _to The address to transfer to.\n', '\t * @param _value The amount to be transferred.\n', '\t */\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '  \tbalances[_to] = balances[_to].add(_value);\n', '  \tTransfer(msg.sender, _to, _value);\n', '  \treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Gets the balance of the specified address.\n', '\t * @param _owner The address to query the the balance of.\n', '\t * @return An uint256 representing the amount owned by the passed address.\n', '\t */\n', '\tfunction balanceOf(address _owner) public constant returns (uint256 balance) {\n', '  \treturn balances[_owner];\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Transfer tokens from one address to another\n', '\t * @param _from address The address which you want to send tokens from\n', '\t * @param _to address The address which you want to transfer to\n', '\t * @param _value uint256 the amout of tokens to be transfered\n', ' \t */\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '  \trequire(_to != address(0));\n', '  \tbalances[_to] = balances[_to].add(_value);\n', '  \tbalances[_from] = balances[_from].sub(_value);\n', '  \tTransfer(_from, _to, _value);\n', '  \treturn true;\n', '\t}\n', '\n', '  function isTransferable(address _sender, address _receiver, uint256 value) public returns (bool) {\n', '    uint256 actualValue = value;\n', '    // in case sender is owner, need to make sure owner has enough token for both commission and sending amount\n', '    // in case receiver is owner, we no need to care because they will enough to transfer 1% of receive amount\n', '    if (_sender == owner) {\n', '      uint cm = (value * oneCoin * commissionPercentForCreator).div(100);\n', '      actualValue = actualValue + cm;\n', '    }\n', '\n', '    // Check if the sender has enough\n', '    if (balances[_sender] < actualValue) return false;\n', '    \n', '    // Check for overflows\n', '    if (balances[_receiver] + value < balances[_receiver]) return false;\n', '    return true;\n', '  }\n', '\n', '\t/* This unnamed function is called whenever someone tries to send ether to it */\n', '  function() public {\n', '    // Prevents accidental sending of ether\n', '    revert();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ATL token\n', ' */\n', 'contract ATLToken is StandardToken {\n', '  // total supply to market 10.000.000 coins\n', '\tuint256 public totalSupply = 10 * (10**6) * oneCoin;\n', '\n', '  // The address that will receive the commission for each transaction to or from the owner\n', '\taddress public tokenCommissionReceiver = 0xEa8867Ce34CC66318D4A055f43Cac6a88966C43f; \n', '\t\n', '\tstring public name = "ATON";\n', '\tstring public symbol = "ATL";\n', '\t\n', '\tfunction ATLToken() public {\n', '\t\tbalances[msg.sender] = totalSupply;\n', '\t}\n', '\n', '\t/**\n', ' * @dev Allows anyone to transfer the Change tokens once trading has started\n', '\t * @param _to the recipient address of the tokens.\n', '\t * @param _value number of tokens to be transfered.\n', ' \t */\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '    _value = _value.div(oneCoin);\n', '    if (!isTransferable(msg.sender, _to, _value)) revert();\n', '    if (_to == owner || msg.sender == owner) {\n', '      //calculate the commission\n', '      uint cm = (_value * oneCoin * commissionPercentForCreator).div(100);\n', '      //make sure commision always transfer from owner\n', '      super.transferFrom(owner, tokenCommissionReceiver, cm);\n', '    }\n', '  \treturn super.transfer(_to, _value * oneCoin);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Allows anyone to transfer the Change tokens once trading has started\n', '\t * @param _from address The address which you want to send tokens from\n', '\t * @param _to address The address which you want to transfer to\n', '\t * @param _value uint the amout of tokens to be transfered\n', ' \t*/\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    _value = _value.div(oneCoin);\n', '    if (!isTransferable(_from, _to, _value)) revert();\n', '  \tif (_from == owner || _to == owner) {\n', '      //calculate the commission\n', '      uint cm = (_value  * oneCoin * commissionPercentForCreator).div(100);\n', '      //make sure commision always transfer from owner\n', '      super.transferFrom(owner, tokenCommissionReceiver, cm);\n', '    }\n', '    return super.transferFrom(_from, _to, _value * oneCoin);\n', '\t}\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyAD public {\n', '    if (newOwner != address(0)) {\n', '      uint256 totalTokenOfOwner = balances[owner];\n', '      //make sure transfer all token from owner to new owner\n', '      super.transferFrom(owner, newOwner, totalTokenOfOwner);\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current token commission receiver to transfer control of the contract to a new token commission receiver.\n', '   * @param newTokenCommissionReceiver The address to transfer token commission receiver to.\n', '   */\n', '  function transferCommissionReceiver(address newTokenCommissionReceiver) onlyAD public {\n', '    if (newTokenCommissionReceiver != address(0)) {\n', '      tokenCommissionReceiver = newTokenCommissionReceiver;\n', '    }\n', '  }\n', '\n', '\tfunction emergencyERC20Drain( ERC20Basic oddToken, uint256 amount ) public {\n', '  \toddToken.transfer(owner, amount);\n', '\t}\n', '}']
