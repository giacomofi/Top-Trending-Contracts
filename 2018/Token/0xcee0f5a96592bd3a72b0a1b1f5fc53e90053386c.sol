['pragma solidity ^0.4.20;\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe math\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() public view returns (uint);\n', '\n', '    /// @param tokenOwner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '\n', '    /// @notice send `tokens` token to `to` from `msg.sender`\n', '    /// @param to The address of the recipient\n', '    /// @param tokens The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    /// reverts/fails the transaction if conditions are not met\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '\n', '    /// @notice send `tokens` token to `to` from `from` on the condition it is approved by `from`\n', '    /// @param from The address of the sender\n', '    /// @param to The address of the recipient\n', '    /// @param tokens The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    /// reverts/fails the transaction if conditions are not met\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `spender` to spend `tokens` tokens\n', '    /// @param spender The address of the account able to transfer the tokens\n', '    /// @param tokens The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    /// reverts/fails the transaction if conditions are not met\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '\n', '    /// @param tokenOwner The address of the account owning tokens\n', '    /// @param spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    \n', '  \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', 'contract StandardToken is Token {\n', '    \n', '    using SafeMath for uint;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require(to != address(0));\n', '        require(tokens > 0);\n', '        require(balances[msg.sender] >= tokens); \n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        require(spender != address(0));\n', '        require(tokens > 0);\n', '        \n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        require(from != address(0));\n', '        require(to != address(0));\n', '        require(tokens > 0);\n', '        require(balances[from] >= tokens);\n', '        require(allowed[from][msg.sender] >= tokens);\n', '        \n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the totalSupply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public view returns (uint) {\n', '        return totalSupply;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '}\n', '\n', 'contract KillerWhale is StandardToken { // CHANGE THIS. Update the contract name.\n', '\n', '    /* Public variables of the token */\n', '\n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string public name;                   // Token Name\n', '    uint8 public decimals;                // How many decimals to show. To be standard complicant keep it 18\n', '    string public symbol;                 // An identifier: eg SBX, XPR etc..\n', '    string public version = &#39;H1.0&#39;; \n', '    uint256 public unitsOneEthCanBuy;     // How many units of your coin can be bought by 1 ETH?\n', '    uint256 public totalEthInWei;         // WEI is the smallest unit of ETH (the equivalent of cent in USD or satoshi in BTC). We&#39;ll store the total ETH raised via our ICO here.  \n', '    address public fundsWallet;           // Where should the raised ETH go?\n', '\n', '    // This is a constructor function \n', '    // which means the following function name has to match the contract name declared above\n', '    function KillerWhale() {\n', '        name = "KillerWhale";                                          // Set the name for display purposes (CHANGE THIS)\n', '        decimals = 18;                                               // Amount of decimals for display purposes (CHANGE THIS)\n', '        symbol = "KWT";                                             // Set the symbol for display purposes (CHANGE THIS)\n', '        unitsOneEthCanBuy = 100;                                      // Set the price of your token for the ICO (CHANGE THIS)\n', '        fundsWallet = 0x3f17dE50F2D1CA4209c2028677B328E34581d4Dc;                                    // The owner of the contract gets ETH\n', '        totalSupply = 888000000 * 10 ** uint256(decimals);                        // Update total supply (1000 for example) (CHANGE THIS)\n', '        balances[0x3f17dE50F2D1CA4209c2028677B328E34581d4Dc] = totalSupply;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)\n', '        \n', '        emit Transfer(address(0),0x3f17dE50F2D1CA4209c2028677B328E34581d4Dc,totalSupply);\n', '    }\n', '\n', '\n', '    function() public payable{\n', '        totalEthInWei = totalEthInWei + msg.value;\n', '        uint256 amount = msg.value * unitsOneEthCanBuy;\n', '\n', '        // wallet should have enough tokens to fund\n', '        require(balances[fundsWallet] >= amount);\n', '\n', '        balances[fundsWallet] = balances[fundsWallet].sub(amount);\n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '\n', '        emit Transfer(fundsWallet, msg.sender, amount); // Broadcast a message to the blockchain\n', '\n', '        //Transfer ether to fundsWallet\n', '        fundsWallet.transfer(msg.value);                               \n', '    }\n', '\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn&#39;t have to include a contract in here just for this.\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { revert(); }\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.20;\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe math\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() public view returns (uint);\n', '\n', '    /// @param tokenOwner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '\n', '    /// @notice send `tokens` token to `to` from `msg.sender`\n', '    /// @param to The address of the recipient\n', '    /// @param tokens The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    /// reverts/fails the transaction if conditions are not met\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '\n', '    /// @notice send `tokens` token to `to` from `from` on the condition it is approved by `from`\n', '    /// @param from The address of the sender\n', '    /// @param to The address of the recipient\n', '    /// @param tokens The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    /// reverts/fails the transaction if conditions are not met\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `spender` to spend `tokens` tokens\n', '    /// @param spender The address of the account able to transfer the tokens\n', '    /// @param tokens The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    /// reverts/fails the transaction if conditions are not met\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '\n', '    /// @param tokenOwner The address of the account owning tokens\n', '    /// @param spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    \n', '  \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', 'contract StandardToken is Token {\n', '    \n', '    using SafeMath for uint;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require(to != address(0));\n', '        require(tokens > 0);\n', '        require(balances[msg.sender] >= tokens); \n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        require(spender != address(0));\n', '        require(tokens > 0);\n', '        \n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        require(from != address(0));\n', '        require(to != address(0));\n', '        require(tokens > 0);\n', '        require(balances[from] >= tokens);\n', '        require(allowed[from][msg.sender] >= tokens);\n', '        \n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the totalSupply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public view returns (uint) {\n', '        return totalSupply;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '}\n', '\n', 'contract KillerWhale is StandardToken { // CHANGE THIS. Update the contract name.\n', '\n', '    /* Public variables of the token */\n', '\n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string public name;                   // Token Name\n', '    uint8 public decimals;                // How many decimals to show. To be standard complicant keep it 18\n', '    string public symbol;                 // An identifier: eg SBX, XPR etc..\n', "    string public version = 'H1.0'; \n", '    uint256 public unitsOneEthCanBuy;     // How many units of your coin can be bought by 1 ETH?\n', "    uint256 public totalEthInWei;         // WEI is the smallest unit of ETH (the equivalent of cent in USD or satoshi in BTC). We'll store the total ETH raised via our ICO here.  \n", '    address public fundsWallet;           // Where should the raised ETH go?\n', '\n', '    // This is a constructor function \n', '    // which means the following function name has to match the contract name declared above\n', '    function KillerWhale() {\n', '        name = "KillerWhale";                                          // Set the name for display purposes (CHANGE THIS)\n', '        decimals = 18;                                               // Amount of decimals for display purposes (CHANGE THIS)\n', '        symbol = "KWT";                                             // Set the symbol for display purposes (CHANGE THIS)\n', '        unitsOneEthCanBuy = 100;                                      // Set the price of your token for the ICO (CHANGE THIS)\n', '        fundsWallet = 0x3f17dE50F2D1CA4209c2028677B328E34581d4Dc;                                    // The owner of the contract gets ETH\n', '        totalSupply = 888000000 * 10 ** uint256(decimals);                        // Update total supply (1000 for example) (CHANGE THIS)\n', '        balances[0x3f17dE50F2D1CA4209c2028677B328E34581d4Dc] = totalSupply;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)\n', '        \n', '        emit Transfer(address(0),0x3f17dE50F2D1CA4209c2028677B328E34581d4Dc,totalSupply);\n', '    }\n', '\n', '\n', '    function() public payable{\n', '        totalEthInWei = totalEthInWei + msg.value;\n', '        uint256 amount = msg.value * unitsOneEthCanBuy;\n', '\n', '        // wallet should have enough tokens to fund\n', '        require(balances[fundsWallet] >= amount);\n', '\n', '        balances[fundsWallet] = balances[fundsWallet].sub(amount);\n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '\n', '        emit Transfer(fundsWallet, msg.sender, amount); // Broadcast a message to the blockchain\n', '\n', '        //Transfer ether to fundsWallet\n', '        fundsWallet.transfer(msg.value);                               \n', '    }\n', '\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', "        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { revert(); }\n', '        return true;\n', '    }\n', '}']
