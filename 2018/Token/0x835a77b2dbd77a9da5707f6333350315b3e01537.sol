['pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract Kryptos {\n', '\n', '\t//***********************************************\n', '\t//*                 18.02.2018                  *\n', '\t//*               www.kryptos.ws                *\n', '\t//*        Kryptos - Secure Communication       *\n', '\t//* Egemen POLAT Tarafindan projelendirilmistir *\n', '    //***********************************************\n', '    \n', '\tbool public transferactive;\n', '\tbool public shareactive;\n', '\tbool public coinsaleactive;\n', '    string public name;\n', '    string public symbol;\n', '    uint256 public buyPrice;\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply;\n', '    address public owner;\n', '\taddress public reserve;\n', '\t\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '\t\n', '    function Kryptos(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol,\n', '        address tokenowner,\n', '\t\taddress tokenreserve,\n', '\t\tuint256 tokenbuyPrice,\n', '\t\tbool tokentransferactive,\n', '\t\tbool tokenshareactive,\n', '\t\tbool tokencoinsaleactive\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '        owner = tokenowner;\n', '\t\treserve = tokenreserve;\n', '\t\tbuyPrice = tokenbuyPrice;\n', '\t\ttransferactive = tokentransferactive;\n', '\t\tshareactive = tokenshareactive;\n', '\t\tcoinsaleactive = tokencoinsaleactive;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '    \n', '    function setOwner(address newdata) public {\n', '        if (msg.sender == owner) {owner = newdata;}\n', '    }\n', '\t\t\n', '    function setTransferactive(bool newdata) public {\n', '        if (msg.sender == owner) {transferactive = newdata;}\n', '    }\n', '\t\n', '    function setShareactive(bool newdata) public {\n', '        if (msg.sender == owner) {shareactive = newdata;}\n', '    }\n', '\t\n', '    function setCoinsaleactive(bool newdata) public {\n', '        if (msg.sender == owner) {coinsaleactive = newdata;}\n', '    }\n', '\n', '    function setPrices(uint256 newBuyPrice) public {\n', '        if (msg.sender == owner) {buyPrice = newBuyPrice;}\n', '    }\n', '    \n', '    function buy() payable public{\t\n', '        if (coinsaleactive){\n', '\t\t\tuint256 amount = msg.value * buyPrice;\n', '\t\t\tif (balanceOf[reserve] < amount) {\n', '\t\t\t\treturn;\n', '\t\t\t}\n', '\t\t\tbalanceOf[reserve] = balanceOf[reserve] - amount;\n', '\t\t\tbalanceOf[msg.sender] = balanceOf[msg.sender] + amount;\n', '\t\t\tTransfer(reserve, msg.sender, amount);\n', '\t\t\treserve.transfer(msg.value); \n', '\t\t}\n', '    }\n', '    \n', '    function ShareDATA(string SMS) public {\n', '        bytes memory string_rep = bytes(SMS);\n', '        if (shareactive){_transfer(msg.sender, reserve, string_rep.length * (2* 10 ** (uint256(decimals)-4)));}\n', '    }\n', '\t\n', '    function transfer(address _to, uint256 _value) public {\n', '        if (transferactive){_transfer(msg.sender, _to, _value);}\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}']