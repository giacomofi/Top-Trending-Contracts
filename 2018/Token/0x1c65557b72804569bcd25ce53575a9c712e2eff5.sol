['// Play2LivePromo token smart contract.\n', '// Developed by Phenom.Team <info@phenom.team>\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', 'contract Play2LivePromo {\n', '    //Owner address\n', '    address public owner;\n', '    //Public variables of the token\n', '    string public constant name  = "Level Up Coin Diamond | play2live.io";\n', '    string public constant symbol = "LUCD";\n', '    uint8 public constant decimals = 18;\n', '    uint public totalSupply = 0; \n', '    uint256 promoValue = 777 * 1e18;\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping (address => uint)) allowed;\n', '    // Events Log\n', '    event Transfer(address _from, address _to, uint256 amount); \n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '    // Modifiers\n', '    // Allows execution by the contract owner only\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }  \n', '\n', '   /**\n', '    *   @dev Contract constructor function sets owner address\n', '    */\n', '    function Play2LivePromo() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    *   @dev Allows owner to change promo value\n', '    *   @param _newValue      new   \n', '    */\n', '    function setPromo(uint256 _newValue) external onlyOwner {\n', '        promoValue = _newValue;\n', '    }\n', '\n', '   /**\n', '    *   @dev Get balance of investor\n', "    *   @param _investor     investor's address\n", '    *   @return              balance of investor\n', '    */\n', '    function balanceOf(address _investor) public constant returns(uint256) {\n', '        return balances[_investor];\n', '    }\n', '\n', '\n', '   /**\n', '    *   @dev Mint tokens\n', '    *   @param _investor     beneficiary address the tokens will be issued to\n', '    */\n', '    function mintTokens(address _investor) external onlyOwner {\n', '        balances[_investor] +=  promoValue;\n', '        totalSupply += promoValue;\n', '        Transfer(0x0, _investor, promoValue);\n', '        \n', '    }\n', '\n', '\n', '   /**\n', '    *   @dev Send coins\n', '    *   throws on any error rather then return a false flag to minimize\n', '    *   user errors\n', '    *   @param _to           target address\n', '    *   @param _amount       transfer amount\n', '    *\n', '    *   @return true if the transfer was successful\n', '    */\n', '    function transfer(address _to, uint _amount) public returns (bool) {\n', '        balances[msg.sender] -= _amount;\n', '        balances[_to] -= _amount;\n', '        Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    *   @dev An account/contract attempts to get the coins\n', '    *   throws on any error rather then return a false flag to minimize user errors\n', '    *\n', '    *   @param _from         source address\n', '    *   @param _to           target address\n', '    *   @param _amount       transfer amount\n', '    *\n', '    *   @return true if the transfer was successful\n', '    */\n', '    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {\n', '        balances[_from] -= _amount;\n', '        allowed[_from][msg.sender] -= _amount;\n', '        balances[_to] -= _amount;\n', '        Transfer(_from, _to, _amount);\n', '        return true;\n', '     }\n', '\n', '\n', '   /**\n', '    *   @dev Allows another account/contract to spend some tokens on its behalf\n', '    *   throws on any error rather then return a false flag to minimize user errors\n', '    *\n', '    *   also, to minimize the risk of the approve/transferFrom attack vector\n', '    *   approve has to be called twice in 2 separate transactions - once to\n', '    *   change the allowance to 0 and secondly to change it to the new allowance\n', '    *   value\n', '    *\n', '    *   @param _spender      approved address\n', '    *   @param _amount       allowance amount\n', '    *\n', '    *   @return true if the approval was successful\n', '    */\n', '    function approve(address _spender, uint _amount) public returns (bool) {\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    *   @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    *   @param _owner        the address which owns the funds\n', '    *   @param _spender      the address which will spend the funds\n', '    *\n', '    *   @return              the amount of tokens still avaible for the spender\n', '    */\n', '    function allowance(address _owner, address _spender) constant returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']