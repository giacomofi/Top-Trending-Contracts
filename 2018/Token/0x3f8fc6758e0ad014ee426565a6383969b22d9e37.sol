['pragma solidity ^0.4.11;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract AirDrop is Ownable {\n', '\n', '    function contractTokenBalance(address _tokenAddr) onlyOwner public constant returns(uint256) {\n', '       return  ERC20(_tokenAddr).balanceOf(msg.sender);\n', '    }\n', '    \n', '    function send(address _tokenAddr, address _to, uint256 amount) onlyOwner public returns(bool) {\n', '       return ERC20(_tokenAddr).transfer(_to, amount);\n', '    }\n', '    \n', '    function multisend(address _tokenAddr, address[] dests, uint256 amount) onlyOwner public returns(uint256) {\n', '      \n', '        uint256 i = 0;\n', '        while (i < dests.length) {\n', '          ERC20(_tokenAddr).transfer(dests[i], amount);\n', '          i += 1;\n', '        }\n', '        return(i);\n', '    }\n', '    \n', '    function () payable public {\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract AirDrop is Ownable {\n', '\n', '    function contractTokenBalance(address _tokenAddr) onlyOwner public constant returns(uint256) {\n', '       return  ERC20(_tokenAddr).balanceOf(msg.sender);\n', '    }\n', '    \n', '    function send(address _tokenAddr, address _to, uint256 amount) onlyOwner public returns(bool) {\n', '       return ERC20(_tokenAddr).transfer(_to, amount);\n', '    }\n', '    \n', '    function multisend(address _tokenAddr, address[] dests, uint256 amount) onlyOwner public returns(uint256) {\n', '      \n', '        uint256 i = 0;\n', '        while (i < dests.length) {\n', '          ERC20(_tokenAddr).transfer(dests[i], amount);\n', '          i += 1;\n', '        }\n', '        return(i);\n', '    }\n', '    \n', '    function () payable public {\n', '    }\n', '}']
