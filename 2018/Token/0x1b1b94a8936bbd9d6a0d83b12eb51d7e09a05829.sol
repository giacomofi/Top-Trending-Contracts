['pragma solidity ^0.4.19;\n', '\n', 'contract ERC20 {\n', '\n', 'event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', 'event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', 'function totalSupply() external constant returns (uint);\n', '\n', 'function balanceOf(address _owner) external constant returns (uint256);\n', '\n', 'function transfer(address _to, uint256 _value) external returns (bool);\n', '\n', 'function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '\n', 'function approve(address _spender, uint256 _value) external returns (bool);\n', '\n', 'function allowance(address _owner, address _spender) external constant returns (uint256);\n', '    \n', '}\n', '\n', 'library SafeMath {\n', '\n', '    /*\n', '        @return sum of a and b\n', '    */\n', '    function ADD (uint256 a, uint256 b) pure internal returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    /*\n', '        @return difference of a and b\n', '    */\n', '    function SUB (uint256 a, uint256 b) pure internal returns (uint256) {\n', '        assert(a >= b);\n', '        return a - b;\n', '    }\n', '    \n', '}\n', '\n', 'contract Ownable {\n', '\n', '    address owner;\n', '\n', '    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '        OwnershipTransferred (address(0), owner);\n', '    }\n', '\n', '    function transferOwnership(address _newOwner)\n', '        public\n', '        onlyOwner\n', '        notZeroAddress(_newOwner)\n', '    {\n', '        owner = _newOwner;\n', '        OwnershipTransferred(msg.sender, _newOwner);\n', '    }\n', '\n', '    //Only owner can call function\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier notZeroAddress(address _address) {\n', '        require(_address != address(0));\n', '        _;\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, Ownable{\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    //Total amount of TheWolfCoin\n', '    uint256 _totalSupply = 5000000000; \n', '\n', '    //Balances for each account\n', '    mapping (address => uint256)  balances;\n', '    //Owner of the account approves the transfer of an amount to another account\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    //Notifies users about the amount burnt\n', '    event Burn(address indexed _from, uint256 _value);\n', '\n', '    //return _totalSupply of the Token\n', '    function totalSupply() external constant returns (uint256 totalTokenSupply) {\n', '        totalTokenSupply = _totalSupply;\n', '    }\n', '\n', '    //What is the balance of a particular account?\n', '    function balanceOf(address _owner)\n', '        external\n', '        constant\n', '        returns (uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', "    //Transfer the balance from owner's account to another account\n", '    function transfer(address _to, uint256 _amount)\n', '        external\n', '        notZeroAddress(_to)\n', '        returns (bool success)\n', '    {\n', '        balances[msg.sender] = balances[msg.sender].SUB(_amount);\n', '        balances[_to] = balances[_to].ADD(_amount);\n', '        Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _amount)\n', '        external\n', '        notZeroAddress(_to)\n', '        returns (bool success)\n', '    {\n', '        //Require allowance to be not too big\n', '        require(allowed[_from][msg.sender] >= _amount);\n', '        balances[_from] = balances[_from].SUB(_amount);\n', '        balances[_to] = balances[_to].ADD(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].SUB(_amount);\n', '        Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount)\n', '        external\n', '        notZeroAddress(_spender)\n', '        returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    //Return how many tokens left that you can spend from\n', '    function allowance(address _owner, address _spender)\n', '        external\n', '        constant\n', '        returns (uint256 remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint256 _addedValue)\n', '        external\n', '        returns (bool success)\n', '    {\n', '        uint256 increased = allowed[msg.sender][_spender].ADD(_addedValue);\n', '        require(increased <= balances[msg.sender]);\n', '        //Cannot approve more coins then you have\n', '        allowed[msg.sender][_spender] = increased;\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue)\n', '        external\n', '        returns (bool success)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.SUB(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) external returns (bool success) {\n', '        //Subtract from the sender\n', '        balances[msg.sender] = balances[msg.sender].SUB(_value);\n', '        //Update _totalSupply\n', '        _totalSupply = _totalSupply.SUB(_value);\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract TheWolfCoin is StandardToken {\n', '\n', '    function ()\n', '   \tpublic\n', '    {\n', '    //if ether is sent to this address, send it back.\n', '    revert();\n', '    }\n', '\n', '    //Name of the token\n', '    string public constant name = "TheWolfCoin";\n', '    //Symbol of WolfCoin\n', '    string public constant symbol = "TWC";\n', '    //Number of decimals of WolfCoin\n', '    uint8 public constant decimals = 2;\n', '\n', '    //Funder Wolfpack Token Allocation\n', '\t//The first wolf is the creator of the contract\n', '\n', '    //2nd Wolf wallet\n', '    address public constant WOLF2 = 0xDB9504AC2E451f8dbB8990564e44B83B7be29045;\n', '    //3rd Wolf wallet\n', '    address public constant WOLF3 = 0xe623bED2b3A4cE7ba286737C8A03Ae0b27e01d8A;\n', '    //4th Wolf wallet\n', '    address public constant WOLF4 = 0x7bB34Edb32024C7Ce01a1c2C9A02bf9d3B5BdEf1;\n', '\n', '    //wolf2 wallet balance\n', '    uint256 public wolf2Balance;\n', '    //wolf3 wallet balance\n', '    uint256 public wolf3Balance;\n', '    //wolf4 wallet balance\n', '    uint256 public wolf4Balance;\n', '\n', '    //25%\n', '    uint256 private constant WOLF1_THOUSANDTH = 250;\n', '    //25%\n', '    uint256 private constant WOLF2_THOUSANDTH = 250;\n', '    //25%\n', '    uint256 private constant WOLF3_THOUSANDTH = 250;\n', '    //25%\n', '    uint256 private constant WOLF4_THOUSANDTH = 250;\n', '    //100%\n', '    uint256 private constant DENOMINATOR = 1000;\n', '\n', '    function TheWolfCoin() public {\n', '        //25% of _totalSupply\n', '        balances[msg.sender] = _totalSupply * WOLF1_THOUSANDTH / DENOMINATOR;\n', '        //25% of _totalSupply\n', '        wolf2Balance = _totalSupply * WOLF2_THOUSANDTH / DENOMINATOR;\n', '        //25%% of _totalSupply\n', '        wolf3Balance = _totalSupply * WOLF3_THOUSANDTH / DENOMINATOR;\n', '        //25%% of _totalSupply\n', '        wolf4Balance = _totalSupply * WOLF4_THOUSANDTH / DENOMINATOR;\n', '\n', '        Transfer (this, msg.sender, balances[msg.sender]);\n', '\n', '        balances[WOLF2] = wolf2Balance;\n', '        Transfer (this, WOLF2, balances[WOLF2]);\n', '\n', '        balances[WOLF3] = wolf3Balance;\n', '        Transfer (this, WOLF3, balances[WOLF3]);\n', '\n', '        balances[WOLF4] = wolf4Balance;\n', '        Transfer (this, WOLF4, balances[WOLF4]);\n', '\n', '    }\n', '}']