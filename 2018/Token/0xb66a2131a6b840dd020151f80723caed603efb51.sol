['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '  \n', '}\n', '\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    /// @param owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address owner) public view returns (uint256);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param to The address of the recipient\n', '    /// @param value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param from The address of the sender\n', '    /// @param to The address of the recipient\n', '    /// @param value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param spender The address of the account able to transfer the tokens\n', '    /// @param value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    /// @param owner The address of the account owning tokens\n', '    /// @param spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    \n', '}\n', '\n', 'contract StandardToken is Token {\n', '    using SafeMath for uint256;\n', '    \n', '    mapping (address => uint256) balances;\n', '    \n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    uint256 public totalSupply;\n', '    \n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        require(value <= balances[msg.sender]);\n', '        require(to != address(0));\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param from address The address which you want to send tokens from\n', '    * @param to address The address which you want to transfer to\n', '    * @param value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        require(value <= balances[from]);\n', '        require(value <= allowed[from][msg.sender]);\n', '        require(to != address(0));\n', '        \n', '        balances[from] = balances[from].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '    \n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param owner The address to query the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return balances[owner];\n', '    }\n', '    \n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param owner address The address which owns the funds.\n', '    * @param spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address owner, address spender) public view returns (uint256 remaining) {\n', '      return allowed[owner][spender];\n', '    }\n', '    \n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '    * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '    * @param spender The address which will spend the funds.\n', '    * @param value The amount of tokens to be spent.\n', '    */\n', '    function approve(address spender, uint256 value) public returns (bool success) {\n', '        require(spender != address(0));\n', '        \n', '        allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '    \n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    \n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        \n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '    \n', '}\n', '\n', 'contract NNBToken is StandardToken, Ownable {\n', '    string public constant name = "NNB Token";    //fancy name: eg Simon Bucks\n', '    string public constant symbol = "NNB";           //An identifier: eg SBX\n', '    uint8 public constant decimals = 18;            //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It&#39;s like comparing 1 wei to 1 ether.\n', '    string public constant version = "H1.0";        //human 0.1 standard. Just an arbitrary versioning scheme.\n', '    \n', '    mapping (address => uint256) lockedBalance;\n', '    mapping (address => uint256) releasedBalance;\n', '    mapping (address => TimeLock[]) public allocations;\n', '    \n', '    struct TimeLock {\n', '        uint time;\n', '        uint256 balance;\n', '    }\n', '    \n', '    uint256 public constant BASE_SUPPLY = 10 ** uint256(decimals);\n', '    uint256 public constant INITIAL_SUPPLY = 6 * (10 ** 9) * BASE_SUPPLY;    //initial total supply for six billion\n', '    \n', '    uint256 public constant noLockedOperatorSupply = INITIAL_SUPPLY / 100 * 2;  // no locked operator 2%\n', '    \n', '    uint256 public constant lockedOperatorSupply = INITIAL_SUPPLY / 100 * 18;  // locked operator 18%\n', '    uint256 public constant lockedInvestorSupply = INITIAL_SUPPLY / 100 * 10;  // locked investor 10%\n', '    uint256 public constant lockedTeamSupply = INITIAL_SUPPLY / 100 * 10;  // locked team 10%\n', '\n', '    uint256 public constant lockedPrivatorForBaseSupply = INITIAL_SUPPLY / 100 * 11;  // locked privator base 11%\n', '    uint256 public constant lockedPrivatorForEcologyPartOneSupply = INITIAL_SUPPLY / 100 * 8;  // locked privator ecology part one for 8%\n', '    uint256 public constant lockedPrivatorForEcologyPartTwoSupply = INITIAL_SUPPLY / 100 * 4;  // locked privator ecology part one for 4%\n', '    \n', '    uint256 public constant lockedPrivatorForFaithSupply = INITIAL_SUPPLY / 1000 * 11;  // locked privator faith 1.1%\n', '    uint256 public constant lockedPrivatorForDevelopSupply = INITIAL_SUPPLY / 1000 * 19;  // locked privator develop 1.9%\n', '    \n', '    uint256 public constant lockedLabSupply = INITIAL_SUPPLY / 100 * 10;  // locked lab 10%\n', '    \n', '    uint public constant operatorUnlockTimes = 24;  // operator unlock times\n', '    uint public constant investorUnlockTimes = 3;   // investor unlock times\n', '    uint public constant teamUnlockTimes = 24;      // team unlock times\n', '    uint public constant privatorForBaseUnlockTimes = 6;   // privator base unlock times\n', '    uint public constant privatorForEcologyUnlockTimes = 9;  // privator ecology unlock times\n', '    uint public constant privatorForFaithUnlockTimes = 6;   // privator faith unlock times\n', '    uint public constant privatorForDevelopUnlockTimes = 3;  // privator develop unlock times\n', '    uint public constant labUnlockTimes = 12;       // lab unlock times\n', '    \n', '    event Lock(address indexed locker, uint256 value, uint releaseTime);\n', '    event UnLock(address indexed unlocker, uint256 value);\n', '    \n', '    constructor(address operator, address investor, address team, address privatorBase,\n', '                address privatorEcology, address privatorFaith, address privatorDevelop, address lab) public {\n', '        totalSupply = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '        \n', '        initialLockedValues(operator, investor, team, privatorBase, privatorEcology, privatorFaith, privatorDevelop, lab);\n', '    }\n', '    \n', '    /**\n', '     * init the locked total value, and the first release time\n', '     */ \n', '    function initialLockedValues(address operator, address investor, address team, address privatorBase,\n', '                                 address privatorEcology, address privatorFaith, address privatorDevelop, address lab) internal onlyOwner returns (bool success) {\n', '        \n', '        // init operator address value and locked value. every month can unlock operator value for 1/24 since next month\n', '        uint unlockTime = now + 30 days;\n', '        lockedValuesAndTime(operator, lockedOperatorSupply, operatorUnlockTimes, unlockTime);\n', '        \n', '        //init investor address value and locked value. unlocked investor value, at six month for 30%, nine month for 30%, twelve month for the others ,40%\n', '        require(0x0 != investor);\n', '        lockedBalance[investor] = lockedInvestorSupply;\n', '        releasedBalance[investor] = 0;\n', '        \n', '        unlockTime = now;\n', '        allocations[investor].push(TimeLock(unlockTime + 180 days, lockedInvestorSupply.div(10).mul(3)));\n', '        allocations[investor].push(TimeLock(unlockTime + 270 days, lockedInvestorSupply.div(10).mul(3)));\n', '        allocations[investor].push(TimeLock(unlockTime + 360 days, lockedInvestorSupply.div(10).mul(4)));\n', '        \n', '        //init team address value and locked value. every month can unlock team value for 1/24 since next 6 months\n', '        unlockTime = now + 180 days;\n', '        lockedValuesAndTime(team, lockedTeamSupply, teamUnlockTimes, unlockTime);\n', '        \n', '        //init privator base address value and locked value\n', '        unlockTime = now;\n', '        lockedValuesAndTime(privatorBase, lockedPrivatorForBaseSupply, privatorForBaseUnlockTimes, unlockTime);\n', '        \n', '        //init privator ecology address value and locked value\n', '        //this values will divide into two parts, part one for 8% of all inital supply, part two for 4% of all inital supply\n', '        //the part one will unlock for 9 times, part two will unlock for 6 times\n', '        //so, from 1 to 6 unlock times, the unlock values = part one / 9 + part two / 6,  from 7 to 9, the unlock values = part one / 9\n', '        require(0x0 != privatorEcology);\n', '        releasedBalance[privatorEcology] = 0;\n', '        lockedBalance[privatorEcology] = lockedPrivatorForEcologyPartOneSupply.add(lockedPrivatorForEcologyPartTwoSupply);\n', '\n', '        unlockTime = now;\n', '        for (uint i = 0; i < privatorForEcologyUnlockTimes; i++) {\n', '            if (i > 0) {\n', '                unlockTime = unlockTime + 30 days;\n', '            }\n', '            \n', '            uint256 lockedValue = lockedPrivatorForEcologyPartOneSupply.div(privatorForEcologyUnlockTimes);\n', '            if (i == privatorForEcologyUnlockTimes - 1) {  // the last unlock time\n', '                lockedValue = lockedPrivatorForEcologyPartOneSupply.div(privatorForEcologyUnlockTimes).add(lockedPrivatorForEcologyPartOneSupply.mod(privatorForEcologyUnlockTimes));\n', '            }\n', '            if (i < 6) {\n', '                uint256 partTwoValue = lockedPrivatorForEcologyPartTwoSupply.div(6);\n', '                if (i == 5) {  //the last unlock time\n', '                    partTwoValue = lockedPrivatorForEcologyPartTwoSupply.div(6).add(lockedPrivatorForEcologyPartTwoSupply.mod(6));\n', '                }\n', '                lockedValue = lockedValue.add(partTwoValue);\n', '            }\n', '            \n', '            allocations[privatorEcology].push(TimeLock(unlockTime, lockedValue));\n', '        }\n', '        \n', '        //init privator faith address value and locked value\n', '        unlockTime = now;\n', '        lockedValuesAndTime(privatorFaith, lockedPrivatorForFaithSupply, privatorForFaithUnlockTimes, unlockTime);\n', '        \n', '        //init privator develop address value and locked value\n', '        unlockTime = now;\n', '        lockedValuesAndTime(privatorDevelop, lockedPrivatorForDevelopSupply, privatorForDevelopUnlockTimes, unlockTime);\n', '        \n', '        //init lab address value and locked value. every month can unlock lab value for 1/12 since next year\n', '        unlockTime = now + 365 days;\n', '        lockedValuesAndTime(lab, lockedLabSupply, labUnlockTimes, unlockTime);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * lock the address value, set the unlock time\n', '     */ \n', '    function lockedValuesAndTime(address target, uint256 lockedSupply, uint lockedTimes, uint unlockTime) internal onlyOwner returns (bool success) {\n', '        require(0x0 != target);\n', '        releasedBalance[target] = 0;\n', '        lockedBalance[target] = lockedSupply;\n', '        \n', '        for (uint i = 0; i < lockedTimes; i++) {\n', '            if (i > 0) {\n', '                unlockTime = unlockTime + 30 days;\n', '            }\n', '            uint256 lockedValue = lockedSupply.div(lockedTimes);\n', '            if (i == lockedTimes - 1) {  //the last unlock time\n', '                lockedValue = lockedSupply.div(lockedTimes).add(lockedSupply.mod(lockedTimes));\n', '            }\n', '            allocations[target].push(TimeLock(unlockTime, lockedValue));\n', '        }\n', '        \n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * unlock the address values\n', '     */ \n', '    function unlock(address target) public onlyOwner returns(bool success) {\n', '        require(0x0 != target);\n', '        \n', '        uint256 value = 0;\n', '        for(uint i = 0; i < allocations[target].length; i++) {\n', '            if(now >= allocations[target][i].time) {\n', '                value = value.add(allocations[target][i].balance);\n', '                allocations[target][i].balance = 0;\n', '            }\n', '        }\n', '        lockedBalance[target] = lockedBalance[target].sub(value);\n', '        releasedBalance[target] = releasedBalance[target].add(value);\n', '        \n', '        transfer(target, value);\n', '        emit UnLock(target, value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * operator address has 2% for no locked.\n', '     */ \n', '    function initialOperatorValue(address operator) public onlyOwner {\n', '        transfer(operator, noLockedOperatorSupply);\n', '    }\n', '    \n', '    /**\n', '     * this function can get the locked value\n', '     */\n', '    function lockedOf(address owner) public constant returns (uint256 balance) {\n', '        return lockedBalance[owner];\n', '    }\n', '    \n', '    /**\n', '     * get the next unlock time\n', '     */ \n', '    function unlockTimeOf(address owner) public constant returns (uint time) {\n', '        for(uint i = 0; i < allocations[owner].length; i++) {\n', '            if(allocations[owner][i].time >= now) {\n', '                return allocations[owner][i].time;\n', '            }\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * get the next unlock value\n', '     */ \n', '    function unlockValueOf(address owner) public constant returns (uint256 balance) {\n', '        for(uint i = 0; i < allocations[owner].length; i++) {\n', '            if(allocations[owner][i].time >= now) {\n', '                return allocations[owner][i].balance;\n', '            }\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * this function can get the released value\n', '     */\n', '    function releasedOf(address owner) public constant returns (uint256 balance) {\n', '        return releasedBalance[owner];\n', '    }\n', '    \n', '    /**\n', '     * this function can be used when you want to send same number of tokens to all the recipients\n', '     */\n', '    function batchTransferForSingleValue(address[] dests, uint256 value) public onlyOwner {\n', '        uint256 i = 0;\n', '        uint256 sendValue = value * BASE_SUPPLY;\n', '        while (i < dests.length) {\n', '            transfer(dests[i], sendValue);\n', '            i++;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * this function can be used when you want to send every recipeint with different number of tokens\n', '     */\n', '    function batchTransferForDifferentValues(address[] dests, uint256[] values) public onlyOwner {\n', '        if(dests.length != values.length) return;\n', '        uint256 i = 0;\n', '        while (i < dests.length) {\n', '            uint256 sendValue = values[i] * BASE_SUPPLY;\n', '            transfer(dests[i], sendValue);\n', '            i++;\n', '        }\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '  \n', '}\n', '\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    /// @param owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address owner) public view returns (uint256);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param to The address of the recipient\n', '    /// @param value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param from The address of the sender\n', '    /// @param to The address of the recipient\n', '    /// @param value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param spender The address of the account able to transfer the tokens\n', '    /// @param value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    /// @param owner The address of the account owning tokens\n', '    /// @param spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    \n', '}\n', '\n', 'contract StandardToken is Token {\n', '    using SafeMath for uint256;\n', '    \n', '    mapping (address => uint256) balances;\n', '    \n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    uint256 public totalSupply;\n', '    \n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        require(value <= balances[msg.sender]);\n', '        require(to != address(0));\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param from address The address which you want to send tokens from\n', '    * @param to address The address which you want to transfer to\n', '    * @param value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        require(value <= balances[from]);\n', '        require(value <= allowed[from][msg.sender]);\n', '        require(to != address(0));\n', '        \n', '        balances[from] = balances[from].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '    \n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param owner The address to query the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return balances[owner];\n', '    }\n', '    \n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param owner address The address which owns the funds.\n', '    * @param spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address owner, address spender) public view returns (uint256 remaining) {\n', '      return allowed[owner][spender];\n', '    }\n', '    \n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * @param spender The address which will spend the funds.\n', '    * @param value The amount of tokens to be spent.\n', '    */\n', '    function approve(address spender, uint256 value) public returns (bool success) {\n', '        require(spender != address(0));\n', '        \n', '        allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '    \n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    \n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        \n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '    \n', '}\n', '\n', 'contract NNBToken is StandardToken, Ownable {\n', '    string public constant name = "NNB Token";    //fancy name: eg Simon Bucks\n', '    string public constant symbol = "NNB";           //An identifier: eg SBX\n', "    uint8 public constant decimals = 18;            //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n", '    string public constant version = "H1.0";        //human 0.1 standard. Just an arbitrary versioning scheme.\n', '    \n', '    mapping (address => uint256) lockedBalance;\n', '    mapping (address => uint256) releasedBalance;\n', '    mapping (address => TimeLock[]) public allocations;\n', '    \n', '    struct TimeLock {\n', '        uint time;\n', '        uint256 balance;\n', '    }\n', '    \n', '    uint256 public constant BASE_SUPPLY = 10 ** uint256(decimals);\n', '    uint256 public constant INITIAL_SUPPLY = 6 * (10 ** 9) * BASE_SUPPLY;    //initial total supply for six billion\n', '    \n', '    uint256 public constant noLockedOperatorSupply = INITIAL_SUPPLY / 100 * 2;  // no locked operator 2%\n', '    \n', '    uint256 public constant lockedOperatorSupply = INITIAL_SUPPLY / 100 * 18;  // locked operator 18%\n', '    uint256 public constant lockedInvestorSupply = INITIAL_SUPPLY / 100 * 10;  // locked investor 10%\n', '    uint256 public constant lockedTeamSupply = INITIAL_SUPPLY / 100 * 10;  // locked team 10%\n', '\n', '    uint256 public constant lockedPrivatorForBaseSupply = INITIAL_SUPPLY / 100 * 11;  // locked privator base 11%\n', '    uint256 public constant lockedPrivatorForEcologyPartOneSupply = INITIAL_SUPPLY / 100 * 8;  // locked privator ecology part one for 8%\n', '    uint256 public constant lockedPrivatorForEcologyPartTwoSupply = INITIAL_SUPPLY / 100 * 4;  // locked privator ecology part one for 4%\n', '    \n', '    uint256 public constant lockedPrivatorForFaithSupply = INITIAL_SUPPLY / 1000 * 11;  // locked privator faith 1.1%\n', '    uint256 public constant lockedPrivatorForDevelopSupply = INITIAL_SUPPLY / 1000 * 19;  // locked privator develop 1.9%\n', '    \n', '    uint256 public constant lockedLabSupply = INITIAL_SUPPLY / 100 * 10;  // locked lab 10%\n', '    \n', '    uint public constant operatorUnlockTimes = 24;  // operator unlock times\n', '    uint public constant investorUnlockTimes = 3;   // investor unlock times\n', '    uint public constant teamUnlockTimes = 24;      // team unlock times\n', '    uint public constant privatorForBaseUnlockTimes = 6;   // privator base unlock times\n', '    uint public constant privatorForEcologyUnlockTimes = 9;  // privator ecology unlock times\n', '    uint public constant privatorForFaithUnlockTimes = 6;   // privator faith unlock times\n', '    uint public constant privatorForDevelopUnlockTimes = 3;  // privator develop unlock times\n', '    uint public constant labUnlockTimes = 12;       // lab unlock times\n', '    \n', '    event Lock(address indexed locker, uint256 value, uint releaseTime);\n', '    event UnLock(address indexed unlocker, uint256 value);\n', '    \n', '    constructor(address operator, address investor, address team, address privatorBase,\n', '                address privatorEcology, address privatorFaith, address privatorDevelop, address lab) public {\n', '        totalSupply = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '        \n', '        initialLockedValues(operator, investor, team, privatorBase, privatorEcology, privatorFaith, privatorDevelop, lab);\n', '    }\n', '    \n', '    /**\n', '     * init the locked total value, and the first release time\n', '     */ \n', '    function initialLockedValues(address operator, address investor, address team, address privatorBase,\n', '                                 address privatorEcology, address privatorFaith, address privatorDevelop, address lab) internal onlyOwner returns (bool success) {\n', '        \n', '        // init operator address value and locked value. every month can unlock operator value for 1/24 since next month\n', '        uint unlockTime = now + 30 days;\n', '        lockedValuesAndTime(operator, lockedOperatorSupply, operatorUnlockTimes, unlockTime);\n', '        \n', '        //init investor address value and locked value. unlocked investor value, at six month for 30%, nine month for 30%, twelve month for the others ,40%\n', '        require(0x0 != investor);\n', '        lockedBalance[investor] = lockedInvestorSupply;\n', '        releasedBalance[investor] = 0;\n', '        \n', '        unlockTime = now;\n', '        allocations[investor].push(TimeLock(unlockTime + 180 days, lockedInvestorSupply.div(10).mul(3)));\n', '        allocations[investor].push(TimeLock(unlockTime + 270 days, lockedInvestorSupply.div(10).mul(3)));\n', '        allocations[investor].push(TimeLock(unlockTime + 360 days, lockedInvestorSupply.div(10).mul(4)));\n', '        \n', '        //init team address value and locked value. every month can unlock team value for 1/24 since next 6 months\n', '        unlockTime = now + 180 days;\n', '        lockedValuesAndTime(team, lockedTeamSupply, teamUnlockTimes, unlockTime);\n', '        \n', '        //init privator base address value and locked value\n', '        unlockTime = now;\n', '        lockedValuesAndTime(privatorBase, lockedPrivatorForBaseSupply, privatorForBaseUnlockTimes, unlockTime);\n', '        \n', '        //init privator ecology address value and locked value\n', '        //this values will divide into two parts, part one for 8% of all inital supply, part two for 4% of all inital supply\n', '        //the part one will unlock for 9 times, part two will unlock for 6 times\n', '        //so, from 1 to 6 unlock times, the unlock values = part one / 9 + part two / 6,  from 7 to 9, the unlock values = part one / 9\n', '        require(0x0 != privatorEcology);\n', '        releasedBalance[privatorEcology] = 0;\n', '        lockedBalance[privatorEcology] = lockedPrivatorForEcologyPartOneSupply.add(lockedPrivatorForEcologyPartTwoSupply);\n', '\n', '        unlockTime = now;\n', '        for (uint i = 0; i < privatorForEcologyUnlockTimes; i++) {\n', '            if (i > 0) {\n', '                unlockTime = unlockTime + 30 days;\n', '            }\n', '            \n', '            uint256 lockedValue = lockedPrivatorForEcologyPartOneSupply.div(privatorForEcologyUnlockTimes);\n', '            if (i == privatorForEcologyUnlockTimes - 1) {  // the last unlock time\n', '                lockedValue = lockedPrivatorForEcologyPartOneSupply.div(privatorForEcologyUnlockTimes).add(lockedPrivatorForEcologyPartOneSupply.mod(privatorForEcologyUnlockTimes));\n', '            }\n', '            if (i < 6) {\n', '                uint256 partTwoValue = lockedPrivatorForEcologyPartTwoSupply.div(6);\n', '                if (i == 5) {  //the last unlock time\n', '                    partTwoValue = lockedPrivatorForEcologyPartTwoSupply.div(6).add(lockedPrivatorForEcologyPartTwoSupply.mod(6));\n', '                }\n', '                lockedValue = lockedValue.add(partTwoValue);\n', '            }\n', '            \n', '            allocations[privatorEcology].push(TimeLock(unlockTime, lockedValue));\n', '        }\n', '        \n', '        //init privator faith address value and locked value\n', '        unlockTime = now;\n', '        lockedValuesAndTime(privatorFaith, lockedPrivatorForFaithSupply, privatorForFaithUnlockTimes, unlockTime);\n', '        \n', '        //init privator develop address value and locked value\n', '        unlockTime = now;\n', '        lockedValuesAndTime(privatorDevelop, lockedPrivatorForDevelopSupply, privatorForDevelopUnlockTimes, unlockTime);\n', '        \n', '        //init lab address value and locked value. every month can unlock lab value for 1/12 since next year\n', '        unlockTime = now + 365 days;\n', '        lockedValuesAndTime(lab, lockedLabSupply, labUnlockTimes, unlockTime);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * lock the address value, set the unlock time\n', '     */ \n', '    function lockedValuesAndTime(address target, uint256 lockedSupply, uint lockedTimes, uint unlockTime) internal onlyOwner returns (bool success) {\n', '        require(0x0 != target);\n', '        releasedBalance[target] = 0;\n', '        lockedBalance[target] = lockedSupply;\n', '        \n', '        for (uint i = 0; i < lockedTimes; i++) {\n', '            if (i > 0) {\n', '                unlockTime = unlockTime + 30 days;\n', '            }\n', '            uint256 lockedValue = lockedSupply.div(lockedTimes);\n', '            if (i == lockedTimes - 1) {  //the last unlock time\n', '                lockedValue = lockedSupply.div(lockedTimes).add(lockedSupply.mod(lockedTimes));\n', '            }\n', '            allocations[target].push(TimeLock(unlockTime, lockedValue));\n', '        }\n', '        \n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * unlock the address values\n', '     */ \n', '    function unlock(address target) public onlyOwner returns(bool success) {\n', '        require(0x0 != target);\n', '        \n', '        uint256 value = 0;\n', '        for(uint i = 0; i < allocations[target].length; i++) {\n', '            if(now >= allocations[target][i].time) {\n', '                value = value.add(allocations[target][i].balance);\n', '                allocations[target][i].balance = 0;\n', '            }\n', '        }\n', '        lockedBalance[target] = lockedBalance[target].sub(value);\n', '        releasedBalance[target] = releasedBalance[target].add(value);\n', '        \n', '        transfer(target, value);\n', '        emit UnLock(target, value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * operator address has 2% for no locked.\n', '     */ \n', '    function initialOperatorValue(address operator) public onlyOwner {\n', '        transfer(operator, noLockedOperatorSupply);\n', '    }\n', '    \n', '    /**\n', '     * this function can get the locked value\n', '     */\n', '    function lockedOf(address owner) public constant returns (uint256 balance) {\n', '        return lockedBalance[owner];\n', '    }\n', '    \n', '    /**\n', '     * get the next unlock time\n', '     */ \n', '    function unlockTimeOf(address owner) public constant returns (uint time) {\n', '        for(uint i = 0; i < allocations[owner].length; i++) {\n', '            if(allocations[owner][i].time >= now) {\n', '                return allocations[owner][i].time;\n', '            }\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * get the next unlock value\n', '     */ \n', '    function unlockValueOf(address owner) public constant returns (uint256 balance) {\n', '        for(uint i = 0; i < allocations[owner].length; i++) {\n', '            if(allocations[owner][i].time >= now) {\n', '                return allocations[owner][i].balance;\n', '            }\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * this function can get the released value\n', '     */\n', '    function releasedOf(address owner) public constant returns (uint256 balance) {\n', '        return releasedBalance[owner];\n', '    }\n', '    \n', '    /**\n', '     * this function can be used when you want to send same number of tokens to all the recipients\n', '     */\n', '    function batchTransferForSingleValue(address[] dests, uint256 value) public onlyOwner {\n', '        uint256 i = 0;\n', '        uint256 sendValue = value * BASE_SUPPLY;\n', '        while (i < dests.length) {\n', '            transfer(dests[i], sendValue);\n', '            i++;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * this function can be used when you want to send every recipeint with different number of tokens\n', '     */\n', '    function batchTransferForDifferentValues(address[] dests, uint256[] values) public onlyOwner {\n', '        if(dests.length != values.length) return;\n', '        uint256 i = 0;\n', '        while (i < dests.length) {\n', '            uint256 sendValue = values[i] * BASE_SUPPLY;\n', '            transfer(dests[i], sendValue);\n', '            i++;\n', '        }\n', '    }\n', '    \n', '}']
