['pragma solidity ^0.4.18;\n', 'library SafeMath {\n', '  function times(uint a, uint b) public pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function minus(uint a, uint b) public pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function plus(uint a, uint b) public pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract JOICoin {\n', '    using SafeMath for uint;\n', '\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    uint256 public totalSupply;\n', '    string public constant name = "JOI Coin";\n', '    string public constant symbol = "JOI";\n', '    uint256 public constant decimals = 18;  // decimal places\n', '    address public master;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '    constructor(uint _initialSupply, address _master) public {\n', '        totalSupply = _initialSupply;\n', '        master = _master;\n', '        balances[master] = _initialSupply;\n', '    }\n', '\n', '    function () public {\n', '        require(false);\n', '    }\n', '\n', '    // solhint-disable-next-line no-simple-event-func-name\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].minus(_value);\n', '        balances[_to] = balances[_to].plus(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '        uint _allowance = allowed[_from][msg.sender];\n', '\n', '        balances[_to] = balances[_to].plus(_value);\n', '        balances[_from] = balances[_from].minus(_value);\n', '        allowed[_from][msg.sender] = _allowance.minus(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']