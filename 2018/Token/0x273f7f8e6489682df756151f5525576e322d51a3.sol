['pragma solidity 0.4.24;\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/access/Roles.sol\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an account access to this role\n', '   */\n', '  function add(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    role.bearer[account] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev remove an account&#39;s access to this role\n', '   */\n', '  function remove(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    role.bearer[account] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an account has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address account)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    require(account != address(0));\n', '    return role.bearer[account];\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n', '\n', 'contract MinterRole {\n', '  using Roles for Roles.Role;\n', '\n', '  event MinterAdded(address indexed account);\n', '  event MinterRemoved(address indexed account);\n', '\n', '  Roles.Role private minters;\n', '\n', '  constructor() public {\n', '    minters.add(msg.sender);\n', '  }\n', '\n', '  modifier onlyMinter() {\n', '    require(isMinter(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isMinter(address account) public view returns (bool) {\n', '    return minters.has(account);\n', '  }\n', '\n', '  function addMinter(address account) public onlyMinter {\n', '    minters.add(account);\n', '    emit MinterAdded(account);\n', '  }\n', '\n', '  function renounceMinter() public {\n', '    minters.remove(msg.sender);\n', '  }\n', '\n', '  function _removeMinter(address account) internal {\n', '    minters.remove(account);\n', '    emit MinterRemoved(account);\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/introspection/IERC165.sol\n', '\n', '/**\n', ' * @title IERC165\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', ' */\n', 'interface IERC165 {\n', '\n', '  /**\n', '   * @notice Query if a contract implements an interface\n', '   * @param interfaceId The interface identifier, as specified in ERC-165\n', '   * @dev Interface identification is specified in ERC-165. This function\n', '   * uses less than 30,000 gas.\n', '   */\n', '  function supportsInterface(bytes4 interfaceId)\n', '    external\n', '    view\n', '    returns (bool);\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/introspection/ERC165.sol\n', '\n', '/**\n', ' * @title ERC165\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Implements ERC165 using a lookup table.\n', ' */\n', 'contract ERC165 is IERC165 {\n', '\n', '  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n', '  /**\n', '   * 0x01ffc9a7 ===\n', '   *   bytes4(keccak256(&#39;supportsInterface(bytes4)&#39;))\n', '   */\n', '\n', '  /**\n', '   * @dev a mapping of interface id to whether or not it&#39;s supported\n', '   */\n', '  mapping(bytes4 => bool) internal _supportedInterfaces;\n', '\n', '  /**\n', '   * @dev A contract implementing SupportsInterfaceWithLookup\n', '   * implement ERC165 itself\n', '   */\n', '  constructor()\n', '    public\n', '  {\n', '    _registerInterface(_InterfaceId_ERC165);\n', '  }\n', '\n', '  /**\n', '   * @dev implement supportsInterface(bytes4) using a lookup table\n', '   */\n', '  function supportsInterface(bytes4 interfaceId)\n', '    external\n', '    view\n', '    returns (bool)\n', '  {\n', '    return _supportedInterfaces[interfaceId];\n', '  }\n', '\n', '  /**\n', '   * @dev private method for registering an interface\n', '   */\n', '  function _registerInterface(bytes4 interfaceId)\n', '    internal\n', '  {\n', '    require(interfaceId != 0xffffffff);\n', '    _supportedInterfaces[interfaceId] = true;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/utils/Address.sol\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library Address {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   * as the code is not actually created until after the constructor finishes.\n', '   * @param account address of the account to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address account) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(account) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract IERC721 is IERC165 {\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 indexed tokenId\n', '  );\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed approved,\n', '    uint256 indexed tokenId\n', '  );\n', '  event ApprovalForAll(\n', '    address indexed owner,\n', '    address indexed operator,\n', '    bool approved\n', '  );\n', '\n', '  function balanceOf(address owner) public view returns (uint256 balance);\n', '  function ownerOf(uint256 tokenId) public view returns (address owner);\n', '\n', '  function approve(address to, uint256 tokenId) public;\n', '  function getApproved(uint256 tokenId)\n', '    public view returns (address operator);\n', '\n', '  function setApprovalForAll(address operator, bool _approved) public;\n', '  function isApprovedForAll(address owner, address operator)\n', '    public view returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 tokenId) public;\n', '  function safeTransferFrom(address from, address to, uint256 tokenId)\n', '    public;\n', '\n', '  function safeTransferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId,\n', '    bytes data\n', '  )\n', '    public;\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'contract IERC721Receiver {\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient\n', '   * after a `safeTransfer`. This function MUST return the function selector,\n', '   * otherwise the caller will revert the transaction. The selector to be\n', '   * returned can be obtained as `this.onERC721Received.selector`. This\n', '   * function MAY throw to revert and reject the transfer.\n', '   * Note: the ERC721 contract address is always the message sender.\n', '   * @param operator The address which called `safeTransferFrom` function\n', '   * @param from The address which previously owned the token\n', '   * @param tokenId The NFT identifier which is being transferred\n', '   * @param data Additional data with no specified format\n', '   * @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '   */\n', '  function onERC721Received(\n', '    address operator,\n', '    address from,\n', '    uint256 tokenId,\n', '    bytes data\n', '  )\n', '    public\n', '    returns(bytes4);\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC165, IERC721 {\n', '\n', '  using SafeMath for uint256;\n', '  using Address for address;\n', '\n', '  // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) private _tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) private _tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping (address => uint256) private _ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping (address => mapping (address => bool)) private _operatorApprovals;\n', '\n', '  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n', '  /*\n', '   * 0x80ac58cd ===\n', '   *   bytes4(keccak256(&#39;balanceOf(address)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;ownerOf(uint256)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;approve(address,uint256)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;getApproved(uint256)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;setApprovalForAll(address,bool)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;isApprovedForAll(address,address)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;transferFrom(address,address,uint256)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;safeTransferFrom(address,address,uint256)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;safeTransferFrom(address,address,uint256,bytes)&#39;))\n', '   */\n', '\n', '  constructor()\n', '    public\n', '  {\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(_InterfaceId_ERC721);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address\n', '   * @param owner address to query the balance of\n', '   * @return uint256 representing the amount owned by the passed address\n', '   */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    require(owner != address(0));\n', '    return _ownedTokensCount[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the owner of the specified token ID\n', '   * @param tokenId uint256 ID of the token to query the owner of\n', '   * @return owner address currently marked as the owner of the given token ID\n', '   */\n', '  function ownerOf(uint256 tokenId) public view returns (address) {\n', '    address owner = _tokenOwner[tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Approves another address to transfer the given token ID\n', '   * The zero address indicates there is no approved address.\n', '   * There can only be one approved address per token at a given time.\n', '   * Can only be called by the token owner or an approved operator.\n', '   * @param to address to be approved for the given token ID\n', '   * @param tokenId uint256 ID of the token to be approved\n', '   */\n', '  function approve(address to, uint256 tokenId) public {\n', '    address owner = ownerOf(tokenId);\n', '    require(to != owner);\n', '    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '    _tokenApprovals[tokenId] = to;\n', '    emit Approval(owner, to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * Reverts if the token ID does not exist.\n', '   * @param tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for the given token ID\n', '   */\n', '  function getApproved(uint256 tokenId) public view returns (address) {\n', '    require(_exists(tokenId));\n', '    return _tokenApprovals[tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * An operator is allowed to transfer all tokens of the sender on their behalf\n', '   * @param to operator address to set the approval\n', '   * @param approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(address to, bool approved) public {\n', '    require(to != msg.sender);\n', '    _operatorApprovals[msg.sender][to] = approved;\n', '    emit ApprovalForAll(msg.sender, to, approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param owner owner address which you want to query the approval of\n', '   * @param operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(\n', '    address owner,\n', '    address operator\n', '  )\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return _operatorApprovals[owner][operator];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers the ownership of a given token ID to another address\n', '   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '  {\n', '    require(_isApprovedOrOwner(msg.sender, tokenId));\n', '    require(to != address(0));\n', '\n', '    _clearApproval(from, tokenId);\n', '    _removeTokenFrom(from, tokenId);\n', '    _addTokenTo(to, tokenId);\n', '\n', '    emit Transfer(from, to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   *\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function safeTransferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '  {\n', '    // solium-disable-next-line arg-overflow\n', '    safeTransferFrom(from, to, tokenId, "");\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function safeTransferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '  {\n', '    transferFrom(from, to, tokenId);\n', '    // solium-disable-next-line arg-overflow\n', '    require(_checkAndCallSafeTransfer(from, to, tokenId, _data));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the specified token exists\n', '   * @param tokenId uint256 ID of the token to query the existence of\n', '   * @return whether the token exists\n', '   */\n', '  function _exists(uint256 tokenId) internal view returns (bool) {\n', '    address owner = _tokenOwner[tokenId];\n', '    return owner != address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the given spender can transfer a given token ID\n', '   * @param spender address of the spender to query\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @return bool whether the msg.sender is approved for the given token ID,\n', '   *  is an operator of the owner, or is the owner of the token\n', '   */\n', '  function _isApprovedOrOwner(\n', '    address spender,\n', '    uint256 tokenId\n', '  )\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    address owner = ownerOf(tokenId);\n', '    // Disable solium check because of\n', '    // https://github.com/duaraghav8/Solium/issues/175\n', '    // solium-disable-next-line operator-whitespace\n', '    return (\n', '      spender == owner ||\n', '      getApproved(tokenId) == spender ||\n', '      isApprovedForAll(owner, spender)\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param to The address that will own the minted token\n', '   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address to, uint256 tokenId) internal {\n', '    require(to != address(0));\n', '    _addTokenTo(to, tokenId);\n', '    emit Transfer(address(0), to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address owner, uint256 tokenId) internal {\n', '    _clearApproval(owner, tokenId);\n', '    _removeTokenFrom(owner, tokenId);\n', '    emit Transfer(owner, address(0), tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to clear current approval of a given token ID\n', '   * Reverts if the given address is not indeed the owner of the token\n', '   * @param owner owner of the token\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function _clearApproval(address owner, uint256 tokenId) internal {\n', '    require(ownerOf(tokenId) == owner);\n', '    if (_tokenApprovals[tokenId] != address(0)) {\n', '      _tokenApprovals[tokenId] = address(0);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param to address representing the new owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function _addTokenTo(address to, uint256 tokenId) internal {\n', '    require(_tokenOwner[tokenId] == address(0));\n', '    _tokenOwner[tokenId] = to;\n', '    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param from address representing the previous owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function _removeTokenFrom(address from, uint256 tokenId) internal {\n', '    require(ownerOf(tokenId) == from);\n', '    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n', '    _tokenOwner[tokenId] = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onERC721Received` on a target address\n', '   * The call is not executed if the target address is not a contract\n', '   * @param from address representing the previous owner of the given token ID\n', '   * @param to target address that will receive the tokens\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function _checkAndCallSafeTransfer(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId,\n', '    bytes _data\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    if (!to.isContract()) {\n', '      return true;\n', '    }\n', '    bytes4 retval = IERC721Receiver(to).onERC721Received(\n', '      msg.sender, from, tokenId, _data);\n', '    return (retval == _ERC721_RECEIVED);\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract IERC721Enumerable is IERC721 {\n', '  function totalSupply() public view returns (uint256);\n', '  function tokenOfOwnerByIndex(\n', '    address owner,\n', '    uint256 index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256 tokenId);\n', '\n', '  function tokenByIndex(uint256 index) public view returns (uint256);\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol\n', '\n', 'contract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping(address => uint256[]) private _ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) private _ownedTokensIndex;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] private _allTokens;\n', '\n', '  // Mapping from token id to position in the allTokens array\n', '  mapping(uint256 => uint256) private _allTokensIndex;\n', '\n', '  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n', '  /**\n', '   * 0x780e9d63 ===\n', '   *   bytes4(keccak256(&#39;totalSupply()&#39;)) ^\n', '   *   bytes4(keccak256(&#39;tokenOfOwnerByIndex(address,uint256)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;tokenByIndex(uint256)&#39;))\n', '   */\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  constructor() public {\n', '    // register the supported interface to conform to ERC721 via ERC165\n', '    _registerInterface(_InterfaceId_ERC721Enumerable);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '   * @param owner address owning the tokens list to be accessed\n', '   * @param index uint256 representing the index to be accessed of the requested tokens list\n', '   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '   */\n', '  function tokenOfOwnerByIndex(\n', '    address owner,\n', '    uint256 index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    require(index < balanceOf(owner));\n', '    return _ownedTokens[owner][index];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the total amount of tokens stored by the contract\n', '   * @return uint256 representing the total amount of tokens\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _allTokens.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of all the tokens in this contract\n', '   * Reverts if the index is greater or equal to the total number of tokens\n', '   * @param index uint256 representing the index to be accessed of the tokens list\n', '   * @return uint256 token ID at the given index of the tokens list\n', '   */\n', '  function tokenByIndex(uint256 index) public view returns (uint256) {\n', '    require(index < totalSupply());\n', '    return _allTokens[index];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param to address representing the new owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function _addTokenTo(address to, uint256 tokenId) internal {\n', '    super._addTokenTo(to, tokenId);\n', '    uint256 length = _ownedTokens[to].length;\n', '    _ownedTokens[to].push(tokenId);\n', '    _ownedTokensIndex[tokenId] = length;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param from address representing the previous owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function _removeTokenFrom(address from, uint256 tokenId) internal {\n', '    super._removeTokenFrom(from, tokenId);\n', '\n', '    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n', '    // then delete the last slot.\n', '    uint256 tokenIndex = _ownedTokensIndex[tokenId];\n', '    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n', '    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n', '\n', '    _ownedTokens[from][tokenIndex] = lastToken;\n', '    // This also deletes the contents at the last position of the array\n', '    _ownedTokens[from].length--;\n', '\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    _ownedTokensIndex[tokenId] = 0;\n', '    _ownedTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param to address the beneficiary that will own the minted token\n', '   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address to, uint256 tokenId) internal {\n', '    super._mint(to, tokenId);\n', '\n', '    _allTokensIndex[tokenId] = _allTokens.length;\n', '    _allTokens.push(tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param owner owner of the token to burn\n', '   * @param tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address owner, uint256 tokenId) internal {\n', '    super._burn(owner, tokenId);\n', '\n', '    // Reorg all tokens array\n', '    uint256 tokenIndex = _allTokensIndex[tokenId];\n', '    uint256 lastTokenIndex = _allTokens.length.sub(1);\n', '    uint256 lastToken = _allTokens[lastTokenIndex];\n', '\n', '    _allTokens[tokenIndex] = lastToken;\n', '    _allTokens[lastTokenIndex] = 0;\n', '\n', '    _allTokens.length--;\n', '    _allTokensIndex[tokenId] = 0;\n', '    _allTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract IERC721Metadata is IERC721 {\n', '  function name() external view returns (string);\n', '  function symbol() external view returns (string);\n', '  function tokenURI(uint256 tokenId) public view returns (string);\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol\n', '\n', 'contract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\n', '  // Token name\n', '  string internal _name;\n', '\n', '  // Token symbol\n', '  string internal _symbol;\n', '\n', '  // Optional mapping for token URIs\n', '  mapping(uint256 => string) private _tokenURIs;\n', '\n', '  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n', '  /**\n', '   * 0x5b5e139f ===\n', '   *   bytes4(keccak256(&#39;name()&#39;)) ^\n', '   *   bytes4(keccak256(&#39;symbol()&#39;)) ^\n', '   *   bytes4(keccak256(&#39;tokenURI(uint256)&#39;))\n', '   */\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  constructor(string name, string symbol) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(InterfaceId_ERC721Metadata);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token name\n', '   * @return string representing the token name\n', '   */\n', '  function name() external view returns (string) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token symbol\n', '   * @return string representing the token symbol\n', '   */\n', '  function symbol() external view returns (string) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns an URI for a given token ID\n', '   * Throws if the token ID does not exist. May return an empty string.\n', '   * @param tokenId uint256 ID of the token to query\n', '   */\n', '  function tokenURI(uint256 tokenId) public view returns (string) {\n', '    require(_exists(tokenId));\n', '    return _tokenURIs[tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to set the token URI for a given token\n', '   * Reverts if the token ID does not exist\n', '   * @param tokenId uint256 ID of the token to set its URI\n', '   * @param uri string URI to assign\n', '   */\n', '  function _setTokenURI(uint256 tokenId, string uri) internal {\n', '    require(_exists(tokenId));\n', '    _tokenURIs[tokenId] = uri;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param owner owner of the token to burn\n', '   * @param tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address owner, uint256 tokenId) internal {\n', '    super._burn(owner, tokenId);\n', '\n', '    // Clear metadata (if any)\n', '    if (bytes(_tokenURIs[tokenId]).length != 0) {\n', '      delete _tokenURIs[tokenId];\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\n', '  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n', '    public\n', '  {\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Mintable.sol\n', '\n', '/**\n', ' * @title ERC721Mintable\n', ' * @dev ERC721 minting logic\n', ' */\n', 'contract ERC721Mintable is ERC721Full, MinterRole {\n', '  event MintingFinished();\n', '\n', '  bool private _mintingFinished = false;\n', '\n', '  modifier onlyBeforeMintingFinished() {\n', '    require(!_mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if the minting is finished.\n', '   */\n', '  function mintingFinished() public view returns(bool) {\n', '    return _mintingFinished;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param to The address that will receive the minted tokens.\n', '   * @param tokenId The token id to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '    onlyMinter\n', '    onlyBeforeMintingFinished\n', '    returns (bool)\n', '  {\n', '    _mint(to, tokenId);\n', '    return true;\n', '  }\n', '\n', '  function mintWithTokenURI(\n', '    address to,\n', '    uint256 tokenId,\n', '    string tokenURI\n', '  )\n', '    public\n', '    onlyMinter\n', '    onlyBeforeMintingFinished\n', '    returns (bool)\n', '  {\n', '    mint(to, tokenId);\n', '    _setTokenURI(tokenId, tokenURI);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting()\n', '    public\n', '    onlyMinter\n', '    onlyBeforeMintingFinished\n', '    returns (bool)\n', '  {\n', '    _mintingFinished = true;\n', '    emit MintingFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n', '\n', 'contract PauserRole {\n', '  using Roles for Roles.Role;\n', '\n', '  event PauserAdded(address indexed account);\n', '  event PauserRemoved(address indexed account);\n', '\n', '  Roles.Role private pausers;\n', '\n', '  constructor() public {\n', '    pausers.add(msg.sender);\n', '  }\n', '\n', '  modifier onlyPauser() {\n', '    require(isPauser(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isPauser(address account) public view returns (bool) {\n', '    return pausers.has(account);\n', '  }\n', '\n', '  function addPauser(address account) public onlyPauser {\n', '    pausers.add(account);\n', '    emit PauserAdded(account);\n', '  }\n', '\n', '  function renouncePauser() public {\n', '    pausers.remove(msg.sender);\n', '  }\n', '\n', '  function _removePauser(address account) internal {\n', '    pausers.remove(account);\n', '    emit PauserRemoved(account);\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is PauserRole {\n', '  event Paused();\n', '  event Unpaused();\n', '\n', '  bool private _paused = false;\n', '\n', '\n', '  /**\n', '   * @return true if the contract is paused, false otherwise.\n', '   */\n', '  function paused() public view returns(bool) {\n', '    return _paused;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!_paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(_paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyPauser whenNotPaused {\n', '    _paused = true;\n', '    emit Paused();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyPauser whenPaused {\n', '    _paused = false;\n', '    emit Unpaused();\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Pausable.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Pausable token\n', ' * @dev ERC721 modified with pausable transfers.\n', ' **/\n', 'contract ERC721Pausable is ERC721, Pausable {\n', '  function approve(\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '    whenNotPaused\n', '  {\n', '    super.approve(to, tokenId);\n', '  }\n', '\n', '  function setApprovalForAll(\n', '    address to,\n', '    bool approved\n', '  )\n', '    public\n', '    whenNotPaused\n', '  {\n', '    super.setApprovalForAll(to, approved);\n', '  }\n', '\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '    whenNotPaused\n', '  {\n', '    super.transferFrom(from, to, tokenId);\n', '  }\n', '}\n', '\n', '// File: contracts/HeroAsset.sol\n', '\n', 'contract HeroAsset is ERC721Mintable, ERC721Pausable {\n', '\n', '    uint16 public constant HERO_TYPE_OFFSET = 10000;\n', '\n', '    string public tokenURIPrefix = "https://www.mycryptoheroes.net/metadata/hero/";\n', '    mapping(uint16 => uint16) private heroTypeToSupplyLimit;\n', '\n', '    constructor() public ERC721Full("MyCryptoHeroes:Hero", "MCHH") {}\n', '\n', '    function setSupplyLimit(uint16 _heroType, uint16 _supplyLimit) external onlyMinter {\n', '        require(heroTypeToSupplyLimit[_heroType] == 0 || _supplyLimit < heroTypeToSupplyLimit[_heroType],\n', '            "_supplyLimit is bigger");\n', '        heroTypeToSupplyLimit[_heroType] = _supplyLimit;\n', '    }\n', '\n', '    function setTokenURIPrefix(string _tokenURIPrefix) external onlyMinter {\n', '        tokenURIPrefix = _tokenURIPrefix;\n', '    }\n', '\n', '    function getSupplyLimit(uint16 _heroType) public view returns (uint16) {\n', '        return heroTypeToSupplyLimit[_heroType];\n', '    }\n', '\n', '    function mintHeroAsset(address _owner, uint256 _tokenId) public onlyMinter {\n', '        uint16 _heroType = uint16(_tokenId / HERO_TYPE_OFFSET);\n', '        uint16 _heroTypeIndex = uint16(_tokenId % HERO_TYPE_OFFSET) - 1;\n', '        require(_heroTypeIndex < heroTypeToSupplyLimit[_heroType], "supply over");\n', '        _mint(_owner, _tokenId);\n', '    }\n', '\n', '    function tokenURI(uint256 tokenId) public view returns (string) {\n', '        bytes32 tokenIdBytes;\n', '        if (tokenId == 0) {\n', '            tokenIdBytes = "0";\n', '        } else {\n', '            uint256 value = tokenId;\n', '            while (value > 0) {\n', '                tokenIdBytes = bytes32(uint256(tokenIdBytes) / (2 ** 8));\n', '                tokenIdBytes |= bytes32(((value % 10) + 48) * 2 ** (8 * 31));\n', '                value /= 10;\n', '            }\n', '        }\n', '\n', '        bytes memory prefixBytes = bytes(tokenURIPrefix);\n', '        bytes memory tokenURIBytes = new bytes(prefixBytes.length + tokenIdBytes.length);\n', '\n', '        uint8 i;\n', '        uint8 index = 0;\n', '        \n', '        for (i = 0; i < prefixBytes.length; i++) {\n', '            tokenURIBytes[index] = prefixBytes[i];\n', '            index++;\n', '        }\n', '        \n', '        for (i = 0; i < tokenIdBytes.length; i++) {\n', '            tokenURIBytes[index] = tokenIdBytes[i];\n', '            index++;\n', '        }\n', '        \n', '        return string(tokenURIBytes);\n', '    }\n', '\n', '}']
['pragma solidity 0.4.24;\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/access/Roles.sol\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an account access to this role\n', '   */\n', '  function add(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    role.bearer[account] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an account's access to this role\n", '   */\n', '  function remove(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    role.bearer[account] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an account has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address account)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    require(account != address(0));\n', '    return role.bearer[account];\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n', '\n', 'contract MinterRole {\n', '  using Roles for Roles.Role;\n', '\n', '  event MinterAdded(address indexed account);\n', '  event MinterRemoved(address indexed account);\n', '\n', '  Roles.Role private minters;\n', '\n', '  constructor() public {\n', '    minters.add(msg.sender);\n', '  }\n', '\n', '  modifier onlyMinter() {\n', '    require(isMinter(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isMinter(address account) public view returns (bool) {\n', '    return minters.has(account);\n', '  }\n', '\n', '  function addMinter(address account) public onlyMinter {\n', '    minters.add(account);\n', '    emit MinterAdded(account);\n', '  }\n', '\n', '  function renounceMinter() public {\n', '    minters.remove(msg.sender);\n', '  }\n', '\n', '  function _removeMinter(address account) internal {\n', '    minters.remove(account);\n', '    emit MinterRemoved(account);\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/introspection/IERC165.sol\n', '\n', '/**\n', ' * @title IERC165\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', ' */\n', 'interface IERC165 {\n', '\n', '  /**\n', '   * @notice Query if a contract implements an interface\n', '   * @param interfaceId The interface identifier, as specified in ERC-165\n', '   * @dev Interface identification is specified in ERC-165. This function\n', '   * uses less than 30,000 gas.\n', '   */\n', '  function supportsInterface(bytes4 interfaceId)\n', '    external\n', '    view\n', '    returns (bool);\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/introspection/ERC165.sol\n', '\n', '/**\n', ' * @title ERC165\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Implements ERC165 using a lookup table.\n', ' */\n', 'contract ERC165 is IERC165 {\n', '\n', '  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n', '  /**\n', '   * 0x01ffc9a7 ===\n', "   *   bytes4(keccak256('supportsInterface(bytes4)'))\n", '   */\n', '\n', '  /**\n', "   * @dev a mapping of interface id to whether or not it's supported\n", '   */\n', '  mapping(bytes4 => bool) internal _supportedInterfaces;\n', '\n', '  /**\n', '   * @dev A contract implementing SupportsInterfaceWithLookup\n', '   * implement ERC165 itself\n', '   */\n', '  constructor()\n', '    public\n', '  {\n', '    _registerInterface(_InterfaceId_ERC165);\n', '  }\n', '\n', '  /**\n', '   * @dev implement supportsInterface(bytes4) using a lookup table\n', '   */\n', '  function supportsInterface(bytes4 interfaceId)\n', '    external\n', '    view\n', '    returns (bool)\n', '  {\n', '    return _supportedInterfaces[interfaceId];\n', '  }\n', '\n', '  /**\n', '   * @dev private method for registering an interface\n', '   */\n', '  function _registerInterface(bytes4 interfaceId)\n', '    internal\n', '  {\n', '    require(interfaceId != 0xffffffff);\n', '    _supportedInterfaces[interfaceId] = true;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/utils/Address.sol\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library Address {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   * as the code is not actually created until after the constructor finishes.\n', '   * @param account address of the account to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address account) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(account) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract IERC721 is IERC165 {\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 indexed tokenId\n', '  );\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed approved,\n', '    uint256 indexed tokenId\n', '  );\n', '  event ApprovalForAll(\n', '    address indexed owner,\n', '    address indexed operator,\n', '    bool approved\n', '  );\n', '\n', '  function balanceOf(address owner) public view returns (uint256 balance);\n', '  function ownerOf(uint256 tokenId) public view returns (address owner);\n', '\n', '  function approve(address to, uint256 tokenId) public;\n', '  function getApproved(uint256 tokenId)\n', '    public view returns (address operator);\n', '\n', '  function setApprovalForAll(address operator, bool _approved) public;\n', '  function isApprovedForAll(address owner, address operator)\n', '    public view returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 tokenId) public;\n', '  function safeTransferFrom(address from, address to, uint256 tokenId)\n', '    public;\n', '\n', '  function safeTransferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId,\n', '    bytes data\n', '  )\n', '    public;\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'contract IERC721Receiver {\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient\n', '   * after a `safeTransfer`. This function MUST return the function selector,\n', '   * otherwise the caller will revert the transaction. The selector to be\n', '   * returned can be obtained as `this.onERC721Received.selector`. This\n', '   * function MAY throw to revert and reject the transfer.\n', '   * Note: the ERC721 contract address is always the message sender.\n', '   * @param operator The address which called `safeTransferFrom` function\n', '   * @param from The address which previously owned the token\n', '   * @param tokenId The NFT identifier which is being transferred\n', '   * @param data Additional data with no specified format\n', '   * @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '   */\n', '  function onERC721Received(\n', '    address operator,\n', '    address from,\n', '    uint256 tokenId,\n', '    bytes data\n', '  )\n', '    public\n', '    returns(bytes4);\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC165, IERC721 {\n', '\n', '  using SafeMath for uint256;\n', '  using Address for address;\n', '\n', '  // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) private _tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) private _tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping (address => uint256) private _ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping (address => mapping (address => bool)) private _operatorApprovals;\n', '\n', '  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n', '  /*\n', '   * 0x80ac58cd ===\n', "   *   bytes4(keccak256('balanceOf(address)')) ^\n", "   *   bytes4(keccak256('ownerOf(uint256)')) ^\n", "   *   bytes4(keccak256('approve(address,uint256)')) ^\n", "   *   bytes4(keccak256('getApproved(uint256)')) ^\n", "   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n", "   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n", "   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n", "   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n", "   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n", '   */\n', '\n', '  constructor()\n', '    public\n', '  {\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(_InterfaceId_ERC721);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address\n', '   * @param owner address to query the balance of\n', '   * @return uint256 representing the amount owned by the passed address\n', '   */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    require(owner != address(0));\n', '    return _ownedTokensCount[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the owner of the specified token ID\n', '   * @param tokenId uint256 ID of the token to query the owner of\n', '   * @return owner address currently marked as the owner of the given token ID\n', '   */\n', '  function ownerOf(uint256 tokenId) public view returns (address) {\n', '    address owner = _tokenOwner[tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Approves another address to transfer the given token ID\n', '   * The zero address indicates there is no approved address.\n', '   * There can only be one approved address per token at a given time.\n', '   * Can only be called by the token owner or an approved operator.\n', '   * @param to address to be approved for the given token ID\n', '   * @param tokenId uint256 ID of the token to be approved\n', '   */\n', '  function approve(address to, uint256 tokenId) public {\n', '    address owner = ownerOf(tokenId);\n', '    require(to != owner);\n', '    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '    _tokenApprovals[tokenId] = to;\n', '    emit Approval(owner, to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * Reverts if the token ID does not exist.\n', '   * @param tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for the given token ID\n', '   */\n', '  function getApproved(uint256 tokenId) public view returns (address) {\n', '    require(_exists(tokenId));\n', '    return _tokenApprovals[tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * An operator is allowed to transfer all tokens of the sender on their behalf\n', '   * @param to operator address to set the approval\n', '   * @param approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(address to, bool approved) public {\n', '    require(to != msg.sender);\n', '    _operatorApprovals[msg.sender][to] = approved;\n', '    emit ApprovalForAll(msg.sender, to, approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param owner owner address which you want to query the approval of\n', '   * @param operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(\n', '    address owner,\n', '    address operator\n', '  )\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return _operatorApprovals[owner][operator];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers the ownership of a given token ID to another address\n', '   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '  {\n', '    require(_isApprovedOrOwner(msg.sender, tokenId));\n', '    require(to != address(0));\n', '\n', '    _clearApproval(from, tokenId);\n', '    _removeTokenFrom(from, tokenId);\n', '    _addTokenTo(to, tokenId);\n', '\n', '    emit Transfer(from, to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   *\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function safeTransferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '  {\n', '    // solium-disable-next-line arg-overflow\n', '    safeTransferFrom(from, to, tokenId, "");\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function safeTransferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '  {\n', '    transferFrom(from, to, tokenId);\n', '    // solium-disable-next-line arg-overflow\n', '    require(_checkAndCallSafeTransfer(from, to, tokenId, _data));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the specified token exists\n', '   * @param tokenId uint256 ID of the token to query the existence of\n', '   * @return whether the token exists\n', '   */\n', '  function _exists(uint256 tokenId) internal view returns (bool) {\n', '    address owner = _tokenOwner[tokenId];\n', '    return owner != address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the given spender can transfer a given token ID\n', '   * @param spender address of the spender to query\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @return bool whether the msg.sender is approved for the given token ID,\n', '   *  is an operator of the owner, or is the owner of the token\n', '   */\n', '  function _isApprovedOrOwner(\n', '    address spender,\n', '    uint256 tokenId\n', '  )\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    address owner = ownerOf(tokenId);\n', '    // Disable solium check because of\n', '    // https://github.com/duaraghav8/Solium/issues/175\n', '    // solium-disable-next-line operator-whitespace\n', '    return (\n', '      spender == owner ||\n', '      getApproved(tokenId) == spender ||\n', '      isApprovedForAll(owner, spender)\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param to The address that will own the minted token\n', '   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address to, uint256 tokenId) internal {\n', '    require(to != address(0));\n', '    _addTokenTo(to, tokenId);\n', '    emit Transfer(address(0), to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address owner, uint256 tokenId) internal {\n', '    _clearApproval(owner, tokenId);\n', '    _removeTokenFrom(owner, tokenId);\n', '    emit Transfer(owner, address(0), tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to clear current approval of a given token ID\n', '   * Reverts if the given address is not indeed the owner of the token\n', '   * @param owner owner of the token\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function _clearApproval(address owner, uint256 tokenId) internal {\n', '    require(ownerOf(tokenId) == owner);\n', '    if (_tokenApprovals[tokenId] != address(0)) {\n', '      _tokenApprovals[tokenId] = address(0);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param to address representing the new owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function _addTokenTo(address to, uint256 tokenId) internal {\n', '    require(_tokenOwner[tokenId] == address(0));\n', '    _tokenOwner[tokenId] = to;\n', '    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param from address representing the previous owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function _removeTokenFrom(address from, uint256 tokenId) internal {\n', '    require(ownerOf(tokenId) == from);\n', '    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n', '    _tokenOwner[tokenId] = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onERC721Received` on a target address\n', '   * The call is not executed if the target address is not a contract\n', '   * @param from address representing the previous owner of the given token ID\n', '   * @param to target address that will receive the tokens\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function _checkAndCallSafeTransfer(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId,\n', '    bytes _data\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    if (!to.isContract()) {\n', '      return true;\n', '    }\n', '    bytes4 retval = IERC721Receiver(to).onERC721Received(\n', '      msg.sender, from, tokenId, _data);\n', '    return (retval == _ERC721_RECEIVED);\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract IERC721Enumerable is IERC721 {\n', '  function totalSupply() public view returns (uint256);\n', '  function tokenOfOwnerByIndex(\n', '    address owner,\n', '    uint256 index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256 tokenId);\n', '\n', '  function tokenByIndex(uint256 index) public view returns (uint256);\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol\n', '\n', 'contract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping(address => uint256[]) private _ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) private _ownedTokensIndex;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] private _allTokens;\n', '\n', '  // Mapping from token id to position in the allTokens array\n', '  mapping(uint256 => uint256) private _allTokensIndex;\n', '\n', '  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n', '  /**\n', '   * 0x780e9d63 ===\n', "   *   bytes4(keccak256('totalSupply()')) ^\n", "   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n", "   *   bytes4(keccak256('tokenByIndex(uint256)'))\n", '   */\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  constructor() public {\n', '    // register the supported interface to conform to ERC721 via ERC165\n', '    _registerInterface(_InterfaceId_ERC721Enumerable);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '   * @param owner address owning the tokens list to be accessed\n', '   * @param index uint256 representing the index to be accessed of the requested tokens list\n', '   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '   */\n', '  function tokenOfOwnerByIndex(\n', '    address owner,\n', '    uint256 index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    require(index < balanceOf(owner));\n', '    return _ownedTokens[owner][index];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the total amount of tokens stored by the contract\n', '   * @return uint256 representing the total amount of tokens\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _allTokens.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of all the tokens in this contract\n', '   * Reverts if the index is greater or equal to the total number of tokens\n', '   * @param index uint256 representing the index to be accessed of the tokens list\n', '   * @return uint256 token ID at the given index of the tokens list\n', '   */\n', '  function tokenByIndex(uint256 index) public view returns (uint256) {\n', '    require(index < totalSupply());\n', '    return _allTokens[index];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param to address representing the new owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function _addTokenTo(address to, uint256 tokenId) internal {\n', '    super._addTokenTo(to, tokenId);\n', '    uint256 length = _ownedTokens[to].length;\n', '    _ownedTokens[to].push(tokenId);\n', '    _ownedTokensIndex[tokenId] = length;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param from address representing the previous owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function _removeTokenFrom(address from, uint256 tokenId) internal {\n', '    super._removeTokenFrom(from, tokenId);\n', '\n', '    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n', '    // then delete the last slot.\n', '    uint256 tokenIndex = _ownedTokensIndex[tokenId];\n', '    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n', '    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n', '\n', '    _ownedTokens[from][tokenIndex] = lastToken;\n', '    // This also deletes the contents at the last position of the array\n', '    _ownedTokens[from].length--;\n', '\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    _ownedTokensIndex[tokenId] = 0;\n', '    _ownedTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param to address the beneficiary that will own the minted token\n', '   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address to, uint256 tokenId) internal {\n', '    super._mint(to, tokenId);\n', '\n', '    _allTokensIndex[tokenId] = _allTokens.length;\n', '    _allTokens.push(tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param owner owner of the token to burn\n', '   * @param tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address owner, uint256 tokenId) internal {\n', '    super._burn(owner, tokenId);\n', '\n', '    // Reorg all tokens array\n', '    uint256 tokenIndex = _allTokensIndex[tokenId];\n', '    uint256 lastTokenIndex = _allTokens.length.sub(1);\n', '    uint256 lastToken = _allTokens[lastTokenIndex];\n', '\n', '    _allTokens[tokenIndex] = lastToken;\n', '    _allTokens[lastTokenIndex] = 0;\n', '\n', '    _allTokens.length--;\n', '    _allTokensIndex[tokenId] = 0;\n', '    _allTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract IERC721Metadata is IERC721 {\n', '  function name() external view returns (string);\n', '  function symbol() external view returns (string);\n', '  function tokenURI(uint256 tokenId) public view returns (string);\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol\n', '\n', 'contract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\n', '  // Token name\n', '  string internal _name;\n', '\n', '  // Token symbol\n', '  string internal _symbol;\n', '\n', '  // Optional mapping for token URIs\n', '  mapping(uint256 => string) private _tokenURIs;\n', '\n', '  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n', '  /**\n', '   * 0x5b5e139f ===\n', "   *   bytes4(keccak256('name()')) ^\n", "   *   bytes4(keccak256('symbol()')) ^\n", "   *   bytes4(keccak256('tokenURI(uint256)'))\n", '   */\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  constructor(string name, string symbol) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(InterfaceId_ERC721Metadata);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token name\n', '   * @return string representing the token name\n', '   */\n', '  function name() external view returns (string) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token symbol\n', '   * @return string representing the token symbol\n', '   */\n', '  function symbol() external view returns (string) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns an URI for a given token ID\n', '   * Throws if the token ID does not exist. May return an empty string.\n', '   * @param tokenId uint256 ID of the token to query\n', '   */\n', '  function tokenURI(uint256 tokenId) public view returns (string) {\n', '    require(_exists(tokenId));\n', '    return _tokenURIs[tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to set the token URI for a given token\n', '   * Reverts if the token ID does not exist\n', '   * @param tokenId uint256 ID of the token to set its URI\n', '   * @param uri string URI to assign\n', '   */\n', '  function _setTokenURI(uint256 tokenId, string uri) internal {\n', '    require(_exists(tokenId));\n', '    _tokenURIs[tokenId] = uri;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param owner owner of the token to burn\n', '   * @param tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address owner, uint256 tokenId) internal {\n', '    super._burn(owner, tokenId);\n', '\n', '    // Clear metadata (if any)\n', '    if (bytes(_tokenURIs[tokenId]).length != 0) {\n', '      delete _tokenURIs[tokenId];\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\n', '  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n', '    public\n', '  {\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Mintable.sol\n', '\n', '/**\n', ' * @title ERC721Mintable\n', ' * @dev ERC721 minting logic\n', ' */\n', 'contract ERC721Mintable is ERC721Full, MinterRole {\n', '  event MintingFinished();\n', '\n', '  bool private _mintingFinished = false;\n', '\n', '  modifier onlyBeforeMintingFinished() {\n', '    require(!_mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if the minting is finished.\n', '   */\n', '  function mintingFinished() public view returns(bool) {\n', '    return _mintingFinished;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param to The address that will receive the minted tokens.\n', '   * @param tokenId The token id to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '    onlyMinter\n', '    onlyBeforeMintingFinished\n', '    returns (bool)\n', '  {\n', '    _mint(to, tokenId);\n', '    return true;\n', '  }\n', '\n', '  function mintWithTokenURI(\n', '    address to,\n', '    uint256 tokenId,\n', '    string tokenURI\n', '  )\n', '    public\n', '    onlyMinter\n', '    onlyBeforeMintingFinished\n', '    returns (bool)\n', '  {\n', '    mint(to, tokenId);\n', '    _setTokenURI(tokenId, tokenURI);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting()\n', '    public\n', '    onlyMinter\n', '    onlyBeforeMintingFinished\n', '    returns (bool)\n', '  {\n', '    _mintingFinished = true;\n', '    emit MintingFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n', '\n', 'contract PauserRole {\n', '  using Roles for Roles.Role;\n', '\n', '  event PauserAdded(address indexed account);\n', '  event PauserRemoved(address indexed account);\n', '\n', '  Roles.Role private pausers;\n', '\n', '  constructor() public {\n', '    pausers.add(msg.sender);\n', '  }\n', '\n', '  modifier onlyPauser() {\n', '    require(isPauser(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isPauser(address account) public view returns (bool) {\n', '    return pausers.has(account);\n', '  }\n', '\n', '  function addPauser(address account) public onlyPauser {\n', '    pausers.add(account);\n', '    emit PauserAdded(account);\n', '  }\n', '\n', '  function renouncePauser() public {\n', '    pausers.remove(msg.sender);\n', '  }\n', '\n', '  function _removePauser(address account) internal {\n', '    pausers.remove(account);\n', '    emit PauserRemoved(account);\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is PauserRole {\n', '  event Paused();\n', '  event Unpaused();\n', '\n', '  bool private _paused = false;\n', '\n', '\n', '  /**\n', '   * @return true if the contract is paused, false otherwise.\n', '   */\n', '  function paused() public view returns(bool) {\n', '    return _paused;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!_paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(_paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyPauser whenNotPaused {\n', '    _paused = true;\n', '    emit Paused();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyPauser whenPaused {\n', '    _paused = false;\n', '    emit Unpaused();\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Pausable.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Pausable token\n', ' * @dev ERC721 modified with pausable transfers.\n', ' **/\n', 'contract ERC721Pausable is ERC721, Pausable {\n', '  function approve(\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '    whenNotPaused\n', '  {\n', '    super.approve(to, tokenId);\n', '  }\n', '\n', '  function setApprovalForAll(\n', '    address to,\n', '    bool approved\n', '  )\n', '    public\n', '    whenNotPaused\n', '  {\n', '    super.setApprovalForAll(to, approved);\n', '  }\n', '\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '    whenNotPaused\n', '  {\n', '    super.transferFrom(from, to, tokenId);\n', '  }\n', '}\n', '\n', '// File: contracts/HeroAsset.sol\n', '\n', 'contract HeroAsset is ERC721Mintable, ERC721Pausable {\n', '\n', '    uint16 public constant HERO_TYPE_OFFSET = 10000;\n', '\n', '    string public tokenURIPrefix = "https://www.mycryptoheroes.net/metadata/hero/";\n', '    mapping(uint16 => uint16) private heroTypeToSupplyLimit;\n', '\n', '    constructor() public ERC721Full("MyCryptoHeroes:Hero", "MCHH") {}\n', '\n', '    function setSupplyLimit(uint16 _heroType, uint16 _supplyLimit) external onlyMinter {\n', '        require(heroTypeToSupplyLimit[_heroType] == 0 || _supplyLimit < heroTypeToSupplyLimit[_heroType],\n', '            "_supplyLimit is bigger");\n', '        heroTypeToSupplyLimit[_heroType] = _supplyLimit;\n', '    }\n', '\n', '    function setTokenURIPrefix(string _tokenURIPrefix) external onlyMinter {\n', '        tokenURIPrefix = _tokenURIPrefix;\n', '    }\n', '\n', '    function getSupplyLimit(uint16 _heroType) public view returns (uint16) {\n', '        return heroTypeToSupplyLimit[_heroType];\n', '    }\n', '\n', '    function mintHeroAsset(address _owner, uint256 _tokenId) public onlyMinter {\n', '        uint16 _heroType = uint16(_tokenId / HERO_TYPE_OFFSET);\n', '        uint16 _heroTypeIndex = uint16(_tokenId % HERO_TYPE_OFFSET) - 1;\n', '        require(_heroTypeIndex < heroTypeToSupplyLimit[_heroType], "supply over");\n', '        _mint(_owner, _tokenId);\n', '    }\n', '\n', '    function tokenURI(uint256 tokenId) public view returns (string) {\n', '        bytes32 tokenIdBytes;\n', '        if (tokenId == 0) {\n', '            tokenIdBytes = "0";\n', '        } else {\n', '            uint256 value = tokenId;\n', '            while (value > 0) {\n', '                tokenIdBytes = bytes32(uint256(tokenIdBytes) / (2 ** 8));\n', '                tokenIdBytes |= bytes32(((value % 10) + 48) * 2 ** (8 * 31));\n', '                value /= 10;\n', '            }\n', '        }\n', '\n', '        bytes memory prefixBytes = bytes(tokenURIPrefix);\n', '        bytes memory tokenURIBytes = new bytes(prefixBytes.length + tokenIdBytes.length);\n', '\n', '        uint8 i;\n', '        uint8 index = 0;\n', '        \n', '        for (i = 0; i < prefixBytes.length; i++) {\n', '            tokenURIBytes[index] = prefixBytes[i];\n', '            index++;\n', '        }\n', '        \n', '        for (i = 0; i < tokenIdBytes.length; i++) {\n', '            tokenURIBytes[index] = tokenIdBytes[i];\n', '            index++;\n', '        }\n', '        \n', '        return string(tokenURIBytes);\n', '    }\n', '\n', '}']
