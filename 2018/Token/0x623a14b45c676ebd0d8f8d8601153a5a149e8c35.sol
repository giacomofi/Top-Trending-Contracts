['pragma solidity ^0.4.24;\n', '\n', '// ------ TTT ----- //\n', 'contract RBAC {\n', '    event RoleAdded(address indexed operator, string role);\n', '    event RoleRemoved(address indexed operator, string role);\n', '    function checkRole(address _operator, string _role) view public;\n', '    function hasRole(address _operator, string _role) view public returns (bool);\n', '    function addRole(address _operator, string _role) internal;\n', '    function removeRole(address _operator, string _role) internal;\n', '}\n', 'contract Ownable {\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    function transferOwnership(address _newOwner) external;\n', '}\n', 'contract Superuser is Ownable, RBAC {\n', '    function addRoleForUser(address _user, string _role) public;\n', '    function delRoleForUser(address _user, string _role) public;\n', '}\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) external;\n', '}\n', 'contract OwnerSellContract {\n', '    function createOrder(address _owner, uint _amount, uint _price, address _buyer, uint _date) external returns (bool);\n', '    function cancelOrder(address _buyer) external returns (bool);\n', '}\n', 'contract RealtyContract {\n', '    function freezeTokens(address _owner, uint _amount) external returns (bool);\n', '    function acceptRequest(address _owner) external returns (bool);\n', '    function cancelRequest(address _owner) external returns (bool);\n', '}\n', 'contract TTTToken is Superuser {\n', '    struct  Checkpoint {}\n', '    event ClaimedTokens(address indexed _token, address indexed _owner, uint _amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\n', '    function transfer(address _to, uint256 _amount) external returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\n', '    function doTransfer(address _from, address _to, uint _amount) internal;\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function approve(address _spender, uint256 _amount) public returns (bool);\n', '    function increaseApproval(address _spender, uint _addedAmount) external returns (bool);\n', '    function decreaseApproval(address _spender, uint _subtractedAmount) external returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) external returns (bool);\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint);\n', '    function totalSupplyAt(uint _blockNumber) public view returns(uint);\n', '    function enableTransfers(bool _transfersEnabled) public returns (bool);\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block) view internal returns (uint);\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal;\n', '    function destroyTokens(address _owner, uint _amount) public returns (bool);\n', '    function _doDestroyTokens(address _owner, uint _amount) internal;\n', '    function closeProject(uint _price) public;\n', '    function getRealty(address _contract, uint _val) public;\n', '    function acceptRequest(address _contract, address _owner) public;\n', '    function cancelRequest(address _contract, address _owner) public;\n', '    function changeTokens() public returns (bool);\n', '    function createOrder(address _contract, uint _amount, uint _price, address _buyer, uint _date) public returns (bool);\n', '    function cancelOrder(address _contract, address _buyer) public returns (bool);\n', '    function min(uint a, uint b) pure internal returns (uint);\n', '    function () payable public;\n', '    function claimTokens(address _token) external;\n', '}\n', '// ------ TTT ----- //\n', '\n', '// ------ USDT ----- //\n', 'contract ERC20Basic {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function transfer(address to, uint value) public;\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint);\n', '    function transferFrom(address from, address to, uint value) public;\n', '    function approve(address spender, uint value) public;\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', 'contract BasicToken is Ownable, ERC20Basic {\n', '    function transfer(address _to, uint _value) public;\n', '    function balanceOf(address _owner) public constant returns (uint balance);\n', '}\n', 'contract StandardToken is BasicToken, ERC20 {\n', '    function transferFrom(address _from, address _to, uint _value) public;\n', '    function approve(address _spender, uint _value) public;\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining);\n', '}\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  function pause() public;\n', '  function unpause() public;\n', '}\n', 'contract BlackList is Ownable, BasicToken {\n', '    function getBlackListStatus(address _maker) external constant returns (bool);\n', '    function getOwner() external constant returns (address);\n', '    function addBlackList (address _evilUser) public;\n', '    function removeBlackList (address _clearedUser) public;\n', '    function destroyBlackFunds (address _blackListedUser) public;\n', '    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\n', '    event AddedBlackList(address _user);\n', '    event RemovedBlackList(address _user);\n', '}\n', 'contract UpgradedStandardToken is StandardToken{\n', '    function transferByLegacy(address from, address to, uint value) public;\n', '    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\n', '    function approveByLegacy(address from, address spender, uint value) public;\n', '}\n', 'contract TetherToken is Pausable, StandardToken, BlackList {\n', '    function transfer(address _to, uint _value) public;\n', '    function transferFrom(address _from, address _to, uint _value) public;\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function approve(address _spender, uint _value) public;\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining);\n', '    function deprecate(address _upgradedAddress) public;\n', '    function totalSupply() public constant returns (uint);\n', '    function issue(uint amount) public;\n', '    function redeem(uint amount) public;\n', '    function setParams(uint newBasisPoints, uint newMaxFee) public;\n', '    event Issue(uint amount);\n', '    event Redeem(uint amount);\n', '    event Deprecate(address newAddress);\n', '    event Params(uint feeBasisPoints, uint maxFee);\n', '}\n', '// ------ USDT ----- //\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = _a * _b;\n', '        require(c / _a == _b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = _a / _b;\n', '        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b <= _a);\n', '        uint256 c = _a - _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        uint256 c = _a + _b;\n', '        require(c >= _a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract TTTExchange {\n', '    using SafeMath for uint;\n', '\n', '    TTTToken public tokenTTT = TTTToken(0xF92d38De8e30151835b9Ebe327E52878b4115CBF);\n', '    TetherToken public tokenUSD = TetherToken(0xdac17f958d2ee523a2206206994597c13d831ec7);\n', '\n', '    address owner;\n', '\n', '    uint priceUSD;\n', '    uint priceETH;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) external onlyOwner {\n', '        require(_newOwner != address(0));\n', '        owner = _newOwner;\n', '    }\n', '\n', '    constructor(uint _priceETH, uint _priceUSD) public {\n', '        owner = msg.sender;\n', '        priceETH = _priceETH;\n', '        priceUSD = _priceUSD;\n', '    }\n', '\n', '    function getInfo(address _address) external view returns(uint PriceETH, uint PriceUSD, uint BalanceTTT, uint Approved, uint toETH, uint toUSD) {\n', '        PriceETH = priceETH;\n', '        PriceUSD = priceUSD;\n', '        BalanceTTT = tokenTTT.balanceOf(_address);\n', '        Approved = tokenTTT.allowance(_address, address(this));\n', '        toETH = Approved * priceETH;\n', '        toUSD = Approved * priceUSD;\n', '    }\n', '\n', '    function amIReady(address _address) external view returns(bool) {\n', '        uint _a = tokenTTT.allowance(_address, address(this));\n', '        if (_a > 0) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function() external payable {\n', '        msg.sender.transfer(msg.value);\n', '        if (uint(bytes(msg.data)[0]) == 1) {\n', '            toETH();\n', '        }\n', '        if (uint(bytes(msg.data)[0]) == 2) {\n', '            toUSD();\n', '        }\n', '    }\n', '\n', '    function setPriceETH(uint _newPriceETH) external onlyOwner {\n', '        require(_newPriceETH != 0);\n', '        priceETH = _newPriceETH;\n', '    }\n', '\n', '    function setPriceUSD(uint _newPriceUSD) external onlyOwner {\n', '        require(_newPriceUSD != 0);\n', '        priceUSD = _newPriceUSD;\n', '    }\n', '\n', '    function toETH() public {\n', '        uint _value = tokenTTT.allowance(msg.sender, address(this));\n', '        if (_value > 0) {\n', '            tokenTTT.transferFrom(msg.sender, owner, _value);\n', '            msg.sender.transfer(_value.mul(priceETH));\n', '        }\n', '    }\n', '\n', '    function toUSD() public {\n', '        uint _value = tokenTTT.allowance(msg.sender, address(this));\n', '        if (_value > 0) {\n', '            tokenTTT.transferFrom(msg.sender, owner, _value);\n', '            tokenUSD.transfer(msg.sender, _value.mul(priceUSD));\n', '        }\n', '    }\n', '\n', '    function getBalance(address _recipient) external onlyOwner {\n', '        uint _balance = tokenTTT.balanceOf(address(this));\n', '        tokenTTT.transfer(_recipient, _balance);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// ------ TTT ----- //\n', 'contract RBAC {\n', '    event RoleAdded(address indexed operator, string role);\n', '    event RoleRemoved(address indexed operator, string role);\n', '    function checkRole(address _operator, string _role) view public;\n', '    function hasRole(address _operator, string _role) view public returns (bool);\n', '    function addRole(address _operator, string _role) internal;\n', '    function removeRole(address _operator, string _role) internal;\n', '}\n', 'contract Ownable {\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    function transferOwnership(address _newOwner) external;\n', '}\n', 'contract Superuser is Ownable, RBAC {\n', '    function addRoleForUser(address _user, string _role) public;\n', '    function delRoleForUser(address _user, string _role) public;\n', '}\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) external;\n', '}\n', 'contract OwnerSellContract {\n', '    function createOrder(address _owner, uint _amount, uint _price, address _buyer, uint _date) external returns (bool);\n', '    function cancelOrder(address _buyer) external returns (bool);\n', '}\n', 'contract RealtyContract {\n', '    function freezeTokens(address _owner, uint _amount) external returns (bool);\n', '    function acceptRequest(address _owner) external returns (bool);\n', '    function cancelRequest(address _owner) external returns (bool);\n', '}\n', 'contract TTTToken is Superuser {\n', '    struct  Checkpoint {}\n', '    event ClaimedTokens(address indexed _token, address indexed _owner, uint _amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\n', '    function transfer(address _to, uint256 _amount) external returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\n', '    function doTransfer(address _from, address _to, uint _amount) internal;\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function approve(address _spender, uint256 _amount) public returns (bool);\n', '    function increaseApproval(address _spender, uint _addedAmount) external returns (bool);\n', '    function decreaseApproval(address _spender, uint _subtractedAmount) external returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) external returns (bool);\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOfAt(address _owner, uint _blockNumber) public view returns (uint);\n', '    function totalSupplyAt(uint _blockNumber) public view returns(uint);\n', '    function enableTransfers(bool _transfersEnabled) public returns (bool);\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block) view internal returns (uint);\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal;\n', '    function destroyTokens(address _owner, uint _amount) public returns (bool);\n', '    function _doDestroyTokens(address _owner, uint _amount) internal;\n', '    function closeProject(uint _price) public;\n', '    function getRealty(address _contract, uint _val) public;\n', '    function acceptRequest(address _contract, address _owner) public;\n', '    function cancelRequest(address _contract, address _owner) public;\n', '    function changeTokens() public returns (bool);\n', '    function createOrder(address _contract, uint _amount, uint _price, address _buyer, uint _date) public returns (bool);\n', '    function cancelOrder(address _contract, address _buyer) public returns (bool);\n', '    function min(uint a, uint b) pure internal returns (uint);\n', '    function () payable public;\n', '    function claimTokens(address _token) external;\n', '}\n', '// ------ TTT ----- //\n', '\n', '// ------ USDT ----- //\n', 'contract ERC20Basic {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function transfer(address to, uint value) public;\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint);\n', '    function transferFrom(address from, address to, uint value) public;\n', '    function approve(address spender, uint value) public;\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', 'contract BasicToken is Ownable, ERC20Basic {\n', '    function transfer(address _to, uint _value) public;\n', '    function balanceOf(address _owner) public constant returns (uint balance);\n', '}\n', 'contract StandardToken is BasicToken, ERC20 {\n', '    function transferFrom(address _from, address _to, uint _value) public;\n', '    function approve(address _spender, uint _value) public;\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining);\n', '}\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  function pause() public;\n', '  function unpause() public;\n', '}\n', 'contract BlackList is Ownable, BasicToken {\n', '    function getBlackListStatus(address _maker) external constant returns (bool);\n', '    function getOwner() external constant returns (address);\n', '    function addBlackList (address _evilUser) public;\n', '    function removeBlackList (address _clearedUser) public;\n', '    function destroyBlackFunds (address _blackListedUser) public;\n', '    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\n', '    event AddedBlackList(address _user);\n', '    event RemovedBlackList(address _user);\n', '}\n', 'contract UpgradedStandardToken is StandardToken{\n', '    function transferByLegacy(address from, address to, uint value) public;\n', '    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\n', '    function approveByLegacy(address from, address spender, uint value) public;\n', '}\n', 'contract TetherToken is Pausable, StandardToken, BlackList {\n', '    function transfer(address _to, uint _value) public;\n', '    function transferFrom(address _from, address _to, uint _value) public;\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function approve(address _spender, uint _value) public;\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining);\n', '    function deprecate(address _upgradedAddress) public;\n', '    function totalSupply() public constant returns (uint);\n', '    function issue(uint amount) public;\n', '    function redeem(uint amount) public;\n', '    function setParams(uint newBasisPoints, uint newMaxFee) public;\n', '    event Issue(uint amount);\n', '    event Redeem(uint amount);\n', '    event Deprecate(address newAddress);\n', '    event Params(uint feeBasisPoints, uint maxFee);\n', '}\n', '// ------ USDT ----- //\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = _a * _b;\n', '        require(c / _a == _b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = _a / _b;\n', "        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b <= _a);\n', '        uint256 c = _a - _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        uint256 c = _a + _b;\n', '        require(c >= _a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract TTTExchange {\n', '    using SafeMath for uint;\n', '\n', '    TTTToken public tokenTTT = TTTToken(0xF92d38De8e30151835b9Ebe327E52878b4115CBF);\n', '    TetherToken public tokenUSD = TetherToken(0xdac17f958d2ee523a2206206994597c13d831ec7);\n', '\n', '    address owner;\n', '\n', '    uint priceUSD;\n', '    uint priceETH;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) external onlyOwner {\n', '        require(_newOwner != address(0));\n', '        owner = _newOwner;\n', '    }\n', '\n', '    constructor(uint _priceETH, uint _priceUSD) public {\n', '        owner = msg.sender;\n', '        priceETH = _priceETH;\n', '        priceUSD = _priceUSD;\n', '    }\n', '\n', '    function getInfo(address _address) external view returns(uint PriceETH, uint PriceUSD, uint BalanceTTT, uint Approved, uint toETH, uint toUSD) {\n', '        PriceETH = priceETH;\n', '        PriceUSD = priceUSD;\n', '        BalanceTTT = tokenTTT.balanceOf(_address);\n', '        Approved = tokenTTT.allowance(_address, address(this));\n', '        toETH = Approved * priceETH;\n', '        toUSD = Approved * priceUSD;\n', '    }\n', '\n', '    function amIReady(address _address) external view returns(bool) {\n', '        uint _a = tokenTTT.allowance(_address, address(this));\n', '        if (_a > 0) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function() external payable {\n', '        msg.sender.transfer(msg.value);\n', '        if (uint(bytes(msg.data)[0]) == 1) {\n', '            toETH();\n', '        }\n', '        if (uint(bytes(msg.data)[0]) == 2) {\n', '            toUSD();\n', '        }\n', '    }\n', '\n', '    function setPriceETH(uint _newPriceETH) external onlyOwner {\n', '        require(_newPriceETH != 0);\n', '        priceETH = _newPriceETH;\n', '    }\n', '\n', '    function setPriceUSD(uint _newPriceUSD) external onlyOwner {\n', '        require(_newPriceUSD != 0);\n', '        priceUSD = _newPriceUSD;\n', '    }\n', '\n', '    function toETH() public {\n', '        uint _value = tokenTTT.allowance(msg.sender, address(this));\n', '        if (_value > 0) {\n', '            tokenTTT.transferFrom(msg.sender, owner, _value);\n', '            msg.sender.transfer(_value.mul(priceETH));\n', '        }\n', '    }\n', '\n', '    function toUSD() public {\n', '        uint _value = tokenTTT.allowance(msg.sender, address(this));\n', '        if (_value > 0) {\n', '            tokenTTT.transferFrom(msg.sender, owner, _value);\n', '            tokenUSD.transfer(msg.sender, _value.mul(priceUSD));\n', '        }\n', '    }\n', '\n', '    function getBalance(address _recipient) external onlyOwner {\n', '        uint _balance = tokenTTT.balanceOf(address(this));\n', '        tokenTTT.transfer(_recipient, _balance);\n', '    }\n', '}']
