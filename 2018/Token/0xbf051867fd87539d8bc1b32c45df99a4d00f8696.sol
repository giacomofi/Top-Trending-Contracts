['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(a >= b);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Owned\n', ' * @dev Ownership model\n', ' */\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    event OwnershipTransfered(address indexed owner);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit OwnershipTransfered(owner);\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '        emit OwnershipTransfered(owner);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Token\n', ' * @dev Interface for erc20 standard\n', ' */\n', 'contract ERC20Token {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "Ansforce Intelligence Token";\n', '    string public constant symbol = "AIT";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public totalSupply = 0;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed from, uint256 value, address indexed to, bytes extraData);\n', '\n', '    constructor() public {\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        // Check if the sender has enough balance\n', '        require(balanceOf[from] >= value);\n', '\n', '        // Check for overflow\n', '        require(balanceOf[to] + value > balanceOf[to]);\n', '\n', '        // Save this for an amount double check assertion\n', '        uint256 previousBalances = balanceOf[from].add(balanceOf[to]);\n', '\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '\n', '        emit Transfer(from, to, value);\n', '\n', '        // Asserts for duplicate check. Should never fail.\n', '        assert(balanceOf[from].add(balanceOf[to]) == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `value` tokens to `to` from your account\n', '     *\n', '     * @param to The address of the recipient\n', '     * @param value the amount to send\n', '     */\n', '    function transfer(address to, uint256 value) public {\n', '        _transfer(msg.sender, to, value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `value` tokens to `to` in behalf of `from`\n', '     *\n', '     * @param from The address of the sender\n', '     * @param to The address of the recipient\n', '     * @param value the amount to send\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\n', '        require(value <= allowance[from][msg.sender]);\n', '        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `spender` to spend no more than `value` tokens in your behalf\n', '     *\n', '     * @param spender The address authorized to spend\n', '     * @param value the max amount they can spend\n', '     * @param extraData some extra information to send to the approved contract\n', '     */\n', '    function approve(address spender, uint256 value, bytes extraData) public returns (bool success) {\n', '        allowance[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, value, spender, extraData);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract AnsforceIntelligenceToken is Owned, ERC20Token {\n', '    constructor() public {\n', '    }\n', '    \n', '    function init(uint256 _supply, address _vault) public onlyOwner {\n', '        require(totalSupply == 0);\n', '        require(_supply > 0);\n', '        require(_vault != address(0));\n', '        totalSupply = _supply;\n', '        balanceOf[_vault] = totalSupply;\n', '    }\n', '    \n', '    \n', '    bool public stopped = false;\n', '    \n', '    modifier isRunning {\n', '        require (!stopped);\n', '        _;\n', '    }\n', '    \n', '    function transfer(address to, uint256 value) isRunning public {\n', '        ERC20Token.transfer(to, value);\n', '    }\n', '    \n', '    function stop() public onlyOwner {\n', '        stopped = true;\n', '    }\n', '\n', '    function start() public onlyOwner {\n', '        stopped = false;\n', '    }\n', '    \n', '    \n', '    mapping (address => uint256) public freezeOf;\n', '    \n', '    /* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed target, uint256 value);\n', '\n', '    /* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed target, uint256 value);\n', '    \n', '    function freeze(address target, uint256 _value) public onlyOwner returns (bool success) {\n', '        require( _value > 0 );\n', '        balanceOf[target] = SafeMath.sub(balanceOf[target], _value);\n', '        freezeOf[target] = SafeMath.add(freezeOf[target], _value);\n', '        emit Freeze(target, _value);\n', '        return true;\n', '    }\n', '\n', '    function unfreeze(address target, uint256 _value) public onlyOwner returns (bool success) {\n', '        require( _value > 0 );\n', '        freezeOf[target] = SafeMath.sub(freezeOf[target], _value);\n', '        balanceOf[target] = SafeMath.add(balanceOf[target], _value);\n', '        emit Unfreeze(target, _value);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(a >= b);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Owned\n', ' * @dev Ownership model\n', ' */\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    event OwnershipTransfered(address indexed owner);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit OwnershipTransfered(owner);\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '        emit OwnershipTransfered(owner);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Token\n', ' * @dev Interface for erc20 standard\n', ' */\n', 'contract ERC20Token {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "Ansforce Intelligence Token";\n', '    string public constant symbol = "AIT";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public totalSupply = 0;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed from, uint256 value, address indexed to, bytes extraData);\n', '\n', '    constructor() public {\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        // Check if the sender has enough balance\n', '        require(balanceOf[from] >= value);\n', '\n', '        // Check for overflow\n', '        require(balanceOf[to] + value > balanceOf[to]);\n', '\n', '        // Save this for an amount double check assertion\n', '        uint256 previousBalances = balanceOf[from].add(balanceOf[to]);\n', '\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '\n', '        emit Transfer(from, to, value);\n', '\n', '        // Asserts for duplicate check. Should never fail.\n', '        assert(balanceOf[from].add(balanceOf[to]) == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `value` tokens to `to` from your account\n', '     *\n', '     * @param to The address of the recipient\n', '     * @param value the amount to send\n', '     */\n', '    function transfer(address to, uint256 value) public {\n', '        _transfer(msg.sender, to, value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `value` tokens to `to` in behalf of `from`\n', '     *\n', '     * @param from The address of the sender\n', '     * @param to The address of the recipient\n', '     * @param value the amount to send\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\n', '        require(value <= allowance[from][msg.sender]);\n', '        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `spender` to spend no more than `value` tokens in your behalf\n', '     *\n', '     * @param spender The address authorized to spend\n', '     * @param value the max amount they can spend\n', '     * @param extraData some extra information to send to the approved contract\n', '     */\n', '    function approve(address spender, uint256 value, bytes extraData) public returns (bool success) {\n', '        allowance[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, value, spender, extraData);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract AnsforceIntelligenceToken is Owned, ERC20Token {\n', '    constructor() public {\n', '    }\n', '    \n', '    function init(uint256 _supply, address _vault) public onlyOwner {\n', '        require(totalSupply == 0);\n', '        require(_supply > 0);\n', '        require(_vault != address(0));\n', '        totalSupply = _supply;\n', '        balanceOf[_vault] = totalSupply;\n', '    }\n', '    \n', '    \n', '    bool public stopped = false;\n', '    \n', '    modifier isRunning {\n', '        require (!stopped);\n', '        _;\n', '    }\n', '    \n', '    function transfer(address to, uint256 value) isRunning public {\n', '        ERC20Token.transfer(to, value);\n', '    }\n', '    \n', '    function stop() public onlyOwner {\n', '        stopped = true;\n', '    }\n', '\n', '    function start() public onlyOwner {\n', '        stopped = false;\n', '    }\n', '    \n', '    \n', '    mapping (address => uint256) public freezeOf;\n', '    \n', '    /* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed target, uint256 value);\n', '\n', '    /* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed target, uint256 value);\n', '    \n', '    function freeze(address target, uint256 _value) public onlyOwner returns (bool success) {\n', '        require( _value > 0 );\n', '        balanceOf[target] = SafeMath.sub(balanceOf[target], _value);\n', '        freezeOf[target] = SafeMath.add(freezeOf[target], _value);\n', '        emit Freeze(target, _value);\n', '        return true;\n', '    }\n', '\n', '    function unfreeze(address target, uint256 _value) public onlyOwner returns (bool success) {\n', '        require( _value > 0 );\n', '        freezeOf[target] = SafeMath.sub(freezeOf[target], _value);\n', '        balanceOf[target] = SafeMath.add(balanceOf[target], _value);\n', '        emit Unfreeze(target, _value);\n', '        return true;\n', '    }\n', '}']
