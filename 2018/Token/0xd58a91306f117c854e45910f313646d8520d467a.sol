['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions"\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner\n', '   * @param newOwner The address to transfer ownership to\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/*\n', ' * @title Migration Agent interface\n', ' */\n', 'contract MigrationAgent {\n', '  function migrateFrom(address _from, uint256 _value);\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() constant returns (uint256);\n', '    function balanceOf(address who) constant returns (uint256);\n', '    function transfer(address to, uint256 value);\n', '    function transferFrom(address from, address to, uint256 value);\n', '    function approve(address spender, uint256 value);\n', '    function allowance(address owner, address spender) constant returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract PitEur is Ownable, ERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  uint8 private _decimals = 18;\n', '  uint256 private decimalMultiplier = 10**(uint256(_decimals));\n', '\n', '  string private _name = "PIT-EUR";\n', '  string private _symbol = "PIT-EUR";\n', '  uint256 private _totalSupply = 100000000 * decimalMultiplier;\n', '\n', '  bool public tradable = true;\n', '\n', '  // Wallet Address of Token\n', '  address public multisig;\n', '\n', '  // Function to access name of token\n', '  function name() constant returns (string) {\n', '    return _name;\n', '  }\n', '\n', '  // Function to access symbol of token\n', '  function symbol() constant returns (string) {\n', '    return _symbol;\n', '  }\n', '\n', '  // Function to access decimals of token\n', '  function decimals() constant returns (uint8) {\n', '    return _decimals;\n', '  }\n', '\n', '  // Function to access total supply of tokens\n', '  function totalSupply() constant returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping(address => mapping (address => uint256)) allowed;\n', '  mapping(address => uint256) releaseTimes;\n', '  address public migrationAgent;\n', '  uint256 public totalMigrated;\n', '\n', '  event Migrate(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  // Constructor\n', '  // @notice PitEur Contract\n', '  // @return the transaction address\n', '  function PitEur(address _multisig) {\n', '    require(_multisig != 0x0);\n', '    multisig = _multisig;\n', '    balances[multisig] = _totalSupply;\n', '  }\n', '\n', '  modifier canTrade() {\n', '    require(tradable);\n', '    _;\n', '  }\n', '\n', '  // Standard function transfer similar to ERC20 transfer with no _data\n', '  // Added due to backwards compatibility reasons\n', '  function transfer(address to, uint256 value) canTrade {\n', '    require(!isLocked(msg.sender));\n', '    require (balances[msg.sender] >= value && value > 0);\n', '    balances[msg.sender] = balances[msg.sender].sub(value);\n', '    balances[to] = balances[to].add(value);\n', '    Transfer(msg.sender, to, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address\n', '   * @param who The address to query the the balance of\n', '   * @return An uint256 representing the amount owned by the passed address\n', '   */\n', '  function balanceOf(address who) constant returns (uint256) {\n', '    return balances[who];\n', '  }\n', '\n', ' /**\n', '  * @dev Transfer tokens from one address to another\n', '  * @param from address The address which you want to send tokens from\n', '  * @param to address The address which you want to transfer to\n', '  * @param value uint256 the amount of tokens to be transfered\n', '  */\n', '  function transferFrom(address from, address to, uint256 value) canTrade {\n', '    require(to != 0x0);\n', '    require(!isLocked(from));\n', '    uint256 _allowance = allowed[from][msg.sender];\n', '    require(value > 0 && _allowance >= value);\n', '    balances[from] = balances[from].sub(value);\n', '    balances[to] = balances[to].add(value);\n', '    allowed[from][msg.sender] = _allowance.sub(value);\n', '    Transfer(from, to, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n', '   * @param spender The address which will spend the funds\n', '   * @param value The amount of tokens to be spent\n', '   */\n', '  function approve(address spender, uint256 value) canTrade {\n', '    require((value >= 0) && (allowed[msg.sender][spender] >= 0));\n', '    allowed[msg.sender][spender] = value;\n', '    Approval(msg.sender, spender, value);\n', '  }\n', '\n', '  // Check the allowed value for the spender to withdraw from owner\n', '  // @param owner The address of the owner\n', '  // @param spender The address of the spender\n', '  // @return the amount which spender is still allowed to withdraw from owner\n', '  function allowance(address owner, address spender) constant returns (uint256) {\n', '    return allowed[owner][spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to update tradable status\n', '   * @param _newTradableState New tradable state\n', '   * @return A boolean that indicates if the operation was successful\n', '   */\n', '  function setTradable(bool _newTradableState) onlyOwner public {\n', '    tradable = _newTradableState;\n', '  }\n', '\n', '  /**\n', '   * Function to lock a given address until the specified date\n', '   * @param spender Address to lock\n', '   * @param date A timestamp specifying when the account will be unlocked\n', '   * @return A boolean that indicates if the operation was successful\n', '   */\n', '  function timeLock(address spender, uint256 date) public onlyOwner returns (bool) {\n', '    releaseTimes[spender] = date;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * Function to check if a given address is locked or not\n', '   * @param _spender Address\n', '   * @return A boolean that indicates if the account is locked or not\n', '   */\n', '  function isLocked(address _spender) public view returns (bool) {\n', '    if (releaseTimes[_spender] == 0 || releaseTimes[_spender] <= block.timestamp) {\n', '      return false;\n', '    }\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice Set address of migration target contract and enable migration process\n', '   * @dev Required state: Operational Normal\n', '   * @dev State transition: -> Operational Migration\n', '   * @param _agent The address of the MigrationAgent contract\n', '   */\n', '  function setMigrationAgent(address _agent) external onlyOwner {\n', '    require(migrationAgent == 0x0 && totalMigrated == 0);\n', '    migrationAgent = _agent;\n', '  }\n', '\n', '  /*\n', '   * @notice Migrate tokens to the new token contract.\n', '   * @dev Required state: Operational Migration\n', '   * @param _value The amount of token to be migrated\n', '   */\n', '  function migrate(uint256 value) external {\n', '    require(migrationAgent != 0x0);\n', '    require(value >= 0);\n', '    require(value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] -= value;\n', '    _totalSupply = _totalSupply.sub(value);\n', '    totalMigrated = totalMigrated.add(value);\n', '    MigrationAgent(migrationAgent).migrateFrom(msg.sender, value);\n', '    Migrate(msg.sender, migrationAgent, value);\n', '  }\n', '}']