['pragma solidity ^0.4.23;\n', '// produced by the Solididy File Flattener (c) David Appleton 2018\n', '// contact : <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="03676275664362686c6e61622d606c6e">[email&#160;protected]</a>\n', '// released under Apache 2.0 licence\n', 'contract GoConfig {\n', '    string public constant NAME = "GOeureka";\n', '    string public constant SYMBOL = "GOT";\n', '    uint8 public constant DECIMALS = 18;\n', '    uint public constant DECIMALSFACTOR = 10 ** uint(DECIMALS);\n', '    uint public constant TOTALSUPPLY = 1000000000 * DECIMALSFACTOR;\n', '}\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', 'contract WhiteListedBasic {\n', '    function addWhiteListed(address[] addrs) external;\n', '    function removeWhiteListed(address addr) external;\n', '    function isWhiteListed(address addr) external view returns (bool);\n', '}\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract OperatableBasic {\n', '    function setMinter (address addr) external;\n', '    function setWhiteLister (address addr) external;\n', '}\n', 'contract gotTokenSaleConfig is GoConfig {\n', '    uint public constant MIN_PRESALE = 5 ether;\n', '    uint public constant MIN_PRESALE2 = 1 ether;\n', '    \n', '\n', '    uint public constant VESTING_AMOUNT = 100000000 * DECIMALSFACTOR;\n', '    address public constant VESTING_WALLET = 0x8B6EB396eF85D2a9ADbb79955dEB5d77Ee61Af88;\n', '        \n', '    uint public constant RESERVE_AMOUNT = 300000000 * DECIMALSFACTOR;\n', '    address public constant RESERVE_WALLET = 0x8B6EB396eF85D2a9ADbb79955dEB5d77Ee61Af88;\n', '\n', '    uint public constant PRESALE_START = 1529035246; // Friday, June 15, 2018 12:00:46 PM GMT+08:00\n', '    uint public constant SALE_START = PRESALE_START + 4 weeks;\n', '        \n', '    uint public constant SALE_CAP = 600000000 * DECIMALSFACTOR;\n', '\n', '    address public constant MULTISIG_ETH = RESERVE_WALLET;\n', '\n', '}\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    emit OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', 'contract Operatable is Claimable, OperatableBasic {\n', '    address public minter;\n', '    address public whiteLister;\n', '    address public launcher;\n', '\n', '    event NewMinter(address newMinter);\n', '    event NewWhiteLister(address newwhiteLister);\n', '\n', '    modifier canOperate() {\n', '        require(msg.sender == minter || msg.sender == whiteLister || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        minter = owner;\n', '        whiteLister = owner;\n', '        launcher = owner;\n', '    }\n', '\n', '    function setMinter (address addr) external onlyOwner {\n', '        minter = addr;\n', '        emit NewMinter(minter);\n', '    }\n', '\n', '    function setWhiteLister (address addr) external onlyOwner {\n', '        whiteLister = addr;\n', '        emit NewWhiteLister(whiteLister);\n', '    }\n', '\n', '    modifier ownerOrMinter()  {\n', '        require ((msg.sender == minter) || (msg.sender == owner));\n', '        _;\n', '    }\n', '\n', '    modifier onlyLauncher()  {\n', '        require (msg.sender == launcher);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhiteLister()  {\n', '        require (msg.sender == whiteLister);\n', '        _;\n', '    }\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract Salvageable is Operatable {\n', '    // Salvage other tokens that are accidentally sent into this token\n', '    function emergencyERC20Drain(ERC20 oddToken, uint amount) public onlyLauncher {\n', '        if (address(oddToken) == address(0)) {\n', '            launcher.transfer(amount);\n', '            return;\n', '        }\n', '        oddToken.transfer(launcher, amount);\n', '    }\n', '}\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract GOeureka is  Salvageable, PausableToken, BurnableToken, GoConfig {\n', '    using SafeMath for uint;\n', ' \n', '    string public name = NAME;\n', '    string public symbol = SYMBOL;\n', '    uint8 public decimals = DECIMALS;\n', '    bool public mintingFinished = false;\n', '\n', '    event Mint(address indexed to, uint amount);\n', '    event MintFinished();\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        paused = true;\n', '    }\n', '\n', '    function mint(address _to, uint _amount) ownerOrMinter canMint public returns (bool) {\n', '        require(totalSupply_.add(_amount) <= TOTALSUPPLY);\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function finishMinting() ownerOrMinter canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '\n', '    function sendBatchCS(address[] _recipients, uint[] _values) external ownerOrMinter returns (bool) {\n', '        require(_recipients.length == _values.length);\n', '        uint senderBalance = balances[msg.sender];\n', '        for (uint i = 0; i < _values.length; i++) {\n', '            uint value = _values[i];\n', '            address to = _recipients[i];\n', '            require(senderBalance >= value);        \n', '            senderBalance = senderBalance - value;\n', '            balances[to] += value;\n', '            emit Transfer(msg.sender, to, value);\n', '        }\n', '        balances[msg.sender] = senderBalance;\n', '        return true;\n', '    }\n', '\n', '    // Lifted from ERC827\n', '\n', '      /**\n', '   * @dev Addition to ERC20 token methods. Transfer tokens to a specified\n', '   * @dev address and execute a call with the sent data on the same transaction\n', '   *\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '    function transferAndCall(\n', '        address _to,\n', '        uint256 _value,\n', '        bytes _data\n', '    )\n', '    public\n', '    payable\n', '    whenNotPaused\n', '    returns (bool)\n', '    {\n', '        require(_to != address(this));\n', '\n', '        super.transfer(_to, _value);\n', '\n', '        // solium-disable-next-line security/no-call-value\n', '        require(_to.call.value(msg.value)(_data));\n', '        return true;\n', '    }\n', '\n', '\n', '}\n', '\n', 'contract GOeurekaSale is Claimable, gotTokenSaleConfig, Pausable, Salvageable {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    GOeureka public token;\n', '\n', '    WhiteListedBasic public whiteListed;\n', '\n', '    uint256 public presaleEnd;\n', '    uint256 public saleEnd;\n', '\n', '    // Minimum contribution is now calculated\n', '    uint256 public minContribution;\n', '\n', '    // address where funds are collected\n', '    address public multiSig;\n', '\n', '    // amount of raised funds in wei from private, presale and main sale\n', '    uint256 public weiRaised;\n', '\n', '    // amount of raised tokens\n', '    uint256 public tokensRaised;\n', '\n', '    // number of participants\n', '    mapping(address => uint256) public contributions;\n', '    uint256 public numberOfContributors = 0;\n', '\n', '    //  for rate\n', '    uint public basicRate;\n', ' \n', '    // EVENTS\n', '\n', '    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n', '    event SaleClosed();\n', '    event HardcapReached();\n', '    event NewCapActivated(uint256 newCap);\n', '\n', ' \n', '    // CONSTRUCTOR\n', '\n', '    constructor(GOeureka token_, WhiteListedBasic _whiteListed) public {\n', '\n', '        basicRate = 3000;  // TokensPerEther\n', '        calculateRates();\n', '        \n', '        presaleEnd = 1536508800; //20180910 00:00 +8\n', '        saleEnd = 1543593600; //20181201 00:00 +8\n', '\n', '        multiSig = MULTISIG_ETH;\n', '\n', '        // NOTE - toke\n', '        token = token_;\n', '\n', '        whiteListed = _whiteListed;\n', '    }\n', '\n', '    // This sale contract must be the minter before we mintAllocations or do anything else.\n', '    //\n', '    bool allocated = false;\n', '    function mintAllocations() external onlyOwner {\n', '        require(!allocated);\n', '        allocated = true;\n', '        token.mint(VESTING_WALLET,VESTING_AMOUNT);\n', '        token.mint(RESERVE_WALLET,RESERVE_AMOUNT);\n', '    }\n', '\n', '    function setWallet(address _newWallet) public onlyOwner {\n', '        multiSig = _newWallet;\n', '    } \n', '\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        if (now > saleEnd)\n', '            return true;\n', '        if (tokensRaised >= SALE_CAP)\n', '            return true; // if we reach the tokensForSale\n', '        return false;\n', '    }\n', '\n', '    // Buyer must be whitelisted\n', '    function isWhiteListed(address beneficiary) internal view returns (bool) {\n', '        return whiteListed.isWhiteListed(beneficiary);\n', '    }\n', '\n', '    modifier onlyAuthorised(address beneficiary) {\n', '        require(isWhiteListed(beneficiary),"Not authorised");\n', '        \n', '        require (!hasEnded(),"ended");\n', '        require (multiSig != 0x0,"MultiSig empty");\n', '        require ((msg.value > minContribution) || (tokensRaised.add(getTokens(msg.value)) == SALE_CAP),"Value too small");\n', '        _;\n', '    }\n', '\n', '    function setNewRate(uint newRate) onlyOwner public {\n', '        require(weiRaised == 0);\n', '        require(1000 < newRate && newRate < 10000);\n', '        basicRate = newRate;\n', '        calculateRates();\n', '    }\n', '\n', '    function calculateRates() internal {\n', '        minContribution = uint(100 * DECIMALSFACTOR).div(basicRate);\n', '    }\n', '\n', '\n', '    function getTokens(uint256 amountInWei) \n', '    internal\n', '    view\n', '    returns (uint256 tokens)\n', '    {\n', '        if (now <= presaleEnd) {\n', '            uint theseTokens = amountInWei.mul(basicRate).mul(1125).div(1000);\n', '            require((amountInWei >= 1 ether) || (tokensRaised.add(theseTokens)==SALE_CAP));\n', '            return (theseTokens);\n', '        }\n', '        if (now <= saleEnd) { \n', '            return (amountInWei.mul(basicRate));\n', '        }\n', '        revert();\n', '    }\n', '\n', '  \n', '    // low level token purchase function\n', '    function buyTokens(address beneficiary, uint256 value)\n', '        internal\n', '        onlyAuthorised(beneficiary) \n', '        whenNotPaused\n', '    {\n', '        uint256 newTokens;\n', ' \n', '        newTokens = getTokens(value);\n', '        weiRaised = weiRaised.add(value);\n', '        // if we have bridged two tranches....\n', '        if (contributions[beneficiary] == 0) {\n', '            numberOfContributors++;\n', '        }\n', '        contributions[beneficiary] = contributions[beneficiary].add(value);\n', '        tokensRaised = tokensRaised.add(newTokens);\n', '        token.mint(beneficiary,newTokens);\n', '        emit TokenPurchase(beneficiary, value, newTokens);\n', '        multiSig.transfer(value);\n', '    }\n', '\n', '    function placeTokens(address beneficiary, uint256 tokens) \n', '        public       \n', '        onlyOwner\n', '    {\n', '        require(!hasEnded());\n', '        tokensRaised = tokensRaised.add(tokens);\n', '        token.mint(beneficiary,tokens);\n', '    }\n', '\n', '\n', '    // Complete the sale\n', '    function finishSale() public onlyOwner {\n', '        require(hasEnded());\n', '        token.finishMinting();\n', '        emit SaleClosed();\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function () public payable {\n', '        buyTokens(msg.sender, msg.value);\n', '    }\n', '\n', '}']