['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract GOToken is MintableToken {\t\n', '    \n', '  string public constant name = "GO Token";\n', '   \n', '  string public constant symbol = "2GO";\n', '    \n', '  uint32 public constant decimals = 18;\n', '\n', '  mapping(address => bool) public locked;\n', '\n', '  modifier notLocked() {\n', '    require(msg.sender == owner || (mintingFinished && !locked[msg.sender]));\n', '    _;\n', '  }\n', '\n', '  function lock(address to) public onlyOwner {\n', '    require(!mintingFinished);\n', '    locked[to] = true;\n', '  }\n', '  \n', '  function unlock(address to) public onlyOwner {\n', '    locked[to] = false;\n', '  }\n', '\n', '  function retrieveTokens(address anotherToken) public onlyOwner {\n', '    ERC20 alienToken = ERC20(anotherToken);\n', '    alienToken.transfer(owner, alienToken.balanceOf(this));\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public notLocked returns (bool) {\n', '    return super.transfer(_to, _value); \n', '  }\n', '\n', '  function transferFrom(address from, address to, uint256 value) public notLocked returns (bool) {\n', '    return super.transferFrom(from, to, value); \n', '  }\n', '\n', '}\n', '\n', 'contract CommonCrowdsale is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  uint public constant PERCENT_RATE = 100;\n', '\n', '  uint public price = 5000000000000000000000;\n', '\n', '  uint public minInvestedLimit = 100000000000000000;\n', '\n', '  uint public maxInvestedLimit = 20000000000000000000;\n', '\n', '  uint public hardcap = 114000000000000000000000;\n', '\n', '  uint public start = 1513342800;\n', '\n', '  uint public invested;\n', '  \n', '  uint public extraTokensPercent;\n', '\n', '  address public wallet;\n', '\n', '  address public directMintAgent;\n', '\n', '  address public bountyTokensWallet;\n', '\n', '  address public foundersTokensWallet;\n', '\n', '  uint public bountyTokensPercent = 5;\n', '\n', '  uint public foundersTokensPercent = 15;\n', '  \n', '  uint public index;\n', ' \n', '  bool public isITOFinished;\n', '\n', '  bool public extraTokensTransferred;\n', '  \n', '  address[] public tokenHolders;\n', '  \n', '  mapping (address => uint) public balances;\n', '  \n', '  struct Milestone {\n', '    uint periodInDays;\n', '    uint discount;\n', '  }\n', '\n', '  Milestone[] public milestones;\n', '\n', '  GOToken public token = new GOToken();\n', '\n', '  modifier onlyDirectMintAgentOrOwner() {\n', '    require(directMintAgent == msg.sender || owner == msg.sender);\n', '    _;\n', '  }\n', '\n', '  modifier saleIsOn(uint value) {\n', '    require(value >= minInvestedLimit && now >= start && now < end() && invested < hardcap);\n', '    _;\n', '  }\n', '\n', '  function tokenHoldersCount() public view returns(uint) {\n', '    return tokenHolders.length;\n', '  }\n', '\n', '  function setDirectMintAgent(address newDirectMintAgent) public onlyOwner {\n', '    directMintAgent = newDirectMintAgent;\n', '  }\n', '\n', '  function setHardcap(uint newHardcap) public onlyOwner { \n', '    hardcap = newHardcap;\n', '  }\n', ' \n', '  function setStart(uint newStart) public onlyOwner { \n', '    start = newStart;\n', '  }\n', '\n', '  function setBountyTokensPercent(uint newBountyTokensPercent) public onlyOwner { \n', '    bountyTokensPercent = newBountyTokensPercent;\n', '  }\n', '\n', '  function setFoundersTokensPercent(uint newFoundersTokensPercent) public onlyOwner { \n', '    foundersTokensPercent = newFoundersTokensPercent;\n', '  }\n', '\n', '  function setBountyTokensWallet(address newBountyTokensWallet) public onlyOwner { \n', '    bountyTokensWallet = newBountyTokensWallet;\n', '  }\n', '\n', '  function setFoundersTokensWallet(address newFoundersTokensWallet) public onlyOwner { \n', '    foundersTokensWallet = newFoundersTokensWallet;\n', '  }\n', '\n', '  function setWallet(address newWallet) public onlyOwner { \n', '    wallet = newWallet;\n', '  }\n', '\n', '  function setPrice(uint newPrice) public onlyOwner {\n', '    price = newPrice;\n', '  }\n', '\n', '  function setMaxInvestedLimit(uint naxMinInvestedLimit) public onlyOwner {\n', '    maxInvestedLimit = naxMinInvestedLimit;\n', '  }\n', '\n', '  function setMinInvestedLimit(uint newMinInvestedLimit) public onlyOwner {\n', '    minInvestedLimit = newMinInvestedLimit;\n', '  }\n', ' \n', '  function milestonesCount() public view returns(uint) {\n', '    return milestones.length;\n', '  }\n', '\n', '  function end() public constant returns(uint) {\n', '    uint last = start;\n', '    for (uint i = 0; i < milestones.length; i++) {\n', '      Milestone storage milestone = milestones[i];\n', '      last += milestone.periodInDays * 1 days;\n', '    }\n', '    return last;\n', '  }\n', '\n', '  function addMilestone(uint periodInDays, uint discount) public onlyOwner {\n', '    milestones.push(Milestone(periodInDays, discount));\n', '  }\n', '\n', '  function setExtraTokensPercent(uint newExtraTokensPercent) public onlyOwner {\n', '    extraTokensPercent = newExtraTokensPercent;\n', '  }\n', '\n', '  function payExtraTokens(uint count) public onlyOwner {\n', '    require(isITOFinished && !extraTokensTransferred);\n', '    if(extraTokensPercent == 0) {\n', '      extraTokensTransferred = true;\n', '    } else {\n', '      for(uint i = 0; index < tokenHolders.length && i < count; i++) {\n', '        address tokenHolder = tokenHolders[index];\n', '        uint value = token.balanceOf(tokenHolder);\n', '        if(value != 0) {\n', '          uint targetValue = value.mul(extraTokensPercent).div(PERCENT_RATE);\n', '          token.mint(this, targetValue);\n', '          token.transfer(tokenHolder, targetValue);\n', '        }\n', '        index++;\n', '      }\n', '      if(index == tokenHolders.length) extraTokensTransferred = true;\n', '    }\n', '  }\n', '\n', '  function finishITO() public onlyOwner {\n', '    require(!isITOFinished);\n', '      \n', '    uint extendedTokensPercent = bountyTokensPercent.add(foundersTokensPercent);      \n', '    uint totalSupply = token.totalSupply();\n', '    uint allTokens = totalSupply.mul(PERCENT_RATE).div(PERCENT_RATE.sub(extendedTokensPercent));\n', '\n', '    uint bountyTokens = allTokens.mul(bountyTokensPercent).div(PERCENT_RATE);\n', '    mint(bountyTokensWallet, bountyTokens);\n', '\n', '    uint foundersTokens = allTokens.mul(foundersTokensPercent).div(PERCENT_RATE);\n', '    mint(foundersTokensWallet, foundersTokens);\n', '\n', '    isITOFinished = true;\n', '  }\n', '\n', '  function tokenOperationsFinished() public onlyOwner {\n', '    require(extraTokensTransferred);\n', '    token.finishMinting();\n', '    token.transferOwnership(owner);\n', '  }\n', '\n', '  function getDiscount() public view returns(uint) {\n', '    uint prevTimeLimit = start;\n', '    for (uint i = 0; i < milestones.length; i++) {\n', '      Milestone storage milestone = milestones[i];\n', '      prevTimeLimit += milestone.periodInDays * 1 days;\n', '      if (now < prevTimeLimit)\n', '        return milestone.discount;\n', '    }\n', '    revert();\n', '  }\n', '\n', '  function mint(address to, uint value) internal {\n', '    if(token.balanceOf(to) == 0) tokenHolders.push(to);\n', '    token.mint(to, value);\n', '  }\n', '\n', '  function calculateAndTransferTokens(address to, uint investedInWei) internal {\n', '    invested = invested.add(msg.value);\n', '    uint tokens = investedInWei.mul(price.mul(PERCENT_RATE)).div(PERCENT_RATE.sub(getDiscount())).div(1 ether);\n', '    mint(to, tokens);\n', '    balances[to] = balances[to].add(investedInWei);\n', '    if(balances[to] >= maxInvestedLimit) token.lock(to);\n', '  }\n', '\n', '  function directMint(address to, uint investedWei) public onlyDirectMintAgentOrOwner saleIsOn(investedWei) {\n', '    calculateAndTransferTokens(to, investedWei);\n', '  }\n', '\n', '  function createTokens() public payable saleIsOn(msg.value) {\n', '    require(!isITOFinished);\n', '    wallet.transfer(msg.value);\n', '    calculateAndTransferTokens(msg.sender, msg.value);\n', '  }\n', '\n', '  function() external payable {\n', '    createTokens();\n', '  }\n', '\n', '  function retrieveTokens(address anotherToken) public onlyOwner {\n', '    ERC20 alienToken = ERC20(anotherToken);\n', '    alienToken.transfer(wallet, alienToken.balanceOf(this));\n', '  }\n', '  \n', '  function unlock(address to) public onlyOwner {\n', '    token.unlock(to);\n', '  }\n', '\n', '}\n', '\n', 'contract GOTokenCrowdsale is CommonCrowdsale {\n', '\n', '  function GOTokenCrowdsale() public {\n', '    hardcap = 54000000000000000000000;\n', '    price = 50000000000000000000000;\n', '    start = 1530230400;\n', '    wallet = 0x727436A7E7B836f3AB8d1caF475fAfEaeb25Ff27;\n', '    bountyTokensWallet = 0x38e4f2A7625A391bFE59D6ac74b26D8556d6361E;\n', '    foundersTokensWallet = 0x76A13d4F571107f363FF253E80706DAcE889aDED;\n', '    addMilestone(7, 30);\n', '    addMilestone(21, 15);\n', '    addMilestone(56, 0);\n', '    transferOwnership(0xC4ecaF5986c88C752bf6E73C1b48b251c2125700);\n', '  }\n', '\n', '}']