['contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '\n', '    event OwnerUpdate(address _prevOwner, address _newOwner);\n', '}\n', '\n', '\n', 'contract ERC20TokenInterface {\n', '  function totalSupply() public constant returns (uint256 _totalSupply);\n', '  function balanceOf(address _owner) public constant returns (uint256 balance);\n', '  function transfer(address _to, uint256 _value) public returns (bool success);\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '  function approve(address _spender, uint256 _value) public returns (bool success);\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract KycContract is Owned {\n', '    \n', '    mapping (address => bool) verifiedAddresses;\n', '    \n', '    function isAddressVerified(address _address) public view returns (bool) {\n', '        return verifiedAddresses[_address];\n', '    }\n', '    \n', '    function addAddress(address _newAddress) public onlyOwner {\n', '        require(!verifiedAddresses[_newAddress]);\n', '        \n', '        verifiedAddresses[_newAddress] = true;\n', '    }\n', '    \n', '    function removeAddress(address _oldAddress) public onlyOwner {\n', '        require(verifiedAddresses[_oldAddress]);\n', '        \n', '        verifiedAddresses[_oldAddress] = false;\n', '    }\n', '    \n', '    function batchAddAddresses(address[] _addresses) public onlyOwner {\n', '        for (uint cnt = 0; cnt < _addresses.length; cnt++) {\n', '            assert(!verifiedAddresses[_addresses[cnt]]);\n', '            verifiedAddresses[_addresses[cnt]] = true;\n', '        }\n', '    }\n', '    \n', '    function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) public onlyOwner{\n', '        ERC20TokenInterface(_tokenAddress).transfer(_to, _amount);\n', '    }\n', '    \n', '    function killContract() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '}']