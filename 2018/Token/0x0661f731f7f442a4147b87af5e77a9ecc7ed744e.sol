['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', '* @title Contract that will work with ERC223 tokens.\n', '*/\n', '\n', 'contract ERC223ReceivingContract{\n', '    /**\n', '     * @dev Standard ERC223 function that will handle incoming token transfers.\n', '     *\n', '     * @param _from  Token sender address.\n', '     * @param _value Amount of tokens.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'contract ERC20Basic {\n', '    uint public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function transfer(address to, uint value) public;\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint);\n', '    function transferFrom(address from, address to, uint value) public;\n', '    function approve(address spender, uint value) public;\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint;\n', '\n', '    mapping(address => uint) balances;\n', '\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) public {\n', '        uint codeLength;\n', '        bytes memory empty;\n', '\n', '        assembly {\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        if(codeLength > 0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '    mapping (address => mapping (address => uint)) allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public {\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '        uint codeLength;\n', '        bytes memory empty;\n', '\n', '        assembly {\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '\n', '    function burn(uint _value) public {\n', '        require(_value > 0);\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '\n', '    event Burn(address indexed burner, uint indexed value);\n', '\n', '}\n', '\n', 'contract ETY is BurnableToken {\n', '\n', '    string public name = "Etherty Token";\n', '    string public symbol = "ETY";\n', '    uint public decimals = 18;\n', '    uint constant TOKEN_LIMIT = 240 * 1e6 * 1e18;\n', '\n', '    address public ico;\n', '\n', '    bool public tokensAreFrozen = true;\n', '\n', '    function ETY(address _ico) public {\n', '        ico = _ico;\n', '    }\n', '\n', '    function mint(address _holder, uint _value) external {\n', '        require(msg.sender == ico);\n', '        require(_value != 0);\n', '        require(totalSupply + _value <= TOKEN_LIMIT);\n', '\n', '        balances[_holder] += _value;\n', '        totalSupply += _value;\n', '        emit Transfer(0x0, _holder, _value);\n', '    }\n', '\n', '    function burn(uint _value) public {\n', '        require(msg.sender == ico);\n', '        super.burn(_value);\n', '    }\n', '\n', '    function unfreeze() external {\n', '        require(msg.sender == ico);\n', '        tokensAreFrozen = false;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public {\n', '        require(!tokensAreFrozen);\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) public {\n', '        require(!tokensAreFrozen);\n', '        super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public {\n', '        require(!tokensAreFrozen);\n', '        super.approve(_spender, _value);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', '* @title Contract that will work with ERC223 tokens.\n', '*/\n', '\n', 'contract ERC223ReceivingContract{\n', '    /**\n', '     * @dev Standard ERC223 function that will handle incoming token transfers.\n', '     *\n', '     * @param _from  Token sender address.\n', '     * @param _value Amount of tokens.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'contract ERC20Basic {\n', '    uint public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function transfer(address to, uint value) public;\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint);\n', '    function transferFrom(address from, address to, uint value) public;\n', '    function approve(address spender, uint value) public;\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint;\n', '\n', '    mapping(address => uint) balances;\n', '\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) public {\n', '        uint codeLength;\n', '        bytes memory empty;\n', '\n', '        assembly {\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        if(codeLength > 0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '    mapping (address => mapping (address => uint)) allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public {\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '        uint codeLength;\n', '        bytes memory empty;\n', '\n', '        assembly {\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '\n', '    function burn(uint _value) public {\n', '        require(_value > 0);\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '\n', '    event Burn(address indexed burner, uint indexed value);\n', '\n', '}\n', '\n', 'contract ETY is BurnableToken {\n', '\n', '    string public name = "Etherty Token";\n', '    string public symbol = "ETY";\n', '    uint public decimals = 18;\n', '    uint constant TOKEN_LIMIT = 240 * 1e6 * 1e18;\n', '\n', '    address public ico;\n', '\n', '    bool public tokensAreFrozen = true;\n', '\n', '    function ETY(address _ico) public {\n', '        ico = _ico;\n', '    }\n', '\n', '    function mint(address _holder, uint _value) external {\n', '        require(msg.sender == ico);\n', '        require(_value != 0);\n', '        require(totalSupply + _value <= TOKEN_LIMIT);\n', '\n', '        balances[_holder] += _value;\n', '        totalSupply += _value;\n', '        emit Transfer(0x0, _holder, _value);\n', '    }\n', '\n', '    function burn(uint _value) public {\n', '        require(msg.sender == ico);\n', '        super.burn(_value);\n', '    }\n', '\n', '    function unfreeze() external {\n', '        require(msg.sender == ico);\n', '        tokensAreFrozen = false;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public {\n', '        require(!tokensAreFrozen);\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) public {\n', '        require(!tokensAreFrozen);\n', '        super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public {\n', '        require(!tokensAreFrozen);\n', '        super.approve(_spender, _value);\n', '    }\n', '}']
