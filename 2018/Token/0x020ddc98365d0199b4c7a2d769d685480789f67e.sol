['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title EOSclassic\n', ' */\n', '\n', '// Imports\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Contracts that should not own Ether\n', ' * @author Remco Bloemen <remco@2Ï€.com>\n', ' * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n', ' * in the contract, it will allow the owner to reclaim this ether.\n', ' * @notice Ether can still be sent to this contract by:\n', ' * calling functions labeled `payable`\n', ' * `selfdestruct(contract_address)`\n', ' * mining directly to the contract address\n', ' */\n', 'contract HasNoEther is Ownable {\n', '\n', '  /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '  function HasNoEther() public payable {\n', '    require(msg.value == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Disallows direct send by settings a default function without the `payable` flag.\n', '   */\n', '  function() external {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    // solium-disable-next-line security/no-send\n', '    assert(owner.send(address(this).balance));\n', '  }\n', '}\n', '\n', '\n', '// Contract to help import the original EOS Crowdsale public key\n', 'contract EOSContractInterface\n', '{\n', '    mapping (address => string) public keys;\n', '    function balanceOf( address who ) constant returns (uint value);\n', '}\n', '\n', '// EOSclassic smart contract \n', 'contract EOSclassic is StandardToken, HasNoEther \n', '{\n', '    // Welcome to EOSclassic\n', '    string public constant NAME = "EOSclassic";\n', '    string public constant SYMBOL = "EOSC";\n', '    uint8 public constant DECIMALS = 18;\n', '\n', '    // Total amount minted\n', '    uint public constant TOTAL_SUPPLY = 1000000000 * (10 ** uint(DECIMALS));\n', '    \n', '    // Amount given to founders\n', '    uint public constant foundersAllocation = 100000000 * (10 ** uint(DECIMALS));   \n', '\n', '    // Contract address of the original EOS contracts    \n', '    address public constant eosTokenAddress = 0x86Fa049857E0209aa7D9e616F7eb3b3B78ECfdb0;\n', '    address public constant eosCrowdsaleAddress = 0xd0a6E6C54DbC68Db5db3A091B171A77407Ff7ccf;\n', '    \n', '    // Map EOS keys; if not empty it should be favored over the original crowdsale address\n', '    mapping (address => string) public keys;\n', '    \n', '    // Keep track of EOS->EOSclassic claims\n', '    mapping (address => bool) public eosClassicClaimed;\n', '\n', '    // LogClaim is called any time an EOS crowdsale user claims their EOSclassic equivalent\n', '    event LogClaim (address user, uint amount);\n', '\n', '    // LogRegister is called any time a user registers a new EOS public key\n', '    event LogRegister (address user, string key);\n', '\n', '    // ************************************************************\n', '    // Constructor; mints all tokens, assigns founder&#39;s allocation\n', '    // ************************************************************\n', '    constructor() public \n', '    {\n', '        // Define total supply\n', '        totalSupply_ = TOTAL_SUPPLY;\n', '        // Allocate total supply of tokens to smart contract for disbursement\n', '        balances[address(this)] = TOTAL_SUPPLY;\n', '        // Announce initial allocation\n', '        emit Transfer(0x0, address(this), TOTAL_SUPPLY);\n', '        \n', '        // Transfer founder&#39;s allocation\n', '        balances[address(this)] = balances[address(this)].sub(foundersAllocation);\n', '        balances[msg.sender] = balances[msg.sender].add(foundersAllocation);\n', '        // Announce founder&#39;s allocation\n', '        emit Transfer(address(this), msg.sender, foundersAllocation);\n', '    }\n', '\n', '    // Function that checks the original EOS token for a balance\n', '    function queryEOSTokenBalance(address _address) view public returns (uint) \n', '    {\n', '        //return ERC20Basic(eosCrowdsaleAddress).balanceOf(_address);\n', '        EOSContractInterface eosTokenContract = EOSContractInterface(eosTokenAddress);\n', '        return eosTokenContract.balanceOf(_address);\n', '    }\n', '\n', '    // Function that returns any registered EOS address from the original EOS crowdsale\n', '    function queryEOSCrowdsaleKey(address _address) view public returns (string) \n', '    {\n', '        EOSContractInterface eosCrowdsaleContract = EOSContractInterface(eosCrowdsaleAddress);\n', '        return eosCrowdsaleContract.keys(_address);\n', '    }\n', '\n', '    // Use to claim EOS Classic from the calling address\n', '    function claimEOSclassic() external returns (bool) \n', '    {\n', '        return claimEOSclassicFor(msg.sender);\n', '    }\n', '\n', '    // Use to claim EOSclassic for any Ethereum address \n', '    function claimEOSclassicFor(address _toAddress) public returns (bool)\n', '    {\n', '        // Ensure that an address has been passed\n', '        require (_toAddress != address(0));\n', '        // Ensure this address has not already been claimed\n', '        require (isClaimed(_toAddress) == false);\n', '        \n', '        // Query the original EOS Crowdsale for address balance\n', '        uint _eosContractBalance = queryEOSTokenBalance(_toAddress);\n', '        \n', '        // Ensure that address had some balance in the crowdsale\n', '        require (_eosContractBalance > 0);\n', '        \n', '        // Sanity check: ensure we have enough tokens to send\n', '        require (_eosContractBalance <= balances[address(this)]);\n', '\n', '        // Mark address as claimed\n', '        eosClassicClaimed[_toAddress] = true;\n', '        \n', '        // Convert equivalent amount of EOS to EOSclassic\n', '        // Transfer EOS Classic tokens from this contract to claiming address\n', '        balances[address(this)] = balances[address(this)].sub(_eosContractBalance);\n', '        balances[_toAddress] = balances[_toAddress].add(_eosContractBalance);\n', '        \n', '        // Broadcast transfer \n', '        emit Transfer(address(this), _toAddress, _eosContractBalance);\n', '        \n', '        // Broadcast claim\n', '        emit LogClaim(_toAddress, _eosContractBalance);\n', '        \n', '        // Success!\n', '        return true;\n', '    }\n', '\n', '    // Check any address to see if its EOSclassic has already been claimed\n', '    function isClaimed(address _address) public view returns (bool) \n', '    {\n', '        return eosClassicClaimed[_address];\n', '    }\n', '\n', '    // Returns the latest EOS key registered.\n', '    // EOS token holders that never registered their EOS public key \n', '    // can do so using the &#39;register&#39; function in EOSclassic and then request restitution \n', '    // via the EOS mainnet arbitration process.\n', '    // EOS holders that previously registered can update their keys here;\n', '    // This contract could be used in future key snapshots for future EOS forks.\n', '    function getMyEOSKey() external view returns (string)\n', '    {\n', '        return getEOSKeyFor(msg.sender);\n', '    }\n', '\n', '    // Return the registered EOS public key for the passed address\n', '    function getEOSKeyFor(address _address) public view returns (string)\n', '    {\n', '        string memory _eosKey;\n', '\n', '        // Get any key registered with EOSclassic\n', '        _eosKey = keys[_address];\n', '\n', '        if (bytes(_eosKey).length > 0) {\n', '            // EOSclassic key was registered; return this over the original crowdsale address\n', '            return _eosKey;\n', '        } else {\n', '            // EOSclassic doesn&#39;t have an EOS public key registered; return any original crowdsale key\n', '            _eosKey = queryEOSCrowdsaleKey(_address);\n', '            return _eosKey;\n', '        }\n', '    }\n', '\n', '    // EOSclassic developer&#39;s note: the registration function is identical\n', '    // to the original EOS crowdsale registration function with only the\n', '    // freeze function removed, and &#39;emit&#39; added to the LogRegister event,\n', '    // per updated Solidity standards.\n', '    //\n', '    // Value should be a public key.  Read full key import policy.\n', '    // Manually registering requires a base58\n', '    // encoded using the STEEM, BTS, or EOS public key format.\n', '    function register(string key) public {\n', '        assert(bytes(key).length <= 64);\n', '\n', '        keys[msg.sender] = key;\n', '\n', '        emit LogRegister(msg.sender, key);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title EOSclassic\n', ' */\n', '\n', '// Imports\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Contracts that should not own Ether\n', ' * @author Remco Bloemen <remco@2Ï€.com>\n', ' * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n', ' * in the contract, it will allow the owner to reclaim this ether.\n', ' * @notice Ether can still be sent to this contract by:\n', ' * calling functions labeled `payable`\n', ' * `selfdestruct(contract_address)`\n', ' * mining directly to the contract address\n', ' */\n', 'contract HasNoEther is Ownable {\n', '\n', '  /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '  function HasNoEther() public payable {\n', '    require(msg.value == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Disallows direct send by settings a default function without the `payable` flag.\n', '   */\n', '  function() external {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    // solium-disable-next-line security/no-send\n', '    assert(owner.send(address(this).balance));\n', '  }\n', '}\n', '\n', '\n', '// Contract to help import the original EOS Crowdsale public key\n', 'contract EOSContractInterface\n', '{\n', '    mapping (address => string) public keys;\n', '    function balanceOf( address who ) constant returns (uint value);\n', '}\n', '\n', '// EOSclassic smart contract \n', 'contract EOSclassic is StandardToken, HasNoEther \n', '{\n', '    // Welcome to EOSclassic\n', '    string public constant NAME = "EOSclassic";\n', '    string public constant SYMBOL = "EOSC";\n', '    uint8 public constant DECIMALS = 18;\n', '\n', '    // Total amount minted\n', '    uint public constant TOTAL_SUPPLY = 1000000000 * (10 ** uint(DECIMALS));\n', '    \n', '    // Amount given to founders\n', '    uint public constant foundersAllocation = 100000000 * (10 ** uint(DECIMALS));   \n', '\n', '    // Contract address of the original EOS contracts    \n', '    address public constant eosTokenAddress = 0x86Fa049857E0209aa7D9e616F7eb3b3B78ECfdb0;\n', '    address public constant eosCrowdsaleAddress = 0xd0a6E6C54DbC68Db5db3A091B171A77407Ff7ccf;\n', '    \n', '    // Map EOS keys; if not empty it should be favored over the original crowdsale address\n', '    mapping (address => string) public keys;\n', '    \n', '    // Keep track of EOS->EOSclassic claims\n', '    mapping (address => bool) public eosClassicClaimed;\n', '\n', '    // LogClaim is called any time an EOS crowdsale user claims their EOSclassic equivalent\n', '    event LogClaim (address user, uint amount);\n', '\n', '    // LogRegister is called any time a user registers a new EOS public key\n', '    event LogRegister (address user, string key);\n', '\n', '    // ************************************************************\n', "    // Constructor; mints all tokens, assigns founder's allocation\n", '    // ************************************************************\n', '    constructor() public \n', '    {\n', '        // Define total supply\n', '        totalSupply_ = TOTAL_SUPPLY;\n', '        // Allocate total supply of tokens to smart contract for disbursement\n', '        balances[address(this)] = TOTAL_SUPPLY;\n', '        // Announce initial allocation\n', '        emit Transfer(0x0, address(this), TOTAL_SUPPLY);\n', '        \n', "        // Transfer founder's allocation\n", '        balances[address(this)] = balances[address(this)].sub(foundersAllocation);\n', '        balances[msg.sender] = balances[msg.sender].add(foundersAllocation);\n', "        // Announce founder's allocation\n", '        emit Transfer(address(this), msg.sender, foundersAllocation);\n', '    }\n', '\n', '    // Function that checks the original EOS token for a balance\n', '    function queryEOSTokenBalance(address _address) view public returns (uint) \n', '    {\n', '        //return ERC20Basic(eosCrowdsaleAddress).balanceOf(_address);\n', '        EOSContractInterface eosTokenContract = EOSContractInterface(eosTokenAddress);\n', '        return eosTokenContract.balanceOf(_address);\n', '    }\n', '\n', '    // Function that returns any registered EOS address from the original EOS crowdsale\n', '    function queryEOSCrowdsaleKey(address _address) view public returns (string) \n', '    {\n', '        EOSContractInterface eosCrowdsaleContract = EOSContractInterface(eosCrowdsaleAddress);\n', '        return eosCrowdsaleContract.keys(_address);\n', '    }\n', '\n', '    // Use to claim EOS Classic from the calling address\n', '    function claimEOSclassic() external returns (bool) \n', '    {\n', '        return claimEOSclassicFor(msg.sender);\n', '    }\n', '\n', '    // Use to claim EOSclassic for any Ethereum address \n', '    function claimEOSclassicFor(address _toAddress) public returns (bool)\n', '    {\n', '        // Ensure that an address has been passed\n', '        require (_toAddress != address(0));\n', '        // Ensure this address has not already been claimed\n', '        require (isClaimed(_toAddress) == false);\n', '        \n', '        // Query the original EOS Crowdsale for address balance\n', '        uint _eosContractBalance = queryEOSTokenBalance(_toAddress);\n', '        \n', '        // Ensure that address had some balance in the crowdsale\n', '        require (_eosContractBalance > 0);\n', '        \n', '        // Sanity check: ensure we have enough tokens to send\n', '        require (_eosContractBalance <= balances[address(this)]);\n', '\n', '        // Mark address as claimed\n', '        eosClassicClaimed[_toAddress] = true;\n', '        \n', '        // Convert equivalent amount of EOS to EOSclassic\n', '        // Transfer EOS Classic tokens from this contract to claiming address\n', '        balances[address(this)] = balances[address(this)].sub(_eosContractBalance);\n', '        balances[_toAddress] = balances[_toAddress].add(_eosContractBalance);\n', '        \n', '        // Broadcast transfer \n', '        emit Transfer(address(this), _toAddress, _eosContractBalance);\n', '        \n', '        // Broadcast claim\n', '        emit LogClaim(_toAddress, _eosContractBalance);\n', '        \n', '        // Success!\n', '        return true;\n', '    }\n', '\n', '    // Check any address to see if its EOSclassic has already been claimed\n', '    function isClaimed(address _address) public view returns (bool) \n', '    {\n', '        return eosClassicClaimed[_address];\n', '    }\n', '\n', '    // Returns the latest EOS key registered.\n', '    // EOS token holders that never registered their EOS public key \n', "    // can do so using the 'register' function in EOSclassic and then request restitution \n", '    // via the EOS mainnet arbitration process.\n', '    // EOS holders that previously registered can update their keys here;\n', '    // This contract could be used in future key snapshots for future EOS forks.\n', '    function getMyEOSKey() external view returns (string)\n', '    {\n', '        return getEOSKeyFor(msg.sender);\n', '    }\n', '\n', '    // Return the registered EOS public key for the passed address\n', '    function getEOSKeyFor(address _address) public view returns (string)\n', '    {\n', '        string memory _eosKey;\n', '\n', '        // Get any key registered with EOSclassic\n', '        _eosKey = keys[_address];\n', '\n', '        if (bytes(_eosKey).length > 0) {\n', '            // EOSclassic key was registered; return this over the original crowdsale address\n', '            return _eosKey;\n', '        } else {\n', "            // EOSclassic doesn't have an EOS public key registered; return any original crowdsale key\n", '            _eosKey = queryEOSCrowdsaleKey(_address);\n', '            return _eosKey;\n', '        }\n', '    }\n', '\n', "    // EOSclassic developer's note: the registration function is identical\n", '    // to the original EOS crowdsale registration function with only the\n', "    // freeze function removed, and 'emit' added to the LogRegister event,\n", '    // per updated Solidity standards.\n', '    //\n', '    // Value should be a public key.  Read full key import policy.\n', '    // Manually registering requires a base58\n', '    // encoded using the STEEM, BTS, or EOS public key format.\n', '    function register(string key) public {\n', '        assert(bytes(key).length <= 64);\n', '\n', '        keys[msg.sender] = key;\n', '\n', '        emit LogRegister(msg.sender, key);\n', '    }\n', '\n', '}']
