['pragma solidity ^0.4.21;\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Bitway is ERC20 {\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    string public constant name = "Bitway";\n', '    string public constant symbol = "BTWN";\n', '    uint256 public constant maxSupply = 21 * million * multiplier;\n', '    uint256 public constant RATE = 1000;\n', '    uint256 public constant decimals = 18;\n', '    uint256 constant multiplier = 10 ** decimals;\n', '    uint256 constant million = 10 ** 6;\n', '    uint256 constant preSupply = 1 * million * multiplier;\n', '    uint256 constant softCap = 2 * million * multiplier;\n', '    uint256 constant bonusMiddleCriteria = 2 ether;\n', '    uint256 constant bonusHighCriteria = 10 ether;\n', '    uint256 constant stageTotal = 3;\n', '\n', '    uint256[stageTotal] targetSupply = [\n', '        1 * million * multiplier + preSupply,\n', '        10 * million * multiplier + preSupply,\n', '        20 * million * multiplier + preSupply\n', '    ];\n', '\n', '    uint8[stageTotal * 3] bonus = [\n', '        30, 40, 50,\n', '        20, 30, 40,\n', '        10, 20, 30\n', '    ];\n', '    \n', '    uint256 public totalSupply = 0;\n', '    uint256 stage = 0;\n', '    address public owner;\n', '    bool public paused = true;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    function () public payable {\n', '        createCoins();\n', '    }\n', '\n', '    function Bitway() public {\n', '        owner = msg.sender;\n', '        mineCoins(preSupply);\n', '    }\n', '\n', '    function currentStage() public constant returns (uint256) {\n', '        return stage + 1;\n', '    }\n', '\n', '    function softCapReached() public constant returns (bool) {\n', '        return totalSupply >= softCap;\n', '    }\n', '\n', '    function hardCapReached() public constant returns (bool) {\n', '        return stage >= stageTotal;\n', '    }\n', '\n', '    function createCoins() public payable {\n', '        require(msg.value > 0);\n', '        require(!paused);\n', '        require(totalSupply < maxSupply);\n', '        mineCoins(msg.value.mul(RATE + bonusPercent() * RATE / 100));\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '    function setPause(bool _paused) public {\n', '        require(msg.sender == owner);\n', '        paused = _paused;\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(allowed[_from][msg.sender] >= _value);\n', '        require(balances[_from] >= _value);\n', '        require(_value > 0);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function mineCoins(uint256 coins) internal {\n', '        require(!hardCapReached());\n', '        balances[msg.sender] = balances[msg.sender].add(coins);\n', '        totalSupply = totalSupply.add(coins);\n', '        if (totalSupply >= targetSupply[stage]) {\n', '            stage = stage.add(1);\n', '        }\n', '    }\n', '\n', '    function bonusPercent() internal constant returns (uint8) {\n', '        if (msg.value > bonusHighCriteria) {\n', '            return bonus[stage * stageTotal + 2];\n', '        } else if (msg.value > bonusMiddleCriteria) {\n', '            return bonus[stage * stageTotal + 1];\n', '        } else {\n', '            return bonus[stage * stageTotal];\n', '        }\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Bitway is ERC20 {\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    string public constant name = "Bitway";\n', '    string public constant symbol = "BTWN";\n', '    uint256 public constant maxSupply = 21 * million * multiplier;\n', '    uint256 public constant RATE = 1000;\n', '    uint256 public constant decimals = 18;\n', '    uint256 constant multiplier = 10 ** decimals;\n', '    uint256 constant million = 10 ** 6;\n', '    uint256 constant preSupply = 1 * million * multiplier;\n', '    uint256 constant softCap = 2 * million * multiplier;\n', '    uint256 constant bonusMiddleCriteria = 2 ether;\n', '    uint256 constant bonusHighCriteria = 10 ether;\n', '    uint256 constant stageTotal = 3;\n', '\n', '    uint256[stageTotal] targetSupply = [\n', '        1 * million * multiplier + preSupply,\n', '        10 * million * multiplier + preSupply,\n', '        20 * million * multiplier + preSupply\n', '    ];\n', '\n', '    uint8[stageTotal * 3] bonus = [\n', '        30, 40, 50,\n', '        20, 30, 40,\n', '        10, 20, 30\n', '    ];\n', '    \n', '    uint256 public totalSupply = 0;\n', '    uint256 stage = 0;\n', '    address public owner;\n', '    bool public paused = true;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    function () public payable {\n', '        createCoins();\n', '    }\n', '\n', '    function Bitway() public {\n', '        owner = msg.sender;\n', '        mineCoins(preSupply);\n', '    }\n', '\n', '    function currentStage() public constant returns (uint256) {\n', '        return stage + 1;\n', '    }\n', '\n', '    function softCapReached() public constant returns (bool) {\n', '        return totalSupply >= softCap;\n', '    }\n', '\n', '    function hardCapReached() public constant returns (bool) {\n', '        return stage >= stageTotal;\n', '    }\n', '\n', '    function createCoins() public payable {\n', '        require(msg.value > 0);\n', '        require(!paused);\n', '        require(totalSupply < maxSupply);\n', '        mineCoins(msg.value.mul(RATE + bonusPercent() * RATE / 100));\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '    function setPause(bool _paused) public {\n', '        require(msg.sender == owner);\n', '        paused = _paused;\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(allowed[_from][msg.sender] >= _value);\n', '        require(balances[_from] >= _value);\n', '        require(_value > 0);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function mineCoins(uint256 coins) internal {\n', '        require(!hardCapReached());\n', '        balances[msg.sender] = balances[msg.sender].add(coins);\n', '        totalSupply = totalSupply.add(coins);\n', '        if (totalSupply >= targetSupply[stage]) {\n', '            stage = stage.add(1);\n', '        }\n', '    }\n', '\n', '    function bonusPercent() internal constant returns (uint8) {\n', '        if (msg.value > bonusHighCriteria) {\n', '            return bonus[stage * stageTotal + 2];\n', '        } else if (msg.value > bonusMiddleCriteria) {\n', '            return bonus[stage * stageTotal + 1];\n', '        } else {\n', '            return bonus[stage * stageTotal];\n', '        }\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}']
