['pragma solidity ^0.4.18;\n', '\n', 'contract EIP20Interface {\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn(address indexed _from, uint256 _value);\n', '    event FrozenFunds(address target, bool frozen);\n', '}\n', '\n', 'contract TokenContract is EIP20Interface {\n', '    \n', '    uint256 constant MAX_UINT256 = 2**256 - 1;\n', '    address public owner;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function () payable public {\n', '    }\n', '\n', '    uint256 public totalSupply;\n', '    string public name;\n', '    uint8 public decimals = 18;\n', '    string public symbol;\n', '\n', '    function TokenContract(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '        ) public {\n', '        owner = msg.sender;   \n', '        balances[msg.sender] = _initialAmount;\n', '        totalSupply = _initialAmount;\n', '        name = _tokenName;\n', '        decimals = _decimalUnits;\n', '        symbol = _tokenSymbol;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(!frozen[msg.sender]);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(!frozen[msg.sender]);\n', '        require(!frozen[_from]);\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) view public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(!frozen[msg.sender]);\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(!frozen[msg.sender]);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner { \n', '        owner = _newOwner; \n', '    }\n', '\n', '    function withdraw() public onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function mintToken(address _target, uint256 _amount) public onlyOwner {\n', '        balances[_target] += _amount;\n', '        totalSupply += _amount;\n', '        Transfer(0, owner, _amount);\n', '        if (_target != owner) {\n', '            Transfer(owner, _target, _amount);\n', '        }\n', '    }\n', '\n', '    function freezeAccount(address _target, bool _freeze) public onlyOwner {\n', '        frozen[_target] = _freeze;\n', '        FrozenFunds(_target, _freeze);\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping (address => bool) frozen;\n', '}']