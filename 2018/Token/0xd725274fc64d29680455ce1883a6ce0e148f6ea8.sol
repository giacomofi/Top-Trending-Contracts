['pragma solidity ^0.4.18;\n', 'library SafeMath {\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = _a * _b;\n', '    require(c / _a == _b);\n', '\n', '    return c;\n', '  }\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b <= _a);\n', '    uint256 c = _a - _b;\n', '\n', '    return c;\n', '  }\n', '\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    uint256 c = _a + _b;\n', '    require(c >= _a);\n', '\n', '    return c;\n', '  }\n', '\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/*\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '/*\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC223 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/223\n', ' */\n', 'contract ERC223 is ERC20 {\n', '    function transfer(address to, uint256 value, bytes data) public returns (bool ok);\n', '\n', '    function transferFrom(address from, address to, uint256 value, bytes data) public returns (bool ok);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value, bytes indexed data);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '  }\n', '\n', '\n', 'contract BurnableToken is BasicToken, Ownable {\n', '\n', '      event Burn(address indexed burner, uint256 value);\n', '\n', '\n', '      function burn(uint256 _value)  public onlyOwner{\n', '          require(_value <= balances[msg.sender]);\n', '          // no need to require value <= totalSupply, since that would imply the\n', '          // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '          address burner = msg.sender;\n', '          balances[burner] = balances[burner].sub(_value);\n', '          totalSupply_ = totalSupply_.sub(_value);\n', '          emit Burn(burner, _value);\n', '      }\n', '}\n', '\n', 'contract FrozenToken is Ownable {\n', '      mapping(address => bool) public frozenAccount;\n', '\n', '      event FrozenFunds(address target, bool frozen);\n', '\n', '      function freezeAccount(address target, bool freeze) public onlyOwner {\n', '          frozenAccount[target] = freeze;\n', '          emit FrozenFunds(target, freeze);\n', '      }\n', '\n', '      modifier requireNotFrozen(address from){\n', '          require(!frozenAccount[from]);\n', '          _;\n', '      }\n', '}\n', '\n', '\n', 'contract ERC223Receiver {\n', '      function tokenFallback(address _from, uint256 _value, bytes _data) public returns (bool ok);\n', '  }\n', '\n', 'contract Standard223Token is ERC223, StandardToken {\n', '    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success) {\n', '        require(super.transfer(_to, _value));\n', '        if (isContract(_to)) return contractFallback(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool success) {\n', '        require(super.transferFrom(_from, _to, _value));\n', '        if (isContract(_to)) return contractFallback(_from, _to, _value, _data);\n', '        return true;\n', '    }\n', '\n', '    function contractFallback(address _from, address _to, uint256 _value, bytes _data) private returns (bool success) {\n', '        ERC223Receiver receiver = ERC223Receiver(_to);\n', '        return receiver.tokenFallback(_from, _value, _data);\n', '    }\n', '\n', '    function isContract(address _addr) internal view returns (bool is_contract) {\n', '        uint256 length;\n', '        assembly {length := extcodesize(_addr)}\n', '        return length > 0;\n', '    }\n', '}\n', '\n', '/**\n', ' * ERC20 token\n', ' * DIO\n', ' */\n', 'contract DistributedInvestmentOperationPlatformToken is Pausable, BurnableToken, Standard223Token, FrozenToken {\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint256 public decimals;\n', '\n', '\n', '    constructor (uint256 _initialSupply, string _name, string _symbol, uint256 _decimals) public {\n', '        totalSupply_ = _initialSupply;\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        balances[msg.sender] = _initialSupply;\n', '        emit Transfer(0x0, msg.sender, _initialSupply);\n', '\n', '}\n', '    function transfer(address _to, uint256 _value) public whenNotPaused requireNotFrozen(msg.sender) requireNotFrozen(_to) returns (bool) {\n', '        return transfer(_to, _value, new bytes(0));\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused requireNotFrozen(msg.sender) requireNotFrozen(_from) requireNotFrozen(_to) returns (bool) {\n', '        return transferFrom(_from, _to, _value, new bytes(0));\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused requireNotFrozen(msg.sender) requireNotFrozen(_spender) returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    //ERC223\n', '    function transfer(address _to, uint256 _value, bytes _data) public whenNotPaused requireNotFrozen(msg.sender) requireNotFrozen(_to) returns (bool success) {\n', '        return super.transfer(_to, _value, _data);\n', '    }\n', '    //ERC223\n', '    function transferFrom(address _from, address _to, uint256 _value, bytes _data) public whenNotPaused requireNotFrozen(msg.sender) requireNotFrozen(_from) requireNotFrozen(_to) returns (bool success) {\n', '        return super.transferFrom(_from, _to, _value, _data);\n', '    }\n', '}']