['/*! zam.sol | (c) 2018 Develop by BelovITLab LLC (smartcontract.ru), author @stupidlovejoy | License: MIT */\n', '\n', '\n', 'pragma solidity 0.4.24;\n', '\t\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '\t/**\n', '\t* @dev Multiplies two numbers, throws on overflow.\n', '\t*/\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\t// Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '\t\t// benefit is lost if &#39;b&#39; is also tested.\n', '\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\n', '\t\tc = a * b;\n', '\t\tassert(c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Integer division of two numbers, truncating the quotient.\n', '\t*/\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n', '\t\t// uint256 c = a / b;\n', '\t\t// assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\t\treturn a / b;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '\t*/\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Adds two numbers, throws on overflow.\n', '\t*/\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\tc = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\taddress public owner;\n', '\n', '\n', '\tevent OwnershipRenounced(address indexed previousOwner);\n', '\tevent OwnershipTransferred(\n', '\t\taddress indexed previousOwner,\n', '\t\taddress indexed newOwner\n', '\t);\n', '\n', '\n', '\t/**\n', '\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '\t * account.\n', '\t */\n', '\tconstructor() public {\n', '\t\towner = msg.sender;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Throws if called by any account other than the owner.\n', '\t */\n', '\tmodifier onlyOwner() {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Allows the current owner to relinquish control of the contract.\n', '\t * @notice Renouncing to ownership will leave the contract without an owner.\n', '\t * It will not be possible to call the functions with the `onlyOwner`\n', '\t * modifier anymore.\n', '\t */\n', '\tfunction renounceOwnership() public onlyOwner {\n', '\t\temit OwnershipRenounced(owner);\n', '\t\towner = address(0);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '\t * @param _newOwner The address to transfer ownership to.\n', '\t */\n', '\tfunction transferOwnership(address _newOwner) public onlyOwner {\n', '\t\t_transferOwnership(_newOwner);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Transfers control of the contract to a newOwner.\n', '\t * @param _newOwner The address to transfer ownership to.\n', '\t */\n', '\tfunction _transferOwnership(address _newOwner) internal {\n', '\t\trequire(_newOwner != address(0));\n', '\t\temit OwnershipTransferred(owner, _newOwner);\n', '\t\towner = _newOwner;\n', '\t}\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '\tevent Pause();\n', '\tevent Unpause();\n', '\n', '\tbool public paused = false;\n', '\n', '\n', '\t/**\n', '\t * @dev Modifier to make a function callable only when the contract is not paused.\n', '\t */\n', '\tmodifier whenNotPaused() {\n', '\t\trequire(!paused);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Modifier to make a function callable only when the contract is paused.\n', '\t */\n', '\tmodifier whenPaused() {\n', '\t\trequire(paused);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev called by the owner to pause, triggers stopped state\n', '\t */\n', '\tfunction pause() onlyOwner whenNotPaused public {\n', '\t\tpaused = true;\n', '\t\temit Pause();\n', '\t}\n', '\n', '\t/**\n', '\t * @dev called by the owner to unpause, returns to normal state\n', '\t */\n', '\tfunction unpause() onlyOwner whenPaused public {\n', '\t\tpaused = false;\n', '\t\temit Unpause();\n', '\t}\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '\tfunction totalSupply() public view returns (uint256);\n', '\tfunction balanceOf(address who) public view returns (uint256);\n', '\tfunction transfer(address to, uint256 value) public returns (bool);\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '\tfunction allowance(address owner, address spender)\n', '\t\tpublic view returns (uint256);\n', '\n', '\tfunction transferFrom(address from, address to, uint256 value)\n', '\t\tpublic returns (bool);\n', '\n', '\tfunction approve(address spender, uint256 value) public returns (bool);\n', '\tevent Approval(\n', '\t\taddress indexed owner,\n', '\t\taddress indexed spender,\n', '\t\tuint256 value\n', '\t);\n', '}\n', '\n', '\n', '/**\n', ' * @title DetailedERC20 token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '\tusing SafeMath for uint256;\n', '\n', '\tmapping(address => uint256) balances;\n', '\n', '\tuint256 totalSupply_;\n', '\n', '\t/**\n', '\t* @dev Total number of tokens in existence\n', '\t*/\n', '\tfunction totalSupply() public view returns (uint256) {\n', '\t\treturn totalSupply_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Transfer token for a specified address\n', '\t* @param _to The address to transfer to.\n', '\t* @param _value The amount to be transferred.\n', '\t*/\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[msg.sender]);\n', '\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\temit Transfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Gets the balance of the specified address.\n', '\t* @param _owner The address to query the the balance of.\n', '\t* @return An uint256 representing the amount owned by the passed address.\n', '\t*/\n', '\tfunction balanceOf(address _owner) public view returns (uint256) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '\tmapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '\t/**\n', '\t * @dev Transfer tokens from one address to another\n', '\t * @param _from address The address which you want to send tokens from\n', '\t * @param _to address The address which you want to transfer to\n', '\t * @param _value uint256 the amount of tokens to be transferred\n', '\t */\n', '\tfunction transferFrom(\n', '\t\taddress _from,\n', '\t\taddress _to,\n', '\t\tuint256 _value\n', '\t)\n', '\t\tpublic\n', '\t\treturns (bool)\n', '\t{\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[_from]);\n', '\t\trequire(_value <= allowed[_from][msg.sender]);\n', '\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\temit Transfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '\t * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '\t * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '\t * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _value The amount of tokens to be spent.\n', '\t */\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\temit Approval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '\t * @param _owner address The address which owns the funds.\n', '\t * @param _spender address The address which will spend the funds.\n', '\t * @return A uint256 specifying the amount of tokens still available for the spender.\n', '\t */\n', '\tfunction allowance(\n', '\t\taddress _owner,\n', '\t\taddress _spender\n', '\t )\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (uint256)\n', '\t{\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '\t * approve should be called when allowed[_spender] == 0. To increment\n', '\t * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t * the first transaction is mined)\n', '\t * From MonolithDAO Token.sol\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _addedValue The amount of tokens to increase the allowance by.\n', '\t */\n', '\tfunction increaseApproval(\n', '\t\taddress _spender,\n', '\t\tuint256 _addedValue\n', '\t)\n', '\t\tpublic\n', '\t\treturns (bool)\n', '\t{\n', '\t\tallowed[msg.sender][_spender] = (\n', '\t\t\tallowed[msg.sender][_spender].add(_addedValue));\n', '\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '\t * approve should be called when allowed[_spender] == 0. To decrement\n', '\t * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t * the first transaction is mined)\n', '\t * From MonolithDAO Token.sol\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '\t */\n', '\tfunction decreaseApproval(\n', '\t\taddress _spender,\n', '\t\tuint256 _subtractedValue\n', '\t)\n', '\t\tpublic\n', '\t\treturns (bool)\n', '\t{\n', '\t\tuint256 oldValue = allowed[msg.sender][_spender];\n', '\t\tif (_subtractedValue > oldValue) {\n', '\t\t\tallowed[msg.sender][_spender] = 0;\n', '\t\t} else {\n', '\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\t\t}\n', '\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '\tevent Mint(address indexed to, uint256 amount);\n', '\tevent MintFinished();\n', '\n', '\tbool public mintingFinished = false;\n', '\n', '\n', '\tmodifier canMint() {\n', '\t\trequire(!mintingFinished);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier hasMintPermission() {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function to mint tokens\n', '\t * @param _to The address that will receive the minted tokens.\n', '\t * @param _amount The amount of tokens to mint.\n', '\t * @return A boolean that indicates if the operation was successful.\n', '\t */\n', '\tfunction mint(\n', '\t\taddress _to,\n', '\t\tuint256 _amount\n', '\t)\n', '\t\thasMintPermission\n', '\t\tcanMint\n', '\t\tpublic\n', '\t\treturns (bool)\n', '\t{\n', '\t\ttotalSupply_ = totalSupply_.add(_amount);\n', '\t\tbalances[_to] = balances[_to].add(_amount);\n', '\t\temit Mint(_to, _amount);\n', '\t\temit Transfer(address(0), _to, _amount);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function to stop minting new tokens.\n', '\t * @return True if the operation was successful.\n', '\t */\n', '\tfunction finishMinting() onlyOwner canMint public returns (bool) {\n', '\t\tmintingFinished = true;\n', '\t\temit MintFinished();\n', '\t\treturn true;\n', '\t}\n', '}\n', '\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '\n', '\tuint256 public cap;\n', '\n', '\tconstructor(uint256 _cap) public {\n', '\t\trequire(_cap > 0);\n', '\t\tcap = _cap;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function to mint tokens\n', '\t * @param _to The address that will receive the minted tokens.\n', '\t * @param _amount The amount of tokens to mint.\n', '\t * @return A boolean that indicates if the operation was successful.\n', '\t */\n', '\tfunction mint(\n', '\t\taddress _to,\n', '\t\tuint256 _amount\n', '\t)\n', '\t\tpublic\n', '\t\treturns (bool)\n', '\t{\n', '\t\trequire(totalSupply_.add(_amount) <= cap);\n', '\n', '\t\treturn super.mint(_to, _amount);\n', '\t}\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '\tevent Burn(address indexed burner, uint256 value);\n', '\n', '\t/**\n', '\t * @dev Burns a specific amount of tokens.\n', '\t * @param _value The amount of token to be burned.\n', '\t */\n', '\tfunction burn(uint256 _value) public {\n', '\t\t_burn(msg.sender, _value);\n', '\t}\n', '\n', '\tfunction _burn(address _who, uint256 _value) internal {\n', '\t\trequire(_value <= balances[_who]);\n', '\t\t// no need to require value <= totalSupply, since that would imply the\n', '\t\t// sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '\t\tbalances[_who] = balances[_who].sub(_value);\n', '\t\ttotalSupply_ = totalSupply_.sub(_value);\n', '\t\temit Burn(_who, _value);\n', '\t\temit Transfer(_who, address(0), _value);\n', '\t}\n', '}\n', '\n', '\n', '/**\n', ' * @title Contract of managers&#39; control\n', '\n', ' */\n', 'contract Manageable is Ownable {\n', '    address[] public managers;\n', '\n', '    event ManagerAdded(address indexed manager);\n', '    event ManagerRemoved(address indexed manager);\n', '\n', '    modifier onlyManager() { require(isManager(msg.sender)); _; }\n', '\n', '\t/**\n', '\t * @dev Get the number of managers\n', '\t * @return The number of added managers\n', '\t */\n', '    function countManagers() view public returns(uint) {\n', '        return managers.length;\n', '    }\n', '\n', '\t/**\n', '\t * @dev Get list of managers\n', '\t * @return List of added managers\n', '\t */\n', '    function getManagers() view public returns(address[]) {\n', '        return managers;\n', '    }\n', '\n', '\t/**\n', '\t * @dev Check whether the address is in the list of managers\n', '\t * @param _manager Manager&#39;s address\n', '\t * @return logical type is whether the address in the list\n', ')\n', '\t */\n', '    function isManager(address _manager) view public returns(bool) {\n', '        for(uint i = 0; i < managers.length; i++) {\n', '            if(managers[i] == _manager) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '\t/**\n', '\t * @dev Adding a manager\n', '\t * @param _manager The address of the manager to be added \n', '\t */\n', '    function addManager(address _manager) onlyOwner public {\n', '        require(_manager != address(0));\n', '        require(!isManager(_manager));\n', '\n', '        managers.push(_manager);\n', '\n', '        emit ManagerAdded(_manager);\n', '    }\n', '\n', '\t/**\n', '\t * @dev Remove manager\n', '\t * @param _manager Address of the manager to be removed\n', '\t */\n', '    function removeManager(address _manager) onlyOwner public {\n', '        require(isManager(_manager));\n', '\n', '        uint index = 0;\n', '        for(uint i = 0; i < managers.length; i++) {\n', '            if(managers[i] == _manager) {\n', '                index = i;\n', '            }\n', '        }\n', '\n', '        for(; index < managers.length - 1; index++) {\n', '            managers[index] = managers[index + 1];\n', '        }\n', '        \n', '        managers.length--;\n', '        emit ManagerRemoved(_manager);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contract of ZAM token\n', ' */\n', 'contract Token is DetailedERC20, CappedToken, BurnableToken {\n', '\t/**\n', '\t * @dev Token constructor\n', '\t */\n', '    constructor() CappedToken(85e16) DetailedERC20("zamzam", "ZAM", 8) public {\n', '        \n', '    }\n', '\n', '\t/**\n', '\t * @dev Multi-transaction of tokens\n', '\t * @param _to Addresses array\n', '\t * @param _value Array of token amount for each address\n', '\t * @return Boolean type of transaction success\n', '\t */\n', '    function multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\n', '        require(_to.length == _value.length);\n', '\n', '        for(uint i = 0; i < _to.length; i++) {\n', '            transfer(_to[i], _value[i]);\n', '        }\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale contract of ZAM token\n', ' */\n', 'contract Crowdsale is Manageable, Pausable {\n', '    using SafeMath for uint;\n', '\n', '    Token public token;\n', '    bool public crowdsaleClosed = false;\n', '\n', '    event ExternalPurchase(address indexed holder, string tx, string currency, uint256 currencyAmount, uint256 rateToEther, uint256 tokenAmount);\n', '    event CrowdsaleClose();\n', '   \n', '\t/**\n', '\t * @dev Crowdsale contract constructor\n', '\t */\n', '    constructor() public {\n', '        token = new Token();\n', '    }\n', '\n', '\t/**\n', '\t * @dev External purchase (managers only)\n', '\t * @param _to The address for tokens accruing\n', '\t * @param _tx Hash of the transaction in the blockchain in which tokens payment was made\n', '\t * @param _currency The currency (blockchain) in which the payment was made\n', '\t * @param _value Amount of payment in the currency\n', '\t * @param _rate Exchange rate in USD\n', '\t * @param _tokens Number of accrual tokens\n', '\t */\n', '    function externalPurchase(address _to, string _tx, string _currency, uint _value, uint256 _rate, uint256 _tokens) whenNotPaused onlyManager public {\n', '        token.mint(_to, _tokens);\n', '        emit ExternalPurchase(_to, _tx, _currency, _value, _rate, _tokens);\n', '    }\n', '\n', '\t/**\n', '\t * @dev Closing the crowdsale contract and transferring the rights of the token contract to the specified address\n', '\t * @param _to Address for transfer of the rights\n', '\t */\n', '    function closeCrowdsale(address _to) onlyOwner public {\n', '        require(!crowdsaleClosed);\n', '\n', '        token.transferOwnership(_to);\n', '        crowdsaleClosed = true;\n', '\n', '        emit CrowdsaleClose();\n', '    }\n', '}']