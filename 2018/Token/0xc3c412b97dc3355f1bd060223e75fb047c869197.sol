['pragma solidity ^0.4.16;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '    // function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    //     return balances[_owner];\n', '    // }\n', '\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract HngCoin {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;                 // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '    uint256 public coinunits;                 // How many units of your coin can be bought by 1 ETH?\n', '    uint256 public ethereumWei;            // WEI is the smallest unit of ETH (the equivalent of cent in USD or satoshi in BTC). We&#39;ll store the total ETH raised via our ICO here.\n', '    address public tokensWallet;             // Safe Address could be changed so owner isnt same address\n', '    address public owner;             // Safe Address could be changed so owner isnt same address\n', '    address public salesaccount;           // Where should the raised ETH be sent to?\n', '    uint256 public sellPrice;             //sellprice if need be we ever call rates that are dynamic from api\n', '    uint256 public buyPrice;             //sellprice if need be we ever call rates that are dynamic from api\n', '    //uint256 public investreturns;\n', '    bool public isActive; //check if we are seling or not\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    //event TransferSender(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function HngCoin(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        //initialSupply = 900000000000000000000000000;\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = "HNGCOIN";                                   // Set the name for display purposes\n', '        symbol = "HNGC";                               // Set the symbol for display purposes\n', '        coinunits = 100;                                      // Set the price of your token for the ICO (CHANGE THIS)\n', '        tokensWallet = msg.sender;\n', '        salesaccount = msg.sender;\n', '        ethereumWei = 1000000000000000000;                                    // The owner of the contract gets ETH\n', '        isActive = true;               //set true or false for sale or not\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '     //function sendit(address _to, uint256 _value) public returns (bool success) {}\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function multiply(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '    // change salesaccount address\n', '    function salesAddress(address sales) public returns (bool success){\n', '        require(msg.sender == tokensWallet);\n', '        salesaccount = sales;\n', '        return true;\n', '    }\n', '    // change units address\n', '    function coinsUnit(uint256 amount) public returns (bool success){\n', '        require(msg.sender == tokensWallet);\n', '        coinunits = amount;\n', '        return true;\n', '    }\n', '    // transfer balance to owner withdraw owner\n', '  \tfunction withdrawEther(uint256 amount) public returns (bool success){\n', '  \t\trequire(msg.sender == tokensWallet);\n', '      //require(msg.value == multiply(amount, ethereumWei));\n', '      amount = amount * ethereumWei;\n', '  \t\tsalesaccount.transfer(amount);\n', '  \t\treturn true;\n', '  \t}\n', '\n', '    /* /// @notice Buy tokens from contract by sending ether\n', '    function buy(uint256 amount) public payable{\n', '      //  uint amount = msg.value * buyPrice;               // calculates the amount\n', '        require(msg.value == multiply(amount, ethereumWei));\n', '        _transfer(this,msg.sender, amount);              // makes the transfers\n', '    } */\n', '    function startSale() external {\n', '      require(msg.sender == owner);\n', '      isActive = true;\n', '    }\n', '    function stopSale() external {\n', '      require(msg.sender == owner);\n', '      isActive = false;\n', '    }\n', '\n', '    function() payable public {\n', '    //  ethereumWei = ethereumWei + msg.value;\n', '    //  investreturns = msg.value + ethereumWei;\n', '      //investreturns = investreturns + msg.value;\n', '      //investreturns = investreturns + msg.value;\n', '      require(isActive);\n', '      uint256 amount = msg.value * coinunits;\n', '      //uint256 amount = 100000000000000000;\n', '      require(balanceOf[tokensWallet] >= amount);\n', '\n', '      balanceOf[tokensWallet] -= amount;\n', '      balanceOf[msg.sender] += amount;\n', '\n', '      Transfer(tokensWallet, msg.sender, amount); // Broadcast a message to the blockchain\n', '\n', '      //Transfer ether to tokensWallet\n', '    //  tokensWallet.transfer(msg.value);\n', '    //  _transfer(msg.sender, tokensWallet, msg.value);\n', '      }\n', '\n', '}\n', '\n', '/******************************************/\n', '/*      Token Sale       */\n', '/******************************************/\n', '\n', 'contract HngCoinSale is owned, HngCoin {\n', '\n', '\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function HngCoinSale(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) HngCoin(initialSupply, tokenName, tokenSymbol) public {}\n', '\n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '        balanceOf[_from] -= _value;                         // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /// @notice Create `mintedAmount` tokens and send it to `target`\n', '    /// @param target Address to receive the tokens\n', '    /// @param mintedAmount the amount of tokens it will receive\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        emit Transfer(0, this, mintedAmount);\n', '        emit Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n', '    /// @param newSellPrice Price the users can sell to the contract\n', '    /// @param newBuyPrice Price users can buy from the contract\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '    function multiply(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '    /* /// @notice Buy tokens from contract by sending ether\n', '    function buy(uint256 amount) public payable{\n', '      //  uint amount = msg.value * buyPrice;               // calculates the amount\n', '        require(msg.value == multiply(amount, buyPrice));\n', '        _transfer(owner,msg.sender, amount);              // makes the transfers\n', '    } */\n', '    /* function buyTokens(uint256 _numberOfTokens) public payable {\n', '        require(msg.value == multiply(_numberOfTokens, tokenPrice));\n', '        require(tokenContract.balanceOf(this) >= _numberOfTokens);\n', '        require(tokenContract.transfer(msg.sender, _numberOfTokens));\n', '\n', '        tokensSold += _numberOfTokens;\n', '\n', '        Sell(msg.sender, _numberOfTokens);\n', '    } */\n', '\n', '    /// @notice Sell `amount` tokens to contract\n', '    /// @param amount amount of tokens to be sold\n', '    /* function sell(uint256 amount) public {\n', '        address myAddress = this;\n', '        require(myAddress.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n', '        _transfer(msg.sender, owner, amount);              // makes the transfers\n', '        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It&#39;s important to do this last to avoid recursion attacks\n', '    } */\n', '\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '    // function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    //     return balances[_owner];\n', '    // }\n', '\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract HngCoin {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;                 // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '    uint256 public coinunits;                 // How many units of your coin can be bought by 1 ETH?\n', "    uint256 public ethereumWei;            // WEI is the smallest unit of ETH (the equivalent of cent in USD or satoshi in BTC). We'll store the total ETH raised via our ICO here.\n", '    address public tokensWallet;             // Safe Address could be changed so owner isnt same address\n', '    address public owner;             // Safe Address could be changed so owner isnt same address\n', '    address public salesaccount;           // Where should the raised ETH be sent to?\n', '    uint256 public sellPrice;             //sellprice if need be we ever call rates that are dynamic from api\n', '    uint256 public buyPrice;             //sellprice if need be we ever call rates that are dynamic from api\n', '    //uint256 public investreturns;\n', '    bool public isActive; //check if we are seling or not\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    //event TransferSender(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function HngCoin(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        //initialSupply = 900000000000000000000000000;\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = "HNGCOIN";                                   // Set the name for display purposes\n', '        symbol = "HNGC";                               // Set the symbol for display purposes\n', '        coinunits = 100;                                      // Set the price of your token for the ICO (CHANGE THIS)\n', '        tokensWallet = msg.sender;\n', '        salesaccount = msg.sender;\n', '        ethereumWei = 1000000000000000000;                                    // The owner of the contract gets ETH\n', '        isActive = true;               //set true or false for sale or not\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '     //function sendit(address _to, uint256 _value) public returns (bool success) {}\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function multiply(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '    // change salesaccount address\n', '    function salesAddress(address sales) public returns (bool success){\n', '        require(msg.sender == tokensWallet);\n', '        salesaccount = sales;\n', '        return true;\n', '    }\n', '    // change units address\n', '    function coinsUnit(uint256 amount) public returns (bool success){\n', '        require(msg.sender == tokensWallet);\n', '        coinunits = amount;\n', '        return true;\n', '    }\n', '    // transfer balance to owner withdraw owner\n', '  \tfunction withdrawEther(uint256 amount) public returns (bool success){\n', '  \t\trequire(msg.sender == tokensWallet);\n', '      //require(msg.value == multiply(amount, ethereumWei));\n', '      amount = amount * ethereumWei;\n', '  \t\tsalesaccount.transfer(amount);\n', '  \t\treturn true;\n', '  \t}\n', '\n', '    /* /// @notice Buy tokens from contract by sending ether\n', '    function buy(uint256 amount) public payable{\n', '      //  uint amount = msg.value * buyPrice;               // calculates the amount\n', '        require(msg.value == multiply(amount, ethereumWei));\n', '        _transfer(this,msg.sender, amount);              // makes the transfers\n', '    } */\n', '    function startSale() external {\n', '      require(msg.sender == owner);\n', '      isActive = true;\n', '    }\n', '    function stopSale() external {\n', '      require(msg.sender == owner);\n', '      isActive = false;\n', '    }\n', '\n', '    function() payable public {\n', '    //  ethereumWei = ethereumWei + msg.value;\n', '    //  investreturns = msg.value + ethereumWei;\n', '      //investreturns = investreturns + msg.value;\n', '      //investreturns = investreturns + msg.value;\n', '      require(isActive);\n', '      uint256 amount = msg.value * coinunits;\n', '      //uint256 amount = 100000000000000000;\n', '      require(balanceOf[tokensWallet] >= amount);\n', '\n', '      balanceOf[tokensWallet] -= amount;\n', '      balanceOf[msg.sender] += amount;\n', '\n', '      Transfer(tokensWallet, msg.sender, amount); // Broadcast a message to the blockchain\n', '\n', '      //Transfer ether to tokensWallet\n', '    //  tokensWallet.transfer(msg.value);\n', '    //  _transfer(msg.sender, tokensWallet, msg.value);\n', '      }\n', '\n', '}\n', '\n', '/******************************************/\n', '/*      Token Sale       */\n', '/******************************************/\n', '\n', 'contract HngCoinSale is owned, HngCoin {\n', '\n', '\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function HngCoinSale(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) HngCoin(initialSupply, tokenName, tokenSymbol) public {}\n', '\n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '        balanceOf[_from] -= _value;                         // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /// @notice Create `mintedAmount` tokens and send it to `target`\n', '    /// @param target Address to receive the tokens\n', '    /// @param mintedAmount the amount of tokens it will receive\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        emit Transfer(0, this, mintedAmount);\n', '        emit Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n', '    /// @param newSellPrice Price the users can sell to the contract\n', '    /// @param newBuyPrice Price users can buy from the contract\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '    function multiply(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '    /* /// @notice Buy tokens from contract by sending ether\n', '    function buy(uint256 amount) public payable{\n', '      //  uint amount = msg.value * buyPrice;               // calculates the amount\n', '        require(msg.value == multiply(amount, buyPrice));\n', '        _transfer(owner,msg.sender, amount);              // makes the transfers\n', '    } */\n', '    /* function buyTokens(uint256 _numberOfTokens) public payable {\n', '        require(msg.value == multiply(_numberOfTokens, tokenPrice));\n', '        require(tokenContract.balanceOf(this) >= _numberOfTokens);\n', '        require(tokenContract.transfer(msg.sender, _numberOfTokens));\n', '\n', '        tokensSold += _numberOfTokens;\n', '\n', '        Sell(msg.sender, _numberOfTokens);\n', '    } */\n', '\n', '    /// @notice Sell `amount` tokens to contract\n', '    /// @param amount amount of tokens to be sold\n', '    /* function sell(uint256 amount) public {\n', '        address myAddress = this;\n', '        require(myAddress.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n', '        _transfer(msg.sender, owner, amount);              // makes the transfers\n', "        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n", '    } */\n', '\n', '}']
