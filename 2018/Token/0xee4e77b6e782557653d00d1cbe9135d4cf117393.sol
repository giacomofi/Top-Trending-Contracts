['pragma solidity 0.4.24;\n', '/**\n', ' * Math operations with safety checks\n', ' * By OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/contracts/SafeMath.sol\n', ' */\n', 'library SafeMath {\n', '  \n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '\n', ' contract ContractReceiver{\n', '    function tokenFallback(address _from, uint256 _value, bytes  _data) external;\n', '}\n', '\n', '\n', '//Basic ERC23 token, backward compatible with ERC20 transfer function.\n', '//Based in part on code by open-zeppelin: https://github.com/OpenZeppelin/zeppelin-solidity.git\n', 'contract ERC23BasicToken  {\n', '    using SafeMath for uint256;\n', '    uint256 public totalSupply;\n', '    mapping(address => uint256) balances;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n', '\n', '    function tokenFallback(address _from, uint256 _value, bytes  _data) external {\n', '        throw;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value, bytes _data) returns  (bool success) {\n', '        require(_to != address(0));\n', '        //Standard ERC23 transfer function\n', '\n', '        if(isContract(_to)) {\n', '            transferToContract(_to, _value, _data);\n', '        }\n', '        else {\n', '            transferToAddress(_to, _value, _data);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) {\n', '        require(_to != address(0));\n', '        //standard function transfer similar to ERC20 transfer with no _data\n', '        //added due to backwards compatibility reasons\n', '\n', '        bytes memory empty;\n', '        if(isContract(_to)) {\n', '            transferToContract(_to, _value, empty);\n', '        }\n', '        else {\n', '            transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '    function transferToAddress(address _to, uint256 _value, bytes _data) internal {\n', '        require(_to != address(0));\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '    }\n', '\n', '    function transferToContract(address _to, uint256 _value, bytes _data) internal {\n', '        require(_to != address(0));\n', '        balances[msg.sender] = balances[msg.sender].sub( _value);\n', '        balances[_to] = balances[_to].add( _value);\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '    function isContract(address _addr) returns (bool is_contract) {\n', '          uint256 length;\n', '          assembly {\n', '              //retrieve the size of the code on target address, this needs assembly\n', '              length := extcodesize(_addr)\n', '          }\n', '          if(length>0) {\n', '              return true;\n', '          }\n', '          else {\n', '              return false;\n', '          }\n', '    }\n', '}\n', '\n', '\n', ' // Standard ERC23 token, backward compatible with ERC20 standards.\n', ' // Based on code by open-zeppelin: https://github.com/OpenZeppelin/zeppelin-solidity.git\n', 'contract ERC23StandardToken is ERC23BasicToken {\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    event Approval (address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) {\n', '    require (_value > 0);\n', '    require(_to != address(0));\n', '    require(_from != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require (_value > 0);\n', '        require(_spender != address(0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  address public admin;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '    admin=owner;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner || msg.sender==admin);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newAdmin.\n', '   * @param newAdmin The address to transfer admin to.\n', '   */\n', '  function transferAdmin(address newAdmin) onlyOwner public {\n', '    require(newAdmin != address(0));\n', '    emit OwnershipTransferred(admin, newAdmin);\n', '    admin = newAdmin;\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is ERC23StandardToken,Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  bool public mintingFinished = false;\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(_amount>0);\n', '    require(_to != address(0));\n', '\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract ANDToken is MintableToken { \n', '  string public name="AND TOKEN";\n', '  string public symbol="AND";\n', '  uint8 public decimals=18;\n', '  uint256 public tradeStartTime;\n', '\n', '  function tradeStarttime(uint256 _startTime)public onlyOwner{\n', '       tradeStartTime=_startTime.add(1 years);\n', '   }\n', '   \n', '   function hasTrade() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp>tradeStartTime;\n', '  }\n', '   function transfer(address _to,uint256 _value) public{\n', '       require(hasTrade());\n', '       require(_to != address(0));\n', '\n', '        //standard function transfer similar to ERC20 transfer with no _data\n', '        //added due to backwards compatibility reasons\n', '\n', '        bytes memory empty;\n', '        if(isContract(_to)) {\n', '             transferToContract(_to, _value, empty);\n', '        }\n', '        else {\n', '            transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '    \n', '     function transfer(address _to, uint256 _value, bytes _data)public  returns (bool success)  {\n', '        require(hasTrade());\n', '        //Standard ERC23 transfer function\n', '        require(_to != address(0));\n', '\n', '        if(isContract(_to)) {\n', '            transferToContract(_to, _value, _data);\n', '        }\n', '        else {\n', '            transferToAddress(_to, _value, _data);\n', '        }\n', '        return true;\n', '    }\n', ' \n', ' function transferFrom(address _from, address _to, uint256 _value) {\n', '    require(hasTrade());\n', '    require (_value > 0);\n', '    require(_to != address(0));\n', '    require(_from != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '/**\n', ' * Math operations with safety checks\n', ' * By OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/contracts/SafeMath.sol\n', ' */\n', 'library SafeMath {\n', '  \n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '\n', ' contract ContractReceiver{\n', '    function tokenFallback(address _from, uint256 _value, bytes  _data) external;\n', '}\n', '\n', '\n', '//Basic ERC23 token, backward compatible with ERC20 transfer function.\n', '//Based in part on code by open-zeppelin: https://github.com/OpenZeppelin/zeppelin-solidity.git\n', 'contract ERC23BasicToken  {\n', '    using SafeMath for uint256;\n', '    uint256 public totalSupply;\n', '    mapping(address => uint256) balances;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n', '\n', '    function tokenFallback(address _from, uint256 _value, bytes  _data) external {\n', '        throw;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value, bytes _data) returns  (bool success) {\n', '        require(_to != address(0));\n', '        //Standard ERC23 transfer function\n', '\n', '        if(isContract(_to)) {\n', '            transferToContract(_to, _value, _data);\n', '        }\n', '        else {\n', '            transferToAddress(_to, _value, _data);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) {\n', '        require(_to != address(0));\n', '        //standard function transfer similar to ERC20 transfer with no _data\n', '        //added due to backwards compatibility reasons\n', '\n', '        bytes memory empty;\n', '        if(isContract(_to)) {\n', '            transferToContract(_to, _value, empty);\n', '        }\n', '        else {\n', '            transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '    function transferToAddress(address _to, uint256 _value, bytes _data) internal {\n', '        require(_to != address(0));\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '    }\n', '\n', '    function transferToContract(address _to, uint256 _value, bytes _data) internal {\n', '        require(_to != address(0));\n', '        balances[msg.sender] = balances[msg.sender].sub( _value);\n', '        balances[_to] = balances[_to].add( _value);\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '    function isContract(address _addr) returns (bool is_contract) {\n', '          uint256 length;\n', '          assembly {\n', '              //retrieve the size of the code on target address, this needs assembly\n', '              length := extcodesize(_addr)\n', '          }\n', '          if(length>0) {\n', '              return true;\n', '          }\n', '          else {\n', '              return false;\n', '          }\n', '    }\n', '}\n', '\n', '\n', ' // Standard ERC23 token, backward compatible with ERC20 standards.\n', ' // Based on code by open-zeppelin: https://github.com/OpenZeppelin/zeppelin-solidity.git\n', 'contract ERC23StandardToken is ERC23BasicToken {\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    event Approval (address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) {\n', '    require (_value > 0);\n', '    require(_to != address(0));\n', '    require(_from != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require (_value > 0);\n', '        require(_spender != address(0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  address public admin;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '    admin=owner;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner || msg.sender==admin);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newAdmin.\n', '   * @param newAdmin The address to transfer admin to.\n', '   */\n', '  function transferAdmin(address newAdmin) onlyOwner public {\n', '    require(newAdmin != address(0));\n', '    emit OwnershipTransferred(admin, newAdmin);\n', '    admin = newAdmin;\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is ERC23StandardToken,Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  bool public mintingFinished = false;\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(_amount>0);\n', '    require(_to != address(0));\n', '\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract ANDToken is MintableToken { \n', '  string public name="AND TOKEN";\n', '  string public symbol="AND";\n', '  uint8 public decimals=18;\n', '  uint256 public tradeStartTime;\n', '\n', '  function tradeStarttime(uint256 _startTime)public onlyOwner{\n', '       tradeStartTime=_startTime.add(1 years);\n', '   }\n', '   \n', '   function hasTrade() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp>tradeStartTime;\n', '  }\n', '   function transfer(address _to,uint256 _value) public{\n', '       require(hasTrade());\n', '       require(_to != address(0));\n', '\n', '        //standard function transfer similar to ERC20 transfer with no _data\n', '        //added due to backwards compatibility reasons\n', '\n', '        bytes memory empty;\n', '        if(isContract(_to)) {\n', '             transferToContract(_to, _value, empty);\n', '        }\n', '        else {\n', '            transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '    \n', '     function transfer(address _to, uint256 _value, bytes _data)public  returns (bool success)  {\n', '        require(hasTrade());\n', '        //Standard ERC23 transfer function\n', '        require(_to != address(0));\n', '\n', '        if(isContract(_to)) {\n', '            transferToContract(_to, _value, _data);\n', '        }\n', '        else {\n', '            transferToAddress(_to, _value, _data);\n', '        }\n', '        return true;\n', '    }\n', ' \n', ' function transferFrom(address _from, address _to, uint256 _value) {\n', '    require(hasTrade());\n', '    require (_value > 0);\n', '    require(_to != address(0));\n', '    require(_from != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    }\n', '}']
