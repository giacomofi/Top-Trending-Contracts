['pragma solidity ^0.4.11;\n', 'contract ShowCoinToken{\n', '    mapping (address => uint256) balances;\n', '    address public owner;\n', '    address public lockOwner;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public lockAmount ;\n', '    uint256 public startTime ;\n', '    // total amount of tokens\n', '    uint256 public totalSupply;\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    function ShowCoinToken() public {\n', '        owner = 0xd32c3c303BD6bd65066C1373720b5442A414f9CC;          // Set owner of contract\n', '        lockOwner = 0xC9BA6e5Eda033c66D34ab64d02d14590963Ce0c2;\n', '        startTime = 1514649600;\n', '        name = "ShowCoin";                                   // Set the name for display purposes\n', '        symbol = "Show";                                           // Set the symbol for display purposes\n', '        decimals = 18;                                            // Amount of decimals for display purposes\n', '        totalSupply = 10000000000000000000000000000;               // Total supply\n', '        balances[owner] = totalSupply * 90 /100 ;\n', '        balances[0x7b9b375B036dF9482033Aa7fee9273c78F40Aa85]=20000000000000000;\n', '        lockAmount = totalSupply / 10 ;\n', '    }\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_value > 0 );                                      // Check send token value > 0;\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[_from] >= _value);                 // Check if the sender has enough\n', '        require(balances[_to] + _value >= balances[_to]);   // Check for overflows\n', '        require(_value <= allowed[_from][msg.sender]);      // Check allowance\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '        allowed[_from][_to] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /* This unnamed function is called whenever someone tries to send ether to it */\n', '    function () private {\n', '        revert();     // Prevents accidental sending of ether\n', '    }\n', '\n', '    function releaseToken() public{\n', '        require(now >= startTime +2 years);\n', '        uint256 i = ((now  - startTime -2 years) / (0.5 years));\n', '        uint256  releasevalue = totalSupply /40 ;\n', '        require(lockAmount > (4 - i - 1) * releasevalue);\n', '        lockAmount -= releasevalue ;\n', '        balances[lockOwner] +=  releasevalue ;\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']