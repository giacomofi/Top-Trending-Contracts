['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-19\n', '*/\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: @tokenfoundry/sale-contracts/contracts/sale/DisbursementHandler.sol\n', '\n', 'pragma solidity 0.4.18;\n', '\n', '\n', '\n', '\n', '\n', 'contract DisbursementHandler is Ownable {\n', '\n', '    struct Disbursement {\n', '        uint256 timestamp;\n', '        uint256 tokens;\n', '    }\n', '\n', '    event LogSetup(address indexed vestor, uint256 tokens, uint256 timestamp);\n', '    event LogChangeTimestamp(address indexed vestor, uint256 index, uint256 timestamp);\n', '    event LogWithdraw(address indexed to, uint256 value);\n', '\n', '    ERC20 public token;\n', '    mapping(address => Disbursement[]) public disbursements;\n', '    mapping(address => uint256) public withdrawnTokens;\n', '\n', '    function DisbursementHandler(address _token) public {\n', '        token = ERC20(_token);\n', '    }\n', '\n', '    /// @dev Called by the sale contract to create a disbursement.\n', '    /// @param vestor The address of the beneficiary.\n', '    /// @param tokens Amount of tokens to be locked.\n', '    /// @param timestamp Funds will be locked until this timestamp.\n', '    function setupDisbursement(\n', '        address vestor,\n', '        uint256 tokens,\n', '        uint256 timestamp\n', '    )\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(block.timestamp < timestamp);\n', '        disbursements[vestor].push(Disbursement(timestamp, tokens));\n', '        LogSetup(vestor, timestamp, tokens);\n', '    }\n', '\n', '    /// @dev Change an existing disbursement.\n', '    /// @param vestor The address of the beneficiary.\n', '    /// @param timestamp Funds will be locked until this timestamp.\n', '    /// @param index Index of the DisbursementVesting in the vesting array.\n', '    function changeTimestamp(\n', '        address vestor,\n', '        uint256 index,\n', '        uint256 timestamp\n', '    )\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(block.timestamp < timestamp);\n', '        require(index < disbursements[vestor].length);\n', '        disbursements[vestor][index].timestamp = timestamp;\n', '        LogChangeTimestamp(vestor, index, timestamp);\n', '    }\n', '\n', '    /// @dev Transfers tokens to a given address\n', '    /// @param to Address of token receiver\n', '    /// @param value Number of tokens to transfer\n', '    function withdraw(address to, uint256 value)\n', '        public\n', '    {\n', '        uint256 maxTokens = calcMaxWithdraw();\n', '        uint256 withdrawAmount = value < maxTokens ? value : maxTokens;\n', '        withdrawnTokens[msg.sender] = SafeMath.add(withdrawnTokens[msg.sender], withdrawAmount);\n', '        token.transfer(to, withdrawAmount);\n', '        LogWithdraw(to, value);\n', '    }\n', '\n', '    /// @dev Calculates the maximum amount of vested tokens\n', '    /// @return Number of vested tokens to withdraw\n', '    function calcMaxWithdraw()\n', '        public\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        uint256 maxTokens = 0;\n', '        Disbursement[] storage temp = disbursements[msg.sender];\n', '        for (uint256 i = 0; i < temp.length; i++) {\n', '            if (block.timestamp > temp[i].timestamp) {\n', '                maxTokens = SafeMath.add(maxTokens, temp[i].tokens);\n', '            }\n', '        }\n', '        maxTokens = SafeMath.sub(maxTokens, withdrawnTokens[msg.sender]);\n', '        return maxTokens;\n', '    }\n', '}']