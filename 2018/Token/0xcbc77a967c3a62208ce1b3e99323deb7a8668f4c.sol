['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract HeroCore{\n', '\n', '   function ownerIndexToERC20Balance(address _address) public returns (uint256);\n', '   function useItems(uint32 _items, uint256 tokenId, address owner,uint256 fee) public returns (bool);\n', '   function ownerOf(uint256 _tokenId) public returns (address);\n', '   function getHeroItems(uint256 _id) public returns ( uint32);\n', '    \n', '   function reduceCDFee(uint256 heroId) \n', '         public \n', '         view \n', '         returns (uint256);\n', '   \n', '}\n', '\n', 'contract MagicStore is Pausable {\n', '\t\tHeroCore public heroCore;\n', '    \n', '    mapping (uint8 =>mapping (uint8 => uint256)) public itemIndexToPrice; \n', '\t\t\t\n', '\t\tfunction MagicStore(address _heroCore){\n', '        HeroCore candidateContract2 = HeroCore(_heroCore);\n', '        heroCore = candidateContract2;\n', '\t\t}\t\n', '    \n', '    function buyItem(uint8 itemX,uint8 itemY, uint256 tokenId, uint256 amount) public{\n', '        require( msg.sender == heroCore.ownerOf(tokenId) );\n', '        require( heroCore.ownerIndexToERC20Balance(msg.sender) >= amount);\n', '        require( itemX >0);\n', '        uint256 fee= itemIndexToPrice[itemX][itemY];           \n', '        require(fee !=0 && fee <= amount); \n', '           uint32 items = heroCore.getHeroItems(tokenId);\n', '           uint32 location = 1;\n', '\t\t       for(uint8 index = 2; index <= itemX; index++){\n', '\t\t          location *=10;\n', '\t\t       }\n', '        uint32 _itemsId = items+ uint32(itemY) *location - items%location *location;\n', '              \n', '        heroCore.useItems(_itemsId,tokenId,msg.sender,amount);       \n', '    }\n', '    \n', '    \n', '    function setItem(uint8 itemX,uint8 itemY, uint256 amount) public onlyOwner{\n', '    \t require( itemX <=9 && itemY <=9 && amount !=0);\n', '    \n', '       itemIndexToPrice[itemX][itemY] =amount;    \n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract HeroCore{\n', '\n', '   function ownerIndexToERC20Balance(address _address) public returns (uint256);\n', '   function useItems(uint32 _items, uint256 tokenId, address owner,uint256 fee) public returns (bool);\n', '   function ownerOf(uint256 _tokenId) public returns (address);\n', '   function getHeroItems(uint256 _id) public returns ( uint32);\n', '    \n', '   function reduceCDFee(uint256 heroId) \n', '         public \n', '         view \n', '         returns (uint256);\n', '   \n', '}\n', '\n', 'contract MagicStore is Pausable {\n', '\t\tHeroCore public heroCore;\n', '    \n', '    mapping (uint8 =>mapping (uint8 => uint256)) public itemIndexToPrice; \n', '\t\t\t\n', '\t\tfunction MagicStore(address _heroCore){\n', '        HeroCore candidateContract2 = HeroCore(_heroCore);\n', '        heroCore = candidateContract2;\n', '\t\t}\t\n', '    \n', '    function buyItem(uint8 itemX,uint8 itemY, uint256 tokenId, uint256 amount) public{\n', '        require( msg.sender == heroCore.ownerOf(tokenId) );\n', '        require( heroCore.ownerIndexToERC20Balance(msg.sender) >= amount);\n', '        require( itemX >0);\n', '        uint256 fee= itemIndexToPrice[itemX][itemY];           \n', '        require(fee !=0 && fee <= amount); \n', '           uint32 items = heroCore.getHeroItems(tokenId);\n', '           uint32 location = 1;\n', '\t\t       for(uint8 index = 2; index <= itemX; index++){\n', '\t\t          location *=10;\n', '\t\t       }\n', '        uint32 _itemsId = items+ uint32(itemY) *location - items%location *location;\n', '              \n', '        heroCore.useItems(_itemsId,tokenId,msg.sender,amount);       \n', '    }\n', '    \n', '    \n', '    function setItem(uint8 itemX,uint8 itemY, uint256 amount) public onlyOwner{\n', '    \t require( itemX <=9 && itemY <=9 && amount !=0);\n', '    \n', '       itemIndexToPrice[itemX][itemY] =amount;    \n', '    }\n', '}']
