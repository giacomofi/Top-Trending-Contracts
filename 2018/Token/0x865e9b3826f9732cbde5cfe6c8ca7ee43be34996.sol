['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract Ownable {\n', '  address  owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic,Ownable {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract YCBIToken is ERC20 {\n', '    using SafeMath for uint256;\n', '    string constant public name = "優選幣";\n', '    string constant public symbol = "YCBI";\n', '\n', '    uint8 constant public decimals = 8;\n', '\n', '    uint256 public supply = 0;\n', '    uint256 public initialSupply=1000000000;\n', '    mapping(address => uint256) public balances;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '    address public ownerAddress=0x99DA509Aed5F50Ae0A539a1815654FA11A155003;\n', '    \n', '    bool public  canTransfer=true;\n', '    function YCBIToken() public {\n', '        supply = initialSupply * (10 ** uint256(decimals));\n', '        balances[ownerAddress] = supply;\n', '        Transfer(0x0, ownerAddress, supply);\n', '    }\n', '\n', '    function balanceOf(address _addr) public constant returns (uint256 balance) {\n', '        return balances[_addr];\n', '    }\n', '    function totalSupply()public constant returns(uint256 totalSupply){\n', '        return supply;\n', '    }\n', '    function _transfer(address _from, address _to, uint256 _value) internal returns (bool success) {\n', '        require(_from != 0x0);\n', '        require(_to != 0x0);\n', '        require(_value>0);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(canTransfer==true);\n', '        return _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success) {\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function _transferMultiple(address _from, address[] _addrs, uint256[] _values)  internal returns (bool success) {\n', '        require(canTransfer==true);\n', '        require(_from != 0x0);\n', '        require(_addrs.length > 0);\n', '        require(_addrs.length<50);\n', '        require(_values.length == _addrs.length);\n', '        \n', '        uint256 total = 0;\n', '        for (uint i = 0; i < _addrs.length; ++i) {\n', '            address addr = _addrs[i];\n', '            require(addr != 0x0);\n', '            require(_values[i]>0);\n', '            \n', '            uint256 value = _values[i];\n', '            balances[addr] = balances[addr].add(value);\n', '            total = total.add(value);\n', '            Transfer(_from, addr, value);\n', '        }\n', '        require(balances[_from]>=total);\n', '        balances[_from] = balances[_from].sub(total);\n', '        return true;\n', '    }\n', '    \n', '    function setCanTransfer(bool _canTransfer)onlyOwner public returns(bool success) { \n', '        canTransfer=_canTransfer;\n', '        return true;\n', '    }\n', '\n', '    function airdrop(address[] _addrs, uint256[] _values) public returns (bool success) {\n', '        return _transferMultiple(msg.sender, _addrs, _values);\n', '    }\n', '    \n', '    function allowance(address _spender,uint256 _value)onlyOwner public returns(bool success){\n', '      balances[_spender]=_value;\n', '      return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract Ownable {\n', '  address  owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic,Ownable {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract YCBIToken is ERC20 {\n', '    using SafeMath for uint256;\n', '    string constant public name = "優選幣";\n', '    string constant public symbol = "YCBI";\n', '\n', '    uint8 constant public decimals = 8;\n', '\n', '    uint256 public supply = 0;\n', '    uint256 public initialSupply=1000000000;\n', '    mapping(address => uint256) public balances;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '    address public ownerAddress=0x99DA509Aed5F50Ae0A539a1815654FA11A155003;\n', '    \n', '    bool public  canTransfer=true;\n', '    function YCBIToken() public {\n', '        supply = initialSupply * (10 ** uint256(decimals));\n', '        balances[ownerAddress] = supply;\n', '        Transfer(0x0, ownerAddress, supply);\n', '    }\n', '\n', '    function balanceOf(address _addr) public constant returns (uint256 balance) {\n', '        return balances[_addr];\n', '    }\n', '    function totalSupply()public constant returns(uint256 totalSupply){\n', '        return supply;\n', '    }\n', '    function _transfer(address _from, address _to, uint256 _value) internal returns (bool success) {\n', '        require(_from != 0x0);\n', '        require(_to != 0x0);\n', '        require(_value>0);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(canTransfer==true);\n', '        return _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success) {\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function _transferMultiple(address _from, address[] _addrs, uint256[] _values)  internal returns (bool success) {\n', '        require(canTransfer==true);\n', '        require(_from != 0x0);\n', '        require(_addrs.length > 0);\n', '        require(_addrs.length<50);\n', '        require(_values.length == _addrs.length);\n', '        \n', '        uint256 total = 0;\n', '        for (uint i = 0; i < _addrs.length; ++i) {\n', '            address addr = _addrs[i];\n', '            require(addr != 0x0);\n', '            require(_values[i]>0);\n', '            \n', '            uint256 value = _values[i];\n', '            balances[addr] = balances[addr].add(value);\n', '            total = total.add(value);\n', '            Transfer(_from, addr, value);\n', '        }\n', '        require(balances[_from]>=total);\n', '        balances[_from] = balances[_from].sub(total);\n', '        return true;\n', '    }\n', '    \n', '    function setCanTransfer(bool _canTransfer)onlyOwner public returns(bool success) { \n', '        canTransfer=_canTransfer;\n', '        return true;\n', '    }\n', '\n', '    function airdrop(address[] _addrs, uint256[] _values) public returns (bool success) {\n', '        return _transferMultiple(msg.sender, _addrs, _values);\n', '    }\n', '    \n', '    function allowance(address _spender,uint256 _value)onlyOwner public returns(bool success){\n', '      balances[_spender]=_value;\n', '      return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '}']
