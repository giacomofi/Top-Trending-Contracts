['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Contracts that should not own Contracts\n', ' * @author Remco Bloemen <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="285a4d454b47681a">[email&#160;protected]</a>π.com>\n', ' * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\n', ' * of this contract to reclaim ownership of the contracts.\n', ' */\n', 'contract HasNoContracts is Ownable {\n', '\n', '  /**\n', '   * @dev Reclaim ownership of Ownable contracts\n', '   * @param contractAddr The address of the Ownable to be reclaimed.\n', '   */\n', '  function reclaimContract(address contractAddr) external onlyOwner {\n', '    Ownable contractInst = Ownable(contractAddr);\n', '    contractInst.transferOwnership(owner);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contracts that should not own Tokens\n', ' * @author Remco Bloemen <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="3f4d5a525c507f0d">[email&#160;protected]</a>π.com>\n', ' * @dev This blocks incoming ERC223 tokens to prevent accidental loss of tokens.\n', ' * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\n', ' * owner to reclaim the tokens.\n', ' */\n', 'contract HasNoTokens is CanReclaimToken {\n', '\n', ' /**\n', '  * @dev Reject all ERC223 compatible tokens\n', '  * @param from_ address The address that is transferring the tokens\n', '  * @param value_ uint256 the amount of the specified token\n', '  * @param data_ Bytes The data passed from the caller.\n', '  */\n', '  function tokenFallback(address from_, uint256 value_, bytes data_) external {\n', '    from_;\n', '    value_;\n', '    data_;\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Contracts that should not own Ether\n', ' * @author Remco Bloemen <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b9cbdcd4dad6f98b">[email&#160;protected]</a>π.com>\n', ' * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n', ' * in the contract, it will allow the owner to reclaim this ether.\n', ' * @notice Ether can still be send to this contract by:\n', ' * calling functions labeled `payable`\n', ' * `selfdestruct(contract_address)`\n', ' * mining directly to the contract address\n', '*/\n', 'contract HasNoEther is Ownable {\n', '\n', '  /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '  function HasNoEther() public payable {\n', '    require(msg.value == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Disallows direct send by settings a default function without the `payable` flag.\n', '   */\n', '  function() external {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    assert(owner.send(this.balance));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Base contract for contracts that should not own things.\n', ' * @author Remco Bloemen <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="fe8c9b939d91becc">[email&#160;protected]</a>π.com>\n', ' * @dev Solves a class of errors where a contract accidentally becomes owner of Ether, Tokens or\n', ' * Owned contracts. See respective base contracts for details.\n', ' */\n', 'contract NoOwner is HasNoEther, HasNoTokens, HasNoContracts {\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title BetexToken\n', ' */\n', 'contract BetexToken is StandardToken, NoOwner {\n', '\n', '    string public constant name = "Betex Token"; // solium-disable-line uppercase\n', '    string public constant symbol = "BETEX"; // solium-disable-line uppercase\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '    // transfer unlock time (except team and broker recipients)\n', '    uint256 public firstUnlockTime;\n', '\n', '    // transfer unlock time for the team and broker recipients\n', '    uint256 public secondUnlockTime; \n', '\n', '    // addresses locked till second unlock time\n', '    mapping (address => bool) public blockedTillSecondUnlock;\n', '\n', '    // token holders\n', '    address[] public holders;\n', '\n', '    // holder number\n', '    mapping (address => uint256) public holderNumber;\n', '\n', '    // ICO address\n', '    address public icoAddress;\n', '\n', '    // supply constants\n', '    uint256 public constant TOTAL_SUPPLY = 10000000 * (10 ** uint256(decimals));\n', '    uint256 public constant SALE_SUPPLY = 5000000 * (10 ** uint256(decimals));\n', '\n', '    // funds supply constants\n', '    uint256 public constant BOUNTY_SUPPLY = 200000 * (10 ** uint256(decimals));\n', '    uint256 public constant RESERVE_SUPPLY = 800000 * (10 ** uint256(decimals));\n', '    uint256 public constant BROKER_RESERVE_SUPPLY = 1000000 * (10 ** uint256(decimals));\n', '    uint256 public constant TEAM_SUPPLY = 3000000 * (10 ** uint256(decimals));\n', '\n', '    // funds addresses constants\n', '    address public constant BOUNTY_ADDRESS = 0x48c15e5A9343E3220cdD8127620AE286A204448a;\n', '    address public constant RESERVE_ADDRESS = 0xC8fE659AaeF73b6e41DEe427c989150e3eDAf57D;\n', '    address public constant BROKER_RESERVE_ADDRESS = 0x8697d46171aBCaD2dC5A4061b8C35f909a402417;\n', '    address public constant TEAM_ADDRESS = 0x1761988F02C75E7c3432fa31d179cad6C5843F24;\n', '\n', '    // min tokens to be a holder, 0.1\n', '    uint256 public constant MIN_HOLDER_TOKENS = 10 ** uint256(decimals - 1);\n', '    \n', '    /**\n', '     * @dev Constructor\n', '     * @param _firstUnlockTime first unlock time\n', '     * @param _secondUnlockTime second unlock time\n', '     */\n', '    function BetexToken\n', '    (\n', '        uint256 _firstUnlockTime, \n', '        uint256 _secondUnlockTime\n', '    )\n', '        public \n', '    {        \n', '        require(_secondUnlockTime > firstUnlockTime);\n', '\n', '        firstUnlockTime = _firstUnlockTime;\n', '        secondUnlockTime = _secondUnlockTime;\n', '\n', '        // Allocate tokens to the bounty fund\n', '        balances[BOUNTY_ADDRESS] = BOUNTY_SUPPLY;\n', '        holders.push(BOUNTY_ADDRESS);\n', '        emit Transfer(0x0, BOUNTY_ADDRESS, BOUNTY_SUPPLY);\n', '\n', '        // Allocate tokens to the reserve fund\n', '        balances[RESERVE_ADDRESS] = RESERVE_SUPPLY;\n', '        holders.push(RESERVE_ADDRESS);\n', '        emit Transfer(0x0, RESERVE_ADDRESS, RESERVE_SUPPLY);\n', '\n', '        // Allocate tokens to the broker reserve fund\n', '        balances[BROKER_RESERVE_ADDRESS] = BROKER_RESERVE_SUPPLY;\n', '        holders.push(BROKER_RESERVE_ADDRESS);\n', '        emit Transfer(0x0, BROKER_RESERVE_ADDRESS, BROKER_RESERVE_SUPPLY);\n', '\n', '        // Allocate tokens to the team fund\n', '        balances[TEAM_ADDRESS] = TEAM_SUPPLY;\n', '        holders.push(TEAM_ADDRESS);\n', '        emit Transfer(0x0, TEAM_ADDRESS, TEAM_SUPPLY);\n', '\n', '        totalSupply_ = TOTAL_SUPPLY.sub(SALE_SUPPLY);\n', '    }\n', '\n', '    /**\n', '     * @dev set ICO address and allocate sale supply to it\n', '     */\n', '    function setICO(address _icoAddress) public onlyOwner {\n', '        require(_icoAddress != address(0));\n', '        require(icoAddress == address(0));\n', '        require(totalSupply_ == TOTAL_SUPPLY.sub(SALE_SUPPLY));\n', '        \n', '        // Allocate tokens to the ico contract\n', '        balances[_icoAddress] = SALE_SUPPLY;\n', '        emit Transfer(0x0, _icoAddress, SALE_SUPPLY);\n', '\n', '        icoAddress = _icoAddress;\n', '        totalSupply_ = TOTAL_SUPPLY;\n', '    }\n', '    \n', '    // standard transfer function with timelocks\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(transferAllowed(msg.sender));\n', '        enforceSecondLock(msg.sender, _to);\n', '        preserveHolders(msg.sender, _to, _value);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    // standard transferFrom function with timelocks\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(transferAllowed(msg.sender));\n', '        enforceSecondLock(msg.sender, _to);\n', '        preserveHolders(_from, _to, _value);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    // get holders count\n', '    function getHoldersCount() public view returns (uint256) {\n', '        return holders.length;\n', '    }\n', '\n', '    // enforce second lock on receiver\n', '    function enforceSecondLock(address _from, address _to) internal {\n', '        if (now < secondUnlockTime) { // solium-disable-line security/no-block-members\n', '            if (_from == TEAM_ADDRESS || _from == BROKER_RESERVE_ADDRESS) {\n', '                require(balances[_to] == uint256(0) || blockedTillSecondUnlock[_to]);\n', '                blockedTillSecondUnlock[_to] = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    // preserve holders list\n', '    function preserveHolders(address _from, address _to, uint256 _value) internal {\n', '        if (balances[_from].sub(_value) < MIN_HOLDER_TOKENS) \n', '            removeHolder(_from);\n', '        if (balances[_to].add(_value) >= MIN_HOLDER_TOKENS) \n', '            addHolder(_to);   \n', '    }\n', '\n', '    // remove holder from the holders list\n', '    function removeHolder(address _holder) internal {\n', '        uint256 _number = holderNumber[_holder];\n', '\n', '        if (_number == 0 || holders.length == 0 || _number > holders.length)\n', '            return;\n', '\n', '        uint256 _index = _number.sub(1);\n', '        uint256 _lastIndex = holders.length.sub(1);\n', '        address _lastHolder = holders[_lastIndex];\n', '\n', '        if (_index != _lastIndex) {\n', '            holders[_index] = _lastHolder;\n', '            holderNumber[_lastHolder] = _number;\n', '        }\n', '\n', '        holderNumber[_holder] = 0;\n', '        holders.length = _lastIndex;\n', '    } \n', '\n', '    // add holder to the holders list\n', '    function addHolder(address _holder) internal {\n', '        if (holderNumber[_holder] == 0) {\n', '            holders.push(_holder);\n', '            holderNumber[_holder] = holders.length;\n', '        }\n', '    }\n', '\n', '    // @return true if transfer operation is allowed\n', '    function transferAllowed(address _sender) internal view returns(bool) {\n', '        if (now > secondUnlockTime || _sender == icoAddress) // solium-disable-line security/no-block-members\n', '            return true;\n', '        if (now < firstUnlockTime) // solium-disable-line security/no-block-members\n', '            return false;\n', '        if (blockedTillSecondUnlock[_sender])\n', '            return false;\n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Contracts that should not own Contracts\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\n', ' * of this contract to reclaim ownership of the contracts.\n', ' */\n', 'contract HasNoContracts is Ownable {\n', '\n', '  /**\n', '   * @dev Reclaim ownership of Ownable contracts\n', '   * @param contractAddr The address of the Ownable to be reclaimed.\n', '   */\n', '  function reclaimContract(address contractAddr) external onlyOwner {\n', '    Ownable contractInst = Ownable(contractAddr);\n', '    contractInst.transferOwnership(owner);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contracts that should not own Tokens\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @dev This blocks incoming ERC223 tokens to prevent accidental loss of tokens.\n', ' * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\n', ' * owner to reclaim the tokens.\n', ' */\n', 'contract HasNoTokens is CanReclaimToken {\n', '\n', ' /**\n', '  * @dev Reject all ERC223 compatible tokens\n', '  * @param from_ address The address that is transferring the tokens\n', '  * @param value_ uint256 the amount of the specified token\n', '  * @param data_ Bytes The data passed from the caller.\n', '  */\n', '  function tokenFallback(address from_, uint256 value_, bytes data_) external {\n', '    from_;\n', '    value_;\n', '    data_;\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Contracts that should not own Ether\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n', ' * in the contract, it will allow the owner to reclaim this ether.\n', ' * @notice Ether can still be send to this contract by:\n', ' * calling functions labeled `payable`\n', ' * `selfdestruct(contract_address)`\n', ' * mining directly to the contract address\n', '*/\n', 'contract HasNoEther is Ownable {\n', '\n', '  /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '  function HasNoEther() public payable {\n', '    require(msg.value == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Disallows direct send by settings a default function without the `payable` flag.\n', '   */\n', '  function() external {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    assert(owner.send(this.balance));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Base contract for contracts that should not own things.\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @dev Solves a class of errors where a contract accidentally becomes owner of Ether, Tokens or\n', ' * Owned contracts. See respective base contracts for details.\n', ' */\n', 'contract NoOwner is HasNoEther, HasNoTokens, HasNoContracts {\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title BetexToken\n', ' */\n', 'contract BetexToken is StandardToken, NoOwner {\n', '\n', '    string public constant name = "Betex Token"; // solium-disable-line uppercase\n', '    string public constant symbol = "BETEX"; // solium-disable-line uppercase\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '    // transfer unlock time (except team and broker recipients)\n', '    uint256 public firstUnlockTime;\n', '\n', '    // transfer unlock time for the team and broker recipients\n', '    uint256 public secondUnlockTime; \n', '\n', '    // addresses locked till second unlock time\n', '    mapping (address => bool) public blockedTillSecondUnlock;\n', '\n', '    // token holders\n', '    address[] public holders;\n', '\n', '    // holder number\n', '    mapping (address => uint256) public holderNumber;\n', '\n', '    // ICO address\n', '    address public icoAddress;\n', '\n', '    // supply constants\n', '    uint256 public constant TOTAL_SUPPLY = 10000000 * (10 ** uint256(decimals));\n', '    uint256 public constant SALE_SUPPLY = 5000000 * (10 ** uint256(decimals));\n', '\n', '    // funds supply constants\n', '    uint256 public constant BOUNTY_SUPPLY = 200000 * (10 ** uint256(decimals));\n', '    uint256 public constant RESERVE_SUPPLY = 800000 * (10 ** uint256(decimals));\n', '    uint256 public constant BROKER_RESERVE_SUPPLY = 1000000 * (10 ** uint256(decimals));\n', '    uint256 public constant TEAM_SUPPLY = 3000000 * (10 ** uint256(decimals));\n', '\n', '    // funds addresses constants\n', '    address public constant BOUNTY_ADDRESS = 0x48c15e5A9343E3220cdD8127620AE286A204448a;\n', '    address public constant RESERVE_ADDRESS = 0xC8fE659AaeF73b6e41DEe427c989150e3eDAf57D;\n', '    address public constant BROKER_RESERVE_ADDRESS = 0x8697d46171aBCaD2dC5A4061b8C35f909a402417;\n', '    address public constant TEAM_ADDRESS = 0x1761988F02C75E7c3432fa31d179cad6C5843F24;\n', '\n', '    // min tokens to be a holder, 0.1\n', '    uint256 public constant MIN_HOLDER_TOKENS = 10 ** uint256(decimals - 1);\n', '    \n', '    /**\n', '     * @dev Constructor\n', '     * @param _firstUnlockTime first unlock time\n', '     * @param _secondUnlockTime second unlock time\n', '     */\n', '    function BetexToken\n', '    (\n', '        uint256 _firstUnlockTime, \n', '        uint256 _secondUnlockTime\n', '    )\n', '        public \n', '    {        \n', '        require(_secondUnlockTime > firstUnlockTime);\n', '\n', '        firstUnlockTime = _firstUnlockTime;\n', '        secondUnlockTime = _secondUnlockTime;\n', '\n', '        // Allocate tokens to the bounty fund\n', '        balances[BOUNTY_ADDRESS] = BOUNTY_SUPPLY;\n', '        holders.push(BOUNTY_ADDRESS);\n', '        emit Transfer(0x0, BOUNTY_ADDRESS, BOUNTY_SUPPLY);\n', '\n', '        // Allocate tokens to the reserve fund\n', '        balances[RESERVE_ADDRESS] = RESERVE_SUPPLY;\n', '        holders.push(RESERVE_ADDRESS);\n', '        emit Transfer(0x0, RESERVE_ADDRESS, RESERVE_SUPPLY);\n', '\n', '        // Allocate tokens to the broker reserve fund\n', '        balances[BROKER_RESERVE_ADDRESS] = BROKER_RESERVE_SUPPLY;\n', '        holders.push(BROKER_RESERVE_ADDRESS);\n', '        emit Transfer(0x0, BROKER_RESERVE_ADDRESS, BROKER_RESERVE_SUPPLY);\n', '\n', '        // Allocate tokens to the team fund\n', '        balances[TEAM_ADDRESS] = TEAM_SUPPLY;\n', '        holders.push(TEAM_ADDRESS);\n', '        emit Transfer(0x0, TEAM_ADDRESS, TEAM_SUPPLY);\n', '\n', '        totalSupply_ = TOTAL_SUPPLY.sub(SALE_SUPPLY);\n', '    }\n', '\n', '    /**\n', '     * @dev set ICO address and allocate sale supply to it\n', '     */\n', '    function setICO(address _icoAddress) public onlyOwner {\n', '        require(_icoAddress != address(0));\n', '        require(icoAddress == address(0));\n', '        require(totalSupply_ == TOTAL_SUPPLY.sub(SALE_SUPPLY));\n', '        \n', '        // Allocate tokens to the ico contract\n', '        balances[_icoAddress] = SALE_SUPPLY;\n', '        emit Transfer(0x0, _icoAddress, SALE_SUPPLY);\n', '\n', '        icoAddress = _icoAddress;\n', '        totalSupply_ = TOTAL_SUPPLY;\n', '    }\n', '    \n', '    // standard transfer function with timelocks\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(transferAllowed(msg.sender));\n', '        enforceSecondLock(msg.sender, _to);\n', '        preserveHolders(msg.sender, _to, _value);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    // standard transferFrom function with timelocks\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(transferAllowed(msg.sender));\n', '        enforceSecondLock(msg.sender, _to);\n', '        preserveHolders(_from, _to, _value);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    // get holders count\n', '    function getHoldersCount() public view returns (uint256) {\n', '        return holders.length;\n', '    }\n', '\n', '    // enforce second lock on receiver\n', '    function enforceSecondLock(address _from, address _to) internal {\n', '        if (now < secondUnlockTime) { // solium-disable-line security/no-block-members\n', '            if (_from == TEAM_ADDRESS || _from == BROKER_RESERVE_ADDRESS) {\n', '                require(balances[_to] == uint256(0) || blockedTillSecondUnlock[_to]);\n', '                blockedTillSecondUnlock[_to] = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    // preserve holders list\n', '    function preserveHolders(address _from, address _to, uint256 _value) internal {\n', '        if (balances[_from].sub(_value) < MIN_HOLDER_TOKENS) \n', '            removeHolder(_from);\n', '        if (balances[_to].add(_value) >= MIN_HOLDER_TOKENS) \n', '            addHolder(_to);   \n', '    }\n', '\n', '    // remove holder from the holders list\n', '    function removeHolder(address _holder) internal {\n', '        uint256 _number = holderNumber[_holder];\n', '\n', '        if (_number == 0 || holders.length == 0 || _number > holders.length)\n', '            return;\n', '\n', '        uint256 _index = _number.sub(1);\n', '        uint256 _lastIndex = holders.length.sub(1);\n', '        address _lastHolder = holders[_lastIndex];\n', '\n', '        if (_index != _lastIndex) {\n', '            holders[_index] = _lastHolder;\n', '            holderNumber[_lastHolder] = _number;\n', '        }\n', '\n', '        holderNumber[_holder] = 0;\n', '        holders.length = _lastIndex;\n', '    } \n', '\n', '    // add holder to the holders list\n', '    function addHolder(address _holder) internal {\n', '        if (holderNumber[_holder] == 0) {\n', '            holders.push(_holder);\n', '            holderNumber[_holder] = holders.length;\n', '        }\n', '    }\n', '\n', '    // @return true if transfer operation is allowed\n', '    function transferAllowed(address _sender) internal view returns(bool) {\n', '        if (now > secondUnlockTime || _sender == icoAddress) // solium-disable-line security/no-block-members\n', '            return true;\n', '        if (now < firstUnlockTime) // solium-disable-line security/no-block-members\n', '            return false;\n', '        if (blockedTillSecondUnlock[_sender])\n', '            return false;\n', '        return true;\n', '    }\n', '\n', '}']
