['pragma solidity 0.4.21;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public DAO; // DAO contract\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _owner) public onlyOwner {\n', '        owner = _owner;\n', '    }\n', '\n', '    function setDAO(address _DAO) onlyMasters public {\n', '        DAO = _DAO;\n', '    }\n', '\n', '    modifier onlyMasters() {\n', '        require(msg.sender == owner || msg.sender == DAO);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract Dust is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    string public name = "Dust";\n', '    string public symbol = "DST";\n', '    uint8 public decimals = 0;\n', '\n', '    uint public totalSupply = 2000000000;\n', '\n', '    uint public etherToDustPrice = 1000000000000000; // sell priec\n', '    uint public dustToEtherPrice = 800000000000000; // buy price\n', '    string public information; // info\n', '\n', '    mapping(address => uint) private balances;\n', '    mapping(address => mapping(address => uint)) private allowed;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '    event Refill(uint _value);\n', '    event Withdrawal(uint _value);\n', '\n', '    function Dust() public {\n', '        balances[address(this)] = totalSupply;\n', '        emit Transfer(address(0), address(this), totalSupply);\n', '    }\n', '\n', '    /**\n', '    * @dev set public information\n', '    */\n', '    function setInformation(string _information) external onlyMasters {\n', '        information = _information;\n', '    }\n', '\n', '    /**\n', '    * @dev set new prices for buy/sell tokens from contract\n', '    */\n', '    function setPrices(uint _etherToDustPrice, uint _dustToEtherPrice) external onlyMasters {\n', '        require(_etherToDustPrice > _dustToEtherPrice);\n', '        etherToDustPrice = _etherToDustPrice;\n', '        dustToEtherPrice = _dustToEtherPrice;\n', '    }\n', '\n', '    /**\n', '    * @dev internal transfer function\n', '    */\n', '    function _transfer(address _from, address _to, uint _value) internal returns (bool){\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '        require(balances[_from] >= _value);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev service transfer token function, allowed only from masters\n', '    */\n', '    function serviceTransfer(address _from, address _to, uint _value) external onlyMasters returns (bool success) {\n', '        return _transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    */\n', '    function transfer(address _to, uint _value) external returns (bool) {\n', '        return _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value) external returns (bool) {\n', '        require(_value <= allowed[_from][_to]);\n', '        allowed[_from][_to] = allowed[_from][_to].sub(_value);\n', '        return _transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     */\n', '    function approve(address _spender, uint _value) external returns (bool) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) external returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function() external payable {\n', '        convertEtherToDust();\n', '    }\n', '\n', '    // sell tokens\n', '    function convertEtherToDust() public payable {\n', '        uint amount = msg.value.div(etherToDustPrice);\n', '        require(amount > 0);\n', '        if (amount > balances[this]) {\n', '            amount = balances[this];\n', '        }\n', '        _transfer(this, msg.sender, amount);\n', '        uint diff = msg.value.sub(amount.mul(etherToDustPrice));\n', '        if (diff > 0) {\n', '            msg.sender.transfer(diff);\n', '        }\n', '    }\n', '\n', '    // buy tokens\n', '    function convertDustToEther(uint _amount) external {\n', '        uint value = _amount.mul(dustToEtherPrice);\n', '        require(address(this).balance >= value);\n', '        _transfer(msg.sender, this, _amount);\n', '        msg.sender.transfer(value);\n', '    }\n', '\n', '    // withdraw available funds from contract\n', '    function withdrawFunds(address _to, uint _value) external onlyMasters {\n', '        require(address(this).balance >= _value);\n', '        _to.transfer(_value);\n', '        emit Withdrawal(_value);\n', '    }\n', '\n', '    // refill contract with funds\n', '    function refillFunds() external payable {\n', '        require(msg.value >= dustToEtherPrice);\n', '        emit Refill(msg.value);\n', '    }\n', '}']