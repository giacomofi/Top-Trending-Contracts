['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '    uint256 constant public MAX_UINT256 =\n', '    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '\n', '    function safeAdd(uint256 x, uint256 y) pure internal returns (uint256 z) {\n', '        if (x > MAX_UINT256 - y) revert();\n', '        return x + y;\n', '    }\n', '\n', '    function safeSub(uint256 x, uint256 y) pure internal returns (uint256 z) {\n', '        if (x < y) revert();\n', '        return x - y;\n', '    }\n', '\n', '    function safeMul(uint256 x, uint256 y) pure internal returns (uint256 z) {\n', '        if (y == 0) return 0;\n', '        if (x > MAX_UINT256 / y) revert();\n', '        return x * y;\n', '    }\n', '\n', '}\n', '\n', '\n', '//contract for defining owener and to transfer owenership to others\n', 'contract Ownable {\n', '    address public owner; // contract creator will be the owner\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0)); \n', '        owner = newOwner;\n', '    }\n', '}\n', ' /* New ERC223 contract interface */\n', ' \n', '\n', 'contract ERC223Interface {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '  \n', '\n', '    function transfer(address to, uint256 value, bytes data) public returns (bool ok);\n', '    function transfer(address to, uint256 value, bytes data, string custom_fallback) public returns (bool ok);\n', '  \n', '    event Transfer(address indexed from, address indexed to, uint256 value, bytes indexed data);\n', '}\n', '\n', '\n', 'contract ERC20Interface {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed from, address indexed spender, uint256 value);\n', '    \n', '    function transfer(address to, uint256 value) public returns (bool ok);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\n', '    function approve(address _spender, uint256 _value) public returns(bool success);\n', '    function allowance(address _owner, address _spender) public constant returns(uint256 remaining);\n', '\n', '}\n', '\n', '\n', 'contract ContractReceiver {\n', '     \n', '    struct TKN {\n', '        address sender;\n', '        uint value;\n', '        bytes data;\n', '        bytes4 sig;\n', '    }\n', '        \n', '    function tokenFallback(address _from, uint256 _value, bytes _data) public pure {\n', '        TKN memory tkn;\n', '        tkn.sender = _from;\n', '        tkn.value = _value;\n', '        tkn.data = _data;\n', '        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '        tkn.sig = bytes4(u);\n', '      \n', '      /* tkn variable is analogue of msg variable of Ether transaction\n', '      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n', '      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n', '      *  tkn.data is data of token transaction   (analogue of msg.data)\n', '      *  tkn.sig is 4 bytes signature of function\n', '      *  if data of token transaction is a function execution\n', '      */\n', '    }\n', '}\n', '\n', '\n', 'contract StandardToken is ERC223Interface, ERC20Interface, SafeMath, ContractReceiver {\n', '    mapping(address => uint) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '    \n', '        balances[_from] = safeSub(balanceOf(_from), _value); \n', '    \n', '        balances[_to] = safeAdd(balanceOf(_to), _value);\n', '        allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '  }\n', '\n', '    // @dev function to increaseApproval to the spender\n', '  function increaseApproval (address _spender, uint256 _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender],_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  // @dev function to decreaseApproval to spender\n', '  function decreaseApproval (address _spender, uint256 _subtractedValue) public returns (bool success) {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = safeSub(oldValue,_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  \n', '  \n', '  //@dev  function that is called when a user or another contract wants to transfer funds .\n', '    function transfer(address _to, uint256 _value, bytes _data, string _custom_fallback) public returns (bool success) {\n', '        if (isContract(_to)) {\n', '            if (balanceOf(msg.sender) < _value) {  \n', '                revert();\n', '            }\n', '            balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '            balances[_to] = safeAdd(balanceOf(_to), _value);\n', '            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n', '            emit Transfer(msg.sender, _to, _value, _data);\n', '            return true;\n', '        }\n', '        else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '  \n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success) {\n', '    \n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, _data);\n', '        }\n', '        else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '  \n', '  // Standard function transfer similar to ERC20 transfer with no _data .\n', '  // Added due to backwards compatibility reasons .\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '      \n', '    //standard function transfer similar to ERC20 transfer with no _data\n', '    //added due to backwards compatibility reasons\n', '        bytes memory empty;\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, empty);\n', '        }\n', '        else {\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '    function isContract(address _addr) private view returns (bool is_contract) {\n', '        uint length;\n', '        assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        return (length > 0);\n', '    }\n', '\n', '  //function that is called when transaction target is an address\n', '    function transferToAddress(address _to, uint256 _value, bytes _data) private returns (bool) {\n', '        \n', '        if (balanceOf(msg.sender) < _value) revert();\n', '        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '        balances[_to] = safeAdd(balanceOf(_to), _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '  \n', '  //function that is called when transaction target is a contract\n', '    function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool success) {\n', '        if (balanceOf(msg.sender) < _value) revert();\n', '        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '        balances[_to] = safeAdd(balanceOf(_to), _value);\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '\n', '// @dev contract that can burn tokens or can reduce the totalSupply tokens\n', 'contract BurnableToken is StandardToken,Ownable {\n', '    event Burn(address indexed burner, uint256 value);\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '\n', '    function burn(uint256 _value)  onlyOwner public  returns (bool) {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '        address burner = msg.sender;\n', '        balances[burner] = safeSub(balances[burner], _value);\n', '        totalSupply = safeSub(totalSupply, _value);\n', '        emit Burn(burner, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' */\n', '\n', 'contract MintableToken is BurnableToken {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        bytes memory empty;\n', '\n', '        require ( _amount > 0);\n', '\n', '        // if (balanceOf(msg.sender) < _value) revert();\n', '        // if( safeAdd(circulatingCoins, _amount) > totalSupply ) revert();\n', '        \n', '        totalSupply = safeAdd(totalSupply, _amount);\n', '        balances[_to] = safeAdd(balances[_to], _amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount, empty);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract EMIToken is StandardToken, MintableToken {\n', '    string public name = "EMITOKEN";\n', '    string public symbol = "EMI";\n', '    uint8 public decimals = 8;\n', '    uint256 public initialSupply = 600000000 * (10 ** uint256(decimals));\n', '    function EMIToken() public{\n', '\n', '        totalSupply = initialSupply;\n', '        balances[msg.sender] = initialSupply; // Send all tokens to owner\n', '\n', '        emit Transfer(0x0, msg.sender, initialSupply);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '    uint256 constant public MAX_UINT256 =\n', '    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '\n', '    function safeAdd(uint256 x, uint256 y) pure internal returns (uint256 z) {\n', '        if (x > MAX_UINT256 - y) revert();\n', '        return x + y;\n', '    }\n', '\n', '    function safeSub(uint256 x, uint256 y) pure internal returns (uint256 z) {\n', '        if (x < y) revert();\n', '        return x - y;\n', '    }\n', '\n', '    function safeMul(uint256 x, uint256 y) pure internal returns (uint256 z) {\n', '        if (y == 0) return 0;\n', '        if (x > MAX_UINT256 / y) revert();\n', '        return x * y;\n', '    }\n', '\n', '}\n', '\n', '\n', '//contract for defining owener and to transfer owenership to others\n', 'contract Ownable {\n', '    address public owner; // contract creator will be the owner\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0)); \n', '        owner = newOwner;\n', '    }\n', '}\n', ' /* New ERC223 contract interface */\n', ' \n', '\n', 'contract ERC223Interface {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '  \n', '\n', '    function transfer(address to, uint256 value, bytes data) public returns (bool ok);\n', '    function transfer(address to, uint256 value, bytes data, string custom_fallback) public returns (bool ok);\n', '  \n', '    event Transfer(address indexed from, address indexed to, uint256 value, bytes indexed data);\n', '}\n', '\n', '\n', 'contract ERC20Interface {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed from, address indexed spender, uint256 value);\n', '    \n', '    function transfer(address to, uint256 value) public returns (bool ok);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\n', '    function approve(address _spender, uint256 _value) public returns(bool success);\n', '    function allowance(address _owner, address _spender) public constant returns(uint256 remaining);\n', '\n', '}\n', '\n', '\n', 'contract ContractReceiver {\n', '     \n', '    struct TKN {\n', '        address sender;\n', '        uint value;\n', '        bytes data;\n', '        bytes4 sig;\n', '    }\n', '        \n', '    function tokenFallback(address _from, uint256 _value, bytes _data) public pure {\n', '        TKN memory tkn;\n', '        tkn.sender = _from;\n', '        tkn.value = _value;\n', '        tkn.data = _data;\n', '        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '        tkn.sig = bytes4(u);\n', '      \n', '      /* tkn variable is analogue of msg variable of Ether transaction\n', '      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n', '      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n', '      *  tkn.data is data of token transaction   (analogue of msg.data)\n', '      *  tkn.sig is 4 bytes signature of function\n', '      *  if data of token transaction is a function execution\n', '      */\n', '    }\n', '}\n', '\n', '\n', 'contract StandardToken is ERC223Interface, ERC20Interface, SafeMath, ContractReceiver {\n', '    mapping(address => uint) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '    \n', '        balances[_from] = safeSub(balanceOf(_from), _value); \n', '    \n', '        balances[_to] = safeAdd(balanceOf(_to), _value);\n', '        allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '  }\n', '\n', '    // @dev function to increaseApproval to the spender\n', '  function increaseApproval (address _spender, uint256 _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender],_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  // @dev function to decreaseApproval to spender\n', '  function decreaseApproval (address _spender, uint256 _subtractedValue) public returns (bool success) {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = safeSub(oldValue,_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  \n', '  \n', '  //@dev  function that is called when a user or another contract wants to transfer funds .\n', '    function transfer(address _to, uint256 _value, bytes _data, string _custom_fallback) public returns (bool success) {\n', '        if (isContract(_to)) {\n', '            if (balanceOf(msg.sender) < _value) {  \n', '                revert();\n', '            }\n', '            balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '            balances[_to] = safeAdd(balanceOf(_to), _value);\n', '            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n', '            emit Transfer(msg.sender, _to, _value, _data);\n', '            return true;\n', '        }\n', '        else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '  \n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success) {\n', '    \n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, _data);\n', '        }\n', '        else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '  \n', '  // Standard function transfer similar to ERC20 transfer with no _data .\n', '  // Added due to backwards compatibility reasons .\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '      \n', '    //standard function transfer similar to ERC20 transfer with no _data\n', '    //added due to backwards compatibility reasons\n', '        bytes memory empty;\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, empty);\n', '        }\n', '        else {\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '    function isContract(address _addr) private view returns (bool is_contract) {\n', '        uint length;\n', '        assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        return (length > 0);\n', '    }\n', '\n', '  //function that is called when transaction target is an address\n', '    function transferToAddress(address _to, uint256 _value, bytes _data) private returns (bool) {\n', '        \n', '        if (balanceOf(msg.sender) < _value) revert();\n', '        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '        balances[_to] = safeAdd(balanceOf(_to), _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '  \n', '  //function that is called when transaction target is a contract\n', '    function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool success) {\n', '        if (balanceOf(msg.sender) < _value) revert();\n', '        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '        balances[_to] = safeAdd(balanceOf(_to), _value);\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '\n', '// @dev contract that can burn tokens or can reduce the totalSupply tokens\n', 'contract BurnableToken is StandardToken,Ownable {\n', '    event Burn(address indexed burner, uint256 value);\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '\n', '    function burn(uint256 _value)  onlyOwner public  returns (bool) {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '        address burner = msg.sender;\n', '        balances[burner] = safeSub(balances[burner], _value);\n', '        totalSupply = safeSub(totalSupply, _value);\n', '        emit Burn(burner, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' */\n', '\n', 'contract MintableToken is BurnableToken {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        bytes memory empty;\n', '\n', '        require ( _amount > 0);\n', '\n', '        // if (balanceOf(msg.sender) < _value) revert();\n', '        // if( safeAdd(circulatingCoins, _amount) > totalSupply ) revert();\n', '        \n', '        totalSupply = safeAdd(totalSupply, _amount);\n', '        balances[_to] = safeAdd(balances[_to], _amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount, empty);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract EMIToken is StandardToken, MintableToken {\n', '    string public name = "EMITOKEN";\n', '    string public symbol = "EMI";\n', '    uint8 public decimals = 8;\n', '    uint256 public initialSupply = 600000000 * (10 ** uint256(decimals));\n', '    function EMIToken() public{\n', '\n', '        totalSupply = initialSupply;\n', '        balances[msg.sender] = initialSupply; // Send all tokens to owner\n', '\n', '        emit Transfer(0x0, msg.sender, initialSupply);\n', '    }\n', '}']
