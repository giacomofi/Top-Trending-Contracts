['pragma solidity ^0.4.23;\n', '\n', 'contract Control {\n', '    address public owner;\n', '    bool public pause;\n', '\n', '    event PAUSED();\n', '    event STARTED();\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused {\n', '        require(pause);\n', '        _;\n', '    }\n', '\n', '    modifier whenNotPaused {\n', '        require(!pause);\n', '        _;\n', '    }\n', '\n', '    function setOwner(address _owner) onlyOwner public {\n', '        owner = _owner;\n', '    }\n', '\n', '    function setState(bool _pause) onlyOwner public {\n', '        pause = _pause;\n', '        if (pause) {\n', '            emit PAUSED();\n', '        } else {\n', '            emit STARTED();\n', '        }\n', '    }\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '}\n', '\n', 'contract ERC20Token {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint256 tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    function symbol() public constant returns (string);\n', '    function decimals() public constant returns (uint256);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract token is Control, ERC20Token {\n', '    using SafeMath for uint256;\n', '    \n', '    uint256 public totalSupply;\n', '    uint256 public forSell;\n', '    uint256 public decimals;\n', '    \n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '    \n', '    string public symbol;\n', '    string public name;\n', '    \n', '    constructor(string _name) public {\n', '        owner = 0x60dc10E6b27b6c70B97d1F3370198d076F5A48D8;\n', '        decimals = 18;\n', '        totalSupply = 100000000000 * (10 ** decimals);\n', '        name = _name;\n', '        symbol = _name;\n', '        forSell = 50000000000 * (10 ** decimals);\n', '        balanceOf[owner] = totalSupply.sub(forSell);\n', '        \n', '        emit Transfer(0, owner, balanceOf[owner]);\n', '    }\n', '    \n', '    function transfer(address to, uint256 amount) public whenNotPaused returns (bool) {\n', '        require(balanceOf[msg.sender] >= amount);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\n', '        balanceOf[to] = balanceOf[to].add(amount);\n', '        \n', '        emit Transfer(msg.sender, to, amount);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address to, uint256 amount) public whenNotPaused returns (bool) {\n', '        allowance[msg.sender][to] = amount;\n', '        \n', '        emit Approval(msg.sender, to , amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint256 amount) public whenNotPaused returns (bool) {\n', '        require(allowance[from][msg.sender] >= amount);\n', '        require(balanceOf[from] >= amount);\n', '        \n', '        allowance[from][msg.sender] = allowance[from][msg.sender].sub(amount);\n', '        balanceOf[from] = balanceOf[from].sub(amount);\n', '        balanceOf[to] = balanceOf[to].add(amount);\n', '        \n', '        emit Transfer(from, to, amount);\n', '        return true;\n', '    }\n', '    \n', '    function totalSupply() public constant returns (uint) {\n', '        return totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balanceOf[tokenOwner];\n', '    }\n', '    \n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowance[tokenOwner][spender];\n', '    }\n', '    \n', '    function symbol() public constant returns (string) {\n', '        return symbol;\n', '    }\n', '    \n', '    function decimals() public constant returns (uint256){\n', '        return decimals;\n', '    }\n', '    \n', '    function sellToken() payable public {\n', '        require(msg.value >= 1000000000000000);\n', '        require(forSell >= 0);\n', '        uint256 amount = msg.value.mul(100000000);\n', '        forSell = forSell.sub(amount);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\n', '        \n', '        emit Transfer(0, msg.sender, amount);\n', '    }\n', '    \n', '    function() payable public {\n', '        sellToken();\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'contract Control {\n', '    address public owner;\n', '    bool public pause;\n', '\n', '    event PAUSED();\n', '    event STARTED();\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused {\n', '        require(pause);\n', '        _;\n', '    }\n', '\n', '    modifier whenNotPaused {\n', '        require(!pause);\n', '        _;\n', '    }\n', '\n', '    function setOwner(address _owner) onlyOwner public {\n', '        owner = _owner;\n', '    }\n', '\n', '    function setState(bool _pause) onlyOwner public {\n', '        pause = _pause;\n', '        if (pause) {\n', '            emit PAUSED();\n', '        } else {\n', '            emit STARTED();\n', '        }\n', '    }\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '}\n', '\n', 'contract ERC20Token {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint256 tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    function symbol() public constant returns (string);\n', '    function decimals() public constant returns (uint256);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract token is Control, ERC20Token {\n', '    using SafeMath for uint256;\n', '    \n', '    uint256 public totalSupply;\n', '    uint256 public forSell;\n', '    uint256 public decimals;\n', '    \n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '    \n', '    string public symbol;\n', '    string public name;\n', '    \n', '    constructor(string _name) public {\n', '        owner = 0x60dc10E6b27b6c70B97d1F3370198d076F5A48D8;\n', '        decimals = 18;\n', '        totalSupply = 100000000000 * (10 ** decimals);\n', '        name = _name;\n', '        symbol = _name;\n', '        forSell = 50000000000 * (10 ** decimals);\n', '        balanceOf[owner] = totalSupply.sub(forSell);\n', '        \n', '        emit Transfer(0, owner, balanceOf[owner]);\n', '    }\n', '    \n', '    function transfer(address to, uint256 amount) public whenNotPaused returns (bool) {\n', '        require(balanceOf[msg.sender] >= amount);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\n', '        balanceOf[to] = balanceOf[to].add(amount);\n', '        \n', '        emit Transfer(msg.sender, to, amount);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address to, uint256 amount) public whenNotPaused returns (bool) {\n', '        allowance[msg.sender][to] = amount;\n', '        \n', '        emit Approval(msg.sender, to , amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint256 amount) public whenNotPaused returns (bool) {\n', '        require(allowance[from][msg.sender] >= amount);\n', '        require(balanceOf[from] >= amount);\n', '        \n', '        allowance[from][msg.sender] = allowance[from][msg.sender].sub(amount);\n', '        balanceOf[from] = balanceOf[from].sub(amount);\n', '        balanceOf[to] = balanceOf[to].add(amount);\n', '        \n', '        emit Transfer(from, to, amount);\n', '        return true;\n', '    }\n', '    \n', '    function totalSupply() public constant returns (uint) {\n', '        return totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balanceOf[tokenOwner];\n', '    }\n', '    \n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowance[tokenOwner][spender];\n', '    }\n', '    \n', '    function symbol() public constant returns (string) {\n', '        return symbol;\n', '    }\n', '    \n', '    function decimals() public constant returns (uint256){\n', '        return decimals;\n', '    }\n', '    \n', '    function sellToken() payable public {\n', '        require(msg.value >= 1000000000000000);\n', '        require(forSell >= 0);\n', '        uint256 amount = msg.value.mul(100000000);\n', '        forSell = forSell.sub(amount);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\n', '        \n', '        emit Transfer(0, msg.sender, amount);\n', '    }\n', '    \n', '    function() payable public {\n', '        sellToken();\n', '    }\n', '}']
