['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', '// &#39;TestToken&#39;  token contract\n', '//\n', '// Deployed to : main net\n', '// Symbol      : L51TT\n', '// Name        : Lab51TestToken\n', '// Total supply: 100000000\n', '// Decimals    : 18\n', '//\n', '// \n', '//\n', '// (c) 051 Labs\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(int a, int b) public pure returns (int c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(int a, int b) public pure returns (int c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(int a, int b) public pure returns (int c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(int a, int b) public pure returns (int c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// \n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (int);\n', '    function balanceOf(address tokenOwner) public constant returns (int balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (int remaining);\n', '    function transfer(address to, int tokens) public returns (bool success);\n', '    function approve(address spender, int tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, int tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, int tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, int tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, int256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract Lab51TestToken is ERC20Interface, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    int8 public decimals;\n', '    int public _totalSupply;\n', '\n', '    mapping(address => int) balances;\n', '    mapping(address => mapping(address => int)) allowed;\n', '\n', '\n', '\n', '    //- In mappingg The entire storage space is virtually initialized to 0\n', '    //-    -2   => operation inside whitelist implemented or result is unknown\n', '    //-    -1   => operation inside whitelist not permitted\n', '    //-     0   => NOT existing in whitelist AKA NOT Allowed\n', '    //-     1   => exist in whitelist and allowed\n', '    //-     2   => exist in whitelist but in quarantine\n', '    //-     3   => exist in whitelist but suspended\n', '    //-     4   => exist in whitelist but disabled\n', '    //-     5   => exist in whitelist but erased\n', '    mapping(address => int) private _whitelist;\n', '\n', '    //- modifier onlyOwner() - Prevents function from running if it is called by anyone other than the owner.\n', '    function Subscribe(address addr) onlyOwner public returns (bool) {\n', '       _whitelist[addr] = 1;\n', '       return true;\n', '    }\n', '\n', '\n', '    //- modifier onlyOwner() - Prevents function from running if it is called by anyone other than the owner.   \n', '    function SetSubscriptionTo(address addr, int v) onlyOwner public returns (bool) {\n', '       _whitelist[addr] = v;\n', '       return true;\n', '    }\n', '\n', '    function IsAllowed(address addr) constant private returns (int) {\n', '       return _whitelist[addr];\n', '    }\n', '\n', '    //- modifier onlyOwner() - Prevents function from running if it is called by anyone other than the owner.\n', '    function CheckIfIsAllowed(address addr) onlyOwner constant public returns (int) {\n', '       return IsAllowed(addr);\n', '    }\n', '\n', '\n', '\n', '   \n', '   // @dev Function to mint tokens\n', '   // @param _to The address that will receive the minted tokens.\n', '   // @param _amount The amount of tokens to mint.\n', '   // @return A boolean that indicates if the operation was successful.\n', '   function mint( address _to, int amount ) onlyOwner  public  returns (bool) {\n', '      _totalSupply = _totalSupply + amount;\n', '      balances[_to] = balances[_to] + amount;\n', '      return true;\n', '   }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function Lab51TestToken() public {\n', '        symbol = "L51TT";\n', '        name = "Lab51 Test Token";\n', '        decimals = 18;\n', '        _totalSupply = -100000000000000000000000000;\n', '        balances[0x8aD2a62AE1EDDAB27322541E6602466f61428e8B] = _totalSupply;\n', '        Transfer(address(0), 0x8aD2a62AE1EDDAB27322541E6602466f61428e8B, _totalSupply);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (int) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account tokenOwner\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (int balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to to account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, int tokens) public returns (bool success) {\n', '        balances[msg.sender] = safeAdd (balances[msg.sender], tokens);\n', '        balances[to] = safeSub(balances[to], tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for spender to transferFrom(...) tokens\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, int tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer tokens from the from account to the to account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the from account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, int tokens) public returns (bool success) {\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (int remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for spender to transferFrom(...) tokens\n', '    // from the token owner&#39;s account. The spender contract function\n', '    // receiveApproval(...) is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, int tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Don&#39;t accept ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, int tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']