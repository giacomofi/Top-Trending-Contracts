['pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract CFXToken {\n', '\t// Setting constant\n', '\tuint256 constant public TOTAL_TOKEN = 10 ** 9;\n', '\tuint256 constant public TOKEN_FOR_ICO = 650 * 10 ** 6;\n', '\tuint256 constant public TOKEN_FOR_COMPANY = 200 * 10 ** 6;\n', '\tuint256 constant public TOKEN_FOR_BONUS = 50 * 10 ** 6;\n', '\t\n', '\tmapping (address => uint256) public tokenForTeam;\n', '\tmapping (address => uint256) public tokenForTeamGet;\n', '\taddress[] public teamAddress;\n', '\n', '\tuint public startTime;\n', '\t\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 8;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function CFXToken(\n', '    ) public {\n', '        totalSupply = TOTAL_TOKEN * 10 ** uint256(decimals); // Update total supply with the decimal amount\n', '        name = "CFX Token";                                 // Set the name for display purposes\n', '        symbol = "CFX";                               \t\t// Set the symbol for display purposes\n', '\t\t\n', '\t\t// Initializes\n', '\t\tstartTime = 1512997200; // need to update start time\n', '\t\t\n', '\t\ttokenForTeam[0x4B7786bD8eB1F738699290Bb83cA8E28fEDea4b0] =\t20 * 10 ** 6 * 10 ** uint256(decimals);\n', '\t\ttokenForTeam[0x040440286a443822211dDe0e7E9DA3F49aF2EBC7] =\t20 * 10 ** 6 * 10 ** uint256(decimals);\n', '\t\ttokenForTeam[0x4f7a5A2BafAd56562ac4Ccc85FE004BB84435F71] =\t20 * 10 ** 6 * 10 ** uint256(decimals);\n', '\t\ttokenForTeam[0x7E0D3AaaCB57b0Fd109D9F16e00a375ECa48b41D] =\t20 * 10 ** 6 * 10 ** uint256(decimals);\n', '\t\ttokenForTeam[0xc456aC342f17E7003A03479e275fDA322dE38681] =\t500  * 10 ** 3 * 10 ** uint256(decimals);\n', '\t\ttokenForTeam[0xB19d3c4c494B5a3d5d72E0e47076AefC1c643D24] =\t300  * 10 ** 3 * 10 ** uint256(decimals);\n', '\t\ttokenForTeam[0x88311485647e19510298d7Dbf0a346D5B808DF03] =\t500  * 10 ** 3 * 10 ** uint256(decimals);\n', '\t\ttokenForTeam[0x2f2754e403b58D8F21c4Ba501eff4c5f0dd95b7F] =\t500  * 10 ** 3 * 10 ** uint256(decimals);\n', '\t\ttokenForTeam[0x45cD08764e06c1563d4B13b85cCE7082Be0bA6D1] =\t100  * 10 ** 3 * 10 ** uint256(decimals);\n', '\t\ttokenForTeam[0xB08924a0D0AF93Fa29e5B0ba103A339704cdeFdb] =\t100  * 10 ** 3 * 10 ** uint256(decimals);\n', '\t\ttokenForTeam[0xa8bD7C22d37ea1887b425a9B0A3458A186bf6E77] =\t1 * 10 ** 6 * 10 ** uint256(decimals);\n', '\t\ttokenForTeam[0xe387125f1b24E59f7811d26fbb26bdA1c599b061] =\t1 * 10 ** 6 * 10 ** uint256(decimals);\n', '\t\ttokenForTeam[0xC5b644c5fDe01fce561496179a8Bb7886349bD75] =\t1 * 10 ** 6 * 10 ** uint256(decimals);\n', '\t\ttokenForTeam[0xe4dB43bcB8aecFf58C720F70414A9d36Fd7B9F78] =\t5 * 10 ** 6 * 10 ** uint256(decimals);\n', '\t\ttokenForTeam[0xf28edB52E808cd9DCe18A87fD94D373D6B9f65ae] =\t5 * 10 ** 6 * 10 ** uint256(decimals);\n', '\t\ttokenForTeam[0x87CE30ad0B66266b30c206a9e39A3FC0970db5eF] =\t5 * 10 ** 6 * 10 ** uint256(decimals);\n', '\t\t\n', '\t\t// address of teams\n', '\t\tteamAddress.push(0x4B7786bD8eB1F738699290Bb83cA8E28fEDea4b0);\n', '\t\tteamAddress.push(0x040440286a443822211dDe0e7E9DA3F49aF2EBC7);\n', '\t\tteamAddress.push(0x4f7a5A2BafAd56562ac4Ccc85FE004BB84435F71);\n', '\t\tteamAddress.push(0x7E0D3AaaCB57b0Fd109D9F16e00a375ECa48b41D);\n', '\t\tteamAddress.push(0xc456aC342f17E7003A03479e275fDA322dE38681);\n', '\t\tteamAddress.push(0xB19d3c4c494B5a3d5d72E0e47076AefC1c643D24);\n', '\t\tteamAddress.push(0x88311485647e19510298d7Dbf0a346D5B808DF03);\n', '\t\tteamAddress.push(0x2f2754e403b58D8F21c4Ba501eff4c5f0dd95b7F);\n', '\t\tteamAddress.push(0x45cD08764e06c1563d4B13b85cCE7082Be0bA6D1);\n', '\t\tteamAddress.push(0xB08924a0D0AF93Fa29e5B0ba103A339704cdeFdb);\n', '\t\tteamAddress.push(0xa8bD7C22d37ea1887b425a9B0A3458A186bf6E77);\n', '\t\tteamAddress.push(0xe387125f1b24E59f7811d26fbb26bdA1c599b061);\n', '\t\tteamAddress.push(0xC5b644c5fDe01fce561496179a8Bb7886349bD75);\n', '\t\tteamAddress.push(0xe4dB43bcB8aecFf58C720F70414A9d36Fd7B9F78);\n', '\t\tteamAddress.push(0xf28edB52E808cd9DCe18A87fD94D373D6B9f65ae);\n', '\t\tteamAddress.push(0x87CE30ad0B66266b30c206a9e39A3FC0970db5eF);\n', '\n', '\t\tuint arrayLength = teamAddress.length;\n', '\t\tfor (uint i=0; i<arrayLength; i++) {\n', '\t\t\ttokenForTeamGet[teamAddress[i]] = tokenForTeam[teamAddress[i]] * 1 / 10; // first period\n', '\t\t\tbalanceOf[teamAddress[i]] = tokenForTeamGet[teamAddress[i]];\n', '\t\t\ttokenForTeam[teamAddress[i]] -= tokenForTeamGet[teamAddress[i]];\n', '\t\t}\n', '\t\tbalanceOf[0x966F2884524858326DfF216394a61b9894166c68] = TOKEN_FOR_ICO * 10 ** uint256(decimals);\n', '\t\tbalanceOf[0x8eee1a576FaF1332466AaDD9F35Ebf5b6e0162c9] = TOKEN_FOR_COMPANY * 10 ** uint256(decimals);\n', '\t\tbalanceOf[0xAe77D38cba1AA5D5288DFC5834a16CcD24dd4041] = TOKEN_FOR_BONUS * 10 ** uint256(decimals);\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction getTeamFund() public {\n', '\t\t// Second period after 9 months\n', '\t\tif (now >= startTime + 270 days) {\n', '\t\t\tif (tokenForTeamGet[msg.sender] <  tokenForTeam[msg.sender] * 55 / 100) {\n', '\t\t\t\tuint256 getValue2 = tokenForTeam[msg.sender] * 45 / 100;\n', '\t\t\t\ttokenForTeamGet[msg.sender] += getValue2; // first period\n', '\t\t\t\tbalanceOf[msg.sender] += getValue2;\t\t\n', '\t\t\t}\n', '\t\t}\n', '\t\t\n', '\t\t// Third period after 9 + 6 months\n', '\t\tif (now >= startTime + 450 days) {\n', '\t\t\tif (tokenForTeamGet[msg.sender] <  tokenForTeam[msg.sender]) {\n', '\t\t\t\tuint256 getValue3 = tokenForTeam[msg.sender] * 45 / 100;\n', '\t\t\t\ttokenForTeamGet[msg.sender] += getValue3; // first period\n', '\t\t\t\tbalanceOf[msg.sender] += getValue3;\t\n', '\t\t\t}\t\t\t\n', '\t\t}\n', '    }\n', '}']