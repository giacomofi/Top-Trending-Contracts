['pragma solidity ^0.4.23;\n', '\n', '\n', '//1,45 left. -*-*-*-*- 45 55 programmer. -*-*-*-*-*-upper 35 right.\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Cryptoraces {\n', '\n', '\n', '  using SafeMath for uint;\n', '  uint256 maximumBalance;\n', '  uint256 rewardnumber;\n', '  address private manager;\n', '  uint minimumBet;\n', '  //address public listofwinners;\n', '  //address public listoflosers;\n', '\n', '  struct raceDetails {\n', '      uint time;\n', '      uint luckNumber;\n', '      uint horseType;\n', '  }\n', '\n', '  mapping (address => raceDetails) members;\n', '\n', '  address[] private listofUsers;\n', '\n', '\n', '  constructor() public {\n', '      manager = msg.sender;\n', '  }\n', '\n', '\n', '    function random() private view returns (uint) {\n', '        return uint(keccak256(block.difficulty, block.timestamp, now));\n', '    }\n', '\n', '\n', '\n', '  function enter(uint256 leftorright) public payable {\n', '\n', '      if(leftorright == 1) {\n', '        maximumBalance = getMaximumBetRate();\n', '        require(msg.value < maximumBalance && msg.value > .001 ether,"Your bet is too high!");\n', '\n', '        rewardnumber = randomtests();\n', '        if(rewardnumber < 45){\n', '            msg.sender.transfer(msg.value.mul(2));\n', '            members[msg.sender].time = now;\n', '            members[msg.sender].luckNumber = rewardnumber;\n', '            members[msg.sender].horseType = leftorright;\n', '            listofUsers.push(msg.sender) -1;\n', '        } else {\n', '\n', '          members[msg.sender].time = now;\n', '          members[msg.sender].luckNumber = rewardnumber;\n', '          members[msg.sender].horseType = leftorright;\n', '          listofUsers.push(msg.sender) -1;\n', '        }\n', '      } else {\n', '        maximumBalance = getMaximumBetRate();\n', '        require(msg.value < maximumBalance && msg.value > .001 ether,"Your bet is too high or low");\n', '\n', '        rewardnumber = randomtests();\n', '        if(rewardnumber > 55){\n', '            msg.sender.transfer(msg.value.mul(2));\n', '\n', '            members[msg.sender].time = now;\n', '            members[msg.sender].horseType = leftorright;\n', '            members[msg.sender].luckNumber = rewardnumber;\n', '            listofUsers.push(msg.sender) -1;\n', '        } else {\n', '\n', '          members[msg.sender].time = now;\n', '          members[msg.sender].horseType = leftorright;\n', '          members[msg.sender].luckNumber = rewardnumber;\n', '          listofUsers.push(msg.sender) -1;\n', '        }\n', '      }\n', '    }\n', '\n', 'function getMaximumBetRate() public view returns(uint256){\n', '    return address(this).balance.div(20);\n', '  }\n', '\n', '\n', '  function randomtests() private view returns(uint256){\n', '    uint256 index = random() % 100;\n', '    return index;\n', '  }\n', '\n', '  function getAccounts() view public returns(address[]) {\n', '      return listofUsers;\n', '  }\n', '\n', '  function numberofGamePlay() view public returns (uint) {\n', '      return listofUsers.length;\n', '  }\n', '\n', '  function uint2str(uint i) internal pure returns (string){\n', '    if (i == 0) return "0";\n', '    uint j = i;\n', '    uint length;\n', '    while (j != 0){\n', '        length++;\n', '        j /= 10;\n', '    }\n', '    bytes memory bstr = new bytes(length);\n', '    uint k = length - 1;\n', '    while (i != 0){\n', '        bstr[k--] = byte(48 + i % 10);\n', '        i /= 10;\n', '    }\n', '    return string(bstr);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '  function getAccDetails(address _address) view public returns (string, string, string ,string) {\n', '\n', '\n', '    if(members[_address].time == 0){\n', '            return ("0", "0", "0", "You have never played this game before");\n', '    } else {\n', '\n', '      if(members[_address].horseType == 1) {\n', '\n', '       if(rewardnumber < 45){\n', '           return (uint2str(members[_address].time), uint2str(members[_address].luckNumber), uint2str(members[_address].horseType), "You Win because your number smaller than 45");\n', '\n', '       } else {\n', '           return (uint2str(members[_address].time), uint2str(members[_address].luckNumber),uint2str(members[_address].horseType), "youre lose  because your number bigger than 45");\n', '       }\n', '     } else {\n', '\n', '       if(rewardnumber > 55){\n', '           return (uint2str(members[_address].time), uint2str(members[_address].luckNumber),uint2str(members[_address].horseType), "You win, because your number bigger than 55");\n', '       } else {\n', '         return (uint2str(members[_address].time), uint2str(members[_address].luckNumber),uint2str(members[_address].horseType), "You lose because your number smaller than 55");\n', '       }\n', '     }\n', '\n', '\n', '    }\n', '  }\n', '\n', '\n', '\n', '\n', '\n', '  function getEthBalance() public view returns(uint) {\n', '    return address(this).balance;\n', ' }\n', '\n', '\n', '  function depositEther() public payable returns(uint256){\n', '     require(msg.sender == manager,"only manager can reach  here");\n', '    return address(this).balance;\n', '  }\n', '\n', '  function withDrawalether(uint amount) public payable returns(uint256){\n', '      require(msg.sender == manager,"only manager can reach  here");\n', '      manager.transfer(amount*1000000000000000); // 1 etherin 1000&#39; de birini g&#246;nderebilir.\n', '      return address(this).balance;\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '\n', '//1,45 left. -*-*-*-*- 45 55 programmer. -*-*-*-*-*-upper 35 right.\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Cryptoraces {\n', '\n', '\n', '  using SafeMath for uint;\n', '  uint256 maximumBalance;\n', '  uint256 rewardnumber;\n', '  address private manager;\n', '  uint minimumBet;\n', '  //address public listofwinners;\n', '  //address public listoflosers;\n', '\n', '  struct raceDetails {\n', '      uint time;\n', '      uint luckNumber;\n', '      uint horseType;\n', '  }\n', '\n', '  mapping (address => raceDetails) members;\n', '\n', '  address[] private listofUsers;\n', '\n', '\n', '  constructor() public {\n', '      manager = msg.sender;\n', '  }\n', '\n', '\n', '    function random() private view returns (uint) {\n', '        return uint(keccak256(block.difficulty, block.timestamp, now));\n', '    }\n', '\n', '\n', '\n', '  function enter(uint256 leftorright) public payable {\n', '\n', '      if(leftorright == 1) {\n', '        maximumBalance = getMaximumBetRate();\n', '        require(msg.value < maximumBalance && msg.value > .001 ether,"Your bet is too high!");\n', '\n', '        rewardnumber = randomtests();\n', '        if(rewardnumber < 45){\n', '            msg.sender.transfer(msg.value.mul(2));\n', '            members[msg.sender].time = now;\n', '            members[msg.sender].luckNumber = rewardnumber;\n', '            members[msg.sender].horseType = leftorright;\n', '            listofUsers.push(msg.sender) -1;\n', '        } else {\n', '\n', '          members[msg.sender].time = now;\n', '          members[msg.sender].luckNumber = rewardnumber;\n', '          members[msg.sender].horseType = leftorright;\n', '          listofUsers.push(msg.sender) -1;\n', '        }\n', '      } else {\n', '        maximumBalance = getMaximumBetRate();\n', '        require(msg.value < maximumBalance && msg.value > .001 ether,"Your bet is too high or low");\n', '\n', '        rewardnumber = randomtests();\n', '        if(rewardnumber > 55){\n', '            msg.sender.transfer(msg.value.mul(2));\n', '\n', '            members[msg.sender].time = now;\n', '            members[msg.sender].horseType = leftorright;\n', '            members[msg.sender].luckNumber = rewardnumber;\n', '            listofUsers.push(msg.sender) -1;\n', '        } else {\n', '\n', '          members[msg.sender].time = now;\n', '          members[msg.sender].horseType = leftorright;\n', '          members[msg.sender].luckNumber = rewardnumber;\n', '          listofUsers.push(msg.sender) -1;\n', '        }\n', '      }\n', '    }\n', '\n', 'function getMaximumBetRate() public view returns(uint256){\n', '    return address(this).balance.div(20);\n', '  }\n', '\n', '\n', '  function randomtests() private view returns(uint256){\n', '    uint256 index = random() % 100;\n', '    return index;\n', '  }\n', '\n', '  function getAccounts() view public returns(address[]) {\n', '      return listofUsers;\n', '  }\n', '\n', '  function numberofGamePlay() view public returns (uint) {\n', '      return listofUsers.length;\n', '  }\n', '\n', '  function uint2str(uint i) internal pure returns (string){\n', '    if (i == 0) return "0";\n', '    uint j = i;\n', '    uint length;\n', '    while (j != 0){\n', '        length++;\n', '        j /= 10;\n', '    }\n', '    bytes memory bstr = new bytes(length);\n', '    uint k = length - 1;\n', '    while (i != 0){\n', '        bstr[k--] = byte(48 + i % 10);\n', '        i /= 10;\n', '    }\n', '    return string(bstr);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '  function getAccDetails(address _address) view public returns (string, string, string ,string) {\n', '\n', '\n', '    if(members[_address].time == 0){\n', '            return ("0", "0", "0", "You have never played this game before");\n', '    } else {\n', '\n', '      if(members[_address].horseType == 1) {\n', '\n', '       if(rewardnumber < 45){\n', '           return (uint2str(members[_address].time), uint2str(members[_address].luckNumber), uint2str(members[_address].horseType), "You Win because your number smaller than 45");\n', '\n', '       } else {\n', '           return (uint2str(members[_address].time), uint2str(members[_address].luckNumber),uint2str(members[_address].horseType), "youre lose  because your number bigger than 45");\n', '       }\n', '     } else {\n', '\n', '       if(rewardnumber > 55){\n', '           return (uint2str(members[_address].time), uint2str(members[_address].luckNumber),uint2str(members[_address].horseType), "You win, because your number bigger than 55");\n', '       } else {\n', '         return (uint2str(members[_address].time), uint2str(members[_address].luckNumber),uint2str(members[_address].horseType), "You lose because your number smaller than 55");\n', '       }\n', '     }\n', '\n', '\n', '    }\n', '  }\n', '\n', '\n', '\n', '\n', '\n', '  function getEthBalance() public view returns(uint) {\n', '    return address(this).balance;\n', ' }\n', '\n', '\n', '  function depositEther() public payable returns(uint256){\n', '     require(msg.sender == manager,"only manager can reach  here");\n', '    return address(this).balance;\n', '  }\n', '\n', '  function withDrawalether(uint amount) public payable returns(uint256){\n', '      require(msg.sender == manager,"only manager can reach  here");\n', "      manager.transfer(amount*1000000000000000); // 1 etherin 1000' de birini gönderebilir.\n", '      return address(this).balance;\n', '  }\n', '\n', '}']
