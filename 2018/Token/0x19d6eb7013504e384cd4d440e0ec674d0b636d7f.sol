['pragma solidity ^0.4.16;\n', '\n', '/*SPEND APPROVAL ALERT INTERFACE*/\n', 'interface tokenRecipient { \n', 'function receiveApproval(address _from, uint256 _value, \n', 'address _token, bytes _extraData) external; \n', '}\n', '\n', 'contract TOC {\n', '/*tokenchanger.io*/\n', '\n', '/*TOC TOKEN*/\n', 'string public name;\n', 'string public symbol;\n', 'uint8 public decimals;\n', 'uint256 public totalSupply;\n', '\n', '/*user coin balance*/\n', 'mapping (address => uint256) public balances;\n', '/*user coin allowances*/\n', 'mapping(address => mapping (address => uint256)) public allowed;\n', '\n', '/*EVENTS*/\t\t\n', '/*broadcast token transfers on the blockchain*/\n', 'event Transfer(address indexed from, address indexed to, uint256 value);\n', '/*broadcast token spend approvals on the blockchain*/\n', 'event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '/*MINT TOKEN*/\n', 'constructor() public {\n', 'name = "TokenChanger";\n', 'symbol = "TOC";\n', 'decimals = 18;\n', '/*one billion base units*/\n', 'totalSupply = 10**27;\n', 'balances[msg.sender] = totalSupply; \n', '}\n', '\n', '/*INTERNAL TRANSFER*/\n', 'function _transfer(address _from, address _to, uint _value) internal {    \n', '/*prevent transfer to invalid address*/    \n', 'if(_to == 0x0) revert();\n', '/*check if the sender has enough value to send*/\n', 'if(balances[_from] < _value) revert(); \n', '/*check for overflows*/\n', 'if(balances[_to] + _value < balances[_to]) revert();\n', '/*compute sending and receiving balances before transfer*/\n', 'uint PreviousBalances = balances[_from] + balances[_to];\n', '/*substract from sender*/\n', 'balances[_from] -= _value;\n', '/*add to the recipient*/\n', 'balances[_to] += _value; \n', '/*check integrity of transfer operation*/\n', 'assert(balances[_from] + balances[_to] == PreviousBalances);\n', '/*broadcast transaction*/\n', 'emit Transfer(_from, _to, _value); \n', '}\n', '\n', '/*PUBLIC TRANSFERS*/\n', 'function transfer(address _to, uint256 _value) external returns (bool){\n', '_transfer(msg.sender, _to, _value);\n', 'return true;\n', '}\n', '\n', '/*APPROVE THIRD PARTY SPENDING*/\n', 'function approve(address _spender, uint256 _value) public returns (bool success){\n', '/*update allowance record*/    \n', 'allowed[msg.sender][_spender] = _value;\n', '/*broadcast approval*/\n', 'emit Approval(msg.sender, _spender, _value); \n', 'return true;                                        \n', '}\n', '\n', '/*THIRD PARTY TRANSFER*/\n', 'function transferFrom(address _from, address _to, uint256 _value) \n', 'external returns (bool success) {\n', '/*check if the message sender can spend*/\n', 'require(_value <= allowed[_from][msg.sender]); \n', '/*substract from message sender&#39;s spend allowance*/\n', 'allowed[_from][msg.sender] -= _value;\n', '/*transfer tokens*/\n', '_transfer(_from, _to, _value);\n', 'return true;\n', '}\n', '\n', '/*APPROVE SPEND ALLOWANCE AND CALL SPENDER*/\n', 'function approveAndCall(address _spender, uint256 _value, \n', ' bytes _extraData) external returns (bool success) {\n', 'tokenRecipient \n', 'spender = tokenRecipient(_spender);\n', 'if(approve(_spender, _value)) {\n', 'spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '}\n', 'return true;\n', '}\n', '\n', '/*INVALID TRANSACTIONS*/\n', 'function () payable external{\n', 'revert();  \n', '}\n', '}/////////////////////////////////end of toc token contract']
['pragma solidity ^0.4.16;\n', '\n', '/*SPEND APPROVAL ALERT INTERFACE*/\n', 'interface tokenRecipient { \n', 'function receiveApproval(address _from, uint256 _value, \n', 'address _token, bytes _extraData) external; \n', '}\n', '\n', 'contract TOC {\n', '/*tokenchanger.io*/\n', '\n', '/*TOC TOKEN*/\n', 'string public name;\n', 'string public symbol;\n', 'uint8 public decimals;\n', 'uint256 public totalSupply;\n', '\n', '/*user coin balance*/\n', 'mapping (address => uint256) public balances;\n', '/*user coin allowances*/\n', 'mapping(address => mapping (address => uint256)) public allowed;\n', '\n', '/*EVENTS*/\t\t\n', '/*broadcast token transfers on the blockchain*/\n', 'event Transfer(address indexed from, address indexed to, uint256 value);\n', '/*broadcast token spend approvals on the blockchain*/\n', 'event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '/*MINT TOKEN*/\n', 'constructor() public {\n', 'name = "TokenChanger";\n', 'symbol = "TOC";\n', 'decimals = 18;\n', '/*one billion base units*/\n', 'totalSupply = 10**27;\n', 'balances[msg.sender] = totalSupply; \n', '}\n', '\n', '/*INTERNAL TRANSFER*/\n', 'function _transfer(address _from, address _to, uint _value) internal {    \n', '/*prevent transfer to invalid address*/    \n', 'if(_to == 0x0) revert();\n', '/*check if the sender has enough value to send*/\n', 'if(balances[_from] < _value) revert(); \n', '/*check for overflows*/\n', 'if(balances[_to] + _value < balances[_to]) revert();\n', '/*compute sending and receiving balances before transfer*/\n', 'uint PreviousBalances = balances[_from] + balances[_to];\n', '/*substract from sender*/\n', 'balances[_from] -= _value;\n', '/*add to the recipient*/\n', 'balances[_to] += _value; \n', '/*check integrity of transfer operation*/\n', 'assert(balances[_from] + balances[_to] == PreviousBalances);\n', '/*broadcast transaction*/\n', 'emit Transfer(_from, _to, _value); \n', '}\n', '\n', '/*PUBLIC TRANSFERS*/\n', 'function transfer(address _to, uint256 _value) external returns (bool){\n', '_transfer(msg.sender, _to, _value);\n', 'return true;\n', '}\n', '\n', '/*APPROVE THIRD PARTY SPENDING*/\n', 'function approve(address _spender, uint256 _value) public returns (bool success){\n', '/*update allowance record*/    \n', 'allowed[msg.sender][_spender] = _value;\n', '/*broadcast approval*/\n', 'emit Approval(msg.sender, _spender, _value); \n', 'return true;                                        \n', '}\n', '\n', '/*THIRD PARTY TRANSFER*/\n', 'function transferFrom(address _from, address _to, uint256 _value) \n', 'external returns (bool success) {\n', '/*check if the message sender can spend*/\n', 'require(_value <= allowed[_from][msg.sender]); \n', "/*substract from message sender's spend allowance*/\n", 'allowed[_from][msg.sender] -= _value;\n', '/*transfer tokens*/\n', '_transfer(_from, _to, _value);\n', 'return true;\n', '}\n', '\n', '/*APPROVE SPEND ALLOWANCE AND CALL SPENDER*/\n', 'function approveAndCall(address _spender, uint256 _value, \n', ' bytes _extraData) external returns (bool success) {\n', 'tokenRecipient \n', 'spender = tokenRecipient(_spender);\n', 'if(approve(_spender, _value)) {\n', 'spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '}\n', 'return true;\n', '}\n', '\n', '/*INVALID TRANSACTIONS*/\n', 'function () payable external{\n', 'revert();  \n', '}\n', '}/////////////////////////////////end of toc token contract']
