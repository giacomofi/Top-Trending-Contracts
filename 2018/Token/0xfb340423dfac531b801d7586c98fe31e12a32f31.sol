['pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract GEMCHAIN {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\t\n', '\tmapping(address=>bool) public frozenAccount;\n', '\tuint256 public rate = 30000 ;//1 ether=how many tokens\n', '\tuint256 public amount; \n', '\t\n', '\taddress public owner;\n', '\tbool public fundOnContract=true;\t\n', '\tbool public contractStart=true;\t \n', '\tbool public exchangeStart=true;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '\t \n', '\tmodifier  onlyOwner{\n', '        if(msg.sender != owner){\n', '            revert();\n', '        }else{\n', '            _;\n', '        }\n', '    }\n', '\n', '    function transferOwner(address newOwner)  public onlyOwner{\n', '        owner = newOwner;\n', '    }\n', '\t \n', '\n', '\t \n', '    function GEMCHAIN() public payable{\n', '\t\tdecimals=18;\n', '        totalSupply = 10000000000 * (10 ** uint256(decimals));  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = "GEMCHAIN";                                   // Set the name for display purposes\n', '        symbol = "GEM";                               // Set the symbol for display purposes\n', '\t\towner = msg.sender;\n', '\t\trate=30000;\n', '\t\tfundOnContract=true;\n', '\t\tcontractStart=true;\n', '\t\texchangeStart=true;\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '\t\tif(!contractStart){\n', '\t\t\trevert();\n', '\t\t}\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '\t\tif(!contractStart){\n', '\t\t\trevert();\n', '\t\t}\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '\t\trequire(_value > 0);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '\t\tif(!contractStart){\n', '\t\t\trevert();\n', '\t\t}\n', '\t\trequire(balanceOf[msg.sender] >= _value);\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '\t\tif(!contractStart){\n', '\t\t\trevert();\n', '\t\t}\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '\t\tif(!contractStart){\n', '\t\t\trevert();\n', '\t\t}\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '\t\trequire(_value > 0);\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '\t\tTransfer(msg.sender, 0, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public onlyOwner returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '\t\trequire(_value> 0); \n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '\t\tTransfer(_from, 0, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction () public payable{\n', '\t\tif(!contractStart){\n', '\t\t\trevert();\n', '\t\t}\n', '        if(frozenAccount[msg.sender]){\n', '            revert();\n', '        }\n', '\t\tif(rate <= 0){\n', '            revert();\n', '        }\n', '\t\tamount = uint256(msg.value * rate);\n', '\t\t\n', '\t\tif(balanceOf[msg.sender]+amount<balanceOf[msg.sender]){\n', '\t\t\trevert();\n', '\t\t}\n', '\t\tif(balanceOf[owner]<amount){\n', '\t\t\trevert();\n', '\t\t}\n', '\t\t//if(amount>0){\n', '\t\t\tif(exchangeStart){\n', '\t\t\t\tbalanceOf[owner] -=amount ;\n', '\t\t\t\tbalanceOf[msg.sender] +=amount;\n', '\t\t\t\tTransfer(owner, msg.sender, amount); //token event\n', '\t\t\t}\n', '\t\t\tif(!fundOnContract){\n', '\t\t\t\towner.transfer(msg.value);\n', '\t\t\t}\n', '\t\t//}\n', '    }\n', '\n', '\tfunction transferFund(address target,uint256 _value) public onlyOwner{\n', '\t\tif(frozenAccount[target]){\n', '            revert();\n', '        }\n', '\t\tif(_value<=0){\n', '\t\t\trevert();\n', '\t\t}\n', '\t\tif(_value>this.balance){\n', '\t\t\trevert();\n', '\t\t}\n', '\t\tif(target != 0){\n', '\t\t\ttarget.transfer(_value);\n', '\t\t}\n', '    }\n', '\t\n', '\t\n', '\tfunction setFundOnContract(bool _fundOnContract)  public onlyOwner{\n', '            fundOnContract = _fundOnContract;\n', '    }\n', '\t\n', '\tfunction setContractStart(bool _contractStart)  public onlyOwner{\n', '            contractStart = _contractStart;\n', '    }\n', '\t\n', '\tfunction freezeAccount(address target,bool _bool)  public onlyOwner{\n', '        if(target != 0){\n', '            frozenAccount[target] = _bool;\n', '        }\n', '    }\n', '\tfunction setRate(uint thisRate) public onlyOwner{\n', '\t   if(thisRate>0){\n', '         rate = thisRate;\n', '\t\t}\n', '    }\n', '\t\n', '\tfunction mintToken(address target, uint256 mintedAmount) public onlyOwner {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, owner, mintedAmount);\n', '        Transfer(owner, target, mintedAmount);\n', '    }\n', '\tfunction ownerKill(address target) public onlyOwner {\n', '\t\tselfdestruct(target);\n', '    }\n', '\tfunction withdraw(address target) public onlyOwner {\n', '\t\ttarget.transfer(this.balance);\n', '    }\n', '\tfunction getBalance() public constant returns(uint) {\n', '\t\treturn this.balance;\n', '\t}\n', '\t\n', '\t\n', '\tfunction setExchangeStart(bool _exchangeStart)  public onlyOwner{\n', '            exchangeStart = _exchangeStart;\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract GEMCHAIN {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\t\n', '\tmapping(address=>bool) public frozenAccount;\n', '\tuint256 public rate = 30000 ;//1 ether=how many tokens\n', '\tuint256 public amount; \n', '\t\n', '\taddress public owner;\n', '\tbool public fundOnContract=true;\t\n', '\tbool public contractStart=true;\t \n', '\tbool public exchangeStart=true;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '\t \n', '\tmodifier  onlyOwner{\n', '        if(msg.sender != owner){\n', '            revert();\n', '        }else{\n', '            _;\n', '        }\n', '    }\n', '\n', '    function transferOwner(address newOwner)  public onlyOwner{\n', '        owner = newOwner;\n', '    }\n', '\t \n', '\n', '\t \n', '    function GEMCHAIN() public payable{\n', '\t\tdecimals=18;\n', '        totalSupply = 10000000000 * (10 ** uint256(decimals));  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = "GEMCHAIN";                                   // Set the name for display purposes\n', '        symbol = "GEM";                               // Set the symbol for display purposes\n', '\t\towner = msg.sender;\n', '\t\trate=30000;\n', '\t\tfundOnContract=true;\n', '\t\tcontractStart=true;\n', '\t\texchangeStart=true;\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '\t\tif(!contractStart){\n', '\t\t\trevert();\n', '\t\t}\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '\t\tif(!contractStart){\n', '\t\t\trevert();\n', '\t\t}\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '\t\trequire(_value > 0);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '\t\tif(!contractStart){\n', '\t\t\trevert();\n', '\t\t}\n', '\t\trequire(balanceOf[msg.sender] >= _value);\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '\t\tif(!contractStart){\n', '\t\t\trevert();\n', '\t\t}\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '\t\tif(!contractStart){\n', '\t\t\trevert();\n', '\t\t}\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '\t\trequire(_value > 0);\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '\t\tTransfer(msg.sender, 0, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public onlyOwner returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '\t\trequire(_value> 0); \n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '\t\tTransfer(_from, 0, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction () public payable{\n', '\t\tif(!contractStart){\n', '\t\t\trevert();\n', '\t\t}\n', '        if(frozenAccount[msg.sender]){\n', '            revert();\n', '        }\n', '\t\tif(rate <= 0){\n', '            revert();\n', '        }\n', '\t\tamount = uint256(msg.value * rate);\n', '\t\t\n', '\t\tif(balanceOf[msg.sender]+amount<balanceOf[msg.sender]){\n', '\t\t\trevert();\n', '\t\t}\n', '\t\tif(balanceOf[owner]<amount){\n', '\t\t\trevert();\n', '\t\t}\n', '\t\t//if(amount>0){\n', '\t\t\tif(exchangeStart){\n', '\t\t\t\tbalanceOf[owner] -=amount ;\n', '\t\t\t\tbalanceOf[msg.sender] +=amount;\n', '\t\t\t\tTransfer(owner, msg.sender, amount); //token event\n', '\t\t\t}\n', '\t\t\tif(!fundOnContract){\n', '\t\t\t\towner.transfer(msg.value);\n', '\t\t\t}\n', '\t\t//}\n', '    }\n', '\n', '\tfunction transferFund(address target,uint256 _value) public onlyOwner{\n', '\t\tif(frozenAccount[target]){\n', '            revert();\n', '        }\n', '\t\tif(_value<=0){\n', '\t\t\trevert();\n', '\t\t}\n', '\t\tif(_value>this.balance){\n', '\t\t\trevert();\n', '\t\t}\n', '\t\tif(target != 0){\n', '\t\t\ttarget.transfer(_value);\n', '\t\t}\n', '    }\n', '\t\n', '\t\n', '\tfunction setFundOnContract(bool _fundOnContract)  public onlyOwner{\n', '            fundOnContract = _fundOnContract;\n', '    }\n', '\t\n', '\tfunction setContractStart(bool _contractStart)  public onlyOwner{\n', '            contractStart = _contractStart;\n', '    }\n', '\t\n', '\tfunction freezeAccount(address target,bool _bool)  public onlyOwner{\n', '        if(target != 0){\n', '            frozenAccount[target] = _bool;\n', '        }\n', '    }\n', '\tfunction setRate(uint thisRate) public onlyOwner{\n', '\t   if(thisRate>0){\n', '         rate = thisRate;\n', '\t\t}\n', '    }\n', '\t\n', '\tfunction mintToken(address target, uint256 mintedAmount) public onlyOwner {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, owner, mintedAmount);\n', '        Transfer(owner, target, mintedAmount);\n', '    }\n', '\tfunction ownerKill(address target) public onlyOwner {\n', '\t\tselfdestruct(target);\n', '    }\n', '\tfunction withdraw(address target) public onlyOwner {\n', '\t\ttarget.transfer(this.balance);\n', '    }\n', '\tfunction getBalance() public constant returns(uint) {\n', '\t\treturn this.balance;\n', '\t}\n', '\t\n', '\t\n', '\tfunction setExchangeStart(bool _exchangeStart)  public onlyOwner{\n', '            exchangeStart = _exchangeStart;\n', '    }\n', '}']
