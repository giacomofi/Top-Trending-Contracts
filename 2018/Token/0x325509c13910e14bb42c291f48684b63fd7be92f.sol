['pragma solidity ^0.4.10;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic is Ownable {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) onlyOwner public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '\n', 'contract StockusToken is BurnableToken {\n', '\n', '    string public constant name = "Stockus Token";\n', '    string public constant symbol = "STT";\n', '    uint32 public constant decimals = 2;\n', '    uint256 public INITIAL_SUPPLY = 15000000 * 100;\n', '    bool public isSale;\n', '\n', '    function StockusToken() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n', '        isSale = true;\n', '    }\n', '\n', '    modifier saleIsOn() {\n', '        require(isSale);\n', '        _;\n', '    }\n', '\n', '    function refund(address _from, uint256 _value) onlyOwner saleIsOn public returns(bool) {\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[owner] = balances[owner].add(_value);\n', '        Transfer(_from, owner, _value);\n', '        return true;\n', '    }\n', '\n', '    function stopSale() onlyOwner saleIsOn public returns(bool) {\n', '        isSale = false;\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'pragma solidity ^0.4.10;\n', '\n', 'contract Crowdsale is Ownable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    address public multisig;\n', '    uint256 public rate;\n', '    uint256 public weiRaised;\n', '    uint256 public hardcap;\n', '    uint256 public softcap;\n', '    StockusToken public token; //Token contract\n', '    uint256 public saleSupply;\n', '    uint256 public bountySupply;\n', '    bool public saleStopped;\n', '    bool public sendToTeam;\n', '    uint256 public sendToTeamTime;\n', '    uint256 public endSaleTime;\n', '    mapping(address => uint256) public saleBalances;\n', '\n', '    uint256 public constant RESERVED_SUPPLY = 1500000 * 100;\n', '\n', '    function Crowdsale(address _multisig, StockusToken _token, uint256 _weiRaised, uint256 _saleSupply, uint256 _bountySupply) public {\n', '        multisig = _multisig;\n', '        weiRaised = _weiRaised;\n', '        hardcap = 700 ether;\n', '        softcap = 100 ether;\n', '        token = _token;\n', '        saleSupply = _saleSupply;\n', '        bountySupply = _bountySupply;\n', '        saleStopped = false;\n', '        sendToTeam = false;\n', '        endSaleTime = now + 4 weeks;\n', '    }\n', '\n', '    modifier isOverSoftcap() {\n', '        require(weiRaised >= softcap);\n', '        _;\n', '    }\n', '\n', '    modifier isUnderSoftcap() {\n', '        require(weiRaised <= softcap);\n', '        _;\n', '    }\n', '\n', '    modifier isSale() {\n', '        require(now < endSaleTime);\n', '        _;\n', '    }\n', '\n', '    modifier saleEnded() {\n', '        require(now >= endSaleTime);\n', '        _;\n', '    }\n', '\n', '    modifier saleNoStopped() {\n', '        require(saleStopped == false);\n', '        _;\n', '    }\n', '\n', '    function stopSale() onlyOwner saleEnded isOverSoftcap public returns(bool) {\n', '        if (saleSupply > 0) {\n', '            token.burn(saleSupply);\n', '            saleSupply = 0;\n', '        }\n', '        saleStopped = true;\n', '        sendToTeamTime = now + 12 weeks;\n', '        forwardFunds();\n', '        return token.stopSale();\n', '    }\n', '\n', '    function createTokens() isSale saleNoStopped payable public {\n', '        if (now < endSaleTime - 3 weeks) {\n', '            rate = 12000000000000;\n', '        } else if (now > endSaleTime - 3 weeks && now < endSaleTime - 2 weeks) {\n', '            rate = 14000000000000;\n', '        } else if (now > endSaleTime - 2 weeks && now < endSaleTime - 1 weeks) {\n', '            rate = 16000000000000;\n', '        } else {\n', '            rate = 18000000000000;\n', '        }\n', '        uint256 tokens = msg.value.div(rate);\n', '        require(saleSupply >= tokens);\n', '        saleSupply = saleSupply.sub(tokens);\n', '        saleBalances[msg.sender] = saleBalances[msg.sender].add(msg.value);\n', '        token.transfer(msg.sender, tokens);\n', '    }\n', '\n', '    function adminSendTokens(address _to, uint256 _value, uint256 _weiAmount) onlyOwner saleNoStopped public returns(bool) {\n', '        require(saleSupply >= _value);\n', '        saleSupply = saleSupply.sub(_value);\n', '        weiRaised = weiRaised.add(_weiAmount);\n', '        return token.transfer(_to, _value);\n', '    }\n', '\n', '    function adminRefundTokens(address _from, uint256 _value, uint256 _weiAmount) onlyOwner saleNoStopped public returns(bool) {\n', '        saleSupply = saleSupply.add(_value);\n', '        weiRaised = weiRaised.sub(_weiAmount);\n', '        return token.refund(_from, _value);\n', '    }\n', '\n', '    function bountySend(address _to, uint256 _value) onlyOwner saleNoStopped public returns(bool) {\n', '        require(bountySupply >= _value);\n', '        bountySupply = bountySupply.sub(_value);\n', '        return token.transfer(_to, _value);\n', '    }\n', '\n', '    function bountyRefund(address _from, uint256 _value) onlyOwner saleNoStopped public returns(bool) {\n', '        bountySupply = bountySupply.add(_value);\n', '        return token.refund(_from, _value);\n', '    }\n', '\n', '    function refund() saleEnded isUnderSoftcap public returns(bool) {\n', '        uint256 value = saleBalances[msg.sender];\n', '        saleBalances[msg.sender] = 0;\n', '        msg.sender.transfer(value);\n', '    }\n', '\n', '    function refundTeamTokens() onlyOwner public returns(bool) {\n', '        require(sendToTeam == false);\n', '        require(now >= sendToTeamTime);\n', '        sendToTeam = true;\n', '        return token.transfer(msg.sender, RESERVED_SUPPLY);\n', '    }\n', '\n', '    function forwardFunds() private {\n', '        multisig.transfer(this.balance);\n', '    }\n', '\n', '    function setMultisig(address _multisig) onlyOwner public {\n', '        multisig = _multisig;\n', '    }\n', '\n', '    function() external payable {\n', '        createTokens();\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', 'contract Presale is Ownable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    address public multisig;\n', '    uint256 public rate;\n', '    uint256 public weiRaised;\n', '    uint256 public tokensBurned;\n', '    StockusToken public token; //Token contract\n', '    Crowdsale public crowdsale; // Crowdsale contract\n', '    uint256 public saleSupply = 12000000 * 100;\n', '    uint256 public presaleSupply = 2000000 * 100;\n', '    uint256 public bountySupply = 1500000 * 100;\n', '    uint256 public tokensSoftcap = 500000 * 100;\n', '\n', '    function Presale(address _multisig) public {\n', '        multisig = _multisig;\n', '        token = new StockusToken();\n', '    }\n', '\n', '    modifier isOverSoftcap() {\n', '        require(tokensBurned >= tokensSoftcap);\n', '        _;\n', '    }\n', '\n', '    function startCrowdsale() onlyOwner isOverSoftcap public {\n', '        crowdsale = new Crowdsale(multisig, token, weiRaised, saleSupply, bountySupply);\n', '        token.transfer(address(crowdsale), token.balanceOf(this));\n', '        token.transferOwnership(address(crowdsale));\n', '        crowdsale.transferOwnership(owner);\n', '        forwardFunds();\n', '    }\n', '\n', '    function createTokens() payable public {\n', '        uint256 weiAmount = msg.value;\n', '        if (tokensBurned < tokensSoftcap) {\n', '            rate = 5000000000000;\n', '        } else {\n', '            rate = 7000000000000;\n', '        }\n', '        uint256 tokens = weiAmount.div(rate);\n', '        require(presaleSupply >= tokens);\n', '        tokensBurned = tokensBurned.add(tokens);\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        saleSupply = saleSupply.sub(tokens);\n', '        presaleSupply = presaleSupply.sub(tokens);\n', '        token.transfer(msg.sender, tokens);\n', '    }\n', '\n', '    function bountySend(address _to, uint256 _value) onlyOwner public returns(bool) {\n', '        require(bountySupply >= _value);\n', '        bountySupply = bountySupply.sub(_value);\n', '        return token.transfer(_to, _value);\n', '    }\n', '\n', '    function bountyRefund(address _from, uint256 _value) onlyOwner public returns(bool) {\n', '        bountySupply = bountySupply.add(_value);\n', '        return token.refund(_from, _value);\n', '    }\n', '\n', '    function forwardFunds() private {\n', '        multisig.transfer(this.balance);\n', '    }\n', '\n', '    function setMultisig(address _multisig) onlyOwner public {\n', '        multisig = _multisig;\n', '    }\n', '\n', '    function() external payable {\n', '        createTokens();\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.10;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic is Ownable {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) onlyOwner public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '\n', 'contract StockusToken is BurnableToken {\n', '\n', '    string public constant name = "Stockus Token";\n', '    string public constant symbol = "STT";\n', '    uint32 public constant decimals = 2;\n', '    uint256 public INITIAL_SUPPLY = 15000000 * 100;\n', '    bool public isSale;\n', '\n', '    function StockusToken() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n', '        isSale = true;\n', '    }\n', '\n', '    modifier saleIsOn() {\n', '        require(isSale);\n', '        _;\n', '    }\n', '\n', '    function refund(address _from, uint256 _value) onlyOwner saleIsOn public returns(bool) {\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[owner] = balances[owner].add(_value);\n', '        Transfer(_from, owner, _value);\n', '        return true;\n', '    }\n', '\n', '    function stopSale() onlyOwner saleIsOn public returns(bool) {\n', '        isSale = false;\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'pragma solidity ^0.4.10;\n', '\n', 'contract Crowdsale is Ownable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    address public multisig;\n', '    uint256 public rate;\n', '    uint256 public weiRaised;\n', '    uint256 public hardcap;\n', '    uint256 public softcap;\n', '    StockusToken public token; //Token contract\n', '    uint256 public saleSupply;\n', '    uint256 public bountySupply;\n', '    bool public saleStopped;\n', '    bool public sendToTeam;\n', '    uint256 public sendToTeamTime;\n', '    uint256 public endSaleTime;\n', '    mapping(address => uint256) public saleBalances;\n', '\n', '    uint256 public constant RESERVED_SUPPLY = 1500000 * 100;\n', '\n', '    function Crowdsale(address _multisig, StockusToken _token, uint256 _weiRaised, uint256 _saleSupply, uint256 _bountySupply) public {\n', '        multisig = _multisig;\n', '        weiRaised = _weiRaised;\n', '        hardcap = 700 ether;\n', '        softcap = 100 ether;\n', '        token = _token;\n', '        saleSupply = _saleSupply;\n', '        bountySupply = _bountySupply;\n', '        saleStopped = false;\n', '        sendToTeam = false;\n', '        endSaleTime = now + 4 weeks;\n', '    }\n', '\n', '    modifier isOverSoftcap() {\n', '        require(weiRaised >= softcap);\n', '        _;\n', '    }\n', '\n', '    modifier isUnderSoftcap() {\n', '        require(weiRaised <= softcap);\n', '        _;\n', '    }\n', '\n', '    modifier isSale() {\n', '        require(now < endSaleTime);\n', '        _;\n', '    }\n', '\n', '    modifier saleEnded() {\n', '        require(now >= endSaleTime);\n', '        _;\n', '    }\n', '\n', '    modifier saleNoStopped() {\n', '        require(saleStopped == false);\n', '        _;\n', '    }\n', '\n', '    function stopSale() onlyOwner saleEnded isOverSoftcap public returns(bool) {\n', '        if (saleSupply > 0) {\n', '            token.burn(saleSupply);\n', '            saleSupply = 0;\n', '        }\n', '        saleStopped = true;\n', '        sendToTeamTime = now + 12 weeks;\n', '        forwardFunds();\n', '        return token.stopSale();\n', '    }\n', '\n', '    function createTokens() isSale saleNoStopped payable public {\n', '        if (now < endSaleTime - 3 weeks) {\n', '            rate = 12000000000000;\n', '        } else if (now > endSaleTime - 3 weeks && now < endSaleTime - 2 weeks) {\n', '            rate = 14000000000000;\n', '        } else if (now > endSaleTime - 2 weeks && now < endSaleTime - 1 weeks) {\n', '            rate = 16000000000000;\n', '        } else {\n', '            rate = 18000000000000;\n', '        }\n', '        uint256 tokens = msg.value.div(rate);\n', '        require(saleSupply >= tokens);\n', '        saleSupply = saleSupply.sub(tokens);\n', '        saleBalances[msg.sender] = saleBalances[msg.sender].add(msg.value);\n', '        token.transfer(msg.sender, tokens);\n', '    }\n', '\n', '    function adminSendTokens(address _to, uint256 _value, uint256 _weiAmount) onlyOwner saleNoStopped public returns(bool) {\n', '        require(saleSupply >= _value);\n', '        saleSupply = saleSupply.sub(_value);\n', '        weiRaised = weiRaised.add(_weiAmount);\n', '        return token.transfer(_to, _value);\n', '    }\n', '\n', '    function adminRefundTokens(address _from, uint256 _value, uint256 _weiAmount) onlyOwner saleNoStopped public returns(bool) {\n', '        saleSupply = saleSupply.add(_value);\n', '        weiRaised = weiRaised.sub(_weiAmount);\n', '        return token.refund(_from, _value);\n', '    }\n', '\n', '    function bountySend(address _to, uint256 _value) onlyOwner saleNoStopped public returns(bool) {\n', '        require(bountySupply >= _value);\n', '        bountySupply = bountySupply.sub(_value);\n', '        return token.transfer(_to, _value);\n', '    }\n', '\n', '    function bountyRefund(address _from, uint256 _value) onlyOwner saleNoStopped public returns(bool) {\n', '        bountySupply = bountySupply.add(_value);\n', '        return token.refund(_from, _value);\n', '    }\n', '\n', '    function refund() saleEnded isUnderSoftcap public returns(bool) {\n', '        uint256 value = saleBalances[msg.sender];\n', '        saleBalances[msg.sender] = 0;\n', '        msg.sender.transfer(value);\n', '    }\n', '\n', '    function refundTeamTokens() onlyOwner public returns(bool) {\n', '        require(sendToTeam == false);\n', '        require(now >= sendToTeamTime);\n', '        sendToTeam = true;\n', '        return token.transfer(msg.sender, RESERVED_SUPPLY);\n', '    }\n', '\n', '    function forwardFunds() private {\n', '        multisig.transfer(this.balance);\n', '    }\n', '\n', '    function setMultisig(address _multisig) onlyOwner public {\n', '        multisig = _multisig;\n', '    }\n', '\n', '    function() external payable {\n', '        createTokens();\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', 'contract Presale is Ownable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    address public multisig;\n', '    uint256 public rate;\n', '    uint256 public weiRaised;\n', '    uint256 public tokensBurned;\n', '    StockusToken public token; //Token contract\n', '    Crowdsale public crowdsale; // Crowdsale contract\n', '    uint256 public saleSupply = 12000000 * 100;\n', '    uint256 public presaleSupply = 2000000 * 100;\n', '    uint256 public bountySupply = 1500000 * 100;\n', '    uint256 public tokensSoftcap = 500000 * 100;\n', '\n', '    function Presale(address _multisig) public {\n', '        multisig = _multisig;\n', '        token = new StockusToken();\n', '    }\n', '\n', '    modifier isOverSoftcap() {\n', '        require(tokensBurned >= tokensSoftcap);\n', '        _;\n', '    }\n', '\n', '    function startCrowdsale() onlyOwner isOverSoftcap public {\n', '        crowdsale = new Crowdsale(multisig, token, weiRaised, saleSupply, bountySupply);\n', '        token.transfer(address(crowdsale), token.balanceOf(this));\n', '        token.transferOwnership(address(crowdsale));\n', '        crowdsale.transferOwnership(owner);\n', '        forwardFunds();\n', '    }\n', '\n', '    function createTokens() payable public {\n', '        uint256 weiAmount = msg.value;\n', '        if (tokensBurned < tokensSoftcap) {\n', '            rate = 5000000000000;\n', '        } else {\n', '            rate = 7000000000000;\n', '        }\n', '        uint256 tokens = weiAmount.div(rate);\n', '        require(presaleSupply >= tokens);\n', '        tokensBurned = tokensBurned.add(tokens);\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        saleSupply = saleSupply.sub(tokens);\n', '        presaleSupply = presaleSupply.sub(tokens);\n', '        token.transfer(msg.sender, tokens);\n', '    }\n', '\n', '    function bountySend(address _to, uint256 _value) onlyOwner public returns(bool) {\n', '        require(bountySupply >= _value);\n', '        bountySupply = bountySupply.sub(_value);\n', '        return token.transfer(_to, _value);\n', '    }\n', '\n', '    function bountyRefund(address _from, uint256 _value) onlyOwner public returns(bool) {\n', '        bountySupply = bountySupply.add(_value);\n', '        return token.refund(_from, _value);\n', '    }\n', '\n', '    function forwardFunds() private {\n', '        multisig.transfer(this.balance);\n', '    }\n', '\n', '    function setMultisig(address _multisig) onlyOwner public {\n', '        multisig = _multisig;\n', '    }\n', '\n', '    function() external payable {\n', '        createTokens();\n', '    }\n', '\n', '}']
