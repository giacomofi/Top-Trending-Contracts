['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // Return true if sender is owner or super-owner of the contract\n', '    function isOwner() internal view returns(bool success) {\n', '        if (msg.sender == owner) return true;\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract CTBSale is Ownable, StandardToken {\n', '\n', '\n', '    uint8 public constant TOKEN_DECIMALS = 18;  // decimals\n', '    uint8 public constant PRE_SALE_PERCENT = 20; // 20%\n', '\n', '    // Public variables of the token\n', '    string public name = "Career Trust Bank";\n', '    string public symbol = "CTB";\n', '    uint8 public decimals = TOKEN_DECIMALS; // 18 decimals is the strongly suggested default, avoid changing it\n', '\n', '\n', '    uint256 public totalSupply = 5000000000 * (10 ** uint256(TOKEN_DECIMALS)); // Five billion\n', '    uint256 public preSaleSupply; // PRE_SALE_PERCENT / 20 * totalSupply\n', '    uint256 public soldSupply = 0; // current supply tokens for sell\n', '    uint256 public sellSupply = 0;\n', '    uint256 public buySupply = 0;\n', '    bool public stopSell = false;\n', '    bool public stopBuy = false;\n', '\n', '    /*\n', '    \tSell/Buy prices in wei\n', '    \t1 ETH = 10^18 of wei\n', '    */\n', '    uint256 public buyExchangeRate = 8000;   // 8000 CTB tokens per 1 ETHs\n', '    uint256 public sellExchangeRate = 40000;  // 1 ETH need 40000 CTB token\n', '    address public ethFundDeposit;  // deposit address for ETH for CTB Team.\n', '\n', '\n', '    bool public allowTransfers = true; // if true then allow coin transfers\n', '\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    bool public enableInternalLock = true; // if false then allow coin transfers by internal sell lock\n', '    mapping (address => bool) public internalLockAccount;\n', '\n', '\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '    event IncreasePreSaleSupply(uint256 _value);\n', '    event DecreasePreSaleSupply(uint256 _value);\n', '    event IncreaseSoldSaleSupply(uint256 _value);\n', '    event DecreaseSoldSaleSupply(uint256 _value);\n', '\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function CTBSale() public {\n', '        balances[msg.sender] = totalSupply;                 // Give the creator all initial tokens\n', '        preSaleSupply = totalSupply * PRE_SALE_PERCENT / 100;      // preSaleSupply\n', '\n', '        ethFundDeposit = msg.sender;                        // deposit eth\n', '        allowTransfers = false;\n', '    }\n', '\n', '    function _isUserInternalLock() internal view returns (bool) {\n', '        return (enableInternalLock && internalLockAccount[msg.sender]);\n', '    }\n', '\n', "    /// @dev increase the token's supply\n", '    function increasePreSaleSupply (uint256 _value) onlyOwner public {\n', '        require (_value + preSaleSupply < totalSupply);\n', '        preSaleSupply += _value;\n', '        IncreasePreSaleSupply(_value);\n', '    }\n', '\n', "    /// @dev decrease the token's supply\n", '    function decreasePreSaleSupply (uint256 _value) onlyOwner public {\n', '        require (preSaleSupply - _value > 0);\n', '        preSaleSupply -= _value;\n', '        DecreasePreSaleSupply(_value);\n', '    }\n', '\n', "    /// @dev increase the token's supply\n", '    function increaseSoldSaleSupply (uint256 _value) onlyOwner public {\n', '        require (_value + soldSupply < totalSupply);\n', '        soldSupply += _value;\n', '        IncreaseSoldSaleSupply(_value);\n', '    }\n', '\n', "    /// @dev decrease the token's supply\n", '    function decreaseSoldSaleSupply (uint256 _value) onlyOwner public {\n', '        require (soldSupply - _value > 0);\n', '        soldSupply -= _value;\n', '        DecreaseSoldSaleSupply(_value);\n', '    }\n', '\n', '    /// @notice Create `mintedAmount` tokens and send it to `target`\n', '    /// @param target Address to receive the tokens\n', '    /// @param mintedAmount the amount of tokens it will receive\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balances[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    function destroyToken(address target, uint256 amount) onlyOwner public {\n', '        balances[target] -= amount;\n', '        totalSupply -= amount;\n', '        Transfer(target, this, amount);\n', '        Transfer(this, 0, amount);\n', '    }\n', '\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    /// @dev set EthFundDeposit\n', '    function setEthFundDeposit(address _ethFundDeposit) onlyOwner public {\n', '        require(_ethFundDeposit != address(0));\n', '        ethFundDeposit = _ethFundDeposit;\n', '    }\n', '\n', '    /// @dev sends ETH to CTB team\n', '    function transferETH() onlyOwner public {\n', '        require(ethFundDeposit != address(0));\n', '        require(this.balance != 0);\n', '        require(ethFundDeposit.send(this.balance));\n', '    }\n', '\n', '    /// @notice Allow users to buy tokens for `_buyExchangeRate` eth and sell tokens for `_sellExchangeRate` eth\n', '    /// @param _sellExchangeRate the users can sell to the contract\n', '    /// @param _buyExchangeRate users can buy from the contract\n', '    function setExchangeRate(uint256 _sellExchangeRate, uint256 _buyExchangeRate) onlyOwner public {\n', '        sellExchangeRate = _sellExchangeRate;\n', '        buyExchangeRate = _buyExchangeRate;\n', '    }\n', '\n', '    function setExchangeStatus(bool _stopSell, bool _stopBuy) onlyOwner public {\n', '        stopSell = _stopSell;\n', '        stopBuy = _stopBuy;\n', '    }\n', '\n', '    function setAllowTransfers(bool _allowTransfers) onlyOwner public {\n', '        allowTransfers = _allowTransfers;\n', '    }\n', '\n', '    // Admin function for transfer coins\n', '    function transferFromAdmin(address _from, address _to, uint256 _value) onlyOwner public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function setEnableInternalLock(bool _isEnable) onlyOwner public {\n', '        enableInternalLock = _isEnable;\n', '    }\n', '\n', '    function lockInternalAccount(address target, bool lock) onlyOwner public {\n', '        require(target != address(0));\n', '        internalLockAccount[target] = lock;\n', '    }\n', '\n', '    // sell token, soldSupply, lockAccount\n', '    function internalSellTokenFromAdmin(address _to, uint256 _value, bool _lock) onlyOwner public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[owner]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[owner] = balances[owner].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        soldSupply += _value;\n', '        sellSupply += _value;\n', '\n', '        Transfer(owner, _to, _value);\n', '\n', '        internalLockAccount[_to] = _lock;     // lock internalSell lock\n', '\n', '        return true;\n', '    }\n', '\n', '    /***************************************************/\n', '    /*                        BASE                     */\n', '    /***************************************************/\n', '\n', '    // @dev override\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        if (!isOwner()) {\n', '            require (allowTransfers);\n', '            require(!frozenAccount[_from]);                                          // Check if sender is frozen\n', '            require(!frozenAccount[_to]);                                            // Check if recipient is frozen\n', '            require(!_isUserInternalLock());                                         // Check if recipient is internalSellLock\n', '        }\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    // @dev override\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if (!isOwner()) {\n', '            require (allowTransfers);\n', '            require(!frozenAccount[msg.sender]);                                        // Check if sender is frozen\n', '            require(!frozenAccount[_to]);                                               // Check if recipient is frozen\n', '            require(!_isUserInternalLock());                                            // Check if recipient is internalSellLock\n', '        }\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '\n', '    /// @dev send ether to contract\n', '    function pay() payable public {}\n', '\n', '\n', '    /// @notice Buy tokens from contract by sending ether\n', '    function buy() payable public {\n', '        uint256 amount = msg.value.mul(buyExchangeRate);\n', '\n', '        require(!stopBuy);\n', '        require(amount <= balances[owner]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[owner] = balances[owner].sub(amount);\n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '\n', '        soldSupply += amount;\n', '        buySupply += amount;\n', '\n', '        Transfer(owner, msg.sender, amount);\n', '    }\n', '\n', '    /// @notice Sell `amount` tokens to contract\n', '    /// @param amount amount of tokens to be sold\n', '    function sell(uint256 amount) public {\n', '        uint256 ethAmount = amount.div(sellExchangeRate);\n', '        require(!stopSell);\n', '        require(this.balance >= ethAmount);      // checks if the contract has enough ether to buy\n', '        require(ethAmount >= 1);      // checks if the contract has enough ether to buy\n', '\n', '        require(balances[msg.sender] >= amount);                   // Check if the sender has enough\n', '        require(balances[owner] + amount > balances[owner]);       // Check for overflows\n', '        require(!frozenAccount[msg.sender]);                        // Check if sender is frozen\n', '        require(!_isUserInternalLock());                                            // Check if recipient is internalSellLock\n', '\n', '        // SafeMath.add will throw if there is not enough balance.\n', '        balances[owner] = balances[owner].add(amount);\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '\n', '        soldSupply -= amount;\n', '        sellSupply += amount;\n', '\n', '        Transfer(msg.sender, owner, amount);\n', '\n', "        msg.sender.transfer(ethAmount);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n", '    }\n', '}']