['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * owner\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Allows the current owner to relinquish control of the contract.\n', '    * @notice Renouncing to ownership will leave the contract without an owner.\n', '    * It will not be possible to call the functions with the `onlyOwner`\n', '    * modifier anymore.\n', '    */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that revert on error\n', '*/\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = _a * _b;\n', '        require(c / _a == _b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = _a / _b;\n', "        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b <= _a);\n', '        uint256 c = _a - _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        uint256 c = _a + _b;\n', '        require(c >= _a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', '* @title ERC20 interface\n', '* @dev see https://github.com/ethereum/EIPs/issues/20\n', '*/\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address _who) public view returns (uint256);\n', '\n', '    function allowance(address _owner, address _spender)\n', '        public view returns (uint256);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '    function approve(address _spender, uint256 _value)\n', '        public returns (bool);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public returns (bool);\n', '\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value\n', '    );\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'contract KvantorSaleToken is ERC20, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "KVANTOR Sale token";\n', '    string public symbol = "KVT_SALE";\n', '    uint public decimals = 8;\n', '\n', '    uint256 crowdsaleStartTime = 1535317200;\n', '    uint256 crowdsaleFinishTime = 1537995600;\n', '\n', '\n', '    address public kvtOwner = 0xe4ed7e14e961550c0ce7571df8a5b11dec9f7f52;\n', '    ERC20 public kvtToken = ERC20(0x96c8aa08b1712dDe92f327c0dC7c71EcE6c06525);\n', '\n', '    uint256 tokenMinted = 0;\n', '    // cap 60 mln KVT\n', '    uint256 public tokenCap = 6000000000000000;\n', '    // rate is 0,0000000 ETH discreet\n', '    uint256 public rate = 3061857781;\n', '    \n', '    uint256 public weiRaised = 0;\n', '    address public wallet = 0x5B007Da9dBf09842Cb4751bd5BcD6ea2808256F5;\n', '\n', '    constructor() public {\n', '        \n', '    }\n', '\n', '\n', '    /* non-standard code */\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= balances[msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        if (this == _to) {\n', '            require(kvtToken.transfer(msg.sender, _value));\n', '            _burn(msg.sender, _value);\n', '        } else {\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '        }\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        if (this == _to) {\n', '            require(kvtToken.transfer(_from, _value));\n', '            _burn(_from, _value);\n', '        } else {\n', '            balances[_from] = balances[_from].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);   \n', '        }\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /* this function calculates tokens with discount rules */\n', '    \n', '    function calculateTokens(uint256 _weiAmount) view public returns (uint256) {\n', '        \n', '        uint256 tokens = _weiAmount.mul(rate).mul(100).div(75).div(100 finney);\n', '        if(tokens.div(100000000) < 5000)\n', '            return _weiAmount.mul(rate).mul(100).div(80).div(100 finney);\n', '        \n', '        tokens = _weiAmount.mul(rate).mul(100).div(73).div(100 finney);\n', '        if(tokens.div(100000000) < 25000)\n', '            return _weiAmount.mul(rate).mul(100).div(75).div(100 finney);\n', '            \n', '        tokens = _weiAmount.mul(rate).mul(100).div(70).div(100 finney);\n', '        if(tokens.div(100000000) < 50000)\n', '            return _weiAmount.mul(rate).mul(100).div(73).div(100 finney);\n', '            \n', '        tokens = _weiAmount.mul(rate).mul(100).div(65).div(100 finney);\n', '        if(tokens.div(100000000) < 250000)\n', '            return _weiAmount.mul(rate).mul(100).div(70).div(100 finney);\n', '            \n', '        tokens = _weiAmount.mul(rate).mul(100).div(60).div(100 finney);\n', '        if(tokens.div(100000000) < 500000)\n', '            return _weiAmount.mul(rate).mul(100).div(65).div(100 finney);\n', '            \n', '        return _weiAmount.mul(rate).mul(100).div(60).div(100 finney);\n', '            \n', '    }\n', '    \n', '\n', '    function buyTokens(address _beneficiary) public payable {\n', '        require(crowdsaleStartTime <= now && now <= crowdsaleFinishTime);\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        require(_beneficiary != address(0));\n', '        require(weiAmount != 0);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = calculateTokens(weiAmount);\n', '        \n', '        /* min purchase = 100 KVT */\n', '        require(tokens.div(100000000) >= 100);\n', '        \n', '        require(tokenMinted.add(tokens) < tokenCap);\n', '        tokenMinted = tokenMinted.add(tokens);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        _mint(_beneficiary, tokens);\n', '\n', '        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    function returnKVTToOwner() onlyOwner public {\n', '        uint256 tokens = kvtToken.balanceOf(this).sub(this.totalSupply());\n', '\n', '        require(now > crowdsaleFinishTime);\n', '        require(tokens > 0);\n', '        require(kvtToken.transfer(kvtOwner, tokens));\n', '    }\n', '\n', '    function returnKVTToSomeone(address _to) onlyOwner public {\n', '        uint256 tokens = this.balanceOf(_to);\n', '\n', '        require(now > crowdsaleFinishTime);\n', '        require(tokens > 0);\n', '        require(kvtToken.transfer(_to, tokens));\n', '        _burn(_to, tokens);\n', '    }\n', '    \n', '    function finishHim() onlyOwner public {\n', '        selfdestruct(this);\n', '    }\n', '\n', '    function setRate(uint256 _rate) onlyOwner public {\n', '        rate = _rate;\n', '    }\n', '\n', '    function setTokenCap(uint256 _tokenCap) onlyOwner public {\n', '        tokenCap = _tokenCap;\n', '    }\n', '    \n', '    /* zeppelen standard code */    \n', '    /**\n', '    * Event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(\n', '        address indexed purchaser,\n', '        address indexed beneficiary,\n', '        uint256 value,\n', '        uint256 amount\n', '    );\n', '\n', '    /**\n', '    * @dev fallback function ***DO NOT OVERRIDE***\n', '    */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '    \n', '    mapping (address => uint256) private balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private allowed;\n', '\n', '    uint256 private totalSupply_;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _subtractedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function that mints an amount of the token and assigns it to\n', '    * an account. This encapsulates the modification of balances such that the\n', '    * proper events are emitted.\n', '    * @param _account The account that will receive the created tokens.\n', '    * @param _amount The amount that will be created.\n', '    */\n', '    function _mint(address _account, uint256 _amount) internal {\n', '        require(_account != 0);\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_account] = balances[_account].add(_amount);\n', '        emit Transfer(address(0), _account, _amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function that burns an amount of the token of a given\n', '    * account.\n', '    * @param _account The account whose tokens will be burnt.\n', '    * @param _amount The amount that will be burnt.\n', '    */\n', '    function _burn(address _account, uint256 _amount) internal {\n', '        require(_account != 0);\n', '        require(_amount <= balances[_account]);\n', '\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '        balances[_account] = balances[_account].sub(_amount);\n', '        emit Transfer(_account, address(0), _amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function that burns an amount of the token of a given\n', "    * account, deducting from the sender's allowance for said account. Uses the\n", '    * internal _burn function.\n', '    * @param _account The account whose tokens will be burnt.\n', '    * @param _amount The amount that will be burnt.\n', '    */\n', '    function _burnFrom(address _account, uint256 _amount) internal {\n', '        require(_amount <= allowed[_account][msg.sender]);\n', '\n', '        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '        // this function needs to emit an event with the updated approval.\n', '        allowed[_account][msg.sender] = allowed[_account][msg.sender].sub(_amount);\n', '        _burn(_account, _amount);\n', '    }\n', '}']