['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' */\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' */\n', 'contract ERC20 {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _owner) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  function allowance(address _owner, address _spender) public view returns (uint256);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * @title Owned\n', ' */\n', 'contract Owned {\n', '  address public owner;\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '  \n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 token\n', ' */\n', 'contract ERC20Token is ERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  uint256 public totalToken;\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(balances[msg.sender] >= _value);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(balances[_from] >= _value);\n', '    require(allowed[_from][msg.sender] >= _value);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalToken;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ALLN Token\n', ' */\n', 'contract ALLNToken is ERC20Token, Owned {\n', '\n', '  string  public constant name     = "ALLN Token";\n', '  string  public constant symbol   = "ALLN";\n', '  uint256 public constant decimals = 18;\n', '\n', '  uint256 public constant initialToken     = 3500000000 * (10 ** decimals);\n', '\n', '  uint256 public constant publicToken      = initialToken * 85 / 100; // 85%\n', '  uint256 public constant developmentToken = initialToken * 15 / 100; // 15%\n', '\n', '  address public constant developmentAddress = 0x00881db6BAC37d502EBd39FbBCc69a063e3b4777;\n', '  address public constant rescueAddress      = 0x001b97f5760DD45b0Df6467BB76a06Da76fF8720;\n', '\n', '  uint256 public constant developmentLockEndTime = 1569902400; // 2019-10-01 04:00:00 GMT\n', '\n', '  mapping(address => bool) lockAddresses;\n', '\n', '  constructor() public {\n', '    totalToken     = initialToken;\n', '\n', '    balances[msg.sender]         = publicToken;\n', '    balances[developmentAddress] = developmentToken;\n', '\n', '    emit Transfer(0x0, msg.sender, publicToken);\n', '    emit Transfer(0x0, developmentAddress, developmentToken);\n', '\n', '    lockAddresses[developmentAddress] = true;\n', '  }\n', '\n', '  modifier transferable(address _addr) {\n', '    require(!lockAddresses[_addr]);\n', '    _;\n', '  }\n', '\n', '  function unlock() public onlyOwner {\n', '    if (lockAddresses[developmentAddress] && now >= developmentLockEndTime)\n', '      lockAddresses[developmentAddress] = false;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public transferable(msg.sender) returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public transferable(msg.sender) returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public transferable(_from) returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function transferAnyERC20Token(address _tokenAddress, uint256 _value) public onlyOwner returns (bool) {\n', '    return ERC20(_tokenAddress).transfer(rescueAddress, _value);\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' */\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' */\n', 'contract ERC20 {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _owner) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  function allowance(address _owner, address _spender) public view returns (uint256);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * @title Owned\n', ' */\n', 'contract Owned {\n', '  address public owner;\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '  \n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 token\n', ' */\n', 'contract ERC20Token is ERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  uint256 public totalToken;\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(balances[msg.sender] >= _value);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(balances[_from] >= _value);\n', '    require(allowed[_from][msg.sender] >= _value);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalToken;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ALLN Token\n', ' */\n', 'contract ALLNToken is ERC20Token, Owned {\n', '\n', '  string  public constant name     = "ALLN Token";\n', '  string  public constant symbol   = "ALLN";\n', '  uint256 public constant decimals = 18;\n', '\n', '  uint256 public constant initialToken     = 3500000000 * (10 ** decimals);\n', '\n', '  uint256 public constant publicToken      = initialToken * 85 / 100; // 85%\n', '  uint256 public constant developmentToken = initialToken * 15 / 100; // 15%\n', '\n', '  address public constant developmentAddress = 0x00881db6BAC37d502EBd39FbBCc69a063e3b4777;\n', '  address public constant rescueAddress      = 0x001b97f5760DD45b0Df6467BB76a06Da76fF8720;\n', '\n', '  uint256 public constant developmentLockEndTime = 1569902400; // 2019-10-01 04:00:00 GMT\n', '\n', '  mapping(address => bool) lockAddresses;\n', '\n', '  constructor() public {\n', '    totalToken     = initialToken;\n', '\n', '    balances[msg.sender]         = publicToken;\n', '    balances[developmentAddress] = developmentToken;\n', '\n', '    emit Transfer(0x0, msg.sender, publicToken);\n', '    emit Transfer(0x0, developmentAddress, developmentToken);\n', '\n', '    lockAddresses[developmentAddress] = true;\n', '  }\n', '\n', '  modifier transferable(address _addr) {\n', '    require(!lockAddresses[_addr]);\n', '    _;\n', '  }\n', '\n', '  function unlock() public onlyOwner {\n', '    if (lockAddresses[developmentAddress] && now >= developmentLockEndTime)\n', '      lockAddresses[developmentAddress] = false;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public transferable(msg.sender) returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public transferable(msg.sender) returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public transferable(_from) returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function transferAnyERC20Token(address _tokenAddress, uint256 _value) public onlyOwner returns (bool) {\n', '    return ERC20(_tokenAddress).transfer(rescueAddress, _value);\n', '  }\n', '}']
