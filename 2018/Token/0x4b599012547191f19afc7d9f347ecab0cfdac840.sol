['pragma solidity ^0.4.25;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Operated\n', ' * @dev The Operated contract has a list of ops addresses, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Operated {\n', '    mapping(address => bool) private _ops;\n', '\n', '    event OperatorChanged(\n', '        address indexed operator,\n', '        bool active\n', '    );\n', '\n', '    /**\n', '     * @dev The Operated constructor sets the original ops account of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() internal {\n', '        _ops[msg.sender] = true;\n', '        emit OperatorChanged(msg.sender, true);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the operations accounts.\n', '     */\n', '    modifier onlyOps() {\n', '        require(isOps(), "only operations accounts are allowed to call this function");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is an operator.\n', '     */\n', '    function isOps() public view returns(bool) {\n', '        return _ops[msg.sender];\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current operations accounts to give control of the contract to new accounts.\n', '     * @param _account The address of the new account\n', '     * @param _active Set active (true) or inactive (false)\n', '     */\n', '    function setOps(address _account, bool _active) public onlyOps {\n', '        _ops[_account] = _active;\n', '        emit OperatorChanged(_account, _active);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns(address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns(bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title WHISKY TOKEN\n', ' * @author WHYTOKEN GmbH\n', ' * @notice WHISKY TOKEN (WHY) stands for a disruptive new possibility in the crypto currency market\n', ' * due to the combination of High-End Whisky and Blockchain technology.\n', ' * WHY is a german based token, which lets everyone participate in the lucrative crypto market\n', ' * with minimal risk and effort through a high-end whisky portfolio as security.\n', ' */\n', 'contract WhiskyToken is IERC20, Ownable, Operated {\n', '    using SafeMath for uint256;\n', '    using SafeMath for uint64;\n', '\n', '    // ERC20 standard variables\n', '    string public name = "Whisky Token";\n', '    string public symbol = "WHY";\n', '    uint8 public decimals = 18;\n', '    uint256 public initialSupply = 28100000 * (10 ** uint256(decimals));\n', '    uint256 public totalSupply;\n', '\n', '    // Address of the ICO contract\n', '    address public crowdSaleContract;\n', '\n', '    // The asset value of the whisky in EUR cents\n', '    uint64 public assetValue;\n', '\n', '    // Fee to charge on every transfer (e.g. 15 is 1,5%)\n', '    uint64 public feeCharge;\n', '\n', '    // Global freeze of all transfers\n', '    bool public freezeTransfer;\n', '\n', '    // Flag to make all token available\n', '    bool private tokenAvailable;\n', '\n', '    // Maximum value for feeCharge\n', '    uint64 private constant feeChargeMax = 20;\n', '\n', '    // Address of the account/wallet which should receive the fees\n', '    address private feeReceiver;\n', '\n', '    // Mappings of addresses for balances, allowances and frozen accounts\n', '    mapping(address => uint256) internal balances;\n', '    mapping(address => mapping (address => uint256)) internal allowed;\n', '    mapping(address => bool) public frozenAccount;\n', '\n', '    // Event definitions\n', '    event Fee(address indexed payer, uint256 fee);\n', '    event FeeCharge(uint64 oldValue, uint64 newValue);\n', '    event AssetValue(uint64 oldValue, uint64 newValue);\n', '    event Burn(address indexed burner, uint256 value);\n', '    event FrozenFunds(address indexed target, bool frozen);\n', '    event FreezeTransfer(bool frozen);\n', '\n', '    // Constructor which gets called once on contract deployment\n', '    constructor(address _tokenOwner) public {\n', '        transferOwnership(_tokenOwner);\n', '        setOps(_tokenOwner, true);\n', '        crowdSaleContract = msg.sender;\n', '        feeReceiver = _tokenOwner;\n', '        totalSupply = initialSupply;\n', '        balances[msg.sender] = initialSupply;\n', '        assetValue = 0;\n', '        feeCharge = 15;\n', '        freezeTransfer = true;\n', '        tokenAvailable = true;\n', '    }\n', '\n', '    /**\n', '     * @notice Returns the total supply of tokens.\n', '     * @dev The total supply is the amount of tokens which are currently in circulation.\n', '     * @return Amount of tokens in Sip.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @notice Gets the balance of the specified address.\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount of tokens owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        if (!tokenAvailable) {\n', '            return 0;\n', '        }\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Internal transfer, can only be called by this contract.\n', '     * Will throw an exception to rollback the transaction if anything is wrong.\n', '     * @param _from The address from which the tokens should be transfered from.\n', '     * @param _to The address to which the tokens should be transfered to.\n', '     * @param _value The amount of tokens which should be transfered in Sip.\n', '     */\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        require(_to != address(0), "zero address is not allowed");\n', '        require(_value >= 1000, "must transfer more than 1000 sip");\n', '        require(!freezeTransfer || isOps(), "all transfers are currently frozen");\n', '        require(!frozenAccount[_from], "sender address is frozen");\n', '        require(!frozenAccount[_to], "receiver address is frozen");\n', '\n', '        uint256 transferValue = _value;\n', '        if (msg.sender != owner() && msg.sender != crowdSaleContract) {\n', '            uint256 fee = _value.div(1000).mul(feeCharge);\n', '            transferValue = _value.sub(fee);\n', '            balances[feeReceiver] = balances[feeReceiver].add(fee);\n', '            emit Fee(msg.sender, fee);\n', '            emit Transfer(_from, feeReceiver, fee);\n', '        }\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(transferValue);\n', '        if (tokenAvailable) {\n', '            emit Transfer(_from, _to, transferValue);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens to a specified address. The message sender has to pay the fee.\n', '     * @dev Calls _transfer with message sender address as _from parameter.\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred in Sip.\n', '     * @return Indicates if the transfer was successful.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens from one address to another. The message sender has to pay the fee.\n', '     * @dev Calls _transfer with the addresses provided by the transactor.\n', '     * @param _from The address which you want to send tokens from.\n', '     * @param _to The address which you want to transfer to.\n', '     * @param _value The amount of tokens to be transferred in Sip.\n', '     * @return Indicates if the transfer was successful.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= allowed[_from][msg.sender], "requesting more token than allowed");\n', '\n', '        _transfer(_from, _to, _value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Approve the passed address to spend the specified amount of tokens on behalf of the transactor.\n', '     * @dev Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which is allowed to retrieve the tokens.\n', '     * @param _value The amount of tokens to be spent in Sip.\n', '     * @return Indicates if the approval was successful.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(!freezeTransfer || isOps(), "all transfers are currently frozen");\n', '        require(_spender != address(0), "zero address is not allowed");\n', '        require(_value >= 1000, "must approve more than 1000 sip");\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Returns the amount of tokens that the owner allowed to the spender.\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner The address which owns the tokens.\n', '     * @param _spender The address which is allowed to retrieve the tokens.\n', '     * @return The amount of tokens still available for the spender in Sip.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @notice Increase the amount of tokens that an owner allowed to a spender.\n', '     * @dev Approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which is allowed to retrieve the tokens.\n', '     * @param _addedValue The amount of tokens to increase the allowance by in Sip.\n', '     * @return Indicates if the approval was successful.\n', '     */\n', '    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n', '        require(!freezeTransfer || isOps(), "all transfers are currently frozen");\n', '        require(_spender != address(0), "zero address is not allowed");\n', '        require(_addedValue >= 1000, "must approve more than 1000 sip");\n', '        \n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Decrease the amount of tokens that an owner allowed to a spender. \n', '     * @dev Approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which is allowed to retrieve the tokens.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by in Sip.\n', '     * @return Indicates if the approval was successful.\n', '     */\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n', '        require(!freezeTransfer || isOps(), "all transfers are currently frozen");\n', '        require(_spender != address(0), "zero address is not allowed");\n', '        require(_subtractedValue >= 1000, "must approve more than 1000 sip");\n', '\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    } \n', '\n', '    /**\n', '     * @notice Burns a specific amount of tokens.\n', '     * @dev Tokens get technically destroyed by this function and are therefore no longer in circulation afterwards.\n', '     * @param _value The amount of token to be burned in Sip.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(!freezeTransfer || isOps(), "all transfers are currently frozen");\n', '        require(_value <= balances[msg.sender], "address has not enough token to burn");\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value);\n', '        emit Transfer(burner, address(0), _value);\n', '    }\n', '\n', '    /**\n', '     * @notice Not for public use!\n', '     * @dev Modifies the assetValue which represents the monetized value (in EUR) of the whisky baking the token.\n', '     * @param _value The new value of the asset in EUR cents.\n', '     */\n', '    function setAssetValue(uint64 _value) public onlyOwner {\n', '        uint64 oldValue = assetValue;\n', '        assetValue = _value;\n', '        emit AssetValue(oldValue, _value);\n', '    }\n', '\n', '    /**\n', '     * @notice Not for public use!\n', '     * @dev Modifies the feeCharge which calculates the fee for each transaction.\n', '     * @param _value The new value of the feeCharge as fraction of 1000 (e.g. 15 is 1,5%).\n', '     */\n', '    function setFeeCharge(uint64 _value) public onlyOwner {\n', '        require(_value <= feeChargeMax, "can not increase fee charge over it\'s limit");\n', '        uint64 oldValue = feeCharge;\n', '        feeCharge = _value;\n', '        emit FeeCharge(oldValue, _value);\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Not for public use!\n', '     * @dev Prevents/Allows target from sending & receiving tokens.\n', '     * @param _target Address to be frozen.\n', '     * @param _freeze Either to freeze or unfreeze it.\n', '     */\n', '    function freezeAccount(address _target, bool _freeze) public onlyOwner {\n', '        require(_target != address(0), "zero address is not allowed");\n', '\n', '        frozenAccount[_target] = _freeze;\n', '        emit FrozenFunds(_target, _freeze);\n', '    }\n', '\n', '    /**\n', '     * @notice Not for public use!\n', '     * @dev Globally freeze all transfers for the token.\n', '     * @param _freeze Freeze or unfreeze every transfer.\n', '     */\n', '    function setFreezeTransfer(bool _freeze) public onlyOwner {\n', '        freezeTransfer = _freeze;\n', '        emit FreezeTransfer(_freeze);\n', '    }\n', '\n', '    /**\n', '     * @notice Not for public use!\n', '     * @dev Allows the owner to set the address which receives the fees.\n', '     * @param _feeReceiver the address which should receive fees.\n', '     */\n', '    function setFeeReceiver(address _feeReceiver) public onlyOwner {\n', '        require(_feeReceiver != address(0), "zero address is not allowed");\n', '        feeReceiver = _feeReceiver;\n', '    }\n', '\n', '    /**\n', '     * @notice Not for public use!\n', '     * @dev Make all tokens available for ERC20 wallets.\n', '     * @param _available Activate or deactivate all tokens\n', '     */\n', '    function setTokenAvailable(bool _available) public onlyOwner {\n', '        tokenAvailable = _available;\n', '    }\n', '}']