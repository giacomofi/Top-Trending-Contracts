['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '\n', '    }\n', '\n', ' \n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        uint256 c = a / b;\n', '        return c;\n', '\n', '    }\n', '\n', ' \n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        assert(b <= a);\n', '        return a - b;\n', '\n', '    }\n', '\n', ' \n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '\n', '    }\n', '\n', '}\n', '\n', ' \n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n', '     */\n', '\n', '    function Ownable() public {\n', '\n', '        owner = msg.sender;\n', '\n', '    }\n', '\n', ' \n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '\n', '    modifier onlyOwner() {\n', '\n', '        require(msg.sender == owner);\n', '        _;\n', '\n', '    }\n', '\n', ' \n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '\n', '    }\n', '\n', '}\n', '\n', ' \n', 'contract ERC20Basic {\n', '\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '\n', '        return totalSupply_;\n', '\n', '    }\n', '\n', ' \n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '\n', '   function transfer(address _to, uint256 _value) public returns (bool) {\n', '\n', '        require(_to != address(0));\n', '\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '\n', '        return balances[_owner];\n', '\n', '    }\n', '\n', '}\n', '\n', ' \n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '\n', '    function burn(uint256 _value) public {\n', '\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        address burner = msg.sender;\n', '\n', '        balances[burner] = balances[burner].sub(_value);\n', '\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '\n', '        emit Burn(burner, _value);\n', '\n', '    }\n', '\n', '}\n', '\n', ' \n', '\n', 'contract ERC20 is ERC20Basic {\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', ' \n', '\n', 'library SafeERC20 {\n', '\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '\n', '        assert(token.transfer(to, value));\n', '\n', '    }\n', '\n', ' \n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '\n', '        assert(token.transferFrom(from, to, value));\n', '\n', '    }\n', '\n', ' \n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '\n', '        assert(token.approve(spender, value));\n', '\n', '   }\n', '\n', '}\n', '\n', ' \n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', ' \n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\n', '        require(_to != address(0));\n', '\n', '        require(_value <= balances[_from]);\n', '\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '\n', '   function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '\n', '        return allowed[_owner][_spender];\n', '\n', '    }\n', '\n', ' \n', '}\n', '\n', ' \n', 'contract WMCToken is StandardToken, BurnableToken, Ownable {\n', '\n', '    using SafeMath for uint;\n', '\n', ' \n', '\n', '    string constant public symbol = "WMC";\n', '    string constant public name = "World Masonic Coin";\n', '    uint8 constant public decimals = 18;\n', '    \n', '    uint public totalSoldTokens = 0;\n', '\n', '    uint public constant TOTAL_SUPPLY = 33000000 * (1 ether / 1 wei);\n', '\n', '    uint public constant DEVELOPER_supply = 1650000 * (1 ether / 1 wei);\n', '\n', '    uint public constant MARKETING_supply =  1650000 * (1 ether / 1 wei);\n', '\n', '    uint public constant PROVISIONING_supply =  3300000 * (1 ether / 1 wei);\n', '\n', '    uint constant PSMTime = 1529798401; // Sunday, June 24, 2018 12:00:01 AM\n', '\n', '    uint public constant PSM_PRICE = 29;  // per 1 Ether\n', '\n', '    uint constant PSTime = 1532476801; // Wednesday, July 25, 2018 12:00:01 AM\n', '\n', '    uint public constant PS_PRICE = 27;    // per 1 Ether\n', '\n', '    uint constant PINTime = 1535241601; //Sunday, August 26, 2018 12:00:01 AM\n', '\n', '    uint public constant PIN_PRICE = 25;    // per 1 Ether\n', '\n', '    uint constant ICOTime = 1574640001; // Monday, November 25, 2019 12:00:01 AM\n', '\n', '    uint public constant ICO_PRICE = 23;    // per 1 Ether\n', '\n', '    uint public constant TOTAL_TOKENs_SUPPLY = 26400000 * (1 ether / 1 wei); //TOTAL_SUPPLY – DEVELOPERS_supply – MARKETING_supply – PROVISIONING_supply;\n', '\n', ' \n', '    address beneficiary = 0xef18F44049b0685AbaA63fe3Db43A0bE262453CE;\n', '    address developer = 0x311F0e3Ec7876679A2C4F4BaC6102fCB03536984;\n', '    address marketing = 0xba48AD5BBFA3C66743C269550e468479710084Dd;\n', '    address provisioning = 0xa1905B711D31B0646359Cd6393D7293dC0a5DFDf;\n', '\n', ' bool public enableTransfers = true;\n', ' \n', '    /**\n', '    * @dev Send intial amounts for marketing development and provisioning\n', '    */\n', '    \n', '    function WMCToken() public {\n', '\n', '    balances[provisioning] = balances[provisioning].add(PROVISIONING_supply);\n', '    balances[developer] = balances[developer].add(DEVELOPER_supply);\n', '    balances[marketing] = balances[marketing].add(MARKETING_supply);\n', '    \n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '\n', '        require(enableTransfers);\n', '        super.transfer(_to, _value);\n', '\n', '    }\n', '\n', ' \n', '   function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '        require(enableTransfers);\n', '        return super.approve(_spender,_value);\n', '\n', '    }\n', '\n', ' \n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\n', '        require(enableTransfers);\n', '        super.transferFrom(_from, _to, _value);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev fallback function\n', '    */\n', '    \n', '    function () public payable {\n', '\n', '        require(enableTransfers);\n', '        uint256 amount = msg.value * getPrice();\n', '        require(totalSoldTokens + amount <= TOTAL_TOKENs_SUPPLY);\n', '        require(msg.value >= ((1 ether / 1 wei) / 100)); // min amount 0,01 ether\n', '        uint256 amount_marketing = msg.value * 5 /100;\n', '        uint256 amount_development = msg.value * 5 /100 ;\n', '        uint256 amount_masonic_project = msg.value * 90 /100;\n', '        beneficiary.transfer(amount_masonic_project);\n', '        developer.transfer(amount_development);\n', '        marketing.transfer(amount_marketing);\n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '        totalSoldTokens+= amount;\n', '        emit Transfer(this, msg.sender, amount);                         \n', '\n', '    }\n', '\n', '    /**\n', '    * @dev get price depending on time\n', '    */\n', '     function getPrice()constant public returns(uint)\n', '\n', '    {\n', '\n', '        if (now < PSMTime) return PSM_PRICE;\n', '        else if (now < PSTime) return PS_PRICE;\n', '        else if (now < PINTime) return PIN_PRICE;\n', '        else if (now < ICOTime) return ICO_PRICE;\n', '        else return ICO_PRICE; // fallback\n', '\n', '    }\n', '    \n', '    /**\n', '    * @dev stop transfers\n', '    */ \n', '    \n', '    function DisableTransfer() public onlyOwner\n', '    {\n', '        enableTransfers = false;\n', '    }\n', '    \n', '    /**\n', '    * @dev resume transfers\n', '    */    \n', '    \n', '    function EnableTransfer() public onlyOwner\n', '    {\n', '        enableTransfers = true;\n', '    }\n', '    \n', '    /**\n', '    * @dev update beneficiarry adress only by contract owner\n', '    */    \n', '    \n', '        function UpdateBeneficiary(address _beneficiary) public onlyOwner returns(bool)\n', '    {\n', '        beneficiary = _beneficiary;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '\n', '    }\n', '\n', ' \n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        uint256 c = a / b;\n', '        return c;\n', '\n', '    }\n', '\n', ' \n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        assert(b <= a);\n', '        return a - b;\n', '\n', '    }\n', '\n', ' \n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '\n', '    }\n', '\n', '}\n', '\n', ' \n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n', '     */\n', '\n', '    function Ownable() public {\n', '\n', '        owner = msg.sender;\n', '\n', '    }\n', '\n', ' \n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '\n', '    modifier onlyOwner() {\n', '\n', '        require(msg.sender == owner);\n', '        _;\n', '\n', '    }\n', '\n', ' \n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '\n', '    }\n', '\n', '}\n', '\n', ' \n', 'contract ERC20Basic {\n', '\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '\n', '        return totalSupply_;\n', '\n', '    }\n', '\n', ' \n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '\n', '   function transfer(address _to, uint256 _value) public returns (bool) {\n', '\n', '        require(_to != address(0));\n', '\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '\n', '        return balances[_owner];\n', '\n', '    }\n', '\n', '}\n', '\n', ' \n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '\n', '    function burn(uint256 _value) public {\n', '\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        address burner = msg.sender;\n', '\n', '        balances[burner] = balances[burner].sub(_value);\n', '\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '\n', '        emit Burn(burner, _value);\n', '\n', '    }\n', '\n', '}\n', '\n', ' \n', '\n', 'contract ERC20 is ERC20Basic {\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', ' \n', '\n', 'library SafeERC20 {\n', '\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '\n', '        assert(token.transfer(to, value));\n', '\n', '    }\n', '\n', ' \n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '\n', '        assert(token.transferFrom(from, to, value));\n', '\n', '    }\n', '\n', ' \n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '\n', '        assert(token.approve(spender, value));\n', '\n', '   }\n', '\n', '}\n', '\n', ' \n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', ' \n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\n', '        require(_to != address(0));\n', '\n', '        require(_value <= balances[_from]);\n', '\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '\n', '   function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '\n', '        return allowed[_owner][_spender];\n', '\n', '    }\n', '\n', ' \n', '}\n', '\n', ' \n', 'contract WMCToken is StandardToken, BurnableToken, Ownable {\n', '\n', '    using SafeMath for uint;\n', '\n', ' \n', '\n', '    string constant public symbol = "WMC";\n', '    string constant public name = "World Masonic Coin";\n', '    uint8 constant public decimals = 18;\n', '    \n', '    uint public totalSoldTokens = 0;\n', '\n', '    uint public constant TOTAL_SUPPLY = 33000000 * (1 ether / 1 wei);\n', '\n', '    uint public constant DEVELOPER_supply = 1650000 * (1 ether / 1 wei);\n', '\n', '    uint public constant MARKETING_supply =  1650000 * (1 ether / 1 wei);\n', '\n', '    uint public constant PROVISIONING_supply =  3300000 * (1 ether / 1 wei);\n', '\n', '    uint constant PSMTime = 1529798401; // Sunday, June 24, 2018 12:00:01 AM\n', '\n', '    uint public constant PSM_PRICE = 29;  // per 1 Ether\n', '\n', '    uint constant PSTime = 1532476801; // Wednesday, July 25, 2018 12:00:01 AM\n', '\n', '    uint public constant PS_PRICE = 27;    // per 1 Ether\n', '\n', '    uint constant PINTime = 1535241601; //Sunday, August 26, 2018 12:00:01 AM\n', '\n', '    uint public constant PIN_PRICE = 25;    // per 1 Ether\n', '\n', '    uint constant ICOTime = 1574640001; // Monday, November 25, 2019 12:00:01 AM\n', '\n', '    uint public constant ICO_PRICE = 23;    // per 1 Ether\n', '\n', '    uint public constant TOTAL_TOKENs_SUPPLY = 26400000 * (1 ether / 1 wei); //TOTAL_SUPPLY – DEVELOPERS_supply – MARKETING_supply – PROVISIONING_supply;\n', '\n', ' \n', '    address beneficiary = 0xef18F44049b0685AbaA63fe3Db43A0bE262453CE;\n', '    address developer = 0x311F0e3Ec7876679A2C4F4BaC6102fCB03536984;\n', '    address marketing = 0xba48AD5BBFA3C66743C269550e468479710084Dd;\n', '    address provisioning = 0xa1905B711D31B0646359Cd6393D7293dC0a5DFDf;\n', '\n', ' bool public enableTransfers = true;\n', ' \n', '    /**\n', '    * @dev Send intial amounts for marketing development and provisioning\n', '    */\n', '    \n', '    function WMCToken() public {\n', '\n', '    balances[provisioning] = balances[provisioning].add(PROVISIONING_supply);\n', '    balances[developer] = balances[developer].add(DEVELOPER_supply);\n', '    balances[marketing] = balances[marketing].add(MARKETING_supply);\n', '    \n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '\n', '        require(enableTransfers);\n', '        super.transfer(_to, _value);\n', '\n', '    }\n', '\n', ' \n', '   function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '        require(enableTransfers);\n', '        return super.approve(_spender,_value);\n', '\n', '    }\n', '\n', ' \n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\n', '        require(enableTransfers);\n', '        super.transferFrom(_from, _to, _value);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev fallback function\n', '    */\n', '    \n', '    function () public payable {\n', '\n', '        require(enableTransfers);\n', '        uint256 amount = msg.value * getPrice();\n', '        require(totalSoldTokens + amount <= TOTAL_TOKENs_SUPPLY);\n', '        require(msg.value >= ((1 ether / 1 wei) / 100)); // min amount 0,01 ether\n', '        uint256 amount_marketing = msg.value * 5 /100;\n', '        uint256 amount_development = msg.value * 5 /100 ;\n', '        uint256 amount_masonic_project = msg.value * 90 /100;\n', '        beneficiary.transfer(amount_masonic_project);\n', '        developer.transfer(amount_development);\n', '        marketing.transfer(amount_marketing);\n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '        totalSoldTokens+= amount;\n', '        emit Transfer(this, msg.sender, amount);                         \n', '\n', '    }\n', '\n', '    /**\n', '    * @dev get price depending on time\n', '    */\n', '     function getPrice()constant public returns(uint)\n', '\n', '    {\n', '\n', '        if (now < PSMTime) return PSM_PRICE;\n', '        else if (now < PSTime) return PS_PRICE;\n', '        else if (now < PINTime) return PIN_PRICE;\n', '        else if (now < ICOTime) return ICO_PRICE;\n', '        else return ICO_PRICE; // fallback\n', '\n', '    }\n', '    \n', '    /**\n', '    * @dev stop transfers\n', '    */ \n', '    \n', '    function DisableTransfer() public onlyOwner\n', '    {\n', '        enableTransfers = false;\n', '    }\n', '    \n', '    /**\n', '    * @dev resume transfers\n', '    */    \n', '    \n', '    function EnableTransfer() public onlyOwner\n', '    {\n', '        enableTransfers = true;\n', '    }\n', '    \n', '    /**\n', '    * @dev update beneficiarry adress only by contract owner\n', '    */    \n', '    \n', '        function UpdateBeneficiary(address _beneficiary) public onlyOwner returns(bool)\n', '    {\n', '        beneficiary = _beneficiary;\n', '    }\n', '\n', '}']
