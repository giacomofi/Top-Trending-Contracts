['/**\n', ' * @title GradusInvestmentPlatform\n', '*/\n', '\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '        public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '        public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '     * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addedValue\n', '    )\n', '      public\n', '      returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '            allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _subtractedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract GRADtoken is StandardToken {\n', '    string public constant name = "Gradus";\n', '    string public constant symbol = "GRAD";\n', '    uint32 public constant decimals = 18;\n', '    uint256 public totalSupply;\n', '    uint256 public tokenBuyRate = 10000;\n', '    \n', '    mapping(address => bool   ) isInvestor;\n', '    address[] public arrInvestors;\n', '    \n', '    address public CrowdsaleAddress;\n', '    bool public lockTransfers = false;\n', '\n', '    event Mint (address indexed to, uint256  amount);\n', '    event Burn(address indexed burner, uint256 value);\n', '    \n', '    constructor(address _CrowdsaleAddress) public {\n', '        CrowdsaleAddress = _CrowdsaleAddress;\n', '    }\n', '  \n', '    modifier onlyOwner() {\n', '        /**\n', '         * only Crowdsale contract can run it\n', '         */\n', '        require(msg.sender == CrowdsaleAddress);\n', '        _;\n', '    }   \n', '\n', '    function setTokenBuyRate(uint256 _newValue) public onlyOwner {\n', '        tokenBuyRate = _newValue;\n', '    }\n', '\n', '    function addInvestor(address _newInvestor) internal {\n', '        if (!isInvestor[_newInvestor]){\n', '            isInvestor[_newInvestor] = true;\n', '            arrInvestors.push(_newInvestor);\n', '        }  \n', '    }\n', '\n', '    function getInvestorAddress(uint256 _num) public view returns(address) {\n', '        return arrInvestors[_num];\n', '    }\n', '\n', '    function getInvestorsCount() public view returns(uint256) {\n', '        return arrInvestors.length;\n', '    }\n', '\n', '     // Override\n', '    function transfer(address _to, uint256 _value) public returns(bool){\n', '        if (msg.sender != CrowdsaleAddress){\n', '            require(!lockTransfers, "Transfers are prohibited");\n', '        }\n', '        addInvestor(_to);\n', '        return super.transfer(_to,_value);\n', '    }\n', '\n', '     // Override\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool){\n', '        if (msg.sender != CrowdsaleAddress){\n', '            require(!lockTransfers, "Transfers are prohibited");\n', '        }\n', '        addInvestor(_to);\n', '        return super.transferFrom(_from,_to,_value);\n', '    }\n', '     \n', '    function mint(address _to, uint256 _value) public onlyOwner returns (bool){\n', '        balances[_to] = balances[_to].add(_value);\n', '        totalSupply = totalSupply.add(_value);\n', '        addInvestor(_to);\n', '        emit Mint(_to, _value);\n', '        emit Transfer(address(0), _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function _burn(address _who, uint256 _value) internal {\n', '        require(_value <= balances[_who]);\n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '    \n', '    function lockTransfer(bool _lock) public onlyOwner {\n', '        lockTransfers = _lock;\n', '    }\n', '\n', '    /**\n', '     * function buys tokens from investors and burn it\n', '     */\n', '    function ReturnToken(uint256 _amount) public payable {\n', '        require (_amount > 0);\n', '        require (msg.sender != address(0));\n', '        \n', '        uint256 weiAmount = _amount.div(tokenBuyRate);\n', '        require (weiAmount > 0, "Amount is less than the minimum value");\n', '        require (address(this).balance >= weiAmount, "Contract balance is empty");\n', '        _burn(msg.sender, _amount);\n', '        msg.sender.transfer(weiAmount);\n', '    }\n', '\n', '    function() external payable {\n', '        // The token contract can receive ether for buy-back tokens\n', '    }  \n', '\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address candidate;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        candidate = newOwner;\n', '    }\n', '\n', '    function confirmOwnership() public {\n', '        require(candidate == msg.sender);\n', '        owner = candidate;\n', '        delete candidate;\n', '    }\n', '\n', '}\n', '\n', 'contract Dividend {\n', '    /**\n', '     * @title Contract receive ether, calculate profit and distributed it to investors\n', '     */\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public receivedDividends;\n', '    address public crowdsaleAddress;\n', '    GRADtoken public token;\n', '    CrowdSale public crowdSaleContract;\n', '    mapping (address => uint256) public divmap;\n', '    event PayDividends(address indexed investor, uint256 amount);\n', '\n', '    constructor(address _crowdsaleAddress, address _tokenAddress) public {\n', '        crowdsaleAddress = _crowdsaleAddress;\n', '        token = GRADtoken(_tokenAddress);\n', '        crowdSaleContract = CrowdSale(crowdsaleAddress);\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        /**\n', '         * only Crowdsale contract can run it\n', '         */\n', '        require(msg.sender == crowdsaleAddress);\n', '        _;\n', '    }  \n', '\n', '    /** \n', '     * @dev function calculate dividends and store result in mapping divmap\n', '     * @dev stop all transfer before calculations\n', '     * k - coefficient\n', '     */    \n', '    function _CalcDiv() internal {\n', '        uint256 myAround = 1 ether;\n', '        uint256 i;\n', '        uint256 k;\n', '        address invAddress;\n', '        receivedDividends = receivedDividends.add(msg.value);\n', '\n', '        if (receivedDividends >= crowdSaleContract.hardCapDividends()){\n', '            uint256 lengthArrInvesotrs = token.getInvestorsCount();\n', '            crowdSaleContract.lockTransfer(true); \n', '            k = receivedDividends.mul(myAround).div(token.totalSupply());\n', '            uint256 myProfit;\n', '            \n', '            for (i = 0;  i < lengthArrInvesotrs; i++) {\n', '                invAddress = token.getInvestorAddress(i);\n', '                myProfit = token.balanceOf(invAddress).mul(k).div(myAround);\n', '                divmap[invAddress] = divmap[invAddress].add(myProfit);\n', '            }\n', '            crowdSaleContract.lockTransfer(false); \n', '            receivedDividends = 0;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * function pay dividends to investors\n', '     */\n', '    function Pay() public {\n', '        uint256 dividends = divmap[msg.sender];\n', '        require (dividends > 0);\n', '        require (dividends <= address(this).balance);\n', '        divmap[msg.sender] = 0;\n', '        msg.sender.transfer(dividends);\n', '        emit PayDividends(msg.sender, dividends);\n', '    } \n', '    \n', '    function killContract(address _profitOwner) public onlyOwner {\n', '        selfdestruct(_profitOwner);\n', '    }\n', '\n', '    /**\n', '     * fallback function can be used to receive funds and calculate dividends\n', '     */\n', '    function () external payable {\n', '        _CalcDiv();\n', '    }  \n', '\n', '}\n', '\n', '\n', '    /**\n', '     * @title CrowdSale contract for Gradus token\n', '     * https://github.com/chelbukhov/Gradus-smart-contract.git\n', '     */\n', 'contract CrowdSale is Ownable{\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    address myAddress = this;\n', '    \n', '    GRADtoken public token = new GRADtoken(myAddress);\n', '    Dividend public dividendContract = new Dividend(myAddress, address(token));\n', '    \n', '    // address where funds are collected\n', '    address public wallet = 0x0;\n', '\n', '    //tokenSaleRate don&#39;t change\n', '    uint256 public tokenSaleRate; \n', '\n', '    // limit for activate function calcucate dividends\n', '    uint256 public hardCapDividends;\n', '    \n', '    /**\n', '     * Current funds during this period of sale\n', '     * and the upper limit for this period of sales\n', '     */\n', '    uint256 public currentFunds = 0;\n', '    uint256 public hardCapCrowdSale = 0;\n', '    bool private isSaleActive;\n', '\n', '    /**\n', '    * event for token purchase logging\n', '    * @param _to who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenSale(address indexed _to, uint256 value, uint256 amount);\n', '\n', '    constructor() public {\n', '        /**\n', '         * @dev tokenRate is rate tokens per 1 ether. don&#39;t change.\n', '         */\n', '        tokenSaleRate = 10000;\n', '\n', '        /**\n', '         * @dev limits in ether for contracts CrowdSale and Dividends\n', '         */\n', '        hardCapCrowdSale = 10 * (1 ether);\n', '        hardCapDividends = 10 * (1 ether);\n', '\n', '        /**\n', '         * @dev At start stage profit wallet is owner wallet. Must be changed after owner contract change\n', '         */\n', '        wallet = msg.sender;\n', '    }\n', '\n', '\n', '    modifier restricted(){\n', '        require(msg.sender == owner || msg.sender == address(dividendContract));\n', '        _;\n', '    }\n', '\n', '    function setNewDividendContract(address _newContract) public onlyOwner {\n', '        dividendContract = Dividend(_newContract);\n', '    }\n', '\n', '\n', '    /**\n', '     * function set upper limit to receive funds\n', '     * value entered in whole ether. 10 = 10 ether\n', '    */\n', '    function setHardCapCrowdSale(uint256 _newValue) public onlyOwner {\n', '        hardCapCrowdSale = _newValue.mul(1 ether);\n', '        currentFunds = 0;\n', '    }\n', '\n', '\n', '    /**\n', '     * Enter Amount in whole ether. 1 = 1 ether\n', '     */\n', '    function setHardCapDividends(uint256 _newValue) public onlyOwner {\n', '        hardCapDividends = _newValue.mul(1 ether);\n', '    }\n', '    \n', '    function setTokenBuyRate(uint256 _newValue) public onlyOwner {\n', '        token.setTokenBuyRate(_newValue);\n', '    }\n', '\n', '    function setProfitAddress(address _newWallet) public onlyOwner {\n', '        require(_newWallet != address(0),"Invalid address");\n', '        wallet = _newWallet;\n', '    }\n', '\n', '    /**\n', '     * function sale token to investor\n', '    */\n', '    function _saleTokens() internal {\n', '        require(msg.value >= 10**16, "Minimum value is 0.01 ether");\n', '        require(hardCapCrowdSale >= currentFunds.add(msg.value), "Upper limit on fund raising exceeded");      \n', '        require(msg.sender != address(0), "Address sender is empty");\n', '        require(wallet != address(0),"Enter address profit wallet");\n', '        require(isSaleActive, "Set saleStatus in true");\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(tokenSaleRate);\n', '\n', '        token.mint(msg.sender, tokens);\n', '        emit TokenSale(msg.sender, weiAmount, tokens);\n', '        currentFunds = currentFunds.add(msg.value);\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '  \n', '    function lockTransfer(bool _lock) public restricted {\n', '        /**\n', '         * @dev This function may be started from owner or dividendContract\n', '         */\n', '        token.lockTransfer(_lock);\n', '    }\n', '\n', '  //disable if enabled\n', '    function disableSale() onlyOwner() public returns (bool) {\n', '        require(isSaleActive == true);\n', '        isSaleActive = false;\n', '        return true;\n', '    }\n', '\n', '  // enable if diabled\n', '    function enableSale()  onlyOwner() public returns (bool) {\n', '        require(isSaleActive == false);\n', '        isSaleActive = true;\n', '        return true;\n', '    }\n', '\n', '  // retruns true if sale is currently active\n', '    function saleStatus() public view returns (bool){\n', '        return isSaleActive;\n', '    }\n', '\n', '    /**\n', '     * @dev  function kill Dividend contract and withdraw all funds to wallet\n', '     */\n', '    function killDividentContract(uint256 _kod) public onlyOwner {\n', '        require(_kod == 666);\n', '        dividendContract.killContract(wallet);\n', '    }\n', '\n', '  // fallback function can be used to sale tokens\n', '    function () external payable {\n', '        _saleTokens();\n', '    }\n', '\n', '}']