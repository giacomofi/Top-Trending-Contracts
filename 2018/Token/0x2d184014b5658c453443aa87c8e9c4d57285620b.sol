['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/ERC223.sol\n', '\n', '/**\n', ' * @title Interface for an ERC223 Contract\n', ' * @author Amr Gawish <amr@gawi.sh>\n', ' * @dev Only one method is unique to contracts `transfer(address _to, uint _value, bytes _data)`\n', ' * @notice The interface has been stripped to its unique methods to prevent duplicating methods with ERC20 interface\n', '*/\n', 'interface ERC223 {\n', '    function transfer(address _to, uint _value, bytes _data) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', '// File: contracts/ERC223ReceivingContract.sol\n', '\n', '/**\n', ' * @title Contract that will work with ERC223 tokens.\n', ' */\n', ' \n', 'contract ERC223ReceivingContract { \n', '\n', '    /**\n', '    * @dev Standard ERC223 function that will handle incoming token transfers.\n', '    *\n', '    * @param _from  Token sender address.\n', '    * @param _value Amount of tokens.\n', '    * @param _data  Transaction metadata.\n', '    */\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/OperatorManaged.sol\n', '\n', '// Simple JSE Operator management contract\n', 'contract OperatorManaged is Ownable {\n', '\n', '    address public operatorAddress;\n', '    address public adminAddress;\n', '\n', '    event AdminAddressChanged(address indexed _newAddress);\n', '    event OperatorAddressChanged(address indexed _newAddress);\n', '\n', '\n', '    constructor() public\n', '        Ownable()\n', '    {\n', '        adminAddress = msg.sender;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(isAdmin(msg.sender));\n', '        _;\n', '    }\n', '\n', '\n', '    modifier onlyAdminOrOperator() {\n', '        require(isAdmin(msg.sender) || isOperator(msg.sender));\n', '        _;\n', '    }\n', '\n', '\n', '    modifier onlyOwnerOrAdmin() {\n', '        require(isOwner(msg.sender) || isAdmin(msg.sender));\n', '        _;\n', '    }\n', '\n', '\n', '    modifier onlyOperator() {\n', '        require(isOperator(msg.sender));\n', '        _;\n', '    }\n', '\n', '\n', '    function isAdmin(address _address) internal view returns (bool) {\n', '        return (adminAddress != address(0) && _address == adminAddress);\n', '    }\n', '\n', '\n', '    function isOperator(address _address) internal view returns (bool) {\n', '        return (operatorAddress != address(0) && _address == operatorAddress);\n', '    }\n', '\n', '    function isOwner(address _address) internal view returns (bool) {\n', '        return (owner != address(0) && _address == owner);\n', '    }\n', '\n', '\n', '    function isOwnerOrOperator(address _address) internal view returns (bool) {\n', '        return (isOwner(_address) || isOperator(_address));\n', '    }\n', '\n', '\n', '    // Owner and Admin can change the admin address. Address can also be set to 0 to &#39;disable&#39; it.\n', '    function setAdminAddress(address _adminAddress) external onlyOwnerOrAdmin returns (bool) {\n', '        require(_adminAddress != owner);\n', '        require(_adminAddress != address(this));\n', '        require(!isOperator(_adminAddress));\n', '\n', '        adminAddress = _adminAddress;\n', '\n', '        emit AdminAddressChanged(_adminAddress);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    // Owner and Admin can change the operations address. Address can also be set to 0 to &#39;disable&#39; it.\n', '    function setOperatorAddress(address _operatorAddress) external onlyOwnerOrAdmin returns (bool) {\n', '        require(_operatorAddress != owner);\n', '        require(_operatorAddress != address(this));\n', '        require(!isAdmin(_operatorAddress));\n', '\n', '        operatorAddress = _operatorAddress;\n', '\n', '        emit OperatorAddressChanged(_operatorAddress);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20//MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: contracts/JSEToken.sol\n', '\n', '/**\n', ' * @title Main Token Contract for JSE Coin\n', ' * @author Amr Gawish <amr@gawi.sh>\n', ' * @dev This Token is the Mintable and Burnable to allow variety of actions to be done by users.\n', ' * @dev It also complies with both ERC20 and ERC223.\n', ' * @notice Trying to use JSE Token to Contracts that doesn&#39;t accept tokens and doesn&#39;t have tokenFallback function will fail, and all contracts\n', ' * must comply to ERC223 compliance. \n', '*/\n', 'contract JSEToken is ERC223, BurnableToken, Ownable, MintableToken, OperatorManaged {\n', '    \n', '    event Finalized();\n', '\n', '    string public name = "JSE Token";\n', '    string public symbol = "JSE";\n', '    uint public decimals = 18;\n', '    uint public initialSupply = 10000000000 * (10 ** decimals); //10,000,000,000 aka 10 billion\n', '\n', '    bool public finalized;\n', '\n', '    constructor() OperatorManaged() public {\n', '        totalSupply_ = initialSupply;\n', '        balances[msg.sender] = initialSupply; \n', '\n', '        emit Transfer(0x0, msg.sender, initialSupply);\n', '    }\n', '\n', '\n', '    // Implementation of the standard transferFrom method that takes into account the finalize flag.\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        checkTransferAllowed(msg.sender, _to);\n', '\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function checkTransferAllowed(address _sender, address _to) private view {\n', '        if (finalized) {\n', '            // Everybody should be ok to transfer once the token is finalized.\n', '            return;\n', '        }\n', '\n', '        // Owner and Ops are allowed to transfer tokens before the sale is finalized.\n', '        // This allows the tokens to move from the TokenSale contract to a beneficiary.\n', '        // We also allow someone to send tokens back to the owner. This is useful among other\n', '        // cases, for the Trustee to transfer unlocked tokens back to the owner (reclaimTokens).\n', '        require(isOwnerOrOperator(_sender) || _to == owner);\n', '    }\n', '\n', '    // Implementation of the standard transfer method that takes into account the finalize flag.\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        checkTransferAllowed(msg.sender, _to);\n', '\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified contract address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @param _data Additional Data sent to the contract.\n', '    */\n', '    function transfer(address _to, uint _value, bytes _data) external returns (bool) {\n', '        checkTransferAllowed(msg.sender, _to);\n', '\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        require(isContract(_to));\n', '\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        ERC223ReceivingContract erc223Contract = ERC223ReceivingContract(_to);\n', '        erc223Contract.tokenFallback(msg.sender, _value, _data);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /** \n', '    * @dev Owner can transfer out any accidentally sent ERC20 tokens\n', '    */\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    function isContract(address _addr) private view returns (bool) {\n', '        uint codeSize;\n', '        /* solium-disable-next-line */\n', '        assembly {\n', '            codeSize := extcodesize(_addr)\n', '        }\n', '        return codeSize > 0;\n', '    }\n', '\n', '    // Finalize method marks the point where token transfers are finally allowed for everybody.\n', '    function finalize() external onlyAdmin returns (bool success) {\n', '        require(!finalized);\n', '\n', '        finalized = true;\n', '\n', '        emit Finalized();\n', '\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/ERC223.sol\n', '\n', '/**\n', ' * @title Interface for an ERC223 Contract\n', ' * @author Amr Gawish <amr@gawi.sh>\n', ' * @dev Only one method is unique to contracts `transfer(address _to, uint _value, bytes _data)`\n', ' * @notice The interface has been stripped to its unique methods to prevent duplicating methods with ERC20 interface\n', '*/\n', 'interface ERC223 {\n', '    function transfer(address _to, uint _value, bytes _data) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', '// File: contracts/ERC223ReceivingContract.sol\n', '\n', '/**\n', ' * @title Contract that will work with ERC223 tokens.\n', ' */\n', ' \n', 'contract ERC223ReceivingContract { \n', '\n', '    /**\n', '    * @dev Standard ERC223 function that will handle incoming token transfers.\n', '    *\n', '    * @param _from  Token sender address.\n', '    * @param _value Amount of tokens.\n', '    * @param _data  Transaction metadata.\n', '    */\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/OperatorManaged.sol\n', '\n', '// Simple JSE Operator management contract\n', 'contract OperatorManaged is Ownable {\n', '\n', '    address public operatorAddress;\n', '    address public adminAddress;\n', '\n', '    event AdminAddressChanged(address indexed _newAddress);\n', '    event OperatorAddressChanged(address indexed _newAddress);\n', '\n', '\n', '    constructor() public\n', '        Ownable()\n', '    {\n', '        adminAddress = msg.sender;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(isAdmin(msg.sender));\n', '        _;\n', '    }\n', '\n', '\n', '    modifier onlyAdminOrOperator() {\n', '        require(isAdmin(msg.sender) || isOperator(msg.sender));\n', '        _;\n', '    }\n', '\n', '\n', '    modifier onlyOwnerOrAdmin() {\n', '        require(isOwner(msg.sender) || isAdmin(msg.sender));\n', '        _;\n', '    }\n', '\n', '\n', '    modifier onlyOperator() {\n', '        require(isOperator(msg.sender));\n', '        _;\n', '    }\n', '\n', '\n', '    function isAdmin(address _address) internal view returns (bool) {\n', '        return (adminAddress != address(0) && _address == adminAddress);\n', '    }\n', '\n', '\n', '    function isOperator(address _address) internal view returns (bool) {\n', '        return (operatorAddress != address(0) && _address == operatorAddress);\n', '    }\n', '\n', '    function isOwner(address _address) internal view returns (bool) {\n', '        return (owner != address(0) && _address == owner);\n', '    }\n', '\n', '\n', '    function isOwnerOrOperator(address _address) internal view returns (bool) {\n', '        return (isOwner(_address) || isOperator(_address));\n', '    }\n', '\n', '\n', "    // Owner and Admin can change the admin address. Address can also be set to 0 to 'disable' it.\n", '    function setAdminAddress(address _adminAddress) external onlyOwnerOrAdmin returns (bool) {\n', '        require(_adminAddress != owner);\n', '        require(_adminAddress != address(this));\n', '        require(!isOperator(_adminAddress));\n', '\n', '        adminAddress = _adminAddress;\n', '\n', '        emit AdminAddressChanged(_adminAddress);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', "    // Owner and Admin can change the operations address. Address can also be set to 0 to 'disable' it.\n", '    function setOperatorAddress(address _operatorAddress) external onlyOwnerOrAdmin returns (bool) {\n', '        require(_operatorAddress != owner);\n', '        require(_operatorAddress != address(this));\n', '        require(!isAdmin(_operatorAddress));\n', '\n', '        operatorAddress = _operatorAddress;\n', '\n', '        emit OperatorAddressChanged(_operatorAddress);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20//MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: contracts/JSEToken.sol\n', '\n', '/**\n', ' * @title Main Token Contract for JSE Coin\n', ' * @author Amr Gawish <amr@gawi.sh>\n', ' * @dev This Token is the Mintable and Burnable to allow variety of actions to be done by users.\n', ' * @dev It also complies with both ERC20 and ERC223.\n', " * @notice Trying to use JSE Token to Contracts that doesn't accept tokens and doesn't have tokenFallback function will fail, and all contracts\n", ' * must comply to ERC223 compliance. \n', '*/\n', 'contract JSEToken is ERC223, BurnableToken, Ownable, MintableToken, OperatorManaged {\n', '    \n', '    event Finalized();\n', '\n', '    string public name = "JSE Token";\n', '    string public symbol = "JSE";\n', '    uint public decimals = 18;\n', '    uint public initialSupply = 10000000000 * (10 ** decimals); //10,000,000,000 aka 10 billion\n', '\n', '    bool public finalized;\n', '\n', '    constructor() OperatorManaged() public {\n', '        totalSupply_ = initialSupply;\n', '        balances[msg.sender] = initialSupply; \n', '\n', '        emit Transfer(0x0, msg.sender, initialSupply);\n', '    }\n', '\n', '\n', '    // Implementation of the standard transferFrom method that takes into account the finalize flag.\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        checkTransferAllowed(msg.sender, _to);\n', '\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function checkTransferAllowed(address _sender, address _to) private view {\n', '        if (finalized) {\n', '            // Everybody should be ok to transfer once the token is finalized.\n', '            return;\n', '        }\n', '\n', '        // Owner and Ops are allowed to transfer tokens before the sale is finalized.\n', '        // This allows the tokens to move from the TokenSale contract to a beneficiary.\n', '        // We also allow someone to send tokens back to the owner. This is useful among other\n', '        // cases, for the Trustee to transfer unlocked tokens back to the owner (reclaimTokens).\n', '        require(isOwnerOrOperator(_sender) || _to == owner);\n', '    }\n', '\n', '    // Implementation of the standard transfer method that takes into account the finalize flag.\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        checkTransferAllowed(msg.sender, _to);\n', '\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified contract address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @param _data Additional Data sent to the contract.\n', '    */\n', '    function transfer(address _to, uint _value, bytes _data) external returns (bool) {\n', '        checkTransferAllowed(msg.sender, _to);\n', '\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        require(isContract(_to));\n', '\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        ERC223ReceivingContract erc223Contract = ERC223ReceivingContract(_to);\n', '        erc223Contract.tokenFallback(msg.sender, _value, _data);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /** \n', '    * @dev Owner can transfer out any accidentally sent ERC20 tokens\n', '    */\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    function isContract(address _addr) private view returns (bool) {\n', '        uint codeSize;\n', '        /* solium-disable-next-line */\n', '        assembly {\n', '            codeSize := extcodesize(_addr)\n', '        }\n', '        return codeSize > 0;\n', '    }\n', '\n', '    // Finalize method marks the point where token transfers are finally allowed for everybody.\n', '    function finalize() external onlyAdmin returns (bool success) {\n', '        require(!finalized);\n', '\n', '        finalized = true;\n', '\n', '        emit Finalized();\n', '\n', '        return true;\n', '    }\n', '}']
