['pragma solidity ^0.4.18;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  address public newOwner;\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  function acceptOwnership() public {\n', '    require(msg.sender == newOwner);\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '  \n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract AirdropFinalSHK is Ownable{\n', '    ERC20 public token;\n', '    address public creator;\n', '    \n', '    event LogAccountAmount(address indexed user, uint256 indexed amount);\n', '\n', '    function AirdropFinalSHK(address _token) public {\n', '        token = ERC20(_token);\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function setToken(address _token) public {\n', '        token = ERC20(_token);\n', '    }\n', '\n', "    // Uses transferFrom so you'll need to approve some tokens before this one to\n", '    // this contract address\n', '    function startAirdropFrom(address _fromAddr, address[] users, uint256 amounts) public onlyOwner {\n', '        for(uint256 i = 0; i < users.length; i++) {\n', '            \n', '            LogAccountAmount(users[i], amounts);\n', '\n', '            token.transferFrom(_fromAddr, users[i], amounts);\n', '        }\n', '    }\n', '    \n', '    function startAirdrop(address[] _user, uint256 _amount) public onlyOwner {\n', '    \tfor(uint256 i = 0; i < _user.length; i++) {\n', '        \ttoken.transfer(_user[i], _amount);\n', '        }\n', '    }\n', '    function removeContract() public onlyOwner {\n', '            selfdestruct(msg.sender);\n', '            \n', '        }\n', '}']