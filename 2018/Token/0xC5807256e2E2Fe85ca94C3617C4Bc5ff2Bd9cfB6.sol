['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '    * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract Usable {\n', '    function use(address to, uint256 value, uint256 useType, uint256 param1, uint256 param2, uint256 param3, string param4) external;\n', '    function setUseAddr(address addr) external;\n', '    function setFee(uint256 useType, uint16 feeType, uint256 fee) external;\n', '    event UseSucc(address indexed from, address indexed to, uint256 useType, uint256 value, uint256 fee, uint256 param1, uint256 param2, uint256 param3, string param4);\n', '    event UseFail(address indexed from, address indexed to, uint256 useType, uint256 value, uint256 fee, uint256 param1, uint256 param2, uint256 param3, string param4);\n', '}\n', '\n', 'contract DragonCoin is StandardToken, Usable {\n', '    using SafeMath for uint256;\n', '    \n', '    event Mint(address indexed to, uint256 value);\n', '    event Burn(address indexed burner, uint256 value);\n', '    \n', '    string public name = "DragonSeriesToken"; \n', '    string public symbol = "DST";\n', '    uint public decimals = 18;\n', '    uint public INITIAL_SUPPLY = 1100000 * (10 ** decimals);     \n', '    uint public MAX_SUPPLY = 10 * 100000000 * (10 ** decimals); \n', '    address public ceo;\n', '    address public coo;\n', '    address public cfo;\n', '\n', '    UseInterface public useAddr;\n', '\n', '    // key = useType, value = UseFee\n', '    mapping (uint256 => UseFee) public useFees;\n', '    uint private _maxPercentFee = 1000000;\n', '\n', '    struct UseFee {\n', '        uint16 feeType;     // 1: fixed, 2: percentage\n', '        uint256 fee;        // feeType=1: DST, feeType=2: 0-1000000 (0.0000% - 100.0000%)\n', '    }\n', '    \n', '    function DragonCoin() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        ceo = msg.sender;\n', '        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    }\n', '    \n', '    function setCEO(address newCEO) public onlyCEO{\n', '        require(newCEO != address(0));\n', '        \n', '        ceo = newCEO;\n', '    }\n', '    \n', '    function setCOO(address newCOO) public onlyCEO{\n', '        require(newCOO != address(0));\n', '        \n', '        coo = newCOO;\n', '    }\n', '    \n', '    function setCFO(address newCFO) public onlyCEO{\n', '        require(newCFO != address(0));\n', '        \n', '        cfo = newCFO;\n', '    }\n', '\n', '    function mint(uint256 value) public onlyCFO returns (bool) {\n', '        require(totalSupply_.add(value) <= MAX_SUPPLY);\n', '        \n', '        balances[cfo] = balances[cfo].add(value);\n', '        totalSupply_ = totalSupply_.add(value);\n', '        \n', '        // mint event\n', '        emit Mint(cfo, value);\n', '        emit Transfer(0x0, cfo, value);\n', '        return true;\n', '    }\n', '    \n', '    function burn(uint256 value) public onlyCOO returns (bool) {\n', '        require(balances[coo] >= value); \n', '        \n', '        balances[coo] = balances[coo].sub(value);\n', '        totalSupply_ = totalSupply_.sub(value);\n', '        \n', '        // burn event\n', '        emit Burn(coo, value);\n', '        emit Transfer(coo, 0x0, value);\n', '        return true;\n', '    }\n', '\n', '    // Useable\n', '\n', '    function setUseAddr(address addr) external onlyCOO{\n', '        useAddr = UseInterface(addr);\n', '    }\n', '\n', '    function setFee(uint256 useType, uint16 feeType, uint256 fee) external onlyCOO{\n', '        require(feeType == 1 || feeType == 2);\n', '\n', '        if(feeType == 2){\n', '            require(fee <= _maxPercentFee);\n', '        }\n', '\n', '        UseFee memory ufee = UseFee({\n', '            feeType: feeType,\n', '            fee: fee\n', '        });\n', '        useFees[useType] = ufee;\n', '    }\n', '\n', '    function use(address to, uint256 value, uint256 useType, uint256 param1, uint256 param2, uint256 param3, string param4) external {\n', '        require(useAddr != address(0));\n', '        require(balances[msg.sender] >= value);\n', '        require(to != address(0) && cfo != address(0));\n', '        \n', '        UseFee memory ufee = useFees[useType];\n', '\n', '        require(ufee.feeType == 1 || ufee.feeType == 2);\n', '        \n', '        uint256 actualFee = 0;\n', '\n', '        if(ufee.feeType == 1){  // fixed fee\n', '            actualFee = ufee.fee;\n', '        }else if(ufee.feeType == 2){  // percentage fee\n', '            actualFee = value.mul(ufee.fee).div(_maxPercentFee);\n', '        }\n', '\n', '        uint256 actualVal = value.sub(actualFee);\n', '\n', '        if(useAddr.use(msg.sender, to, value, useType, param1, param2, param3, param4)){\n', '            // transfer token\n', '            balances[msg.sender] = balances[msg.sender].sub(value);\n', '            balances[to] = balances[to].add(actualVal);\n', '            emit Transfer(msg.sender, to, actualVal);\n', '\n', '            if(actualFee > 0){\n', '                balances[cfo] = balances[cfo].add(actualFee);\n', '                emit Transfer(msg.sender, cfo, actualFee);\n', '            }\n', '\n', '            emit UseSucc(msg.sender, to, useType, value, actualFee, param1, param2, param3, param4);\n', '        }else{\n', '            emit UseFail(msg.sender, to, useType, value, actualFee, param1, param2, param3, param4);\n', '        }\n', '    }\n', '\n', '    /// @dev Access modifier for CEO-only functionality\n', '    modifier onlyCEO() {\n', '        require(msg.sender == ceo);\n', '        _;\n', '    }\n', '    \n', '    /// @dev Access modifier for CFO-only functionality\n', '    modifier onlyCFO() {\n', '        require(msg.sender == cfo);\n', '        _;\n', '    }\n', '    \n', '    /// @dev Access modifier for COO-only functionality\n', '    modifier onlyCOO() {\n', '        require(msg.sender == coo);\n', '        _;\n', '    }\n', '    \n', '}\n', '\n', 'contract UseInterface {\n', '    function use(address from, address to, uint256 value, uint256 useType, uint256 param1, uint256 param2, uint256 param3, string param4) external returns (bool);\n', '}']