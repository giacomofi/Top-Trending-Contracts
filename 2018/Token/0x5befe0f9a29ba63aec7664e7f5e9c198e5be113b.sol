['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '// accepted from zeppelin-solidity https://github.com/OpenZeppelin/zeppelin-solidity\n', '/*\n', ' * ERC20 interface\n', ' * see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address _who) public constant returns (uint);\n', '  function allowance(address _owner, address _spender) public constant returns (uint);\n', '\n', '  function transfer(address _to, uint _value) public returns (bool ok);\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool ok);\n', '  function approve(address _spender, uint _value) public returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  // event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    // OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract DSTToken is ERC20, Ownable, SafeMath {\n', '\n', '    // Token related informations\n', '    string public constant name = "Decentralize Silver Token";\n', '    string public constant symbol = "DST";\n', '    uint256 public constant decimals = 18; // decimal places\n', '\n', '    uint256 public tokensPerEther = 1500;\n', '\n', '    // MultiSig Wallet Address\n', '    address public DSTMultisig;\n', '\n', '    // Wallet L,M,N and O address\n', '    address dstWalletLMNO;\n', '\n', '    bool public startStop = false;\n', '\n', '    mapping (address => uint256) public walletA;\n', '    mapping (address => uint256) public walletB; \n', '    mapping (address => uint256) public walletC;\n', '    mapping (address => uint256) public walletF;\n', '    mapping (address => uint256) public walletG;\n', '    mapping (address => uint256) public walletH;\n', '\n', '    mapping (address => uint256) public releasedA;\n', '    mapping (address => uint256) public releasedB; \n', '    mapping (address => uint256) public releasedC;\n', '    mapping (address => uint256) public releasedF;\n', '    mapping (address => uint256) public releasedG; \n', '    mapping (address => uint256) public releasedH;\n', '\n', '    // Mapping of token balance and allowed address for each address with transfer limit\n', '    mapping (address => uint256) balances;\n', '    //mapping of allowed address for each address with tranfer limit\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    struct WalletConfig{\n', '        uint256 start;\n', '        uint256 cliff;\n', '        uint256 duration;\n', '    }\n', '\n', '    mapping (uint => address) public walletAddresses;\n', '    mapping (uint => WalletConfig) public allWalletConfig;\n', '\n', '    // @param _dstWalletLMNO Ether Address for wallet L,M,N and O\n', '    // Only to be called by Owner of this contract\n', '    function setDSTWalletLMNO(address _dstWalletLMNO) onlyOwner external{\n', '        require(_dstWalletLMNO != address(0));\n', '        dstWalletLMNO = _dstWalletLMNO;\n', '    }\n', '\n', '    // Owner can Set Multisig wallet\n', '    // @param _dstMultisig address of Multisig wallet.\n', '    function setDSTMultiSig(address _dstMultisig) onlyOwner external{\n', '        require(_dstMultisig != address(0));\n', '        DSTMultisig = _dstMultisig;\n', '    }\n', '\n', '    function startStopICO(bool status) onlyOwner external{\n', '        startStop = status;\n', '    }\n', '\n', '    function addWalletAddressAndTokens(uint _id, address _walletAddress, uint256 _tokens) onlyOwner external{\n', '        require(_walletAddress != address(0));\n', '        walletAddresses[_id] = _walletAddress;\n', '        balances[_walletAddress] = safeAdd(balances[_walletAddress],_tokens); // wallet tokens initialize        \n', '    }\n', '\n', '    // function preAllocation(uint256 _walletId, uint256 _tokens) onlyOwner external{\n', '    //     require(_tokens > 0);\n', '    //     balances[walletAddresses[_walletId]] = safeAdd(balances[walletAddresses[_walletId]],_tokens); // wallet tokens initialize\n', '    // }\n', '\n', '    function addWalletConfig(uint256 _id, uint256 _start, uint256 _cliff, uint256 _duration) onlyOwner external{\n', '        uint256 start = safeAdd(_start,now);\n', '        uint256 cliff = safeAdd(start,_cliff);\n', '        allWalletConfig[_id] = WalletConfig(\n', '            start,\n', '            cliff,\n', '            _duration\n', '        );\n', '    }\n', '\n', '    function assignToken(address _investor,uint256 _tokens) external {\n', '        // Check investor address and tokens.Not allow 0 value\n', '        require(_investor != address(0) && _tokens > 0);\n', '        // Check wallet have enough token balance to assign\n', '        require(_tokens <= balances[msg.sender]);\n', '        \n', '        // Debit the tokens from the wallet\n', '        balances[msg.sender] = safeSub(balances[msg.sender],_tokens);\n', '        // Increasing the totalSupply\n', '        totalSupply = safeAdd(totalSupply, _tokens);\n', '\n', '        // Assign tokens to the investor\n', '        if(msg.sender == walletAddresses[0]){\n', '            walletA[_investor] = safeAdd(walletA[_investor],_tokens);\n', '        }\n', '        else if(msg.sender == walletAddresses[1]){\n', '            walletB[_investor] = safeAdd(walletB[_investor],_tokens);\n', '        }\n', '        else if(msg.sender == walletAddresses[2]){\n', '            walletC[_investor] = safeAdd(walletC[_investor],_tokens);\n', '        }\n', '        else if(msg.sender == walletAddresses[5]){\n', '            walletF[_investor] = safeAdd(walletF[_investor],_tokens);\n', '        }\n', '        else if(msg.sender == walletAddresses[6]){\n', '            walletG[_investor] = safeAdd(walletG[_investor],_tokens);\n', '        }\n', '        else if(msg.sender == walletAddresses[7]){\n', '            walletH[_investor] = safeAdd(walletH[_investor],_tokens);\n', '        }\n', '        else{\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function assignTokenIJK(address _userAddress,uint256 _tokens) external {\n', '        require(msg.sender == walletAddresses[8] || msg.sender == walletAddresses[9] || msg.sender == walletAddresses[10]);\n', '        // Check investor address and tokens.Not allow 0 value\n', '        require(_userAddress != address(0) && _tokens > 0);\n', '        // Assign tokens to the investor\n', '        assignTokensWallet(msg.sender,_userAddress, _tokens);\n', '    }\n', '\n', '    function withdrawToken() public {\n', '        //require(walletA[msg.sender] > 0 || walletB[msg.sender] > 0 || walletC[msg.sender] > 0);\n', '        uint256 currentBalance = 0;\n', '        if(walletA[msg.sender] > 0){\n', '            uint256 unreleasedA = getReleasableAmount(0,msg.sender);\n', '            walletA[msg.sender] = safeSub(walletA[msg.sender], unreleasedA);\n', '            currentBalance = safeAdd(currentBalance, unreleasedA);\n', '            releasedA[msg.sender] = safeAdd(releasedA[msg.sender], unreleasedA);\n', '        }\n', '        if(walletB[msg.sender] > 0){\n', '            uint256 unreleasedB = getReleasableAmount(1,msg.sender);\n', '            walletB[msg.sender] = safeSub(walletB[msg.sender], unreleasedB);\n', '            currentBalance = safeAdd(currentBalance, unreleasedB);\n', '            releasedB[msg.sender] = safeAdd(releasedB[msg.sender], unreleasedB);\n', '        }\n', '        if(walletC[msg.sender] > 0){\n', '            uint256 unreleasedC = getReleasableAmount(2,msg.sender);\n', '            walletC[msg.sender] = safeSub(walletC[msg.sender], unreleasedC);\n', '            currentBalance = safeAdd(currentBalance, unreleasedC);\n', '            releasedC[msg.sender] = safeAdd(releasedC[msg.sender], unreleasedC);\n', '        }\n', '        require(currentBalance > 0);\n', '        // Assign tokens to the sender\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], currentBalance);\n', '    }\n', '\n', '    function withdrawBonusToken() public {\n', '        //require(walletF[msg.sender] > 0 || walletG[msg.sender] > 0 || walletH[msg.sender] > 0);\n', '        uint256 currentBalance = 0;\n', '        if(walletF[msg.sender] > 0){\n', '            uint256 unreleasedF = getReleasableBonusAmount(5,msg.sender);\n', '            walletF[msg.sender] = safeSub(walletF[msg.sender], unreleasedF);\n', '            currentBalance = safeAdd(currentBalance, unreleasedF);\n', '            releasedF[msg.sender] = safeAdd(releasedF[msg.sender], unreleasedF);\n', '        }\n', '        if(walletG[msg.sender] > 0){\n', '            uint256 unreleasedG = getReleasableBonusAmount(6,msg.sender);\n', '            walletG[msg.sender] = safeSub(walletG[msg.sender], unreleasedG);\n', '            currentBalance = safeAdd(currentBalance, unreleasedG);\n', '            releasedG[msg.sender] = safeAdd(releasedG[msg.sender], unreleasedG);\n', '        }\n', '        if(walletH[msg.sender] > 0){\n', '            uint256 unreleasedH = getReleasableBonusAmount(7,msg.sender);\n', '            walletH[msg.sender] = safeSub(walletH[msg.sender], unreleasedH);\n', '            currentBalance = safeAdd(currentBalance, unreleasedH);\n', '            releasedH[msg.sender] = safeAdd(releasedH[msg.sender], unreleasedH);\n', '        }\n', '        require(currentBalance > 0);\n', '        // Assign tokens to the sender\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], currentBalance);\n', '    }\n', '\n', '    function getReleasableAmount(uint256 _walletId,address _beneficiary) public view returns (uint256){\n', '        uint256 totalBalance;\n', '\n', '        if(_walletId == 0){\n', '            totalBalance = safeAdd(walletA[_beneficiary], releasedA[_beneficiary]);    \n', '            return safeSub(getData(_walletId,totalBalance), releasedA[_beneficiary]);\n', '        }\n', '        else if(_walletId == 1){\n', '            totalBalance = safeAdd(walletB[_beneficiary], releasedB[_beneficiary]);\n', '            return safeSub(getData(_walletId,totalBalance), releasedB[_beneficiary]);\n', '        }\n', '        else if(_walletId == 2){\n', '            totalBalance = safeAdd(walletC[_beneficiary], releasedC[_beneficiary]);\n', '            return safeSub(getData(_walletId,totalBalance), releasedC[_beneficiary]);\n', '        }\n', '        else{\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function getReleasableBonusAmount(uint256 _walletId,address _beneficiary) public view returns (uint256){\n', '        uint256 totalBalance;\n', '\n', '        if(_walletId == 5){\n', '            totalBalance = safeAdd(walletF[_beneficiary], releasedF[_beneficiary]);    \n', '            return safeSub(getData(_walletId,totalBalance), releasedF[_beneficiary]);\n', '        }\n', '        else if(_walletId == 6){\n', '            totalBalance = safeAdd(walletG[_beneficiary], releasedG[_beneficiary]);\n', '            return safeSub(getData(_walletId,totalBalance), releasedG[_beneficiary]);\n', '        }\n', '        else if(_walletId == 7){\n', '            totalBalance = safeAdd(walletH[_beneficiary], releasedH[_beneficiary]);\n', '            return safeSub(getData(_walletId,totalBalance), releasedH[_beneficiary]);\n', '        }\n', '        else{\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function getData(uint256 _walletId,uint256 _totalBalance) public view returns (uint256) {\n', '        uint256 availableBalanceIn = safeDiv(safeMul(_totalBalance, safeSub(allWalletConfig[_walletId].cliff, allWalletConfig[_walletId].start)), allWalletConfig[_walletId].duration);\n', '        return safeMul(availableBalanceIn, safeDiv(getVestedAmount(_walletId,_totalBalance), availableBalanceIn));\n', '    }\n', '\n', '    function getVestedAmount(uint256 _walletId,uint256 _totalBalance) public view returns (uint256) {\n', '        uint256 cliff = allWalletConfig[_walletId].cliff;\n', '        uint256 start = allWalletConfig[_walletId].start;\n', '        uint256 duration = allWalletConfig[_walletId].duration;\n', '\n', '        if (now < cliff) {\n', '            return 0;\n', '        } else if (now >= safeAdd(start,duration)) {\n', '            return _totalBalance;\n', '        } else {\n', '            return safeDiv(safeMul(_totalBalance,safeSub(now,start)),duration);\n', '        }\n', '    }\n', '\n', '    // Sale of the tokens. Investors can call this method to invest into DST Tokens\n', '    function() payable external {\n', '        // Allow only to invest in ICO stage\n', '        require(startStop);\n', '        // Sorry !! We only allow to invest with minimum 1 Ether as value\n', '        require(msg.value >= 1 ether);\n', '\n', '        // multiply by exchange rate to get newly created token amount\n', '        uint256 createdTokens = safeMul(msg.value, tokensPerEther);\n', '\n', '        // Call to Internal function to assign tokens\n', '        assignTokensWallet(walletAddresses[3],msg.sender, createdTokens);\n', '    }\n', '\n', '    // DST accepts Cash Investment through manual process in Fiat Currency\n', '    // DST Team will assign the tokens to investors manually through this function\n', '    //@ param cashInvestor address of investor\n', '    //@ param assignedTokens number of tokens to give to investor\n', '    function cashInvestment(address cashInvestor, uint256 assignedTokens) onlyOwner external {\n', '        // Check if cashInvestor address is set or not\n', '        // By mistake tokens mentioned as 0, save the cost of assigning tokens.\n', '        require(cashInvestor != address(0) && assignedTokens > 0);\n', '\n', '        // Call to Internal function to assign tokens\n', '        assignTokensWallet(walletAddresses[4],cashInvestor, assignedTokens);\n', '    }\n', '\n', '    // // Function will transfer the tokens to investor&#39;s address\n', '    // // Common function code for Crowdsale Investor And Cash Investor \n', '    // function assignTokens(address investor, uint256 tokens) internal {\n', '    //     // Creating tokens and  increasing the totalSupply\n', '    //     totalSupply = safeAdd(totalSupply, tokens);\n', '\n', '    //     // Assign new tokens to the sender\n', '    //     balances[investor] = safeAdd(balances[investor], tokens);\n', '\n', '    //     // Finally token created for sender, log the creation event\n', '    //     Transfer(0, investor, tokens);\n', '    // }\n', '\n', '    // Function will transfer the tokens to investor&#39;s address\n', '    // Common function code for Crowdsale Investor And Cash Investor \n', '    function assignTokensWallet(address walletAddress,address investor, uint256 tokens) internal {\n', '        // Check wallet have enough token balance to assign\n', '        require(tokens <= balances[walletAddress]);\n', '        // Creating tokens and  increasing the totalSupply\n', '        totalSupply = safeAdd(totalSupply, tokens);\n', '\n', '        // Debit the tokens from wallet\n', '        balances[walletAddress] = safeSub(balances[walletAddress],tokens);\n', '        // Assign new tokens to the sender\n', '        balances[investor] = safeAdd(balances[investor], tokens);\n', '\n', '        // Finally token created for sender, log the creation event\n', '        Transfer(0, investor, tokens);\n', '    }\n', '\n', '    function finalizeCrowdSale() external{\n', '        // Check DST Multisig wallet set or not\n', '        require(DSTMultisig != address(0));\n', '        // Send fund to multisig wallet\n', '        require(DSTMultisig.send(address(this).balance));\n', '    }\n', '\n', '    // @param _who The address of the investor to check balance\n', '    // @return balance tokens of investor address\n', '    function balanceOf(address _who) public constant returns (uint) {\n', '        return balances[_who];\n', '    }\n', '\n', '    // @param _owner The address of the account owning tokens\n', '    // @param _spender The address of the account able to transfer the tokens\n', '    // @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public constant returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    //  Transfer `value` DST tokens from sender&#39;s account\n', '    // `msg.sender` to provided account address `to`.\n', '    // @param _to The address of the recipient\n', '    // @param _value The number of DST tokens to transfer\n', '    // @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint _value) public returns (bool ok) {\n', '        //validate receiver address and value.Not allow 0 value\n', '        require(_to != 0 && _value > 0);\n', '        uint256 senderBalance = balances[msg.sender];\n', '        //Check sender have enough balance\n', '        require(senderBalance >= _value);\n', '        senderBalance = safeSub(senderBalance, _value);\n', '        balances[msg.sender] = senderBalance;\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    //  Transfer `value` DST tokens from sender &#39;from&#39;\n', '    // to provided account address `to`.\n', '    // @param from The address of the sender\n', '    // @param to The address of the recipient\n', '    // @param value The number of miBoodle to transfer\n', '    // @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool ok) {\n', '        //validate _from,_to address and _value(Now allow with 0)\n', '        require(_from != 0 && _to != 0 && _value > 0);\n', '        //Check amount is approved by the owner for spender to spent and owner have enough balances\n', '        require(allowed[_from][msg.sender] >= _value && balances[_from] >= _value);\n', '        balances[_from] = safeSub(balances[_from],_value);\n', '        balances[_to] = safeAdd(balances[_to],_value);\n', '        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    //  `msg.sender` approves `spender` to spend `value` tokens\n', '    // @param spender The address of the account able to transfer the tokens\n', '    // @param value The amount of wei to be approved for transfer\n', '    // @return Whether the approval was successful or not\n', '    function approve(address _spender, uint _value) public returns (bool ok) {\n', '        //validate _spender address\n', '        require(_spender != 0);\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // This method is only use for debit DSTToken from DST wallet L,M,N and O\n', '    // @dev Required state: is dstWalletLMNO set\n', '    // @param _walletAddress The address of the wallet from tokens debit\n', '    // @param token The number of DST tokens to debit\n', '    // @return Whether the debit was successful or not\n', '    function debitWalletLMNO(address _walletAddress,uint256 token) external onlyDSTWalletLMNO returns (bool){\n', '        // Check if DST wallet LMNO is set or not\n', '        require(dstWalletLMNO != address(0));\n', '        // Check wallet have enough token and token is valid\n', '        require(balances[_walletAddress] >= token && token > 0);\n', '        // Increasing the totalSupply\n', '        totalSupply = safeAdd(totalSupply, token);\n', '        // Debit tokens from wallet balance\n', '        balances[_walletAddress] = safeSub(balances[_walletAddress],token);\n', '        return true;\n', '    }\n', '\n', '    // This method is only use for credit DSTToken to DST wallet L,M,N and O users\n', '    // @dev Required state: is dstWalletLMNO set\n', '    // @param claimAddress The address of the wallet user to credit tokens\n', '    // @param token The number of DST tokens to credit\n', '    // @return Whether the credit was successful or not\n', '    function creditWalletUserLMNO(address claimAddress,uint256 token) external onlyDSTWalletLMNO returns (bool){\n', '        // Check if DST wallet LMNO is set or not\n', '        require(dstWalletLMNO != address(0));\n', '        // Check claiment address and token is valid or not\n', '        require(claimAddress != address(0) && token > 0);\n', '        // Assign tokens to user\n', '        balances[claimAddress] = safeAdd(balances[claimAddress], token);\n', '        // balances[_walletAddress] = safeSub(balances[_walletAddress],token);\n', '        return true;\n', '    }\n', '\n', '    // DSTWalletLMNO related modifer\n', '    // @dev Throws if called by any account other than the DSTWalletLMNO owner\n', '    modifier onlyDSTWalletLMNO() {\n', '        require(msg.sender == dstWalletLMNO);\n', '        _;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '// accepted from zeppelin-solidity https://github.com/OpenZeppelin/zeppelin-solidity\n', '/*\n', ' * ERC20 interface\n', ' * see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address _who) public constant returns (uint);\n', '  function allowance(address _owner, address _spender) public constant returns (uint);\n', '\n', '  function transfer(address _to, uint _value) public returns (bool ok);\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool ok);\n', '  function approve(address _spender, uint _value) public returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  // event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    // OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract DSTToken is ERC20, Ownable, SafeMath {\n', '\n', '    // Token related informations\n', '    string public constant name = "Decentralize Silver Token";\n', '    string public constant symbol = "DST";\n', '    uint256 public constant decimals = 18; // decimal places\n', '\n', '    uint256 public tokensPerEther = 1500;\n', '\n', '    // MultiSig Wallet Address\n', '    address public DSTMultisig;\n', '\n', '    // Wallet L,M,N and O address\n', '    address dstWalletLMNO;\n', '\n', '    bool public startStop = false;\n', '\n', '    mapping (address => uint256) public walletA;\n', '    mapping (address => uint256) public walletB; \n', '    mapping (address => uint256) public walletC;\n', '    mapping (address => uint256) public walletF;\n', '    mapping (address => uint256) public walletG;\n', '    mapping (address => uint256) public walletH;\n', '\n', '    mapping (address => uint256) public releasedA;\n', '    mapping (address => uint256) public releasedB; \n', '    mapping (address => uint256) public releasedC;\n', '    mapping (address => uint256) public releasedF;\n', '    mapping (address => uint256) public releasedG; \n', '    mapping (address => uint256) public releasedH;\n', '\n', '    // Mapping of token balance and allowed address for each address with transfer limit\n', '    mapping (address => uint256) balances;\n', '    //mapping of allowed address for each address with tranfer limit\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    struct WalletConfig{\n', '        uint256 start;\n', '        uint256 cliff;\n', '        uint256 duration;\n', '    }\n', '\n', '    mapping (uint => address) public walletAddresses;\n', '    mapping (uint => WalletConfig) public allWalletConfig;\n', '\n', '    // @param _dstWalletLMNO Ether Address for wallet L,M,N and O\n', '    // Only to be called by Owner of this contract\n', '    function setDSTWalletLMNO(address _dstWalletLMNO) onlyOwner external{\n', '        require(_dstWalletLMNO != address(0));\n', '        dstWalletLMNO = _dstWalletLMNO;\n', '    }\n', '\n', '    // Owner can Set Multisig wallet\n', '    // @param _dstMultisig address of Multisig wallet.\n', '    function setDSTMultiSig(address _dstMultisig) onlyOwner external{\n', '        require(_dstMultisig != address(0));\n', '        DSTMultisig = _dstMultisig;\n', '    }\n', '\n', '    function startStopICO(bool status) onlyOwner external{\n', '        startStop = status;\n', '    }\n', '\n', '    function addWalletAddressAndTokens(uint _id, address _walletAddress, uint256 _tokens) onlyOwner external{\n', '        require(_walletAddress != address(0));\n', '        walletAddresses[_id] = _walletAddress;\n', '        balances[_walletAddress] = safeAdd(balances[_walletAddress],_tokens); // wallet tokens initialize        \n', '    }\n', '\n', '    // function preAllocation(uint256 _walletId, uint256 _tokens) onlyOwner external{\n', '    //     require(_tokens > 0);\n', '    //     balances[walletAddresses[_walletId]] = safeAdd(balances[walletAddresses[_walletId]],_tokens); // wallet tokens initialize\n', '    // }\n', '\n', '    function addWalletConfig(uint256 _id, uint256 _start, uint256 _cliff, uint256 _duration) onlyOwner external{\n', '        uint256 start = safeAdd(_start,now);\n', '        uint256 cliff = safeAdd(start,_cliff);\n', '        allWalletConfig[_id] = WalletConfig(\n', '            start,\n', '            cliff,\n', '            _duration\n', '        );\n', '    }\n', '\n', '    function assignToken(address _investor,uint256 _tokens) external {\n', '        // Check investor address and tokens.Not allow 0 value\n', '        require(_investor != address(0) && _tokens > 0);\n', '        // Check wallet have enough token balance to assign\n', '        require(_tokens <= balances[msg.sender]);\n', '        \n', '        // Debit the tokens from the wallet\n', '        balances[msg.sender] = safeSub(balances[msg.sender],_tokens);\n', '        // Increasing the totalSupply\n', '        totalSupply = safeAdd(totalSupply, _tokens);\n', '\n', '        // Assign tokens to the investor\n', '        if(msg.sender == walletAddresses[0]){\n', '            walletA[_investor] = safeAdd(walletA[_investor],_tokens);\n', '        }\n', '        else if(msg.sender == walletAddresses[1]){\n', '            walletB[_investor] = safeAdd(walletB[_investor],_tokens);\n', '        }\n', '        else if(msg.sender == walletAddresses[2]){\n', '            walletC[_investor] = safeAdd(walletC[_investor],_tokens);\n', '        }\n', '        else if(msg.sender == walletAddresses[5]){\n', '            walletF[_investor] = safeAdd(walletF[_investor],_tokens);\n', '        }\n', '        else if(msg.sender == walletAddresses[6]){\n', '            walletG[_investor] = safeAdd(walletG[_investor],_tokens);\n', '        }\n', '        else if(msg.sender == walletAddresses[7]){\n', '            walletH[_investor] = safeAdd(walletH[_investor],_tokens);\n', '        }\n', '        else{\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function assignTokenIJK(address _userAddress,uint256 _tokens) external {\n', '        require(msg.sender == walletAddresses[8] || msg.sender == walletAddresses[9] || msg.sender == walletAddresses[10]);\n', '        // Check investor address and tokens.Not allow 0 value\n', '        require(_userAddress != address(0) && _tokens > 0);\n', '        // Assign tokens to the investor\n', '        assignTokensWallet(msg.sender,_userAddress, _tokens);\n', '    }\n', '\n', '    function withdrawToken() public {\n', '        //require(walletA[msg.sender] > 0 || walletB[msg.sender] > 0 || walletC[msg.sender] > 0);\n', '        uint256 currentBalance = 0;\n', '        if(walletA[msg.sender] > 0){\n', '            uint256 unreleasedA = getReleasableAmount(0,msg.sender);\n', '            walletA[msg.sender] = safeSub(walletA[msg.sender], unreleasedA);\n', '            currentBalance = safeAdd(currentBalance, unreleasedA);\n', '            releasedA[msg.sender] = safeAdd(releasedA[msg.sender], unreleasedA);\n', '        }\n', '        if(walletB[msg.sender] > 0){\n', '            uint256 unreleasedB = getReleasableAmount(1,msg.sender);\n', '            walletB[msg.sender] = safeSub(walletB[msg.sender], unreleasedB);\n', '            currentBalance = safeAdd(currentBalance, unreleasedB);\n', '            releasedB[msg.sender] = safeAdd(releasedB[msg.sender], unreleasedB);\n', '        }\n', '        if(walletC[msg.sender] > 0){\n', '            uint256 unreleasedC = getReleasableAmount(2,msg.sender);\n', '            walletC[msg.sender] = safeSub(walletC[msg.sender], unreleasedC);\n', '            currentBalance = safeAdd(currentBalance, unreleasedC);\n', '            releasedC[msg.sender] = safeAdd(releasedC[msg.sender], unreleasedC);\n', '        }\n', '        require(currentBalance > 0);\n', '        // Assign tokens to the sender\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], currentBalance);\n', '    }\n', '\n', '    function withdrawBonusToken() public {\n', '        //require(walletF[msg.sender] > 0 || walletG[msg.sender] > 0 || walletH[msg.sender] > 0);\n', '        uint256 currentBalance = 0;\n', '        if(walletF[msg.sender] > 0){\n', '            uint256 unreleasedF = getReleasableBonusAmount(5,msg.sender);\n', '            walletF[msg.sender] = safeSub(walletF[msg.sender], unreleasedF);\n', '            currentBalance = safeAdd(currentBalance, unreleasedF);\n', '            releasedF[msg.sender] = safeAdd(releasedF[msg.sender], unreleasedF);\n', '        }\n', '        if(walletG[msg.sender] > 0){\n', '            uint256 unreleasedG = getReleasableBonusAmount(6,msg.sender);\n', '            walletG[msg.sender] = safeSub(walletG[msg.sender], unreleasedG);\n', '            currentBalance = safeAdd(currentBalance, unreleasedG);\n', '            releasedG[msg.sender] = safeAdd(releasedG[msg.sender], unreleasedG);\n', '        }\n', '        if(walletH[msg.sender] > 0){\n', '            uint256 unreleasedH = getReleasableBonusAmount(7,msg.sender);\n', '            walletH[msg.sender] = safeSub(walletH[msg.sender], unreleasedH);\n', '            currentBalance = safeAdd(currentBalance, unreleasedH);\n', '            releasedH[msg.sender] = safeAdd(releasedH[msg.sender], unreleasedH);\n', '        }\n', '        require(currentBalance > 0);\n', '        // Assign tokens to the sender\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], currentBalance);\n', '    }\n', '\n', '    function getReleasableAmount(uint256 _walletId,address _beneficiary) public view returns (uint256){\n', '        uint256 totalBalance;\n', '\n', '        if(_walletId == 0){\n', '            totalBalance = safeAdd(walletA[_beneficiary], releasedA[_beneficiary]);    \n', '            return safeSub(getData(_walletId,totalBalance), releasedA[_beneficiary]);\n', '        }\n', '        else if(_walletId == 1){\n', '            totalBalance = safeAdd(walletB[_beneficiary], releasedB[_beneficiary]);\n', '            return safeSub(getData(_walletId,totalBalance), releasedB[_beneficiary]);\n', '        }\n', '        else if(_walletId == 2){\n', '            totalBalance = safeAdd(walletC[_beneficiary], releasedC[_beneficiary]);\n', '            return safeSub(getData(_walletId,totalBalance), releasedC[_beneficiary]);\n', '        }\n', '        else{\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function getReleasableBonusAmount(uint256 _walletId,address _beneficiary) public view returns (uint256){\n', '        uint256 totalBalance;\n', '\n', '        if(_walletId == 5){\n', '            totalBalance = safeAdd(walletF[_beneficiary], releasedF[_beneficiary]);    \n', '            return safeSub(getData(_walletId,totalBalance), releasedF[_beneficiary]);\n', '        }\n', '        else if(_walletId == 6){\n', '            totalBalance = safeAdd(walletG[_beneficiary], releasedG[_beneficiary]);\n', '            return safeSub(getData(_walletId,totalBalance), releasedG[_beneficiary]);\n', '        }\n', '        else if(_walletId == 7){\n', '            totalBalance = safeAdd(walletH[_beneficiary], releasedH[_beneficiary]);\n', '            return safeSub(getData(_walletId,totalBalance), releasedH[_beneficiary]);\n', '        }\n', '        else{\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function getData(uint256 _walletId,uint256 _totalBalance) public view returns (uint256) {\n', '        uint256 availableBalanceIn = safeDiv(safeMul(_totalBalance, safeSub(allWalletConfig[_walletId].cliff, allWalletConfig[_walletId].start)), allWalletConfig[_walletId].duration);\n', '        return safeMul(availableBalanceIn, safeDiv(getVestedAmount(_walletId,_totalBalance), availableBalanceIn));\n', '    }\n', '\n', '    function getVestedAmount(uint256 _walletId,uint256 _totalBalance) public view returns (uint256) {\n', '        uint256 cliff = allWalletConfig[_walletId].cliff;\n', '        uint256 start = allWalletConfig[_walletId].start;\n', '        uint256 duration = allWalletConfig[_walletId].duration;\n', '\n', '        if (now < cliff) {\n', '            return 0;\n', '        } else if (now >= safeAdd(start,duration)) {\n', '            return _totalBalance;\n', '        } else {\n', '            return safeDiv(safeMul(_totalBalance,safeSub(now,start)),duration);\n', '        }\n', '    }\n', '\n', '    // Sale of the tokens. Investors can call this method to invest into DST Tokens\n', '    function() payable external {\n', '        // Allow only to invest in ICO stage\n', '        require(startStop);\n', '        // Sorry !! We only allow to invest with minimum 1 Ether as value\n', '        require(msg.value >= 1 ether);\n', '\n', '        // multiply by exchange rate to get newly created token amount\n', '        uint256 createdTokens = safeMul(msg.value, tokensPerEther);\n', '\n', '        // Call to Internal function to assign tokens\n', '        assignTokensWallet(walletAddresses[3],msg.sender, createdTokens);\n', '    }\n', '\n', '    // DST accepts Cash Investment through manual process in Fiat Currency\n', '    // DST Team will assign the tokens to investors manually through this function\n', '    //@ param cashInvestor address of investor\n', '    //@ param assignedTokens number of tokens to give to investor\n', '    function cashInvestment(address cashInvestor, uint256 assignedTokens) onlyOwner external {\n', '        // Check if cashInvestor address is set or not\n', '        // By mistake tokens mentioned as 0, save the cost of assigning tokens.\n', '        require(cashInvestor != address(0) && assignedTokens > 0);\n', '\n', '        // Call to Internal function to assign tokens\n', '        assignTokensWallet(walletAddresses[4],cashInvestor, assignedTokens);\n', '    }\n', '\n', "    // // Function will transfer the tokens to investor's address\n", '    // // Common function code for Crowdsale Investor And Cash Investor \n', '    // function assignTokens(address investor, uint256 tokens) internal {\n', '    //     // Creating tokens and  increasing the totalSupply\n', '    //     totalSupply = safeAdd(totalSupply, tokens);\n', '\n', '    //     // Assign new tokens to the sender\n', '    //     balances[investor] = safeAdd(balances[investor], tokens);\n', '\n', '    //     // Finally token created for sender, log the creation event\n', '    //     Transfer(0, investor, tokens);\n', '    // }\n', '\n', "    // Function will transfer the tokens to investor's address\n", '    // Common function code for Crowdsale Investor And Cash Investor \n', '    function assignTokensWallet(address walletAddress,address investor, uint256 tokens) internal {\n', '        // Check wallet have enough token balance to assign\n', '        require(tokens <= balances[walletAddress]);\n', '        // Creating tokens and  increasing the totalSupply\n', '        totalSupply = safeAdd(totalSupply, tokens);\n', '\n', '        // Debit the tokens from wallet\n', '        balances[walletAddress] = safeSub(balances[walletAddress],tokens);\n', '        // Assign new tokens to the sender\n', '        balances[investor] = safeAdd(balances[investor], tokens);\n', '\n', '        // Finally token created for sender, log the creation event\n', '        Transfer(0, investor, tokens);\n', '    }\n', '\n', '    function finalizeCrowdSale() external{\n', '        // Check DST Multisig wallet set or not\n', '        require(DSTMultisig != address(0));\n', '        // Send fund to multisig wallet\n', '        require(DSTMultisig.send(address(this).balance));\n', '    }\n', '\n', '    // @param _who The address of the investor to check balance\n', '    // @return balance tokens of investor address\n', '    function balanceOf(address _who) public constant returns (uint) {\n', '        return balances[_who];\n', '    }\n', '\n', '    // @param _owner The address of the account owning tokens\n', '    // @param _spender The address of the account able to transfer the tokens\n', '    // @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public constant returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', "    //  Transfer `value` DST tokens from sender's account\n", '    // `msg.sender` to provided account address `to`.\n', '    // @param _to The address of the recipient\n', '    // @param _value The number of DST tokens to transfer\n', '    // @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint _value) public returns (bool ok) {\n', '        //validate receiver address and value.Not allow 0 value\n', '        require(_to != 0 && _value > 0);\n', '        uint256 senderBalance = balances[msg.sender];\n', '        //Check sender have enough balance\n', '        require(senderBalance >= _value);\n', '        senderBalance = safeSub(senderBalance, _value);\n', '        balances[msg.sender] = senderBalance;\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', "    //  Transfer `value` DST tokens from sender 'from'\n", '    // to provided account address `to`.\n', '    // @param from The address of the sender\n', '    // @param to The address of the recipient\n', '    // @param value The number of miBoodle to transfer\n', '    // @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool ok) {\n', '        //validate _from,_to address and _value(Now allow with 0)\n', '        require(_from != 0 && _to != 0 && _value > 0);\n', '        //Check amount is approved by the owner for spender to spent and owner have enough balances\n', '        require(allowed[_from][msg.sender] >= _value && balances[_from] >= _value);\n', '        balances[_from] = safeSub(balances[_from],_value);\n', '        balances[_to] = safeAdd(balances[_to],_value);\n', '        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    //  `msg.sender` approves `spender` to spend `value` tokens\n', '    // @param spender The address of the account able to transfer the tokens\n', '    // @param value The amount of wei to be approved for transfer\n', '    // @return Whether the approval was successful or not\n', '    function approve(address _spender, uint _value) public returns (bool ok) {\n', '        //validate _spender address\n', '        require(_spender != 0);\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // This method is only use for debit DSTToken from DST wallet L,M,N and O\n', '    // @dev Required state: is dstWalletLMNO set\n', '    // @param _walletAddress The address of the wallet from tokens debit\n', '    // @param token The number of DST tokens to debit\n', '    // @return Whether the debit was successful or not\n', '    function debitWalletLMNO(address _walletAddress,uint256 token) external onlyDSTWalletLMNO returns (bool){\n', '        // Check if DST wallet LMNO is set or not\n', '        require(dstWalletLMNO != address(0));\n', '        // Check wallet have enough token and token is valid\n', '        require(balances[_walletAddress] >= token && token > 0);\n', '        // Increasing the totalSupply\n', '        totalSupply = safeAdd(totalSupply, token);\n', '        // Debit tokens from wallet balance\n', '        balances[_walletAddress] = safeSub(balances[_walletAddress],token);\n', '        return true;\n', '    }\n', '\n', '    // This method is only use for credit DSTToken to DST wallet L,M,N and O users\n', '    // @dev Required state: is dstWalletLMNO set\n', '    // @param claimAddress The address of the wallet user to credit tokens\n', '    // @param token The number of DST tokens to credit\n', '    // @return Whether the credit was successful or not\n', '    function creditWalletUserLMNO(address claimAddress,uint256 token) external onlyDSTWalletLMNO returns (bool){\n', '        // Check if DST wallet LMNO is set or not\n', '        require(dstWalletLMNO != address(0));\n', '        // Check claiment address and token is valid or not\n', '        require(claimAddress != address(0) && token > 0);\n', '        // Assign tokens to user\n', '        balances[claimAddress] = safeAdd(balances[claimAddress], token);\n', '        // balances[_walletAddress] = safeSub(balances[_walletAddress],token);\n', '        return true;\n', '    }\n', '\n', '    // DSTWalletLMNO related modifer\n', '    // @dev Throws if called by any account other than the DSTWalletLMNO owner\n', '    modifier onlyDSTWalletLMNO() {\n', '        require(msg.sender == dstWalletLMNO);\n', '        _;\n', '    }\n', '}']
