['pragma solidity ^ 0.4 .25;\n', '\n', 'contract ERC223ReceivingContract { \n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data);\n', '}\n', '\n', '\n', 'contract tokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '\n', '   function totalSupply() constant returns(uint totalSupply);\n', '\n', '    function balanceOf(address who) constant returns(uint256);\n', '\n', '    function transfer(address to, uint value) returns(bool ok);\n', '\n', '    function transferFrom(address from, address to, uint value) returns(bool ok);\n', '\n', '    function approve(address spender, uint value) returns(bool ok);\n', '\n', '    function allowance(address owner, address spender) constant returns(uint);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '}\n', '\n', '\n', 'contract BSAFE is ERC20  {\n', '\n', '    using SafeMath\n', '    for uint256;\n', '    /* Public variables of the token */\n', "    string public standard = 'BSAFE 1.2';\n", '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    uint256 public initialSupply;\n', '    bool initialize;\n', '\n', '    mapping( address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    constructor () public {\n', '\n', '        uint256 _initialSupply = 12000000000000000 ; \n', '        uint8 decimalUnits = 8;\n', '        balanceOf[msg.sender] = _initialSupply; // Give the creator all initial tokens\n', '        totalSupply = _initialSupply; // Update total supply\n', '        initialSupply = _initialSupply;\n', '        name = "BlockSafe"; // Set the name for display purposes\n', '        symbol = "BSAFE"; // Set the symbol for display purposes\n', '        decimals = decimalUnits; // Amount of decimals for display purposes\n', '        emit Transfer( address(0),  msg.sender, _initialSupply);\n', '    }\n', '\n', '   \n', '\n', '\n', '\n', '    function balanceOf(address _tokenHolder) constant returns(uint256) {\n', '\n', '        return balanceOf[_tokenHolder];\n', '    }\n', '\n', '    function totalSupply() constant returns(uint256) {\n', '\n', '        return totalSupply;\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) returns(bool ok) {\n', '        \n', '        require (_to != 0x0); // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[msg.sender] < _value) throw; // Check if the sender has enough\n', '        bytes memory empty;\n', '        \n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(  _value ); // Subtract from the sender\n', '        balanceOf[_to] = balanceOf[_to].add( _value ); // Add the same to the recipient\n', '        \n', '         if(isContract( _to )) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '        \n', '        emit Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\n', '        return true;\n', '    }\n', '    \n', '     function transfer(address _to, uint256 _value, bytes _data ) returns(bool ok) {\n', '        \n', '        require (_to != 0x0); // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[msg.sender] < _value) throw; // Check if the sender has enough\n', '        bytes memory empty;\n', '        \n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(  _value ); // Subtract from the sender\n', '        balanceOf[_to] = balanceOf[_to].add( _value ); // Add the same to the recipient\n', '        \n', '         if(isContract( _to )) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        \n', '        emit Transfer(msg.sender, _to, _value, _data); // Notify anyone listening that this transfer took place\n', '        return true;\n', '    }\n', '    \n', '    \n', '    \n', '    function isContract( address _to ) internal returns ( bool ){\n', '        \n', '        \n', '        uint codeLength = 0;\n', '        \n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '        \n', '         if(codeLength>0) {\n', '           \n', '           return true;\n', '           \n', '        }\n', '        \n', '        return false;\n', '        \n', '    }\n', '    \n', '    \n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value)\n', '    returns(bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval( msg.sender ,_spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '    returns(bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\n', '        return allowance[_owner][_spender];\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\n', '        \n', '        require (_to != 0x0); // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[_from] < _value) throw; // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw; // Check allowance\n', '        balanceOf[_from] = balanceOf[_from].sub( _value ); // Subtract from the sender\n', '        balanceOf[_to] = balanceOf[_to].add( _value ); // Add the same to the recipient\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub( _value ); \n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '  \n', '    function burn(uint256 _value) returns(bool success) {\n', '        \n', '        if (balanceOf[msg.sender] < _value) throw; // Check if the sender has enough\n', '      \n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub( _value ); // Subtract from the sender\n', '        totalSupply = totalSupply.sub( _value ); // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '   function burnFrom(address _from, uint256 _value) returns(bool success) {\n', '        \n', '        require (_from != 0x0); // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[_from] < _value) throw; \n', '        if (_value > allowance[_from][msg.sender]) throw; \n', '        balanceOf[_from] = balanceOf[_from].sub( _value ); \n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub( _value ); \n', '        totalSupply = totalSupply.sub( _value ); // Updates totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    \n', '    \n', '}']