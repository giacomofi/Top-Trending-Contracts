['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * dev Transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0), "Recipient address is zero address(0). Check the address again.");\n', '        require(_value <= balances[msg.sender], "The balance of account is insufficient.");\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        require(_to != address(0), "Recipient address is zero address(0). Check the address again.");\n', '        require(_value <= balances[_from], "The balance of account is insufficient.");\n', '        require(_value <= allowed[_from][msg.sender], "Insufficient tokens approved from account owner.");\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _subtractedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '    /**\n', '     * Returns whether the target address is a contract\n', '     * dev This function will return false if invoked during the constructor of a contract,\n', '     * as the code is not actually created until after the constructor finishes.\n', '     * @param addr address to check\n', '     * @return whether the target address is a contract\n', '     */\n', '    function isContract(address addr) internal view returns (bool) {\n', '        uint256 size;\n', '        // XXX Currently there is no better way to check if there is a contract in an address\n', '        // than to check the size of the code at that address.\n', '        // See https://ethereum.stackexchange.com/a/14016/36603\n', '        // for more details about how this works.\n', '        // TODO Check this again before the Serenity release, because all addresses will be\n', '        // contracts then.\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly { size := extcodesize(addr) }\n', '        return size > 0;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title MultiOwnable\n', ' * dev\n', ' */\n', 'contract MultiOwnable {\n', '    using SafeMath for uint256;\n', '\n', '    address public root; // 혹시 몰라 준비해둔 superOwner 의 백업. 하드웨어 월렛 주소로 세팅할 예정.\n', '    address public superOwner;\n', '    mapping (address => bool) public owners;\n', '    address[] public ownerList;\n', '\n', '    // for changeSuperOwnerByDAO\n', '    // mapping(address => mapping (address => bool)) public preSuperOwnerMap;\n', '    mapping(address => address) public candidateSuperOwnerMap;\n', '\n', '\n', '    event ChangedRoot(address newRoot);\n', '    event ChangedSuperOwner(address newSuperOwner);\n', '    event AddedNewOwner(address newOwner);\n', '    event DeletedOwner(address deletedOwner);\n', '\n', '    constructor() public {\n', '        root = msg.sender;\n', '        superOwner = msg.sender;\n', '        owners[root] = true;\n', '\n', '        ownerList.push(msg.sender);\n', '\n', '    }\n', '\n', '    modifier onlyRoot() {\n', '        require(msg.sender == root, "Root privilege is required.");\n', '        _;\n', '    }\n', '\n', '    modifier onlySuperOwner() {\n', '        require(msg.sender == superOwner, "SuperOwner priviledge is required.");\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(owners[msg.sender], "Owner priviledge is required.");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * dev root 교체 (root 는 root 와 superOwner 를 교체할 수 있는 권리가 있다.)\n', '     * dev 기존 루트가 관리자에서 지워지지 않고, 새 루트가 자동으로 관리자에 등록되지 않음을 유의!\n', '     */\n', '    function changeRoot(address newRoot) onlyRoot public returns (bool) {\n', '        require(newRoot != address(0), "This address to be set is zero address(0). Check the input address.");\n', '\n', '        root = newRoot;\n', '\n', '        emit ChangedRoot(newRoot);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * dev superOwner 교체 (root 는 root 와 superOwner 를 교체할 수 있는 권리가 있다.)\n', '     * dev 기존 superOwner 가 관리자에서 지워지지 않고, 새 superOwner 가 자동으로 관리자에 등록되지 않음을 유의!\n', '     */\n', '    function changeSuperOwner(address newSuperOwner) onlyRoot public returns (bool) {\n', '        require(newSuperOwner != address(0), "This address to be set is zero address(0). Check the input address.");\n', '\n', '        superOwner = newSuperOwner;\n', '\n', '        emit ChangedSuperOwner(newSuperOwner);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * dev owner 들의 1/2 초과가 합의하면 superOwner 를 교체할 수 있다.\n', '     */\n', '    function changeSuperOwnerByDAO(address newSuperOwner) onlyOwner public returns (bool) {\n', '        require(newSuperOwner != address(0), "This address to be set is zero address(0). Check the input address.");\n', '        require(newSuperOwner != candidateSuperOwnerMap[msg.sender], "You have already voted for this account.");\n', '\n', '        candidateSuperOwnerMap[msg.sender] = newSuperOwner;\n', '\n', '        uint8 votingNumForSuperOwner = 0;\n', '        uint8 i = 0;\n', '\n', '        for (i = 0; i < ownerList.length; i++) {\n', '            if (candidateSuperOwnerMap[ownerList[i]] == newSuperOwner)\n', '                votingNumForSuperOwner++;\n', '        }\n', '\n', '        if (votingNumForSuperOwner > ownerList.length / 2) { // 과반수 이상이면 DAO 성립 => superOwner 교체\n', '            superOwner = newSuperOwner;\n', '\n', '            // 초기화\n', '            for (i = 0; i < ownerList.length; i++) {\n', '                delete candidateSuperOwnerMap[ownerList[i]];\n', '            }\n', '\n', '            emit ChangedSuperOwner(newSuperOwner);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function newOwner(address owner) onlySuperOwner public returns (bool) {\n', '        require(owner != address(0), "This address to be set is zero address(0). Check the input address.");\n', '        require(!owners[owner], "This address is already registered.");\n', '\n', '        owners[owner] = true;\n', '        ownerList.push(owner);\n', '\n', '        emit AddedNewOwner(owner);\n', '        return true;\n', '    }\n', '\n', '    function deleteOwner(address owner) onlySuperOwner public returns (bool) {\n', '        require(owners[owner], "This input address is not a super owner.");\n', '        delete owners[owner];\n', '\n', '        for (uint256 i = 0; i < ownerList.length; i++) {\n', '            if (ownerList[i] == owner) {\n', '                ownerList[i] = ownerList[ownerList.length.sub(1)];\n', '                ownerList.length = ownerList.length.sub(1);\n', '                break;\n', '            }\n', '        }\n', '\n', '        emit DeletedOwner(owner);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Lockable token\n', ' */\n', 'contract LockableToken is StandardToken, MultiOwnable {\n', '    bool public locked = true;\n', '    uint256 public constant LOCK_MAX = uint256(-1);\n', '\n', '    /**\n', '     * dev 락 상태에서도 거래 가능한 언락 계정\n', '     */\n', '    mapping(address => bool) public unlockAddrs;\n', '\n', '    /**\n', '     * dev 계정 별로 lock value 만큼 잔고가 잠김\n', '     * dev - 값이 0 일 때 : 잔고가 0 이어도 되므로 제한이 없는 것임.\n', '     * dev - 값이 LOCK_MAX 일 때 : 잔고가 uint256 의 최대값이므로 아예 잠긴 것임.\n', '     */\n', '    mapping(address => uint256) public lockValues;\n', '\n', '    event Locked(bool locked, string note);\n', '    event LockedTo(address indexed addr, bool locked, string note);\n', '    event SetLockValue(address indexed addr, uint256 value, string note);\n', '\n', '    constructor() public {\n', '        unlockTo(msg.sender,  "");\n', '    }\n', '\n', '    modifier checkUnlock (address addr, uint256 value) {\n', '        require(!locked || unlockAddrs[addr], "The account is currently locked.");\n', '        require(balances[addr].sub(value) >= lockValues[addr], "Transferable limit exceeded. Check the status of the lock value.");\n', '        _;\n', '    }\n', '\n', '    function lock(string note) onlyOwner public {\n', '        locked = true;\n', '        emit Locked(locked, note);\n', '    }\n', '\n', '    function unlock(string note) onlyOwner public {\n', '        locked = false;\n', '        emit Locked(locked, note);\n', '    }\n', '\n', '    function lockTo(address addr, string note) onlyOwner public {\n', '        setLockValue(addr, LOCK_MAX, note);\n', '        unlockAddrs[addr] = false;\n', '\n', '        emit LockedTo(addr, true, note);\n', '    }\n', '\n', '    function unlockTo(address addr, string note) onlyOwner public {\n', '        if (lockValues[addr] == LOCK_MAX)\n', '            setLockValue(addr, 0, note);\n', '        unlockAddrs[addr] = true;\n', '\n', '        emit LockedTo(addr, false, note);\n', '    }\n', '\n', '    function setLockValue(address addr, uint256 value, string note) onlyOwner public {\n', '        lockValues[addr] = value;\n', '        emit SetLockValue(addr, value, note);\n', '    }\n', '\n', '    /**\n', '     * dev 이체 가능 금액을 조회한다.\n', '     */\n', '    function getMyUnlockValue() public view returns (uint256) {\n', '        address addr = msg.sender;\n', '        if ((!locked || unlockAddrs[addr]) && balances[addr] > lockValues[addr])\n', '            return balances[addr].sub(lockValues[addr]);\n', '        else\n', '            return 0;\n', '    }\n', '\n', '    function transfer(address to, uint256 value) checkUnlock(msg.sender, value) public returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) checkUnlock(from, value) public returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title DelayLockableToken\n', ' * dev 보안 차원에서 본인 계좌 잔고에 lock 을 걸 수 있다. 잔고 제한 기준을 낮추면 적용되기까지 12시간을 기다려야 한다.\n', ' */\n', 'contract DelayLockableToken is LockableToken {\n', '    mapping(address => uint256) public delayLockValues;\n', '    mapping(address => uint256) public delayLockBeforeValues;\n', '    mapping(address => uint256) public delayLockTimes;\n', '\n', '    event SetDelayLockValue(address indexed addr, uint256 value, uint256 time);\n', '\n', '    modifier checkDelayUnlock (address addr, uint256 value) {\n', '        if (delayLockTimes[msg.sender] <= now) {\n', '            require (balances[addr].sub(value) >= delayLockValues[addr], "Transferable limit exceeded. Change the balance lock value first and then use it");\n', '        } else {\n', '            require (balances[addr].sub(value) >= delayLockBeforeValues[addr], "Transferable limit exceeded. Please note that the residual lock value has changed and it will take 12 hours to apply.");\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * dev 자신의 계좌에 잔고 제한을 건다. 더 크게 걸 땐 바로 적용되고, 더 작게 걸 땐 12시간 이후에 변경된다.\n', '     */\n', '    function delayLock(uint256 value) public returns (bool) {\n', '        require (value <= balances[msg.sender], "Your balance is insufficient.");\n', '\n', '        if (value >= delayLockValues[msg.sender])\n', '            delayLockTimes[msg.sender] = now;\n', '        else {\n', '            require (delayLockTimes[msg.sender] <= now, "The remaining money in the account cannot be unlocked continuously. You cannot renew until 12 hours after the first run.");\n', '            delayLockTimes[msg.sender] = now + 12 hours;\n', '            delayLockBeforeValues[msg.sender] = delayLockValues[msg.sender];\n', '        }\n', '\n', '        delayLockValues[msg.sender] = value;\n', '\n', '        emit SetDelayLockValue(msg.sender, value, delayLockTimes[msg.sender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * dev 자신의 계좌의 잔고 제한을 푼다.\n', '     */\n', '    function delayUnlock() public returns (bool) {\n', '        return delayLock(0);\n', '    }\n', '\n', '    /**\n', '     * dev 이체 가능 금액을 조회한다.\n', '     */\n', '    function getMyUnlockValue() public view returns (uint256) {\n', '        uint256 myUnlockValue;\n', '        address addr = msg.sender;\n', '        if (delayLockTimes[addr] <= now) {\n', '            myUnlockValue = balances[addr].sub(delayLockValues[addr]);\n', '        } else {\n', '            myUnlockValue = balances[addr].sub(delayLockBeforeValues[addr]);\n', '        }\n', '        \n', '        uint256 superUnlockValue = super.getMyUnlockValue();\n', '\n', '        if (myUnlockValue > superUnlockValue)\n', '            return superUnlockValue;\n', '        else\n', '            return myUnlockValue;\n', '    }    \n', '\n', '    function transfer(address to, uint256 value) checkDelayUnlock(msg.sender, value) public returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) checkDelayUnlock(from, value) public returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title KSCBaseToken\n', ' * dev 트랜잭션 실행 시 메모를 남길 수 있도록 하였음.\n', ' */\n', 'contract KSCBaseToken is DelayLockableToken {\n', '    event KSCTransfer(address indexed from, address indexed to, uint256 value, string note);\n', '    event KSCTransferFrom(address indexed owner, address indexed spender, address indexed to, uint256 value, string note);\n', '    event KSCApproval(address indexed owner, address indexed spender, uint256 value, string note);\n', '\n', '    event KSCMintTo(address indexed controller, address indexed to, uint256 amount, string note);\n', '    event KSCBurnFrom(address indexed controller, address indexed from, uint256 value, string note);\n', '\n', '    event KSCBurnWhenMoveToMainnet(address indexed controller, address indexed from, uint256 value, string note);\n', '\n', '    event KSCSell(address indexed owner, address indexed spender, address indexed to, uint256 value, string note);\n', '    event KSCSellByOtherCoin(address indexed owner, address indexed spender, address indexed to, uint256 value,  uint256 processIdHash, uint256 userIdHash, string note);\n', '\n', '    event KSCTransferToTeam(address indexed owner, address indexed spender, address indexed to, uint256 value, string note);\n', '    event KSCTransferToPartner(address indexed owner, address indexed spender, address indexed to, uint256 value, string note);\n', '\n', '    event KSCTransferToEcosystem(address indexed owner, address indexed spender, address indexed to, uint256 value, uint256 processIdHash, uint256 userIdHash, string note);\n', '    event KSCTransferToBounty(address indexed owner, address indexed spender, address indexed to, uint256 value, uint256 processIdHash, uint256 userIdHash, string note);\n', '\n', '    // ERC20 함수들을 오버라이딩하여 super 로 올라가지 않고 무조건 ksc~ 함수로 지나가게 한다.\n', '    function transfer(address to, uint256 value) public returns (bool ret) {\n', '        return kscTransfer(to, value, "");\n', '    }\n', '\n', '    function kscTransfer(address to, uint256 value, string note) public returns (bool ret) {\n', '        require(to != address(this), "The receive address is the Contact Address of KStarCoin. You cannot send money to this address.");\n', '\n', '        ret = super.transfer(to, value);\n', '        emit KSCTransfer(msg.sender, to, value, note);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        return kscTransferFrom(from, to, value, "");\n', '    }\n', '\n', '    function kscTransferFrom(address from, address to, uint256 value, string note) public returns (bool ret) {\n', '        require(to != address(this), "The receive address is the Contact Address of KStarCoin. You cannot send money to this address.");\n', '\n', '        ret = super.transferFrom(from, to, value);\n', '        emit KSCTransferFrom(from, msg.sender, to, value, note);\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        return kscApprove(spender, value, "");\n', '    }\n', '\n', '    function kscApprove(address spender, uint256 value, string note) public returns (bool ret) {\n', '        ret = super.approve(spender, value);\n', '        emit KSCApproval(msg.sender, spender, value, note);\n', '    }\n', '\n', '    function increaseApproval(address spender, uint256 addedValue) public returns (bool) {\n', '        return kscIncreaseApproval(spender, addedValue, "");\n', '    }\n', '\n', '    function kscIncreaseApproval(address spender, uint256 addedValue, string note) public returns (bool ret) {\n', '        ret = super.increaseApproval(spender, addedValue);\n', '        emit KSCApproval(msg.sender, spender, allowed[msg.sender][spender], note);\n', '    }\n', '\n', '    function decreaseApproval(address spender, uint256 subtractedValue) public returns (bool) {\n', '        return kscDecreaseApproval(spender, subtractedValue, "");\n', '    }\n', '\n', '    function kscDecreaseApproval(address spender, uint256 subtractedValue, string note) public returns (bool ret) {\n', '        ret = super.decreaseApproval(spender, subtractedValue);\n', '        emit KSCApproval(msg.sender, spender, allowed[msg.sender][spender], note);\n', '    }\n', '\n', '    /**\n', '     * dev 신규 화폐 발행. 반드시 이유를 메모로 남겨라.\n', '     */\n', '    function mintTo(address to, uint256 amount) internal returns (bool) {\n', '        require(to != address(0x0), "This address to be set is zero address(0). Check the input address.");\n', '\n', '        totalSupply_ = totalSupply_.add(amount);\n', '        balances[to] = balances[to].add(amount);\n', '\n', '        emit Transfer(address(0), to, amount);\n', '        return true;\n', '    }\n', '\n', '    function kscMintTo(address to, uint256 amount, string note) onlyOwner public returns (bool ret) {\n', '        ret = mintTo(to, amount);\n', '        emit KSCMintTo(msg.sender, to, amount, note);\n', '    }\n', '\n', '    /**\n', '     * dev 화폐 소각. 반드시 이유를 메모로 남겨라.\n', '     */\n', '    function burnFrom(address from, uint256 value) internal returns (bool) {\n', '        require(value <= balances[from], "Your balance is insufficient.");\n', '\n', '        balances[from] = balances[from].sub(value);\n', '        totalSupply_ = totalSupply_.sub(value);\n', '\n', '        emit Transfer(from, address(0), value);\n', '        return true;\n', '    }\n', '\n', '    function kscBurnFrom(address from, uint256 value, string note) onlyOwner public returns (bool ret) {\n', '        ret = burnFrom(from, value);\n', '        emit KSCBurnFrom(msg.sender, from, value, note);\n', '    }\n', '\n', '    /**\n', '     * dev 메인넷으로 이동하며 화폐 소각.\n', '     */\n', '    function kscBurnWhenMoveToMainnet(address burner, uint256 value, string note) onlyOwner public returns (bool ret) {\n', '        ret = burnFrom(burner, value);\n', '        emit KSCBurnWhenMoveToMainnet(msg.sender, burner, value, note);\n', '    }\n', '\n', '    function kscBatchBurnWhenMoveToMainnet(address[] burners, uint256[] values, string note) onlyOwner public returns (bool ret) {\n', '        uint256 length = burners.length;\n', '        require(length == values.length, "The size of \\\'burners\\\' and \\\'values\\\' array is different.");\n', '\n', '        ret = true;\n', '        for (uint256 i = 0; i < length; i++) {\n', '            ret = ret && kscBurnWhenMoveToMainnet(burners[i], values[i], note);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * dev 이더로 KSC 를 구입하는 경우\n', '     */\n', '    function kscSell(\n', '        address from,\n', '        address to,\n', '        uint256 value,\n', '        string note\n', '    ) onlyOwner public returns (bool ret) {\n', '        require(to != address(this), "The receive address is the Contact Address of KStarCoin. You cannot send money to this address.");\n', '\n', '        ret = super.transferFrom(from, to, value);\n', '        emit KSCSell(from, msg.sender, to, value, note);\n', '    }\n', '\n', '    /**\n', '     * dev 비트코인 등의 다른 코인으로 KSC 를 구입하는 경우\n', '     * dev EOA 가 트랜잭션을 일으켜서 처리해야 하기 때문에 다계좌를 기준으로 한다. (가스비 아끼기 위함)\n', '     */\n', '    function kscBatchSellByOtherCoin(\n', '        address from,\n', '        address[] to,\n', '        uint256[] values,\n', '        uint256 processIdHash,\n', '        uint256[] userIdHash,\n', '        string note\n', '    ) onlyOwner public returns (bool ret) {\n', '        uint256 length = to.length;\n', '        require(length == values.length, "The size of \\\'to\\\' and \\\'values\\\' array is different.");\n', '        require(length == userIdHash.length, "The size of \\\'to\\\' and \\\'userIdHash\\\' array is different.");\n', '\n', '        ret = true;\n', '        for (uint256 i = 0; i < length; i++) {\n', '            require(to[i] != address(this), "The receive address is the Contact Address of KStarCoin. You cannot send money to this address.");\n', '\n', '            ret = ret && super.transferFrom(from, to[i], values[i]);\n', '            emit KSCSellByOtherCoin(from, msg.sender, to[i], values[i], processIdHash, userIdHash[i], note);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * dev 팀에게 전송하는 경우\n', '     */\n', '    function kscTransferToTeam(\n', '        address from,\n', '        address to,\n', '        uint256 value,\n', '        string note\n', '    ) onlyOwner public returns (bool ret) {\n', '        require(to != address(this), "The receive address is the Contact Address of KStarCoin. You cannot send money to this address.");\n', '\n', '        ret = super.transferFrom(from, to, value);\n', '        emit KSCTransferToTeam(from, msg.sender, to, value, note);\n', '    }\n', '\n', '    /**\n', '     * dev 파트너 및 어드바이저에게 전송하는 경우\n', '     */\n', '    function kscTransferToPartner(\n', '        address from,\n', '        address to,\n', '        uint256 value,\n', '        string note\n', '    ) onlyOwner public returns (bool ret) {\n', '        require(to != address(this), "The receive address is the Contact Address of KStarCoin. You cannot send money to this address.");\n', '\n', '        ret = super.transferFrom(from, to, value);\n', '        emit KSCTransferToPartner(from, msg.sender, to, value, note);\n', '    }\n', '\n', '    /**\n', '     * dev 에코시스템(커뮤니티 활동을 통한 보상 등)으로 KSC 지급\n', '     * dev EOA 가 트랜잭션을 일으켜서 처리해야 하기 때문에 다계좌를 기준으로 한다. (가스비 아끼기 위함)\n', '     */\n', '    function kscBatchTransferToEcosystem(\n', '        address from, address[] to,\n', '        uint256[] values,\n', '        uint256 processIdHash,\n', '        uint256[] userIdHash,\n', '        string note\n', '    ) onlyOwner public returns (bool ret) {\n', '        uint256 length = to.length;\n', '        require(length == values.length, "The size of \\\'to\\\' and \\\'values\\\' array is different.");\n', '        require(length == userIdHash.length, "The size of \\\'to\\\' and \\\'userIdHash\\\' array is different.");\n', '\n', '        ret = true;\n', '        for (uint256 i = 0; i < length; i++) {\n', '            require(to[i] != address(this), "The receive address is the Contact Address of KStarCoin. You cannot send money to this address.");\n', '\n', '            ret = ret && super.transferFrom(from, to[i], values[i]);\n', '            emit KSCTransferToEcosystem(from, msg.sender, to[i], values[i], processIdHash, userIdHash[i], note);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * dev 바운티 참여자에게 KSC 지급\n', '     * dev EOA 가 트랜잭션을 일으켜서 처리해야 하기 때문에 다계좌를 기준으로 한다. (가스비 아끼기 위함)\n', '     */\n', '    function kscBatchTransferToBounty(\n', '        address from,\n', '        address[] to,\n', '        uint256[] values,\n', '        uint256 processIdHash,\n', '        uint256[] userIdHash,\n', '        string note\n', '    ) onlyOwner public returns (bool ret) {\n', '        uint256 length = to.length;\n', '        require(to.length == values.length, "The size of \\\'to\\\' and \\\'values\\\' array is different.");\n', '\n', '        ret = true;\n', '        for (uint256 i = 0; i < length; i++) {\n', '            require(to[i] != address(this), "The receive address is the Contact Address of KStarCoin. You cannot send money to this address.");\n', '\n', '            ret = ret && super.transferFrom(from, to[i], values[i]);\n', '            emit KSCTransferToBounty(from, msg.sender, to[i], values[i], processIdHash, userIdHash[i], note);\n', '        }\n', '    }\n', '\n', '    function destroy() onlyRoot public {\n', '        selfdestruct(root);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title KStarCoin\n', ' */\n', 'contract KStarCoin is KSCBaseToken {\n', '    using AddressUtils for address;\n', '\n', '    event TransferedToKSCDapp(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        address indexed to, uint256 value, KSCReceiver.KSCReceiveType receiveType);\n', '\n', '    string public constant name = "KStarCoin";\n', '    string public constant symbol = "KSC";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 1e9 * (10 ** uint256(decimals));\n', '\n', '    constructor() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    }\n', '\n', '    function kscTransfer(address to, uint256 value, string note) public returns (bool ret) {\n', '        ret = super.kscTransfer(to, value, note);\n', '        postTransfer(msg.sender, msg.sender, to, value, KSCReceiver.KSCReceiveType.KSC_TRANSFER);\n', '    }\n', '\n', '    function kscTransferFrom(address from, address to, uint256 value, string note) public returns (bool ret) {\n', '        ret = super.kscTransferFrom(from, to, value, note);\n', '        postTransfer(from, msg.sender, to, value, KSCReceiver.KSCReceiveType.KSC_TRANSFER);\n', '    }\n', '\n', '    function postTransfer(address owner, address spender, address to, uint256 value, KSCReceiver.KSCReceiveType receiveType) internal returns (bool) {\n', '        if (to.isContract()) {\n', '            bool callOk = address(to).call(bytes4(keccak256("onKSCReceived(address,address,uint256,uint8)")), owner, spender, value, receiveType);\n', '            if (callOk) {\n', '                emit TransferedToKSCDapp(owner, spender, to, value, receiveType);\n', '            }\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function kscMintTo(address to, uint256 amount, string note) onlyOwner public returns (bool ret) {\n', '        ret = super.kscMintTo(to, amount, note);\n', '        postTransfer(0x0, msg.sender, to, amount, KSCReceiver.KSCReceiveType.KSC_MINT);\n', '    }\n', '\n', '    function kscBurnFrom(address from, uint256 value, string note) onlyOwner public returns (bool ret) {\n', '        ret = super.kscBurnFrom(from, value, note);\n', '        postTransfer(0x0, msg.sender, from, value, KSCReceiver.KSCReceiveType.KSC_BURN);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title KStarCoin Receiver\n', ' */\n', 'contract KSCReceiver {\n', '    enum KSCReceiveType { KSC_TRANSFER, KSC_MINT, KSC_BURN }\n', '    function onKSCReceived(address owner, address spender, uint256 value, KSCReceiveType receiveType) public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title KSCDappSample\n', ' */\n', 'contract KSCDappSample is KSCReceiver {\n', '    event LogOnReceiveKSC(string message, address indexed owner, address indexed spender, uint256 value, KSCReceiveType receiveType);\n', '\n', '    function onKSCReceived(address owner, address spender, uint256 value, KSCReceiveType receiveType) public returns (bool) {\n', '        emit LogOnReceiveKSC("I receive KstarCoin.", owner, spender, value, receiveType);\n', '        return true;\n', '    }\n', '}']