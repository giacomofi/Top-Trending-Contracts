['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function cei(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return ((a + b - 1) / b) * b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract Ownable {\n', '  address public owner;                                                     // Operational owner.\n', '  address public masterOwner = 0x5D1EC7558C8D1c40406913ab5dbC0Abf1C96BA42;  // for ownership transfer segregation of duty, hard coded to wallet account\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public {\n', '    require(newOwner != address(0));\n', '    require(masterOwner == msg.sender); // only master owner can initiate change to ownershipe\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract FTXToken is StandardToken, Ownable {\n', '\n', '    /* metadata */\n', '    string public constant name = "FintruX Network";\n', '    string public constant symbol = "FTX";\n', '    string public constant version = "1.0";\n', '    uint8 public constant decimals = 18;\n', '\n', '    /* all accounts in wei */\n', '    uint256 public constant INITIAL_SUPPLY = 100000000 * 10**18;\n', '    uint256 public constant FINTRUX_RESERVE_FTX = 10000000 * 10**18;\n', '    uint256 public constant CROSS_RESERVE_FTX = 5000000 * 10**18;\n', '    uint256 public constant TEAM_RESERVE_FTX = 10000000 * 10**18;\n', '\n', '    // these three multi-sig addresses will be replaced on production:\n', '    address public constant FINTRUX_RESERVE = 0x633348b01B3f59c8A445365FB2ede865ecc94a0B;\n', '    address public constant CROSS_RESERVE = 0xED200B7BC7044290c99993341a82a21c4c7725DB;\n', '    address public constant TEAM_RESERVE = 0xfc0Dd77c6bd889819E322FB72D4a86776b1632d5;\n', '\n', '    // assuming Feb 28, 2018 5:00 PM UTC(1519837200) + 1 year, may change for production; \n', '    uint256 public constant VESTING_DATE = 1519837200 + 1 years;\n', '\n', '    // minimum FTX token to be transferred to make the gas worthwhile (avoid micro transfer), cannot be higher than minimal subscribed amount in crowd sale.\n', '    uint256 public token4Gas = 1*10**18;\n', '    // gas in wei to reimburse must be the lowest minimum 0.6Gwei * 80000 gas limit.\n', '    uint256 public gas4Token = 80000*0.6*10**9;\n', '    // minimum wei required in an account to perform an action (avg gas price 4Gwei * avg gas limit 80000).\n', '    uint256 public minGas4Accts = 80000*4*10**9;\n', '\n', '    bool public allowTransfers = false;\n', '    mapping (address => bool) public transferException;\n', '\n', '    event Withdraw(address indexed from, address indexed to, uint256 value);\n', '    event GasRebateFailed(address indexed to, uint256 value);\n', '\n', '    /**\n', '    * @dev Contructor that gives msg.sender all existing tokens. \n', '    */\n', '    function FTXToken() public {\n', '        owner = msg.sender;\n', '        totalSupply = INITIAL_SUPPLY;\n', '        balances[owner] = INITIAL_SUPPLY - FINTRUX_RESERVE_FTX - CROSS_RESERVE_FTX - TEAM_RESERVE_FTX;\n', '        Transfer(address(0), owner, balances[owner]);\n', '        balances[FINTRUX_RESERVE] = FINTRUX_RESERVE_FTX;\n', '        Transfer(address(0), FINTRUX_RESERVE, balances[FINTRUX_RESERVE]);\n', '        balances[CROSS_RESERVE] = CROSS_RESERVE_FTX;\n', '        Transfer(address(0), CROSS_RESERVE, balances[CROSS_RESERVE]);\n', '        balances[TEAM_RESERVE] = TEAM_RESERVE_FTX;\n', '        Transfer(address(0), TEAM_RESERVE, balances[TEAM_RESERVE]);\n', '        transferException[owner] = true;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(canTransferTokens());                                               // Team tokens lock 1 year\n', '        require(_value > 0 && _value >= token4Gas);                                 // do nothing if less than allowed minimum but do not fail\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);                    // insufficient token balance would revert here inside safemath\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        // Keep a minimum balance of gas in all sender accounts. It would not be executed if the account has enough ETH for next action.\n', '        if (this.balance > gas4Token && msg.sender.balance < minGas4Accts) {\n', '            // reimburse gas in ETH to keep a minimal balance for next transaction, use send instead of transfer thus ignore failed rebate(not enough ether to rebate etc.).\n', '            if (!msg.sender.send(gas4Token)) {\n', '                GasRebateFailed(msg.sender,gas4Token);\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    /* When necessary, adjust minimum FTX to transfer to make the gas worthwhile */\n', '    function setToken4Gas(uint256 newFTXAmount) public onlyOwner {\n', '        require(newFTXAmount > 0);                                                  // Upper bound is not necessary.\n', '        token4Gas = newFTXAmount;\n', '    }\n', '\n', '    /* Only when necessary such as gas price change, adjust the gas to be reimbursed on every transfer when sender account below minimum */\n', '    function setGas4Token(uint256 newGasInWei) public onlyOwner {\n', '        require(newGasInWei > 0 && newGasInWei <= 840000*10**9);            // must be less than a reasonable gas value\n', '        gas4Token = newGasInWei;\n', '    }\n', '\n', '    /* When necessary, adjust the minimum wei required in an account before an reimibusement of fee is triggerred */\n', '    function setMinGas4Accts(uint256 minBalanceInWei) public onlyOwner {\n', '        require(minBalanceInWei > 0 && minBalanceInWei <= 840000*10**9);    // must be less than a reasonable gas value\n', '        minGas4Accts = minBalanceInWei;\n', '    }\n', '\n', '    /* This unnamed function is called whenever the owner send Ether to fund the gas fees and gas reimbursement */\n', '    function() payable public onlyOwner {\n', '    }\n', '\n', '    /* Owner withdrawal for excessive gas fees deposited */\n', '    function withdrawToOwner (uint256 weiAmt) public onlyOwner {\n', '        require(weiAmt > 0);                                                // do not allow zero transfer\n', '        msg.sender.transfer(weiAmt);\n', '        Withdraw(this, msg.sender, weiAmt);                                 // signal the event for communication only it is meaningful\n', '    }\n', '\n', '    /*\n', '        allow everyone to start transferring tokens freely at the same moment. \n', '    */\n', '    function setAllowTransfers(bool bAllowTransfers) external onlyOwner {\n', '        allowTransfers = bAllowTransfers;\n', '    }\n', '\n', '    /*\n', '        add the ether address to whitelist to enable transfer of token.\n', '    */\n', '    function addToException(address addr) external onlyOwner {\n', '        require(addr != address(0));\n', '        require(!isException(addr));\n', '\n', '        transferException[addr] = true;\n', '    }\n', '\n', '    /*\n', '        remove the ether address from whitelist in case a mistake was made.\n', '    */\n', '    function delFrException(address addr) external onlyOwner {\n', '        require(addr != address(0));\n', '        require(transferException[addr]);\n', '\n', '        delete transferException[addr];\n', '    }\n', '\n', '    /* return true when the address is in the exception list eg. token distribution contract and private sales addresses */\n', '    function isException(address addr) public view returns (bool) {\n', '        return transferException[addr];\n', '    }\n', '\n', '    /* below are internal functions */\n', '    /*\n', '        return true if token can be transferred.\n', '    */\n', '    function canTransferTokens() internal view returns (bool) {\n', '        if (msg.sender == TEAM_RESERVE) {                                       // Vesting for FintruX TEAM is 1 year.\n', '            return now >= VESTING_DATE;\n', '        } else {\n', '            // if transfer is disabled, only allow special addresses to transfer tokens.\n', '            return allowTransfers || isException(msg.sender);\n', '        }\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function cei(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return ((a + b - 1) / b) * b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract Ownable {\n', '  address public owner;                                                     // Operational owner.\n', '  address public masterOwner = 0x5D1EC7558C8D1c40406913ab5dbC0Abf1C96BA42;  // for ownership transfer segregation of duty, hard coded to wallet account\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public {\n', '    require(newOwner != address(0));\n', '    require(masterOwner == msg.sender); // only master owner can initiate change to ownershipe\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract FTXToken is StandardToken, Ownable {\n', '\n', '    /* metadata */\n', '    string public constant name = "FintruX Network";\n', '    string public constant symbol = "FTX";\n', '    string public constant version = "1.0";\n', '    uint8 public constant decimals = 18;\n', '\n', '    /* all accounts in wei */\n', '    uint256 public constant INITIAL_SUPPLY = 100000000 * 10**18;\n', '    uint256 public constant FINTRUX_RESERVE_FTX = 10000000 * 10**18;\n', '    uint256 public constant CROSS_RESERVE_FTX = 5000000 * 10**18;\n', '    uint256 public constant TEAM_RESERVE_FTX = 10000000 * 10**18;\n', '\n', '    // these three multi-sig addresses will be replaced on production:\n', '    address public constant FINTRUX_RESERVE = 0x633348b01B3f59c8A445365FB2ede865ecc94a0B;\n', '    address public constant CROSS_RESERVE = 0xED200B7BC7044290c99993341a82a21c4c7725DB;\n', '    address public constant TEAM_RESERVE = 0xfc0Dd77c6bd889819E322FB72D4a86776b1632d5;\n', '\n', '    // assuming Feb 28, 2018 5:00 PM UTC(1519837200) + 1 year, may change for production; \n', '    uint256 public constant VESTING_DATE = 1519837200 + 1 years;\n', '\n', '    // minimum FTX token to be transferred to make the gas worthwhile (avoid micro transfer), cannot be higher than minimal subscribed amount in crowd sale.\n', '    uint256 public token4Gas = 1*10**18;\n', '    // gas in wei to reimburse must be the lowest minimum 0.6Gwei * 80000 gas limit.\n', '    uint256 public gas4Token = 80000*0.6*10**9;\n', '    // minimum wei required in an account to perform an action (avg gas price 4Gwei * avg gas limit 80000).\n', '    uint256 public minGas4Accts = 80000*4*10**9;\n', '\n', '    bool public allowTransfers = false;\n', '    mapping (address => bool) public transferException;\n', '\n', '    event Withdraw(address indexed from, address indexed to, uint256 value);\n', '    event GasRebateFailed(address indexed to, uint256 value);\n', '\n', '    /**\n', '    * @dev Contructor that gives msg.sender all existing tokens. \n', '    */\n', '    function FTXToken() public {\n', '        owner = msg.sender;\n', '        totalSupply = INITIAL_SUPPLY;\n', '        balances[owner] = INITIAL_SUPPLY - FINTRUX_RESERVE_FTX - CROSS_RESERVE_FTX - TEAM_RESERVE_FTX;\n', '        Transfer(address(0), owner, balances[owner]);\n', '        balances[FINTRUX_RESERVE] = FINTRUX_RESERVE_FTX;\n', '        Transfer(address(0), FINTRUX_RESERVE, balances[FINTRUX_RESERVE]);\n', '        balances[CROSS_RESERVE] = CROSS_RESERVE_FTX;\n', '        Transfer(address(0), CROSS_RESERVE, balances[CROSS_RESERVE]);\n', '        balances[TEAM_RESERVE] = TEAM_RESERVE_FTX;\n', '        Transfer(address(0), TEAM_RESERVE, balances[TEAM_RESERVE]);\n', '        transferException[owner] = true;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(canTransferTokens());                                               // Team tokens lock 1 year\n', '        require(_value > 0 && _value >= token4Gas);                                 // do nothing if less than allowed minimum but do not fail\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);                    // insufficient token balance would revert here inside safemath\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        // Keep a minimum balance of gas in all sender accounts. It would not be executed if the account has enough ETH for next action.\n', '        if (this.balance > gas4Token && msg.sender.balance < minGas4Accts) {\n', '            // reimburse gas in ETH to keep a minimal balance for next transaction, use send instead of transfer thus ignore failed rebate(not enough ether to rebate etc.).\n', '            if (!msg.sender.send(gas4Token)) {\n', '                GasRebateFailed(msg.sender,gas4Token);\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    /* When necessary, adjust minimum FTX to transfer to make the gas worthwhile */\n', '    function setToken4Gas(uint256 newFTXAmount) public onlyOwner {\n', '        require(newFTXAmount > 0);                                                  // Upper bound is not necessary.\n', '        token4Gas = newFTXAmount;\n', '    }\n', '\n', '    /* Only when necessary such as gas price change, adjust the gas to be reimbursed on every transfer when sender account below minimum */\n', '    function setGas4Token(uint256 newGasInWei) public onlyOwner {\n', '        require(newGasInWei > 0 && newGasInWei <= 840000*10**9);            // must be less than a reasonable gas value\n', '        gas4Token = newGasInWei;\n', '    }\n', '\n', '    /* When necessary, adjust the minimum wei required in an account before an reimibusement of fee is triggerred */\n', '    function setMinGas4Accts(uint256 minBalanceInWei) public onlyOwner {\n', '        require(minBalanceInWei > 0 && minBalanceInWei <= 840000*10**9);    // must be less than a reasonable gas value\n', '        minGas4Accts = minBalanceInWei;\n', '    }\n', '\n', '    /* This unnamed function is called whenever the owner send Ether to fund the gas fees and gas reimbursement */\n', '    function() payable public onlyOwner {\n', '    }\n', '\n', '    /* Owner withdrawal for excessive gas fees deposited */\n', '    function withdrawToOwner (uint256 weiAmt) public onlyOwner {\n', '        require(weiAmt > 0);                                                // do not allow zero transfer\n', '        msg.sender.transfer(weiAmt);\n', '        Withdraw(this, msg.sender, weiAmt);                                 // signal the event for communication only it is meaningful\n', '    }\n', '\n', '    /*\n', '        allow everyone to start transferring tokens freely at the same moment. \n', '    */\n', '    function setAllowTransfers(bool bAllowTransfers) external onlyOwner {\n', '        allowTransfers = bAllowTransfers;\n', '    }\n', '\n', '    /*\n', '        add the ether address to whitelist to enable transfer of token.\n', '    */\n', '    function addToException(address addr) external onlyOwner {\n', '        require(addr != address(0));\n', '        require(!isException(addr));\n', '\n', '        transferException[addr] = true;\n', '    }\n', '\n', '    /*\n', '        remove the ether address from whitelist in case a mistake was made.\n', '    */\n', '    function delFrException(address addr) external onlyOwner {\n', '        require(addr != address(0));\n', '        require(transferException[addr]);\n', '\n', '        delete transferException[addr];\n', '    }\n', '\n', '    /* return true when the address is in the exception list eg. token distribution contract and private sales addresses */\n', '    function isException(address addr) public view returns (bool) {\n', '        return transferException[addr];\n', '    }\n', '\n', '    /* below are internal functions */\n', '    /*\n', '        return true if token can be transferred.\n', '    */\n', '    function canTransferTokens() internal view returns (bool) {\n', '        if (msg.sender == TEAM_RESERVE) {                                       // Vesting for FintruX TEAM is 1 year.\n', '            return now >= VESTING_DATE;\n', '        } else {\n', '            // if transfer is disabled, only allow special addresses to transfer tokens.\n', '            return allowTransfers || isException(msg.sender);\n', '        }\n', '    }\n', '\n', '}']
