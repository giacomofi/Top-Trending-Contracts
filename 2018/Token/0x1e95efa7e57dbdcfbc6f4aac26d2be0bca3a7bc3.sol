['pragma solidity ^0.4.24;\n', '\n', '\n', '// Interface for burning tokens\n', 'contract Burnable {\n', '  // @dev Destroys tokens for an account\n', '  // @param account Account whose tokens are destroyed\n', '  // @param value Amount of tokens to destroy\n', '  function _burnTokens(address account, uint value) internal;\n', '  event Burned(address account, uint value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  event Error(string _t);\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract HoldAssistant is Ownable {\n', '\n', '\tstruct stholdPeriod {\n', '        uint256 startsAtTime;\n', '        uint256 endsAtTime;\n', '\t\tuint256 balance;\n', '    }\n', '    mapping (address => stholdPeriod) private holdPeriod;\n', '\n', '\tevent Log_AdminHold(address _holder, uint _balance, bool _status);\n', '\tfunction adminHold(address _holder, uint _balance, bool _status) public returns (bool) {\n', '\t\temit Log_AdminHold(_holder, _balance, _status);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tevent Log_Hold(address _holder, uint _balance, bool _status);\n', '\tfunction hold(address _holder, uint _balance, bool _status) public returns (bool) {\n', '\t\temit Log_Hold(_holder, _balance, _status);\n', '\t\treturn true;\n', '\t}\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'contract StandardToken is Burnable, Pausable {\n', '    using SafeMath for uint;\n', '\n', '    uint private total_supply;\n', '    uint public decimals;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint) private balances;\n', '    mapping (address => mapping (address => uint)) private allowed;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '    //Constructor\n', '    constructor(uint supply, uint token_decimals, address token_retriever) public {\n', '        decimals                    = token_decimals;\n', '        total_supply                = supply * uint(10) ** decimals ; // 10 ** 9,  1000 millions\n', '        balances[token_retriever]   = total_supply;                   // Give to the creator all initial tokens\n', '    }\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return total_supply;\n', '    }\n', '\n', '    //Public interface for balances\n', '    function balanceOf(address account) public view returns (uint balance) {\n', '        return balances[account];\n', '    }\n', '\n', '    //Public interface for allowances\n', '    function allowance(address account, address spender) public view returns (uint remaining) {\n', '        return allowed[account][spender];\n', '    }\n', '\n', '    //Internal transfer, only can be called by this contract\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);                        //Burn is an specific op\n', '        require(balances[_from] >= _value);        //Enough ?\n', '        require(balances[_to].add(_value) >= balances[_to]);\n', '\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balances[_from].add(balances[_to]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to]  = balances[_to].add(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balances[_from].add(balances[_to]) == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public whenNotPaused returns (bool success){\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public whenNotPaused returns (bool success) {\n', '        require(_value <= allowed[_from][msg.sender]);     // Check allowance\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub( _value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function _approve(address _holder, address _spender, uint _value) internal {\n', '        require(_value <= total_supply);\n', '        require(_value >= 0);\n', '        allowed[_holder][_spender] = _value;\n', '        emit Approval(_holder, _spender,_value);\n', '    }\n', '    function approve(address _spender, uint _value) public returns (bool success) {\n', '        _approve(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function safeApprove(address _spender, uint _currentValue, uint _value)  public returns (bool success) {\n', '        require(allowed[msg.sender][_spender] == _currentValue);\n', '        _approve(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     */\n', '    function _burnTokens(address from, uint _value) internal {\n', '        require(balances[from] >= _value);                    // Check if the sender has enough\n', '        balances[from] = balances[from].sub(_value);    // Subtract from the sender\n', '        total_supply = total_supply.sub(_value);                    // Updates totalSupply\n', '        emit  Burned(from, _value);\n', '    }\n', '\n', '    function burn(uint _value) public whenNotPaused returns (bool success) {\n', '        _burnTokens(msg.sender,_value);\n', '        return true;\n', '    }\n', '}\n', '\n', '//Define interface for releasing the token transfer after a successful crowdsale.\n', 'contract HoldableToken is StandardToken {\n', '\n', '\t//Specific block to support holdwallet\n', '    mapping (address => bool) private holdFlag;\n', '\n', '    //Another contract can do a finer track of the hold\n', '    address public holdAssistantAddr = address(0);\n', '\n', '\tfunction holded(address _account) public view returns(bool) {\n', '\t\treturn holdFlag[_account];\n', '\t}\n', '\n', '    function adminHold(bool _status) public onlyOwner returns (bool) {\n', '        holdFlag[msg.sender] = _status;\n', '\n', '        //Just in case that fine tracker exists\n', '        if (address(0) != holdAssistantAddr) {\n', '            HoldAssistant(holdAssistantAddr).adminHold(msg.sender, balanceOf(msg.sender), _status);\n', '        }\n', '        emit Log_AdminHold(msg.sender, block.number, balanceOf(msg.sender), _status);\n', '\t\treturn true;\n', '    }\n', '    function hold(bool _status) public returns (bool) {\n', '        holdFlag[msg.sender] = _status;\n', '\n', '        //Just in case that fine tracker exists\n', '        if (address(0) != holdAssistantAddr) {\n', '            require(HoldAssistant(holdAssistantAddr).hold(msg.sender, balanceOf(msg.sender), _status));\n', '        }\n', '        emit Log_Hold(msg.sender, block.number, balanceOf(msg.sender), _status);\n', '\t\treturn true;\n', '    }\n', '    event Log_Hold(address indexed _account, uint _holdBlock, uint _balance, bool _holded);\n', '    event Log_AdminHold(address indexed _account, uint _holdBlock, uint _balance, bool _holded);\n', '\n', '    function setHoldAssistant(address _newHoldAssistant) public onlyOwner returns(bool) {\n', '        holdAssistantAddr = _newHoldAssistant;\n', '        emit Log_SetHoldAssistant(holdAssistantAddr);\n', '\t\treturn true;\n', '    }\n', '    event Log_SetHoldAssistant(address);\n', '\n', '    modifier notHolded(address _account) {\n', '        require(! holdFlag[_account]);\n', '        _;\n', '    }\n', '\n', '\n', '  \t//We restrict transfers by overriding it\n', '  \tfunction transfer(address to, uint value) public notHolded(msg.sender) returns (bool success) {\n', '  \t\treturn super.transfer(to, value);\n', '  \t}\n', '\n', '  \t//We restrict transferFrom by overriding it\n', '  \t//"from" must be an agent before released\n', '  \tfunction transferFrom(address from, address to, uint value) public notHolded(from) returns (bool success) {\n', '   \t \treturn super.transferFrom(from, to, value);\n', '  \t}\n', '\n', '  \t//We restrict burn by overriding it\n', '  \tfunction burn(uint value) public notHolded(msg.sender) returns (bool success) {\n', '    \treturn super.burn(value);\n', '  \t}\n', '\n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a && c>=b);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', '\n', '//Define interface for Manage + release a resource normal operation after an external trigger\n', 'contract Releasable is Ownable {\n', '\n', '  address public releaseAgent;\n', '  bool public released = false;\n', '  mapping (address => bool) public Agents;\n', '\n', '  event ReleaseAgent(address previous, address newAgent);\n', '\n', '  //Set the contract that can call release and make the resource operative\n', '  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n', '    releaseAgent = addr;\n', '    emit ReleaseAgent(releaseAgent, addr);\n', '  }\n', '\n', '  // Owner can allow a particular address (e.g. a crowdsale contract) to be Agent to manage the resource\n', '  function setAgent(address addr) onlyOwner inReleaseState(false) public returns(bool){\n', '    Agents[addr] = true;\n', '    emit Agent(addr,true);\n', '    return true;\n', '  }\n', '\n', '  // Owner forbids a particular address (e.g. a crowdsale contract) to be Agent to manage the resource\n', '  function resetAgent(address addr) onlyOwner inReleaseState(false) public returns(bool){\n', '    Agents[addr] = false;\n', '    emit Agent(addr,false);\n', '    return true;\n', '  }\n', '    event Agent(address addr, bool status);\n', '\n', '  function amIAgent() public view returns (bool) {\n', '    return Agents[msg.sender];\n', '  }\n', '\n', '  function isAgent(address addr) public view /*onlyOwner */ returns(bool) {\n', '    return Agents[addr];\n', '  }\n', '\n', '  //From now the resource is free\n', '  function releaseOperation() public onlyReleaseAgent {\n', '        released = true;\n', '\t\temit Released();\n', '  }\n', '  event Released();\n', '\n', '  // Limit resource operative until the release\n', '  modifier canOperate(address sender) {\n', '    require(released || Agents[sender]);\n', '    _;\n', '  }\n', '\n', '  //The function can be called only before or after the tokens have been released\n', '  modifier inReleaseState(bool releaseState) {\n', '    require(releaseState == released);\n', '    _;\n', '  }\n', '\n', '  //The function can be called only by a whitelisted release agent.\n', '  modifier onlyReleaseAgent() {\n', '    require(msg.sender == releaseAgent);\n', '    _;\n', '  }\n', '}\n', '\n', '//Define interface for releasing the token transfer after a successful crowdsale.\n', 'contract ReleasableToken is Releasable, HoldableToken {\n', '\n', '  //We restrict transfer by overriding it\n', '  function transfer(address to, uint value) public canOperate(msg.sender) returns (bool success) {\n', '   return super.transfer(to, value);\n', '  }\n', '\n', '  //We restrict transferFrom by overriding it\n', '  //"from" must be an agent before released\n', '  function transferFrom(address from, address to, uint value) public canOperate(from) returns (bool success) {\n', '    return super.transferFrom(from, to, value);\n', '  }\n', '\n', '  //We restrict burn by overriding it\n', '  function burn(uint value) public canOperate(msg.sender) returns (bool success) {\n', '    return super.burn(value);\n', '  }\n', '}\n', '\n', '\n', 'contract ALIVE is ReleasableToken {\n', '\n', '    string public name = "ALIVE";\n', '    string public symbol = "AL ";\n', '\n', '    //    Constructor\n', '    constructor (uint supply, uint token_decimals, address token_retriever) StandardToken(supply, token_decimals, token_retriever) public { }\n', '    \n', '}']