['pragma solidity ^0.4.16;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract NobleAssetsCoin {\n', "    string public constant _myTokeName = 'Noble Assets Coin';\n", "    string public constant _mySymbol = 'NBAC';\n", '    uint public constant _myinitialSupply = 21000000;\n', '    uint8 public constant _myDecimal = 0;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '   \n', '    uint256 public totalSupply;\n', '\n', '   \n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function NobleAssetsCoin(\n', '        uint256 initialSupply,\n', '        string TokeName,\n', '        string Symbol\n', '    ) public {\n', '        decimals = _myDecimal;\n', '        totalSupply = _myinitialSupply * (10 ** uint256(_myDecimal)); \n', '        balanceOf[msg.sender] = initialSupply;               \n', '        name = TokeName;                                   \n', '        symbol = Symbol;                               \n', '    }\n', '\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '\n', '        require(_to != 0x0);\n', '\n', '        require(balanceOf[_from] >= _value);\n', '\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '\n', '        balanceOf[_from] -= _value;\n', '\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     \n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '}']