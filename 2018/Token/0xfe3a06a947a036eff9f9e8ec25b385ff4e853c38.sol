['pragma solidity ^0.4.25;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() public onlyPendingOwner {\n', '    emit OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Claimable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title JZMLock\n', ' * @author http://jzm.one\n', ' * @dev JZMLock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract JZMLock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  constructor(\n', '    ERC20Basic _token,\n', '    address _beneficiary,\n', '    uint256 _releaseTime\n', '  )\n', '    public\n', '  {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_releaseTime > block.timestamp);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by JZMLock to beneficiary.\n', '   */\n', '  function release() public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= releaseTime);\n', '    uint256 amount = token.balanceOf(address(this));\n', '    require(amount > 0);\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '  \n', '  function canRelease() public view returns (bool){\n', '    return block.timestamp >= releaseTime;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title JZMToken\n', ' * @author http://jzm.one\n', ' * @dev JZMToken is a token that provide lock function\n', ' */\n', 'contract JZMToken is PausableToken {\n', '\n', '    event TransferWithLock(address indexed from, address indexed to, address indexed locked, uint256 amount, uint256 releaseTime);\n', '    \n', '    mapping (address => address[] ) public balancesLocked;\n', '\n', '    function transferWithLock(address _to, uint256 _amount, uint256 _releaseTime) public returns (bool) {\n', '        JZMLock lock = new JZMLock(this, _to, _releaseTime);\n', '        transfer(address(lock), _amount);\n', '        balancesLocked[_to].push(lock);\n', '        emit TransferWithLock(msg.sender, _to, address(lock), _amount, _releaseTime);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the locked balance of the specified address.\n', '     * @param _owner The address to query the locked balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOfLocked(address _owner) public view returns (uint256) {\n', '        address[] memory lockTokenAddrs = balancesLocked[_owner];\n', '\n', '        uint256 totalLockedBalance = 0;\n', '        for (uint i = 0; i < lockTokenAddrs.length; i++) {\n', '            totalLockedBalance = totalLockedBalance.add(balances[lockTokenAddrs[i]]);\n', '        }\n', '        \n', '        return totalLockedBalance;\n', '    }\n', '\n', '    function releaseToken(address _owner) public returns (bool) {\n', '        address[] memory lockTokenAddrs = balancesLocked[_owner];\n', '        for (uint i = 0; i < lockTokenAddrs.length; i++) {\n', '            JZMLock lock = JZMLock(lockTokenAddrs[i]);\n', '            if (lock.canRelease() && balanceOf(lock)>0) {\n', '                lock.release();\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title TUToken\n', ' * @dev Trust Union Token Contract\n', ' */\n', 'contract TUToken is JZMToken {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "Trust Union";\n', '    string public constant symbol = "TUT";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 private constant TOKEN_UNIT = 10 ** uint256(decimals);\n', '    uint256 private constant INITIAL_SUPPLY = (10 ** 9) * TOKEN_UNIT;\n', '\n', '    //init wallet address\n', '    address private constant ADDR_MARKET          = 0xEd3998AA7F255Ade06236776f9FD429eECc91357;\n', '    address private constant ADDR_FOUNDTEAM       = 0x1867812567f42e2Da3C572bE597996B1309593A7;\n', '    address private constant ADDR_ECO             = 0xF7549be7449aA2b7D708d39481fCBB618C9Fb903;\n', '    address private constant ADDR_PRIVATE_SALE    = 0x252c4f77f1cdCCEBaEBbce393804F4c8f3D5703D;\n', '    address private constant ADDR_SEED_INVESTOR   = 0x03a59D08980A5327a958860e346d020ec8bb33dC;\n', '    address private constant ADDR_FOUNDATION      = 0xC138d62b3E34391964852Cf712454492DC7eFF68;\n', '\n', '    //init supply for market = 5%\n', '    uint256 private constant S_MARKET_TOTAL = INITIAL_SUPPLY * 5 / 100;\n', '    uint256 private constant S_MARKET_20181030 = 5000000  * TOKEN_UNIT;\n', '    uint256 private constant S_MARKET_20190130 = 10000000 * TOKEN_UNIT;\n', '    uint256 private constant S_MARKET_20190430 = 15000000 * TOKEN_UNIT;\n', '    uint256 private constant S_MARKET_20190730 = 20000000 * TOKEN_UNIT;\n', '\n', '    //init supply for founding team = 15%\n', '    uint256 private constant S_FOUNDTEAM_TOTAL = INITIAL_SUPPLY * 15 / 100;\n', '    uint256 private constant S_FOUNDTEAM_20191030 = INITIAL_SUPPLY * 5 / 100;\n', '    uint256 private constant S_FOUNDTEAM_20200430 = INITIAL_SUPPLY * 5 / 100;\n', '    uint256 private constant S_FOUNDTEAM_20201030 = INITIAL_SUPPLY * 5 / 100;\n', '\n', '    //init supply for ecological incentive = 40%\n', '    uint256 private constant S_ECO_TOTAL = INITIAL_SUPPLY * 40 / 100;\n', '    uint256 private constant S_ECO_20190401 = 45000000 * TOKEN_UNIT;\n', '    uint256 private constant S_ECO_20191001 = 45000000 * TOKEN_UNIT;\n', '    uint256 private constant S_ECO_20200401 = 40000000 * TOKEN_UNIT;\n', '    uint256 private constant S_ECO_20201001 = 40000000 * TOKEN_UNIT;\n', '    uint256 private constant S_ECO_20210401 = 35000000 * TOKEN_UNIT;\n', '    uint256 private constant S_ECO_20211001 = 35000000 * TOKEN_UNIT;\n', '    uint256 private constant S_ECO_20220401 = 30000000 * TOKEN_UNIT;\n', '    uint256 private constant S_ECO_20221001 = 30000000 * TOKEN_UNIT;\n', '    uint256 private constant S_ECO_20230401 = 25000000 * TOKEN_UNIT;\n', '    uint256 private constant S_ECO_20231001 = 25000000 * TOKEN_UNIT;\n', '    uint256 private constant S_ECO_20240401 = 25000000 * TOKEN_UNIT;\n', '    uint256 private constant S_ECO_20241001 = 25000000 * TOKEN_UNIT;\n', '\n', '    //init supply for private sale = 10%\n', '    uint256 private constant S_PRIVATE_SALE = INITIAL_SUPPLY * 10 / 100;\n', '\n', '    //init supply for seed investor = 10%\n', '    uint256 private constant S_SEED_INVESTOR = INITIAL_SUPPLY * 10 / 100;\n', '\n', '    //init supply for foundation = 20%\n', '    uint256 private constant S_FOUNDATION = INITIAL_SUPPLY * 20 / 100;\n', '    \n', '    constructor() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[owner] = totalSupply_;\n', '\n', '        _initWallet();\n', '        _invokeLockLogic();\n', '    }\n', '\n', '    /**\n', '     * @dev init the wallets\n', '     */\n', '    function _initWallet() internal onlyOwner {\n', '        transfer(ADDR_PRIVATE_SALE, S_PRIVATE_SALE);\n', '        transfer(ADDR_SEED_INVESTOR, S_SEED_INVESTOR);\n', '        transfer(ADDR_FOUNDATION, S_FOUNDATION);\n', '    }\n', '\n', '    /**\n', '     * @dev invoke lock logic\n', '     */\n', '    function _invokeLockLogic() internal onlyOwner {\n', '        //lock for market\n', '        //2018/10/30 0:00:00 UTC +8\n', '        transferWithLock(ADDR_MARKET, S_MARKET_20181030, 1540828800);\n', '        //2019/01/30 0:00:00 UTC +8\n', '        transferWithLock(ADDR_MARKET, S_MARKET_20190130, 1548777600); \n', '        //2019/04/30 0:00:00 UTC +8     \n', '        transferWithLock(ADDR_MARKET, S_MARKET_20190430, 1556553600);\n', '        //2019/07/30 0:00:00 UTC +8\n', '        transferWithLock(ADDR_MARKET, S_MARKET_20190730, 1564416000);\n', '        \n', '        //lock for found team\n', '        //2019/10/30 0:00:00 UTC +8\n', '        transferWithLock(ADDR_FOUNDTEAM, S_FOUNDTEAM_20191030, 1572364800);\n', '        //2020/04/30 0:00:00 UTC +8\n', '        transferWithLock(ADDR_FOUNDTEAM, S_FOUNDTEAM_20200430, 1588176000);\n', '        //2020/10/30 0:00:00 UTC +8\n', '        transferWithLock(ADDR_FOUNDTEAM, S_FOUNDTEAM_20201030, 1603987200);\n', '        \n', '        //lock for eco\n', '        //2019/04/01 0:00:00 UTC +8\n', '        transferWithLock(ADDR_ECO, S_ECO_20190401, 1554048000);\n', '        //2019/10/01 0:00:00 UTC +8\n', '        transferWithLock(ADDR_ECO, S_ECO_20191001, 1569859200);\n', '        //2020/04/01 0:00:00 UTC +8\n', '        transferWithLock(ADDR_ECO, S_ECO_20200401, 1585670400);\n', '        //2020/10/01 0:00:00 UTC +8\n', '        transferWithLock(ADDR_ECO, S_ECO_20201001, 1601481600);\n', '        //2021/04/01 0:00:00 UTC +8\n', '        transferWithLock(ADDR_ECO, S_ECO_20210401, 1617206400);\n', '        //2021/10/01 0:00:00 UTC +8\n', '        transferWithLock(ADDR_ECO, S_ECO_20211001, 1633017600);\n', '        //2022/04/01 0:00:00 UTC +8\n', '        transferWithLock(ADDR_ECO, S_ECO_20220401, 1648742400);\n', '        //2022/10/01 0:00:00 UTC +8\n', '        transferWithLock(ADDR_ECO, S_ECO_20221001, 1664553600);\n', '        //2023/04/01 0:00:00 UTC +8\n', '        transferWithLock(ADDR_ECO, S_ECO_20230401, 1680278400);\n', '        //2023/10/01 0:00:00 UTC +8\n', '        transferWithLock(ADDR_ECO, S_ECO_20231001, 1696089600);\n', '        //2024/04/01 0:00:00 UTC +8\n', '        transferWithLock(ADDR_ECO, S_ECO_20240401, 1711900800);\n', '        //2024/10/01 0:00:00 UTC +8\n', '        transferWithLock(ADDR_ECO, S_ECO_20241001, 1727712000);\n', '    }\n', '}']