['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param _token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic _token) external onlyOwner {\n', '    uint256 balance = _token.balanceOf(this);\n', '    _token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract MenloSaleBase is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  // Whitelisted investors\n', '  mapping (address => bool) public whitelist;\n', '\n', '  // Special role used exclusively for managing the whitelist\n', '  address public whitelister;\n', '\n', '  // manual early close flag\n', '  bool public isFinalized;\n', '\n', '  // cap for crowdsale in wei\n', '  uint256 public cap;\n', '\n', '  // The token being sold\n', '  MenloToken public token;\n', '\n', '  // start and end timestamps where contributions are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the whitelister.\n', '   */\n', '  modifier onlyWhitelister() {\n', '    require(msg.sender == whitelister, "Sender should be whitelister");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who bought the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n', '\n', '  /**\n', '   * event for token redemption logging\n', '   * @param purchaser who bought the tokens\n', '   * @param amount amount of tokens redeemed\n', '   */\n', '  event TokenRedeem(address indexed purchaser, uint256 amount);\n', '\n', '  // termination early or otherwise\n', '  event Finalized();\n', '\n', '  event TokensRefund(uint256 amount);\n', '\n', '  /**\n', '   * event refund of excess ETH if purchase is above the cap\n', '   * @param amount amount of ETH (in wei) refunded\n', '   */\n', '  event Refund(address indexed purchaser, uint256 amount);\n', '\n', '  constructor(\n', '      MenloToken _token,\n', '      uint256 _startTime,\n', '      uint256 _endTime,\n', '      uint256 _cap,\n', '      address _wallet\n', '  ) public {\n', '    require(_startTime >= getBlockTimestamp(), "Start time should be in the future");\n', '    require(_endTime >= _startTime, "End time should be after start time");\n', '    require(_wallet != address(0), "Wallet address should be non-zero");\n', '    require(_token != address(0), "Token address should be non-zero");\n', '    require(_cap > 0, "Cap should be greater than zero");\n', '\n', '    token = _token;\n', '\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    cap = _cap;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () public payable {\n', '    buyTokens();\n', '  }\n', '\n', '  // Abstract methods\n', '  function calculateBonusRate() public view returns (uint256);\n', '  function buyTokensHook(uint256 _tokens) internal;\n', '\n', '  function buyTokens() public payable returns (uint256) {\n', '    require(whitelist[msg.sender], "Expected msg.sender to be whitelisted");\n', '    checkFinalize();\n', '    require(!isFinalized, "Should not be finalized when purchasing");\n', '    require(getBlockTimestamp() >= startTime && getBlockTimestamp() <= endTime, "Should be during sale");\n', '    require(msg.value != 0, "Value should not be zero");\n', '    require(token.balanceOf(this) > 0, "This contract must have tokens");\n', '\n', '    uint256 _weiAmount = msg.value;\n', '\n', '    uint256 _remainingToFund = cap.sub(weiRaised);\n', '    if (_weiAmount > _remainingToFund) {\n', '      _weiAmount = _remainingToFund;\n', '    }\n', '\n', '    uint256 _totalTokens = _weiAmount.mul(calculateBonusRate());\n', '    if (_totalTokens > token.balanceOf(this)) {\n', '      // Change _wei to buy rest of remaining tokens\n', '      _weiAmount = token.balanceOf(this).div(calculateBonusRate());\n', '    }\n', '\n', '    token.unpause();\n', '    weiRaised = weiRaised.add(_weiAmount);\n', '\n', '    forwardFunds(_weiAmount);\n', '    uint256 _weiToReturn = msg.value.sub(_weiAmount);\n', '    if (_weiToReturn > 0) {\n', '      msg.sender.transfer(_weiToReturn);\n', '      emit Refund(msg.sender, _weiToReturn);\n', '    }\n', '\n', '    uint256 _tokens = ethToTokens(_weiAmount);\n', '    emit TokenPurchase(msg.sender, _weiAmount, _tokens);\n', '    buyTokensHook(_tokens);\n', '    token.pause();\n', '\n', '    checkFinalize();\n', '\n', '    return _tokens;\n', '  }\n', '\n', '  // Allows the owner to take back the tokens that are assigned to the sale contract.\n', '  function refund() external onlyOwner returns (bool) {\n', '    require(hasEnded(), "Sale should have ended when refunding");\n', '    uint256 _tokens = token.balanceOf(address(this));\n', '\n', '    if (_tokens == 0) {\n', '      return false;\n', '    }\n', '\n', '    require(token.transfer(owner, _tokens), "Expected token transfer to succeed");\n', '\n', '    emit TokensRefund(_tokens);\n', '\n', '    return true;\n', '  }\n', '\n', '  /// @notice interface for founders to whitelist investors\n', '  /// @param _addresses array of investors\n', '  /// @param _status enable or disable\n', '  function whitelistAddresses(address[] _addresses, bool _status) public onlyWhitelister {\n', '    for (uint256 i = 0; i < _addresses.length; i++) {\n', '      address _investorAddress = _addresses[i];\n', '      if (whitelist[_investorAddress] != _status) {\n', '        whitelist[_investorAddress] = _status;\n', '      }\n', '    }\n', '  }\n', '\n', '  function setWhitelister(address _whitelister) public onlyOwner {\n', '    whitelister = _whitelister;\n', '  }\n', '\n', '  function checkFinalize() public {\n', '    if (hasEnded()) {\n', '      finalize();\n', '    }\n', '  }\n', '\n', '  function emergencyFinalize() public onlyOwner {\n', '    finalize();\n', '  }\n', '\n', '  function withdraw() public onlyOwner {\n', '    owner.transfer(address(this).balance);\n', '  }\n', '\n', '  function hasEnded() public constant returns (bool) {\n', '    if (isFinalized) {\n', '      return true;\n', '    }\n', '    bool _capReached = weiRaised >= cap;\n', '    bool _passedEndTime = getBlockTimestamp() > endTime;\n', '    return _passedEndTime || _capReached;\n', '  }\n', '\n', '  // @dev does not require that crowdsale `hasEnded()` to leave safegaurd\n', '  // in place if ETH rises in price too much during crowdsale.\n', '  // Allows team to close early if cap is exceeded in USD in this event.\n', '  function finalize() internal {\n', '    require(!isFinalized, "Should not be finalized when finalizing");\n', '    emit Finalized();\n', '    isFinalized = true;\n', '    token.transferOwnership(owner);\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds(uint256 _amount) internal {\n', '    wallet.transfer(_amount);\n', '  }\n', '\n', '  function ethToTokens(uint256 _ethAmount) internal view returns (uint256) {\n', '    return _ethAmount.mul(calculateBonusRate());\n', '  }\n', '\n', '  function getBlockTimestamp() internal view returns (uint256) {\n', '    return block.timestamp;\n', '  }\n', '}\n', '\n', 'contract MenloToken is PausableToken, BurnableToken, CanReclaimToken {\n', '\n', '  // Token properties\n', "  string public constant name = 'Menlo One';\n", "  string public constant symbol = 'ONE';\n", '\n', '  uint8 public constant decimals = 18;\n', '  uint256 private constant token_factor = 10**uint256(decimals);\n', '\n', '  // 1 billion ONE tokens in units divisible up to 18 decimals\n', '  uint256 public constant INITIAL_SUPPLY    = 1000000000 * token_factor;\n', '\n', '  uint256 public constant PUBLICSALE_SUPPLY = 354000000 * token_factor;\n', '  uint256 public constant GROWTH_SUPPLY     = 246000000 * token_factor;\n', '  uint256 public constant TEAM_SUPPLY       = 200000000 * token_factor;\n', '  uint256 public constant ADVISOR_SUPPLY    = 100000000 * token_factor;\n', '  uint256 public constant PARTNER_SUPPLY    = 100000000 * token_factor;\n', '\n', '  /**\n', '   * @dev Magic value to be returned upon successful reception of Menlo Tokens\n', '   */\n', '  bytes4 internal constant ONE_RECEIVED = 0x150b7a03;\n', '\n', '  address public crowdsale;\n', '  address public teamTimelock;\n', '  address public advisorTimelock;\n', '\n', '  modifier notInitialized(address saleAddress) {\n', '    require(address(saleAddress) == address(0), "Expected address to be null");\n', '    _;\n', '  }\n', '\n', '  constructor(address _growth, address _teamTimelock, address _advisorTimelock, address _partner) public {\n', '    assert(INITIAL_SUPPLY > 0);\n', '    assert((PUBLICSALE_SUPPLY + GROWTH_SUPPLY + TEAM_SUPPLY + ADVISOR_SUPPLY + PARTNER_SUPPLY) == INITIAL_SUPPLY);\n', '\n', '    uint256 _poolTotal = GROWTH_SUPPLY + TEAM_SUPPLY + ADVISOR_SUPPLY + PARTNER_SUPPLY;\n', '    uint256 _availableForSales = INITIAL_SUPPLY - _poolTotal;\n', '\n', '    assert(_availableForSales == PUBLICSALE_SUPPLY);\n', '\n', '    teamTimelock = _teamTimelock;\n', '    advisorTimelock = _advisorTimelock;\n', '\n', '    mint(msg.sender, _availableForSales);\n', '    mint(_growth, GROWTH_SUPPLY);\n', '    mint(_teamTimelock, TEAM_SUPPLY);\n', '    mint(_advisorTimelock, ADVISOR_SUPPLY);\n', '    mint(_partner, PARTNER_SUPPLY);\n', '\n', '    assert(totalSupply_ == INITIAL_SUPPLY);\n', '    pause();\n', '  }\n', '\n', '  function initializeCrowdsale(address _crowdsale) public onlyOwner notInitialized(crowdsale) {\n', '    unpause();\n', '    transfer(_crowdsale, balances[msg.sender]);  // Transfer left over balance after private presale allocations\n', '    crowdsale = _crowdsale;\n', '    pause();\n', '    transferOwnership(_crowdsale);\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) internal {\n', '    balances[_to] = _amount;\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value `bytes4(0x150b7a03)`;\n', '   * otherwise, the transfer is reverted.\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param _to address to receive the tokens.  Must be a MenloTokenReceiver based contract\n', '   * @param _value uint256 number of tokens to transfer\n', '   * @param _action uint256 action to perform in target _to contract\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   **/\n', '  function transferAndCall(address _to, uint256 _value, uint256 _action, bytes _data) public returns (bool) {\n', '    if (transfer(_to, _value)) {\n', '      require (MenloTokenReceiver(_to).onTokenReceived(msg.sender, _value, _action, _data) == ONE_RECEIVED, "Target contract onTokenReceived failed");\n', '      return true;\n', '    }\n', '\n', '    return false;\n', '  }\n', '}\n', '\n', 'contract MenloTokenReceiver {\n', '\n', '    /*\n', '     * @dev Address of the MenloToken contract\n', '     */\n', '    MenloToken token;\n', '\n', '    constructor(MenloToken _tokenContract) public {\n', '        token = _tokenContract;\n', '    }\n', '\n', '    /**\n', '     * @dev Magic value to be returned upon successful reception of Menlo Tokens\n', '     */\n', '    bytes4 internal constant ONE_RECEIVED = 0x150b7a03;\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the Menlo Token contract.\n', '     */\n', '    modifier onlyTokenContract() {\n', '        require(msg.sender == address(token));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice Handle the receipt of Menlo Tokens\n', '     * @dev The MenloToken contract calls this function on the recipient\n', '     * after a `transferAndCall`. This function MAY throw to revert and reject the\n', '     * transfer. Return of other than the magic value MUST result in the\n', '     * transaction being reverted.\n', '     * Warning: this function must call the onlyTokenContract modifier to trust\n', '     * the transfer took place\n', '     * @param _from The address which previously owned the token\n', '     * @param _value Number of tokens that were transfered\n', '     * @param _action Used to define enumeration of possible functions to call\n', '     * @param _data Additional data with no specified format\n', '     * @return `bytes4(0x150b7a03)`\n', '     */\n', '    function onTokenReceived(\n', '        address _from,\n', '        uint256 _value,\n', '        uint256 _action,\n', '        bytes _data\n', '    ) public /* onlyTokenContract */ returns(bytes4);\n', '}\n', '\n', 'contract MenloTokenSale is MenloSaleBase {\n', '\n', '  // Timestamps for the bonus periods, set in the constructor\n', '  uint256 public HOUR1;\n', '  uint256 public WEEK1;\n', '  uint256 public WEEK2;\n', '  uint256 public WEEK3;\n', '  uint256 public WEEK4;\n', '\n', '  constructor(\n', '    MenloToken _token,\n', '    uint256 _startTime,\n', '    uint256 _endTime,\n', '    uint256 _cap,\n', '    address _wallet\n', '  ) MenloSaleBase(\n', '    _token,\n', '    _startTime,\n', '    _endTime,\n', '    _cap,\n', '    _wallet\n', '  ) public {\n', '    HOUR1 = startTime + 1 hours;\n', '    WEEK1 = startTime + 1 weeks;\n', '    WEEK2 = startTime + 2 weeks;\n', '    WEEK3 = startTime + 3 weeks;\n', '  }\n', '\n', '  // Hour 1: 30% Bonus\n', '  // Week 1: 15% Bonus\n', '  // Week 2: 10% Bonus\n', '  // Week 3: 5% Bonus\n', '  // Week 4: 0% Bonus\n', '  function calculateBonusRate() public view returns (uint256) {\n', '    uint256 _bonusRate = 12000;\n', '\n', '    uint256 _currentTime = getBlockTimestamp();\n', '    if (_currentTime > startTime && _currentTime <= HOUR1) {\n', '      _bonusRate =  15600;\n', '    } else if (_currentTime <= WEEK1) {\n', '      _bonusRate =  13800; // week 1\n', '    } else if (_currentTime <= WEEK2) {\n', '      _bonusRate =  13200; // week 2\n', '    } else if (_currentTime <= WEEK3) {\n', '      _bonusRate =  12600; // week 3\n', '    }\n', '    return _bonusRate;\n', '  }\n', '\n', '  function buyTokensHook(uint256 _tokens) internal {\n', '    token.transfer(msg.sender, _tokens);\n', '    emit TokenRedeem(msg.sender, _tokens);\n', '  }\n', '}']