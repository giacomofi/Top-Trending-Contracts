['pragma solidity ^0.4.16;\n', '\n', '\n', '/*                                                                        \n', ' *  110010101000011000110110001011101010011000100110111110101111101000110001 \n', ' *  011111110010000101101010011000101011111100001111001100100100111001110110 \n', ' *  101010000001101110001110110001010101010000111100101011100011111011000011 \n', ' *  010100100010101011001011010011001001101010001011110000111000111100101101 \n', ' *  011010100111111010111100011000011001011010100100101111010001001001011110 \n', ' *  000010000011000100111111000111010101000101111000101100111111101111010001 \n', ' *  1001000101011110 \n', ' * "GNNM.110100i"\n', ' */\n', '\n', '\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract GNNM {\n', '    // 001101100010111010100110001\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 8;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // 011010100010111100001\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // GNNM13\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    // 1010100010111\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // GNNM8\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * 00000000000000\n', '     * 10111001010111\n', '     */\n', '    function GNNM(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // \n', '        balanceOf[msg.sender] = totalSupply;                // \n', '        name = tokenName;                                   // \n', '        symbol = tokenSymbol;                               // .1\n', '    }\n', '\n', '    /**\n', '     * 1100100011010110111\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // 3be012629\n', '        require(_to != 0x0);\n', '        // 0e836\n', '        require(balanceOf[_from] >= _value);\n', '        // 616c74656\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        // 9d2dc2e9760\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // sy00\n', '        balanceOf[_from] -= _value;\n', '        // 2xdffff\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // 20e83684\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * GNNM4\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * GNNM7\n', '     * GNNM""\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // GNNM0\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * GNNM11\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', '\n', '/*                                                                        \n', ' *  110010101000011000110110001011101010011000100110111110101111101000110001 \n', ' *  011111110010000101101010011000101011111100001111001100100100111001110110 \n', ' *  101010000001101110001110110001010101010000111100101011100011111011000011 \n', ' *  010100100010101011001011010011001001101010001011110000111000111100101101 \n', ' *  011010100111111010111100011000011001011010100100101111010001001001011110 \n', ' *  000010000011000100111111000111010101000101111000101100111111101111010001 \n', ' *  1001000101011110 \n', ' * "GNNM.110100i"\n', ' */\n', '\n', '\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract GNNM {\n', '    // 001101100010111010100110001\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 8;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // 011010100010111100001\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // GNNM13\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    // 1010100010111\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // GNNM8\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * 00000000000000\n', '     * 10111001010111\n', '     */\n', '    function GNNM(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // \n', '        balanceOf[msg.sender] = totalSupply;                // \n', '        name = tokenName;                                   // \n', '        symbol = tokenSymbol;                               // .1\n', '    }\n', '\n', '    /**\n', '     * 1100100011010110111\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // 3be012629\n', '        require(_to != 0x0);\n', '        // 0e836\n', '        require(balanceOf[_from] >= _value);\n', '        // 616c74656\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        // 9d2dc2e9760\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // sy00\n', '        balanceOf[_from] -= _value;\n', '        // 2xdffff\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // 20e83684\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * GNNM4\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * GNNM7\n', '     * GNNM""\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // GNNM0\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * GNNM11\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}']
