['pragma solidity ^0.4.21;\n', '\n', '// File: zeppelin/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin/contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin/contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin/contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin/contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/EpigenCareCrowdsale.sol\n', '\n', 'contract EpigenCareCrowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  StandardToken public token;\n', '\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '  address public wallet;\n', '  address public tokenPool;\n', '  uint256 public rate;\n', '  uint256 public weiRaised;\n', '  uint256 public weiPending;\n', '  uint256 public tokensPending;\n', '  uint256 public minimumInvestment;\n', '\n', '  mapping (address => Transaction) transactions;\n', '  mapping (address => bool) approvedAddresses;\n', '  mapping (address => bool) verifiers;\n', '\n', '  struct Transaction { uint weiAmount; uint tokenAmount; }\n', '\n', '  event TokenPurchaseRequest(address indexed purchaser, address indexed beneficiary, uint256 value);\n', '\n', '  function EpigenCareCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _tokenPool, address _token) Ownable() {\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '    require(_tokenPool != 0x0);\n', '\n', '    token = StandardToken(_token);\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    wallet = _wallet;\n', '    tokenPool = _tokenPool;\n', '\n', '    verifiers[msg.sender] = true;\n', '    rate = _rate;\n', '    minimumInvestment = 0.5 ether;\n', '  }\n', '\n', '  function () payable {\n', '    requestTokens(msg.sender);\n', '  }\n', '\n', '  function requestTokens(address beneficiary) sufficientApproval(msg.value) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '    require(msg.value >= minimumInvestment);\n', '\n', '    uint256 weiAmount = msg.value;\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    if(approvedAddresses[beneficiary]) {\n', '      weiRaised = weiRaised.add(weiAmount);\n', '\n', '      token.transferFrom(tokenPool, beneficiary, tokens);\n', '      wallet.transfer(weiAmount);\n', '    } else {\n', '      Transaction transaction = transactions[beneficiary];\n', '      transaction.weiAmount = transaction.weiAmount.add(weiAmount);\n', '      transaction.tokenAmount = transaction.tokenAmount.add(tokens);\n', '\n', '      weiPending = weiPending.add(weiAmount);\n', '      tokensPending = tokensPending.add(tokens);\n', '      TokenPurchaseRequest(msg.sender, beneficiary, weiAmount);\n', '    }\n', '  }\n', '\n', '  function validateTransaction(address purchaser) onlyVerifiers(msg.sender) {\n', '    Transaction transaction = transactions[purchaser];\n', '\n', '    weiRaised = weiRaised.add(transaction.weiAmount);\n', '    weiPending = weiPending.sub(transaction.weiAmount);\n', '    tokensPending = tokensPending.sub(transaction.tokenAmount);\n', '    approvedAddresses[purchaser] = true;\n', '\n', '    token.transferFrom(tokenPool, purchaser, transaction.tokenAmount);\n', '    wallet.transfer(transaction.weiAmount);\n', '    transaction.weiAmount = 0;\n', '    transaction.tokenAmount = 0;\n', '  }\n', '\n', '  function pendingTransaction(address user) returns (uint value){\n', '    return transactions[user].weiAmount;\n', '  }\n', '\n', '  function revokeRequest() {\n', '    Transaction transaction = transactions[msg.sender];\n', '    weiPending = weiPending.sub(transaction.weiAmount);\n', '    tokensPending = tokensPending.sub(transaction.tokenAmount);\n', '    msg.sender.transfer(transaction.weiAmount);\n', '    transaction.weiAmount = 0;\n', '    transaction.tokenAmount = 0;\n', '  }\n', '\n', '  modifier sufficientApproval(uint value) {\n', '    uint tokensNeeded = tokensPending.add(value.mul(rate));\n', '    uint tokensAvailable = token.allowance(tokenPool, this);\n', '    require(tokensAvailable >= tokensNeeded);\n', '    _;\n', '  }\n', '\n', '  function rejectRequest(address user, uint fee) onlyVerifiers(msg.sender) {\n', '    Transaction transaction = transactions[user];\n', '    weiPending = weiPending.sub(transaction.weiAmount);\n', '    tokensPending = tokensPending.sub(transaction.tokenAmount);\n', '    if(fee > 0) {\n', '      transaction.weiAmount = transaction.weiAmount.sub(fee);\n', '      wallet.transfer(fee);\n', '    }\n', '\n', '    user.transfer(transaction.weiAmount);\n', '    transaction.weiAmount = 0;\n', '    transaction.tokenAmount = 0;\n', '  }\n', '\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = (now >= startTime && now <= endTime);\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return (withinPeriod && nonZeroPurchase);\n', '  }\n', '\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  function updateMinimumInvestment(uint _minimumInvestment) onlyOwner {\n', '    minimumInvestment = _minimumInvestment;\n', '  }\n', '\n', '  function updateRate(uint _rate) onlyOwner {\n', '    rate = _rate;\n', '  }\n', '\n', '  function setVerifier(address verifier, bool value) onlyOwner {\n', '    verifiers[verifier] = value;\n', '  }\n', '\n', '  function isValidated(address user) returns (bool) {\n', '    return approvedAddresses[user];\n', '  }\n', '\n', '  modifier onlyVerifiers(address sender) {\n', '    require(verifiers[sender]);\n', '    _;\n', '  }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '// File: zeppelin/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin/contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin/contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin/contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin/contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/EpigenCareCrowdsale.sol\n', '\n', 'contract EpigenCareCrowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  StandardToken public token;\n', '\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '  address public wallet;\n', '  address public tokenPool;\n', '  uint256 public rate;\n', '  uint256 public weiRaised;\n', '  uint256 public weiPending;\n', '  uint256 public tokensPending;\n', '  uint256 public minimumInvestment;\n', '\n', '  mapping (address => Transaction) transactions;\n', '  mapping (address => bool) approvedAddresses;\n', '  mapping (address => bool) verifiers;\n', '\n', '  struct Transaction { uint weiAmount; uint tokenAmount; }\n', '\n', '  event TokenPurchaseRequest(address indexed purchaser, address indexed beneficiary, uint256 value);\n', '\n', '  function EpigenCareCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _tokenPool, address _token) Ownable() {\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '    require(_tokenPool != 0x0);\n', '\n', '    token = StandardToken(_token);\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    wallet = _wallet;\n', '    tokenPool = _tokenPool;\n', '\n', '    verifiers[msg.sender] = true;\n', '    rate = _rate;\n', '    minimumInvestment = 0.5 ether;\n', '  }\n', '\n', '  function () payable {\n', '    requestTokens(msg.sender);\n', '  }\n', '\n', '  function requestTokens(address beneficiary) sufficientApproval(msg.value) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '    require(msg.value >= minimumInvestment);\n', '\n', '    uint256 weiAmount = msg.value;\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    if(approvedAddresses[beneficiary]) {\n', '      weiRaised = weiRaised.add(weiAmount);\n', '\n', '      token.transferFrom(tokenPool, beneficiary, tokens);\n', '      wallet.transfer(weiAmount);\n', '    } else {\n', '      Transaction transaction = transactions[beneficiary];\n', '      transaction.weiAmount = transaction.weiAmount.add(weiAmount);\n', '      transaction.tokenAmount = transaction.tokenAmount.add(tokens);\n', '\n', '      weiPending = weiPending.add(weiAmount);\n', '      tokensPending = tokensPending.add(tokens);\n', '      TokenPurchaseRequest(msg.sender, beneficiary, weiAmount);\n', '    }\n', '  }\n', '\n', '  function validateTransaction(address purchaser) onlyVerifiers(msg.sender) {\n', '    Transaction transaction = transactions[purchaser];\n', '\n', '    weiRaised = weiRaised.add(transaction.weiAmount);\n', '    weiPending = weiPending.sub(transaction.weiAmount);\n', '    tokensPending = tokensPending.sub(transaction.tokenAmount);\n', '    approvedAddresses[purchaser] = true;\n', '\n', '    token.transferFrom(tokenPool, purchaser, transaction.tokenAmount);\n', '    wallet.transfer(transaction.weiAmount);\n', '    transaction.weiAmount = 0;\n', '    transaction.tokenAmount = 0;\n', '  }\n', '\n', '  function pendingTransaction(address user) returns (uint value){\n', '    return transactions[user].weiAmount;\n', '  }\n', '\n', '  function revokeRequest() {\n', '    Transaction transaction = transactions[msg.sender];\n', '    weiPending = weiPending.sub(transaction.weiAmount);\n', '    tokensPending = tokensPending.sub(transaction.tokenAmount);\n', '    msg.sender.transfer(transaction.weiAmount);\n', '    transaction.weiAmount = 0;\n', '    transaction.tokenAmount = 0;\n', '  }\n', '\n', '  modifier sufficientApproval(uint value) {\n', '    uint tokensNeeded = tokensPending.add(value.mul(rate));\n', '    uint tokensAvailable = token.allowance(tokenPool, this);\n', '    require(tokensAvailable >= tokensNeeded);\n', '    _;\n', '  }\n', '\n', '  function rejectRequest(address user, uint fee) onlyVerifiers(msg.sender) {\n', '    Transaction transaction = transactions[user];\n', '    weiPending = weiPending.sub(transaction.weiAmount);\n', '    tokensPending = tokensPending.sub(transaction.tokenAmount);\n', '    if(fee > 0) {\n', '      transaction.weiAmount = transaction.weiAmount.sub(fee);\n', '      wallet.transfer(fee);\n', '    }\n', '\n', '    user.transfer(transaction.weiAmount);\n', '    transaction.weiAmount = 0;\n', '    transaction.tokenAmount = 0;\n', '  }\n', '\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = (now >= startTime && now <= endTime);\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return (withinPeriod && nonZeroPurchase);\n', '  }\n', '\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  function updateMinimumInvestment(uint _minimumInvestment) onlyOwner {\n', '    minimumInvestment = _minimumInvestment;\n', '  }\n', '\n', '  function updateRate(uint _rate) onlyOwner {\n', '    rate = _rate;\n', '  }\n', '\n', '  function setVerifier(address verifier, bool value) onlyOwner {\n', '    verifiers[verifier] = value;\n', '  }\n', '\n', '  function isValidated(address user) returns (bool) {\n', '    return approvedAddresses[user];\n', '  }\n', '\n', '  modifier onlyVerifiers(address sender) {\n', '    require(verifiers[sender]);\n', '    _;\n', '  }\n', '}']
