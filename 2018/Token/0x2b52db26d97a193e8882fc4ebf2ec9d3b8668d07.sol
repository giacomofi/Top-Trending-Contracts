['pragma solidity ^0.4.25;\n', '\n', '/******************************************/\n', '/*       Netkiller Mini TOKEN             */\n', '/******************************************/\n', '/* Author netkiller <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ff919a8b949693939a8dbf928c91d19c9092">[email&#160;protected]</a>>   */\n', '/* Home http://www.netkiller.cn           */\n', '/* Version 2018-09-26 Test Token          */\n', '/******************************************/\n', '\n', 'contract NetkillerTestToken {\n', '    address public owner;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '\n', '    constructor(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol,\n', '        uint decimalUnits\n', '    ) public {\n', '        owner = msg.sender;\n', '        name = tokenName; \n', '        symbol = tokenSymbol; \n', '        decimals = decimalUnits;\n', '        totalSupply = initialSupply * 10 ** uint256(decimals); \n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function setSupply(uint256 _initialSupply) onlyOwner public{\n', '        totalSupply = _initialSupply * 10 ** uint256(decimals);\n', '    }\n', '    function setName(string _name) onlyOwner public{\n', '        name = _name;\n', '    }\n', '    function setSymbol(string _symbol) onlyOwner public{\n', '        symbol = _symbol;\n', '    }\n', '    function setDecimals(uint _decimals) onlyOwner public{\n', '        decimals = _decimals;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', ' \n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != address(0));                        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n', '        balanceOf[_from] -= _value;                         // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success){\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.25;\n', '\n', '/******************************************/\n', '/*       Netkiller Mini TOKEN             */\n', '/******************************************/\n', '/* Author netkiller <netkiller@msn.com>   */\n', '/* Home http://www.netkiller.cn           */\n', '/* Version 2018-09-26 Test Token          */\n', '/******************************************/\n', '\n', 'contract NetkillerTestToken {\n', '    address public owner;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '\n', '    constructor(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol,\n', '        uint decimalUnits\n', '    ) public {\n', '        owner = msg.sender;\n', '        name = tokenName; \n', '        symbol = tokenSymbol; \n', '        decimals = decimalUnits;\n', '        totalSupply = initialSupply * 10 ** uint256(decimals); \n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function setSupply(uint256 _initialSupply) onlyOwner public{\n', '        totalSupply = _initialSupply * 10 ** uint256(decimals);\n', '    }\n', '    function setName(string _name) onlyOwner public{\n', '        name = _name;\n', '    }\n', '    function setSymbol(string _symbol) onlyOwner public{\n', '        symbol = _symbol;\n', '    }\n', '    function setDecimals(uint _decimals) onlyOwner public{\n', '        decimals = _decimals;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', ' \n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != address(0));                        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n', '        balanceOf[_from] -= _value;                         // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success){\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '}']
