['pragma solidity ^0.4.19;\n', '\n', '// Markus Freitag & Bao Dai\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function Ownable() internal {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '//////////////////////////////////////////////////////////////\n', '//                                                          //\n', "//  Bagholder's ERC20                           \t    //\n", '//                                                          //\n', '//////////////////////////////////////////////////////////////\n', '\n', 'contract BagholderERC20 is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) held;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    uint256 public constant blockEndICO = 1525197600;\n', '\n', '    /* Public variables for the ERC20 token */\n', '    string public constant standard = "ERC20 Bagholder";\n', '    uint8 public constant decimals = 8; // hardcoded to be a constant\n', '    uint256 public totalSupply;\n', '    string public name;\n', '    string public symbol;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function heldOf(address _owner) public view returns (uint256 balance) {\n', '        return held[_owner];\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(block.timestamp > blockEndICO || msg.sender == owner);\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        held[_to] = block.number;\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        held[_to] = block.number;\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public onlyOwner returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public onlyOwner returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public onlyOwner returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public onlyOwner returns (bool success) {    \n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'interface tokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public ; \n', '}\n', '\n', '    \n', 'contract Bagholder is BagholderERC20 {\n', '\n', '    // Contract variables and constants\n', '    uint256 constant initialSupply = 0;\n', '    string constant tokenName = "Bagholder";\n', '    string constant tokenSymbol = "BAG";\n', '\n', '    address public BagholderAddr = 0x02cEE5441eFb50C1532a53F3EAA1E074621174F2;\n', '    uint256 public constant minPrice = 75000000000000;  //\n', '    uint256 public buyPrice = minPrice;\n', '    uint256 public tokenReward = 0;\n', '    // constant to simplify conversion of token amounts into integer form\n', '    uint256 public tokenUnit = uint256(10)**decimals;\n', '\n', '    //Declare logging events\n', '    event LogDeposit(address sender, uint amount);\n', '    event LogWithdrawal(address receiver, uint amount);\n', '  \n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function Bagholder() public {\n', '        totalSupply = initialSupply;  // Update total supply\n', '        name = tokenName;             // Set the name for display purposes\n', '        symbol = tokenSymbol;         // Set the symbol for display purposes\n', '    }\n', '\n', '    function () public payable {\n', '        buy();   // Allow to buy tokens sending ether directly to contract\n', '    }\n', '\n', '    modifier status() {\n', '        _;  // modified function code should go before prices update\n', '\n', '        if (block.timestamp < 1520272800){          //until 5 march 2018\n', '            if (totalSupply < 50000000000000){\n', '                buyPrice = 75000000000000;\n', '\n', '            } else {\t\t\t \n', '                buyPrice = 80000000000000;\n', '            }\n', '        } else if (block.timestamp < 1521136800){   // until 15 march 2018\n', '          buyPrice = 80000000000000;\n', '\n', '        } else if (block.timestamp<1522605600){     //until 1 April 2018\n', '          buyPrice = 85000000000000;\n', '\n', '        } else if (block.timestamp < 1523815200){   //until 15 April 2018\n', '\n', '          buyPrice = 90000000000000;\t\n', '\n', '\n', '        } else {\n', '\n', '          buyPrice = 100000000000000; \n', '        }\n', '    }\n', '\n', '    function deposit() public payable onlyOwner returns(bool success) {\n', '        // Check for overflows;\n', '\n', '        assert (this.balance + msg.value >= this.balance); // Check for overflows\n', '        tokenReward = this.balance / totalSupply;\n', '\n', '        //executes event to reflect the changes\n', '        LogDeposit(msg.sender, msg.value);\n', '        \n', '        return true;\n', '    }\n', '\n', '    function withdrawReward() public status {\n', '        require (block.number - held[msg.sender] > 172800); //1 month\n', '\n', '        held[msg.sender] = block.number;\n', '        uint256 ethAmount = tokenReward * balances[msg.sender];\n', '\n', '        //send eth to owner address\n', '        msg.sender.transfer(ethAmount);\n', '          \n', '        //executes event to register the changes\n', '        LogWithdrawal(msg.sender, ethAmount);\n', '    }\n', '\n', '    function withdraw(uint value) public onlyOwner {\n', '        //send eth to owner address\n', '        msg.sender.transfer(value);\n', '\n', '        //executes event to register the changes\n', '        LogWithdrawal(msg.sender, value);\n', '    }\n', '\n', '    function buy() public payable status {\n', '        require (totalSupply <= 10000000000000000);\n', '        require(block.timestamp < blockEndICO);\n', '\n', '        uint256 tokenAmount = (msg.value / buyPrice)*tokenUnit ;  // calculates the amount\n', '\n', '        transferBuy(msg.sender, tokenAmount);\n', '        BagholderAddr.transfer(msg.value);\n', '    }\n', '\n', '    function transferBuy(address _to, uint256 _value) internal returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        // SafeMath.add will throw if there is not enough balance.\n', '        totalSupply = totalSupply.add(_value*2);\n', '        held[_to] = block.number;\n', '        balances[BagholderAddr] = balances[BagholderAddr].add(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        Transfer(this, _to, _value);\n', '        Transfer(this, BagholderAddr, _value);\n', '        return true;\n', '    }\n', '\n', '  function burn(address addr) public onlyOwner{\n', '    totalSupply=totalSupply.sub(balances[addr]);\n', '    balances[addr]=0;\n', '\n', '  }\n', '\n', '}']