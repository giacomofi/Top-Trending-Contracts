['pragma solidity ^0.4.24;\n', ' \n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) balances;\n', '    uint256 totalSupply_;\n', '    \n', '    /**\n', '     * @dev total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    \n', '    event Burn(address _address, uint256 _value);\n', '    \n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '  \n', '    /**\n', '     * Destroy tokens\n', '     * Remove `_value` tokens from the system irreversibly\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);                 // Check if the sender has enough\n', '        balances[msg.sender] = balances[msg.sender].sub(_value); // Subtract from the sender\n', '        totalSupply_ = totalSupply_.sub(_value);                 // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balances[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowed[_from][msg.sender]);    // Check allowance\n', '        balances[_from] = balances[_from].sub(_value);                         // Subtract from the targeted balance\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);             // Subtract from the sender&#39;s allowance\n', '        totalSupply_ = totalSupply_.sub(_value);                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0)); \n', '        owner = newOwner;\n', '        emit OwnershipTransferred(owner, newOwner);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title VTest\n', ' * @dev Token that implements the erc20 interface\n', ' */\n', 'contract VTest is StandardToken, Ownable {\n', '    address public icoAccount       = address(0x8Df21F9e41Dd7Bd681fcB6d49248f897595a5304);  // ICO Token holder\n', '\taddress public marketingAccount = address(0x83313B9c27668b41151509a46C1e2a8140187362);  // Marketing Token holder\n', '\taddress public advisorAccount   = address(0xB6763FeC658338A7574a796Aeda45eb6D81E69B9);  // Advisor Token holder\n', '\tmapping(address => bool) public owners;\n', '\t\n', '\tstring public name   = "VTest";  // set Token name\n', '\tstring public symbol = "VT";       // set Token symbol\n', '\tuint public decimals = 18;\n', '\tuint public INITIAL_SUPPLY = 10000000000 * (10 ** uint256(decimals));  // set Token total supply\n', '\t\n', '\tmapping(address => bool) public icoProceeding; // ico manage\n', '\t\n', '\tbool public released      = false;   // all lock\n', '    uint8 public transferStep = 0;       // avail step\n', '\tbool public stepLockCheck = true;    // step lock\n', '    mapping(uint8 => mapping(address => bool)) public holderStep; // holder step\n', '\t\n', '\tevent ReleaseToken(address _owner, bool released);\n', '\tevent ChangeTransferStep(address _owner, uint8 newStep);\n', '\t\n', '\t/**\n', '     * Constructor function\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */ \n', '\tconstructor() public {\n', '\t    require(msg.sender != address(0));\n', '\t\ttotalSupply_ = INITIAL_SUPPLY;      // Set total supply\n', '\t\tbalances[msg.sender] = INITIAL_SUPPLY;\n', '\t\temit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '\t\t\n', '\t\tsuper.transfer(icoAccount, INITIAL_SUPPLY.mul(45).div(100));       // 45% allocation to ICO account\n', '\t\tsuper.transfer(marketingAccount, INITIAL_SUPPLY.mul(15).div(100)); // 15% allocation to Marketing account\n', '\t\tsuper.transfer(advisorAccount, INITIAL_SUPPLY.mul(10).div(100));   // 10% allocation to Advisor account\n', '\t\t\n', '\t\t\n', '\t\t// set owners\n', '\t\towners[msg.sender] = true;\n', '\t\towners[icoAccount] = true;\n', '\t\towners[marketingAccount] = true;\n', '\t\towners[advisorAccount] = true;\n', '\t\t\n', '\t\tholderStep[0][msg.sender] = true;\n', '\t\tholderStep[0][icoAccount] = true;\n', '\t\tholderStep[0][marketingAccount] = true;\n', '\t\tholderStep[0][advisorAccount] = true;\n', '    }\t\n', '\t/**\n', '     * ICO list management\n', '     */\n', '\tfunction registIcoAddress(address _icoAddress) onlyOwner public {\n', '\t    require(_icoAddress != address(0));\n', '\t    require(!icoProceeding[_icoAddress]);\n', '\t    icoProceeding[_icoAddress] = true;\n', '\t}\n', '\tfunction unregisttIcoAddress(address _icoAddress) onlyOwner public {\n', '\t    require(_icoAddress != address(0));\n', '\t    require(icoProceeding[_icoAddress]);\n', '\t    icoProceeding[_icoAddress] = false;\n', '\t}\n', '\t/**\n', '     * Token lock management\n', '     */\n', '\tfunction releaseToken() onlyOwner public {\n', '\t    require(!released);\n', '\t    released = true;\n', '\t    emit ReleaseToken(msg.sender, released);\n', '\t}\n', '\tfunction lockToken() onlyOwner public {\n', '\t\trequire(released);\n', '\t\treleased = false;\n', '\t\temit ReleaseToken(msg.sender, released); \n', '\t}\t\n', '\tfunction changeTransferStep(uint8 _changeStep) onlyOwner public {\n', '\t    require(transferStep != _changeStep);\n', '\t    require(_changeStep >= 0 && _changeStep < 10);\n', '        transferStep = _changeStep;\n', '        emit ChangeTransferStep(msg.sender, _changeStep);\n', '\t}\n', '\tfunction changeTransferStepLock(bool _stepLock) onlyOwner public {\n', '\t    require(stepLockCheck != _stepLock);\n', '\t    stepLockCheck = _stepLock;\n', '\t}\n', '\t\n', '\t/**\n', '     * Check the token and step lock\n', '     */\n', '\tmodifier onlyReleased() {\n', '\t    require(released);\n', '\t    _;\n', '\t}\n', '\tmodifier onlyStepUnlock(address _funderAddr) {\n', '\t    if (!owners[_funderAddr]) {\n', '\t        if (stepLockCheck) {\n', '    \t\t    require(checkHolderStep(_funderAddr));\n', '\t        }    \n', '\t    }\n', '\t    _;\n', '\t}\n', '\t\n', '\t/**\n', '     * Regist holder step\n', '     */\n', '    function registHolderStep(address _contractAddr, uint8 _icoStep, address _funderAddr) public returns (bool) {\n', '\t\trequire(icoProceeding[_contractAddr]);\n', '\t\trequire(_icoStep > 0);\n', '        holderStep[_icoStep][_funderAddr] = true;\n', '        \n', '        return true;\n', '    }\n', '\t/**\n', '     * Check the funder step lock\n', '     */\n', '\tfunction checkHolderStep(address _funderAddr) public view returns (bool) {\n', '\t\tbool returnBool = false;        \n', '        for (uint8 i = transferStep; i >= 1; i--) {\n', '            if (holderStep[i][_funderAddr]) {\n', '                returnBool = true;\n', '                break;\n', '            }\n', '        }\n', '\t\treturn returnBool;\n', '\t}\n', '\t\n', '\t\n', '\t/**\n', '\t * Override ERC20 interface funtion, To verify token release\n', '\t */\n', '\tfunction transfer(address to, uint256 value) public onlyReleased onlyStepUnlock(msg.sender) returns (bool) {\n', '\t    return super.transfer(to, value);\n', '    }\n', '    function allowance(address owner, address spender) public onlyReleased view returns (uint256) {\n', '        return super.allowance(owner,spender);\n', '    }\n', '    function transferFrom(address from, address to, uint256 value) public onlyReleased onlyStepUnlock(msg.sender) returns (bool) {\n', '        \n', '        return super.transferFrom(from, to, value);\n', '    }\n', '    function approve(address spender, uint256 value) public onlyReleased returns (bool) {\n', '        return super.approve(spender,value);\n', '    }\n', '\t// Only the owner can manage burn function\n', '\tfunction burn(uint256 _value) public onlyOwner returns (bool success) {\n', '\t\treturn super.burn(_value);\n', '\t}\n', '\tfunction burnFrom(address _from, uint256 _value) public onlyOwner returns (bool success) {\n', '\t\treturn super.burnFrom(_from, _value);\n', '\t}\n', '\t\n', '    function transferSoldToken(address _contractAddr, address _to, uint256 _value) public returns(bool) {\n', '\t    require(icoProceeding[_contractAddr]);\n', '\t    require(balances[icoAccount] >= _value);\n', '\t    balances[icoAccount] = balances[icoAccount].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(icoAccount, _to, _value);\n', '        return true;\n', '\t}\n', '\tfunction transferBonusToken(address _to, uint256 _value) public onlyOwner returns(bool) {\n', '\t    require(balances[icoAccount] >= _value);\n', '\t    balances[icoAccount] = balances[icoAccount].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(icoAccount, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\tfunction transferAdvisorToken(address _to, uint256 _value)  public onlyOwner returns (bool) {\n', '\t    require(balances[advisorAccount] >= _value);\n', '\t    balances[advisorAccount] = balances[advisorAccount].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\temit Transfer(advisorAccount, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '}']
['pragma solidity ^0.4.24;\n', ' \n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) balances;\n', '    uint256 totalSupply_;\n', '    \n', '    /**\n', '     * @dev total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    \n', '    event Burn(address _address, uint256 _value);\n', '    \n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '  \n', '    /**\n', '     * Destroy tokens\n', '     * Remove `_value` tokens from the system irreversibly\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);                 // Check if the sender has enough\n', '        balances[msg.sender] = balances[msg.sender].sub(_value); // Subtract from the sender\n', '        totalSupply_ = totalSupply_.sub(_value);                 // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balances[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowed[_from][msg.sender]);    // Check allowance\n', '        balances[_from] = balances[_from].sub(_value);                         // Subtract from the targeted balance\n', "        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\n", '        totalSupply_ = totalSupply_.sub(_value);                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0)); \n', '        owner = newOwner;\n', '        emit OwnershipTransferred(owner, newOwner);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title VTest\n', ' * @dev Token that implements the erc20 interface\n', ' */\n', 'contract VTest is StandardToken, Ownable {\n', '    address public icoAccount       = address(0x8Df21F9e41Dd7Bd681fcB6d49248f897595a5304);  // ICO Token holder\n', '\taddress public marketingAccount = address(0x83313B9c27668b41151509a46C1e2a8140187362);  // Marketing Token holder\n', '\taddress public advisorAccount   = address(0xB6763FeC658338A7574a796Aeda45eb6D81E69B9);  // Advisor Token holder\n', '\tmapping(address => bool) public owners;\n', '\t\n', '\tstring public name   = "VTest";  // set Token name\n', '\tstring public symbol = "VT";       // set Token symbol\n', '\tuint public decimals = 18;\n', '\tuint public INITIAL_SUPPLY = 10000000000 * (10 ** uint256(decimals));  // set Token total supply\n', '\t\n', '\tmapping(address => bool) public icoProceeding; // ico manage\n', '\t\n', '\tbool public released      = false;   // all lock\n', '    uint8 public transferStep = 0;       // avail step\n', '\tbool public stepLockCheck = true;    // step lock\n', '    mapping(uint8 => mapping(address => bool)) public holderStep; // holder step\n', '\t\n', '\tevent ReleaseToken(address _owner, bool released);\n', '\tevent ChangeTransferStep(address _owner, uint8 newStep);\n', '\t\n', '\t/**\n', '     * Constructor function\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */ \n', '\tconstructor() public {\n', '\t    require(msg.sender != address(0));\n', '\t\ttotalSupply_ = INITIAL_SUPPLY;      // Set total supply\n', '\t\tbalances[msg.sender] = INITIAL_SUPPLY;\n', '\t\temit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '\t\t\n', '\t\tsuper.transfer(icoAccount, INITIAL_SUPPLY.mul(45).div(100));       // 45% allocation to ICO account\n', '\t\tsuper.transfer(marketingAccount, INITIAL_SUPPLY.mul(15).div(100)); // 15% allocation to Marketing account\n', '\t\tsuper.transfer(advisorAccount, INITIAL_SUPPLY.mul(10).div(100));   // 10% allocation to Advisor account\n', '\t\t\n', '\t\t\n', '\t\t// set owners\n', '\t\towners[msg.sender] = true;\n', '\t\towners[icoAccount] = true;\n', '\t\towners[marketingAccount] = true;\n', '\t\towners[advisorAccount] = true;\n', '\t\t\n', '\t\tholderStep[0][msg.sender] = true;\n', '\t\tholderStep[0][icoAccount] = true;\n', '\t\tholderStep[0][marketingAccount] = true;\n', '\t\tholderStep[0][advisorAccount] = true;\n', '    }\t\n', '\t/**\n', '     * ICO list management\n', '     */\n', '\tfunction registIcoAddress(address _icoAddress) onlyOwner public {\n', '\t    require(_icoAddress != address(0));\n', '\t    require(!icoProceeding[_icoAddress]);\n', '\t    icoProceeding[_icoAddress] = true;\n', '\t}\n', '\tfunction unregisttIcoAddress(address _icoAddress) onlyOwner public {\n', '\t    require(_icoAddress != address(0));\n', '\t    require(icoProceeding[_icoAddress]);\n', '\t    icoProceeding[_icoAddress] = false;\n', '\t}\n', '\t/**\n', '     * Token lock management\n', '     */\n', '\tfunction releaseToken() onlyOwner public {\n', '\t    require(!released);\n', '\t    released = true;\n', '\t    emit ReleaseToken(msg.sender, released);\n', '\t}\n', '\tfunction lockToken() onlyOwner public {\n', '\t\trequire(released);\n', '\t\treleased = false;\n', '\t\temit ReleaseToken(msg.sender, released); \n', '\t}\t\n', '\tfunction changeTransferStep(uint8 _changeStep) onlyOwner public {\n', '\t    require(transferStep != _changeStep);\n', '\t    require(_changeStep >= 0 && _changeStep < 10);\n', '        transferStep = _changeStep;\n', '        emit ChangeTransferStep(msg.sender, _changeStep);\n', '\t}\n', '\tfunction changeTransferStepLock(bool _stepLock) onlyOwner public {\n', '\t    require(stepLockCheck != _stepLock);\n', '\t    stepLockCheck = _stepLock;\n', '\t}\n', '\t\n', '\t/**\n', '     * Check the token and step lock\n', '     */\n', '\tmodifier onlyReleased() {\n', '\t    require(released);\n', '\t    _;\n', '\t}\n', '\tmodifier onlyStepUnlock(address _funderAddr) {\n', '\t    if (!owners[_funderAddr]) {\n', '\t        if (stepLockCheck) {\n', '    \t\t    require(checkHolderStep(_funderAddr));\n', '\t        }    \n', '\t    }\n', '\t    _;\n', '\t}\n', '\t\n', '\t/**\n', '     * Regist holder step\n', '     */\n', '    function registHolderStep(address _contractAddr, uint8 _icoStep, address _funderAddr) public returns (bool) {\n', '\t\trequire(icoProceeding[_contractAddr]);\n', '\t\trequire(_icoStep > 0);\n', '        holderStep[_icoStep][_funderAddr] = true;\n', '        \n', '        return true;\n', '    }\n', '\t/**\n', '     * Check the funder step lock\n', '     */\n', '\tfunction checkHolderStep(address _funderAddr) public view returns (bool) {\n', '\t\tbool returnBool = false;        \n', '        for (uint8 i = transferStep; i >= 1; i--) {\n', '            if (holderStep[i][_funderAddr]) {\n', '                returnBool = true;\n', '                break;\n', '            }\n', '        }\n', '\t\treturn returnBool;\n', '\t}\n', '\t\n', '\t\n', '\t/**\n', '\t * Override ERC20 interface funtion, To verify token release\n', '\t */\n', '\tfunction transfer(address to, uint256 value) public onlyReleased onlyStepUnlock(msg.sender) returns (bool) {\n', '\t    return super.transfer(to, value);\n', '    }\n', '    function allowance(address owner, address spender) public onlyReleased view returns (uint256) {\n', '        return super.allowance(owner,spender);\n', '    }\n', '    function transferFrom(address from, address to, uint256 value) public onlyReleased onlyStepUnlock(msg.sender) returns (bool) {\n', '        \n', '        return super.transferFrom(from, to, value);\n', '    }\n', '    function approve(address spender, uint256 value) public onlyReleased returns (bool) {\n', '        return super.approve(spender,value);\n', '    }\n', '\t// Only the owner can manage burn function\n', '\tfunction burn(uint256 _value) public onlyOwner returns (bool success) {\n', '\t\treturn super.burn(_value);\n', '\t}\n', '\tfunction burnFrom(address _from, uint256 _value) public onlyOwner returns (bool success) {\n', '\t\treturn super.burnFrom(_from, _value);\n', '\t}\n', '\t\n', '    function transferSoldToken(address _contractAddr, address _to, uint256 _value) public returns(bool) {\n', '\t    require(icoProceeding[_contractAddr]);\n', '\t    require(balances[icoAccount] >= _value);\n', '\t    balances[icoAccount] = balances[icoAccount].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(icoAccount, _to, _value);\n', '        return true;\n', '\t}\n', '\tfunction transferBonusToken(address _to, uint256 _value) public onlyOwner returns(bool) {\n', '\t    require(balances[icoAccount] >= _value);\n', '\t    balances[icoAccount] = balances[icoAccount].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(icoAccount, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\tfunction transferAdvisorToken(address _to, uint256 _value)  public onlyOwner returns (bool) {\n', '\t    require(balances[advisorAccount] >= _value);\n', '\t    balances[advisorAccount] = balances[advisorAccount].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\temit Transfer(advisorAccount, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '}']
