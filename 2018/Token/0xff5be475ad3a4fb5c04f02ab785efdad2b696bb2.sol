['// 0.4.20+commit.3155dd80.Emscripten.clang\n', 'pragma solidity ^0.4.20;\n', '\n', 'contract owned {\n', '  address public owner;\n', '\n', '  function owned() public { owner = msg.sender; }\n', '\n', '  modifier onlyOwner {\n', '    if (msg.sender != owner) { revert(); }\n', '    _;\n', '  }\n', '\n', '  function changeOwner( address newowner ) public onlyOwner {\n', '    owner = newowner;\n', '  }\n', '}\n', '\n', '// Kuberan Govender&#39;s ERC20 coin\n', 'contract Kuberand is owned\n', '{\n', '  string  public name;\n', '  string  public symbol;\n', '  uint8   public decimals;\n', '  uint256 public totalSupply;\n', '\n', '  mapping( address => uint256 ) balances_;\n', '  mapping( address => mapping(address => uint256) ) allowances_;\n', '\n', '  event Approval( address indexed owner,\n', '                  address indexed spender,\n', '                  uint value );\n', '\n', '  event Transfer( address indexed from,\n', '                  address indexed to,\n', '                  uint256 value );\n', '\n', '  event Burn( address indexed from, uint256 value );\n', '\n', '  function Kuberand() public\n', '  {\n', '    decimals = uint8(18);\n', '\n', '    balances_[msg.sender] = uint256( 1e9 * 10 ** uint256(decimals) );\n', '    totalSupply = balances_[msg.sender];\n', '    name = "Kuberand";\n', '    symbol = "KUBR";\n', '\n', '    Transfer( address(0), msg.sender, totalSupply );\n', '  }\n', '\n', '  function() public payable { revert(); } // does not accept money\n', '\n', '  function balanceOf( address owner ) public constant returns (uint) {\n', '    return balances_[owner];\n', '  }\n', '\n', '  function approve( address spender, uint256 value ) public\n', '  returns (bool success)\n', '  {\n', '    allowances_[msg.sender][spender] = value;\n', '    Approval( msg.sender, spender, value );\n', '    return true;\n', '  }\n', ' \n', '  function allowance( address owner, address spender ) public constant\n', '  returns (uint256 remaining)\n', '  {\n', '    return allowances_[owner][spender];\n', '  }\n', '\n', '  function transfer(address to, uint256 value) public returns (bool)\n', '  {\n', '    _transfer( msg.sender, to, value );\n', '    return true;\n', '  }\n', '\n', '  function transferFrom( address from, address to, uint256 value ) public\n', '  returns (bool success)\n', '  {\n', '    require( value <= allowances_[from][msg.sender] );\n', '\n', '    allowances_[from][msg.sender] -= value;\n', '    _transfer( from, to, value );\n', '\n', '    return true;\n', '  }\n', '\n', '  function burn( uint256 value ) public returns (bool success)\n', '  {\n', '    require( balances_[msg.sender] >= value );\n', '    balances_[msg.sender] -= value;\n', '    totalSupply -= value;\n', '\n', '    Burn( msg.sender, value );\n', '    return true;\n', '  }\n', '\n', '  function burnFrom( address from, uint256 value ) public returns (bool success)\n', '  {\n', '    require( balances_[from] >= value );\n', '    require( value <= allowances_[from][msg.sender] );\n', '\n', '    balances_[from] -= value;\n', '    allowances_[from][msg.sender] -= value;\n', '    totalSupply -= value;\n', '\n', '    Burn( from, value );\n', '    return true;\n', '  }\n', '\n', '  function _transfer( address from,\n', '                      address to,\n', '                      uint value ) internal\n', '  {\n', '    require( to != 0x0 );\n', '    require( balances_[from] >= value );\n', '    require( balances_[to] + value > balances_[to] ); // catch overflow\n', '\n', '    balances_[from] -= value;\n', '    balances_[to] += value;\n', '\n', '    Transfer( from, to, value );\n', '  }\n', '}']
['// 0.4.20+commit.3155dd80.Emscripten.clang\n', 'pragma solidity ^0.4.20;\n', '\n', 'contract owned {\n', '  address public owner;\n', '\n', '  function owned() public { owner = msg.sender; }\n', '\n', '  modifier onlyOwner {\n', '    if (msg.sender != owner) { revert(); }\n', '    _;\n', '  }\n', '\n', '  function changeOwner( address newowner ) public onlyOwner {\n', '    owner = newowner;\n', '  }\n', '}\n', '\n', "// Kuberan Govender's ERC20 coin\n", 'contract Kuberand is owned\n', '{\n', '  string  public name;\n', '  string  public symbol;\n', '  uint8   public decimals;\n', '  uint256 public totalSupply;\n', '\n', '  mapping( address => uint256 ) balances_;\n', '  mapping( address => mapping(address => uint256) ) allowances_;\n', '\n', '  event Approval( address indexed owner,\n', '                  address indexed spender,\n', '                  uint value );\n', '\n', '  event Transfer( address indexed from,\n', '                  address indexed to,\n', '                  uint256 value );\n', '\n', '  event Burn( address indexed from, uint256 value );\n', '\n', '  function Kuberand() public\n', '  {\n', '    decimals = uint8(18);\n', '\n', '    balances_[msg.sender] = uint256( 1e9 * 10 ** uint256(decimals) );\n', '    totalSupply = balances_[msg.sender];\n', '    name = "Kuberand";\n', '    symbol = "KUBR";\n', '\n', '    Transfer( address(0), msg.sender, totalSupply );\n', '  }\n', '\n', '  function() public payable { revert(); } // does not accept money\n', '\n', '  function balanceOf( address owner ) public constant returns (uint) {\n', '    return balances_[owner];\n', '  }\n', '\n', '  function approve( address spender, uint256 value ) public\n', '  returns (bool success)\n', '  {\n', '    allowances_[msg.sender][spender] = value;\n', '    Approval( msg.sender, spender, value );\n', '    return true;\n', '  }\n', ' \n', '  function allowance( address owner, address spender ) public constant\n', '  returns (uint256 remaining)\n', '  {\n', '    return allowances_[owner][spender];\n', '  }\n', '\n', '  function transfer(address to, uint256 value) public returns (bool)\n', '  {\n', '    _transfer( msg.sender, to, value );\n', '    return true;\n', '  }\n', '\n', '  function transferFrom( address from, address to, uint256 value ) public\n', '  returns (bool success)\n', '  {\n', '    require( value <= allowances_[from][msg.sender] );\n', '\n', '    allowances_[from][msg.sender] -= value;\n', '    _transfer( from, to, value );\n', '\n', '    return true;\n', '  }\n', '\n', '  function burn( uint256 value ) public returns (bool success)\n', '  {\n', '    require( balances_[msg.sender] >= value );\n', '    balances_[msg.sender] -= value;\n', '    totalSupply -= value;\n', '\n', '    Burn( msg.sender, value );\n', '    return true;\n', '  }\n', '\n', '  function burnFrom( address from, uint256 value ) public returns (bool success)\n', '  {\n', '    require( balances_[from] >= value );\n', '    require( value <= allowances_[from][msg.sender] );\n', '\n', '    balances_[from] -= value;\n', '    allowances_[from][msg.sender] -= value;\n', '    totalSupply -= value;\n', '\n', '    Burn( from, value );\n', '    return true;\n', '  }\n', '\n', '  function _transfer( address from,\n', '                      address to,\n', '                      uint value ) internal\n', '  {\n', '    require( to != 0x0 );\n', '    require( balances_[from] >= value );\n', '    require( balances_[to] + value > balances_[to] ); // catch overflow\n', '\n', '    balances_[from] -= value;\n', '    balances_[to] += value;\n', '\n', '    Transfer( from, to, value );\n', '  }\n', '}']
