['pragma solidity ^0.4.23;\n', '\n', '/*\n', 'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0xc,..,lxKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOo:&#39;........&#39;:dOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMMMMMMMMMMMN0xl,....&#39;;:,........;lxKNMMMMMMMMMMMMMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMMMMMMMWXOo:&#39;....,:lxOk:...........&#39;:dOXWMMMMMMMMMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMMMMNKxl;.....;cokOOOOd;...............;lkKWMMMMMMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMWXOd:&#39;....&#39;:lxkOOOkdc;&#39;...................&#39;:dONWMMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMWKkl;.....,coxOOOOxo:,...........................;lkKWMMMMMMMMMMMMM\n', 'MMMMMMMMMWNOdc&#39;....&#39;:ldkOOOkdl;&#39;.................................,cd0NWMMMMMMMMM\n', 'MMMMMMWKkl;.....,coxOOOOxoc,.........................................;okXWMMMMMM\n', 'MMMMXxc,....&#39;;ldkOOOkdl;&#39;...............................................,ckNMMMM\n', 'MMMM0;...&#39;coxOOOOxoc,.....................................................;0MMMM\n', 'MMMM0;..&#39;oOOOkdl:&#39;................................,;,,.............&#39;:l:...;0MMMM\n', 'MMMM0;..&#39;oOOOl&#39;..................................,dOOd,...........:xOOo...;0MMMM\n', 'MMMM0;..&#39;oOOOc...&#39;:ccccccccccccc:;,...........&#39;;:okOOkl:;&#39;........lOOOo...;0MMMM\n', 'MMMM0;..&#39;oOOOc...;k0OOOOOOOOOOOOOOko;......&#39;:oxOOOOOOOOOOxo:&#39;.....lOOOo&#39;..;0MMMM\n', 'MMMM0;..&#39;oOOOc...&#39;:lxOOkocccccccoxOOk:....,dOOOkdolclloxkOOOd,....lOOOo...;0MMMM\n', 'MMMM0;..&#39;oOOOc......lOOk;........:xOOd&#39;...lOOOd;........;okxl,....lOOOo...;0MMMM\n', 'MMMM0;..&#39;oOOOc......lOOk;........:xOOo&#39;...lOOOd;&#39;.........,.......lOOOo...;0MMMM\n', 'MMMM0;..&#39;oOOOc......lOOOocccccclokOOd;....,dO0Okxdolc:;,&#39;.........lOOOo...;0MMMM\n', 'MMMM0;..&#39;oOOOc......lOOOOOOOOOOOOOOx:......&#39;:oxkOOOOOOOkxdl;&#39;.....lOOOo...;0MMMM\n', 'MMMM0;..&#39;oOOOc......lOOOdccccccldkOOxc.........,;:clodxkOOOOd;....lOOOo...;0MMMM\n', 'MMMM0;..&#39;oOOOc......lOOk;........,dOOk:................,:dOOOo&#39;...lOOOo...;0MMMM\n', 'MMMM0;..&#39;oOOOc......lOOk:.........cOOOl&#39;.,coxl&#39;..........ckOOx,...lOOOo...;0MMMM\n', 'MMMM0;..&#39;oOOOc....&#39;,oOOkc&#39;&#39;&#39;&#39;&#39;&#39;,;lxOOkc..;xOOOxoc:;,,;:cokOOkl....lOOOo...;0MMMM\n', 'MMMM0;..&#39;oOOOc...;dkOOOOkkkkxkkkOOOOkc&#39;...,lxOOOOOOkOOOOOOkd:.....lOOOo...;0MMMM\n', 'MMMM0;..&#39;oOOOc...;dxxxxxxxxxxxxxxdoc,.......&#39;;codxOOOOxdlc;.......lOOOo...;0MMMM\n', 'MMMM0;..&#39;oOOkc.....&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;.................;xO0x;...........lOOOo...;0MMMM\n', 'MMMM0;..&#39;lxl:&#39;...................................&#39;:cc:.........&#39;;lxOOOo...;0MMMM\n', 'MMMM0;...&#39;&#39;.................................................,:oxOOOOko;...;0MMMM\n', 'MMMMKl&#39;.................................................&#39;;ldkOOOkxl:&#39;....&#39;oXMMMM\n', 'MMMMMNKxl,...........................................,:oxOOOOkoc;&#39;....;lxKWMMMMM\n', 'MMMMMMMMWXOo:&#39;...................................&#39;;cdkOOOkxl:,....&#39;:dOXWMMMMMMMM\n', 'MMMMMMMMMMMMN0xc,.............................,:lxkOOOkdc;&#39;....,lxKNMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMWXko:&#39;.....................&#39;;cdkOOOkxo:,....&#39;:oOXWMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMMMN0xc,...............,:lxkOOOkdc;&#39;....,cx0NMMMMMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMMMMMMWXko;&#39;...........:xkOOxo:,....&#39;:oOXWMMMMMMMMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMMMMMMMMMWN0xc,........;ool;&#39;....,cx0NMMMMMMMMMMMMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKko;............;okXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0dc,....,cd0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOl;;l0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n', '*/\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title MultiOwnable\n', ' * @dev The MultiOwnable contract has owners addresses and provides basic authorization control\n', ' * functions, this simplifies the implementation of "users permissions".\n', ' */\n', 'contract MultiOwnable {\n', '  address public manager; // address used to set owners\n', '  address[] public owners;\n', '  mapping(address => bool) public ownerByAddress;\n', '\n', '  event SetOwners(address[] owners);\n', '\n', '  modifier onlyOwner() {\n', '    require(ownerByAddress[msg.sender] == true);\n', '    _;\n', '  }\n', '\n', '  /**\n', '    * @dev MultiOwnable constructor sets the manager\n', '    */\n', '  constructor() public {\n', '    manager = msg.sender;\n', '  }\n', '\n', '  /**\n', '    * @dev Function to set owners addresses\n', '    */\n', '  function setOwners(address[] _owners) public {\n', '    require(msg.sender == manager);\n', '    _setOwners(_owners);\n', '  }\n', '\n', '  function _setOwners(address[] _owners) internal {\n', '    for(uint256 i = 0; i < owners.length; i++) {\n', '      ownerByAddress[owners[i]] = false;\n', '    }\n', '\n', '    for(uint256 j = 0; j < _owners.length; j++) {\n', '      ownerByAddress[_owners[j]] = true;\n', '    }\n', '    owners = _owners;\n', '    emit SetOwners(_owners);\n', '  }\n', '\n', '  function getOwners() public view returns (address[]) {\n', '    return owners;\n', '  }\n', '}\n', '\n', '/* solium-disable security/no-low-level-calls */\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title ERC827 interface, an extension of ERC20 token standard\n', ' *\n', ' * @dev Interface of a ERC827 token, following the ERC20 standard with extra\n', ' * @dev methods to transfer value and data and execute calls in transfers and\n', ' * @dev approvals.\n', ' */\n', 'contract ERC827 is ERC20 {\n', '  function approveAndCall(\n', '    address _spender,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool);\n', '\n', '  function transferAndCall(\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool);\n', '\n', '  function transferFromAndCall(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC827, an extension of ERC20 token standard\n', ' *\n', ' * @dev Implementation the ERC827, following the ERC20 standard with extra\n', ' * @dev methods to transfer value and data and execute calls in transfers and\n', ' * @dev approvals.\n', ' *\n', ' * @dev Uses OpenZeppelin StandardToken.\n', ' */\n', 'contract ERC827Token is ERC827, StandardToken {\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. It allows to\n', '   * @dev approve the transfer of value and execute a call with the sent data.\n', '   *\n', '   * @dev Beware that changing an allowance with this method brings the risk that\n', '   * @dev someone may use both the old and the new allowance by unfortunate\n', '   * @dev transaction ordering. One possible solution to mitigate this race condition\n', '   * @dev is to first reduce the spender&#39;s allowance to 0 and set the desired value\n', '   * @dev afterwards:\n', '   * @dev https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   * @param _spender The address that will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '  function approveAndCall(\n', '    address _spender,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool)\n', '  {\n', '    require(_spender != address(this));\n', '\n', '    super.approve(_spender, _value);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_spender.call.value(msg.value)(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. Transfer tokens to a specified\n', '   * @dev address and execute a call with the sent data on the same transaction\n', '   *\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '  function transferAndCall(\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool)\n', '  {\n', '    require(_to != address(this));\n', '\n', '    super.transfer(_to, _value);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_to.call.value(msg.value)(_data));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. Transfer tokens from one address to\n', '   * @dev another and make a contract call on the same transaction\n', '   *\n', '   * @param _from The address which you want to send tokens from\n', '   * @param _to The address which you want to transfer to\n', '   * @param _value The amout of tokens to be transferred\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '  function transferFromAndCall(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public payable returns (bool)\n', '  {\n', '    require(_to != address(this));\n', '\n', '    super.transferFrom(_from, _to, _value);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_to.call.value(msg.value)(_data));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Increase the amount of tokens that\n', '   * @dev an owner allowed to a spender and execute a call with the sent data.\n', '   *\n', '   * @dev approve should be called when allowed[_spender] == 0. To increment\n', '   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * @dev the first transaction is mined)\n', '   * @dev From MonolithDAO Token.sol\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '  function increaseApprovalAndCall(\n', '    address _spender,\n', '    uint _addedValue,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool)\n', '  {\n', '    require(_spender != address(this));\n', '\n', '    super.increaseApproval(_spender, _addedValue);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_spender.call.value(msg.value)(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\n', '   * @dev an owner allowed to a spender and execute a call with the sent data.\n', '   *\n', '   * @dev approve should be called when allowed[_spender] == 0. To decrement\n', '   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * @dev the first transaction is mined)\n', '   * @dev From MonolithDAO Token.sol\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '  function decreaseApprovalAndCall(\n', '    address _spender,\n', '    uint _subtractedValue,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool)\n', '  {\n', '    require(_spender != address(this));\n', '\n', '    super.decreaseApproval(_spender, _subtractedValue);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_spender.call.value(msg.value)(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract BitScreenerToken is ERC827Token, MultiOwnable {\n', '  string public name = &#39;BitScreenerToken&#39;;\n', '  string public symbol = &#39;BITX&#39;;\n', '  uint8 public decimals = 18;\n', '  uint256 public totalSupply;\n', '  address public owner;\n', '\n', '  bool public allowTransfers = false;\n', '  bool public issuanceFinished = false;\n', '\n', '  event AllowTransfersChanged(bool _newState);\n', '  event Issue(address indexed _to, uint256 _value);\n', '  event Burn(address indexed _from, uint256 _value);\n', '  event IssuanceFinished();\n', '\n', '  modifier transfersAllowed() {\n', '    require(allowTransfers);\n', '    _;\n', '  }\n', '\n', '  modifier canIssue() {\n', '    require(!issuanceFinished);\n', '    _;\n', '  }\n', '\n', '  constructor(address[] _owners) public {\n', '    _setOwners(_owners);\n', '  }\n', '\n', '  /**\n', '  * @dev Enable/disable token transfers. Can be called only by owners\n', '  * @param _allowTransfers True - allow False - disable\n', '  */\n', '  function setAllowTransfers(bool _allowTransfers) external onlyOwner {\n', '    allowTransfers = _allowTransfers;\n', '    emit AllowTransfersChanged(_allowTransfers);\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function transferAndCall(address _to, uint256 _value, bytes _data) public payable transfersAllowed returns (bool) {\n', '    return super.transferAndCall(_to, _value, _data);\n', '  }\n', '\n', '  function transferFromAndCall(address _from, address _to, uint256 _value, bytes _data) public payable transfersAllowed returns (bool) {\n', '    return super.transferFromAndCall(_from, _to, _value, _data);\n', '  }\n', '\n', '  /**\n', '  * @dev Issue tokens to specified wallet\n', '  * @param _to Wallet address\n', '  * @param _value Amount of tokens\n', '  */\n', '  function issue(address _to, uint256 _value) external onlyOwner canIssue returns (bool) {\n', '    totalSupply = totalSupply.add(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Issue(_to, _value);\n', '    emit Transfer(address(0), _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Finish token issuance\n', '  * @return True if success\n', '  */\n', '  function finishIssuance() public onlyOwner returns (bool) {\n', '    issuanceFinished = true;\n', '    emit IssuanceFinished();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Burn tokens\n', '  * @param _value Amount of tokens to burn\n', '  */\n', '  function burn(uint256 _value) external {\n', '    require(balances[msg.sender] >= _value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    emit Transfer(msg.sender, address(0), _value);\n', '    emit Burn(msg.sender, _value);\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/*\n', 'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN0xc,..,lxKNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n', "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXOo:'........':dOXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n", "MMMMMMMMMMMMMMMMMMMMMMMMMMMN0xl,....';:,........;lxKNMMMMMMMMMMMMMMMMMMMMMMMMMMM\n", "MMMMMMMMMMMMMMMMMMMMMMMWXOo:'....,:lxOk:...........':dOXWMMMMMMMMMMMMMMMMMMMMMMM\n", 'MMMMMMMMMMMMMMMMMMMMNKxl;.....;cokOOOOd;...............;lkKWMMMMMMMMMMMMMMMMMMMM\n', "MMMMMMMMMMMMMMMMWXOd:'....':lxkOOOkdc;'...................':dONWMMMMMMMMMMMMMMMM\n", 'MMMMMMMMMMMMMWKkl;.....,coxOOOOxo:,...........................;lkKWMMMMMMMMMMMMM\n', "MMMMMMMMMWNOdc'....':ldkOOOkdl;'.................................,cd0NWMMMMMMMMM\n", 'MMMMMMWKkl;.....,coxOOOOxoc,.........................................;okXWMMMMMM\n', "MMMMXxc,....';ldkOOOkdl;'...............................................,ckNMMMM\n", "MMMM0;...'coxOOOOxoc,.....................................................;0MMMM\n", "MMMM0;..'oOOOkdl:'................................,;,,.............':l:...;0MMMM\n", "MMMM0;..'oOOOl'..................................,dOOd,...........:xOOo...;0MMMM\n", "MMMM0;..'oOOOc...':ccccccccccccc:;,...........';:okOOkl:;'........lOOOo...;0MMMM\n", "MMMM0;..'oOOOc...;k0OOOOOOOOOOOOOOko;......':oxOOOOOOOOOOxo:'.....lOOOo'..;0MMMM\n", "MMMM0;..'oOOOc...':lxOOkocccccccoxOOk:....,dOOOkdolclloxkOOOd,....lOOOo...;0MMMM\n", "MMMM0;..'oOOOc......lOOk;........:xOOd'...lOOOd;........;okxl,....lOOOo...;0MMMM\n", "MMMM0;..'oOOOc......lOOk;........:xOOo'...lOOOd;'.........,.......lOOOo...;0MMMM\n", "MMMM0;..'oOOOc......lOOOocccccclokOOd;....,dO0Okxdolc:;,'.........lOOOo...;0MMMM\n", "MMMM0;..'oOOOc......lOOOOOOOOOOOOOOx:......':oxkOOOOOOOkxdl;'.....lOOOo...;0MMMM\n", "MMMM0;..'oOOOc......lOOOdccccccldkOOxc.........,;:clodxkOOOOd;....lOOOo...;0MMMM\n", "MMMM0;..'oOOOc......lOOk;........,dOOk:................,:dOOOo'...lOOOo...;0MMMM\n", "MMMM0;..'oOOOc......lOOk:.........cOOOl'.,coxl'..........ckOOx,...lOOOo...;0MMMM\n", "MMMM0;..'oOOOc....',oOOkc'''''',;lxOOkc..;xOOOxoc:;,,;:cokOOkl....lOOOo...;0MMMM\n", "MMMM0;..'oOOOc...;dkOOOOkkkkxkkkOOOOkc'...,lxOOOOOOkOOOOOOkd:.....lOOOo...;0MMMM\n", "MMMM0;..'oOOOc...;dxxxxxxxxxxxxxxdoc,.......';codxOOOOxdlc;.......lOOOo...;0MMMM\n", "MMMM0;..'oOOkc.....'''''''''''''.................;xO0x;...........lOOOo...;0MMMM\n", "MMMM0;..'lxl:'...................................':cc:.........';lxOOOo...;0MMMM\n", "MMMM0;...''.................................................,:oxOOOOko;...;0MMMM\n", "MMMMKl'.................................................';ldkOOOkxl:'....'oXMMMM\n", "MMMMMNKxl,...........................................,:oxOOOOkoc;'....;lxKWMMMMM\n", "MMMMMMMMWXOo:'...................................';cdkOOOkxl:,....':dOXWMMMMMMMM\n", "MMMMMMMMMMMMN0xc,.............................,:lxkOOOkdc;'....,lxKNMMMMMMMMMMMM\n", "MMMMMMMMMMMMMMMWXko:'.....................';cdkOOOkxo:,....':oOXWMMMMMMMMMMMMMMM\n", "MMMMMMMMMMMMMMMMMMMN0xc,...............,:lxkOOOkdc;'....,cx0NMMMMMMMMMMMMMMMMMMM\n", "MMMMMMMMMMMMMMMMMMMMMMWXko;'...........:xkOOxo:,....':oOXWMMMMMMMMMMMMMMMMMMMMMM\n", "MMMMMMMMMMMMMMMMMMMMMMMMMWN0xc,........;ool;'....,cx0NMMMMMMMMMMMMMMMMMMMMMMMMMM\n", 'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKko;............;okXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0dc,....,cd0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n', 'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNOl;;l0NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n', '*/\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title MultiOwnable\n', ' * @dev The MultiOwnable contract has owners addresses and provides basic authorization control\n', ' * functions, this simplifies the implementation of "users permissions".\n', ' */\n', 'contract MultiOwnable {\n', '  address public manager; // address used to set owners\n', '  address[] public owners;\n', '  mapping(address => bool) public ownerByAddress;\n', '\n', '  event SetOwners(address[] owners);\n', '\n', '  modifier onlyOwner() {\n', '    require(ownerByAddress[msg.sender] == true);\n', '    _;\n', '  }\n', '\n', '  /**\n', '    * @dev MultiOwnable constructor sets the manager\n', '    */\n', '  constructor() public {\n', '    manager = msg.sender;\n', '  }\n', '\n', '  /**\n', '    * @dev Function to set owners addresses\n', '    */\n', '  function setOwners(address[] _owners) public {\n', '    require(msg.sender == manager);\n', '    _setOwners(_owners);\n', '  }\n', '\n', '  function _setOwners(address[] _owners) internal {\n', '    for(uint256 i = 0; i < owners.length; i++) {\n', '      ownerByAddress[owners[i]] = false;\n', '    }\n', '\n', '    for(uint256 j = 0; j < _owners.length; j++) {\n', '      ownerByAddress[_owners[j]] = true;\n', '    }\n', '    owners = _owners;\n', '    emit SetOwners(_owners);\n', '  }\n', '\n', '  function getOwners() public view returns (address[]) {\n', '    return owners;\n', '  }\n', '}\n', '\n', '/* solium-disable security/no-low-level-calls */\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title ERC827 interface, an extension of ERC20 token standard\n', ' *\n', ' * @dev Interface of a ERC827 token, following the ERC20 standard with extra\n', ' * @dev methods to transfer value and data and execute calls in transfers and\n', ' * @dev approvals.\n', ' */\n', 'contract ERC827 is ERC20 {\n', '  function approveAndCall(\n', '    address _spender,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool);\n', '\n', '  function transferAndCall(\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool);\n', '\n', '  function transferFromAndCall(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC827, an extension of ERC20 token standard\n', ' *\n', ' * @dev Implementation the ERC827, following the ERC20 standard with extra\n', ' * @dev methods to transfer value and data and execute calls in transfers and\n', ' * @dev approvals.\n', ' *\n', ' * @dev Uses OpenZeppelin StandardToken.\n', ' */\n', 'contract ERC827Token is ERC827, StandardToken {\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. It allows to\n', '   * @dev approve the transfer of value and execute a call with the sent data.\n', '   *\n', '   * @dev Beware that changing an allowance with this method brings the risk that\n', '   * @dev someone may use both the old and the new allowance by unfortunate\n', '   * @dev transaction ordering. One possible solution to mitigate this race condition\n', "   * @dev is to first reduce the spender's allowance to 0 and set the desired value\n", '   * @dev afterwards:\n', '   * @dev https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   * @param _spender The address that will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '  function approveAndCall(\n', '    address _spender,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool)\n', '  {\n', '    require(_spender != address(this));\n', '\n', '    super.approve(_spender, _value);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_spender.call.value(msg.value)(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. Transfer tokens to a specified\n', '   * @dev address and execute a call with the sent data on the same transaction\n', '   *\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '  function transferAndCall(\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool)\n', '  {\n', '    require(_to != address(this));\n', '\n', '    super.transfer(_to, _value);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_to.call.value(msg.value)(_data));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. Transfer tokens from one address to\n', '   * @dev another and make a contract call on the same transaction\n', '   *\n', '   * @param _from The address which you want to send tokens from\n', '   * @param _to The address which you want to transfer to\n', '   * @param _value The amout of tokens to be transferred\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '  function transferFromAndCall(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public payable returns (bool)\n', '  {\n', '    require(_to != address(this));\n', '\n', '    super.transferFrom(_from, _to, _value);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_to.call.value(msg.value)(_data));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Increase the amount of tokens that\n', '   * @dev an owner allowed to a spender and execute a call with the sent data.\n', '   *\n', '   * @dev approve should be called when allowed[_spender] == 0. To increment\n', '   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * @dev the first transaction is mined)\n', '   * @dev From MonolithDAO Token.sol\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '  function increaseApprovalAndCall(\n', '    address _spender,\n', '    uint _addedValue,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool)\n', '  {\n', '    require(_spender != address(this));\n', '\n', '    super.increaseApproval(_spender, _addedValue);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_spender.call.value(msg.value)(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\n', '   * @dev an owner allowed to a spender and execute a call with the sent data.\n', '   *\n', '   * @dev approve should be called when allowed[_spender] == 0. To decrement\n', '   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * @dev the first transaction is mined)\n', '   * @dev From MonolithDAO Token.sol\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '  function decreaseApprovalAndCall(\n', '    address _spender,\n', '    uint _subtractedValue,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool)\n', '  {\n', '    require(_spender != address(this));\n', '\n', '    super.decreaseApproval(_spender, _subtractedValue);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_spender.call.value(msg.value)(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract BitScreenerToken is ERC827Token, MultiOwnable {\n', "  string public name = 'BitScreenerToken';\n", "  string public symbol = 'BITX';\n", '  uint8 public decimals = 18;\n', '  uint256 public totalSupply;\n', '  address public owner;\n', '\n', '  bool public allowTransfers = false;\n', '  bool public issuanceFinished = false;\n', '\n', '  event AllowTransfersChanged(bool _newState);\n', '  event Issue(address indexed _to, uint256 _value);\n', '  event Burn(address indexed _from, uint256 _value);\n', '  event IssuanceFinished();\n', '\n', '  modifier transfersAllowed() {\n', '    require(allowTransfers);\n', '    _;\n', '  }\n', '\n', '  modifier canIssue() {\n', '    require(!issuanceFinished);\n', '    _;\n', '  }\n', '\n', '  constructor(address[] _owners) public {\n', '    _setOwners(_owners);\n', '  }\n', '\n', '  /**\n', '  * @dev Enable/disable token transfers. Can be called only by owners\n', '  * @param _allowTransfers True - allow False - disable\n', '  */\n', '  function setAllowTransfers(bool _allowTransfers) external onlyOwner {\n', '    allowTransfers = _allowTransfers;\n', '    emit AllowTransfersChanged(_allowTransfers);\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function transferAndCall(address _to, uint256 _value, bytes _data) public payable transfersAllowed returns (bool) {\n', '    return super.transferAndCall(_to, _value, _data);\n', '  }\n', '\n', '  function transferFromAndCall(address _from, address _to, uint256 _value, bytes _data) public payable transfersAllowed returns (bool) {\n', '    return super.transferFromAndCall(_from, _to, _value, _data);\n', '  }\n', '\n', '  /**\n', '  * @dev Issue tokens to specified wallet\n', '  * @param _to Wallet address\n', '  * @param _value Amount of tokens\n', '  */\n', '  function issue(address _to, uint256 _value) external onlyOwner canIssue returns (bool) {\n', '    totalSupply = totalSupply.add(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Issue(_to, _value);\n', '    emit Transfer(address(0), _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Finish token issuance\n', '  * @return True if success\n', '  */\n', '  function finishIssuance() public onlyOwner returns (bool) {\n', '    issuanceFinished = true;\n', '    emit IssuanceFinished();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Burn tokens\n', '  * @param _value Amount of tokens to burn\n', '  */\n', '  function burn(uint256 _value) external {\n', '    require(balances[msg.sender] >= _value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    emit Transfer(msg.sender, address(0), _value);\n', '    emit Burn(msg.sender, _value);\n', '  }\n', '}']
