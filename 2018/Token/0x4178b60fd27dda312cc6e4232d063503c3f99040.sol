['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', ' \n', ' \n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', ' function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Interface {\n', '     function totalSupply() public constant returns (uint);\n', '     function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '     function transfer(address to, uint tokens) public returns (bool success);\n', '     function approve(address spender, uint tokens) public returns (bool success);\n', '     function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '     event Transfer(address indexed from, address indexed to, uint tokens);\n', '     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract HashcoCoin is ERC20Interface,Ownable {\n', '\n', '   using SafeMath for uint256;\n', '   \n', '   string public name;\n', '   string public symbol;\n', '   uint256 public decimals;\n', '\n', '   uint256 public _totalSupply;\n', '   mapping(address => uint256) tokenBalances;\n', '   address ownerWallet;\n', '   // Owner of account approves the transfer of an amount to another account\n', '   mapping (address => mapping (address => uint256)) allowed;\n', '   \n', '   /**\n', '   * @dev Contructor that gives msg.sender all of existing tokens.\n', '   */\n', '    function HashcoCoin(address wallet) public {\n', '        owner = msg.sender;\n', '        ownerWallet = wallet;\n', '        name  = "HashcoCoin";\n', '        symbol = "HCC";\n', '        decimals = 18;\n', '        _totalSupply = 60000000 * 10 ** uint(decimals);\n', '        tokenBalances[wallet] = _totalSupply;   //Since we divided the token into 10^18 parts\n', '    }\n', '    \n', '     // Get the token balance for account `tokenOwner`\n', '     function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '         return tokenBalances[tokenOwner];\n', '     }\n', '  \n', "     // Transfer the balance from owner's account to another account\n", '     function transfer(address to, uint tokens) public returns (bool success) {\n', '         require(to != address(0));\n', '         require(tokens <= tokenBalances[msg.sender]);\n', '         tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(tokens);\n', '         tokenBalances[to] = tokenBalances[to].add(tokens);\n', '         Transfer(msg.sender, to, tokens);\n', '         return true;\n', '     }\n', '  \n', '     /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= tokenBalances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    tokenBalances[_from] = tokenBalances[_from].sub(_value);\n', '    tokenBalances[_to] = tokenBalances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '     /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '     // ------------------------------------------------------------------------\n', '     // Total supply\n', '     // ------------------------------------------------------------------------\n', '     function totalSupply() public constant returns (uint) {\n', '         return _totalSupply  - tokenBalances[address(0)];\n', '     }\n', '     \n', '    \n', '     \n', '     // ------------------------------------------------------------------------\n', '     // Returns the amount of tokens approved by the owner that can be\n', "     // transferred to the spender's account\n", '     // ------------------------------------------------------------------------\n', '     function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '         return allowed[tokenOwner][spender];\n', '     }\n', '     \n', '     /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '     \n', '     // ------------------------------------------------------------------------\n', "     // Don't accept ETH\n", '     // ------------------------------------------------------------------------\n', '     function () public payable {\n', '         revert();\n', '     }\n', ' \n', ' \n', '     // ------------------------------------------------------------------------\n', '     // Owner can transfer out any accidentally sent ERC20 tokens\n', '     // ------------------------------------------------------------------------\n', '     function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '         return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '     }\n', '     \n', '     //only to be used by the ICO\n', '     \n', '     function mint(address wallet, address buyer, uint256 tokenAmount) public onlyOwner {\n', '      require(tokenBalances[wallet] >= tokenAmount);               // checks if it has enough to sell\n', "      tokenBalances[buyer] = tokenBalances[buyer].add(tokenAmount);                  // adds the amount to buyer's balance\n", "      tokenBalances[wallet] = tokenBalances[wallet].sub(tokenAmount);                        // subtracts amount from seller's balance\n", '      Transfer(wallet, buyer, tokenAmount); \n', '      _totalSupply = _totalSupply.sub(tokenAmount);\n', '    }\n', '}\n', 'contract HashcoCoinCrowdsale {\n', '  using SafeMath for uint256;\n', ' \n', '  // The token being sold\n', '  HashcoCoin public token;\n', '\n', '  // address where funds are collected\n', '  // address where tokens are deposited and from where we send tokens to buyers\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public ratePerWeiFirstPhase = 5263;\n', '  uint256 public ratePerWeiSecondPhase = 3333;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  uint256 TOKENS_SOLD;\n', '  uint256 maxTokensToSale = 60000000 * 10 ** 18;\n', '  \n', '  \n', '  bool isCrowdsalePaused = false;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function HashcoCoinCrowdsale(address _wallet) public \n', '  {\n', '    require(_wallet != 0x0);\n', '\n', '    wallet = _wallet;\n', '    token = createTokenContract(wallet);\n', '  }\n', '  \n', '   // creates the token to be sold.\n', '  function createTokenContract(address wall) internal returns (HashcoCoin) {\n', '    return new HashcoCoin(wall);\n', '  }\n', '  // fallback function can be used to buy tokens\n', '  function () public payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '   \n', '  // low level token purchase function\n', '  // Minimum purchase can be of 1 ETH\n', '  \n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(isCrowdsalePaused == false);\n', '    require(msg.value>0);\n', '    require(TOKENS_SOLD<maxTokensToSale);\n', '    uint256 weiAmount = msg.value;\n', '    uint256 tokens;\n', '    uint256 bonus;\n', '\n', '    // calculate token amount to be transferred\n', '    if (TOKENS_SOLD < 15000000 * 10 ** 18)\n', '    {\n', '        tokens = weiAmount.mul(ratePerWeiFirstPhase);\n', '        require(TOKENS_SOLD+tokens<=maxTokensToSale);\n', '    }\n', '    else \n', '    {\n', '        tokens = weiAmount.mul(ratePerWeiSecondPhase);\n', '        require(TOKENS_SOLD+tokens<=maxTokensToSale);\n', '    }\n', '    bonus = tokens.mul(10);\n', '    bonus = bonus.div(100);\n', '    tokens = tokens.add(bonus);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    TOKENS_SOLD = TOKENS_SOLD.add(tokens);\n', '    require (TOKENS_SOLD<=maxTokensToSale);\n', '    token.mint(wallet, beneficiary, tokens); \n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '    \n', '    /**\n', '     * function to change the price rate for phase 1\n', '     * can only be called from owner wallet\n', '     **/\n', '     \n', '    function setPriceRatePhase1(uint256 newPrice) public returns (bool) {\n', '        require (msg.sender == wallet);\n', '        ratePerWeiFirstPhase = newPrice;\n', '    }\n', '    \n', '    /**\n', '     * function to change the price rate for phase 1\n', '     * can only be called from owner wallet\n', '     **/\n', '     \n', '    function setPriceRatePhase2(uint256 newPrice) public returns (bool) {\n', '        require (msg.sender == wallet);\n', '        ratePerWeiSecondPhase = newPrice;\n', '    }\n', '    \n', '     /**\n', '     * function to pause the crowdsale \n', '     * can only be called from owner wallet\n', '     **/\n', '     \n', '    function pauseCrowdsale() public returns(bool) {\n', '        require(msg.sender==wallet);\n', '        isCrowdsalePaused = true;\n', '    }\n', '\n', '    /**\n', '     * function to resume the crowdsale if it is paused\n', '     * can only be called from owner wallet\n', '     * if the crowdsale has been stopped, this function would not resume it\n', '     **/ \n', '    function resumeCrowdsale() public returns (bool) {\n', '        require(msg.sender==wallet);\n', '        isCrowdsalePaused = false;\n', '    }\n', '    \n', '     // ------------------------------------------------------------------------\n', '     // Remaining tokens for sale\n', '     // ------------------------------------------------------------------------\n', '     function remainingTokensForSale() public constant returns (uint) {\n', '         return maxTokensToSale - TOKENS_SOLD;\n', '     }\n', '     \n', '     function showMyTokenBalance() public constant returns (uint) {\n', '         return token.balanceOf(msg.sender);\n', '     }\n', '}']