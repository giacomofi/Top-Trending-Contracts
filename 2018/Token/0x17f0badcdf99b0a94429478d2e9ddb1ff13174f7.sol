['pragma solidity ^0.4.18;\n', '\n', '\n', '/** * @dev Math operations with safety checks that throw on error */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**  * @dev Integer division of two numbers, truncating the quotient.  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256);\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '  \n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;                /*^ 23 ^*/\n', '  }                            \n', '}\n', 'contract knf is StandardToken {\n', '  string public name; // solium-disable-line uppercase\n', '  string public symbol; // solium-disable-line uppercase\n', '  uint8 public decimals; // solium-disable-line uppercase\n', '  uint256 DropedThisWeek;\n', '  uint256 lastWeek;\n', '  uint256 decimate;\n', '  uint256 weekly_limit;\n', '  uint256 air_drop;\n', '  mapping(address => uint256) airdroped;\n', '  address control;\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  function availableSupply() public view returns (uint256) {\n', '    return balances[owner];\n', '  }\n', '  \n', '  modifier onlyControl() {\n', '    require(msg.sender == control);\n', '    _;\n', '  }\n', '  \n', '  function changeName(string newName) onlyControl public {\n', '    name = newName;\n', '  }\n', '  \n', '  function RecordTransfer(address _from, address _to, uint256 _value) internal {\n', '    Transfer(_from, _to, _value);\n', '\tif(airdroped[_from] == 0) airdroped[_from] = 1;\n', '\tif(airdroped[_to] == 0) airdroped[_to] = 1;\n', '\tif (thisweek() > lastWeek) {\n', '\t  lastWeek = thisweek();\n', '\t  DropedThisWeek = 0;\n', '\t}\n', '  }\n', '  \n', '  /*** */\n', '  function Award(address _to, uint256 _v) public onlyControl {\n', '    require(_to != address(0));\n', '\trequire(_v <= balances[owner]);\n', '\tbalances[_to] += _v;\n', '\tbalances[owner] -= _v;\n', '\tRecordTransfer(owner, _to, _v);\n', '  }\n', '  \n', '  /*** @param newOwner  The address to transfer ownership to\n', '    owner tokens go with owner, airdrops always from owner pool */\n', '  function transferOwnership(address newOwner) public onlyControl {\n', '    require(newOwner != address(0));\n', '\tOwnershipTransferred(owner, newOwner);\n', '\towner = newOwner;\n', '  } /*** @param newControl  The address to transfer control to.   */\n', '  function transferControl(address newControl) public onlyControl {\n', '    require(newControl != address(0) && newControl != address(this));  \n', '\tcontrol =newControl;\n', ' } /*init contract itself as owner of all its tokens, all tokens set&#39;&#39;&#39;&#39;&#39;to air drop, and always comes form owner&#39;s bucket \n', '   .+------+     +------+     +------+     +------+     +------+.     =================== ===================\n', ' .&#39; |    .&#39;|    /|     /|     |      |     |\\     |\\    |`.    | `.   */function knf(uint256 _initialAmount,/*\n', '+---+--+&#39;  |   +-+----+ |     +------+     | +----+-+   |  `+--+---+  */string _tokenName, uint8 _decimalUnits,/*\n', '|   |  |   |   | |  K | |     |  N   |     | | F  | |   |   |  |   |  */string _tokenSymbol) public { control = msg.sender; /*\n', '|  ,+--+---+   | +----+-+     +------+     +-+----+ |   +---+--+   |  */owner = address(this);OwnershipTransferred(address(0), owner);/*\n', '|.&#39;    | .&#39;    |/     |/      |      |      \\|     \\|    `. |   `. |  */totalSupply_ = _initialAmount; balances[owner] = totalSupply_; /*\n', '+------+&#39;      +------+       +------+       +------+      `+------+  */RecordTransfer(0x0, owner, totalSupply_);\n', '    symbol = _tokenSymbol;   \n', '\tname = _tokenName;\n', '    decimals = _decimalUnits;                            \n', '\tdecimate = (10 ** uint256(decimals));\n', '\tweekly_limit = 100000 * decimate;\n', '\tair_drop = 1018 * decimate;\t\n', '  } /** rescue lost erc20 kin **/\n', '  function transfererc20(address tokenAddress, address _to, uint256 _value) external onlyControl returns (bool) {\n', '    require(_to != address(0));\n', '\treturn ERC20(tokenAddress).transfer(_to, _value);\n', '  } /** token no more **/\n', '  function destroy() onlyControl external {\n', '    require(owner != address(this)); selfdestruct(control);\n', '  }  \n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\trequire(_value <= allowed[_from][msg.sender]);\n', '\tif(balances[_from] == 0) { \n', '      uint256 qty = availableAirdrop(_from);\n', '\t  if(qty > 0) {  // qty is validated qty against balances in airdrop\n', '\t    balances[owner] -= qty;\n', '\t    balances[_to] += qty;\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\tRecordTransfer(owner, _from, _value);\n', '\t\tRecordTransfer(_from, _to, _value);\n', '\t\tDropedThisWeek += qty;\n', '\t\treturn true;\n', '\t  }\t\n', '\t  revert(); // no go\n', '\t}\n', '  \n', '    require(_value <= balances[_from]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    RecordTransfer(_from, _to, _value);\n', '\treturn true;\n', '  }  \n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\t// if no balance, see if eligible for airdrop instead\n', '    if(balances[msg.sender] == 0) { \n', '      uint256 qty = availableAirdrop(msg.sender);\n', '\t  if(qty > 0) {  // qty is validated qty against balances in airdrop\n', '\t    balances[owner] -= qty;\n', '\t    balances[msg.sender] += qty;\n', '\t\tRecordTransfer(owner, _to, _value);\n', '\t\tairdroped[msg.sender] = 1;\n', '\t\tDropedThisWeek += qty;\n', '\t\treturn true;\n', '\t  }\t\n', '\t  revert(); // no go\n', '\t}\n', '  \n', '    // existing balance\n', '    if(balances[msg.sender] < _value) revert();\n', '\tif(balances[_to] + _value < balances[_to]) revert();\n', '\t\n', '    balances[_to] += _value;\n', '\tbalances[msg.sender] -= _value;\n', '    RecordTransfer(msg.sender, _to, _value);\n', '\treturn true;\n', '  }  \n', '  function balanceOf(address who) public view returns (uint256 balance) {\n', '    balance = balances[who];\n', '\tif(balance == 0) \n', '\t  return availableAirdrop(who);\n', '\t\n', '    return balance;\n', '  }  \n', '  /*  * check the faucet  */  \n', '  function availableAirdrop(address who) internal constant returns (uint256) {\n', '    if(balances[owner] == 0) return 0;\n', '\tif(airdroped[who] > 0) return 0; // already seen this\n', '\t\n', '    if (thisweek() > lastWeek || DropedThisWeek < weekly_limit) {\n', '\t  if(balances[owner] > air_drop) return air_drop;\n', '\t  else return balances[owner];\n', '\t}\n', '\treturn 0;\n', '  } \n', '  function thisweek() internal view returns (uint256) {\n', '    return now / 1 weeks;\n', '  }  \n', '  function transferBalance(address upContract) external onlyControl {\n', '    require(upContract != address(0) && upContract.send(this.balance));\n', '  }\n', '  function () payable public { }   \n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '/** * @dev Math operations with safety checks that throw on error */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**  * @dev Integer division of two numbers, truncating the quotient.  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256);\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '  \n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;                /*^ 23 ^*/\n', '  }                            \n', '}\n', 'contract knf is StandardToken {\n', '  string public name; // solium-disable-line uppercase\n', '  string public symbol; // solium-disable-line uppercase\n', '  uint8 public decimals; // solium-disable-line uppercase\n', '  uint256 DropedThisWeek;\n', '  uint256 lastWeek;\n', '  uint256 decimate;\n', '  uint256 weekly_limit;\n', '  uint256 air_drop;\n', '  mapping(address => uint256) airdroped;\n', '  address control;\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  function availableSupply() public view returns (uint256) {\n', '    return balances[owner];\n', '  }\n', '  \n', '  modifier onlyControl() {\n', '    require(msg.sender == control);\n', '    _;\n', '  }\n', '  \n', '  function changeName(string newName) onlyControl public {\n', '    name = newName;\n', '  }\n', '  \n', '  function RecordTransfer(address _from, address _to, uint256 _value) internal {\n', '    Transfer(_from, _to, _value);\n', '\tif(airdroped[_from] == 0) airdroped[_from] = 1;\n', '\tif(airdroped[_to] == 0) airdroped[_to] = 1;\n', '\tif (thisweek() > lastWeek) {\n', '\t  lastWeek = thisweek();\n', '\t  DropedThisWeek = 0;\n', '\t}\n', '  }\n', '  \n', '  /*** */\n', '  function Award(address _to, uint256 _v) public onlyControl {\n', '    require(_to != address(0));\n', '\trequire(_v <= balances[owner]);\n', '\tbalances[_to] += _v;\n', '\tbalances[owner] -= _v;\n', '\tRecordTransfer(owner, _to, _v);\n', '  }\n', '  \n', '  /*** @param newOwner  The address to transfer ownership to\n', '    owner tokens go with owner, airdrops always from owner pool */\n', '  function transferOwnership(address newOwner) public onlyControl {\n', '    require(newOwner != address(0));\n', '\tOwnershipTransferred(owner, newOwner);\n', '\towner = newOwner;\n', '  } /*** @param newControl  The address to transfer control to.   */\n', '  function transferControl(address newControl) public onlyControl {\n', '    require(newControl != address(0) && newControl != address(this));  \n', '\tcontrol =newControl;\n', " } /*init contract itself as owner of all its tokens, all tokens set'''''to air drop, and always comes form owner's bucket \n", '   .+------+     +------+     +------+     +------+     +------+.     =================== ===================\n', " .' |    .'|    /|     /|     |      |     |\\     |\\    |`.    | `.   */function knf(uint256 _initialAmount,/*\n", "+---+--+'  |   +-+----+ |     +------+     | +----+-+   |  `+--+---+  */string _tokenName, uint8 _decimalUnits,/*\n", '|   |  |   |   | |  K | |     |  N   |     | | F  | |   |   |  |   |  */string _tokenSymbol) public { control = msg.sender; /*\n', '|  ,+--+---+   | +----+-+     +------+     +-+----+ |   +---+--+   |  */owner = address(this);OwnershipTransferred(address(0), owner);/*\n', "|.'    | .'    |/     |/      |      |      \\|     \\|    `. |   `. |  */totalSupply_ = _initialAmount; balances[owner] = totalSupply_; /*\n", "+------+'      +------+       +------+       +------+      `+------+  */RecordTransfer(0x0, owner, totalSupply_);\n", '    symbol = _tokenSymbol;   \n', '\tname = _tokenName;\n', '    decimals = _decimalUnits;                            \n', '\tdecimate = (10 ** uint256(decimals));\n', '\tweekly_limit = 100000 * decimate;\n', '\tair_drop = 1018 * decimate;\t\n', '  } /** rescue lost erc20 kin **/\n', '  function transfererc20(address tokenAddress, address _to, uint256 _value) external onlyControl returns (bool) {\n', '    require(_to != address(0));\n', '\treturn ERC20(tokenAddress).transfer(_to, _value);\n', '  } /** token no more **/\n', '  function destroy() onlyControl external {\n', '    require(owner != address(this)); selfdestruct(control);\n', '  }  \n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\trequire(_value <= allowed[_from][msg.sender]);\n', '\tif(balances[_from] == 0) { \n', '      uint256 qty = availableAirdrop(_from);\n', '\t  if(qty > 0) {  // qty is validated qty against balances in airdrop\n', '\t    balances[owner] -= qty;\n', '\t    balances[_to] += qty;\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\tRecordTransfer(owner, _from, _value);\n', '\t\tRecordTransfer(_from, _to, _value);\n', '\t\tDropedThisWeek += qty;\n', '\t\treturn true;\n', '\t  }\t\n', '\t  revert(); // no go\n', '\t}\n', '  \n', '    require(_value <= balances[_from]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    RecordTransfer(_from, _to, _value);\n', '\treturn true;\n', '  }  \n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\t// if no balance, see if eligible for airdrop instead\n', '    if(balances[msg.sender] == 0) { \n', '      uint256 qty = availableAirdrop(msg.sender);\n', '\t  if(qty > 0) {  // qty is validated qty against balances in airdrop\n', '\t    balances[owner] -= qty;\n', '\t    balances[msg.sender] += qty;\n', '\t\tRecordTransfer(owner, _to, _value);\n', '\t\tairdroped[msg.sender] = 1;\n', '\t\tDropedThisWeek += qty;\n', '\t\treturn true;\n', '\t  }\t\n', '\t  revert(); // no go\n', '\t}\n', '  \n', '    // existing balance\n', '    if(balances[msg.sender] < _value) revert();\n', '\tif(balances[_to] + _value < balances[_to]) revert();\n', '\t\n', '    balances[_to] += _value;\n', '\tbalances[msg.sender] -= _value;\n', '    RecordTransfer(msg.sender, _to, _value);\n', '\treturn true;\n', '  }  \n', '  function balanceOf(address who) public view returns (uint256 balance) {\n', '    balance = balances[who];\n', '\tif(balance == 0) \n', '\t  return availableAirdrop(who);\n', '\t\n', '    return balance;\n', '  }  \n', '  /*  * check the faucet  */  \n', '  function availableAirdrop(address who) internal constant returns (uint256) {\n', '    if(balances[owner] == 0) return 0;\n', '\tif(airdroped[who] > 0) return 0; // already seen this\n', '\t\n', '    if (thisweek() > lastWeek || DropedThisWeek < weekly_limit) {\n', '\t  if(balances[owner] > air_drop) return air_drop;\n', '\t  else return balances[owner];\n', '\t}\n', '\treturn 0;\n', '  } \n', '  function thisweek() internal view returns (uint256) {\n', '    return now / 1 weeks;\n', '  }  \n', '  function transferBalance(address upContract) external onlyControl {\n', '    require(upContract != address(0) && upContract.send(this.balance));\n', '  }\n', '  function () payable public { }   \n', '}']
