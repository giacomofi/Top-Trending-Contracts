['pragma solidity ^0.4.15;\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    \n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    \n', '    \n', '}\n', '\n', '\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferByInternal(address from, address to, uint256 value) internal returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event MintedToken(address indexed target, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 maxSupply_;\n', '    uint256 totalSupply_;\n', '\n', '    modifier onlyPayloadSize(uint numwords) {\n', '        assert(msg.data.length == numwords * 32 + 4);\n', '        _;\n', '    } \n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function maxSupply() public view returns (uint256) {\n', '        return maxSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferByInternal(address _from, address _to, uint256 _value) internal returns (bool) {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != address(0));\n', '        // Check value more than 0\n', '        require(_value > 0);\n', '        // Check if the sender has enough\n', '        require(balances[_from] >= _value);\n', '        // Check for overflows\n', '        require(balances[_to] + _value > balances[_to]);\n', '        // Save this for an assertion in the future\n', '        uint256 previousBalances = balances[_from] + balances[_to];\n', '        // Subtract from the sender\n', '        balances[_from] = balances[_from].sub(_value);\n', '        // Add the same to the recipient\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balances[_from] + balances[_to] == previousBalances);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function mintToken(address _target, uint256 _mintedAmount) onlyOwner public {\n', '        require(_target != address(0));\n', '        require(_mintedAmount > 0);\n', '        require(maxSupply_ > 0 && totalSupply_.add(_mintedAmount) <= maxSupply_);\n', '        balances[_target] = balances[_target].add(_mintedAmount);\n', '        totalSupply_ = totalSupply_.add(_mintedAmount);\n', '        Transfer(0, _target, _mintedAmount);\n', '        MintedToken(_target, _mintedAmount);\n', '    }\n', '}\n', '\n', 'contract CanReclaimToken is Ownable {\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.transfer(owner, balance);\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) onlyPayloadSize(2) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) onlyPayloadSize(2) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) onlyPayloadSize(2) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract CBSToken is StandardToken, CanReclaimToken {\n', '    using SafeMath for uint;\n', '\n', '    event BuyToken(address indexed from, uint256 value);\n', '    event SellToken(address indexed from, uint256 value, uint256 sellEth);\n', '    event TransferContractEth(address indexed to, uint256 value);\n', '\n', '\n', '    string public symbol;\n', '    string public name;\n', '    string public version = "1.0";\n', '\n', '    uint8 public decimals;\n', '    uint256 INITIAL_SUPPLY;\n', '    uint256 tokens;\n', '\n', '    uint256 public buyPrice;\n', '    uint256 public sellPrice;\n', '    uint256 public contractEth;\n', '    bool public allowBuy;\n', '    bool public allowSell;\n', '\n', '    // constructor\n', '    function CBSToken(\n', '        string _symbol,\n', '        string _name,\n', '        uint8 _decimals, \n', '        uint256 _INITIAL_SUPPLY,\n', '        uint256 _buyPrice,\n', '        uint256 _sellPrice,\n', '        bool _allowBuy,\n', '        bool _allowSell\n', '    ) public {\n', '        symbol = _symbol;\n', '        name = _name;\n', '        decimals = _decimals;\n', '        INITIAL_SUPPLY = _INITIAL_SUPPLY * 10 ** uint256(decimals);\n', '        setBuyPrices(_buyPrice);\n', '        setSellPrices(_sellPrice);\n', '\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        maxSupply_ = INITIAL_SUPPLY;\n', '        balances[owner] = totalSupply_;\n', '        allowBuy = _allowBuy;\n', '        allowSell = _allowSell;\n', '    }\n', '\n', '    function setAllowBuy(bool _allowBuy) public onlyOwner {\n', '        allowBuy = _allowBuy;\n', '    }\n', '\n', '    function setBuyPrices(uint256 _newBuyPrice) public onlyOwner {\n', '        buyPrice = _newBuyPrice;\n', '    }\n', '\n', '    function setAllowSell(bool _allowSell) public onlyOwner {\n', '        allowSell = _allowSell;\n', '    }\n', '\n', '    function setSellPrices(uint256 _newSellPrice) public onlyOwner {\n', '        sellPrice = _newSellPrice;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2) public returns (bool) {\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3) public returns (bool) {\n', '        super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function () public payable {\n', '        BuyTokens(msg.value);\n', '    }\n', '\n', '    function BuyTokens(uint256 _value)  internal {\n', '        tokens = _value.div(buyPrice).mul(100);\n', '        require(allowBuy);\n', '        require(_value > 0 && _value >= buyPrice && tokens > 0);\n', '        require(balances[owner] >= tokens);\n', '\n', '        super.transferByInternal(owner, msg.sender, tokens);\n', '        contractEth = contractEth.add(_value);\n', '        BuyToken(msg.sender, _value);\n', '    }\n', '\n', '    function transferEther(address _to, uint256 _value) onlyOwner public returns (bool) {\n', '        require(_value <= contractEth);\n', '        _to.transfer(_value);\n', '        contractEth = contractEth.sub(_value);\n', '        TransferContractEth(_to, _value);\n', '        return true;\n', '    }\n', '\n', '    \n', '\n', '    function sellTokens(uint256 _value) public returns (bool) {\n', '        uint256 sellEth;\n', '        require(allowSell);\n', '        require(_value > 0);\n', '        require(balances[msg.sender] >= _value);\n', '        if (sellPrice == 0){\n', '            sellEth = 0;\n', '        }\n', '        else\n', '        {\n', '            sellEth = _value.mul(sellPrice).div(100);\n', '        }\n', '\n', '        super.transferByInternal(msg.sender, owner, _value);\n', '        SellToken(msg.sender, _value, sellEth);\n', '        msg.sender.transfer(sellEth);\n', '        contractEth = contractEth.sub(sellEth);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.15;\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    \n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    \n', '    \n', '}\n', '\n', '\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferByInternal(address from, address to, uint256 value) internal returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event MintedToken(address indexed target, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 maxSupply_;\n', '    uint256 totalSupply_;\n', '\n', '    modifier onlyPayloadSize(uint numwords) {\n', '        assert(msg.data.length == numwords * 32 + 4);\n', '        _;\n', '    } \n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function maxSupply() public view returns (uint256) {\n', '        return maxSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferByInternal(address _from, address _to, uint256 _value) internal returns (bool) {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != address(0));\n', '        // Check value more than 0\n', '        require(_value > 0);\n', '        // Check if the sender has enough\n', '        require(balances[_from] >= _value);\n', '        // Check for overflows\n', '        require(balances[_to] + _value > balances[_to]);\n', '        // Save this for an assertion in the future\n', '        uint256 previousBalances = balances[_from] + balances[_to];\n', '        // Subtract from the sender\n', '        balances[_from] = balances[_from].sub(_value);\n', '        // Add the same to the recipient\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balances[_from] + balances[_to] == previousBalances);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function mintToken(address _target, uint256 _mintedAmount) onlyOwner public {\n', '        require(_target != address(0));\n', '        require(_mintedAmount > 0);\n', '        require(maxSupply_ > 0 && totalSupply_.add(_mintedAmount) <= maxSupply_);\n', '        balances[_target] = balances[_target].add(_mintedAmount);\n', '        totalSupply_ = totalSupply_.add(_mintedAmount);\n', '        Transfer(0, _target, _mintedAmount);\n', '        MintedToken(_target, _mintedAmount);\n', '    }\n', '}\n', '\n', 'contract CanReclaimToken is Ownable {\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.transfer(owner, balance);\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) onlyPayloadSize(2) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) onlyPayloadSize(2) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) onlyPayloadSize(2) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract CBSToken is StandardToken, CanReclaimToken {\n', '    using SafeMath for uint;\n', '\n', '    event BuyToken(address indexed from, uint256 value);\n', '    event SellToken(address indexed from, uint256 value, uint256 sellEth);\n', '    event TransferContractEth(address indexed to, uint256 value);\n', '\n', '\n', '    string public symbol;\n', '    string public name;\n', '    string public version = "1.0";\n', '\n', '    uint8 public decimals;\n', '    uint256 INITIAL_SUPPLY;\n', '    uint256 tokens;\n', '\n', '    uint256 public buyPrice;\n', '    uint256 public sellPrice;\n', '    uint256 public contractEth;\n', '    bool public allowBuy;\n', '    bool public allowSell;\n', '\n', '    // constructor\n', '    function CBSToken(\n', '        string _symbol,\n', '        string _name,\n', '        uint8 _decimals, \n', '        uint256 _INITIAL_SUPPLY,\n', '        uint256 _buyPrice,\n', '        uint256 _sellPrice,\n', '        bool _allowBuy,\n', '        bool _allowSell\n', '    ) public {\n', '        symbol = _symbol;\n', '        name = _name;\n', '        decimals = _decimals;\n', '        INITIAL_SUPPLY = _INITIAL_SUPPLY * 10 ** uint256(decimals);\n', '        setBuyPrices(_buyPrice);\n', '        setSellPrices(_sellPrice);\n', '\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        maxSupply_ = INITIAL_SUPPLY;\n', '        balances[owner] = totalSupply_;\n', '        allowBuy = _allowBuy;\n', '        allowSell = _allowSell;\n', '    }\n', '\n', '    function setAllowBuy(bool _allowBuy) public onlyOwner {\n', '        allowBuy = _allowBuy;\n', '    }\n', '\n', '    function setBuyPrices(uint256 _newBuyPrice) public onlyOwner {\n', '        buyPrice = _newBuyPrice;\n', '    }\n', '\n', '    function setAllowSell(bool _allowSell) public onlyOwner {\n', '        allowSell = _allowSell;\n', '    }\n', '\n', '    function setSellPrices(uint256 _newSellPrice) public onlyOwner {\n', '        sellPrice = _newSellPrice;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2) public returns (bool) {\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3) public returns (bool) {\n', '        super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function () public payable {\n', '        BuyTokens(msg.value);\n', '    }\n', '\n', '    function BuyTokens(uint256 _value)  internal {\n', '        tokens = _value.div(buyPrice).mul(100);\n', '        require(allowBuy);\n', '        require(_value > 0 && _value >= buyPrice && tokens > 0);\n', '        require(balances[owner] >= tokens);\n', '\n', '        super.transferByInternal(owner, msg.sender, tokens);\n', '        contractEth = contractEth.add(_value);\n', '        BuyToken(msg.sender, _value);\n', '    }\n', '\n', '    function transferEther(address _to, uint256 _value) onlyOwner public returns (bool) {\n', '        require(_value <= contractEth);\n', '        _to.transfer(_value);\n', '        contractEth = contractEth.sub(_value);\n', '        TransferContractEth(_to, _value);\n', '        return true;\n', '    }\n', '\n', '    \n', '\n', '    function sellTokens(uint256 _value) public returns (bool) {\n', '        uint256 sellEth;\n', '        require(allowSell);\n', '        require(_value > 0);\n', '        require(balances[msg.sender] >= _value);\n', '        if (sellPrice == 0){\n', '            sellEth = 0;\n', '        }\n', '        else\n', '        {\n', '            sellEth = _value.mul(sellPrice).div(100);\n', '        }\n', '\n', '        super.transferByInternal(msg.sender, owner, _value);\n', '        SellToken(msg.sender, _value, sellEth);\n', '        msg.sender.transfer(sellEth);\n', '        contractEth = contractEth.sub(sellEth);\n', '    }\n', '\n', '}']
