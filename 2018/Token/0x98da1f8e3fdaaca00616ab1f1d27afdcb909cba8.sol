['pragma solidity ^0.5.1;\n', '// Saltyness token\n', "// Known bug: Doesn't solve the oracle problem. Tweet @ARitzCracker with proof of salt. Saltyness will be sent to the provided address.\n", '\n', 'interface ERC223Handler { \n', '    function tokenFallback(address _from, uint _value, bytes calldata _data) external;\n', '}\n', '\n', 'contract SaltynessToken{\n', '    using SafeMath for uint256;\n', '    using SafeMath for uint;\n', '    \n', '\tmodifier onlyOwner {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '    \n', '    constructor() public{\n', '        owner = msg.sender;\n', '    }\n', '\taddress owner;\n', '\taddress newOwner;\n', '    \n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping (address => uint256)) allowances;\n', '    \n', '    string constant public name = "Saltyness";\n', '    string constant public symbol = "SALT";\n', '    uint8 constant public decimals = 18;\n', '    uint256 public totalSupply;\n', '    \n', '    // --Events\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '    // --Events--\n', '    \n', '    // --Owner only functions\n', '    function setNewOwner(address o) public onlyOwner {\n', '\t\tnewOwner = o;\n', '\t}\n', '\n', '\tfunction acceptNewOwner() public {\n', '\t\trequire(msg.sender == newOwner);\n', '\t\towner = msg.sender;\n', '\t}\n', '\t\n', '    // Known bug: Token supply is theoretically infinite as @peter_szilagyi produces a never-ending stream of salt in extremly high amounts.\n', '\tfunction giveSalt(address _saltee, uint256 _salt) public onlyOwner {\n', '\t    totalSupply = totalSupply.add(_salt);\n', '\t    balanceOf[_saltee] = balanceOf[_saltee].add(_salt);\n', '        emit Transfer(address(this), _saltee, _salt, "");\n', '        emit Transfer(address(this), _saltee, _salt);\n', '\t}\n', '\t// --Owner only functions--\n', '    \n', '    // --Public write functions\n', '    function transfer(address _to, uint _value, bytes memory _data, string memory _function) public returns(bool ok){\n', '        actualTransfer(msg.sender, _to, _value, _data, _function, true);\n', '        return true;\n', '    }\n', '    \n', '    function transfer(address _to, uint _value, bytes memory _data) public returns(bool ok){\n', '        actualTransfer(msg.sender, _to, _value, _data, "", true);\n', '        return true;\n', '    }\n', '    function transfer(address _to, uint _value) public returns(bool ok){\n', '        actualTransfer(msg.sender, _to, _value, "", "", true);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint _value) public returns (bool success) {\n', '        allowances[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '        uint256 _allowance = allowances[_from][msg.sender];\n', '        require(_allowance > 0, "Not approved");\n', '        require(_allowance >= _value, "Over spending limit");\n', '        allowances[_from][msg.sender] = _allowance.sub(_value);\n', '        actualTransfer(_from, _to, _value, "", "", false);\n', '        return true;\n', '    }\n', '    \n', '    // --Public write functions--\n', '     \n', '    // --Public read-only functions\n', '    \n', '    function allowance(address _sugardaddy, address _spender) public view returns (uint remaining) {\n', '        return allowances[_sugardaddy][_spender];\n', '    }\n', '    \n', '    // --Public read-only functions--\n', '    \n', '    \n', '    \n', '    // Internal functions\n', '    \n', '    function actualTransfer(address _from, address _to, uint _value, bytes memory _data, string memory _function, bool _careAboutHumanity) private{\n', '        require(balanceOf[_from] >= _value, "Insufficient balance"); // You see, I want to be helpful.\n', '        require(_to != address(this), "You can\'t sell back your tokens");\n', '        \n', '        // Throwing an exception undos all changes. Otherwise changing the balance now would be a shitshow\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        \n', '        if(_careAboutHumanity && isContract(_to)) {\n', '            if (bytes(_function).length == 0){\n', '                ERC223Handler receiver = ERC223Handler(_to);\n', '                receiver.tokenFallback(_from, _value, _data);\n', '            }else{\n', '                bool success;\n', '                bytes memory returnData;\n', '                (success, returnData) = _to.call.value(0)(abi.encodeWithSignature(_function, _from, _value, _data));\n', '                assert(success);\n', '            }\n', '        }\n', '        emit Transfer(_from, _to, _value, _data);\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '    \n', '    function isContract(address _addr) private view returns (bool is_contract) {\n', '        uint length;\n', '        assembly {\n', "            // Peter hates this opcode because it forces him to realize that it's the only blockchain-related function in the EVM which effects aren't applied until _after_ confirmation.\n", "            // But no, it's totally a feature as he intended because he is always right.\n", '            length := extcodesize(_addr)\n', '        }\n', '        return (length>0);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0 || b == 0) {\n', '           return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '    \n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']