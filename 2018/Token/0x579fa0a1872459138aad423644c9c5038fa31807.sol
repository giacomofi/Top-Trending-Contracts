['/* ==================================================================== */\n', '/* Copyright (c) 2018 The ether.online Project.  All rights reserved.\n', '/* \n', '/* https://ether.online  The first RPG game of blockchain \n', '/*  \n', '/* authors <span class="__cf_email__" data-cfemail="cbb9a2a8a0a3bea5bfaeb9e5b8a3aea58baca6aaa2a7e5a8a4a6">[email&#160;protected]</span>   \n', '/*         <span class="__cf_email__" data-cfemail="4e3d3d2b3d3b202a2720290e29232f2722602d2123">[email&#160;protected]</span>            \n', '/* ==================================================================== */\n', '\n', 'pragma solidity ^0.4.20;\n', '\n', 'contract AccessAdmin {\n', '    bool public isPaused = false;\n', '    address public addrAdmin;  \n', '\n', '    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\n', '\n', '    function AccessAdmin() public {\n', '        addrAdmin = msg.sender;\n', '    }  \n', '\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == addrAdmin);\n', '        _;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!isPaused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused {\n', '        require(isPaused);\n', '        _;\n', '    }\n', '\n', '    function setAdmin(address _newAdmin) external onlyAdmin {\n', '        require(_newAdmin != address(0));\n', '        AdminTransferred(addrAdmin, _newAdmin);\n', '        addrAdmin = _newAdmin;\n', '    }\n', '\n', '    function doPause() external onlyAdmin whenNotPaused {\n', '        isPaused = true;\n', '    }\n', '\n', '    function doUnpause() external onlyAdmin whenPaused {\n', '        isPaused = false;\n', '    }\n', '}\n', '\n', 'contract AccessService is AccessAdmin {\n', '    address public addrService;\n', '    address public addrFinance;\n', '\n', '    modifier onlyService() {\n', '        require(msg.sender == addrService);\n', '        _;\n', '    }\n', '\n', '    modifier onlyFinance() {\n', '        require(msg.sender == addrFinance);\n', '        _;\n', '    }\n', '\n', '    function setService(address _newService) external {\n', '        require(msg.sender == addrService || msg.sender == addrAdmin);\n', '        require(_newService != address(0));\n', '        addrService = _newService;\n', '    }\n', '\n', '    function setFinance(address _newFinance) external {\n', '        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n', '        require(_newFinance != address(0));\n', '        addrFinance = _newFinance;\n', '    }\n', '\n', '    function withdraw(address _target, uint256 _amount) \n', '        external \n', '    {\n', '        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n', '        require(_amount > 0);\n', '        address receiver = _target == address(0) ? addrFinance : _target;\n', '        uint256 balance = this.balance;\n', '        if (_amount < balance) {\n', '            receiver.transfer(_amount);\n', '        } else {\n', '            receiver.transfer(this.balance);\n', '        }      \n', '    }\n', '}\n', '\n', 'interface shareRecipient { \n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\n', '}\n', '\n', 'contract EOMarketToken is AccessService {\n', '    uint8 public decimals = 0;\n', '    uint256 public totalSupply = 100;\n', '    uint256 public totalSold = 0;\n', '    string public name = " Ether Online Shares Token";\n', '    string public symbol = "EOST";\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping(address => uint256)) allowed;\n', '    address[] shareholders;\n', '    mapping (address => uint256) addressToIndex;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function EOMarketToken() public {\n', '        addrAdmin = msg.sender;\n', '        addrService = msg.sender;\n', '        addrFinance = msg.sender;\n', '\n', '        balances[this] = totalSupply;\n', '    }\n', '\n', '    function() external payable {\n', '\n', '    }\n', '\n', '    function balanceOf(address _owner) external view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        allowed[_from][msg.sender] -= _value;\n', '        return _transfer(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool) {\n', '        return _transfer(msg.sender, _to, _value);     \n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        external\n', '        returns (bool success) \n', '    {\n', '        shareRecipient spender = shareRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\n', '        require(_to != address(0));\n', '        uint256 oldToVal = balances[_to];\n', '        uint256 oldFromVal = balances[_from];\n', '        require(_value > 0 && _value <= oldFromVal);\n', '        uint256 newToVal = oldToVal + _value;\n', '        assert(newToVal >= oldToVal);\n', '        require(newToVal <= 10);\n', '        uint256 newFromVal = oldFromVal - _value;\n', '        balances[_from] = newFromVal;\n', '        balances[_to] = newToVal;\n', '\n', '        if (newFromVal == 0 && _from != address(this)) {\n', '            uint256 index = addressToIndex[_from];\n', '            uint256 lastIndex = shareholders.length - 1;\n', '            if (index != lastIndex) {\n', '                shareholders[index] = shareholders[lastIndex];\n', '                addressToIndex[shareholders[index]] = index;\n', '                delete addressToIndex[_from];\n', '            }\n', '            shareholders.length -= 1; \n', '        }\n', '\n', '        if (oldToVal == 0) {\n', '            addressToIndex[_to] = shareholders.length;\n', '            shareholders.push(_to);\n', '        }\n', '\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function buy(uint256 _amount) \n', '        external \n', '        payable\n', '        whenNotPaused\n', '    {    \n', '        require(_amount > 0 && _amount <= 10);\n', '        uint256 price = (1 ether) * _amount;\n', '        require(msg.value == price);\n', '        require(balances[this] > _amount);\n', '        uint256 newBanlance = balances[msg.sender] + _amount;\n', '        assert(newBanlance >= _amount);\n', '        require(newBanlance <= 10);\n', '        _transfer(this, msg.sender, _amount);\n', '        totalSold += _amount;\n', '        addrFinance.transfer(price);\n', '    }\n', '\n', '    function getShareholders() external view returns(address[100] addrArray, uint256[100] amountArray, uint256 soldAmount) {\n', '        uint256 length = shareholders.length;\n', '        for (uint256 i = 0; i < length; ++i) {\n', '            addrArray[i] = shareholders[i];\n', '            amountArray[i] = balances[shareholders[i]];\n', '        } \n', '        soldAmount = totalSold;\n', '    }\n', '}']
['/* ==================================================================== */\n', '/* Copyright (c) 2018 The ether.online Project.  All rights reserved.\n', '/* \n', '/* https://ether.online  The first RPG game of blockchain \n', '/*  \n', '/* authors rickhunter.shen@gmail.com   \n', '/*         ssesunding@gmail.com            \n', '/* ==================================================================== */\n', '\n', 'pragma solidity ^0.4.20;\n', '\n', 'contract AccessAdmin {\n', '    bool public isPaused = false;\n', '    address public addrAdmin;  \n', '\n', '    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\n', '\n', '    function AccessAdmin() public {\n', '        addrAdmin = msg.sender;\n', '    }  \n', '\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == addrAdmin);\n', '        _;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!isPaused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused {\n', '        require(isPaused);\n', '        _;\n', '    }\n', '\n', '    function setAdmin(address _newAdmin) external onlyAdmin {\n', '        require(_newAdmin != address(0));\n', '        AdminTransferred(addrAdmin, _newAdmin);\n', '        addrAdmin = _newAdmin;\n', '    }\n', '\n', '    function doPause() external onlyAdmin whenNotPaused {\n', '        isPaused = true;\n', '    }\n', '\n', '    function doUnpause() external onlyAdmin whenPaused {\n', '        isPaused = false;\n', '    }\n', '}\n', '\n', 'contract AccessService is AccessAdmin {\n', '    address public addrService;\n', '    address public addrFinance;\n', '\n', '    modifier onlyService() {\n', '        require(msg.sender == addrService);\n', '        _;\n', '    }\n', '\n', '    modifier onlyFinance() {\n', '        require(msg.sender == addrFinance);\n', '        _;\n', '    }\n', '\n', '    function setService(address _newService) external {\n', '        require(msg.sender == addrService || msg.sender == addrAdmin);\n', '        require(_newService != address(0));\n', '        addrService = _newService;\n', '    }\n', '\n', '    function setFinance(address _newFinance) external {\n', '        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n', '        require(_newFinance != address(0));\n', '        addrFinance = _newFinance;\n', '    }\n', '\n', '    function withdraw(address _target, uint256 _amount) \n', '        external \n', '    {\n', '        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n', '        require(_amount > 0);\n', '        address receiver = _target == address(0) ? addrFinance : _target;\n', '        uint256 balance = this.balance;\n', '        if (_amount < balance) {\n', '            receiver.transfer(_amount);\n', '        } else {\n', '            receiver.transfer(this.balance);\n', '        }      \n', '    }\n', '}\n', '\n', 'interface shareRecipient { \n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\n', '}\n', '\n', 'contract EOMarketToken is AccessService {\n', '    uint8 public decimals = 0;\n', '    uint256 public totalSupply = 100;\n', '    uint256 public totalSold = 0;\n', '    string public name = " Ether Online Shares Token";\n', '    string public symbol = "EOST";\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping(address => uint256)) allowed;\n', '    address[] shareholders;\n', '    mapping (address => uint256) addressToIndex;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function EOMarketToken() public {\n', '        addrAdmin = msg.sender;\n', '        addrService = msg.sender;\n', '        addrFinance = msg.sender;\n', '\n', '        balances[this] = totalSupply;\n', '    }\n', '\n', '    function() external payable {\n', '\n', '    }\n', '\n', '    function balanceOf(address _owner) external view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        allowed[_from][msg.sender] -= _value;\n', '        return _transfer(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool) {\n', '        return _transfer(msg.sender, _to, _value);     \n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        external\n', '        returns (bool success) \n', '    {\n', '        shareRecipient spender = shareRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\n', '        require(_to != address(0));\n', '        uint256 oldToVal = balances[_to];\n', '        uint256 oldFromVal = balances[_from];\n', '        require(_value > 0 && _value <= oldFromVal);\n', '        uint256 newToVal = oldToVal + _value;\n', '        assert(newToVal >= oldToVal);\n', '        require(newToVal <= 10);\n', '        uint256 newFromVal = oldFromVal - _value;\n', '        balances[_from] = newFromVal;\n', '        balances[_to] = newToVal;\n', '\n', '        if (newFromVal == 0 && _from != address(this)) {\n', '            uint256 index = addressToIndex[_from];\n', '            uint256 lastIndex = shareholders.length - 1;\n', '            if (index != lastIndex) {\n', '                shareholders[index] = shareholders[lastIndex];\n', '                addressToIndex[shareholders[index]] = index;\n', '                delete addressToIndex[_from];\n', '            }\n', '            shareholders.length -= 1; \n', '        }\n', '\n', '        if (oldToVal == 0) {\n', '            addressToIndex[_to] = shareholders.length;\n', '            shareholders.push(_to);\n', '        }\n', '\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function buy(uint256 _amount) \n', '        external \n', '        payable\n', '        whenNotPaused\n', '    {    \n', '        require(_amount > 0 && _amount <= 10);\n', '        uint256 price = (1 ether) * _amount;\n', '        require(msg.value == price);\n', '        require(balances[this] > _amount);\n', '        uint256 newBanlance = balances[msg.sender] + _amount;\n', '        assert(newBanlance >= _amount);\n', '        require(newBanlance <= 10);\n', '        _transfer(this, msg.sender, _amount);\n', '        totalSold += _amount;\n', '        addrFinance.transfer(price);\n', '    }\n', '\n', '    function getShareholders() external view returns(address[100] addrArray, uint256[100] amountArray, uint256 soldAmount) {\n', '        uint256 length = shareholders.length;\n', '        for (uint256 i = 0; i < length; ++i) {\n', '            addrArray[i] = shareholders[i];\n', '            amountArray[i] = balances[shareholders[i]];\n', '        } \n', '        soldAmount = totalSold;\n', '    }\n', '}']
