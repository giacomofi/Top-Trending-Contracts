['library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract HODLIT is StandardToken, Ownable {\n', '  using SafeMath for uint256;\n', '  string public name = "HODL INCENTIVE TOKEN";\n', '  string public symbol = "HIT";\n', '  uint256 public decimals = 18;\n', '  uint256 public multiplicator = 10 ** decimals;\n', '  uint256 public totalSupply;\n', '  uint256 public ICDSupply;\n', '\n', '  uint256 public registeredUsers;\n', '  uint256 public claimedUsers;\n', '  uint256 public maxReferrals = 20;\n', '\n', '  uint256 public hardCap = SafeMath.mul(100000000, multiplicator);\n', '  uint256 public ICDCap = SafeMath.mul(20000000, multiplicator);\n', '\n', '  mapping (address => uint256) public etherBalances;\n', '  mapping (address => bool) public ICDClaims;\n', '  mapping (address => uint256) public referrals;\n', '  mapping (address => bool) public bonusReceived;\n', '\n', '\n', '  uint256 public regStartTime = 1519848000; // 28 feb 2018 20:00 GMT\n', '  uint256 public regStopTime = regStartTime + 7 days;\n', '  uint256 public POHStartTime = regStopTime;\n', '  uint256 public POHStopTime = POHStartTime + 7 days;\n', '  uint256 public ICDStartTime = POHStopTime;\n', '  uint256 public ICDStopTime = ICDStartTime + 7 days;\n', '  uint256 public PCDStartTime = ICDStopTime + 14 days;\n', '\n', '  address public ERC721Address;\n', '\n', '  modifier forRegistration {\n', '    require(block.timestamp >= regStartTime && block.timestamp < regStopTime);\n', '    _;\n', '  }\n', '\n', '  modifier forICD {\n', '    require(block.timestamp >= ICDStartTime && block.timestamp < ICDStopTime);\n', '    _;\n', '  }\n', '\n', '  modifier forERC721 {\n', '    require(msg.sender == ERC721Address && block.timestamp >= PCDStartTime);\n', '    _;\n', '  }\n', '\n', '  function HODLIT() public {\n', '    uint256 reserve = SafeMath.mul(30000000, multiplicator);\n', '    owner = msg.sender;\n', '    totalSupply = totalSupply.add(reserve);\n', '    balances[owner] = balances[owner].add(reserve);\n', '    Transfer(address(0), owner, reserve);\n', '  }\n', '\n', '  function() external payable {\n', '    revert();\n', '  }\n', '\n', '  function setERC721Address(address _ERC721Address) external onlyOwner {\n', '    ERC721Address = _ERC721Address;\n', '  }\n', '\n', '  function setMaxReferrals(uint256 _maxReferrals) external onlyOwner {\n', '    maxReferrals = _maxReferrals;\n', '  }\n', '\n', '  function registerEtherBalance(address _referral) external forRegistration {\n', '    require(\n', '      msg.sender.balance > 0.2 ether &&\n', '      etherBalances[msg.sender] == 0 &&\n', '      _referral != msg.sender\n', '    );\n', '    if (_referral != address(0) && referrals[_referral] < maxReferrals) {\n', '      referrals[_referral]++;\n', '    }\n', '    registeredUsers++;\n', '    etherBalances[msg.sender] = msg.sender.balance;\n', '  }\n', '\n', '  function claimTokens() external forICD {\n', '    require(ICDClaims[msg.sender] == false);\n', '    require(etherBalances[msg.sender] > 0);\n', '    require(etherBalances[msg.sender] <= msg.sender.balance + 50 finney);\n', '    ICDClaims[msg.sender] = true;\n', '    claimedUsers++;\n', '    require(mintICD(msg.sender, computeReward(etherBalances[msg.sender])));\n', '  }\n', '\n', '  function declareCheater(address _cheater) external onlyOwner {\n', '    require(_cheater != address(0));\n', '    ICDClaims[_cheater] = false;\n', '    etherBalances[_cheater] = 0;\n', '  }\n', '\n', '  function declareCheaters(address[] _cheaters) external onlyOwner {\n', '    for (uint256 i = 0; i < _cheaters.length; i++) {\n', '      require(_cheaters[i] != address(0));\n', '      ICDClaims[_cheaters[i]] = false;\n', '      etherBalances[_cheaters[i]] = 0;\n', '    }\n', '  }\n', '\n', '  function mintPCD(address _to, uint256 _amount) external forERC721 returns(bool) {\n', '    require(_to != address(0));\n', '    require(_amount + totalSupply <= hardCap);\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    etherBalances[_to] = _to.balance;\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function claimTwitterBonus() external forICD {\n', '    require(balances[msg.sender] > 0 && !bonusReceived[msg.sender]);\n', '    bonusReceived[msg.sender] = true;\n', '    mintICD(msg.sender, multiplicator.mul(20));\n', '  }\n', '\n', '  function claimReferralBonus() external forICD {\n', '    require(referrals[msg.sender] > 0 && balances[msg.sender] > 0);\n', '    uint256 cache = referrals[msg.sender];\n', '    referrals[msg.sender] = 0;\n', '    mintICD(msg.sender, SafeMath.mul(cache * 20, multiplicator));\n', '  }\n', '\n', '  function computeReward(uint256 _amount) internal view returns(uint256) {\n', '    if (_amount < 1 ether) return SafeMath.mul(20, multiplicator);\n', '    if (_amount < 2 ether) return SafeMath.mul(100, multiplicator);\n', '    if (_amount < 3 ether) return SafeMath.mul(240, multiplicator);\n', '    if (_amount < 4 ether) return SafeMath.mul(430, multiplicator);\n', '    if (_amount < 5 ether) return SafeMath.mul(680, multiplicator);\n', '    if (_amount < 6 ether) return SafeMath.mul(950, multiplicator);\n', '    if (_amount < 7 ether) return SafeMath.mul(1260, multiplicator);\n', '    if (_amount < 8 ether) return SafeMath.mul(1580, multiplicator);\n', '    if (_amount < 9 ether) return SafeMath.mul(1900, multiplicator);\n', '    if (_amount < 10 ether) return SafeMath.mul(2240, multiplicator);\n', '    if (_amount < 11 ether) return SafeMath.mul(2560, multiplicator);\n', '    if (_amount < 12 ether) return SafeMath.mul(2890, multiplicator);\n', '    if (_amount < 13 ether) return SafeMath.mul(3210, multiplicator);\n', '    if (_amount < 14 ether) return SafeMath.mul(3520, multiplicator);\n', '    if (_amount < 15 ether) return SafeMath.mul(3830, multiplicator);\n', '    if (_amount < 16 ether) return SafeMath.mul(4120, multiplicator);\n', '    if (_amount < 17 ether) return SafeMath.mul(4410, multiplicator);\n', '    if (_amount < 18 ether) return SafeMath.mul(4680, multiplicator);\n', '    if (_amount < 19 ether) return SafeMath.mul(4950, multiplicator);\n', '    if (_amount < 20 ether) return SafeMath.mul(5210, multiplicator);\n', '    if (_amount < 21 ether) return SafeMath.mul(5460, multiplicator);\n', '    if (_amount < 22 ether) return SafeMath.mul(5700, multiplicator);\n', '    if (_amount < 23 ether) return SafeMath.mul(5930, multiplicator);\n', '    if (_amount < 24 ether) return SafeMath.mul(6150, multiplicator);\n', '    if (_amount < 25 ether) return SafeMath.mul(6360, multiplicator);\n', '    if (_amount < 26 ether) return SafeMath.mul(6570, multiplicator);\n', '    if (_amount < 27 ether) return SafeMath.mul(6770, multiplicator);\n', '    if (_amount < 28 ether) return SafeMath.mul(6960, multiplicator);\n', '    if (_amount < 29 ether) return SafeMath.mul(7140, multiplicator);\n', '    if (_amount < 30 ether) return SafeMath.mul(7320, multiplicator);\n', '    if (_amount < 31 ether) return SafeMath.mul(7500, multiplicator);\n', '    if (_amount < 32 ether) return SafeMath.mul(7660, multiplicator);\n', '    if (_amount < 33 ether) return SafeMath.mul(7820, multiplicator);\n', '    if (_amount < 34 ether) return SafeMath.mul(7980, multiplicator);\n', '    if (_amount < 35 ether) return SafeMath.mul(8130, multiplicator);\n', '    if (_amount < 36 ether) return SafeMath.mul(8270, multiplicator);\n', '    if (_amount < 37 ether) return SafeMath.mul(8410, multiplicator);\n', '    if (_amount < 38 ether) return SafeMath.mul(8550, multiplicator);\n', '    if (_amount < 39 ether) return SafeMath.mul(8680, multiplicator);\n', '    if (_amount < 40 ether) return SafeMath.mul(8810, multiplicator);\n', '    if (_amount < 41 ether) return SafeMath.mul(8930, multiplicator);\n', '    if (_amount < 42 ether) return SafeMath.mul(9050, multiplicator);\n', '    if (_amount < 43 ether) return SafeMath.mul(9170, multiplicator);\n', '    if (_amount < 44 ether) return SafeMath.mul(9280, multiplicator);\n', '    if (_amount < 45 ether) return SafeMath.mul(9390, multiplicator);\n', '    if (_amount < 46 ether) return SafeMath.mul(9500, multiplicator);\n', '    if (_amount < 47 ether) return SafeMath.mul(9600, multiplicator);\n', '    if (_amount < 48 ether) return SafeMath.mul(9700, multiplicator);\n', '    if (_amount < 49 ether) return SafeMath.mul(9800, multiplicator);\n', '    if (_amount < 50 ether) return SafeMath.mul(9890, multiplicator);\n', '    return SafeMath.mul(10000, multiplicator);\n', '  }\n', '\n', '  function mintICD(address _to, uint256 _amount) internal returns(bool) {\n', '    require(_to != address(0));\n', '    require(_amount + ICDSupply <= ICDCap);\n', '    totalSupply = totalSupply.add(_amount);\n', '    ICDSupply = ICDSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    etherBalances[_to] = _to.balance;\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract Airdrop is Ownable {\n', '\n', '  HODLIT token;\n', '  address propheth = 0x0368284b0267DF29DD954a5Ed7832c84c09451eA;\n', '  bool isStopped;\n', '\n', '  event AirdropLog(uint256 indexed id, address indexed user, uint256 claimAmount);\n', '\n', '  mapping(uint256 => bool) public isClaimed;\n', '  mapping(uint256 => uint256) public claimedAt;\n', '  mapping(uint256 => address) public claimedBy;\n', '  mapping(address => uint256) public claims;\n', '\n', '  uint256 public totalClaims;\n', '  uint256 public airdropLimit = safeMul(10000000, 10 ** 18);\n', '\n', '  constructor(address _token) public {\n', '    token = HODLIT(_token);\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function ecrecovery(bytes32 hash, bytes sig) internal pure returns (address) {\n', '    bytes32 r;\n', '    bytes32 s;\n', '    uint8 v;\n', '\n', '    // Check the signature length\n', '    if (sig.length != 65) {\n', '      return (address(0));\n', '    }\n', '\n', '    // Divide the signature in r, s and v variables\n', '    // ecrecover takes the signature parameters, and the only way to get them\n', '    // currently is to use assembly.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly {\n', '      r := mload(add(sig, 32))\n', '      s := mload(add(sig, 64))\n', '      v := byte(0, mload(add(sig, 96)))\n', '    }\n', '\n', '    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '    if (v < 27) {\n', '      v += 27;\n', '    }\n', '\n', '    // If the version is correct return the signer address\n', '    if (v != 27 && v != 28) {\n', '      return (address(0));\n', '    } else {\n', '      // solium-disable-next-line arg-overflow\n', '      return ecrecover(hash, v, r, s);\n', '    }\n', '  }\n', '\n', '  function parseAddr(string _a) internal pure returns (address) {\n', '    bytes memory tmp = bytes(_a);\n', '    uint160 iaddr = 0;\n', '    uint160 b1;\n', '    uint160 b2;\n', '    for (uint i=2; i<2+2*20; i+=2){\n', '      iaddr *= 256;\n', '      b1 = uint160(tmp[i]);\n', '      b2 = uint160(tmp[i+1]);\n', '      if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\n', '      else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;\n', '      else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n', '      if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\n', '      else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;\n', '      else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n', '      iaddr += (b1*16+b2);\n', '    }\n', '    return address(iaddr);\n', '  }\n', '\n', '  function parseInt(string _a, uint _b) internal pure returns (uint) {\n', '    bytes memory bresult = bytes(_a);\n', '    uint mint = 0;\n', '    bool decimals = false;\n', '    for (uint i=0; i<bresult.length; i++){\n', '      if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\n', '        if (decimals){\n', '          if (_b == 0) break;\n', '          else _b--;\n', '        }\n', '        mint *= 10;\n', '        mint += uint(bresult[i]) - 48;\n', '      } else if (bresult[i] == 46) decimals = true;\n', '    }\n', '    if (_b > 0) mint *= 10**_b;\n', '    return mint;\n', '  }\n', '\n', '\n', '\n', '  function prophetize(string _id, string _userAddress, string _claimAmount, bytes32 _hash, bytes _sig) internal view returns(bool){\n', '    require(keccak256("\\x19Ethereum Signed Message:\\n32", _id,&#39;&&#39;,_userAddress,&#39;&&#39;, _claimAmount) == _hash);\n', '    require(ecrecovery(_hash, _sig) == propheth);\n', '    return true;\n', '  }\n', '\n', '  function stopAirdrop(bool _choice) external onlyOwner {\n', '    isStopped = _choice;\n', '  }\n', '\n', '  function setPropheth(address _propheth) external onlyOwner {\n', '    propheth = _propheth;\n', '  }\n', '\n', '  function claim(string _id, string _userAddress, string _claimAmount, bytes32 _hash, bytes _sig) external {\n', '    require(prophetize(_id, _userAddress, _claimAmount, _hash, _sig) == true && !isStopped);\n', '\n', '    uint256 id = parseInt(_id, 0);\n', '    address userAddress = parseAddr(_userAddress);\n', '    uint256 claimAmount;\n', '\n', '    if (token.ICDClaims(userAddress)) {\n', '        claimAmount = safeMul(parseInt(_claimAmount, 0) * 2, 10 ** 18);\n', '    } else {\n', '        claimAmount = safeMul(parseInt(_claimAmount, 0), 10 ** 18);\n', '    }\n', '\n', '    require(!isClaimed[id] && claimAmount != 0 && userAddress == msg.sender);\n', '    require(safeAdd(claimAmount, totalClaims) < airdropLimit);\n', '\n', '    isClaimed[id] = true;\n', '    claimedAt[id] = claimAmount;\n', '    claimedBy[id] = userAddress;\n', '    claims[userAddress] = safeAdd(claims[userAddress], claimAmount);\n', '    totalClaims = safeAdd(totalClaims, claimAmount);\n', '\n', '    require(token.mintPCD(userAddress, claimAmount));\n', '\n', '    emit AirdropLog(id, userAddress, claimAmount);\n', '\n', '  }\n', '}']
['library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract HODLIT is StandardToken, Ownable {\n', '  using SafeMath for uint256;\n', '  string public name = "HODL INCENTIVE TOKEN";\n', '  string public symbol = "HIT";\n', '  uint256 public decimals = 18;\n', '  uint256 public multiplicator = 10 ** decimals;\n', '  uint256 public totalSupply;\n', '  uint256 public ICDSupply;\n', '\n', '  uint256 public registeredUsers;\n', '  uint256 public claimedUsers;\n', '  uint256 public maxReferrals = 20;\n', '\n', '  uint256 public hardCap = SafeMath.mul(100000000, multiplicator);\n', '  uint256 public ICDCap = SafeMath.mul(20000000, multiplicator);\n', '\n', '  mapping (address => uint256) public etherBalances;\n', '  mapping (address => bool) public ICDClaims;\n', '  mapping (address => uint256) public referrals;\n', '  mapping (address => bool) public bonusReceived;\n', '\n', '\n', '  uint256 public regStartTime = 1519848000; // 28 feb 2018 20:00 GMT\n', '  uint256 public regStopTime = regStartTime + 7 days;\n', '  uint256 public POHStartTime = regStopTime;\n', '  uint256 public POHStopTime = POHStartTime + 7 days;\n', '  uint256 public ICDStartTime = POHStopTime;\n', '  uint256 public ICDStopTime = ICDStartTime + 7 days;\n', '  uint256 public PCDStartTime = ICDStopTime + 14 days;\n', '\n', '  address public ERC721Address;\n', '\n', '  modifier forRegistration {\n', '    require(block.timestamp >= regStartTime && block.timestamp < regStopTime);\n', '    _;\n', '  }\n', '\n', '  modifier forICD {\n', '    require(block.timestamp >= ICDStartTime && block.timestamp < ICDStopTime);\n', '    _;\n', '  }\n', '\n', '  modifier forERC721 {\n', '    require(msg.sender == ERC721Address && block.timestamp >= PCDStartTime);\n', '    _;\n', '  }\n', '\n', '  function HODLIT() public {\n', '    uint256 reserve = SafeMath.mul(30000000, multiplicator);\n', '    owner = msg.sender;\n', '    totalSupply = totalSupply.add(reserve);\n', '    balances[owner] = balances[owner].add(reserve);\n', '    Transfer(address(0), owner, reserve);\n', '  }\n', '\n', '  function() external payable {\n', '    revert();\n', '  }\n', '\n', '  function setERC721Address(address _ERC721Address) external onlyOwner {\n', '    ERC721Address = _ERC721Address;\n', '  }\n', '\n', '  function setMaxReferrals(uint256 _maxReferrals) external onlyOwner {\n', '    maxReferrals = _maxReferrals;\n', '  }\n', '\n', '  function registerEtherBalance(address _referral) external forRegistration {\n', '    require(\n', '      msg.sender.balance > 0.2 ether &&\n', '      etherBalances[msg.sender] == 0 &&\n', '      _referral != msg.sender\n', '    );\n', '    if (_referral != address(0) && referrals[_referral] < maxReferrals) {\n', '      referrals[_referral]++;\n', '    }\n', '    registeredUsers++;\n', '    etherBalances[msg.sender] = msg.sender.balance;\n', '  }\n', '\n', '  function claimTokens() external forICD {\n', '    require(ICDClaims[msg.sender] == false);\n', '    require(etherBalances[msg.sender] > 0);\n', '    require(etherBalances[msg.sender] <= msg.sender.balance + 50 finney);\n', '    ICDClaims[msg.sender] = true;\n', '    claimedUsers++;\n', '    require(mintICD(msg.sender, computeReward(etherBalances[msg.sender])));\n', '  }\n', '\n', '  function declareCheater(address _cheater) external onlyOwner {\n', '    require(_cheater != address(0));\n', '    ICDClaims[_cheater] = false;\n', '    etherBalances[_cheater] = 0;\n', '  }\n', '\n', '  function declareCheaters(address[] _cheaters) external onlyOwner {\n', '    for (uint256 i = 0; i < _cheaters.length; i++) {\n', '      require(_cheaters[i] != address(0));\n', '      ICDClaims[_cheaters[i]] = false;\n', '      etherBalances[_cheaters[i]] = 0;\n', '    }\n', '  }\n', '\n', '  function mintPCD(address _to, uint256 _amount) external forERC721 returns(bool) {\n', '    require(_to != address(0));\n', '    require(_amount + totalSupply <= hardCap);\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    etherBalances[_to] = _to.balance;\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function claimTwitterBonus() external forICD {\n', '    require(balances[msg.sender] > 0 && !bonusReceived[msg.sender]);\n', '    bonusReceived[msg.sender] = true;\n', '    mintICD(msg.sender, multiplicator.mul(20));\n', '  }\n', '\n', '  function claimReferralBonus() external forICD {\n', '    require(referrals[msg.sender] > 0 && balances[msg.sender] > 0);\n', '    uint256 cache = referrals[msg.sender];\n', '    referrals[msg.sender] = 0;\n', '    mintICD(msg.sender, SafeMath.mul(cache * 20, multiplicator));\n', '  }\n', '\n', '  function computeReward(uint256 _amount) internal view returns(uint256) {\n', '    if (_amount < 1 ether) return SafeMath.mul(20, multiplicator);\n', '    if (_amount < 2 ether) return SafeMath.mul(100, multiplicator);\n', '    if (_amount < 3 ether) return SafeMath.mul(240, multiplicator);\n', '    if (_amount < 4 ether) return SafeMath.mul(430, multiplicator);\n', '    if (_amount < 5 ether) return SafeMath.mul(680, multiplicator);\n', '    if (_amount < 6 ether) return SafeMath.mul(950, multiplicator);\n', '    if (_amount < 7 ether) return SafeMath.mul(1260, multiplicator);\n', '    if (_amount < 8 ether) return SafeMath.mul(1580, multiplicator);\n', '    if (_amount < 9 ether) return SafeMath.mul(1900, multiplicator);\n', '    if (_amount < 10 ether) return SafeMath.mul(2240, multiplicator);\n', '    if (_amount < 11 ether) return SafeMath.mul(2560, multiplicator);\n', '    if (_amount < 12 ether) return SafeMath.mul(2890, multiplicator);\n', '    if (_amount < 13 ether) return SafeMath.mul(3210, multiplicator);\n', '    if (_amount < 14 ether) return SafeMath.mul(3520, multiplicator);\n', '    if (_amount < 15 ether) return SafeMath.mul(3830, multiplicator);\n', '    if (_amount < 16 ether) return SafeMath.mul(4120, multiplicator);\n', '    if (_amount < 17 ether) return SafeMath.mul(4410, multiplicator);\n', '    if (_amount < 18 ether) return SafeMath.mul(4680, multiplicator);\n', '    if (_amount < 19 ether) return SafeMath.mul(4950, multiplicator);\n', '    if (_amount < 20 ether) return SafeMath.mul(5210, multiplicator);\n', '    if (_amount < 21 ether) return SafeMath.mul(5460, multiplicator);\n', '    if (_amount < 22 ether) return SafeMath.mul(5700, multiplicator);\n', '    if (_amount < 23 ether) return SafeMath.mul(5930, multiplicator);\n', '    if (_amount < 24 ether) return SafeMath.mul(6150, multiplicator);\n', '    if (_amount < 25 ether) return SafeMath.mul(6360, multiplicator);\n', '    if (_amount < 26 ether) return SafeMath.mul(6570, multiplicator);\n', '    if (_amount < 27 ether) return SafeMath.mul(6770, multiplicator);\n', '    if (_amount < 28 ether) return SafeMath.mul(6960, multiplicator);\n', '    if (_amount < 29 ether) return SafeMath.mul(7140, multiplicator);\n', '    if (_amount < 30 ether) return SafeMath.mul(7320, multiplicator);\n', '    if (_amount < 31 ether) return SafeMath.mul(7500, multiplicator);\n', '    if (_amount < 32 ether) return SafeMath.mul(7660, multiplicator);\n', '    if (_amount < 33 ether) return SafeMath.mul(7820, multiplicator);\n', '    if (_amount < 34 ether) return SafeMath.mul(7980, multiplicator);\n', '    if (_amount < 35 ether) return SafeMath.mul(8130, multiplicator);\n', '    if (_amount < 36 ether) return SafeMath.mul(8270, multiplicator);\n', '    if (_amount < 37 ether) return SafeMath.mul(8410, multiplicator);\n', '    if (_amount < 38 ether) return SafeMath.mul(8550, multiplicator);\n', '    if (_amount < 39 ether) return SafeMath.mul(8680, multiplicator);\n', '    if (_amount < 40 ether) return SafeMath.mul(8810, multiplicator);\n', '    if (_amount < 41 ether) return SafeMath.mul(8930, multiplicator);\n', '    if (_amount < 42 ether) return SafeMath.mul(9050, multiplicator);\n', '    if (_amount < 43 ether) return SafeMath.mul(9170, multiplicator);\n', '    if (_amount < 44 ether) return SafeMath.mul(9280, multiplicator);\n', '    if (_amount < 45 ether) return SafeMath.mul(9390, multiplicator);\n', '    if (_amount < 46 ether) return SafeMath.mul(9500, multiplicator);\n', '    if (_amount < 47 ether) return SafeMath.mul(9600, multiplicator);\n', '    if (_amount < 48 ether) return SafeMath.mul(9700, multiplicator);\n', '    if (_amount < 49 ether) return SafeMath.mul(9800, multiplicator);\n', '    if (_amount < 50 ether) return SafeMath.mul(9890, multiplicator);\n', '    return SafeMath.mul(10000, multiplicator);\n', '  }\n', '\n', '  function mintICD(address _to, uint256 _amount) internal returns(bool) {\n', '    require(_to != address(0));\n', '    require(_amount + ICDSupply <= ICDCap);\n', '    totalSupply = totalSupply.add(_amount);\n', '    ICDSupply = ICDSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    etherBalances[_to] = _to.balance;\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract Airdrop is Ownable {\n', '\n', '  HODLIT token;\n', '  address propheth = 0x0368284b0267DF29DD954a5Ed7832c84c09451eA;\n', '  bool isStopped;\n', '\n', '  event AirdropLog(uint256 indexed id, address indexed user, uint256 claimAmount);\n', '\n', '  mapping(uint256 => bool) public isClaimed;\n', '  mapping(uint256 => uint256) public claimedAt;\n', '  mapping(uint256 => address) public claimedBy;\n', '  mapping(address => uint256) public claims;\n', '\n', '  uint256 public totalClaims;\n', '  uint256 public airdropLimit = safeMul(10000000, 10 ** 18);\n', '\n', '  constructor(address _token) public {\n', '    token = HODLIT(_token);\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function ecrecovery(bytes32 hash, bytes sig) internal pure returns (address) {\n', '    bytes32 r;\n', '    bytes32 s;\n', '    uint8 v;\n', '\n', '    // Check the signature length\n', '    if (sig.length != 65) {\n', '      return (address(0));\n', '    }\n', '\n', '    // Divide the signature in r, s and v variables\n', '    // ecrecover takes the signature parameters, and the only way to get them\n', '    // currently is to use assembly.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly {\n', '      r := mload(add(sig, 32))\n', '      s := mload(add(sig, 64))\n', '      v := byte(0, mload(add(sig, 96)))\n', '    }\n', '\n', '    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '    if (v < 27) {\n', '      v += 27;\n', '    }\n', '\n', '    // If the version is correct return the signer address\n', '    if (v != 27 && v != 28) {\n', '      return (address(0));\n', '    } else {\n', '      // solium-disable-next-line arg-overflow\n', '      return ecrecover(hash, v, r, s);\n', '    }\n', '  }\n', '\n', '  function parseAddr(string _a) internal pure returns (address) {\n', '    bytes memory tmp = bytes(_a);\n', '    uint160 iaddr = 0;\n', '    uint160 b1;\n', '    uint160 b2;\n', '    for (uint i=2; i<2+2*20; i+=2){\n', '      iaddr *= 256;\n', '      b1 = uint160(tmp[i]);\n', '      b2 = uint160(tmp[i+1]);\n', '      if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\n', '      else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;\n', '      else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n', '      if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\n', '      else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;\n', '      else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n', '      iaddr += (b1*16+b2);\n', '    }\n', '    return address(iaddr);\n', '  }\n', '\n', '  function parseInt(string _a, uint _b) internal pure returns (uint) {\n', '    bytes memory bresult = bytes(_a);\n', '    uint mint = 0;\n', '    bool decimals = false;\n', '    for (uint i=0; i<bresult.length; i++){\n', '      if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\n', '        if (decimals){\n', '          if (_b == 0) break;\n', '          else _b--;\n', '        }\n', '        mint *= 10;\n', '        mint += uint(bresult[i]) - 48;\n', '      } else if (bresult[i] == 46) decimals = true;\n', '    }\n', '    if (_b > 0) mint *= 10**_b;\n', '    return mint;\n', '  }\n', '\n', '\n', '\n', '  function prophetize(string _id, string _userAddress, string _claimAmount, bytes32 _hash, bytes _sig) internal view returns(bool){\n', '    require(keccak256("\\x19Ethereum Signed Message:\\n32", _id,\'&\',_userAddress,\'&\', _claimAmount) == _hash);\n', '    require(ecrecovery(_hash, _sig) == propheth);\n', '    return true;\n', '  }\n', '\n', '  function stopAirdrop(bool _choice) external onlyOwner {\n', '    isStopped = _choice;\n', '  }\n', '\n', '  function setPropheth(address _propheth) external onlyOwner {\n', '    propheth = _propheth;\n', '  }\n', '\n', '  function claim(string _id, string _userAddress, string _claimAmount, bytes32 _hash, bytes _sig) external {\n', '    require(prophetize(_id, _userAddress, _claimAmount, _hash, _sig) == true && !isStopped);\n', '\n', '    uint256 id = parseInt(_id, 0);\n', '    address userAddress = parseAddr(_userAddress);\n', '    uint256 claimAmount;\n', '\n', '    if (token.ICDClaims(userAddress)) {\n', '        claimAmount = safeMul(parseInt(_claimAmount, 0) * 2, 10 ** 18);\n', '    } else {\n', '        claimAmount = safeMul(parseInt(_claimAmount, 0), 10 ** 18);\n', '    }\n', '\n', '    require(!isClaimed[id] && claimAmount != 0 && userAddress == msg.sender);\n', '    require(safeAdd(claimAmount, totalClaims) < airdropLimit);\n', '\n', '    isClaimed[id] = true;\n', '    claimedAt[id] = claimAmount;\n', '    claimedBy[id] = userAddress;\n', '    claims[userAddress] = safeAdd(claims[userAddress], claimAmount);\n', '    totalClaims = safeAdd(totalClaims, claimAmount);\n', '\n', '    require(token.mintPCD(userAddress, claimAmount));\n', '\n', '    emit AirdropLog(id, userAddress, claimAmount);\n', '\n', '  }\n', '}']
