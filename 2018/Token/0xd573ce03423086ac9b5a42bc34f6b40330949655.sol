['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '  uint256 constant private MAX_UINT256 =\n', '  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '  function safeAdd (uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '    assert (x <= MAX_UINT256 - y);\n', '    return x + y;\n', '  }\n', '\n', '  function safeSub (uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '    assert (x >= y);\n', '    return x - y;\n', '  }\n', '\n', '  function safeMul (uint256 x, uint256 y)  constant internal  returns (uint256 z) {\n', '    if (y == 0) return 0; // Prevent division by zero at the next line\n', '    assert (x <= MAX_UINT256 / y);\n', '    return x * y;\n', '  }\n', '  \n', '  \n', '   function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract RebateCoin is ERC20Interface, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals = 18;\n', '    uint256 private _supply;\n', '    uint256 private _totalSupply;\n', '\n', '    uint public tokenPrice = 100 * (10**13); // wei , 0.001 eth , 6 usd\n', ' \n', '\tuint private SaleStage1_start = 1527811200;\n', '\tuint256 private SaleStage1_supply = 24 * (10**24);\n', '\tuint private SaleStage1_tokenPrice = 84 * (10**13); // 0.5 usd\n', '\n', '\tuint private SaleStage2_start = 1530403200;\n', '\tuint256 private SaleStage2_supply = 10 * (10**24);\n', '\tuint private SaleStage2_tokenPrice = 108 * (10**13); // 0.65 usd\n', '\n', '\tuint private SaleStage3_start = 1533081600;\n', '\tuint256 private SaleStage3_supply = 50 * (10**24);\n', '\tuint private SaleStage3_tokenPrice = 134 * (10**13); // 0.8 usd\n', '\t\n', '    uint public startDate = 1527811200;\n', '    uint public endDate = 1535760000;\n', '\n', '\tuint256 public bounty = 10 * (10**23);\n', '\n', '\tuint256 public hardcap = 22800 ether;\n', '\tuint256 public softcap = 62250 ether;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function RebateCoin() public {\n', '        symbol = "RBC";\n', '        name = "Rebate Coin";\n', '\t_totalSupply = safeAdd(_totalSupply, bounty);\n', '\t//approve(owner, bounty);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function reward_list(address[] memory to, uint[] memory tokens) public returns (bool success) {\n', '\trequire(msg.sender == owner);\n', '        require(to.length == tokens.length);\n', '\t    for (uint i = 0; i < to.length; ++i) {\n', '\t\treward(to[i],tokens[i]);\n', '\t    }\n', '        return true;\n', '    }\n', '    \n', '    function reward(address to, uint tokens) public returns (bool success) {\n', '        require(msg.sender == owner);\n', '\trequire( tokens <= bounty);\t\t\n', '\tbounty = safeSub(bounty, tokens);\n', '\tbalances[to] = safeAdd(balances[to], tokens);\n', '\t\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are not allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        if (tokens > 0 && from != to) {\n', '            allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '            balances[to] = safeAdd(balances[to], tokens);\n', '            Transfer(from, to, tokens);\n', '\t}\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    /// @dev extendDeadline(): allows the issuer to add more time to the\n', '    /// presale, allowing it to continue accepting fulfillments\n', '    /// @param _newDeadline the new deadline in timestamp format\n', '    function extendDeadline(uint _newDeadline) public returns (bool success){\n', '        require(msg.sender == owner);\n', '        require(_newDeadline > 0);\n', '        endDate = _newDeadline;\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account. The `spender` contract function\n', '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // RBC Tokens per 1 ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        require(now >= startDate && now <= endDate);\n', '        uint tokens;\n', '        if (now >= SaleStage3_start) {\n', '            tokens = safeDiv(msg.value * (10**18),SaleStage3_tokenPrice);\n', '\t    _supply = safeAdd(SaleStage3_supply,safeAdd(SaleStage2_supply,SaleStage1_supply));\n', '        } else if(now >= SaleStage2_start) {\n', '            tokens = safeDiv(msg.value * (10**18),SaleStage2_tokenPrice);\n', '\t    _supply = safeAdd(SaleStage2_supply,SaleStage1_supply);\n', '        } else if(now >= SaleStage1_start) {\n', '            tokens = safeDiv(msg.value * (10**18),SaleStage1_tokenPrice);\n', '\t    _supply = SaleStage1_supply;\n', '\t} else {}\n', '\t\n', '\trequire( safeAdd(_totalSupply, tokens) <= _supply);\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n', '        _totalSupply = safeAdd(_totalSupply, tokens);\n', '        Transfer(address(0), msg.sender, tokens);\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '  uint256 constant private MAX_UINT256 =\n', '  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '  function safeAdd (uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '    assert (x <= MAX_UINT256 - y);\n', '    return x + y;\n', '  }\n', '\n', '  function safeSub (uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '    assert (x >= y);\n', '    return x - y;\n', '  }\n', '\n', '  function safeMul (uint256 x, uint256 y)  constant internal  returns (uint256 z) {\n', '    if (y == 0) return 0; // Prevent division by zero at the next line\n', '    assert (x <= MAX_UINT256 / y);\n', '    return x * y;\n', '  }\n', '  \n', '  \n', '   function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract RebateCoin is ERC20Interface, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals = 18;\n', '    uint256 private _supply;\n', '    uint256 private _totalSupply;\n', '\n', '    uint public tokenPrice = 100 * (10**13); // wei , 0.001 eth , 6 usd\n', ' \n', '\tuint private SaleStage1_start = 1527811200;\n', '\tuint256 private SaleStage1_supply = 24 * (10**24);\n', '\tuint private SaleStage1_tokenPrice = 84 * (10**13); // 0.5 usd\n', '\n', '\tuint private SaleStage2_start = 1530403200;\n', '\tuint256 private SaleStage2_supply = 10 * (10**24);\n', '\tuint private SaleStage2_tokenPrice = 108 * (10**13); // 0.65 usd\n', '\n', '\tuint private SaleStage3_start = 1533081600;\n', '\tuint256 private SaleStage3_supply = 50 * (10**24);\n', '\tuint private SaleStage3_tokenPrice = 134 * (10**13); // 0.8 usd\n', '\t\n', '    uint public startDate = 1527811200;\n', '    uint public endDate = 1535760000;\n', '\n', '\tuint256 public bounty = 10 * (10**23);\n', '\n', '\tuint256 public hardcap = 22800 ether;\n', '\tuint256 public softcap = 62250 ether;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function RebateCoin() public {\n', '        symbol = "RBC";\n', '        name = "Rebate Coin";\n', '\t_totalSupply = safeAdd(_totalSupply, bounty);\n', '\t//approve(owner, bounty);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function reward_list(address[] memory to, uint[] memory tokens) public returns (bool success) {\n', '\trequire(msg.sender == owner);\n', '        require(to.length == tokens.length);\n', '\t    for (uint i = 0; i < to.length; ++i) {\n', '\t\treward(to[i],tokens[i]);\n', '\t    }\n', '        return true;\n', '    }\n', '    \n', '    function reward(address to, uint tokens) public returns (bool success) {\n', '        require(msg.sender == owner);\n', '\trequire( tokens <= bounty);\t\t\n', '\tbounty = safeSub(bounty, tokens);\n', '\tbalances[to] = safeAdd(balances[to], tokens);\n', '\t\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are not allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        if (tokens > 0 && from != to) {\n', '            allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '            balances[to] = safeAdd(balances[to], tokens);\n', '            Transfer(from, to, tokens);\n', '\t}\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    /// @dev extendDeadline(): allows the issuer to add more time to the\n', '    /// presale, allowing it to continue accepting fulfillments\n', '    /// @param _newDeadline the new deadline in timestamp format\n', '    function extendDeadline(uint _newDeadline) public returns (bool success){\n', '        require(msg.sender == owner);\n', '        require(_newDeadline > 0);\n', '        endDate = _newDeadline;\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account. The `spender` contract function\n", '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // RBC Tokens per 1 ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        require(now >= startDate && now <= endDate);\n', '        uint tokens;\n', '        if (now >= SaleStage3_start) {\n', '            tokens = safeDiv(msg.value * (10**18),SaleStage3_tokenPrice);\n', '\t    _supply = safeAdd(SaleStage3_supply,safeAdd(SaleStage2_supply,SaleStage1_supply));\n', '        } else if(now >= SaleStage2_start) {\n', '            tokens = safeDiv(msg.value * (10**18),SaleStage2_tokenPrice);\n', '\t    _supply = safeAdd(SaleStage2_supply,SaleStage1_supply);\n', '        } else if(now >= SaleStage1_start) {\n', '            tokens = safeDiv(msg.value * (10**18),SaleStage1_tokenPrice);\n', '\t    _supply = SaleStage1_supply;\n', '\t} else {}\n', '\t\n', '\trequire( safeAdd(_totalSupply, tokens) <= _supply);\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n', '        _totalSupply = safeAdd(_totalSupply, tokens);\n', '        Transfer(address(0), msg.sender, tokens);\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
