['/**\n', ' * Copyright 2018 TosChain Foundation.\n', ' */\n', '\n', 'pragma solidity ^0.4.16;\n', '\n', '/** Owner permissions */\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', '/// ERC20 standardï¼ŒDefine the minimum unit of money to 18 decimal places,\n', '/// transfer out, destroy coins, others use your account spending pocket money.\n', 'contract TokenERC20 {\n', '    uint256 public totalSupply;\n', '    // This creates an array with all balances.\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients.\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt.\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract.\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead.\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough.\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows.\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future.\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender.\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient.\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail.\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account.\n', '     *\n', '     * @param _to The address of the recipient.\n', '     * @param _value the amount to send.\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address.\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`.\n', '     *\n', '     * @param _from The address of the sender.\n', '     * @param _to The address of the recipient.\n', '     * @param _value the amount to send.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        // Check allowance\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address.\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf.\n', '     *\n', '     * @param _spender The address authorized to spend.\n', '     * @param _value the max amount they can spend.\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify.\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it.\n', '     *\n', '     * @param _spender The address authorized to spend.\n', '     * @param _value the max amount they can spend.\n', '     * @param _extraData some extra information to send to the approved contract.\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly.\n', '     *\n', '     * @param _value the amount of money to burn.\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        // Check if the sender has enough\n', '        require(balanceOf[msg.sender] >= _value);\n', '        // Subtract from the sender\n', '        balanceOf[msg.sender] -= _value;\n', '        // Updates totalSupply\n', '        totalSupply -= _value;\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account.\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender.\n', '     * @param _value the amount of money to burn.\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        // Check if the targeted balance is enough.\n', '        require(balanceOf[_from] >= _value);\n', '        // Check allowance\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        // Subtract from the targeted balance.\n', '        balanceOf[_from] -= _value;\n', '        // Subtract from the sender&#39;s allowance.\n', '        allowance[_from][msg.sender] -= _value;\n', '        // Update totalSupply\n', '        totalSupply -= _value;\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/******************************************/\n', '/*       TOS TOKEN STARTS HERE       */\n', '/******************************************/\n', '\n', '/// @title TOS Protocol Token.\n', 'contract TosToken is owned, TokenERC20 {\n', '\n', '    /// The full name of the TOS token.\n', '    string public constant name = "ThingsOpreatingSystem";\n', '    /// Symbol of the TOS token.\n', '    string public constant symbol = "TOS";\n', '    /// 18 decimals is the strongly suggested default, avoid changing it.\n', '    uint8 public constant decimals = 18;\n', '\n', '\n', '    uint256 public totalSupply = 1000000000 * 10 ** uint256(decimals);\n', '    /// Amount of TOS token to first issue.\n', '    uint256 public MAX_FUNDING_SUPPLY = totalSupply * 500 / 1000;\n', '\n', '    /**\n', '     *  Locked tokens system\n', '     */\n', '    /// Stores the address of the locked tokens.\n', '    address public lockJackpots;\n', '    /// Reward for depositing the TOS token into a locked tokens.\n', '    /// uint256 public totalLockReward = totalSupply * 50 / 1000;\n', '    /// Remaining rewards in the locked tokens.\n', '    uint256 public remainingReward;\n', '\n', '    /// The start time to lock tokens. 2018/03/15 0:0:0\n', '    uint256 public lockStartTime = 1521043200;\n', '    /// The last time to lock tokens. 2018/04/29 0:0:0\n', '    uint256 public lockDeadline = 1524931200;\n', '    /// Release tokens lock time,Timestamp format 1544803200 ==  2018/12/15 0:0:0\n', '    uint256 public unLockTime = 1544803200;\n', '\n', '    /// Reward factor for locked tokens \n', '    uint public constant NUM_OF_PHASE = 3;\n', '    uint[3] public lockRewardsPercentages = [\n', '        1000,   //100%\n', '        500,    //50%\n', '        300    //30%\n', '    ];\n', '\n', '    /// Locked account details\n', '    mapping (address => uint256) public lockBalanceOf;\n', '\n', '    /**\n', '     *  Freeze the account system\n', '     */\n', '    /* This generates a public event on the blockchain that will notify clients. */\n', '    mapping (address => bool) public frozenAccount;\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract. */\n', '    function TosToken() public {\n', '        /// Give the creator all initial tokens.\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    /**\n', '     * transfer token for a specified address.\n', '     *\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        /// Locked account can not complete the transfer.\n', '        require(!(lockJackpots != 0x0 && msg.sender == lockJackpots));\n', '\n', '        /// Transponding the TOS token to a locked tokens account will be deemed a lock-up activity.\n', '        if (lockJackpots != 0x0 && _to == lockJackpots) {\n', '            _lockToken(_value);\n', '        }\n', '        else {\n', '            /// To unlock the time, automatically unlock tokens.\n', '            if (unLockTime <= now && lockBalanceOf[msg.sender] > 0) {\n', '                lockBalanceOf[msg.sender] = 0;\n', '            }\n', '\n', '            _transfer(msg.sender, _to, _value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * transfer token for a specified address.Internal transfer, only can be called by this contract.\n', '     *\n', '     * @param _from The address to transfer from.\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead.\n', '        require(_to != 0x0);\n', '        //Check for overflows.\n', '        require(lockBalanceOf[_from] + _value > lockBalanceOf[_from]);\n', '        // Check if the sender has enough.\n', '        require(balanceOf[_from] >= lockBalanceOf[_from] + _value);\n', '        // Check for overflows.\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Check if sender is frozen.\n', '        require(!frozenAccount[_from]);\n', '        // Check if recipient is frozen.\n', '        require(!frozenAccount[_to]);\n', '        // Subtract from the sender.\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient.\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * `freeze? Prevent | Allow` `target` from sending & receiving tokens.\n', '     *\n', '     * @param target Address to be frozen.\n', '     * @param freeze either to freeze it or not.\n', '     */\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    /**\n', '     * Increase the token reward.\n', '     *\n', '     * @param _value Increase the amount of tokens awarded.\n', '     */\n', '    function increaseLockReward(uint256 _value) public{\n', '        require(_value > 0);\n', '        _transfer(msg.sender, lockJackpots, _value * 10 ** uint256(decimals));\n', '        _calcRemainReward();\n', '    }\n', '\n', '    /**\n', '     * Locked tokens, in the locked token reward calculation and distribution.\n', '     *\n', '     * @param _lockValue Lock token reward.\n', '     */\n', '    function _lockToken(uint256 _lockValue) internal {\n', '        /// Lock the tokens necessary safety checks.\n', '        require(lockJackpots != 0x0);\n', '        require(now >= lockStartTime);\n', '        require(now <= lockDeadline);\n', '        require(lockBalanceOf[msg.sender] + _lockValue > lockBalanceOf[msg.sender]);\n', '        /// Check account tokens must be sufficient.\n', '        require(balanceOf[msg.sender] >= lockBalanceOf[msg.sender] + _lockValue);\n', '\n', '        uint256 _reward =  _lockValue * _calcLockRewardPercentage() / 1000;\n', '        /// Distribute bonus tokens.\n', '        _transfer(lockJackpots, msg.sender, _reward);\n', '\n', '        /// Save locked accounts and rewards.\n', '        lockBalanceOf[msg.sender] += _lockValue + _reward;\n', '        _calcRemainReward();\n', '    }\n', '\n', '    uint256 lockRewardFactor;\n', '    /* Calculate locked token reward percentageï¼ŒActual value: rewardFactor/1000 */\n', '    function _calcLockRewardPercentage() internal returns (uint factor){\n', '\n', '        uint phase = NUM_OF_PHASE * (now - lockStartTime)/( lockDeadline - lockStartTime);\n', '        if (phase  >= NUM_OF_PHASE) {\n', '            phase = NUM_OF_PHASE - 1;\n', '        }\n', '    \n', '        lockRewardFactor = lockRewardsPercentages[phase];\n', '        return lockRewardFactor;\n', '    }\n', '\n', '    /** The activity is over and the token in the prize pool is sent to the manager for fund development. */\n', '    function rewardActivityEnd() onlyOwner public {\n', '        /// The activity is over.\n', '        require(unLockTime < now);\n', '        /// Send the token from the prize pool to the manager.\n', '        _transfer(lockJackpots, owner, balanceOf[lockJackpots]);\n', '        _calcRemainReward();\n', '    }\n', '\n', '    function() payable public {}\n', '\n', '    /**\n', '     * Set lock token address,only once.\n', '     *\n', '     * @param newLockJackpots The lock token address.\n', '     */\n', '    function setLockJackpots(address newLockJackpots) onlyOwner public {\n', '        require(lockJackpots == 0x0 && newLockJackpots != 0x0 && newLockJackpots != owner);\n', '        lockJackpots = newLockJackpots;\n', '        _calcRemainReward();\n', '    }\n', '\n', '    /** Remaining rewards in the locked tokens. */\n', '    function _calcRemainReward() internal {\n', '        remainingReward = balanceOf[lockJackpots];\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        // Check allowance\n', '        require(_from != lockJackpots);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        require(msg.sender != lockJackpots);\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        require(msg.sender != lockJackpots);\n', '        return super.approveAndCall(_spender, _value, _extraData);\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(msg.sender != lockJackpots);\n', '        return super.burn(_value);\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(_from != lockJackpots);\n', '        return super.burnFrom(_from, _value);\n', '    }\n', '}']
['/**\n', ' * Copyright 2018 TosChain Foundation.\n', ' */\n', '\n', 'pragma solidity ^0.4.16;\n', '\n', '/** Owner permissions */\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', '/// ERC20 standardï¼ŒDefine the minimum unit of money to 18 decimal places,\n', '/// transfer out, destroy coins, others use your account spending pocket money.\n', 'contract TokenERC20 {\n', '    uint256 public totalSupply;\n', '    // This creates an array with all balances.\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients.\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt.\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract.\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead.\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough.\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows.\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future.\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender.\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient.\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail.\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account.\n', '     *\n', '     * @param _to The address of the recipient.\n', '     * @param _value the amount to send.\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address.\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`.\n', '     *\n', '     * @param _from The address of the sender.\n', '     * @param _to The address of the recipient.\n', '     * @param _value the amount to send.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        // Check allowance\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address.\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf.\n', '     *\n', '     * @param _spender The address authorized to spend.\n', '     * @param _value the max amount they can spend.\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify.\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it.\n', '     *\n', '     * @param _spender The address authorized to spend.\n', '     * @param _value the max amount they can spend.\n', '     * @param _extraData some extra information to send to the approved contract.\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly.\n', '     *\n', '     * @param _value the amount of money to burn.\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        // Check if the sender has enough\n', '        require(balanceOf[msg.sender] >= _value);\n', '        // Subtract from the sender\n', '        balanceOf[msg.sender] -= _value;\n', '        // Updates totalSupply\n', '        totalSupply -= _value;\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account.\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender.\n', '     * @param _value the amount of money to burn.\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        // Check if the targeted balance is enough.\n', '        require(balanceOf[_from] >= _value);\n', '        // Check allowance\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        // Subtract from the targeted balance.\n', '        balanceOf[_from] -= _value;\n', "        // Subtract from the sender's allowance.\n", '        allowance[_from][msg.sender] -= _value;\n', '        // Update totalSupply\n', '        totalSupply -= _value;\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/******************************************/\n', '/*       TOS TOKEN STARTS HERE       */\n', '/******************************************/\n', '\n', '/// @title TOS Protocol Token.\n', 'contract TosToken is owned, TokenERC20 {\n', '\n', '    /// The full name of the TOS token.\n', '    string public constant name = "ThingsOpreatingSystem";\n', '    /// Symbol of the TOS token.\n', '    string public constant symbol = "TOS";\n', '    /// 18 decimals is the strongly suggested default, avoid changing it.\n', '    uint8 public constant decimals = 18;\n', '\n', '\n', '    uint256 public totalSupply = 1000000000 * 10 ** uint256(decimals);\n', '    /// Amount of TOS token to first issue.\n', '    uint256 public MAX_FUNDING_SUPPLY = totalSupply * 500 / 1000;\n', '\n', '    /**\n', '     *  Locked tokens system\n', '     */\n', '    /// Stores the address of the locked tokens.\n', '    address public lockJackpots;\n', '    /// Reward for depositing the TOS token into a locked tokens.\n', '    /// uint256 public totalLockReward = totalSupply * 50 / 1000;\n', '    /// Remaining rewards in the locked tokens.\n', '    uint256 public remainingReward;\n', '\n', '    /// The start time to lock tokens. 2018/03/15 0:0:0\n', '    uint256 public lockStartTime = 1521043200;\n', '    /// The last time to lock tokens. 2018/04/29 0:0:0\n', '    uint256 public lockDeadline = 1524931200;\n', '    /// Release tokens lock time,Timestamp format 1544803200 ==  2018/12/15 0:0:0\n', '    uint256 public unLockTime = 1544803200;\n', '\n', '    /// Reward factor for locked tokens \n', '    uint public constant NUM_OF_PHASE = 3;\n', '    uint[3] public lockRewardsPercentages = [\n', '        1000,   //100%\n', '        500,    //50%\n', '        300    //30%\n', '    ];\n', '\n', '    /// Locked account details\n', '    mapping (address => uint256) public lockBalanceOf;\n', '\n', '    /**\n', '     *  Freeze the account system\n', '     */\n', '    /* This generates a public event on the blockchain that will notify clients. */\n', '    mapping (address => bool) public frozenAccount;\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract. */\n', '    function TosToken() public {\n', '        /// Give the creator all initial tokens.\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    /**\n', '     * transfer token for a specified address.\n', '     *\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        /// Locked account can not complete the transfer.\n', '        require(!(lockJackpots != 0x0 && msg.sender == lockJackpots));\n', '\n', '        /// Transponding the TOS token to a locked tokens account will be deemed a lock-up activity.\n', '        if (lockJackpots != 0x0 && _to == lockJackpots) {\n', '            _lockToken(_value);\n', '        }\n', '        else {\n', '            /// To unlock the time, automatically unlock tokens.\n', '            if (unLockTime <= now && lockBalanceOf[msg.sender] > 0) {\n', '                lockBalanceOf[msg.sender] = 0;\n', '            }\n', '\n', '            _transfer(msg.sender, _to, _value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * transfer token for a specified address.Internal transfer, only can be called by this contract.\n', '     *\n', '     * @param _from The address to transfer from.\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead.\n', '        require(_to != 0x0);\n', '        //Check for overflows.\n', '        require(lockBalanceOf[_from] + _value > lockBalanceOf[_from]);\n', '        // Check if the sender has enough.\n', '        require(balanceOf[_from] >= lockBalanceOf[_from] + _value);\n', '        // Check for overflows.\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Check if sender is frozen.\n', '        require(!frozenAccount[_from]);\n', '        // Check if recipient is frozen.\n', '        require(!frozenAccount[_to]);\n', '        // Subtract from the sender.\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient.\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * `freeze? Prevent | Allow` `target` from sending & receiving tokens.\n', '     *\n', '     * @param target Address to be frozen.\n', '     * @param freeze either to freeze it or not.\n', '     */\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    /**\n', '     * Increase the token reward.\n', '     *\n', '     * @param _value Increase the amount of tokens awarded.\n', '     */\n', '    function increaseLockReward(uint256 _value) public{\n', '        require(_value > 0);\n', '        _transfer(msg.sender, lockJackpots, _value * 10 ** uint256(decimals));\n', '        _calcRemainReward();\n', '    }\n', '\n', '    /**\n', '     * Locked tokens, in the locked token reward calculation and distribution.\n', '     *\n', '     * @param _lockValue Lock token reward.\n', '     */\n', '    function _lockToken(uint256 _lockValue) internal {\n', '        /// Lock the tokens necessary safety checks.\n', '        require(lockJackpots != 0x0);\n', '        require(now >= lockStartTime);\n', '        require(now <= lockDeadline);\n', '        require(lockBalanceOf[msg.sender] + _lockValue > lockBalanceOf[msg.sender]);\n', '        /// Check account tokens must be sufficient.\n', '        require(balanceOf[msg.sender] >= lockBalanceOf[msg.sender] + _lockValue);\n', '\n', '        uint256 _reward =  _lockValue * _calcLockRewardPercentage() / 1000;\n', '        /// Distribute bonus tokens.\n', '        _transfer(lockJackpots, msg.sender, _reward);\n', '\n', '        /// Save locked accounts and rewards.\n', '        lockBalanceOf[msg.sender] += _lockValue + _reward;\n', '        _calcRemainReward();\n', '    }\n', '\n', '    uint256 lockRewardFactor;\n', '    /* Calculate locked token reward percentageï¼ŒActual value: rewardFactor/1000 */\n', '    function _calcLockRewardPercentage() internal returns (uint factor){\n', '\n', '        uint phase = NUM_OF_PHASE * (now - lockStartTime)/( lockDeadline - lockStartTime);\n', '        if (phase  >= NUM_OF_PHASE) {\n', '            phase = NUM_OF_PHASE - 1;\n', '        }\n', '    \n', '        lockRewardFactor = lockRewardsPercentages[phase];\n', '        return lockRewardFactor;\n', '    }\n', '\n', '    /** The activity is over and the token in the prize pool is sent to the manager for fund development. */\n', '    function rewardActivityEnd() onlyOwner public {\n', '        /// The activity is over.\n', '        require(unLockTime < now);\n', '        /// Send the token from the prize pool to the manager.\n', '        _transfer(lockJackpots, owner, balanceOf[lockJackpots]);\n', '        _calcRemainReward();\n', '    }\n', '\n', '    function() payable public {}\n', '\n', '    /**\n', '     * Set lock token address,only once.\n', '     *\n', '     * @param newLockJackpots The lock token address.\n', '     */\n', '    function setLockJackpots(address newLockJackpots) onlyOwner public {\n', '        require(lockJackpots == 0x0 && newLockJackpots != 0x0 && newLockJackpots != owner);\n', '        lockJackpots = newLockJackpots;\n', '        _calcRemainReward();\n', '    }\n', '\n', '    /** Remaining rewards in the locked tokens. */\n', '    function _calcRemainReward() internal {\n', '        remainingReward = balanceOf[lockJackpots];\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        // Check allowance\n', '        require(_from != lockJackpots);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        require(msg.sender != lockJackpots);\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        require(msg.sender != lockJackpots);\n', '        return super.approveAndCall(_spender, _value, _extraData);\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(msg.sender != lockJackpots);\n', '        return super.burn(_value);\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(_from != lockJackpots);\n', '        return super.burnFrom(_from, _value);\n', '    }\n', '}']
