['pragma solidity ^0.4.21;\n', '\n', 'contract Erc20Token {\n', '\tuint256 public totalSupply; //Total amount of Erc20Token\n', '\t\n', '\t//Check balances\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    \n', '\t/**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    \n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\t\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '//Contract manager\n', 'contract ownerYHT {\n', '    address public owner;\n', '\n', '    function ownerYHT() public{\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '\t\n', '    function transferOwner(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '//knifeOption\n', 'contract KEO is ownerYHT,Erc20Token {\n', '    string public name= &#39;KEO&#39;; \n', '    string public symbol = &#39;KEO&#39;; \n', '    uint8 public decimals = 0;\n', '\t\n', '\tuint256 public moneyTotal = 60000000;//Total amount of Erc20Token\n', '\tuint256 public moneyFreeze = 20000000; \n', '\t\n', '\tmapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\t\n', '\t/**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function KEO() public {\n', '        totalSupply = (moneyTotal - moneyFreeze) * 10 ** uint256(decimals);\n', '\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\t\n', '\t\n', '    function transfer(address _to, uint256 _value) public returns (bool success){\n', '        _transfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '    }\n', '\t\n', '\t/**\n', '\t * Send tokens to another account from a specified account\n', '     * The calling process will check the set maximum allowable transaction amount\n', '\t * \n', '\t */\n', '    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success){\n', '        \n', '        require(_value <= allowed[_from][msg.sender]);   // Check allowed\n', '        allowed[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction balanceOf(address _owner) public constant returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\t\n', '\t//Set the maximum amount allowed for the account\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\t\n', '\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    //private\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '\n', '\t\trequire(_to != 0x0);\n', '\n', '\t\trequire(balances[_from] >= _value);\n', '\n', '\t\trequire(balances[_to] + _value > balances[_to]);\n', '\n', '\t\tuint previousBalances = balances[_from] + balances[_to];\n', '\n', '\t\tbalances[_from] -= _value;\n', '\n', '\t\tbalances[_to] += _value;\n', '\n', '\t\temit Transfer(_from, _to, _value);\n', '\n', '\t\tassert(balances[_from] + balances[_to] == previousBalances);\n', '\n', '    }\n', '    \n', '\t/**\n', '\t *Thawing frozen money\n', '\t *Note: The value unit here is the unit before the 18th power \n', '\t *that hasn&#39;t been multiplied by 10, that is, the same unit as \n', '\t * the money whose initial definition was frozen.\n', '\t */\n', '\tevent EventUnLockFreeze(address indexed from,uint256 value);\n', '    function unLockFreeze(uint256 _value) onlyOwner public {\n', '        require(_value <= moneyFreeze);\n', '        \n', '\t\tmoneyFreeze -= _value;\n', '\t\t\n', '\t\tbalances[msg.sender] += _value * 10 ** uint256(decimals);\n', '\t\t\n', '\t\temit EventUnLockFreeze(msg.sender,_value);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract Erc20Token {\n', '\tuint256 public totalSupply; //Total amount of Erc20Token\n', '\t\n', '\t//Check balances\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    \n', '\t/**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    \n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\t\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '//Contract manager\n', 'contract ownerYHT {\n', '    address public owner;\n', '\n', '    function ownerYHT() public{\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '\t\n', '    function transferOwner(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '//knifeOption\n', 'contract KEO is ownerYHT,Erc20Token {\n', "    string public name= 'KEO'; \n", "    string public symbol = 'KEO'; \n", '    uint8 public decimals = 0;\n', '\t\n', '\tuint256 public moneyTotal = 60000000;//Total amount of Erc20Token\n', '\tuint256 public moneyFreeze = 20000000; \n', '\t\n', '\tmapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\t\n', '\t/**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function KEO() public {\n', '        totalSupply = (moneyTotal - moneyFreeze) * 10 ** uint256(decimals);\n', '\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\t\n', '\t\n', '    function transfer(address _to, uint256 _value) public returns (bool success){\n', '        _transfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '    }\n', '\t\n', '\t/**\n', '\t * Send tokens to another account from a specified account\n', '     * The calling process will check the set maximum allowable transaction amount\n', '\t * \n', '\t */\n', '    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success){\n', '        \n', '        require(_value <= allowed[_from][msg.sender]);   // Check allowed\n', '        allowed[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction balanceOf(address _owner) public constant returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\t\n', '\t//Set the maximum amount allowed for the account\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\t\n', '\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    //private\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '\n', '\t\trequire(_to != 0x0);\n', '\n', '\t\trequire(balances[_from] >= _value);\n', '\n', '\t\trequire(balances[_to] + _value > balances[_to]);\n', '\n', '\t\tuint previousBalances = balances[_from] + balances[_to];\n', '\n', '\t\tbalances[_from] -= _value;\n', '\n', '\t\tbalances[_to] += _value;\n', '\n', '\t\temit Transfer(_from, _to, _value);\n', '\n', '\t\tassert(balances[_from] + balances[_to] == previousBalances);\n', '\n', '    }\n', '    \n', '\t/**\n', '\t *Thawing frozen money\n', '\t *Note: The value unit here is the unit before the 18th power \n', "\t *that hasn't been multiplied by 10, that is, the same unit as \n", '\t * the money whose initial definition was frozen.\n', '\t */\n', '\tevent EventUnLockFreeze(address indexed from,uint256 value);\n', '    function unLockFreeze(uint256 _value) onlyOwner public {\n', '        require(_value <= moneyFreeze);\n', '        \n', '\t\tmoneyFreeze -= _value;\n', '\t\t\n', '\t\tbalances[msg.sender] += _value * 10 ** uint256(decimals);\n', '\t\t\n', '\t\temit EventUnLockFreeze(msg.sender,_value);\n', '    }\n', '}']
