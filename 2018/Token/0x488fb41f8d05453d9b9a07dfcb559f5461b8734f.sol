['contract Ownable {\n', '  address public owner;\n', '\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'contract medibitICO is Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', 'mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  //Gas/GWei\n', '  uint constant public minPublicContribAmount = 1 ether;\n', '  \n', '\n', '  // The token being sold\n', '  medibitToken public token;\n', '  uint256 constant public tokenDecimals = 18;\n', '\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime; \n', '  uint256 public endTime; \n', '\n', '\n', '  // need to be enabled to allow investor to participate in the ico\n', '  bool public icoEnabled;\n', '\n', '  // address where funds are collected\n', '  address public walletOne;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  // totalSupply\n', '  uint256 public totalSupply = 50000000000 * (10 ** tokenDecimals);\n', '  uint256 constant public toekensForBTCandBonus = 12500000000 * (10 ** tokenDecimals);\n', '  uint256 constant public toekensForTeam = 5000000000 * (10 ** tokenDecimals);\n', '  uint256 constant public toekensForOthers = 22500000000 * (10 ** tokenDecimals);\n', '\n', '\n', '  //ICO tokens\n', '  //Is calcluated as: initialICOCap + preSaleCap\n', '  uint256 public icoCap;\n', '  uint256 public icoSoldTokens;\n', '  bool public icoEnded = false;\n', '\n', '  address constant public walletTwo = 0x938Ee925D9EFf6698472a19EbAc780667999857B;\n', '  address constant public walletThree = 0x09E72590206d652BD1aCDB3A8e358AeB3f21513A;\n', '\n', '  //Sale rates\n', '\n', '  uint256 constant public STANDARD_RATE = 1500000;\n', '\n', '  event Burn(address indexed from, uint256 value);\n', '\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '\n', '  function medibitICO(address _walletOne) public {\n', '    require(_walletOne != address(0));\n', '    token = createTokenContract();\n', '    \n', '    //send all dao tokens to multiwallet\n', '    uint256 tokensToWallet1 = toekensForBTCandBonus;\n', '    uint256 tokensToWallet2 = toekensForTeam;\n', '    uint256 tokensToWallet3 = toekensForOthers;\n', '    \n', '    walletOne = _walletOne;\n', '    \n', '    token.transfer(walletOne, tokensToWallet1);\n', '    token.transfer(walletTwo, tokensToWallet2);\n', '    token.transfer(walletThree, tokensToWallet3);\n', '  }\n', '\n', '\n', '  //\n', '  // Token related operations\n', '  //\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (medibitToken) {\n', '    return new medibitToken();\n', '  }\n', '\n', '\n', '  // enable token tranferability\n', '  function enableTokenTransferability() external onlyOwner {\n', '    require(token != address(0));\n', '    token.unpause();\n', '  }\n', '\n', '  // disable token tranferability\n', '  function disableTokenTransferability() external onlyOwner {\n', '    require(token != address(0));\n', '    token.pause();\n', '  }\n', '\n', '  // transfer token to owner account for burn\n', '   function transferUnsoldIcoTokens() external onlyOwner {\n', '    require(token != address(0));\n', '    uint256 unsoldTokens = icoCap.sub(icoSoldTokens);\n', '    token.transfer(walletOne, unsoldTokens);\n', '   }\n', '\n', '  //\n', '  // ICO related operations\n', '  //\n', '\n', '  // set multisign wallet\n', '  function setwalletOne(address _walletOne) external onlyOwner{\n', '    // need to be set before the ico start\n', '    require(!icoEnabled || now < startTime);\n', '    require(_walletOne != address(0));\n', '    walletOne = _walletOne;\n', '  }\n', '\n', '\n', '  // set contribution dates\n', '  function setContributionDates(uint64 _startTime, uint64 _endTime) external onlyOwner{\n', '    require(!icoEnabled);\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '  }\n', '\n', '\n', '  // enable ICO, need to be true to actually start ico\n', '  // multisign wallet need to be set, because once ico started, invested funds is transfered to this address\n', '  // once ico is enabled, following parameters can not be changed anymore:\n', '  // startTime, endTime, soldPreSaleTokens\n', '  function enableICO() external onlyOwner{\n', '    icoEnabled = true;\n', '    icoCap = totalSupply;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable whenNotPaused public {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable whenNotPaused {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '    uint256 returnWeiAmount;\n', '\n', '    // calculate token amount to be created\n', '    uint rate = getRate();\n', '    assert(rate > 0);\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    uint256 newIcoSoldTokens = icoSoldTokens.add(tokens);\n', '\n', '    if (newIcoSoldTokens > icoCap) {\n', '        newIcoSoldTokens = icoCap;\n', '        tokens = icoCap.sub(icoSoldTokens);\n', '        uint256 newWeiAmount = tokens.div(rate);\n', '        returnWeiAmount = weiAmount.sub(newWeiAmount);\n', '        weiAmount = newWeiAmount;\n', '    }\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.transfer(beneficiary, tokens);\n', '    icoSoldTokens = newIcoSoldTokens;\n', '    if (returnWeiAmount > 0){\n', '        msg.sender.transfer(returnWeiAmount);\n', '    }\n', '\n', '    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    walletOne.transfer(address(this).balance);\n', '  }\n', '\n', '\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonMinimumPurchase;\n', '    bool icoTokensAvailable = icoSoldTokens < icoCap;\n', ' \n', '    nonMinimumPurchase = msg.value >= minPublicContribAmount;\n', '    \n', '\n', '    return !icoEnded && icoEnabled && withinPeriod && nonMinimumPurchase && icoTokensAvailable;\n', '  }\n', '\n', '\n', '\n', '  // end ico by owner, not really needed in normal situation\n', '  function endIco() external onlyOwner {\n', '    icoEnded = true;\n', '    // send unsold tokens to multi-sign wallet\n', '    uint256 unsoldTokens = icoCap.sub(icoSoldTokens);\n', '    token.transfer(walletOne, unsoldTokens);\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return (icoEnded || icoSoldTokens >= icoCap || now > endTime);\n', '  }\n', '\n', '\n', '  function getRate() public constant returns(uint){\n', '    require(now >= startTime);\n', '      return STANDARD_RATE;\n', '\n', '  }\n', '\n', '  // drain all eth for owner in an emergency situation\n', '  function drain() external onlyOwner {\n', '    owner.transfer(address(this).balance);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', 'library SafeERC20 {\n', ' function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', ' mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '  /**\n', '   * @dev modifier to allow actions only when the contract is not paused or\n', '   * the sender is the owner of the contract\n', '   */\n', '  modifier whenNotPausedOrOwner() {\n', '    require(msg.sender == owner || !paused);\n', '    _;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPausedOrOwner returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPausedOrOwner returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPausedOrOwner returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPausedOrOwner returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPausedOrOwner returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '\n', '}\n', '\n', 'contract medibitToken is PausableToken {\n', '  string constant public name = "MEDIBIT";\n', '  string constant public symbol = "MEDIBIT";\n', '  uint256 constant public decimals = 18;\n', '  uint256 constant TOKEN_UNIT = 10 ** uint256(decimals);\n', '  uint256 constant INITIAL_SUPPLY = 50000000000 * TOKEN_UNIT;\n', '\n', '\n', '  function medibitToken() public {\n', '    // Set untransferable by default to the token\n', '    paused = true;\n', '    // asign all tokens to the contract creator\n', '    totalSupply = INITIAL_SUPPLY;\n', '    emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']