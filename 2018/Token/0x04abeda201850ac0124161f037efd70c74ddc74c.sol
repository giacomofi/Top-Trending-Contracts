['pragma solidity ^0.5.1;\n', '\n', 'library IterableMapping {\n', '  struct itmap\n', '  {\n', '    mapping(address => IndexValue) data;\n', '    KeyFlag[] keys;\n', '    uint size;\n', '  }\n', '  struct IndexValue { uint keyIndex; uint value; }\n', '  struct KeyFlag { address key; bool deleted; }\n', '  function insert(itmap storage self, address key, uint value) public returns (bool replaced)\n', '  {\n', '    uint keyIndex = self.data[key].keyIndex;\n', '    self.data[key].value = value;\n', '    if (keyIndex > 0)\n', '      return true;\n', '    else\n', '    {\n', '      keyIndex = self.keys.length++;\n', '      self.data[key].keyIndex = keyIndex + 1;\n', '      self.keys[keyIndex].key = key;\n', '      self.size++;\n', '      return false;\n', '    }\n', '  }\n', '  function remove(itmap storage self, address key) public returns (bool success)\n', '  {\n', '    uint keyIndex = self.data[key].keyIndex;\n', '    if (keyIndex == 0)\n', '      return false;\n', '    delete self.data[key];\n', '    self.keys[keyIndex - 1].deleted = true;\n', '    self.size --;\n', '  }\n', '  function contains(itmap storage self, address key) public view returns (bool)\n', '  {\n', '    return self.data[key].keyIndex > 0;\n', '  }\n', '  function iterate_start(itmap storage self) public view returns (uint keyIndex)\n', '  {\n', '    return iterate_next(self, uint(-1));\n', '  }\n', '  function iterate_valid(itmap storage self, uint keyIndex) public view returns (bool)\n', '  {\n', '    return keyIndex < self.keys.length;\n', '  }\n', '  function iterate_next(itmap storage self, uint keyIndex) public view returns (uint r_keyIndex)\n', '  {\n', '    keyIndex++;\n', '    while (keyIndex < self.keys.length && self.keys[keyIndex].deleted)\n', '      keyIndex++;\n', '    return keyIndex;\n', '  }\n', '  function iterate_get(itmap storage self, uint keyIndex) public view returns (address key, uint value)\n', '  {\n', '    key = self.keys[keyIndex].key;\n', '    value = self.data[key].value;\n', '  }\n', '  function iterate_getValue(itmap storage self, address key) public view returns (uint value) {\n', '      return self.data[key].value;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = _a / _b;\n', "    assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  IterableMapping.itmap balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '      \n', '    require(_value <= IterableMapping.iterate_getValue(balances, msg.sender));\n', '    require(_to != address(0));\n', '    \n', '    IterableMapping.insert(balances, msg.sender, IterableMapping.iterate_getValue(balances, msg.sender).sub(_value));\n', '    IterableMapping.insert(balances, _to, IterableMapping.iterate_getValue(balances, _to).add(_value));\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '      return IterableMapping.iterate_getValue(balances, _owner);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '      \n', '    require(_value <= IterableMapping.iterate_getValue(balances, _from));\n', '\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    IterableMapping.insert(balances, _from, IterableMapping.iterate_getValue(balances, _from).sub(_value));\n', '    IterableMapping.insert(balances, _to, IterableMapping.iterate_getValue(balances, _to).add(_value));\n', '\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract IBNEST is StandardToken {\n', '    \n', '    string public name = "NEST";\n', '    string public symbol = "NEST";\n', '    uint8 public decimals = 18;\n', '    uint256 public INITIAL_SUPPLY = 10000000000 ether;\n', '\n', '    constructor () public {\n', '    \ttotalSupply_ = INITIAL_SUPPLY;\n', '    \tIterableMapping.insert(balances, tx.origin, INITIAL_SUPPLY);\n', '    }\n', '    \n', '    function balancesStart() public view returns(uint256) {\n', '        return IterableMapping.iterate_start(balances);\n', '    }\n', '    \n', '    function balancesGetBool(uint256 num) public view returns(bool){\n', '        return IterableMapping.iterate_valid(balances, num);\n', '    }\n', '    \n', '    function balancesGetNext(uint256 num) public view returns(uint256) {\n', '        return IterableMapping.iterate_next(balances, num);\n', '    }\n', '    \n', '    function balancesGetValue(uint256 num) public view returns(address, uint256) {\n', '        address key;                           \n', '        uint256 value;                         \n', '        (key, value) = IterableMapping.iterate_get(balances, num);\n', '        return (key, value);\n', '    }\n', '    \n', '}']