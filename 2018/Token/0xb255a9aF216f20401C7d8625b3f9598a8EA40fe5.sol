['pragma solidity ^0.4.21;\n', '\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() public constant returns (uint supply);\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public constant returns (uint balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract RegularToken is Token {\n', '\n', '    function transfer(address _to, uint _value) public returns (bool) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", '        if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint)  {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\temit Approval(msg.sender, _spender, _value);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\t\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '    uint public totalSupply;\n', '}\n', '\n', 'contract UnboundedRegularToken is RegularToken {\n', '\n', '    uint constant MAX_UINT = 2**256 - 1;\n', '    \n', '    /// @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited amount.\n', '    /// @param _from Address to transfer from.\n', '    /// @param _to Address to transfer to.\n', '    /// @param _value Amount to transfer.\n', '    /// @return Success of transfer.\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        public returns (bool)\n', '    {\n', '        uint allowance = allowed[_from][msg.sender];\n', '        if (balances[_from] >= _value\n', '            && allowance >= _value\n', '            && balances[_to] + _value >= balances[_to]\n', '        ) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            if (allowance < MAX_UINT) {\n', '                allowed[_from][msg.sender] -= _value;\n', '            }\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '}\n', '\n', 'contract ApprovalReceiver {\n', '    function receiveApproval(address _from, uint _value, address _tokenContract, bytes _extraData) public;\n', '}\n', 'contract TransferReceiver {\n', '    function receiveTransfer(address _from, uint _value, address _tokenContract, bytes _extraData) public;\n', '}\n', '\n', 'contract BYBToken is UnboundedRegularToken {\n', '\n', '    uint public totalSupply = 20*10**10;\n', '    uint8 constant public decimals = 2;\n', '    string constant public name = "Bitin Token";\n', '    string constant public symbol = "BYB";\n', '\taddress public owner;\n', '\tmapping (address => uint) public freezes;\n', '\n', '\t/* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint value);\n', '\t\n', '\t/* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed from, uint value);\n', '\t\n', '\t/* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed from, uint value);\n', '\t\n', '    function BYBToken() public {\n', '        balances[msg.sender] = totalSupply;\n', '\t\towner = msg.sender;\n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '\t\n', '\tfunction totalSupply() public constant returns (uint){\n', '\t\treturn totalSupply;\n', '\t}\n', '    \n', '    function burn(uint _value) public returns (bool success) {\n', '\t\tif (balances[msg.sender] >= _value && totalSupply - _value <= totalSupply){\n', '\t\t\tbalances[msg.sender] -= _value; \t\t\t\t\t\t\t\t// Subtract from the sender\n', '            totalSupply -= _value;\n', '\t\t\temit Burn(msg.sender, _value);\n', '\t\t\treturn true;\n', '\t\t}else {\n', '            return false;\n', '        }    \n', '    }\n', '\t\n', '\tfunction freeze(uint _value) public returns (bool success) {\n', '\t\tif (balances[msg.sender] >= _value &&\n', '\t\tfreezes[msg.sender] + _value >= freezes[msg.sender]){\n', '\t\t\tbalances[msg.sender] -= _value;   \t\t\t\t// Subtract from the sender\n', '\t\t\tfreezes[msg.sender] += _value;            \t\t// Updates totalSupply\n', '\t\t\temit Freeze(msg.sender, _value);\n', '\t\t\treturn true;\n', '\t\t}else {\n', '            return false;\n', '        }  \n', '    }\n', '\t\n', '\tfunction unfreeze(uint _value) public returns (bool success) {\n', '        if (freezes[msg.sender] >= _value &&\n', '\t\tbalances[msg.sender] + _value >= balances[msg.sender]){\n', '\t\t\tfreezes[msg.sender] -= _value;\n', '\t\t\tbalances[msg.sender] += _value;\n', '\t\t\temit Unfreeze(msg.sender, _value);\n', '\t\t\treturn true;\n', '\t\t}else {\n', '            return false;\n', '        } \n', '    }\n', '\t\n', '\tfunction transferAndCall(address _to, uint _value, bytes _extraData) public returns (bool success) {\n', '\t\tif(transfer(_to,_value)){\n', '\t\t\tTransferReceiver(_to).receiveTransfer(msg.sender, _value, this, _extraData); \n', '\t\t\treturn true; \n', '\t\t}\n', '\t\telse {\n', '            return false;\n', '        } \n', '    }\n', '\t\n', '\tfunction approveAndCall(address _spender, uint _value, bytes _extraData) public returns (bool success) {\n', '\t\tif(approve(_spender,_value)){\n', '\t\t\tApprovalReceiver(_spender).receiveApproval(msg.sender, _value, this, _extraData) ;\n', '\t\t\treturn true; \n', '\t\t}\n', '\t\telse {\n', '            return false;\n', '        }  \n', '    }\n', '\t\n', '\t// transfer balance to owner\n', '\tfunction withdrawEther(uint amount) public {\n', '\t\tif(msg.sender == owner){\n', '\t\t\towner.transfer(amount);\n', '\t\t}\n', '\t}\n', '\t\n', '\t// can accept ether\n', '\tfunction() public payable {\n', '    }\n', '}']