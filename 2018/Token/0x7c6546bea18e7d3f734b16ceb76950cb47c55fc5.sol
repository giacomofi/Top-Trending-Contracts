['pragma solidity ^0.4.23;\n', '\n', '\n', 'contract MintableTokenIface {\n', '    function mint(address beneficiary, uint256 amount) public returns (bool);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', '\n', 'contract BatchAirDrop {\n', '    MintableTokenIface public token;\n', '    address public owner;\n', '\n', '    constructor(MintableTokenIface _token) public {\n', '        owner = msg.sender;\n', '        token = _token;\n', '    }\n', '\n', '    function batchSend(uint256 amount, address[] wallets) public {\n', '        require(msg.sender == owner);\n', '        require(amount != 0);\n', '        for (uint256 i = 0; i < wallets.length; i++) {\n', '            token.transfer(wallets[i], amount);\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '\n', 'contract MintableTokenIface {\n', '    function mint(address beneficiary, uint256 amount) public returns (bool);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', '\n', 'contract BatchAirDrop {\n', '    MintableTokenIface public token;\n', '    address public owner;\n', '\n', '    constructor(MintableTokenIface _token) public {\n', '        owner = msg.sender;\n', '        token = _token;\n', '    }\n', '\n', '    function batchSend(uint256 amount, address[] wallets) public {\n', '        require(msg.sender == owner);\n', '        require(amount != 0);\n', '        for (uint256 i = 0; i < wallets.length; i++) {\n', '            token.transfer(wallets[i], amount);\n', '        }\n', '    }\n', '}']
