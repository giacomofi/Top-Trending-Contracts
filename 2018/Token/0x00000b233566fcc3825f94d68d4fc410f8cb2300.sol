['pragma solidity ^0.4.21;\n', '\n', '// ----------------------------------------------------------------------------\n', '// NRM token main contract\n', '//\n', '// Symbol       : NRM\n', '// Name         : Neuromachine\n', '// Total supply : 4.958.333.333,000000000000000000 (burnable)\n', '// Decimals     : 18\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe math\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// NRM ERC20 Token - Neuromachine token contract\n', '// ----------------------------------------------------------------------------\n', 'contract NRM is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '\n', '    bool public running = true;\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint _totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    address public FreezeAddress;\n', '    uint256 public FreezeTokens;\n', '    uint256 public FreezeTokensReleaseTime;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Contract init. Set symbol, name, decimals and initial fixed supply\n', '    // ------------------------------------------------------------------------\n', '    function NRM() public {\n', '        symbol = "NRM";\n', '        name = "Neuromachine";\n', '        decimals = 18;\n', '        _totalSupply = 4958333333 * 10**uint(decimals);\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    // ------------------------------------------------------------------------\n', '    // Team and develop tokens transfer to freeze account for 365 days\n', '    // ------------------------------------------------------------------------\n', '        FreezeAddress = 0x7777777777777777777777777777777777777777;\n', '        FreezeTokens = _totalSupply.mul(30).div(100);\n', '\n', '        balances[owner] = balances[owner].sub(FreezeTokens);\n', '        balances[FreezeAddress] = balances[FreezeAddress].add(FreezeTokens);\n', '        emit Transfer(owner, FreezeAddress, FreezeTokens);\n', '        FreezeTokensReleaseTime = now + 365 days;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Team and tokens unfreeze after 365 days from contract deploy\n', '    // ------------------------------------------------------------------------\n', '\n', '    function unfreezeTeamTokens(address unFreezeAddress) public onlyOwner returns (bool success) {\n', '        require(balances[FreezeAddress] > 0);\n', '        require(now >= FreezeTokensReleaseTime);\n', '        balances[FreezeAddress] = balances[FreezeAddress].sub(FreezeTokens);\n', '        balances[unFreezeAddress] = balances[unFreezeAddress].add(FreezeTokens);\n', '        emit Transfer(FreezeAddress, unFreezeAddress, FreezeTokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Start-stop contract functions:\n', '    // transfer, approve, transferFrom, approveAndCall\n', '    // ------------------------------------------------------------------------\n', '\n', '    modifier isRunnning {\n', '        require(running);\n', '        _;\n', '    }\n', '\n', '\n', '    function startStop () public onlyOwner returns (bool success) {\n', '        if (running) { running = false; } else { running = true; }\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public isRunnning returns (bool success) {\n', '        require(tokens <= balances[msg.sender]);\n', '        require(tokens != 0);\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public isRunnning returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public isRunnning returns (bool success) {\n', '        require(tokens <= balances[from]);\n', '        require(tokens <= allowed[from][msg.sender]);\n', '        require(tokens != 0);\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account. The `spender` contract function\n', '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public isRunnning returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Tokens burn\n', '    // ------------------------------------------------------------------------\n', '\n', '    function burnTokens(uint256 tokens) public returns (bool success) {\n', '        require(tokens <= balances[msg.sender]);\n', '        require(tokens != 0);\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        _totalSupply = _totalSupply.sub(tokens);\n', '        emit Transfer(msg.sender, address(0), tokens);\n', '        return true;\n', '    }    \n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Tokens multisend from owner only by owner\n', '    // ------------------------------------------------------------------------\n', '    function multisend(address[] to, uint256[] values) public onlyOwner returns (uint256) {\n', '        for (uint256 i = 0; i < to.length; i++) {\n', '            balances[owner] = balances[owner].sub(values[i]);\n', '            balances[to[i]] = balances[to[i]].add(values[i]);\n', '            emit Transfer(owner, to[i], values[i]);\n', '        }\n', '        return(i);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '// ----------------------------------------------------------------------------\n', '// NRM token main contract\n', '//\n', '// Symbol       : NRM\n', '// Name         : Neuromachine\n', '// Total supply : 4.958.333.333,000000000000000000 (burnable)\n', '// Decimals     : 18\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe math\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// NRM ERC20 Token - Neuromachine token contract\n', '// ----------------------------------------------------------------------------\n', 'contract NRM is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '\n', '    bool public running = true;\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint _totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    address public FreezeAddress;\n', '    uint256 public FreezeTokens;\n', '    uint256 public FreezeTokensReleaseTime;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Contract init. Set symbol, name, decimals and initial fixed supply\n', '    // ------------------------------------------------------------------------\n', '    function NRM() public {\n', '        symbol = "NRM";\n', '        name = "Neuromachine";\n', '        decimals = 18;\n', '        _totalSupply = 4958333333 * 10**uint(decimals);\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    // ------------------------------------------------------------------------\n', '    // Team and develop tokens transfer to freeze account for 365 days\n', '    // ------------------------------------------------------------------------\n', '        FreezeAddress = 0x7777777777777777777777777777777777777777;\n', '        FreezeTokens = _totalSupply.mul(30).div(100);\n', '\n', '        balances[owner] = balances[owner].sub(FreezeTokens);\n', '        balances[FreezeAddress] = balances[FreezeAddress].add(FreezeTokens);\n', '        emit Transfer(owner, FreezeAddress, FreezeTokens);\n', '        FreezeTokensReleaseTime = now + 365 days;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Team and tokens unfreeze after 365 days from contract deploy\n', '    // ------------------------------------------------------------------------\n', '\n', '    function unfreezeTeamTokens(address unFreezeAddress) public onlyOwner returns (bool success) {\n', '        require(balances[FreezeAddress] > 0);\n', '        require(now >= FreezeTokensReleaseTime);\n', '        balances[FreezeAddress] = balances[FreezeAddress].sub(FreezeTokens);\n', '        balances[unFreezeAddress] = balances[unFreezeAddress].add(FreezeTokens);\n', '        emit Transfer(FreezeAddress, unFreezeAddress, FreezeTokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Start-stop contract functions:\n', '    // transfer, approve, transferFrom, approveAndCall\n', '    // ------------------------------------------------------------------------\n', '\n', '    modifier isRunnning {\n', '        require(running);\n', '        _;\n', '    }\n', '\n', '\n', '    function startStop () public onlyOwner returns (bool success) {\n', '        if (running) { running = false; } else { running = true; }\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public isRunnning returns (bool success) {\n', '        require(tokens <= balances[msg.sender]);\n', '        require(tokens != 0);\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public isRunnning returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public isRunnning returns (bool success) {\n', '        require(tokens <= balances[from]);\n', '        require(tokens <= allowed[from][msg.sender]);\n', '        require(tokens != 0);\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account. The `spender` contract function\n", '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public isRunnning returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Tokens burn\n', '    // ------------------------------------------------------------------------\n', '\n', '    function burnTokens(uint256 tokens) public returns (bool success) {\n', '        require(tokens <= balances[msg.sender]);\n', '        require(tokens != 0);\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        _totalSupply = _totalSupply.sub(tokens);\n', '        emit Transfer(msg.sender, address(0), tokens);\n', '        return true;\n', '    }    \n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Tokens multisend from owner only by owner\n', '    // ------------------------------------------------------------------------\n', '    function multisend(address[] to, uint256[] values) public onlyOwner returns (uint256) {\n', '        for (uint256 i = 0; i < to.length; i++) {\n', '            balances[owner] = balances[owner].sub(values[i]);\n', '            balances[to[i]] = balances[to[i]].add(values[i]);\n', '            emit Transfer(owner, to[i], values[i]);\n', '        }\n', '        return(i);\n', '    }\n', '}']
