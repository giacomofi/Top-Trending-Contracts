['pragma solidity ^0.4.19;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  constructor() public { owner = msg.sender;  }\n', ' \n', '  modifier onlyOwner() {     \n', '      address sender =  msg.sender;\n', '      address _owner = owner;\n', '      require(msg.sender == _owner);    \n', '      _;  \n', '  }\n', '  \n', '  function transferOwnership(address newOwner) onlyOwner public { \n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract SelfDestroy is Ownable {\n', '    using SafeMath for uint256;\n', '    uint256 public weiAmount = 0;\n', '    constructor() public {}\n', '   \n', '   // fallback function to receive ether\n', '    function () public payable {\n', '        weiAmount = weiAmount + msg.value;\n', '    }\n', '   \n', '   function destroy(address _address) public onlyOwner {\n', '       selfdestruct(_address);\n', '   }\n', '\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  constructor() public { owner = msg.sender;  }\n', ' \n', '  modifier onlyOwner() {     \n', '      address sender =  msg.sender;\n', '      address _owner = owner;\n', '      require(msg.sender == _owner);    \n', '      _;  \n', '  }\n', '  \n', '  function transferOwnership(address newOwner) onlyOwner public { \n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract SelfDestroy is Ownable {\n', '    using SafeMath for uint256;\n', '    uint256 public weiAmount = 0;\n', '    constructor() public {}\n', '   \n', '   // fallback function to receive ether\n', '    function () public payable {\n', '        weiAmount = weiAmount + msg.value;\n', '    }\n', '   \n', '   function destroy(address _address) public onlyOwner {\n', '       selfdestruct(_address);\n', '   }\n', '\n', '}']
