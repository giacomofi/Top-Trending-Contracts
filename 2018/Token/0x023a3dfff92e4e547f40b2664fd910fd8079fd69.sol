['pragma solidity 0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: contracts/robonomics/XRT.sol\n', '\n', 'contract XRT is MintableToken, BurnableToken {\n', '    string public constant name     = "Robonomics Beta";\n', '    string public constant symbol   = "XRT";\n', '    uint   public constant decimals = 9;\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 10000 * (10 ** uint256(decimals));\n', '\n', '    constructor() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    }\n', '}\n', '\n', '// File: contracts/robonomics/DutchAuction.sol\n', '\n', '/// @title Dutch auction contract - distribution of XRT tokens using an auction.\n', '/// @author Stefan George - <<span class="__cf_email__" data-cfemail="3b484f5e5d5a55155c5e54495c5e7b585455485e5548424815555e4f">[email&#160;protected]</span>>\n', '/// @author Airalab - <<span class="__cf_email__" data-cfemail="fc8e998f999d8e9f94bc9d958e9dd290959a99">[email&#160;protected]</span>> \n', 'contract DutchAuction {\n', '\n', '    /*\n', '     *  Events\n', '     */\n', '    event BidSubmission(address indexed sender, uint256 amount);\n', '\n', '    /*\n', '     *  Constants\n', '     */\n', '    uint constant public MAX_TOKENS_SOLD = 8000 * 10**9; // 8M XRT = 10M - 1M (Foundation) - 1M (Early investors base)\n', '    uint constant public WAITING_PERIOD = 0; // 1 days;\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '    XRT     public xrt;\n', '    address public ambix;\n', '    address public wallet;\n', '    address public owner;\n', '    uint public ceiling;\n', '    uint public priceFactor;\n', '    uint public startBlock;\n', '    uint public endTime;\n', '    uint public totalReceived;\n', '    uint public finalPrice;\n', '    mapping (address => uint) public bids;\n', '    Stages public stage;\n', '\n', '    /*\n', '     *  Enums\n', '     */\n', '    enum Stages {\n', '        AuctionDeployed,\n', '        AuctionSetUp,\n', '        AuctionStarted,\n', '        AuctionEnded,\n', '        TradingStarted\n', '    }\n', '\n', '    /*\n', '     *  Modifiers\n', '     */\n', '    modifier atStage(Stages _stage) {\n', '        // Contract on stage\n', '        require(stage == _stage);\n', '        _;\n', '    }\n', '\n', '    modifier isOwner() {\n', '        // Only owner is allowed to proceed\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier isWallet() {\n', '        // Only wallet is allowed to proceed\n', '        require(msg.sender == wallet);\n', '        _;\n', '    }\n', '\n', '    modifier isValidPayload() {\n', '        require(msg.data.length == 4 || msg.data.length == 36);\n', '        _;\n', '    }\n', '\n', '    modifier timedTransitions() {\n', '        if (stage == Stages.AuctionStarted && calcTokenPrice() <= calcStopPrice())\n', '            finalizeAuction();\n', '        if (stage == Stages.AuctionEnded && now > endTime + WAITING_PERIOD)\n', '            stage = Stages.TradingStarted;\n', '        _;\n', '    }\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @dev Contract constructor function sets owner.\n', '    /// @param _wallet Multisig wallet.\n', '    /// @param _ceiling Auction ceiling.\n', '    /// @param _priceFactor Auction price factor.\n', '    constructor(address _wallet, uint _ceiling, uint _priceFactor)\n', '        public\n', '    {\n', '        require(_wallet != 0 && _ceiling != 0 && _priceFactor != 0);\n', '        owner = msg.sender;\n', '        wallet = _wallet;\n', '        ceiling = _ceiling;\n', '        priceFactor = _priceFactor;\n', '        stage = Stages.AuctionDeployed;\n', '    }\n', '\n', '    /// @dev Setup function sets external contracts&#39; addresses.\n', '    /// @param _xrt Robonomics token address.\n', '    /// @param _ambix Distillation cube address.\n', '    function setup(address _xrt, address _ambix)\n', '        public\n', '        isOwner\n', '        atStage(Stages.AuctionDeployed)\n', '    {\n', '        // Validate argument\n', '        require(_xrt != 0 && _ambix != 0);\n', '        xrt = XRT(_xrt);\n', '        ambix = _ambix;\n', '\n', '        // Validate token balance\n', '        require(xrt.balanceOf(this) == MAX_TOKENS_SOLD);\n', '\n', '        stage = Stages.AuctionSetUp;\n', '    }\n', '\n', '    /// @dev Starts auction and sets startBlock.\n', '    function startAuction()\n', '        public\n', '        isWallet\n', '        atStage(Stages.AuctionSetUp)\n', '    {\n', '        stage = Stages.AuctionStarted;\n', '        startBlock = block.number;\n', '    }\n', '\n', '    /// @dev Changes auction ceiling and start price factor before auction is started.\n', '    /// @param _ceiling Updated auction ceiling.\n', '    /// @param _priceFactor Updated start price factor.\n', '    function changeSettings(uint _ceiling, uint _priceFactor)\n', '        public\n', '        isWallet\n', '        atStage(Stages.AuctionSetUp)\n', '    {\n', '        ceiling = _ceiling;\n', '        priceFactor = _priceFactor;\n', '    }\n', '\n', '    /// @dev Calculates current token price.\n', '    /// @return Returns token price.\n', '    function calcCurrentTokenPrice()\n', '        public\n', '        timedTransitions\n', '        returns (uint)\n', '    {\n', '        if (stage == Stages.AuctionEnded || stage == Stages.TradingStarted)\n', '            return finalPrice;\n', '        return calcTokenPrice();\n', '    }\n', '\n', '    /// @dev Returns correct stage, even if a function with timedTransitions modifier has not yet been called yet.\n', '    /// @return Returns current auction stage.\n', '    function updateStage()\n', '        public\n', '        timedTransitions\n', '        returns (Stages)\n', '    {\n', '        return stage;\n', '    }\n', '\n', '    /// @dev Allows to send a bid to the auction.\n', '    /// @param receiver Bid will be assigned to this address if set.\n', '    function bid(address receiver)\n', '        public\n', '        payable\n', '        isValidPayload\n', '        timedTransitions\n', '        atStage(Stages.AuctionStarted)\n', '        returns (uint amount)\n', '    {\n', '        require(msg.value > 0);\n', '        amount = msg.value;\n', '\n', '        // If a bid is done on behalf of a user via ShapeShift, the receiver address is set.\n', '        if (receiver == 0)\n', '            receiver = msg.sender;\n', '\n', '        // Prevent that more than 90% of tokens are sold. Only relevant if cap not reached.\n', '        uint maxWei = MAX_TOKENS_SOLD * calcTokenPrice() / 10**9 - totalReceived;\n', '        uint maxWeiBasedOnTotalReceived = ceiling - totalReceived;\n', '        if (maxWeiBasedOnTotalReceived < maxWei)\n', '            maxWei = maxWeiBasedOnTotalReceived;\n', '\n', '        // Only invest maximum possible amount.\n', '        if (amount > maxWei) {\n', '            amount = maxWei;\n', '            // Send change back to receiver address. In case of a ShapeShift bid the user receives the change back directly.\n', '            receiver.transfer(msg.value - amount);\n', '        }\n', '\n', '        // Forward funding to ether wallet\n', '        wallet.transfer(amount);\n', '\n', '        bids[receiver] += amount;\n', '        totalReceived += amount;\n', '        BidSubmission(receiver, amount);\n', '\n', '        // Finalize auction when maxWei reached\n', '        if (amount == maxWei)\n', '            finalizeAuction();\n', '    }\n', '\n', '    /// @dev Claims tokens for bidder after auction.\n', '    /// @param receiver Tokens will be assigned to this address if set.\n', '    function claimTokens(address receiver)\n', '        public\n', '        isValidPayload\n', '        timedTransitions\n', '        atStage(Stages.TradingStarted)\n', '    {\n', '        if (receiver == 0)\n', '            receiver = msg.sender;\n', '        uint tokenCount = bids[receiver] * 10**9 / finalPrice;\n', '        bids[receiver] = 0;\n', '        require(xrt.transfer(receiver, tokenCount));\n', '    }\n', '\n', '    /// @dev Calculates stop price.\n', '    /// @return Returns stop price.\n', '    function calcStopPrice()\n', '        view\n', '        public\n', '        returns (uint)\n', '    {\n', '        return totalReceived * 10**9 / MAX_TOKENS_SOLD + 1;\n', '    }\n', '\n', '    /// @dev Calculates token price.\n', '    /// @return Returns token price.\n', '    function calcTokenPrice()\n', '        view\n', '        public\n', '        returns (uint)\n', '    {\n', '        return priceFactor * 10**18 / (block.number - startBlock + 7500) + 1;\n', '    }\n', '\n', '    /*\n', '     *  Private functions\n', '     */\n', '    function finalizeAuction()\n', '        private\n', '    {\n', '        stage = Stages.AuctionEnded;\n', '        finalPrice = totalReceived == ceiling ? calcTokenPrice() : calcStopPrice();\n', '        uint soldTokens = totalReceived * 10**9 / finalPrice;\n', '\n', '        if (totalReceived == ceiling) {\n', '            // Auction contract transfers all unsold tokens to Ambix contract\n', '            require(xrt.transfer(ambix, MAX_TOKENS_SOLD - soldTokens));\n', '        } else {\n', '            // Auction contract burn all unsold tokens\n', '            xrt.burn(MAX_TOKENS_SOLD - soldTokens);\n', '        }\n', '\n', '        endTime = now;\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: contracts/robonomics/XRT.sol\n', '\n', 'contract XRT is MintableToken, BurnableToken {\n', '    string public constant name     = "Robonomics Beta";\n', '    string public constant symbol   = "XRT";\n', '    uint   public constant decimals = 9;\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 10000 * (10 ** uint256(decimals));\n', '\n', '    constructor() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    }\n', '}\n', '\n', '// File: contracts/robonomics/DutchAuction.sol\n', '\n', '/// @title Dutch auction contract - distribution of XRT tokens using an auction.\n', '/// @author Stefan George - <stefan.george@consensys.net>\n', '/// @author Airalab - <research@aira.life> \n', 'contract DutchAuction {\n', '\n', '    /*\n', '     *  Events\n', '     */\n', '    event BidSubmission(address indexed sender, uint256 amount);\n', '\n', '    /*\n', '     *  Constants\n', '     */\n', '    uint constant public MAX_TOKENS_SOLD = 8000 * 10**9; // 8M XRT = 10M - 1M (Foundation) - 1M (Early investors base)\n', '    uint constant public WAITING_PERIOD = 0; // 1 days;\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '    XRT     public xrt;\n', '    address public ambix;\n', '    address public wallet;\n', '    address public owner;\n', '    uint public ceiling;\n', '    uint public priceFactor;\n', '    uint public startBlock;\n', '    uint public endTime;\n', '    uint public totalReceived;\n', '    uint public finalPrice;\n', '    mapping (address => uint) public bids;\n', '    Stages public stage;\n', '\n', '    /*\n', '     *  Enums\n', '     */\n', '    enum Stages {\n', '        AuctionDeployed,\n', '        AuctionSetUp,\n', '        AuctionStarted,\n', '        AuctionEnded,\n', '        TradingStarted\n', '    }\n', '\n', '    /*\n', '     *  Modifiers\n', '     */\n', '    modifier atStage(Stages _stage) {\n', '        // Contract on stage\n', '        require(stage == _stage);\n', '        _;\n', '    }\n', '\n', '    modifier isOwner() {\n', '        // Only owner is allowed to proceed\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier isWallet() {\n', '        // Only wallet is allowed to proceed\n', '        require(msg.sender == wallet);\n', '        _;\n', '    }\n', '\n', '    modifier isValidPayload() {\n', '        require(msg.data.length == 4 || msg.data.length == 36);\n', '        _;\n', '    }\n', '\n', '    modifier timedTransitions() {\n', '        if (stage == Stages.AuctionStarted && calcTokenPrice() <= calcStopPrice())\n', '            finalizeAuction();\n', '        if (stage == Stages.AuctionEnded && now > endTime + WAITING_PERIOD)\n', '            stage = Stages.TradingStarted;\n', '        _;\n', '    }\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @dev Contract constructor function sets owner.\n', '    /// @param _wallet Multisig wallet.\n', '    /// @param _ceiling Auction ceiling.\n', '    /// @param _priceFactor Auction price factor.\n', '    constructor(address _wallet, uint _ceiling, uint _priceFactor)\n', '        public\n', '    {\n', '        require(_wallet != 0 && _ceiling != 0 && _priceFactor != 0);\n', '        owner = msg.sender;\n', '        wallet = _wallet;\n', '        ceiling = _ceiling;\n', '        priceFactor = _priceFactor;\n', '        stage = Stages.AuctionDeployed;\n', '    }\n', '\n', "    /// @dev Setup function sets external contracts' addresses.\n", '    /// @param _xrt Robonomics token address.\n', '    /// @param _ambix Distillation cube address.\n', '    function setup(address _xrt, address _ambix)\n', '        public\n', '        isOwner\n', '        atStage(Stages.AuctionDeployed)\n', '    {\n', '        // Validate argument\n', '        require(_xrt != 0 && _ambix != 0);\n', '        xrt = XRT(_xrt);\n', '        ambix = _ambix;\n', '\n', '        // Validate token balance\n', '        require(xrt.balanceOf(this) == MAX_TOKENS_SOLD);\n', '\n', '        stage = Stages.AuctionSetUp;\n', '    }\n', '\n', '    /// @dev Starts auction and sets startBlock.\n', '    function startAuction()\n', '        public\n', '        isWallet\n', '        atStage(Stages.AuctionSetUp)\n', '    {\n', '        stage = Stages.AuctionStarted;\n', '        startBlock = block.number;\n', '    }\n', '\n', '    /// @dev Changes auction ceiling and start price factor before auction is started.\n', '    /// @param _ceiling Updated auction ceiling.\n', '    /// @param _priceFactor Updated start price factor.\n', '    function changeSettings(uint _ceiling, uint _priceFactor)\n', '        public\n', '        isWallet\n', '        atStage(Stages.AuctionSetUp)\n', '    {\n', '        ceiling = _ceiling;\n', '        priceFactor = _priceFactor;\n', '    }\n', '\n', '    /// @dev Calculates current token price.\n', '    /// @return Returns token price.\n', '    function calcCurrentTokenPrice()\n', '        public\n', '        timedTransitions\n', '        returns (uint)\n', '    {\n', '        if (stage == Stages.AuctionEnded || stage == Stages.TradingStarted)\n', '            return finalPrice;\n', '        return calcTokenPrice();\n', '    }\n', '\n', '    /// @dev Returns correct stage, even if a function with timedTransitions modifier has not yet been called yet.\n', '    /// @return Returns current auction stage.\n', '    function updateStage()\n', '        public\n', '        timedTransitions\n', '        returns (Stages)\n', '    {\n', '        return stage;\n', '    }\n', '\n', '    /// @dev Allows to send a bid to the auction.\n', '    /// @param receiver Bid will be assigned to this address if set.\n', '    function bid(address receiver)\n', '        public\n', '        payable\n', '        isValidPayload\n', '        timedTransitions\n', '        atStage(Stages.AuctionStarted)\n', '        returns (uint amount)\n', '    {\n', '        require(msg.value > 0);\n', '        amount = msg.value;\n', '\n', '        // If a bid is done on behalf of a user via ShapeShift, the receiver address is set.\n', '        if (receiver == 0)\n', '            receiver = msg.sender;\n', '\n', '        // Prevent that more than 90% of tokens are sold. Only relevant if cap not reached.\n', '        uint maxWei = MAX_TOKENS_SOLD * calcTokenPrice() / 10**9 - totalReceived;\n', '        uint maxWeiBasedOnTotalReceived = ceiling - totalReceived;\n', '        if (maxWeiBasedOnTotalReceived < maxWei)\n', '            maxWei = maxWeiBasedOnTotalReceived;\n', '\n', '        // Only invest maximum possible amount.\n', '        if (amount > maxWei) {\n', '            amount = maxWei;\n', '            // Send change back to receiver address. In case of a ShapeShift bid the user receives the change back directly.\n', '            receiver.transfer(msg.value - amount);\n', '        }\n', '\n', '        // Forward funding to ether wallet\n', '        wallet.transfer(amount);\n', '\n', '        bids[receiver] += amount;\n', '        totalReceived += amount;\n', '        BidSubmission(receiver, amount);\n', '\n', '        // Finalize auction when maxWei reached\n', '        if (amount == maxWei)\n', '            finalizeAuction();\n', '    }\n', '\n', '    /// @dev Claims tokens for bidder after auction.\n', '    /// @param receiver Tokens will be assigned to this address if set.\n', '    function claimTokens(address receiver)\n', '        public\n', '        isValidPayload\n', '        timedTransitions\n', '        atStage(Stages.TradingStarted)\n', '    {\n', '        if (receiver == 0)\n', '            receiver = msg.sender;\n', '        uint tokenCount = bids[receiver] * 10**9 / finalPrice;\n', '        bids[receiver] = 0;\n', '        require(xrt.transfer(receiver, tokenCount));\n', '    }\n', '\n', '    /// @dev Calculates stop price.\n', '    /// @return Returns stop price.\n', '    function calcStopPrice()\n', '        view\n', '        public\n', '        returns (uint)\n', '    {\n', '        return totalReceived * 10**9 / MAX_TOKENS_SOLD + 1;\n', '    }\n', '\n', '    /// @dev Calculates token price.\n', '    /// @return Returns token price.\n', '    function calcTokenPrice()\n', '        view\n', '        public\n', '        returns (uint)\n', '    {\n', '        return priceFactor * 10**18 / (block.number - startBlock + 7500) + 1;\n', '    }\n', '\n', '    /*\n', '     *  Private functions\n', '     */\n', '    function finalizeAuction()\n', '        private\n', '    {\n', '        stage = Stages.AuctionEnded;\n', '        finalPrice = totalReceived == ceiling ? calcTokenPrice() : calcStopPrice();\n', '        uint soldTokens = totalReceived * 10**9 / finalPrice;\n', '\n', '        if (totalReceived == ceiling) {\n', '            // Auction contract transfers all unsold tokens to Ambix contract\n', '            require(xrt.transfer(ambix, MAX_TOKENS_SOLD - soldTokens));\n', '        } else {\n', '            // Auction contract burn all unsold tokens\n', '            xrt.burn(MAX_TOKENS_SOLD - soldTokens);\n', '        }\n', '\n', '        endTime = now;\n', '    }\n', '}']
