['pragma solidity ^0.4.22;\n', '\n', 'interface tokenRecipient { \n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\n', '}\n', '\n', '// copy from openzeppelin-solidity/contracts/math/SafeMath.sol\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public  {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public  onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() external onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    emit Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() external onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    emit Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract BGCGToken is Pausable {\n', '\n', '  using SafeMath for SafeMath;\n', '\n', '  string public name = "Blockchain Game Coalition Gold";\n', '  string public symbol = "BGCG";\n', '  uint8 public decimals = 18;\n', '  uint256 public totalSupply = 10000000000 * 10 ** uint256(decimals); // 10 billion tokens\n', '\n', ' \n', '  mapping (address => uint256) public balanceOf;\n', '  mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '  \n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Burn(address indexed from, uint256 value);\n', '\n', ' mapping (address => bool) public frozenAccount;\n', ' event FrozenFunds(address target, bool frozen);\n', '\n', '\n', '\n', ' constructor() public payable {\n', '    balanceOf[msg.sender] = totalSupply;\n', '    owner = msg.sender;\n', '  }\n', '\n', '  //make this contract can receive ETH \n', '  function() public payable {\n', '       \n', '    }\n', '\n', '  \n', '//only owner can withdraw all contract&#39;s ETH  \n', '  function withdraw() public onlyOwner {\n', '      owner.transfer(address(this).balance); \n', '    }\n', '\n', '//msg.sender approve he&#39;s allowance to _spender\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool success) {\n', '    require((_value == 0 ) || ( allowance[msg.sender][_spender] == 0  ));\n', '    require(!frozenAccount[msg.sender]);\n', '    require(!frozenAccount[_spender]);\n', '   \n', '    allowance[msg.sender][_spender] = _value;\n', '\n', '    emit Approval(msg.sender,_spender, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '   \n', '  function approveAndCall(address _spender, uint256 _value, bytes _extraData) public whenNotPaused returns (bool success) {\n', '    tokenRecipient spender = tokenRecipient(_spender);\n', '    if (approve(_spender, _value)) {\n', '      spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '      return true;\n', '      }\n', '  }\n', '\n', '  \n', '  function burn(uint256 _value) public whenNotPaused returns (bool success) {\n', '    require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '    require(totalSupply >= _value );\n', '    require( _value > 0 );\n', '\n', '    balanceOf[msg.sender] = SafeMath.sub( balanceOf[msg.sender],_value);            // Subtract from the sender\n', '    totalSupply = SafeMath.sub(totalSupply, _value);                      // Updates totalSupply\n', '    emit Burn(msg.sender, _value);\n', '    return true;\n', '  }\n', '\n', '  \n', '  function burnFrom(address _from, uint256 _value) public whenNotPaused returns (bool success) {\n', '    require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '    require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '    require(totalSupply >= _value );\n', '    require( _value > 0 );\n', '\n', '    balanceOf[_from] = SafeMath.sub(balanceOf[_from], _value);                         // Subtract from the targeted balance\n', '    allowance[_from][msg.sender] = SafeMath.sub(allowance[_from][msg.sender], _value);             // Subtract from the sender&#39;s allowance\n', '    totalSupply = SafeMath.sub(totalSupply, _value);                              // Update totalSupply\n', '    emit Burn(_from, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '\n', '// Send `_value` tokens to `_to` from msg.sender\n', ' function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    require( _value > 0 );\n', '    require(_to != address(0)); \n', '    require(msg.sender != _to );// forbit to transfer to himself\n', '    require(balanceOf[msg.sender] >= _value);\n', '    require(SafeMath.add(balanceOf[_to],_value) > balanceOf[_to]);  //SafeMath pretect not overflow\n', '\n', '\n', '    require(!frozenAccount[msg.sender]);\n', '    require(!frozenAccount[_to]);\n', '    \n', '    uint256 previousBalances = balanceOf[msg.sender] + balanceOf[_to]; \n', '\n', '    balanceOf[msg.sender] = SafeMath.sub(balanceOf[msg.sender],_value);\n', '    balanceOf[_to] = SafeMath.add(balanceOf[_to],_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '\n', '    // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '    assert(balanceOf[msg.sender] + balanceOf[_to] == previousBalances);\n', '\n', '    return true;\n', '  }\n', '\n', '//Send `_value` tokens to `_to` from &#39;_from&#39; address,the &#39;_value&#39; can&#39;t larger then allowance by &#39;_from&#39; who set to &#39;msg.sender&#39; \n', 'function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    require( _value > 0 );\n', '    require(_to != address(0));\n', '    require(_from != address(0));\n', '  \n', '    require(_value <= balanceOf[_from]);\n', '    require(_value <= allowance[_from][msg.sender]);\n', '    require(SafeMath.add(balanceOf[_to],_value) > balanceOf[_to]); //SafeMath pretect not overflow\n', '\n', '    require(!frozenAccount[_from]);\n', '    require(!frozenAccount[_to]);\n', '\n', '    balanceOf[_from] = SafeMath.sub(balanceOf[_from],_value);\n', '    balanceOf[_to] = SafeMath.add(balanceOf[_to],_value);\n', '    allowance[_from][msg.sender] = SafeMath.sub(allowance[_from][msg.sender],_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '//freeze  or unfreeze account\n', '  function freezeAccount(address target, bool freeze) public onlyOwner {\n', '    require(target != address(0));\n', '    frozenAccount[target] = freeze;\n', '    emit FrozenFunds(target, freeze);\n', ' }\n', '\n', '\n', '\n', '}']
['pragma solidity ^0.4.22;\n', '\n', 'interface tokenRecipient { \n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\n', '}\n', '\n', '// copy from openzeppelin-solidity/contracts/math/SafeMath.sol\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public  {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public  onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() external onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    emit Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() external onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    emit Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract BGCGToken is Pausable {\n', '\n', '  using SafeMath for SafeMath;\n', '\n', '  string public name = "Blockchain Game Coalition Gold";\n', '  string public symbol = "BGCG";\n', '  uint8 public decimals = 18;\n', '  uint256 public totalSupply = 10000000000 * 10 ** uint256(decimals); // 10 billion tokens\n', '\n', ' \n', '  mapping (address => uint256) public balanceOf;\n', '  mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '  \n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Burn(address indexed from, uint256 value);\n', '\n', ' mapping (address => bool) public frozenAccount;\n', ' event FrozenFunds(address target, bool frozen);\n', '\n', '\n', '\n', ' constructor() public payable {\n', '    balanceOf[msg.sender] = totalSupply;\n', '    owner = msg.sender;\n', '  }\n', '\n', '  //make this contract can receive ETH \n', '  function() public payable {\n', '       \n', '    }\n', '\n', '  \n', "//only owner can withdraw all contract's ETH  \n", '  function withdraw() public onlyOwner {\n', '      owner.transfer(address(this).balance); \n', '    }\n', '\n', "//msg.sender approve he's allowance to _spender\n", '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool success) {\n', '    require((_value == 0 ) || ( allowance[msg.sender][_spender] == 0  ));\n', '    require(!frozenAccount[msg.sender]);\n', '    require(!frozenAccount[_spender]);\n', '   \n', '    allowance[msg.sender][_spender] = _value;\n', '\n', '    emit Approval(msg.sender,_spender, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '   \n', '  function approveAndCall(address _spender, uint256 _value, bytes _extraData) public whenNotPaused returns (bool success) {\n', '    tokenRecipient spender = tokenRecipient(_spender);\n', '    if (approve(_spender, _value)) {\n', '      spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '      return true;\n', '      }\n', '  }\n', '\n', '  \n', '  function burn(uint256 _value) public whenNotPaused returns (bool success) {\n', '    require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '    require(totalSupply >= _value );\n', '    require( _value > 0 );\n', '\n', '    balanceOf[msg.sender] = SafeMath.sub( balanceOf[msg.sender],_value);            // Subtract from the sender\n', '    totalSupply = SafeMath.sub(totalSupply, _value);                      // Updates totalSupply\n', '    emit Burn(msg.sender, _value);\n', '    return true;\n', '  }\n', '\n', '  \n', '  function burnFrom(address _from, uint256 _value) public whenNotPaused returns (bool success) {\n', '    require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '    require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '    require(totalSupply >= _value );\n', '    require( _value > 0 );\n', '\n', '    balanceOf[_from] = SafeMath.sub(balanceOf[_from], _value);                         // Subtract from the targeted balance\n', "    allowance[_from][msg.sender] = SafeMath.sub(allowance[_from][msg.sender], _value);             // Subtract from the sender's allowance\n", '    totalSupply = SafeMath.sub(totalSupply, _value);                              // Update totalSupply\n', '    emit Burn(_from, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '\n', '// Send `_value` tokens to `_to` from msg.sender\n', ' function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    require( _value > 0 );\n', '    require(_to != address(0)); \n', '    require(msg.sender != _to );// forbit to transfer to himself\n', '    require(balanceOf[msg.sender] >= _value);\n', '    require(SafeMath.add(balanceOf[_to],_value) > balanceOf[_to]);  //SafeMath pretect not overflow\n', '\n', '\n', '    require(!frozenAccount[msg.sender]);\n', '    require(!frozenAccount[_to]);\n', '    \n', '    uint256 previousBalances = balanceOf[msg.sender] + balanceOf[_to]; \n', '\n', '    balanceOf[msg.sender] = SafeMath.sub(balanceOf[msg.sender],_value);\n', '    balanceOf[_to] = SafeMath.add(balanceOf[_to],_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '\n', '    // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '    assert(balanceOf[msg.sender] + balanceOf[_to] == previousBalances);\n', '\n', '    return true;\n', '  }\n', '\n', "//Send `_value` tokens to `_to` from '_from' address,the '_value' can't larger then allowance by '_from' who set to 'msg.sender' \n", 'function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    require( _value > 0 );\n', '    require(_to != address(0));\n', '    require(_from != address(0));\n', '  \n', '    require(_value <= balanceOf[_from]);\n', '    require(_value <= allowance[_from][msg.sender]);\n', '    require(SafeMath.add(balanceOf[_to],_value) > balanceOf[_to]); //SafeMath pretect not overflow\n', '\n', '    require(!frozenAccount[_from]);\n', '    require(!frozenAccount[_to]);\n', '\n', '    balanceOf[_from] = SafeMath.sub(balanceOf[_from],_value);\n', '    balanceOf[_to] = SafeMath.add(balanceOf[_to],_value);\n', '    allowance[_from][msg.sender] = SafeMath.sub(allowance[_from][msg.sender],_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '//freeze  or unfreeze account\n', '  function freezeAccount(address target, bool freeze) public onlyOwner {\n', '    require(target != address(0));\n', '    frozenAccount[target] = freeze;\n', '    emit FrozenFunds(target, freeze);\n', ' }\n', '\n', '\n', '\n', '}']
