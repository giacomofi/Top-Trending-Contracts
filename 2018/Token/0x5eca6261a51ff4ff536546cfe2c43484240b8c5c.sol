['pragma solidity ^0.4.21;\n', 'contract Admin {\n', '    address public admin;\n', '\n', '    constructor() public {\n', '        admin = msg.sender;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    function transferAdminship(address newAdmin) public onlyAdmin {\n', '        if (newAdmin != address(0)) {\n', '            admin = newAdmin;\n', '        }\n', '    }\n', '}\n', 'contract Pausable is Admin {\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev modifier to allow actions only when the contract IS paused\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev modifier to allow actions only when the contract IS NOT paused\n', '     */\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the admin to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyAdmin whenNotPaused returns(bool) {\n', '        paused = true;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the admin to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyAdmin whenPaused returns(bool) {\n', '        paused = false;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Wallet is Pausable {\n', '    event DepositWallet(address _depositBy, uint256 _amount);\n', '    event Withdraw(uint256 _amount);\n', '    event Transfer(address _to,uint256 _amount);\n', '    \n', '    address public owner;\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    modifier onlyAdminOrOwner() {\n', '        require(msg.sender == owner || msg.sender == admin);\n', '        _;\n', '    }\n', '    constructor(address _admin,address _who) public {\n', '        require(_admin != address(0));\n', '        admin = _admin;\n', '        owner = _who;\n', '    }\n', '    \n', '    // admin can set anyone as owner, even empty\n', '    function setOwner(address _who) external onlyAdmin {\n', '        owner = _who;\n', '    }\n', '    \n', '    function deposit() public payable{\n', '        emit DepositWallet(msg.sender,msg.value);\n', '    }\n', '    \n', '    function() public payable{\n', '        emit DepositWallet(msg.sender,msg.value);\n', '    }\n', '\n', '    function getBalance() public view returns(uint256) {\n', '        return address(this).balance;\n', '    }\n', '    \n', '    function transfer(address _to,uint256 _amount) external onlyOwner whenNotPaused{\n', '        require(address(this).balance>=_amount);\n', '        require(_to!=address(0));\n', '        if (_amount>0){\n', '            _to.transfer(_amount);\n', '        }\n', '        emit Transfer(_to,_amount);\n', '    }\n', '    \n', '    function withdraw() public onlyOwner whenNotPaused{\n', '        require(owner!=address(0));\n', '        uint256 _val = address(this).balance;\n', '        if (_val>0){\n', '            owner.transfer(_val);\n', '        }\n', '        emit Withdraw(_val);\n', '    }\n', '}\n', '\n', 'contract WalletFactory {\n', '    event WalletCreated(address admin,address owner, address wallet);\n', '    mapping(address => address[]) public wallets;\n', '    address public factoryOwner;\n', '    \n', '    constructor() public{\n', '        factoryOwner = msg.sender;\n', '    }\n', '    // you can donate to me\n', '    function createWallet(address _admin,address _owner) public payable{\n', '        // you can create max 10 wallets for free\n', '        if (wallets[msg.sender].length>10){\n', '            require(msg.value>=0.01 ether);\n', '        }\n', '        Wallet w = new Wallet(_admin,_owner);\n', '        wallets[msg.sender].push(address(w));\n', '        emit WalletCreated(_admin,_owner, address(w));\n', '    }\n', '    \n', '    function myWallets() public view returns(address[]){\n', '        return wallets[msg.sender];\n', '    }\n', '\n', '    function withdraw(address _to) public{\n', '        require(factoryOwner == msg.sender);\n', '        require(_to!=address(0));\n', '        _to.transfer(address(this).balance);\n', '    }\n', '    \n', '    function transferOwnership(address newAdmin) public {\n', '        require(factoryOwner == msg.sender);\n', '        if (newAdmin != address(0)) {\n', '            factoryOwner = newAdmin;\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', 'contract Admin {\n', '    address public admin;\n', '\n', '    constructor() public {\n', '        admin = msg.sender;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    function transferAdminship(address newAdmin) public onlyAdmin {\n', '        if (newAdmin != address(0)) {\n', '            admin = newAdmin;\n', '        }\n', '    }\n', '}\n', 'contract Pausable is Admin {\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev modifier to allow actions only when the contract IS paused\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev modifier to allow actions only when the contract IS NOT paused\n', '     */\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the admin to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyAdmin whenNotPaused returns(bool) {\n', '        paused = true;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the admin to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyAdmin whenPaused returns(bool) {\n', '        paused = false;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Wallet is Pausable {\n', '    event DepositWallet(address _depositBy, uint256 _amount);\n', '    event Withdraw(uint256 _amount);\n', '    event Transfer(address _to,uint256 _amount);\n', '    \n', '    address public owner;\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    modifier onlyAdminOrOwner() {\n', '        require(msg.sender == owner || msg.sender == admin);\n', '        _;\n', '    }\n', '    constructor(address _admin,address _who) public {\n', '        require(_admin != address(0));\n', '        admin = _admin;\n', '        owner = _who;\n', '    }\n', '    \n', '    // admin can set anyone as owner, even empty\n', '    function setOwner(address _who) external onlyAdmin {\n', '        owner = _who;\n', '    }\n', '    \n', '    function deposit() public payable{\n', '        emit DepositWallet(msg.sender,msg.value);\n', '    }\n', '    \n', '    function() public payable{\n', '        emit DepositWallet(msg.sender,msg.value);\n', '    }\n', '\n', '    function getBalance() public view returns(uint256) {\n', '        return address(this).balance;\n', '    }\n', '    \n', '    function transfer(address _to,uint256 _amount) external onlyOwner whenNotPaused{\n', '        require(address(this).balance>=_amount);\n', '        require(_to!=address(0));\n', '        if (_amount>0){\n', '            _to.transfer(_amount);\n', '        }\n', '        emit Transfer(_to,_amount);\n', '    }\n', '    \n', '    function withdraw() public onlyOwner whenNotPaused{\n', '        require(owner!=address(0));\n', '        uint256 _val = address(this).balance;\n', '        if (_val>0){\n', '            owner.transfer(_val);\n', '        }\n', '        emit Withdraw(_val);\n', '    }\n', '}\n', '\n', 'contract WalletFactory {\n', '    event WalletCreated(address admin,address owner, address wallet);\n', '    mapping(address => address[]) public wallets;\n', '    address public factoryOwner;\n', '    \n', '    constructor() public{\n', '        factoryOwner = msg.sender;\n', '    }\n', '    // you can donate to me\n', '    function createWallet(address _admin,address _owner) public payable{\n', '        // you can create max 10 wallets for free\n', '        if (wallets[msg.sender].length>10){\n', '            require(msg.value>=0.01 ether);\n', '        }\n', '        Wallet w = new Wallet(_admin,_owner);\n', '        wallets[msg.sender].push(address(w));\n', '        emit WalletCreated(_admin,_owner, address(w));\n', '    }\n', '    \n', '    function myWallets() public view returns(address[]){\n', '        return wallets[msg.sender];\n', '    }\n', '\n', '    function withdraw(address _to) public{\n', '        require(factoryOwner == msg.sender);\n', '        require(_to!=address(0));\n', '        _to.transfer(address(this).balance);\n', '    }\n', '    \n', '    function transferOwnership(address newAdmin) public {\n', '        require(factoryOwner == msg.sender);\n', '        if (newAdmin != address(0)) {\n', '            factoryOwner = newAdmin;\n', '        }\n', '    }\n', '}']
