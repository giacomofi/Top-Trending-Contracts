['pragma solidity ^0.4.23;\n', '\n', '// ----------------------------------------------------------------------------\n', '// @Project Korea Locate Election Event\n', '// @Creator Block-Packer Crew *BP_Ryu*\n', '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '// @Name SafeMath\n', '// @Desc Math operations with safety checks that throw on error\n', '// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', '// ----------------------------------------------------------------------------\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @Name Lockable\n', '// @Desc Admin Lock\n', '// ----------------------------------------------------------------------------\n', 'contract Lockable {\n', '    bool public    m_bIsLock;\n', '    address public m_aOwner;\n', '\n', '    modifier IsOwner {\n', '        require(m_aOwner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier AllLock {\n', '        require(!m_bIsLock);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        m_bIsLock   = false;\n', '        m_aOwner    = msg.sender;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @Name TokenBase\n', '// @Desc ERC20-based token\n', '// ----------------------------------------------------------------------------\n', 'contract TokenBase is ERC20Interface, Lockable {\n', '    using SafeMath for uint;\n', '\n', '    uint                                                _totalSupply;\n', '    mapping(address => uint256)                         _balances;\n', '    mapping(address => mapping(address => uint256))     _allowed;\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return _balances[tokenOwner];\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return _allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        return false;\n', '    }\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        return false;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        return false;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @Name KLEToken\n', '// @Desc Token name     : 2018 지방선거 참여자\n', '//       Token Symbol   : KLEV18\n', '//                      (Korea Locate Election Voter 2018)\n', '//\n', '//       Token Name     : 2018 지방선거 홍보왕\n', '//       Token Symbol   : KLEH18\n', '//                      (Korea Locate Election Honorary 2018)\n', '//\n', '//       Token Name     : 2018 지방선거 후원자\n', '//       Token Symbol   : KLES18\n', '//                      (Korea Locate Election Sponsor 2018)\n', '// ----------------------------------------------------------------------------\n', 'contract KLEToken is TokenBase {\n', '    string  public   name;\n', '    uint8   public   decimals;\n', '    string  public   symbol;\n', '\n', '    constructor (uint a_totalSupply, string a_tokenName, string a_tokenSymbol, uint8 a_decimals) public {\n', '        m_aOwner = msg.sender;\n', '        \n', '        _totalSupply = a_totalSupply;\n', '        _balances[msg.sender] = a_totalSupply;\n', '\n', '        name = a_tokenName;\n', '        symbol = a_tokenSymbol;\n', '        decimals = a_decimals;\n', '    }\n', '\n', '    // Allocate tokens to the users\n', '    function AllocateToken(address[] a_receiver)\n', '    external\n', '    IsOwner\n', '    AllLock {\n', '        uint receiverLength = a_receiver.length;\n', '        \n', '        for(uint ui = 0; ui < receiverLength; ui++){\n', '            _balances[a_receiver[ui]]++;\n', '        }\n', '        \n', '        _totalSupply = _totalSupply.add(receiverLength);\n', '    }\n', '\n', '    function EndEvent() \n', '    external\n', '    IsOwner {\n', '        m_bIsLock = true;\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '// ----------------------------------------------------------------------------\n', '// @Project Korea Locate Election Event\n', '// @Creator Block-Packer Crew *BP_Ryu*\n', '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '// @Name SafeMath\n', '// @Desc Math operations with safety checks that throw on error\n', '// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', '// ----------------------------------------------------------------------------\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @Name Lockable\n', '// @Desc Admin Lock\n', '// ----------------------------------------------------------------------------\n', 'contract Lockable {\n', '    bool public    m_bIsLock;\n', '    address public m_aOwner;\n', '\n', '    modifier IsOwner {\n', '        require(m_aOwner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier AllLock {\n', '        require(!m_bIsLock);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        m_bIsLock   = false;\n', '        m_aOwner    = msg.sender;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @Name TokenBase\n', '// @Desc ERC20-based token\n', '// ----------------------------------------------------------------------------\n', 'contract TokenBase is ERC20Interface, Lockable {\n', '    using SafeMath for uint;\n', '\n', '    uint                                                _totalSupply;\n', '    mapping(address => uint256)                         _balances;\n', '    mapping(address => mapping(address => uint256))     _allowed;\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return _balances[tokenOwner];\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return _allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        return false;\n', '    }\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        return false;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        return false;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @Name KLEToken\n', '// @Desc Token name     : 2018 지방선거 참여자\n', '//       Token Symbol   : KLEV18\n', '//                      (Korea Locate Election Voter 2018)\n', '//\n', '//       Token Name     : 2018 지방선거 홍보왕\n', '//       Token Symbol   : KLEH18\n', '//                      (Korea Locate Election Honorary 2018)\n', '//\n', '//       Token Name     : 2018 지방선거 후원자\n', '//       Token Symbol   : KLES18\n', '//                      (Korea Locate Election Sponsor 2018)\n', '// ----------------------------------------------------------------------------\n', 'contract KLEToken is TokenBase {\n', '    string  public   name;\n', '    uint8   public   decimals;\n', '    string  public   symbol;\n', '\n', '    constructor (uint a_totalSupply, string a_tokenName, string a_tokenSymbol, uint8 a_decimals) public {\n', '        m_aOwner = msg.sender;\n', '        \n', '        _totalSupply = a_totalSupply;\n', '        _balances[msg.sender] = a_totalSupply;\n', '\n', '        name = a_tokenName;\n', '        symbol = a_tokenSymbol;\n', '        decimals = a_decimals;\n', '    }\n', '\n', '    // Allocate tokens to the users\n', '    function AllocateToken(address[] a_receiver)\n', '    external\n', '    IsOwner\n', '    AllLock {\n', '        uint receiverLength = a_receiver.length;\n', '        \n', '        for(uint ui = 0; ui < receiverLength; ui++){\n', '            _balances[a_receiver[ui]]++;\n', '        }\n', '        \n', '        _totalSupply = _totalSupply.add(receiverLength);\n', '    }\n', '\n', '    function EndEvent() \n', '    external\n', '    IsOwner {\n', '        m_bIsLock = true;\n', '    }\n', '}']
