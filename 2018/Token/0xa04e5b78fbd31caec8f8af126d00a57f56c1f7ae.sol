['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'pragma solidity 0.4.24;\n', '\n', 'contract Transfer {\n', '\n', '    address constant public ETH = 0x0;\n', '\n', '    /**\n', '    * @dev Transfer tokens from this contract to an account.\n', '    * @param token Address of token to transfer. 0x0 for ETH\n', '    * @param to Address to send tokens to.\n', '    * @param amount Amount of token to send.\n', '    */\n', '    function transfer(address token, address to, uint256 amount) internal returns (bool) {\n', '        if (token == ETH) {\n', '            to.transfer(amount);\n', '        } else {\n', '            require(ERC20(token).transfer(to, amount));\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from an account to this contract.\n', '    * @param token Address of token to transfer. 0x0 for ETH\n', '    * @param from Address to send tokens from.\n', '    * @param to Address to send tokens to.\n', '    * @param amount Amount of token to send.\n', '    */\n', '    function transferFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) \n', '        internal\n', '        returns (bool)\n', '    {\n', '        require(token == ETH && msg.value == amount || msg.value == 0);\n', '\n', '        if (token != ETH) {\n', '            // Remember to approve first\n', '            require(ERC20(token).transferFrom(from, to, amount));\n', '        }\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/*\n', '\n', '  Copyright 2018 Contra Labs Inc.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '// @title Bank: Accept deposits and allow approved contracts to borrow Ether and ERC20 tokens.\n', '// @author Rich McAteer <rich@marble.org>, Max Wolff <max@marble.org>\n', 'contract Bank is Ownable, Transfer {\n', '    using SafeMath for uint256;\n', '\n', '    // Borrower => Approved\n', '    mapping (address => bool) public approved;\n', '\n', '    modifier onlyApproved() {\n', '        require(approved[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Deposit tokens to the bank.\n', '    * @param token Address of token to deposit. 0x0 for ETH\n', '    * @param amount Amount of token to deposit.\n', '    */\n', '    function deposit(address token, uint256 amount) external onlyOwner payable {\n', '        transferFrom(token, msg.sender, this, amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Withdraw tokens from the bank.\n', '    * @param token Address of token to withdraw. 0x0 for ETH\n', '    * @param amount Amount of token to withdraw.\n', '    */\n', '    function withdraw(address token, uint256 amount) external onlyOwner {\n', '        transfer(token, msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Borrow tokens from the bank.\n', '    * @param token Address of token to borrow. 0x0 for ETH\n', '    * @param amount Amount of token to borrow.\n', '    */\n', '    function borrow(address token, uint256 amount) external onlyApproved {\n', '        borrowFor(token, msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Borrow tokens from the bank on behalf of another account.\n', '    * @param token Address of token to borrow. 0x0 for ETH\n', '    * @param who Address to send borrowed amount to.\n', '    * @param amount Amount of token to borrow.\n', '    */\n', '    function borrowFor(address token, address who, uint256 amount) public onlyApproved {\n', '        transfer(token, who, amount);        \n', '    }\n', '\n', '    /**\n', '    * @dev Repay tokens to the bank.\n', '    * @param token Address of token to repay. 0x0 for ETH\n', '    * @param amount Amount of token to repay.\n', '    */\n', '    function repay(address token, uint256 amount) external payable {\n', '        transferFrom(token, msg.sender, this, amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Approve a new borrower.\n', '    * @param borrower Address of new borrower.\n', '    */\n', '    function addBorrower(address borrower) external onlyOwner {\n', '        approved[borrower] = true;\n', '    }\n', '\n', '    /**\n', '    * @dev Revoke approval of a borrower.\n', '    * @param borrower Address of borrower to revoke.\n', '    */\n', '    function removeBorrower(address borrower) external onlyOwner {\n', '        approved[borrower] = false;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets balance of bank. \n', '    * @param token Address of token to calculate total supply of.\n', '    */\n', '    function totalSupplyOf(address token) public view returns (uint256 balance) {\n', '        if (token == ETH) {\n', '            return address(this).balance; \n', '        } else {\n', '            return ERC20(token).balanceOf(this); \n', '        }\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'pragma solidity 0.4.24;\n', '\n', 'contract Transfer {\n', '\n', '    address constant public ETH = 0x0;\n', '\n', '    /**\n', '    * @dev Transfer tokens from this contract to an account.\n', '    * @param token Address of token to transfer. 0x0 for ETH\n', '    * @param to Address to send tokens to.\n', '    * @param amount Amount of token to send.\n', '    */\n', '    function transfer(address token, address to, uint256 amount) internal returns (bool) {\n', '        if (token == ETH) {\n', '            to.transfer(amount);\n', '        } else {\n', '            require(ERC20(token).transfer(to, amount));\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from an account to this contract.\n', '    * @param token Address of token to transfer. 0x0 for ETH\n', '    * @param from Address to send tokens from.\n', '    * @param to Address to send tokens to.\n', '    * @param amount Amount of token to send.\n', '    */\n', '    function transferFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) \n', '        internal\n', '        returns (bool)\n', '    {\n', '        require(token == ETH && msg.value == amount || msg.value == 0);\n', '\n', '        if (token != ETH) {\n', '            // Remember to approve first\n', '            require(ERC20(token).transferFrom(from, to, amount));\n', '        }\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/*\n', '\n', '  Copyright 2018 Contra Labs Inc.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '// @title Bank: Accept deposits and allow approved contracts to borrow Ether and ERC20 tokens.\n', '// @author Rich McAteer <rich@marble.org>, Max Wolff <max@marble.org>\n', 'contract Bank is Ownable, Transfer {\n', '    using SafeMath for uint256;\n', '\n', '    // Borrower => Approved\n', '    mapping (address => bool) public approved;\n', '\n', '    modifier onlyApproved() {\n', '        require(approved[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Deposit tokens to the bank.\n', '    * @param token Address of token to deposit. 0x0 for ETH\n', '    * @param amount Amount of token to deposit.\n', '    */\n', '    function deposit(address token, uint256 amount) external onlyOwner payable {\n', '        transferFrom(token, msg.sender, this, amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Withdraw tokens from the bank.\n', '    * @param token Address of token to withdraw. 0x0 for ETH\n', '    * @param amount Amount of token to withdraw.\n', '    */\n', '    function withdraw(address token, uint256 amount) external onlyOwner {\n', '        transfer(token, msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Borrow tokens from the bank.\n', '    * @param token Address of token to borrow. 0x0 for ETH\n', '    * @param amount Amount of token to borrow.\n', '    */\n', '    function borrow(address token, uint256 amount) external onlyApproved {\n', '        borrowFor(token, msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Borrow tokens from the bank on behalf of another account.\n', '    * @param token Address of token to borrow. 0x0 for ETH\n', '    * @param who Address to send borrowed amount to.\n', '    * @param amount Amount of token to borrow.\n', '    */\n', '    function borrowFor(address token, address who, uint256 amount) public onlyApproved {\n', '        transfer(token, who, amount);        \n', '    }\n', '\n', '    /**\n', '    * @dev Repay tokens to the bank.\n', '    * @param token Address of token to repay. 0x0 for ETH\n', '    * @param amount Amount of token to repay.\n', '    */\n', '    function repay(address token, uint256 amount) external payable {\n', '        transferFrom(token, msg.sender, this, amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Approve a new borrower.\n', '    * @param borrower Address of new borrower.\n', '    */\n', '    function addBorrower(address borrower) external onlyOwner {\n', '        approved[borrower] = true;\n', '    }\n', '\n', '    /**\n', '    * @dev Revoke approval of a borrower.\n', '    * @param borrower Address of borrower to revoke.\n', '    */\n', '    function removeBorrower(address borrower) external onlyOwner {\n', '        approved[borrower] = false;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets balance of bank. \n', '    * @param token Address of token to calculate total supply of.\n', '    */\n', '    function totalSupplyOf(address token) public view returns (uint256 balance) {\n', '        if (token == ETH) {\n', '            return address(this).balance; \n', '        } else {\n', '            return ERC20(token).balanceOf(this); \n', '        }\n', '    }\n', '\n', '}']
