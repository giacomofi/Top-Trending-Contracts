['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '// built upon OpenZeppelin\n', '\n', 'contract Base is BasicToken, Ownable {\n', '  using SafeMath for uint256;\n', '  string public constant url = "https://base.very.systems";\n', '\n', '  string public constant name = "Base";\n', '  string public constant symbol = "BASE";\n', '  uint256 public constant decimals = 0;\n', '\n', '  uint256 public constant price = 3906250000000000;\n', '\n', '  function () external payable {\n', '    require(msg.value != 0);\n', '\n', '    uint256 value = msg.value;\n', '    uint256 amount = value.div(price);\n', '\n', '    totalSupply = totalSupply.add(amount);\n', '    balances[msg.sender] = balances[msg.sender].add(amount);\n', '    Transfer(address(0), msg.sender, amount);\n', '\n', '    owner.transfer(msg.value);\n', '  }\n', '\n', '  uint256 public constant initialSupply = 32768;\n', '\n', '  function Base() public {\n', '    totalSupply = totalSupply.add(initialSupply);\n', '    balances[owner] = balances[owner].add(initialSupply);\n', '    Transfer(address(0), owner, initialSupply);\n', '  }\n', '}']