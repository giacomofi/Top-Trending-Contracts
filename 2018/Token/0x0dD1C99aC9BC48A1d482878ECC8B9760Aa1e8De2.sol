['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Destructible\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n', ' */\n', 'contract Destructible is Ownable {\n', '\n', '  function Destructible() public payable { }\n', '\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner public {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Contracts that should not own Ether\n', ' * @author Remco Bloemen <<span class="__cf_email__" data-cfemail="e694838b8589a6d4">[email&#160;protected]</span>π.com>\n', ' * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n', ' * in the contract, it will allow the owner to reclaim this ether.\n', ' * @notice Ether can still be send to this contract by:\n', ' * calling functions labeled `payable`\n', ' * `selfdestruct(contract_address)`\n', ' * mining directly to the contract address\n', '*/\n', 'contract HasNoEther is Ownable {\n', '\n', '  /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '  function HasNoEther() public payable {\n', '    require(msg.value == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Disallows direct send by settings a default function without the `payable` flag.\n', '   */\n', '  function() external {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    assert(owner.send(this.balance));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title DelayedClaimable\n', ' * @dev Extension for the Claimable contract, where the ownership needs to be claimed before/after\n', ' * a certain block number.\n', ' */\n', 'contract DelayedClaimable is Claimable {\n', '\n', '  uint256 public end;\n', '  uint256 public start;\n', '\n', '  /**\n', '   * @dev Used to specify the time period during which a pending\n', '   * owner can claim ownership.\n', '   * @param _start The earliest time ownership can be claimed.\n', '   * @param _end The latest time ownership can be claimed.\n', '   */\n', '  function setLimits(uint256 _start, uint256 _end) onlyOwner public {\n', '    require(_start <= _end);\n', '    end = _end;\n', '    start = _start;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer, as long as it is called within\n', '   * the specified start and end time.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    require((block.number <= end) && (block.number >= start));\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '    end = 0;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Contracts that should not own Contracts\n', ' * @author Remco Bloemen <<span class="__cf_email__" data-cfemail="e391868e808ca3d1">[email&#160;protected]</span>π.com>\n', ' * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\n', ' * of this contract to reclaim ownership of the contracts.\n', ' */\n', 'contract HasNoContracts is Ownable {\n', '\n', '  /**\n', '   * @dev Reclaim ownership of Ownable contracts\n', '   * @param contractAddr The address of the Ownable to be reclaimed.\n', '   */\n', '  function reclaimContract(address contractAddr) external onlyOwner {\n', '    Ownable contractInst = Ownable(contractAddr);\n', '    contractInst.transferOwnership(owner);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Roles\n', ' * @author Francisco Giordano (@frangio)\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' *      See RBAC.sol for example usage.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev give an address access to this role\n', '     */\n', '    function add(Role storage role, address addr)\n', '        internal\n', '    {\n', '        role.bearer[addr] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev remove an address&#39; access to this role\n', '     */\n', '    function remove(Role storage role, address addr)\n', '        internal\n', '    {\n', '        role.bearer[addr] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev check if an address has this role\n', '     * // reverts\n', '     */\n', '    function check(Role storage role, address addr)\n', '        view\n', '        internal\n', '    {\n', '        require(has(role, addr));\n', '    }\n', '\n', '    /**\n', '     * @dev check if an address has this role\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address addr)\n', '        view\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return role.bearer[addr];\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title RBAC (Role-Based Access Control)\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev Stores and provides setters and getters for roles and addresses.\n', ' *      Supports unlimited numbers of roles and addresses.\n', ' *      See //contracts/examples/RBACExample.sol for an example of usage.\n', ' * This RBAC method uses strings to key roles. It may be beneficial\n', ' *  for you to write your own implementation of this interface using Enums or similar.\n', ' * It&#39;s also recommended that you define constants in the contract, like ROLE_ADMIN below,\n', ' *  to avoid typos.\n', ' */\n', 'contract RBAC {\n', '    using Roles for Roles.Role;\n', '\n', '    mapping (string => Roles.Role) private roles;\n', '\n', '    event RoleAdded(address addr, string roleName);\n', '    event RoleRemoved(address addr, string roleName);\n', '\n', '    /**\n', '     * A constant role name for indicating admins.\n', '     */\n', '    string public constant ROLE_ADMIN = "admin";\n', '\n', '    /**\n', '     * @dev constructor. Sets msg.sender as admin by default\n', '     */\n', '    function RBAC()\n', '        public\n', '    {\n', '        addRole(msg.sender, ROLE_ADMIN);\n', '    }\n', '\n', '    /**\n', '     * @dev add a role to an address\n', '     * @param addr address\n', '     * @param roleName the name of the role\n', '     */\n', '    function addRole(address addr, string roleName)\n', '        internal\n', '    {\n', '        roles[roleName].add(addr);\n', '        RoleAdded(addr, roleName);\n', '    }\n', '\n', '    /**\n', '     * @dev remove a role from an address\n', '     * @param addr address\n', '     * @param roleName the name of the role\n', '     */\n', '    function removeRole(address addr, string roleName)\n', '        internal\n', '    {\n', '        roles[roleName].remove(addr);\n', '        RoleRemoved(addr, roleName);\n', '    }\n', '\n', '    /**\n', '     * @dev reverts if addr does not have role\n', '     * @param addr address\n', '     * @param roleName the name of the role\n', '     * // reverts\n', '     */\n', '    function checkRole(address addr, string roleName)\n', '        // view\n', '        public\n', '    {\n', '        roles[roleName].check(addr);\n', '    }\n', '\n', '    /**\n', '     * @dev determine if addr has role\n', '     * @param addr address\n', '     * @param roleName the name of the role\n', '     * @return bool\n', '     */\n', '    function hasRole(address addr, string roleName)\n', '        view\n', '        public\n', '        returns (bool)\n', '    {\n', '        return roles[roleName].has(addr);\n', '    }\n', '\n', '    /**\n', '     * @dev add a role to an address\n', '     * @param addr address\n', '     * @param roleName the name of the role\n', '     */\n', '    function adminAddRole(address addr, string roleName)\n', '        onlyAdmin\n', '        public\n', '    {\n', '        addRole(addr, roleName);\n', '    }\n', '\n', '    /**\n', '     * @dev remove a role from an address\n', '     * @param addr address\n', '     * @param roleName the name of the role\n', '     */\n', '    function adminRemoveRole(address addr, string roleName)\n', '        onlyAdmin\n', '        public\n', '    {\n', '        removeRole(addr, roleName);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '     * @param roleName the name of the role\n', '     * // reverts\n', '     */\n', '    modifier onlyRole(string roleName)\n', '    {\n', '        checkRole(msg.sender, roleName);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev modifier to scope access to admins\n', '     * // reverts\n', '     */\n', '    modifier onlyAdmin()\n', '    {\n', '        checkRole(msg.sender, ROLE_ADMIN);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n', '     * @param roleNames the names of the roles to scope access to\n', '     * // reverts\n', '     *\n', '     * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n', '     *  see: https://github.com/ethereum/solidity/issues/2467\n', '     */\n', '    // modifier onlyRoles(string[] roleNames) {\n', '    //     bool hasAnyRole = false;\n', '    //     for (uint8 i = 0; i < roleNames.length; i++) {\n', '    //         if (hasRole(msg.sender, roleNames[i])) {\n', '    //             hasAnyRole = true;\n', '    //             break;\n', '    //         }\n', '    //     }\n', '\n', '    //     require(hasAnyRole);\n', '\n', '    //     _;\n', '    // }\n', '}\n', '\n', '/**\n', ' * @title Contracts that should not own Tokens\n', ' * @author Remco Bloemen <<span class="__cf_email__" data-cfemail="1260777f717d5220">[email&#160;protected]</span>π.com>\n', ' * @dev This blocks incoming ERC23 tokens to prevent accidental loss of tokens.\n', ' * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\n', ' * owner to reclaim the tokens.\n', ' */\n', 'contract HasNoTokens is CanReclaimToken {\n', '\n', ' /**\n', '  * @dev Reject all ERC23 compatible tokens\n', '  * @param from_ address The address that is transferring the tokens\n', '  * @param value_ uint256 the amount of the specified token\n', '  * @param data_ Bytes The data passed from the caller.\n', '  */\n', '  function tokenFallback(address from_, uint256 value_, bytes data_) external {\n', '    from_;\n', '    value_;\n', '    data_;\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Contactable token\n', ' * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\n', ' * contact information.\n', ' */\n', 'contract Contactable is Ownable{\n', '\n', '    string public contactInformation;\n', '\n', '    /**\n', '     * @dev Allows the owner to set a string with their contact information.\n', '     * @param info The contact information to attach to the contract.\n', '     */\n', '    function setContactInformation(string info) onlyOwner public {\n', '         contactInformation = info;\n', '     }\n', '}\n', '\n', '\n', '/**\n', ' * @title Base contract for contracts that should not own things.\n', ' * @author Remco Bloemen <<span class="__cf_email__" data-cfemail="3b495e5658547b09">[email&#160;protected]</span>π.com>\n', ' * @dev Solves a class of errors where a contract accidentally becomes owner of Ether, Tokens or\n', ' * Owned contracts. See respective base contracts for details.\n', ' */\n', 'contract NoOwner is HasNoEther, HasNoTokens, HasNoContracts {\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SimpleToken\n', ' * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n', ' * Note they can later distribute these tokens as they wish using `transfer` and other\n', ' * `StandardToken` functions.\n', ' */\n', 'contract SimpleToken is StandardToken {\n', '\n', '  string public constant name = "SimpleToken";\n', '  string public constant symbol = "SIM";\n', '  uint8 public constant decimals = 18;\n', '\n', '  uint256 public constant INITIAL_SUPPLY = 10000 * (10 ** uint256(decimals));\n', '\n', '  /**\n', '   * @dev Constructor that gives msg.sender all of existing tokens.\n', '   */\n', '  function SimpleToken() public {\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Migrations\n', ' * @dev This is a truffle contract, needed for truffle integration, not meant for use by Zeppelin users.\n', ' */\n', 'contract Migrations is Ownable {\n', '  uint256 public lastCompletedMigration;\n', '\n', '  function setCompleted(uint256 completed) onlyOwner public {\n', '    lastCompletedMigration = completed;\n', '  }\n', '\n', '  function upgrade(address newAddress) onlyOwner public {\n', '    Migrations upgraded = Migrations(newAddress);\n', '    upgraded.setCompleted(lastCompletedMigration);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenDestructible:\n', ' * @author Remco Bloemen <<span class="__cf_email__" data-cfemail="3c4e59515f537c0e">[email&#160;protected]</span>π.com>\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract including\n', ' * listed tokens will be sent to the owner.\n', ' */\n', 'contract TokenDestructible is Ownable {\n', '\n', '  function TokenDestructible() public payable { }\n', '\n', '  /**\n', '   * @notice Terminate contract and refund to owner\n', '   * @param tokens List of addresses of ERC20 or ERC20Basic token contracts to\n', '   refund.\n', '   * @notice The called token contracts could try to re-enter this contract. Only\n', '   supply token contracts you trust.\n', '   */\n', '  function destroy(address[] tokens) onlyOwner public {\n', '\n', '    // Transfer tokens to owner\n', '    for(uint256 i = 0; i < tokens.length; i++) {\n', '      ERC20Basic token = ERC20Basic(tokens[i]);\n', '      uint256 balance = token.balanceOf(this);\n', '      token.transfer(owner, balance);\n', '    }\n', '\n', '    // Transfer Eth to owner and terminate contract\n', '    selfdestruct(owner);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', '\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedToken(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', '\n', '// @title Force Ether into a contract.\n', '// @notice  even\n', '// if the contract is not payable.\n', '// @notice To use, construct the contract with the target as argument.\n', '// @author Remco Bloemen <<span class="__cf_email__" data-cfemail="5d2f38303e321d3338283b28333973322f3a">[email&#160;protected]</span>>\n', 'contract ForceEther  {\n', '\n', '  function ForceEther() public payable { }\n', '\n', '  function destroyAndSend(address _recipient) public {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', 'interface Gateway {\n', '\tfunction open(uint _introId, uint _bid, uint _creationTime, string _hashedInfo) public;\n', '\tfunction accept(uint _introId, address _ambassador, uint _updateTime) public;\n', '\tfunction endorse(uint _introId, uint _updateTime) public;\n', '\tfunction dispute(uint _introId, uint _updateTime) public;\n', '\tfunction withdraw(uint _introId, uint _updateTime) public;\n', '\tfunction resolve(uint _introId, uint _updateTime, string _resolution, bool _isSpam) public;\n', '}\n', '\n', 'interface Score {\n', '\tfunction setScore(address user, uint score) public;\n', '\tfunction getScore(address user) public view returns (uint score);\n', '\tfunction scoreDown(address user) public returns (bool res);\n', '\tfunction scoreUp(address user) public returns (bool res);\n', '}\n', '\n', 'interface Share {\n', '\tfunction rolloutDividends(address receiver) public;\n', '\tfunction distributeDividends(address receiver, uint tokensPerShare) public;\n', '}\n', '\n', 'contract InbotProxy is RBAC, Pausable {\n', '\tMintableToken\ttoken;\n', '\tMintableToken\tshare;\n', '\tScore \t\t\tscore;\n', '\tGateway \t\tgateway;\n', '\n', '\tfunction InbotProxy(\n', '\t\taddress _token, \n', '\t\taddress _share, \n', '\t\taddress _score, \n', '\t\taddress _gateway\n', '\t) public \n', '\t{\n', '\t\ttoken = MintableToken(_token);\n', '\t\tshare = MintableToken(_share);\n', '\t\tscore = Score(_score);\n', '\t\tgateway = Gateway(_gateway);\n', '\t}\n', '\n', '\tfunction setToken(address _token) public onlyAdmin {\n', '\t\ttoken = MintableToken(_token);\n', '\t}\n', '\n', '\tfunction getToken() whenNotPaused public view returns (MintableToken) {\n', '\t\treturn token;\n', '\t}\n', '\n', '\tfunction setShare(address _share) public onlyAdmin {\n', '\t\tshare = MintableToken(_share);\n', '\t}\n', '\n', '\tfunction getShare() whenNotPaused public view returns (MintableToken) {\n', '\t\treturn share;\n', '\t}\n', '\n', '\tfunction setScore(address _score) public onlyAdmin {\n', '\t\tscore = Score(_score);\n', '\t}\n', '\n', '\tfunction getScore() public whenNotPaused view returns (Score) {\n', '\t\treturn score;\n', '\t}\n', '\n', '\tfunction setGateway(address _gateway) public onlyAdmin {\n', '\t\tgateway = Gateway(_gateway);\n', '\t}\n', '\n', '\tfunction getgateway() whenNotPaused public view returns (Gateway) {\n', '\t\treturn gateway;\n', '\t}\n', '}\n', '\n', 'contract InbotControlled is RBAC {\n', '    /**\n', '     * A constant role name for indicating vendor.\n', '     */\n', '    string public constant ROLE_VENDOR = "vendor";\n', '}\n', '\n', 'contract InbotContract is InbotControlled, TokenDestructible, CanReclaimToken, Pausable {\n', '    using SafeMath for uint;\n', '\n', '    uint public constant WAD = 10**18;\n', '    uint public constant RAY = 10**27;\n', '    InbotProxy public proxy;\n', '\n', '    modifier proxyExists() {\n', '        require(proxy != address(0x0));\n', '        _;\n', '    }\n', '\n', '    function setProxy(address _proxy) public onlyAdmin {\n', '        proxy = InbotProxy(_proxy);\n', '    }\n', '\n', '    function reclaimToken() public proxyExists onlyOwner {\n', '        this.reclaimToken(proxy.getToken());\n', '    }\n', '\n', '    function pause() public onlyAdmin whenNotPaused {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    function unpause() public onlyAdmin whenPaused {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '\n', '    function getTime(uint _time) internal view returns (uint t) {\n', '        return _time == 0 ? now : _time;\n', '    }\n', '\n', '    function min(uint x, uint y) internal pure returns (uint z) {\n', '        return x <= y ? x : y;\n', '    }\n', '\n', '    function max(uint x, uint y) internal pure returns (uint z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    function wmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = x.mul(y).add(WAD.div(2)).div(WAD);\n', '    }\n', '\n', '    function rmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = x.mul(y).add(RAY.div(2)).div(RAY);\n', '    }\n', '\n', '    function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = x.mul(WAD).add(y.div(2)).div(y);\n', '    }\n', '\n', '    function rdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = x.mul(RAY).add(y.div(2)).div(y);\n', '    }\n', '}\n', '/**\n', ' * @title Contract that will work with ERC223 tokens.\n', ' */\n', 'contract ERC223ReceivingContract {\n', '\tevent TokenReceived(address indexed from, uint value, bytes data);\n', '\t/**\n', '\t * @dev Standard ERC223 function that will handle incoming token transfers.\n', '\t *\n', '\t * @param _from  Token sender address.\n', '\t * @param _value Amount of tokens.\n', '\t * @param _data  Transaction metadata.\n', '\t */\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', ' /**\n', ' * @title Base Contract that will InToken and InShare inherit.\n', ' */\n', 'contract InbotToken is InbotContract, MintableToken, BurnableToken, PausableToken, DetailedERC20 {\n', '\tevent InbotTokenTransfer(address indexed from, address indexed to, uint value, bytes data);\n', '\n', '\tfunction InbotToken (string _name, string _symbol, uint8 _decimals) DetailedERC20(_name, _symbol, _decimals) public {\n', '\t}\n', '\n', '\tfunction callTokenFallback(address _from, address _to, uint256 _value, bytes _data) internal returns (bool) {\n', '\t\tuint codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        if(codeLength > 0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(_from, _value, _data);\n', '        }\n', '\n', '        InbotTokenTransfer(_from, _to, _value, _data);\n', '\n', '        return true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Function which allows to mint tokens from another "admin" address. \n', '\t* @param _to The address that will receive the minted tokens.\n', '\t* @param _amount The amount of tokens to mint.\n', '\t* @return A boolean that indicates if the operation was successful.\n', '\t*/\n', '\tfunction mint(address _to, uint256 _amount) public onlyAdmin canMint returns (bool) {\n', '\t\t// TODO: a hook to allow other contracts call "mint" without applying parent modifiers\n', '\t\ttotalSupply = totalSupply.add(_amount);\n', '\t\tbalances[_to] = balances[_to].add(_amount);\n', '\t\tMint(_to, _amount);\n', '\t\tTransfer(address(0), _to, _amount);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Transfer the specified amount of ERC223 compliant tokens to the specified address.\n', '\t* @param _from \tThe address to transfer from.\n', '\t* @param _to \tThe address to transfer to.\n', '\t* @param _value The amount to be transferred.\n', '\t* @param _data  Transaction metadata.\n', '\t* @return A boolean that indicates if the operation was successful.\n', '\t*/\n', '\tfunction transferFrom(address _from, address _to, uint256 _value, bytes _data) public whenNotPaused returns (bool) {\n', '\t\tassert(super.transferFrom(_from, _to, _value));\n', '\t\treturn callTokenFallback(_from, _to, _value, _data);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Transfer the specified amount of ERC223 compliant tokens to the specified address.\n', '\t* @param _from \tThe address to transfer from.\n', '\t* @param _to \tThe address to transfer to.\n', '\t* @param _value The amount to be transferred.\n', '\t* @return A boolean that indicates if the operation was successful.\n', '\t*/\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '\t\tbytes memory empty;\n', '\t\treturn transferFrom(_from, _to, _value, empty);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Transfer the specified amount of ERC223 compliant tokens to the specified address.\n', '\t* @param _to \tThe address to transfer to.\n', '\t* @param _value The amount to be transferred.\n', '\t* @param _data  Transaction metadata.\n', '\t* @return A boolean that indicates if the operation was successful.\n', '\t*/\n', '\tfunction transfer(address _to, uint256 _value, bytes _data) public whenNotPaused returns (bool) {\n', '\t\tassert(super.transfer(_to, _value));\n', '\t\treturn callTokenFallback(msg.sender, _to, _value, _data);\n', '\t}\n', '\n', '\t/**\n', '     * @dev Transfer the specified amount of ERC223 compliant tokens to the specified address.\n', '     *      \n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function transfer(address _to, uint _value) public whenNotPaused returns (bool) {\n', '        bytes memory empty;\n', '\t\treturn transfer(_to, _value, empty);\n', '    }\n', '} \n', '/** \n', ' * @title InToken (Inbot Token) contract. \n', '*/\n', 'contract InToken is InbotToken("InToken", "IN", 18) {\n', '\tuint public constant MAX_SUPPLY = 13*RAY;\n', '\n', '\tfunction InToken() public {\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Function to mint tokens upper limited by MAX_SUPPLY.\n', '\t* @param _to The address that will receive the minted tokens.\n', '\t* @param _amount The amount of tokens to mint.\n', '\t* @return A boolean that indicates if the operation was successful.\n', '\t*/\n', '\tfunction mint(address _to, uint256 _amount) onlyAdmin canMint public returns (bool) {\n', '\t\trequire(totalSupply.add(_amount) <= MAX_SUPPLY);\n', '\n', '\t\treturn super.mint(_to, _amount);\n', '\t}\n', '\t\n', '}']