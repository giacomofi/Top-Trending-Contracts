['pragma solidity ^0.4.19;\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint256 supply);\n', '    function balance() public constant returns (uint256);\n', '    function balanceOf(address _owner) public constant returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '    function claimdram() public returns (bool success);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract EOSDRAM is ERC20Interface {\n', '    string public constant symbol = "DRAM";\n', '    string public constant name = "EOS DRAM";\n', '    uint8 public constant decimals = 4;\n', '\n', '    uint256 _totalSupply = 0;\n', '    // airdrop 200Kb to each account. 1 Kb = 1 DRAM\n', '    uint256 _airdropAmount = 200 * 10000;\n', '    // max supply of 64GB is 64 * 1024 * 1024 Kb\n', '    uint256 _maxSupply = 67108864 * 10000;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => bool) claimeddram;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    address public owner;\n', '    \n', '    modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '    }\n', '    \n', '    function EOSDRAM() public {\n', '        owner = msg.sender;\n', '        claimeddram[msg.sender] = true;\n', '        //reserved for dev and exchanges\n', '        balances[msg.sender] = 7108864 * 10000;\n', '        _totalSupply = balances[msg.sender];\n', '        Transfer(0, owner, 71088640000);\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '\n', '    function totalSupply() constant public returns (uint256 supply) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    // What&#39;s my balance?\n', '    function balance() constant public returns (uint256) {\n', '            return balances[msg.sender];\n', '    }\n', '\n', '    // What is the balance of a particular account?\n', '    function balanceOf(address _address) constant public returns (uint256) {\n', '        return balances[_address];\n', '    }\n', '\n', '    // Transfer the balance from owner&#39;s account to another account\n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', ' \n', '        if (balances[msg.sender] >= _amount\n', '            && _amount > 0) {\n', '             if (balances[_to] + _amount > balances[_to]) {\n', '                balances[msg.sender] -= _amount;\n', '                balances[_to] += _amount;\n', '                Transfer(msg.sender, _to, _amount);\n', '                return true;\n', '            } else {\n', '                return false;\n', '            }\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Send _value amount of tokens from address _from to address _to\n', '    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '    // fees in sub-currencies; the command should fail unless the _from account has\n', '    // deliberately authorized the sender of the message via some mechanism; we propose\n', '    // these standardized APIs for approval:\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0) {\n', '            if (balances[_to] + _amount > balances[_to]) {\n', '                balances[_from] -= _amount;\n', '                allowed[_from][msg.sender] -= _amount;\n', '                balances[_to] += _amount;\n', '                Transfer(_from, _to, _amount);\n', '                return true;\n', '            } else {\n', '                return false;\n', '            }\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // claim DRAM function\n', '    function claimdram() public returns (bool success) {\n', '        if (_totalSupply < _maxSupply && !claimeddram[msg.sender]) {\n', '            claimeddram[msg.sender] = true;\n', '            balances[msg.sender] += _airdropAmount;\n', '            _totalSupply += _airdropAmount;\n', '            Transfer(0, msg.sender, _airdropAmount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '            }\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint256 supply);\n', '    function balance() public constant returns (uint256);\n', '    function balanceOf(address _owner) public constant returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '    function claimdram() public returns (bool success);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract EOSDRAM is ERC20Interface {\n', '    string public constant symbol = "DRAM";\n', '    string public constant name = "EOS DRAM";\n', '    uint8 public constant decimals = 4;\n', '\n', '    uint256 _totalSupply = 0;\n', '    // airdrop 200Kb to each account. 1 Kb = 1 DRAM\n', '    uint256 _airdropAmount = 200 * 10000;\n', '    // max supply of 64GB is 64 * 1024 * 1024 Kb\n', '    uint256 _maxSupply = 67108864 * 10000;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => bool) claimeddram;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    address public owner;\n', '    \n', '    modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '    }\n', '    \n', '    function EOSDRAM() public {\n', '        owner = msg.sender;\n', '        claimeddram[msg.sender] = true;\n', '        //reserved for dev and exchanges\n', '        balances[msg.sender] = 7108864 * 10000;\n', '        _totalSupply = balances[msg.sender];\n', '        Transfer(0, owner, 71088640000);\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '\n', '    function totalSupply() constant public returns (uint256 supply) {\n', '        return _totalSupply;\n', '    }\n', '\n', "    // What's my balance?\n", '    function balance() constant public returns (uint256) {\n', '            return balances[msg.sender];\n', '    }\n', '\n', '    // What is the balance of a particular account?\n', '    function balanceOf(address _address) constant public returns (uint256) {\n', '        return balances[_address];\n', '    }\n', '\n', "    // Transfer the balance from owner's account to another account\n", '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', ' \n', '        if (balances[msg.sender] >= _amount\n', '            && _amount > 0) {\n', '             if (balances[_to] + _amount > balances[_to]) {\n', '                balances[msg.sender] -= _amount;\n', '                balances[_to] += _amount;\n', '                Transfer(msg.sender, _to, _amount);\n', '                return true;\n', '            } else {\n', '                return false;\n', '            }\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Send _value amount of tokens from address _from to address _to\n', '    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '    // fees in sub-currencies; the command should fail unless the _from account has\n', '    // deliberately authorized the sender of the message via some mechanism; we propose\n', '    // these standardized APIs for approval:\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0) {\n', '            if (balances[_to] + _amount > balances[_to]) {\n', '                balances[_from] -= _amount;\n', '                allowed[_from][msg.sender] -= _amount;\n', '                balances[_to] += _amount;\n', '                Transfer(_from, _to, _amount);\n', '                return true;\n', '            } else {\n', '                return false;\n', '            }\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // claim DRAM function\n', '    function claimdram() public returns (bool success) {\n', '        if (_totalSupply < _maxSupply && !claimeddram[msg.sender]) {\n', '            claimeddram[msg.sender] = true;\n', '            balances[msg.sender] += _airdropAmount;\n', '            _totalSupply += _airdropAmount;\n', '            Transfer(0, msg.sender, _airdropAmount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '            }\n', '    }\n', '\n', '}']
