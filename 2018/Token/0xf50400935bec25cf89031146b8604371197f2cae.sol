['pragma solidity 0.4.19;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    // ERC20 basic token contract being held\n', '    ERC20Basic public token;\n', '\n', '    // beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '\n', '    // timestamp when token release is enabled\n', '    uint64 public releaseTime;\n', '\n', '    function TokenTimelock(ERC20Basic _token, address _beneficiary, uint64 _releaseTime) public {\n', '        require(_releaseTime > uint64(block.timestamp));\n', '        token = _token;\n', '        beneficiary = _beneficiary;\n', '        releaseTime = _releaseTime;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers tokens held by timelock to beneficiary.\n', '     */\n', '    function release() public {\n', '        require(uint64(block.timestamp) >= releaseTime);\n', '\n', '        uint256 amount = token.balanceOf(this);\n', '        require(amount > 0);\n', '\n', '        token.safeTransfer(beneficiary, amount);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract MobilinkToken is BurnableToken, Owned {\n', '    string public constant name = "Mobilink";\n', '    string public constant symbol = "MBX";\n', '    uint8 public constant decimals = 18;\n', '\n', '    /// Maximum tokens to be allocated (9 billion)\n', '    uint256 public constant HARD_CAP = 9000000000 * 10**uint256(decimals);\n', '\n', '    /// The owner of this address is the Mobilink team\n', '    address public mobilinkTeamAddress;\n', '\n', '    /// The owner of this address is the Mobilink Reserve\n', '    address public reserveAddress;\n', '\n', '    /// Time lock contract that holds the team tokens for 90 days\n', '    address public teamTokensLockAddress;\n', '\n', '    /// This is the Build Out address\n', '    address public buildOutAddress;\n', '\n', '    /// This address is used to keep the tokens for sale\n', '    address public saleTokensVault;\n', '\n', '    /// when stage 1 is closed, the trading is open\n', '    bool public stageOneClosed = false;\n', '\n', '    /// no tokens can be ever issued when this is set to "true"\n', '    bool public stageTwoClosed = false;\n', '\n', '    /// Only allowed to execute before the first stage is closed\n', '    modifier beforeStageOneClosed {\n', '        require(!stageOneClosed && !stageTwoClosed);\n', '        _;\n', '    }\n', '\n', '    /// Only allowed to execute after the first stage is closed\n', '    modifier afterStageOneClosed {\n', '        require(stageOneClosed && !stageTwoClosed);\n', '        _;\n', '    }\n', '\n', '    function MobilinkToken(address _mobilinkTeamAddress, address _reserveAddress,\n', '                           address _buildOutAddress, address _saleTokensVault) public {\n', '        require(_mobilinkTeamAddress != address(0));\n', '        require(_reserveAddress != address(0));\n', '        require(_buildOutAddress != address(0));\n', '        require(_saleTokensVault != address(0));\n', '\n', '        mobilinkTeamAddress = _mobilinkTeamAddress;\n', '        reserveAddress = _reserveAddress;\n', '        buildOutAddress = _buildOutAddress;\n', '        saleTokensVault = _saleTokensVault;\n', '\n', '        /// Maximum tokens to be allocated on the sale\n', '        /// (4.14 billion = 0.144 bounty + 0.9 private sale + 3.096 public sale)\n', '        uint256 saleTokens = 4140000000 * 10**uint256(decimals);\n', '        totalSupply = saleTokens;\n', '        balances[saleTokensVault] = saleTokens;\n', '\n', '        /// Reserve tokens - 2.61 billion\n', '        uint256 reserveTokens = 2610000000 * 10**uint256(decimals);\n', '        totalSupply = totalSupply.add(reserveTokens);\n', '        balances[reserveAddress] = reserveTokens;\n', '\n', '        /// Build Out tokens - 0.9 billion\n', '        uint256 buildOutTokens = 900000000 * 10**uint256(decimals);\n', '        totalSupply = totalSupply.add(buildOutTokens);\n', '        balances[buildOutAddress] = buildOutTokens;\n', '    }\n', '\n', '    /// @dev Close the first stage; issue reserve and team tokens\n', '    function closeStageOne() public onlyOwner beforeStageOneClosed {\n', '        stageOneClosed = true;\n', '    }\n', '\n', '    /// @dev Close the second stage and overall sale\n', '    function closeStageTwo() public onlyOwner afterStageOneClosed {\n', '        stageTwoClosed = true;\n', '    }\n', '\n', '    /// @dev Issue the team tokens\n', '    /// and lock them for 90 days from the day the token is listed on an exchange\n', '    function lockTeamTokens() public onlyOwner afterStageOneClosed {\n', '        require(teamTokensLockAddress == address(0) && totalSupply < HARD_CAP);\n', ' \n', '        /// Team tokens : 1.35 billion\n', '        uint256 teamTokens = 1350000000 * 10**uint256(decimals);\n', '\n', '        /// team tokens are locked for 90 days\n', '        TokenTimelock teamTokensLock = new TokenTimelock(this, mobilinkTeamAddress, uint64(block.timestamp) + 60 * 60 * 24 * 90);\n', '        teamTokensLockAddress = address(teamTokensLock);\n', '        totalSupply = totalSupply.add(teamTokens);\n', '        balances[teamTokensLockAddress] = teamTokens;\n', '    }\n', '\n', '    /// @dev Trading limited - requires the first stage to have closed\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        if(stageOneClosed) {\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /// @dev Trading limited - requires the first stage to have closed\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if(stageOneClosed || msg.sender == owner || (msg.sender == saleTokensVault && _to == owner)) {\n', '            return super.transfer(_to, _value);\n', '        }\n', '        return false;\n', '    }\n', '}']