['pragma solidity ^0.4.25;\n', '\n', 'contract ERC20Token {\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint256 balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\n', '    function transfer(address to, uint256 tokens) public returns (bool success);\n', '    function approve(address spender, uint256 tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '}\n', '\n', 'contract Owned {\n', '    address owner;\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) onlyOwner public returns (bool success) {\n', '        require (newOwner != address(0));\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract ECToken is ERC20Token, Owned {\n', '    using SafeMath for uint256;\n', '    \n', '    constructor() public {\n', '        symbol = "EC";\n', '        name = "ElephantChain";\n', '        decimals = 8;\n', '        totalSupply = 21000000 * 10 ** uint256(decimals);\n', '        \n', '        balances[owner] = totalSupply;\n', '        emit Transfer(address(0), owner, totalSupply);\n', '    }\n', '\n', '    //ERC20Token\n', '    function balanceOf(address tokenOwner) public view returns (uint256 balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint256 tokens) public returns (bool success) {\n', '        _transfer(msg.sender,to,tokens);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint256 tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '    //end ERC20Token\n', '    \n', '    //frozenAccount\n', '    mapping (address => bool) public frozenAccount;\n', '    event FrozenFunds(address target, bool frozen);\n', '    \n', '    function freezeAccount(address target) onlyOwner public returns (bool success) {\n', '        require (target != address(0));\n', '        frozenAccount[target] = true;\n', '        emit FrozenFunds(target, true);\n', '        return true;\n', '    }\n', '    \n', '\tfunction unfreezeAccount(address target) onlyOwner public returns (bool success) {\n', '\t    require (target != address(0));\n', '        frozenAccount[target] = false;\n', '        emit FrozenFunds(target, false);\n', '        return true;\n', '    }\n', '    //end frozenAccount\n', '    \n', '    function increaseSupply(uint256 tokens) onlyOwner public returns (bool success) {\n', '        require(tokens > 0);\n', '        totalSupply = totalSupply.add(tokens);\n', '        balances[owner] = balances[owner].add(tokens);\n', '        _transfer(msg.sender, owner, tokens);\n', '        return true;\n', '    }\n', '\n', '    function decreaseSupply(uint256 tokens) onlyOwner public returns (bool success) {\n', '        require(tokens > 0);\n', '        require(balances[owner] >= tokens);\n', '        balances[owner] = balances[owner].sub(tokens);\n', '        totalSupply = totalSupply.sub(tokens);\n', '        _transfer(owner, msg.sender, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function _transfer(address spender, address target, uint256 tokens) private {\n', '        require (target != address(0));\n', '        require(tokens > 0);\n', '        require (balances[spender] >= tokens);\n', '        require (balances[target].add(tokens) >= balances[target]);\n', '        require(!frozenAccount[spender]);\n', '        require(!frozenAccount[target]);\n', '        uint256 previousBalances = balances[spender].add(balances[target]);\n', '        balances[spender] = balances[spender].sub(tokens);\n', '        balances[target] = balances[target].add(tokens);\n', '        emit Transfer(spender, target, tokens);\n', '        assert(balances[spender].add(balances[target]) == previousBalances);\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}']
['pragma solidity ^0.4.25;\n', '\n', 'contract ERC20Token {\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint256 balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\n', '    function transfer(address to, uint256 tokens) public returns (bool success);\n', '    function approve(address spender, uint256 tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '}\n', '\n', 'contract Owned {\n', '    address owner;\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) onlyOwner public returns (bool success) {\n', '        require (newOwner != address(0));\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract ECToken is ERC20Token, Owned {\n', '    using SafeMath for uint256;\n', '    \n', '    constructor() public {\n', '        symbol = "EC";\n', '        name = "ElephantChain";\n', '        decimals = 8;\n', '        totalSupply = 21000000 * 10 ** uint256(decimals);\n', '        \n', '        balances[owner] = totalSupply;\n', '        emit Transfer(address(0), owner, totalSupply);\n', '    }\n', '\n', '    //ERC20Token\n', '    function balanceOf(address tokenOwner) public view returns (uint256 balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint256 tokens) public returns (bool success) {\n', '        _transfer(msg.sender,to,tokens);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint256 tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '    //end ERC20Token\n', '    \n', '    //frozenAccount\n', '    mapping (address => bool) public frozenAccount;\n', '    event FrozenFunds(address target, bool frozen);\n', '    \n', '    function freezeAccount(address target) onlyOwner public returns (bool success) {\n', '        require (target != address(0));\n', '        frozenAccount[target] = true;\n', '        emit FrozenFunds(target, true);\n', '        return true;\n', '    }\n', '    \n', '\tfunction unfreezeAccount(address target) onlyOwner public returns (bool success) {\n', '\t    require (target != address(0));\n', '        frozenAccount[target] = false;\n', '        emit FrozenFunds(target, false);\n', '        return true;\n', '    }\n', '    //end frozenAccount\n', '    \n', '    function increaseSupply(uint256 tokens) onlyOwner public returns (bool success) {\n', '        require(tokens > 0);\n', '        totalSupply = totalSupply.add(tokens);\n', '        balances[owner] = balances[owner].add(tokens);\n', '        _transfer(msg.sender, owner, tokens);\n', '        return true;\n', '    }\n', '\n', '    function decreaseSupply(uint256 tokens) onlyOwner public returns (bool success) {\n', '        require(tokens > 0);\n', '        require(balances[owner] >= tokens);\n', '        balances[owner] = balances[owner].sub(tokens);\n', '        totalSupply = totalSupply.sub(tokens);\n', '        _transfer(owner, msg.sender, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function _transfer(address spender, address target, uint256 tokens) private {\n', '        require (target != address(0));\n', '        require(tokens > 0);\n', '        require (balances[spender] >= tokens);\n', '        require (balances[target].add(tokens) >= balances[target]);\n', '        require(!frozenAccount[spender]);\n', '        require(!frozenAccount[target]);\n', '        uint256 previousBalances = balances[spender].add(balances[target]);\n', '        balances[spender] = balances[spender].sub(tokens);\n', '        balances[target] = balances[target].add(tokens);\n', '        emit Transfer(spender, target, tokens);\n', '        assert(balances[spender].add(balances[target]) == previousBalances);\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}']
