['pragma solidity 0.4.24;\n', '  \n', '//@title WitToken\n', '//@author(<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d6baa3b9afa3b7b8a7e4e5e596b1bbb7bfbaf8b5b9bb">[email&#160;protected]</a>) \n', '//@dev 该合约参考自openzeppelin的erc20实现\n', '//1.使用openzeppelin的SafeMath库防止运算溢出\n', '//2.使用openzeppelin的Ownable,Roles,RBAC来做权限控制,自定义了ceo,coo,cro等角色  \n', '//3.ERC20扩展了ERC20Basic，实现了授权转移\n', '//4.BasicToken,StandardToken,PausableToken均是erc20的具体实现\n', '//5.BlackListToken加入黑名单方法\n', '//6.TwoPhaseToken可以发行和赎回资产,并采用经办复核的二阶段提交\n', '//7.UpgradedStandardToken参考自TetherUSD合约,可以在另一个合约升级erc20的方法\n', '//8.可以设置交易的手续费率\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '   constructor() public {\n', '      owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '  /**\n', ' * @title Roles\n', ' * @author Francisco Giordano (@frangio)\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' *      See RBAC.sol for example usage.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an address access to this role\n', '   */\n', '  function add(Role storage role, address addr) internal {\n', '    role.bearer[addr] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address&#39; access to this role\n', '   */\n', '  function remove(Role storage role, address addr) internal {\n', '    role.bearer[addr] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * // reverts\n', '   */\n', '  function check(Role storage role, address addr) view internal {\n', '    require(has(role, addr));\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address addr) view internal returns (bool) {\n', '    return role.bearer[addr];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title RBAC (Role-Based Access Control)\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev Stores and provides setters and getters for roles and addresses.\n', ' *      Supports unlimited numbers of roles and addresses.\n', ' *      See //contracts/mocks/RBACMock.sol for an example of usage.\n', ' * This RBAC method uses strings to key roles. It may be beneficial\n', ' *  for you to write your own implementation of this interface using Enums or similar.\n', ' * It&#39;s also recommended that you define constants in the contract, like ROLE_ADMIN below,\n', ' *  to avoid typos.\n', ' */\n', 'contract RBAC is Ownable {\n', '  using Roles for Roles.Role;\n', '\n', '  mapping (string => Roles.Role) private roles;\n', '\n', '  event RoleAdded(address addr, string roleName);\n', '  event RoleRemoved(address addr, string roleName);\n', '\n', '  /**\n', '   * A constant role name for indicating admins.\n', '   */\n', '  string public constant ROLE_CEO = "ceo";\n', '  string public constant ROLE_COO = "coo";//运营\n', '  string public constant ROLE_CRO = "cro";//风控\n', '  string public constant ROLE_MANAGER = "manager";//经办员\n', '  string public constant ROLE_REVIEWER = "reviewer";//审核员\n', '  \n', '  /**\n', '   * @dev constructor. Sets msg.sender as ceo by default\n', '   */\n', '  constructor() public{\n', '    addRole(msg.sender, ROLE_CEO);\n', '  }\n', '  \n', '  /**\n', '   * @dev reverts if addr does not have role\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   * // reverts\n', '   */\n', '  function checkRole(address addr, string roleName) view internal {\n', '    roles[roleName].check(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev determine if addr has role\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   * @return bool\n', '   */\n', '  function hasRole(address addr, string roleName) view public returns (bool) {\n', '    return roles[roleName].has(addr);\n', '  }\n', '\n', '  function ownerAddCeo(address addr) onlyOwner public {\n', '    addRole(addr, ROLE_CEO);\n', '  }\n', '  \n', '  function ownerRemoveCeo(address addr) onlyOwner public{\n', '    removeRole(addr, ROLE_CEO);\n', '  }\n', '\n', '  function ceoAddCoo(address addr) onlyCEO public {\n', '    addRole(addr, ROLE_COO);\n', '  }\n', '  \n', '  function ceoRemoveCoo(address addr) onlyCEO public{\n', '    removeRole(addr, ROLE_COO);\n', '  }\n', '  \n', '  function cooAddManager(address addr) onlyCOO public {\n', '    addRole(addr, ROLE_MANAGER);\n', '  }\n', '  \n', '  function cooRemoveManager(address addr) onlyCOO public {\n', '    removeRole(addr, ROLE_MANAGER);\n', '  }\n', '  \n', '  function cooAddReviewer(address addr) onlyCOO public {\n', '    addRole(addr, ROLE_REVIEWER);\n', '  }\n', '  \n', '  function cooRemoveReviewer(address addr) onlyCOO public {\n', '    removeRole(addr, ROLE_REVIEWER);\n', '  }\n', '  \n', '  function cooAddCro(address addr) onlyCOO public {\n', '    addRole(addr, ROLE_CRO);\n', '  }\n', '  \n', '  function cooRemoveCro(address addr) onlyCOO public {\n', '    removeRole(addr, ROLE_CRO);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function addRole(address addr, string roleName) internal {\n', '    roles[roleName].add(addr);\n', '    emit RoleAdded(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function removeRole(address addr, string roleName) internal {\n', '    roles[roleName].remove(addr);\n', '    emit RoleRemoved(addr, roleName);\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev modifier to scope access to ceo\n', '   * // reverts\n', '   */\n', '  modifier onlyCEO() {\n', '    checkRole(msg.sender, ROLE_CEO);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to coo\n', '   * // reverts\n', '   */\n', '  modifier onlyCOO() {\n', '    checkRole(msg.sender, ROLE_COO);\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev modifier to scope access to cro\n', '   * // reverts\n', '   */\n', '  modifier onlyCRO() {\n', '    checkRole(msg.sender, ROLE_CRO);\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev modifier to scope access to manager\n', '   * // reverts\n', '   */\n', '  modifier onlyMANAGER() {\n', '    checkRole(msg.sender, ROLE_MANAGER);\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev modifier to scope access to reviewer\n', '   * // reverts\n', '   */\n', '  modifier onlyREVIEWER() {\n', '    checkRole(msg.sender, ROLE_REVIEWER);\n', '    _;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * \n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic, RBAC {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '  \n', '  uint256 public basisPointsRate;//手续费率 \n', '  uint256 public maximumFee;//最大手续费 \n', '  address public assetOwner;//收取的手续费和增发的资产都到这个地址上, 赎回资产时会从这个地址销毁资产 \n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    uint256 fee = (_value.mul(basisPointsRate)).div(10000);\n', '    if (fee > maximumFee) {\n', '        fee = maximumFee;\n', '    }\n', '    uint256 sendAmount = _value.sub(fee);\n', '    \n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(sendAmount);\n', '    if (fee > 0) {\n', '        balances[assetOwner] = balances[assetOwner].add(fee);\n', '        emit Transfer(msg.sender, assetOwner, fee);\n', '    }\n', '    \n', '    emit Transfer(msg.sender, _to, sendAmount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken  {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    uint256 fee = (_value.mul(basisPointsRate)).div(10000);\n', '        if (fee > maximumFee) {\n', '            fee = maximumFee;\n', '        }\n', '    uint256 sendAmount = _value.sub(fee);\n', '    \n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(sendAmount);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    if (fee > 0) {\n', '            balances[assetOwner] = balances[assetOwner].add(fee);\n', '            emit Transfer(_from, assetOwner, fee);\n', '        }\n', '    emit Transfer(_from, _to, sendAmount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is RBAC {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the ceo to pause, triggers stopped state\n', '   */\n', '  function pause() onlyCEO whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the ceo to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyCEO whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '\n', 'contract BlackListToken is PausableToken  {\n', '\n', '  \n', '    function getBlackListStatus(address _maker) external view returns (bool) {\n', '        return isBlackListed[_maker];\n', '    }\n', '\n', '    mapping (address => bool) public isBlackListed;\n', '    \n', '    function addBlackList (address _evilUser) public onlyCRO {\n', '        isBlackListed[_evilUser] = true;\n', '        emit AddedBlackList(_evilUser);\n', '    }\n', '\n', '    function removeBlackList (address _clearedUser) public onlyCRO {\n', '        isBlackListed[_clearedUser] = false;\n', '        emit RemovedBlackList(_clearedUser);\n', '    }\n', '\n', '    function destroyBlackFunds (address _blackListedUser) public onlyCEO {\n', '        require(isBlackListed[_blackListedUser]);\n', '        uint dirtyFunds = balanceOf(_blackListedUser);\n', '        balances[_blackListedUser] = 0;\n', '        totalSupply_ = totalSupply_.sub(dirtyFunds);\n', '        emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);\n', '    }\n', '\n', '    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\n', '\n', '    event AddedBlackList(address _user);\n', '\n', '    event RemovedBlackList(address _user);\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', '* 增发和赎回token由经办人和复核人配合完成\n', '* 1.由经办人角色先执行submitIssue或submitRedeem;\n', '* 2.复核人角色再来执行comfirmIsses或comfirmRedeem;\n', '* 3.两者提交的参数一致，则增发和赎回才能成功\n', '* 4.经办人提交数据后，复核人执行成功后，需要经办人再次提交才能再次执行\n', '**/\n', 'contract TwoPhaseToken is BlackListToken{\n', '    \n', '    //保存经办人提交的参数\n', '    struct MethodParam {\n', '        string method; //方法名\n', '        uint value;  //增发或者赎回的数量\n', '        bool state;  //true表示经办人有提交数据,复核人执行成功后变为false\n', '    }\n', '    \n', '    mapping (string => MethodParam) params;\n', '    \n', '    //方法名常量 \n', '    string public constant ISSUE_METHOD = "issue";\n', '    string public constant REDEEM_METHOD = "redeem";\n', '    \n', '    \n', '    //经办人提交增发数量\n', '    function submitIssue(uint _value) public onlyMANAGER {\n', '        params[ISSUE_METHOD] = MethodParam(ISSUE_METHOD, _value, true);\n', '        emit SubmitIsses(msg.sender,_value);\n', '    }\n', '    \n', '    //复核人第二次确认增发数量并执行\n', '    function comfirmIsses(uint _value) public onlyREVIEWER {\n', '       \n', '        require(params[ISSUE_METHOD].value == _value);\n', '        require(params[ISSUE_METHOD].state == true);\n', '        \n', '        balances[assetOwner]=balances[assetOwner].add(_value);\n', '        totalSupply_ = totalSupply_.add(_value);\n', '        params[ISSUE_METHOD].state=false; \n', '        emit ComfirmIsses(msg.sender,_value);\n', '    }\n', '    \n', '    //经办人提交赎回数量\n', '    function submitRedeem(uint _value) public onlyMANAGER {\n', '        params[REDEEM_METHOD] = MethodParam(REDEEM_METHOD, _value, true);\n', '         emit SubmitRedeem(msg.sender,_value);\n', '    }\n', '    \n', '    //复核人第二次确认赎回数量并执行\n', '    function comfirmRedeem(uint _value) public onlyREVIEWER {\n', '       \n', '       require(params[REDEEM_METHOD].value == _value);\n', '       require(params[REDEEM_METHOD].state == true);\n', '       \n', '       balances[assetOwner]=balances[assetOwner].sub(_value);\n', '       totalSupply_ = totalSupply_.sub(_value);\n', '       params[REDEEM_METHOD].state=false;\n', '       emit ComfirmIsses(msg.sender,_value);\n', '    }\n', '    \n', '    //根据方法名，查看经办人提交的参数\n', '    function getMethodValue(string _method) public view returns(uint){\n', '        return params[_method].value;\n', '    }\n', '    \n', '    //根据方法名，查看经办人是否有提交数据\n', '    function getMethodState(string _method) public view returns(bool) {\n', '      return params[_method].state;\n', '    }\n', '   \n', '     event SubmitRedeem(address submit, uint _value);\n', '     event ComfirmRedeem(address comfirm, uint _value);\n', '     event SubmitIsses(address submit, uint _value);\n', '     event ComfirmIsses(address comfirm, uint _value);\n', '\n', '    \n', '}\n', '\n', '\n', '\n', 'contract UpgradedStandardToken {\n', '    // those methods are called by the legacy contract\n', '    function totalSupplyByLegacy() public view returns (uint256);\n', '    function balanceOfByLegacy(address who) public view returns (uint256);\n', '    function transferByLegacy(address origSender, address to, uint256 value) public returns (bool);\n', '    function allowanceByLegacy(address owner, address spender) public view returns (uint256);\n', '    function transferFromByLegacy(address origSender, address from, address to, uint256 value) public returns (bool);\n', '    function approveByLegacy(address origSender, address spender, uint256 value) public returns (bool);\n', '    function increaseApprovalByLegacy(address origSender, address spender, uint addedValue) public returns (bool);\n', '    function decreaseApprovalByLegacy(address origSende, address spender, uint subtractedValue) public returns (bool);\n', '}\n', '\n', '\n', '\n', '\n', 'contract WitToken is TwoPhaseToken {\n', '    string  public  constant name = "Wealth in Token";\n', '    string  public  constant symbol = "WIT";\n', '    uint8   public  constant decimals = 18;\n', '    address public upgradedAddress;\n', '    bool public deprecated;\n', '\n', '    modifier validDestination( address to ) {\n', '        require(to != address(0x0));\n', '        require(to != address(this));\n', '        _;\n', '    }\n', '\n', '    constructor ( uint _totalTokenAmount ) public {\n', '        basisPointsRate = 0;\n', '        maximumFee = 0;\n', '        totalSupply_ = _totalTokenAmount;\n', '        balances[msg.sender] = _totalTokenAmount;\n', '        deprecated = false;\n', '        assetOwner = msg.sender;\n', '        emit Transfer(address(0x0), msg.sender, _totalTokenAmount);\n', '    }\n', '    \n', '    \n', '    \n', '     // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '     function totalSupply() public view returns (uint256) {\n', '         if (deprecated) {\n', '            return UpgradedStandardToken(upgradedAddress).totalSupplyByLegacy();\n', '        } else {\n', '            return totalSupply_;\n', '        }\n', '    }\n', '    \n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '         if (deprecated) {\n', '            return UpgradedStandardToken(upgradedAddress).balanceOfByLegacy( _owner);\n', '        } else {\n', '           return super.balanceOf(_owner);\n', '        }\n', '    }\n', '\n', '    \n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function transfer(address _to, uint _value) public validDestination(_to) returns (bool) {\n', '        require(!isBlackListed[msg.sender]);\n', '        if (deprecated) {\n', '            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\n', '        } else {\n', '            return super.transfer(_to, _value);\n', '        }\n', '        \n', '    }\n', '\n', '\n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        if (deprecated) {\n', '            return UpgradedStandardToken(upgradedAddress).allowanceByLegacy(_owner, _spender);\n', '        } else {\n', '           return super.allowance(_owner, _spender);\n', '        }\n', '        \n', '    }\n', '\n', '\n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function transferFrom(address _from, address _to, uint _value) public validDestination(_to) returns (bool) {\n', '        require(!isBlackListed[_from]);\n', '        if (deprecated) {\n', '            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\n', '        } else {\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '       \n', '    }\n', '    \n', '    \n', '     // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '     function approve(address _spender, uint256 _value) public returns (bool) {\n', '          if (deprecated) {\n', '            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\n', '        } else {\n', '            return super.approve(_spender, _value);\n', '        } \n', '    }\n', '    \n', '    \n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function increaseApproval(address _spender, uint _value) public returns (bool) {\n', '         if (deprecated) {\n', '            return UpgradedStandardToken(upgradedAddress).increaseApprovalByLegacy(msg.sender, _spender, _value);\n', '        } else {\n', '            return super.increaseApproval(_spender, _value);\n', '        } \n', '    }\n', '\n', '\n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function decreaseApproval(address _spender, uint _value) public returns (bool) {\n', '        if (deprecated) {\n', '            return UpgradedStandardToken(upgradedAddress).decreaseApprovalByLegacy(msg.sender, _spender, _value);\n', '        } else {\n', '            return super.decreaseApproval(_spender, _value);\n', '        } \n', '   }\n', '   \n', '   \n', '    // deprecate current contract in favour of a new one\n', '    function deprecate(address _upgradedAddress) public onlyCEO whenPaused {\n', '        deprecated = true;\n', '        upgradedAddress = _upgradedAddress;\n', '        emit Deprecate(_upgradedAddress);\n', '    }\n', '    \n', '    // Called when contract is deprecated\n', '    event Deprecate(address newAddress);\n', '    \n', '    \n', '   /**\n', '   * @dev Set up transaction fees\n', '   * @param newBasisPoints  A few ten-thousandth (设置手续费率为万分之几)\n', '   * @param newMaxFee Maximum fee (设置最大手续费,不需要添加decimals)\n', '   */\n', '    function setFeeParams(uint newBasisPoints, uint newMaxFee) public onlyCEO {\n', '       \n', '        basisPointsRate = newBasisPoints;\n', '        maximumFee = newMaxFee.mul(uint(10)**decimals);\n', '        emit FeeParams(basisPointsRate, maximumFee);\n', '    }\n', '    \n', '\n', '    function transferAssetOwner(address newAssetOwner) public onlyCEO {\n', '      require(newAssetOwner != address(0));\n', '      assetOwner = newAssetOwner;\n', '      emit TransferAssetOwner(assetOwner, newAssetOwner);\n', '    }\n', '    \n', '    event TransferAssetOwner(address assetOwner, address newAssetOwner);\n', '    \n', '     // Called if contract ever adds fees\n', '    event FeeParams(uint feeBasisPoints, uint maxFee);\n', '    \n', '    \n', '    \n', '\n', '}']
['pragma solidity 0.4.24;\n', '  \n', '//@title WitToken\n', '//@author(luoyuanq233@gmail.com) \n', '//@dev 该合约参考自openzeppelin的erc20实现\n', '//1.使用openzeppelin的SafeMath库防止运算溢出\n', '//2.使用openzeppelin的Ownable,Roles,RBAC来做权限控制,自定义了ceo,coo,cro等角色  \n', '//3.ERC20扩展了ERC20Basic，实现了授权转移\n', '//4.BasicToken,StandardToken,PausableToken均是erc20的具体实现\n', '//5.BlackListToken加入黑名单方法\n', '//6.TwoPhaseToken可以发行和赎回资产,并采用经办复核的二阶段提交\n', '//7.UpgradedStandardToken参考自TetherUSD合约,可以在另一个合约升级erc20的方法\n', '//8.可以设置交易的手续费率\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '   constructor() public {\n', '      owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '  /**\n', ' * @title Roles\n', ' * @author Francisco Giordano (@frangio)\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' *      See RBAC.sol for example usage.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an address access to this role\n', '   */\n', '  function add(Role storage role, address addr) internal {\n', '    role.bearer[addr] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an address' access to this role\n", '   */\n', '  function remove(Role storage role, address addr) internal {\n', '    role.bearer[addr] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * // reverts\n', '   */\n', '  function check(Role storage role, address addr) view internal {\n', '    require(has(role, addr));\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address addr) view internal returns (bool) {\n', '    return role.bearer[addr];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title RBAC (Role-Based Access Control)\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev Stores and provides setters and getters for roles and addresses.\n', ' *      Supports unlimited numbers of roles and addresses.\n', ' *      See //contracts/mocks/RBACMock.sol for an example of usage.\n', ' * This RBAC method uses strings to key roles. It may be beneficial\n', ' *  for you to write your own implementation of this interface using Enums or similar.\n', " * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\n", ' *  to avoid typos.\n', ' */\n', 'contract RBAC is Ownable {\n', '  using Roles for Roles.Role;\n', '\n', '  mapping (string => Roles.Role) private roles;\n', '\n', '  event RoleAdded(address addr, string roleName);\n', '  event RoleRemoved(address addr, string roleName);\n', '\n', '  /**\n', '   * A constant role name for indicating admins.\n', '   */\n', '  string public constant ROLE_CEO = "ceo";\n', '  string public constant ROLE_COO = "coo";//运营\n', '  string public constant ROLE_CRO = "cro";//风控\n', '  string public constant ROLE_MANAGER = "manager";//经办员\n', '  string public constant ROLE_REVIEWER = "reviewer";//审核员\n', '  \n', '  /**\n', '   * @dev constructor. Sets msg.sender as ceo by default\n', '   */\n', '  constructor() public{\n', '    addRole(msg.sender, ROLE_CEO);\n', '  }\n', '  \n', '  /**\n', '   * @dev reverts if addr does not have role\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   * // reverts\n', '   */\n', '  function checkRole(address addr, string roleName) view internal {\n', '    roles[roleName].check(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev determine if addr has role\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   * @return bool\n', '   */\n', '  function hasRole(address addr, string roleName) view public returns (bool) {\n', '    return roles[roleName].has(addr);\n', '  }\n', '\n', '  function ownerAddCeo(address addr) onlyOwner public {\n', '    addRole(addr, ROLE_CEO);\n', '  }\n', '  \n', '  function ownerRemoveCeo(address addr) onlyOwner public{\n', '    removeRole(addr, ROLE_CEO);\n', '  }\n', '\n', '  function ceoAddCoo(address addr) onlyCEO public {\n', '    addRole(addr, ROLE_COO);\n', '  }\n', '  \n', '  function ceoRemoveCoo(address addr) onlyCEO public{\n', '    removeRole(addr, ROLE_COO);\n', '  }\n', '  \n', '  function cooAddManager(address addr) onlyCOO public {\n', '    addRole(addr, ROLE_MANAGER);\n', '  }\n', '  \n', '  function cooRemoveManager(address addr) onlyCOO public {\n', '    removeRole(addr, ROLE_MANAGER);\n', '  }\n', '  \n', '  function cooAddReviewer(address addr) onlyCOO public {\n', '    addRole(addr, ROLE_REVIEWER);\n', '  }\n', '  \n', '  function cooRemoveReviewer(address addr) onlyCOO public {\n', '    removeRole(addr, ROLE_REVIEWER);\n', '  }\n', '  \n', '  function cooAddCro(address addr) onlyCOO public {\n', '    addRole(addr, ROLE_CRO);\n', '  }\n', '  \n', '  function cooRemoveCro(address addr) onlyCOO public {\n', '    removeRole(addr, ROLE_CRO);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function addRole(address addr, string roleName) internal {\n', '    roles[roleName].add(addr);\n', '    emit RoleAdded(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function removeRole(address addr, string roleName) internal {\n', '    roles[roleName].remove(addr);\n', '    emit RoleRemoved(addr, roleName);\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev modifier to scope access to ceo\n', '   * // reverts\n', '   */\n', '  modifier onlyCEO() {\n', '    checkRole(msg.sender, ROLE_CEO);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to coo\n', '   * // reverts\n', '   */\n', '  modifier onlyCOO() {\n', '    checkRole(msg.sender, ROLE_COO);\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev modifier to scope access to cro\n', '   * // reverts\n', '   */\n', '  modifier onlyCRO() {\n', '    checkRole(msg.sender, ROLE_CRO);\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev modifier to scope access to manager\n', '   * // reverts\n', '   */\n', '  modifier onlyMANAGER() {\n', '    checkRole(msg.sender, ROLE_MANAGER);\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev modifier to scope access to reviewer\n', '   * // reverts\n', '   */\n', '  modifier onlyREVIEWER() {\n', '    checkRole(msg.sender, ROLE_REVIEWER);\n', '    _;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * \n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic, RBAC {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '  \n', '  uint256 public basisPointsRate;//手续费率 \n', '  uint256 public maximumFee;//最大手续费 \n', '  address public assetOwner;//收取的手续费和增发的资产都到这个地址上, 赎回资产时会从这个地址销毁资产 \n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    uint256 fee = (_value.mul(basisPointsRate)).div(10000);\n', '    if (fee > maximumFee) {\n', '        fee = maximumFee;\n', '    }\n', '    uint256 sendAmount = _value.sub(fee);\n', '    \n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(sendAmount);\n', '    if (fee > 0) {\n', '        balances[assetOwner] = balances[assetOwner].add(fee);\n', '        emit Transfer(msg.sender, assetOwner, fee);\n', '    }\n', '    \n', '    emit Transfer(msg.sender, _to, sendAmount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken  {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    uint256 fee = (_value.mul(basisPointsRate)).div(10000);\n', '        if (fee > maximumFee) {\n', '            fee = maximumFee;\n', '        }\n', '    uint256 sendAmount = _value.sub(fee);\n', '    \n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(sendAmount);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    if (fee > 0) {\n', '            balances[assetOwner] = balances[assetOwner].add(fee);\n', '            emit Transfer(_from, assetOwner, fee);\n', '        }\n', '    emit Transfer(_from, _to, sendAmount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is RBAC {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the ceo to pause, triggers stopped state\n', '   */\n', '  function pause() onlyCEO whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the ceo to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyCEO whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '\n', 'contract BlackListToken is PausableToken  {\n', '\n', '  \n', '    function getBlackListStatus(address _maker) external view returns (bool) {\n', '        return isBlackListed[_maker];\n', '    }\n', '\n', '    mapping (address => bool) public isBlackListed;\n', '    \n', '    function addBlackList (address _evilUser) public onlyCRO {\n', '        isBlackListed[_evilUser] = true;\n', '        emit AddedBlackList(_evilUser);\n', '    }\n', '\n', '    function removeBlackList (address _clearedUser) public onlyCRO {\n', '        isBlackListed[_clearedUser] = false;\n', '        emit RemovedBlackList(_clearedUser);\n', '    }\n', '\n', '    function destroyBlackFunds (address _blackListedUser) public onlyCEO {\n', '        require(isBlackListed[_blackListedUser]);\n', '        uint dirtyFunds = balanceOf(_blackListedUser);\n', '        balances[_blackListedUser] = 0;\n', '        totalSupply_ = totalSupply_.sub(dirtyFunds);\n', '        emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);\n', '    }\n', '\n', '    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\n', '\n', '    event AddedBlackList(address _user);\n', '\n', '    event RemovedBlackList(address _user);\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', '* 增发和赎回token由经办人和复核人配合完成\n', '* 1.由经办人角色先执行submitIssue或submitRedeem;\n', '* 2.复核人角色再来执行comfirmIsses或comfirmRedeem;\n', '* 3.两者提交的参数一致，则增发和赎回才能成功\n', '* 4.经办人提交数据后，复核人执行成功后，需要经办人再次提交才能再次执行\n', '**/\n', 'contract TwoPhaseToken is BlackListToken{\n', '    \n', '    //保存经办人提交的参数\n', '    struct MethodParam {\n', '        string method; //方法名\n', '        uint value;  //增发或者赎回的数量\n', '        bool state;  //true表示经办人有提交数据,复核人执行成功后变为false\n', '    }\n', '    \n', '    mapping (string => MethodParam) params;\n', '    \n', '    //方法名常量 \n', '    string public constant ISSUE_METHOD = "issue";\n', '    string public constant REDEEM_METHOD = "redeem";\n', '    \n', '    \n', '    //经办人提交增发数量\n', '    function submitIssue(uint _value) public onlyMANAGER {\n', '        params[ISSUE_METHOD] = MethodParam(ISSUE_METHOD, _value, true);\n', '        emit SubmitIsses(msg.sender,_value);\n', '    }\n', '    \n', '    //复核人第二次确认增发数量并执行\n', '    function comfirmIsses(uint _value) public onlyREVIEWER {\n', '       \n', '        require(params[ISSUE_METHOD].value == _value);\n', '        require(params[ISSUE_METHOD].state == true);\n', '        \n', '        balances[assetOwner]=balances[assetOwner].add(_value);\n', '        totalSupply_ = totalSupply_.add(_value);\n', '        params[ISSUE_METHOD].state=false; \n', '        emit ComfirmIsses(msg.sender,_value);\n', '    }\n', '    \n', '    //经办人提交赎回数量\n', '    function submitRedeem(uint _value) public onlyMANAGER {\n', '        params[REDEEM_METHOD] = MethodParam(REDEEM_METHOD, _value, true);\n', '         emit SubmitRedeem(msg.sender,_value);\n', '    }\n', '    \n', '    //复核人第二次确认赎回数量并执行\n', '    function comfirmRedeem(uint _value) public onlyREVIEWER {\n', '       \n', '       require(params[REDEEM_METHOD].value == _value);\n', '       require(params[REDEEM_METHOD].state == true);\n', '       \n', '       balances[assetOwner]=balances[assetOwner].sub(_value);\n', '       totalSupply_ = totalSupply_.sub(_value);\n', '       params[REDEEM_METHOD].state=false;\n', '       emit ComfirmIsses(msg.sender,_value);\n', '    }\n', '    \n', '    //根据方法名，查看经办人提交的参数\n', '    function getMethodValue(string _method) public view returns(uint){\n', '        return params[_method].value;\n', '    }\n', '    \n', '    //根据方法名，查看经办人是否有提交数据\n', '    function getMethodState(string _method) public view returns(bool) {\n', '      return params[_method].state;\n', '    }\n', '   \n', '     event SubmitRedeem(address submit, uint _value);\n', '     event ComfirmRedeem(address comfirm, uint _value);\n', '     event SubmitIsses(address submit, uint _value);\n', '     event ComfirmIsses(address comfirm, uint _value);\n', '\n', '    \n', '}\n', '\n', '\n', '\n', 'contract UpgradedStandardToken {\n', '    // those methods are called by the legacy contract\n', '    function totalSupplyByLegacy() public view returns (uint256);\n', '    function balanceOfByLegacy(address who) public view returns (uint256);\n', '    function transferByLegacy(address origSender, address to, uint256 value) public returns (bool);\n', '    function allowanceByLegacy(address owner, address spender) public view returns (uint256);\n', '    function transferFromByLegacy(address origSender, address from, address to, uint256 value) public returns (bool);\n', '    function approveByLegacy(address origSender, address spender, uint256 value) public returns (bool);\n', '    function increaseApprovalByLegacy(address origSender, address spender, uint addedValue) public returns (bool);\n', '    function decreaseApprovalByLegacy(address origSende, address spender, uint subtractedValue) public returns (bool);\n', '}\n', '\n', '\n', '\n', '\n', 'contract WitToken is TwoPhaseToken {\n', '    string  public  constant name = "Wealth in Token";\n', '    string  public  constant symbol = "WIT";\n', '    uint8   public  constant decimals = 18;\n', '    address public upgradedAddress;\n', '    bool public deprecated;\n', '\n', '    modifier validDestination( address to ) {\n', '        require(to != address(0x0));\n', '        require(to != address(this));\n', '        _;\n', '    }\n', '\n', '    constructor ( uint _totalTokenAmount ) public {\n', '        basisPointsRate = 0;\n', '        maximumFee = 0;\n', '        totalSupply_ = _totalTokenAmount;\n', '        balances[msg.sender] = _totalTokenAmount;\n', '        deprecated = false;\n', '        assetOwner = msg.sender;\n', '        emit Transfer(address(0x0), msg.sender, _totalTokenAmount);\n', '    }\n', '    \n', '    \n', '    \n', '     // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '     function totalSupply() public view returns (uint256) {\n', '         if (deprecated) {\n', '            return UpgradedStandardToken(upgradedAddress).totalSupplyByLegacy();\n', '        } else {\n', '            return totalSupply_;\n', '        }\n', '    }\n', '    \n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '         if (deprecated) {\n', '            return UpgradedStandardToken(upgradedAddress).balanceOfByLegacy( _owner);\n', '        } else {\n', '           return super.balanceOf(_owner);\n', '        }\n', '    }\n', '\n', '    \n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function transfer(address _to, uint _value) public validDestination(_to) returns (bool) {\n', '        require(!isBlackListed[msg.sender]);\n', '        if (deprecated) {\n', '            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\n', '        } else {\n', '            return super.transfer(_to, _value);\n', '        }\n', '        \n', '    }\n', '\n', '\n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        if (deprecated) {\n', '            return UpgradedStandardToken(upgradedAddress).allowanceByLegacy(_owner, _spender);\n', '        } else {\n', '           return super.allowance(_owner, _spender);\n', '        }\n', '        \n', '    }\n', '\n', '\n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function transferFrom(address _from, address _to, uint _value) public validDestination(_to) returns (bool) {\n', '        require(!isBlackListed[_from]);\n', '        if (deprecated) {\n', '            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\n', '        } else {\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '       \n', '    }\n', '    \n', '    \n', '     // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '     function approve(address _spender, uint256 _value) public returns (bool) {\n', '          if (deprecated) {\n', '            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\n', '        } else {\n', '            return super.approve(_spender, _value);\n', '        } \n', '    }\n', '    \n', '    \n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function increaseApproval(address _spender, uint _value) public returns (bool) {\n', '         if (deprecated) {\n', '            return UpgradedStandardToken(upgradedAddress).increaseApprovalByLegacy(msg.sender, _spender, _value);\n', '        } else {\n', '            return super.increaseApproval(_spender, _value);\n', '        } \n', '    }\n', '\n', '\n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function decreaseApproval(address _spender, uint _value) public returns (bool) {\n', '        if (deprecated) {\n', '            return UpgradedStandardToken(upgradedAddress).decreaseApprovalByLegacy(msg.sender, _spender, _value);\n', '        } else {\n', '            return super.decreaseApproval(_spender, _value);\n', '        } \n', '   }\n', '   \n', '   \n', '    // deprecate current contract in favour of a new one\n', '    function deprecate(address _upgradedAddress) public onlyCEO whenPaused {\n', '        deprecated = true;\n', '        upgradedAddress = _upgradedAddress;\n', '        emit Deprecate(_upgradedAddress);\n', '    }\n', '    \n', '    // Called when contract is deprecated\n', '    event Deprecate(address newAddress);\n', '    \n', '    \n', '   /**\n', '   * @dev Set up transaction fees\n', '   * @param newBasisPoints  A few ten-thousandth (设置手续费率为万分之几)\n', '   * @param newMaxFee Maximum fee (设置最大手续费,不需要添加decimals)\n', '   */\n', '    function setFeeParams(uint newBasisPoints, uint newMaxFee) public onlyCEO {\n', '       \n', '        basisPointsRate = newBasisPoints;\n', '        maximumFee = newMaxFee.mul(uint(10)**decimals);\n', '        emit FeeParams(basisPointsRate, maximumFee);\n', '    }\n', '    \n', '\n', '    function transferAssetOwner(address newAssetOwner) public onlyCEO {\n', '      require(newAssetOwner != address(0));\n', '      assetOwner = newAssetOwner;\n', '      emit TransferAssetOwner(assetOwner, newAssetOwner);\n', '    }\n', '    \n', '    event TransferAssetOwner(address assetOwner, address newAssetOwner);\n', '    \n', '     // Called if contract ever adds fees\n', '    event FeeParams(uint feeBasisPoints, uint maxFee);\n', '    \n', '    \n', '    \n', '\n', '}']
