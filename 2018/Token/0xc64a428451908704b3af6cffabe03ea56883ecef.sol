['pragma solidity ^0.4.16;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '    OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract VitManToken is Ownable {\n', '    using SafeMath for uint256;\n', '     \n', '    string public constant name       = "VitMan";\n', '    string public constant symbol     = "VITMAN";\n', '    uint32 public constant decimals   = 18;\n', '    \n', '    uint256 public totalSupply        = 100000000000 ether;\n', '    uint256 public currentTotalSupply = 0;\n', '    uint256 public startBalance       = 2018 ether;\n', '\n', '    \n', '    mapping(address => bool) touched;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '     \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '  \n', '    function _touched(address _address) internal returns(bool) {\n', '         if( !touched[_address] && _address!=owner){\n', '            balances[_address] = balances[_address].add( startBalance );\n', '            currentTotalSupply = currentTotalSupply.add( startBalance );\n', '            touched[_address] = true;\n', '            return true;\n', '        }else{\n', '            return false;\n', '        }\n', '    }\n', '\n', '    \n', '    function VitManToken() public {\n', '        balances[msg.sender] = totalSupply; // Give the creator all initial tokens\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn&#39;t wrap.\n', '        //Replace the if with this one instead.\n', '        _touched(msg.sender);\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        //Same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        _touched(_from);\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) public returns (uint256 balance) {\n', '       _touched(_owner);\n', '         return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '          allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '          allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '     }\n', '     \n', '     function burn(uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);   \n', '        balances[msg.sender] -= _value;            \n', '        totalSupply -= _value;                      \n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public onlyOwner returns (bool success) {\n', '        require(balances[_from] >= _value);                \n', '        require(allowed[_from][msg.sender]>=_value);    \n', '        balances[_from] -= _value;                         \n', '        allowed[_from][msg.sender] -= _value;             \n', '        totalSupply -= _value;                              \n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '     function mint(address _target, uint256 _mintedAmount) onlyOwner public {\n', '        require(_target!=address(0));\n', '        balances[_target] += _mintedAmount;\n', '        totalSupply += _mintedAmount;\n', '        Transfer(0, this, _mintedAmount);\n', '        Transfer(this, _target, _mintedAmount);\n', '    }\n', ' \n', '     \n', '    function setStartBalance(uint256 _startBalance) onlyOwner public {\n', '        require(_startBalance>=0);\n', '        startBalance=_startBalance * 1 ether;\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '    OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract VitManToken is Ownable {\n', '    using SafeMath for uint256;\n', '     \n', '    string public constant name       = "VitMan";\n', '    string public constant symbol     = "VITMAN";\n', '    uint32 public constant decimals   = 18;\n', '    \n', '    uint256 public totalSupply        = 100000000000 ether;\n', '    uint256 public currentTotalSupply = 0;\n', '    uint256 public startBalance       = 2018 ether;\n', '\n', '    \n', '    mapping(address => bool) touched;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '     \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '  \n', '    function _touched(address _address) internal returns(bool) {\n', '         if( !touched[_address] && _address!=owner){\n', '            balances[_address] = balances[_address].add( startBalance );\n', '            currentTotalSupply = currentTotalSupply.add( startBalance );\n', '            touched[_address] = true;\n', '            return true;\n', '        }else{\n', '            return false;\n', '        }\n', '    }\n', '\n', '    \n', '    function VitManToken() public {\n', '        balances[msg.sender] = totalSupply; // Give the creator all initial tokens\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        _touched(msg.sender);\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        //Same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        _touched(_from);\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) public returns (uint256 balance) {\n', '       _touched(_owner);\n', '         return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '          allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '          allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '     }\n', '     \n', '     function burn(uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);   \n', '        balances[msg.sender] -= _value;            \n', '        totalSupply -= _value;                      \n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public onlyOwner returns (bool success) {\n', '        require(balances[_from] >= _value);                \n', '        require(allowed[_from][msg.sender]>=_value);    \n', '        balances[_from] -= _value;                         \n', '        allowed[_from][msg.sender] -= _value;             \n', '        totalSupply -= _value;                              \n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '     function mint(address _target, uint256 _mintedAmount) onlyOwner public {\n', '        require(_target!=address(0));\n', '        balances[_target] += _mintedAmount;\n', '        totalSupply += _mintedAmount;\n', '        Transfer(0, this, _mintedAmount);\n', '        Transfer(this, _target, _mintedAmount);\n', '    }\n', ' \n', '     \n', '    function setStartBalance(uint256 _startBalance) onlyOwner public {\n', '        require(_startBalance>=0);\n', '        startBalance=_startBalance * 1 ether;\n', '    }\n', '    \n', '}']
