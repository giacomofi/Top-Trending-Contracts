['pragma solidity ^0.4.18;\n', '    \n', '    \n', '    /**\n', '     * @title ERC20Basic\n', '     * @dev Simpler version of ERC20 interface\n', '     * @dev see https://github.com/ethereum/EIPs/issues/179\n', '     */\n', '    contract ERC20Basic {\n', '      function totalSupply() public view returns (uint256);\n', '      function balanceOf(address who) public view returns (uint256);\n', '      function transfer(address to, uint256 value) public returns (bool);\n', '      event Transfer(address indexed from, address indexed to, uint256 value);\n', '    }\n', '    \n', '    \n', '    \n', '    /**\n', '     * @title Ownable\n', '     * @dev The Ownable contract has an owner address, and provides basic authorization control\n', '     * functions, this simplifies the implementation of "user permissions".\n', '     */\n', '    contract Ownable {\n', '      address public owner;\n', '    \n', '    \n', '      event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    \n', '    \n', '      /**\n', '       * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '       * account.\n', '       */\n', '      function Ownable() public {\n', '        owner = msg.sender;\n', '      }\n', '    \n', '      /**\n', '       * @dev Throws if called by any account other than the owner.\n', '       */\n', '      modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '      }\n', '    \n', '      /**\n', '       * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '       * @param newOwner The address to transfer ownership to.\n', '       */\n', '      function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '      }\n', '    \n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    /**\n', '     * @title SafeMath\n', '     * @dev Math operations with safety checks that throw on error\n', '     */\n', '    library SafeMath {\n', '    \n', '      /**\n', '      * @dev Multiplies two numbers, throws on overflow.\n', '      */\n', '      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '      }\n', '    \n', '      /**\n', '      * @dev Integer division of two numbers, truncating the quotient.\n', '      */\n', '      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '      }\n', '    \n', '      /**\n', '      * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '      */\n', '      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '      }\n', '    \n', '      /**\n', '      * @dev Adds two numbers, throws on overflow.\n', '      */\n', '      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '      }\n', '    }\n', '    \n', '    \n', '    \n', '    /**\n', '     * @title Crowdsale\n', '     * @dev Crowdsale is a base contract for managing a token crowdsale.\n', '     * Crowdsales have a start and end timestamps, where investors can make\n', '     * token purchases and the crowdsale will assign them tokens based\n', '     * on a token per ETH rate. Funds collected are forwarded to a wallet\n', '     * as they arrive.\n', '     */\n', '    contract Crowdsale is Ownable {\n', '        using SafeMath for uint256;\n', '    \n', '        // The token being sold\n', '        MintableToken public token;\n', '    \n', '        // start and end timestamps where investments are allowed (both inclusive)\n', '        uint256 public preIcoStartTime;\n', '        uint256 public icoStartTime;\n', '        uint256 public preIcoEndTime;\n', '        uint256 public icoEndTime;\n', '    \n', '        // address where funds are collected\n', '        address public wallet;\n', '    \n', '        // how many token units a buyer gets per wei\n', '        uint256 public preIcoRate;\n', '        uint256 public icoRate;\n', '    \n', '        // amount of raised money in wei\n', '        uint256 public weiRaised;\n', '    \n', '        /**\n', '         * event for token purchase logging\n', '         * @param purchaser who paid for the tokens\n', '         * @param beneficiary who got the tokens\n', '         * @param value weis paid for purchase\n', '         * @param amount amount of tokens purchased\n', '         */\n', '        event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    \n', '    \n', '        function Crowdsale(uint256 _preIcoStartTime, uint256 _preIcoEndTime, uint256 _preIcoRate, uint256 _icoStartTime, uint256 _icoEndTime, uint256 _icoRate, address _wallet) public {\n', '            require(_preIcoStartTime >= now);\n', '            require(_preIcoEndTime >= _preIcoStartTime);\n', '    \n', '            require(_icoStartTime >= _preIcoEndTime);\n', '            require(_icoEndTime >= _icoStartTime);\n', '    \n', '            require(_preIcoRate > 0);\n', '            require(_icoRate > 0);\n', '    \n', '            require(_wallet != address(0));\n', '    \n', '            token = createTokenContract();\n', '            preIcoStartTime = _preIcoStartTime;\n', '            icoStartTime = _icoStartTime;\n', '    \n', '            preIcoEndTime = _preIcoEndTime;\n', '            icoEndTime = _icoEndTime;\n', '    \n', '            preIcoRate = _preIcoRate;\n', '            icoRate = _icoRate;\n', '    \n', '            wallet = _wallet;\n', '        }\n', '    \n', '        // fallback function can be used to buy tokens\n', '        function () external payable {\n', '            buyTokens(msg.sender);\n', '        }\n', '    \n', '        // low level token purchase function\n', '        function buyTokens(address beneficiary) public payable {\n', '            require(beneficiary != address(0));\n', '            require(validPurchase());\n', '    \n', '            uint256 weiAmount = msg.value;\n', '    \n', '            // calculate token amount to be created\n', '            uint256 tokens = getTokenAmount(weiAmount);\n', '    \n', '            // update state\n', '            weiRaised = weiRaised.add(weiAmount);\n', '    \n', '            //send tokens to beneficiary.\n', '            token.mint(beneficiary, tokens);\n', '    \n', '            //send same amount of tokens to owner.\n', '            token.mint(wallet, tokens);\n', '    \n', '            TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    \n', '            forwardFunds();\n', '        }\n', '    \n', '        // @return true if pre-ico crowdsale event has ended\n', '        function preIcoHasEnded() public view returns (bool) {\n', '            return now > preIcoEndTime;\n', '        }\n', '    \n', '        // @return true if ico crowdsale event has ended\n', '        function icoHasEnded() public view returns (bool) {\n', '            return now > icoEndTime;\n', '        }\n', '    \n', '        // creates the token to be sold.\n', '        // override this method to have crowdsale of a specific mintable token.\n', '        function createTokenContract() internal returns (MintableToken) {\n', '            return new MintableToken();\n', '        }\n', '    \n', '        // Override this method to have a way to add business logic to your crowdsale when buying\n', '        function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '            if(!preIcoHasEnded()){\n', '                return weiAmount.mul(preIcoRate);\n', '            }else{\n', '                return weiAmount.mul(icoRate);\n', '            }\n', '        }\n', '    \n', '        // send ether to the fund collection wallet\n', '        // override to create custom fund forwarding mechanisms\n', '        function forwardFunds() internal {\n', '            wallet.transfer(msg.value);\n', '        }\n', '    \n', '        // @return true if the transaction can buy tokens\n', '        function validPurchase() internal view returns (bool) {\n', '            bool withinPeriod = now >= preIcoStartTime && now <= preIcoEndTime || now >= icoStartTime && now <= icoEndTime;\n', '            bool nonZeroPurchase = msg.value != 0;\n', '            return withinPeriod && nonZeroPurchase;\n', '        }\n', '    \n', '        // allows transfer of token to new owner\n', '        function transferTokenOwnership(address _newOwner) public {\n', '            require(msg.sender == owner); // Only the owner of the crowdsale contract should be able to call this function.\n', '            //Now lets reference the token that we created....\n', '            token.transferOwnership(_newOwner);\n', '        }\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    /**\n', '     * @title ERC20 interface\n', '     * @dev see https://github.com/ethereum/EIPs/issues/20\n', '     */\n', '    contract ERC20 is ERC20Basic {\n', '      function allowance(address owner, address spender) public view returns (uint256);\n', '      function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '      function approve(address spender, uint256 value) public returns (bool);\n', '      event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    }\n', '    \n', '    /**\n', '     * @title Basic token\n', '     * @dev Basic version of StandardToken, with no allowances.\n', '     */\n', '    contract BasicToken is ERC20Basic {\n', '      using SafeMath for uint256;\n', '    \n', '      mapping(address => uint256) balances;\n', '    \n', '      uint256 totalSupply_;\n', '    \n', '      /**\n', '      * @dev total number of tokens in existence\n', '      */\n', '      function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '      }\n', '    \n', '      /**\n', '      * @dev transfer token for a specified address\n', '      * @param _to The address to transfer to.\n', '      * @param _value The amount to be transferred.\n', '      */\n', '      function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '    \n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      }\n', '    \n', '      /**\n', '      * @dev Gets the balance of the specified address.\n', '      * @param _owner The address to query the the balance of.\n', '      * @return An uint256 representing the amount owned by the passed address.\n', '      */\n', '      function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '      }\n', '    \n', '    }\n', '    \n', '    \n', '    /**\n', '     * @title Standard ERC20 token\n', '     *\n', '     * @dev Implementation of the basic standard token.\n', '     * @dev https://github.com/ethereum/EIPs/issues/20\n', '     * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', '     */\n', '    contract StandardToken is ERC20, BasicToken {\n', '    \n', '      mapping (address => mapping (address => uint256)) internal allowed;\n', '    \n', '    \n', '      /**\n', '       * @dev Transfer tokens from one address to another\n', '       * @param _from address The address which you want to send tokens from\n', '       * @param _to address The address which you want to transfer to\n', '       * @param _value uint256 the amount of tokens to be transferred\n', '       */\n', '      function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '    \n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      }\n', '    \n', '      /**\n', '       * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '       *\n', '       * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '       * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '       * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '       * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '       * @param _spender The address which will spend the funds.\n', '       * @param _value The amount of tokens to be spent.\n', '       */\n', '      function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '      }\n', '    \n', '      /**\n', '       * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '       * @param _owner address The address which owns the funds.\n', '       * @param _spender address The address which will spend the funds.\n', '       * @return A uint256 specifying the amount of tokens still available for the spender.\n', '       */\n', '      function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '      }\n', '    \n', '      /**\n', '       * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '       *\n', '       * approve should be called when allowed[_spender] == 0. To increment\n', '       * allowed value is better to use this function to avoid 2 calls (and wait until\n', '       * the first transaction is mined)\n', '       * From MonolithDAO Token.sol\n', '       * @param _spender The address which will spend the funds.\n', '       * @param _addedValue The amount of tokens to increase the allowance by.\n', '       */\n', '      function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '      }\n', '    \n', '      /**\n', '       * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '       *\n', '       * approve should be called when allowed[_spender] == 0. To decrement\n', '       * allowed value is better to use this function to avoid 2 calls (and wait until\n', '       * the first transaction is mined)\n', '       * From MonolithDAO Token.sol\n', '       * @param _spender The address which will spend the funds.\n', '       * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '       */\n', '      function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '          allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '          allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '      }\n', '    \n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    /**\n', '     * @title Mintable token\n', '     * @dev Simple ERC20 Token example, with mintable token creation\n', '     * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', '     * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', '     */\n', '    contract MintableToken is StandardToken, Ownable {\n', '      event Mint(address indexed to, uint256 amount);\n', '      event MintFinished();\n', '    \n', '      bool public mintingFinished = false;\n', '    \n', '    \n', '      modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '      }\n', '    \n', '      /**\n', '       * @dev Function to mint tokens\n', '       * @param _to The address that will receive the minted tokens.\n', '       * @param _amount The amount of tokens to mint.\n', '       * @return A boolean that indicates if the operation was successful.\n', '       */\n', '      function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '      }\n', '    \n', '      /**\n', '       * @dev Function to stop minting new tokens.\n', '       * @return True if the operation was successful.\n', '       */\n', '      function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '      }\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    /**\n', '     * @title Burnable Token\n', '     * @dev Token that can be irreversibly burned (destroyed).\n', '     */\n', '    contract BurnableToken is BasicToken {\n', '    \n', '      event Burn(address indexed burner, uint256 value);\n', '    \n', '      /**\n', '       * @dev Burns a specific amount of tokens.\n', '       * @param _value The amount of token to be burned.\n', '       */\n', '      function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '    \n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        Burn(burner, _value);\n', '      }\n', '    }\n', '    \n', '    \n', '    \n', '    /**\n', '     * @title SocialMediaIncomeCrowdsaleToken\n', '     * @dev ERC20 Token that can be minted.\n', '     * It is meant to be used in a crowdsale contract.\n', '     */\n', '    contract SocialMediaIncomeCrowdsaleToken is MintableToken, BurnableToken {\n', '    \n', '        string public constant name = "Social Media Income"; // solium-disable-line uppercase\n', '        string public constant symbol = "SMI"; // solium-disable-line uppercase\n', '        uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '    \n', '    }\n', '    \n', '    \n', '    /**\n', '     * @title SocialMediaIncomeCrowdsale\n', '     * @dev This is a fully fledged crowdsale.\n', '     * The way to add new features to a base crowdsale is by multiple inheritance.\n', '     *\n', '     * After adding multiple features it&#39;s good practice to run integration tests\n', '     * to ensure that subcontracts works together as intended.\n', '     */\n', '    contract SocialMediaIncomeCrowdsale is Crowdsale {\n', '    \n', '        function SocialMediaIncomeCrowdsale(uint256 _preIcoStartTime, uint256 _preIcoEndTime, uint256 _preIcoRate, uint256 _icoStartTime, uint256 _icoEndTime, uint256 _icoRate, address _wallet) public\n', '        Crowdsale(_preIcoStartTime, _preIcoEndTime, _preIcoRate, _icoStartTime, _icoEndTime, _icoRate, _wallet)\n', '        {\n', '    \n', '        }\n', '    \n', '        function createTokenContract() internal returns (MintableToken) {\n', '            return new SocialMediaIncomeCrowdsaleToken();\n', '        }\n', '    }']